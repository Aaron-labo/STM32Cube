
18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034fc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080036e0  080036e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003834  08003834  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003834  08003834  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003834  08003834  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003834  08003834  00013834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003838  08003838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800383c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000070  080038ac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080038ac  00020118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bacd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ba  00000000  00000000  0002bb66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0002dd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000718  00000000  00000000  0002e530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa22  00000000  00000000  0002ec48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097f0  00000000  00000000  0004966a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f90  00000000  00000000  00052e5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e4dea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002704  00000000  00000000  000e4e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080036c8 	.word	0x080036c8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080036c8 	.word	0x080036c8

08000224 <__aeabi_fmul>:
 8000224:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000228:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800022c:	bf1e      	ittt	ne
 800022e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000232:	ea92 0f0c 	teqne	r2, ip
 8000236:	ea93 0f0c 	teqne	r3, ip
 800023a:	d06f      	beq.n	800031c <__aeabi_fmul+0xf8>
 800023c:	441a      	add	r2, r3
 800023e:	ea80 0c01 	eor.w	ip, r0, r1
 8000242:	0240      	lsls	r0, r0, #9
 8000244:	bf18      	it	ne
 8000246:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024a:	d01e      	beq.n	800028a <__aeabi_fmul+0x66>
 800024c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000250:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000254:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000258:	fba0 3101 	umull	r3, r1, r0, r1
 800025c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000260:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000264:	bf3e      	ittt	cc
 8000266:	0049      	lslcc	r1, r1, #1
 8000268:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800026c:	005b      	lslcc	r3, r3, #1
 800026e:	ea40 0001 	orr.w	r0, r0, r1
 8000272:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000276:	2afd      	cmp	r2, #253	; 0xfd
 8000278:	d81d      	bhi.n	80002b6 <__aeabi_fmul+0x92>
 800027a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800027e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000282:	bf08      	it	eq
 8000284:	f020 0001 	biceq.w	r0, r0, #1
 8000288:	4770      	bx	lr
 800028a:	f090 0f00 	teq	r0, #0
 800028e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000292:	bf08      	it	eq
 8000294:	0249      	lsleq	r1, r1, #9
 8000296:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800029e:	3a7f      	subs	r2, #127	; 0x7f
 80002a0:	bfc2      	ittt	gt
 80002a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002aa:	4770      	bxgt	lr
 80002ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b0:	f04f 0300 	mov.w	r3, #0
 80002b4:	3a01      	subs	r2, #1
 80002b6:	dc5d      	bgt.n	8000374 <__aeabi_fmul+0x150>
 80002b8:	f112 0f19 	cmn.w	r2, #25
 80002bc:	bfdc      	itt	le
 80002be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c2:	4770      	bxle	lr
 80002c4:	f1c2 0200 	rsb	r2, r2, #0
 80002c8:	0041      	lsls	r1, r0, #1
 80002ca:	fa21 f102 	lsr.w	r1, r1, r2
 80002ce:	f1c2 0220 	rsb	r2, r2, #32
 80002d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80002d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80002da:	f140 0000 	adc.w	r0, r0, #0
 80002de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e2:	bf08      	it	eq
 80002e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002e8:	4770      	bx	lr
 80002ea:	f092 0f00 	teq	r2, #0
 80002ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f2:	bf02      	ittt	eq
 80002f4:	0040      	lsleq	r0, r0, #1
 80002f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fa:	3a01      	subeq	r2, #1
 80002fc:	d0f9      	beq.n	80002f2 <__aeabi_fmul+0xce>
 80002fe:	ea40 000c 	orr.w	r0, r0, ip
 8000302:	f093 0f00 	teq	r3, #0
 8000306:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030a:	bf02      	ittt	eq
 800030c:	0049      	lsleq	r1, r1, #1
 800030e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000312:	3b01      	subeq	r3, #1
 8000314:	d0f9      	beq.n	800030a <__aeabi_fmul+0xe6>
 8000316:	ea41 010c 	orr.w	r1, r1, ip
 800031a:	e78f      	b.n	800023c <__aeabi_fmul+0x18>
 800031c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000320:	ea92 0f0c 	teq	r2, ip
 8000324:	bf18      	it	ne
 8000326:	ea93 0f0c 	teqne	r3, ip
 800032a:	d00a      	beq.n	8000342 <__aeabi_fmul+0x11e>
 800032c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000330:	bf18      	it	ne
 8000332:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000336:	d1d8      	bne.n	80002ea <__aeabi_fmul+0xc6>
 8000338:	ea80 0001 	eor.w	r0, r0, r1
 800033c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000340:	4770      	bx	lr
 8000342:	f090 0f00 	teq	r0, #0
 8000346:	bf17      	itett	ne
 8000348:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 800034c:	4608      	moveq	r0, r1
 800034e:	f091 0f00 	teqne	r1, #0
 8000352:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000356:	d014      	beq.n	8000382 <__aeabi_fmul+0x15e>
 8000358:	ea92 0f0c 	teq	r2, ip
 800035c:	d101      	bne.n	8000362 <__aeabi_fmul+0x13e>
 800035e:	0242      	lsls	r2, r0, #9
 8000360:	d10f      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000362:	ea93 0f0c 	teq	r3, ip
 8000366:	d103      	bne.n	8000370 <__aeabi_fmul+0x14c>
 8000368:	024b      	lsls	r3, r1, #9
 800036a:	bf18      	it	ne
 800036c:	4608      	movne	r0, r1
 800036e:	d108      	bne.n	8000382 <__aeabi_fmul+0x15e>
 8000370:	ea80 0001 	eor.w	r0, r0, r1
 8000374:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000378:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800037c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000380:	4770      	bx	lr
 8000382:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000386:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038a:	4770      	bx	lr

0800038c <__aeabi_frsub>:
 800038c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000390:	e002      	b.n	8000398 <__addsf3>
 8000392:	bf00      	nop

08000394 <__aeabi_fsub>:
 8000394:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000398 <__addsf3>:
 8000398:	0042      	lsls	r2, r0, #1
 800039a:	bf1f      	itttt	ne
 800039c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003a0:	ea92 0f03 	teqne	r2, r3
 80003a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ac:	d06a      	beq.n	8000484 <__addsf3+0xec>
 80003ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003b6:	bfc1      	itttt	gt
 80003b8:	18d2      	addgt	r2, r2, r3
 80003ba:	4041      	eorgt	r1, r0
 80003bc:	4048      	eorgt	r0, r1
 80003be:	4041      	eorgt	r1, r0
 80003c0:	bfb8      	it	lt
 80003c2:	425b      	neglt	r3, r3
 80003c4:	2b19      	cmp	r3, #25
 80003c6:	bf88      	it	hi
 80003c8:	4770      	bxhi	lr
 80003ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003d6:	bf18      	it	ne
 80003d8:	4240      	negne	r0, r0
 80003da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80003e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80003e6:	bf18      	it	ne
 80003e8:	4249      	negne	r1, r1
 80003ea:	ea92 0f03 	teq	r2, r3
 80003ee:	d03f      	beq.n	8000470 <__addsf3+0xd8>
 80003f0:	f1a2 0201 	sub.w	r2, r2, #1
 80003f4:	fa41 fc03 	asr.w	ip, r1, r3
 80003f8:	eb10 000c 	adds.w	r0, r0, ip
 80003fc:	f1c3 0320 	rsb	r3, r3, #32
 8000400:	fa01 f103 	lsl.w	r1, r1, r3
 8000404:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000408:	d502      	bpl.n	8000410 <__addsf3+0x78>
 800040a:	4249      	negs	r1, r1
 800040c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000410:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000414:	d313      	bcc.n	800043e <__addsf3+0xa6>
 8000416:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800041a:	d306      	bcc.n	800042a <__addsf3+0x92>
 800041c:	0840      	lsrs	r0, r0, #1
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	f102 0201 	add.w	r2, r2, #1
 8000426:	2afe      	cmp	r2, #254	; 0xfe
 8000428:	d251      	bcs.n	80004ce <__addsf3+0x136>
 800042a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800042e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000432:	bf08      	it	eq
 8000434:	f020 0001 	biceq.w	r0, r0, #1
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	4770      	bx	lr
 800043e:	0049      	lsls	r1, r1, #1
 8000440:	eb40 0000 	adc.w	r0, r0, r0
 8000444:	3a01      	subs	r2, #1
 8000446:	bf28      	it	cs
 8000448:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800044c:	d2ed      	bcs.n	800042a <__addsf3+0x92>
 800044e:	fab0 fc80 	clz	ip, r0
 8000452:	f1ac 0c08 	sub.w	ip, ip, #8
 8000456:	ebb2 020c 	subs.w	r2, r2, ip
 800045a:	fa00 f00c 	lsl.w	r0, r0, ip
 800045e:	bfaa      	itet	ge
 8000460:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000464:	4252      	neglt	r2, r2
 8000466:	4318      	orrge	r0, r3
 8000468:	bfbc      	itt	lt
 800046a:	40d0      	lsrlt	r0, r2
 800046c:	4318      	orrlt	r0, r3
 800046e:	4770      	bx	lr
 8000470:	f092 0f00 	teq	r2, #0
 8000474:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000478:	bf06      	itte	eq
 800047a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800047e:	3201      	addeq	r2, #1
 8000480:	3b01      	subne	r3, #1
 8000482:	e7b5      	b.n	80003f0 <__addsf3+0x58>
 8000484:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000488:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800048c:	bf18      	it	ne
 800048e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000492:	d021      	beq.n	80004d8 <__addsf3+0x140>
 8000494:	ea92 0f03 	teq	r2, r3
 8000498:	d004      	beq.n	80004a4 <__addsf3+0x10c>
 800049a:	f092 0f00 	teq	r2, #0
 800049e:	bf08      	it	eq
 80004a0:	4608      	moveq	r0, r1
 80004a2:	4770      	bx	lr
 80004a4:	ea90 0f01 	teq	r0, r1
 80004a8:	bf1c      	itt	ne
 80004aa:	2000      	movne	r0, #0
 80004ac:	4770      	bxne	lr
 80004ae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004b2:	d104      	bne.n	80004be <__addsf3+0x126>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	bf28      	it	cs
 80004b8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	4770      	bx	lr
 80004be:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004c2:	bf3c      	itt	cc
 80004c4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004c8:	4770      	bxcc	lr
 80004ca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004ce:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d6:	4770      	bx	lr
 80004d8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80004dc:	bf16      	itet	ne
 80004de:	4608      	movne	r0, r1
 80004e0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80004e4:	4601      	movne	r1, r0
 80004e6:	0242      	lsls	r2, r0, #9
 80004e8:	bf06      	itte	eq
 80004ea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80004ee:	ea90 0f01 	teqeq	r0, r1
 80004f2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80004f6:	4770      	bx	lr

080004f8 <__aeabi_ui2f>:
 80004f8:	f04f 0300 	mov.w	r3, #0
 80004fc:	e004      	b.n	8000508 <__aeabi_i2f+0x8>
 80004fe:	bf00      	nop

08000500 <__aeabi_i2f>:
 8000500:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	ea5f 0c00 	movs.w	ip, r0
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000514:	4601      	mov	r1, r0
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	e01c      	b.n	8000556 <__aeabi_l2f+0x2a>

0800051c <__aeabi_ul2f>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	e00a      	b.n	8000540 <__aeabi_l2f+0x14>
 800052a:	bf00      	nop

0800052c <__aeabi_l2f>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000538:	d502      	bpl.n	8000540 <__aeabi_l2f+0x14>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	ea5f 0c01 	movs.w	ip, r1
 8000544:	bf02      	ittt	eq
 8000546:	4684      	moveq	ip, r0
 8000548:	4601      	moveq	r1, r0
 800054a:	2000      	moveq	r0, #0
 800054c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000550:	bf08      	it	eq
 8000552:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000556:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800055a:	fabc f28c 	clz	r2, ip
 800055e:	3a08      	subs	r2, #8
 8000560:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000564:	db10      	blt.n	8000588 <__aeabi_l2f+0x5c>
 8000566:	fa01 fc02 	lsl.w	ip, r1, r2
 800056a:	4463      	add	r3, ip
 800056c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000570:	f1c2 0220 	rsb	r2, r2, #32
 8000574:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000578:	fa20 f202 	lsr.w	r2, r0, r2
 800057c:	eb43 0002 	adc.w	r0, r3, r2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f102 0220 	add.w	r2, r2, #32
 800058c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000590:	f1c2 0220 	rsb	r2, r2, #32
 8000594:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000598:	fa21 f202 	lsr.w	r2, r1, r2
 800059c:	eb43 0002 	adc.w	r0, r3, r2
 80005a0:	bf08      	it	eq
 80005a2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_f2iz>:
 80005a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80005b0:	d30f      	bcc.n	80005d2 <__aeabi_f2iz+0x2a>
 80005b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80005b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80005ba:	d90d      	bls.n	80005d8 <__aeabi_f2iz+0x30>
 80005bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80005c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005c4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80005c8:	fa23 f002 	lsr.w	r0, r3, r2
 80005cc:	bf18      	it	ne
 80005ce:	4240      	negne	r0, r0
 80005d0:	4770      	bx	lr
 80005d2:	f04f 0000 	mov.w	r0, #0
 80005d6:	4770      	bx	lr
 80005d8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80005dc:	d101      	bne.n	80005e2 <__aeabi_f2iz+0x3a>
 80005de:	0242      	lsls	r2, r0, #9
 80005e0:	d105      	bne.n	80005ee <__aeabi_f2iz+0x46>
 80005e2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80005e6:	bf08      	it	eq
 80005e8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80005ec:	4770      	bx	lr
 80005ee:	f04f 0000 	mov.w	r0, #0
 80005f2:	4770      	bx	lr

080005f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000608:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <MX_GPIO_Init+0xb4>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	4a26      	ldr	r2, [pc, #152]	; (80006a8 <MX_GPIO_Init+0xb4>)
 800060e:	f043 0304 	orr.w	r3, r3, #4
 8000612:	6193      	str	r3, [r2, #24]
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <MX_GPIO_Init+0xb4>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0304 	and.w	r3, r3, #4
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000620:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <MX_GPIO_Init+0xb4>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <MX_GPIO_Init+0xb4>)
 8000626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_GPIO_Init+0xb4>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_GPIO_Init+0xb4>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a1a      	ldr	r2, [pc, #104]	; (80006a8 <MX_GPIO_Init+0xb4>)
 800063e:	f043 0308 	orr.w	r3, r3, #8
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b18      	ldr	r3, [pc, #96]	; (80006a8 <MX_GPIO_Init+0xb4>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0308 	and.w	r3, r3, #8
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000656:	4815      	ldr	r0, [pc, #84]	; (80006ac <MX_GPIO_Init+0xb8>)
 8000658:	f000 fdc9 	bl	80011ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2120      	movs	r1, #32
 8000660:	4813      	ldr	r0, [pc, #76]	; (80006b0 <MX_GPIO_Init+0xbc>)
 8000662:	f000 fdc4 	bl	80011ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8000666:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800066a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066c:	2301      	movs	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000670:	2301      	movs	r3, #1
 8000672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000674:	2303      	movs	r3, #3
 8000676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 0310 	add.w	r3, r7, #16
 800067c:	4619      	mov	r1, r3
 800067e:	480b      	ldr	r0, [pc, #44]	; (80006ac <MX_GPIO_Init+0xb8>)
 8000680:	f000 fc0a 	bl	8000e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000684:	2320      	movs	r3, #32
 8000686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000690:	2303      	movs	r3, #3
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000694:	f107 0310 	add.w	r3, r7, #16
 8000698:	4619      	mov	r1, r3
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_GPIO_Init+0xbc>)
 800069c:	f000 fbfc 	bl	8000e98 <HAL_GPIO_Init>

}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40012000 	.word	0x40012000
 80006b0:	40010c00 	.word	0x40010c00

080006b4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	int16_t temperature;
	uint32_t counter = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006be:	f000 fa81 	bl	8000bc4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006c2:	f000 f881 	bl	80007c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006c6:	f7ff ff95 	bl	80005f4 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80006ca:	f000 f9df 	bl	8000a8c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	Ds18b20_Init();
 80006ce:	f001 fab5 	bl	8001c3c <Ds18b20_Init>
	print("starting....");
 80006d2:	4b33      	ldr	r3, [pc, #204]	; (80007a0 <main+0xec>)
 80006d4:	4a33      	ldr	r2, [pc, #204]	; (80007a4 <main+0xf0>)
 80006d6:	215c      	movs	r1, #92	; 0x5c
 80006d8:	4833      	ldr	r0, [pc, #204]	; (80007a8 <main+0xf4>)
 80006da:	f002 f895 	bl	8002808 <iprintf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (counter % 250 == 0) {
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	4b32      	ldr	r3, [pc, #200]	; (80007ac <main+0xf8>)
 80006e2:	fba3 1302 	umull	r1, r3, r3, r2
 80006e6:	091b      	lsrs	r3, r3, #4
 80006e8:	21fa      	movs	r1, #250	; 0xfa
 80006ea:	fb01 f303 	mul.w	r3, r1, r3
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d103      	bne.n	80006fc <main+0x48>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80006f4:	2120      	movs	r1, #32
 80006f6:	482e      	ldr	r0, [pc, #184]	; (80007b0 <main+0xfc>)
 80006f8:	f000 fd91 	bl	800121e <HAL_GPIO_TogglePin>
		}

		if (counter % 1000 == 0) {
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <main+0xf8>)
 8000700:	fba3 1302 	umull	r1, r3, r3, r2
 8000704:	099b      	lsrs	r3, r3, #6
 8000706:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d137      	bne.n	8000784 <main+0xd0>
			Ds18b20_ManualConvert();
 8000714:	f001 fb14 	bl	8001d40 <Ds18b20_ManualConvert>
			if (ds18b20[0].DataIsValid) {
 8000718:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <main+0x100>)
 800071a:	7b1b      	ldrb	r3, [r3, #12]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d02b      	beq.n	8000778 <main+0xc4>
				temperature = (int16_t) (ds18b20[0].Temperature * 100);
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <main+0x100>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	4924      	ldr	r1, [pc, #144]	; (80007b8 <main+0x104>)
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fd7c 	bl	8000224 <__aeabi_fmul>
 800072c:	4603      	mov	r3, r0
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff3a 	bl	80005a8 <__aeabi_f2iz>
 8000734:	4603      	mov	r3, r0
 8000736:	807b      	strh	r3, [r7, #2]
				print("当前温度:%d.%02d°C", temperature / 100, temperature % 100);
 8000738:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800073c:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <main+0x108>)
 800073e:	fb82 1203 	smull	r1, r2, r2, r3
 8000742:	1152      	asrs	r2, r2, #5
 8000744:	17db      	asrs	r3, r3, #31
 8000746:	1ad3      	subs	r3, r2, r3
 8000748:	b21b      	sxth	r3, r3
 800074a:	4618      	mov	r0, r3
 800074c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000750:	4a1a      	ldr	r2, [pc, #104]	; (80007bc <main+0x108>)
 8000752:	fb82 1203 	smull	r1, r2, r2, r3
 8000756:	1151      	asrs	r1, r2, #5
 8000758:	17da      	asrs	r2, r3, #31
 800075a:	1a8a      	subs	r2, r1, r2
 800075c:	2164      	movs	r1, #100	; 0x64
 800075e:	fb01 f202 	mul.w	r2, r1, r2
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	b21b      	sxth	r3, r3
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	9000      	str	r0, [sp, #0]
 800076a:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <main+0xec>)
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <main+0xf0>)
 800076e:	216b      	movs	r1, #107	; 0x6b
 8000770:	4813      	ldr	r0, [pc, #76]	; (80007c0 <main+0x10c>)
 8000772:	f002 f849 	bl	8002808 <iprintf>
 8000776:	e005      	b.n	8000784 <main+0xd0>
			} else {
				print("无效温度");
 8000778:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <main+0xec>)
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <main+0xf0>)
 800077c:	216d      	movs	r1, #109	; 0x6d
 800077e:	4811      	ldr	r0, [pc, #68]	; (80007c4 <main+0x110>)
 8000780:	f002 f842 	bl	8002808 <iprintf>
			}
		}

		counter++;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3301      	adds	r3, #1
 8000788:	607b      	str	r3, [r7, #4]
		if (counter > 30000) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f247 5230 	movw	r2, #30000	; 0x7530
 8000790:	4293      	cmp	r3, r2
 8000792:	d901      	bls.n	8000798 <main+0xe4>
			counter = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	607b      	str	r3, [r7, #4]
		}
		HAL_Delay(1);
 8000798:	2001      	movs	r0, #1
 800079a:	f000 fa75 	bl	8000c88 <HAL_Delay>
		if (counter % 250 == 0) {
 800079e:	e79e      	b.n	80006de <main+0x2a>
 80007a0:	0800377c 	.word	0x0800377c
 80007a4:	080036e0 	.word	0x080036e0
 80007a8:	080036f4 	.word	0x080036f4
 80007ac:	10624dd3 	.word	0x10624dd3
 80007b0:	40010c00 	.word	0x40010c00
 80007b4:	200000e4 	.word	0x200000e4
 80007b8:	42c80000 	.word	0x42c80000
 80007bc:	51eb851f 	.word	0x51eb851f
 80007c0:	08003718 	.word	0x08003718
 80007c4:	08003748 	.word	0x08003748

080007c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b090      	sub	sp, #64	; 0x40
 80007cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007ce:	f107 0318 	add.w	r3, r7, #24
 80007d2:	2228      	movs	r2, #40	; 0x28
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f002 f80e 	bl	80027f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ea:	2301      	movs	r3, #1
 80007ec:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000800:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000804:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000806:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800080a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800080c:	f107 0318 	add.w	r3, r7, #24
 8000810:	4618      	mov	r0, r3
 8000812:	f000 fd1d 	bl	8001250 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x58>
		Error_Handler();
 800081c:	f000 f832 	bl	8000884 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2302      	movs	r3, #2
 8000826:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000830:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2102      	movs	r1, #2
 800083a:	4618      	mov	r0, r3
 800083c:	f000 ff88 	bl	8001750 <HAL_RCC_ClockConfig>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <SystemClock_Config+0x82>
		Error_Handler();
 8000846:	f000 f81d 	bl	8000884 <Error_Handler>
	}
}
 800084a:	bf00      	nop
 800084c:	3740      	adds	r7, #64	; 0x40
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 800085c:	bf00      	nop
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <__io_putchar+0x2c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000866:	2b00      	cmp	r3, #0
 8000868:	d0f9      	beq.n	800085e <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <__io_putchar+0x2c>)
 8000870:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

	return ch;
 8000872:	687b      	ldr	r3, [r7, #4]
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40013800 	.word	0x40013800

08000884 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800088c:	e7fe      	b.n	800088c <Error_Handler+0x8>
	...

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_MspInit+0x5c>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	4a14      	ldr	r2, [pc, #80]	; (80008ec <HAL_MspInit+0x5c>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6193      	str	r3, [r2, #24]
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_MspInit+0x5c>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_MspInit+0x5c>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_MspInit+0x5c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	61d3      	str	r3, [r2, #28]
 80008ba:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <HAL_MspInit+0x5c>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_MspInit+0x60>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <HAL_MspInit+0x60>)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010000 	.word	0x40010000

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <NMI_Handler+0x4>

080008fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <MemManage_Handler+0x4>

08000906 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <UsageFault_Handler+0x4>

08000912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093a:	f000 f989 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}

08000942 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
 8000952:	e00a      	b.n	800096a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000954:	f3af 8000 	nop.w
 8000958:	4601      	mov	r1, r0
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	60ba      	str	r2, [r7, #8]
 8000960:	b2ca      	uxtb	r2, r1
 8000962:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	3301      	adds	r3, #1
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	697a      	ldr	r2, [r7, #20]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	429a      	cmp	r2, r3
 8000970:	dbf0      	blt.n	8000954 <_read+0x12>
	}

return len;
 8000972:	687b      	ldr	r3, [r7, #4]
}
 8000974:	4618      	mov	r0, r3
 8000976:	3718      	adds	r7, #24
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	e009      	b.n	80009a2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	60ba      	str	r2, [r7, #8]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	4618      	mov	r0, r3
 8000998:	f7ff ff5c 	bl	8000854 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	3301      	adds	r3, #1
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	429a      	cmp	r2, r3
 80009a8:	dbf1      	blt.n	800098e <_write+0x12>
	}
	return len;
 80009aa:	687b      	ldr	r3, [r7, #4]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3718      	adds	r7, #24
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <_close>:

int _close(int file)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	return -1;
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr

080009ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009da:	605a      	str	r2, [r3, #4]
	return 0;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <_isatty>:

int _isatty(int file)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	return 1;
 80009f0:	2301      	movs	r3, #1
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
	return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a1c:	4a14      	ldr	r2, [pc, #80]	; (8000a70 <_sbrk+0x5c>)
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <_sbrk+0x60>)
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a28:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d102      	bne.n	8000a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <_sbrk+0x64>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <_sbrk+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d207      	bcs.n	8000a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a44:	f001 feae 	bl	80027a4 <__errno>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	e009      	b.n	8000a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <_sbrk+0x64>)
 8000a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20010000 	.word	0x20010000
 8000a74:	00000400 	.word	0x00000400
 8000a78:	2000008c 	.word	0x2000008c
 8000a7c:	20000118 	.word	0x20000118

08000a80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr

08000a8c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a90:	4b11      	ldr	r3, [pc, #68]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000a92:	4a12      	ldr	r2, [pc, #72]	; (8000adc <MX_USART1_UART_Init+0x50>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	f000 ffde 	bl	8001a84 <HAL_UART_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ace:	f7ff fed9 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000009c 	.word	0x2000009c
 8000adc:	40013800 	.word	0x40013800

08000ae0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a1c      	ldr	r2, [pc, #112]	; (8000b6c <HAL_UART_MspInit+0x8c>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d131      	bne.n	8000b64 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a1a      	ldr	r2, [pc, #104]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b14:	60fb      	str	r3, [r7, #12]
 8000b16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_UART_MspInit+0x90>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0310 	add.w	r3, r7, #16
 8000b42:	4619      	mov	r1, r3
 8000b44:	480b      	ldr	r0, [pc, #44]	; (8000b74 <HAL_UART_MspInit+0x94>)
 8000b46:	f000 f9a7 	bl	8000e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <HAL_UART_MspInit+0x94>)
 8000b60:	f000 f99a 	bl	8000e98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b64:	bf00      	nop
 8000b66:	3720      	adds	r7, #32
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40013800 	.word	0x40013800
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010800 	.word	0x40010800

08000b78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b78:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b7a:	e003      	b.n	8000b84 <LoopCopyDataInit>

08000b7c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b7e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b80:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b82:	3104      	adds	r1, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b84:	480a      	ldr	r0, [pc, #40]	; (8000bb0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b88:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b8a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b8c:	d3f6      	bcc.n	8000b7c <CopyDataInit>
  ldr r2, =_sbss
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b90:	e002      	b.n	8000b98 <LoopFillZerobss>

08000b92 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b94:	f842 3b04 	str.w	r3, [r2], #4

08000b98 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b98:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b9a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b9c:	d3f9      	bcc.n	8000b92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b9e:	f7ff ff6f 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f001 fe05 	bl	80027b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba6:	f7ff fd85 	bl	80006b4 <main>
  bx lr
 8000baa:	4770      	bx	lr
  ldr r3, =_sidata
 8000bac:	0800383c 	.word	0x0800383c
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bb4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000bb8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000bbc:	20000118 	.word	0x20000118

08000bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC1_2_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_Init+0x28>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <HAL_Init+0x28>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f92b 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f000 f808 	bl	8000bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be0:	f7ff fe56 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40022000 	.word	0x40022000

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_InitTick+0x54>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_InitTick+0x58>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f935 	bl	8000e7e <HAL_SYSTICK_Config>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00e      	b.n	8000c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d80a      	bhi.n	8000c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f000 f90b 	bl	8000e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c30:	4a06      	ldr	r2, [pc, #24]	; (8000c4c <HAL_InitTick+0x5c>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e000      	b.n	8000c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_IncTick+0x1c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_IncTick+0x20>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a03      	ldr	r2, [pc, #12]	; (8000c70 <HAL_IncTick+0x20>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	200000dc 	.word	0x200000dc

08000c74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b02      	ldr	r3, [pc, #8]	; (8000c84 <HAL_GetTick+0x10>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	200000dc 	.word	0x200000dc

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff fff0 	bl	8000c74 <HAL_GetTick>
 8000c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	; (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cae:	bf00      	nop
 8000cb0:	f7ff ffe0 	bl	8000c74 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	; (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dfc:	d301      	bcc.n	8000e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00f      	b.n	8000e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <SysTick_Config+0x40>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f7ff ff90 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <SysTick_Config+0x40>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <SysTick_Config+0x40>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff49 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e58:	f7ff ff5e 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff ff90 	bl	8000d88 <NVIC_EncodePriority>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff5f 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffb0 	bl	8000dec <SysTick_Config>
 8000e8c:	4603      	mov	r3, r0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b08b      	sub	sp, #44	; 0x2c
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eaa:	e179      	b.n	80011a0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000eac:	2201      	movs	r2, #1
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	69fa      	ldr	r2, [r7, #28]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	f040 8168 	bne.w	800119a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	4aa0      	ldr	r2, [pc, #640]	; (8001150 <HAL_GPIO_Init+0x2b8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d05e      	beq.n	8000f92 <HAL_GPIO_Init+0xfa>
 8000ed4:	4a9e      	ldr	r2, [pc, #632]	; (8001150 <HAL_GPIO_Init+0x2b8>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d875      	bhi.n	8000fc6 <HAL_GPIO_Init+0x12e>
 8000eda:	4a9e      	ldr	r2, [pc, #632]	; (8001154 <HAL_GPIO_Init+0x2bc>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d058      	beq.n	8000f92 <HAL_GPIO_Init+0xfa>
 8000ee0:	4a9c      	ldr	r2, [pc, #624]	; (8001154 <HAL_GPIO_Init+0x2bc>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d86f      	bhi.n	8000fc6 <HAL_GPIO_Init+0x12e>
 8000ee6:	4a9c      	ldr	r2, [pc, #624]	; (8001158 <HAL_GPIO_Init+0x2c0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d052      	beq.n	8000f92 <HAL_GPIO_Init+0xfa>
 8000eec:	4a9a      	ldr	r2, [pc, #616]	; (8001158 <HAL_GPIO_Init+0x2c0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d869      	bhi.n	8000fc6 <HAL_GPIO_Init+0x12e>
 8000ef2:	4a9a      	ldr	r2, [pc, #616]	; (800115c <HAL_GPIO_Init+0x2c4>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d04c      	beq.n	8000f92 <HAL_GPIO_Init+0xfa>
 8000ef8:	4a98      	ldr	r2, [pc, #608]	; (800115c <HAL_GPIO_Init+0x2c4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d863      	bhi.n	8000fc6 <HAL_GPIO_Init+0x12e>
 8000efe:	4a98      	ldr	r2, [pc, #608]	; (8001160 <HAL_GPIO_Init+0x2c8>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d046      	beq.n	8000f92 <HAL_GPIO_Init+0xfa>
 8000f04:	4a96      	ldr	r2, [pc, #600]	; (8001160 <HAL_GPIO_Init+0x2c8>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d85d      	bhi.n	8000fc6 <HAL_GPIO_Init+0x12e>
 8000f0a:	2b12      	cmp	r3, #18
 8000f0c:	d82a      	bhi.n	8000f64 <HAL_GPIO_Init+0xcc>
 8000f0e:	2b12      	cmp	r3, #18
 8000f10:	d859      	bhi.n	8000fc6 <HAL_GPIO_Init+0x12e>
 8000f12:	a201      	add	r2, pc, #4	; (adr r2, 8000f18 <HAL_GPIO_Init+0x80>)
 8000f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f18:	08000f93 	.word	0x08000f93
 8000f1c:	08000f6d 	.word	0x08000f6d
 8000f20:	08000f7f 	.word	0x08000f7f
 8000f24:	08000fc1 	.word	0x08000fc1
 8000f28:	08000fc7 	.word	0x08000fc7
 8000f2c:	08000fc7 	.word	0x08000fc7
 8000f30:	08000fc7 	.word	0x08000fc7
 8000f34:	08000fc7 	.word	0x08000fc7
 8000f38:	08000fc7 	.word	0x08000fc7
 8000f3c:	08000fc7 	.word	0x08000fc7
 8000f40:	08000fc7 	.word	0x08000fc7
 8000f44:	08000fc7 	.word	0x08000fc7
 8000f48:	08000fc7 	.word	0x08000fc7
 8000f4c:	08000fc7 	.word	0x08000fc7
 8000f50:	08000fc7 	.word	0x08000fc7
 8000f54:	08000fc7 	.word	0x08000fc7
 8000f58:	08000fc7 	.word	0x08000fc7
 8000f5c:	08000f75 	.word	0x08000f75
 8000f60:	08000f89 	.word	0x08000f89
 8000f64:	4a7f      	ldr	r2, [pc, #508]	; (8001164 <HAL_GPIO_Init+0x2cc>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d013      	beq.n	8000f92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f6a:	e02c      	b.n	8000fc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	623b      	str	r3, [r7, #32]
          break;
 8000f72:	e029      	b.n	8000fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	623b      	str	r3, [r7, #32]
          break;
 8000f7c:	e024      	b.n	8000fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	3308      	adds	r3, #8
 8000f84:	623b      	str	r3, [r7, #32]
          break;
 8000f86:	e01f      	b.n	8000fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	330c      	adds	r3, #12
 8000f8e:	623b      	str	r3, [r7, #32]
          break;
 8000f90:	e01a      	b.n	8000fc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d102      	bne.n	8000fa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	623b      	str	r3, [r7, #32]
          break;
 8000f9e:	e013      	b.n	8000fc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d105      	bne.n	8000fb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	611a      	str	r2, [r3, #16]
          break;
 8000fb2:	e009      	b.n	8000fc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	615a      	str	r2, [r3, #20]
          break;
 8000fbe:	e003      	b.n	8000fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	623b      	str	r3, [r7, #32]
          break;
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x130>
          break;
 8000fc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	2bff      	cmp	r3, #255	; 0xff
 8000fcc:	d801      	bhi.n	8000fd2 <HAL_GPIO_Init+0x13a>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	e001      	b.n	8000fd6 <HAL_GPIO_Init+0x13e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	2bff      	cmp	r3, #255	; 0xff
 8000fdc:	d802      	bhi.n	8000fe4 <HAL_GPIO_Init+0x14c>
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	e002      	b.n	8000fea <HAL_GPIO_Init+0x152>
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	3b08      	subs	r3, #8
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	210f      	movs	r1, #15
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	6a39      	ldr	r1, [r7, #32]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	431a      	orrs	r2, r3
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 80c1 	beq.w	800119a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001018:	4b53      	ldr	r3, [pc, #332]	; (8001168 <HAL_GPIO_Init+0x2d0>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a52      	ldr	r2, [pc, #328]	; (8001168 <HAL_GPIO_Init+0x2d0>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b50      	ldr	r3, [pc, #320]	; (8001168 <HAL_GPIO_Init+0x2d0>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001030:	4a4e      	ldr	r2, [pc, #312]	; (800116c <HAL_GPIO_Init+0x2d4>)
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	4013      	ands	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a46      	ldr	r2, [pc, #280]	; (8001170 <HAL_GPIO_Init+0x2d8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d01f      	beq.n	800109c <HAL_GPIO_Init+0x204>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a45      	ldr	r2, [pc, #276]	; (8001174 <HAL_GPIO_Init+0x2dc>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d019      	beq.n	8001098 <HAL_GPIO_Init+0x200>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a44      	ldr	r2, [pc, #272]	; (8001178 <HAL_GPIO_Init+0x2e0>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d013      	beq.n	8001094 <HAL_GPIO_Init+0x1fc>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a43      	ldr	r2, [pc, #268]	; (800117c <HAL_GPIO_Init+0x2e4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d00d      	beq.n	8001090 <HAL_GPIO_Init+0x1f8>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a42      	ldr	r2, [pc, #264]	; (8001180 <HAL_GPIO_Init+0x2e8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d007      	beq.n	800108c <HAL_GPIO_Init+0x1f4>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a41      	ldr	r2, [pc, #260]	; (8001184 <HAL_GPIO_Init+0x2ec>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d101      	bne.n	8001088 <HAL_GPIO_Init+0x1f0>
 8001084:	2305      	movs	r3, #5
 8001086:	e00a      	b.n	800109e <HAL_GPIO_Init+0x206>
 8001088:	2306      	movs	r3, #6
 800108a:	e008      	b.n	800109e <HAL_GPIO_Init+0x206>
 800108c:	2304      	movs	r3, #4
 800108e:	e006      	b.n	800109e <HAL_GPIO_Init+0x206>
 8001090:	2303      	movs	r3, #3
 8001092:	e004      	b.n	800109e <HAL_GPIO_Init+0x206>
 8001094:	2302      	movs	r3, #2
 8001096:	e002      	b.n	800109e <HAL_GPIO_Init+0x206>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <HAL_GPIO_Init+0x206>
 800109c:	2300      	movs	r3, #0
 800109e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a0:	f002 0203 	and.w	r2, r2, #3
 80010a4:	0092      	lsls	r2, r2, #2
 80010a6:	4093      	lsls	r3, r2
 80010a8:	68fa      	ldr	r2, [r7, #12]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ae:	492f      	ldr	r1, [pc, #188]	; (800116c <HAL_GPIO_Init+0x2d4>)
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	089b      	lsrs	r3, r3, #2
 80010b4:	3302      	adds	r3, #2
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d006      	beq.n	80010d6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010c8:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	492e      	ldr	r1, [pc, #184]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	600b      	str	r3, [r1, #0]
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010d6:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	43db      	mvns	r3, r3
 80010de:	492a      	ldr	r1, [pc, #168]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 80010e0:	4013      	ands	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d006      	beq.n	80010fe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010f0:	4b25      	ldr	r3, [pc, #148]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	4924      	ldr	r1, [pc, #144]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	604b      	str	r3, [r1, #4]
 80010fc:	e006      	b.n	800110c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010fe:	4b22      	ldr	r3, [pc, #136]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	43db      	mvns	r3, r3
 8001106:	4920      	ldr	r1, [pc, #128]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 8001108:	4013      	ands	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d006      	beq.n	8001126 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	491a      	ldr	r1, [pc, #104]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	608b      	str	r3, [r1, #8]
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	43db      	mvns	r3, r3
 800112e:	4916      	ldr	r1, [pc, #88]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 8001130:	4013      	ands	r3, r2
 8001132:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d025      	beq.n	800118c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001140:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 8001142:	68da      	ldr	r2, [r3, #12]
 8001144:	4910      	ldr	r1, [pc, #64]	; (8001188 <HAL_GPIO_Init+0x2f0>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	4313      	orrs	r3, r2
 800114a:	60cb      	str	r3, [r1, #12]
 800114c:	e025      	b.n	800119a <HAL_GPIO_Init+0x302>
 800114e:	bf00      	nop
 8001150:	10320000 	.word	0x10320000
 8001154:	10310000 	.word	0x10310000
 8001158:	10220000 	.word	0x10220000
 800115c:	10210000 	.word	0x10210000
 8001160:	10120000 	.word	0x10120000
 8001164:	10110000 	.word	0x10110000
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000
 8001170:	40010800 	.word	0x40010800
 8001174:	40010c00 	.word	0x40010c00
 8001178:	40011000 	.word	0x40011000
 800117c:	40011400 	.word	0x40011400
 8001180:	40011800 	.word	0x40011800
 8001184:	40011c00 	.word	0x40011c00
 8001188:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800118c:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_GPIO_Init+0x324>)
 800118e:	68da      	ldr	r2, [r3, #12]
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	43db      	mvns	r3, r3
 8001194:	4909      	ldr	r1, [pc, #36]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001196:	4013      	ands	r3, r2
 8001198:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119c:	3301      	adds	r3, #1
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a6:	fa22 f303 	lsr.w	r3, r2, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f47f ae7e 	bne.w	8000eac <HAL_GPIO_Init+0x14>
  }
}
 80011b0:	bf00      	nop
 80011b2:	bf00      	nop
 80011b4:	372c      	adds	r7, #44	; 0x2c
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d002      	beq.n	80011de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011d8:	2301      	movs	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	e001      	b.n	80011e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b083      	sub	sp, #12
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	460b      	mov	r3, r1
 80011f8:	807b      	strh	r3, [r7, #2]
 80011fa:	4613      	mov	r3, r2
 80011fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011fe:	787b      	ldrb	r3, [r7, #1]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001204:	887a      	ldrh	r2, [r7, #2]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800120a:	e003      	b.n	8001214 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	041a      	lsls	r2, r3, #16
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	611a      	str	r2, [r3, #16]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800121e:	b480      	push	{r7}
 8001220:	b085      	sub	sp, #20
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	460b      	mov	r3, r1
 8001228:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001230:	887a      	ldrh	r2, [r7, #2]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4013      	ands	r3, r2
 8001236:	041a      	lsls	r2, r3, #16
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43d9      	mvns	r1, r3
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	400b      	ands	r3, r1
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	611a      	str	r2, [r3, #16]
}
 8001246:	bf00      	nop
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr

08001250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e26c      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8087 	beq.w	800137e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001270:	4b92      	ldr	r3, [pc, #584]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b04      	cmp	r3, #4
 800127a:	d00c      	beq.n	8001296 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800127c:	4b8f      	ldr	r3, [pc, #572]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	2b08      	cmp	r3, #8
 8001286:	d112      	bne.n	80012ae <HAL_RCC_OscConfig+0x5e>
 8001288:	4b8c      	ldr	r3, [pc, #560]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001294:	d10b      	bne.n	80012ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001296:	4b89      	ldr	r3, [pc, #548]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d06c      	beq.n	800137c <HAL_RCC_OscConfig+0x12c>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d168      	bne.n	800137c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e246      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b6:	d106      	bne.n	80012c6 <HAL_RCC_OscConfig+0x76>
 80012b8:	4b80      	ldr	r3, [pc, #512]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a7f      	ldr	r2, [pc, #508]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	e02e      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x98>
 80012ce:	4b7b      	ldr	r3, [pc, #492]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a7a      	ldr	r2, [pc, #488]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b78      	ldr	r3, [pc, #480]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a77      	ldr	r2, [pc, #476]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e01d      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0xbc>
 80012f2:	4b72      	ldr	r3, [pc, #456]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a71      	ldr	r2, [pc, #452]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b6f      	ldr	r3, [pc, #444]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a6e      	ldr	r2, [pc, #440]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00b      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 800130c:	4b6b      	ldr	r3, [pc, #428]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a6a      	ldr	r2, [pc, #424]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b68      	ldr	r3, [pc, #416]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a67      	ldr	r2, [pc, #412]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800131e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001322:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fca2 	bl	8000c74 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fc9e 	bl	8000c74 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1fa      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	4b5d      	ldr	r3, [pc, #372]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0xe4>
 8001352:	e014      	b.n	800137e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fc8e 	bl	8000c74 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fc8a 	bl	8000c74 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1e6      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	4b53      	ldr	r3, [pc, #332]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x10c>
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d063      	beq.n	8001452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800138a:	4b4c      	ldr	r3, [pc, #304]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00b      	beq.n	80013ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001396:	4b49      	ldr	r3, [pc, #292]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d11c      	bne.n	80013dc <HAL_RCC_OscConfig+0x18c>
 80013a2:	4b46      	ldr	r3, [pc, #280]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d116      	bne.n	80013dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	4b43      	ldr	r3, [pc, #268]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_RCC_OscConfig+0x176>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e1ba      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4939      	ldr	r1, [pc, #228]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	e03a      	b.n	8001452 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d020      	beq.n	8001426 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e4:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <HAL_RCC_OscConfig+0x270>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ea:	f7ff fc43 	bl	8000c74 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fc3f 	bl	8000c74 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e19b      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4927      	ldr	r1, [pc, #156]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
 8001424:	e015      	b.n	8001452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <HAL_RCC_OscConfig+0x270>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fc22 	bl	8000c74 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff fc1e 	bl	8000c74 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e17a      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d03a      	beq.n	80014d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	699b      	ldr	r3, [r3, #24]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d019      	beq.n	800149a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <HAL_RCC_OscConfig+0x274>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146c:	f7ff fc02 	bl	8000c74 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff fbfe 	bl	8000c74 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e15a      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_RCC_OscConfig+0x26c>)
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001492:	2001      	movs	r0, #1
 8001494:	f000 fad8 	bl	8001a48 <RCC_Delay>
 8001498:	e01c      	b.n	80014d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_RCC_OscConfig+0x274>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a0:	f7ff fbe8 	bl	8000c74 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a6:	e00f      	b.n	80014c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fbe4 	bl	8000c74 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d908      	bls.n	80014c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e140      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	42420000 	.word	0x42420000
 80014c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c8:	4b9e      	ldr	r3, [pc, #632]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1e9      	bne.n	80014a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0304 	and.w	r3, r3, #4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80a6 	beq.w	800162e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014e6:	4b97      	ldr	r3, [pc, #604]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	69db      	ldr	r3, [r3, #28]
 80014ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10d      	bne.n	800150e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	4b94      	ldr	r3, [pc, #592]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80014f4:	69db      	ldr	r3, [r3, #28]
 80014f6:	4a93      	ldr	r2, [pc, #588]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	61d3      	str	r3, [r2, #28]
 80014fe:	4b91      	ldr	r3, [pc, #580]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800150a:	2301      	movs	r3, #1
 800150c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150e:	4b8e      	ldr	r3, [pc, #568]	; (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d118      	bne.n	800154c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800151a:	4b8b      	ldr	r3, [pc, #556]	; (8001748 <HAL_RCC_OscConfig+0x4f8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a8a      	ldr	r2, [pc, #552]	; (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001526:	f7ff fba5 	bl	8000c74 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	e008      	b.n	8001540 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152e:	f7ff fba1 	bl	8000c74 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	2b64      	cmp	r3, #100	; 0x64
 800153a:	d901      	bls.n	8001540 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800153c:	2303      	movs	r3, #3
 800153e:	e0fd      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	4b81      	ldr	r3, [pc, #516]	; (8001748 <HAL_RCC_OscConfig+0x4f8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0f0      	beq.n	800152e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d106      	bne.n	8001562 <HAL_RCC_OscConfig+0x312>
 8001554:	4b7b      	ldr	r3, [pc, #492]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4a7a      	ldr	r2, [pc, #488]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6213      	str	r3, [r2, #32]
 8001560:	e02d      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x334>
 800156a:	4b76      	ldr	r3, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a75      	ldr	r2, [pc, #468]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001570:	f023 0301 	bic.w	r3, r3, #1
 8001574:	6213      	str	r3, [r2, #32]
 8001576:	4b73      	ldr	r3, [pc, #460]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a72      	ldr	r2, [pc, #456]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	6213      	str	r3, [r2, #32]
 8001582:	e01c      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2b05      	cmp	r3, #5
 800158a:	d10c      	bne.n	80015a6 <HAL_RCC_OscConfig+0x356>
 800158c:	4b6d      	ldr	r3, [pc, #436]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4a6c      	ldr	r2, [pc, #432]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001592:	f043 0304 	orr.w	r3, r3, #4
 8001596:	6213      	str	r3, [r2, #32]
 8001598:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	4a69      	ldr	r2, [pc, #420]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6213      	str	r3, [r2, #32]
 80015a4:	e00b      	b.n	80015be <HAL_RCC_OscConfig+0x36e>
 80015a6:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a66      	ldr	r2, [pc, #408]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80015ac:	f023 0301 	bic.w	r3, r3, #1
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	4b64      	ldr	r3, [pc, #400]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	6a1b      	ldr	r3, [r3, #32]
 80015b6:	4a63      	ldr	r2, [pc, #396]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	f023 0304 	bic.w	r3, r3, #4
 80015bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d015      	beq.n	80015f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c6:	f7ff fb55 	bl	8000c74 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015cc:	e00a      	b.n	80015e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ce:	f7ff fb51 	bl	8000c74 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015dc:	4293      	cmp	r3, r2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e0ab      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	4b57      	ldr	r3, [pc, #348]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0ee      	beq.n	80015ce <HAL_RCC_OscConfig+0x37e>
 80015f0:	e014      	b.n	800161c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f2:	f7ff fb3f 	bl	8000c74 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff fb3b 	bl	8000c74 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e095      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001610:	4b4c      	ldr	r3, [pc, #304]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ee      	bne.n	80015fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800161c:	7dfb      	ldrb	r3, [r7, #23]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d105      	bne.n	800162e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001622:	4b48      	ldr	r3, [pc, #288]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a47      	ldr	r2, [pc, #284]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800162c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	2b00      	cmp	r3, #0
 8001634:	f000 8081 	beq.w	800173a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001638:	4b42      	ldr	r3, [pc, #264]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d061      	beq.n	8001708 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	2b02      	cmp	r3, #2
 800164a:	d146      	bne.n	80016da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164c:	4b3f      	ldr	r3, [pc, #252]	; (800174c <HAL_RCC_OscConfig+0x4fc>)
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff fb0f 	bl	8000c74 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff fb0b 	bl	8000c74 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e067      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166c:	4b35      	ldr	r3, [pc, #212]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001680:	d108      	bne.n	8001694 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001682:	4b30      	ldr	r3, [pc, #192]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	492d      	ldr	r1, [pc, #180]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001694:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a19      	ldr	r1, [r3, #32]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	430b      	orrs	r3, r1
 80016a6:	4927      	ldr	r1, [pc, #156]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016ac:	4b27      	ldr	r3, [pc, #156]	; (800174c <HAL_RCC_OscConfig+0x4fc>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fadf 	bl	8000c74 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ba:	f7ff fadb 	bl	8000c74 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e037      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x46a>
 80016d8:	e02f      	b.n	800173a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <HAL_RCC_OscConfig+0x4fc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff fac8 	bl	8000c74 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff fac4 	bl	8000c74 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e020      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x498>
 8001706:	e018      	b.n	800173a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d101      	bne.n	8001714 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e013      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_RCC_OscConfig+0x4f4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	429a      	cmp	r2, r3
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d001      	beq.n	800173a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e000      	b.n	800173c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	40007000 	.word	0x40007000
 800174c:	42420060 	.word	0x42420060

08001750 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0d0      	b.n	8001906 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001764:	4b6a      	ldr	r3, [pc, #424]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d910      	bls.n	8001794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b67      	ldr	r3, [pc, #412]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 0207 	bic.w	r2, r3, #7
 800177a:	4965      	ldr	r1, [pc, #404]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b63      	ldr	r3, [pc, #396]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e0b8      	b.n	8001906 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d020      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017ac:	4b59      	ldr	r3, [pc, #356]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a58      	ldr	r2, [pc, #352]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d005      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017c4:	4b53      	ldr	r3, [pc, #332]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4a52      	ldr	r2, [pc, #328]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d0:	4b50      	ldr	r3, [pc, #320]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	494d      	ldr	r1, [pc, #308]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d040      	beq.n	8001870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d107      	bne.n	8001806 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	4b47      	ldr	r3, [pc, #284]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d115      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e07f      	b.n	8001906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d107      	bne.n	800181e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180e:	4b41      	ldr	r3, [pc, #260]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e073      	b.n	8001906 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800181e:	4b3d      	ldr	r3, [pc, #244]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d101      	bne.n	800182e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e06b      	b.n	8001906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f023 0203 	bic.w	r2, r3, #3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4936      	ldr	r1, [pc, #216]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001840:	f7ff fa18 	bl	8000c74 <HAL_GetTick>
 8001844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001846:	e00a      	b.n	800185e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001848:	f7ff fa14 	bl	8000c74 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e053      	b.n	8001906 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185e:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 020c 	and.w	r2, r3, #12
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	429a      	cmp	r2, r3
 800186e:	d1eb      	bne.n	8001848 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001870:	4b27      	ldr	r3, [pc, #156]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d210      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b24      	ldr	r3, [pc, #144]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f023 0207 	bic.w	r2, r3, #7
 8001886:	4922      	ldr	r1, [pc, #136]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	4313      	orrs	r3, r2
 800188c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800188e:	4b20      	ldr	r3, [pc, #128]	; (8001910 <HAL_RCC_ClockConfig+0x1c0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e032      	b.n	8001906 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0304 	and.w	r3, r3, #4
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d008      	beq.n	80018be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4916      	ldr	r1, [pc, #88]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	490e      	ldr	r1, [pc, #56]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018de:	f000 f821 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 80018e2:	4602      	mov	r2, r0
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	091b      	lsrs	r3, r3, #4
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	490a      	ldr	r1, [pc, #40]	; (8001918 <HAL_RCC_ClockConfig+0x1c8>)
 80018f0:	5ccb      	ldrb	r3, [r1, r3]
 80018f2:	fa22 f303 	lsr.w	r3, r2, r3
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <HAL_RCC_ClockConfig+0x1cc>)
 80018f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_RCC_ClockConfig+0x1d0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff f976 	bl	8000bf0 <HAL_InitTick>

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3710      	adds	r7, #16
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40022000 	.word	0x40022000
 8001914:	40021000 	.word	0x40021000
 8001918:	08003784 	.word	0x08003784
 800191c:	20000000 	.word	0x20000000
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001924:	b490      	push	{r4, r7}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800192a:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800192c:	1d3c      	adds	r4, r7, #4
 800192e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001930:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001934:	f240 2301 	movw	r3, #513	; 0x201
 8001938:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800194e:	4b22      	ldr	r3, [pc, #136]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	2b04      	cmp	r3, #4
 800195c:	d002      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x40>
 800195e:	2b08      	cmp	r3, #8
 8001960:	d003      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x46>
 8001962:	e02d      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001966:	623b      	str	r3, [r7, #32]
      break;
 8001968:	e02d      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	0c9b      	lsrs	r3, r3, #18
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001976:	4413      	add	r3, r2
 8001978:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800197c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d013      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	0c5b      	lsrs	r3, r3, #17
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001996:	4413      	add	r3, r2
 8001998:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800199c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	4a0e      	ldr	r2, [pc, #56]	; (80019dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80019a2:	fb02 f203 	mul.w	r2, r2, r3
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	e004      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019b4:	fb02 f303 	mul.w	r3, r2, r3
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	623b      	str	r3, [r7, #32]
      break;
 80019be:	e002      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80019c2:	623b      	str	r3, [r7, #32]
      break;
 80019c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c6:	6a3b      	ldr	r3, [r7, #32]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3728      	adds	r7, #40	; 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc90      	pop	{r4, r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	0800376c 	.word	0x0800376c
 80019d8:	40021000 	.word	0x40021000
 80019dc:	007a1200 	.word	0x007a1200
 80019e0:	003d0900 	.word	0x003d0900

080019e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e8:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	20000000 	.word	0x20000000

080019f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019fc:	f7ff fff2 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 8001a00:	4602      	mov	r2, r0
 8001a02:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	4903      	ldr	r1, [pc, #12]	; (8001a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0e:	5ccb      	ldrb	r3, [r1, r3]
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08003794 	.word	0x08003794

08001a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a24:	f7ff ffde 	bl	80019e4 <HAL_RCC_GetHCLKFreq>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	0adb      	lsrs	r3, r3, #11
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	4903      	ldr	r1, [pc, #12]	; (8001a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a36:	5ccb      	ldrb	r3, [r1, r3]
 8001a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40021000 	.word	0x40021000
 8001a44:	08003794 	.word	0x08003794

08001a48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <RCC_Delay+0x34>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <RCC_Delay+0x38>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	0a5b      	lsrs	r3, r3, #9
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a64:	bf00      	nop
  }
  while (Delay --);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1e5a      	subs	r2, r3, #1
 8001a6a:	60fa      	str	r2, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f9      	bne.n	8001a64 <RCC_Delay+0x1c>
}
 8001a70:	bf00      	nop
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	10624dd3 	.word	0x10624dd3

08001a84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e03f      	b.n	8001b16 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f7ff f818 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2224      	movs	r2, #36	; 0x24
 8001ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ac6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 f829 	bl	8001b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001adc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001aec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001afc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001b5a:	f023 030c 	bic.w	r3, r3, #12
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	430b      	orrs	r3, r1
 8001b66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699a      	ldr	r2, [r3, #24]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a2c      	ldr	r2, [pc, #176]	; (8001c34 <UART_SetConfig+0x114>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d103      	bne.n	8001b90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b88:	f7ff ff4a 	bl	8001a20 <HAL_RCC_GetPCLK2Freq>
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	e002      	b.n	8001b96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b90:	f7ff ff32 	bl	80019f8 <HAL_RCC_GetPCLK1Freq>
 8001b94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	009a      	lsls	r2, r3, #2
 8001ba0:	441a      	add	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bac:	4a22      	ldr	r2, [pc, #136]	; (8001c38 <UART_SetConfig+0x118>)
 8001bae:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	0119      	lsls	r1, r3, #4
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009a      	lsls	r2, r3, #2
 8001bc0:	441a      	add	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bcc:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <UART_SetConfig+0x118>)
 8001bce:	fba3 0302 	umull	r0, r3, r3, r2
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2064      	movs	r0, #100	; 0x64
 8001bd6:	fb00 f303 	mul.w	r3, r0, r3
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	3332      	adds	r3, #50	; 0x32
 8001be0:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <UART_SetConfig+0x118>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	095b      	lsrs	r3, r3, #5
 8001be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bec:	4419      	add	r1, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009a      	lsls	r2, r3, #2
 8001bf8:	441a      	add	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <UART_SetConfig+0x118>)
 8001c06:	fba3 0302 	umull	r0, r3, r3, r2
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	2064      	movs	r0, #100	; 0x64
 8001c0e:	fb00 f303 	mul.w	r3, r0, r3
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	011b      	lsls	r3, r3, #4
 8001c16:	3332      	adds	r3, #50	; 0x32
 8001c18:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <UART_SetConfig+0x118>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	f003 020f 	and.w	r2, r3, #15
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	440a      	add	r2, r1
 8001c2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40013800 	.word	0x40013800
 8001c38:	51eb851f 	.word	0x51eb851f

08001c3c <Ds18b20_Init>:
  osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);
}
#else
bool Ds18b20_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
  uint8_t Ds18b20TryToFind=5;
 8001c42:	2305      	movs	r3, #5
 8001c44:	71fb      	strb	r3, [r7, #7]
  do
  {
    OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 8001c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c4a:	4938      	ldr	r1, [pc, #224]	; (8001d2c <Ds18b20_Init+0xf0>)
 8001c4c:	4838      	ldr	r0, [pc, #224]	; (8001d30 <Ds18b20_Init+0xf4>)
 8001c4e:	f000 fb73 	bl	8002338 <OneWire_Init>
    TempSensorCount = 0;
 8001c52:	4b38      	ldr	r3, [pc, #224]	; (8001d34 <Ds18b20_Init+0xf8>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
    while(HAL_GetTick() < 3000)
 8001c58:	e002      	b.n	8001c60 <Ds18b20_Init+0x24>
    Ds18b20Delay(100);
 8001c5a:	2064      	movs	r0, #100	; 0x64
 8001c5c:	f7ff f814 	bl	8000c88 <HAL_Delay>
    while(HAL_GetTick() < 3000)
 8001c60:	f7ff f808 	bl	8000c74 <HAL_GetTick>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d9f5      	bls.n	8001c5a <Ds18b20_Init+0x1e>
    OneWireDevices = OneWire_First(&OneWire);
 8001c6e:	4830      	ldr	r0, [pc, #192]	; (8001d30 <Ds18b20_Init+0xf4>)
 8001c70:	f000 fc30 	bl	80024d4 <OneWire_First>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b2f      	ldr	r3, [pc, #188]	; (8001d38 <Ds18b20_Init+0xfc>)
 8001c7a:	701a      	strb	r2, [r3, #0]
    while (OneWireDevices)
 8001c7c:	e019      	b.n	8001cb2 <Ds18b20_Init+0x76>
    {
      Ds18b20Delay(100);
 8001c7e:	2064      	movs	r0, #100	; 0x64
 8001c80:	f7ff f802 	bl	8000c88 <HAL_Delay>
      TempSensorCount++;
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <Ds18b20_Init+0xf8>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <Ds18b20_Init+0xf8>)
 8001c8e:	701a      	strb	r2, [r3, #0]
      OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 8001c90:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <Ds18b20_Init+0xf8>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	4a28      	ldr	r2, [pc, #160]	; (8001d3c <Ds18b20_Init+0x100>)
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4824      	ldr	r0, [pc, #144]	; (8001d30 <Ds18b20_Init+0xf4>)
 8001ca0:	f000 fd2c 	bl	80026fc <OneWire_GetFullROM>
      OneWireDevices = OneWire_Next(&OneWire);
 8001ca4:	4822      	ldr	r0, [pc, #136]	; (8001d30 <Ds18b20_Init+0xf4>)
 8001ca6:	f000 fc25 	bl	80024f4 <OneWire_Next>
 8001caa:	4603      	mov	r3, r0
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <Ds18b20_Init+0xfc>)
 8001cb0:	701a      	strb	r2, [r3, #0]
    while (OneWireDevices)
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <Ds18b20_Init+0xfc>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1e1      	bne.n	8001c7e <Ds18b20_Init+0x42>
    }
    if(TempSensorCount>0)
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <Ds18b20_Init+0xf8>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <Ds18b20_Init+0x94>
    break;
    Ds18b20TryToFind--;
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	71fb      	strb	r3, [r7, #7]
  }while(Ds18b20TryToFind>0);
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1bb      	bne.n	8001c46 <Ds18b20_Init+0xa>
 8001cce:	e000      	b.n	8001cd2 <Ds18b20_Init+0x96>
    break;
 8001cd0:	bf00      	nop
  if(Ds18b20TryToFind==0)
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <Ds18b20_Init+0xa0>
  return false;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e022      	b.n	8001d22 <Ds18b20_Init+0xe6>
  for (uint8_t i = 0; i < TempSensorCount; i++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	71bb      	strb	r3, [r7, #6]
 8001ce0:	e019      	b.n	8001d16 <Ds18b20_Init+0xda>
  {
    Ds18b20Delay(50);
 8001ce2:	2032      	movs	r0, #50	; 0x32
 8001ce4:	f7fe ffd0 	bl	8000c88 <HAL_Delay>
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 8001ce8:	79bb      	ldrb	r3, [r7, #6]
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	4a13      	ldr	r2, [pc, #76]	; (8001d3c <Ds18b20_Init+0x100>)
 8001cee:	4413      	add	r3, r2
 8001cf0:	220c      	movs	r2, #12
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480e      	ldr	r0, [pc, #56]	; (8001d30 <Ds18b20_Init+0xf4>)
 8001cf6:	f000 f9b1 	bl	800205c <DS18B20_SetResolution>
    Ds18b20Delay(50);
 8001cfa:	2032      	movs	r0, #50	; 0x32
 8001cfc:	f7fe ffc4 	bl	8000c88 <HAL_Delay>
    DS18B20_DisableAlarmTemperature(&OneWire, ds18b20[i].Address);
 8001d00:	79bb      	ldrb	r3, [r7, #6]
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <Ds18b20_Init+0x100>)
 8001d06:	4413      	add	r3, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4809      	ldr	r0, [pc, #36]	; (8001d30 <Ds18b20_Init+0xf4>)
 8001d0c:	f000 fa3e 	bl	800218c <DS18B20_DisableAlarmTemperature>
  for (uint8_t i = 0; i < TempSensorCount; i++)
 8001d10:	79bb      	ldrb	r3, [r7, #6]
 8001d12:	3301      	adds	r3, #1
 8001d14:	71bb      	strb	r3, [r7, #6]
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <Ds18b20_Init+0xf8>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	79ba      	ldrb	r2, [r7, #6]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d3e0      	bcc.n	8001ce2 <Ds18b20_Init+0xa6>
  }
  return true;
 8001d20:	2301      	movs	r3, #1
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40012000 	.word	0x40012000
 8001d30:	200000f4 	.word	0x200000f4
 8001d34:	20000090 	.word	0x20000090
 8001d38:	200000e0 	.word	0x200000e0
 8001d3c:	200000e4 	.word	0x200000e4

08001d40 <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool Ds18b20_ManualConvert(void) {
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
  if (Ds18b20Timeout == 0)
    return false;
  else
    return true;
#else
	Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 8001d46:	4b33      	ldr	r3, [pc, #204]	; (8001e14 <Ds18b20_ManualConvert+0xd4>)
 8001d48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d4c:	801a      	strh	r2, [r3, #0]
	DS18B20_StartAll(&OneWire);
 8001d4e:	4832      	ldr	r0, [pc, #200]	; (8001e18 <Ds18b20_ManualConvert+0xd8>)
 8001d50:	f000 f868 	bl	8001e24 <DS18B20_StartAll>
	Ds18b20Delay(100);
 8001d54:	2064      	movs	r0, #100	; 0x64
 8001d56:	f7fe ff97 	bl	8000c88 <HAL_Delay>
	while (!DS18B20_AllDone(&OneWire))
 8001d5a:	e00c      	b.n	8001d76 <Ds18b20_ManualConvert+0x36>
	{
		Ds18b20Delay(10);  
 8001d5c:	200a      	movs	r0, #10
 8001d5e:	f7fe ff93 	bl	8000c88 <HAL_Delay>
		Ds18b20Timeout-=1;
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <Ds18b20_ManualConvert+0xd4>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <Ds18b20_ManualConvert+0xd4>)
 8001d6c:	801a      	strh	r2, [r3, #0]
		if(Ds18b20Timeout==0)
 8001d6e:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <Ds18b20_ManualConvert+0xd4>)
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <Ds18b20_ManualConvert+0x44>
	while (!DS18B20_AllDone(&OneWire))
 8001d76:	4828      	ldr	r0, [pc, #160]	; (8001e18 <Ds18b20_ManualConvert+0xd8>)
 8001d78:	f000 fa63 	bl	8002242 <DS18B20_AllDone>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0ec      	beq.n	8001d5c <Ds18b20_ManualConvert+0x1c>
 8001d82:	e000      	b.n	8001d86 <Ds18b20_ManualConvert+0x46>
			break;
 8001d84:	bf00      	nop
	}	
	if(Ds18b20Timeout>0)
 8001d86:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <Ds18b20_ManualConvert+0xd4>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d024      	beq.n	8001dd8 <Ds18b20_ManualConvert+0x98>
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	71fb      	strb	r3, [r7, #7]
 8001d92:	e01b      	b.n	8001dcc <Ds18b20_ManualConvert+0x8c>
		{
			Ds18b20Delay(100);
 8001d94:	2064      	movs	r0, #100	; 0x64
 8001d96:	f7fe ff77 	bl	8000c88 <HAL_Delay>
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	4a1f      	ldr	r2, [pc, #124]	; (8001e1c <Ds18b20_ManualConvert+0xdc>)
 8001da0:	1899      	adds	r1, r3, r2
 8001da2:	79fb      	ldrb	r3, [r7, #7]
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	3308      	adds	r3, #8
 8001da8:	4a1c      	ldr	r2, [pc, #112]	; (8001e1c <Ds18b20_ManualConvert+0xdc>)
 8001daa:	4413      	add	r3, r2
 8001dac:	79fc      	ldrb	r4, [r7, #7]
 8001dae:	461a      	mov	r2, r3
 8001db0:	4819      	ldr	r0, [pc, #100]	; (8001e18 <Ds18b20_ManualConvert+0xd8>)
 8001db2:	f000 f853 	bl	8001e5c <DS18B20_Read>
 8001db6:	4603      	mov	r3, r0
 8001db8:	4619      	mov	r1, r3
 8001dba:	4a18      	ldr	r2, [pc, #96]	; (8001e1c <Ds18b20_ManualConvert+0xdc>)
 8001dbc:	0123      	lsls	r3, r4, #4
 8001dbe:	4413      	add	r3, r2
 8001dc0:	330c      	adds	r3, #12
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <Ds18b20_ManualConvert+0xe0>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	79fa      	ldrb	r2, [r7, #7]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d3de      	bcc.n	8001d94 <Ds18b20_ManualConvert+0x54>
 8001dd6:	e011      	b.n	8001dfc <Ds18b20_ManualConvert+0xbc>
		}
	}
	else
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	71bb      	strb	r3, [r7, #6]
 8001ddc:	e009      	b.n	8001df2 <Ds18b20_ManualConvert+0xb2>
			ds18b20[i].DataIsValid = false;
 8001dde:	79bb      	ldrb	r3, [r7, #6]
 8001de0:	4a0e      	ldr	r2, [pc, #56]	; (8001e1c <Ds18b20_ManualConvert+0xdc>)
 8001de2:	011b      	lsls	r3, r3, #4
 8001de4:	4413      	add	r3, r2
 8001de6:	330c      	adds	r3, #12
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8001dec:	79bb      	ldrb	r3, [r7, #6]
 8001dee:	3301      	adds	r3, #1
 8001df0:	71bb      	strb	r3, [r7, #6]
 8001df2:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <Ds18b20_ManualConvert+0xe0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	79ba      	ldrb	r2, [r7, #6]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d3f0      	bcc.n	8001dde <Ds18b20_ManualConvert+0x9e>
	}
	if(Ds18b20Timeout==0)
 8001dfc:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <Ds18b20_ManualConvert+0xd4>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <Ds18b20_ManualConvert+0xc8>
		return false;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e000      	b.n	8001e0a <Ds18b20_ManualConvert+0xca>
	else
		return true;
 8001e08:	2301      	movs	r3, #1
	#endif
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd90      	pop	{r4, r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000092 	.word	0x20000092
 8001e18:	200000f4 	.word	0x200000f4
 8001e1c:	200000e4 	.word	0x200000e4
 8001e20:	20000090 	.word	0x20000090

08001e24 <DS18B20_StartAll>:
  OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);

  return 1;
}

bool DS18B20_StartAll(OneWire_t *OneWire) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  bool ret_val = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]
  /* Reset pulse */
  ret_val = !OneWire_Reset(OneWire);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 fa93 	bl	800235c <OneWire_Reset>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf0c      	ite	eq
 8001e3c:	2301      	moveq	r3, #1
 8001e3e:	2300      	movne	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
  /* Skip rom */
  OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8001e42:	21cc      	movs	r1, #204	; 0xcc
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 fb06 	bl	8002456 <OneWire_WriteByte>
  /* Start conversion on all connected devices */
  OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8001e4a:	2144      	movs	r1, #68	; 0x44
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fb02 	bl	8002456 <OneWire_WriteByte>
  return ret_val;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <DS18B20_Read>:

bool DS18B20_Read(OneWire_t *OneWire, uint8_t *ROM, float *destination) {
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b08b      	sub	sp, #44	; 0x2c
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  uint16_t temperature;
  uint8_t resolution;
  int8_t digit, minus = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  float decimal;
  uint8_t i = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	77fb      	strb	r3, [r7, #31]
  uint8_t data[9];
  uint8_t crc;

  if (ROM)	/// if reading with pointer used then check if it is the address of a DS18B20
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <DS18B20_Read+0x2c>
  {
    /* Check if device is DS18B20 */
    if (!DS18B20_Is(ROM)) {
 8001e78:	68b8      	ldr	r0, [r7, #8]
 8001e7a:	f000 f977 	bl	800216c <DS18B20_Is>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <DS18B20_Read+0x2c>
      return false;
 8001e84:	2300      	movs	r3, #0
 8001e86:	e0e3      	b.n	8002050 <DS18B20_Read+0x1f4>
    }
  }
  /* Check if line is released, if it is, then conversion is complete */
  if (!OneWire_ReadBit(OneWire)) {
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 fab7 	bl	80023fc <OneWire_ReadBit>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <DS18B20_Read+0x3c>
    /* Conversion is not finished yet */
    return false;
 8001e94:	2300      	movs	r3, #0
 8001e96:	e0db      	b.n	8002050 <DS18B20_Read+0x1f4>
  }

  /* Reset line */
  OneWire_Reset(OneWire);
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f000 fa5f 	bl	800235c <OneWire_Reset>
  if (ROM) { /// if reading with pointer used then select device
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <DS18B20_Read+0x50>
    /* Select ROM number */
    OneWire_SelectWithPointer(OneWire, ROM);
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 fc09 	bl	80026be <OneWire_SelectWithPointer>
  }
  if (!ROM) {	/// if reading without selecting device used then send Skip ROM command
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d103      	bne.n	8001eba <DS18B20_Read+0x5e>
    OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 8001eb2:	21cc      	movs	r1, #204	; 0xcc
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f000 face 	bl	8002456 <OneWire_WriteByte>
  }
  /* Read scratchpad command by onewire protocol */
  OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001eba:	21be      	movs	r1, #190	; 0xbe
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 faca 	bl	8002456 <OneWire_WriteByte>

  /* Get data */
  for (i = 0; i < 9; i++) {
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	77fb      	strb	r3, [r7, #31]
 8001ec6:	e00d      	b.n	8001ee4 <DS18B20_Read+0x88>
    /* Read byte by byte */
    data[i] = OneWire_ReadByte(OneWire);
 8001ec8:	7ffc      	ldrb	r4, [r7, #31]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 fae1 	bl	8002492 <OneWire_ReadByte>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ed8:	4423      	add	r3, r4
 8001eda:	f803 2c14 	strb.w	r2, [r3, #-20]
  for (i = 0; i < 9; i++) {
 8001ede:	7ffb      	ldrb	r3, [r7, #31]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	77fb      	strb	r3, [r7, #31]
 8001ee4:	7ffb      	ldrb	r3, [r7, #31]
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d9ee      	bls.n	8001ec8 <DS18B20_Read+0x6c>
  }

  /* Calculate CRC */
  crc = OneWire_CRC8(data, 8);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	2108      	movs	r1, #8
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f000 fc1f 	bl	8002734 <OneWire_CRC8>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	77bb      	strb	r3, [r7, #30]

  /* Check if CRC is ok */
  if (crc != data[8])
 8001efa:	7f3b      	ldrb	r3, [r7, #28]
 8001efc:	7fba      	ldrb	r2, [r7, #30]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d001      	beq.n	8001f06 <DS18B20_Read+0xaa>
  /* CRC invalid */
  return 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e0a4      	b.n	8002050 <DS18B20_Read+0x1f4>

  /* First two bytes of scratchpad are temperature values */
  temperature = data[0] | (data[1] << 8);
 8001f06:	7d3b      	ldrb	r3, [r7, #20]
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	7d7b      	ldrb	r3, [r7, #21]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	b21b      	sxth	r3, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b21b      	sxth	r3, r3
 8001f14:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Reset line */
  OneWire_Reset(OneWire);
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 fa20 	bl	800235c <OneWire_Reset>

  /* Check if temperature is negative */
  if (temperature & 0x8000) {
 8001f1c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	da05      	bge.n	8001f30 <DS18B20_Read+0xd4>
    /* Two's complement, temperature is negative */
    temperature = ~temperature + 1;
 8001f24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f26:	425b      	negs	r3, r3
 8001f28:	84fb      	strh	r3, [r7, #38]	; 0x26
    minus = 1;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  }

  /* Get sensor resolution */
  resolution = ((data[4] & 0x60) >> 5) + 9;
 8001f30:	7e3b      	ldrb	r3, [r7, #24]
 8001f32:	115b      	asrs	r3, r3, #5
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3309      	adds	r3, #9
 8001f3e:	777b      	strb	r3, [r7, #29]

  /* Store temperature integer digits and decimal digits */
  digit = temperature >> 4;
 8001f40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  digit |= ((temperature >> 8) & 0x7) << 4;
 8001f4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f4c:	0a1b      	lsrs	r3, r3, #8
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	b25b      	sxtb	r3, r3
 8001f54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f58:	b25a      	sxtb	r2, r3
 8001f5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  /* Store decimal digits */
  switch (resolution) {
 8001f64:	7f7b      	ldrb	r3, [r7, #29]
 8001f66:	3b09      	subs	r3, #9
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	d851      	bhi.n	8002010 <DS18B20_Read+0x1b4>
 8001f6c:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <DS18B20_Read+0x118>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08001f85 	.word	0x08001f85
 8001f78:	08001fa9 	.word	0x08001fa9
 8001f7c:	08001fcd 	.word	0x08001fcd
 8001f80:	08001ff1 	.word	0x08001ff1
  case 9:
    decimal = (temperature >> 3) & 0x01;
 8001f84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f86:	08db      	lsrs	r3, r3, #3
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fab6 	bl	8000500 <__aeabi_i2f>
 8001f94:	4603      	mov	r3, r0
 8001f96:	623b      	str	r3, [r7, #32]
    decimal *= (float) DS18B20_DECIMAL_STEPS_9BIT;
 8001f98:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001f9c:	6a38      	ldr	r0, [r7, #32]
 8001f9e:	f7fe f941 	bl	8000224 <__aeabi_fmul>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	623b      	str	r3, [r7, #32]
    break;
 8001fa6:	e038      	b.n	800201a <DS18B20_Read+0x1be>
  case 10:
    decimal = (temperature >> 2) & 0x03;
 8001fa8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe faa4 	bl	8000500 <__aeabi_i2f>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	623b      	str	r3, [r7, #32]
    decimal *= (float) DS18B20_DECIMAL_STEPS_10BIT;
 8001fbc:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8001fc0:	6a38      	ldr	r0, [r7, #32]
 8001fc2:	f7fe f92f 	bl	8000224 <__aeabi_fmul>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	623b      	str	r3, [r7, #32]
    break;
 8001fca:	e026      	b.n	800201a <DS18B20_Read+0x1be>
  case 11:
    decimal = (temperature >> 1) & 0x07;
 8001fcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fce:	085b      	lsrs	r3, r3, #1
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fa92 	bl	8000500 <__aeabi_i2f>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	623b      	str	r3, [r7, #32]
    decimal *= (float) DS18B20_DECIMAL_STEPS_11BIT;
 8001fe0:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8001fe4:	6a38      	ldr	r0, [r7, #32]
 8001fe6:	f7fe f91d 	bl	8000224 <__aeabi_fmul>
 8001fea:	4603      	mov	r3, r0
 8001fec:	623b      	str	r3, [r7, #32]
    break;
 8001fee:	e014      	b.n	800201a <DS18B20_Read+0x1be>
  case 12:
    decimal = temperature & 0x0F;
 8001ff0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fa82 	bl	8000500 <__aeabi_i2f>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	623b      	str	r3, [r7, #32]
    decimal *= (float) DS18B20_DECIMAL_STEPS_12BIT;
 8002000:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8002004:	6a38      	ldr	r0, [r7, #32]
 8002006:	f7fe f90d 	bl	8000224 <__aeabi_fmul>
 800200a:	4603      	mov	r3, r0
 800200c:	623b      	str	r3, [r7, #32]
    break;
 800200e:	e004      	b.n	800201a <DS18B20_Read+0x1be>
  default:
    decimal = 0xFF;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <DS18B20_Read+0x1fc>)
 8002012:	623b      	str	r3, [r7, #32]
    digit = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  }

  /* Check for negative part */
  decimal = digit + decimal;
 800201a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa6e 	bl	8000500 <__aeabi_i2f>
 8002024:	4603      	mov	r3, r0
 8002026:	4619      	mov	r1, r3
 8002028:	6a38      	ldr	r0, [r7, #32]
 800202a:	f7fe f9b5 	bl	8000398 <__addsf3>
 800202e:	4603      	mov	r3, r0
 8002030:	623b      	str	r3, [r7, #32]
  if (minus) decimal = 0 - decimal;
 8002032:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8002036:	2b00      	cmp	r3, #0
 8002038:	d006      	beq.n	8002048 <DS18B20_Read+0x1ec>
 800203a:	6a39      	ldr	r1, [r7, #32]
 800203c:	f04f 0000 	mov.w	r0, #0
 8002040:	f7fe f9a8 	bl	8000394 <__aeabi_fsub>
 8002044:	4603      	mov	r3, r0
 8002046:	623b      	str	r3, [r7, #32]

  /* Set to pointer */
  *destination = decimal;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a3a      	ldr	r2, [r7, #32]
 800204c:	601a      	str	r2, [r3, #0]

  /* Return 1, temperature valid */
  return true;
 800204e:	2301      	movs	r3, #1
}
 8002050:	4618      	mov	r0, r3
 8002052:	372c      	adds	r7, #44	; 0x2c
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}
 8002058:	437f0000 	.word	0x437f0000

0800205c <DS18B20_SetResolution>:

  /* Return 9 - 12 value according to number of bits */
  return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t *OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	4613      	mov	r3, r2
 8002068:	71fb      	strb	r3, [r7, #7]
  uint8_t th, tl, conf;
  if (!DS18B20_Is(ROM)) return 0;
 800206a:	68b8      	ldr	r0, [r7, #8]
 800206c:	f000 f87e 	bl	800216c <DS18B20_Is>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <DS18B20_SetResolution+0x1e>
 8002076:	2300      	movs	r3, #0
 8002078:	e074      	b.n	8002164 <DS18B20_SetResolution+0x108>

  /* Reset line */
  OneWire_Reset(OneWire);
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 f96e 	bl	800235c <OneWire_Reset>
  /* Select ROM number */
  OneWire_SelectWithPointer(OneWire, ROM);
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 fb1b 	bl	80026be <OneWire_SelectWithPointer>
  /* Read scratchpad command by onewire protocol */
  OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8002088:	21be      	movs	r1, #190	; 0xbe
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f9e3 	bl	8002456 <OneWire_WriteByte>

  /* Ignore first 2 bytes */
  OneWire_ReadByte(OneWire);
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f9fe 	bl	8002492 <OneWire_ReadByte>
  OneWire_ReadByte(OneWire);
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f9fb 	bl	8002492 <OneWire_ReadByte>

  th = OneWire_ReadByte(OneWire);
 800209c:	68f8      	ldr	r0, [r7, #12]
 800209e:	f000 f9f8 	bl	8002492 <OneWire_ReadByte>
 80020a2:	4603      	mov	r3, r0
 80020a4:	75bb      	strb	r3, [r7, #22]
  tl = OneWire_ReadByte(OneWire);
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f9f3 	bl	8002492 <OneWire_ReadByte>
 80020ac:	4603      	mov	r3, r0
 80020ae:	757b      	strb	r3, [r7, #21]
  conf = OneWire_ReadByte(OneWire);
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f9ee 	bl	8002492 <OneWire_ReadByte>
 80020b6:	4603      	mov	r3, r0
 80020b8:	75fb      	strb	r3, [r7, #23]

  if (resolution == DS18B20_Resolution_9bits) {
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	2b09      	cmp	r3, #9
 80020be:	d108      	bne.n	80020d2 <DS18B20_SetResolution+0x76>
    conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020c6:	75fb      	strb	r3, [r7, #23]
    conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
 80020ca:	f023 0320 	bic.w	r3, r3, #32
 80020ce:	75fb      	strb	r3, [r7, #23]
 80020d0:	e022      	b.n	8002118 <DS18B20_SetResolution+0xbc>
  } else if (resolution == DS18B20_Resolution_10bits) {
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	2b0a      	cmp	r3, #10
 80020d6:	d108      	bne.n	80020ea <DS18B20_SetResolution+0x8e>
    conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020de:	75fb      	strb	r3, [r7, #23]
    conf |= 1 << DS18B20_RESOLUTION_R0;
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	f043 0320 	orr.w	r3, r3, #32
 80020e6:	75fb      	strb	r3, [r7, #23]
 80020e8:	e016      	b.n	8002118 <DS18B20_SetResolution+0xbc>
  } else if (resolution == DS18B20_Resolution_11bits) {
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	2b0b      	cmp	r3, #11
 80020ee:	d108      	bne.n	8002102 <DS18B20_SetResolution+0xa6>
    conf |= 1 << DS18B20_RESOLUTION_R1;
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020f6:	75fb      	strb	r3, [r7, #23]
    conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	f023 0320 	bic.w	r3, r3, #32
 80020fe:	75fb      	strb	r3, [r7, #23]
 8002100:	e00a      	b.n	8002118 <DS18B20_SetResolution+0xbc>
  } else if (resolution == DS18B20_Resolution_12bits) {
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b0c      	cmp	r3, #12
 8002106:	d107      	bne.n	8002118 <DS18B20_SetResolution+0xbc>
    conf |= 1 << DS18B20_RESOLUTION_R1;
 8002108:	7dfb      	ldrb	r3, [r7, #23]
 800210a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800210e:	75fb      	strb	r3, [r7, #23]
    conf |= 1 << DS18B20_RESOLUTION_R0;
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	f043 0320 	orr.w	r3, r3, #32
 8002116:	75fb      	strb	r3, [r7, #23]
  }

  /* Reset line */
  OneWire_Reset(OneWire);
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f91f 	bl	800235c <OneWire_Reset>
  /* Select ROM number */
  OneWire_SelectWithPointer(OneWire, ROM);
 800211e:	68b9      	ldr	r1, [r7, #8]
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 facc 	bl	80026be <OneWire_SelectWithPointer>
  /* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
  OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8002126:	214e      	movs	r1, #78	; 0x4e
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 f994 	bl	8002456 <OneWire_WriteByte>

  /* Write bytes */
  OneWire_WriteByte(OneWire, th);
 800212e:	7dbb      	ldrb	r3, [r7, #22]
 8002130:	4619      	mov	r1, r3
 8002132:	68f8      	ldr	r0, [r7, #12]
 8002134:	f000 f98f 	bl	8002456 <OneWire_WriteByte>
  OneWire_WriteByte(OneWire, tl);
 8002138:	7d7b      	ldrb	r3, [r7, #21]
 800213a:	4619      	mov	r1, r3
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 f98a 	bl	8002456 <OneWire_WriteByte>
  OneWire_WriteByte(OneWire, conf);
 8002142:	7dfb      	ldrb	r3, [r7, #23]
 8002144:	4619      	mov	r1, r3
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f985 	bl	8002456 <OneWire_WriteByte>

  /* Reset line */
  OneWire_Reset(OneWire);
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f905 	bl	800235c <OneWire_Reset>
  /* Select ROM number */
  OneWire_SelectWithPointer(OneWire, ROM);
 8002152:	68b9      	ldr	r1, [r7, #8]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 fab2 	bl	80026be <OneWire_SelectWithPointer>
  /* Copy scratchpad to EEPROM of DS18B20 */
  OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 800215a:	2148      	movs	r1, #72	; 0x48
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f97a 	bl	8002456 <OneWire_WriteByte>

  return 1;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) {
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Checks if first byte is equal to DS18B20's family code */
  if (*ROM == DS18B20_FAMILY_CODE) return 1;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b28      	cmp	r3, #40	; 0x28
 800217a:	d101      	bne.n	8002180 <DS18B20_Is+0x14>
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <DS18B20_Is+0x16>

  return 0;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <DS18B20_DisableAlarmTemperature>:
  OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);

  return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t *OneWire, uint8_t *ROM) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint8_t tl, th, conf;
  if (!DS18B20_Is(ROM)) return 0;
 8002196:	6838      	ldr	r0, [r7, #0]
 8002198:	f7ff ffe8 	bl	800216c <DS18B20_Is>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <DS18B20_DisableAlarmTemperature+0x1a>
 80021a2:	2300      	movs	r3, #0
 80021a4:	e049      	b.n	800223a <DS18B20_DisableAlarmTemperature+0xae>

  /* Reset line */
  OneWire_Reset(OneWire);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f8d8 	bl	800235c <OneWire_Reset>
  /* Select ROM number */
  OneWire_SelectWithPointer(OneWire, ROM);
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fa85 	bl	80026be <OneWire_SelectWithPointer>
  /* Read scratchpad command by onewire protocol */
  OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80021b4:	21be      	movs	r1, #190	; 0xbe
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f94d 	bl	8002456 <OneWire_WriteByte>

  /* Ignore first 2 bytes */
  OneWire_ReadByte(OneWire);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f968 	bl	8002492 <OneWire_ReadByte>
  OneWire_ReadByte(OneWire);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f965 	bl	8002492 <OneWire_ReadByte>

  th = OneWire_ReadByte(OneWire);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f962 	bl	8002492 <OneWire_ReadByte>
 80021ce:	4603      	mov	r3, r0
 80021d0:	73fb      	strb	r3, [r7, #15]
  tl = OneWire_ReadByte(OneWire);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f95d 	bl	8002492 <OneWire_ReadByte>
 80021d8:	4603      	mov	r3, r0
 80021da:	73bb      	strb	r3, [r7, #14]
  conf = OneWire_ReadByte(OneWire);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f958 	bl	8002492 <OneWire_ReadByte>
 80021e2:	4603      	mov	r3, r0
 80021e4:	737b      	strb	r3, [r7, #13]

  th = 125;
 80021e6:	237d      	movs	r3, #125	; 0x7d
 80021e8:	73fb      	strb	r3, [r7, #15]
  tl = (uint8_t) -55;
 80021ea:	23c9      	movs	r3, #201	; 0xc9
 80021ec:	73bb      	strb	r3, [r7, #14]

  /* Reset line */
  OneWire_Reset(OneWire);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f8b4 	bl	800235c <OneWire_Reset>
  /* Select ROM number */
  OneWire_SelectWithPointer(OneWire, ROM);
 80021f4:	6839      	ldr	r1, [r7, #0]
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 fa61 	bl	80026be <OneWire_SelectWithPointer>
  /* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
  OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80021fc:	214e      	movs	r1, #78	; 0x4e
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f929 	bl	8002456 <OneWire_WriteByte>

  /* Write bytes */
  OneWire_WriteByte(OneWire, th);
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	4619      	mov	r1, r3
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f924 	bl	8002456 <OneWire_WriteByte>
  OneWire_WriteByte(OneWire, tl);
 800220e:	7bbb      	ldrb	r3, [r7, #14]
 8002210:	4619      	mov	r1, r3
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f91f 	bl	8002456 <OneWire_WriteByte>
  OneWire_WriteByte(OneWire, conf);
 8002218:	7b7b      	ldrb	r3, [r7, #13]
 800221a:	4619      	mov	r1, r3
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f91a 	bl	8002456 <OneWire_WriteByte>

  /* Reset line */
  OneWire_Reset(OneWire);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f89a 	bl	800235c <OneWire_Reset>
  /* Select ROM number */
  OneWire_SelectWithPointer(OneWire, ROM);
 8002228:	6839      	ldr	r1, [r7, #0]
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 fa47 	bl	80026be <OneWire_SelectWithPointer>
  /* Copy scratchpad to EEPROM of DS18B20 */
  OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8002230:	2148      	movs	r1, #72	; 0x48
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f90f 	bl	8002456 <OneWire_WriteByte>

  return 1;
 8002238:	2301      	movs	r3, #1
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <DS18B20_AllDone>:
uint8_t DS18B20_AlarmSearch(OneWire_t *OneWire) {
  /* Start alarm search */
  return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t *OneWire) {
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  /* If read bit is low, then device is not finished yet with calculation temperature */
  return OneWire_ReadBit(OneWire);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8d6 	bl	80023fc <OneWire_ReadBit>
 8002250:	4603      	mov	r3, r0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <ONEWIRE_DELAY>:
#include "onewire.h"
#if (!_DS18B20_NO_NOT_USE_TIMER)
#include "tim.h"
#endif

void ONEWIRE_DELAY(uint16_t time_us) {
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
#if (_DS18B20_NO_NOT_USE_TIMER==1)	/// use NOPs for delay
  __IO uint32_t Delay = time_us * (SystemCoreClock / 8U / 1000000U);
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <ONEWIRE_DELAY+0x38>)
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	490a      	ldr	r1, [pc, #40]	; (8002298 <ONEWIRE_DELAY+0x3c>)
 800226e:	fba1 1202 	umull	r1, r2, r1, r2
 8002272:	0d52      	lsrs	r2, r2, #21
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	60fb      	str	r3, [r7, #12]
  do {
    __NOP();
 800227a:	bf00      	nop
  } while (Delay--);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	60fa      	str	r2, [r7, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f9      	bne.n	800227a <ONEWIRE_DELAY+0x1e>
	__HAL_TIM_SET_COUNTER(&_DS18B20_TIMER,0);  // set the counter value a 0
	while (__HAL_TIM_GET_COUNTER(&_DS18B20_TIMER) <= time_us);  // wait for the counter to reach the us input in the parameter
	//_DS18B20_TIMER.Instance->CNT = 0;
	//while(_DS18B20_TIMER.Instance->CNT <= time_us);
#endif
}
 8002286:	bf00      	nop
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	bc80      	pop	{r7}
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	20000000 	.word	0x20000000
 8002298:	431bde83 	.word	0x431bde83

0800229c <ONEWIRE_LOW>:


void ONEWIRE_LOW(OneWire_t *gp) {
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  gp->GPIOx->BSRR = gp->GPIO_Pin << 16;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	889b      	ldrh	r3, [r3, #4]
 80022a8:	041a      	lsls	r2, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	611a      	str	r2, [r3, #16]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp) {
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  gp->GPIOx->BSRR = gp->GPIO_Pin;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	889a      	ldrh	r2, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	611a      	str	r2, [r3, #16]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr
	...

080022d8 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp) {
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
//  gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
//  gpinit.Pin = gp->GPIO_Pin;
//  HAL_GPIO_Init(gp->GPIOx, &gpinit);
//	IO_MODE_IN();
//  IO_MODE_IN(gp->GPIOx,gp->GPIO_Pin);
	GPIOG->CRH&=0XFFFF0FFF;
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <ONEWIRE_INPUT+0x2c>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4a07      	ldr	r2, [pc, #28]	; (8002304 <ONEWIRE_INPUT+0x2c>)
 80022e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022ea:	6053      	str	r3, [r2, #4]
	GPIOG->CRH|=8<<12;
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <ONEWIRE_INPUT+0x2c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <ONEWIRE_INPUT+0x2c>)
 80022f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f6:	6053      	str	r3, [r2, #4]
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40012000 	.word	0x40012000

08002308 <ONEWIRE_OUTPUT>:

void ONEWIRE_OUTPUT(OneWire_t *gp) {
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
//  gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
//  gpinit.Pin = gp->GPIO_Pin;
//  HAL_GPIO_Init(gp->GPIOx, &gpinit);
//  IO_MODE_OUT(gp->GPIOx,gp->GPIO_Pin);
//  IO_MODE_OUT();
	GPIOG->CRH&=0XFFFF0FFF;
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <ONEWIRE_OUTPUT+0x2c>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	4a07      	ldr	r2, [pc, #28]	; (8002334 <ONEWIRE_OUTPUT+0x2c>)
 8002316:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800231a:	6053      	str	r3, [r2, #4]
	GPIOG->CRH|=3<<12;
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <ONEWIRE_OUTPUT+0x2c>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a04      	ldr	r2, [pc, #16]	; (8002334 <ONEWIRE_OUTPUT+0x2c>)
 8002322:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002326:	6053      	str	r3, [r2, #4]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40012000 	.word	0x40012000

08002338 <OneWire_Init>:

void OneWire_Init(OneWire_t *OneWireStruct, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
#if (_DS18B20_NO_NOT_USE_TIMER)
#else
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
#endif

  OneWireStruct->GPIOx = GPIOx;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	601a      	str	r2, [r3, #0]
  OneWireStruct->GPIO_Pin = GPIO_Pin;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	88fa      	ldrh	r2, [r7, #6]
 8002350:	809a      	strh	r2, [r3, #4]
   OneWireDelay(500);
   ONEWIRE_LOW(OneWireStruct);
   OneWireDelay(500);
   ONEWIRE_HIGH(OneWireStruct);
   OneWireDelay(500);*/
}
 8002352:	bf00      	nop
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t *OneWireStruct) {
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Line low, and wait 480us */
  ONEWIRE_LOW(OneWireStruct);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff ff99 	bl	800229c <ONEWIRE_LOW>
  ONEWIRE_OUTPUT(OneWireStruct);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ffcc 	bl	8002308 <ONEWIRE_OUTPUT>
  ONEWIRE_DELAY(480);
 8002370:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8002374:	f7ff ff72 	bl	800225c <ONEWIRE_DELAY>
  ONEWIRE_DELAY(20);
 8002378:	2014      	movs	r0, #20
 800237a:	f7ff ff6f 	bl	800225c <ONEWIRE_DELAY>
  /* Release line and wait for 70us */
#if (_DS18B20_USE_FREERTOS == 1)
  taskENTER_CRITICAL();
#endif
  ONEWIRE_HIGH(OneWireStruct);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ff9b 	bl	80022ba <ONEWIRE_HIGH>
  ONEWIRE_DELAY(70);
 8002384:	2046      	movs	r0, #70	; 0x46
 8002386:	f7ff ff69 	bl	800225c <ONEWIRE_DELAY>
  /* Check bit value */
  i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	889b      	ldrh	r3, [r3, #4]
 8002392:	4619      	mov	r1, r3
 8002394:	4610      	mov	r0, r2
 8002396:	f7fe ff13 	bl	80011c0 <HAL_GPIO_ReadPin>
 800239a:	4603      	mov	r3, r0
 800239c:	73fb      	strb	r3, [r7, #15]
#if (_DS18B20_USE_FREERTOS == 1)
  taskEXIT_CRITICAL();
#endif
  /* Delay for 410 us */
  ONEWIRE_DELAY(410);
 800239e:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80023a2:	f7ff ff5b 	bl	800225c <ONEWIRE_DELAY>
  /* Return value of presence pulse, 0 = OK, 1 = ERROR */
  return i;
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t *OneWireStruct, uint8_t bit) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	70fb      	strb	r3, [r7, #3]
  if (bit) {
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00c      	beq.n	80023dc <OneWire_WriteBit+0x2c>
    /* Set line low */
#if (_DS18B20_USE_FREERTOS == 1)
    taskENTER_CRITICAL();
#endif
    ONEWIRE_LOW(OneWireStruct);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ff6a 	bl	800229c <ONEWIRE_LOW>
    ONEWIRE_DELAY(10);
 80023c8:	200a      	movs	r0, #10
 80023ca:	f7ff ff47 	bl	800225c <ONEWIRE_DELAY>

    /* Bit high */
    ONEWIRE_HIGH(OneWireStruct);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ff73 	bl	80022ba <ONEWIRE_HIGH>

    /* Wait for 55 us and release the line */
    ONEWIRE_DELAY(55);
 80023d4:	2037      	movs	r0, #55	; 0x37
 80023d6:	f7ff ff41 	bl	800225c <ONEWIRE_DELAY>
#if (_DS18B20_USE_FREERTOS == 1)
    taskEXIT_CRITICAL();
#endif
  }

}
 80023da:	e00b      	b.n	80023f4 <OneWire_WriteBit+0x44>
    ONEWIRE_LOW(OneWireStruct);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ff5d 	bl	800229c <ONEWIRE_LOW>
    ONEWIRE_DELAY(65);
 80023e2:	2041      	movs	r0, #65	; 0x41
 80023e4:	f7ff ff3a 	bl	800225c <ONEWIRE_DELAY>
    ONEWIRE_HIGH(OneWireStruct);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f7ff ff66 	bl	80022ba <ONEWIRE_HIGH>
    ONEWIRE_DELAY(5);
 80023ee:	2005      	movs	r0, #5
 80023f0:	f7ff ff34 	bl	800225c <ONEWIRE_DELAY>
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t *OneWireStruct) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint8_t bit = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	73fb      	strb	r3, [r7, #15]
  /* Line low */
#if (_DS18B20_USE_FREERTOS == 1)
  taskENTER_CRITICAL();
#endif
  // 参考正点原子，设置为输出
  ONEWIRE_OUTPUT(OneWireStruct);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff7d 	bl	8002308 <ONEWIRE_OUTPUT>
  ONEWIRE_LOW(OneWireStruct);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ff44 	bl	800229c <ONEWIRE_LOW>
  ONEWIRE_DELAY(2);
 8002414:	2002      	movs	r0, #2
 8002416:	f7ff ff21 	bl	800225c <ONEWIRE_DELAY>

  /* Release line */
  ONEWIRE_HIGH(OneWireStruct);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ff4d 	bl	80022ba <ONEWIRE_HIGH>
  ONEWIRE_DELAY(10);
 8002420:	200a      	movs	r0, #10
 8002422:	f7ff ff1b 	bl	800225c <ONEWIRE_DELAY>
  // 参考正点原子，设置为输入
  ONEWIRE_INPUT(OneWireStruct);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ff56 	bl	80022d8 <ONEWIRE_INPUT>
  /* Read line value */
  if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	889b      	ldrh	r3, [r3, #4]
 8002434:	4619      	mov	r1, r3
 8002436:	4610      	mov	r0, r2
 8002438:	f7fe fec2 	bl	80011c0 <HAL_GPIO_ReadPin>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <OneWire_ReadBit+0x4a>
    /* Bit is HIGH */
    bit = 1;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
  }

  /* Wait 50us to complete 60us period */
  ONEWIRE_DELAY(50);
 8002446:	2032      	movs	r0, #50	; 0x32
 8002448:	f7ff ff08 	bl	800225c <ONEWIRE_DELAY>
#if (_DS18B20_USE_FREERTOS == 1)
  taskEXIT_CRITICAL();
#endif

  /* Return bit value */
  return bit;
 800244c:	7bfb      	ldrb	r3, [r7, #15]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t *OneWireStruct, uint8_t byte) {
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	70fb      	strb	r3, [r7, #3]
  uint8_t i = 8;
 8002462:	2308      	movs	r3, #8
 8002464:	73fb      	strb	r3, [r7, #15]
  /* Write 8 bits */
  while (i--) {
 8002466:	e00a      	b.n	800247e <OneWire_WriteByte+0x28>
    /* LSB bit is first */
    OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	b2db      	uxtb	r3, r3
 8002470:	4619      	mov	r1, r3
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ff9c 	bl	80023b0 <OneWire_WriteBit>
    byte >>= 1;
 8002478:	78fb      	ldrb	r3, [r7, #3]
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	70fb      	strb	r3, [r7, #3]
  while (i--) {
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	1e5a      	subs	r2, r3, #1
 8002482:	73fa      	strb	r2, [r7, #15]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ef      	bne.n	8002468 <OneWire_WriteByte+0x12>
  }
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t *OneWireStruct) {
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  uint8_t i = 8, byte = 0;
 800249a:	2308      	movs	r3, #8
 800249c:	73fb      	strb	r3, [r7, #15]
 800249e:	2300      	movs	r3, #0
 80024a0:	73bb      	strb	r3, [r7, #14]
  while (i--) {
 80024a2:	e00d      	b.n	80024c0 <OneWire_ReadByte+0x2e>
    byte >>= 1;
 80024a4:	7bbb      	ldrb	r3, [r7, #14]
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	73bb      	strb	r3, [r7, #14]
    byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ffa6 	bl	80023fc <OneWire_ReadBit>
 80024b0:	4603      	mov	r3, r0
 80024b2:	01db      	lsls	r3, r3, #7
 80024b4:	b25a      	sxtb	r2, r3
 80024b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	b25b      	sxtb	r3, r3
 80024be:	73bb      	strb	r3, [r7, #14]
  while (i--) {
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	1e5a      	subs	r2, r3, #1
 80024c4:	73fa      	strb	r2, [r7, #15]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1ec      	bne.n	80024a4 <OneWire_ReadByte+0x12>
  }

  return byte;
 80024ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <OneWire_First>:

uint8_t OneWire_First(OneWire_t *OneWireStruct) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Reset search values */
  OneWire_ResetSearch(OneWireStruct);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f816 	bl	800250e <OneWire_ResetSearch>

  /* Start with searching */
  return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80024e2:	21f0      	movs	r1, #240	; 0xf0
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f824 	bl	8002532 <OneWire_Search>
 80024ea:	4603      	mov	r3, r0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t *OneWireStruct) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Leave the search state alone */
  return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 80024fc:	21f0      	movs	r1, #240	; 0xf0
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f817 	bl	8002532 <OneWire_Search>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t *OneWireStruct) {
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  /* Reset the search state */
  OneWireStruct->LastDiscrepancy = 0;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	719a      	strb	r2, [r3, #6]
  OneWireStruct->LastDeviceFlag = 0;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	721a      	strb	r2, [r3, #8]
  OneWireStruct->LastFamilyDiscrepancy = 0;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	71da      	strb	r2, [r3, #7]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr

08002532 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t *OneWireStruct, uint8_t command) {
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	70fb      	strb	r3, [r7, #3]
  uint8_t last_zero, rom_byte_number, search_result;
  uint8_t id_bit, cmp_id_bit;
  uint8_t rom_byte_mask, search_direction;

  /* Initialize for search */
  id_bit_number = 1;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
  last_zero = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	73bb      	strb	r3, [r7, #14]
  rom_byte_number = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	737b      	strb	r3, [r7, #13]
  rom_byte_mask = 1;
 800254a:	2301      	movs	r3, #1
 800254c:	72fb      	strb	r3, [r7, #11]
  search_result = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	733b      	strb	r3, [r7, #12]

  // if the last call was not the last one
  if (!OneWireStruct->LastDeviceFlag) {
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7a1b      	ldrb	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f040 809a 	bne.w	8002690 <OneWire_Search+0x15e>
    // 1-Wire reset
    if (OneWire_Reset(OneWireStruct)) {
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff fefd 	bl	800235c <OneWire_Reset>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00a      	beq.n	800257e <OneWire_Search+0x4c>
      /* Reset the search */
      OneWireStruct->LastDiscrepancy = 0;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	719a      	strb	r2, [r3, #6]
      OneWireStruct->LastDeviceFlag = 0;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	721a      	strb	r2, [r3, #8]
      OneWireStruct->LastFamilyDiscrepancy = 0;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	71da      	strb	r2, [r3, #7]
      return 0;
 800257a:	2300      	movs	r3, #0
 800257c:	e09b      	b.n	80026b6 <OneWire_Search+0x184>
    }

    // issue the search command
    OneWire_WriteByte(OneWireStruct, command);
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	4619      	mov	r1, r3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff ff67 	bl	8002456 <OneWire_WriteByte>

    // loop to do the search
    do {
      // read a bit and its complement
      id_bit = OneWire_ReadBit(OneWireStruct);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f7ff ff37 	bl	80023fc <OneWire_ReadBit>
 800258e:	4603      	mov	r3, r0
 8002590:	727b      	strb	r3, [r7, #9]
      cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ff32 	bl	80023fc <OneWire_ReadBit>
 8002598:	4603      	mov	r3, r0
 800259a:	723b      	strb	r3, [r7, #8]

      // check for no devices on 1-wire
      if ((id_bit == 1) && (cmp_id_bit == 1)) {
 800259c:	7a7b      	ldrb	r3, [r7, #9]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d102      	bne.n	80025a8 <OneWire_Search+0x76>
 80025a2:	7a3b      	ldrb	r3, [r7, #8]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d064      	beq.n	8002672 <OneWire_Search+0x140>
        break;
      } else {
        // all devices coupled have 0 or 1
        if (id_bit != cmp_id_bit) {
 80025a8:	7a7a      	ldrb	r2, [r7, #9]
 80025aa:	7a3b      	ldrb	r3, [r7, #8]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d002      	beq.n	80025b6 <OneWire_Search+0x84>
          search_direction = id_bit;  // bit write value for search
 80025b0:	7a7b      	ldrb	r3, [r7, #9]
 80025b2:	72bb      	strb	r3, [r7, #10]
 80025b4:	e026      	b.n	8002604 <OneWire_Search+0xd2>
        } else {
          // if this discrepancy if before the Last Discrepancy
          // on a previous next then pick the same as last time
          if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	799b      	ldrb	r3, [r3, #6]
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d20d      	bcs.n	80025dc <OneWire_Search+0xaa>
            search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80025c0:	7b7b      	ldrb	r3, [r7, #13]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	7a5a      	ldrb	r2, [r3, #9]
 80025c8:	7afb      	ldrb	r3, [r7, #11]
 80025ca:	4013      	ands	r3, r2
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf14      	ite	ne
 80025d2:	2301      	movne	r3, #1
 80025d4:	2300      	moveq	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	72bb      	strb	r3, [r7, #10]
 80025da:	e008      	b.n	80025ee <OneWire_Search+0xbc>
          } else {
            // if equal to last pick 1, if not then pick 0
            search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	799b      	ldrb	r3, [r3, #6]
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	72bb      	strb	r3, [r7, #10]
          }

          // if 0 was picked then record its position in LastZero
          if (search_direction == 0) {
 80025ee:	7abb      	ldrb	r3, [r7, #10]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d107      	bne.n	8002604 <OneWire_Search+0xd2>
            last_zero = id_bit_number;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	73bb      	strb	r3, [r7, #14]

            // check for Last discrepancy in family
            if (last_zero < 9) {
 80025f8:	7bbb      	ldrb	r3, [r7, #14]
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d802      	bhi.n	8002604 <OneWire_Search+0xd2>
              OneWireStruct->LastFamilyDiscrepancy = last_zero;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7bba      	ldrb	r2, [r7, #14]
 8002602:	71da      	strb	r2, [r3, #7]
          }
        }

        // set or clear the bit in the ROM byte rom_byte_number
        // with mask rom_byte_mask
        if (search_direction == 1) {
 8002604:	7abb      	ldrb	r3, [r7, #10]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d10c      	bne.n	8002624 <OneWire_Search+0xf2>
          OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 800260a:	7b7b      	ldrb	r3, [r7, #13]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	4413      	add	r3, r2
 8002610:	7a59      	ldrb	r1, [r3, #9]
 8002612:	7b7b      	ldrb	r3, [r7, #13]
 8002614:	7afa      	ldrb	r2, [r7, #11]
 8002616:	430a      	orrs	r2, r1
 8002618:	b2d1      	uxtb	r1, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	460a      	mov	r2, r1
 8002620:	725a      	strb	r2, [r3, #9]
 8002622:	e010      	b.n	8002646 <OneWire_Search+0x114>
        } else {
          OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8002624:	7b7b      	ldrb	r3, [r7, #13]
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	4413      	add	r3, r2
 800262a:	7a5b      	ldrb	r3, [r3, #9]
 800262c:	b25a      	sxtb	r2, r3
 800262e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002632:	43db      	mvns	r3, r3
 8002634:	b25b      	sxtb	r3, r3
 8002636:	4013      	ands	r3, r2
 8002638:	b25a      	sxtb	r2, r3
 800263a:	7b7b      	ldrb	r3, [r7, #13]
 800263c:	b2d1      	uxtb	r1, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	460a      	mov	r2, r1
 8002644:	725a      	strb	r2, [r3, #9]
        }

        // serial number search direction write bit
        OneWire_WriteBit(OneWireStruct, search_direction);
 8002646:	7abb      	ldrb	r3, [r7, #10]
 8002648:	4619      	mov	r1, r3
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff feb0 	bl	80023b0 <OneWire_WriteBit>

        // increment the byte counter id_bit_number
        // and shift the mask rom_byte_mask
        id_bit_number++;
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	3301      	adds	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
        rom_byte_mask <<= 1;
 8002656:	7afb      	ldrb	r3, [r7, #11]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	72fb      	strb	r3, [r7, #11]

        // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
        if (rom_byte_mask == 0) {
 800265c:	7afb      	ldrb	r3, [r7, #11]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d104      	bne.n	800266c <OneWire_Search+0x13a>
          //docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
          rom_byte_number++;
 8002662:	7b7b      	ldrb	r3, [r7, #13]
 8002664:	3301      	adds	r3, #1
 8002666:	737b      	strb	r3, [r7, #13]
          rom_byte_mask = 1;
 8002668:	2301      	movs	r3, #1
 800266a:	72fb      	strb	r3, [r7, #11]
        }
      }
    } while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 800266c:	7b7b      	ldrb	r3, [r7, #13]
 800266e:	2b07      	cmp	r3, #7
 8002670:	d98a      	bls.n	8002588 <OneWire_Search+0x56>

    // if the search was successful then
    if (!(id_bit_number < 65)) {
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b40      	cmp	r3, #64	; 0x40
 8002676:	d90b      	bls.n	8002690 <OneWire_Search+0x15e>
      // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
      OneWireStruct->LastDiscrepancy = last_zero;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	7bba      	ldrb	r2, [r7, #14]
 800267c:	719a      	strb	r2, [r3, #6]

      // check for last device
      if (OneWireStruct->LastDiscrepancy == 0) {
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	799b      	ldrb	r3, [r3, #6]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <OneWire_Search+0x15a>
        OneWireStruct->LastDeviceFlag = 1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	721a      	strb	r2, [r3, #8]
      }

      search_result = 1;
 800268c:	2301      	movs	r3, #1
 800268e:	733b      	strb	r3, [r7, #12]
    }
  }

  // if no device found then reset counters so next 'search' will be like a first
  if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8002690:	7b3b      	ldrb	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <OneWire_Search+0x16c>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	7a5b      	ldrb	r3, [r3, #9]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10a      	bne.n	80026b4 <OneWire_Search+0x182>
    OneWireStruct->LastDiscrepancy = 0;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	719a      	strb	r2, [r3, #6]
    OneWireStruct->LastDeviceFlag = 0;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	721a      	strb	r2, [r3, #8]
    OneWireStruct->LastFamilyDiscrepancy = 0;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	71da      	strb	r2, [r3, #7]
    search_result = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	733b      	strb	r3, [r7, #12]
  }

  return search_result;
 80026b4:	7b3b      	ldrb	r3, [r7, #12]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <OneWire_SelectWithPointer>:
  for (i = 0; i < 8; i++) {
    OneWire_WriteByte(OneWireStruct, *(addr + i));
  }
}

void OneWire_SelectWithPointer(OneWire_t *OneWireStruct, uint8_t *ROM) {
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
  uint8_t i;
  OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80026c8:	2155      	movs	r1, #85	; 0x55
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fec3 	bl	8002456 <OneWire_WriteByte>

  for (i = 0; i < 8; i++) {
 80026d0:	2300      	movs	r3, #0
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	e00a      	b.n	80026ec <OneWire_SelectWithPointer+0x2e>
    OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff feb8 	bl	8002456 <OneWire_WriteByte>
  for (i = 0; i < 8; i++) {
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	3301      	adds	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b07      	cmp	r3, #7
 80026f0:	d9f1      	bls.n	80026d6 <OneWire_SelectWithPointer+0x18>
  }
}
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t *OneWireStruct, uint8_t *firstIndex) {
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
 800270a:	e00a      	b.n	8002722 <OneWire_GetFullROM+0x26>
    *(firstIndex + i) = OneWireStruct->ROM_NO[i];
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	6839      	ldr	r1, [r7, #0]
 8002712:	440b      	add	r3, r1
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	440a      	add	r2, r1
 8002718:	7a52      	ldrb	r2, [r2, #9]
 800271a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 800271c:	7bfb      	ldrb	r3, [r7, #15]
 800271e:	3301      	adds	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	2b07      	cmp	r3, #7
 8002726:	d9f1      	bls.n	800270c <OneWire_GetFullROM+0x10>
  }
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	70fb      	strb	r3, [r7, #3]
  uint8_t crc = 0, inbyte, i, mix;
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]

  while (len--) {
 8002744:	e022      	b.n	800278c <OneWire_CRC8+0x58>
    inbyte = *addr++;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	73bb      	strb	r3, [r7, #14]
    for (i = 8; i; i--) {
 8002750:	2308      	movs	r3, #8
 8002752:	737b      	strb	r3, [r7, #13]
 8002754:	e017      	b.n	8002786 <OneWire_CRC8+0x52>
      mix = (crc ^ inbyte) & 0x01;
 8002756:	7bfa      	ldrb	r2, [r7, #15]
 8002758:	7bbb      	ldrb	r3, [r7, #14]
 800275a:	4053      	eors	r3, r2
 800275c:	b2db      	uxtb	r3, r3
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	733b      	strb	r3, [r7, #12]
      crc >>= 1;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
      if (mix) {
 800276a:	7b3b      	ldrb	r3, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d004      	beq.n	800277a <OneWire_CRC8+0x46>
        crc ^= 0x8C;
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8002776:	43db      	mvns	r3, r3
 8002778:	73fb      	strb	r3, [r7, #15]
      }
      inbyte >>= 1;
 800277a:	7bbb      	ldrb	r3, [r7, #14]
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	73bb      	strb	r3, [r7, #14]
    for (i = 8; i; i--) {
 8002780:	7b7b      	ldrb	r3, [r7, #13]
 8002782:	3b01      	subs	r3, #1
 8002784:	737b      	strb	r3, [r7, #13]
 8002786:	7b7b      	ldrb	r3, [r7, #13]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1e4      	bne.n	8002756 <OneWire_CRC8+0x22>
  while (len--) {
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	1e5a      	subs	r2, r3, #1
 8002790:	70fa      	strb	r2, [r7, #3]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1d7      	bne.n	8002746 <OneWire_CRC8+0x12>
    }
  }

  /* Return calculated CRC */
  return crc;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
	...

080027a4 <__errno>:
 80027a4:	4b01      	ldr	r3, [pc, #4]	; (80027ac <__errno+0x8>)
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	2000000c 	.word	0x2000000c

080027b0 <__libc_init_array>:
 80027b0:	b570      	push	{r4, r5, r6, lr}
 80027b2:	2600      	movs	r6, #0
 80027b4:	4d0c      	ldr	r5, [pc, #48]	; (80027e8 <__libc_init_array+0x38>)
 80027b6:	4c0d      	ldr	r4, [pc, #52]	; (80027ec <__libc_init_array+0x3c>)
 80027b8:	1b64      	subs	r4, r4, r5
 80027ba:	10a4      	asrs	r4, r4, #2
 80027bc:	42a6      	cmp	r6, r4
 80027be:	d109      	bne.n	80027d4 <__libc_init_array+0x24>
 80027c0:	f000 ff82 	bl	80036c8 <_init>
 80027c4:	2600      	movs	r6, #0
 80027c6:	4d0a      	ldr	r5, [pc, #40]	; (80027f0 <__libc_init_array+0x40>)
 80027c8:	4c0a      	ldr	r4, [pc, #40]	; (80027f4 <__libc_init_array+0x44>)
 80027ca:	1b64      	subs	r4, r4, r5
 80027cc:	10a4      	asrs	r4, r4, #2
 80027ce:	42a6      	cmp	r6, r4
 80027d0:	d105      	bne.n	80027de <__libc_init_array+0x2e>
 80027d2:	bd70      	pop	{r4, r5, r6, pc}
 80027d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d8:	4798      	blx	r3
 80027da:	3601      	adds	r6, #1
 80027dc:	e7ee      	b.n	80027bc <__libc_init_array+0xc>
 80027de:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e2:	4798      	blx	r3
 80027e4:	3601      	adds	r6, #1
 80027e6:	e7f2      	b.n	80027ce <__libc_init_array+0x1e>
 80027e8:	08003834 	.word	0x08003834
 80027ec:	08003834 	.word	0x08003834
 80027f0:	08003834 	.word	0x08003834
 80027f4:	08003838 	.word	0x08003838

080027f8 <memset>:
 80027f8:	4603      	mov	r3, r0
 80027fa:	4402      	add	r2, r0
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d100      	bne.n	8002802 <memset+0xa>
 8002800:	4770      	bx	lr
 8002802:	f803 1b01 	strb.w	r1, [r3], #1
 8002806:	e7f9      	b.n	80027fc <memset+0x4>

08002808 <iprintf>:
 8002808:	b40f      	push	{r0, r1, r2, r3}
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <iprintf+0x2c>)
 800280c:	b513      	push	{r0, r1, r4, lr}
 800280e:	681c      	ldr	r4, [r3, #0]
 8002810:	b124      	cbz	r4, 800281c <iprintf+0x14>
 8002812:	69a3      	ldr	r3, [r4, #24]
 8002814:	b913      	cbnz	r3, 800281c <iprintf+0x14>
 8002816:	4620      	mov	r0, r4
 8002818:	f000 f866 	bl	80028e8 <__sinit>
 800281c:	ab05      	add	r3, sp, #20
 800281e:	4620      	mov	r0, r4
 8002820:	9a04      	ldr	r2, [sp, #16]
 8002822:	68a1      	ldr	r1, [r4, #8]
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	f000 f981 	bl	8002b2c <_vfiprintf_r>
 800282a:	b002      	add	sp, #8
 800282c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002830:	b004      	add	sp, #16
 8002832:	4770      	bx	lr
 8002834:	2000000c 	.word	0x2000000c

08002838 <std>:
 8002838:	2300      	movs	r3, #0
 800283a:	b510      	push	{r4, lr}
 800283c:	4604      	mov	r4, r0
 800283e:	e9c0 3300 	strd	r3, r3, [r0]
 8002842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002846:	6083      	str	r3, [r0, #8]
 8002848:	8181      	strh	r1, [r0, #12]
 800284a:	6643      	str	r3, [r0, #100]	; 0x64
 800284c:	81c2      	strh	r2, [r0, #14]
 800284e:	6183      	str	r3, [r0, #24]
 8002850:	4619      	mov	r1, r3
 8002852:	2208      	movs	r2, #8
 8002854:	305c      	adds	r0, #92	; 0x5c
 8002856:	f7ff ffcf 	bl	80027f8 <memset>
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <std+0x38>)
 800285c:	6224      	str	r4, [r4, #32]
 800285e:	6263      	str	r3, [r4, #36]	; 0x24
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <std+0x3c>)
 8002862:	62a3      	str	r3, [r4, #40]	; 0x28
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <std+0x40>)
 8002866:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <std+0x44>)
 800286a:	6323      	str	r3, [r4, #48]	; 0x30
 800286c:	bd10      	pop	{r4, pc}
 800286e:	bf00      	nop
 8002870:	080030d9 	.word	0x080030d9
 8002874:	080030fb 	.word	0x080030fb
 8002878:	08003133 	.word	0x08003133
 800287c:	08003157 	.word	0x08003157

08002880 <_cleanup_r>:
 8002880:	4901      	ldr	r1, [pc, #4]	; (8002888 <_cleanup_r+0x8>)
 8002882:	f000 b8af 	b.w	80029e4 <_fwalk_reent>
 8002886:	bf00      	nop
 8002888:	08003431 	.word	0x08003431

0800288c <__sfmoreglue>:
 800288c:	b570      	push	{r4, r5, r6, lr}
 800288e:	2568      	movs	r5, #104	; 0x68
 8002890:	1e4a      	subs	r2, r1, #1
 8002892:	4355      	muls	r5, r2
 8002894:	460e      	mov	r6, r1
 8002896:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800289a:	f000 f8c5 	bl	8002a28 <_malloc_r>
 800289e:	4604      	mov	r4, r0
 80028a0:	b140      	cbz	r0, 80028b4 <__sfmoreglue+0x28>
 80028a2:	2100      	movs	r1, #0
 80028a4:	e9c0 1600 	strd	r1, r6, [r0]
 80028a8:	300c      	adds	r0, #12
 80028aa:	60a0      	str	r0, [r4, #8]
 80028ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80028b0:	f7ff ffa2 	bl	80027f8 <memset>
 80028b4:	4620      	mov	r0, r4
 80028b6:	bd70      	pop	{r4, r5, r6, pc}

080028b8 <__sfp_lock_acquire>:
 80028b8:	4801      	ldr	r0, [pc, #4]	; (80028c0 <__sfp_lock_acquire+0x8>)
 80028ba:	f000 b8b3 	b.w	8002a24 <__retarget_lock_acquire_recursive>
 80028be:	bf00      	nop
 80028c0:	20000110 	.word	0x20000110

080028c4 <__sfp_lock_release>:
 80028c4:	4801      	ldr	r0, [pc, #4]	; (80028cc <__sfp_lock_release+0x8>)
 80028c6:	f000 b8ae 	b.w	8002a26 <__retarget_lock_release_recursive>
 80028ca:	bf00      	nop
 80028cc:	20000110 	.word	0x20000110

080028d0 <__sinit_lock_acquire>:
 80028d0:	4801      	ldr	r0, [pc, #4]	; (80028d8 <__sinit_lock_acquire+0x8>)
 80028d2:	f000 b8a7 	b.w	8002a24 <__retarget_lock_acquire_recursive>
 80028d6:	bf00      	nop
 80028d8:	2000010b 	.word	0x2000010b

080028dc <__sinit_lock_release>:
 80028dc:	4801      	ldr	r0, [pc, #4]	; (80028e4 <__sinit_lock_release+0x8>)
 80028de:	f000 b8a2 	b.w	8002a26 <__retarget_lock_release_recursive>
 80028e2:	bf00      	nop
 80028e4:	2000010b 	.word	0x2000010b

080028e8 <__sinit>:
 80028e8:	b510      	push	{r4, lr}
 80028ea:	4604      	mov	r4, r0
 80028ec:	f7ff fff0 	bl	80028d0 <__sinit_lock_acquire>
 80028f0:	69a3      	ldr	r3, [r4, #24]
 80028f2:	b11b      	cbz	r3, 80028fc <__sinit+0x14>
 80028f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028f8:	f7ff bff0 	b.w	80028dc <__sinit_lock_release>
 80028fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002900:	6523      	str	r3, [r4, #80]	; 0x50
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <__sinit+0x68>)
 8002904:	4a13      	ldr	r2, [pc, #76]	; (8002954 <__sinit+0x6c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	62a2      	str	r2, [r4, #40]	; 0x28
 800290a:	42a3      	cmp	r3, r4
 800290c:	bf08      	it	eq
 800290e:	2301      	moveq	r3, #1
 8002910:	4620      	mov	r0, r4
 8002912:	bf08      	it	eq
 8002914:	61a3      	streq	r3, [r4, #24]
 8002916:	f000 f81f 	bl	8002958 <__sfp>
 800291a:	6060      	str	r0, [r4, #4]
 800291c:	4620      	mov	r0, r4
 800291e:	f000 f81b 	bl	8002958 <__sfp>
 8002922:	60a0      	str	r0, [r4, #8]
 8002924:	4620      	mov	r0, r4
 8002926:	f000 f817 	bl	8002958 <__sfp>
 800292a:	2200      	movs	r2, #0
 800292c:	2104      	movs	r1, #4
 800292e:	60e0      	str	r0, [r4, #12]
 8002930:	6860      	ldr	r0, [r4, #4]
 8002932:	f7ff ff81 	bl	8002838 <std>
 8002936:	2201      	movs	r2, #1
 8002938:	2109      	movs	r1, #9
 800293a:	68a0      	ldr	r0, [r4, #8]
 800293c:	f7ff ff7c 	bl	8002838 <std>
 8002940:	2202      	movs	r2, #2
 8002942:	2112      	movs	r1, #18
 8002944:	68e0      	ldr	r0, [r4, #12]
 8002946:	f7ff ff77 	bl	8002838 <std>
 800294a:	2301      	movs	r3, #1
 800294c:	61a3      	str	r3, [r4, #24]
 800294e:	e7d1      	b.n	80028f4 <__sinit+0xc>
 8002950:	0800379c 	.word	0x0800379c
 8002954:	08002881 	.word	0x08002881

08002958 <__sfp>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	4607      	mov	r7, r0
 800295c:	f7ff ffac 	bl	80028b8 <__sfp_lock_acquire>
 8002960:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <__sfp+0x84>)
 8002962:	681e      	ldr	r6, [r3, #0]
 8002964:	69b3      	ldr	r3, [r6, #24]
 8002966:	b913      	cbnz	r3, 800296e <__sfp+0x16>
 8002968:	4630      	mov	r0, r6
 800296a:	f7ff ffbd 	bl	80028e8 <__sinit>
 800296e:	3648      	adds	r6, #72	; 0x48
 8002970:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002974:	3b01      	subs	r3, #1
 8002976:	d503      	bpl.n	8002980 <__sfp+0x28>
 8002978:	6833      	ldr	r3, [r6, #0]
 800297a:	b30b      	cbz	r3, 80029c0 <__sfp+0x68>
 800297c:	6836      	ldr	r6, [r6, #0]
 800297e:	e7f7      	b.n	8002970 <__sfp+0x18>
 8002980:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002984:	b9d5      	cbnz	r5, 80029bc <__sfp+0x64>
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <__sfp+0x88>)
 8002988:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800298c:	60e3      	str	r3, [r4, #12]
 800298e:	6665      	str	r5, [r4, #100]	; 0x64
 8002990:	f000 f847 	bl	8002a22 <__retarget_lock_init_recursive>
 8002994:	f7ff ff96 	bl	80028c4 <__sfp_lock_release>
 8002998:	2208      	movs	r2, #8
 800299a:	4629      	mov	r1, r5
 800299c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80029a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80029a4:	6025      	str	r5, [r4, #0]
 80029a6:	61a5      	str	r5, [r4, #24]
 80029a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80029ac:	f7ff ff24 	bl	80027f8 <memset>
 80029b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80029b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80029b8:	4620      	mov	r0, r4
 80029ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029bc:	3468      	adds	r4, #104	; 0x68
 80029be:	e7d9      	b.n	8002974 <__sfp+0x1c>
 80029c0:	2104      	movs	r1, #4
 80029c2:	4638      	mov	r0, r7
 80029c4:	f7ff ff62 	bl	800288c <__sfmoreglue>
 80029c8:	4604      	mov	r4, r0
 80029ca:	6030      	str	r0, [r6, #0]
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d1d5      	bne.n	800297c <__sfp+0x24>
 80029d0:	f7ff ff78 	bl	80028c4 <__sfp_lock_release>
 80029d4:	230c      	movs	r3, #12
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	e7ee      	b.n	80029b8 <__sfp+0x60>
 80029da:	bf00      	nop
 80029dc:	0800379c 	.word	0x0800379c
 80029e0:	ffff0001 	.word	0xffff0001

080029e4 <_fwalk_reent>:
 80029e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029e8:	4606      	mov	r6, r0
 80029ea:	4688      	mov	r8, r1
 80029ec:	2700      	movs	r7, #0
 80029ee:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80029f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029f6:	f1b9 0901 	subs.w	r9, r9, #1
 80029fa:	d505      	bpl.n	8002a08 <_fwalk_reent+0x24>
 80029fc:	6824      	ldr	r4, [r4, #0]
 80029fe:	2c00      	cmp	r4, #0
 8002a00:	d1f7      	bne.n	80029f2 <_fwalk_reent+0xe>
 8002a02:	4638      	mov	r0, r7
 8002a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a08:	89ab      	ldrh	r3, [r5, #12]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d907      	bls.n	8002a1e <_fwalk_reent+0x3a>
 8002a0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a12:	3301      	adds	r3, #1
 8002a14:	d003      	beq.n	8002a1e <_fwalk_reent+0x3a>
 8002a16:	4629      	mov	r1, r5
 8002a18:	4630      	mov	r0, r6
 8002a1a:	47c0      	blx	r8
 8002a1c:	4307      	orrs	r7, r0
 8002a1e:	3568      	adds	r5, #104	; 0x68
 8002a20:	e7e9      	b.n	80029f6 <_fwalk_reent+0x12>

08002a22 <__retarget_lock_init_recursive>:
 8002a22:	4770      	bx	lr

08002a24 <__retarget_lock_acquire_recursive>:
 8002a24:	4770      	bx	lr

08002a26 <__retarget_lock_release_recursive>:
 8002a26:	4770      	bx	lr

08002a28 <_malloc_r>:
 8002a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2a:	1ccd      	adds	r5, r1, #3
 8002a2c:	f025 0503 	bic.w	r5, r5, #3
 8002a30:	3508      	adds	r5, #8
 8002a32:	2d0c      	cmp	r5, #12
 8002a34:	bf38      	it	cc
 8002a36:	250c      	movcc	r5, #12
 8002a38:	2d00      	cmp	r5, #0
 8002a3a:	4606      	mov	r6, r0
 8002a3c:	db01      	blt.n	8002a42 <_malloc_r+0x1a>
 8002a3e:	42a9      	cmp	r1, r5
 8002a40:	d903      	bls.n	8002a4a <_malloc_r+0x22>
 8002a42:	230c      	movs	r3, #12
 8002a44:	6033      	str	r3, [r6, #0]
 8002a46:	2000      	movs	r0, #0
 8002a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a4a:	f000 fdb1 	bl	80035b0 <__malloc_lock>
 8002a4e:	4921      	ldr	r1, [pc, #132]	; (8002ad4 <_malloc_r+0xac>)
 8002a50:	680a      	ldr	r2, [r1, #0]
 8002a52:	4614      	mov	r4, r2
 8002a54:	b99c      	cbnz	r4, 8002a7e <_malloc_r+0x56>
 8002a56:	4f20      	ldr	r7, [pc, #128]	; (8002ad8 <_malloc_r+0xb0>)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	b923      	cbnz	r3, 8002a66 <_malloc_r+0x3e>
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	4630      	mov	r0, r6
 8002a60:	f000 fb2a 	bl	80030b8 <_sbrk_r>
 8002a64:	6038      	str	r0, [r7, #0]
 8002a66:	4629      	mov	r1, r5
 8002a68:	4630      	mov	r0, r6
 8002a6a:	f000 fb25 	bl	80030b8 <_sbrk_r>
 8002a6e:	1c43      	adds	r3, r0, #1
 8002a70:	d123      	bne.n	8002aba <_malloc_r+0x92>
 8002a72:	230c      	movs	r3, #12
 8002a74:	4630      	mov	r0, r6
 8002a76:	6033      	str	r3, [r6, #0]
 8002a78:	f000 fda0 	bl	80035bc <__malloc_unlock>
 8002a7c:	e7e3      	b.n	8002a46 <_malloc_r+0x1e>
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	1b5b      	subs	r3, r3, r5
 8002a82:	d417      	bmi.n	8002ab4 <_malloc_r+0x8c>
 8002a84:	2b0b      	cmp	r3, #11
 8002a86:	d903      	bls.n	8002a90 <_malloc_r+0x68>
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	441c      	add	r4, r3
 8002a8c:	6025      	str	r5, [r4, #0]
 8002a8e:	e004      	b.n	8002a9a <_malloc_r+0x72>
 8002a90:	6863      	ldr	r3, [r4, #4]
 8002a92:	42a2      	cmp	r2, r4
 8002a94:	bf0c      	ite	eq
 8002a96:	600b      	streq	r3, [r1, #0]
 8002a98:	6053      	strne	r3, [r2, #4]
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	f000 fd8e 	bl	80035bc <__malloc_unlock>
 8002aa0:	f104 000b 	add.w	r0, r4, #11
 8002aa4:	1d23      	adds	r3, r4, #4
 8002aa6:	f020 0007 	bic.w	r0, r0, #7
 8002aaa:	1ac2      	subs	r2, r0, r3
 8002aac:	d0cc      	beq.n	8002a48 <_malloc_r+0x20>
 8002aae:	1a1b      	subs	r3, r3, r0
 8002ab0:	50a3      	str	r3, [r4, r2]
 8002ab2:	e7c9      	b.n	8002a48 <_malloc_r+0x20>
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	6864      	ldr	r4, [r4, #4]
 8002ab8:	e7cc      	b.n	8002a54 <_malloc_r+0x2c>
 8002aba:	1cc4      	adds	r4, r0, #3
 8002abc:	f024 0403 	bic.w	r4, r4, #3
 8002ac0:	42a0      	cmp	r0, r4
 8002ac2:	d0e3      	beq.n	8002a8c <_malloc_r+0x64>
 8002ac4:	1a21      	subs	r1, r4, r0
 8002ac6:	4630      	mov	r0, r6
 8002ac8:	f000 faf6 	bl	80030b8 <_sbrk_r>
 8002acc:	3001      	adds	r0, #1
 8002ace:	d1dd      	bne.n	8002a8c <_malloc_r+0x64>
 8002ad0:	e7cf      	b.n	8002a72 <_malloc_r+0x4a>
 8002ad2:	bf00      	nop
 8002ad4:	20000094 	.word	0x20000094
 8002ad8:	20000098 	.word	0x20000098

08002adc <__sfputc_r>:
 8002adc:	6893      	ldr	r3, [r2, #8]
 8002ade:	b410      	push	{r4}
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	6093      	str	r3, [r2, #8]
 8002ae6:	da07      	bge.n	8002af8 <__sfputc_r+0x1c>
 8002ae8:	6994      	ldr	r4, [r2, #24]
 8002aea:	42a3      	cmp	r3, r4
 8002aec:	db01      	blt.n	8002af2 <__sfputc_r+0x16>
 8002aee:	290a      	cmp	r1, #10
 8002af0:	d102      	bne.n	8002af8 <__sfputc_r+0x1c>
 8002af2:	bc10      	pop	{r4}
 8002af4:	f000 bb34 	b.w	8003160 <__swbuf_r>
 8002af8:	6813      	ldr	r3, [r2, #0]
 8002afa:	1c58      	adds	r0, r3, #1
 8002afc:	6010      	str	r0, [r2, #0]
 8002afe:	7019      	strb	r1, [r3, #0]
 8002b00:	4608      	mov	r0, r1
 8002b02:	bc10      	pop	{r4}
 8002b04:	4770      	bx	lr

08002b06 <__sfputs_r>:
 8002b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b08:	4606      	mov	r6, r0
 8002b0a:	460f      	mov	r7, r1
 8002b0c:	4614      	mov	r4, r2
 8002b0e:	18d5      	adds	r5, r2, r3
 8002b10:	42ac      	cmp	r4, r5
 8002b12:	d101      	bne.n	8002b18 <__sfputs_r+0x12>
 8002b14:	2000      	movs	r0, #0
 8002b16:	e007      	b.n	8002b28 <__sfputs_r+0x22>
 8002b18:	463a      	mov	r2, r7
 8002b1a:	4630      	mov	r0, r6
 8002b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b20:	f7ff ffdc 	bl	8002adc <__sfputc_r>
 8002b24:	1c43      	adds	r3, r0, #1
 8002b26:	d1f3      	bne.n	8002b10 <__sfputs_r+0xa>
 8002b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b2c <_vfiprintf_r>:
 8002b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b30:	460d      	mov	r5, r1
 8002b32:	4614      	mov	r4, r2
 8002b34:	4698      	mov	r8, r3
 8002b36:	4606      	mov	r6, r0
 8002b38:	b09d      	sub	sp, #116	; 0x74
 8002b3a:	b118      	cbz	r0, 8002b44 <_vfiprintf_r+0x18>
 8002b3c:	6983      	ldr	r3, [r0, #24]
 8002b3e:	b90b      	cbnz	r3, 8002b44 <_vfiprintf_r+0x18>
 8002b40:	f7ff fed2 	bl	80028e8 <__sinit>
 8002b44:	4b89      	ldr	r3, [pc, #548]	; (8002d6c <_vfiprintf_r+0x240>)
 8002b46:	429d      	cmp	r5, r3
 8002b48:	d11b      	bne.n	8002b82 <_vfiprintf_r+0x56>
 8002b4a:	6875      	ldr	r5, [r6, #4]
 8002b4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b4e:	07d9      	lsls	r1, r3, #31
 8002b50:	d405      	bmi.n	8002b5e <_vfiprintf_r+0x32>
 8002b52:	89ab      	ldrh	r3, [r5, #12]
 8002b54:	059a      	lsls	r2, r3, #22
 8002b56:	d402      	bmi.n	8002b5e <_vfiprintf_r+0x32>
 8002b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b5a:	f7ff ff63 	bl	8002a24 <__retarget_lock_acquire_recursive>
 8002b5e:	89ab      	ldrh	r3, [r5, #12]
 8002b60:	071b      	lsls	r3, r3, #28
 8002b62:	d501      	bpl.n	8002b68 <_vfiprintf_r+0x3c>
 8002b64:	692b      	ldr	r3, [r5, #16]
 8002b66:	b9eb      	cbnz	r3, 8002ba4 <_vfiprintf_r+0x78>
 8002b68:	4629      	mov	r1, r5
 8002b6a:	4630      	mov	r0, r6
 8002b6c:	f000 fb5c 	bl	8003228 <__swsetup_r>
 8002b70:	b1c0      	cbz	r0, 8002ba4 <_vfiprintf_r+0x78>
 8002b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b74:	07dc      	lsls	r4, r3, #31
 8002b76:	d50e      	bpl.n	8002b96 <_vfiprintf_r+0x6a>
 8002b78:	f04f 30ff 	mov.w	r0, #4294967295
 8002b7c:	b01d      	add	sp, #116	; 0x74
 8002b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b82:	4b7b      	ldr	r3, [pc, #492]	; (8002d70 <_vfiprintf_r+0x244>)
 8002b84:	429d      	cmp	r5, r3
 8002b86:	d101      	bne.n	8002b8c <_vfiprintf_r+0x60>
 8002b88:	68b5      	ldr	r5, [r6, #8]
 8002b8a:	e7df      	b.n	8002b4c <_vfiprintf_r+0x20>
 8002b8c:	4b79      	ldr	r3, [pc, #484]	; (8002d74 <_vfiprintf_r+0x248>)
 8002b8e:	429d      	cmp	r5, r3
 8002b90:	bf08      	it	eq
 8002b92:	68f5      	ldreq	r5, [r6, #12]
 8002b94:	e7da      	b.n	8002b4c <_vfiprintf_r+0x20>
 8002b96:	89ab      	ldrh	r3, [r5, #12]
 8002b98:	0598      	lsls	r0, r3, #22
 8002b9a:	d4ed      	bmi.n	8002b78 <_vfiprintf_r+0x4c>
 8002b9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b9e:	f7ff ff42 	bl	8002a26 <__retarget_lock_release_recursive>
 8002ba2:	e7e9      	b.n	8002b78 <_vfiprintf_r+0x4c>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ba8:	2320      	movs	r3, #32
 8002baa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bae:	2330      	movs	r3, #48	; 0x30
 8002bb0:	f04f 0901 	mov.w	r9, #1
 8002bb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bb8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002d78 <_vfiprintf_r+0x24c>
 8002bbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bc0:	4623      	mov	r3, r4
 8002bc2:	469a      	mov	sl, r3
 8002bc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bc8:	b10a      	cbz	r2, 8002bce <_vfiprintf_r+0xa2>
 8002bca:	2a25      	cmp	r2, #37	; 0x25
 8002bcc:	d1f9      	bne.n	8002bc2 <_vfiprintf_r+0x96>
 8002bce:	ebba 0b04 	subs.w	fp, sl, r4
 8002bd2:	d00b      	beq.n	8002bec <_vfiprintf_r+0xc0>
 8002bd4:	465b      	mov	r3, fp
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	4629      	mov	r1, r5
 8002bda:	4630      	mov	r0, r6
 8002bdc:	f7ff ff93 	bl	8002b06 <__sfputs_r>
 8002be0:	3001      	adds	r0, #1
 8002be2:	f000 80aa 	beq.w	8002d3a <_vfiprintf_r+0x20e>
 8002be6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002be8:	445a      	add	r2, fp
 8002bea:	9209      	str	r2, [sp, #36]	; 0x24
 8002bec:	f89a 3000 	ldrb.w	r3, [sl]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80a2 	beq.w	8002d3a <_vfiprintf_r+0x20e>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c00:	f10a 0a01 	add.w	sl, sl, #1
 8002c04:	9304      	str	r3, [sp, #16]
 8002c06:	9307      	str	r3, [sp, #28]
 8002c08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c0c:	931a      	str	r3, [sp, #104]	; 0x68
 8002c0e:	4654      	mov	r4, sl
 8002c10:	2205      	movs	r2, #5
 8002c12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c16:	4858      	ldr	r0, [pc, #352]	; (8002d78 <_vfiprintf_r+0x24c>)
 8002c18:	f000 fcbc 	bl	8003594 <memchr>
 8002c1c:	9a04      	ldr	r2, [sp, #16]
 8002c1e:	b9d8      	cbnz	r0, 8002c58 <_vfiprintf_r+0x12c>
 8002c20:	06d1      	lsls	r1, r2, #27
 8002c22:	bf44      	itt	mi
 8002c24:	2320      	movmi	r3, #32
 8002c26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c2a:	0713      	lsls	r3, r2, #28
 8002c2c:	bf44      	itt	mi
 8002c2e:	232b      	movmi	r3, #43	; 0x2b
 8002c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c34:	f89a 3000 	ldrb.w	r3, [sl]
 8002c38:	2b2a      	cmp	r3, #42	; 0x2a
 8002c3a:	d015      	beq.n	8002c68 <_vfiprintf_r+0x13c>
 8002c3c:	4654      	mov	r4, sl
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f04f 0c0a 	mov.w	ip, #10
 8002c44:	9a07      	ldr	r2, [sp, #28]
 8002c46:	4621      	mov	r1, r4
 8002c48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c4c:	3b30      	subs	r3, #48	; 0x30
 8002c4e:	2b09      	cmp	r3, #9
 8002c50:	d94e      	bls.n	8002cf0 <_vfiprintf_r+0x1c4>
 8002c52:	b1b0      	cbz	r0, 8002c82 <_vfiprintf_r+0x156>
 8002c54:	9207      	str	r2, [sp, #28]
 8002c56:	e014      	b.n	8002c82 <_vfiprintf_r+0x156>
 8002c58:	eba0 0308 	sub.w	r3, r0, r8
 8002c5c:	fa09 f303 	lsl.w	r3, r9, r3
 8002c60:	4313      	orrs	r3, r2
 8002c62:	46a2      	mov	sl, r4
 8002c64:	9304      	str	r3, [sp, #16]
 8002c66:	e7d2      	b.n	8002c0e <_vfiprintf_r+0xe2>
 8002c68:	9b03      	ldr	r3, [sp, #12]
 8002c6a:	1d19      	adds	r1, r3, #4
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	9103      	str	r1, [sp, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bfbb      	ittet	lt
 8002c74:	425b      	neglt	r3, r3
 8002c76:	f042 0202 	orrlt.w	r2, r2, #2
 8002c7a:	9307      	strge	r3, [sp, #28]
 8002c7c:	9307      	strlt	r3, [sp, #28]
 8002c7e:	bfb8      	it	lt
 8002c80:	9204      	strlt	r2, [sp, #16]
 8002c82:	7823      	ldrb	r3, [r4, #0]
 8002c84:	2b2e      	cmp	r3, #46	; 0x2e
 8002c86:	d10c      	bne.n	8002ca2 <_vfiprintf_r+0x176>
 8002c88:	7863      	ldrb	r3, [r4, #1]
 8002c8a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c8c:	d135      	bne.n	8002cfa <_vfiprintf_r+0x1ce>
 8002c8e:	9b03      	ldr	r3, [sp, #12]
 8002c90:	3402      	adds	r4, #2
 8002c92:	1d1a      	adds	r2, r3, #4
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	9203      	str	r2, [sp, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bfb8      	it	lt
 8002c9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ca0:	9305      	str	r3, [sp, #20]
 8002ca2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002d88 <_vfiprintf_r+0x25c>
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	4650      	mov	r0, sl
 8002caa:	7821      	ldrb	r1, [r4, #0]
 8002cac:	f000 fc72 	bl	8003594 <memchr>
 8002cb0:	b140      	cbz	r0, 8002cc4 <_vfiprintf_r+0x198>
 8002cb2:	2340      	movs	r3, #64	; 0x40
 8002cb4:	eba0 000a 	sub.w	r0, r0, sl
 8002cb8:	fa03 f000 	lsl.w	r0, r3, r0
 8002cbc:	9b04      	ldr	r3, [sp, #16]
 8002cbe:	3401      	adds	r4, #1
 8002cc0:	4303      	orrs	r3, r0
 8002cc2:	9304      	str	r3, [sp, #16]
 8002cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cc8:	2206      	movs	r2, #6
 8002cca:	482c      	ldr	r0, [pc, #176]	; (8002d7c <_vfiprintf_r+0x250>)
 8002ccc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cd0:	f000 fc60 	bl	8003594 <memchr>
 8002cd4:	2800      	cmp	r0, #0
 8002cd6:	d03f      	beq.n	8002d58 <_vfiprintf_r+0x22c>
 8002cd8:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <_vfiprintf_r+0x254>)
 8002cda:	bb1b      	cbnz	r3, 8002d24 <_vfiprintf_r+0x1f8>
 8002cdc:	9b03      	ldr	r3, [sp, #12]
 8002cde:	3307      	adds	r3, #7
 8002ce0:	f023 0307 	bic.w	r3, r3, #7
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	9303      	str	r3, [sp, #12]
 8002ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cea:	443b      	add	r3, r7
 8002cec:	9309      	str	r3, [sp, #36]	; 0x24
 8002cee:	e767      	b.n	8002bc0 <_vfiprintf_r+0x94>
 8002cf0:	460c      	mov	r4, r1
 8002cf2:	2001      	movs	r0, #1
 8002cf4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002cf8:	e7a5      	b.n	8002c46 <_vfiprintf_r+0x11a>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f04f 0c0a 	mov.w	ip, #10
 8002d00:	4619      	mov	r1, r3
 8002d02:	3401      	adds	r4, #1
 8002d04:	9305      	str	r3, [sp, #20]
 8002d06:	4620      	mov	r0, r4
 8002d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d0c:	3a30      	subs	r2, #48	; 0x30
 8002d0e:	2a09      	cmp	r2, #9
 8002d10:	d903      	bls.n	8002d1a <_vfiprintf_r+0x1ee>
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0c5      	beq.n	8002ca2 <_vfiprintf_r+0x176>
 8002d16:	9105      	str	r1, [sp, #20]
 8002d18:	e7c3      	b.n	8002ca2 <_vfiprintf_r+0x176>
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d22:	e7f0      	b.n	8002d06 <_vfiprintf_r+0x1da>
 8002d24:	ab03      	add	r3, sp, #12
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	462a      	mov	r2, r5
 8002d2a:	4630      	mov	r0, r6
 8002d2c:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <_vfiprintf_r+0x258>)
 8002d2e:	a904      	add	r1, sp, #16
 8002d30:	f3af 8000 	nop.w
 8002d34:	4607      	mov	r7, r0
 8002d36:	1c78      	adds	r0, r7, #1
 8002d38:	d1d6      	bne.n	8002ce8 <_vfiprintf_r+0x1bc>
 8002d3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d3c:	07d9      	lsls	r1, r3, #31
 8002d3e:	d405      	bmi.n	8002d4c <_vfiprintf_r+0x220>
 8002d40:	89ab      	ldrh	r3, [r5, #12]
 8002d42:	059a      	lsls	r2, r3, #22
 8002d44:	d402      	bmi.n	8002d4c <_vfiprintf_r+0x220>
 8002d46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d48:	f7ff fe6d 	bl	8002a26 <__retarget_lock_release_recursive>
 8002d4c:	89ab      	ldrh	r3, [r5, #12]
 8002d4e:	065b      	lsls	r3, r3, #25
 8002d50:	f53f af12 	bmi.w	8002b78 <_vfiprintf_r+0x4c>
 8002d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d56:	e711      	b.n	8002b7c <_vfiprintf_r+0x50>
 8002d58:	ab03      	add	r3, sp, #12
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	462a      	mov	r2, r5
 8002d5e:	4630      	mov	r0, r6
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <_vfiprintf_r+0x258>)
 8002d62:	a904      	add	r1, sp, #16
 8002d64:	f000 f882 	bl	8002e6c <_printf_i>
 8002d68:	e7e4      	b.n	8002d34 <_vfiprintf_r+0x208>
 8002d6a:	bf00      	nop
 8002d6c:	080037c0 	.word	0x080037c0
 8002d70:	080037e0 	.word	0x080037e0
 8002d74:	080037a0 	.word	0x080037a0
 8002d78:	08003800 	.word	0x08003800
 8002d7c:	0800380a 	.word	0x0800380a
 8002d80:	00000000 	.word	0x00000000
 8002d84:	08002b07 	.word	0x08002b07
 8002d88:	08003806 	.word	0x08003806

08002d8c <_printf_common>:
 8002d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d90:	4616      	mov	r6, r2
 8002d92:	4699      	mov	r9, r3
 8002d94:	688a      	ldr	r2, [r1, #8]
 8002d96:	690b      	ldr	r3, [r1, #16]
 8002d98:	4607      	mov	r7, r0
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	bfb8      	it	lt
 8002d9e:	4613      	movlt	r3, r2
 8002da0:	6033      	str	r3, [r6, #0]
 8002da2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002da6:	460c      	mov	r4, r1
 8002da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002dac:	b10a      	cbz	r2, 8002db2 <_printf_common+0x26>
 8002dae:	3301      	adds	r3, #1
 8002db0:	6033      	str	r3, [r6, #0]
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	0699      	lsls	r1, r3, #26
 8002db6:	bf42      	ittt	mi
 8002db8:	6833      	ldrmi	r3, [r6, #0]
 8002dba:	3302      	addmi	r3, #2
 8002dbc:	6033      	strmi	r3, [r6, #0]
 8002dbe:	6825      	ldr	r5, [r4, #0]
 8002dc0:	f015 0506 	ands.w	r5, r5, #6
 8002dc4:	d106      	bne.n	8002dd4 <_printf_common+0x48>
 8002dc6:	f104 0a19 	add.w	sl, r4, #25
 8002dca:	68e3      	ldr	r3, [r4, #12]
 8002dcc:	6832      	ldr	r2, [r6, #0]
 8002dce:	1a9b      	subs	r3, r3, r2
 8002dd0:	42ab      	cmp	r3, r5
 8002dd2:	dc28      	bgt.n	8002e26 <_printf_common+0x9a>
 8002dd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002dd8:	1e13      	subs	r3, r2, #0
 8002dda:	6822      	ldr	r2, [r4, #0]
 8002ddc:	bf18      	it	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	0692      	lsls	r2, r2, #26
 8002de2:	d42d      	bmi.n	8002e40 <_printf_common+0xb4>
 8002de4:	4649      	mov	r1, r9
 8002de6:	4638      	mov	r0, r7
 8002de8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002dec:	47c0      	blx	r8
 8002dee:	3001      	adds	r0, #1
 8002df0:	d020      	beq.n	8002e34 <_printf_common+0xa8>
 8002df2:	6823      	ldr	r3, [r4, #0]
 8002df4:	68e5      	ldr	r5, [r4, #12]
 8002df6:	f003 0306 	and.w	r3, r3, #6
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	bf18      	it	ne
 8002dfe:	2500      	movne	r5, #0
 8002e00:	6832      	ldr	r2, [r6, #0]
 8002e02:	f04f 0600 	mov.w	r6, #0
 8002e06:	68a3      	ldr	r3, [r4, #8]
 8002e08:	bf08      	it	eq
 8002e0a:	1aad      	subeq	r5, r5, r2
 8002e0c:	6922      	ldr	r2, [r4, #16]
 8002e0e:	bf08      	it	eq
 8002e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e14:	4293      	cmp	r3, r2
 8002e16:	bfc4      	itt	gt
 8002e18:	1a9b      	subgt	r3, r3, r2
 8002e1a:	18ed      	addgt	r5, r5, r3
 8002e1c:	341a      	adds	r4, #26
 8002e1e:	42b5      	cmp	r5, r6
 8002e20:	d11a      	bne.n	8002e58 <_printf_common+0xcc>
 8002e22:	2000      	movs	r0, #0
 8002e24:	e008      	b.n	8002e38 <_printf_common+0xac>
 8002e26:	2301      	movs	r3, #1
 8002e28:	4652      	mov	r2, sl
 8002e2a:	4649      	mov	r1, r9
 8002e2c:	4638      	mov	r0, r7
 8002e2e:	47c0      	blx	r8
 8002e30:	3001      	adds	r0, #1
 8002e32:	d103      	bne.n	8002e3c <_printf_common+0xb0>
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e3c:	3501      	adds	r5, #1
 8002e3e:	e7c4      	b.n	8002dca <_printf_common+0x3e>
 8002e40:	2030      	movs	r0, #48	; 0x30
 8002e42:	18e1      	adds	r1, r4, r3
 8002e44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e4e:	4422      	add	r2, r4
 8002e50:	3302      	adds	r3, #2
 8002e52:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e56:	e7c5      	b.n	8002de4 <_printf_common+0x58>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	4622      	mov	r2, r4
 8002e5c:	4649      	mov	r1, r9
 8002e5e:	4638      	mov	r0, r7
 8002e60:	47c0      	blx	r8
 8002e62:	3001      	adds	r0, #1
 8002e64:	d0e6      	beq.n	8002e34 <_printf_common+0xa8>
 8002e66:	3601      	adds	r6, #1
 8002e68:	e7d9      	b.n	8002e1e <_printf_common+0x92>
	...

08002e6c <_printf_i>:
 8002e6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e70:	460c      	mov	r4, r1
 8002e72:	7e27      	ldrb	r7, [r4, #24]
 8002e74:	4691      	mov	r9, r2
 8002e76:	2f78      	cmp	r7, #120	; 0x78
 8002e78:	4680      	mov	r8, r0
 8002e7a:	469a      	mov	sl, r3
 8002e7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e82:	d807      	bhi.n	8002e94 <_printf_i+0x28>
 8002e84:	2f62      	cmp	r7, #98	; 0x62
 8002e86:	d80a      	bhi.n	8002e9e <_printf_i+0x32>
 8002e88:	2f00      	cmp	r7, #0
 8002e8a:	f000 80d9 	beq.w	8003040 <_printf_i+0x1d4>
 8002e8e:	2f58      	cmp	r7, #88	; 0x58
 8002e90:	f000 80a4 	beq.w	8002fdc <_printf_i+0x170>
 8002e94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002e98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002e9c:	e03a      	b.n	8002f14 <_printf_i+0xa8>
 8002e9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002ea2:	2b15      	cmp	r3, #21
 8002ea4:	d8f6      	bhi.n	8002e94 <_printf_i+0x28>
 8002ea6:	a001      	add	r0, pc, #4	; (adr r0, 8002eac <_printf_i+0x40>)
 8002ea8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002eac:	08002f05 	.word	0x08002f05
 8002eb0:	08002f19 	.word	0x08002f19
 8002eb4:	08002e95 	.word	0x08002e95
 8002eb8:	08002e95 	.word	0x08002e95
 8002ebc:	08002e95 	.word	0x08002e95
 8002ec0:	08002e95 	.word	0x08002e95
 8002ec4:	08002f19 	.word	0x08002f19
 8002ec8:	08002e95 	.word	0x08002e95
 8002ecc:	08002e95 	.word	0x08002e95
 8002ed0:	08002e95 	.word	0x08002e95
 8002ed4:	08002e95 	.word	0x08002e95
 8002ed8:	08003027 	.word	0x08003027
 8002edc:	08002f49 	.word	0x08002f49
 8002ee0:	08003009 	.word	0x08003009
 8002ee4:	08002e95 	.word	0x08002e95
 8002ee8:	08002e95 	.word	0x08002e95
 8002eec:	08003049 	.word	0x08003049
 8002ef0:	08002e95 	.word	0x08002e95
 8002ef4:	08002f49 	.word	0x08002f49
 8002ef8:	08002e95 	.word	0x08002e95
 8002efc:	08002e95 	.word	0x08002e95
 8002f00:	08003011 	.word	0x08003011
 8002f04:	680b      	ldr	r3, [r1, #0]
 8002f06:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f0a:	1d1a      	adds	r2, r3, #4
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	600a      	str	r2, [r1, #0]
 8002f10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0a4      	b.n	8003062 <_printf_i+0x1f6>
 8002f18:	6825      	ldr	r5, [r4, #0]
 8002f1a:	6808      	ldr	r0, [r1, #0]
 8002f1c:	062e      	lsls	r6, r5, #24
 8002f1e:	f100 0304 	add.w	r3, r0, #4
 8002f22:	d50a      	bpl.n	8002f3a <_printf_i+0xce>
 8002f24:	6805      	ldr	r5, [r0, #0]
 8002f26:	600b      	str	r3, [r1, #0]
 8002f28:	2d00      	cmp	r5, #0
 8002f2a:	da03      	bge.n	8002f34 <_printf_i+0xc8>
 8002f2c:	232d      	movs	r3, #45	; 0x2d
 8002f2e:	426d      	negs	r5, r5
 8002f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f34:	230a      	movs	r3, #10
 8002f36:	485e      	ldr	r0, [pc, #376]	; (80030b0 <_printf_i+0x244>)
 8002f38:	e019      	b.n	8002f6e <_printf_i+0x102>
 8002f3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f3e:	6805      	ldr	r5, [r0, #0]
 8002f40:	600b      	str	r3, [r1, #0]
 8002f42:	bf18      	it	ne
 8002f44:	b22d      	sxthne	r5, r5
 8002f46:	e7ef      	b.n	8002f28 <_printf_i+0xbc>
 8002f48:	680b      	ldr	r3, [r1, #0]
 8002f4a:	6825      	ldr	r5, [r4, #0]
 8002f4c:	1d18      	adds	r0, r3, #4
 8002f4e:	6008      	str	r0, [r1, #0]
 8002f50:	0628      	lsls	r0, r5, #24
 8002f52:	d501      	bpl.n	8002f58 <_printf_i+0xec>
 8002f54:	681d      	ldr	r5, [r3, #0]
 8002f56:	e002      	b.n	8002f5e <_printf_i+0xf2>
 8002f58:	0669      	lsls	r1, r5, #25
 8002f5a:	d5fb      	bpl.n	8002f54 <_printf_i+0xe8>
 8002f5c:	881d      	ldrh	r5, [r3, #0]
 8002f5e:	2f6f      	cmp	r7, #111	; 0x6f
 8002f60:	bf0c      	ite	eq
 8002f62:	2308      	moveq	r3, #8
 8002f64:	230a      	movne	r3, #10
 8002f66:	4852      	ldr	r0, [pc, #328]	; (80030b0 <_printf_i+0x244>)
 8002f68:	2100      	movs	r1, #0
 8002f6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f6e:	6866      	ldr	r6, [r4, #4]
 8002f70:	2e00      	cmp	r6, #0
 8002f72:	bfa8      	it	ge
 8002f74:	6821      	ldrge	r1, [r4, #0]
 8002f76:	60a6      	str	r6, [r4, #8]
 8002f78:	bfa4      	itt	ge
 8002f7a:	f021 0104 	bicge.w	r1, r1, #4
 8002f7e:	6021      	strge	r1, [r4, #0]
 8002f80:	b90d      	cbnz	r5, 8002f86 <_printf_i+0x11a>
 8002f82:	2e00      	cmp	r6, #0
 8002f84:	d04d      	beq.n	8003022 <_printf_i+0x1b6>
 8002f86:	4616      	mov	r6, r2
 8002f88:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f8c:	fb03 5711 	mls	r7, r3, r1, r5
 8002f90:	5dc7      	ldrb	r7, [r0, r7]
 8002f92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002f96:	462f      	mov	r7, r5
 8002f98:	42bb      	cmp	r3, r7
 8002f9a:	460d      	mov	r5, r1
 8002f9c:	d9f4      	bls.n	8002f88 <_printf_i+0x11c>
 8002f9e:	2b08      	cmp	r3, #8
 8002fa0:	d10b      	bne.n	8002fba <_printf_i+0x14e>
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	07df      	lsls	r7, r3, #31
 8002fa6:	d508      	bpl.n	8002fba <_printf_i+0x14e>
 8002fa8:	6923      	ldr	r3, [r4, #16]
 8002faa:	6861      	ldr	r1, [r4, #4]
 8002fac:	4299      	cmp	r1, r3
 8002fae:	bfde      	ittt	le
 8002fb0:	2330      	movle	r3, #48	; 0x30
 8002fb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002fb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002fba:	1b92      	subs	r2, r2, r6
 8002fbc:	6122      	str	r2, [r4, #16]
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	f8cd a000 	str.w	sl, [sp]
 8002fc8:	aa03      	add	r2, sp, #12
 8002fca:	f7ff fedf 	bl	8002d8c <_printf_common>
 8002fce:	3001      	adds	r0, #1
 8002fd0:	d14c      	bne.n	800306c <_printf_i+0x200>
 8002fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd6:	b004      	add	sp, #16
 8002fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fdc:	4834      	ldr	r0, [pc, #208]	; (80030b0 <_printf_i+0x244>)
 8002fde:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002fe2:	680e      	ldr	r6, [r1, #0]
 8002fe4:	6823      	ldr	r3, [r4, #0]
 8002fe6:	f856 5b04 	ldr.w	r5, [r6], #4
 8002fea:	061f      	lsls	r7, r3, #24
 8002fec:	600e      	str	r6, [r1, #0]
 8002fee:	d514      	bpl.n	800301a <_printf_i+0x1ae>
 8002ff0:	07d9      	lsls	r1, r3, #31
 8002ff2:	bf44      	itt	mi
 8002ff4:	f043 0320 	orrmi.w	r3, r3, #32
 8002ff8:	6023      	strmi	r3, [r4, #0]
 8002ffa:	b91d      	cbnz	r5, 8003004 <_printf_i+0x198>
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	f023 0320 	bic.w	r3, r3, #32
 8003002:	6023      	str	r3, [r4, #0]
 8003004:	2310      	movs	r3, #16
 8003006:	e7af      	b.n	8002f68 <_printf_i+0xfc>
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	f043 0320 	orr.w	r3, r3, #32
 800300e:	6023      	str	r3, [r4, #0]
 8003010:	2378      	movs	r3, #120	; 0x78
 8003012:	4828      	ldr	r0, [pc, #160]	; (80030b4 <_printf_i+0x248>)
 8003014:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003018:	e7e3      	b.n	8002fe2 <_printf_i+0x176>
 800301a:	065e      	lsls	r6, r3, #25
 800301c:	bf48      	it	mi
 800301e:	b2ad      	uxthmi	r5, r5
 8003020:	e7e6      	b.n	8002ff0 <_printf_i+0x184>
 8003022:	4616      	mov	r6, r2
 8003024:	e7bb      	b.n	8002f9e <_printf_i+0x132>
 8003026:	680b      	ldr	r3, [r1, #0]
 8003028:	6826      	ldr	r6, [r4, #0]
 800302a:	1d1d      	adds	r5, r3, #4
 800302c:	6960      	ldr	r0, [r4, #20]
 800302e:	600d      	str	r5, [r1, #0]
 8003030:	0635      	lsls	r5, r6, #24
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	d501      	bpl.n	800303a <_printf_i+0x1ce>
 8003036:	6018      	str	r0, [r3, #0]
 8003038:	e002      	b.n	8003040 <_printf_i+0x1d4>
 800303a:	0671      	lsls	r1, r6, #25
 800303c:	d5fb      	bpl.n	8003036 <_printf_i+0x1ca>
 800303e:	8018      	strh	r0, [r3, #0]
 8003040:	2300      	movs	r3, #0
 8003042:	4616      	mov	r6, r2
 8003044:	6123      	str	r3, [r4, #16]
 8003046:	e7ba      	b.n	8002fbe <_printf_i+0x152>
 8003048:	680b      	ldr	r3, [r1, #0]
 800304a:	1d1a      	adds	r2, r3, #4
 800304c:	600a      	str	r2, [r1, #0]
 800304e:	681e      	ldr	r6, [r3, #0]
 8003050:	2100      	movs	r1, #0
 8003052:	4630      	mov	r0, r6
 8003054:	6862      	ldr	r2, [r4, #4]
 8003056:	f000 fa9d 	bl	8003594 <memchr>
 800305a:	b108      	cbz	r0, 8003060 <_printf_i+0x1f4>
 800305c:	1b80      	subs	r0, r0, r6
 800305e:	6060      	str	r0, [r4, #4]
 8003060:	6863      	ldr	r3, [r4, #4]
 8003062:	6123      	str	r3, [r4, #16]
 8003064:	2300      	movs	r3, #0
 8003066:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800306a:	e7a8      	b.n	8002fbe <_printf_i+0x152>
 800306c:	4632      	mov	r2, r6
 800306e:	4649      	mov	r1, r9
 8003070:	4640      	mov	r0, r8
 8003072:	6923      	ldr	r3, [r4, #16]
 8003074:	47d0      	blx	sl
 8003076:	3001      	adds	r0, #1
 8003078:	d0ab      	beq.n	8002fd2 <_printf_i+0x166>
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	079b      	lsls	r3, r3, #30
 800307e:	d413      	bmi.n	80030a8 <_printf_i+0x23c>
 8003080:	68e0      	ldr	r0, [r4, #12]
 8003082:	9b03      	ldr	r3, [sp, #12]
 8003084:	4298      	cmp	r0, r3
 8003086:	bfb8      	it	lt
 8003088:	4618      	movlt	r0, r3
 800308a:	e7a4      	b.n	8002fd6 <_printf_i+0x16a>
 800308c:	2301      	movs	r3, #1
 800308e:	4632      	mov	r2, r6
 8003090:	4649      	mov	r1, r9
 8003092:	4640      	mov	r0, r8
 8003094:	47d0      	blx	sl
 8003096:	3001      	adds	r0, #1
 8003098:	d09b      	beq.n	8002fd2 <_printf_i+0x166>
 800309a:	3501      	adds	r5, #1
 800309c:	68e3      	ldr	r3, [r4, #12]
 800309e:	9903      	ldr	r1, [sp, #12]
 80030a0:	1a5b      	subs	r3, r3, r1
 80030a2:	42ab      	cmp	r3, r5
 80030a4:	dcf2      	bgt.n	800308c <_printf_i+0x220>
 80030a6:	e7eb      	b.n	8003080 <_printf_i+0x214>
 80030a8:	2500      	movs	r5, #0
 80030aa:	f104 0619 	add.w	r6, r4, #25
 80030ae:	e7f5      	b.n	800309c <_printf_i+0x230>
 80030b0:	08003811 	.word	0x08003811
 80030b4:	08003822 	.word	0x08003822

080030b8 <_sbrk_r>:
 80030b8:	b538      	push	{r3, r4, r5, lr}
 80030ba:	2300      	movs	r3, #0
 80030bc:	4d05      	ldr	r5, [pc, #20]	; (80030d4 <_sbrk_r+0x1c>)
 80030be:	4604      	mov	r4, r0
 80030c0:	4608      	mov	r0, r1
 80030c2:	602b      	str	r3, [r5, #0]
 80030c4:	f7fd fca6 	bl	8000a14 <_sbrk>
 80030c8:	1c43      	adds	r3, r0, #1
 80030ca:	d102      	bne.n	80030d2 <_sbrk_r+0x1a>
 80030cc:	682b      	ldr	r3, [r5, #0]
 80030ce:	b103      	cbz	r3, 80030d2 <_sbrk_r+0x1a>
 80030d0:	6023      	str	r3, [r4, #0]
 80030d2:	bd38      	pop	{r3, r4, r5, pc}
 80030d4:	20000114 	.word	0x20000114

080030d8 <__sread>:
 80030d8:	b510      	push	{r4, lr}
 80030da:	460c      	mov	r4, r1
 80030dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030e0:	f000 fabe 	bl	8003660 <_read_r>
 80030e4:	2800      	cmp	r0, #0
 80030e6:	bfab      	itete	ge
 80030e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80030ea:	89a3      	ldrhlt	r3, [r4, #12]
 80030ec:	181b      	addge	r3, r3, r0
 80030ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80030f2:	bfac      	ite	ge
 80030f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80030f6:	81a3      	strhlt	r3, [r4, #12]
 80030f8:	bd10      	pop	{r4, pc}

080030fa <__swrite>:
 80030fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030fe:	461f      	mov	r7, r3
 8003100:	898b      	ldrh	r3, [r1, #12]
 8003102:	4605      	mov	r5, r0
 8003104:	05db      	lsls	r3, r3, #23
 8003106:	460c      	mov	r4, r1
 8003108:	4616      	mov	r6, r2
 800310a:	d505      	bpl.n	8003118 <__swrite+0x1e>
 800310c:	2302      	movs	r3, #2
 800310e:	2200      	movs	r2, #0
 8003110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003114:	f000 f9c8 	bl	80034a8 <_lseek_r>
 8003118:	89a3      	ldrh	r3, [r4, #12]
 800311a:	4632      	mov	r2, r6
 800311c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003120:	81a3      	strh	r3, [r4, #12]
 8003122:	4628      	mov	r0, r5
 8003124:	463b      	mov	r3, r7
 8003126:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800312a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800312e:	f000 b869 	b.w	8003204 <_write_r>

08003132 <__sseek>:
 8003132:	b510      	push	{r4, lr}
 8003134:	460c      	mov	r4, r1
 8003136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800313a:	f000 f9b5 	bl	80034a8 <_lseek_r>
 800313e:	1c43      	adds	r3, r0, #1
 8003140:	89a3      	ldrh	r3, [r4, #12]
 8003142:	bf15      	itete	ne
 8003144:	6560      	strne	r0, [r4, #84]	; 0x54
 8003146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800314a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800314e:	81a3      	strheq	r3, [r4, #12]
 8003150:	bf18      	it	ne
 8003152:	81a3      	strhne	r3, [r4, #12]
 8003154:	bd10      	pop	{r4, pc}

08003156 <__sclose>:
 8003156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800315a:	f000 b8d3 	b.w	8003304 <_close_r>
	...

08003160 <__swbuf_r>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	460e      	mov	r6, r1
 8003164:	4614      	mov	r4, r2
 8003166:	4605      	mov	r5, r0
 8003168:	b118      	cbz	r0, 8003172 <__swbuf_r+0x12>
 800316a:	6983      	ldr	r3, [r0, #24]
 800316c:	b90b      	cbnz	r3, 8003172 <__swbuf_r+0x12>
 800316e:	f7ff fbbb 	bl	80028e8 <__sinit>
 8003172:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <__swbuf_r+0x98>)
 8003174:	429c      	cmp	r4, r3
 8003176:	d12b      	bne.n	80031d0 <__swbuf_r+0x70>
 8003178:	686c      	ldr	r4, [r5, #4]
 800317a:	69a3      	ldr	r3, [r4, #24]
 800317c:	60a3      	str	r3, [r4, #8]
 800317e:	89a3      	ldrh	r3, [r4, #12]
 8003180:	071a      	lsls	r2, r3, #28
 8003182:	d52f      	bpl.n	80031e4 <__swbuf_r+0x84>
 8003184:	6923      	ldr	r3, [r4, #16]
 8003186:	b36b      	cbz	r3, 80031e4 <__swbuf_r+0x84>
 8003188:	6923      	ldr	r3, [r4, #16]
 800318a:	6820      	ldr	r0, [r4, #0]
 800318c:	b2f6      	uxtb	r6, r6
 800318e:	1ac0      	subs	r0, r0, r3
 8003190:	6963      	ldr	r3, [r4, #20]
 8003192:	4637      	mov	r7, r6
 8003194:	4283      	cmp	r3, r0
 8003196:	dc04      	bgt.n	80031a2 <__swbuf_r+0x42>
 8003198:	4621      	mov	r1, r4
 800319a:	4628      	mov	r0, r5
 800319c:	f000 f948 	bl	8003430 <_fflush_r>
 80031a0:	bb30      	cbnz	r0, 80031f0 <__swbuf_r+0x90>
 80031a2:	68a3      	ldr	r3, [r4, #8]
 80031a4:	3001      	adds	r0, #1
 80031a6:	3b01      	subs	r3, #1
 80031a8:	60a3      	str	r3, [r4, #8]
 80031aa:	6823      	ldr	r3, [r4, #0]
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	6022      	str	r2, [r4, #0]
 80031b0:	701e      	strb	r6, [r3, #0]
 80031b2:	6963      	ldr	r3, [r4, #20]
 80031b4:	4283      	cmp	r3, r0
 80031b6:	d004      	beq.n	80031c2 <__swbuf_r+0x62>
 80031b8:	89a3      	ldrh	r3, [r4, #12]
 80031ba:	07db      	lsls	r3, r3, #31
 80031bc:	d506      	bpl.n	80031cc <__swbuf_r+0x6c>
 80031be:	2e0a      	cmp	r6, #10
 80031c0:	d104      	bne.n	80031cc <__swbuf_r+0x6c>
 80031c2:	4621      	mov	r1, r4
 80031c4:	4628      	mov	r0, r5
 80031c6:	f000 f933 	bl	8003430 <_fflush_r>
 80031ca:	b988      	cbnz	r0, 80031f0 <__swbuf_r+0x90>
 80031cc:	4638      	mov	r0, r7
 80031ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031d0:	4b0a      	ldr	r3, [pc, #40]	; (80031fc <__swbuf_r+0x9c>)
 80031d2:	429c      	cmp	r4, r3
 80031d4:	d101      	bne.n	80031da <__swbuf_r+0x7a>
 80031d6:	68ac      	ldr	r4, [r5, #8]
 80031d8:	e7cf      	b.n	800317a <__swbuf_r+0x1a>
 80031da:	4b09      	ldr	r3, [pc, #36]	; (8003200 <__swbuf_r+0xa0>)
 80031dc:	429c      	cmp	r4, r3
 80031de:	bf08      	it	eq
 80031e0:	68ec      	ldreq	r4, [r5, #12]
 80031e2:	e7ca      	b.n	800317a <__swbuf_r+0x1a>
 80031e4:	4621      	mov	r1, r4
 80031e6:	4628      	mov	r0, r5
 80031e8:	f000 f81e 	bl	8003228 <__swsetup_r>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d0cb      	beq.n	8003188 <__swbuf_r+0x28>
 80031f0:	f04f 37ff 	mov.w	r7, #4294967295
 80031f4:	e7ea      	b.n	80031cc <__swbuf_r+0x6c>
 80031f6:	bf00      	nop
 80031f8:	080037c0 	.word	0x080037c0
 80031fc:	080037e0 	.word	0x080037e0
 8003200:	080037a0 	.word	0x080037a0

08003204 <_write_r>:
 8003204:	b538      	push	{r3, r4, r5, lr}
 8003206:	4604      	mov	r4, r0
 8003208:	4608      	mov	r0, r1
 800320a:	4611      	mov	r1, r2
 800320c:	2200      	movs	r2, #0
 800320e:	4d05      	ldr	r5, [pc, #20]	; (8003224 <_write_r+0x20>)
 8003210:	602a      	str	r2, [r5, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	f7fd fbb2 	bl	800097c <_write>
 8003218:	1c43      	adds	r3, r0, #1
 800321a:	d102      	bne.n	8003222 <_write_r+0x1e>
 800321c:	682b      	ldr	r3, [r5, #0]
 800321e:	b103      	cbz	r3, 8003222 <_write_r+0x1e>
 8003220:	6023      	str	r3, [r4, #0]
 8003222:	bd38      	pop	{r3, r4, r5, pc}
 8003224:	20000114 	.word	0x20000114

08003228 <__swsetup_r>:
 8003228:	4b32      	ldr	r3, [pc, #200]	; (80032f4 <__swsetup_r+0xcc>)
 800322a:	b570      	push	{r4, r5, r6, lr}
 800322c:	681d      	ldr	r5, [r3, #0]
 800322e:	4606      	mov	r6, r0
 8003230:	460c      	mov	r4, r1
 8003232:	b125      	cbz	r5, 800323e <__swsetup_r+0x16>
 8003234:	69ab      	ldr	r3, [r5, #24]
 8003236:	b913      	cbnz	r3, 800323e <__swsetup_r+0x16>
 8003238:	4628      	mov	r0, r5
 800323a:	f7ff fb55 	bl	80028e8 <__sinit>
 800323e:	4b2e      	ldr	r3, [pc, #184]	; (80032f8 <__swsetup_r+0xd0>)
 8003240:	429c      	cmp	r4, r3
 8003242:	d10f      	bne.n	8003264 <__swsetup_r+0x3c>
 8003244:	686c      	ldr	r4, [r5, #4]
 8003246:	89a3      	ldrh	r3, [r4, #12]
 8003248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800324c:	0719      	lsls	r1, r3, #28
 800324e:	d42c      	bmi.n	80032aa <__swsetup_r+0x82>
 8003250:	06dd      	lsls	r5, r3, #27
 8003252:	d411      	bmi.n	8003278 <__swsetup_r+0x50>
 8003254:	2309      	movs	r3, #9
 8003256:	6033      	str	r3, [r6, #0]
 8003258:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	81a3      	strh	r3, [r4, #12]
 8003262:	e03e      	b.n	80032e2 <__swsetup_r+0xba>
 8003264:	4b25      	ldr	r3, [pc, #148]	; (80032fc <__swsetup_r+0xd4>)
 8003266:	429c      	cmp	r4, r3
 8003268:	d101      	bne.n	800326e <__swsetup_r+0x46>
 800326a:	68ac      	ldr	r4, [r5, #8]
 800326c:	e7eb      	b.n	8003246 <__swsetup_r+0x1e>
 800326e:	4b24      	ldr	r3, [pc, #144]	; (8003300 <__swsetup_r+0xd8>)
 8003270:	429c      	cmp	r4, r3
 8003272:	bf08      	it	eq
 8003274:	68ec      	ldreq	r4, [r5, #12]
 8003276:	e7e6      	b.n	8003246 <__swsetup_r+0x1e>
 8003278:	0758      	lsls	r0, r3, #29
 800327a:	d512      	bpl.n	80032a2 <__swsetup_r+0x7a>
 800327c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800327e:	b141      	cbz	r1, 8003292 <__swsetup_r+0x6a>
 8003280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003284:	4299      	cmp	r1, r3
 8003286:	d002      	beq.n	800328e <__swsetup_r+0x66>
 8003288:	4630      	mov	r0, r6
 800328a:	f000 f99d 	bl	80035c8 <_free_r>
 800328e:	2300      	movs	r3, #0
 8003290:	6363      	str	r3, [r4, #52]	; 0x34
 8003292:	89a3      	ldrh	r3, [r4, #12]
 8003294:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003298:	81a3      	strh	r3, [r4, #12]
 800329a:	2300      	movs	r3, #0
 800329c:	6063      	str	r3, [r4, #4]
 800329e:	6923      	ldr	r3, [r4, #16]
 80032a0:	6023      	str	r3, [r4, #0]
 80032a2:	89a3      	ldrh	r3, [r4, #12]
 80032a4:	f043 0308 	orr.w	r3, r3, #8
 80032a8:	81a3      	strh	r3, [r4, #12]
 80032aa:	6923      	ldr	r3, [r4, #16]
 80032ac:	b94b      	cbnz	r3, 80032c2 <__swsetup_r+0x9a>
 80032ae:	89a3      	ldrh	r3, [r4, #12]
 80032b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b8:	d003      	beq.n	80032c2 <__swsetup_r+0x9a>
 80032ba:	4621      	mov	r1, r4
 80032bc:	4630      	mov	r0, r6
 80032be:	f000 f929 	bl	8003514 <__smakebuf_r>
 80032c2:	89a0      	ldrh	r0, [r4, #12]
 80032c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032c8:	f010 0301 	ands.w	r3, r0, #1
 80032cc:	d00a      	beq.n	80032e4 <__swsetup_r+0xbc>
 80032ce:	2300      	movs	r3, #0
 80032d0:	60a3      	str	r3, [r4, #8]
 80032d2:	6963      	ldr	r3, [r4, #20]
 80032d4:	425b      	negs	r3, r3
 80032d6:	61a3      	str	r3, [r4, #24]
 80032d8:	6923      	ldr	r3, [r4, #16]
 80032da:	b943      	cbnz	r3, 80032ee <__swsetup_r+0xc6>
 80032dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032e0:	d1ba      	bne.n	8003258 <__swsetup_r+0x30>
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	0781      	lsls	r1, r0, #30
 80032e6:	bf58      	it	pl
 80032e8:	6963      	ldrpl	r3, [r4, #20]
 80032ea:	60a3      	str	r3, [r4, #8]
 80032ec:	e7f4      	b.n	80032d8 <__swsetup_r+0xb0>
 80032ee:	2000      	movs	r0, #0
 80032f0:	e7f7      	b.n	80032e2 <__swsetup_r+0xba>
 80032f2:	bf00      	nop
 80032f4:	2000000c 	.word	0x2000000c
 80032f8:	080037c0 	.word	0x080037c0
 80032fc:	080037e0 	.word	0x080037e0
 8003300:	080037a0 	.word	0x080037a0

08003304 <_close_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	2300      	movs	r3, #0
 8003308:	4d05      	ldr	r5, [pc, #20]	; (8003320 <_close_r+0x1c>)
 800330a:	4604      	mov	r4, r0
 800330c:	4608      	mov	r0, r1
 800330e:	602b      	str	r3, [r5, #0]
 8003310:	f7fd fb50 	bl	80009b4 <_close>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d102      	bne.n	800331e <_close_r+0x1a>
 8003318:	682b      	ldr	r3, [r5, #0]
 800331a:	b103      	cbz	r3, 800331e <_close_r+0x1a>
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	bd38      	pop	{r3, r4, r5, pc}
 8003320:	20000114 	.word	0x20000114

08003324 <__sflush_r>:
 8003324:	898a      	ldrh	r2, [r1, #12]
 8003326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800332a:	4605      	mov	r5, r0
 800332c:	0710      	lsls	r0, r2, #28
 800332e:	460c      	mov	r4, r1
 8003330:	d458      	bmi.n	80033e4 <__sflush_r+0xc0>
 8003332:	684b      	ldr	r3, [r1, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	dc05      	bgt.n	8003344 <__sflush_r+0x20>
 8003338:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	dc02      	bgt.n	8003344 <__sflush_r+0x20>
 800333e:	2000      	movs	r0, #0
 8003340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003344:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003346:	2e00      	cmp	r6, #0
 8003348:	d0f9      	beq.n	800333e <__sflush_r+0x1a>
 800334a:	2300      	movs	r3, #0
 800334c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003350:	682f      	ldr	r7, [r5, #0]
 8003352:	602b      	str	r3, [r5, #0]
 8003354:	d032      	beq.n	80033bc <__sflush_r+0x98>
 8003356:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003358:	89a3      	ldrh	r3, [r4, #12]
 800335a:	075a      	lsls	r2, r3, #29
 800335c:	d505      	bpl.n	800336a <__sflush_r+0x46>
 800335e:	6863      	ldr	r3, [r4, #4]
 8003360:	1ac0      	subs	r0, r0, r3
 8003362:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003364:	b10b      	cbz	r3, 800336a <__sflush_r+0x46>
 8003366:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003368:	1ac0      	subs	r0, r0, r3
 800336a:	2300      	movs	r3, #0
 800336c:	4602      	mov	r2, r0
 800336e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003370:	4628      	mov	r0, r5
 8003372:	6a21      	ldr	r1, [r4, #32]
 8003374:	47b0      	blx	r6
 8003376:	1c43      	adds	r3, r0, #1
 8003378:	89a3      	ldrh	r3, [r4, #12]
 800337a:	d106      	bne.n	800338a <__sflush_r+0x66>
 800337c:	6829      	ldr	r1, [r5, #0]
 800337e:	291d      	cmp	r1, #29
 8003380:	d82c      	bhi.n	80033dc <__sflush_r+0xb8>
 8003382:	4a2a      	ldr	r2, [pc, #168]	; (800342c <__sflush_r+0x108>)
 8003384:	40ca      	lsrs	r2, r1
 8003386:	07d6      	lsls	r6, r2, #31
 8003388:	d528      	bpl.n	80033dc <__sflush_r+0xb8>
 800338a:	2200      	movs	r2, #0
 800338c:	6062      	str	r2, [r4, #4]
 800338e:	6922      	ldr	r2, [r4, #16]
 8003390:	04d9      	lsls	r1, r3, #19
 8003392:	6022      	str	r2, [r4, #0]
 8003394:	d504      	bpl.n	80033a0 <__sflush_r+0x7c>
 8003396:	1c42      	adds	r2, r0, #1
 8003398:	d101      	bne.n	800339e <__sflush_r+0x7a>
 800339a:	682b      	ldr	r3, [r5, #0]
 800339c:	b903      	cbnz	r3, 80033a0 <__sflush_r+0x7c>
 800339e:	6560      	str	r0, [r4, #84]	; 0x54
 80033a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033a2:	602f      	str	r7, [r5, #0]
 80033a4:	2900      	cmp	r1, #0
 80033a6:	d0ca      	beq.n	800333e <__sflush_r+0x1a>
 80033a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033ac:	4299      	cmp	r1, r3
 80033ae:	d002      	beq.n	80033b6 <__sflush_r+0x92>
 80033b0:	4628      	mov	r0, r5
 80033b2:	f000 f909 	bl	80035c8 <_free_r>
 80033b6:	2000      	movs	r0, #0
 80033b8:	6360      	str	r0, [r4, #52]	; 0x34
 80033ba:	e7c1      	b.n	8003340 <__sflush_r+0x1c>
 80033bc:	6a21      	ldr	r1, [r4, #32]
 80033be:	2301      	movs	r3, #1
 80033c0:	4628      	mov	r0, r5
 80033c2:	47b0      	blx	r6
 80033c4:	1c41      	adds	r1, r0, #1
 80033c6:	d1c7      	bne.n	8003358 <__sflush_r+0x34>
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0c4      	beq.n	8003358 <__sflush_r+0x34>
 80033ce:	2b1d      	cmp	r3, #29
 80033d0:	d001      	beq.n	80033d6 <__sflush_r+0xb2>
 80033d2:	2b16      	cmp	r3, #22
 80033d4:	d101      	bne.n	80033da <__sflush_r+0xb6>
 80033d6:	602f      	str	r7, [r5, #0]
 80033d8:	e7b1      	b.n	800333e <__sflush_r+0x1a>
 80033da:	89a3      	ldrh	r3, [r4, #12]
 80033dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033e0:	81a3      	strh	r3, [r4, #12]
 80033e2:	e7ad      	b.n	8003340 <__sflush_r+0x1c>
 80033e4:	690f      	ldr	r7, [r1, #16]
 80033e6:	2f00      	cmp	r7, #0
 80033e8:	d0a9      	beq.n	800333e <__sflush_r+0x1a>
 80033ea:	0793      	lsls	r3, r2, #30
 80033ec:	bf18      	it	ne
 80033ee:	2300      	movne	r3, #0
 80033f0:	680e      	ldr	r6, [r1, #0]
 80033f2:	bf08      	it	eq
 80033f4:	694b      	ldreq	r3, [r1, #20]
 80033f6:	eba6 0807 	sub.w	r8, r6, r7
 80033fa:	600f      	str	r7, [r1, #0]
 80033fc:	608b      	str	r3, [r1, #8]
 80033fe:	f1b8 0f00 	cmp.w	r8, #0
 8003402:	dd9c      	ble.n	800333e <__sflush_r+0x1a>
 8003404:	4643      	mov	r3, r8
 8003406:	463a      	mov	r2, r7
 8003408:	4628      	mov	r0, r5
 800340a:	6a21      	ldr	r1, [r4, #32]
 800340c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800340e:	47b0      	blx	r6
 8003410:	2800      	cmp	r0, #0
 8003412:	dc06      	bgt.n	8003422 <__sflush_r+0xfe>
 8003414:	89a3      	ldrh	r3, [r4, #12]
 8003416:	f04f 30ff 	mov.w	r0, #4294967295
 800341a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341e:	81a3      	strh	r3, [r4, #12]
 8003420:	e78e      	b.n	8003340 <__sflush_r+0x1c>
 8003422:	4407      	add	r7, r0
 8003424:	eba8 0800 	sub.w	r8, r8, r0
 8003428:	e7e9      	b.n	80033fe <__sflush_r+0xda>
 800342a:	bf00      	nop
 800342c:	20400001 	.word	0x20400001

08003430 <_fflush_r>:
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	690b      	ldr	r3, [r1, #16]
 8003434:	4605      	mov	r5, r0
 8003436:	460c      	mov	r4, r1
 8003438:	b913      	cbnz	r3, 8003440 <_fflush_r+0x10>
 800343a:	2500      	movs	r5, #0
 800343c:	4628      	mov	r0, r5
 800343e:	bd38      	pop	{r3, r4, r5, pc}
 8003440:	b118      	cbz	r0, 800344a <_fflush_r+0x1a>
 8003442:	6983      	ldr	r3, [r0, #24]
 8003444:	b90b      	cbnz	r3, 800344a <_fflush_r+0x1a>
 8003446:	f7ff fa4f 	bl	80028e8 <__sinit>
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <_fflush_r+0x6c>)
 800344c:	429c      	cmp	r4, r3
 800344e:	d11b      	bne.n	8003488 <_fflush_r+0x58>
 8003450:	686c      	ldr	r4, [r5, #4]
 8003452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0ef      	beq.n	800343a <_fflush_r+0xa>
 800345a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800345c:	07d0      	lsls	r0, r2, #31
 800345e:	d404      	bmi.n	800346a <_fflush_r+0x3a>
 8003460:	0599      	lsls	r1, r3, #22
 8003462:	d402      	bmi.n	800346a <_fflush_r+0x3a>
 8003464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003466:	f7ff fadd 	bl	8002a24 <__retarget_lock_acquire_recursive>
 800346a:	4628      	mov	r0, r5
 800346c:	4621      	mov	r1, r4
 800346e:	f7ff ff59 	bl	8003324 <__sflush_r>
 8003472:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003474:	4605      	mov	r5, r0
 8003476:	07da      	lsls	r2, r3, #31
 8003478:	d4e0      	bmi.n	800343c <_fflush_r+0xc>
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	059b      	lsls	r3, r3, #22
 800347e:	d4dd      	bmi.n	800343c <_fflush_r+0xc>
 8003480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003482:	f7ff fad0 	bl	8002a26 <__retarget_lock_release_recursive>
 8003486:	e7d9      	b.n	800343c <_fflush_r+0xc>
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <_fflush_r+0x70>)
 800348a:	429c      	cmp	r4, r3
 800348c:	d101      	bne.n	8003492 <_fflush_r+0x62>
 800348e:	68ac      	ldr	r4, [r5, #8]
 8003490:	e7df      	b.n	8003452 <_fflush_r+0x22>
 8003492:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <_fflush_r+0x74>)
 8003494:	429c      	cmp	r4, r3
 8003496:	bf08      	it	eq
 8003498:	68ec      	ldreq	r4, [r5, #12]
 800349a:	e7da      	b.n	8003452 <_fflush_r+0x22>
 800349c:	080037c0 	.word	0x080037c0
 80034a0:	080037e0 	.word	0x080037e0
 80034a4:	080037a0 	.word	0x080037a0

080034a8 <_lseek_r>:
 80034a8:	b538      	push	{r3, r4, r5, lr}
 80034aa:	4604      	mov	r4, r0
 80034ac:	4608      	mov	r0, r1
 80034ae:	4611      	mov	r1, r2
 80034b0:	2200      	movs	r2, #0
 80034b2:	4d05      	ldr	r5, [pc, #20]	; (80034c8 <_lseek_r+0x20>)
 80034b4:	602a      	str	r2, [r5, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f7fd faa0 	bl	80009fc <_lseek>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d102      	bne.n	80034c6 <_lseek_r+0x1e>
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	b103      	cbz	r3, 80034c6 <_lseek_r+0x1e>
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
 80034c8:	20000114 	.word	0x20000114

080034cc <__swhatbuf_r>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	460e      	mov	r6, r1
 80034d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034d4:	4614      	mov	r4, r2
 80034d6:	2900      	cmp	r1, #0
 80034d8:	461d      	mov	r5, r3
 80034da:	b096      	sub	sp, #88	; 0x58
 80034dc:	da07      	bge.n	80034ee <__swhatbuf_r+0x22>
 80034de:	2300      	movs	r3, #0
 80034e0:	602b      	str	r3, [r5, #0]
 80034e2:	89b3      	ldrh	r3, [r6, #12]
 80034e4:	061a      	lsls	r2, r3, #24
 80034e6:	d410      	bmi.n	800350a <__swhatbuf_r+0x3e>
 80034e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ec:	e00e      	b.n	800350c <__swhatbuf_r+0x40>
 80034ee:	466a      	mov	r2, sp
 80034f0:	f000 f8c8 	bl	8003684 <_fstat_r>
 80034f4:	2800      	cmp	r0, #0
 80034f6:	dbf2      	blt.n	80034de <__swhatbuf_r+0x12>
 80034f8:	9a01      	ldr	r2, [sp, #4]
 80034fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80034fe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003502:	425a      	negs	r2, r3
 8003504:	415a      	adcs	r2, r3
 8003506:	602a      	str	r2, [r5, #0]
 8003508:	e7ee      	b.n	80034e8 <__swhatbuf_r+0x1c>
 800350a:	2340      	movs	r3, #64	; 0x40
 800350c:	2000      	movs	r0, #0
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	b016      	add	sp, #88	; 0x58
 8003512:	bd70      	pop	{r4, r5, r6, pc}

08003514 <__smakebuf_r>:
 8003514:	898b      	ldrh	r3, [r1, #12]
 8003516:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003518:	079d      	lsls	r5, r3, #30
 800351a:	4606      	mov	r6, r0
 800351c:	460c      	mov	r4, r1
 800351e:	d507      	bpl.n	8003530 <__smakebuf_r+0x1c>
 8003520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003524:	6023      	str	r3, [r4, #0]
 8003526:	6123      	str	r3, [r4, #16]
 8003528:	2301      	movs	r3, #1
 800352a:	6163      	str	r3, [r4, #20]
 800352c:	b002      	add	sp, #8
 800352e:	bd70      	pop	{r4, r5, r6, pc}
 8003530:	466a      	mov	r2, sp
 8003532:	ab01      	add	r3, sp, #4
 8003534:	f7ff ffca 	bl	80034cc <__swhatbuf_r>
 8003538:	9900      	ldr	r1, [sp, #0]
 800353a:	4605      	mov	r5, r0
 800353c:	4630      	mov	r0, r6
 800353e:	f7ff fa73 	bl	8002a28 <_malloc_r>
 8003542:	b948      	cbnz	r0, 8003558 <__smakebuf_r+0x44>
 8003544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003548:	059a      	lsls	r2, r3, #22
 800354a:	d4ef      	bmi.n	800352c <__smakebuf_r+0x18>
 800354c:	f023 0303 	bic.w	r3, r3, #3
 8003550:	f043 0302 	orr.w	r3, r3, #2
 8003554:	81a3      	strh	r3, [r4, #12]
 8003556:	e7e3      	b.n	8003520 <__smakebuf_r+0xc>
 8003558:	4b0d      	ldr	r3, [pc, #52]	; (8003590 <__smakebuf_r+0x7c>)
 800355a:	62b3      	str	r3, [r6, #40]	; 0x28
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	6020      	str	r0, [r4, #0]
 8003560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003564:	81a3      	strh	r3, [r4, #12]
 8003566:	9b00      	ldr	r3, [sp, #0]
 8003568:	6120      	str	r0, [r4, #16]
 800356a:	6163      	str	r3, [r4, #20]
 800356c:	9b01      	ldr	r3, [sp, #4]
 800356e:	b15b      	cbz	r3, 8003588 <__smakebuf_r+0x74>
 8003570:	4630      	mov	r0, r6
 8003572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003576:	f000 f897 	bl	80036a8 <_isatty_r>
 800357a:	b128      	cbz	r0, 8003588 <__smakebuf_r+0x74>
 800357c:	89a3      	ldrh	r3, [r4, #12]
 800357e:	f023 0303 	bic.w	r3, r3, #3
 8003582:	f043 0301 	orr.w	r3, r3, #1
 8003586:	81a3      	strh	r3, [r4, #12]
 8003588:	89a0      	ldrh	r0, [r4, #12]
 800358a:	4305      	orrs	r5, r0
 800358c:	81a5      	strh	r5, [r4, #12]
 800358e:	e7cd      	b.n	800352c <__smakebuf_r+0x18>
 8003590:	08002881 	.word	0x08002881

08003594 <memchr>:
 8003594:	4603      	mov	r3, r0
 8003596:	b510      	push	{r4, lr}
 8003598:	b2c9      	uxtb	r1, r1
 800359a:	4402      	add	r2, r0
 800359c:	4293      	cmp	r3, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	d101      	bne.n	80035a6 <memchr+0x12>
 80035a2:	2000      	movs	r0, #0
 80035a4:	e003      	b.n	80035ae <memchr+0x1a>
 80035a6:	7804      	ldrb	r4, [r0, #0]
 80035a8:	3301      	adds	r3, #1
 80035aa:	428c      	cmp	r4, r1
 80035ac:	d1f6      	bne.n	800359c <memchr+0x8>
 80035ae:	bd10      	pop	{r4, pc}

080035b0 <__malloc_lock>:
 80035b0:	4801      	ldr	r0, [pc, #4]	; (80035b8 <__malloc_lock+0x8>)
 80035b2:	f7ff ba37 	b.w	8002a24 <__retarget_lock_acquire_recursive>
 80035b6:	bf00      	nop
 80035b8:	2000010c 	.word	0x2000010c

080035bc <__malloc_unlock>:
 80035bc:	4801      	ldr	r0, [pc, #4]	; (80035c4 <__malloc_unlock+0x8>)
 80035be:	f7ff ba32 	b.w	8002a26 <__retarget_lock_release_recursive>
 80035c2:	bf00      	nop
 80035c4:	2000010c 	.word	0x2000010c

080035c8 <_free_r>:
 80035c8:	b538      	push	{r3, r4, r5, lr}
 80035ca:	4605      	mov	r5, r0
 80035cc:	2900      	cmp	r1, #0
 80035ce:	d043      	beq.n	8003658 <_free_r+0x90>
 80035d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035d4:	1f0c      	subs	r4, r1, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bfb8      	it	lt
 80035da:	18e4      	addlt	r4, r4, r3
 80035dc:	f7ff ffe8 	bl	80035b0 <__malloc_lock>
 80035e0:	4a1e      	ldr	r2, [pc, #120]	; (800365c <_free_r+0x94>)
 80035e2:	6813      	ldr	r3, [r2, #0]
 80035e4:	4610      	mov	r0, r2
 80035e6:	b933      	cbnz	r3, 80035f6 <_free_r+0x2e>
 80035e8:	6063      	str	r3, [r4, #4]
 80035ea:	6014      	str	r4, [r2, #0]
 80035ec:	4628      	mov	r0, r5
 80035ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035f2:	f7ff bfe3 	b.w	80035bc <__malloc_unlock>
 80035f6:	42a3      	cmp	r3, r4
 80035f8:	d90a      	bls.n	8003610 <_free_r+0x48>
 80035fa:	6821      	ldr	r1, [r4, #0]
 80035fc:	1862      	adds	r2, r4, r1
 80035fe:	4293      	cmp	r3, r2
 8003600:	bf01      	itttt	eq
 8003602:	681a      	ldreq	r2, [r3, #0]
 8003604:	685b      	ldreq	r3, [r3, #4]
 8003606:	1852      	addeq	r2, r2, r1
 8003608:	6022      	streq	r2, [r4, #0]
 800360a:	6063      	str	r3, [r4, #4]
 800360c:	6004      	str	r4, [r0, #0]
 800360e:	e7ed      	b.n	80035ec <_free_r+0x24>
 8003610:	461a      	mov	r2, r3
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	b10b      	cbz	r3, 800361a <_free_r+0x52>
 8003616:	42a3      	cmp	r3, r4
 8003618:	d9fa      	bls.n	8003610 <_free_r+0x48>
 800361a:	6811      	ldr	r1, [r2, #0]
 800361c:	1850      	adds	r0, r2, r1
 800361e:	42a0      	cmp	r0, r4
 8003620:	d10b      	bne.n	800363a <_free_r+0x72>
 8003622:	6820      	ldr	r0, [r4, #0]
 8003624:	4401      	add	r1, r0
 8003626:	1850      	adds	r0, r2, r1
 8003628:	4283      	cmp	r3, r0
 800362a:	6011      	str	r1, [r2, #0]
 800362c:	d1de      	bne.n	80035ec <_free_r+0x24>
 800362e:	6818      	ldr	r0, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4401      	add	r1, r0
 8003634:	6011      	str	r1, [r2, #0]
 8003636:	6053      	str	r3, [r2, #4]
 8003638:	e7d8      	b.n	80035ec <_free_r+0x24>
 800363a:	d902      	bls.n	8003642 <_free_r+0x7a>
 800363c:	230c      	movs	r3, #12
 800363e:	602b      	str	r3, [r5, #0]
 8003640:	e7d4      	b.n	80035ec <_free_r+0x24>
 8003642:	6820      	ldr	r0, [r4, #0]
 8003644:	1821      	adds	r1, r4, r0
 8003646:	428b      	cmp	r3, r1
 8003648:	bf01      	itttt	eq
 800364a:	6819      	ldreq	r1, [r3, #0]
 800364c:	685b      	ldreq	r3, [r3, #4]
 800364e:	1809      	addeq	r1, r1, r0
 8003650:	6021      	streq	r1, [r4, #0]
 8003652:	6063      	str	r3, [r4, #4]
 8003654:	6054      	str	r4, [r2, #4]
 8003656:	e7c9      	b.n	80035ec <_free_r+0x24>
 8003658:	bd38      	pop	{r3, r4, r5, pc}
 800365a:	bf00      	nop
 800365c:	20000094 	.word	0x20000094

08003660 <_read_r>:
 8003660:	b538      	push	{r3, r4, r5, lr}
 8003662:	4604      	mov	r4, r0
 8003664:	4608      	mov	r0, r1
 8003666:	4611      	mov	r1, r2
 8003668:	2200      	movs	r2, #0
 800366a:	4d05      	ldr	r5, [pc, #20]	; (8003680 <_read_r+0x20>)
 800366c:	602a      	str	r2, [r5, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	f7fd f967 	bl	8000942 <_read>
 8003674:	1c43      	adds	r3, r0, #1
 8003676:	d102      	bne.n	800367e <_read_r+0x1e>
 8003678:	682b      	ldr	r3, [r5, #0]
 800367a:	b103      	cbz	r3, 800367e <_read_r+0x1e>
 800367c:	6023      	str	r3, [r4, #0]
 800367e:	bd38      	pop	{r3, r4, r5, pc}
 8003680:	20000114 	.word	0x20000114

08003684 <_fstat_r>:
 8003684:	b538      	push	{r3, r4, r5, lr}
 8003686:	2300      	movs	r3, #0
 8003688:	4d06      	ldr	r5, [pc, #24]	; (80036a4 <_fstat_r+0x20>)
 800368a:	4604      	mov	r4, r0
 800368c:	4608      	mov	r0, r1
 800368e:	4611      	mov	r1, r2
 8003690:	602b      	str	r3, [r5, #0]
 8003692:	f7fd f99a 	bl	80009ca <_fstat>
 8003696:	1c43      	adds	r3, r0, #1
 8003698:	d102      	bne.n	80036a0 <_fstat_r+0x1c>
 800369a:	682b      	ldr	r3, [r5, #0]
 800369c:	b103      	cbz	r3, 80036a0 <_fstat_r+0x1c>
 800369e:	6023      	str	r3, [r4, #0]
 80036a0:	bd38      	pop	{r3, r4, r5, pc}
 80036a2:	bf00      	nop
 80036a4:	20000114 	.word	0x20000114

080036a8 <_isatty_r>:
 80036a8:	b538      	push	{r3, r4, r5, lr}
 80036aa:	2300      	movs	r3, #0
 80036ac:	4d05      	ldr	r5, [pc, #20]	; (80036c4 <_isatty_r+0x1c>)
 80036ae:	4604      	mov	r4, r0
 80036b0:	4608      	mov	r0, r1
 80036b2:	602b      	str	r3, [r5, #0]
 80036b4:	f7fd f998 	bl	80009e8 <_isatty>
 80036b8:	1c43      	adds	r3, r0, #1
 80036ba:	d102      	bne.n	80036c2 <_isatty_r+0x1a>
 80036bc:	682b      	ldr	r3, [r5, #0]
 80036be:	b103      	cbz	r3, 80036c2 <_isatty_r+0x1a>
 80036c0:	6023      	str	r3, [r4, #0]
 80036c2:	bd38      	pop	{r3, r4, r5, pc}
 80036c4:	20000114 	.word	0x20000114

080036c8 <_init>:
 80036c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ca:	bf00      	nop
 80036cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ce:	bc08      	pop	{r3}
 80036d0:	469e      	mov	lr, r3
 80036d2:	4770      	bx	lr

080036d4 <_fini>:
 80036d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d6:	bf00      	nop
 80036d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036da:	bc08      	pop	{r3}
 80036dc:	469e      	mov	lr, r3
 80036de:	4770      	bx	lr
