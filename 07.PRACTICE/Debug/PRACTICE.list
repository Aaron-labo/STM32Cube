
PRACTICE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800346c  0800346c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800346c  0800346c  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800346c  0800346c  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800346c  0800346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003470  08003470  00013470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000008c  08003500  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08003500  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4fa  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb8  00000000  00000000  0002c5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002e568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  0002f180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a007  00000000  00000000  0002fc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d94b  00000000  00000000  00049c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098981  00000000  00000000  000575e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eff63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003558  00000000  00000000  000effb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000008c 	.word	0x2000008c
 8000200:	00000000 	.word	0x00000000
 8000204:	080033a0 	.word	0x080033a0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000090 	.word	0x20000090
 8000220:	080033a0 	.word	0x080033a0

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000238:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <MX_GPIO_Init+0xb0>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a25      	ldr	r2, [pc, #148]	; (80002d4 <MX_GPIO_Init+0xb0>)
 800023e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b23      	ldr	r3, [pc, #140]	; (80002d4 <MX_GPIO_Init+0xb0>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024c:	60fb      	str	r3, [r7, #12]
 800024e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000250:	4b20      	ldr	r3, [pc, #128]	; (80002d4 <MX_GPIO_Init+0xb0>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a1f      	ldr	r2, [pc, #124]	; (80002d4 <MX_GPIO_Init+0xb0>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <MX_GPIO_Init+0xb0>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0304 	and.w	r3, r3, #4
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000268:	4b1a      	ldr	r3, [pc, #104]	; (80002d4 <MX_GPIO_Init+0xb0>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a19      	ldr	r2, [pc, #100]	; (80002d4 <MX_GPIO_Init+0xb0>)
 800026e:	f043 0308 	orr.w	r3, r3, #8
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <MX_GPIO_Init+0xb0>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0308 	and.w	r3, r3, #8
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000280:	2201      	movs	r2, #1
 8000282:	2120      	movs	r1, #32
 8000284:	4814      	ldr	r0, [pc, #80]	; (80002d8 <MX_GPIO_Init+0xb4>)
 8000286:	f000 ff6f 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800028a:	2201      	movs	r2, #1
 800028c:	2120      	movs	r1, #32
 800028e:	4813      	ldr	r0, [pc, #76]	; (80002dc <MX_GPIO_Init+0xb8>)
 8000290:	f000 ff6a 	bl	8001168 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000294:	2320      	movs	r3, #32
 8000296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000298:	2301      	movs	r3, #1
 800029a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800029c:	2301      	movs	r3, #1
 800029e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002a0:	2303      	movs	r3, #3
 80002a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80002a4:	f107 0310 	add.w	r3, r7, #16
 80002a8:	4619      	mov	r1, r3
 80002aa:	480b      	ldr	r0, [pc, #44]	; (80002d8 <MX_GPIO_Init+0xb4>)
 80002ac:	f000 fdc8 	bl	8000e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80002b0:	2320      	movs	r3, #32
 80002b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b4:	2301      	movs	r3, #1
 80002b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002b8:	2301      	movs	r3, #1
 80002ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002bc:	2303      	movs	r3, #3
 80002be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80002c0:	f107 0310 	add.w	r3, r7, #16
 80002c4:	4619      	mov	r1, r3
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_GPIO_Init+0xb8>)
 80002c8:	f000 fdba 	bl	8000e40 <HAL_GPIO_Init>

}
 80002cc:	bf00      	nop
 80002ce:	3720      	adds	r7, #32
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40021000 	.word	0x40021000
 80002d8:	40011800 	.word	0x40011800
 80002dc:	40010c00 	.word	0x40010c00

080002e0 <checkLED>:
uint8_t RxBuf[BUFFERSIZE];
uint8_t TxBuf[BUFFERSIZE];
uint8_t hour, minute, second, ss05; //ss05表示0.5s

//LED灯开机检测函数
void checkLED() {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	LED0_On();
 80002e4:	2200      	movs	r2, #0
 80002e6:	2120      	movs	r1, #32
 80002e8:	4811      	ldr	r0, [pc, #68]	; (8000330 <checkLED+0x50>)
 80002ea:	f000 ff3d 	bl	8001168 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80002ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002f2:	f000 fb6b 	bl	80009cc <HAL_Delay>
	LED1_On();
 80002f6:	2200      	movs	r2, #0
 80002f8:	2120      	movs	r1, #32
 80002fa:	480e      	ldr	r0, [pc, #56]	; (8000334 <checkLED+0x54>)
 80002fc:	f000 ff34 	bl	8001168 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000300:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000304:	f000 fb62 	bl	80009cc <HAL_Delay>

	LED0_Off();
 8000308:	2201      	movs	r2, #1
 800030a:	2120      	movs	r1, #32
 800030c:	4808      	ldr	r0, [pc, #32]	; (8000330 <checkLED+0x50>)
 800030e:	f000 ff2b 	bl	8001168 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000312:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000316:	f000 fb59 	bl	80009cc <HAL_Delay>
	LED1_Off();
 800031a:	2201      	movs	r2, #1
 800031c:	2120      	movs	r1, #32
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <checkLED+0x54>)
 8000320:	f000 ff22 	bl	8001168 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000328:	f000 fb50 	bl	80009cc <HAL_Delay>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40010c00 	.word	0x40010c00
 8000334:	40011800 	.word	0x40011800

08000338 <HAL_TIM_PeriodElapsedCallback>:

//时钟回调函数,实现秒闪灯
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
	LED0_Tog();
 8000340:	2120      	movs	r1, #32
 8000342:	481a      	ldr	r0, [pc, #104]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000344:	f000 ff28 	bl	8001198 <HAL_GPIO_TogglePin>
	ss05++;
 8000348:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	3301      	adds	r3, #1
 800034e:	b2da      	uxtb	r2, r3
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000352:	701a      	strb	r2, [r3, #0]
	if (ss05 == 2) {
 8000354:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	2b02      	cmp	r3, #2
 800035a:	d122      	bne.n	80003a2 <HAL_TIM_PeriodElapsedCallback+0x6a>
		ss05 = 0;
 800035c:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800035e:	2200      	movs	r2, #0
 8000360:	701a      	strb	r2, [r3, #0]
		second++;
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	3301      	adds	r3, #1
 8000368:	b2da      	uxtb	r2, r3
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800036c:	701a      	strb	r2, [r3, #0]
		if (second == 60) {
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	2b3c      	cmp	r3, #60	; 0x3c
 8000374:	d115      	bne.n	80003a2 <HAL_TIM_PeriodElapsedCallback+0x6a>
			second = 0;
 8000376:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000378:	2200      	movs	r2, #0
 800037a:	701a      	strb	r2, [r3, #0]
			minute++;
 800037c:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	3301      	adds	r3, #1
 8000382:	b2da      	uxtb	r2, r3
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000386:	701a      	strb	r2, [r3, #0]
			if (minute == 60) {
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b3c      	cmp	r3, #60	; 0x3c
 800038e:	d108      	bne.n	80003a2 <HAL_TIM_PeriodElapsedCallback+0x6a>
				minute = 0;
 8000390:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000392:	2200      	movs	r2, #0
 8000394:	701a      	strb	r2, [r3, #0]
				hour++;
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	3301      	adds	r3, #1
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b07      	ldr	r3, [pc, #28]	; (80003bc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80003a0:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 80003a2:	bf00      	nop
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010c00 	.word	0x40010c00
 80003b0:	2000013c 	.word	0x2000013c
 80003b4:	200000b4 	.word	0x200000b4
 80003b8:	200000f8 	.word	0x200000f8
 80003bc:	200000f9 	.word	0x200000f9

080003c0 <HAL_UART_RxCpltCallback>:

//串口接收回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af02      	add	r7, sp, #8
 80003c6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a2c      	ldr	r2, [pc, #176]	; (8000480 <HAL_UART_RxCpltCallback+0xc0>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d14c      	bne.n	800046c <HAL_UART_RxCpltCallback+0xac>
		if (RxBuf[0] == 0xbf && RxBuf[2] == 0xfb) {
 80003d2:	4b2c      	ldr	r3, [pc, #176]	; (8000484 <HAL_UART_RxCpltCallback+0xc4>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2bbf      	cmp	r3, #191	; 0xbf
 80003d8:	d148      	bne.n	800046c <HAL_UART_RxCpltCallback+0xac>
 80003da:	4b2a      	ldr	r3, [pc, #168]	; (8000484 <HAL_UART_RxCpltCallback+0xc4>)
 80003dc:	789b      	ldrb	r3, [r3, #2]
 80003de:	2bfb      	cmp	r3, #251	; 0xfb
 80003e0:	d144      	bne.n	800046c <HAL_UART_RxCpltCallback+0xac>
			switch (RxBuf[1]) {
 80003e2:	4b28      	ldr	r3, [pc, #160]	; (8000484 <HAL_UART_RxCpltCallback+0xc4>)
 80003e4:	785b      	ldrb	r3, [r3, #1]
 80003e6:	2ba1      	cmp	r3, #161	; 0xa1
 80003e8:	d002      	beq.n	80003f0 <HAL_UART_RxCpltCallback+0x30>
 80003ea:	2ba2      	cmp	r3, #162	; 0xa2
 80003ec:	d014      	beq.n	8000418 <HAL_UART_RxCpltCallback+0x58>
 80003ee:	e027      	b.n	8000440 <HAL_UART_RxCpltCallback+0x80>
			case 0xa1:
				LED1_On()
 80003f0:	2200      	movs	r2, #0
 80003f2:	2120      	movs	r1, #32
 80003f4:	4824      	ldr	r0, [pc, #144]	; (8000488 <HAL_UART_RxCpltCallback+0xc8>)
 80003f6:	f000 feb7 	bl	8001168 <HAL_GPIO_WritePin>
				;
				sprintf((char*) TxBuf, "%d:%d:%d  打开LED1", hour, minute, second);
 80003fa:	4b24      	ldr	r3, [pc, #144]	; (800048c <HAL_UART_RxCpltCallback+0xcc>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	461a      	mov	r2, r3
 8000400:	4b23      	ldr	r3, [pc, #140]	; (8000490 <HAL_UART_RxCpltCallback+0xd0>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	4619      	mov	r1, r3
 8000406:	4b23      	ldr	r3, [pc, #140]	; (8000494 <HAL_UART_RxCpltCallback+0xd4>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	460b      	mov	r3, r1
 800040e:	4922      	ldr	r1, [pc, #136]	; (8000498 <HAL_UART_RxCpltCallback+0xd8>)
 8000410:	4822      	ldr	r0, [pc, #136]	; (800049c <HAL_UART_RxCpltCallback+0xdc>)
 8000412:	f002 fb8b 	bl	8002b2c <siprintf>
				break;
 8000416:	e022      	b.n	800045e <HAL_UART_RxCpltCallback+0x9e>
			case 0xa2:
				LED1_Off()
 8000418:	2201      	movs	r2, #1
 800041a:	2120      	movs	r1, #32
 800041c:	481a      	ldr	r0, [pc, #104]	; (8000488 <HAL_UART_RxCpltCallback+0xc8>)
 800041e:	f000 fea3 	bl	8001168 <HAL_GPIO_WritePin>
				;
				sprintf((char*) TxBuf, "%d:%d:%d  关闭LED1", hour, minute, second);
 8000422:	4b1a      	ldr	r3, [pc, #104]	; (800048c <HAL_UART_RxCpltCallback+0xcc>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	461a      	mov	r2, r3
 8000428:	4b19      	ldr	r3, [pc, #100]	; (8000490 <HAL_UART_RxCpltCallback+0xd0>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	4619      	mov	r1, r3
 800042e:	4b19      	ldr	r3, [pc, #100]	; (8000494 <HAL_UART_RxCpltCallback+0xd4>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	460b      	mov	r3, r1
 8000436:	491a      	ldr	r1, [pc, #104]	; (80004a0 <HAL_UART_RxCpltCallback+0xe0>)
 8000438:	4818      	ldr	r0, [pc, #96]	; (800049c <HAL_UART_RxCpltCallback+0xdc>)
 800043a:	f002 fb77 	bl	8002b2c <siprintf>
				break;
 800043e:	e00e      	b.n	800045e <HAL_UART_RxCpltCallback+0x9e>
			default:
				sprintf((char*) TxBuf, "%d:%d:%d  这是一个错误的指令", hour, minute,
 8000440:	4b12      	ldr	r3, [pc, #72]	; (800048c <HAL_UART_RxCpltCallback+0xcc>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	461a      	mov	r2, r3
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <HAL_UART_RxCpltCallback+0xd0>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	4619      	mov	r1, r3
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <HAL_UART_RxCpltCallback+0xd4>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	9300      	str	r3, [sp, #0]
 8000452:	460b      	mov	r3, r1
 8000454:	4913      	ldr	r1, [pc, #76]	; (80004a4 <HAL_UART_RxCpltCallback+0xe4>)
 8000456:	4811      	ldr	r0, [pc, #68]	; (800049c <HAL_UART_RxCpltCallback+0xdc>)
 8000458:	f002 fb68 	bl	8002b2c <siprintf>
						second);
				break;
 800045c:	bf00      	nop
			}
			HAL_UART_Transmit(huart, TxBuf, sizeof(TxBuf), 1000);
 800045e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000462:	2240      	movs	r2, #64	; 0x40
 8000464:	490d      	ldr	r1, [pc, #52]	; (800049c <HAL_UART_RxCpltCallback+0xdc>)
 8000466:	6878      	ldr	r0, [r7, #4]
 8000468:	f001 ff45 	bl	80022f6 <HAL_UART_Transmit>
		}
	}
	HAL_UART_Receive_IT(huart, RxBuf, 3);
 800046c:	2203      	movs	r2, #3
 800046e:	4905      	ldr	r1, [pc, #20]	; (8000484 <HAL_UART_RxCpltCallback+0xc4>)
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f001 ffd2 	bl	800241a <HAL_UART_Receive_IT>
}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40013800 	.word	0x40013800
 8000484:	200000fc 	.word	0x200000fc
 8000488:	40011800 	.word	0x40011800
 800048c:	200000f9 	.word	0x200000f9
 8000490:	200000f8 	.word	0x200000f8
 8000494:	200000b4 	.word	0x200000b4
 8000498:	080033b8 	.word	0x080033b8
 800049c:	200000b8 	.word	0x200000b8
 80004a0:	080033d0 	.word	0x080033d0
 80004a4:	080033e8 	.word	0x080033e8

080004a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004ac:	f000 fa2c 	bl	8000908 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004b0:	f000 f820 	bl	80004f4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004b4:	f7ff feb6 	bl	8000224 <MX_GPIO_Init>
	MX_TIM2_Init();
 80004b8:	f000 f910 	bl	80006dc <MX_TIM2_Init>
	MX_USART1_UART_Init();
 80004bc:	f000 f980 	bl	80007c0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	checkLED();
 80004c0:	f7ff ff0e 	bl	80002e0 <checkLED>
	HAL_UART_Transmit(&huart1, str1, sizeof(str1), 1000);
 80004c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c8:	221a      	movs	r2, #26
 80004ca:	4906      	ldr	r1, [pc, #24]	; (80004e4 <main+0x3c>)
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <main+0x40>)
 80004ce:	f001 ff12 	bl	80022f6 <HAL_UART_Transmit>
	HAL_TIM_Base_Start_IT(&htim2);
 80004d2:	4806      	ldr	r0, [pc, #24]	; (80004ec <main+0x44>)
 80004d4:	f001 fae4 	bl	8001aa0 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, RxBuf, 3);
 80004d8:	2203      	movs	r2, #3
 80004da:	4905      	ldr	r1, [pc, #20]	; (80004f0 <main+0x48>)
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <main+0x40>)
 80004de:	f001 ff9c 	bl	800241a <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80004e2:	e7fe      	b.n	80004e2 <main+0x3a>
 80004e4:	20000000 	.word	0x20000000
 80004e8:	20000188 	.word	0x20000188
 80004ec:	20000140 	.word	0x20000140
 80004f0:	200000fc 	.word	0x200000fc

080004f4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b090      	sub	sp, #64	; 0x40
 80004f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004fa:	f107 0318 	add.w	r3, r7, #24
 80004fe:	2228      	movs	r2, #40	; 0x28
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f002 fb0a 	bl	8002b1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000516:	2301      	movs	r3, #1
 8000518:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800051a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800051e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000524:	2301      	movs	r3, #1
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000528:	2302      	movs	r3, #2
 800052a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800052c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000530:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000532:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000536:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000538:	f107 0318 	add.w	r3, r7, #24
 800053c:	4618      	mov	r0, r3
 800053e:	f000 fe45 	bl	80011cc <HAL_RCC_OscConfig>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x58>
		Error_Handler();
 8000548:	f000 f819 	bl	800057e <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800054c:	230f      	movs	r3, #15
 800054e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000550:	2302      	movs	r3, #2
 8000552:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800055c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2102      	movs	r1, #2
 8000566:	4618      	mov	r0, r3
 8000568:	f001 f8b0 	bl	80016cc <HAL_RCC_ClockConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x82>
		Error_Handler();
 8000572:	f000 f804 	bl	800057e <Error_Handler>
	}
}
 8000576:	bf00      	nop
 8000578:	3740      	adds	r7, #64	; 0x40
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000582:	b672      	cpsid	i
}
 8000584:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000586:	e7fe      	b.n	8000586 <Error_Handler+0x8>

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <HAL_MspInit+0x5c>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <HAL_MspInit+0x5c>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <HAL_MspInit+0x5c>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <HAL_MspInit+0x5c>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <HAL_MspInit+0x5c>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <HAL_MspInit+0x5c>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <HAL_MspInit+0x60>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <HAL_MspInit+0x60>)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005da:	bf00      	nop
 80005dc:	3714      	adds	r7, #20
 80005de:	46bd      	mov	sp, r7
 80005e0:	bc80      	pop	{r7}
 80005e2:	4770      	bx	lr
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010000 	.word	0x40010000

080005ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <NMI_Handler+0x4>

080005f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <HardFault_Handler+0x4>

080005f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <MemManage_Handler+0x4>

080005fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <BusFault_Handler+0x4>

08000604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <UsageFault_Handler+0x4>

0800060a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr

08000616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000632:	f000 f9af 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <TIM2_IRQHandler+0x10>)
 8000642:	f001 fa8d 	bl	8001b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000140 	.word	0x20000140

08000650 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <USART1_IRQHandler+0x10>)
 8000656:	f001 ff35 	bl	80024c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000188 	.word	0x20000188

08000664 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800066c:	4a14      	ldr	r2, [pc, #80]	; (80006c0 <_sbrk+0x5c>)
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <_sbrk+0x60>)
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <_sbrk+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d102      	bne.n	8000686 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <_sbrk+0x64>)
 8000682:	4a12      	ldr	r2, [pc, #72]	; (80006cc <_sbrk+0x68>)
 8000684:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000686:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <_sbrk+0x64>)
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	429a      	cmp	r2, r3
 8000692:	d207      	bcs.n	80006a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000694:	f002 fa18 	bl	8002ac8 <__errno>
 8000698:	4603      	mov	r3, r0
 800069a:	220c      	movs	r2, #12
 800069c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800069e:	f04f 33ff 	mov.w	r3, #4294967295
 80006a2:	e009      	b.n	80006b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <_sbrk+0x64>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <_sbrk+0x64>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <_sbrk+0x64>)
 80006b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006b6:	68fb      	ldr	r3, [r7, #12]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3718      	adds	r7, #24
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20010000 	.word	0x20010000
 80006c4:	00000400 	.word	0x00000400
 80006c8:	200000a8 	.word	0x200000a8
 80006cc:	200001e0 	.word	0x200001e0

080006d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr

080006dc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e2:	f107 0308 	add.w	r3, r7, #8
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f0:	463b      	mov	r3, r7
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006f8:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_TIM2_Init+0x98>)
 80006fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_TIM2_Init+0x98>)
 8000702:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000706:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000708:	4b1a      	ldr	r3, [pc, #104]	; (8000774 <MX_TIM2_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_TIM2_Init+0x98>)
 8000710:	f241 3287 	movw	r2, #4999	; 0x1387
 8000714:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_TIM2_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071c:	4b15      	ldr	r3, [pc, #84]	; (8000774 <MX_TIM2_Init+0x98>)
 800071e:	2200      	movs	r2, #0
 8000720:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000722:	4814      	ldr	r0, [pc, #80]	; (8000774 <MX_TIM2_Init+0x98>)
 8000724:	f001 f96c 	bl	8001a00 <HAL_TIM_Base_Init>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800072e:	f7ff ff26 	bl	800057e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	4619      	mov	r1, r3
 800073e:	480d      	ldr	r0, [pc, #52]	; (8000774 <MX_TIM2_Init+0x98>)
 8000740:	f001 fb16 	bl	8001d70 <HAL_TIM_ConfigClockSource>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800074a:	f7ff ff18 	bl	800057e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074e:	2300      	movs	r3, #0
 8000750:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	4619      	mov	r1, r3
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <MX_TIM2_Init+0x98>)
 800075c:	f001 fd00 	bl	8002160 <HAL_TIMEx_MasterConfigSynchronization>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000766:	f7ff ff0a 	bl	800057e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	3718      	adds	r7, #24
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000140 	.word	0x20000140

08000778 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b084      	sub	sp, #16
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000788:	d113      	bne.n	80007b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_TIM_Base_MspInit+0x44>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	4a0b      	ldr	r2, [pc, #44]	; (80007bc <HAL_TIM_Base_MspInit+0x44>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	61d3      	str	r3, [r2, #28]
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_TIM_Base_MspInit+0x44>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	201c      	movs	r0, #28
 80007a8:	f000 fa0b 	bl	8000bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80007ac:	201c      	movs	r0, #28
 80007ae:	f000 fa24 	bl	8000bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000

080007c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c4:	4b11      	ldr	r3, [pc, #68]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007c6:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_USART1_UART_Init+0x50>)
 80007c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ca:	4b10      	ldr	r3, [pc, #64]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007e6:	220c      	movs	r2, #12
 80007e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_USART1_UART_Init+0x4c>)
 80007f8:	f001 fd30 	bl	800225c <HAL_UART_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000802:	f7ff febc 	bl	800057e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000188 	.word	0x20000188
 8000810:	40013800 	.word	0x40013800

08000814 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b088      	sub	sp, #32
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <HAL_UART_MspInit+0x9c>)
 8000830:	4293      	cmp	r3, r2
 8000832:	d139      	bne.n	80008a8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <HAL_UART_MspInit+0xa0>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a1e      	ldr	r2, [pc, #120]	; (80008b4 <HAL_UART_MspInit+0xa0>)
 800083a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <HAL_UART_MspInit+0xa0>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <HAL_UART_MspInit+0xa0>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <HAL_UART_MspInit+0xa0>)
 8000852:	f043 0304 	orr.w	r3, r3, #4
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <HAL_UART_MspInit+0xa0>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f003 0304 	and.w	r3, r3, #4
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000864:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000868:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086a:	2302      	movs	r3, #2
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000872:	f107 0310 	add.w	r3, r7, #16
 8000876:	4619      	mov	r1, r3
 8000878:	480f      	ldr	r0, [pc, #60]	; (80008b8 <HAL_UART_MspInit+0xa4>)
 800087a:	f000 fae1 	bl	8000e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800087e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000882:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4619      	mov	r1, r3
 8000892:	4809      	ldr	r0, [pc, #36]	; (80008b8 <HAL_UART_MspInit+0xa4>)
 8000894:	f000 fad4 	bl	8000e40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2025      	movs	r0, #37	; 0x25
 800089e:	f000 f990 	bl	8000bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008a2:	2025      	movs	r0, #37	; 0x25
 80008a4:	f000 f9a9 	bl	8000bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008a8:	bf00      	nop
 80008aa:	3720      	adds	r7, #32
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40013800 	.word	0x40013800
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010800 	.word	0x40010800

080008bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008bc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008be:	e003      	b.n	80008c8 <LoopCopyDataInit>

080008c0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008c0:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008c2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008c4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008c6:	3104      	adds	r1, #4

080008c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008c8:	480a      	ldr	r0, [pc, #40]	; (80008f4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008cc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008ce:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008d0:	d3f6      	bcc.n	80008c0 <CopyDataInit>
  ldr r2, =_sbss
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008d4:	e002      	b.n	80008dc <LoopFillZerobss>

080008d6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008d8:	f842 3b04 	str.w	r3, [r2], #4

080008dc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008de:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008e0:	d3f9      	bcc.n	80008d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008e2:	f7ff fef5 	bl	80006d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008e6:	f002 f8f5 	bl	8002ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008ea:	f7ff fddd 	bl	80004a8 <main>
  bx lr
 80008ee:	4770      	bx	lr
  ldr r3, =_sidata
 80008f0:	08003474 	.word	0x08003474
  ldr r0, =_sdata
 80008f4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008f8:	2000008c 	.word	0x2000008c
  ldr r2, =_sbss
 80008fc:	2000008c 	.word	0x2000008c
  ldr r3, = _ebss
 8000900:	200001dc 	.word	0x200001dc

08000904 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000904:	e7fe      	b.n	8000904 <ADC1_2_IRQHandler>
	...

08000908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_Init+0x28>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_Init+0x28>)
 8000912:	f043 0310 	orr.w	r3, r3, #16
 8000916:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f947 	bl	8000bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091e:	2000      	movs	r0, #0
 8000920:	f000 f808 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f7ff fe30 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40022000 	.word	0x40022000

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x54>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x58>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f95f 	bl	8000c16 <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 f927 	bl	8000bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_InitTick+0x5c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000001c 	.word	0x2000001c
 800098c:	20000024 	.word	0x20000024
 8000990:	20000020 	.word	0x20000020

08000994 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <HAL_IncTick+0x1c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <HAL_IncTick+0x20>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a03      	ldr	r2, [pc, #12]	; (80009b4 <HAL_IncTick+0x20>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bc80      	pop	{r7}
 80009ae:	4770      	bx	lr
 80009b0:	20000024 	.word	0x20000024
 80009b4:	200001c8 	.word	0x200001c8

080009b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  return uwTick;
 80009bc:	4b02      	ldr	r3, [pc, #8]	; (80009c8 <HAL_GetTick+0x10>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	200001c8 	.word	0x200001c8

080009cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d4:	f7ff fff0 	bl	80009b8 <HAL_GetTick>
 80009d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009e4:	d005      	beq.n	80009f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_Delay+0x44>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009f2:	bf00      	nop
 80009f4:	f7ff ffe0 	bl	80009b8 <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d8f7      	bhi.n	80009f4 <HAL_Delay+0x28>
  {
  }
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000024 	.word	0x20000024

08000a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f003 0307 	and.w	r3, r3, #7
 8000a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a30:	4013      	ands	r3, r2
 8000a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	; (8000a58 <__NVIC_SetPriorityGrouping+0x44>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <__NVIC_GetPriorityGrouping+0x18>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	0a1b      	lsrs	r3, r3, #8
 8000a66:	f003 0307 	and.w	r3, r3, #7
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	db0b      	blt.n	8000aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	f003 021f 	and.w	r2, r3, #31
 8000a90:	4906      	ldr	r1, [pc, #24]	; (8000aac <__NVIC_EnableIRQ+0x34>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	095b      	lsrs	r3, r3, #5
 8000a98:	2001      	movs	r0, #1
 8000a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	e000e100 	.word	0xe000e100

08000ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	6039      	str	r1, [r7, #0]
 8000aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	db0a      	blt.n	8000ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	490c      	ldr	r1, [pc, #48]	; (8000afc <__NVIC_SetPriority+0x4c>)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	0112      	lsls	r2, r2, #4
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	440b      	add	r3, r1
 8000ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad8:	e00a      	b.n	8000af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	4908      	ldr	r1, [pc, #32]	; (8000b00 <__NVIC_SetPriority+0x50>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	f003 030f 	and.w	r3, r3, #15
 8000ae6:	3b04      	subs	r3, #4
 8000ae8:	0112      	lsls	r2, r2, #4
 8000aea:	b2d2      	uxtb	r2, r2
 8000aec:	440b      	add	r3, r1
 8000aee:	761a      	strb	r2, [r3, #24]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	e000e100 	.word	0xe000e100
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	f1c3 0307 	rsb	r3, r3, #7
 8000b1e:	2b04      	cmp	r3, #4
 8000b20:	bf28      	it	cs
 8000b22:	2304      	movcs	r3, #4
 8000b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d902      	bls.n	8000b34 <NVIC_EncodePriority+0x30>
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3b03      	subs	r3, #3
 8000b32:	e000      	b.n	8000b36 <NVIC_EncodePriority+0x32>
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	f04f 32ff 	mov.w	r2, #4294967295
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43da      	mvns	r2, r3
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	401a      	ands	r2, r3
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	fa01 f303 	lsl.w	r3, r1, r3
 8000b56:	43d9      	mvns	r1, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b5c:	4313      	orrs	r3, r2
         );
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3724      	adds	r7, #36	; 0x24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b78:	d301      	bcc.n	8000b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00f      	b.n	8000b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <SysTick_Config+0x40>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b86:	210f      	movs	r1, #15
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295
 8000b8c:	f7ff ff90 	bl	8000ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <SysTick_Config+0x40>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b96:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SysTick_Config+0x40>)
 8000b98:	2207      	movs	r2, #7
 8000b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	e000e010 	.word	0xe000e010

08000bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f7ff ff2d 	bl	8000a14 <__NVIC_SetPriorityGrouping>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd4:	f7ff ff42 	bl	8000a5c <__NVIC_GetPriorityGrouping>
 8000bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	68b9      	ldr	r1, [r7, #8]
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f7ff ff90 	bl	8000b04 <NVIC_EncodePriority>
 8000be4:	4602      	mov	r2, r0
 8000be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff5f 	bl	8000ab0 <__NVIC_SetPriority>
}
 8000bf2:	bf00      	nop
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff ff35 	bl	8000a78 <__NVIC_EnableIRQ>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff ffa2 	bl	8000b68 <SysTick_Config>
 8000c24:	4603      	mov	r3, r0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d005      	beq.n	8000c52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2204      	movs	r2, #4
 8000c4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e0d6      	b.n	8000e00 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f022 020e 	bic.w	r2, r2, #14
 8000c60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f022 0201 	bic.w	r2, r2, #1
 8000c70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b64      	ldr	r3, [pc, #400]	; (8000e0c <HAL_DMA_Abort_IT+0x1dc>)
 8000c7a:	429a      	cmp	r2, r3
 8000c7c:	d958      	bls.n	8000d30 <HAL_DMA_Abort_IT+0x100>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a63      	ldr	r2, [pc, #396]	; (8000e10 <HAL_DMA_Abort_IT+0x1e0>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d04f      	beq.n	8000d28 <HAL_DMA_Abort_IT+0xf8>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a61      	ldr	r2, [pc, #388]	; (8000e14 <HAL_DMA_Abort_IT+0x1e4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d048      	beq.n	8000d24 <HAL_DMA_Abort_IT+0xf4>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a60      	ldr	r2, [pc, #384]	; (8000e18 <HAL_DMA_Abort_IT+0x1e8>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d040      	beq.n	8000d1e <HAL_DMA_Abort_IT+0xee>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a5e      	ldr	r2, [pc, #376]	; (8000e1c <HAL_DMA_Abort_IT+0x1ec>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d038      	beq.n	8000d18 <HAL_DMA_Abort_IT+0xe8>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a5d      	ldr	r2, [pc, #372]	; (8000e20 <HAL_DMA_Abort_IT+0x1f0>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d030      	beq.n	8000d12 <HAL_DMA_Abort_IT+0xe2>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a5b      	ldr	r2, [pc, #364]	; (8000e24 <HAL_DMA_Abort_IT+0x1f4>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d028      	beq.n	8000d0c <HAL_DMA_Abort_IT+0xdc>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a53      	ldr	r2, [pc, #332]	; (8000e0c <HAL_DMA_Abort_IT+0x1dc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d020      	beq.n	8000d06 <HAL_DMA_Abort_IT+0xd6>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a57      	ldr	r2, [pc, #348]	; (8000e28 <HAL_DMA_Abort_IT+0x1f8>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d019      	beq.n	8000d02 <HAL_DMA_Abort_IT+0xd2>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a56      	ldr	r2, [pc, #344]	; (8000e2c <HAL_DMA_Abort_IT+0x1fc>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d012      	beq.n	8000cfe <HAL_DMA_Abort_IT+0xce>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a54      	ldr	r2, [pc, #336]	; (8000e30 <HAL_DMA_Abort_IT+0x200>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d00a      	beq.n	8000cf8 <HAL_DMA_Abort_IT+0xc8>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a53      	ldr	r2, [pc, #332]	; (8000e34 <HAL_DMA_Abort_IT+0x204>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d102      	bne.n	8000cf2 <HAL_DMA_Abort_IT+0xc2>
 8000cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf0:	e01b      	b.n	8000d2a <HAL_DMA_Abort_IT+0xfa>
 8000cf2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf6:	e018      	b.n	8000d2a <HAL_DMA_Abort_IT+0xfa>
 8000cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfc:	e015      	b.n	8000d2a <HAL_DMA_Abort_IT+0xfa>
 8000cfe:	2310      	movs	r3, #16
 8000d00:	e013      	b.n	8000d2a <HAL_DMA_Abort_IT+0xfa>
 8000d02:	2301      	movs	r3, #1
 8000d04:	e011      	b.n	8000d2a <HAL_DMA_Abort_IT+0xfa>
 8000d06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d0a:	e00e      	b.n	8000d2a <HAL_DMA_Abort_IT+0xfa>
 8000d0c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d10:	e00b      	b.n	8000d2a <HAL_DMA_Abort_IT+0xfa>
 8000d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d16:	e008      	b.n	8000d2a <HAL_DMA_Abort_IT+0xfa>
 8000d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1c:	e005      	b.n	8000d2a <HAL_DMA_Abort_IT+0xfa>
 8000d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d22:	e002      	b.n	8000d2a <HAL_DMA_Abort_IT+0xfa>
 8000d24:	2310      	movs	r3, #16
 8000d26:	e000      	b.n	8000d2a <HAL_DMA_Abort_IT+0xfa>
 8000d28:	2301      	movs	r3, #1
 8000d2a:	4a43      	ldr	r2, [pc, #268]	; (8000e38 <HAL_DMA_Abort_IT+0x208>)
 8000d2c:	6053      	str	r3, [r2, #4]
 8000d2e:	e057      	b.n	8000de0 <HAL_DMA_Abort_IT+0x1b0>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a36      	ldr	r2, [pc, #216]	; (8000e10 <HAL_DMA_Abort_IT+0x1e0>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d04f      	beq.n	8000dda <HAL_DMA_Abort_IT+0x1aa>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a35      	ldr	r2, [pc, #212]	; (8000e14 <HAL_DMA_Abort_IT+0x1e4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d048      	beq.n	8000dd6 <HAL_DMA_Abort_IT+0x1a6>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a33      	ldr	r2, [pc, #204]	; (8000e18 <HAL_DMA_Abort_IT+0x1e8>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d040      	beq.n	8000dd0 <HAL_DMA_Abort_IT+0x1a0>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a32      	ldr	r2, [pc, #200]	; (8000e1c <HAL_DMA_Abort_IT+0x1ec>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d038      	beq.n	8000dca <HAL_DMA_Abort_IT+0x19a>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a30      	ldr	r2, [pc, #192]	; (8000e20 <HAL_DMA_Abort_IT+0x1f0>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d030      	beq.n	8000dc4 <HAL_DMA_Abort_IT+0x194>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a2f      	ldr	r2, [pc, #188]	; (8000e24 <HAL_DMA_Abort_IT+0x1f4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d028      	beq.n	8000dbe <HAL_DMA_Abort_IT+0x18e>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a26      	ldr	r2, [pc, #152]	; (8000e0c <HAL_DMA_Abort_IT+0x1dc>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d020      	beq.n	8000db8 <HAL_DMA_Abort_IT+0x188>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a2b      	ldr	r2, [pc, #172]	; (8000e28 <HAL_DMA_Abort_IT+0x1f8>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d019      	beq.n	8000db4 <HAL_DMA_Abort_IT+0x184>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a29      	ldr	r2, [pc, #164]	; (8000e2c <HAL_DMA_Abort_IT+0x1fc>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d012      	beq.n	8000db0 <HAL_DMA_Abort_IT+0x180>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a28      	ldr	r2, [pc, #160]	; (8000e30 <HAL_DMA_Abort_IT+0x200>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d00a      	beq.n	8000daa <HAL_DMA_Abort_IT+0x17a>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a26      	ldr	r2, [pc, #152]	; (8000e34 <HAL_DMA_Abort_IT+0x204>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d102      	bne.n	8000da4 <HAL_DMA_Abort_IT+0x174>
 8000d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da2:	e01b      	b.n	8000ddc <HAL_DMA_Abort_IT+0x1ac>
 8000da4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da8:	e018      	b.n	8000ddc <HAL_DMA_Abort_IT+0x1ac>
 8000daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dae:	e015      	b.n	8000ddc <HAL_DMA_Abort_IT+0x1ac>
 8000db0:	2310      	movs	r3, #16
 8000db2:	e013      	b.n	8000ddc <HAL_DMA_Abort_IT+0x1ac>
 8000db4:	2301      	movs	r3, #1
 8000db6:	e011      	b.n	8000ddc <HAL_DMA_Abort_IT+0x1ac>
 8000db8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dbc:	e00e      	b.n	8000ddc <HAL_DMA_Abort_IT+0x1ac>
 8000dbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000dc2:	e00b      	b.n	8000ddc <HAL_DMA_Abort_IT+0x1ac>
 8000dc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc8:	e008      	b.n	8000ddc <HAL_DMA_Abort_IT+0x1ac>
 8000dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dce:	e005      	b.n	8000ddc <HAL_DMA_Abort_IT+0x1ac>
 8000dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dd4:	e002      	b.n	8000ddc <HAL_DMA_Abort_IT+0x1ac>
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	e000      	b.n	8000ddc <HAL_DMA_Abort_IT+0x1ac>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <HAL_DMA_Abort_IT+0x20c>)
 8000dde:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	4798      	blx	r3
    } 
  }
  return status;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40020080 	.word	0x40020080
 8000e10:	40020008 	.word	0x40020008
 8000e14:	4002001c 	.word	0x4002001c
 8000e18:	40020030 	.word	0x40020030
 8000e1c:	40020044 	.word	0x40020044
 8000e20:	40020058 	.word	0x40020058
 8000e24:	4002006c 	.word	0x4002006c
 8000e28:	40020408 	.word	0x40020408
 8000e2c:	4002041c 	.word	0x4002041c
 8000e30:	40020430 	.word	0x40020430
 8000e34:	40020444 	.word	0x40020444
 8000e38:	40020400 	.word	0x40020400
 8000e3c:	40020000 	.word	0x40020000

08000e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b08b      	sub	sp, #44	; 0x2c
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e52:	e179      	b.n	8001148 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e54:	2201      	movs	r2, #1
 8000e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	69fa      	ldr	r2, [r7, #28]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f040 8168 	bne.w	8001142 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	4aa0      	ldr	r2, [pc, #640]	; (80010f8 <HAL_GPIO_Init+0x2b8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d05e      	beq.n	8000f3a <HAL_GPIO_Init+0xfa>
 8000e7c:	4a9e      	ldr	r2, [pc, #632]	; (80010f8 <HAL_GPIO_Init+0x2b8>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d875      	bhi.n	8000f6e <HAL_GPIO_Init+0x12e>
 8000e82:	4a9e      	ldr	r2, [pc, #632]	; (80010fc <HAL_GPIO_Init+0x2bc>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d058      	beq.n	8000f3a <HAL_GPIO_Init+0xfa>
 8000e88:	4a9c      	ldr	r2, [pc, #624]	; (80010fc <HAL_GPIO_Init+0x2bc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d86f      	bhi.n	8000f6e <HAL_GPIO_Init+0x12e>
 8000e8e:	4a9c      	ldr	r2, [pc, #624]	; (8001100 <HAL_GPIO_Init+0x2c0>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d052      	beq.n	8000f3a <HAL_GPIO_Init+0xfa>
 8000e94:	4a9a      	ldr	r2, [pc, #616]	; (8001100 <HAL_GPIO_Init+0x2c0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d869      	bhi.n	8000f6e <HAL_GPIO_Init+0x12e>
 8000e9a:	4a9a      	ldr	r2, [pc, #616]	; (8001104 <HAL_GPIO_Init+0x2c4>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d04c      	beq.n	8000f3a <HAL_GPIO_Init+0xfa>
 8000ea0:	4a98      	ldr	r2, [pc, #608]	; (8001104 <HAL_GPIO_Init+0x2c4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d863      	bhi.n	8000f6e <HAL_GPIO_Init+0x12e>
 8000ea6:	4a98      	ldr	r2, [pc, #608]	; (8001108 <HAL_GPIO_Init+0x2c8>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d046      	beq.n	8000f3a <HAL_GPIO_Init+0xfa>
 8000eac:	4a96      	ldr	r2, [pc, #600]	; (8001108 <HAL_GPIO_Init+0x2c8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d85d      	bhi.n	8000f6e <HAL_GPIO_Init+0x12e>
 8000eb2:	2b12      	cmp	r3, #18
 8000eb4:	d82a      	bhi.n	8000f0c <HAL_GPIO_Init+0xcc>
 8000eb6:	2b12      	cmp	r3, #18
 8000eb8:	d859      	bhi.n	8000f6e <HAL_GPIO_Init+0x12e>
 8000eba:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <HAL_GPIO_Init+0x80>)
 8000ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ec0:	08000f3b 	.word	0x08000f3b
 8000ec4:	08000f15 	.word	0x08000f15
 8000ec8:	08000f27 	.word	0x08000f27
 8000ecc:	08000f69 	.word	0x08000f69
 8000ed0:	08000f6f 	.word	0x08000f6f
 8000ed4:	08000f6f 	.word	0x08000f6f
 8000ed8:	08000f6f 	.word	0x08000f6f
 8000edc:	08000f6f 	.word	0x08000f6f
 8000ee0:	08000f6f 	.word	0x08000f6f
 8000ee4:	08000f6f 	.word	0x08000f6f
 8000ee8:	08000f6f 	.word	0x08000f6f
 8000eec:	08000f6f 	.word	0x08000f6f
 8000ef0:	08000f6f 	.word	0x08000f6f
 8000ef4:	08000f6f 	.word	0x08000f6f
 8000ef8:	08000f6f 	.word	0x08000f6f
 8000efc:	08000f6f 	.word	0x08000f6f
 8000f00:	08000f6f 	.word	0x08000f6f
 8000f04:	08000f1d 	.word	0x08000f1d
 8000f08:	08000f31 	.word	0x08000f31
 8000f0c:	4a7f      	ldr	r2, [pc, #508]	; (800110c <HAL_GPIO_Init+0x2cc>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f12:	e02c      	b.n	8000f6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	623b      	str	r3, [r7, #32]
          break;
 8000f1a:	e029      	b.n	8000f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	3304      	adds	r3, #4
 8000f22:	623b      	str	r3, [r7, #32]
          break;
 8000f24:	e024      	b.n	8000f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	3308      	adds	r3, #8
 8000f2c:	623b      	str	r3, [r7, #32]
          break;
 8000f2e:	e01f      	b.n	8000f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	330c      	adds	r3, #12
 8000f36:	623b      	str	r3, [r7, #32]
          break;
 8000f38:	e01a      	b.n	8000f70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d102      	bne.n	8000f48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f42:	2304      	movs	r3, #4
 8000f44:	623b      	str	r3, [r7, #32]
          break;
 8000f46:	e013      	b.n	8000f70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d105      	bne.n	8000f5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f50:	2308      	movs	r3, #8
 8000f52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	611a      	str	r2, [r3, #16]
          break;
 8000f5a:	e009      	b.n	8000f70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	615a      	str	r2, [r3, #20]
          break;
 8000f66:	e003      	b.n	8000f70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
          break;
 8000f6c:	e000      	b.n	8000f70 <HAL_GPIO_Init+0x130>
          break;
 8000f6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	2bff      	cmp	r3, #255	; 0xff
 8000f74:	d801      	bhi.n	8000f7a <HAL_GPIO_Init+0x13a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	e001      	b.n	8000f7e <HAL_GPIO_Init+0x13e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	2bff      	cmp	r3, #255	; 0xff
 8000f84:	d802      	bhi.n	8000f8c <HAL_GPIO_Init+0x14c>
 8000f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	e002      	b.n	8000f92 <HAL_GPIO_Init+0x152>
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	3b08      	subs	r3, #8
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	210f      	movs	r1, #15
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	6a39      	ldr	r1, [r7, #32]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fac:	431a      	orrs	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 80c1 	beq.w	8001142 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc0:	4b53      	ldr	r3, [pc, #332]	; (8001110 <HAL_GPIO_Init+0x2d0>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a52      	ldr	r2, [pc, #328]	; (8001110 <HAL_GPIO_Init+0x2d0>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b50      	ldr	r3, [pc, #320]	; (8001110 <HAL_GPIO_Init+0x2d0>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fd8:	4a4e      	ldr	r2, [pc, #312]	; (8001114 <HAL_GPIO_Init+0x2d4>)
 8000fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a46      	ldr	r2, [pc, #280]	; (8001118 <HAL_GPIO_Init+0x2d8>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d01f      	beq.n	8001044 <HAL_GPIO_Init+0x204>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a45      	ldr	r2, [pc, #276]	; (800111c <HAL_GPIO_Init+0x2dc>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d019      	beq.n	8001040 <HAL_GPIO_Init+0x200>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a44      	ldr	r2, [pc, #272]	; (8001120 <HAL_GPIO_Init+0x2e0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d013      	beq.n	800103c <HAL_GPIO_Init+0x1fc>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a43      	ldr	r2, [pc, #268]	; (8001124 <HAL_GPIO_Init+0x2e4>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d00d      	beq.n	8001038 <HAL_GPIO_Init+0x1f8>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a42      	ldr	r2, [pc, #264]	; (8001128 <HAL_GPIO_Init+0x2e8>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d007      	beq.n	8001034 <HAL_GPIO_Init+0x1f4>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a41      	ldr	r2, [pc, #260]	; (800112c <HAL_GPIO_Init+0x2ec>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d101      	bne.n	8001030 <HAL_GPIO_Init+0x1f0>
 800102c:	2305      	movs	r3, #5
 800102e:	e00a      	b.n	8001046 <HAL_GPIO_Init+0x206>
 8001030:	2306      	movs	r3, #6
 8001032:	e008      	b.n	8001046 <HAL_GPIO_Init+0x206>
 8001034:	2304      	movs	r3, #4
 8001036:	e006      	b.n	8001046 <HAL_GPIO_Init+0x206>
 8001038:	2303      	movs	r3, #3
 800103a:	e004      	b.n	8001046 <HAL_GPIO_Init+0x206>
 800103c:	2302      	movs	r3, #2
 800103e:	e002      	b.n	8001046 <HAL_GPIO_Init+0x206>
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <HAL_GPIO_Init+0x206>
 8001044:	2300      	movs	r3, #0
 8001046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001048:	f002 0203 	and.w	r2, r2, #3
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	4093      	lsls	r3, r2
 8001050:	68fa      	ldr	r2, [r7, #12]
 8001052:	4313      	orrs	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001056:	492f      	ldr	r1, [pc, #188]	; (8001114 <HAL_GPIO_Init+0x2d4>)
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	3302      	adds	r3, #2
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001070:	4b2f      	ldr	r3, [pc, #188]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	492e      	ldr	r1, [pc, #184]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	600b      	str	r3, [r1, #0]
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800107e:	4b2c      	ldr	r3, [pc, #176]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	43db      	mvns	r3, r3
 8001086:	492a      	ldr	r1, [pc, #168]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 8001088:	4013      	ands	r3, r2
 800108a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001098:	4b25      	ldr	r3, [pc, #148]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 800109a:	685a      	ldr	r2, [r3, #4]
 800109c:	4924      	ldr	r1, [pc, #144]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	4920      	ldr	r1, [pc, #128]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d006      	beq.n	80010ce <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	491a      	ldr	r1, [pc, #104]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	608b      	str	r3, [r1, #8]
 80010cc:	e006      	b.n	80010dc <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	69bb      	ldr	r3, [r7, #24]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	4916      	ldr	r1, [pc, #88]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 80010d8:	4013      	ands	r3, r2
 80010da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d025      	beq.n	8001134 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	4910      	ldr	r1, [pc, #64]	; (8001130 <HAL_GPIO_Init+0x2f0>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	60cb      	str	r3, [r1, #12]
 80010f4:	e025      	b.n	8001142 <HAL_GPIO_Init+0x302>
 80010f6:	bf00      	nop
 80010f8:	10320000 	.word	0x10320000
 80010fc:	10310000 	.word	0x10310000
 8001100:	10220000 	.word	0x10220000
 8001104:	10210000 	.word	0x10210000
 8001108:	10120000 	.word	0x10120000
 800110c:	10110000 	.word	0x10110000
 8001110:	40021000 	.word	0x40021000
 8001114:	40010000 	.word	0x40010000
 8001118:	40010800 	.word	0x40010800
 800111c:	40010c00 	.word	0x40010c00
 8001120:	40011000 	.word	0x40011000
 8001124:	40011400 	.word	0x40011400
 8001128:	40011800 	.word	0x40011800
 800112c:	40011c00 	.word	0x40011c00
 8001130:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_GPIO_Init+0x324>)
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	43db      	mvns	r3, r3
 800113c:	4909      	ldr	r1, [pc, #36]	; (8001164 <HAL_GPIO_Init+0x324>)
 800113e:	4013      	ands	r3, r2
 8001140:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	3301      	adds	r3, #1
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
 8001152:	2b00      	cmp	r3, #0
 8001154:	f47f ae7e 	bne.w	8000e54 <HAL_GPIO_Init+0x14>
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	372c      	adds	r7, #44	; 0x2c
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	40010400 	.word	0x40010400

08001168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
 8001174:	4613      	mov	r3, r2
 8001176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001178:	787b      	ldrb	r3, [r7, #1]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800117e:	887a      	ldrh	r2, [r7, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001184:	e003      	b.n	800118e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	611a      	str	r2, [r3, #16]
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4013      	ands	r3, r2
 80011b0:	041a      	lsls	r2, r3, #16
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	43d9      	mvns	r1, r3
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	400b      	ands	r3, r1
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	611a      	str	r2, [r3, #16]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
	...

080011cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e26c      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	f000 8087 	beq.w	80012fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011ec:	4b92      	ldr	r3, [pc, #584]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 030c 	and.w	r3, r3, #12
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d00c      	beq.n	8001212 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011f8:	4b8f      	ldr	r3, [pc, #572]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 030c 	and.w	r3, r3, #12
 8001200:	2b08      	cmp	r3, #8
 8001202:	d112      	bne.n	800122a <HAL_RCC_OscConfig+0x5e>
 8001204:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001210:	d10b      	bne.n	800122a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001212:	4b89      	ldr	r3, [pc, #548]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d06c      	beq.n	80012f8 <HAL_RCC_OscConfig+0x12c>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d168      	bne.n	80012f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e246      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x76>
 8001234:	4b80      	ldr	r3, [pc, #512]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a7f      	ldr	r2, [pc, #508]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800123a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e02e      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10c      	bne.n	8001264 <HAL_RCC_OscConfig+0x98>
 800124a:	4b7b      	ldr	r3, [pc, #492]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a7a      	ldr	r2, [pc, #488]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001254:	6013      	str	r3, [r2, #0]
 8001256:	4b78      	ldr	r3, [pc, #480]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a77      	ldr	r2, [pc, #476]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800125c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001260:	6013      	str	r3, [r2, #0]
 8001262:	e01d      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0xbc>
 800126e:	4b72      	ldr	r3, [pc, #456]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a71      	ldr	r2, [pc, #452]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001278:	6013      	str	r3, [r2, #0]
 800127a:	4b6f      	ldr	r3, [pc, #444]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a6e      	ldr	r2, [pc, #440]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0xd4>
 8001288:	4b6b      	ldr	r3, [pc, #428]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a6a      	ldr	r2, [pc, #424]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800128e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b68      	ldr	r3, [pc, #416]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a67      	ldr	r2, [pc, #412]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800129a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d013      	beq.n	80012d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fb86 	bl	80009b8 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fb82 	bl	80009b8 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e1fa      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	4b5d      	ldr	r3, [pc, #372]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0xe4>
 80012ce:	e014      	b.n	80012fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fb72 	bl	80009b8 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d8:	f7ff fb6e 	bl	80009b8 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e1e6      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	4b53      	ldr	r3, [pc, #332]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1f0      	bne.n	80012d8 <HAL_RCC_OscConfig+0x10c>
 80012f6:	e000      	b.n	80012fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d063      	beq.n	80013ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001306:	4b4c      	ldr	r3, [pc, #304]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00b      	beq.n	800132a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001312:	4b49      	ldr	r3, [pc, #292]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	2b08      	cmp	r3, #8
 800131c:	d11c      	bne.n	8001358 <HAL_RCC_OscConfig+0x18c>
 800131e:	4b46      	ldr	r3, [pc, #280]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d116      	bne.n	8001358 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132a:	4b43      	ldr	r3, [pc, #268]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d005      	beq.n	8001342 <HAL_RCC_OscConfig+0x176>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d001      	beq.n	8001342 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e1ba      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4939      	ldr	r1, [pc, #228]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	e03a      	b.n	80013ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d020      	beq.n	80013a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001360:	4b36      	ldr	r3, [pc, #216]	; (800143c <HAL_RCC_OscConfig+0x270>)
 8001362:	2201      	movs	r2, #1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fb27 	bl	80009b8 <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fb23 	bl	80009b8 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e19b      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0302 	and.w	r3, r3, #2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4b2a      	ldr	r3, [pc, #168]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4927      	ldr	r1, [pc, #156]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 800139c:	4313      	orrs	r3, r2
 800139e:	600b      	str	r3, [r1, #0]
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <HAL_RCC_OscConfig+0x270>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fb06 	bl	80009b8 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b0:	f7ff fb02 	bl	80009b8 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e17a      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f0      	bne.n	80013b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0308 	and.w	r3, r3, #8
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d03a      	beq.n	8001450 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d019      	beq.n	8001416 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <HAL_RCC_OscConfig+0x274>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e8:	f7ff fae6 	bl	80009b8 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f0:	f7ff fae2 	bl	80009b8 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e15a      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <HAL_RCC_OscConfig+0x26c>)
 8001404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800140e:	2001      	movs	r0, #1
 8001410:	f000 fad8 	bl	80019c4 <RCC_Delay>
 8001414:	e01c      	b.n	8001450 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_RCC_OscConfig+0x274>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141c:	f7ff facc 	bl	80009b8 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001422:	e00f      	b.n	8001444 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001424:	f7ff fac8 	bl	80009b8 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d908      	bls.n	8001444 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e140      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	42420000 	.word	0x42420000
 8001440:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001444:	4b9e      	ldr	r3, [pc, #632]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1e9      	bne.n	8001424 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 80a6 	beq.w	80015aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001462:	4b97      	ldr	r3, [pc, #604]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10d      	bne.n	800148a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	4b94      	ldr	r3, [pc, #592]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a93      	ldr	r2, [pc, #588]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	61d3      	str	r3, [r2, #28]
 800147a:	4b91      	ldr	r3, [pc, #580]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001486:	2301      	movs	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	4b8e      	ldr	r3, [pc, #568]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d118      	bne.n	80014c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001496:	4b8b      	ldr	r3, [pc, #556]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a8a      	ldr	r2, [pc, #552]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fa89 	bl	80009b8 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014aa:	f7ff fa85 	bl	80009b8 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b64      	cmp	r3, #100	; 0x64
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e0fd      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	4b81      	ldr	r3, [pc, #516]	; (80016c4 <HAL_RCC_OscConfig+0x4f8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <HAL_RCC_OscConfig+0x312>
 80014d0:	4b7b      	ldr	r3, [pc, #492]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	4a7a      	ldr	r2, [pc, #488]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6213      	str	r3, [r2, #32]
 80014dc:	e02d      	b.n	800153a <HAL_RCC_OscConfig+0x36e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0x334>
 80014e6:	4b76      	ldr	r3, [pc, #472]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	4a75      	ldr	r2, [pc, #468]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 80014ec:	f023 0301 	bic.w	r3, r3, #1
 80014f0:	6213      	str	r3, [r2, #32]
 80014f2:	4b73      	ldr	r3, [pc, #460]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4a72      	ldr	r2, [pc, #456]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 80014f8:	f023 0304 	bic.w	r3, r3, #4
 80014fc:	6213      	str	r3, [r2, #32]
 80014fe:	e01c      	b.n	800153a <HAL_RCC_OscConfig+0x36e>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d10c      	bne.n	8001522 <HAL_RCC_OscConfig+0x356>
 8001508:	4b6d      	ldr	r3, [pc, #436]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	4a6c      	ldr	r2, [pc, #432]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 800150e:	f043 0304 	orr.w	r3, r3, #4
 8001512:	6213      	str	r3, [r2, #32]
 8001514:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	4a69      	ldr	r2, [pc, #420]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6213      	str	r3, [r2, #32]
 8001520:	e00b      	b.n	800153a <HAL_RCC_OscConfig+0x36e>
 8001522:	4b67      	ldr	r3, [pc, #412]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4a66      	ldr	r2, [pc, #408]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6213      	str	r3, [r2, #32]
 800152e:	4b64      	ldr	r3, [pc, #400]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4a63      	ldr	r2, [pc, #396]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d015      	beq.n	800156e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001542:	f7ff fa39 	bl	80009b8 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	e00a      	b.n	8001560 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154a:	f7ff fa35 	bl	80009b8 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f241 3288 	movw	r2, #5000	; 0x1388
 8001558:	4293      	cmp	r3, r2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0ab      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001560:	4b57      	ldr	r3, [pc, #348]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0ee      	beq.n	800154a <HAL_RCC_OscConfig+0x37e>
 800156c:	e014      	b.n	8001598 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fa23 	bl	80009b8 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff fa1f 	bl	80009b8 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e095      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800158c:	4b4c      	ldr	r3, [pc, #304]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1ee      	bne.n	8001576 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d105      	bne.n	80015aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159e:	4b48      	ldr	r3, [pc, #288]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a47      	ldr	r2, [pc, #284]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 80015a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 8081 	beq.w	80016b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b4:	4b42      	ldr	r3, [pc, #264]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d061      	beq.n	8001684 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d146      	bne.n	8001656 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b3f      	ldr	r3, [pc, #252]	; (80016c8 <HAL_RCC_OscConfig+0x4fc>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ce:	f7ff f9f3 	bl	80009b8 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff f9ef 	bl	80009b8 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e067      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e8:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fc:	d108      	bne.n	8001610 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015fe:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	492d      	ldr	r1, [pc, #180]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	4313      	orrs	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a19      	ldr	r1, [r3, #32]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	430b      	orrs	r3, r1
 8001622:	4927      	ldr	r1, [pc, #156]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001628:	4b27      	ldr	r3, [pc, #156]	; (80016c8 <HAL_RCC_OscConfig+0x4fc>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162e:	f7ff f9c3 	bl	80009b8 <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001636:	f7ff f9bf 	bl	80009b8 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e037      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0f0      	beq.n	8001636 <HAL_RCC_OscConfig+0x46a>
 8001654:	e02f      	b.n	80016b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001656:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <HAL_RCC_OscConfig+0x4fc>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165c:	f7ff f9ac 	bl	80009b8 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001664:	f7ff f9a8 	bl	80009b8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e020      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x498>
 8001682:	e018      	b.n	80016b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e013      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_RCC_OscConfig+0x4f4>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d106      	bne.n	80016b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40007000 	.word	0x40007000
 80016c8:	42420060 	.word	0x42420060

080016cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0d0      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016e0:	4b6a      	ldr	r3, [pc, #424]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d910      	bls.n	8001710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b67      	ldr	r3, [pc, #412]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 0207 	bic.w	r2, r3, #7
 80016f6:	4965      	ldr	r1, [pc, #404]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b63      	ldr	r3, [pc, #396]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0b8      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001728:	4b59      	ldr	r3, [pc, #356]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a58      	ldr	r2, [pc, #352]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001732:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001740:	4b53      	ldr	r3, [pc, #332]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4a52      	ldr	r2, [pc, #328]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800174a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800174c:	4b50      	ldr	r3, [pc, #320]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	494d      	ldr	r1, [pc, #308]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d040      	beq.n	80017ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d107      	bne.n	8001782 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	4b47      	ldr	r3, [pc, #284]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d115      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e07f      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178a:	4b41      	ldr	r3, [pc, #260]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e073      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	4b3d      	ldr	r3, [pc, #244]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e06b      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017aa:	4b39      	ldr	r3, [pc, #228]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f023 0203 	bic.w	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4936      	ldr	r1, [pc, #216]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017bc:	f7ff f8fc 	bl	80009b8 <HAL_GetTick>
 80017c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	e00a      	b.n	80017da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c4:	f7ff f8f8 	bl	80009b8 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e053      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	4b2d      	ldr	r3, [pc, #180]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 020c 	and.w	r2, r3, #12
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d1eb      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017ec:	4b27      	ldr	r3, [pc, #156]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d210      	bcs.n	800181c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 0207 	bic.w	r2, r3, #7
 8001802:	4922      	ldr	r1, [pc, #136]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e032      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001828:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4916      	ldr	r1, [pc, #88]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	4313      	orrs	r3, r2
 8001838:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d009      	beq.n	800185a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	490e      	ldr	r1, [pc, #56]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800185a:	f000 f821 	bl	80018a0 <HAL_RCC_GetSysClockFreq>
 800185e:	4602      	mov	r2, r0
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	490a      	ldr	r1, [pc, #40]	; (8001894 <HAL_RCC_ClockConfig+0x1c8>)
 800186c:	5ccb      	ldrb	r3, [r1, r3]
 800186e:	fa22 f303 	lsr.w	r3, r2, r3
 8001872:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HAL_RCC_ClockConfig+0x1cc>)
 8001874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_RCC_ClockConfig+0x1d0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f85a 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40022000 	.word	0x40022000
 8001890:	40021000 	.word	0x40021000
 8001894:	08003420 	.word	0x08003420
 8001898:	2000001c 	.word	0x2000001c
 800189c:	20000020 	.word	0x20000020

080018a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a0:	b490      	push	{r4, r7}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018a6:	4b2a      	ldr	r3, [pc, #168]	; (8001950 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018a8:	1d3c      	adds	r4, r7, #4
 80018aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018b0:	f240 2301 	movw	r3, #513	; 0x201
 80018b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61fb      	str	r3, [r7, #28]
 80018ba:	2300      	movs	r3, #0
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ca:	4b22      	ldr	r3, [pc, #136]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d002      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x40>
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_GetSysClockFreq+0x46>
 80018de:	e02d      	b.n	800193c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018e0:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018e2:	623b      	str	r3, [r7, #32]
      break;
 80018e4:	e02d      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	0c9b      	lsrs	r3, r3, #18
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018f2:	4413      	add	r3, r2
 80018f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001904:	4b13      	ldr	r3, [pc, #76]	; (8001954 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	0c5b      	lsrs	r3, r3, #17
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001912:	4413      	add	r3, r2
 8001914:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001918:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_RCC_GetSysClockFreq+0xb8>)
 800191e:	fb02 f203 	mul.w	r2, r2, r3
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	fbb2 f3f3 	udiv	r3, r2, r3
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
 800192a:	e004      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	623b      	str	r3, [r7, #32]
      break;
 800193a:	e002      	b.n	8001942 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_RCC_GetSysClockFreq+0xb8>)
 800193e:	623b      	str	r3, [r7, #32]
      break;
 8001940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001942:	6a3b      	ldr	r3, [r7, #32]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bc90      	pop	{r4, r7}
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	08003410 	.word	0x08003410
 8001954:	40021000 	.word	0x40021000
 8001958:	007a1200 	.word	0x007a1200
 800195c:	003d0900 	.word	0x003d0900

08001960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <HAL_RCC_GetHCLKFreq+0x10>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	2000001c 	.word	0x2000001c

08001974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001978:	f7ff fff2 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	08003430 	.word	0x08003430

0800199c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019a0:	f7ff ffde 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 80019a4:	4602      	mov	r2, r0
 80019a6:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	0adb      	lsrs	r3, r3, #11
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	4903      	ldr	r1, [pc, #12]	; (80019c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019b2:	5ccb      	ldrb	r3, [r1, r3]
 80019b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000
 80019c0:	08003430 	.word	0x08003430

080019c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <RCC_Delay+0x34>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <RCC_Delay+0x38>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0a5b      	lsrs	r3, r3, #9
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	fb02 f303 	mul.w	r3, r2, r3
 80019de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019e0:	bf00      	nop
  }
  while (Delay --);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1e5a      	subs	r2, r3, #1
 80019e6:	60fa      	str	r2, [r7, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f9      	bne.n	80019e0 <RCC_Delay+0x1c>
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	2000001c 	.word	0x2000001c
 80019fc:	10624dd3 	.word	0x10624dd3

08001a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e041      	b.n	8001a96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe fea6 	bl	8000778 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	f000 fa7e 	bl	8001f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d001      	beq.n	8001ab8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e044      	b.n	8001b42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2202      	movs	r2, #2
 8001abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_TIM_Base_Start_IT+0xac>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d018      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x6c>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <HAL_TIM_Base_Start_IT+0xb0>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d013      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x6c>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aec:	d00e      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x6c>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a18      	ldr	r2, [pc, #96]	; (8001b54 <HAL_TIM_Base_Start_IT+0xb4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d009      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x6c>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <HAL_TIM_Base_Start_IT+0xb8>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d004      	beq.n	8001b0c <HAL_TIM_Base_Start_IT+0x6c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a15      	ldr	r2, [pc, #84]	; (8001b5c <HAL_TIM_Base_Start_IT+0xbc>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d111      	bne.n	8001b30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d010      	beq.n	8001b40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0201 	orr.w	r2, r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b2e:	e007      	b.n	8001b40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0201 	orr.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr
 8001b4c:	40012c00 	.word	0x40012c00
 8001b50:	40013400 	.word	0x40013400
 8001b54:	40000400 	.word	0x40000400
 8001b58:	40000800 	.word	0x40000800
 8001b5c:	40000c00 	.word	0x40000c00

08001b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d122      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d11b      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0202 	mvn.w	r2, #2
 8001b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f9b1 	bl	8001f0a <HAL_TIM_IC_CaptureCallback>
 8001ba8:	e005      	b.n	8001bb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f9a4 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f9b3 	bl	8001f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d122      	bne.n	8001c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d11b      	bne.n	8001c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0204 	mvn.w	r2, #4
 8001be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2202      	movs	r2, #2
 8001be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f987 	bl	8001f0a <HAL_TIM_IC_CaptureCallback>
 8001bfc:	e005      	b.n	8001c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f97a 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f989 	bl	8001f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d122      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d11b      	bne.n	8001c64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f06f 0208 	mvn.w	r2, #8
 8001c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f95d 	bl	8001f0a <HAL_TIM_IC_CaptureCallback>
 8001c50:	e005      	b.n	8001c5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f950 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f95f 	bl	8001f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b10      	cmp	r3, #16
 8001c70:	d122      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b10      	cmp	r3, #16
 8001c7e:	d11b      	bne.n	8001cb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0210 	mvn.w	r2, #16
 8001c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f933 	bl	8001f0a <HAL_TIM_IC_CaptureCallback>
 8001ca4:	e005      	b.n	8001cb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f926 	bl	8001ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f935 	bl	8001f1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d107      	bne.n	8001ce4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f06f 0201 	mvn.w	r2, #1
 8001cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7fe fb2a 	bl	8000338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cee:	2b80      	cmp	r3, #128	; 0x80
 8001cf0:	d10e      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfc:	2b80      	cmp	r3, #128	; 0x80
 8001cfe:	d107      	bne.n	8001d10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 fa9d 	bl	800224a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1a:	2b40      	cmp	r3, #64	; 0x40
 8001d1c:	d10e      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d28:	2b40      	cmp	r3, #64	; 0x40
 8001d2a:	d107      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8f9 	bl	8001f2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d10e      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	2b20      	cmp	r3, #32
 8001d56:	d107      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0220 	mvn.w	r2, #32
 8001d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fa68 	bl	8002238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <HAL_TIM_ConfigClockSource+0x18>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e0b3      	b.n	8001ef0 <HAL_TIM_ConfigClockSource+0x180>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001da6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dc0:	d03e      	beq.n	8001e40 <HAL_TIM_ConfigClockSource+0xd0>
 8001dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dc6:	f200 8087 	bhi.w	8001ed8 <HAL_TIM_ConfigClockSource+0x168>
 8001dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dce:	f000 8085 	beq.w	8001edc <HAL_TIM_ConfigClockSource+0x16c>
 8001dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd6:	d87f      	bhi.n	8001ed8 <HAL_TIM_ConfigClockSource+0x168>
 8001dd8:	2b70      	cmp	r3, #112	; 0x70
 8001dda:	d01a      	beq.n	8001e12 <HAL_TIM_ConfigClockSource+0xa2>
 8001ddc:	2b70      	cmp	r3, #112	; 0x70
 8001dde:	d87b      	bhi.n	8001ed8 <HAL_TIM_ConfigClockSource+0x168>
 8001de0:	2b60      	cmp	r3, #96	; 0x60
 8001de2:	d050      	beq.n	8001e86 <HAL_TIM_ConfigClockSource+0x116>
 8001de4:	2b60      	cmp	r3, #96	; 0x60
 8001de6:	d877      	bhi.n	8001ed8 <HAL_TIM_ConfigClockSource+0x168>
 8001de8:	2b50      	cmp	r3, #80	; 0x50
 8001dea:	d03c      	beq.n	8001e66 <HAL_TIM_ConfigClockSource+0xf6>
 8001dec:	2b50      	cmp	r3, #80	; 0x50
 8001dee:	d873      	bhi.n	8001ed8 <HAL_TIM_ConfigClockSource+0x168>
 8001df0:	2b40      	cmp	r3, #64	; 0x40
 8001df2:	d058      	beq.n	8001ea6 <HAL_TIM_ConfigClockSource+0x136>
 8001df4:	2b40      	cmp	r3, #64	; 0x40
 8001df6:	d86f      	bhi.n	8001ed8 <HAL_TIM_ConfigClockSource+0x168>
 8001df8:	2b30      	cmp	r3, #48	; 0x30
 8001dfa:	d064      	beq.n	8001ec6 <HAL_TIM_ConfigClockSource+0x156>
 8001dfc:	2b30      	cmp	r3, #48	; 0x30
 8001dfe:	d86b      	bhi.n	8001ed8 <HAL_TIM_ConfigClockSource+0x168>
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d060      	beq.n	8001ec6 <HAL_TIM_ConfigClockSource+0x156>
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d867      	bhi.n	8001ed8 <HAL_TIM_ConfigClockSource+0x168>
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d05c      	beq.n	8001ec6 <HAL_TIM_ConfigClockSource+0x156>
 8001e0c:	2b10      	cmp	r3, #16
 8001e0e:	d05a      	beq.n	8001ec6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001e10:	e062      	b.n	8001ed8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6818      	ldr	r0, [r3, #0]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6899      	ldr	r1, [r3, #8]
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	f000 f97e 	bl	8002122 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e34:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	609a      	str	r2, [r3, #8]
      break;
 8001e3e:	e04e      	b.n	8001ede <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6818      	ldr	r0, [r3, #0]
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	6899      	ldr	r1, [r3, #8]
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f000 f967 	bl	8002122 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e62:	609a      	str	r2, [r3, #8]
      break;
 8001e64:	e03b      	b.n	8001ede <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	6859      	ldr	r1, [r3, #4]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	461a      	mov	r2, r3
 8001e74:	f000 f8de 	bl	8002034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2150      	movs	r1, #80	; 0x50
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f000 f935 	bl	80020ee <TIM_ITRx_SetConfig>
      break;
 8001e84:	e02b      	b.n	8001ede <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6818      	ldr	r0, [r3, #0]
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	6859      	ldr	r1, [r3, #4]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	461a      	mov	r2, r3
 8001e94:	f000 f8fc 	bl	8002090 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2160      	movs	r1, #96	; 0x60
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f925 	bl	80020ee <TIM_ITRx_SetConfig>
      break;
 8001ea4:	e01b      	b.n	8001ede <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6859      	ldr	r1, [r3, #4]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	f000 f8be 	bl	8002034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2140      	movs	r1, #64	; 0x40
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f915 	bl	80020ee <TIM_ITRx_SetConfig>
      break;
 8001ec4:	e00b      	b.n	8001ede <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	f000 f90c 	bl	80020ee <TIM_ITRx_SetConfig>
        break;
 8001ed6:	e002      	b.n	8001ede <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001ed8:	bf00      	nop
 8001eda:	e000      	b.n	8001ede <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001edc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr

08001f0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bc80      	pop	{r7}
 8001f3e:	4770      	bx	lr

08001f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a33      	ldr	r2, [pc, #204]	; (8002020 <TIM_Base_SetConfig+0xe0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d013      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a32      	ldr	r2, [pc, #200]	; (8002024 <TIM_Base_SetConfig+0xe4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00f      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f66:	d00b      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a2f      	ldr	r2, [pc, #188]	; (8002028 <TIM_Base_SetConfig+0xe8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a2e      	ldr	r2, [pc, #184]	; (800202c <TIM_Base_SetConfig+0xec>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d003      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a2d      	ldr	r2, [pc, #180]	; (8002030 <TIM_Base_SetConfig+0xf0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d108      	bne.n	8001f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a22      	ldr	r2, [pc, #136]	; (8002020 <TIM_Base_SetConfig+0xe0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <TIM_Base_SetConfig+0x82>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a21      	ldr	r2, [pc, #132]	; (8002024 <TIM_Base_SetConfig+0xe4>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00f      	beq.n	8001fc2 <TIM_Base_SetConfig+0x82>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa8:	d00b      	beq.n	8001fc2 <TIM_Base_SetConfig+0x82>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <TIM_Base_SetConfig+0xe8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d007      	beq.n	8001fc2 <TIM_Base_SetConfig+0x82>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <TIM_Base_SetConfig+0xec>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d003      	beq.n	8001fc2 <TIM_Base_SetConfig+0x82>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <TIM_Base_SetConfig+0xf0>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d108      	bne.n	8001fd4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a09      	ldr	r2, [pc, #36]	; (8002020 <TIM_Base_SetConfig+0xe0>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d003      	beq.n	8002008 <TIM_Base_SetConfig+0xc8>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a08      	ldr	r2, [pc, #32]	; (8002024 <TIM_Base_SetConfig+0xe4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d103      	bne.n	8002010 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	615a      	str	r2, [r3, #20]
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40012c00 	.word	0x40012c00
 8002024:	40013400 	.word	0x40013400
 8002028:	40000400 	.word	0x40000400
 800202c:	40000800 	.word	0x40000800
 8002030:	40000c00 	.word	0x40000c00

08002034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	f023 0201 	bic.w	r2, r3, #1
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800205e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f023 030a 	bic.w	r3, r3, #10
 8002070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4313      	orrs	r3, r2
 8002078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	621a      	str	r2, [r3, #32]
}
 8002086:	bf00      	nop
 8002088:	371c      	adds	r7, #28
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr

08002090 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	f023 0210 	bic.w	r2, r3, #16
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	031b      	lsls	r3, r3, #12
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	621a      	str	r2, [r3, #32]
}
 80020e4:	bf00      	nop
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	f043 0307 	orr.w	r3, r3, #7
 8002110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	609a      	str	r2, [r3, #8]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002122:	b480      	push	{r7}
 8002124:	b087      	sub	sp, #28
 8002126:	af00      	add	r7, sp, #0
 8002128:	60f8      	str	r0, [r7, #12]
 800212a:	60b9      	str	r1, [r7, #8]
 800212c:	607a      	str	r2, [r7, #4]
 800212e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800213c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	021a      	lsls	r2, r3, #8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	431a      	orrs	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	4313      	orrs	r3, r2
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4313      	orrs	r3, r2
 800214e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	609a      	str	r2, [r3, #8]
}
 8002156:	bf00      	nop
 8002158:	371c      	adds	r7, #28
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr

08002160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002174:	2302      	movs	r3, #2
 8002176:	e050      	b.n	800221a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1b      	ldr	r2, [pc, #108]	; (8002224 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d018      	beq.n	80021ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a19      	ldr	r2, [pc, #100]	; (8002228 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d013      	beq.n	80021ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ce:	d00e      	beq.n	80021ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a15      	ldr	r2, [pc, #84]	; (800222c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d009      	beq.n	80021ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a14      	ldr	r2, [pc, #80]	; (8002230 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d004      	beq.n	80021ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a12      	ldr	r2, [pc, #72]	; (8002234 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d10c      	bne.n	8002208 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68ba      	ldr	r2, [r7, #8]
 8002206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	40012c00 	.word	0x40012c00
 8002228:	40013400 	.word	0x40013400
 800222c:	40000400 	.word	0x40000400
 8002230:	40000800 	.word	0x40000800
 8002234:	40000c00 	.word	0x40000c00

08002238 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	bc80      	pop	{r7}
 8002248:	4770      	bx	lr

0800224a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e03f      	b.n	80022ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7fe fac6 	bl	8000814 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	; 0x24
 800228c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800229e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fb83 	bl	80029ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68da      	ldr	r2, [r3, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b08a      	sub	sp, #40	; 0x28
 80022fa:	af02      	add	r7, sp, #8
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	603b      	str	r3, [r7, #0]
 8002302:	4613      	mov	r3, r2
 8002304:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b20      	cmp	r3, #32
 8002314:	d17c      	bne.n	8002410 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <HAL_UART_Transmit+0x2c>
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e075      	b.n	8002412 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_UART_Transmit+0x3e>
 8002330:	2302      	movs	r3, #2
 8002332:	e06e      	b.n	8002412 <HAL_UART_Transmit+0x11c>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2221      	movs	r2, #33	; 0x21
 8002346:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800234a:	f7fe fb35 	bl	80009b8 <HAL_GetTick>
 800234e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	88fa      	ldrh	r2, [r7, #6]
 8002354:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	88fa      	ldrh	r2, [r7, #6]
 800235a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002364:	d108      	bne.n	8002378 <HAL_UART_Transmit+0x82>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d104      	bne.n	8002378 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	e003      	b.n	8002380 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002388:	e02a      	b.n	80023e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2200      	movs	r2, #0
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 f9a7 	bl	80026e8 <UART_WaitOnFlagUntilTimeout>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e036      	b.n	8002412 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10b      	bne.n	80023c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	3302      	adds	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	e007      	b.n	80023d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	3301      	adds	r3, #1
 80023d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1cf      	bne.n	800238a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2200      	movs	r2, #0
 80023f2:	2140      	movs	r1, #64	; 0x40
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f977 	bl	80026e8 <UART_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e006      	b.n	8002412 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800241a:	b480      	push	{r7}
 800241c:	b085      	sub	sp, #20
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	4613      	mov	r3, r2
 8002426:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b20      	cmp	r3, #32
 8002432:	d140      	bne.n	80024b6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d002      	beq.n	8002440 <HAL_UART_Receive_IT+0x26>
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e039      	b.n	80024b8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_UART_Receive_IT+0x38>
 800244e:	2302      	movs	r3, #2
 8002450:	e032      	b.n	80024b8 <HAL_UART_Receive_IT+0x9e>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	88fa      	ldrh	r2, [r7, #6]
 8002464:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	88fa      	ldrh	r2, [r7, #6]
 800246a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2222      	movs	r2, #34	; 0x22
 8002476:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002490:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695a      	ldr	r2, [r3, #20]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f042 0201 	orr.w	r2, r2, #1
 80024a0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0220 	orr.w	r2, r2, #32
 80024b0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e000      	b.n	80024b8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80024b6:	2302      	movs	r3, #2
  }
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10d      	bne.n	8002516 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_UART_IRQHandler+0x52>
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f9cc 	bl	80028ac <UART_Receive_IT>
      return;
 8002514:	e0d0      	b.n	80026b8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80b0 	beq.w	800267e <HAL_UART_IRQHandler+0x1ba>
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 0301 	and.w	r3, r3, #1
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <HAL_UART_IRQHandler+0x70>
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80a5 	beq.w	800267e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_UART_IRQHandler+0x90>
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_UART_IRQHandler+0xb0>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256c:	f043 0202 	orr.w	r2, r3, #2
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_UART_IRQHandler+0xd0>
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258c:	f043 0204 	orr.w	r2, r3, #4
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00f      	beq.n	80025be <HAL_UART_IRQHandler+0xfa>
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d104      	bne.n	80025b2 <HAL_UART_IRQHandler+0xee>
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b6:	f043 0208 	orr.w	r2, r3, #8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d077      	beq.n	80026b6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d007      	beq.n	80025e0 <HAL_UART_IRQHandler+0x11c>
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f003 0320 	and.w	r3, r3, #32
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d002      	beq.n	80025e0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f966 	bl	80028ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf14      	ite	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	2300      	moveq	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <HAL_UART_IRQHandler+0x144>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d031      	beq.n	800266c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f8b7 	bl	800277c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d023      	beq.n	8002664 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800262a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002630:	2b00      	cmp	r3, #0
 8002632:	d013      	beq.n	800265c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002638:	4a21      	ldr	r2, [pc, #132]	; (80026c0 <HAL_UART_IRQHandler+0x1fc>)
 800263a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe faf5 	bl	8000c30 <HAL_DMA_Abort_IT>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d016      	beq.n	800267a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002656:	4610      	mov	r0, r2
 8002658:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800265a:	e00e      	b.n	800267a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f83a 	bl	80026d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002662:	e00a      	b.n	800267a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f836 	bl	80026d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266a:	e006      	b.n	800267a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f832 	bl	80026d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002678:	e01d      	b.n	80026b6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800267a:	bf00      	nop
    return;
 800267c:	e01b      	b.n	80026b6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_UART_IRQHandler+0x1d6>
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8a3 	bl	80027de <UART_Transmit_IT>
    return;
 8002698:	e00e      	b.n	80026b8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d009      	beq.n	80026b8 <HAL_UART_IRQHandler+0x1f4>
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f8e4 	bl	800287c <UART_EndTransmit_IT>
    return;
 80026b4:	e000      	b.n	80026b8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80026b6:	bf00      	nop
  }
}
 80026b8:	3720      	adds	r7, #32
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	080027b7 	.word	0x080027b7

080026c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	4613      	mov	r3, r2
 80026f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026f8:	e02c      	b.n	8002754 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d028      	beq.n	8002754 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d007      	beq.n	8002718 <UART_WaitOnFlagUntilTimeout+0x30>
 8002708:	f7fe f956 	bl	80009b8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	429a      	cmp	r2, r3
 8002716:	d21d      	bcs.n	8002754 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002726:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e00f      	b.n	8002774 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	4013      	ands	r3, r2
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	429a      	cmp	r2, r3
 8002762:	bf0c      	ite	eq
 8002764:	2301      	moveq	r3, #1
 8002766:	2300      	movne	r3, #0
 8002768:	b2db      	uxtb	r3, r3
 800276a:	461a      	mov	r2, r3
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	429a      	cmp	r2, r3
 8002770:	d0c3      	beq.n	80026fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002792:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff ff80 	bl	80026d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027d6:	bf00      	nop
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b21      	cmp	r3, #33	; 0x21
 80027f0:	d13e      	bne.n	8002870 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fa:	d114      	bne.n	8002826 <UART_Transmit_IT+0x48>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d110      	bne.n	8002826 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002818:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	1c9a      	adds	r2, r3, #2
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	621a      	str	r2, [r3, #32]
 8002824:	e008      	b.n	8002838 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	1c59      	adds	r1, r3, #1
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6211      	str	r1, [r2, #32]
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29b      	uxth	r3, r3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4619      	mov	r1, r3
 8002846:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10f      	bne.n	800286c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800285a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800286a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e000      	b.n	8002872 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002870:	2302      	movs	r3, #2
  }
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002892:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff11 	bl	80026c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b22      	cmp	r3, #34	; 0x22
 80028be:	d170      	bne.n	80029a2 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c8:	d117      	bne.n	80028fa <UART_Receive_IT+0x4e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d113      	bne.n	80028fa <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e8:	b29a      	uxth	r2, r3
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	1c9a      	adds	r2, r3, #2
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
 80028f8:	e026      	b.n	8002948 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002900:	2300      	movs	r3, #0
 8002902:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290c:	d007      	beq.n	800291e <UART_Receive_IT+0x72>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10a      	bne.n	800292c <UART_Receive_IT+0x80>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e008      	b.n	800293e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002938:	b2da      	uxtb	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29b      	uxth	r3, r3
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4619      	mov	r1, r3
 8002956:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002958:	2b00      	cmp	r3, #0
 800295a:	d120      	bne.n	800299e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0220 	bic.w	r2, r2, #32
 800296a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68da      	ldr	r2, [r3, #12]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800297a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0201 	bic.w	r2, r2, #1
 800298a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7fd fd13 	bl	80003c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e002      	b.n	80029a4 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	e000      	b.n	80029a4 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80029a2:	2302      	movs	r3, #2
  }
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029e6:	f023 030c 	bic.w	r3, r3, #12
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699a      	ldr	r2, [r3, #24]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a2c      	ldr	r2, [pc, #176]	; (8002ac0 <UART_SetConfig+0x114>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d103      	bne.n	8002a1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a14:	f7fe ffc2 	bl	800199c <HAL_RCC_GetPCLK2Freq>
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	e002      	b.n	8002a22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a1c:	f7fe ffaa 	bl	8001974 <HAL_RCC_GetPCLK1Freq>
 8002a20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	009a      	lsls	r2, r3, #2
 8002a2c:	441a      	add	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	4a22      	ldr	r2, [pc, #136]	; (8002ac4 <UART_SetConfig+0x118>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	0119      	lsls	r1, r3, #4
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	009a      	lsls	r2, r3, #2
 8002a4c:	441a      	add	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <UART_SetConfig+0x118>)
 8002a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2064      	movs	r0, #100	; 0x64
 8002a62:	fb00 f303 	mul.w	r3, r0, r3
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	3332      	adds	r3, #50	; 0x32
 8002a6c:	4a15      	ldr	r2, [pc, #84]	; (8002ac4 <UART_SetConfig+0x118>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a78:	4419      	add	r1, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	009a      	lsls	r2, r3, #2
 8002a84:	441a      	add	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <UART_SetConfig+0x118>)
 8002a92:	fba3 0302 	umull	r0, r3, r3, r2
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2064      	movs	r0, #100	; 0x64
 8002a9a:	fb00 f303 	mul.w	r3, r0, r3
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	3332      	adds	r3, #50	; 0x32
 8002aa4:	4a07      	ldr	r2, [pc, #28]	; (8002ac4 <UART_SetConfig+0x118>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	f003 020f 	and.w	r2, r3, #15
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	440a      	add	r2, r1
 8002ab6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ab8:	bf00      	nop
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	51eb851f 	.word	0x51eb851f

08002ac8 <__errno>:
 8002ac8:	4b01      	ldr	r3, [pc, #4]	; (8002ad0 <__errno+0x8>)
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	20000028 	.word	0x20000028

08002ad4 <__libc_init_array>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	2600      	movs	r6, #0
 8002ad8:	4d0c      	ldr	r5, [pc, #48]	; (8002b0c <__libc_init_array+0x38>)
 8002ada:	4c0d      	ldr	r4, [pc, #52]	; (8002b10 <__libc_init_array+0x3c>)
 8002adc:	1b64      	subs	r4, r4, r5
 8002ade:	10a4      	asrs	r4, r4, #2
 8002ae0:	42a6      	cmp	r6, r4
 8002ae2:	d109      	bne.n	8002af8 <__libc_init_array+0x24>
 8002ae4:	f000 fc5c 	bl	80033a0 <_init>
 8002ae8:	2600      	movs	r6, #0
 8002aea:	4d0a      	ldr	r5, [pc, #40]	; (8002b14 <__libc_init_array+0x40>)
 8002aec:	4c0a      	ldr	r4, [pc, #40]	; (8002b18 <__libc_init_array+0x44>)
 8002aee:	1b64      	subs	r4, r4, r5
 8002af0:	10a4      	asrs	r4, r4, #2
 8002af2:	42a6      	cmp	r6, r4
 8002af4:	d105      	bne.n	8002b02 <__libc_init_array+0x2e>
 8002af6:	bd70      	pop	{r4, r5, r6, pc}
 8002af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afc:	4798      	blx	r3
 8002afe:	3601      	adds	r6, #1
 8002b00:	e7ee      	b.n	8002ae0 <__libc_init_array+0xc>
 8002b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b06:	4798      	blx	r3
 8002b08:	3601      	adds	r6, #1
 8002b0a:	e7f2      	b.n	8002af2 <__libc_init_array+0x1e>
 8002b0c:	0800346c 	.word	0x0800346c
 8002b10:	0800346c 	.word	0x0800346c
 8002b14:	0800346c 	.word	0x0800346c
 8002b18:	08003470 	.word	0x08003470

08002b1c <memset>:
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4402      	add	r2, r0
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d100      	bne.n	8002b26 <memset+0xa>
 8002b24:	4770      	bx	lr
 8002b26:	f803 1b01 	strb.w	r1, [r3], #1
 8002b2a:	e7f9      	b.n	8002b20 <memset+0x4>

08002b2c <siprintf>:
 8002b2c:	b40e      	push	{r1, r2, r3}
 8002b2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b32:	b500      	push	{lr}
 8002b34:	b09c      	sub	sp, #112	; 0x70
 8002b36:	ab1d      	add	r3, sp, #116	; 0x74
 8002b38:	9002      	str	r0, [sp, #8]
 8002b3a:	9006      	str	r0, [sp, #24]
 8002b3c:	9107      	str	r1, [sp, #28]
 8002b3e:	9104      	str	r1, [sp, #16]
 8002b40:	4808      	ldr	r0, [pc, #32]	; (8002b64 <siprintf+0x38>)
 8002b42:	4909      	ldr	r1, [pc, #36]	; (8002b68 <siprintf+0x3c>)
 8002b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b48:	9105      	str	r1, [sp, #20]
 8002b4a:	6800      	ldr	r0, [r0, #0]
 8002b4c:	a902      	add	r1, sp, #8
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	f000 f868 	bl	8002c24 <_svfiprintf_r>
 8002b54:	2200      	movs	r2, #0
 8002b56:	9b02      	ldr	r3, [sp, #8]
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	b01c      	add	sp, #112	; 0x70
 8002b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b60:	b003      	add	sp, #12
 8002b62:	4770      	bx	lr
 8002b64:	20000028 	.word	0x20000028
 8002b68:	ffff0208 	.word	0xffff0208

08002b6c <__ssputs_r>:
 8002b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b70:	688e      	ldr	r6, [r1, #8]
 8002b72:	4682      	mov	sl, r0
 8002b74:	429e      	cmp	r6, r3
 8002b76:	460c      	mov	r4, r1
 8002b78:	4690      	mov	r8, r2
 8002b7a:	461f      	mov	r7, r3
 8002b7c:	d838      	bhi.n	8002bf0 <__ssputs_r+0x84>
 8002b7e:	898a      	ldrh	r2, [r1, #12]
 8002b80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b84:	d032      	beq.n	8002bec <__ssputs_r+0x80>
 8002b86:	6825      	ldr	r5, [r4, #0]
 8002b88:	6909      	ldr	r1, [r1, #16]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	eba5 0901 	sub.w	r9, r5, r1
 8002b90:	6965      	ldr	r5, [r4, #20]
 8002b92:	444b      	add	r3, r9
 8002b94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b9c:	106d      	asrs	r5, r5, #1
 8002b9e:	429d      	cmp	r5, r3
 8002ba0:	bf38      	it	cc
 8002ba2:	461d      	movcc	r5, r3
 8002ba4:	0553      	lsls	r3, r2, #21
 8002ba6:	d531      	bpl.n	8002c0c <__ssputs_r+0xa0>
 8002ba8:	4629      	mov	r1, r5
 8002baa:	f000 fb53 	bl	8003254 <_malloc_r>
 8002bae:	4606      	mov	r6, r0
 8002bb0:	b950      	cbnz	r0, 8002bc8 <__ssputs_r+0x5c>
 8002bb2:	230c      	movs	r3, #12
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	f8ca 3000 	str.w	r3, [sl]
 8002bbc:	89a3      	ldrh	r3, [r4, #12]
 8002bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc2:	81a3      	strh	r3, [r4, #12]
 8002bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bc8:	464a      	mov	r2, r9
 8002bca:	6921      	ldr	r1, [r4, #16]
 8002bcc:	f000 face 	bl	800316c <memcpy>
 8002bd0:	89a3      	ldrh	r3, [r4, #12]
 8002bd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bda:	81a3      	strh	r3, [r4, #12]
 8002bdc:	6126      	str	r6, [r4, #16]
 8002bde:	444e      	add	r6, r9
 8002be0:	6026      	str	r6, [r4, #0]
 8002be2:	463e      	mov	r6, r7
 8002be4:	6165      	str	r5, [r4, #20]
 8002be6:	eba5 0509 	sub.w	r5, r5, r9
 8002bea:	60a5      	str	r5, [r4, #8]
 8002bec:	42be      	cmp	r6, r7
 8002bee:	d900      	bls.n	8002bf2 <__ssputs_r+0x86>
 8002bf0:	463e      	mov	r6, r7
 8002bf2:	4632      	mov	r2, r6
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	6820      	ldr	r0, [r4, #0]
 8002bf8:	f000 fac6 	bl	8003188 <memmove>
 8002bfc:	68a3      	ldr	r3, [r4, #8]
 8002bfe:	6822      	ldr	r2, [r4, #0]
 8002c00:	1b9b      	subs	r3, r3, r6
 8002c02:	4432      	add	r2, r6
 8002c04:	2000      	movs	r0, #0
 8002c06:	60a3      	str	r3, [r4, #8]
 8002c08:	6022      	str	r2, [r4, #0]
 8002c0a:	e7db      	b.n	8002bc4 <__ssputs_r+0x58>
 8002c0c:	462a      	mov	r2, r5
 8002c0e:	f000 fb7b 	bl	8003308 <_realloc_r>
 8002c12:	4606      	mov	r6, r0
 8002c14:	2800      	cmp	r0, #0
 8002c16:	d1e1      	bne.n	8002bdc <__ssputs_r+0x70>
 8002c18:	4650      	mov	r0, sl
 8002c1a:	6921      	ldr	r1, [r4, #16]
 8002c1c:	f000 face 	bl	80031bc <_free_r>
 8002c20:	e7c7      	b.n	8002bb2 <__ssputs_r+0x46>
	...

08002c24 <_svfiprintf_r>:
 8002c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c28:	4698      	mov	r8, r3
 8002c2a:	898b      	ldrh	r3, [r1, #12]
 8002c2c:	4607      	mov	r7, r0
 8002c2e:	061b      	lsls	r3, r3, #24
 8002c30:	460d      	mov	r5, r1
 8002c32:	4614      	mov	r4, r2
 8002c34:	b09d      	sub	sp, #116	; 0x74
 8002c36:	d50e      	bpl.n	8002c56 <_svfiprintf_r+0x32>
 8002c38:	690b      	ldr	r3, [r1, #16]
 8002c3a:	b963      	cbnz	r3, 8002c56 <_svfiprintf_r+0x32>
 8002c3c:	2140      	movs	r1, #64	; 0x40
 8002c3e:	f000 fb09 	bl	8003254 <_malloc_r>
 8002c42:	6028      	str	r0, [r5, #0]
 8002c44:	6128      	str	r0, [r5, #16]
 8002c46:	b920      	cbnz	r0, 8002c52 <_svfiprintf_r+0x2e>
 8002c48:	230c      	movs	r3, #12
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c50:	e0d1      	b.n	8002df6 <_svfiprintf_r+0x1d2>
 8002c52:	2340      	movs	r3, #64	; 0x40
 8002c54:	616b      	str	r3, [r5, #20]
 8002c56:	2300      	movs	r3, #0
 8002c58:	9309      	str	r3, [sp, #36]	; 0x24
 8002c5a:	2320      	movs	r3, #32
 8002c5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c60:	2330      	movs	r3, #48	; 0x30
 8002c62:	f04f 0901 	mov.w	r9, #1
 8002c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002e10 <_svfiprintf_r+0x1ec>
 8002c6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c72:	4623      	mov	r3, r4
 8002c74:	469a      	mov	sl, r3
 8002c76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c7a:	b10a      	cbz	r2, 8002c80 <_svfiprintf_r+0x5c>
 8002c7c:	2a25      	cmp	r2, #37	; 0x25
 8002c7e:	d1f9      	bne.n	8002c74 <_svfiprintf_r+0x50>
 8002c80:	ebba 0b04 	subs.w	fp, sl, r4
 8002c84:	d00b      	beq.n	8002c9e <_svfiprintf_r+0x7a>
 8002c86:	465b      	mov	r3, fp
 8002c88:	4622      	mov	r2, r4
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	4638      	mov	r0, r7
 8002c8e:	f7ff ff6d 	bl	8002b6c <__ssputs_r>
 8002c92:	3001      	adds	r0, #1
 8002c94:	f000 80aa 	beq.w	8002dec <_svfiprintf_r+0x1c8>
 8002c98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c9a:	445a      	add	r2, fp
 8002c9c:	9209      	str	r2, [sp, #36]	; 0x24
 8002c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 80a2 	beq.w	8002dec <_svfiprintf_r+0x1c8>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f04f 32ff 	mov.w	r2, #4294967295
 8002cae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cb2:	f10a 0a01 	add.w	sl, sl, #1
 8002cb6:	9304      	str	r3, [sp, #16]
 8002cb8:	9307      	str	r3, [sp, #28]
 8002cba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cbe:	931a      	str	r3, [sp, #104]	; 0x68
 8002cc0:	4654      	mov	r4, sl
 8002cc2:	2205      	movs	r2, #5
 8002cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cc8:	4851      	ldr	r0, [pc, #324]	; (8002e10 <_svfiprintf_r+0x1ec>)
 8002cca:	f000 fa41 	bl	8003150 <memchr>
 8002cce:	9a04      	ldr	r2, [sp, #16]
 8002cd0:	b9d8      	cbnz	r0, 8002d0a <_svfiprintf_r+0xe6>
 8002cd2:	06d0      	lsls	r0, r2, #27
 8002cd4:	bf44      	itt	mi
 8002cd6:	2320      	movmi	r3, #32
 8002cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cdc:	0711      	lsls	r1, r2, #28
 8002cde:	bf44      	itt	mi
 8002ce0:	232b      	movmi	r3, #43	; 0x2b
 8002ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8002cea:	2b2a      	cmp	r3, #42	; 0x2a
 8002cec:	d015      	beq.n	8002d1a <_svfiprintf_r+0xf6>
 8002cee:	4654      	mov	r4, sl
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f04f 0c0a 	mov.w	ip, #10
 8002cf6:	9a07      	ldr	r2, [sp, #28]
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cfe:	3b30      	subs	r3, #48	; 0x30
 8002d00:	2b09      	cmp	r3, #9
 8002d02:	d94e      	bls.n	8002da2 <_svfiprintf_r+0x17e>
 8002d04:	b1b0      	cbz	r0, 8002d34 <_svfiprintf_r+0x110>
 8002d06:	9207      	str	r2, [sp, #28]
 8002d08:	e014      	b.n	8002d34 <_svfiprintf_r+0x110>
 8002d0a:	eba0 0308 	sub.w	r3, r0, r8
 8002d0e:	fa09 f303 	lsl.w	r3, r9, r3
 8002d12:	4313      	orrs	r3, r2
 8002d14:	46a2      	mov	sl, r4
 8002d16:	9304      	str	r3, [sp, #16]
 8002d18:	e7d2      	b.n	8002cc0 <_svfiprintf_r+0x9c>
 8002d1a:	9b03      	ldr	r3, [sp, #12]
 8002d1c:	1d19      	adds	r1, r3, #4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	9103      	str	r1, [sp, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	bfbb      	ittet	lt
 8002d26:	425b      	neglt	r3, r3
 8002d28:	f042 0202 	orrlt.w	r2, r2, #2
 8002d2c:	9307      	strge	r3, [sp, #28]
 8002d2e:	9307      	strlt	r3, [sp, #28]
 8002d30:	bfb8      	it	lt
 8002d32:	9204      	strlt	r2, [sp, #16]
 8002d34:	7823      	ldrb	r3, [r4, #0]
 8002d36:	2b2e      	cmp	r3, #46	; 0x2e
 8002d38:	d10c      	bne.n	8002d54 <_svfiprintf_r+0x130>
 8002d3a:	7863      	ldrb	r3, [r4, #1]
 8002d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d3e:	d135      	bne.n	8002dac <_svfiprintf_r+0x188>
 8002d40:	9b03      	ldr	r3, [sp, #12]
 8002d42:	3402      	adds	r4, #2
 8002d44:	1d1a      	adds	r2, r3, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	9203      	str	r2, [sp, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	bfb8      	it	lt
 8002d4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d52:	9305      	str	r3, [sp, #20]
 8002d54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002e20 <_svfiprintf_r+0x1fc>
 8002d58:	2203      	movs	r2, #3
 8002d5a:	4650      	mov	r0, sl
 8002d5c:	7821      	ldrb	r1, [r4, #0]
 8002d5e:	f000 f9f7 	bl	8003150 <memchr>
 8002d62:	b140      	cbz	r0, 8002d76 <_svfiprintf_r+0x152>
 8002d64:	2340      	movs	r3, #64	; 0x40
 8002d66:	eba0 000a 	sub.w	r0, r0, sl
 8002d6a:	fa03 f000 	lsl.w	r0, r3, r0
 8002d6e:	9b04      	ldr	r3, [sp, #16]
 8002d70:	3401      	adds	r4, #1
 8002d72:	4303      	orrs	r3, r0
 8002d74:	9304      	str	r3, [sp, #16]
 8002d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d7a:	2206      	movs	r2, #6
 8002d7c:	4825      	ldr	r0, [pc, #148]	; (8002e14 <_svfiprintf_r+0x1f0>)
 8002d7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d82:	f000 f9e5 	bl	8003150 <memchr>
 8002d86:	2800      	cmp	r0, #0
 8002d88:	d038      	beq.n	8002dfc <_svfiprintf_r+0x1d8>
 8002d8a:	4b23      	ldr	r3, [pc, #140]	; (8002e18 <_svfiprintf_r+0x1f4>)
 8002d8c:	bb1b      	cbnz	r3, 8002dd6 <_svfiprintf_r+0x1b2>
 8002d8e:	9b03      	ldr	r3, [sp, #12]
 8002d90:	3307      	adds	r3, #7
 8002d92:	f023 0307 	bic.w	r3, r3, #7
 8002d96:	3308      	adds	r3, #8
 8002d98:	9303      	str	r3, [sp, #12]
 8002d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d9c:	4433      	add	r3, r6
 8002d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8002da0:	e767      	b.n	8002c72 <_svfiprintf_r+0x4e>
 8002da2:	460c      	mov	r4, r1
 8002da4:	2001      	movs	r0, #1
 8002da6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002daa:	e7a5      	b.n	8002cf8 <_svfiprintf_r+0xd4>
 8002dac:	2300      	movs	r3, #0
 8002dae:	f04f 0c0a 	mov.w	ip, #10
 8002db2:	4619      	mov	r1, r3
 8002db4:	3401      	adds	r4, #1
 8002db6:	9305      	str	r3, [sp, #20]
 8002db8:	4620      	mov	r0, r4
 8002dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dbe:	3a30      	subs	r2, #48	; 0x30
 8002dc0:	2a09      	cmp	r2, #9
 8002dc2:	d903      	bls.n	8002dcc <_svfiprintf_r+0x1a8>
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0c5      	beq.n	8002d54 <_svfiprintf_r+0x130>
 8002dc8:	9105      	str	r1, [sp, #20]
 8002dca:	e7c3      	b.n	8002d54 <_svfiprintf_r+0x130>
 8002dcc:	4604      	mov	r4, r0
 8002dce:	2301      	movs	r3, #1
 8002dd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002dd4:	e7f0      	b.n	8002db8 <_svfiprintf_r+0x194>
 8002dd6:	ab03      	add	r3, sp, #12
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	462a      	mov	r2, r5
 8002ddc:	4638      	mov	r0, r7
 8002dde:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <_svfiprintf_r+0x1f8>)
 8002de0:	a904      	add	r1, sp, #16
 8002de2:	f3af 8000 	nop.w
 8002de6:	1c42      	adds	r2, r0, #1
 8002de8:	4606      	mov	r6, r0
 8002dea:	d1d6      	bne.n	8002d9a <_svfiprintf_r+0x176>
 8002dec:	89ab      	ldrh	r3, [r5, #12]
 8002dee:	065b      	lsls	r3, r3, #25
 8002df0:	f53f af2c 	bmi.w	8002c4c <_svfiprintf_r+0x28>
 8002df4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002df6:	b01d      	add	sp, #116	; 0x74
 8002df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dfc:	ab03      	add	r3, sp, #12
 8002dfe:	9300      	str	r3, [sp, #0]
 8002e00:	462a      	mov	r2, r5
 8002e02:	4638      	mov	r0, r7
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <_svfiprintf_r+0x1f8>)
 8002e06:	a904      	add	r1, sp, #16
 8002e08:	f000 f87c 	bl	8002f04 <_printf_i>
 8002e0c:	e7eb      	b.n	8002de6 <_svfiprintf_r+0x1c2>
 8002e0e:	bf00      	nop
 8002e10:	08003438 	.word	0x08003438
 8002e14:	08003442 	.word	0x08003442
 8002e18:	00000000 	.word	0x00000000
 8002e1c:	08002b6d 	.word	0x08002b6d
 8002e20:	0800343e 	.word	0x0800343e

08002e24 <_printf_common>:
 8002e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e28:	4616      	mov	r6, r2
 8002e2a:	4699      	mov	r9, r3
 8002e2c:	688a      	ldr	r2, [r1, #8]
 8002e2e:	690b      	ldr	r3, [r1, #16]
 8002e30:	4607      	mov	r7, r0
 8002e32:	4293      	cmp	r3, r2
 8002e34:	bfb8      	it	lt
 8002e36:	4613      	movlt	r3, r2
 8002e38:	6033      	str	r3, [r6, #0]
 8002e3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e3e:	460c      	mov	r4, r1
 8002e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e44:	b10a      	cbz	r2, 8002e4a <_printf_common+0x26>
 8002e46:	3301      	adds	r3, #1
 8002e48:	6033      	str	r3, [r6, #0]
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	0699      	lsls	r1, r3, #26
 8002e4e:	bf42      	ittt	mi
 8002e50:	6833      	ldrmi	r3, [r6, #0]
 8002e52:	3302      	addmi	r3, #2
 8002e54:	6033      	strmi	r3, [r6, #0]
 8002e56:	6825      	ldr	r5, [r4, #0]
 8002e58:	f015 0506 	ands.w	r5, r5, #6
 8002e5c:	d106      	bne.n	8002e6c <_printf_common+0x48>
 8002e5e:	f104 0a19 	add.w	sl, r4, #25
 8002e62:	68e3      	ldr	r3, [r4, #12]
 8002e64:	6832      	ldr	r2, [r6, #0]
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	42ab      	cmp	r3, r5
 8002e6a:	dc28      	bgt.n	8002ebe <_printf_common+0x9a>
 8002e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e70:	1e13      	subs	r3, r2, #0
 8002e72:	6822      	ldr	r2, [r4, #0]
 8002e74:	bf18      	it	ne
 8002e76:	2301      	movne	r3, #1
 8002e78:	0692      	lsls	r2, r2, #26
 8002e7a:	d42d      	bmi.n	8002ed8 <_printf_common+0xb4>
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	4638      	mov	r0, r7
 8002e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e84:	47c0      	blx	r8
 8002e86:	3001      	adds	r0, #1
 8002e88:	d020      	beq.n	8002ecc <_printf_common+0xa8>
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	68e5      	ldr	r5, [r4, #12]
 8002e8e:	f003 0306 	and.w	r3, r3, #6
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	bf18      	it	ne
 8002e96:	2500      	movne	r5, #0
 8002e98:	6832      	ldr	r2, [r6, #0]
 8002e9a:	f04f 0600 	mov.w	r6, #0
 8002e9e:	68a3      	ldr	r3, [r4, #8]
 8002ea0:	bf08      	it	eq
 8002ea2:	1aad      	subeq	r5, r5, r2
 8002ea4:	6922      	ldr	r2, [r4, #16]
 8002ea6:	bf08      	it	eq
 8002ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002eac:	4293      	cmp	r3, r2
 8002eae:	bfc4      	itt	gt
 8002eb0:	1a9b      	subgt	r3, r3, r2
 8002eb2:	18ed      	addgt	r5, r5, r3
 8002eb4:	341a      	adds	r4, #26
 8002eb6:	42b5      	cmp	r5, r6
 8002eb8:	d11a      	bne.n	8002ef0 <_printf_common+0xcc>
 8002eba:	2000      	movs	r0, #0
 8002ebc:	e008      	b.n	8002ed0 <_printf_common+0xac>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	4652      	mov	r2, sl
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	4638      	mov	r0, r7
 8002ec6:	47c0      	blx	r8
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d103      	bne.n	8002ed4 <_printf_common+0xb0>
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ed4:	3501      	adds	r5, #1
 8002ed6:	e7c4      	b.n	8002e62 <_printf_common+0x3e>
 8002ed8:	2030      	movs	r0, #48	; 0x30
 8002eda:	18e1      	adds	r1, r4, r3
 8002edc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ee6:	4422      	add	r2, r4
 8002ee8:	3302      	adds	r3, #2
 8002eea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002eee:	e7c5      	b.n	8002e7c <_printf_common+0x58>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	4622      	mov	r2, r4
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	4638      	mov	r0, r7
 8002ef8:	47c0      	blx	r8
 8002efa:	3001      	adds	r0, #1
 8002efc:	d0e6      	beq.n	8002ecc <_printf_common+0xa8>
 8002efe:	3601      	adds	r6, #1
 8002f00:	e7d9      	b.n	8002eb6 <_printf_common+0x92>
	...

08002f04 <_printf_i>:
 8002f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f08:	460c      	mov	r4, r1
 8002f0a:	7e27      	ldrb	r7, [r4, #24]
 8002f0c:	4691      	mov	r9, r2
 8002f0e:	2f78      	cmp	r7, #120	; 0x78
 8002f10:	4680      	mov	r8, r0
 8002f12:	469a      	mov	sl, r3
 8002f14:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002f16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f1a:	d807      	bhi.n	8002f2c <_printf_i+0x28>
 8002f1c:	2f62      	cmp	r7, #98	; 0x62
 8002f1e:	d80a      	bhi.n	8002f36 <_printf_i+0x32>
 8002f20:	2f00      	cmp	r7, #0
 8002f22:	f000 80d9 	beq.w	80030d8 <_printf_i+0x1d4>
 8002f26:	2f58      	cmp	r7, #88	; 0x58
 8002f28:	f000 80a4 	beq.w	8003074 <_printf_i+0x170>
 8002f2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f34:	e03a      	b.n	8002fac <_printf_i+0xa8>
 8002f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f3a:	2b15      	cmp	r3, #21
 8002f3c:	d8f6      	bhi.n	8002f2c <_printf_i+0x28>
 8002f3e:	a001      	add	r0, pc, #4	; (adr r0, 8002f44 <_printf_i+0x40>)
 8002f40:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002f44:	08002f9d 	.word	0x08002f9d
 8002f48:	08002fb1 	.word	0x08002fb1
 8002f4c:	08002f2d 	.word	0x08002f2d
 8002f50:	08002f2d 	.word	0x08002f2d
 8002f54:	08002f2d 	.word	0x08002f2d
 8002f58:	08002f2d 	.word	0x08002f2d
 8002f5c:	08002fb1 	.word	0x08002fb1
 8002f60:	08002f2d 	.word	0x08002f2d
 8002f64:	08002f2d 	.word	0x08002f2d
 8002f68:	08002f2d 	.word	0x08002f2d
 8002f6c:	08002f2d 	.word	0x08002f2d
 8002f70:	080030bf 	.word	0x080030bf
 8002f74:	08002fe1 	.word	0x08002fe1
 8002f78:	080030a1 	.word	0x080030a1
 8002f7c:	08002f2d 	.word	0x08002f2d
 8002f80:	08002f2d 	.word	0x08002f2d
 8002f84:	080030e1 	.word	0x080030e1
 8002f88:	08002f2d 	.word	0x08002f2d
 8002f8c:	08002fe1 	.word	0x08002fe1
 8002f90:	08002f2d 	.word	0x08002f2d
 8002f94:	08002f2d 	.word	0x08002f2d
 8002f98:	080030a9 	.word	0x080030a9
 8002f9c:	680b      	ldr	r3, [r1, #0]
 8002f9e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002fa2:	1d1a      	adds	r2, r3, #4
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	600a      	str	r2, [r1, #0]
 8002fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fac:	2301      	movs	r3, #1
 8002fae:	e0a4      	b.n	80030fa <_printf_i+0x1f6>
 8002fb0:	6825      	ldr	r5, [r4, #0]
 8002fb2:	6808      	ldr	r0, [r1, #0]
 8002fb4:	062e      	lsls	r6, r5, #24
 8002fb6:	f100 0304 	add.w	r3, r0, #4
 8002fba:	d50a      	bpl.n	8002fd2 <_printf_i+0xce>
 8002fbc:	6805      	ldr	r5, [r0, #0]
 8002fbe:	600b      	str	r3, [r1, #0]
 8002fc0:	2d00      	cmp	r5, #0
 8002fc2:	da03      	bge.n	8002fcc <_printf_i+0xc8>
 8002fc4:	232d      	movs	r3, #45	; 0x2d
 8002fc6:	426d      	negs	r5, r5
 8002fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fcc:	230a      	movs	r3, #10
 8002fce:	485e      	ldr	r0, [pc, #376]	; (8003148 <_printf_i+0x244>)
 8002fd0:	e019      	b.n	8003006 <_printf_i+0x102>
 8002fd2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002fd6:	6805      	ldr	r5, [r0, #0]
 8002fd8:	600b      	str	r3, [r1, #0]
 8002fda:	bf18      	it	ne
 8002fdc:	b22d      	sxthne	r5, r5
 8002fde:	e7ef      	b.n	8002fc0 <_printf_i+0xbc>
 8002fe0:	680b      	ldr	r3, [r1, #0]
 8002fe2:	6825      	ldr	r5, [r4, #0]
 8002fe4:	1d18      	adds	r0, r3, #4
 8002fe6:	6008      	str	r0, [r1, #0]
 8002fe8:	0628      	lsls	r0, r5, #24
 8002fea:	d501      	bpl.n	8002ff0 <_printf_i+0xec>
 8002fec:	681d      	ldr	r5, [r3, #0]
 8002fee:	e002      	b.n	8002ff6 <_printf_i+0xf2>
 8002ff0:	0669      	lsls	r1, r5, #25
 8002ff2:	d5fb      	bpl.n	8002fec <_printf_i+0xe8>
 8002ff4:	881d      	ldrh	r5, [r3, #0]
 8002ff6:	2f6f      	cmp	r7, #111	; 0x6f
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2308      	moveq	r3, #8
 8002ffc:	230a      	movne	r3, #10
 8002ffe:	4852      	ldr	r0, [pc, #328]	; (8003148 <_printf_i+0x244>)
 8003000:	2100      	movs	r1, #0
 8003002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003006:	6866      	ldr	r6, [r4, #4]
 8003008:	2e00      	cmp	r6, #0
 800300a:	bfa8      	it	ge
 800300c:	6821      	ldrge	r1, [r4, #0]
 800300e:	60a6      	str	r6, [r4, #8]
 8003010:	bfa4      	itt	ge
 8003012:	f021 0104 	bicge.w	r1, r1, #4
 8003016:	6021      	strge	r1, [r4, #0]
 8003018:	b90d      	cbnz	r5, 800301e <_printf_i+0x11a>
 800301a:	2e00      	cmp	r6, #0
 800301c:	d04d      	beq.n	80030ba <_printf_i+0x1b6>
 800301e:	4616      	mov	r6, r2
 8003020:	fbb5 f1f3 	udiv	r1, r5, r3
 8003024:	fb03 5711 	mls	r7, r3, r1, r5
 8003028:	5dc7      	ldrb	r7, [r0, r7]
 800302a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800302e:	462f      	mov	r7, r5
 8003030:	42bb      	cmp	r3, r7
 8003032:	460d      	mov	r5, r1
 8003034:	d9f4      	bls.n	8003020 <_printf_i+0x11c>
 8003036:	2b08      	cmp	r3, #8
 8003038:	d10b      	bne.n	8003052 <_printf_i+0x14e>
 800303a:	6823      	ldr	r3, [r4, #0]
 800303c:	07df      	lsls	r7, r3, #31
 800303e:	d508      	bpl.n	8003052 <_printf_i+0x14e>
 8003040:	6923      	ldr	r3, [r4, #16]
 8003042:	6861      	ldr	r1, [r4, #4]
 8003044:	4299      	cmp	r1, r3
 8003046:	bfde      	ittt	le
 8003048:	2330      	movle	r3, #48	; 0x30
 800304a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800304e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003052:	1b92      	subs	r2, r2, r6
 8003054:	6122      	str	r2, [r4, #16]
 8003056:	464b      	mov	r3, r9
 8003058:	4621      	mov	r1, r4
 800305a:	4640      	mov	r0, r8
 800305c:	f8cd a000 	str.w	sl, [sp]
 8003060:	aa03      	add	r2, sp, #12
 8003062:	f7ff fedf 	bl	8002e24 <_printf_common>
 8003066:	3001      	adds	r0, #1
 8003068:	d14c      	bne.n	8003104 <_printf_i+0x200>
 800306a:	f04f 30ff 	mov.w	r0, #4294967295
 800306e:	b004      	add	sp, #16
 8003070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003074:	4834      	ldr	r0, [pc, #208]	; (8003148 <_printf_i+0x244>)
 8003076:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800307a:	680e      	ldr	r6, [r1, #0]
 800307c:	6823      	ldr	r3, [r4, #0]
 800307e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003082:	061f      	lsls	r7, r3, #24
 8003084:	600e      	str	r6, [r1, #0]
 8003086:	d514      	bpl.n	80030b2 <_printf_i+0x1ae>
 8003088:	07d9      	lsls	r1, r3, #31
 800308a:	bf44      	itt	mi
 800308c:	f043 0320 	orrmi.w	r3, r3, #32
 8003090:	6023      	strmi	r3, [r4, #0]
 8003092:	b91d      	cbnz	r5, 800309c <_printf_i+0x198>
 8003094:	6823      	ldr	r3, [r4, #0]
 8003096:	f023 0320 	bic.w	r3, r3, #32
 800309a:	6023      	str	r3, [r4, #0]
 800309c:	2310      	movs	r3, #16
 800309e:	e7af      	b.n	8003000 <_printf_i+0xfc>
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	f043 0320 	orr.w	r3, r3, #32
 80030a6:	6023      	str	r3, [r4, #0]
 80030a8:	2378      	movs	r3, #120	; 0x78
 80030aa:	4828      	ldr	r0, [pc, #160]	; (800314c <_printf_i+0x248>)
 80030ac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030b0:	e7e3      	b.n	800307a <_printf_i+0x176>
 80030b2:	065e      	lsls	r6, r3, #25
 80030b4:	bf48      	it	mi
 80030b6:	b2ad      	uxthmi	r5, r5
 80030b8:	e7e6      	b.n	8003088 <_printf_i+0x184>
 80030ba:	4616      	mov	r6, r2
 80030bc:	e7bb      	b.n	8003036 <_printf_i+0x132>
 80030be:	680b      	ldr	r3, [r1, #0]
 80030c0:	6826      	ldr	r6, [r4, #0]
 80030c2:	1d1d      	adds	r5, r3, #4
 80030c4:	6960      	ldr	r0, [r4, #20]
 80030c6:	600d      	str	r5, [r1, #0]
 80030c8:	0635      	lsls	r5, r6, #24
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	d501      	bpl.n	80030d2 <_printf_i+0x1ce>
 80030ce:	6018      	str	r0, [r3, #0]
 80030d0:	e002      	b.n	80030d8 <_printf_i+0x1d4>
 80030d2:	0671      	lsls	r1, r6, #25
 80030d4:	d5fb      	bpl.n	80030ce <_printf_i+0x1ca>
 80030d6:	8018      	strh	r0, [r3, #0]
 80030d8:	2300      	movs	r3, #0
 80030da:	4616      	mov	r6, r2
 80030dc:	6123      	str	r3, [r4, #16]
 80030de:	e7ba      	b.n	8003056 <_printf_i+0x152>
 80030e0:	680b      	ldr	r3, [r1, #0]
 80030e2:	1d1a      	adds	r2, r3, #4
 80030e4:	600a      	str	r2, [r1, #0]
 80030e6:	681e      	ldr	r6, [r3, #0]
 80030e8:	2100      	movs	r1, #0
 80030ea:	4630      	mov	r0, r6
 80030ec:	6862      	ldr	r2, [r4, #4]
 80030ee:	f000 f82f 	bl	8003150 <memchr>
 80030f2:	b108      	cbz	r0, 80030f8 <_printf_i+0x1f4>
 80030f4:	1b80      	subs	r0, r0, r6
 80030f6:	6060      	str	r0, [r4, #4]
 80030f8:	6863      	ldr	r3, [r4, #4]
 80030fa:	6123      	str	r3, [r4, #16]
 80030fc:	2300      	movs	r3, #0
 80030fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003102:	e7a8      	b.n	8003056 <_printf_i+0x152>
 8003104:	4632      	mov	r2, r6
 8003106:	4649      	mov	r1, r9
 8003108:	4640      	mov	r0, r8
 800310a:	6923      	ldr	r3, [r4, #16]
 800310c:	47d0      	blx	sl
 800310e:	3001      	adds	r0, #1
 8003110:	d0ab      	beq.n	800306a <_printf_i+0x166>
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	079b      	lsls	r3, r3, #30
 8003116:	d413      	bmi.n	8003140 <_printf_i+0x23c>
 8003118:	68e0      	ldr	r0, [r4, #12]
 800311a:	9b03      	ldr	r3, [sp, #12]
 800311c:	4298      	cmp	r0, r3
 800311e:	bfb8      	it	lt
 8003120:	4618      	movlt	r0, r3
 8003122:	e7a4      	b.n	800306e <_printf_i+0x16a>
 8003124:	2301      	movs	r3, #1
 8003126:	4632      	mov	r2, r6
 8003128:	4649      	mov	r1, r9
 800312a:	4640      	mov	r0, r8
 800312c:	47d0      	blx	sl
 800312e:	3001      	adds	r0, #1
 8003130:	d09b      	beq.n	800306a <_printf_i+0x166>
 8003132:	3501      	adds	r5, #1
 8003134:	68e3      	ldr	r3, [r4, #12]
 8003136:	9903      	ldr	r1, [sp, #12]
 8003138:	1a5b      	subs	r3, r3, r1
 800313a:	42ab      	cmp	r3, r5
 800313c:	dcf2      	bgt.n	8003124 <_printf_i+0x220>
 800313e:	e7eb      	b.n	8003118 <_printf_i+0x214>
 8003140:	2500      	movs	r5, #0
 8003142:	f104 0619 	add.w	r6, r4, #25
 8003146:	e7f5      	b.n	8003134 <_printf_i+0x230>
 8003148:	08003449 	.word	0x08003449
 800314c:	0800345a 	.word	0x0800345a

08003150 <memchr>:
 8003150:	4603      	mov	r3, r0
 8003152:	b510      	push	{r4, lr}
 8003154:	b2c9      	uxtb	r1, r1
 8003156:	4402      	add	r2, r0
 8003158:	4293      	cmp	r3, r2
 800315a:	4618      	mov	r0, r3
 800315c:	d101      	bne.n	8003162 <memchr+0x12>
 800315e:	2000      	movs	r0, #0
 8003160:	e003      	b.n	800316a <memchr+0x1a>
 8003162:	7804      	ldrb	r4, [r0, #0]
 8003164:	3301      	adds	r3, #1
 8003166:	428c      	cmp	r4, r1
 8003168:	d1f6      	bne.n	8003158 <memchr+0x8>
 800316a:	bd10      	pop	{r4, pc}

0800316c <memcpy>:
 800316c:	440a      	add	r2, r1
 800316e:	4291      	cmp	r1, r2
 8003170:	f100 33ff 	add.w	r3, r0, #4294967295
 8003174:	d100      	bne.n	8003178 <memcpy+0xc>
 8003176:	4770      	bx	lr
 8003178:	b510      	push	{r4, lr}
 800317a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800317e:	4291      	cmp	r1, r2
 8003180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003184:	d1f9      	bne.n	800317a <memcpy+0xe>
 8003186:	bd10      	pop	{r4, pc}

08003188 <memmove>:
 8003188:	4288      	cmp	r0, r1
 800318a:	b510      	push	{r4, lr}
 800318c:	eb01 0402 	add.w	r4, r1, r2
 8003190:	d902      	bls.n	8003198 <memmove+0x10>
 8003192:	4284      	cmp	r4, r0
 8003194:	4623      	mov	r3, r4
 8003196:	d807      	bhi.n	80031a8 <memmove+0x20>
 8003198:	1e43      	subs	r3, r0, #1
 800319a:	42a1      	cmp	r1, r4
 800319c:	d008      	beq.n	80031b0 <memmove+0x28>
 800319e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031a6:	e7f8      	b.n	800319a <memmove+0x12>
 80031a8:	4601      	mov	r1, r0
 80031aa:	4402      	add	r2, r0
 80031ac:	428a      	cmp	r2, r1
 80031ae:	d100      	bne.n	80031b2 <memmove+0x2a>
 80031b0:	bd10      	pop	{r4, pc}
 80031b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031ba:	e7f7      	b.n	80031ac <memmove+0x24>

080031bc <_free_r>:
 80031bc:	b538      	push	{r3, r4, r5, lr}
 80031be:	4605      	mov	r5, r0
 80031c0:	2900      	cmp	r1, #0
 80031c2:	d043      	beq.n	800324c <_free_r+0x90>
 80031c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031c8:	1f0c      	subs	r4, r1, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bfb8      	it	lt
 80031ce:	18e4      	addlt	r4, r4, r3
 80031d0:	f000 f8d0 	bl	8003374 <__malloc_lock>
 80031d4:	4a1e      	ldr	r2, [pc, #120]	; (8003250 <_free_r+0x94>)
 80031d6:	6813      	ldr	r3, [r2, #0]
 80031d8:	4610      	mov	r0, r2
 80031da:	b933      	cbnz	r3, 80031ea <_free_r+0x2e>
 80031dc:	6063      	str	r3, [r4, #4]
 80031de:	6014      	str	r4, [r2, #0]
 80031e0:	4628      	mov	r0, r5
 80031e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031e6:	f000 b8cb 	b.w	8003380 <__malloc_unlock>
 80031ea:	42a3      	cmp	r3, r4
 80031ec:	d90a      	bls.n	8003204 <_free_r+0x48>
 80031ee:	6821      	ldr	r1, [r4, #0]
 80031f0:	1862      	adds	r2, r4, r1
 80031f2:	4293      	cmp	r3, r2
 80031f4:	bf01      	itttt	eq
 80031f6:	681a      	ldreq	r2, [r3, #0]
 80031f8:	685b      	ldreq	r3, [r3, #4]
 80031fa:	1852      	addeq	r2, r2, r1
 80031fc:	6022      	streq	r2, [r4, #0]
 80031fe:	6063      	str	r3, [r4, #4]
 8003200:	6004      	str	r4, [r0, #0]
 8003202:	e7ed      	b.n	80031e0 <_free_r+0x24>
 8003204:	461a      	mov	r2, r3
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	b10b      	cbz	r3, 800320e <_free_r+0x52>
 800320a:	42a3      	cmp	r3, r4
 800320c:	d9fa      	bls.n	8003204 <_free_r+0x48>
 800320e:	6811      	ldr	r1, [r2, #0]
 8003210:	1850      	adds	r0, r2, r1
 8003212:	42a0      	cmp	r0, r4
 8003214:	d10b      	bne.n	800322e <_free_r+0x72>
 8003216:	6820      	ldr	r0, [r4, #0]
 8003218:	4401      	add	r1, r0
 800321a:	1850      	adds	r0, r2, r1
 800321c:	4283      	cmp	r3, r0
 800321e:	6011      	str	r1, [r2, #0]
 8003220:	d1de      	bne.n	80031e0 <_free_r+0x24>
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4401      	add	r1, r0
 8003228:	6011      	str	r1, [r2, #0]
 800322a:	6053      	str	r3, [r2, #4]
 800322c:	e7d8      	b.n	80031e0 <_free_r+0x24>
 800322e:	d902      	bls.n	8003236 <_free_r+0x7a>
 8003230:	230c      	movs	r3, #12
 8003232:	602b      	str	r3, [r5, #0]
 8003234:	e7d4      	b.n	80031e0 <_free_r+0x24>
 8003236:	6820      	ldr	r0, [r4, #0]
 8003238:	1821      	adds	r1, r4, r0
 800323a:	428b      	cmp	r3, r1
 800323c:	bf01      	itttt	eq
 800323e:	6819      	ldreq	r1, [r3, #0]
 8003240:	685b      	ldreq	r3, [r3, #4]
 8003242:	1809      	addeq	r1, r1, r0
 8003244:	6021      	streq	r1, [r4, #0]
 8003246:	6063      	str	r3, [r4, #4]
 8003248:	6054      	str	r4, [r2, #4]
 800324a:	e7c9      	b.n	80031e0 <_free_r+0x24>
 800324c:	bd38      	pop	{r3, r4, r5, pc}
 800324e:	bf00      	nop
 8003250:	200000ac 	.word	0x200000ac

08003254 <_malloc_r>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	1ccd      	adds	r5, r1, #3
 8003258:	f025 0503 	bic.w	r5, r5, #3
 800325c:	3508      	adds	r5, #8
 800325e:	2d0c      	cmp	r5, #12
 8003260:	bf38      	it	cc
 8003262:	250c      	movcc	r5, #12
 8003264:	2d00      	cmp	r5, #0
 8003266:	4606      	mov	r6, r0
 8003268:	db01      	blt.n	800326e <_malloc_r+0x1a>
 800326a:	42a9      	cmp	r1, r5
 800326c:	d903      	bls.n	8003276 <_malloc_r+0x22>
 800326e:	230c      	movs	r3, #12
 8003270:	6033      	str	r3, [r6, #0]
 8003272:	2000      	movs	r0, #0
 8003274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003276:	f000 f87d 	bl	8003374 <__malloc_lock>
 800327a:	4921      	ldr	r1, [pc, #132]	; (8003300 <_malloc_r+0xac>)
 800327c:	680a      	ldr	r2, [r1, #0]
 800327e:	4614      	mov	r4, r2
 8003280:	b99c      	cbnz	r4, 80032aa <_malloc_r+0x56>
 8003282:	4f20      	ldr	r7, [pc, #128]	; (8003304 <_malloc_r+0xb0>)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	b923      	cbnz	r3, 8003292 <_malloc_r+0x3e>
 8003288:	4621      	mov	r1, r4
 800328a:	4630      	mov	r0, r6
 800328c:	f000 f862 	bl	8003354 <_sbrk_r>
 8003290:	6038      	str	r0, [r7, #0]
 8003292:	4629      	mov	r1, r5
 8003294:	4630      	mov	r0, r6
 8003296:	f000 f85d 	bl	8003354 <_sbrk_r>
 800329a:	1c43      	adds	r3, r0, #1
 800329c:	d123      	bne.n	80032e6 <_malloc_r+0x92>
 800329e:	230c      	movs	r3, #12
 80032a0:	4630      	mov	r0, r6
 80032a2:	6033      	str	r3, [r6, #0]
 80032a4:	f000 f86c 	bl	8003380 <__malloc_unlock>
 80032a8:	e7e3      	b.n	8003272 <_malloc_r+0x1e>
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	1b5b      	subs	r3, r3, r5
 80032ae:	d417      	bmi.n	80032e0 <_malloc_r+0x8c>
 80032b0:	2b0b      	cmp	r3, #11
 80032b2:	d903      	bls.n	80032bc <_malloc_r+0x68>
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	441c      	add	r4, r3
 80032b8:	6025      	str	r5, [r4, #0]
 80032ba:	e004      	b.n	80032c6 <_malloc_r+0x72>
 80032bc:	6863      	ldr	r3, [r4, #4]
 80032be:	42a2      	cmp	r2, r4
 80032c0:	bf0c      	ite	eq
 80032c2:	600b      	streq	r3, [r1, #0]
 80032c4:	6053      	strne	r3, [r2, #4]
 80032c6:	4630      	mov	r0, r6
 80032c8:	f000 f85a 	bl	8003380 <__malloc_unlock>
 80032cc:	f104 000b 	add.w	r0, r4, #11
 80032d0:	1d23      	adds	r3, r4, #4
 80032d2:	f020 0007 	bic.w	r0, r0, #7
 80032d6:	1ac2      	subs	r2, r0, r3
 80032d8:	d0cc      	beq.n	8003274 <_malloc_r+0x20>
 80032da:	1a1b      	subs	r3, r3, r0
 80032dc:	50a3      	str	r3, [r4, r2]
 80032de:	e7c9      	b.n	8003274 <_malloc_r+0x20>
 80032e0:	4622      	mov	r2, r4
 80032e2:	6864      	ldr	r4, [r4, #4]
 80032e4:	e7cc      	b.n	8003280 <_malloc_r+0x2c>
 80032e6:	1cc4      	adds	r4, r0, #3
 80032e8:	f024 0403 	bic.w	r4, r4, #3
 80032ec:	42a0      	cmp	r0, r4
 80032ee:	d0e3      	beq.n	80032b8 <_malloc_r+0x64>
 80032f0:	1a21      	subs	r1, r4, r0
 80032f2:	4630      	mov	r0, r6
 80032f4:	f000 f82e 	bl	8003354 <_sbrk_r>
 80032f8:	3001      	adds	r0, #1
 80032fa:	d1dd      	bne.n	80032b8 <_malloc_r+0x64>
 80032fc:	e7cf      	b.n	800329e <_malloc_r+0x4a>
 80032fe:	bf00      	nop
 8003300:	200000ac 	.word	0x200000ac
 8003304:	200000b0 	.word	0x200000b0

08003308 <_realloc_r>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	4607      	mov	r7, r0
 800330c:	4614      	mov	r4, r2
 800330e:	460e      	mov	r6, r1
 8003310:	b921      	cbnz	r1, 800331c <_realloc_r+0x14>
 8003312:	4611      	mov	r1, r2
 8003314:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003318:	f7ff bf9c 	b.w	8003254 <_malloc_r>
 800331c:	b922      	cbnz	r2, 8003328 <_realloc_r+0x20>
 800331e:	f7ff ff4d 	bl	80031bc <_free_r>
 8003322:	4625      	mov	r5, r4
 8003324:	4628      	mov	r0, r5
 8003326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003328:	f000 f830 	bl	800338c <_malloc_usable_size_r>
 800332c:	42a0      	cmp	r0, r4
 800332e:	d20f      	bcs.n	8003350 <_realloc_r+0x48>
 8003330:	4621      	mov	r1, r4
 8003332:	4638      	mov	r0, r7
 8003334:	f7ff ff8e 	bl	8003254 <_malloc_r>
 8003338:	4605      	mov	r5, r0
 800333a:	2800      	cmp	r0, #0
 800333c:	d0f2      	beq.n	8003324 <_realloc_r+0x1c>
 800333e:	4631      	mov	r1, r6
 8003340:	4622      	mov	r2, r4
 8003342:	f7ff ff13 	bl	800316c <memcpy>
 8003346:	4631      	mov	r1, r6
 8003348:	4638      	mov	r0, r7
 800334a:	f7ff ff37 	bl	80031bc <_free_r>
 800334e:	e7e9      	b.n	8003324 <_realloc_r+0x1c>
 8003350:	4635      	mov	r5, r6
 8003352:	e7e7      	b.n	8003324 <_realloc_r+0x1c>

08003354 <_sbrk_r>:
 8003354:	b538      	push	{r3, r4, r5, lr}
 8003356:	2300      	movs	r3, #0
 8003358:	4d05      	ldr	r5, [pc, #20]	; (8003370 <_sbrk_r+0x1c>)
 800335a:	4604      	mov	r4, r0
 800335c:	4608      	mov	r0, r1
 800335e:	602b      	str	r3, [r5, #0]
 8003360:	f7fd f980 	bl	8000664 <_sbrk>
 8003364:	1c43      	adds	r3, r0, #1
 8003366:	d102      	bne.n	800336e <_sbrk_r+0x1a>
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	b103      	cbz	r3, 800336e <_sbrk_r+0x1a>
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	bd38      	pop	{r3, r4, r5, pc}
 8003370:	200001cc 	.word	0x200001cc

08003374 <__malloc_lock>:
 8003374:	4801      	ldr	r0, [pc, #4]	; (800337c <__malloc_lock+0x8>)
 8003376:	f000 b811 	b.w	800339c <__retarget_lock_acquire_recursive>
 800337a:	bf00      	nop
 800337c:	200001d4 	.word	0x200001d4

08003380 <__malloc_unlock>:
 8003380:	4801      	ldr	r0, [pc, #4]	; (8003388 <__malloc_unlock+0x8>)
 8003382:	f000 b80c 	b.w	800339e <__retarget_lock_release_recursive>
 8003386:	bf00      	nop
 8003388:	200001d4 	.word	0x200001d4

0800338c <_malloc_usable_size_r>:
 800338c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003390:	1f18      	subs	r0, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	bfbc      	itt	lt
 8003396:	580b      	ldrlt	r3, [r1, r0]
 8003398:	18c0      	addlt	r0, r0, r3
 800339a:	4770      	bx	lr

0800339c <__retarget_lock_acquire_recursive>:
 800339c:	4770      	bx	lr

0800339e <__retarget_lock_release_recursive>:
 800339e:	4770      	bx	lr

080033a0 <_init>:
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a2:	bf00      	nop
 80033a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a6:	bc08      	pop	{r3}
 80033a8:	469e      	mov	lr, r3
 80033aa:	4770      	bx	lr

080033ac <_fini>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	bf00      	nop
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr
