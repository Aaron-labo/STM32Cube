
DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054cc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  080056b8  080056b8  000156b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b04  08005b04  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005b04  08005b04  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b04  08005b04  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b04  08005b04  00015b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b08  08005b08  00015b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  200001dc  08005ce8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08005ce8  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd28  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002548  00000000  00000000  0002ff2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00032478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b70  00000000  00000000  00033100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5ce  00000000  00000000  00033c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1aa  00000000  00000000  0004f23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000999bb  00000000  00000000  0005d3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6da3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004404  00000000  00000000  000f6df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	0800569c 	.word	0x0800569c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	0800569c 	.word	0x0800569c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <delay_us>:
#include "dht11.h"
#include "tim.h"

void delay_us(uint16_t us) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
	uint16_t differ = 0xffff - us - 5;
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800102c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8001030:	33fa      	adds	r3, #250	; 0xfa
 8001032:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COUNTER(&htim7, differ);	//设定TIM7计数器起始值
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <delay_us+0x48>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	89fa      	ldrh	r2, [r7, #14]
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start(&htim7);		//启动定时器
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <delay_us+0x48>)
 800103e:	f001 fbcf 	bl	80027e0 <HAL_TIM_Base_Start>

	while (differ < 0xffff - 5) {	//判断
 8001042:	e003      	b.n	800104c <delay_us+0x30>
		differ = __HAL_TIM_GET_COUNTER(&htim7);		//查询计数器的计数值
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <delay_us+0x48>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104a:	81fb      	strh	r3, [r7, #14]
	while (differ < 0xffff - 5) {	//判断
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	f64f 72f9 	movw	r2, #65529	; 0xfff9
 8001052:	4293      	cmp	r3, r2
 8001054:	d9f6      	bls.n	8001044 <delay_us+0x28>
	}
	HAL_TIM_Base_Stop(&htim7);
 8001056:	4803      	ldr	r0, [pc, #12]	; (8001064 <delay_us+0x48>)
 8001058:	f001 fc1a 	bl	8002890 <HAL_TIM_Base_Stop>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000204 	.word	0x20000204

08001068 <DHT11_IO_IN>:

void DHT11_IO_IN(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = GPIO_PIN_11;
 800106e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001072:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001078:	463b      	mov	r3, r7
 800107a:	4619      	mov	r1, r3
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <DHT11_IO_IN+0x24>)
 800107e:	f000 fd81 	bl	8001b84 <HAL_GPIO_Init>
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40012000 	.word	0x40012000

08001090 <DHT11_IO_OUT>:

void DHT11_IO_OUT(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = GPIO_PIN_11;
 8001096:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800109a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	2301      	movs	r3, #1
 800109e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80010a4:	463b      	mov	r3, r7
 80010a6:	4619      	mov	r1, r3
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <DHT11_IO_OUT+0x28>)
 80010aa:	f000 fd6b 	bl	8001b84 <HAL_GPIO_Init>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40012000 	.word	0x40012000

080010bc <DHT11_Rst>:

//复位DHT11
void DHT11_Rst(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	DHT11_IO_OUT(); 	//设置为输出
 80010c0:	f7ff ffe6 	bl	8001090 <DHT11_IO_OUT>
	DHT11_DQ_OUT_LOW; 	//拉低DQ
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ca:	4808      	ldr	r0, [pc, #32]	; (80010ec <DHT11_Rst+0x30>)
 80010cc:	f000 ff05 	bl	8001eda <HAL_GPIO_WritePin>
	HAL_Delay(20);    	//拉低至少18ms
 80010d0:	2014      	movs	r0, #20
 80010d2:	f000 fc4f 	bl	8001974 <HAL_Delay>
	DHT11_DQ_OUT_HIGH; 	//DQ=1 
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <DHT11_Rst+0x30>)
 80010de:	f000 fefc 	bl	8001eda <HAL_GPIO_WritePin>
	delay_us(30);     	//主机拉高20~40us
 80010e2:	201e      	movs	r0, #30
 80010e4:	f7ff ff9a 	bl	800101c <delay_us>
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40012000 	.word	0x40012000

080010f0 <DHT11_Check>:

//等待DHT11的回应
//返回1:未检测到DHT11的存在
//返回0:存在
uint8_t DHT11_Check(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	uint8_t retry = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	71fb      	strb	r3, [r7, #7]
	DHT11_IO_IN();      //设置为输出
 80010fa:	f7ff ffb5 	bl	8001068 <DHT11_IO_IN>
	while (DHT11_DQ_IN && retry < 100)      //DHT11会拉低40~80us
 80010fe:	e005      	b.n	800110c <DHT11_Check+0x1c>
	{
		retry++;
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	3301      	adds	r3, #1
 8001104:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff ff88 	bl	800101c <delay_us>
	while (DHT11_DQ_IN && retry < 100)      //DHT11会拉低40~80us
 800110c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001110:	4815      	ldr	r0, [pc, #84]	; (8001168 <DHT11_Check+0x78>)
 8001112:	f000 fecb 	bl	8001eac <HAL_GPIO_ReadPin>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <DHT11_Check+0x32>
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	2b63      	cmp	r3, #99	; 0x63
 8001120:	d9ee      	bls.n	8001100 <DHT11_Check+0x10>
	};
	if (retry >= 100)
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b63      	cmp	r3, #99	; 0x63
 8001126:	d901      	bls.n	800112c <DHT11_Check+0x3c>
		return 1;
 8001128:	2301      	movs	r3, #1
 800112a:	e019      	b.n	8001160 <DHT11_Check+0x70>
	else
		retry = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	71fb      	strb	r3, [r7, #7]
	while (!DHT11_DQ_IN && retry < 100)      //DHT11拉低后会再次拉高40~80us
 8001130:	e005      	b.n	800113e <DHT11_Check+0x4e>
	{
		retry++;
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	3301      	adds	r3, #1
 8001136:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f7ff ff6f 	bl	800101c <delay_us>
	while (!DHT11_DQ_IN && retry < 100)      //DHT11拉低后会再次拉高40~80us
 800113e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001142:	4809      	ldr	r0, [pc, #36]	; (8001168 <DHT11_Check+0x78>)
 8001144:	f000 feb2 	bl	8001eac <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d102      	bne.n	8001154 <DHT11_Check+0x64>
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b63      	cmp	r3, #99	; 0x63
 8001152:	d9ee      	bls.n	8001132 <DHT11_Check+0x42>
	};
	if (retry >= 100)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b63      	cmp	r3, #99	; 0x63
 8001158:	d901      	bls.n	800115e <DHT11_Check+0x6e>
		return 1;
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <DHT11_Check+0x70>
	return 0;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40012000 	.word	0x40012000

0800116c <DHT11_Read_Bit>:

//从DHT11读取一个位
//返回值：1/0
uint8_t DHT11_Read_Bit(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
	uint8_t retry = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	71fb      	strb	r3, [r7, #7]
	while (DHT11_DQ_IN && retry < 100)      //等待变为低电平
 8001176:	e005      	b.n	8001184 <DHT11_Read_Bit+0x18>
	{
		retry++;
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	3301      	adds	r3, #1
 800117c:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff ff4c 	bl	800101c <delay_us>
	while (DHT11_DQ_IN && retry < 100)      //等待变为低电平
 8001184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001188:	4817      	ldr	r0, [pc, #92]	; (80011e8 <DHT11_Read_Bit+0x7c>)
 800118a:	f000 fe8f 	bl	8001eac <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d002      	beq.n	800119a <DHT11_Read_Bit+0x2e>
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	2b63      	cmp	r3, #99	; 0x63
 8001198:	d9ee      	bls.n	8001178 <DHT11_Read_Bit+0xc>
	}
	retry = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	71fb      	strb	r3, [r7, #7]
	while (!DHT11_DQ_IN && retry < 100)      //等待变高电平
 800119e:	e005      	b.n	80011ac <DHT11_Read_Bit+0x40>
	{
		retry++;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	3301      	adds	r3, #1
 80011a4:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff ff38 	bl	800101c <delay_us>
	while (!DHT11_DQ_IN && retry < 100)      //等待变高电平
 80011ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <DHT11_Read_Bit+0x7c>)
 80011b2:	f000 fe7b 	bl	8001eac <HAL_GPIO_ReadPin>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d102      	bne.n	80011c2 <DHT11_Read_Bit+0x56>
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b63      	cmp	r3, #99	; 0x63
 80011c0:	d9ee      	bls.n	80011a0 <DHT11_Read_Bit+0x34>
	}
	delay_us(40);      //等待40us
 80011c2:	2028      	movs	r0, #40	; 0x28
 80011c4:	f7ff ff2a 	bl	800101c <delay_us>
	if (DHT11_DQ_IN)
 80011c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011cc:	4806      	ldr	r0, [pc, #24]	; (80011e8 <DHT11_Read_Bit+0x7c>)
 80011ce:	f000 fe6d 	bl	8001eac <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <DHT11_Read_Bit+0x70>
		return 1;
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <DHT11_Read_Bit+0x72>
	else
		return 0;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40012000 	.word	0x40012000

080011ec <DHT11_Read_Byte>:

//从DHT11读取一个字节
//返回值：读到的数据
uint8_t DHT11_Read_Byte(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
	uint8_t i, dat;
	dat = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	e00c      	b.n	8001216 <DHT11_Read_Byte+0x2a>
		dat <<= 1;
 80011fc:	79bb      	ldrb	r3, [r7, #6]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	71bb      	strb	r3, [r7, #6]
		dat |= DHT11_Read_Bit();
 8001202:	f7ff ffb3 	bl	800116c <DHT11_Read_Bit>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	4313      	orrs	r3, r2
 800120e:	71bb      	strb	r3, [r7, #6]
	for (i = 0; i < 8; i++) {
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	3301      	adds	r3, #1
 8001214:	71fb      	strb	r3, [r7, #7]
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b07      	cmp	r3, #7
 800121a:	d9ef      	bls.n	80011fc <DHT11_Read_Byte+0x10>
	}
	return dat;
 800121c:	79bb      	ldrb	r3, [r7, #6]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <DHT11_Read_Data>:

//从DHT11读取一次数据
//temp:温度值(范围:0~50°)
//humi:湿度值(范围:20%~90%)
//返回值：0,正常;1,读取失败
uint8_t DHT11_Read_Data(float *temp, float *humi) {
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
	uint8_t buf[5];
	uint8_t i;
	DHT11_Rst();
 8001232:	f7ff ff43 	bl	80010bc <DHT11_Rst>
	if (DHT11_Check() == 0) {
 8001236:	f7ff ff5b 	bl	80010f0 <DHT11_Check>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d14c      	bne.n	80012da <DHT11_Read_Data+0xb2>
		for (i = 0; i < 5; i++)      //读取40位数据
 8001240:	2300      	movs	r3, #0
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	e00c      	b.n	8001260 <DHT11_Read_Data+0x38>
				{
			buf[i] = DHT11_Read_Byte();
 8001246:	7bfc      	ldrb	r4, [r7, #15]
 8001248:	f7ff ffd0 	bl	80011ec <DHT11_Read_Byte>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	f107 0310 	add.w	r3, r7, #16
 8001254:	4423      	add	r3, r4
 8001256:	f803 2c08 	strb.w	r2, [r3, #-8]
		for (i = 0; i < 5; i++)      //读取40位数据
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	3301      	adds	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	2b04      	cmp	r3, #4
 8001264:	d9ef      	bls.n	8001246 <DHT11_Read_Data+0x1e>
		}
		if ((buf[0] + buf[1] + buf[2] + buf[3]) == buf[4]) {
 8001266:	7a3b      	ldrb	r3, [r7, #8]
 8001268:	461a      	mov	r2, r3
 800126a:	7a7b      	ldrb	r3, [r7, #9]
 800126c:	4413      	add	r3, r2
 800126e:	7aba      	ldrb	r2, [r7, #10]
 8001270:	4413      	add	r3, r2
 8001272:	7afa      	ldrb	r2, [r7, #11]
 8001274:	4413      	add	r3, r2
 8001276:	7b3a      	ldrb	r2, [r7, #12]
 8001278:	4293      	cmp	r3, r2
 800127a:	d130      	bne.n	80012de <DHT11_Read_Data+0xb6>
			*humi = (float)buf[0] + (float)buf[1]/100;
 800127c:	7a3b      	ldrb	r3, [r7, #8]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fd24 	bl	8000ccc <__aeabi_ui2f>
 8001284:	4604      	mov	r4, r0
 8001286:	7a7b      	ldrb	r3, [r7, #9]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fd1f 	bl	8000ccc <__aeabi_ui2f>
 800128e:	4603      	mov	r3, r0
 8001290:	4915      	ldr	r1, [pc, #84]	; (80012e8 <DHT11_Read_Data+0xc0>)
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff fe26 	bl	8000ee4 <__aeabi_fdiv>
 8001298:	4603      	mov	r3, r0
 800129a:	4619      	mov	r1, r3
 800129c:	4620      	mov	r0, r4
 800129e:	f7ff fc65 	bl	8000b6c <__addsf3>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	601a      	str	r2, [r3, #0]
			*temp = (float)buf[2] + (float)buf[3]/100;
 80012aa:	7abb      	ldrb	r3, [r7, #10]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff fd0d 	bl	8000ccc <__aeabi_ui2f>
 80012b2:	4604      	mov	r4, r0
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fd08 	bl	8000ccc <__aeabi_ui2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	490a      	ldr	r1, [pc, #40]	; (80012e8 <DHT11_Read_Data+0xc0>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fe0f 	bl	8000ee4 <__aeabi_fdiv>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4619      	mov	r1, r3
 80012ca:	4620      	mov	r0, r4
 80012cc:	f7ff fc4e 	bl	8000b6c <__addsf3>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	e001      	b.n	80012de <DHT11_Read_Data+0xb6>
//			*humi = (buf[0] << 8) + buf[1];
//			*temp = (buf[2] << 8) + buf[3];
		}
	} else
		return 1;
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <DHT11_Read_Data+0xb8>
	return 0;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd90      	pop	{r4, r7, pc}
 80012e8:	42c80000 	.word	0x42c80000

080012ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f2:	f107 0308 	add.w	r3, r7, #8
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_GPIO_Init+0x78>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a17      	ldr	r2, [pc, #92]	; (8001364 <MX_GPIO_Init+0x78>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_GPIO_Init+0x78>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_GPIO_Init+0x78>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a11      	ldr	r2, [pc, #68]	; (8001364 <MX_GPIO_Init+0x78>)
 800131e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_GPIO_Init+0x78>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_RESET);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001336:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_GPIO_Init+0x7c>)
 8001338:	f000 fdcf 	bl	8001eda <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800133c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001340:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001346:	2302      	movs	r3, #2
 8001348:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4619      	mov	r1, r3
 8001354:	4804      	ldr	r0, [pc, #16]	; (8001368 <MX_GPIO_Init+0x7c>)
 8001356:	f000 fc15 	bl	8001b84 <HAL_GPIO_Init>

}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40021000 	.word	0x40021000
 8001368:	40012000 	.word	0x40012000

0800136c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001372:	f000 fa9d 	bl	80018b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001376:	f000 f827 	bl	80013c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800137a:	f7ff ffb7 	bl	80012ec <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800137e:	f000 f9fb 	bl	8001778 <MX_USART1_UART_Init>
	MX_TIM7_Init();
 8001382:	f000 f9a5 	bl	80016d0 <MX_TIM7_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		DHT11_Read_Data(&temperature, &humidity);
 8001386:	463a      	mov	r2, r7
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff4b 	bl	8001228 <DHT11_Read_Data>
		printf("DHT11 Temperature = %.2f degree\r\n", temperature);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff f8b3 	bl	8000500 <__aeabi_f2d>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	4808      	ldr	r0, [pc, #32]	; (80013c0 <main+0x54>)
 80013a0:	f002 f8f0 	bl	8003584 <iprintf>
		printf("DHT11 Humidity = %.2f%%\r\n", humidity);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8aa 	bl	8000500 <__aeabi_f2d>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <main+0x58>)
 80013b2:	f002 f8e7 	bl	8003584 <iprintf>
		HAL_Delay(500);
 80013b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ba:	f000 fadb 	bl	8001974 <HAL_Delay>
		DHT11_Read_Data(&temperature, &humidity);
 80013be:	e7e2      	b.n	8001386 <main+0x1a>
 80013c0:	080056b8 	.word	0x080056b8
 80013c4:	080056dc 	.word	0x080056dc

080013c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b090      	sub	sp, #64	; 0x40
 80013cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013ce:	f107 0318 	add.w	r3, r7, #24
 80013d2:	2228      	movs	r2, #40	; 0x28
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f001 fc6c 	bl	8002cb4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f8:	2301      	movs	r3, #1
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fc:	2302      	movs	r3, #2
 80013fe:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001400:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001404:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001406:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800140a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	4618      	mov	r0, r3
 8001412:	f000 fd7b 	bl	8001f0c <HAL_RCC_OscConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x58>
		Error_Handler();
 800141c:	f000 f832 	bl	8001484 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001420:	230f      	movs	r3, #15
 8001422:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001424:	2302      	movs	r3, #2
 8001426:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800142c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001430:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2102      	movs	r1, #2
 800143a:	4618      	mov	r0, r3
 800143c:	f000 ffe6 	bl	800240c <HAL_RCC_ClockConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0x82>
		Error_Handler();
 8001446:	f000 f81d 	bl	8001484 <Error_Handler>
	}
}
 800144a:	bf00      	nop
 800144c:	3740      	adds	r7, #64	; 0x40
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
// 具体哪个串口可以更改huart2为其它串口
// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 800145c:	bf00      	nop
 800145e:	4b08      	ldr	r3, [pc, #32]	; (8001480 <__io_putchar+0x2c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f9      	beq.n	800145e <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	b2da      	uxtb	r2, r3
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <__io_putchar+0x2c>)
 8001470:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

	return ch;
 8001472:	687b      	ldr	r3, [r7, #4]
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40013800 	.word	0x40013800

08001484 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001488:	b672      	cpsid	i
}
 800148a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800148c:	e7fe      	b.n	800148c <Error_Handler+0x8>
	...

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_MspInit+0x5c>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	4a14      	ldr	r2, [pc, #80]	; (80014ec <HAL_MspInit+0x5c>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6193      	str	r3, [r2, #24]
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_MspInit+0x5c>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <HAL_MspInit+0x5c>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <HAL_MspInit+0x5c>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	61d3      	str	r3, [r2, #28]
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_MspInit+0x5c>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_MspInit+0x60>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	4a04      	ldr	r2, [pc, #16]	; (80014f0 <HAL_MspInit+0x60>)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	40021000 	.word	0x40021000
 80014f0:	40010000 	.word	0x40010000

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	bc80      	pop	{r7}
 8001534:	4770      	bx	lr

08001536 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153a:	f000 f9ff 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}

08001542 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
	return 1;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <_kill>:

int _kill(int pid, int sig)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800155a:	f001 fb81 	bl	8002c60 <__errno>
 800155e:	4603      	mov	r3, r0
 8001560:	2216      	movs	r2, #22
 8001562:	601a      	str	r2, [r3, #0]
	return -1;
 8001564:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <_exit>:

void _exit (int status)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ffe7 	bl	8001550 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001582:	e7fe      	b.n	8001582 <_exit+0x12>

08001584 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	e00a      	b.n	80015ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001596:	f3af 8000 	nop.w
 800159a:	4601      	mov	r1, r0
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60ba      	str	r2, [r7, #8]
 80015a2:	b2ca      	uxtb	r2, r1
 80015a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	3301      	adds	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	dbf0      	blt.n	8001596 <_read+0x12>
	}

return len;
 80015b4:	687b      	ldr	r3, [r7, #4]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	e009      	b.n	80015e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	60ba      	str	r2, [r7, #8]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff3b 	bl	8001454 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dbf1      	blt.n	80015d0 <_write+0x12>
	}
	return len;
 80015ec:	687b      	ldr	r3, [r7, #4]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <_close>:

int _close(int file)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
	return -1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161c:	605a      	str	r2, [r3, #4]
	return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <_isatty>:

int _isatty(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
	return 1;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr

0800163e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800163e:	b480      	push	{r7}
 8001640:	b085      	sub	sp, #20
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
	return 0;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
	...

08001658 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <_sbrk+0x5c>)
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <_sbrk+0x60>)
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d102      	bne.n	800167a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <_sbrk+0x64>)
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <_sbrk+0x68>)
 8001678:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <_sbrk+0x64>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4413      	add	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	429a      	cmp	r2, r3
 8001686:	d207      	bcs.n	8001698 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001688:	f001 faea 	bl	8002c60 <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	220c      	movs	r2, #12
 8001690:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	e009      	b.n	80016ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001698:	4b08      	ldr	r3, [pc, #32]	; (80016bc <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800169e:	4b07      	ldr	r3, [pc, #28]	; (80016bc <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	4a05      	ldr	r2, [pc, #20]	; (80016bc <_sbrk+0x64>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3718      	adds	r7, #24
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20010000 	.word	0x20010000
 80016b8:	00000400 	.word	0x00000400
 80016bc:	200001f8 	.word	0x200001f8
 80016c0:	200002a0 	.word	0x200002a0

080016c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d6:	463b      	mov	r3, r7
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_TIM7_Init+0x64>)
 80016e0:	4a15      	ldr	r2, [pc, #84]	; (8001738 <MX_TIM7_Init+0x68>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 72-1;
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <MX_TIM7_Init+0x64>)
 80016e6:	2247      	movs	r2, #71	; 0x47
 80016e8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <MX_TIM7_Init+0x64>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <MX_TIM7_Init+0x64>)
 80016f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016f6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <MX_TIM7_Init+0x64>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80016fe:	480d      	ldr	r0, [pc, #52]	; (8001734 <MX_TIM7_Init+0x64>)
 8001700:	f001 f81e 	bl	8002740 <HAL_TIM_Base_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800170a:	f7ff febb 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001716:	463b      	mov	r3, r7
 8001718:	4619      	mov	r1, r3
 800171a:	4806      	ldr	r0, [pc, #24]	; (8001734 <MX_TIM7_Init+0x64>)
 800171c:	f001 f958 	bl	80029d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001726:	f7ff fead 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000204 	.word	0x20000204
 8001738:	40001400 	.word	0x40001400

0800173c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_TIM_Base_MspInit+0x34>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d10b      	bne.n	8001766 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_TIM_Base_MspInit+0x38>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_TIM_Base_MspInit+0x38>)
 8001754:	f043 0320 	orr.w	r3, r3, #32
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_TIM_Base_MspInit+0x38>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	40001400 	.word	0x40001400
 8001774:	40021000 	.word	0x40021000

08001778 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <MX_USART1_UART_Init+0x50>)
 8001780:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_USART1_UART_Init+0x4c>)
 80017b0:	f001 f97a 	bl	8002aa8 <HAL_UART_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017ba:	f7ff fe63 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	2000024c 	.word	0x2000024c
 80017c8:	40013800 	.word	0x40013800

080017cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d4:	f107 0310 	add.w	r3, r7, #16
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a1c      	ldr	r2, [pc, #112]	; (8001858 <HAL_UART_MspInit+0x8c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d131      	bne.n	8001850 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_UART_MspInit+0x90>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a1a      	ldr	r2, [pc, #104]	; (800185c <HAL_UART_MspInit+0x90>)
 80017f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <HAL_UART_MspInit+0x90>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <HAL_UART_MspInit+0x90>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	4a14      	ldr	r2, [pc, #80]	; (800185c <HAL_UART_MspInit+0x90>)
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	6193      	str	r3, [r2, #24]
 8001810:	4b12      	ldr	r3, [pc, #72]	; (800185c <HAL_UART_MspInit+0x90>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800181c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001820:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	4619      	mov	r1, r3
 8001830:	480b      	ldr	r0, [pc, #44]	; (8001860 <HAL_UART_MspInit+0x94>)
 8001832:	f000 f9a7 	bl	8001b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001836:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	4619      	mov	r1, r3
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <HAL_UART_MspInit+0x94>)
 800184c:	f000 f99a 	bl	8001b84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40013800 	.word	0x40013800
 800185c:	40021000 	.word	0x40021000
 8001860:	40010800 	.word	0x40010800

08001864 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001864:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001866:	e003      	b.n	8001870 <LoopCopyDataInit>

08001868 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800186a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800186c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800186e:	3104      	adds	r1, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001870:	480a      	ldr	r0, [pc, #40]	; (800189c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001874:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001876:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001878:	d3f6      	bcc.n	8001868 <CopyDataInit>
  ldr r2, =_sbss
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800187c:	e002      	b.n	8001884 <LoopFillZerobss>

0800187e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001880:	f842 3b04 	str.w	r3, [r2], #4

08001884 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001884:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001886:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001888:	d3f9      	bcc.n	800187e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800188a:	f7ff ff1b 	bl	80016c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800188e:	f001 f9ed 	bl	8002c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001892:	f7ff fd6b 	bl	800136c <main>
  bx lr
 8001896:	4770      	bx	lr
  ldr r3, =_sidata
 8001898:	08005b0c 	.word	0x08005b0c
  ldr r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018a0:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80018a4:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80018a8:	200002a0 	.word	0x200002a0

080018ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018ac:	e7fe      	b.n	80018ac <ADC1_2_IRQHandler>
	...

080018b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_Init+0x28>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_Init+0x28>)
 80018ba:	f043 0310 	orr.w	r3, r3, #16
 80018be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 f92b 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 f808 	bl	80018dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018cc:	f7ff fde0 	bl	8001490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40022000 	.word	0x40022000

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x54>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x58>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f935 	bl	8001b6a <HAL_SYSTICK_Config>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e00e      	b.n	8001928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d80a      	bhi.n	8001926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f000 f90b 	bl	8001b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800191c:	4a06      	ldr	r2, [pc, #24]	; (8001938 <HAL_InitTick+0x5c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000000 	.word	0x20000000
 8001934:	20000008 	.word	0x20000008
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001940:	4b05      	ldr	r3, [pc, #20]	; (8001958 <HAL_IncTick+0x1c>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b05      	ldr	r3, [pc, #20]	; (800195c <HAL_IncTick+0x20>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a03      	ldr	r2, [pc, #12]	; (800195c <HAL_IncTick+0x20>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr
 8001958:	20000008 	.word	0x20000008
 800195c:	2000028c 	.word	0x2000028c

08001960 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <HAL_GetTick+0x10>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	2000028c 	.word	0x2000028c

08001974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff fff0 	bl	8001960 <HAL_GetTick>
 8001980:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800198c:	d005      	beq.n	800199a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <HAL_Delay+0x44>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800199a:	bf00      	nop
 800199c:	f7ff ffe0 	bl	8001960 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d8f7      	bhi.n	800199c <HAL_Delay+0x28>
  {
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000008 	.word	0x20000008

080019bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019cc:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d2:	68ba      	ldr	r2, [r7, #8]
 80019d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ee:	4a04      	ldr	r2, [pc, #16]	; (8001a00 <__NVIC_SetPriorityGrouping+0x44>)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	60d3      	str	r3, [r2, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <__NVIC_GetPriorityGrouping+0x18>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	f003 0307 	and.w	r3, r3, #7
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	; (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	; (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
         );
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae8:	d301      	bcc.n	8001aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <SysTick_Config+0x40>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af6:	210f      	movs	r1, #15
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f7ff ff90 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <SysTick_Config+0x40>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <SysTick_Config+0x40>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff49 	bl	80019bc <__NVIC_SetPriorityGrouping>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff5e 	bl	8001a04 <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff90 	bl	8001a74 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5f 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffb0 	bl	8001ad8 <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b08b      	sub	sp, #44	; 0x2c
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b96:	e179      	b.n	8001e8c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69fa      	ldr	r2, [r7, #28]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	f040 8168 	bne.w	8001e86 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4aa0      	ldr	r2, [pc, #640]	; (8001e3c <HAL_GPIO_Init+0x2b8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d05e      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001bc0:	4a9e      	ldr	r2, [pc, #632]	; (8001e3c <HAL_GPIO_Init+0x2b8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d875      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bc6:	4a9e      	ldr	r2, [pc, #632]	; (8001e40 <HAL_GPIO_Init+0x2bc>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d058      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001bcc:	4a9c      	ldr	r2, [pc, #624]	; (8001e40 <HAL_GPIO_Init+0x2bc>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d86f      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bd2:	4a9c      	ldr	r2, [pc, #624]	; (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d052      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001bd8:	4a9a      	ldr	r2, [pc, #616]	; (8001e44 <HAL_GPIO_Init+0x2c0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d869      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bde:	4a9a      	ldr	r2, [pc, #616]	; (8001e48 <HAL_GPIO_Init+0x2c4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d04c      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001be4:	4a98      	ldr	r2, [pc, #608]	; (8001e48 <HAL_GPIO_Init+0x2c4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d863      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bea:	4a98      	ldr	r2, [pc, #608]	; (8001e4c <HAL_GPIO_Init+0x2c8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d046      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
 8001bf0:	4a96      	ldr	r2, [pc, #600]	; (8001e4c <HAL_GPIO_Init+0x2c8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d85d      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bf6:	2b12      	cmp	r3, #18
 8001bf8:	d82a      	bhi.n	8001c50 <HAL_GPIO_Init+0xcc>
 8001bfa:	2b12      	cmp	r3, #18
 8001bfc:	d859      	bhi.n	8001cb2 <HAL_GPIO_Init+0x12e>
 8001bfe:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <HAL_GPIO_Init+0x80>)
 8001c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c04:	08001c7f 	.word	0x08001c7f
 8001c08:	08001c59 	.word	0x08001c59
 8001c0c:	08001c6b 	.word	0x08001c6b
 8001c10:	08001cad 	.word	0x08001cad
 8001c14:	08001cb3 	.word	0x08001cb3
 8001c18:	08001cb3 	.word	0x08001cb3
 8001c1c:	08001cb3 	.word	0x08001cb3
 8001c20:	08001cb3 	.word	0x08001cb3
 8001c24:	08001cb3 	.word	0x08001cb3
 8001c28:	08001cb3 	.word	0x08001cb3
 8001c2c:	08001cb3 	.word	0x08001cb3
 8001c30:	08001cb3 	.word	0x08001cb3
 8001c34:	08001cb3 	.word	0x08001cb3
 8001c38:	08001cb3 	.word	0x08001cb3
 8001c3c:	08001cb3 	.word	0x08001cb3
 8001c40:	08001cb3 	.word	0x08001cb3
 8001c44:	08001cb3 	.word	0x08001cb3
 8001c48:	08001c61 	.word	0x08001c61
 8001c4c:	08001c75 	.word	0x08001c75
 8001c50:	4a7f      	ldr	r2, [pc, #508]	; (8001e50 <HAL_GPIO_Init+0x2cc>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c56:	e02c      	b.n	8001cb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	623b      	str	r3, [r7, #32]
          break;
 8001c5e:	e029      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	3304      	adds	r3, #4
 8001c66:	623b      	str	r3, [r7, #32]
          break;
 8001c68:	e024      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	3308      	adds	r3, #8
 8001c70:	623b      	str	r3, [r7, #32]
          break;
 8001c72:	e01f      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	330c      	adds	r3, #12
 8001c7a:	623b      	str	r3, [r7, #32]
          break;
 8001c7c:	e01a      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d102      	bne.n	8001c8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c86:	2304      	movs	r3, #4
 8001c88:	623b      	str	r3, [r7, #32]
          break;
 8001c8a:	e013      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d105      	bne.n	8001ca0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c94:	2308      	movs	r3, #8
 8001c96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	611a      	str	r2, [r3, #16]
          break;
 8001c9e:	e009      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	615a      	str	r2, [r3, #20]
          break;
 8001caa:	e003      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
          break;
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x130>
          break;
 8001cb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2bff      	cmp	r3, #255	; 0xff
 8001cb8:	d801      	bhi.n	8001cbe <HAL_GPIO_Init+0x13a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	e001      	b.n	8001cc2 <HAL_GPIO_Init+0x13e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2bff      	cmp	r3, #255	; 0xff
 8001cc8:	d802      	bhi.n	8001cd0 <HAL_GPIO_Init+0x14c>
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	e002      	b.n	8001cd6 <HAL_GPIO_Init+0x152>
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	3b08      	subs	r3, #8
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	210f      	movs	r1, #15
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	6a39      	ldr	r1, [r7, #32]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	f000 80c1 	beq.w	8001e86 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d04:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a52      	ldr	r2, [pc, #328]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b50      	ldr	r3, [pc, #320]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d1c:	4a4e      	ldr	r2, [pc, #312]	; (8001e58 <HAL_GPIO_Init+0x2d4>)
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	089b      	lsrs	r3, r3, #2
 8001d22:	3302      	adds	r3, #2
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a46      	ldr	r2, [pc, #280]	; (8001e5c <HAL_GPIO_Init+0x2d8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d01f      	beq.n	8001d88 <HAL_GPIO_Init+0x204>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a45      	ldr	r2, [pc, #276]	; (8001e60 <HAL_GPIO_Init+0x2dc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d019      	beq.n	8001d84 <HAL_GPIO_Init+0x200>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a44      	ldr	r2, [pc, #272]	; (8001e64 <HAL_GPIO_Init+0x2e0>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d013      	beq.n	8001d80 <HAL_GPIO_Init+0x1fc>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a43      	ldr	r2, [pc, #268]	; (8001e68 <HAL_GPIO_Init+0x2e4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d00d      	beq.n	8001d7c <HAL_GPIO_Init+0x1f8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a42      	ldr	r2, [pc, #264]	; (8001e6c <HAL_GPIO_Init+0x2e8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d007      	beq.n	8001d78 <HAL_GPIO_Init+0x1f4>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a41      	ldr	r2, [pc, #260]	; (8001e70 <HAL_GPIO_Init+0x2ec>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d101      	bne.n	8001d74 <HAL_GPIO_Init+0x1f0>
 8001d70:	2305      	movs	r3, #5
 8001d72:	e00a      	b.n	8001d8a <HAL_GPIO_Init+0x206>
 8001d74:	2306      	movs	r3, #6
 8001d76:	e008      	b.n	8001d8a <HAL_GPIO_Init+0x206>
 8001d78:	2304      	movs	r3, #4
 8001d7a:	e006      	b.n	8001d8a <HAL_GPIO_Init+0x206>
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e004      	b.n	8001d8a <HAL_GPIO_Init+0x206>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e002      	b.n	8001d8a <HAL_GPIO_Init+0x206>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <HAL_GPIO_Init+0x206>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d8c:	f002 0203 	and.w	r2, r2, #3
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	4093      	lsls	r3, r2
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d9a:	492f      	ldr	r1, [pc, #188]	; (8001e58 <HAL_GPIO_Init+0x2d4>)
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001db4:	4b2f      	ldr	r3, [pc, #188]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	492e      	ldr	r1, [pc, #184]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	600b      	str	r3, [r1, #0]
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dc2:	4b2c      	ldr	r3, [pc, #176]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	492a      	ldr	r1, [pc, #168]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d006      	beq.n	8001dea <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ddc:	4b25      	ldr	r3, [pc, #148]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	4924      	ldr	r1, [pc, #144]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dea:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	4920      	ldr	r1, [pc, #128]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d006      	beq.n	8001e12 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	491a      	ldr	r1, [pc, #104]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	608b      	str	r3, [r1, #8]
 8001e10:	e006      	b.n	8001e20 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4916      	ldr	r1, [pc, #88]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d025      	beq.n	8001e78 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	4910      	ldr	r1, [pc, #64]	; (8001e74 <HAL_GPIO_Init+0x2f0>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60cb      	str	r3, [r1, #12]
 8001e38:	e025      	b.n	8001e86 <HAL_GPIO_Init+0x302>
 8001e3a:	bf00      	nop
 8001e3c:	10320000 	.word	0x10320000
 8001e40:	10310000 	.word	0x10310000
 8001e44:	10220000 	.word	0x10220000
 8001e48:	10210000 	.word	0x10210000
 8001e4c:	10120000 	.word	0x10120000
 8001e50:	10110000 	.word	0x10110000
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010000 	.word	0x40010000
 8001e5c:	40010800 	.word	0x40010800
 8001e60:	40010c00 	.word	0x40010c00
 8001e64:	40011000 	.word	0x40011000
 8001e68:	40011400 	.word	0x40011400
 8001e6c:	40011800 	.word	0x40011800
 8001e70:	40011c00 	.word	0x40011c00
 8001e74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <HAL_GPIO_Init+0x324>)
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	4909      	ldr	r1, [pc, #36]	; (8001ea8 <HAL_GPIO_Init+0x324>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	3301      	adds	r3, #1
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	fa22 f303 	lsr.w	r3, r2, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f47f ae7e 	bne.w	8001b98 <HAL_GPIO_Init+0x14>
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	372c      	adds	r7, #44	; 0x2c
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	40010400 	.word	0x40010400

08001eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	73fb      	strb	r3, [r7, #15]
 8001ec8:	e001      	b.n	8001ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	807b      	strh	r3, [r7, #2]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eea:	787b      	ldrb	r3, [r7, #1]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef0:	887a      	ldrh	r2, [r7, #2]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ef6:	e003      	b.n	8001f00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	041a      	lsls	r2, r3, #16
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	611a      	str	r2, [r3, #16]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bc80      	pop	{r7}
 8001f08:	4770      	bx	lr
	...

08001f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e26c      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	f000 8087 	beq.w	800203a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f2c:	4b92      	ldr	r3, [pc, #584]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 030c 	and.w	r3, r3, #12
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d00c      	beq.n	8001f52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f38:	4b8f      	ldr	r3, [pc, #572]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d112      	bne.n	8001f6a <HAL_RCC_OscConfig+0x5e>
 8001f44:	4b8c      	ldr	r3, [pc, #560]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f50:	d10b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f52:	4b89      	ldr	r3, [pc, #548]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d06c      	beq.n	8002038 <HAL_RCC_OscConfig+0x12c>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d168      	bne.n	8002038 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e246      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f72:	d106      	bne.n	8001f82 <HAL_RCC_OscConfig+0x76>
 8001f74:	4b80      	ldr	r3, [pc, #512]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a7f      	ldr	r2, [pc, #508]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	e02e      	b.n	8001fe0 <HAL_RCC_OscConfig+0xd4>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10c      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x98>
 8001f8a:	4b7b      	ldr	r3, [pc, #492]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a7a      	ldr	r2, [pc, #488]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	4b78      	ldr	r3, [pc, #480]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a77      	ldr	r2, [pc, #476]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	e01d      	b.n	8001fe0 <HAL_RCC_OscConfig+0xd4>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fac:	d10c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0xbc>
 8001fae:	4b72      	ldr	r3, [pc, #456]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a71      	ldr	r2, [pc, #452]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b6f      	ldr	r3, [pc, #444]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a6e      	ldr	r2, [pc, #440]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e00b      	b.n	8001fe0 <HAL_RCC_OscConfig+0xd4>
 8001fc8:	4b6b      	ldr	r3, [pc, #428]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a6a      	ldr	r2, [pc, #424]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b68      	ldr	r3, [pc, #416]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a67      	ldr	r2, [pc, #412]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d013      	beq.n	8002010 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fcba 	bl	8001960 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fcb6 	bl	8001960 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	; 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e1fa      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002002:	4b5d      	ldr	r3, [pc, #372]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xe4>
 800200e:	e014      	b.n	800203a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002010:	f7ff fca6 	bl	8001960 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002018:	f7ff fca2 	bl	8001960 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e1e6      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800202a:	4b53      	ldr	r3, [pc, #332]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1f0      	bne.n	8002018 <HAL_RCC_OscConfig+0x10c>
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d063      	beq.n	800210e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002046:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00b      	beq.n	800206a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002052:	4b49      	ldr	r3, [pc, #292]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b08      	cmp	r3, #8
 800205c:	d11c      	bne.n	8002098 <HAL_RCC_OscConfig+0x18c>
 800205e:	4b46      	ldr	r3, [pc, #280]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d116      	bne.n	8002098 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206a:	4b43      	ldr	r3, [pc, #268]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_RCC_OscConfig+0x176>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e1ba      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4939      	ldr	r1, [pc, #228]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002096:	e03a      	b.n	800210e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a0:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7ff fc5b 	bl	8001960 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ae:	f7ff fc57 	bl	8001960 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e19b      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	4b2d      	ldr	r3, [pc, #180]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020cc:	4b2a      	ldr	r3, [pc, #168]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4927      	ldr	r1, [pc, #156]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
 80020e0:	e015      	b.n	800210e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <HAL_RCC_OscConfig+0x270>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7ff fc3a 	bl	8001960 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f0:	f7ff fc36 	bl	8001960 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e17a      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d03a      	beq.n	8002190 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d019      	beq.n	8002156 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002122:	4b17      	ldr	r3, [pc, #92]	; (8002180 <HAL_RCC_OscConfig+0x274>)
 8002124:	2201      	movs	r2, #1
 8002126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002128:	f7ff fc1a 	bl	8001960 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002130:	f7ff fc16 	bl	8001960 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e15a      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002142:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <HAL_RCC_OscConfig+0x26c>)
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d0f0      	beq.n	8002130 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800214e:	2001      	movs	r0, #1
 8002150:	f000 fad8 	bl	8002704 <RCC_Delay>
 8002154:	e01c      	b.n	8002190 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_RCC_OscConfig+0x274>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215c:	f7ff fc00 	bl	8001960 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002162:	e00f      	b.n	8002184 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002164:	f7ff fbfc 	bl	8001960 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d908      	bls.n	8002184 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e140      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
 8002176:	bf00      	nop
 8002178:	40021000 	.word	0x40021000
 800217c:	42420000 	.word	0x42420000
 8002180:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002184:	4b9e      	ldr	r3, [pc, #632]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1e9      	bne.n	8002164 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80a6 	beq.w	80022ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a2:	4b97      	ldr	r3, [pc, #604]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10d      	bne.n	80021ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	4b94      	ldr	r3, [pc, #592]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4a93      	ldr	r2, [pc, #588]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b8:	61d3      	str	r3, [r2, #28]
 80021ba:	4b91      	ldr	r3, [pc, #580]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c6:	2301      	movs	r3, #1
 80021c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ca:	4b8e      	ldr	r3, [pc, #568]	; (8002404 <HAL_RCC_OscConfig+0x4f8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d118      	bne.n	8002208 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d6:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <HAL_RCC_OscConfig+0x4f8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a8a      	ldr	r2, [pc, #552]	; (8002404 <HAL_RCC_OscConfig+0x4f8>)
 80021dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e2:	f7ff fbbd 	bl	8001960 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ea:	f7ff fbb9 	bl	8001960 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b64      	cmp	r3, #100	; 0x64
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0fd      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	4b81      	ldr	r3, [pc, #516]	; (8002404 <HAL_RCC_OscConfig+0x4f8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d106      	bne.n	800221e <HAL_RCC_OscConfig+0x312>
 8002210:	4b7b      	ldr	r3, [pc, #492]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	4a7a      	ldr	r2, [pc, #488]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	6213      	str	r3, [r2, #32]
 800221c:	e02d      	b.n	800227a <HAL_RCC_OscConfig+0x36e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0x334>
 8002226:	4b76      	ldr	r3, [pc, #472]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a75      	ldr	r2, [pc, #468]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	6213      	str	r3, [r2, #32]
 8002232:	4b73      	ldr	r3, [pc, #460]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a72      	ldr	r2, [pc, #456]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 8002238:	f023 0304 	bic.w	r3, r3, #4
 800223c:	6213      	str	r3, [r2, #32]
 800223e:	e01c      	b.n	800227a <HAL_RCC_OscConfig+0x36e>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b05      	cmp	r3, #5
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_OscConfig+0x356>
 8002248:	4b6d      	ldr	r3, [pc, #436]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	4a6c      	ldr	r2, [pc, #432]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 800224e:	f043 0304 	orr.w	r3, r3, #4
 8002252:	6213      	str	r3, [r2, #32]
 8002254:	4b6a      	ldr	r3, [pc, #424]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a69      	ldr	r2, [pc, #420]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	e00b      	b.n	800227a <HAL_RCC_OscConfig+0x36e>
 8002262:	4b67      	ldr	r3, [pc, #412]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a66      	ldr	r2, [pc, #408]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	6213      	str	r3, [r2, #32]
 800226e:	4b64      	ldr	r3, [pc, #400]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a63      	ldr	r2, [pc, #396]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d015      	beq.n	80022ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7ff fb6d 	bl	8001960 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7ff fb69 	bl	8001960 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	; 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e0ab      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a0:	4b57      	ldr	r3, [pc, #348]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0ee      	beq.n	800228a <HAL_RCC_OscConfig+0x37e>
 80022ac:	e014      	b.n	80022d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ae:	f7ff fb57 	bl	8001960 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b4:	e00a      	b.n	80022cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b6:	f7ff fb53 	bl	8001960 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e095      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022cc:	4b4c      	ldr	r3, [pc, #304]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1ee      	bne.n	80022b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d105      	bne.n	80022ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022de:	4b48      	ldr	r3, [pc, #288]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	4a47      	ldr	r2, [pc, #284]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 80022e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 8081 	beq.w	80023f6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f4:	4b42      	ldr	r3, [pc, #264]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d061      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d146      	bne.n	8002396 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002308:	4b3f      	ldr	r3, [pc, #252]	; (8002408 <HAL_RCC_OscConfig+0x4fc>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7ff fb27 	bl	8001960 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002316:	f7ff fb23 	bl	8001960 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e067      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002328:	4b35      	ldr	r3, [pc, #212]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d108      	bne.n	8002350 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800233e:	4b30      	ldr	r3, [pc, #192]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	492d      	ldr	r1, [pc, #180]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002350:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a19      	ldr	r1, [r3, #32]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	430b      	orrs	r3, r1
 8002362:	4927      	ldr	r1, [pc, #156]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <HAL_RCC_OscConfig+0x4fc>)
 800236a:	2201      	movs	r2, #1
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7ff faf7 	bl	8001960 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7ff faf3 	bl	8001960 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e037      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002388:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x46a>
 8002394:	e02f      	b.n	80023f6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002396:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <HAL_RCC_OscConfig+0x4fc>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff fae0 	bl	8001960 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a4:	f7ff fadc 	bl	8001960 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e020      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x498>
 80023c2:	e018      	b.n	80023f6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e013      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_OscConfig+0x4f4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d001      	beq.n	80023f6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40021000 	.word	0x40021000
 8002404:	40007000 	.word	0x40007000
 8002408:	42420060 	.word	0x42420060

0800240c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0d0      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002420:	4b6a      	ldr	r3, [pc, #424]	; (80025cc <HAL_RCC_ClockConfig+0x1c0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d910      	bls.n	8002450 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b67      	ldr	r3, [pc, #412]	; (80025cc <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 0207 	bic.w	r2, r3, #7
 8002436:	4965      	ldr	r1, [pc, #404]	; (80025cc <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b63      	ldr	r3, [pc, #396]	; (80025cc <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0b8      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002468:	4b59      	ldr	r3, [pc, #356]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4a58      	ldr	r2, [pc, #352]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002472:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002480:	4b53      	ldr	r3, [pc, #332]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a52      	ldr	r2, [pc, #328]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800248a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800248c:	4b50      	ldr	r3, [pc, #320]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	494d      	ldr	r1, [pc, #308]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d040      	beq.n	800252c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	4b47      	ldr	r3, [pc, #284]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d115      	bne.n	80024ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e07f      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ca:	4b41      	ldr	r3, [pc, #260]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d109      	bne.n	80024ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e073      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024da:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e06b      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ea:	4b39      	ldr	r3, [pc, #228]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f023 0203 	bic.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4936      	ldr	r1, [pc, #216]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024fc:	f7ff fa30 	bl	8001960 <HAL_GetTick>
 8002500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	e00a      	b.n	800251a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002504:	f7ff fa2c 	bl	8001960 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e053      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 020c 	and.w	r2, r3, #12
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	429a      	cmp	r2, r3
 800252a:	d1eb      	bne.n	8002504 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800252c:	4b27      	ldr	r3, [pc, #156]	; (80025cc <HAL_RCC_ClockConfig+0x1c0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d210      	bcs.n	800255c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b24      	ldr	r3, [pc, #144]	; (80025cc <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 0207 	bic.w	r2, r3, #7
 8002542:	4922      	ldr	r1, [pc, #136]	; (80025cc <HAL_RCC_ClockConfig+0x1c0>)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <HAL_RCC_ClockConfig+0x1c0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d001      	beq.n	800255c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e032      	b.n	80025c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d008      	beq.n	800257a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002568:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4916      	ldr	r1, [pc, #88]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	4313      	orrs	r3, r2
 8002578:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002586:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	490e      	ldr	r1, [pc, #56]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800259a:	f000 f821 	bl	80025e0 <HAL_RCC_GetSysClockFreq>
 800259e:	4602      	mov	r2, r0
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f003 030f 	and.w	r3, r3, #15
 80025aa:	490a      	ldr	r1, [pc, #40]	; (80025d4 <HAL_RCC_ClockConfig+0x1c8>)
 80025ac:	5ccb      	ldrb	r3, [r1, r3]
 80025ae:	fa22 f303 	lsr.w	r3, r2, r3
 80025b2:	4a09      	ldr	r2, [pc, #36]	; (80025d8 <HAL_RCC_ClockConfig+0x1cc>)
 80025b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_RCC_ClockConfig+0x1d0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff f98e 	bl	80018dc <HAL_InitTick>

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	40022000 	.word	0x40022000
 80025d0:	40021000 	.word	0x40021000
 80025d4:	08005708 	.word	0x08005708
 80025d8:	20000000 	.word	0x20000000
 80025dc:	20000004 	.word	0x20000004

080025e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e0:	b490      	push	{r4, r7}
 80025e2:	b08a      	sub	sp, #40	; 0x28
 80025e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025e6:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <HAL_RCC_GetSysClockFreq+0xb0>)
 80025e8:	1d3c      	adds	r4, r7, #4
 80025ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025f0:	f240 2301 	movw	r3, #513	; 0x201
 80025f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_RCC_GetSysClockFreq+0xb4>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b04      	cmp	r3, #4
 8002618:	d002      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x40>
 800261a:	2b08      	cmp	r3, #8
 800261c:	d003      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0x46>
 800261e:	e02d      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002620:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002622:	623b      	str	r3, [r7, #32]
      break;
 8002624:	e02d      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	0c9b      	lsrs	r3, r3, #18
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002632:	4413      	add	r3, r2
 8002634:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002638:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	0c5b      	lsrs	r3, r3, #17
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002652:	4413      	add	r3, r2
 8002654:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002658:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	4a0e      	ldr	r2, [pc, #56]	; (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 800265e:	fb02 f203 	mul.w	r2, r2, r3
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
 800266a:	e004      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	4a0b      	ldr	r2, [pc, #44]	; (800269c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002670:	fb02 f303 	mul.w	r3, r2, r3
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	623b      	str	r3, [r7, #32]
      break;
 800267a:	e002      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_RCC_GetSysClockFreq+0xb8>)
 800267e:	623b      	str	r3, [r7, #32]
      break;
 8002680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002682:	6a3b      	ldr	r3, [r7, #32]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3728      	adds	r7, #40	; 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bc90      	pop	{r4, r7}
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	080056f8 	.word	0x080056f8
 8002694:	40021000 	.word	0x40021000
 8002698:	007a1200 	.word	0x007a1200
 800269c:	003d0900 	.word	0x003d0900

080026a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a4:	4b02      	ldr	r3, [pc, #8]	; (80026b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr
 80026b0:	20000000 	.word	0x20000000

080026b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026b8:	f7ff fff2 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	0a1b      	lsrs	r3, r3, #8
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4903      	ldr	r1, [pc, #12]	; (80026d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40021000 	.word	0x40021000
 80026d8:	08005718 	.word	0x08005718

080026dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026e0:	f7ff ffde 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	0adb      	lsrs	r3, r3, #11
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4903      	ldr	r1, [pc, #12]	; (8002700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	08005718 	.word	0x08005718

08002704 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <RCC_Delay+0x34>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <RCC_Delay+0x38>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	0a5b      	lsrs	r3, r3, #9
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002720:	bf00      	nop
  }
  while (Delay --);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1e5a      	subs	r2, r3, #1
 8002726:	60fa      	str	r2, [r7, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f9      	bne.n	8002720 <RCC_Delay+0x1c>
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	20000000 	.word	0x20000000
 800273c:	10624dd3 	.word	0x10624dd3

08002740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e041      	b.n	80027d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe ffe8 	bl	800173c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f000 f8ac 	bl	80028dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d001      	beq.n	80027f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e03c      	b.n	8002872 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1d      	ldr	r2, [pc, #116]	; (800287c <HAL_TIM_Base_Start+0x9c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d018      	beq.n	800283c <HAL_TIM_Base_Start+0x5c>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1c      	ldr	r2, [pc, #112]	; (8002880 <HAL_TIM_Base_Start+0xa0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d013      	beq.n	800283c <HAL_TIM_Base_Start+0x5c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800281c:	d00e      	beq.n	800283c <HAL_TIM_Base_Start+0x5c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_TIM_Base_Start+0xa4>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d009      	beq.n	800283c <HAL_TIM_Base_Start+0x5c>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a16      	ldr	r2, [pc, #88]	; (8002888 <HAL_TIM_Base_Start+0xa8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d004      	beq.n	800283c <HAL_TIM_Base_Start+0x5c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a15      	ldr	r2, [pc, #84]	; (800288c <HAL_TIM_Base_Start+0xac>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d111      	bne.n	8002860 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b06      	cmp	r3, #6
 800284c:	d010      	beq.n	8002870 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285e:	e007      	b.n	8002870 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	40012c00 	.word	0x40012c00
 8002880:	40013400 	.word	0x40013400
 8002884:	40000400 	.word	0x40000400
 8002888:	40000800 	.word	0x40000800
 800288c:	40000c00 	.word	0x40000c00

08002890 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6a1a      	ldr	r2, [r3, #32]
 800289e:	f241 1311 	movw	r3, #4369	; 0x1111
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10f      	bne.n	80028c8 <HAL_TIM_Base_Stop+0x38>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	f240 4344 	movw	r3, #1092	; 0x444
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d107      	bne.n	80028c8 <HAL_TIM_Base_Stop+0x38>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0201 	bic.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a33      	ldr	r2, [pc, #204]	; (80029bc <TIM_Base_SetConfig+0xe0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d013      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a32      	ldr	r2, [pc, #200]	; (80029c0 <TIM_Base_SetConfig+0xe4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00f      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002902:	d00b      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a2f      	ldr	r2, [pc, #188]	; (80029c4 <TIM_Base_SetConfig+0xe8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d007      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a2e      	ldr	r2, [pc, #184]	; (80029c8 <TIM_Base_SetConfig+0xec>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d003      	beq.n	800291c <TIM_Base_SetConfig+0x40>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a2d      	ldr	r2, [pc, #180]	; (80029cc <TIM_Base_SetConfig+0xf0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d108      	bne.n	800292e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a22      	ldr	r2, [pc, #136]	; (80029bc <TIM_Base_SetConfig+0xe0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d013      	beq.n	800295e <TIM_Base_SetConfig+0x82>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a21      	ldr	r2, [pc, #132]	; (80029c0 <TIM_Base_SetConfig+0xe4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d00f      	beq.n	800295e <TIM_Base_SetConfig+0x82>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002944:	d00b      	beq.n	800295e <TIM_Base_SetConfig+0x82>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a1e      	ldr	r2, [pc, #120]	; (80029c4 <TIM_Base_SetConfig+0xe8>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <TIM_Base_SetConfig+0x82>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <TIM_Base_SetConfig+0xec>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <TIM_Base_SetConfig+0x82>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <TIM_Base_SetConfig+0xf0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d108      	bne.n	8002970 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4313      	orrs	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a09      	ldr	r2, [pc, #36]	; (80029bc <TIM_Base_SetConfig+0xe0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <TIM_Base_SetConfig+0xc8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a08      	ldr	r2, [pc, #32]	; (80029c0 <TIM_Base_SetConfig+0xe4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d103      	bne.n	80029ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	615a      	str	r2, [r3, #20]
}
 80029b2:	bf00      	nop
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40013400 	.word	0x40013400
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800
 80029cc:	40000c00 	.word	0x40000c00

080029d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e050      	b.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d018      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a19      	ldr	r2, [pc, #100]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3e:	d00e      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a15      	ldr	r2, [pc, #84]	; (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10c      	bne.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	40013400 	.word	0x40013400
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40000800 	.word	0x40000800
 8002aa4:	40000c00 	.word	0x40000c00

08002aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e03f      	b.n	8002b3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe fe7c 	bl	80017cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2224      	movs	r2, #36	; 0x24
 8002ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f829 	bl	8002b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	691a      	ldr	r2, [r3, #16]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b7e:	f023 030c 	bic.w	r3, r3, #12
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	430b      	orrs	r3, r1
 8002b8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a2c      	ldr	r2, [pc, #176]	; (8002c58 <UART_SetConfig+0x114>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d103      	bne.n	8002bb4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bac:	f7ff fd96 	bl	80026dc <HAL_RCC_GetPCLK2Freq>
 8002bb0:	60f8      	str	r0, [r7, #12]
 8002bb2:	e002      	b.n	8002bba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bb4:	f7ff fd7e 	bl	80026b4 <HAL_RCC_GetPCLK1Freq>
 8002bb8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009a      	lsls	r2, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd0:	4a22      	ldr	r2, [pc, #136]	; (8002c5c <UART_SetConfig+0x118>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	0119      	lsls	r1, r3, #4
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	009a      	lsls	r2, r3, #2
 8002be4:	441a      	add	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <UART_SetConfig+0x118>)
 8002bf2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2064      	movs	r0, #100	; 0x64
 8002bfa:	fb00 f303 	mul.w	r3, r0, r3
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	3332      	adds	r3, #50	; 0x32
 8002c04:	4a15      	ldr	r2, [pc, #84]	; (8002c5c <UART_SetConfig+0x118>)
 8002c06:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c10:	4419      	add	r1, r3
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009a      	lsls	r2, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c28:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <UART_SetConfig+0x118>)
 8002c2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	2064      	movs	r0, #100	; 0x64
 8002c32:	fb00 f303 	mul.w	r3, r0, r3
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	3332      	adds	r3, #50	; 0x32
 8002c3c:	4a07      	ldr	r2, [pc, #28]	; (8002c5c <UART_SetConfig+0x118>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	095b      	lsrs	r3, r3, #5
 8002c44:	f003 020f 	and.w	r2, r3, #15
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	440a      	add	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c50:	bf00      	nop
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40013800 	.word	0x40013800
 8002c5c:	51eb851f 	.word	0x51eb851f

08002c60 <__errno>:
 8002c60:	4b01      	ldr	r3, [pc, #4]	; (8002c68 <__errno+0x8>)
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	2000000c 	.word	0x2000000c

08002c6c <__libc_init_array>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	2600      	movs	r6, #0
 8002c70:	4d0c      	ldr	r5, [pc, #48]	; (8002ca4 <__libc_init_array+0x38>)
 8002c72:	4c0d      	ldr	r4, [pc, #52]	; (8002ca8 <__libc_init_array+0x3c>)
 8002c74:	1b64      	subs	r4, r4, r5
 8002c76:	10a4      	asrs	r4, r4, #2
 8002c78:	42a6      	cmp	r6, r4
 8002c7a:	d109      	bne.n	8002c90 <__libc_init_array+0x24>
 8002c7c:	f002 fd0e 	bl	800569c <_init>
 8002c80:	2600      	movs	r6, #0
 8002c82:	4d0a      	ldr	r5, [pc, #40]	; (8002cac <__libc_init_array+0x40>)
 8002c84:	4c0a      	ldr	r4, [pc, #40]	; (8002cb0 <__libc_init_array+0x44>)
 8002c86:	1b64      	subs	r4, r4, r5
 8002c88:	10a4      	asrs	r4, r4, #2
 8002c8a:	42a6      	cmp	r6, r4
 8002c8c:	d105      	bne.n	8002c9a <__libc_init_array+0x2e>
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c94:	4798      	blx	r3
 8002c96:	3601      	adds	r6, #1
 8002c98:	e7ee      	b.n	8002c78 <__libc_init_array+0xc>
 8002c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9e:	4798      	blx	r3
 8002ca0:	3601      	adds	r6, #1
 8002ca2:	e7f2      	b.n	8002c8a <__libc_init_array+0x1e>
 8002ca4:	08005b04 	.word	0x08005b04
 8002ca8:	08005b04 	.word	0x08005b04
 8002cac:	08005b04 	.word	0x08005b04
 8002cb0:	08005b08 	.word	0x08005b08

08002cb4 <memset>:
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4402      	add	r2, r0
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d100      	bne.n	8002cbe <memset+0xa>
 8002cbc:	4770      	bx	lr
 8002cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8002cc2:	e7f9      	b.n	8002cb8 <memset+0x4>

08002cc4 <__cvt>:
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cca:	461f      	mov	r7, r3
 8002ccc:	bfbb      	ittet	lt
 8002cce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002cd2:	461f      	movlt	r7, r3
 8002cd4:	2300      	movge	r3, #0
 8002cd6:	232d      	movlt	r3, #45	; 0x2d
 8002cd8:	b088      	sub	sp, #32
 8002cda:	4614      	mov	r4, r2
 8002cdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002cde:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002ce0:	7013      	strb	r3, [r2, #0]
 8002ce2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002ce4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8002ce8:	f023 0820 	bic.w	r8, r3, #32
 8002cec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002cf0:	d005      	beq.n	8002cfe <__cvt+0x3a>
 8002cf2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002cf6:	d100      	bne.n	8002cfa <__cvt+0x36>
 8002cf8:	3501      	adds	r5, #1
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e000      	b.n	8002d00 <__cvt+0x3c>
 8002cfe:	2303      	movs	r3, #3
 8002d00:	aa07      	add	r2, sp, #28
 8002d02:	9204      	str	r2, [sp, #16]
 8002d04:	aa06      	add	r2, sp, #24
 8002d06:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002d0a:	e9cd 3500 	strd	r3, r5, [sp]
 8002d0e:	4622      	mov	r2, r4
 8002d10:	463b      	mov	r3, r7
 8002d12:	f000 fcdd 	bl	80036d0 <_dtoa_r>
 8002d16:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002d1a:	4606      	mov	r6, r0
 8002d1c:	d102      	bne.n	8002d24 <__cvt+0x60>
 8002d1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d20:	07db      	lsls	r3, r3, #31
 8002d22:	d522      	bpl.n	8002d6a <__cvt+0xa6>
 8002d24:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002d28:	eb06 0905 	add.w	r9, r6, r5
 8002d2c:	d110      	bne.n	8002d50 <__cvt+0x8c>
 8002d2e:	7833      	ldrb	r3, [r6, #0]
 8002d30:	2b30      	cmp	r3, #48	; 0x30
 8002d32:	d10a      	bne.n	8002d4a <__cvt+0x86>
 8002d34:	2200      	movs	r2, #0
 8002d36:	2300      	movs	r3, #0
 8002d38:	4620      	mov	r0, r4
 8002d3a:	4639      	mov	r1, r7
 8002d3c:	f7fd fea0 	bl	8000a80 <__aeabi_dcmpeq>
 8002d40:	b918      	cbnz	r0, 8002d4a <__cvt+0x86>
 8002d42:	f1c5 0501 	rsb	r5, r5, #1
 8002d46:	f8ca 5000 	str.w	r5, [sl]
 8002d4a:	f8da 3000 	ldr.w	r3, [sl]
 8002d4e:	4499      	add	r9, r3
 8002d50:	2200      	movs	r2, #0
 8002d52:	2300      	movs	r3, #0
 8002d54:	4620      	mov	r0, r4
 8002d56:	4639      	mov	r1, r7
 8002d58:	f7fd fe92 	bl	8000a80 <__aeabi_dcmpeq>
 8002d5c:	b108      	cbz	r0, 8002d62 <__cvt+0x9e>
 8002d5e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002d62:	2230      	movs	r2, #48	; 0x30
 8002d64:	9b07      	ldr	r3, [sp, #28]
 8002d66:	454b      	cmp	r3, r9
 8002d68:	d307      	bcc.n	8002d7a <__cvt+0xb6>
 8002d6a:	4630      	mov	r0, r6
 8002d6c:	9b07      	ldr	r3, [sp, #28]
 8002d6e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002d70:	1b9b      	subs	r3, r3, r6
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	b008      	add	sp, #32
 8002d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d7a:	1c59      	adds	r1, r3, #1
 8002d7c:	9107      	str	r1, [sp, #28]
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	e7f0      	b.n	8002d64 <__cvt+0xa0>

08002d82 <__exponent>:
 8002d82:	4603      	mov	r3, r0
 8002d84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d86:	2900      	cmp	r1, #0
 8002d88:	f803 2b02 	strb.w	r2, [r3], #2
 8002d8c:	bfb6      	itet	lt
 8002d8e:	222d      	movlt	r2, #45	; 0x2d
 8002d90:	222b      	movge	r2, #43	; 0x2b
 8002d92:	4249      	neglt	r1, r1
 8002d94:	2909      	cmp	r1, #9
 8002d96:	7042      	strb	r2, [r0, #1]
 8002d98:	dd2b      	ble.n	8002df2 <__exponent+0x70>
 8002d9a:	f10d 0407 	add.w	r4, sp, #7
 8002d9e:	46a4      	mov	ip, r4
 8002da0:	270a      	movs	r7, #10
 8002da2:	fb91 f6f7 	sdiv	r6, r1, r7
 8002da6:	460a      	mov	r2, r1
 8002da8:	46a6      	mov	lr, r4
 8002daa:	fb07 1516 	mls	r5, r7, r6, r1
 8002dae:	2a63      	cmp	r2, #99	; 0x63
 8002db0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002db4:	4631      	mov	r1, r6
 8002db6:	f104 34ff 	add.w	r4, r4, #4294967295
 8002dba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002dbe:	dcf0      	bgt.n	8002da2 <__exponent+0x20>
 8002dc0:	3130      	adds	r1, #48	; 0x30
 8002dc2:	f1ae 0502 	sub.w	r5, lr, #2
 8002dc6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002dca:	4629      	mov	r1, r5
 8002dcc:	1c44      	adds	r4, r0, #1
 8002dce:	4561      	cmp	r1, ip
 8002dd0:	d30a      	bcc.n	8002de8 <__exponent+0x66>
 8002dd2:	f10d 0209 	add.w	r2, sp, #9
 8002dd6:	eba2 020e 	sub.w	r2, r2, lr
 8002dda:	4565      	cmp	r5, ip
 8002ddc:	bf88      	it	hi
 8002dde:	2200      	movhi	r2, #0
 8002de0:	4413      	add	r3, r2
 8002de2:	1a18      	subs	r0, r3, r0
 8002de4:	b003      	add	sp, #12
 8002de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002dec:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002df0:	e7ed      	b.n	8002dce <__exponent+0x4c>
 8002df2:	2330      	movs	r3, #48	; 0x30
 8002df4:	3130      	adds	r1, #48	; 0x30
 8002df6:	7083      	strb	r3, [r0, #2]
 8002df8:	70c1      	strb	r1, [r0, #3]
 8002dfa:	1d03      	adds	r3, r0, #4
 8002dfc:	e7f1      	b.n	8002de2 <__exponent+0x60>
	...

08002e00 <_printf_float>:
 8002e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e04:	b091      	sub	sp, #68	; 0x44
 8002e06:	460c      	mov	r4, r1
 8002e08:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8002e0c:	4616      	mov	r6, r2
 8002e0e:	461f      	mov	r7, r3
 8002e10:	4605      	mov	r5, r0
 8002e12:	f001 fb41 	bl	8004498 <_localeconv_r>
 8002e16:	6803      	ldr	r3, [r0, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8002e1c:	f7fd fa04 	bl	8000228 <strlen>
 8002e20:	2300      	movs	r3, #0
 8002e22:	930e      	str	r3, [sp, #56]	; 0x38
 8002e24:	f8d8 3000 	ldr.w	r3, [r8]
 8002e28:	900a      	str	r0, [sp, #40]	; 0x28
 8002e2a:	3307      	adds	r3, #7
 8002e2c:	f023 0307 	bic.w	r3, r3, #7
 8002e30:	f103 0208 	add.w	r2, r3, #8
 8002e34:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002e38:	f8d4 b000 	ldr.w	fp, [r4]
 8002e3c:	f8c8 2000 	str.w	r2, [r8]
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002e48:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8002e4c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8002e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e52:	f04f 32ff 	mov.w	r2, #4294967295
 8002e56:	4640      	mov	r0, r8
 8002e58:	4b9c      	ldr	r3, [pc, #624]	; (80030cc <_printf_float+0x2cc>)
 8002e5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e5c:	f7fd fe42 	bl	8000ae4 <__aeabi_dcmpun>
 8002e60:	bb70      	cbnz	r0, 8002ec0 <_printf_float+0xc0>
 8002e62:	f04f 32ff 	mov.w	r2, #4294967295
 8002e66:	4640      	mov	r0, r8
 8002e68:	4b98      	ldr	r3, [pc, #608]	; (80030cc <_printf_float+0x2cc>)
 8002e6a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e6c:	f7fd fe1c 	bl	8000aa8 <__aeabi_dcmple>
 8002e70:	bb30      	cbnz	r0, 8002ec0 <_printf_float+0xc0>
 8002e72:	2200      	movs	r2, #0
 8002e74:	2300      	movs	r3, #0
 8002e76:	4640      	mov	r0, r8
 8002e78:	4651      	mov	r1, sl
 8002e7a:	f7fd fe0b 	bl	8000a94 <__aeabi_dcmplt>
 8002e7e:	b110      	cbz	r0, 8002e86 <_printf_float+0x86>
 8002e80:	232d      	movs	r3, #45	; 0x2d
 8002e82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e86:	4b92      	ldr	r3, [pc, #584]	; (80030d0 <_printf_float+0x2d0>)
 8002e88:	4892      	ldr	r0, [pc, #584]	; (80030d4 <_printf_float+0x2d4>)
 8002e8a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002e8e:	bf94      	ite	ls
 8002e90:	4698      	movls	r8, r3
 8002e92:	4680      	movhi	r8, r0
 8002e94:	2303      	movs	r3, #3
 8002e96:	f04f 0a00 	mov.w	sl, #0
 8002e9a:	6123      	str	r3, [r4, #16]
 8002e9c:	f02b 0304 	bic.w	r3, fp, #4
 8002ea0:	6023      	str	r3, [r4, #0]
 8002ea2:	4633      	mov	r3, r6
 8002ea4:	4621      	mov	r1, r4
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	9700      	str	r7, [sp, #0]
 8002eaa:	aa0f      	add	r2, sp, #60	; 0x3c
 8002eac:	f000 f9d4 	bl	8003258 <_printf_common>
 8002eb0:	3001      	adds	r0, #1
 8002eb2:	f040 8090 	bne.w	8002fd6 <_printf_float+0x1d6>
 8002eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eba:	b011      	add	sp, #68	; 0x44
 8002ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ec0:	4642      	mov	r2, r8
 8002ec2:	4653      	mov	r3, sl
 8002ec4:	4640      	mov	r0, r8
 8002ec6:	4651      	mov	r1, sl
 8002ec8:	f7fd fe0c 	bl	8000ae4 <__aeabi_dcmpun>
 8002ecc:	b148      	cbz	r0, 8002ee2 <_printf_float+0xe2>
 8002ece:	f1ba 0f00 	cmp.w	sl, #0
 8002ed2:	bfb8      	it	lt
 8002ed4:	232d      	movlt	r3, #45	; 0x2d
 8002ed6:	4880      	ldr	r0, [pc, #512]	; (80030d8 <_printf_float+0x2d8>)
 8002ed8:	bfb8      	it	lt
 8002eda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002ede:	4b7f      	ldr	r3, [pc, #508]	; (80030dc <_printf_float+0x2dc>)
 8002ee0:	e7d3      	b.n	8002e8a <_printf_float+0x8a>
 8002ee2:	6863      	ldr	r3, [r4, #4]
 8002ee4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	d142      	bne.n	8002f72 <_printf_float+0x172>
 8002eec:	2306      	movs	r3, #6
 8002eee:	6063      	str	r3, [r4, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	9206      	str	r2, [sp, #24]
 8002ef4:	aa0e      	add	r2, sp, #56	; 0x38
 8002ef6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8002efa:	aa0d      	add	r2, sp, #52	; 0x34
 8002efc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002f00:	9203      	str	r2, [sp, #12]
 8002f02:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8002f06:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002f0a:	6023      	str	r3, [r4, #0]
 8002f0c:	6863      	ldr	r3, [r4, #4]
 8002f0e:	4642      	mov	r2, r8
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	4628      	mov	r0, r5
 8002f14:	4653      	mov	r3, sl
 8002f16:	910b      	str	r1, [sp, #44]	; 0x2c
 8002f18:	f7ff fed4 	bl	8002cc4 <__cvt>
 8002f1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002f1e:	4680      	mov	r8, r0
 8002f20:	2947      	cmp	r1, #71	; 0x47
 8002f22:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002f24:	d108      	bne.n	8002f38 <_printf_float+0x138>
 8002f26:	1cc8      	adds	r0, r1, #3
 8002f28:	db02      	blt.n	8002f30 <_printf_float+0x130>
 8002f2a:	6863      	ldr	r3, [r4, #4]
 8002f2c:	4299      	cmp	r1, r3
 8002f2e:	dd40      	ble.n	8002fb2 <_printf_float+0x1b2>
 8002f30:	f1a9 0902 	sub.w	r9, r9, #2
 8002f34:	fa5f f989 	uxtb.w	r9, r9
 8002f38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002f3c:	d81f      	bhi.n	8002f7e <_printf_float+0x17e>
 8002f3e:	464a      	mov	r2, r9
 8002f40:	3901      	subs	r1, #1
 8002f42:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002f46:	910d      	str	r1, [sp, #52]	; 0x34
 8002f48:	f7ff ff1b 	bl	8002d82 <__exponent>
 8002f4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002f4e:	4682      	mov	sl, r0
 8002f50:	1813      	adds	r3, r2, r0
 8002f52:	2a01      	cmp	r2, #1
 8002f54:	6123      	str	r3, [r4, #16]
 8002f56:	dc02      	bgt.n	8002f5e <_printf_float+0x15e>
 8002f58:	6822      	ldr	r2, [r4, #0]
 8002f5a:	07d2      	lsls	r2, r2, #31
 8002f5c:	d501      	bpl.n	8002f62 <_printf_float+0x162>
 8002f5e:	3301      	adds	r3, #1
 8002f60:	6123      	str	r3, [r4, #16]
 8002f62:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d09b      	beq.n	8002ea2 <_printf_float+0xa2>
 8002f6a:	232d      	movs	r3, #45	; 0x2d
 8002f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f70:	e797      	b.n	8002ea2 <_printf_float+0xa2>
 8002f72:	2947      	cmp	r1, #71	; 0x47
 8002f74:	d1bc      	bne.n	8002ef0 <_printf_float+0xf0>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1ba      	bne.n	8002ef0 <_printf_float+0xf0>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e7b7      	b.n	8002eee <_printf_float+0xee>
 8002f7e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002f82:	d118      	bne.n	8002fb6 <_printf_float+0x1b6>
 8002f84:	2900      	cmp	r1, #0
 8002f86:	6863      	ldr	r3, [r4, #4]
 8002f88:	dd0b      	ble.n	8002fa2 <_printf_float+0x1a2>
 8002f8a:	6121      	str	r1, [r4, #16]
 8002f8c:	b913      	cbnz	r3, 8002f94 <_printf_float+0x194>
 8002f8e:	6822      	ldr	r2, [r4, #0]
 8002f90:	07d0      	lsls	r0, r2, #31
 8002f92:	d502      	bpl.n	8002f9a <_printf_float+0x19a>
 8002f94:	3301      	adds	r3, #1
 8002f96:	440b      	add	r3, r1
 8002f98:	6123      	str	r3, [r4, #16]
 8002f9a:	f04f 0a00 	mov.w	sl, #0
 8002f9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002fa0:	e7df      	b.n	8002f62 <_printf_float+0x162>
 8002fa2:	b913      	cbnz	r3, 8002faa <_printf_float+0x1aa>
 8002fa4:	6822      	ldr	r2, [r4, #0]
 8002fa6:	07d2      	lsls	r2, r2, #31
 8002fa8:	d501      	bpl.n	8002fae <_printf_float+0x1ae>
 8002faa:	3302      	adds	r3, #2
 8002fac:	e7f4      	b.n	8002f98 <_printf_float+0x198>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e7f2      	b.n	8002f98 <_printf_float+0x198>
 8002fb2:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fb8:	4299      	cmp	r1, r3
 8002fba:	db05      	blt.n	8002fc8 <_printf_float+0x1c8>
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	6121      	str	r1, [r4, #16]
 8002fc0:	07d8      	lsls	r0, r3, #31
 8002fc2:	d5ea      	bpl.n	8002f9a <_printf_float+0x19a>
 8002fc4:	1c4b      	adds	r3, r1, #1
 8002fc6:	e7e7      	b.n	8002f98 <_printf_float+0x198>
 8002fc8:	2900      	cmp	r1, #0
 8002fca:	bfcc      	ite	gt
 8002fcc:	2201      	movgt	r2, #1
 8002fce:	f1c1 0202 	rsble	r2, r1, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	e7e0      	b.n	8002f98 <_printf_float+0x198>
 8002fd6:	6823      	ldr	r3, [r4, #0]
 8002fd8:	055a      	lsls	r2, r3, #21
 8002fda:	d407      	bmi.n	8002fec <_printf_float+0x1ec>
 8002fdc:	6923      	ldr	r3, [r4, #16]
 8002fde:	4642      	mov	r2, r8
 8002fe0:	4631      	mov	r1, r6
 8002fe2:	4628      	mov	r0, r5
 8002fe4:	47b8      	blx	r7
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	d12b      	bne.n	8003042 <_printf_float+0x242>
 8002fea:	e764      	b.n	8002eb6 <_printf_float+0xb6>
 8002fec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002ff0:	f240 80dd 	bls.w	80031ae <_printf_float+0x3ae>
 8002ff4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f7fd fd40 	bl	8000a80 <__aeabi_dcmpeq>
 8003000:	2800      	cmp	r0, #0
 8003002:	d033      	beq.n	800306c <_printf_float+0x26c>
 8003004:	2301      	movs	r3, #1
 8003006:	4631      	mov	r1, r6
 8003008:	4628      	mov	r0, r5
 800300a:	4a35      	ldr	r2, [pc, #212]	; (80030e0 <_printf_float+0x2e0>)
 800300c:	47b8      	blx	r7
 800300e:	3001      	adds	r0, #1
 8003010:	f43f af51 	beq.w	8002eb6 <_printf_float+0xb6>
 8003014:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003018:	429a      	cmp	r2, r3
 800301a:	db02      	blt.n	8003022 <_printf_float+0x222>
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	07d8      	lsls	r0, r3, #31
 8003020:	d50f      	bpl.n	8003042 <_printf_float+0x242>
 8003022:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003026:	4631      	mov	r1, r6
 8003028:	4628      	mov	r0, r5
 800302a:	47b8      	blx	r7
 800302c:	3001      	adds	r0, #1
 800302e:	f43f af42 	beq.w	8002eb6 <_printf_float+0xb6>
 8003032:	f04f 0800 	mov.w	r8, #0
 8003036:	f104 091a 	add.w	r9, r4, #26
 800303a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800303c:	3b01      	subs	r3, #1
 800303e:	4543      	cmp	r3, r8
 8003040:	dc09      	bgt.n	8003056 <_printf_float+0x256>
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	079b      	lsls	r3, r3, #30
 8003046:	f100 8102 	bmi.w	800324e <_printf_float+0x44e>
 800304a:	68e0      	ldr	r0, [r4, #12]
 800304c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800304e:	4298      	cmp	r0, r3
 8003050:	bfb8      	it	lt
 8003052:	4618      	movlt	r0, r3
 8003054:	e731      	b.n	8002eba <_printf_float+0xba>
 8003056:	2301      	movs	r3, #1
 8003058:	464a      	mov	r2, r9
 800305a:	4631      	mov	r1, r6
 800305c:	4628      	mov	r0, r5
 800305e:	47b8      	blx	r7
 8003060:	3001      	adds	r0, #1
 8003062:	f43f af28 	beq.w	8002eb6 <_printf_float+0xb6>
 8003066:	f108 0801 	add.w	r8, r8, #1
 800306a:	e7e6      	b.n	800303a <_printf_float+0x23a>
 800306c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800306e:	2b00      	cmp	r3, #0
 8003070:	dc38      	bgt.n	80030e4 <_printf_float+0x2e4>
 8003072:	2301      	movs	r3, #1
 8003074:	4631      	mov	r1, r6
 8003076:	4628      	mov	r0, r5
 8003078:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <_printf_float+0x2e0>)
 800307a:	47b8      	blx	r7
 800307c:	3001      	adds	r0, #1
 800307e:	f43f af1a 	beq.w	8002eb6 <_printf_float+0xb6>
 8003082:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003086:	4313      	orrs	r3, r2
 8003088:	d102      	bne.n	8003090 <_printf_float+0x290>
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	07d9      	lsls	r1, r3, #31
 800308e:	d5d8      	bpl.n	8003042 <_printf_float+0x242>
 8003090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003094:	4631      	mov	r1, r6
 8003096:	4628      	mov	r0, r5
 8003098:	47b8      	blx	r7
 800309a:	3001      	adds	r0, #1
 800309c:	f43f af0b 	beq.w	8002eb6 <_printf_float+0xb6>
 80030a0:	f04f 0900 	mov.w	r9, #0
 80030a4:	f104 0a1a 	add.w	sl, r4, #26
 80030a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030aa:	425b      	negs	r3, r3
 80030ac:	454b      	cmp	r3, r9
 80030ae:	dc01      	bgt.n	80030b4 <_printf_float+0x2b4>
 80030b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030b2:	e794      	b.n	8002fde <_printf_float+0x1de>
 80030b4:	2301      	movs	r3, #1
 80030b6:	4652      	mov	r2, sl
 80030b8:	4631      	mov	r1, r6
 80030ba:	4628      	mov	r0, r5
 80030bc:	47b8      	blx	r7
 80030be:	3001      	adds	r0, #1
 80030c0:	f43f aef9 	beq.w	8002eb6 <_printf_float+0xb6>
 80030c4:	f109 0901 	add.w	r9, r9, #1
 80030c8:	e7ee      	b.n	80030a8 <_printf_float+0x2a8>
 80030ca:	bf00      	nop
 80030cc:	7fefffff 	.word	0x7fefffff
 80030d0:	08005724 	.word	0x08005724
 80030d4:	08005728 	.word	0x08005728
 80030d8:	08005730 	.word	0x08005730
 80030dc:	0800572c 	.word	0x0800572c
 80030e0:	08005734 	.word	0x08005734
 80030e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030e8:	429a      	cmp	r2, r3
 80030ea:	bfa8      	it	ge
 80030ec:	461a      	movge	r2, r3
 80030ee:	2a00      	cmp	r2, #0
 80030f0:	4691      	mov	r9, r2
 80030f2:	dc37      	bgt.n	8003164 <_printf_float+0x364>
 80030f4:	f04f 0b00 	mov.w	fp, #0
 80030f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030fc:	f104 021a 	add.w	r2, r4, #26
 8003100:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003104:	ebaa 0309 	sub.w	r3, sl, r9
 8003108:	455b      	cmp	r3, fp
 800310a:	dc33      	bgt.n	8003174 <_printf_float+0x374>
 800310c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003110:	429a      	cmp	r2, r3
 8003112:	db3b      	blt.n	800318c <_printf_float+0x38c>
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	07da      	lsls	r2, r3, #31
 8003118:	d438      	bmi.n	800318c <_printf_float+0x38c>
 800311a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800311c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800311e:	eba2 030a 	sub.w	r3, r2, sl
 8003122:	eba2 0901 	sub.w	r9, r2, r1
 8003126:	4599      	cmp	r9, r3
 8003128:	bfa8      	it	ge
 800312a:	4699      	movge	r9, r3
 800312c:	f1b9 0f00 	cmp.w	r9, #0
 8003130:	dc34      	bgt.n	800319c <_printf_float+0x39c>
 8003132:	f04f 0800 	mov.w	r8, #0
 8003136:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800313a:	f104 0a1a 	add.w	sl, r4, #26
 800313e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	eba3 0309 	sub.w	r3, r3, r9
 8003148:	4543      	cmp	r3, r8
 800314a:	f77f af7a 	ble.w	8003042 <_printf_float+0x242>
 800314e:	2301      	movs	r3, #1
 8003150:	4652      	mov	r2, sl
 8003152:	4631      	mov	r1, r6
 8003154:	4628      	mov	r0, r5
 8003156:	47b8      	blx	r7
 8003158:	3001      	adds	r0, #1
 800315a:	f43f aeac 	beq.w	8002eb6 <_printf_float+0xb6>
 800315e:	f108 0801 	add.w	r8, r8, #1
 8003162:	e7ec      	b.n	800313e <_printf_float+0x33e>
 8003164:	4613      	mov	r3, r2
 8003166:	4631      	mov	r1, r6
 8003168:	4642      	mov	r2, r8
 800316a:	4628      	mov	r0, r5
 800316c:	47b8      	blx	r7
 800316e:	3001      	adds	r0, #1
 8003170:	d1c0      	bne.n	80030f4 <_printf_float+0x2f4>
 8003172:	e6a0      	b.n	8002eb6 <_printf_float+0xb6>
 8003174:	2301      	movs	r3, #1
 8003176:	4631      	mov	r1, r6
 8003178:	4628      	mov	r0, r5
 800317a:	920b      	str	r2, [sp, #44]	; 0x2c
 800317c:	47b8      	blx	r7
 800317e:	3001      	adds	r0, #1
 8003180:	f43f ae99 	beq.w	8002eb6 <_printf_float+0xb6>
 8003184:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003186:	f10b 0b01 	add.w	fp, fp, #1
 800318a:	e7b9      	b.n	8003100 <_printf_float+0x300>
 800318c:	4631      	mov	r1, r6
 800318e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003192:	4628      	mov	r0, r5
 8003194:	47b8      	blx	r7
 8003196:	3001      	adds	r0, #1
 8003198:	d1bf      	bne.n	800311a <_printf_float+0x31a>
 800319a:	e68c      	b.n	8002eb6 <_printf_float+0xb6>
 800319c:	464b      	mov	r3, r9
 800319e:	4631      	mov	r1, r6
 80031a0:	4628      	mov	r0, r5
 80031a2:	eb08 020a 	add.w	r2, r8, sl
 80031a6:	47b8      	blx	r7
 80031a8:	3001      	adds	r0, #1
 80031aa:	d1c2      	bne.n	8003132 <_printf_float+0x332>
 80031ac:	e683      	b.n	8002eb6 <_printf_float+0xb6>
 80031ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80031b0:	2a01      	cmp	r2, #1
 80031b2:	dc01      	bgt.n	80031b8 <_printf_float+0x3b8>
 80031b4:	07db      	lsls	r3, r3, #31
 80031b6:	d537      	bpl.n	8003228 <_printf_float+0x428>
 80031b8:	2301      	movs	r3, #1
 80031ba:	4642      	mov	r2, r8
 80031bc:	4631      	mov	r1, r6
 80031be:	4628      	mov	r0, r5
 80031c0:	47b8      	blx	r7
 80031c2:	3001      	adds	r0, #1
 80031c4:	f43f ae77 	beq.w	8002eb6 <_printf_float+0xb6>
 80031c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031cc:	4631      	mov	r1, r6
 80031ce:	4628      	mov	r0, r5
 80031d0:	47b8      	blx	r7
 80031d2:	3001      	adds	r0, #1
 80031d4:	f43f ae6f 	beq.w	8002eb6 <_printf_float+0xb6>
 80031d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80031dc:	2200      	movs	r2, #0
 80031de:	2300      	movs	r3, #0
 80031e0:	f7fd fc4e 	bl	8000a80 <__aeabi_dcmpeq>
 80031e4:	b9d8      	cbnz	r0, 800321e <_printf_float+0x41e>
 80031e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80031e8:	f108 0201 	add.w	r2, r8, #1
 80031ec:	3b01      	subs	r3, #1
 80031ee:	4631      	mov	r1, r6
 80031f0:	4628      	mov	r0, r5
 80031f2:	47b8      	blx	r7
 80031f4:	3001      	adds	r0, #1
 80031f6:	d10e      	bne.n	8003216 <_printf_float+0x416>
 80031f8:	e65d      	b.n	8002eb6 <_printf_float+0xb6>
 80031fa:	2301      	movs	r3, #1
 80031fc:	464a      	mov	r2, r9
 80031fe:	4631      	mov	r1, r6
 8003200:	4628      	mov	r0, r5
 8003202:	47b8      	blx	r7
 8003204:	3001      	adds	r0, #1
 8003206:	f43f ae56 	beq.w	8002eb6 <_printf_float+0xb6>
 800320a:	f108 0801 	add.w	r8, r8, #1
 800320e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003210:	3b01      	subs	r3, #1
 8003212:	4543      	cmp	r3, r8
 8003214:	dcf1      	bgt.n	80031fa <_printf_float+0x3fa>
 8003216:	4653      	mov	r3, sl
 8003218:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800321c:	e6e0      	b.n	8002fe0 <_printf_float+0x1e0>
 800321e:	f04f 0800 	mov.w	r8, #0
 8003222:	f104 091a 	add.w	r9, r4, #26
 8003226:	e7f2      	b.n	800320e <_printf_float+0x40e>
 8003228:	2301      	movs	r3, #1
 800322a:	4642      	mov	r2, r8
 800322c:	e7df      	b.n	80031ee <_printf_float+0x3ee>
 800322e:	2301      	movs	r3, #1
 8003230:	464a      	mov	r2, r9
 8003232:	4631      	mov	r1, r6
 8003234:	4628      	mov	r0, r5
 8003236:	47b8      	blx	r7
 8003238:	3001      	adds	r0, #1
 800323a:	f43f ae3c 	beq.w	8002eb6 <_printf_float+0xb6>
 800323e:	f108 0801 	add.w	r8, r8, #1
 8003242:	68e3      	ldr	r3, [r4, #12]
 8003244:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003246:	1a5b      	subs	r3, r3, r1
 8003248:	4543      	cmp	r3, r8
 800324a:	dcf0      	bgt.n	800322e <_printf_float+0x42e>
 800324c:	e6fd      	b.n	800304a <_printf_float+0x24a>
 800324e:	f04f 0800 	mov.w	r8, #0
 8003252:	f104 0919 	add.w	r9, r4, #25
 8003256:	e7f4      	b.n	8003242 <_printf_float+0x442>

08003258 <_printf_common>:
 8003258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800325c:	4616      	mov	r6, r2
 800325e:	4699      	mov	r9, r3
 8003260:	688a      	ldr	r2, [r1, #8]
 8003262:	690b      	ldr	r3, [r1, #16]
 8003264:	4607      	mov	r7, r0
 8003266:	4293      	cmp	r3, r2
 8003268:	bfb8      	it	lt
 800326a:	4613      	movlt	r3, r2
 800326c:	6033      	str	r3, [r6, #0]
 800326e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003272:	460c      	mov	r4, r1
 8003274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003278:	b10a      	cbz	r2, 800327e <_printf_common+0x26>
 800327a:	3301      	adds	r3, #1
 800327c:	6033      	str	r3, [r6, #0]
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	0699      	lsls	r1, r3, #26
 8003282:	bf42      	ittt	mi
 8003284:	6833      	ldrmi	r3, [r6, #0]
 8003286:	3302      	addmi	r3, #2
 8003288:	6033      	strmi	r3, [r6, #0]
 800328a:	6825      	ldr	r5, [r4, #0]
 800328c:	f015 0506 	ands.w	r5, r5, #6
 8003290:	d106      	bne.n	80032a0 <_printf_common+0x48>
 8003292:	f104 0a19 	add.w	sl, r4, #25
 8003296:	68e3      	ldr	r3, [r4, #12]
 8003298:	6832      	ldr	r2, [r6, #0]
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	42ab      	cmp	r3, r5
 800329e:	dc28      	bgt.n	80032f2 <_printf_common+0x9a>
 80032a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80032a4:	1e13      	subs	r3, r2, #0
 80032a6:	6822      	ldr	r2, [r4, #0]
 80032a8:	bf18      	it	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	0692      	lsls	r2, r2, #26
 80032ae:	d42d      	bmi.n	800330c <_printf_common+0xb4>
 80032b0:	4649      	mov	r1, r9
 80032b2:	4638      	mov	r0, r7
 80032b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032b8:	47c0      	blx	r8
 80032ba:	3001      	adds	r0, #1
 80032bc:	d020      	beq.n	8003300 <_printf_common+0xa8>
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	68e5      	ldr	r5, [r4, #12]
 80032c2:	f003 0306 	and.w	r3, r3, #6
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	bf18      	it	ne
 80032ca:	2500      	movne	r5, #0
 80032cc:	6832      	ldr	r2, [r6, #0]
 80032ce:	f04f 0600 	mov.w	r6, #0
 80032d2:	68a3      	ldr	r3, [r4, #8]
 80032d4:	bf08      	it	eq
 80032d6:	1aad      	subeq	r5, r5, r2
 80032d8:	6922      	ldr	r2, [r4, #16]
 80032da:	bf08      	it	eq
 80032dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032e0:	4293      	cmp	r3, r2
 80032e2:	bfc4      	itt	gt
 80032e4:	1a9b      	subgt	r3, r3, r2
 80032e6:	18ed      	addgt	r5, r5, r3
 80032e8:	341a      	adds	r4, #26
 80032ea:	42b5      	cmp	r5, r6
 80032ec:	d11a      	bne.n	8003324 <_printf_common+0xcc>
 80032ee:	2000      	movs	r0, #0
 80032f0:	e008      	b.n	8003304 <_printf_common+0xac>
 80032f2:	2301      	movs	r3, #1
 80032f4:	4652      	mov	r2, sl
 80032f6:	4649      	mov	r1, r9
 80032f8:	4638      	mov	r0, r7
 80032fa:	47c0      	blx	r8
 80032fc:	3001      	adds	r0, #1
 80032fe:	d103      	bne.n	8003308 <_printf_common+0xb0>
 8003300:	f04f 30ff 	mov.w	r0, #4294967295
 8003304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003308:	3501      	adds	r5, #1
 800330a:	e7c4      	b.n	8003296 <_printf_common+0x3e>
 800330c:	2030      	movs	r0, #48	; 0x30
 800330e:	18e1      	adds	r1, r4, r3
 8003310:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800331a:	4422      	add	r2, r4
 800331c:	3302      	adds	r3, #2
 800331e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003322:	e7c5      	b.n	80032b0 <_printf_common+0x58>
 8003324:	2301      	movs	r3, #1
 8003326:	4622      	mov	r2, r4
 8003328:	4649      	mov	r1, r9
 800332a:	4638      	mov	r0, r7
 800332c:	47c0      	blx	r8
 800332e:	3001      	adds	r0, #1
 8003330:	d0e6      	beq.n	8003300 <_printf_common+0xa8>
 8003332:	3601      	adds	r6, #1
 8003334:	e7d9      	b.n	80032ea <_printf_common+0x92>
	...

08003338 <_printf_i>:
 8003338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800333c:	460c      	mov	r4, r1
 800333e:	7e27      	ldrb	r7, [r4, #24]
 8003340:	4691      	mov	r9, r2
 8003342:	2f78      	cmp	r7, #120	; 0x78
 8003344:	4680      	mov	r8, r0
 8003346:	469a      	mov	sl, r3
 8003348:	990c      	ldr	r1, [sp, #48]	; 0x30
 800334a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800334e:	d807      	bhi.n	8003360 <_printf_i+0x28>
 8003350:	2f62      	cmp	r7, #98	; 0x62
 8003352:	d80a      	bhi.n	800336a <_printf_i+0x32>
 8003354:	2f00      	cmp	r7, #0
 8003356:	f000 80d9 	beq.w	800350c <_printf_i+0x1d4>
 800335a:	2f58      	cmp	r7, #88	; 0x58
 800335c:	f000 80a4 	beq.w	80034a8 <_printf_i+0x170>
 8003360:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003368:	e03a      	b.n	80033e0 <_printf_i+0xa8>
 800336a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800336e:	2b15      	cmp	r3, #21
 8003370:	d8f6      	bhi.n	8003360 <_printf_i+0x28>
 8003372:	a001      	add	r0, pc, #4	; (adr r0, 8003378 <_printf_i+0x40>)
 8003374:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003378:	080033d1 	.word	0x080033d1
 800337c:	080033e5 	.word	0x080033e5
 8003380:	08003361 	.word	0x08003361
 8003384:	08003361 	.word	0x08003361
 8003388:	08003361 	.word	0x08003361
 800338c:	08003361 	.word	0x08003361
 8003390:	080033e5 	.word	0x080033e5
 8003394:	08003361 	.word	0x08003361
 8003398:	08003361 	.word	0x08003361
 800339c:	08003361 	.word	0x08003361
 80033a0:	08003361 	.word	0x08003361
 80033a4:	080034f3 	.word	0x080034f3
 80033a8:	08003415 	.word	0x08003415
 80033ac:	080034d5 	.word	0x080034d5
 80033b0:	08003361 	.word	0x08003361
 80033b4:	08003361 	.word	0x08003361
 80033b8:	08003515 	.word	0x08003515
 80033bc:	08003361 	.word	0x08003361
 80033c0:	08003415 	.word	0x08003415
 80033c4:	08003361 	.word	0x08003361
 80033c8:	08003361 	.word	0x08003361
 80033cc:	080034dd 	.word	0x080034dd
 80033d0:	680b      	ldr	r3, [r1, #0]
 80033d2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80033d6:	1d1a      	adds	r2, r3, #4
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	600a      	str	r2, [r1, #0]
 80033dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0a4      	b.n	800352e <_printf_i+0x1f6>
 80033e4:	6825      	ldr	r5, [r4, #0]
 80033e6:	6808      	ldr	r0, [r1, #0]
 80033e8:	062e      	lsls	r6, r5, #24
 80033ea:	f100 0304 	add.w	r3, r0, #4
 80033ee:	d50a      	bpl.n	8003406 <_printf_i+0xce>
 80033f0:	6805      	ldr	r5, [r0, #0]
 80033f2:	600b      	str	r3, [r1, #0]
 80033f4:	2d00      	cmp	r5, #0
 80033f6:	da03      	bge.n	8003400 <_printf_i+0xc8>
 80033f8:	232d      	movs	r3, #45	; 0x2d
 80033fa:	426d      	negs	r5, r5
 80033fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003400:	230a      	movs	r3, #10
 8003402:	485e      	ldr	r0, [pc, #376]	; (800357c <_printf_i+0x244>)
 8003404:	e019      	b.n	800343a <_printf_i+0x102>
 8003406:	f015 0f40 	tst.w	r5, #64	; 0x40
 800340a:	6805      	ldr	r5, [r0, #0]
 800340c:	600b      	str	r3, [r1, #0]
 800340e:	bf18      	it	ne
 8003410:	b22d      	sxthne	r5, r5
 8003412:	e7ef      	b.n	80033f4 <_printf_i+0xbc>
 8003414:	680b      	ldr	r3, [r1, #0]
 8003416:	6825      	ldr	r5, [r4, #0]
 8003418:	1d18      	adds	r0, r3, #4
 800341a:	6008      	str	r0, [r1, #0]
 800341c:	0628      	lsls	r0, r5, #24
 800341e:	d501      	bpl.n	8003424 <_printf_i+0xec>
 8003420:	681d      	ldr	r5, [r3, #0]
 8003422:	e002      	b.n	800342a <_printf_i+0xf2>
 8003424:	0669      	lsls	r1, r5, #25
 8003426:	d5fb      	bpl.n	8003420 <_printf_i+0xe8>
 8003428:	881d      	ldrh	r5, [r3, #0]
 800342a:	2f6f      	cmp	r7, #111	; 0x6f
 800342c:	bf0c      	ite	eq
 800342e:	2308      	moveq	r3, #8
 8003430:	230a      	movne	r3, #10
 8003432:	4852      	ldr	r0, [pc, #328]	; (800357c <_printf_i+0x244>)
 8003434:	2100      	movs	r1, #0
 8003436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800343a:	6866      	ldr	r6, [r4, #4]
 800343c:	2e00      	cmp	r6, #0
 800343e:	bfa8      	it	ge
 8003440:	6821      	ldrge	r1, [r4, #0]
 8003442:	60a6      	str	r6, [r4, #8]
 8003444:	bfa4      	itt	ge
 8003446:	f021 0104 	bicge.w	r1, r1, #4
 800344a:	6021      	strge	r1, [r4, #0]
 800344c:	b90d      	cbnz	r5, 8003452 <_printf_i+0x11a>
 800344e:	2e00      	cmp	r6, #0
 8003450:	d04d      	beq.n	80034ee <_printf_i+0x1b6>
 8003452:	4616      	mov	r6, r2
 8003454:	fbb5 f1f3 	udiv	r1, r5, r3
 8003458:	fb03 5711 	mls	r7, r3, r1, r5
 800345c:	5dc7      	ldrb	r7, [r0, r7]
 800345e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003462:	462f      	mov	r7, r5
 8003464:	42bb      	cmp	r3, r7
 8003466:	460d      	mov	r5, r1
 8003468:	d9f4      	bls.n	8003454 <_printf_i+0x11c>
 800346a:	2b08      	cmp	r3, #8
 800346c:	d10b      	bne.n	8003486 <_printf_i+0x14e>
 800346e:	6823      	ldr	r3, [r4, #0]
 8003470:	07df      	lsls	r7, r3, #31
 8003472:	d508      	bpl.n	8003486 <_printf_i+0x14e>
 8003474:	6923      	ldr	r3, [r4, #16]
 8003476:	6861      	ldr	r1, [r4, #4]
 8003478:	4299      	cmp	r1, r3
 800347a:	bfde      	ittt	le
 800347c:	2330      	movle	r3, #48	; 0x30
 800347e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003482:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003486:	1b92      	subs	r2, r2, r6
 8003488:	6122      	str	r2, [r4, #16]
 800348a:	464b      	mov	r3, r9
 800348c:	4621      	mov	r1, r4
 800348e:	4640      	mov	r0, r8
 8003490:	f8cd a000 	str.w	sl, [sp]
 8003494:	aa03      	add	r2, sp, #12
 8003496:	f7ff fedf 	bl	8003258 <_printf_common>
 800349a:	3001      	adds	r0, #1
 800349c:	d14c      	bne.n	8003538 <_printf_i+0x200>
 800349e:	f04f 30ff 	mov.w	r0, #4294967295
 80034a2:	b004      	add	sp, #16
 80034a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034a8:	4834      	ldr	r0, [pc, #208]	; (800357c <_printf_i+0x244>)
 80034aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80034ae:	680e      	ldr	r6, [r1, #0]
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80034b6:	061f      	lsls	r7, r3, #24
 80034b8:	600e      	str	r6, [r1, #0]
 80034ba:	d514      	bpl.n	80034e6 <_printf_i+0x1ae>
 80034bc:	07d9      	lsls	r1, r3, #31
 80034be:	bf44      	itt	mi
 80034c0:	f043 0320 	orrmi.w	r3, r3, #32
 80034c4:	6023      	strmi	r3, [r4, #0]
 80034c6:	b91d      	cbnz	r5, 80034d0 <_printf_i+0x198>
 80034c8:	6823      	ldr	r3, [r4, #0]
 80034ca:	f023 0320 	bic.w	r3, r3, #32
 80034ce:	6023      	str	r3, [r4, #0]
 80034d0:	2310      	movs	r3, #16
 80034d2:	e7af      	b.n	8003434 <_printf_i+0xfc>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	f043 0320 	orr.w	r3, r3, #32
 80034da:	6023      	str	r3, [r4, #0]
 80034dc:	2378      	movs	r3, #120	; 0x78
 80034de:	4828      	ldr	r0, [pc, #160]	; (8003580 <_printf_i+0x248>)
 80034e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034e4:	e7e3      	b.n	80034ae <_printf_i+0x176>
 80034e6:	065e      	lsls	r6, r3, #25
 80034e8:	bf48      	it	mi
 80034ea:	b2ad      	uxthmi	r5, r5
 80034ec:	e7e6      	b.n	80034bc <_printf_i+0x184>
 80034ee:	4616      	mov	r6, r2
 80034f0:	e7bb      	b.n	800346a <_printf_i+0x132>
 80034f2:	680b      	ldr	r3, [r1, #0]
 80034f4:	6826      	ldr	r6, [r4, #0]
 80034f6:	1d1d      	adds	r5, r3, #4
 80034f8:	6960      	ldr	r0, [r4, #20]
 80034fa:	600d      	str	r5, [r1, #0]
 80034fc:	0635      	lsls	r5, r6, #24
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	d501      	bpl.n	8003506 <_printf_i+0x1ce>
 8003502:	6018      	str	r0, [r3, #0]
 8003504:	e002      	b.n	800350c <_printf_i+0x1d4>
 8003506:	0671      	lsls	r1, r6, #25
 8003508:	d5fb      	bpl.n	8003502 <_printf_i+0x1ca>
 800350a:	8018      	strh	r0, [r3, #0]
 800350c:	2300      	movs	r3, #0
 800350e:	4616      	mov	r6, r2
 8003510:	6123      	str	r3, [r4, #16]
 8003512:	e7ba      	b.n	800348a <_printf_i+0x152>
 8003514:	680b      	ldr	r3, [r1, #0]
 8003516:	1d1a      	adds	r2, r3, #4
 8003518:	600a      	str	r2, [r1, #0]
 800351a:	681e      	ldr	r6, [r3, #0]
 800351c:	2100      	movs	r1, #0
 800351e:	4630      	mov	r0, r6
 8003520:	6862      	ldr	r2, [r4, #4]
 8003522:	f000 ffc9 	bl	80044b8 <memchr>
 8003526:	b108      	cbz	r0, 800352c <_printf_i+0x1f4>
 8003528:	1b80      	subs	r0, r0, r6
 800352a:	6060      	str	r0, [r4, #4]
 800352c:	6863      	ldr	r3, [r4, #4]
 800352e:	6123      	str	r3, [r4, #16]
 8003530:	2300      	movs	r3, #0
 8003532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003536:	e7a8      	b.n	800348a <_printf_i+0x152>
 8003538:	4632      	mov	r2, r6
 800353a:	4649      	mov	r1, r9
 800353c:	4640      	mov	r0, r8
 800353e:	6923      	ldr	r3, [r4, #16]
 8003540:	47d0      	blx	sl
 8003542:	3001      	adds	r0, #1
 8003544:	d0ab      	beq.n	800349e <_printf_i+0x166>
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	079b      	lsls	r3, r3, #30
 800354a:	d413      	bmi.n	8003574 <_printf_i+0x23c>
 800354c:	68e0      	ldr	r0, [r4, #12]
 800354e:	9b03      	ldr	r3, [sp, #12]
 8003550:	4298      	cmp	r0, r3
 8003552:	bfb8      	it	lt
 8003554:	4618      	movlt	r0, r3
 8003556:	e7a4      	b.n	80034a2 <_printf_i+0x16a>
 8003558:	2301      	movs	r3, #1
 800355a:	4632      	mov	r2, r6
 800355c:	4649      	mov	r1, r9
 800355e:	4640      	mov	r0, r8
 8003560:	47d0      	blx	sl
 8003562:	3001      	adds	r0, #1
 8003564:	d09b      	beq.n	800349e <_printf_i+0x166>
 8003566:	3501      	adds	r5, #1
 8003568:	68e3      	ldr	r3, [r4, #12]
 800356a:	9903      	ldr	r1, [sp, #12]
 800356c:	1a5b      	subs	r3, r3, r1
 800356e:	42ab      	cmp	r3, r5
 8003570:	dcf2      	bgt.n	8003558 <_printf_i+0x220>
 8003572:	e7eb      	b.n	800354c <_printf_i+0x214>
 8003574:	2500      	movs	r5, #0
 8003576:	f104 0619 	add.w	r6, r4, #25
 800357a:	e7f5      	b.n	8003568 <_printf_i+0x230>
 800357c:	08005736 	.word	0x08005736
 8003580:	08005747 	.word	0x08005747

08003584 <iprintf>:
 8003584:	b40f      	push	{r0, r1, r2, r3}
 8003586:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <iprintf+0x2c>)
 8003588:	b513      	push	{r0, r1, r4, lr}
 800358a:	681c      	ldr	r4, [r3, #0]
 800358c:	b124      	cbz	r4, 8003598 <iprintf+0x14>
 800358e:	69a3      	ldr	r3, [r4, #24]
 8003590:	b913      	cbnz	r3, 8003598 <iprintf+0x14>
 8003592:	4620      	mov	r0, r4
 8003594:	f000 fee2 	bl	800435c <__sinit>
 8003598:	ab05      	add	r3, sp, #20
 800359a:	4620      	mov	r0, r4
 800359c:	9a04      	ldr	r2, [sp, #16]
 800359e:	68a1      	ldr	r1, [r4, #8]
 80035a0:	9301      	str	r3, [sp, #4]
 80035a2:	f001 fc03 	bl	8004dac <_vfiprintf_r>
 80035a6:	b002      	add	sp, #8
 80035a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035ac:	b004      	add	sp, #16
 80035ae:	4770      	bx	lr
 80035b0:	2000000c 	.word	0x2000000c

080035b4 <quorem>:
 80035b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b8:	6903      	ldr	r3, [r0, #16]
 80035ba:	690c      	ldr	r4, [r1, #16]
 80035bc:	4607      	mov	r7, r0
 80035be:	42a3      	cmp	r3, r4
 80035c0:	f2c0 8083 	blt.w	80036ca <quorem+0x116>
 80035c4:	3c01      	subs	r4, #1
 80035c6:	f100 0514 	add.w	r5, r0, #20
 80035ca:	f101 0814 	add.w	r8, r1, #20
 80035ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80035d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80035dc:	3301      	adds	r3, #1
 80035de:	429a      	cmp	r2, r3
 80035e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80035e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80035e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80035ec:	d332      	bcc.n	8003654 <quorem+0xa0>
 80035ee:	f04f 0e00 	mov.w	lr, #0
 80035f2:	4640      	mov	r0, r8
 80035f4:	46ac      	mov	ip, r5
 80035f6:	46f2      	mov	sl, lr
 80035f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80035fc:	b293      	uxth	r3, r2
 80035fe:	fb06 e303 	mla	r3, r6, r3, lr
 8003602:	0c12      	lsrs	r2, r2, #16
 8003604:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003608:	fb06 e202 	mla	r2, r6, r2, lr
 800360c:	b29b      	uxth	r3, r3
 800360e:	ebaa 0303 	sub.w	r3, sl, r3
 8003612:	f8dc a000 	ldr.w	sl, [ip]
 8003616:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800361a:	fa1f fa8a 	uxth.w	sl, sl
 800361e:	4453      	add	r3, sl
 8003620:	fa1f fa82 	uxth.w	sl, r2
 8003624:	f8dc 2000 	ldr.w	r2, [ip]
 8003628:	4581      	cmp	r9, r0
 800362a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800362e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003632:	b29b      	uxth	r3, r3
 8003634:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003638:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800363c:	f84c 3b04 	str.w	r3, [ip], #4
 8003640:	d2da      	bcs.n	80035f8 <quorem+0x44>
 8003642:	f855 300b 	ldr.w	r3, [r5, fp]
 8003646:	b92b      	cbnz	r3, 8003654 <quorem+0xa0>
 8003648:	9b01      	ldr	r3, [sp, #4]
 800364a:	3b04      	subs	r3, #4
 800364c:	429d      	cmp	r5, r3
 800364e:	461a      	mov	r2, r3
 8003650:	d32f      	bcc.n	80036b2 <quorem+0xfe>
 8003652:	613c      	str	r4, [r7, #16]
 8003654:	4638      	mov	r0, r7
 8003656:	f001 f9c5 	bl	80049e4 <__mcmp>
 800365a:	2800      	cmp	r0, #0
 800365c:	db25      	blt.n	80036aa <quorem+0xf6>
 800365e:	4628      	mov	r0, r5
 8003660:	f04f 0c00 	mov.w	ip, #0
 8003664:	3601      	adds	r6, #1
 8003666:	f858 1b04 	ldr.w	r1, [r8], #4
 800366a:	f8d0 e000 	ldr.w	lr, [r0]
 800366e:	b28b      	uxth	r3, r1
 8003670:	ebac 0303 	sub.w	r3, ip, r3
 8003674:	fa1f f28e 	uxth.w	r2, lr
 8003678:	4413      	add	r3, r2
 800367a:	0c0a      	lsrs	r2, r1, #16
 800367c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003684:	b29b      	uxth	r3, r3
 8003686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800368a:	45c1      	cmp	r9, r8
 800368c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003690:	f840 3b04 	str.w	r3, [r0], #4
 8003694:	d2e7      	bcs.n	8003666 <quorem+0xb2>
 8003696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800369a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800369e:	b922      	cbnz	r2, 80036aa <quorem+0xf6>
 80036a0:	3b04      	subs	r3, #4
 80036a2:	429d      	cmp	r5, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	d30a      	bcc.n	80036be <quorem+0x10a>
 80036a8:	613c      	str	r4, [r7, #16]
 80036aa:	4630      	mov	r0, r6
 80036ac:	b003      	add	sp, #12
 80036ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	3b04      	subs	r3, #4
 80036b6:	2a00      	cmp	r2, #0
 80036b8:	d1cb      	bne.n	8003652 <quorem+0x9e>
 80036ba:	3c01      	subs	r4, #1
 80036bc:	e7c6      	b.n	800364c <quorem+0x98>
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	3b04      	subs	r3, #4
 80036c2:	2a00      	cmp	r2, #0
 80036c4:	d1f0      	bne.n	80036a8 <quorem+0xf4>
 80036c6:	3c01      	subs	r4, #1
 80036c8:	e7eb      	b.n	80036a2 <quorem+0xee>
 80036ca:	2000      	movs	r0, #0
 80036cc:	e7ee      	b.n	80036ac <quorem+0xf8>
	...

080036d0 <_dtoa_r>:
 80036d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036d4:	4616      	mov	r6, r2
 80036d6:	461f      	mov	r7, r3
 80036d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80036da:	b099      	sub	sp, #100	; 0x64
 80036dc:	4605      	mov	r5, r0
 80036de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80036e2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80036e6:	b974      	cbnz	r4, 8003706 <_dtoa_r+0x36>
 80036e8:	2010      	movs	r0, #16
 80036ea:	f000 fedd 	bl	80044a8 <malloc>
 80036ee:	4602      	mov	r2, r0
 80036f0:	6268      	str	r0, [r5, #36]	; 0x24
 80036f2:	b920      	cbnz	r0, 80036fe <_dtoa_r+0x2e>
 80036f4:	21ea      	movs	r1, #234	; 0xea
 80036f6:	4bae      	ldr	r3, [pc, #696]	; (80039b0 <_dtoa_r+0x2e0>)
 80036f8:	48ae      	ldr	r0, [pc, #696]	; (80039b4 <_dtoa_r+0x2e4>)
 80036fa:	f001 fdad 	bl	8005258 <__assert_func>
 80036fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003702:	6004      	str	r4, [r0, #0]
 8003704:	60c4      	str	r4, [r0, #12]
 8003706:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	b151      	cbz	r1, 8003722 <_dtoa_r+0x52>
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	2301      	movs	r3, #1
 8003710:	4093      	lsls	r3, r2
 8003712:	604a      	str	r2, [r1, #4]
 8003714:	608b      	str	r3, [r1, #8]
 8003716:	4628      	mov	r0, r5
 8003718:	f000 ff2a 	bl	8004570 <_Bfree>
 800371c:	2200      	movs	r2, #0
 800371e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	1e3b      	subs	r3, r7, #0
 8003724:	bfaf      	iteee	ge
 8003726:	2300      	movge	r3, #0
 8003728:	2201      	movlt	r2, #1
 800372a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800372e:	9305      	strlt	r3, [sp, #20]
 8003730:	bfa8      	it	ge
 8003732:	f8c8 3000 	strge.w	r3, [r8]
 8003736:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800373a:	4b9f      	ldr	r3, [pc, #636]	; (80039b8 <_dtoa_r+0x2e8>)
 800373c:	bfb8      	it	lt
 800373e:	f8c8 2000 	strlt.w	r2, [r8]
 8003742:	ea33 0309 	bics.w	r3, r3, r9
 8003746:	d119      	bne.n	800377c <_dtoa_r+0xac>
 8003748:	f242 730f 	movw	r3, #9999	; 0x270f
 800374c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003754:	4333      	orrs	r3, r6
 8003756:	f000 8580 	beq.w	800425a <_dtoa_r+0xb8a>
 800375a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800375c:	b953      	cbnz	r3, 8003774 <_dtoa_r+0xa4>
 800375e:	4b97      	ldr	r3, [pc, #604]	; (80039bc <_dtoa_r+0x2ec>)
 8003760:	e022      	b.n	80037a8 <_dtoa_r+0xd8>
 8003762:	4b97      	ldr	r3, [pc, #604]	; (80039c0 <_dtoa_r+0x2f0>)
 8003764:	9308      	str	r3, [sp, #32]
 8003766:	3308      	adds	r3, #8
 8003768:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	9808      	ldr	r0, [sp, #32]
 800376e:	b019      	add	sp, #100	; 0x64
 8003770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003774:	4b91      	ldr	r3, [pc, #580]	; (80039bc <_dtoa_r+0x2ec>)
 8003776:	9308      	str	r3, [sp, #32]
 8003778:	3303      	adds	r3, #3
 800377a:	e7f5      	b.n	8003768 <_dtoa_r+0x98>
 800377c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003780:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003784:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003788:	2200      	movs	r2, #0
 800378a:	2300      	movs	r3, #0
 800378c:	f7fd f978 	bl	8000a80 <__aeabi_dcmpeq>
 8003790:	4680      	mov	r8, r0
 8003792:	b158      	cbz	r0, 80037ac <_dtoa_r+0xdc>
 8003794:	2301      	movs	r3, #1
 8003796:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8559 	beq.w	8004254 <_dtoa_r+0xb84>
 80037a2:	4888      	ldr	r0, [pc, #544]	; (80039c4 <_dtoa_r+0x2f4>)
 80037a4:	6018      	str	r0, [r3, #0]
 80037a6:	1e43      	subs	r3, r0, #1
 80037a8:	9308      	str	r3, [sp, #32]
 80037aa:	e7df      	b.n	800376c <_dtoa_r+0x9c>
 80037ac:	ab16      	add	r3, sp, #88	; 0x58
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	ab17      	add	r3, sp, #92	; 0x5c
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	4628      	mov	r0, r5
 80037b6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80037ba:	f001 f9bf 	bl	8004b3c <__d2b>
 80037be:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80037c2:	4682      	mov	sl, r0
 80037c4:	2c00      	cmp	r4, #0
 80037c6:	d07e      	beq.n	80038c6 <_dtoa_r+0x1f6>
 80037c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80037cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80037d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80037da:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80037de:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80037e2:	2200      	movs	r2, #0
 80037e4:	4b78      	ldr	r3, [pc, #480]	; (80039c8 <_dtoa_r+0x2f8>)
 80037e6:	f7fc fd2b 	bl	8000240 <__aeabi_dsub>
 80037ea:	a36b      	add	r3, pc, #428	; (adr r3, 8003998 <_dtoa_r+0x2c8>)
 80037ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f0:	f7fc fede 	bl	80005b0 <__aeabi_dmul>
 80037f4:	a36a      	add	r3, pc, #424	; (adr r3, 80039a0 <_dtoa_r+0x2d0>)
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f7fc fd23 	bl	8000244 <__adddf3>
 80037fe:	4606      	mov	r6, r0
 8003800:	4620      	mov	r0, r4
 8003802:	460f      	mov	r7, r1
 8003804:	f7fc fe6a 	bl	80004dc <__aeabi_i2d>
 8003808:	a367      	add	r3, pc, #412	; (adr r3, 80039a8 <_dtoa_r+0x2d8>)
 800380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380e:	f7fc fecf 	bl	80005b0 <__aeabi_dmul>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4630      	mov	r0, r6
 8003818:	4639      	mov	r1, r7
 800381a:	f7fc fd13 	bl	8000244 <__adddf3>
 800381e:	4606      	mov	r6, r0
 8003820:	460f      	mov	r7, r1
 8003822:	f7fd f975 	bl	8000b10 <__aeabi_d2iz>
 8003826:	2200      	movs	r2, #0
 8003828:	4681      	mov	r9, r0
 800382a:	2300      	movs	r3, #0
 800382c:	4630      	mov	r0, r6
 800382e:	4639      	mov	r1, r7
 8003830:	f7fd f930 	bl	8000a94 <__aeabi_dcmplt>
 8003834:	b148      	cbz	r0, 800384a <_dtoa_r+0x17a>
 8003836:	4648      	mov	r0, r9
 8003838:	f7fc fe50 	bl	80004dc <__aeabi_i2d>
 800383c:	4632      	mov	r2, r6
 800383e:	463b      	mov	r3, r7
 8003840:	f7fd f91e 	bl	8000a80 <__aeabi_dcmpeq>
 8003844:	b908      	cbnz	r0, 800384a <_dtoa_r+0x17a>
 8003846:	f109 39ff 	add.w	r9, r9, #4294967295
 800384a:	f1b9 0f16 	cmp.w	r9, #22
 800384e:	d857      	bhi.n	8003900 <_dtoa_r+0x230>
 8003850:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003854:	4b5d      	ldr	r3, [pc, #372]	; (80039cc <_dtoa_r+0x2fc>)
 8003856:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	f7fd f919 	bl	8000a94 <__aeabi_dcmplt>
 8003862:	2800      	cmp	r0, #0
 8003864:	d04e      	beq.n	8003904 <_dtoa_r+0x234>
 8003866:	2300      	movs	r3, #0
 8003868:	f109 39ff 	add.w	r9, r9, #4294967295
 800386c:	930f      	str	r3, [sp, #60]	; 0x3c
 800386e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003870:	1b1c      	subs	r4, r3, r4
 8003872:	1e63      	subs	r3, r4, #1
 8003874:	9309      	str	r3, [sp, #36]	; 0x24
 8003876:	bf49      	itett	mi
 8003878:	f1c4 0301 	rsbmi	r3, r4, #1
 800387c:	2300      	movpl	r3, #0
 800387e:	9306      	strmi	r3, [sp, #24]
 8003880:	2300      	movmi	r3, #0
 8003882:	bf54      	ite	pl
 8003884:	9306      	strpl	r3, [sp, #24]
 8003886:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003888:	f1b9 0f00 	cmp.w	r9, #0
 800388c:	db3c      	blt.n	8003908 <_dtoa_r+0x238>
 800388e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003890:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003894:	444b      	add	r3, r9
 8003896:	9309      	str	r3, [sp, #36]	; 0x24
 8003898:	2300      	movs	r3, #0
 800389a:	930a      	str	r3, [sp, #40]	; 0x28
 800389c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800389e:	2b09      	cmp	r3, #9
 80038a0:	d86c      	bhi.n	800397c <_dtoa_r+0x2ac>
 80038a2:	2b05      	cmp	r3, #5
 80038a4:	bfc4      	itt	gt
 80038a6:	3b04      	subgt	r3, #4
 80038a8:	9322      	strgt	r3, [sp, #136]	; 0x88
 80038aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80038ac:	bfc8      	it	gt
 80038ae:	2400      	movgt	r4, #0
 80038b0:	f1a3 0302 	sub.w	r3, r3, #2
 80038b4:	bfd8      	it	le
 80038b6:	2401      	movle	r4, #1
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	f200 808b 	bhi.w	80039d4 <_dtoa_r+0x304>
 80038be:	e8df f003 	tbb	[pc, r3]
 80038c2:	4f2d      	.short	0x4f2d
 80038c4:	5b4d      	.short	0x5b4d
 80038c6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80038ca:	441c      	add	r4, r3
 80038cc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	bfc3      	ittte	gt
 80038d4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80038d8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80038dc:	fa09 f303 	lslgt.w	r3, r9, r3
 80038e0:	f1c3 0320 	rsble	r3, r3, #32
 80038e4:	bfc6      	itte	gt
 80038e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80038ea:	4318      	orrgt	r0, r3
 80038ec:	fa06 f003 	lslle.w	r0, r6, r3
 80038f0:	f7fc fde4 	bl	80004bc <__aeabi_ui2d>
 80038f4:	2301      	movs	r3, #1
 80038f6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80038fa:	3c01      	subs	r4, #1
 80038fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80038fe:	e770      	b.n	80037e2 <_dtoa_r+0x112>
 8003900:	2301      	movs	r3, #1
 8003902:	e7b3      	b.n	800386c <_dtoa_r+0x19c>
 8003904:	900f      	str	r0, [sp, #60]	; 0x3c
 8003906:	e7b2      	b.n	800386e <_dtoa_r+0x19e>
 8003908:	9b06      	ldr	r3, [sp, #24]
 800390a:	eba3 0309 	sub.w	r3, r3, r9
 800390e:	9306      	str	r3, [sp, #24]
 8003910:	f1c9 0300 	rsb	r3, r9, #0
 8003914:	930a      	str	r3, [sp, #40]	; 0x28
 8003916:	2300      	movs	r3, #0
 8003918:	930e      	str	r3, [sp, #56]	; 0x38
 800391a:	e7bf      	b.n	800389c <_dtoa_r+0x1cc>
 800391c:	2300      	movs	r3, #0
 800391e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003920:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003922:	2b00      	cmp	r3, #0
 8003924:	dc59      	bgt.n	80039da <_dtoa_r+0x30a>
 8003926:	f04f 0b01 	mov.w	fp, #1
 800392a:	465b      	mov	r3, fp
 800392c:	f8cd b008 	str.w	fp, [sp, #8]
 8003930:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8003934:	2200      	movs	r2, #0
 8003936:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003938:	6042      	str	r2, [r0, #4]
 800393a:	2204      	movs	r2, #4
 800393c:	f102 0614 	add.w	r6, r2, #20
 8003940:	429e      	cmp	r6, r3
 8003942:	6841      	ldr	r1, [r0, #4]
 8003944:	d94f      	bls.n	80039e6 <_dtoa_r+0x316>
 8003946:	4628      	mov	r0, r5
 8003948:	f000 fdd2 	bl	80044f0 <_Balloc>
 800394c:	9008      	str	r0, [sp, #32]
 800394e:	2800      	cmp	r0, #0
 8003950:	d14d      	bne.n	80039ee <_dtoa_r+0x31e>
 8003952:	4602      	mov	r2, r0
 8003954:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003958:	4b1d      	ldr	r3, [pc, #116]	; (80039d0 <_dtoa_r+0x300>)
 800395a:	e6cd      	b.n	80036f8 <_dtoa_r+0x28>
 800395c:	2301      	movs	r3, #1
 800395e:	e7de      	b.n	800391e <_dtoa_r+0x24e>
 8003960:	2300      	movs	r3, #0
 8003962:	930b      	str	r3, [sp, #44]	; 0x2c
 8003964:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003966:	eb09 0b03 	add.w	fp, r9, r3
 800396a:	f10b 0301 	add.w	r3, fp, #1
 800396e:	2b01      	cmp	r3, #1
 8003970:	9302      	str	r3, [sp, #8]
 8003972:	bfb8      	it	lt
 8003974:	2301      	movlt	r3, #1
 8003976:	e7dd      	b.n	8003934 <_dtoa_r+0x264>
 8003978:	2301      	movs	r3, #1
 800397a:	e7f2      	b.n	8003962 <_dtoa_r+0x292>
 800397c:	2401      	movs	r4, #1
 800397e:	2300      	movs	r3, #0
 8003980:	940b      	str	r4, [sp, #44]	; 0x2c
 8003982:	9322      	str	r3, [sp, #136]	; 0x88
 8003984:	f04f 3bff 	mov.w	fp, #4294967295
 8003988:	2200      	movs	r2, #0
 800398a:	2312      	movs	r3, #18
 800398c:	f8cd b008 	str.w	fp, [sp, #8]
 8003990:	9223      	str	r2, [sp, #140]	; 0x8c
 8003992:	e7cf      	b.n	8003934 <_dtoa_r+0x264>
 8003994:	f3af 8000 	nop.w
 8003998:	636f4361 	.word	0x636f4361
 800399c:	3fd287a7 	.word	0x3fd287a7
 80039a0:	8b60c8b3 	.word	0x8b60c8b3
 80039a4:	3fc68a28 	.word	0x3fc68a28
 80039a8:	509f79fb 	.word	0x509f79fb
 80039ac:	3fd34413 	.word	0x3fd34413
 80039b0:	08005765 	.word	0x08005765
 80039b4:	0800577c 	.word	0x0800577c
 80039b8:	7ff00000 	.word	0x7ff00000
 80039bc:	08005761 	.word	0x08005761
 80039c0:	08005758 	.word	0x08005758
 80039c4:	08005735 	.word	0x08005735
 80039c8:	3ff80000 	.word	0x3ff80000
 80039cc:	080058d8 	.word	0x080058d8
 80039d0:	080057db 	.word	0x080057db
 80039d4:	2301      	movs	r3, #1
 80039d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80039d8:	e7d4      	b.n	8003984 <_dtoa_r+0x2b4>
 80039da:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80039de:	465b      	mov	r3, fp
 80039e0:	f8cd b008 	str.w	fp, [sp, #8]
 80039e4:	e7a6      	b.n	8003934 <_dtoa_r+0x264>
 80039e6:	3101      	adds	r1, #1
 80039e8:	6041      	str	r1, [r0, #4]
 80039ea:	0052      	lsls	r2, r2, #1
 80039ec:	e7a6      	b.n	800393c <_dtoa_r+0x26c>
 80039ee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80039f0:	9a08      	ldr	r2, [sp, #32]
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	9b02      	ldr	r3, [sp, #8]
 80039f6:	2b0e      	cmp	r3, #14
 80039f8:	f200 80a8 	bhi.w	8003b4c <_dtoa_r+0x47c>
 80039fc:	2c00      	cmp	r4, #0
 80039fe:	f000 80a5 	beq.w	8003b4c <_dtoa_r+0x47c>
 8003a02:	f1b9 0f00 	cmp.w	r9, #0
 8003a06:	dd34      	ble.n	8003a72 <_dtoa_r+0x3a2>
 8003a08:	4a9a      	ldr	r2, [pc, #616]	; (8003c74 <_dtoa_r+0x5a4>)
 8003a0a:	f009 030f 	and.w	r3, r9, #15
 8003a0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003a12:	f419 7f80 	tst.w	r9, #256	; 0x100
 8003a16:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a1a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003a1e:	ea4f 1429 	mov.w	r4, r9, asr #4
 8003a22:	d016      	beq.n	8003a52 <_dtoa_r+0x382>
 8003a24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a28:	4b93      	ldr	r3, [pc, #588]	; (8003c78 <_dtoa_r+0x5a8>)
 8003a2a:	2703      	movs	r7, #3
 8003a2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a30:	f7fc fee8 	bl	8000804 <__aeabi_ddiv>
 8003a34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a38:	f004 040f 	and.w	r4, r4, #15
 8003a3c:	4e8e      	ldr	r6, [pc, #568]	; (8003c78 <_dtoa_r+0x5a8>)
 8003a3e:	b954      	cbnz	r4, 8003a56 <_dtoa_r+0x386>
 8003a40:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003a48:	f7fc fedc 	bl	8000804 <__aeabi_ddiv>
 8003a4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a50:	e029      	b.n	8003aa6 <_dtoa_r+0x3d6>
 8003a52:	2702      	movs	r7, #2
 8003a54:	e7f2      	b.n	8003a3c <_dtoa_r+0x36c>
 8003a56:	07e1      	lsls	r1, r4, #31
 8003a58:	d508      	bpl.n	8003a6c <_dtoa_r+0x39c>
 8003a5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003a5e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003a62:	f7fc fda5 	bl	80005b0 <__aeabi_dmul>
 8003a66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003a6a:	3701      	adds	r7, #1
 8003a6c:	1064      	asrs	r4, r4, #1
 8003a6e:	3608      	adds	r6, #8
 8003a70:	e7e5      	b.n	8003a3e <_dtoa_r+0x36e>
 8003a72:	f000 80a5 	beq.w	8003bc0 <_dtoa_r+0x4f0>
 8003a76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003a7a:	f1c9 0400 	rsb	r4, r9, #0
 8003a7e:	4b7d      	ldr	r3, [pc, #500]	; (8003c74 <_dtoa_r+0x5a4>)
 8003a80:	f004 020f 	and.w	r2, r4, #15
 8003a84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8c:	f7fc fd90 	bl	80005b0 <__aeabi_dmul>
 8003a90:	2702      	movs	r7, #2
 8003a92:	2300      	movs	r3, #0
 8003a94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003a98:	4e77      	ldr	r6, [pc, #476]	; (8003c78 <_dtoa_r+0x5a8>)
 8003a9a:	1124      	asrs	r4, r4, #4
 8003a9c:	2c00      	cmp	r4, #0
 8003a9e:	f040 8084 	bne.w	8003baa <_dtoa_r+0x4da>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1d2      	bne.n	8003a4c <_dtoa_r+0x37c>
 8003aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 808b 	beq.w	8003bc4 <_dtoa_r+0x4f4>
 8003aae:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003ab2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003ab6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003aba:	2200      	movs	r2, #0
 8003abc:	4b6f      	ldr	r3, [pc, #444]	; (8003c7c <_dtoa_r+0x5ac>)
 8003abe:	f7fc ffe9 	bl	8000a94 <__aeabi_dcmplt>
 8003ac2:	2800      	cmp	r0, #0
 8003ac4:	d07e      	beq.n	8003bc4 <_dtoa_r+0x4f4>
 8003ac6:	9b02      	ldr	r3, [sp, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d07b      	beq.n	8003bc4 <_dtoa_r+0x4f4>
 8003acc:	f1bb 0f00 	cmp.w	fp, #0
 8003ad0:	dd38      	ble.n	8003b44 <_dtoa_r+0x474>
 8003ad2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	4b69      	ldr	r3, [pc, #420]	; (8003c80 <_dtoa_r+0x5b0>)
 8003ada:	f7fc fd69 	bl	80005b0 <__aeabi_dmul>
 8003ade:	465c      	mov	r4, fp
 8003ae0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003ae4:	f109 38ff 	add.w	r8, r9, #4294967295
 8003ae8:	3701      	adds	r7, #1
 8003aea:	4638      	mov	r0, r7
 8003aec:	f7fc fcf6 	bl	80004dc <__aeabi_i2d>
 8003af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003af4:	f7fc fd5c 	bl	80005b0 <__aeabi_dmul>
 8003af8:	2200      	movs	r2, #0
 8003afa:	4b62      	ldr	r3, [pc, #392]	; (8003c84 <_dtoa_r+0x5b4>)
 8003afc:	f7fc fba2 	bl	8000244 <__adddf3>
 8003b00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003b04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003b08:	9611      	str	r6, [sp, #68]	; 0x44
 8003b0a:	2c00      	cmp	r4, #0
 8003b0c:	d15d      	bne.n	8003bca <_dtoa_r+0x4fa>
 8003b0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b12:	2200      	movs	r2, #0
 8003b14:	4b5c      	ldr	r3, [pc, #368]	; (8003c88 <_dtoa_r+0x5b8>)
 8003b16:	f7fc fb93 	bl	8000240 <__aeabi_dsub>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003b22:	4633      	mov	r3, r6
 8003b24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b26:	f7fc ffd3 	bl	8000ad0 <__aeabi_dcmpgt>
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	f040 829e 	bne.w	800406c <_dtoa_r+0x99c>
 8003b30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003b36:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003b3a:	f7fc ffab 	bl	8000a94 <__aeabi_dcmplt>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	f040 8292 	bne.w	8004068 <_dtoa_r+0x998>
 8003b44:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8003b48:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003b4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f2c0 8153 	blt.w	8003dfa <_dtoa_r+0x72a>
 8003b54:	f1b9 0f0e 	cmp.w	r9, #14
 8003b58:	f300 814f 	bgt.w	8003dfa <_dtoa_r+0x72a>
 8003b5c:	4b45      	ldr	r3, [pc, #276]	; (8003c74 <_dtoa_r+0x5a4>)
 8003b5e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8003b62:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b66:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003b6a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f280 80db 	bge.w	8003d28 <_dtoa_r+0x658>
 8003b72:	9b02      	ldr	r3, [sp, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f300 80d7 	bgt.w	8003d28 <_dtoa_r+0x658>
 8003b7a:	f040 8274 	bne.w	8004066 <_dtoa_r+0x996>
 8003b7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003b82:	2200      	movs	r2, #0
 8003b84:	4b40      	ldr	r3, [pc, #256]	; (8003c88 <_dtoa_r+0x5b8>)
 8003b86:	f7fc fd13 	bl	80005b0 <__aeabi_dmul>
 8003b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b8e:	f7fc ff95 	bl	8000abc <__aeabi_dcmpge>
 8003b92:	9c02      	ldr	r4, [sp, #8]
 8003b94:	4626      	mov	r6, r4
 8003b96:	2800      	cmp	r0, #0
 8003b98:	f040 824a 	bne.w	8004030 <_dtoa_r+0x960>
 8003b9c:	2331      	movs	r3, #49	; 0x31
 8003b9e:	9f08      	ldr	r7, [sp, #32]
 8003ba0:	f109 0901 	add.w	r9, r9, #1
 8003ba4:	f807 3b01 	strb.w	r3, [r7], #1
 8003ba8:	e246      	b.n	8004038 <_dtoa_r+0x968>
 8003baa:	07e2      	lsls	r2, r4, #31
 8003bac:	d505      	bpl.n	8003bba <_dtoa_r+0x4ea>
 8003bae:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003bb2:	f7fc fcfd 	bl	80005b0 <__aeabi_dmul>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	3701      	adds	r7, #1
 8003bba:	1064      	asrs	r4, r4, #1
 8003bbc:	3608      	adds	r6, #8
 8003bbe:	e76d      	b.n	8003a9c <_dtoa_r+0x3cc>
 8003bc0:	2702      	movs	r7, #2
 8003bc2:	e770      	b.n	8003aa6 <_dtoa_r+0x3d6>
 8003bc4:	46c8      	mov	r8, r9
 8003bc6:	9c02      	ldr	r4, [sp, #8]
 8003bc8:	e78f      	b.n	8003aea <_dtoa_r+0x41a>
 8003bca:	9908      	ldr	r1, [sp, #32]
 8003bcc:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <_dtoa_r+0x5a4>)
 8003bce:	4421      	add	r1, r4
 8003bd0:	9112      	str	r1, [sp, #72]	; 0x48
 8003bd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003bd8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003bdc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003be0:	2900      	cmp	r1, #0
 8003be2:	d055      	beq.n	8003c90 <_dtoa_r+0x5c0>
 8003be4:	2000      	movs	r0, #0
 8003be6:	4929      	ldr	r1, [pc, #164]	; (8003c8c <_dtoa_r+0x5bc>)
 8003be8:	f7fc fe0c 	bl	8000804 <__aeabi_ddiv>
 8003bec:	463b      	mov	r3, r7
 8003bee:	4632      	mov	r2, r6
 8003bf0:	f7fc fb26 	bl	8000240 <__aeabi_dsub>
 8003bf4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003bf8:	9f08      	ldr	r7, [sp, #32]
 8003bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003bfe:	f7fc ff87 	bl	8000b10 <__aeabi_d2iz>
 8003c02:	4604      	mov	r4, r0
 8003c04:	f7fc fc6a 	bl	80004dc <__aeabi_i2d>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c10:	f7fc fb16 	bl	8000240 <__aeabi_dsub>
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	3430      	adds	r4, #48	; 0x30
 8003c1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003c1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003c22:	f807 4b01 	strb.w	r4, [r7], #1
 8003c26:	f7fc ff35 	bl	8000a94 <__aeabi_dcmplt>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d174      	bne.n	8003d18 <_dtoa_r+0x648>
 8003c2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c32:	2000      	movs	r0, #0
 8003c34:	4911      	ldr	r1, [pc, #68]	; (8003c7c <_dtoa_r+0x5ac>)
 8003c36:	f7fc fb03 	bl	8000240 <__aeabi_dsub>
 8003c3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003c3e:	f7fc ff29 	bl	8000a94 <__aeabi_dcmplt>
 8003c42:	2800      	cmp	r0, #0
 8003c44:	f040 80b6 	bne.w	8003db4 <_dtoa_r+0x6e4>
 8003c48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c4a:	429f      	cmp	r7, r3
 8003c4c:	f43f af7a 	beq.w	8003b44 <_dtoa_r+0x474>
 8003c50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003c54:	2200      	movs	r2, #0
 8003c56:	4b0a      	ldr	r3, [pc, #40]	; (8003c80 <_dtoa_r+0x5b0>)
 8003c58:	f7fc fcaa 	bl	80005b0 <__aeabi_dmul>
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003c62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c66:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <_dtoa_r+0x5b0>)
 8003c68:	f7fc fca2 	bl	80005b0 <__aeabi_dmul>
 8003c6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003c70:	e7c3      	b.n	8003bfa <_dtoa_r+0x52a>
 8003c72:	bf00      	nop
 8003c74:	080058d8 	.word	0x080058d8
 8003c78:	080058b0 	.word	0x080058b0
 8003c7c:	3ff00000 	.word	0x3ff00000
 8003c80:	40240000 	.word	0x40240000
 8003c84:	401c0000 	.word	0x401c0000
 8003c88:	40140000 	.word	0x40140000
 8003c8c:	3fe00000 	.word	0x3fe00000
 8003c90:	4630      	mov	r0, r6
 8003c92:	4639      	mov	r1, r7
 8003c94:	f7fc fc8c 	bl	80005b0 <__aeabi_dmul>
 8003c98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c9a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003c9e:	9c08      	ldr	r4, [sp, #32]
 8003ca0:	9314      	str	r3, [sp, #80]	; 0x50
 8003ca2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ca6:	f7fc ff33 	bl	8000b10 <__aeabi_d2iz>
 8003caa:	9015      	str	r0, [sp, #84]	; 0x54
 8003cac:	f7fc fc16 	bl	80004dc <__aeabi_i2d>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003cb8:	f7fc fac2 	bl	8000240 <__aeabi_dsub>
 8003cbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003cbe:	4606      	mov	r6, r0
 8003cc0:	3330      	adds	r3, #48	; 0x30
 8003cc2:	f804 3b01 	strb.w	r3, [r4], #1
 8003cc6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003cc8:	460f      	mov	r7, r1
 8003cca:	429c      	cmp	r4, r3
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	d124      	bne.n	8003d1c <_dtoa_r+0x64c>
 8003cd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003cd6:	4bb3      	ldr	r3, [pc, #716]	; (8003fa4 <_dtoa_r+0x8d4>)
 8003cd8:	f7fc fab4 	bl	8000244 <__adddf3>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	4639      	mov	r1, r7
 8003ce4:	f7fc fef4 	bl	8000ad0 <__aeabi_dcmpgt>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d162      	bne.n	8003db2 <_dtoa_r+0x6e2>
 8003cec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	49ac      	ldr	r1, [pc, #688]	; (8003fa4 <_dtoa_r+0x8d4>)
 8003cf4:	f7fc faa4 	bl	8000240 <__aeabi_dsub>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	4639      	mov	r1, r7
 8003d00:	f7fc fec8 	bl	8000a94 <__aeabi_dcmplt>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	f43f af1d 	beq.w	8003b44 <_dtoa_r+0x474>
 8003d0a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8003d0c:	1e7b      	subs	r3, r7, #1
 8003d0e:	9314      	str	r3, [sp, #80]	; 0x50
 8003d10:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8003d14:	2b30      	cmp	r3, #48	; 0x30
 8003d16:	d0f8      	beq.n	8003d0a <_dtoa_r+0x63a>
 8003d18:	46c1      	mov	r9, r8
 8003d1a:	e03a      	b.n	8003d92 <_dtoa_r+0x6c2>
 8003d1c:	4ba2      	ldr	r3, [pc, #648]	; (8003fa8 <_dtoa_r+0x8d8>)
 8003d1e:	f7fc fc47 	bl	80005b0 <__aeabi_dmul>
 8003d22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d26:	e7bc      	b.n	8003ca2 <_dtoa_r+0x5d2>
 8003d28:	9f08      	ldr	r7, [sp, #32]
 8003d2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d32:	f7fc fd67 	bl	8000804 <__aeabi_ddiv>
 8003d36:	f7fc feeb 	bl	8000b10 <__aeabi_d2iz>
 8003d3a:	4604      	mov	r4, r0
 8003d3c:	f7fc fbce 	bl	80004dc <__aeabi_i2d>
 8003d40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d44:	f7fc fc34 	bl	80005b0 <__aeabi_dmul>
 8003d48:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	4602      	mov	r2, r0
 8003d50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003d54:	f7fc fa74 	bl	8000240 <__aeabi_dsub>
 8003d58:	f807 6b01 	strb.w	r6, [r7], #1
 8003d5c:	9e08      	ldr	r6, [sp, #32]
 8003d5e:	9b02      	ldr	r3, [sp, #8]
 8003d60:	1bbe      	subs	r6, r7, r6
 8003d62:	42b3      	cmp	r3, r6
 8003d64:	d13a      	bne.n	8003ddc <_dtoa_r+0x70c>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	f7fc fa6b 	bl	8000244 <__adddf3>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d7a:	f7fc fea9 	bl	8000ad0 <__aeabi_dcmpgt>
 8003d7e:	bb58      	cbnz	r0, 8003dd8 <_dtoa_r+0x708>
 8003d80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d88:	f7fc fe7a 	bl	8000a80 <__aeabi_dcmpeq>
 8003d8c:	b108      	cbz	r0, 8003d92 <_dtoa_r+0x6c2>
 8003d8e:	07e1      	lsls	r1, r4, #31
 8003d90:	d422      	bmi.n	8003dd8 <_dtoa_r+0x708>
 8003d92:	4628      	mov	r0, r5
 8003d94:	4651      	mov	r1, sl
 8003d96:	f000 fbeb 	bl	8004570 <_Bfree>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	703b      	strb	r3, [r7, #0]
 8003d9e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003da0:	f109 0001 	add.w	r0, r9, #1
 8003da4:	6018      	str	r0, [r3, #0]
 8003da6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f43f acdf 	beq.w	800376c <_dtoa_r+0x9c>
 8003dae:	601f      	str	r7, [r3, #0]
 8003db0:	e4dc      	b.n	800376c <_dtoa_r+0x9c>
 8003db2:	4627      	mov	r7, r4
 8003db4:	463b      	mov	r3, r7
 8003db6:	461f      	mov	r7, r3
 8003db8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003dbc:	2a39      	cmp	r2, #57	; 0x39
 8003dbe:	d107      	bne.n	8003dd0 <_dtoa_r+0x700>
 8003dc0:	9a08      	ldr	r2, [sp, #32]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d1f7      	bne.n	8003db6 <_dtoa_r+0x6e6>
 8003dc6:	2230      	movs	r2, #48	; 0x30
 8003dc8:	9908      	ldr	r1, [sp, #32]
 8003dca:	f108 0801 	add.w	r8, r8, #1
 8003dce:	700a      	strb	r2, [r1, #0]
 8003dd0:	781a      	ldrb	r2, [r3, #0]
 8003dd2:	3201      	adds	r2, #1
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	e79f      	b.n	8003d18 <_dtoa_r+0x648>
 8003dd8:	46c8      	mov	r8, r9
 8003dda:	e7eb      	b.n	8003db4 <_dtoa_r+0x6e4>
 8003ddc:	2200      	movs	r2, #0
 8003dde:	4b72      	ldr	r3, [pc, #456]	; (8003fa8 <_dtoa_r+0x8d8>)
 8003de0:	f7fc fbe6 	bl	80005b0 <__aeabi_dmul>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003dec:	2200      	movs	r2, #0
 8003dee:	2300      	movs	r3, #0
 8003df0:	f7fc fe46 	bl	8000a80 <__aeabi_dcmpeq>
 8003df4:	2800      	cmp	r0, #0
 8003df6:	d098      	beq.n	8003d2a <_dtoa_r+0x65a>
 8003df8:	e7cb      	b.n	8003d92 <_dtoa_r+0x6c2>
 8003dfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003dfc:	2a00      	cmp	r2, #0
 8003dfe:	f000 80cd 	beq.w	8003f9c <_dtoa_r+0x8cc>
 8003e02:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003e04:	2a01      	cmp	r2, #1
 8003e06:	f300 80af 	bgt.w	8003f68 <_dtoa_r+0x898>
 8003e0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003e0c:	2a00      	cmp	r2, #0
 8003e0e:	f000 80a7 	beq.w	8003f60 <_dtoa_r+0x890>
 8003e12:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003e16:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003e18:	9f06      	ldr	r7, [sp, #24]
 8003e1a:	9a06      	ldr	r2, [sp, #24]
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	441a      	add	r2, r3
 8003e20:	9206      	str	r2, [sp, #24]
 8003e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e24:	4628      	mov	r0, r5
 8003e26:	441a      	add	r2, r3
 8003e28:	9209      	str	r2, [sp, #36]	; 0x24
 8003e2a:	f000 fc5b 	bl	80046e4 <__i2b>
 8003e2e:	4606      	mov	r6, r0
 8003e30:	2f00      	cmp	r7, #0
 8003e32:	dd0c      	ble.n	8003e4e <_dtoa_r+0x77e>
 8003e34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	dd09      	ble.n	8003e4e <_dtoa_r+0x77e>
 8003e3a:	42bb      	cmp	r3, r7
 8003e3c:	bfa8      	it	ge
 8003e3e:	463b      	movge	r3, r7
 8003e40:	9a06      	ldr	r2, [sp, #24]
 8003e42:	1aff      	subs	r7, r7, r3
 8003e44:	1ad2      	subs	r2, r2, r3
 8003e46:	9206      	str	r2, [sp, #24]
 8003e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e50:	b1f3      	cbz	r3, 8003e90 <_dtoa_r+0x7c0>
 8003e52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80a9 	beq.w	8003fac <_dtoa_r+0x8dc>
 8003e5a:	2c00      	cmp	r4, #0
 8003e5c:	dd10      	ble.n	8003e80 <_dtoa_r+0x7b0>
 8003e5e:	4631      	mov	r1, r6
 8003e60:	4622      	mov	r2, r4
 8003e62:	4628      	mov	r0, r5
 8003e64:	f000 fcf8 	bl	8004858 <__pow5mult>
 8003e68:	4652      	mov	r2, sl
 8003e6a:	4601      	mov	r1, r0
 8003e6c:	4606      	mov	r6, r0
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f000 fc4e 	bl	8004710 <__multiply>
 8003e74:	4680      	mov	r8, r0
 8003e76:	4651      	mov	r1, sl
 8003e78:	4628      	mov	r0, r5
 8003e7a:	f000 fb79 	bl	8004570 <_Bfree>
 8003e7e:	46c2      	mov	sl, r8
 8003e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e82:	1b1a      	subs	r2, r3, r4
 8003e84:	d004      	beq.n	8003e90 <_dtoa_r+0x7c0>
 8003e86:	4651      	mov	r1, sl
 8003e88:	4628      	mov	r0, r5
 8003e8a:	f000 fce5 	bl	8004858 <__pow5mult>
 8003e8e:	4682      	mov	sl, r0
 8003e90:	2101      	movs	r1, #1
 8003e92:	4628      	mov	r0, r5
 8003e94:	f000 fc26 	bl	80046e4 <__i2b>
 8003e98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f340 8087 	ble.w	8003fb0 <_dtoa_r+0x8e0>
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	4601      	mov	r1, r0
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f000 fcd6 	bl	8004858 <__pow5mult>
 8003eac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003eae:	4604      	mov	r4, r0
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	f340 8080 	ble.w	8003fb6 <_dtoa_r+0x8e6>
 8003eb6:	f04f 0800 	mov.w	r8, #0
 8003eba:	6923      	ldr	r3, [r4, #16]
 8003ebc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003ec0:	6918      	ldr	r0, [r3, #16]
 8003ec2:	f000 fbc1 	bl	8004648 <__hi0bits>
 8003ec6:	f1c0 0020 	rsb	r0, r0, #32
 8003eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ecc:	4418      	add	r0, r3
 8003ece:	f010 001f 	ands.w	r0, r0, #31
 8003ed2:	f000 8092 	beq.w	8003ffa <_dtoa_r+0x92a>
 8003ed6:	f1c0 0320 	rsb	r3, r0, #32
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	f340 808a 	ble.w	8003ff4 <_dtoa_r+0x924>
 8003ee0:	f1c0 001c 	rsb	r0, r0, #28
 8003ee4:	9b06      	ldr	r3, [sp, #24]
 8003ee6:	4407      	add	r7, r0
 8003ee8:	4403      	add	r3, r0
 8003eea:	9306      	str	r3, [sp, #24]
 8003eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eee:	4403      	add	r3, r0
 8003ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ef2:	9b06      	ldr	r3, [sp, #24]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	dd05      	ble.n	8003f04 <_dtoa_r+0x834>
 8003ef8:	4651      	mov	r1, sl
 8003efa:	461a      	mov	r2, r3
 8003efc:	4628      	mov	r0, r5
 8003efe:	f000 fd05 	bl	800490c <__lshift>
 8003f02:	4682      	mov	sl, r0
 8003f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	dd05      	ble.n	8003f16 <_dtoa_r+0x846>
 8003f0a:	4621      	mov	r1, r4
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f000 fcfc 	bl	800490c <__lshift>
 8003f14:	4604      	mov	r4, r0
 8003f16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d070      	beq.n	8003ffe <_dtoa_r+0x92e>
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	4650      	mov	r0, sl
 8003f20:	f000 fd60 	bl	80049e4 <__mcmp>
 8003f24:	2800      	cmp	r0, #0
 8003f26:	da6a      	bge.n	8003ffe <_dtoa_r+0x92e>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	4651      	mov	r1, sl
 8003f2c:	220a      	movs	r2, #10
 8003f2e:	4628      	mov	r0, r5
 8003f30:	f000 fb40 	bl	80045b4 <__multadd>
 8003f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f36:	4682      	mov	sl, r0
 8003f38:	f109 39ff 	add.w	r9, r9, #4294967295
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8193 	beq.w	8004268 <_dtoa_r+0xb98>
 8003f42:	4631      	mov	r1, r6
 8003f44:	2300      	movs	r3, #0
 8003f46:	220a      	movs	r2, #10
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f000 fb33 	bl	80045b4 <__multadd>
 8003f4e:	f1bb 0f00 	cmp.w	fp, #0
 8003f52:	4606      	mov	r6, r0
 8003f54:	f300 8093 	bgt.w	800407e <_dtoa_r+0x9ae>
 8003f58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	dc57      	bgt.n	800400e <_dtoa_r+0x93e>
 8003f5e:	e08e      	b.n	800407e <_dtoa_r+0x9ae>
 8003f60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003f62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003f66:	e756      	b.n	8003e16 <_dtoa_r+0x746>
 8003f68:	9b02      	ldr	r3, [sp, #8]
 8003f6a:	1e5c      	subs	r4, r3, #1
 8003f6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f6e:	42a3      	cmp	r3, r4
 8003f70:	bfb7      	itett	lt
 8003f72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003f74:	1b1c      	subge	r4, r3, r4
 8003f76:	1ae2      	sublt	r2, r4, r3
 8003f78:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003f7a:	bfbe      	ittt	lt
 8003f7c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003f7e:	189b      	addlt	r3, r3, r2
 8003f80:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003f82:	9b02      	ldr	r3, [sp, #8]
 8003f84:	bfb8      	it	lt
 8003f86:	2400      	movlt	r4, #0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	bfbb      	ittet	lt
 8003f8c:	9b06      	ldrlt	r3, [sp, #24]
 8003f8e:	9a02      	ldrlt	r2, [sp, #8]
 8003f90:	9f06      	ldrge	r7, [sp, #24]
 8003f92:	1a9f      	sublt	r7, r3, r2
 8003f94:	bfac      	ite	ge
 8003f96:	9b02      	ldrge	r3, [sp, #8]
 8003f98:	2300      	movlt	r3, #0
 8003f9a:	e73e      	b.n	8003e1a <_dtoa_r+0x74a>
 8003f9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003f9e:	9f06      	ldr	r7, [sp, #24]
 8003fa0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003fa2:	e745      	b.n	8003e30 <_dtoa_r+0x760>
 8003fa4:	3fe00000 	.word	0x3fe00000
 8003fa8:	40240000 	.word	0x40240000
 8003fac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003fae:	e76a      	b.n	8003e86 <_dtoa_r+0x7b6>
 8003fb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	dc19      	bgt.n	8003fea <_dtoa_r+0x91a>
 8003fb6:	9b04      	ldr	r3, [sp, #16]
 8003fb8:	b9bb      	cbnz	r3, 8003fea <_dtoa_r+0x91a>
 8003fba:	9b05      	ldr	r3, [sp, #20]
 8003fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fc0:	b99b      	cbnz	r3, 8003fea <_dtoa_r+0x91a>
 8003fc2:	9b05      	ldr	r3, [sp, #20]
 8003fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fc8:	0d1b      	lsrs	r3, r3, #20
 8003fca:	051b      	lsls	r3, r3, #20
 8003fcc:	b183      	cbz	r3, 8003ff0 <_dtoa_r+0x920>
 8003fce:	f04f 0801 	mov.w	r8, #1
 8003fd2:	9b06      	ldr	r3, [sp, #24]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	9306      	str	r3, [sp, #24]
 8003fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fda:	3301      	adds	r3, #1
 8003fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8003fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f47f af6a 	bne.w	8003eba <_dtoa_r+0x7ea>
 8003fe6:	2001      	movs	r0, #1
 8003fe8:	e76f      	b.n	8003eca <_dtoa_r+0x7fa>
 8003fea:	f04f 0800 	mov.w	r8, #0
 8003fee:	e7f6      	b.n	8003fde <_dtoa_r+0x90e>
 8003ff0:	4698      	mov	r8, r3
 8003ff2:	e7f4      	b.n	8003fde <_dtoa_r+0x90e>
 8003ff4:	f43f af7d 	beq.w	8003ef2 <_dtoa_r+0x822>
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	301c      	adds	r0, #28
 8003ffc:	e772      	b.n	8003ee4 <_dtoa_r+0x814>
 8003ffe:	9b02      	ldr	r3, [sp, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	dc36      	bgt.n	8004072 <_dtoa_r+0x9a2>
 8004004:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004006:	2b02      	cmp	r3, #2
 8004008:	dd33      	ble.n	8004072 <_dtoa_r+0x9a2>
 800400a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800400e:	f1bb 0f00 	cmp.w	fp, #0
 8004012:	d10d      	bne.n	8004030 <_dtoa_r+0x960>
 8004014:	4621      	mov	r1, r4
 8004016:	465b      	mov	r3, fp
 8004018:	2205      	movs	r2, #5
 800401a:	4628      	mov	r0, r5
 800401c:	f000 faca 	bl	80045b4 <__multadd>
 8004020:	4601      	mov	r1, r0
 8004022:	4604      	mov	r4, r0
 8004024:	4650      	mov	r0, sl
 8004026:	f000 fcdd 	bl	80049e4 <__mcmp>
 800402a:	2800      	cmp	r0, #0
 800402c:	f73f adb6 	bgt.w	8003b9c <_dtoa_r+0x4cc>
 8004030:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004032:	9f08      	ldr	r7, [sp, #32]
 8004034:	ea6f 0903 	mvn.w	r9, r3
 8004038:	f04f 0800 	mov.w	r8, #0
 800403c:	4621      	mov	r1, r4
 800403e:	4628      	mov	r0, r5
 8004040:	f000 fa96 	bl	8004570 <_Bfree>
 8004044:	2e00      	cmp	r6, #0
 8004046:	f43f aea4 	beq.w	8003d92 <_dtoa_r+0x6c2>
 800404a:	f1b8 0f00 	cmp.w	r8, #0
 800404e:	d005      	beq.n	800405c <_dtoa_r+0x98c>
 8004050:	45b0      	cmp	r8, r6
 8004052:	d003      	beq.n	800405c <_dtoa_r+0x98c>
 8004054:	4641      	mov	r1, r8
 8004056:	4628      	mov	r0, r5
 8004058:	f000 fa8a 	bl	8004570 <_Bfree>
 800405c:	4631      	mov	r1, r6
 800405e:	4628      	mov	r0, r5
 8004060:	f000 fa86 	bl	8004570 <_Bfree>
 8004064:	e695      	b.n	8003d92 <_dtoa_r+0x6c2>
 8004066:	2400      	movs	r4, #0
 8004068:	4626      	mov	r6, r4
 800406a:	e7e1      	b.n	8004030 <_dtoa_r+0x960>
 800406c:	46c1      	mov	r9, r8
 800406e:	4626      	mov	r6, r4
 8004070:	e594      	b.n	8003b9c <_dtoa_r+0x4cc>
 8004072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004074:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 80fc 	beq.w	8004276 <_dtoa_r+0xba6>
 800407e:	2f00      	cmp	r7, #0
 8004080:	dd05      	ble.n	800408e <_dtoa_r+0x9be>
 8004082:	4631      	mov	r1, r6
 8004084:	463a      	mov	r2, r7
 8004086:	4628      	mov	r0, r5
 8004088:	f000 fc40 	bl	800490c <__lshift>
 800408c:	4606      	mov	r6, r0
 800408e:	f1b8 0f00 	cmp.w	r8, #0
 8004092:	d05c      	beq.n	800414e <_dtoa_r+0xa7e>
 8004094:	4628      	mov	r0, r5
 8004096:	6871      	ldr	r1, [r6, #4]
 8004098:	f000 fa2a 	bl	80044f0 <_Balloc>
 800409c:	4607      	mov	r7, r0
 800409e:	b928      	cbnz	r0, 80040ac <_dtoa_r+0x9dc>
 80040a0:	4602      	mov	r2, r0
 80040a2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80040a6:	4b7e      	ldr	r3, [pc, #504]	; (80042a0 <_dtoa_r+0xbd0>)
 80040a8:	f7ff bb26 	b.w	80036f8 <_dtoa_r+0x28>
 80040ac:	6932      	ldr	r2, [r6, #16]
 80040ae:	f106 010c 	add.w	r1, r6, #12
 80040b2:	3202      	adds	r2, #2
 80040b4:	0092      	lsls	r2, r2, #2
 80040b6:	300c      	adds	r0, #12
 80040b8:	f000 fa0c 	bl	80044d4 <memcpy>
 80040bc:	2201      	movs	r2, #1
 80040be:	4639      	mov	r1, r7
 80040c0:	4628      	mov	r0, r5
 80040c2:	f000 fc23 	bl	800490c <__lshift>
 80040c6:	46b0      	mov	r8, r6
 80040c8:	4606      	mov	r6, r0
 80040ca:	9b08      	ldr	r3, [sp, #32]
 80040cc:	3301      	adds	r3, #1
 80040ce:	9302      	str	r3, [sp, #8]
 80040d0:	9b08      	ldr	r3, [sp, #32]
 80040d2:	445b      	add	r3, fp
 80040d4:	930a      	str	r3, [sp, #40]	; 0x28
 80040d6:	9b04      	ldr	r3, [sp, #16]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	9309      	str	r3, [sp, #36]	; 0x24
 80040de:	9b02      	ldr	r3, [sp, #8]
 80040e0:	4621      	mov	r1, r4
 80040e2:	4650      	mov	r0, sl
 80040e4:	f103 3bff 	add.w	fp, r3, #4294967295
 80040e8:	f7ff fa64 	bl	80035b4 <quorem>
 80040ec:	4603      	mov	r3, r0
 80040ee:	4641      	mov	r1, r8
 80040f0:	3330      	adds	r3, #48	; 0x30
 80040f2:	9004      	str	r0, [sp, #16]
 80040f4:	4650      	mov	r0, sl
 80040f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80040f8:	f000 fc74 	bl	80049e4 <__mcmp>
 80040fc:	4632      	mov	r2, r6
 80040fe:	9006      	str	r0, [sp, #24]
 8004100:	4621      	mov	r1, r4
 8004102:	4628      	mov	r0, r5
 8004104:	f000 fc8a 	bl	8004a1c <__mdiff>
 8004108:	68c2      	ldr	r2, [r0, #12]
 800410a:	4607      	mov	r7, r0
 800410c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800410e:	bb02      	cbnz	r2, 8004152 <_dtoa_r+0xa82>
 8004110:	4601      	mov	r1, r0
 8004112:	4650      	mov	r0, sl
 8004114:	f000 fc66 	bl	80049e4 <__mcmp>
 8004118:	4602      	mov	r2, r0
 800411a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800411c:	4639      	mov	r1, r7
 800411e:	4628      	mov	r0, r5
 8004120:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004124:	f000 fa24 	bl	8004570 <_Bfree>
 8004128:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800412a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800412c:	9f02      	ldr	r7, [sp, #8]
 800412e:	ea43 0102 	orr.w	r1, r3, r2
 8004132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004134:	430b      	orrs	r3, r1
 8004136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004138:	d10d      	bne.n	8004156 <_dtoa_r+0xa86>
 800413a:	2b39      	cmp	r3, #57	; 0x39
 800413c:	d027      	beq.n	800418e <_dtoa_r+0xabe>
 800413e:	9a06      	ldr	r2, [sp, #24]
 8004140:	2a00      	cmp	r2, #0
 8004142:	dd01      	ble.n	8004148 <_dtoa_r+0xa78>
 8004144:	9b04      	ldr	r3, [sp, #16]
 8004146:	3331      	adds	r3, #49	; 0x31
 8004148:	f88b 3000 	strb.w	r3, [fp]
 800414c:	e776      	b.n	800403c <_dtoa_r+0x96c>
 800414e:	4630      	mov	r0, r6
 8004150:	e7b9      	b.n	80040c6 <_dtoa_r+0x9f6>
 8004152:	2201      	movs	r2, #1
 8004154:	e7e2      	b.n	800411c <_dtoa_r+0xa4c>
 8004156:	9906      	ldr	r1, [sp, #24]
 8004158:	2900      	cmp	r1, #0
 800415a:	db04      	blt.n	8004166 <_dtoa_r+0xa96>
 800415c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800415e:	4301      	orrs	r1, r0
 8004160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004162:	4301      	orrs	r1, r0
 8004164:	d120      	bne.n	80041a8 <_dtoa_r+0xad8>
 8004166:	2a00      	cmp	r2, #0
 8004168:	ddee      	ble.n	8004148 <_dtoa_r+0xa78>
 800416a:	4651      	mov	r1, sl
 800416c:	2201      	movs	r2, #1
 800416e:	4628      	mov	r0, r5
 8004170:	9302      	str	r3, [sp, #8]
 8004172:	f000 fbcb 	bl	800490c <__lshift>
 8004176:	4621      	mov	r1, r4
 8004178:	4682      	mov	sl, r0
 800417a:	f000 fc33 	bl	80049e4 <__mcmp>
 800417e:	2800      	cmp	r0, #0
 8004180:	9b02      	ldr	r3, [sp, #8]
 8004182:	dc02      	bgt.n	800418a <_dtoa_r+0xaba>
 8004184:	d1e0      	bne.n	8004148 <_dtoa_r+0xa78>
 8004186:	07da      	lsls	r2, r3, #31
 8004188:	d5de      	bpl.n	8004148 <_dtoa_r+0xa78>
 800418a:	2b39      	cmp	r3, #57	; 0x39
 800418c:	d1da      	bne.n	8004144 <_dtoa_r+0xa74>
 800418e:	2339      	movs	r3, #57	; 0x39
 8004190:	f88b 3000 	strb.w	r3, [fp]
 8004194:	463b      	mov	r3, r7
 8004196:	461f      	mov	r7, r3
 8004198:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800419c:	3b01      	subs	r3, #1
 800419e:	2a39      	cmp	r2, #57	; 0x39
 80041a0:	d050      	beq.n	8004244 <_dtoa_r+0xb74>
 80041a2:	3201      	adds	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	e749      	b.n	800403c <_dtoa_r+0x96c>
 80041a8:	2a00      	cmp	r2, #0
 80041aa:	dd03      	ble.n	80041b4 <_dtoa_r+0xae4>
 80041ac:	2b39      	cmp	r3, #57	; 0x39
 80041ae:	d0ee      	beq.n	800418e <_dtoa_r+0xabe>
 80041b0:	3301      	adds	r3, #1
 80041b2:	e7c9      	b.n	8004148 <_dtoa_r+0xa78>
 80041b4:	9a02      	ldr	r2, [sp, #8]
 80041b6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80041b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80041bc:	428a      	cmp	r2, r1
 80041be:	d02a      	beq.n	8004216 <_dtoa_r+0xb46>
 80041c0:	4651      	mov	r1, sl
 80041c2:	2300      	movs	r3, #0
 80041c4:	220a      	movs	r2, #10
 80041c6:	4628      	mov	r0, r5
 80041c8:	f000 f9f4 	bl	80045b4 <__multadd>
 80041cc:	45b0      	cmp	r8, r6
 80041ce:	4682      	mov	sl, r0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	f04f 020a 	mov.w	r2, #10
 80041d8:	4641      	mov	r1, r8
 80041da:	4628      	mov	r0, r5
 80041dc:	d107      	bne.n	80041ee <_dtoa_r+0xb1e>
 80041de:	f000 f9e9 	bl	80045b4 <__multadd>
 80041e2:	4680      	mov	r8, r0
 80041e4:	4606      	mov	r6, r0
 80041e6:	9b02      	ldr	r3, [sp, #8]
 80041e8:	3301      	adds	r3, #1
 80041ea:	9302      	str	r3, [sp, #8]
 80041ec:	e777      	b.n	80040de <_dtoa_r+0xa0e>
 80041ee:	f000 f9e1 	bl	80045b4 <__multadd>
 80041f2:	4631      	mov	r1, r6
 80041f4:	4680      	mov	r8, r0
 80041f6:	2300      	movs	r3, #0
 80041f8:	220a      	movs	r2, #10
 80041fa:	4628      	mov	r0, r5
 80041fc:	f000 f9da 	bl	80045b4 <__multadd>
 8004200:	4606      	mov	r6, r0
 8004202:	e7f0      	b.n	80041e6 <_dtoa_r+0xb16>
 8004204:	f1bb 0f00 	cmp.w	fp, #0
 8004208:	bfcc      	ite	gt
 800420a:	465f      	movgt	r7, fp
 800420c:	2701      	movle	r7, #1
 800420e:	f04f 0800 	mov.w	r8, #0
 8004212:	9a08      	ldr	r2, [sp, #32]
 8004214:	4417      	add	r7, r2
 8004216:	4651      	mov	r1, sl
 8004218:	2201      	movs	r2, #1
 800421a:	4628      	mov	r0, r5
 800421c:	9302      	str	r3, [sp, #8]
 800421e:	f000 fb75 	bl	800490c <__lshift>
 8004222:	4621      	mov	r1, r4
 8004224:	4682      	mov	sl, r0
 8004226:	f000 fbdd 	bl	80049e4 <__mcmp>
 800422a:	2800      	cmp	r0, #0
 800422c:	dcb2      	bgt.n	8004194 <_dtoa_r+0xac4>
 800422e:	d102      	bne.n	8004236 <_dtoa_r+0xb66>
 8004230:	9b02      	ldr	r3, [sp, #8]
 8004232:	07db      	lsls	r3, r3, #31
 8004234:	d4ae      	bmi.n	8004194 <_dtoa_r+0xac4>
 8004236:	463b      	mov	r3, r7
 8004238:	461f      	mov	r7, r3
 800423a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800423e:	2a30      	cmp	r2, #48	; 0x30
 8004240:	d0fa      	beq.n	8004238 <_dtoa_r+0xb68>
 8004242:	e6fb      	b.n	800403c <_dtoa_r+0x96c>
 8004244:	9a08      	ldr	r2, [sp, #32]
 8004246:	429a      	cmp	r2, r3
 8004248:	d1a5      	bne.n	8004196 <_dtoa_r+0xac6>
 800424a:	2331      	movs	r3, #49	; 0x31
 800424c:	f109 0901 	add.w	r9, r9, #1
 8004250:	7013      	strb	r3, [r2, #0]
 8004252:	e6f3      	b.n	800403c <_dtoa_r+0x96c>
 8004254:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <_dtoa_r+0xbd4>)
 8004256:	f7ff baa7 	b.w	80037a8 <_dtoa_r+0xd8>
 800425a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800425c:	2b00      	cmp	r3, #0
 800425e:	f47f aa80 	bne.w	8003762 <_dtoa_r+0x92>
 8004262:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <_dtoa_r+0xbd8>)
 8004264:	f7ff baa0 	b.w	80037a8 <_dtoa_r+0xd8>
 8004268:	f1bb 0f00 	cmp.w	fp, #0
 800426c:	dc03      	bgt.n	8004276 <_dtoa_r+0xba6>
 800426e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004270:	2b02      	cmp	r3, #2
 8004272:	f73f aecc 	bgt.w	800400e <_dtoa_r+0x93e>
 8004276:	9f08      	ldr	r7, [sp, #32]
 8004278:	4621      	mov	r1, r4
 800427a:	4650      	mov	r0, sl
 800427c:	f7ff f99a 	bl	80035b4 <quorem>
 8004280:	9a08      	ldr	r2, [sp, #32]
 8004282:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004286:	f807 3b01 	strb.w	r3, [r7], #1
 800428a:	1aba      	subs	r2, r7, r2
 800428c:	4593      	cmp	fp, r2
 800428e:	ddb9      	ble.n	8004204 <_dtoa_r+0xb34>
 8004290:	4651      	mov	r1, sl
 8004292:	2300      	movs	r3, #0
 8004294:	220a      	movs	r2, #10
 8004296:	4628      	mov	r0, r5
 8004298:	f000 f98c 	bl	80045b4 <__multadd>
 800429c:	4682      	mov	sl, r0
 800429e:	e7eb      	b.n	8004278 <_dtoa_r+0xba8>
 80042a0:	080057db 	.word	0x080057db
 80042a4:	08005734 	.word	0x08005734
 80042a8:	08005758 	.word	0x08005758

080042ac <std>:
 80042ac:	2300      	movs	r3, #0
 80042ae:	b510      	push	{r4, lr}
 80042b0:	4604      	mov	r4, r0
 80042b2:	e9c0 3300 	strd	r3, r3, [r0]
 80042b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042ba:	6083      	str	r3, [r0, #8]
 80042bc:	8181      	strh	r1, [r0, #12]
 80042be:	6643      	str	r3, [r0, #100]	; 0x64
 80042c0:	81c2      	strh	r2, [r0, #14]
 80042c2:	6183      	str	r3, [r0, #24]
 80042c4:	4619      	mov	r1, r3
 80042c6:	2208      	movs	r2, #8
 80042c8:	305c      	adds	r0, #92	; 0x5c
 80042ca:	f7fe fcf3 	bl	8002cb4 <memset>
 80042ce:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <std+0x38>)
 80042d0:	6224      	str	r4, [r4, #32]
 80042d2:	6263      	str	r3, [r4, #36]	; 0x24
 80042d4:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <std+0x3c>)
 80042d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80042d8:	4b04      	ldr	r3, [pc, #16]	; (80042ec <std+0x40>)
 80042da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <std+0x44>)
 80042de:	6323      	str	r3, [r4, #48]	; 0x30
 80042e0:	bd10      	pop	{r4, pc}
 80042e2:	bf00      	nop
 80042e4:	0800502d 	.word	0x0800502d
 80042e8:	0800504f 	.word	0x0800504f
 80042ec:	08005087 	.word	0x08005087
 80042f0:	080050ab 	.word	0x080050ab

080042f4 <_cleanup_r>:
 80042f4:	4901      	ldr	r1, [pc, #4]	; (80042fc <_cleanup_r+0x8>)
 80042f6:	f000 b8af 	b.w	8004458 <_fwalk_reent>
 80042fa:	bf00      	nop
 80042fc:	080053c1 	.word	0x080053c1

08004300 <__sfmoreglue>:
 8004300:	b570      	push	{r4, r5, r6, lr}
 8004302:	2568      	movs	r5, #104	; 0x68
 8004304:	1e4a      	subs	r2, r1, #1
 8004306:	4355      	muls	r5, r2
 8004308:	460e      	mov	r6, r1
 800430a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800430e:	f000 fccb 	bl	8004ca8 <_malloc_r>
 8004312:	4604      	mov	r4, r0
 8004314:	b140      	cbz	r0, 8004328 <__sfmoreglue+0x28>
 8004316:	2100      	movs	r1, #0
 8004318:	e9c0 1600 	strd	r1, r6, [r0]
 800431c:	300c      	adds	r0, #12
 800431e:	60a0      	str	r0, [r4, #8]
 8004320:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004324:	f7fe fcc6 	bl	8002cb4 <memset>
 8004328:	4620      	mov	r0, r4
 800432a:	bd70      	pop	{r4, r5, r6, pc}

0800432c <__sfp_lock_acquire>:
 800432c:	4801      	ldr	r0, [pc, #4]	; (8004334 <__sfp_lock_acquire+0x8>)
 800432e:	f000 b8b8 	b.w	80044a2 <__retarget_lock_acquire_recursive>
 8004332:	bf00      	nop
 8004334:	20000298 	.word	0x20000298

08004338 <__sfp_lock_release>:
 8004338:	4801      	ldr	r0, [pc, #4]	; (8004340 <__sfp_lock_release+0x8>)
 800433a:	f000 b8b3 	b.w	80044a4 <__retarget_lock_release_recursive>
 800433e:	bf00      	nop
 8004340:	20000298 	.word	0x20000298

08004344 <__sinit_lock_acquire>:
 8004344:	4801      	ldr	r0, [pc, #4]	; (800434c <__sinit_lock_acquire+0x8>)
 8004346:	f000 b8ac 	b.w	80044a2 <__retarget_lock_acquire_recursive>
 800434a:	bf00      	nop
 800434c:	20000293 	.word	0x20000293

08004350 <__sinit_lock_release>:
 8004350:	4801      	ldr	r0, [pc, #4]	; (8004358 <__sinit_lock_release+0x8>)
 8004352:	f000 b8a7 	b.w	80044a4 <__retarget_lock_release_recursive>
 8004356:	bf00      	nop
 8004358:	20000293 	.word	0x20000293

0800435c <__sinit>:
 800435c:	b510      	push	{r4, lr}
 800435e:	4604      	mov	r4, r0
 8004360:	f7ff fff0 	bl	8004344 <__sinit_lock_acquire>
 8004364:	69a3      	ldr	r3, [r4, #24]
 8004366:	b11b      	cbz	r3, 8004370 <__sinit+0x14>
 8004368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800436c:	f7ff bff0 	b.w	8004350 <__sinit_lock_release>
 8004370:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004374:	6523      	str	r3, [r4, #80]	; 0x50
 8004376:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <__sinit+0x68>)
 8004378:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <__sinit+0x6c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	62a2      	str	r2, [r4, #40]	; 0x28
 800437e:	42a3      	cmp	r3, r4
 8004380:	bf08      	it	eq
 8004382:	2301      	moveq	r3, #1
 8004384:	4620      	mov	r0, r4
 8004386:	bf08      	it	eq
 8004388:	61a3      	streq	r3, [r4, #24]
 800438a:	f000 f81f 	bl	80043cc <__sfp>
 800438e:	6060      	str	r0, [r4, #4]
 8004390:	4620      	mov	r0, r4
 8004392:	f000 f81b 	bl	80043cc <__sfp>
 8004396:	60a0      	str	r0, [r4, #8]
 8004398:	4620      	mov	r0, r4
 800439a:	f000 f817 	bl	80043cc <__sfp>
 800439e:	2200      	movs	r2, #0
 80043a0:	2104      	movs	r1, #4
 80043a2:	60e0      	str	r0, [r4, #12]
 80043a4:	6860      	ldr	r0, [r4, #4]
 80043a6:	f7ff ff81 	bl	80042ac <std>
 80043aa:	2201      	movs	r2, #1
 80043ac:	2109      	movs	r1, #9
 80043ae:	68a0      	ldr	r0, [r4, #8]
 80043b0:	f7ff ff7c 	bl	80042ac <std>
 80043b4:	2202      	movs	r2, #2
 80043b6:	2112      	movs	r1, #18
 80043b8:	68e0      	ldr	r0, [r4, #12]
 80043ba:	f7ff ff77 	bl	80042ac <std>
 80043be:	2301      	movs	r3, #1
 80043c0:	61a3      	str	r3, [r4, #24]
 80043c2:	e7d1      	b.n	8004368 <__sinit+0xc>
 80043c4:	08005720 	.word	0x08005720
 80043c8:	080042f5 	.word	0x080042f5

080043cc <__sfp>:
 80043cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ce:	4607      	mov	r7, r0
 80043d0:	f7ff ffac 	bl	800432c <__sfp_lock_acquire>
 80043d4:	4b1e      	ldr	r3, [pc, #120]	; (8004450 <__sfp+0x84>)
 80043d6:	681e      	ldr	r6, [r3, #0]
 80043d8:	69b3      	ldr	r3, [r6, #24]
 80043da:	b913      	cbnz	r3, 80043e2 <__sfp+0x16>
 80043dc:	4630      	mov	r0, r6
 80043de:	f7ff ffbd 	bl	800435c <__sinit>
 80043e2:	3648      	adds	r6, #72	; 0x48
 80043e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	d503      	bpl.n	80043f4 <__sfp+0x28>
 80043ec:	6833      	ldr	r3, [r6, #0]
 80043ee:	b30b      	cbz	r3, 8004434 <__sfp+0x68>
 80043f0:	6836      	ldr	r6, [r6, #0]
 80043f2:	e7f7      	b.n	80043e4 <__sfp+0x18>
 80043f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043f8:	b9d5      	cbnz	r5, 8004430 <__sfp+0x64>
 80043fa:	4b16      	ldr	r3, [pc, #88]	; (8004454 <__sfp+0x88>)
 80043fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004400:	60e3      	str	r3, [r4, #12]
 8004402:	6665      	str	r5, [r4, #100]	; 0x64
 8004404:	f000 f84c 	bl	80044a0 <__retarget_lock_init_recursive>
 8004408:	f7ff ff96 	bl	8004338 <__sfp_lock_release>
 800440c:	2208      	movs	r2, #8
 800440e:	4629      	mov	r1, r5
 8004410:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004414:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004418:	6025      	str	r5, [r4, #0]
 800441a:	61a5      	str	r5, [r4, #24]
 800441c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004420:	f7fe fc48 	bl	8002cb4 <memset>
 8004424:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004428:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800442c:	4620      	mov	r0, r4
 800442e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004430:	3468      	adds	r4, #104	; 0x68
 8004432:	e7d9      	b.n	80043e8 <__sfp+0x1c>
 8004434:	2104      	movs	r1, #4
 8004436:	4638      	mov	r0, r7
 8004438:	f7ff ff62 	bl	8004300 <__sfmoreglue>
 800443c:	4604      	mov	r4, r0
 800443e:	6030      	str	r0, [r6, #0]
 8004440:	2800      	cmp	r0, #0
 8004442:	d1d5      	bne.n	80043f0 <__sfp+0x24>
 8004444:	f7ff ff78 	bl	8004338 <__sfp_lock_release>
 8004448:	230c      	movs	r3, #12
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	e7ee      	b.n	800442c <__sfp+0x60>
 800444e:	bf00      	nop
 8004450:	08005720 	.word	0x08005720
 8004454:	ffff0001 	.word	0xffff0001

08004458 <_fwalk_reent>:
 8004458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800445c:	4606      	mov	r6, r0
 800445e:	4688      	mov	r8, r1
 8004460:	2700      	movs	r7, #0
 8004462:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004466:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800446a:	f1b9 0901 	subs.w	r9, r9, #1
 800446e:	d505      	bpl.n	800447c <_fwalk_reent+0x24>
 8004470:	6824      	ldr	r4, [r4, #0]
 8004472:	2c00      	cmp	r4, #0
 8004474:	d1f7      	bne.n	8004466 <_fwalk_reent+0xe>
 8004476:	4638      	mov	r0, r7
 8004478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800447c:	89ab      	ldrh	r3, [r5, #12]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d907      	bls.n	8004492 <_fwalk_reent+0x3a>
 8004482:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004486:	3301      	adds	r3, #1
 8004488:	d003      	beq.n	8004492 <_fwalk_reent+0x3a>
 800448a:	4629      	mov	r1, r5
 800448c:	4630      	mov	r0, r6
 800448e:	47c0      	blx	r8
 8004490:	4307      	orrs	r7, r0
 8004492:	3568      	adds	r5, #104	; 0x68
 8004494:	e7e9      	b.n	800446a <_fwalk_reent+0x12>
	...

08004498 <_localeconv_r>:
 8004498:	4800      	ldr	r0, [pc, #0]	; (800449c <_localeconv_r+0x4>)
 800449a:	4770      	bx	lr
 800449c:	20000160 	.word	0x20000160

080044a0 <__retarget_lock_init_recursive>:
 80044a0:	4770      	bx	lr

080044a2 <__retarget_lock_acquire_recursive>:
 80044a2:	4770      	bx	lr

080044a4 <__retarget_lock_release_recursive>:
 80044a4:	4770      	bx	lr
	...

080044a8 <malloc>:
 80044a8:	4b02      	ldr	r3, [pc, #8]	; (80044b4 <malloc+0xc>)
 80044aa:	4601      	mov	r1, r0
 80044ac:	6818      	ldr	r0, [r3, #0]
 80044ae:	f000 bbfb 	b.w	8004ca8 <_malloc_r>
 80044b2:	bf00      	nop
 80044b4:	2000000c 	.word	0x2000000c

080044b8 <memchr>:
 80044b8:	4603      	mov	r3, r0
 80044ba:	b510      	push	{r4, lr}
 80044bc:	b2c9      	uxtb	r1, r1
 80044be:	4402      	add	r2, r0
 80044c0:	4293      	cmp	r3, r2
 80044c2:	4618      	mov	r0, r3
 80044c4:	d101      	bne.n	80044ca <memchr+0x12>
 80044c6:	2000      	movs	r0, #0
 80044c8:	e003      	b.n	80044d2 <memchr+0x1a>
 80044ca:	7804      	ldrb	r4, [r0, #0]
 80044cc:	3301      	adds	r3, #1
 80044ce:	428c      	cmp	r4, r1
 80044d0:	d1f6      	bne.n	80044c0 <memchr+0x8>
 80044d2:	bd10      	pop	{r4, pc}

080044d4 <memcpy>:
 80044d4:	440a      	add	r2, r1
 80044d6:	4291      	cmp	r1, r2
 80044d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80044dc:	d100      	bne.n	80044e0 <memcpy+0xc>
 80044de:	4770      	bx	lr
 80044e0:	b510      	push	{r4, lr}
 80044e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044e6:	4291      	cmp	r1, r2
 80044e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044ec:	d1f9      	bne.n	80044e2 <memcpy+0xe>
 80044ee:	bd10      	pop	{r4, pc}

080044f0 <_Balloc>:
 80044f0:	b570      	push	{r4, r5, r6, lr}
 80044f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80044f4:	4604      	mov	r4, r0
 80044f6:	460d      	mov	r5, r1
 80044f8:	b976      	cbnz	r6, 8004518 <_Balloc+0x28>
 80044fa:	2010      	movs	r0, #16
 80044fc:	f7ff ffd4 	bl	80044a8 <malloc>
 8004500:	4602      	mov	r2, r0
 8004502:	6260      	str	r0, [r4, #36]	; 0x24
 8004504:	b920      	cbnz	r0, 8004510 <_Balloc+0x20>
 8004506:	2166      	movs	r1, #102	; 0x66
 8004508:	4b17      	ldr	r3, [pc, #92]	; (8004568 <_Balloc+0x78>)
 800450a:	4818      	ldr	r0, [pc, #96]	; (800456c <_Balloc+0x7c>)
 800450c:	f000 fea4 	bl	8005258 <__assert_func>
 8004510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004514:	6006      	str	r6, [r0, #0]
 8004516:	60c6      	str	r6, [r0, #12]
 8004518:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800451a:	68f3      	ldr	r3, [r6, #12]
 800451c:	b183      	cbz	r3, 8004540 <_Balloc+0x50>
 800451e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004526:	b9b8      	cbnz	r0, 8004558 <_Balloc+0x68>
 8004528:	2101      	movs	r1, #1
 800452a:	fa01 f605 	lsl.w	r6, r1, r5
 800452e:	1d72      	adds	r2, r6, #5
 8004530:	4620      	mov	r0, r4
 8004532:	0092      	lsls	r2, r2, #2
 8004534:	f000 fb5e 	bl	8004bf4 <_calloc_r>
 8004538:	b160      	cbz	r0, 8004554 <_Balloc+0x64>
 800453a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800453e:	e00e      	b.n	800455e <_Balloc+0x6e>
 8004540:	2221      	movs	r2, #33	; 0x21
 8004542:	2104      	movs	r1, #4
 8004544:	4620      	mov	r0, r4
 8004546:	f000 fb55 	bl	8004bf4 <_calloc_r>
 800454a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800454c:	60f0      	str	r0, [r6, #12]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1e4      	bne.n	800451e <_Balloc+0x2e>
 8004554:	2000      	movs	r0, #0
 8004556:	bd70      	pop	{r4, r5, r6, pc}
 8004558:	6802      	ldr	r2, [r0, #0]
 800455a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800455e:	2300      	movs	r3, #0
 8004560:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004564:	e7f7      	b.n	8004556 <_Balloc+0x66>
 8004566:	bf00      	nop
 8004568:	08005765 	.word	0x08005765
 800456c:	0800584c 	.word	0x0800584c

08004570 <_Bfree>:
 8004570:	b570      	push	{r4, r5, r6, lr}
 8004572:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004574:	4605      	mov	r5, r0
 8004576:	460c      	mov	r4, r1
 8004578:	b976      	cbnz	r6, 8004598 <_Bfree+0x28>
 800457a:	2010      	movs	r0, #16
 800457c:	f7ff ff94 	bl	80044a8 <malloc>
 8004580:	4602      	mov	r2, r0
 8004582:	6268      	str	r0, [r5, #36]	; 0x24
 8004584:	b920      	cbnz	r0, 8004590 <_Bfree+0x20>
 8004586:	218a      	movs	r1, #138	; 0x8a
 8004588:	4b08      	ldr	r3, [pc, #32]	; (80045ac <_Bfree+0x3c>)
 800458a:	4809      	ldr	r0, [pc, #36]	; (80045b0 <_Bfree+0x40>)
 800458c:	f000 fe64 	bl	8005258 <__assert_func>
 8004590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004594:	6006      	str	r6, [r0, #0]
 8004596:	60c6      	str	r6, [r0, #12]
 8004598:	b13c      	cbz	r4, 80045aa <_Bfree+0x3a>
 800459a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800459c:	6862      	ldr	r2, [r4, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80045a4:	6021      	str	r1, [r4, #0]
 80045a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	08005765 	.word	0x08005765
 80045b0:	0800584c 	.word	0x0800584c

080045b4 <__multadd>:
 80045b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b8:	4698      	mov	r8, r3
 80045ba:	460c      	mov	r4, r1
 80045bc:	2300      	movs	r3, #0
 80045be:	690e      	ldr	r6, [r1, #16]
 80045c0:	4607      	mov	r7, r0
 80045c2:	f101 0014 	add.w	r0, r1, #20
 80045c6:	6805      	ldr	r5, [r0, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	b2a9      	uxth	r1, r5
 80045cc:	fb02 8101 	mla	r1, r2, r1, r8
 80045d0:	0c2d      	lsrs	r5, r5, #16
 80045d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80045d6:	fb02 c505 	mla	r5, r2, r5, ip
 80045da:	b289      	uxth	r1, r1
 80045dc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80045e0:	429e      	cmp	r6, r3
 80045e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80045e6:	f840 1b04 	str.w	r1, [r0], #4
 80045ea:	dcec      	bgt.n	80045c6 <__multadd+0x12>
 80045ec:	f1b8 0f00 	cmp.w	r8, #0
 80045f0:	d022      	beq.n	8004638 <__multadd+0x84>
 80045f2:	68a3      	ldr	r3, [r4, #8]
 80045f4:	42b3      	cmp	r3, r6
 80045f6:	dc19      	bgt.n	800462c <__multadd+0x78>
 80045f8:	6861      	ldr	r1, [r4, #4]
 80045fa:	4638      	mov	r0, r7
 80045fc:	3101      	adds	r1, #1
 80045fe:	f7ff ff77 	bl	80044f0 <_Balloc>
 8004602:	4605      	mov	r5, r0
 8004604:	b928      	cbnz	r0, 8004612 <__multadd+0x5e>
 8004606:	4602      	mov	r2, r0
 8004608:	21b5      	movs	r1, #181	; 0xb5
 800460a:	4b0d      	ldr	r3, [pc, #52]	; (8004640 <__multadd+0x8c>)
 800460c:	480d      	ldr	r0, [pc, #52]	; (8004644 <__multadd+0x90>)
 800460e:	f000 fe23 	bl	8005258 <__assert_func>
 8004612:	6922      	ldr	r2, [r4, #16]
 8004614:	f104 010c 	add.w	r1, r4, #12
 8004618:	3202      	adds	r2, #2
 800461a:	0092      	lsls	r2, r2, #2
 800461c:	300c      	adds	r0, #12
 800461e:	f7ff ff59 	bl	80044d4 <memcpy>
 8004622:	4621      	mov	r1, r4
 8004624:	4638      	mov	r0, r7
 8004626:	f7ff ffa3 	bl	8004570 <_Bfree>
 800462a:	462c      	mov	r4, r5
 800462c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004630:	3601      	adds	r6, #1
 8004632:	f8c3 8014 	str.w	r8, [r3, #20]
 8004636:	6126      	str	r6, [r4, #16]
 8004638:	4620      	mov	r0, r4
 800463a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800463e:	bf00      	nop
 8004640:	080057db 	.word	0x080057db
 8004644:	0800584c 	.word	0x0800584c

08004648 <__hi0bits>:
 8004648:	0c02      	lsrs	r2, r0, #16
 800464a:	0412      	lsls	r2, r2, #16
 800464c:	4603      	mov	r3, r0
 800464e:	b9ca      	cbnz	r2, 8004684 <__hi0bits+0x3c>
 8004650:	0403      	lsls	r3, r0, #16
 8004652:	2010      	movs	r0, #16
 8004654:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004658:	bf04      	itt	eq
 800465a:	021b      	lsleq	r3, r3, #8
 800465c:	3008      	addeq	r0, #8
 800465e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004662:	bf04      	itt	eq
 8004664:	011b      	lsleq	r3, r3, #4
 8004666:	3004      	addeq	r0, #4
 8004668:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800466c:	bf04      	itt	eq
 800466e:	009b      	lsleq	r3, r3, #2
 8004670:	3002      	addeq	r0, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	db05      	blt.n	8004682 <__hi0bits+0x3a>
 8004676:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800467a:	f100 0001 	add.w	r0, r0, #1
 800467e:	bf08      	it	eq
 8004680:	2020      	moveq	r0, #32
 8004682:	4770      	bx	lr
 8004684:	2000      	movs	r0, #0
 8004686:	e7e5      	b.n	8004654 <__hi0bits+0xc>

08004688 <__lo0bits>:
 8004688:	6803      	ldr	r3, [r0, #0]
 800468a:	4602      	mov	r2, r0
 800468c:	f013 0007 	ands.w	r0, r3, #7
 8004690:	d00b      	beq.n	80046aa <__lo0bits+0x22>
 8004692:	07d9      	lsls	r1, r3, #31
 8004694:	d422      	bmi.n	80046dc <__lo0bits+0x54>
 8004696:	0798      	lsls	r0, r3, #30
 8004698:	bf49      	itett	mi
 800469a:	085b      	lsrmi	r3, r3, #1
 800469c:	089b      	lsrpl	r3, r3, #2
 800469e:	2001      	movmi	r0, #1
 80046a0:	6013      	strmi	r3, [r2, #0]
 80046a2:	bf5c      	itt	pl
 80046a4:	2002      	movpl	r0, #2
 80046a6:	6013      	strpl	r3, [r2, #0]
 80046a8:	4770      	bx	lr
 80046aa:	b299      	uxth	r1, r3
 80046ac:	b909      	cbnz	r1, 80046b2 <__lo0bits+0x2a>
 80046ae:	2010      	movs	r0, #16
 80046b0:	0c1b      	lsrs	r3, r3, #16
 80046b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80046b6:	bf04      	itt	eq
 80046b8:	0a1b      	lsreq	r3, r3, #8
 80046ba:	3008      	addeq	r0, #8
 80046bc:	0719      	lsls	r1, r3, #28
 80046be:	bf04      	itt	eq
 80046c0:	091b      	lsreq	r3, r3, #4
 80046c2:	3004      	addeq	r0, #4
 80046c4:	0799      	lsls	r1, r3, #30
 80046c6:	bf04      	itt	eq
 80046c8:	089b      	lsreq	r3, r3, #2
 80046ca:	3002      	addeq	r0, #2
 80046cc:	07d9      	lsls	r1, r3, #31
 80046ce:	d403      	bmi.n	80046d8 <__lo0bits+0x50>
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	f100 0001 	add.w	r0, r0, #1
 80046d6:	d003      	beq.n	80046e0 <__lo0bits+0x58>
 80046d8:	6013      	str	r3, [r2, #0]
 80046da:	4770      	bx	lr
 80046dc:	2000      	movs	r0, #0
 80046de:	4770      	bx	lr
 80046e0:	2020      	movs	r0, #32
 80046e2:	4770      	bx	lr

080046e4 <__i2b>:
 80046e4:	b510      	push	{r4, lr}
 80046e6:	460c      	mov	r4, r1
 80046e8:	2101      	movs	r1, #1
 80046ea:	f7ff ff01 	bl	80044f0 <_Balloc>
 80046ee:	4602      	mov	r2, r0
 80046f0:	b928      	cbnz	r0, 80046fe <__i2b+0x1a>
 80046f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80046f6:	4b04      	ldr	r3, [pc, #16]	; (8004708 <__i2b+0x24>)
 80046f8:	4804      	ldr	r0, [pc, #16]	; (800470c <__i2b+0x28>)
 80046fa:	f000 fdad 	bl	8005258 <__assert_func>
 80046fe:	2301      	movs	r3, #1
 8004700:	6144      	str	r4, [r0, #20]
 8004702:	6103      	str	r3, [r0, #16]
 8004704:	bd10      	pop	{r4, pc}
 8004706:	bf00      	nop
 8004708:	080057db 	.word	0x080057db
 800470c:	0800584c 	.word	0x0800584c

08004710 <__multiply>:
 8004710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004714:	4614      	mov	r4, r2
 8004716:	690a      	ldr	r2, [r1, #16]
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	460d      	mov	r5, r1
 800471c:	429a      	cmp	r2, r3
 800471e:	bfbe      	ittt	lt
 8004720:	460b      	movlt	r3, r1
 8004722:	4625      	movlt	r5, r4
 8004724:	461c      	movlt	r4, r3
 8004726:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800472a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800472e:	68ab      	ldr	r3, [r5, #8]
 8004730:	6869      	ldr	r1, [r5, #4]
 8004732:	eb0a 0709 	add.w	r7, sl, r9
 8004736:	42bb      	cmp	r3, r7
 8004738:	b085      	sub	sp, #20
 800473a:	bfb8      	it	lt
 800473c:	3101      	addlt	r1, #1
 800473e:	f7ff fed7 	bl	80044f0 <_Balloc>
 8004742:	b930      	cbnz	r0, 8004752 <__multiply+0x42>
 8004744:	4602      	mov	r2, r0
 8004746:	f240 115d 	movw	r1, #349	; 0x15d
 800474a:	4b41      	ldr	r3, [pc, #260]	; (8004850 <__multiply+0x140>)
 800474c:	4841      	ldr	r0, [pc, #260]	; (8004854 <__multiply+0x144>)
 800474e:	f000 fd83 	bl	8005258 <__assert_func>
 8004752:	f100 0614 	add.w	r6, r0, #20
 8004756:	4633      	mov	r3, r6
 8004758:	2200      	movs	r2, #0
 800475a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800475e:	4543      	cmp	r3, r8
 8004760:	d31e      	bcc.n	80047a0 <__multiply+0x90>
 8004762:	f105 0c14 	add.w	ip, r5, #20
 8004766:	f104 0314 	add.w	r3, r4, #20
 800476a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800476e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004772:	9202      	str	r2, [sp, #8]
 8004774:	ebac 0205 	sub.w	r2, ip, r5
 8004778:	3a15      	subs	r2, #21
 800477a:	f022 0203 	bic.w	r2, r2, #3
 800477e:	3204      	adds	r2, #4
 8004780:	f105 0115 	add.w	r1, r5, #21
 8004784:	458c      	cmp	ip, r1
 8004786:	bf38      	it	cc
 8004788:	2204      	movcc	r2, #4
 800478a:	9201      	str	r2, [sp, #4]
 800478c:	9a02      	ldr	r2, [sp, #8]
 800478e:	9303      	str	r3, [sp, #12]
 8004790:	429a      	cmp	r2, r3
 8004792:	d808      	bhi.n	80047a6 <__multiply+0x96>
 8004794:	2f00      	cmp	r7, #0
 8004796:	dc55      	bgt.n	8004844 <__multiply+0x134>
 8004798:	6107      	str	r7, [r0, #16]
 800479a:	b005      	add	sp, #20
 800479c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a0:	f843 2b04 	str.w	r2, [r3], #4
 80047a4:	e7db      	b.n	800475e <__multiply+0x4e>
 80047a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80047aa:	f1ba 0f00 	cmp.w	sl, #0
 80047ae:	d020      	beq.n	80047f2 <__multiply+0xe2>
 80047b0:	46b1      	mov	r9, r6
 80047b2:	2200      	movs	r2, #0
 80047b4:	f105 0e14 	add.w	lr, r5, #20
 80047b8:	f85e 4b04 	ldr.w	r4, [lr], #4
 80047bc:	f8d9 b000 	ldr.w	fp, [r9]
 80047c0:	b2a1      	uxth	r1, r4
 80047c2:	fa1f fb8b 	uxth.w	fp, fp
 80047c6:	fb0a b101 	mla	r1, sl, r1, fp
 80047ca:	4411      	add	r1, r2
 80047cc:	f8d9 2000 	ldr.w	r2, [r9]
 80047d0:	0c24      	lsrs	r4, r4, #16
 80047d2:	0c12      	lsrs	r2, r2, #16
 80047d4:	fb0a 2404 	mla	r4, sl, r4, r2
 80047d8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80047dc:	b289      	uxth	r1, r1
 80047de:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80047e2:	45f4      	cmp	ip, lr
 80047e4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80047e8:	f849 1b04 	str.w	r1, [r9], #4
 80047ec:	d8e4      	bhi.n	80047b8 <__multiply+0xa8>
 80047ee:	9901      	ldr	r1, [sp, #4]
 80047f0:	5072      	str	r2, [r6, r1]
 80047f2:	9a03      	ldr	r2, [sp, #12]
 80047f4:	3304      	adds	r3, #4
 80047f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80047fa:	f1b9 0f00 	cmp.w	r9, #0
 80047fe:	d01f      	beq.n	8004840 <__multiply+0x130>
 8004800:	46b6      	mov	lr, r6
 8004802:	f04f 0a00 	mov.w	sl, #0
 8004806:	6834      	ldr	r4, [r6, #0]
 8004808:	f105 0114 	add.w	r1, r5, #20
 800480c:	880a      	ldrh	r2, [r1, #0]
 800480e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004812:	b2a4      	uxth	r4, r4
 8004814:	fb09 b202 	mla	r2, r9, r2, fp
 8004818:	4492      	add	sl, r2
 800481a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800481e:	f84e 4b04 	str.w	r4, [lr], #4
 8004822:	f851 4b04 	ldr.w	r4, [r1], #4
 8004826:	f8be 2000 	ldrh.w	r2, [lr]
 800482a:	0c24      	lsrs	r4, r4, #16
 800482c:	fb09 2404 	mla	r4, r9, r4, r2
 8004830:	458c      	cmp	ip, r1
 8004832:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8004836:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800483a:	d8e7      	bhi.n	800480c <__multiply+0xfc>
 800483c:	9a01      	ldr	r2, [sp, #4]
 800483e:	50b4      	str	r4, [r6, r2]
 8004840:	3604      	adds	r6, #4
 8004842:	e7a3      	b.n	800478c <__multiply+0x7c>
 8004844:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1a5      	bne.n	8004798 <__multiply+0x88>
 800484c:	3f01      	subs	r7, #1
 800484e:	e7a1      	b.n	8004794 <__multiply+0x84>
 8004850:	080057db 	.word	0x080057db
 8004854:	0800584c 	.word	0x0800584c

08004858 <__pow5mult>:
 8004858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800485c:	4615      	mov	r5, r2
 800485e:	f012 0203 	ands.w	r2, r2, #3
 8004862:	4606      	mov	r6, r0
 8004864:	460f      	mov	r7, r1
 8004866:	d007      	beq.n	8004878 <__pow5mult+0x20>
 8004868:	4c25      	ldr	r4, [pc, #148]	; (8004900 <__pow5mult+0xa8>)
 800486a:	3a01      	subs	r2, #1
 800486c:	2300      	movs	r3, #0
 800486e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004872:	f7ff fe9f 	bl	80045b4 <__multadd>
 8004876:	4607      	mov	r7, r0
 8004878:	10ad      	asrs	r5, r5, #2
 800487a:	d03d      	beq.n	80048f8 <__pow5mult+0xa0>
 800487c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800487e:	b97c      	cbnz	r4, 80048a0 <__pow5mult+0x48>
 8004880:	2010      	movs	r0, #16
 8004882:	f7ff fe11 	bl	80044a8 <malloc>
 8004886:	4602      	mov	r2, r0
 8004888:	6270      	str	r0, [r6, #36]	; 0x24
 800488a:	b928      	cbnz	r0, 8004898 <__pow5mult+0x40>
 800488c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004890:	4b1c      	ldr	r3, [pc, #112]	; (8004904 <__pow5mult+0xac>)
 8004892:	481d      	ldr	r0, [pc, #116]	; (8004908 <__pow5mult+0xb0>)
 8004894:	f000 fce0 	bl	8005258 <__assert_func>
 8004898:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800489c:	6004      	str	r4, [r0, #0]
 800489e:	60c4      	str	r4, [r0, #12]
 80048a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80048a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80048a8:	b94c      	cbnz	r4, 80048be <__pow5mult+0x66>
 80048aa:	f240 2171 	movw	r1, #625	; 0x271
 80048ae:	4630      	mov	r0, r6
 80048b0:	f7ff ff18 	bl	80046e4 <__i2b>
 80048b4:	2300      	movs	r3, #0
 80048b6:	4604      	mov	r4, r0
 80048b8:	f8c8 0008 	str.w	r0, [r8, #8]
 80048bc:	6003      	str	r3, [r0, #0]
 80048be:	f04f 0900 	mov.w	r9, #0
 80048c2:	07eb      	lsls	r3, r5, #31
 80048c4:	d50a      	bpl.n	80048dc <__pow5mult+0x84>
 80048c6:	4639      	mov	r1, r7
 80048c8:	4622      	mov	r2, r4
 80048ca:	4630      	mov	r0, r6
 80048cc:	f7ff ff20 	bl	8004710 <__multiply>
 80048d0:	4680      	mov	r8, r0
 80048d2:	4639      	mov	r1, r7
 80048d4:	4630      	mov	r0, r6
 80048d6:	f7ff fe4b 	bl	8004570 <_Bfree>
 80048da:	4647      	mov	r7, r8
 80048dc:	106d      	asrs	r5, r5, #1
 80048de:	d00b      	beq.n	80048f8 <__pow5mult+0xa0>
 80048e0:	6820      	ldr	r0, [r4, #0]
 80048e2:	b938      	cbnz	r0, 80048f4 <__pow5mult+0x9c>
 80048e4:	4622      	mov	r2, r4
 80048e6:	4621      	mov	r1, r4
 80048e8:	4630      	mov	r0, r6
 80048ea:	f7ff ff11 	bl	8004710 <__multiply>
 80048ee:	6020      	str	r0, [r4, #0]
 80048f0:	f8c0 9000 	str.w	r9, [r0]
 80048f4:	4604      	mov	r4, r0
 80048f6:	e7e4      	b.n	80048c2 <__pow5mult+0x6a>
 80048f8:	4638      	mov	r0, r7
 80048fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048fe:	bf00      	nop
 8004900:	080059a0 	.word	0x080059a0
 8004904:	08005765 	.word	0x08005765
 8004908:	0800584c 	.word	0x0800584c

0800490c <__lshift>:
 800490c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	460c      	mov	r4, r1
 8004912:	4607      	mov	r7, r0
 8004914:	4691      	mov	r9, r2
 8004916:	6923      	ldr	r3, [r4, #16]
 8004918:	6849      	ldr	r1, [r1, #4]
 800491a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800491e:	68a3      	ldr	r3, [r4, #8]
 8004920:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004924:	f108 0601 	add.w	r6, r8, #1
 8004928:	42b3      	cmp	r3, r6
 800492a:	db0b      	blt.n	8004944 <__lshift+0x38>
 800492c:	4638      	mov	r0, r7
 800492e:	f7ff fddf 	bl	80044f0 <_Balloc>
 8004932:	4605      	mov	r5, r0
 8004934:	b948      	cbnz	r0, 800494a <__lshift+0x3e>
 8004936:	4602      	mov	r2, r0
 8004938:	f240 11d9 	movw	r1, #473	; 0x1d9
 800493c:	4b27      	ldr	r3, [pc, #156]	; (80049dc <__lshift+0xd0>)
 800493e:	4828      	ldr	r0, [pc, #160]	; (80049e0 <__lshift+0xd4>)
 8004940:	f000 fc8a 	bl	8005258 <__assert_func>
 8004944:	3101      	adds	r1, #1
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	e7ee      	b.n	8004928 <__lshift+0x1c>
 800494a:	2300      	movs	r3, #0
 800494c:	f100 0114 	add.w	r1, r0, #20
 8004950:	f100 0210 	add.w	r2, r0, #16
 8004954:	4618      	mov	r0, r3
 8004956:	4553      	cmp	r3, sl
 8004958:	db33      	blt.n	80049c2 <__lshift+0xb6>
 800495a:	6920      	ldr	r0, [r4, #16]
 800495c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004960:	f104 0314 	add.w	r3, r4, #20
 8004964:	f019 091f 	ands.w	r9, r9, #31
 8004968:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800496c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004970:	d02b      	beq.n	80049ca <__lshift+0xbe>
 8004972:	468a      	mov	sl, r1
 8004974:	2200      	movs	r2, #0
 8004976:	f1c9 0e20 	rsb	lr, r9, #32
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	fa00 f009 	lsl.w	r0, r0, r9
 8004980:	4302      	orrs	r2, r0
 8004982:	f84a 2b04 	str.w	r2, [sl], #4
 8004986:	f853 2b04 	ldr.w	r2, [r3], #4
 800498a:	459c      	cmp	ip, r3
 800498c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004990:	d8f3      	bhi.n	800497a <__lshift+0x6e>
 8004992:	ebac 0304 	sub.w	r3, ip, r4
 8004996:	3b15      	subs	r3, #21
 8004998:	f023 0303 	bic.w	r3, r3, #3
 800499c:	3304      	adds	r3, #4
 800499e:	f104 0015 	add.w	r0, r4, #21
 80049a2:	4584      	cmp	ip, r0
 80049a4:	bf38      	it	cc
 80049a6:	2304      	movcc	r3, #4
 80049a8:	50ca      	str	r2, [r1, r3]
 80049aa:	b10a      	cbz	r2, 80049b0 <__lshift+0xa4>
 80049ac:	f108 0602 	add.w	r6, r8, #2
 80049b0:	3e01      	subs	r6, #1
 80049b2:	4638      	mov	r0, r7
 80049b4:	4621      	mov	r1, r4
 80049b6:	612e      	str	r6, [r5, #16]
 80049b8:	f7ff fdda 	bl	8004570 <_Bfree>
 80049bc:	4628      	mov	r0, r5
 80049be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80049c6:	3301      	adds	r3, #1
 80049c8:	e7c5      	b.n	8004956 <__lshift+0x4a>
 80049ca:	3904      	subs	r1, #4
 80049cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80049d0:	459c      	cmp	ip, r3
 80049d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80049d6:	d8f9      	bhi.n	80049cc <__lshift+0xc0>
 80049d8:	e7ea      	b.n	80049b0 <__lshift+0xa4>
 80049da:	bf00      	nop
 80049dc:	080057db 	.word	0x080057db
 80049e0:	0800584c 	.word	0x0800584c

080049e4 <__mcmp>:
 80049e4:	4603      	mov	r3, r0
 80049e6:	690a      	ldr	r2, [r1, #16]
 80049e8:	6900      	ldr	r0, [r0, #16]
 80049ea:	b530      	push	{r4, r5, lr}
 80049ec:	1a80      	subs	r0, r0, r2
 80049ee:	d10d      	bne.n	8004a0c <__mcmp+0x28>
 80049f0:	3314      	adds	r3, #20
 80049f2:	3114      	adds	r1, #20
 80049f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80049f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80049fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004a00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004a04:	4295      	cmp	r5, r2
 8004a06:	d002      	beq.n	8004a0e <__mcmp+0x2a>
 8004a08:	d304      	bcc.n	8004a14 <__mcmp+0x30>
 8004a0a:	2001      	movs	r0, #1
 8004a0c:	bd30      	pop	{r4, r5, pc}
 8004a0e:	42a3      	cmp	r3, r4
 8004a10:	d3f4      	bcc.n	80049fc <__mcmp+0x18>
 8004a12:	e7fb      	b.n	8004a0c <__mcmp+0x28>
 8004a14:	f04f 30ff 	mov.w	r0, #4294967295
 8004a18:	e7f8      	b.n	8004a0c <__mcmp+0x28>
	...

08004a1c <__mdiff>:
 8004a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a20:	460c      	mov	r4, r1
 8004a22:	4606      	mov	r6, r0
 8004a24:	4611      	mov	r1, r2
 8004a26:	4620      	mov	r0, r4
 8004a28:	4692      	mov	sl, r2
 8004a2a:	f7ff ffdb 	bl	80049e4 <__mcmp>
 8004a2e:	1e05      	subs	r5, r0, #0
 8004a30:	d111      	bne.n	8004a56 <__mdiff+0x3a>
 8004a32:	4629      	mov	r1, r5
 8004a34:	4630      	mov	r0, r6
 8004a36:	f7ff fd5b 	bl	80044f0 <_Balloc>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	b928      	cbnz	r0, 8004a4a <__mdiff+0x2e>
 8004a3e:	f240 2132 	movw	r1, #562	; 0x232
 8004a42:	4b3c      	ldr	r3, [pc, #240]	; (8004b34 <__mdiff+0x118>)
 8004a44:	483c      	ldr	r0, [pc, #240]	; (8004b38 <__mdiff+0x11c>)
 8004a46:	f000 fc07 	bl	8005258 <__assert_func>
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004a50:	4610      	mov	r0, r2
 8004a52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a56:	bfa4      	itt	ge
 8004a58:	4653      	movge	r3, sl
 8004a5a:	46a2      	movge	sl, r4
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004a62:	bfa6      	itte	ge
 8004a64:	461c      	movge	r4, r3
 8004a66:	2500      	movge	r5, #0
 8004a68:	2501      	movlt	r5, #1
 8004a6a:	f7ff fd41 	bl	80044f0 <_Balloc>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	b918      	cbnz	r0, 8004a7a <__mdiff+0x5e>
 8004a72:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004a76:	4b2f      	ldr	r3, [pc, #188]	; (8004b34 <__mdiff+0x118>)
 8004a78:	e7e4      	b.n	8004a44 <__mdiff+0x28>
 8004a7a:	f100 0814 	add.w	r8, r0, #20
 8004a7e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004a82:	60c5      	str	r5, [r0, #12]
 8004a84:	f04f 0c00 	mov.w	ip, #0
 8004a88:	f10a 0514 	add.w	r5, sl, #20
 8004a8c:	f10a 0010 	add.w	r0, sl, #16
 8004a90:	46c2      	mov	sl, r8
 8004a92:	6926      	ldr	r6, [r4, #16]
 8004a94:	f104 0914 	add.w	r9, r4, #20
 8004a98:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004a9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004aa0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8004aa4:	f859 3b04 	ldr.w	r3, [r9], #4
 8004aa8:	fa1f f18b 	uxth.w	r1, fp
 8004aac:	4461      	add	r1, ip
 8004aae:	fa1f fc83 	uxth.w	ip, r3
 8004ab2:	0c1b      	lsrs	r3, r3, #16
 8004ab4:	eba1 010c 	sub.w	r1, r1, ip
 8004ab8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004abc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004ac0:	b289      	uxth	r1, r1
 8004ac2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004ac6:	454e      	cmp	r6, r9
 8004ac8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004acc:	f84a 3b04 	str.w	r3, [sl], #4
 8004ad0:	d8e6      	bhi.n	8004aa0 <__mdiff+0x84>
 8004ad2:	1b33      	subs	r3, r6, r4
 8004ad4:	3b15      	subs	r3, #21
 8004ad6:	f023 0303 	bic.w	r3, r3, #3
 8004ada:	3415      	adds	r4, #21
 8004adc:	3304      	adds	r3, #4
 8004ade:	42a6      	cmp	r6, r4
 8004ae0:	bf38      	it	cc
 8004ae2:	2304      	movcc	r3, #4
 8004ae4:	441d      	add	r5, r3
 8004ae6:	4443      	add	r3, r8
 8004ae8:	461e      	mov	r6, r3
 8004aea:	462c      	mov	r4, r5
 8004aec:	4574      	cmp	r4, lr
 8004aee:	d30e      	bcc.n	8004b0e <__mdiff+0xf2>
 8004af0:	f10e 0103 	add.w	r1, lr, #3
 8004af4:	1b49      	subs	r1, r1, r5
 8004af6:	f021 0103 	bic.w	r1, r1, #3
 8004afa:	3d03      	subs	r5, #3
 8004afc:	45ae      	cmp	lr, r5
 8004afe:	bf38      	it	cc
 8004b00:	2100      	movcc	r1, #0
 8004b02:	4419      	add	r1, r3
 8004b04:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004b08:	b18b      	cbz	r3, 8004b2e <__mdiff+0x112>
 8004b0a:	6117      	str	r7, [r2, #16]
 8004b0c:	e7a0      	b.n	8004a50 <__mdiff+0x34>
 8004b0e:	f854 8b04 	ldr.w	r8, [r4], #4
 8004b12:	fa1f f188 	uxth.w	r1, r8
 8004b16:	4461      	add	r1, ip
 8004b18:	1408      	asrs	r0, r1, #16
 8004b1a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8004b1e:	b289      	uxth	r1, r1
 8004b20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004b24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004b28:	f846 1b04 	str.w	r1, [r6], #4
 8004b2c:	e7de      	b.n	8004aec <__mdiff+0xd0>
 8004b2e:	3f01      	subs	r7, #1
 8004b30:	e7e8      	b.n	8004b04 <__mdiff+0xe8>
 8004b32:	bf00      	nop
 8004b34:	080057db 	.word	0x080057db
 8004b38:	0800584c 	.word	0x0800584c

08004b3c <__d2b>:
 8004b3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004b40:	2101      	movs	r1, #1
 8004b42:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004b46:	4690      	mov	r8, r2
 8004b48:	461d      	mov	r5, r3
 8004b4a:	f7ff fcd1 	bl	80044f0 <_Balloc>
 8004b4e:	4604      	mov	r4, r0
 8004b50:	b930      	cbnz	r0, 8004b60 <__d2b+0x24>
 8004b52:	4602      	mov	r2, r0
 8004b54:	f240 310a 	movw	r1, #778	; 0x30a
 8004b58:	4b24      	ldr	r3, [pc, #144]	; (8004bec <__d2b+0xb0>)
 8004b5a:	4825      	ldr	r0, [pc, #148]	; (8004bf0 <__d2b+0xb4>)
 8004b5c:	f000 fb7c 	bl	8005258 <__assert_func>
 8004b60:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004b64:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004b68:	bb2d      	cbnz	r5, 8004bb6 <__d2b+0x7a>
 8004b6a:	9301      	str	r3, [sp, #4]
 8004b6c:	f1b8 0300 	subs.w	r3, r8, #0
 8004b70:	d026      	beq.n	8004bc0 <__d2b+0x84>
 8004b72:	4668      	mov	r0, sp
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	f7ff fd87 	bl	8004688 <__lo0bits>
 8004b7a:	9900      	ldr	r1, [sp, #0]
 8004b7c:	b1f0      	cbz	r0, 8004bbc <__d2b+0x80>
 8004b7e:	9a01      	ldr	r2, [sp, #4]
 8004b80:	f1c0 0320 	rsb	r3, r0, #32
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	40c2      	lsrs	r2, r0
 8004b8c:	6163      	str	r3, [r4, #20]
 8004b8e:	9201      	str	r2, [sp, #4]
 8004b90:	9b01      	ldr	r3, [sp, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	bf14      	ite	ne
 8004b96:	2102      	movne	r1, #2
 8004b98:	2101      	moveq	r1, #1
 8004b9a:	61a3      	str	r3, [r4, #24]
 8004b9c:	6121      	str	r1, [r4, #16]
 8004b9e:	b1c5      	cbz	r5, 8004bd2 <__d2b+0x96>
 8004ba0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004ba4:	4405      	add	r5, r0
 8004ba6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004baa:	603d      	str	r5, [r7, #0]
 8004bac:	6030      	str	r0, [r6, #0]
 8004bae:	4620      	mov	r0, r4
 8004bb0:	b002      	add	sp, #8
 8004bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bba:	e7d6      	b.n	8004b6a <__d2b+0x2e>
 8004bbc:	6161      	str	r1, [r4, #20]
 8004bbe:	e7e7      	b.n	8004b90 <__d2b+0x54>
 8004bc0:	a801      	add	r0, sp, #4
 8004bc2:	f7ff fd61 	bl	8004688 <__lo0bits>
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	9b01      	ldr	r3, [sp, #4]
 8004bca:	6121      	str	r1, [r4, #16]
 8004bcc:	6163      	str	r3, [r4, #20]
 8004bce:	3020      	adds	r0, #32
 8004bd0:	e7e5      	b.n	8004b9e <__d2b+0x62>
 8004bd2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004bd6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004bda:	6038      	str	r0, [r7, #0]
 8004bdc:	6918      	ldr	r0, [r3, #16]
 8004bde:	f7ff fd33 	bl	8004648 <__hi0bits>
 8004be2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004be6:	6031      	str	r1, [r6, #0]
 8004be8:	e7e1      	b.n	8004bae <__d2b+0x72>
 8004bea:	bf00      	nop
 8004bec:	080057db 	.word	0x080057db
 8004bf0:	0800584c 	.word	0x0800584c

08004bf4 <_calloc_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	fb02 f501 	mul.w	r5, r2, r1
 8004bfa:	4629      	mov	r1, r5
 8004bfc:	f000 f854 	bl	8004ca8 <_malloc_r>
 8004c00:	4604      	mov	r4, r0
 8004c02:	b118      	cbz	r0, 8004c0c <_calloc_r+0x18>
 8004c04:	462a      	mov	r2, r5
 8004c06:	2100      	movs	r1, #0
 8004c08:	f7fe f854 	bl	8002cb4 <memset>
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	bd38      	pop	{r3, r4, r5, pc}

08004c10 <_free_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4605      	mov	r5, r0
 8004c14:	2900      	cmp	r1, #0
 8004c16:	d043      	beq.n	8004ca0 <_free_r+0x90>
 8004c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c1c:	1f0c      	subs	r4, r1, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfb8      	it	lt
 8004c22:	18e4      	addlt	r4, r4, r3
 8004c24:	f000 fca2 	bl	800556c <__malloc_lock>
 8004c28:	4a1e      	ldr	r2, [pc, #120]	; (8004ca4 <_free_r+0x94>)
 8004c2a:	6813      	ldr	r3, [r2, #0]
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	b933      	cbnz	r3, 8004c3e <_free_r+0x2e>
 8004c30:	6063      	str	r3, [r4, #4]
 8004c32:	6014      	str	r4, [r2, #0]
 8004c34:	4628      	mov	r0, r5
 8004c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c3a:	f000 bc9d 	b.w	8005578 <__malloc_unlock>
 8004c3e:	42a3      	cmp	r3, r4
 8004c40:	d90a      	bls.n	8004c58 <_free_r+0x48>
 8004c42:	6821      	ldr	r1, [r4, #0]
 8004c44:	1862      	adds	r2, r4, r1
 8004c46:	4293      	cmp	r3, r2
 8004c48:	bf01      	itttt	eq
 8004c4a:	681a      	ldreq	r2, [r3, #0]
 8004c4c:	685b      	ldreq	r3, [r3, #4]
 8004c4e:	1852      	addeq	r2, r2, r1
 8004c50:	6022      	streq	r2, [r4, #0]
 8004c52:	6063      	str	r3, [r4, #4]
 8004c54:	6004      	str	r4, [r0, #0]
 8004c56:	e7ed      	b.n	8004c34 <_free_r+0x24>
 8004c58:	461a      	mov	r2, r3
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	b10b      	cbz	r3, 8004c62 <_free_r+0x52>
 8004c5e:	42a3      	cmp	r3, r4
 8004c60:	d9fa      	bls.n	8004c58 <_free_r+0x48>
 8004c62:	6811      	ldr	r1, [r2, #0]
 8004c64:	1850      	adds	r0, r2, r1
 8004c66:	42a0      	cmp	r0, r4
 8004c68:	d10b      	bne.n	8004c82 <_free_r+0x72>
 8004c6a:	6820      	ldr	r0, [r4, #0]
 8004c6c:	4401      	add	r1, r0
 8004c6e:	1850      	adds	r0, r2, r1
 8004c70:	4283      	cmp	r3, r0
 8004c72:	6011      	str	r1, [r2, #0]
 8004c74:	d1de      	bne.n	8004c34 <_free_r+0x24>
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	4401      	add	r1, r0
 8004c7c:	6011      	str	r1, [r2, #0]
 8004c7e:	6053      	str	r3, [r2, #4]
 8004c80:	e7d8      	b.n	8004c34 <_free_r+0x24>
 8004c82:	d902      	bls.n	8004c8a <_free_r+0x7a>
 8004c84:	230c      	movs	r3, #12
 8004c86:	602b      	str	r3, [r5, #0]
 8004c88:	e7d4      	b.n	8004c34 <_free_r+0x24>
 8004c8a:	6820      	ldr	r0, [r4, #0]
 8004c8c:	1821      	adds	r1, r4, r0
 8004c8e:	428b      	cmp	r3, r1
 8004c90:	bf01      	itttt	eq
 8004c92:	6819      	ldreq	r1, [r3, #0]
 8004c94:	685b      	ldreq	r3, [r3, #4]
 8004c96:	1809      	addeq	r1, r1, r0
 8004c98:	6021      	streq	r1, [r4, #0]
 8004c9a:	6063      	str	r3, [r4, #4]
 8004c9c:	6054      	str	r4, [r2, #4]
 8004c9e:	e7c9      	b.n	8004c34 <_free_r+0x24>
 8004ca0:	bd38      	pop	{r3, r4, r5, pc}
 8004ca2:	bf00      	nop
 8004ca4:	200001fc 	.word	0x200001fc

08004ca8 <_malloc_r>:
 8004ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004caa:	1ccd      	adds	r5, r1, #3
 8004cac:	f025 0503 	bic.w	r5, r5, #3
 8004cb0:	3508      	adds	r5, #8
 8004cb2:	2d0c      	cmp	r5, #12
 8004cb4:	bf38      	it	cc
 8004cb6:	250c      	movcc	r5, #12
 8004cb8:	2d00      	cmp	r5, #0
 8004cba:	4606      	mov	r6, r0
 8004cbc:	db01      	blt.n	8004cc2 <_malloc_r+0x1a>
 8004cbe:	42a9      	cmp	r1, r5
 8004cc0:	d903      	bls.n	8004cca <_malloc_r+0x22>
 8004cc2:	230c      	movs	r3, #12
 8004cc4:	6033      	str	r3, [r6, #0]
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cca:	f000 fc4f 	bl	800556c <__malloc_lock>
 8004cce:	4921      	ldr	r1, [pc, #132]	; (8004d54 <_malloc_r+0xac>)
 8004cd0:	680a      	ldr	r2, [r1, #0]
 8004cd2:	4614      	mov	r4, r2
 8004cd4:	b99c      	cbnz	r4, 8004cfe <_malloc_r+0x56>
 8004cd6:	4f20      	ldr	r7, [pc, #128]	; (8004d58 <_malloc_r+0xb0>)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	b923      	cbnz	r3, 8004ce6 <_malloc_r+0x3e>
 8004cdc:	4621      	mov	r1, r4
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f000 f994 	bl	800500c <_sbrk_r>
 8004ce4:	6038      	str	r0, [r7, #0]
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f000 f98f 	bl	800500c <_sbrk_r>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d123      	bne.n	8004d3a <_malloc_r+0x92>
 8004cf2:	230c      	movs	r3, #12
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	6033      	str	r3, [r6, #0]
 8004cf8:	f000 fc3e 	bl	8005578 <__malloc_unlock>
 8004cfc:	e7e3      	b.n	8004cc6 <_malloc_r+0x1e>
 8004cfe:	6823      	ldr	r3, [r4, #0]
 8004d00:	1b5b      	subs	r3, r3, r5
 8004d02:	d417      	bmi.n	8004d34 <_malloc_r+0x8c>
 8004d04:	2b0b      	cmp	r3, #11
 8004d06:	d903      	bls.n	8004d10 <_malloc_r+0x68>
 8004d08:	6023      	str	r3, [r4, #0]
 8004d0a:	441c      	add	r4, r3
 8004d0c:	6025      	str	r5, [r4, #0]
 8004d0e:	e004      	b.n	8004d1a <_malloc_r+0x72>
 8004d10:	6863      	ldr	r3, [r4, #4]
 8004d12:	42a2      	cmp	r2, r4
 8004d14:	bf0c      	ite	eq
 8004d16:	600b      	streq	r3, [r1, #0]
 8004d18:	6053      	strne	r3, [r2, #4]
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	f000 fc2c 	bl	8005578 <__malloc_unlock>
 8004d20:	f104 000b 	add.w	r0, r4, #11
 8004d24:	1d23      	adds	r3, r4, #4
 8004d26:	f020 0007 	bic.w	r0, r0, #7
 8004d2a:	1ac2      	subs	r2, r0, r3
 8004d2c:	d0cc      	beq.n	8004cc8 <_malloc_r+0x20>
 8004d2e:	1a1b      	subs	r3, r3, r0
 8004d30:	50a3      	str	r3, [r4, r2]
 8004d32:	e7c9      	b.n	8004cc8 <_malloc_r+0x20>
 8004d34:	4622      	mov	r2, r4
 8004d36:	6864      	ldr	r4, [r4, #4]
 8004d38:	e7cc      	b.n	8004cd4 <_malloc_r+0x2c>
 8004d3a:	1cc4      	adds	r4, r0, #3
 8004d3c:	f024 0403 	bic.w	r4, r4, #3
 8004d40:	42a0      	cmp	r0, r4
 8004d42:	d0e3      	beq.n	8004d0c <_malloc_r+0x64>
 8004d44:	1a21      	subs	r1, r4, r0
 8004d46:	4630      	mov	r0, r6
 8004d48:	f000 f960 	bl	800500c <_sbrk_r>
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d1dd      	bne.n	8004d0c <_malloc_r+0x64>
 8004d50:	e7cf      	b.n	8004cf2 <_malloc_r+0x4a>
 8004d52:	bf00      	nop
 8004d54:	200001fc 	.word	0x200001fc
 8004d58:	20000200 	.word	0x20000200

08004d5c <__sfputc_r>:
 8004d5c:	6893      	ldr	r3, [r2, #8]
 8004d5e:	b410      	push	{r4}
 8004d60:	3b01      	subs	r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	6093      	str	r3, [r2, #8]
 8004d66:	da07      	bge.n	8004d78 <__sfputc_r+0x1c>
 8004d68:	6994      	ldr	r4, [r2, #24]
 8004d6a:	42a3      	cmp	r3, r4
 8004d6c:	db01      	blt.n	8004d72 <__sfputc_r+0x16>
 8004d6e:	290a      	cmp	r1, #10
 8004d70:	d102      	bne.n	8004d78 <__sfputc_r+0x1c>
 8004d72:	bc10      	pop	{r4}
 8004d74:	f000 b99e 	b.w	80050b4 <__swbuf_r>
 8004d78:	6813      	ldr	r3, [r2, #0]
 8004d7a:	1c58      	adds	r0, r3, #1
 8004d7c:	6010      	str	r0, [r2, #0]
 8004d7e:	7019      	strb	r1, [r3, #0]
 8004d80:	4608      	mov	r0, r1
 8004d82:	bc10      	pop	{r4}
 8004d84:	4770      	bx	lr

08004d86 <__sfputs_r>:
 8004d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d88:	4606      	mov	r6, r0
 8004d8a:	460f      	mov	r7, r1
 8004d8c:	4614      	mov	r4, r2
 8004d8e:	18d5      	adds	r5, r2, r3
 8004d90:	42ac      	cmp	r4, r5
 8004d92:	d101      	bne.n	8004d98 <__sfputs_r+0x12>
 8004d94:	2000      	movs	r0, #0
 8004d96:	e007      	b.n	8004da8 <__sfputs_r+0x22>
 8004d98:	463a      	mov	r2, r7
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004da0:	f7ff ffdc 	bl	8004d5c <__sfputc_r>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d1f3      	bne.n	8004d90 <__sfputs_r+0xa>
 8004da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004dac <_vfiprintf_r>:
 8004dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db0:	460d      	mov	r5, r1
 8004db2:	4614      	mov	r4, r2
 8004db4:	4698      	mov	r8, r3
 8004db6:	4606      	mov	r6, r0
 8004db8:	b09d      	sub	sp, #116	; 0x74
 8004dba:	b118      	cbz	r0, 8004dc4 <_vfiprintf_r+0x18>
 8004dbc:	6983      	ldr	r3, [r0, #24]
 8004dbe:	b90b      	cbnz	r3, 8004dc4 <_vfiprintf_r+0x18>
 8004dc0:	f7ff facc 	bl	800435c <__sinit>
 8004dc4:	4b89      	ldr	r3, [pc, #548]	; (8004fec <_vfiprintf_r+0x240>)
 8004dc6:	429d      	cmp	r5, r3
 8004dc8:	d11b      	bne.n	8004e02 <_vfiprintf_r+0x56>
 8004dca:	6875      	ldr	r5, [r6, #4]
 8004dcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dce:	07d9      	lsls	r1, r3, #31
 8004dd0:	d405      	bmi.n	8004dde <_vfiprintf_r+0x32>
 8004dd2:	89ab      	ldrh	r3, [r5, #12]
 8004dd4:	059a      	lsls	r2, r3, #22
 8004dd6:	d402      	bmi.n	8004dde <_vfiprintf_r+0x32>
 8004dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dda:	f7ff fb62 	bl	80044a2 <__retarget_lock_acquire_recursive>
 8004dde:	89ab      	ldrh	r3, [r5, #12]
 8004de0:	071b      	lsls	r3, r3, #28
 8004de2:	d501      	bpl.n	8004de8 <_vfiprintf_r+0x3c>
 8004de4:	692b      	ldr	r3, [r5, #16]
 8004de6:	b9eb      	cbnz	r3, 8004e24 <_vfiprintf_r+0x78>
 8004de8:	4629      	mov	r1, r5
 8004dea:	4630      	mov	r0, r6
 8004dec:	f000 f9c6 	bl	800517c <__swsetup_r>
 8004df0:	b1c0      	cbz	r0, 8004e24 <_vfiprintf_r+0x78>
 8004df2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004df4:	07dc      	lsls	r4, r3, #31
 8004df6:	d50e      	bpl.n	8004e16 <_vfiprintf_r+0x6a>
 8004df8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfc:	b01d      	add	sp, #116	; 0x74
 8004dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e02:	4b7b      	ldr	r3, [pc, #492]	; (8004ff0 <_vfiprintf_r+0x244>)
 8004e04:	429d      	cmp	r5, r3
 8004e06:	d101      	bne.n	8004e0c <_vfiprintf_r+0x60>
 8004e08:	68b5      	ldr	r5, [r6, #8]
 8004e0a:	e7df      	b.n	8004dcc <_vfiprintf_r+0x20>
 8004e0c:	4b79      	ldr	r3, [pc, #484]	; (8004ff4 <_vfiprintf_r+0x248>)
 8004e0e:	429d      	cmp	r5, r3
 8004e10:	bf08      	it	eq
 8004e12:	68f5      	ldreq	r5, [r6, #12]
 8004e14:	e7da      	b.n	8004dcc <_vfiprintf_r+0x20>
 8004e16:	89ab      	ldrh	r3, [r5, #12]
 8004e18:	0598      	lsls	r0, r3, #22
 8004e1a:	d4ed      	bmi.n	8004df8 <_vfiprintf_r+0x4c>
 8004e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e1e:	f7ff fb41 	bl	80044a4 <__retarget_lock_release_recursive>
 8004e22:	e7e9      	b.n	8004df8 <_vfiprintf_r+0x4c>
 8004e24:	2300      	movs	r3, #0
 8004e26:	9309      	str	r3, [sp, #36]	; 0x24
 8004e28:	2320      	movs	r3, #32
 8004e2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e2e:	2330      	movs	r3, #48	; 0x30
 8004e30:	f04f 0901 	mov.w	r9, #1
 8004e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e38:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004ff8 <_vfiprintf_r+0x24c>
 8004e3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e40:	4623      	mov	r3, r4
 8004e42:	469a      	mov	sl, r3
 8004e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e48:	b10a      	cbz	r2, 8004e4e <_vfiprintf_r+0xa2>
 8004e4a:	2a25      	cmp	r2, #37	; 0x25
 8004e4c:	d1f9      	bne.n	8004e42 <_vfiprintf_r+0x96>
 8004e4e:	ebba 0b04 	subs.w	fp, sl, r4
 8004e52:	d00b      	beq.n	8004e6c <_vfiprintf_r+0xc0>
 8004e54:	465b      	mov	r3, fp
 8004e56:	4622      	mov	r2, r4
 8004e58:	4629      	mov	r1, r5
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f7ff ff93 	bl	8004d86 <__sfputs_r>
 8004e60:	3001      	adds	r0, #1
 8004e62:	f000 80aa 	beq.w	8004fba <_vfiprintf_r+0x20e>
 8004e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e68:	445a      	add	r2, fp
 8004e6a:	9209      	str	r2, [sp, #36]	; 0x24
 8004e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 80a2 	beq.w	8004fba <_vfiprintf_r+0x20e>
 8004e76:	2300      	movs	r3, #0
 8004e78:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e80:	f10a 0a01 	add.w	sl, sl, #1
 8004e84:	9304      	str	r3, [sp, #16]
 8004e86:	9307      	str	r3, [sp, #28]
 8004e88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e8c:	931a      	str	r3, [sp, #104]	; 0x68
 8004e8e:	4654      	mov	r4, sl
 8004e90:	2205      	movs	r2, #5
 8004e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e96:	4858      	ldr	r0, [pc, #352]	; (8004ff8 <_vfiprintf_r+0x24c>)
 8004e98:	f7ff fb0e 	bl	80044b8 <memchr>
 8004e9c:	9a04      	ldr	r2, [sp, #16]
 8004e9e:	b9d8      	cbnz	r0, 8004ed8 <_vfiprintf_r+0x12c>
 8004ea0:	06d1      	lsls	r1, r2, #27
 8004ea2:	bf44      	itt	mi
 8004ea4:	2320      	movmi	r3, #32
 8004ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eaa:	0713      	lsls	r3, r2, #28
 8004eac:	bf44      	itt	mi
 8004eae:	232b      	movmi	r3, #43	; 0x2b
 8004eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8004eba:	d015      	beq.n	8004ee8 <_vfiprintf_r+0x13c>
 8004ebc:	4654      	mov	r4, sl
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f04f 0c0a 	mov.w	ip, #10
 8004ec4:	9a07      	ldr	r2, [sp, #28]
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ecc:	3b30      	subs	r3, #48	; 0x30
 8004ece:	2b09      	cmp	r3, #9
 8004ed0:	d94e      	bls.n	8004f70 <_vfiprintf_r+0x1c4>
 8004ed2:	b1b0      	cbz	r0, 8004f02 <_vfiprintf_r+0x156>
 8004ed4:	9207      	str	r2, [sp, #28]
 8004ed6:	e014      	b.n	8004f02 <_vfiprintf_r+0x156>
 8004ed8:	eba0 0308 	sub.w	r3, r0, r8
 8004edc:	fa09 f303 	lsl.w	r3, r9, r3
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	46a2      	mov	sl, r4
 8004ee4:	9304      	str	r3, [sp, #16]
 8004ee6:	e7d2      	b.n	8004e8e <_vfiprintf_r+0xe2>
 8004ee8:	9b03      	ldr	r3, [sp, #12]
 8004eea:	1d19      	adds	r1, r3, #4
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	9103      	str	r1, [sp, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	bfbb      	ittet	lt
 8004ef4:	425b      	neglt	r3, r3
 8004ef6:	f042 0202 	orrlt.w	r2, r2, #2
 8004efa:	9307      	strge	r3, [sp, #28]
 8004efc:	9307      	strlt	r3, [sp, #28]
 8004efe:	bfb8      	it	lt
 8004f00:	9204      	strlt	r2, [sp, #16]
 8004f02:	7823      	ldrb	r3, [r4, #0]
 8004f04:	2b2e      	cmp	r3, #46	; 0x2e
 8004f06:	d10c      	bne.n	8004f22 <_vfiprintf_r+0x176>
 8004f08:	7863      	ldrb	r3, [r4, #1]
 8004f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8004f0c:	d135      	bne.n	8004f7a <_vfiprintf_r+0x1ce>
 8004f0e:	9b03      	ldr	r3, [sp, #12]
 8004f10:	3402      	adds	r4, #2
 8004f12:	1d1a      	adds	r2, r3, #4
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	9203      	str	r2, [sp, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bfb8      	it	lt
 8004f1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f20:	9305      	str	r3, [sp, #20]
 8004f22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005008 <_vfiprintf_r+0x25c>
 8004f26:	2203      	movs	r2, #3
 8004f28:	4650      	mov	r0, sl
 8004f2a:	7821      	ldrb	r1, [r4, #0]
 8004f2c:	f7ff fac4 	bl	80044b8 <memchr>
 8004f30:	b140      	cbz	r0, 8004f44 <_vfiprintf_r+0x198>
 8004f32:	2340      	movs	r3, #64	; 0x40
 8004f34:	eba0 000a 	sub.w	r0, r0, sl
 8004f38:	fa03 f000 	lsl.w	r0, r3, r0
 8004f3c:	9b04      	ldr	r3, [sp, #16]
 8004f3e:	3401      	adds	r4, #1
 8004f40:	4303      	orrs	r3, r0
 8004f42:	9304      	str	r3, [sp, #16]
 8004f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f48:	2206      	movs	r2, #6
 8004f4a:	482c      	ldr	r0, [pc, #176]	; (8004ffc <_vfiprintf_r+0x250>)
 8004f4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f50:	f7ff fab2 	bl	80044b8 <memchr>
 8004f54:	2800      	cmp	r0, #0
 8004f56:	d03f      	beq.n	8004fd8 <_vfiprintf_r+0x22c>
 8004f58:	4b29      	ldr	r3, [pc, #164]	; (8005000 <_vfiprintf_r+0x254>)
 8004f5a:	bb1b      	cbnz	r3, 8004fa4 <_vfiprintf_r+0x1f8>
 8004f5c:	9b03      	ldr	r3, [sp, #12]
 8004f5e:	3307      	adds	r3, #7
 8004f60:	f023 0307 	bic.w	r3, r3, #7
 8004f64:	3308      	adds	r3, #8
 8004f66:	9303      	str	r3, [sp, #12]
 8004f68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f6a:	443b      	add	r3, r7
 8004f6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f6e:	e767      	b.n	8004e40 <_vfiprintf_r+0x94>
 8004f70:	460c      	mov	r4, r1
 8004f72:	2001      	movs	r0, #1
 8004f74:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f78:	e7a5      	b.n	8004ec6 <_vfiprintf_r+0x11a>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f04f 0c0a 	mov.w	ip, #10
 8004f80:	4619      	mov	r1, r3
 8004f82:	3401      	adds	r4, #1
 8004f84:	9305      	str	r3, [sp, #20]
 8004f86:	4620      	mov	r0, r4
 8004f88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f8c:	3a30      	subs	r2, #48	; 0x30
 8004f8e:	2a09      	cmp	r2, #9
 8004f90:	d903      	bls.n	8004f9a <_vfiprintf_r+0x1ee>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d0c5      	beq.n	8004f22 <_vfiprintf_r+0x176>
 8004f96:	9105      	str	r1, [sp, #20]
 8004f98:	e7c3      	b.n	8004f22 <_vfiprintf_r+0x176>
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fa2:	e7f0      	b.n	8004f86 <_vfiprintf_r+0x1da>
 8004fa4:	ab03      	add	r3, sp, #12
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	462a      	mov	r2, r5
 8004faa:	4630      	mov	r0, r6
 8004fac:	4b15      	ldr	r3, [pc, #84]	; (8005004 <_vfiprintf_r+0x258>)
 8004fae:	a904      	add	r1, sp, #16
 8004fb0:	f7fd ff26 	bl	8002e00 <_printf_float>
 8004fb4:	4607      	mov	r7, r0
 8004fb6:	1c78      	adds	r0, r7, #1
 8004fb8:	d1d6      	bne.n	8004f68 <_vfiprintf_r+0x1bc>
 8004fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004fbc:	07d9      	lsls	r1, r3, #31
 8004fbe:	d405      	bmi.n	8004fcc <_vfiprintf_r+0x220>
 8004fc0:	89ab      	ldrh	r3, [r5, #12]
 8004fc2:	059a      	lsls	r2, r3, #22
 8004fc4:	d402      	bmi.n	8004fcc <_vfiprintf_r+0x220>
 8004fc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004fc8:	f7ff fa6c 	bl	80044a4 <__retarget_lock_release_recursive>
 8004fcc:	89ab      	ldrh	r3, [r5, #12]
 8004fce:	065b      	lsls	r3, r3, #25
 8004fd0:	f53f af12 	bmi.w	8004df8 <_vfiprintf_r+0x4c>
 8004fd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fd6:	e711      	b.n	8004dfc <_vfiprintf_r+0x50>
 8004fd8:	ab03      	add	r3, sp, #12
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	462a      	mov	r2, r5
 8004fde:	4630      	mov	r0, r6
 8004fe0:	4b08      	ldr	r3, [pc, #32]	; (8005004 <_vfiprintf_r+0x258>)
 8004fe2:	a904      	add	r1, sp, #16
 8004fe4:	f7fe f9a8 	bl	8003338 <_printf_i>
 8004fe8:	e7e4      	b.n	8004fb4 <_vfiprintf_r+0x208>
 8004fea:	bf00      	nop
 8004fec:	0800580c 	.word	0x0800580c
 8004ff0:	0800582c 	.word	0x0800582c
 8004ff4:	080057ec 	.word	0x080057ec
 8004ff8:	080059ac 	.word	0x080059ac
 8004ffc:	080059b6 	.word	0x080059b6
 8005000:	08002e01 	.word	0x08002e01
 8005004:	08004d87 	.word	0x08004d87
 8005008:	080059b2 	.word	0x080059b2

0800500c <_sbrk_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	2300      	movs	r3, #0
 8005010:	4d05      	ldr	r5, [pc, #20]	; (8005028 <_sbrk_r+0x1c>)
 8005012:	4604      	mov	r4, r0
 8005014:	4608      	mov	r0, r1
 8005016:	602b      	str	r3, [r5, #0]
 8005018:	f7fc fb1e 	bl	8001658 <_sbrk>
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d102      	bne.n	8005026 <_sbrk_r+0x1a>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	b103      	cbz	r3, 8005026 <_sbrk_r+0x1a>
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	2000029c 	.word	0x2000029c

0800502c <__sread>:
 800502c:	b510      	push	{r4, lr}
 800502e:	460c      	mov	r4, r1
 8005030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005034:	f000 faa6 	bl	8005584 <_read_r>
 8005038:	2800      	cmp	r0, #0
 800503a:	bfab      	itete	ge
 800503c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800503e:	89a3      	ldrhlt	r3, [r4, #12]
 8005040:	181b      	addge	r3, r3, r0
 8005042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005046:	bfac      	ite	ge
 8005048:	6563      	strge	r3, [r4, #84]	; 0x54
 800504a:	81a3      	strhlt	r3, [r4, #12]
 800504c:	bd10      	pop	{r4, pc}

0800504e <__swrite>:
 800504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005052:	461f      	mov	r7, r3
 8005054:	898b      	ldrh	r3, [r1, #12]
 8005056:	4605      	mov	r5, r0
 8005058:	05db      	lsls	r3, r3, #23
 800505a:	460c      	mov	r4, r1
 800505c:	4616      	mov	r6, r2
 800505e:	d505      	bpl.n	800506c <__swrite+0x1e>
 8005060:	2302      	movs	r3, #2
 8005062:	2200      	movs	r2, #0
 8005064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005068:	f000 f9f8 	bl	800545c <_lseek_r>
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	4632      	mov	r2, r6
 8005070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005074:	81a3      	strh	r3, [r4, #12]
 8005076:	4628      	mov	r0, r5
 8005078:	463b      	mov	r3, r7
 800507a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800507e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005082:	f000 b869 	b.w	8005158 <_write_r>

08005086 <__sseek>:
 8005086:	b510      	push	{r4, lr}
 8005088:	460c      	mov	r4, r1
 800508a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508e:	f000 f9e5 	bl	800545c <_lseek_r>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	bf15      	itete	ne
 8005098:	6560      	strne	r0, [r4, #84]	; 0x54
 800509a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800509e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050a2:	81a3      	strheq	r3, [r4, #12]
 80050a4:	bf18      	it	ne
 80050a6:	81a3      	strhne	r3, [r4, #12]
 80050a8:	bd10      	pop	{r4, pc}

080050aa <__sclose>:
 80050aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ae:	f000 b8f1 	b.w	8005294 <_close_r>
	...

080050b4 <__swbuf_r>:
 80050b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b6:	460e      	mov	r6, r1
 80050b8:	4614      	mov	r4, r2
 80050ba:	4605      	mov	r5, r0
 80050bc:	b118      	cbz	r0, 80050c6 <__swbuf_r+0x12>
 80050be:	6983      	ldr	r3, [r0, #24]
 80050c0:	b90b      	cbnz	r3, 80050c6 <__swbuf_r+0x12>
 80050c2:	f7ff f94b 	bl	800435c <__sinit>
 80050c6:	4b21      	ldr	r3, [pc, #132]	; (800514c <__swbuf_r+0x98>)
 80050c8:	429c      	cmp	r4, r3
 80050ca:	d12b      	bne.n	8005124 <__swbuf_r+0x70>
 80050cc:	686c      	ldr	r4, [r5, #4]
 80050ce:	69a3      	ldr	r3, [r4, #24]
 80050d0:	60a3      	str	r3, [r4, #8]
 80050d2:	89a3      	ldrh	r3, [r4, #12]
 80050d4:	071a      	lsls	r2, r3, #28
 80050d6:	d52f      	bpl.n	8005138 <__swbuf_r+0x84>
 80050d8:	6923      	ldr	r3, [r4, #16]
 80050da:	b36b      	cbz	r3, 8005138 <__swbuf_r+0x84>
 80050dc:	6923      	ldr	r3, [r4, #16]
 80050de:	6820      	ldr	r0, [r4, #0]
 80050e0:	b2f6      	uxtb	r6, r6
 80050e2:	1ac0      	subs	r0, r0, r3
 80050e4:	6963      	ldr	r3, [r4, #20]
 80050e6:	4637      	mov	r7, r6
 80050e8:	4283      	cmp	r3, r0
 80050ea:	dc04      	bgt.n	80050f6 <__swbuf_r+0x42>
 80050ec:	4621      	mov	r1, r4
 80050ee:	4628      	mov	r0, r5
 80050f0:	f000 f966 	bl	80053c0 <_fflush_r>
 80050f4:	bb30      	cbnz	r0, 8005144 <__swbuf_r+0x90>
 80050f6:	68a3      	ldr	r3, [r4, #8]
 80050f8:	3001      	adds	r0, #1
 80050fa:	3b01      	subs	r3, #1
 80050fc:	60a3      	str	r3, [r4, #8]
 80050fe:	6823      	ldr	r3, [r4, #0]
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	6022      	str	r2, [r4, #0]
 8005104:	701e      	strb	r6, [r3, #0]
 8005106:	6963      	ldr	r3, [r4, #20]
 8005108:	4283      	cmp	r3, r0
 800510a:	d004      	beq.n	8005116 <__swbuf_r+0x62>
 800510c:	89a3      	ldrh	r3, [r4, #12]
 800510e:	07db      	lsls	r3, r3, #31
 8005110:	d506      	bpl.n	8005120 <__swbuf_r+0x6c>
 8005112:	2e0a      	cmp	r6, #10
 8005114:	d104      	bne.n	8005120 <__swbuf_r+0x6c>
 8005116:	4621      	mov	r1, r4
 8005118:	4628      	mov	r0, r5
 800511a:	f000 f951 	bl	80053c0 <_fflush_r>
 800511e:	b988      	cbnz	r0, 8005144 <__swbuf_r+0x90>
 8005120:	4638      	mov	r0, r7
 8005122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005124:	4b0a      	ldr	r3, [pc, #40]	; (8005150 <__swbuf_r+0x9c>)
 8005126:	429c      	cmp	r4, r3
 8005128:	d101      	bne.n	800512e <__swbuf_r+0x7a>
 800512a:	68ac      	ldr	r4, [r5, #8]
 800512c:	e7cf      	b.n	80050ce <__swbuf_r+0x1a>
 800512e:	4b09      	ldr	r3, [pc, #36]	; (8005154 <__swbuf_r+0xa0>)
 8005130:	429c      	cmp	r4, r3
 8005132:	bf08      	it	eq
 8005134:	68ec      	ldreq	r4, [r5, #12]
 8005136:	e7ca      	b.n	80050ce <__swbuf_r+0x1a>
 8005138:	4621      	mov	r1, r4
 800513a:	4628      	mov	r0, r5
 800513c:	f000 f81e 	bl	800517c <__swsetup_r>
 8005140:	2800      	cmp	r0, #0
 8005142:	d0cb      	beq.n	80050dc <__swbuf_r+0x28>
 8005144:	f04f 37ff 	mov.w	r7, #4294967295
 8005148:	e7ea      	b.n	8005120 <__swbuf_r+0x6c>
 800514a:	bf00      	nop
 800514c:	0800580c 	.word	0x0800580c
 8005150:	0800582c 	.word	0x0800582c
 8005154:	080057ec 	.word	0x080057ec

08005158 <_write_r>:
 8005158:	b538      	push	{r3, r4, r5, lr}
 800515a:	4604      	mov	r4, r0
 800515c:	4608      	mov	r0, r1
 800515e:	4611      	mov	r1, r2
 8005160:	2200      	movs	r2, #0
 8005162:	4d05      	ldr	r5, [pc, #20]	; (8005178 <_write_r+0x20>)
 8005164:	602a      	str	r2, [r5, #0]
 8005166:	461a      	mov	r2, r3
 8005168:	f7fc fa29 	bl	80015be <_write>
 800516c:	1c43      	adds	r3, r0, #1
 800516e:	d102      	bne.n	8005176 <_write_r+0x1e>
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	b103      	cbz	r3, 8005176 <_write_r+0x1e>
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	bd38      	pop	{r3, r4, r5, pc}
 8005178:	2000029c 	.word	0x2000029c

0800517c <__swsetup_r>:
 800517c:	4b32      	ldr	r3, [pc, #200]	; (8005248 <__swsetup_r+0xcc>)
 800517e:	b570      	push	{r4, r5, r6, lr}
 8005180:	681d      	ldr	r5, [r3, #0]
 8005182:	4606      	mov	r6, r0
 8005184:	460c      	mov	r4, r1
 8005186:	b125      	cbz	r5, 8005192 <__swsetup_r+0x16>
 8005188:	69ab      	ldr	r3, [r5, #24]
 800518a:	b913      	cbnz	r3, 8005192 <__swsetup_r+0x16>
 800518c:	4628      	mov	r0, r5
 800518e:	f7ff f8e5 	bl	800435c <__sinit>
 8005192:	4b2e      	ldr	r3, [pc, #184]	; (800524c <__swsetup_r+0xd0>)
 8005194:	429c      	cmp	r4, r3
 8005196:	d10f      	bne.n	80051b8 <__swsetup_r+0x3c>
 8005198:	686c      	ldr	r4, [r5, #4]
 800519a:	89a3      	ldrh	r3, [r4, #12]
 800519c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051a0:	0719      	lsls	r1, r3, #28
 80051a2:	d42c      	bmi.n	80051fe <__swsetup_r+0x82>
 80051a4:	06dd      	lsls	r5, r3, #27
 80051a6:	d411      	bmi.n	80051cc <__swsetup_r+0x50>
 80051a8:	2309      	movs	r3, #9
 80051aa:	6033      	str	r3, [r6, #0]
 80051ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	81a3      	strh	r3, [r4, #12]
 80051b6:	e03e      	b.n	8005236 <__swsetup_r+0xba>
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <__swsetup_r+0xd4>)
 80051ba:	429c      	cmp	r4, r3
 80051bc:	d101      	bne.n	80051c2 <__swsetup_r+0x46>
 80051be:	68ac      	ldr	r4, [r5, #8]
 80051c0:	e7eb      	b.n	800519a <__swsetup_r+0x1e>
 80051c2:	4b24      	ldr	r3, [pc, #144]	; (8005254 <__swsetup_r+0xd8>)
 80051c4:	429c      	cmp	r4, r3
 80051c6:	bf08      	it	eq
 80051c8:	68ec      	ldreq	r4, [r5, #12]
 80051ca:	e7e6      	b.n	800519a <__swsetup_r+0x1e>
 80051cc:	0758      	lsls	r0, r3, #29
 80051ce:	d512      	bpl.n	80051f6 <__swsetup_r+0x7a>
 80051d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051d2:	b141      	cbz	r1, 80051e6 <__swsetup_r+0x6a>
 80051d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051d8:	4299      	cmp	r1, r3
 80051da:	d002      	beq.n	80051e2 <__swsetup_r+0x66>
 80051dc:	4630      	mov	r0, r6
 80051de:	f7ff fd17 	bl	8004c10 <_free_r>
 80051e2:	2300      	movs	r3, #0
 80051e4:	6363      	str	r3, [r4, #52]	; 0x34
 80051e6:	89a3      	ldrh	r3, [r4, #12]
 80051e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051ec:	81a3      	strh	r3, [r4, #12]
 80051ee:	2300      	movs	r3, #0
 80051f0:	6063      	str	r3, [r4, #4]
 80051f2:	6923      	ldr	r3, [r4, #16]
 80051f4:	6023      	str	r3, [r4, #0]
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	f043 0308 	orr.w	r3, r3, #8
 80051fc:	81a3      	strh	r3, [r4, #12]
 80051fe:	6923      	ldr	r3, [r4, #16]
 8005200:	b94b      	cbnz	r3, 8005216 <__swsetup_r+0x9a>
 8005202:	89a3      	ldrh	r3, [r4, #12]
 8005204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800520c:	d003      	beq.n	8005216 <__swsetup_r+0x9a>
 800520e:	4621      	mov	r1, r4
 8005210:	4630      	mov	r0, r6
 8005212:	f000 f959 	bl	80054c8 <__smakebuf_r>
 8005216:	89a0      	ldrh	r0, [r4, #12]
 8005218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800521c:	f010 0301 	ands.w	r3, r0, #1
 8005220:	d00a      	beq.n	8005238 <__swsetup_r+0xbc>
 8005222:	2300      	movs	r3, #0
 8005224:	60a3      	str	r3, [r4, #8]
 8005226:	6963      	ldr	r3, [r4, #20]
 8005228:	425b      	negs	r3, r3
 800522a:	61a3      	str	r3, [r4, #24]
 800522c:	6923      	ldr	r3, [r4, #16]
 800522e:	b943      	cbnz	r3, 8005242 <__swsetup_r+0xc6>
 8005230:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005234:	d1ba      	bne.n	80051ac <__swsetup_r+0x30>
 8005236:	bd70      	pop	{r4, r5, r6, pc}
 8005238:	0781      	lsls	r1, r0, #30
 800523a:	bf58      	it	pl
 800523c:	6963      	ldrpl	r3, [r4, #20]
 800523e:	60a3      	str	r3, [r4, #8]
 8005240:	e7f4      	b.n	800522c <__swsetup_r+0xb0>
 8005242:	2000      	movs	r0, #0
 8005244:	e7f7      	b.n	8005236 <__swsetup_r+0xba>
 8005246:	bf00      	nop
 8005248:	2000000c 	.word	0x2000000c
 800524c:	0800580c 	.word	0x0800580c
 8005250:	0800582c 	.word	0x0800582c
 8005254:	080057ec 	.word	0x080057ec

08005258 <__assert_func>:
 8005258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800525a:	4614      	mov	r4, r2
 800525c:	461a      	mov	r2, r3
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <__assert_func+0x2c>)
 8005260:	4605      	mov	r5, r0
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	68d8      	ldr	r0, [r3, #12]
 8005266:	b14c      	cbz	r4, 800527c <__assert_func+0x24>
 8005268:	4b07      	ldr	r3, [pc, #28]	; (8005288 <__assert_func+0x30>)
 800526a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800526e:	9100      	str	r1, [sp, #0]
 8005270:	462b      	mov	r3, r5
 8005272:	4906      	ldr	r1, [pc, #24]	; (800528c <__assert_func+0x34>)
 8005274:	f000 f8e0 	bl	8005438 <fiprintf>
 8005278:	f000 f9a3 	bl	80055c2 <abort>
 800527c:	4b04      	ldr	r3, [pc, #16]	; (8005290 <__assert_func+0x38>)
 800527e:	461c      	mov	r4, r3
 8005280:	e7f3      	b.n	800526a <__assert_func+0x12>
 8005282:	bf00      	nop
 8005284:	2000000c 	.word	0x2000000c
 8005288:	080059bd 	.word	0x080059bd
 800528c:	080059ca 	.word	0x080059ca
 8005290:	080059f8 	.word	0x080059f8

08005294 <_close_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	2300      	movs	r3, #0
 8005298:	4d05      	ldr	r5, [pc, #20]	; (80052b0 <_close_r+0x1c>)
 800529a:	4604      	mov	r4, r0
 800529c:	4608      	mov	r0, r1
 800529e:	602b      	str	r3, [r5, #0]
 80052a0:	f7fc f9a9 	bl	80015f6 <_close>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d102      	bne.n	80052ae <_close_r+0x1a>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	b103      	cbz	r3, 80052ae <_close_r+0x1a>
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	2000029c 	.word	0x2000029c

080052b4 <__sflush_r>:
 80052b4:	898a      	ldrh	r2, [r1, #12]
 80052b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ba:	4605      	mov	r5, r0
 80052bc:	0710      	lsls	r0, r2, #28
 80052be:	460c      	mov	r4, r1
 80052c0:	d458      	bmi.n	8005374 <__sflush_r+0xc0>
 80052c2:	684b      	ldr	r3, [r1, #4]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	dc05      	bgt.n	80052d4 <__sflush_r+0x20>
 80052c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	dc02      	bgt.n	80052d4 <__sflush_r+0x20>
 80052ce:	2000      	movs	r0, #0
 80052d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052d6:	2e00      	cmp	r6, #0
 80052d8:	d0f9      	beq.n	80052ce <__sflush_r+0x1a>
 80052da:	2300      	movs	r3, #0
 80052dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052e0:	682f      	ldr	r7, [r5, #0]
 80052e2:	602b      	str	r3, [r5, #0]
 80052e4:	d032      	beq.n	800534c <__sflush_r+0x98>
 80052e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052e8:	89a3      	ldrh	r3, [r4, #12]
 80052ea:	075a      	lsls	r2, r3, #29
 80052ec:	d505      	bpl.n	80052fa <__sflush_r+0x46>
 80052ee:	6863      	ldr	r3, [r4, #4]
 80052f0:	1ac0      	subs	r0, r0, r3
 80052f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052f4:	b10b      	cbz	r3, 80052fa <__sflush_r+0x46>
 80052f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052f8:	1ac0      	subs	r0, r0, r3
 80052fa:	2300      	movs	r3, #0
 80052fc:	4602      	mov	r2, r0
 80052fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005300:	4628      	mov	r0, r5
 8005302:	6a21      	ldr	r1, [r4, #32]
 8005304:	47b0      	blx	r6
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	d106      	bne.n	800531a <__sflush_r+0x66>
 800530c:	6829      	ldr	r1, [r5, #0]
 800530e:	291d      	cmp	r1, #29
 8005310:	d82c      	bhi.n	800536c <__sflush_r+0xb8>
 8005312:	4a2a      	ldr	r2, [pc, #168]	; (80053bc <__sflush_r+0x108>)
 8005314:	40ca      	lsrs	r2, r1
 8005316:	07d6      	lsls	r6, r2, #31
 8005318:	d528      	bpl.n	800536c <__sflush_r+0xb8>
 800531a:	2200      	movs	r2, #0
 800531c:	6062      	str	r2, [r4, #4]
 800531e:	6922      	ldr	r2, [r4, #16]
 8005320:	04d9      	lsls	r1, r3, #19
 8005322:	6022      	str	r2, [r4, #0]
 8005324:	d504      	bpl.n	8005330 <__sflush_r+0x7c>
 8005326:	1c42      	adds	r2, r0, #1
 8005328:	d101      	bne.n	800532e <__sflush_r+0x7a>
 800532a:	682b      	ldr	r3, [r5, #0]
 800532c:	b903      	cbnz	r3, 8005330 <__sflush_r+0x7c>
 800532e:	6560      	str	r0, [r4, #84]	; 0x54
 8005330:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005332:	602f      	str	r7, [r5, #0]
 8005334:	2900      	cmp	r1, #0
 8005336:	d0ca      	beq.n	80052ce <__sflush_r+0x1a>
 8005338:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800533c:	4299      	cmp	r1, r3
 800533e:	d002      	beq.n	8005346 <__sflush_r+0x92>
 8005340:	4628      	mov	r0, r5
 8005342:	f7ff fc65 	bl	8004c10 <_free_r>
 8005346:	2000      	movs	r0, #0
 8005348:	6360      	str	r0, [r4, #52]	; 0x34
 800534a:	e7c1      	b.n	80052d0 <__sflush_r+0x1c>
 800534c:	6a21      	ldr	r1, [r4, #32]
 800534e:	2301      	movs	r3, #1
 8005350:	4628      	mov	r0, r5
 8005352:	47b0      	blx	r6
 8005354:	1c41      	adds	r1, r0, #1
 8005356:	d1c7      	bne.n	80052e8 <__sflush_r+0x34>
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0c4      	beq.n	80052e8 <__sflush_r+0x34>
 800535e:	2b1d      	cmp	r3, #29
 8005360:	d001      	beq.n	8005366 <__sflush_r+0xb2>
 8005362:	2b16      	cmp	r3, #22
 8005364:	d101      	bne.n	800536a <__sflush_r+0xb6>
 8005366:	602f      	str	r7, [r5, #0]
 8005368:	e7b1      	b.n	80052ce <__sflush_r+0x1a>
 800536a:	89a3      	ldrh	r3, [r4, #12]
 800536c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005370:	81a3      	strh	r3, [r4, #12]
 8005372:	e7ad      	b.n	80052d0 <__sflush_r+0x1c>
 8005374:	690f      	ldr	r7, [r1, #16]
 8005376:	2f00      	cmp	r7, #0
 8005378:	d0a9      	beq.n	80052ce <__sflush_r+0x1a>
 800537a:	0793      	lsls	r3, r2, #30
 800537c:	bf18      	it	ne
 800537e:	2300      	movne	r3, #0
 8005380:	680e      	ldr	r6, [r1, #0]
 8005382:	bf08      	it	eq
 8005384:	694b      	ldreq	r3, [r1, #20]
 8005386:	eba6 0807 	sub.w	r8, r6, r7
 800538a:	600f      	str	r7, [r1, #0]
 800538c:	608b      	str	r3, [r1, #8]
 800538e:	f1b8 0f00 	cmp.w	r8, #0
 8005392:	dd9c      	ble.n	80052ce <__sflush_r+0x1a>
 8005394:	4643      	mov	r3, r8
 8005396:	463a      	mov	r2, r7
 8005398:	4628      	mov	r0, r5
 800539a:	6a21      	ldr	r1, [r4, #32]
 800539c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800539e:	47b0      	blx	r6
 80053a0:	2800      	cmp	r0, #0
 80053a2:	dc06      	bgt.n	80053b2 <__sflush_r+0xfe>
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	f04f 30ff 	mov.w	r0, #4294967295
 80053aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ae:	81a3      	strh	r3, [r4, #12]
 80053b0:	e78e      	b.n	80052d0 <__sflush_r+0x1c>
 80053b2:	4407      	add	r7, r0
 80053b4:	eba8 0800 	sub.w	r8, r8, r0
 80053b8:	e7e9      	b.n	800538e <__sflush_r+0xda>
 80053ba:	bf00      	nop
 80053bc:	20400001 	.word	0x20400001

080053c0 <_fflush_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	690b      	ldr	r3, [r1, #16]
 80053c4:	4605      	mov	r5, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	b913      	cbnz	r3, 80053d0 <_fflush_r+0x10>
 80053ca:	2500      	movs	r5, #0
 80053cc:	4628      	mov	r0, r5
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	b118      	cbz	r0, 80053da <_fflush_r+0x1a>
 80053d2:	6983      	ldr	r3, [r0, #24]
 80053d4:	b90b      	cbnz	r3, 80053da <_fflush_r+0x1a>
 80053d6:	f7fe ffc1 	bl	800435c <__sinit>
 80053da:	4b14      	ldr	r3, [pc, #80]	; (800542c <_fflush_r+0x6c>)
 80053dc:	429c      	cmp	r4, r3
 80053de:	d11b      	bne.n	8005418 <_fflush_r+0x58>
 80053e0:	686c      	ldr	r4, [r5, #4]
 80053e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d0ef      	beq.n	80053ca <_fflush_r+0xa>
 80053ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053ec:	07d0      	lsls	r0, r2, #31
 80053ee:	d404      	bmi.n	80053fa <_fflush_r+0x3a>
 80053f0:	0599      	lsls	r1, r3, #22
 80053f2:	d402      	bmi.n	80053fa <_fflush_r+0x3a>
 80053f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053f6:	f7ff f854 	bl	80044a2 <__retarget_lock_acquire_recursive>
 80053fa:	4628      	mov	r0, r5
 80053fc:	4621      	mov	r1, r4
 80053fe:	f7ff ff59 	bl	80052b4 <__sflush_r>
 8005402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005404:	4605      	mov	r5, r0
 8005406:	07da      	lsls	r2, r3, #31
 8005408:	d4e0      	bmi.n	80053cc <_fflush_r+0xc>
 800540a:	89a3      	ldrh	r3, [r4, #12]
 800540c:	059b      	lsls	r3, r3, #22
 800540e:	d4dd      	bmi.n	80053cc <_fflush_r+0xc>
 8005410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005412:	f7ff f847 	bl	80044a4 <__retarget_lock_release_recursive>
 8005416:	e7d9      	b.n	80053cc <_fflush_r+0xc>
 8005418:	4b05      	ldr	r3, [pc, #20]	; (8005430 <_fflush_r+0x70>)
 800541a:	429c      	cmp	r4, r3
 800541c:	d101      	bne.n	8005422 <_fflush_r+0x62>
 800541e:	68ac      	ldr	r4, [r5, #8]
 8005420:	e7df      	b.n	80053e2 <_fflush_r+0x22>
 8005422:	4b04      	ldr	r3, [pc, #16]	; (8005434 <_fflush_r+0x74>)
 8005424:	429c      	cmp	r4, r3
 8005426:	bf08      	it	eq
 8005428:	68ec      	ldreq	r4, [r5, #12]
 800542a:	e7da      	b.n	80053e2 <_fflush_r+0x22>
 800542c:	0800580c 	.word	0x0800580c
 8005430:	0800582c 	.word	0x0800582c
 8005434:	080057ec 	.word	0x080057ec

08005438 <fiprintf>:
 8005438:	b40e      	push	{r1, r2, r3}
 800543a:	b503      	push	{r0, r1, lr}
 800543c:	4601      	mov	r1, r0
 800543e:	ab03      	add	r3, sp, #12
 8005440:	4805      	ldr	r0, [pc, #20]	; (8005458 <fiprintf+0x20>)
 8005442:	f853 2b04 	ldr.w	r2, [r3], #4
 8005446:	6800      	ldr	r0, [r0, #0]
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	f7ff fcaf 	bl	8004dac <_vfiprintf_r>
 800544e:	b002      	add	sp, #8
 8005450:	f85d eb04 	ldr.w	lr, [sp], #4
 8005454:	b003      	add	sp, #12
 8005456:	4770      	bx	lr
 8005458:	2000000c 	.word	0x2000000c

0800545c <_lseek_r>:
 800545c:	b538      	push	{r3, r4, r5, lr}
 800545e:	4604      	mov	r4, r0
 8005460:	4608      	mov	r0, r1
 8005462:	4611      	mov	r1, r2
 8005464:	2200      	movs	r2, #0
 8005466:	4d05      	ldr	r5, [pc, #20]	; (800547c <_lseek_r+0x20>)
 8005468:	602a      	str	r2, [r5, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	f7fc f8e7 	bl	800163e <_lseek>
 8005470:	1c43      	adds	r3, r0, #1
 8005472:	d102      	bne.n	800547a <_lseek_r+0x1e>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	b103      	cbz	r3, 800547a <_lseek_r+0x1e>
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	bd38      	pop	{r3, r4, r5, pc}
 800547c:	2000029c 	.word	0x2000029c

08005480 <__swhatbuf_r>:
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	460e      	mov	r6, r1
 8005484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005488:	4614      	mov	r4, r2
 800548a:	2900      	cmp	r1, #0
 800548c:	461d      	mov	r5, r3
 800548e:	b096      	sub	sp, #88	; 0x58
 8005490:	da07      	bge.n	80054a2 <__swhatbuf_r+0x22>
 8005492:	2300      	movs	r3, #0
 8005494:	602b      	str	r3, [r5, #0]
 8005496:	89b3      	ldrh	r3, [r6, #12]
 8005498:	061a      	lsls	r2, r3, #24
 800549a:	d410      	bmi.n	80054be <__swhatbuf_r+0x3e>
 800549c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a0:	e00e      	b.n	80054c0 <__swhatbuf_r+0x40>
 80054a2:	466a      	mov	r2, sp
 80054a4:	f000 f894 	bl	80055d0 <_fstat_r>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	dbf2      	blt.n	8005492 <__swhatbuf_r+0x12>
 80054ac:	9a01      	ldr	r2, [sp, #4]
 80054ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80054b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80054b6:	425a      	negs	r2, r3
 80054b8:	415a      	adcs	r2, r3
 80054ba:	602a      	str	r2, [r5, #0]
 80054bc:	e7ee      	b.n	800549c <__swhatbuf_r+0x1c>
 80054be:	2340      	movs	r3, #64	; 0x40
 80054c0:	2000      	movs	r0, #0
 80054c2:	6023      	str	r3, [r4, #0]
 80054c4:	b016      	add	sp, #88	; 0x58
 80054c6:	bd70      	pop	{r4, r5, r6, pc}

080054c8 <__smakebuf_r>:
 80054c8:	898b      	ldrh	r3, [r1, #12]
 80054ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054cc:	079d      	lsls	r5, r3, #30
 80054ce:	4606      	mov	r6, r0
 80054d0:	460c      	mov	r4, r1
 80054d2:	d507      	bpl.n	80054e4 <__smakebuf_r+0x1c>
 80054d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	6123      	str	r3, [r4, #16]
 80054dc:	2301      	movs	r3, #1
 80054de:	6163      	str	r3, [r4, #20]
 80054e0:	b002      	add	sp, #8
 80054e2:	bd70      	pop	{r4, r5, r6, pc}
 80054e4:	466a      	mov	r2, sp
 80054e6:	ab01      	add	r3, sp, #4
 80054e8:	f7ff ffca 	bl	8005480 <__swhatbuf_r>
 80054ec:	9900      	ldr	r1, [sp, #0]
 80054ee:	4605      	mov	r5, r0
 80054f0:	4630      	mov	r0, r6
 80054f2:	f7ff fbd9 	bl	8004ca8 <_malloc_r>
 80054f6:	b948      	cbnz	r0, 800550c <__smakebuf_r+0x44>
 80054f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054fc:	059a      	lsls	r2, r3, #22
 80054fe:	d4ef      	bmi.n	80054e0 <__smakebuf_r+0x18>
 8005500:	f023 0303 	bic.w	r3, r3, #3
 8005504:	f043 0302 	orr.w	r3, r3, #2
 8005508:	81a3      	strh	r3, [r4, #12]
 800550a:	e7e3      	b.n	80054d4 <__smakebuf_r+0xc>
 800550c:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <__smakebuf_r+0x7c>)
 800550e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005510:	89a3      	ldrh	r3, [r4, #12]
 8005512:	6020      	str	r0, [r4, #0]
 8005514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005518:	81a3      	strh	r3, [r4, #12]
 800551a:	9b00      	ldr	r3, [sp, #0]
 800551c:	6120      	str	r0, [r4, #16]
 800551e:	6163      	str	r3, [r4, #20]
 8005520:	9b01      	ldr	r3, [sp, #4]
 8005522:	b15b      	cbz	r3, 800553c <__smakebuf_r+0x74>
 8005524:	4630      	mov	r0, r6
 8005526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800552a:	f000 f863 	bl	80055f4 <_isatty_r>
 800552e:	b128      	cbz	r0, 800553c <__smakebuf_r+0x74>
 8005530:	89a3      	ldrh	r3, [r4, #12]
 8005532:	f023 0303 	bic.w	r3, r3, #3
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	81a3      	strh	r3, [r4, #12]
 800553c:	89a0      	ldrh	r0, [r4, #12]
 800553e:	4305      	orrs	r5, r0
 8005540:	81a5      	strh	r5, [r4, #12]
 8005542:	e7cd      	b.n	80054e0 <__smakebuf_r+0x18>
 8005544:	080042f5 	.word	0x080042f5

08005548 <__ascii_mbtowc>:
 8005548:	b082      	sub	sp, #8
 800554a:	b901      	cbnz	r1, 800554e <__ascii_mbtowc+0x6>
 800554c:	a901      	add	r1, sp, #4
 800554e:	b142      	cbz	r2, 8005562 <__ascii_mbtowc+0x1a>
 8005550:	b14b      	cbz	r3, 8005566 <__ascii_mbtowc+0x1e>
 8005552:	7813      	ldrb	r3, [r2, #0]
 8005554:	600b      	str	r3, [r1, #0]
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	1e10      	subs	r0, r2, #0
 800555a:	bf18      	it	ne
 800555c:	2001      	movne	r0, #1
 800555e:	b002      	add	sp, #8
 8005560:	4770      	bx	lr
 8005562:	4610      	mov	r0, r2
 8005564:	e7fb      	b.n	800555e <__ascii_mbtowc+0x16>
 8005566:	f06f 0001 	mvn.w	r0, #1
 800556a:	e7f8      	b.n	800555e <__ascii_mbtowc+0x16>

0800556c <__malloc_lock>:
 800556c:	4801      	ldr	r0, [pc, #4]	; (8005574 <__malloc_lock+0x8>)
 800556e:	f7fe bf98 	b.w	80044a2 <__retarget_lock_acquire_recursive>
 8005572:	bf00      	nop
 8005574:	20000294 	.word	0x20000294

08005578 <__malloc_unlock>:
 8005578:	4801      	ldr	r0, [pc, #4]	; (8005580 <__malloc_unlock+0x8>)
 800557a:	f7fe bf93 	b.w	80044a4 <__retarget_lock_release_recursive>
 800557e:	bf00      	nop
 8005580:	20000294 	.word	0x20000294

08005584 <_read_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	4604      	mov	r4, r0
 8005588:	4608      	mov	r0, r1
 800558a:	4611      	mov	r1, r2
 800558c:	2200      	movs	r2, #0
 800558e:	4d05      	ldr	r5, [pc, #20]	; (80055a4 <_read_r+0x20>)
 8005590:	602a      	str	r2, [r5, #0]
 8005592:	461a      	mov	r2, r3
 8005594:	f7fb fff6 	bl	8001584 <_read>
 8005598:	1c43      	adds	r3, r0, #1
 800559a:	d102      	bne.n	80055a2 <_read_r+0x1e>
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	b103      	cbz	r3, 80055a2 <_read_r+0x1e>
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	bd38      	pop	{r3, r4, r5, pc}
 80055a4:	2000029c 	.word	0x2000029c

080055a8 <__ascii_wctomb>:
 80055a8:	4603      	mov	r3, r0
 80055aa:	4608      	mov	r0, r1
 80055ac:	b141      	cbz	r1, 80055c0 <__ascii_wctomb+0x18>
 80055ae:	2aff      	cmp	r2, #255	; 0xff
 80055b0:	d904      	bls.n	80055bc <__ascii_wctomb+0x14>
 80055b2:	228a      	movs	r2, #138	; 0x8a
 80055b4:	f04f 30ff 	mov.w	r0, #4294967295
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	4770      	bx	lr
 80055bc:	2001      	movs	r0, #1
 80055be:	700a      	strb	r2, [r1, #0]
 80055c0:	4770      	bx	lr

080055c2 <abort>:
 80055c2:	2006      	movs	r0, #6
 80055c4:	b508      	push	{r3, lr}
 80055c6:	f000 f84d 	bl	8005664 <raise>
 80055ca:	2001      	movs	r0, #1
 80055cc:	f7fb ffd0 	bl	8001570 <_exit>

080055d0 <_fstat_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	2300      	movs	r3, #0
 80055d4:	4d06      	ldr	r5, [pc, #24]	; (80055f0 <_fstat_r+0x20>)
 80055d6:	4604      	mov	r4, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	4611      	mov	r1, r2
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	f7fc f815 	bl	800160c <_fstat>
 80055e2:	1c43      	adds	r3, r0, #1
 80055e4:	d102      	bne.n	80055ec <_fstat_r+0x1c>
 80055e6:	682b      	ldr	r3, [r5, #0]
 80055e8:	b103      	cbz	r3, 80055ec <_fstat_r+0x1c>
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	bd38      	pop	{r3, r4, r5, pc}
 80055ee:	bf00      	nop
 80055f0:	2000029c 	.word	0x2000029c

080055f4 <_isatty_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	2300      	movs	r3, #0
 80055f8:	4d05      	ldr	r5, [pc, #20]	; (8005610 <_isatty_r+0x1c>)
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	602b      	str	r3, [r5, #0]
 8005600:	f7fc f813 	bl	800162a <_isatty>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_isatty_r+0x1a>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_isatty_r+0x1a>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	2000029c 	.word	0x2000029c

08005614 <_raise_r>:
 8005614:	291f      	cmp	r1, #31
 8005616:	b538      	push	{r3, r4, r5, lr}
 8005618:	4604      	mov	r4, r0
 800561a:	460d      	mov	r5, r1
 800561c:	d904      	bls.n	8005628 <_raise_r+0x14>
 800561e:	2316      	movs	r3, #22
 8005620:	6003      	str	r3, [r0, #0]
 8005622:	f04f 30ff 	mov.w	r0, #4294967295
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800562a:	b112      	cbz	r2, 8005632 <_raise_r+0x1e>
 800562c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005630:	b94b      	cbnz	r3, 8005646 <_raise_r+0x32>
 8005632:	4620      	mov	r0, r4
 8005634:	f000 f830 	bl	8005698 <_getpid_r>
 8005638:	462a      	mov	r2, r5
 800563a:	4601      	mov	r1, r0
 800563c:	4620      	mov	r0, r4
 800563e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005642:	f000 b817 	b.w	8005674 <_kill_r>
 8005646:	2b01      	cmp	r3, #1
 8005648:	d00a      	beq.n	8005660 <_raise_r+0x4c>
 800564a:	1c59      	adds	r1, r3, #1
 800564c:	d103      	bne.n	8005656 <_raise_r+0x42>
 800564e:	2316      	movs	r3, #22
 8005650:	6003      	str	r3, [r0, #0]
 8005652:	2001      	movs	r0, #1
 8005654:	e7e7      	b.n	8005626 <_raise_r+0x12>
 8005656:	2400      	movs	r4, #0
 8005658:	4628      	mov	r0, r5
 800565a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800565e:	4798      	blx	r3
 8005660:	2000      	movs	r0, #0
 8005662:	e7e0      	b.n	8005626 <_raise_r+0x12>

08005664 <raise>:
 8005664:	4b02      	ldr	r3, [pc, #8]	; (8005670 <raise+0xc>)
 8005666:	4601      	mov	r1, r0
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	f7ff bfd3 	b.w	8005614 <_raise_r>
 800566e:	bf00      	nop
 8005670:	2000000c 	.word	0x2000000c

08005674 <_kill_r>:
 8005674:	b538      	push	{r3, r4, r5, lr}
 8005676:	2300      	movs	r3, #0
 8005678:	4d06      	ldr	r5, [pc, #24]	; (8005694 <_kill_r+0x20>)
 800567a:	4604      	mov	r4, r0
 800567c:	4608      	mov	r0, r1
 800567e:	4611      	mov	r1, r2
 8005680:	602b      	str	r3, [r5, #0]
 8005682:	f7fb ff65 	bl	8001550 <_kill>
 8005686:	1c43      	adds	r3, r0, #1
 8005688:	d102      	bne.n	8005690 <_kill_r+0x1c>
 800568a:	682b      	ldr	r3, [r5, #0]
 800568c:	b103      	cbz	r3, 8005690 <_kill_r+0x1c>
 800568e:	6023      	str	r3, [r4, #0]
 8005690:	bd38      	pop	{r3, r4, r5, pc}
 8005692:	bf00      	nop
 8005694:	2000029c 	.word	0x2000029c

08005698 <_getpid_r>:
 8005698:	f7fb bf53 	b.w	8001542 <_getpid>

0800569c <_init>:
 800569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569e:	bf00      	nop
 80056a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a2:	bc08      	pop	{r3}
 80056a4:	469e      	mov	lr, r3
 80056a6:	4770      	bx	lr

080056a8 <_fini>:
 80056a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056aa:	bf00      	nop
 80056ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ae:	bc08      	pop	{r3}
 80056b0:	469e      	mov	lr, r3
 80056b2:	4770      	bx	lr
