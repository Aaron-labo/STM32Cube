
14.LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000917c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c0c  08009368  08009368  00019368  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af74  0800af74  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800af74  0800af74  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af74  0800af74  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af74  0800af74  0001af74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af78  0800af78  0001af78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800af7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  200001e0  0800b15c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  0800b15c  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009379  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5c  00000000  00000000  00029582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0002b2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  0002ba48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a362  00000000  00000000  0002c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000095cc  00000000  00000000  0004641a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000928cc  00000000  00000000  0004f9e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e22b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c5c  00000000  00000000  000e2308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800934c 	.word	0x0800934c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	0800934c 	.word	0x0800934c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
 8000bb6:	615a      	str	r2, [r3, #20]
 8000bb8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
 8000bc8:	615a      	str	r2, [r3, #20]
 8000bca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000bce:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000bd2:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000bd4:	4b2e      	ldr	r3, [pc, #184]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000bd6:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <MX_FSMC_Init+0xf4>)
 8000bd8:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000bdc:	2206      	movs	r2, #6
 8000bde:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000be0:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000bee:	2210      	movs	r2, #16
 8000bf0:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000bf2:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  hsram4.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000c04:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000c30:	230f      	movs	r3, #15
 8000c32:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 8000c34:	230f      	movs	r3, #15
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000c38:	230f      	movs	r3, #15
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000c40:	2311      	movs	r3, #17
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000c44:	2300      	movs	r3, #0
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 8000c50:	2303      	movs	r3, #3
 8000c52:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8000c54:	230f      	movs	r3, #15
 8000c56:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000c5c:	2311      	movs	r3, #17
 8000c5e:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 8000c64:	463a      	mov	r2, r7
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4808      	ldr	r0, [pc, #32]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c6e:	f005 fd2b 	bl	80066c8 <HAL_SRAM_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 8000c78:	f004 fcdd 	bl	8005636 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_FSMC_Init+0xf8>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <MX_FSMC_Init+0xf8>)
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c86:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000c88:	bf00      	nop
 8000c8a:	3738      	adds	r7, #56	; 0x38
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000210 	.word	0x20000210
 8000c94:	a0000104 	.word	0xa0000104
 8000c98:	40010000 	.word	0x40010000

08000c9c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <HAL_FSMC_MspInit+0x94>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d136      	bne.n	8000d26 <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <HAL_FSMC_MspInit+0x94>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_FSMC_MspInit+0x98>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <HAL_FSMC_MspInit+0x98>)
 8000cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc8:	6153      	str	r3, [r2, #20]
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <HAL_FSMC_MspInit+0x98>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8000cd6:	f241 0301 	movw	r3, #4097	; 0x1001
 8000cda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4813      	ldr	r0, [pc, #76]	; (8000d38 <HAL_FSMC_MspInit+0x9c>)
 8000cec:	f004 ff58 	bl	8005ba0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000cf0:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000cf4:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	4619      	mov	r1, r3
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <HAL_FSMC_MspInit+0xa0>)
 8000d06:	f004 ff4b 	bl	8005ba0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000d0a:	f24c 7333 	movw	r3, #50995	; 0xc733
 8000d0e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4808      	ldr	r0, [pc, #32]	; (8000d40 <HAL_FSMC_MspInit+0xa4>)
 8000d20:	f004 ff3e 	bl	8005ba0 <HAL_GPIO_Init>
 8000d24:	e000      	b.n	8000d28 <HAL_FSMC_MspInit+0x8c>
    return;
 8000d26:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200001fc 	.word	0x200001fc
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40012000 	.word	0x40012000
 8000d3c:	40011800 	.word	0x40011800
 8000d40:	40011400 	.word	0x40011400

08000d44 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000d4c:	f7ff ffa6 	bl	8000c9c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 0318 	add.w	r3, r7, #24
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a28      	ldr	r2, [pc, #160]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a22      	ldr	r2, [pc, #136]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000dba:	f043 0320 	orr.w	r3, r3, #32
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0320 	and.w	r3, r3, #32
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2101      	movs	r1, #1
 8000de8:	480b      	ldr	r0, [pc, #44]	; (8000e18 <MX_GPIO_Init+0xc0>)
 8000dea:	f005 f86d 	bl	8005ec8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_GPIO_Init+0xc0>)
 8000e06:	f004 fecb 	bl	8005ba0 <HAL_GPIO_Init>

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010c00 	.word	0x40010c00

08000e1c <delay_us>:

/**
 * @brief 微秒级延时，参考F103的库实现
 * @retval None
 */
void delay_us(uint32_t duration) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  //见stm32f1xx_hal_rcc.c -- static void RCC_Delay(uint32_t mdelay)
  __IO uint32_t Delay = duration * (SystemCoreClock / 8U / 1000000U);
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <delay_us+0x34>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <delay_us+0x38>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	0d5b      	lsrs	r3, r3, #21
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	fb02 f303 	mul.w	r3, r2, r3
 8000e36:	60fb      	str	r3, [r7, #12]
  do {
	__NOP();
 8000e38:	bf00      	nop
  } while (Delay--);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1e5a      	subs	r2, r3, #1
 8000e3e:	60fa      	str	r2, [r7, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f9      	bne.n	8000e38 <delay_us+0x1c>
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000004 	.word	0x20000004
 8000e54:	431bde83 	.word	0x431bde83

08000e58 <LCD_WR_REG>:

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(uint16_t regval)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=regval;//写入要写的寄存器序号
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <LCD_WR_REG+0x1c>)
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	8013      	strh	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	6c0007fe 	.word	0x6c0007fe

08000e78 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(uint16_t data)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <LCD_WR_DATA+0x1c>)
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	8053      	strh	r3, [r2, #2]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	6c0007fe 	.word	0x6c0007fe

08000e98 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
	uint16_t ram;			//防止被优化
	ram=LCD->LCD_RAM;
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <LCD_RD_DATA+0x18>)
 8000ea0:	885b      	ldrh	r3, [r3, #2]
 8000ea2:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	6c0007fe 	.word	0x6c0007fe

08000eb4 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	80fb      	strh	r3, [r7, #6]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <LCD_WriteReg+0x28>)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//写入数据
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <LCD_WriteReg+0x28>)
 8000ecc:	88bb      	ldrh	r3, [r7, #4]
 8000ece:	8053      	strh	r3, [r2, #2]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	6c0007fe 	.word	0x6c0007fe

08000ee0 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器地址
//返回值:读到的数据
uint16_t LCD_ReadReg(uint16_t LCD_Reg)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);		//写入要读的寄存器序号
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ffb3 	bl	8000e58 <LCD_WR_REG>
	delay_us(5);
 8000ef2:	2005      	movs	r0, #5
 8000ef4:	f7ff ff92 	bl	8000e1c <delay_us>
	return LCD_RD_DATA();		//返回读到的值
 8000ef8:	f7ff ffce 	bl	8000e98 <LCD_RD_DATA>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
 	LCD->LCD_REG=lcddev.wramcmd;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <LCD_WriteRAM_Prepare+0x14>)
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <LCD_WriteRAM_Prepare+0x18>)
 8000f10:	8912      	ldrh	r2, [r2, #8]
 8000f12:	801a      	strh	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	6c0007fe 	.word	0x6c0007fe
 8000f20:	20000258 	.word	0x20000258

08000f24 <LCD_SetCursor>:
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460a      	mov	r2, r1
 8000f2e:	80fb      	strh	r3, [r7, #6]
 8000f30:	4613      	mov	r3, r2
 8000f32:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8000f34:	4b92      	ldr	r3, [pc, #584]	; (8001180 <LCD_SetCursor+0x25c>)
 8000f36:	889b      	ldrh	r3, [r3, #4]
 8000f38:	f249 3241 	movw	r2, #37697	; 0x9341
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d005      	beq.n	8000f4c <LCD_SetCursor+0x28>
 8000f40:	4b8f      	ldr	r3, [pc, #572]	; (8001180 <LCD_SetCursor+0x25c>)
 8000f42:	889b      	ldrh	r3, [r3, #4]
 8000f44:	f245 3210 	movw	r2, #21264	; 0x5310
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d122      	bne.n	8000f92 <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8000f4c:	4b8c      	ldr	r3, [pc, #560]	; (8001180 <LCD_SetCursor+0x25c>)
 8000f4e:	895b      	ldrh	r3, [r3, #10]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff81 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff8b 	bl	8000e78 <LCD_WR_DATA>
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff85 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8000f6e:	4b84      	ldr	r3, [pc, #528]	; (8001180 <LCD_SetCursor+0x25c>)
 8000f70:	899b      	ldrh	r3, [r3, #12]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff70 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff7a 	bl	8000e78 <LCD_WR_DATA>
 8000f84:	88bb      	ldrh	r3, [r7, #4]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff74 	bl	8000e78 <LCD_WR_DATA>
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000f90:	e0f1      	b.n	8001176 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X6804)
 8000f92:	4b7b      	ldr	r3, [pc, #492]	; (8001180 <LCD_SetCursor+0x25c>)
 8000f94:	889b      	ldrh	r3, [r3, #4]
 8000f96:	f646 0204 	movw	r2, #26628	; 0x6804
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d12d      	bne.n	8000ffa <LCD_SetCursor+0xd6>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏时处理
 8000f9e:	4b78      	ldr	r3, [pc, #480]	; (8001180 <LCD_SetCursor+0x25c>)
 8000fa0:	799b      	ldrb	r3, [r3, #6]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d106      	bne.n	8000fb4 <LCD_SetCursor+0x90>
 8000fa6:	4b76      	ldr	r3, [pc, #472]	; (8001180 <LCD_SetCursor+0x25c>)
 8000fa8:	881a      	ldrh	r2, [r3, #0]
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000fb4:	4b72      	ldr	r3, [pc, #456]	; (8001180 <LCD_SetCursor+0x25c>)
 8000fb6:	895b      	ldrh	r3, [r3, #10]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff4d 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff57 	bl	8000e78 <LCD_WR_DATA>
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff51 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8000fd6:	4b6a      	ldr	r3, [pc, #424]	; (8001180 <LCD_SetCursor+0x25c>)
 8000fd8:	899b      	ldrh	r3, [r3, #12]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff3c 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	0a1b      	lsrs	r3, r3, #8
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff46 	bl	8000e78 <LCD_WR_DATA>
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ff40 	bl	8000e78 <LCD_WR_DATA>
}
 8000ff8:	e0bd      	b.n	8001176 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X1963)
 8000ffa:	4b61      	ldr	r3, [pc, #388]	; (8001180 <LCD_SetCursor+0x25c>)
 8000ffc:	889b      	ldrh	r3, [r3, #4]
 8000ffe:	f641 1263 	movw	r2, #6499	; 0x1963
 8001002:	4293      	cmp	r3, r2
 8001004:	d167      	bne.n	80010d6 <LCD_SetCursor+0x1b2>
		if(lcddev.dir==0)//x坐标需要变换
 8001006:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <LCD_SetCursor+0x25c>)
 8001008:	799b      	ldrb	r3, [r3, #6]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d11e      	bne.n	800104c <LCD_SetCursor+0x128>
			Xpos=lcddev.width-1-Xpos;
 800100e:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <LCD_SetCursor+0x25c>)
 8001010:	881a      	ldrh	r2, [r3, #0]
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	b29b      	uxth	r3, r3
 8001018:	3b01      	subs	r3, #1
 800101a:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 800101c:	4b58      	ldr	r3, [pc, #352]	; (8001180 <LCD_SetCursor+0x25c>)
 800101e:	895b      	ldrh	r3, [r3, #10]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff19 	bl	8000e58 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff ff26 	bl	8000e78 <LCD_WR_DATA>
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff ff23 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	b29b      	uxth	r3, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff1d 	bl	8000e78 <LCD_WR_DATA>
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	b29b      	uxth	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff17 	bl	8000e78 <LCD_WR_DATA>
 800104a:	e021      	b.n	8001090 <LCD_SetCursor+0x16c>
			LCD_WR_REG(lcddev.setxcmd);
 800104c:	4b4c      	ldr	r3, [pc, #304]	; (8001180 <LCD_SetCursor+0x25c>)
 800104e:	895b      	ldrh	r3, [r3, #10]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff01 	bl	8000e58 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	b29b      	uxth	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff0b 	bl	8000e78 <LCD_WR_DATA>
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	b29b      	uxth	r3, r3
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff05 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 800106e:	4b44      	ldr	r3, [pc, #272]	; (8001180 <LCD_SetCursor+0x25c>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	121b      	asrs	r3, r3, #8
 8001076:	b29b      	uxth	r3, r3
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fefd 	bl	8000e78 <LCD_WR_DATA>
 800107e:	4b40      	ldr	r3, [pc, #256]	; (8001180 <LCD_SetCursor+0x25c>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	3b01      	subs	r3, #1
 8001084:	b29b      	uxth	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	b29b      	uxth	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fef4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001090:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <LCD_SetCursor+0x25c>)
 8001092:	899b      	ldrh	r3, [r3, #12]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fedf 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 800109a:	88bb      	ldrh	r3, [r7, #4]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fee9 	bl	8000e78 <LCD_WR_DATA>
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fee3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80010b2:	4b33      	ldr	r3, [pc, #204]	; (8001180 <LCD_SetCursor+0x25c>)
 80010b4:	885b      	ldrh	r3, [r3, #2]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	121b      	asrs	r3, r3, #8
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fedb 	bl	8000e78 <LCD_WR_DATA>
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <LCD_SetCursor+0x25c>)
 80010c4:	885b      	ldrh	r3, [r3, #2]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fed2 	bl	8000e78 <LCD_WR_DATA>
}
 80010d4:	e04f      	b.n	8001176 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X5510)
 80010d6:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <LCD_SetCursor+0x25c>)
 80010d8:	889b      	ldrh	r3, [r3, #4]
 80010da:	f245 5210 	movw	r2, #21776	; 0x5510
 80010de:	4293      	cmp	r3, r2
 80010e0:	d130      	bne.n	8001144 <LCD_SetCursor+0x220>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 80010e2:	4b27      	ldr	r3, [pc, #156]	; (8001180 <LCD_SetCursor+0x25c>)
 80010e4:	895b      	ldrh	r3, [r3, #10]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff feb6 	bl	8000e58 <LCD_WR_REG>
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fec0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <LCD_SetCursor+0x25c>)
 80010fa:	895b      	ldrh	r3, [r3, #10]
 80010fc:	3301      	adds	r3, #1
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fea9 	bl	8000e58 <LCD_WR_REG>
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	b29b      	uxth	r3, r3
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff feb3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <LCD_SetCursor+0x25c>)
 8001114:	899b      	ldrh	r3, [r3, #12]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fe9e 	bl	8000e58 <LCD_WR_REG>
 800111c:	88bb      	ldrh	r3, [r7, #4]
 800111e:	0a1b      	lsrs	r3, r3, #8
 8001120:	b29b      	uxth	r3, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fea8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <LCD_SetCursor+0x25c>)
 800112a:	899b      	ldrh	r3, [r3, #12]
 800112c:	3301      	adds	r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fe91 	bl	8000e58 <LCD_WR_REG>
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	b29b      	uxth	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fe9b 	bl	8000e78 <LCD_WR_DATA>
}
 8001142:	e018      	b.n	8001176 <LCD_SetCursor+0x252>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <LCD_SetCursor+0x25c>)
 8001146:	799b      	ldrb	r3, [r3, #6]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d106      	bne.n	800115a <LCD_SetCursor+0x236>
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <LCD_SetCursor+0x25c>)
 800114e:	881a      	ldrh	r2, [r3, #0]
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	b29b      	uxth	r3, r3
 8001156:	3b01      	subs	r3, #1
 8001158:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <LCD_SetCursor+0x25c>)
 800115c:	895b      	ldrh	r3, [r3, #10]
 800115e:	88fa      	ldrh	r2, [r7, #6]
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fea6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <LCD_SetCursor+0x25c>)
 800116a:	899b      	ldrh	r3, [r3, #12]
 800116c:	88ba      	ldrh	r2, [r7, #4]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fe9f 	bl	8000eb4 <LCD_WriteReg>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000258 	.word	0x20000258

08001184 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 800118e:	2300      	movs	r3, #0
 8001190:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 8001192:	2300      	movs	r3, #0
 8001194:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X6804&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8001196:	4b78      	ldr	r3, [pc, #480]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001198:	799b      	ldrb	r3, [r3, #6]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d10b      	bne.n	80011b6 <LCD_Scan_Dir+0x32>
 800119e:	4b76      	ldr	r3, [pc, #472]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 80011a0:	889b      	ldrh	r3, [r3, #4]
 80011a2:	f646 0204 	movw	r2, #26628	; 0x6804
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d005      	beq.n	80011b6 <LCD_Scan_Dir+0x32>
 80011aa:	4b73      	ldr	r3, [pc, #460]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 80011ac:	889b      	ldrh	r3, [r3, #4]
 80011ae:	f641 1263 	movw	r2, #6499	; 0x1963
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d109      	bne.n	80011ca <LCD_Scan_Dir+0x46>
 80011b6:	4b70      	ldr	r3, [pc, #448]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 80011b8:	799b      	ldrb	r3, [r3, #6]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d134      	bne.n	8001228 <LCD_Scan_Dir+0xa4>
 80011be:	4b6e      	ldr	r3, [pc, #440]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 80011c0:	889b      	ldrh	r3, [r3, #4]
 80011c2:	f641 1263 	movw	r2, #6499	; 0x1963
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d12e      	bne.n	8001228 <LCD_Scan_Dir+0xa4>
	{
		switch(dir)//方向转换
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b07      	cmp	r3, #7
 80011ce:	d82c      	bhi.n	800122a <LCD_Scan_Dir+0xa6>
 80011d0:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <LCD_Scan_Dir+0x54>)
 80011d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d6:	bf00      	nop
 80011d8:	080011f9 	.word	0x080011f9
 80011dc:	080011ff 	.word	0x080011ff
 80011e0:	08001205 	.word	0x08001205
 80011e4:	0800120b 	.word	0x0800120b
 80011e8:	08001211 	.word	0x08001211
 80011ec:	08001217 	.word	0x08001217
 80011f0:	0800121d 	.word	0x0800121d
 80011f4:	08001223 	.word	0x08001223
		{
			case 0:dir=6;break;
 80011f8:	2306      	movs	r3, #6
 80011fa:	71fb      	strb	r3, [r7, #7]
 80011fc:	e015      	b.n	800122a <LCD_Scan_Dir+0xa6>
			case 1:dir=7;break;
 80011fe:	2307      	movs	r3, #7
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	e012      	b.n	800122a <LCD_Scan_Dir+0xa6>
			case 2:dir=4;break;
 8001204:	2304      	movs	r3, #4
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	e00f      	b.n	800122a <LCD_Scan_Dir+0xa6>
			case 3:dir=5;break;
 800120a:	2305      	movs	r3, #5
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	e00c      	b.n	800122a <LCD_Scan_Dir+0xa6>
			case 4:dir=1;break;
 8001210:	2301      	movs	r3, #1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	e009      	b.n	800122a <LCD_Scan_Dir+0xa6>
			case 5:dir=0;break;
 8001216:	2300      	movs	r3, #0
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	e006      	b.n	800122a <LCD_Scan_Dir+0xa6>
			case 6:dir=3;break;
 800121c:	2303      	movs	r3, #3
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	e003      	b.n	800122a <LCD_Scan_Dir+0xa6>
			case 7:dir=2;break;
 8001222:	2302      	movs	r3, #2
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	e000      	b.n	800122a <LCD_Scan_Dir+0xa6>
		}
	}
 8001228:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/6804/5310/5510/1963,特殊处理
 800122a:	4b53      	ldr	r3, [pc, #332]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001232:	4293      	cmp	r3, r2
 8001234:	d018      	beq.n	8001268 <LCD_Scan_Dir+0xe4>
 8001236:	4b50      	ldr	r3, [pc, #320]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001238:	889b      	ldrh	r3, [r3, #4]
 800123a:	f646 0204 	movw	r2, #26628	; 0x6804
 800123e:	4293      	cmp	r3, r2
 8001240:	d012      	beq.n	8001268 <LCD_Scan_Dir+0xe4>
 8001242:	4b4d      	ldr	r3, [pc, #308]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001244:	889b      	ldrh	r3, [r3, #4]
 8001246:	f245 3210 	movw	r2, #21264	; 0x5310
 800124a:	4293      	cmp	r3, r2
 800124c:	d00c      	beq.n	8001268 <LCD_Scan_Dir+0xe4>
 800124e:	4b4a      	ldr	r3, [pc, #296]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001250:	889b      	ldrh	r3, [r3, #4]
 8001252:	f245 5210 	movw	r2, #21776	; 0x5510
 8001256:	4293      	cmp	r3, r2
 8001258:	d006      	beq.n	8001268 <LCD_Scan_Dir+0xe4>
 800125a:	4b47      	ldr	r3, [pc, #284]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 800125c:	889b      	ldrh	r3, [r3, #4]
 800125e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001262:	4293      	cmp	r3, r2
 8001264:	f040 813c 	bne.w	80014e0 <LCD_Scan_Dir+0x35c>
	{
		switch(dir)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b07      	cmp	r3, #7
 800126c:	d835      	bhi.n	80012da <LCD_Scan_Dir+0x156>
 800126e:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <LCD_Scan_Dir+0xf0>)
 8001270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001274:	080012db 	.word	0x080012db
 8001278:	08001295 	.word	0x08001295
 800127c:	0800129f 	.word	0x0800129f
 8001280:	080012a9 	.word	0x080012a9
 8001284:	080012b3 	.word	0x080012b3
 8001288:	080012bd 	.word	0x080012bd
 800128c:	080012c7 	.word	0x080012c7
 8001290:	080012d1 	.word	0x080012d1
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800129a:	81fb      	strh	r3, [r7, #14]
				break;
 800129c:	e01d      	b.n	80012da <LCD_Scan_Dir+0x156>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 800129e:	89fb      	ldrh	r3, [r7, #14]
 80012a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012a4:	81fb      	strh	r3, [r7, #14]
				break;
 80012a6:	e018      	b.n	80012da <LCD_Scan_Dir+0x156>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 80012a8:	89fb      	ldrh	r3, [r7, #14]
 80012aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012ae:	81fb      	strh	r3, [r7, #14]
				break;
 80012b0:	e013      	b.n	80012da <LCD_Scan_Dir+0x156>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 80012b2:	89fb      	ldrh	r3, [r7, #14]
 80012b4:	f043 0320 	orr.w	r3, r3, #32
 80012b8:	81fb      	strh	r3, [r7, #14]
				break;
 80012ba:	e00e      	b.n	80012da <LCD_Scan_Dir+0x156>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 80012bc:	89fb      	ldrh	r3, [r7, #14]
 80012be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012c2:	81fb      	strh	r3, [r7, #14]
				break;
 80012c4:	e009      	b.n	80012da <LCD_Scan_Dir+0x156>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80012cc:	81fb      	strh	r3, [r7, #14]
				break;
 80012ce:	e004      	b.n	80012da <LCD_Scan_Dir+0x156>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 80012d0:	89fb      	ldrh	r3, [r7, #14]
 80012d2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80012d6:	81fb      	strh	r3, [r7, #14]
				break;
 80012d8:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 80012da:	4b27      	ldr	r3, [pc, #156]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 80012dc:	889b      	ldrh	r3, [r3, #4]
 80012de:	f245 5210 	movw	r2, #21776	; 0x5510
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d103      	bne.n	80012ee <LCD_Scan_Dir+0x16a>
 80012e6:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80012ea:	81bb      	strh	r3, [r7, #12]
 80012ec:	e001      	b.n	80012f2 <LCD_Scan_Dir+0x16e>
		else dirreg=0X36;
 80012ee:	2336      	movs	r3, #54	; 0x36
 80012f0:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 80012f2:	4b21      	ldr	r3, [pc, #132]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	f245 3210 	movw	r2, #21264	; 0x5310
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00f      	beq.n	800131e <LCD_Scan_Dir+0x19a>
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001300:	889b      	ldrh	r3, [r3, #4]
 8001302:	f245 5210 	movw	r2, #21776	; 0x5510
 8001306:	4293      	cmp	r3, r2
 8001308:	d009      	beq.n	800131e <LCD_Scan_Dir+0x19a>
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 800130c:	889b      	ldrh	r3, [r3, #4]
 800130e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001312:	4293      	cmp	r3, r2
 8001314:	d003      	beq.n	800131e <LCD_Scan_Dir+0x19a>
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	81fb      	strh	r3, [r7, #14]
		if(lcddev.id==0X6804)regval|=0x02;//6804的BIT6和9341的反了
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001320:	889b      	ldrh	r3, [r3, #4]
 8001322:	f646 0204 	movw	r2, #26628	; 0x6804
 8001326:	4293      	cmp	r3, r2
 8001328:	d103      	bne.n	8001332 <LCD_Scan_Dir+0x1ae>
 800132a:	89fb      	ldrh	r3, [r7, #14]
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8001332:	89fa      	ldrh	r2, [r7, #14]
 8001334:	89bb      	ldrh	r3, [r7, #12]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fdbb 	bl	8000eb4 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001340:	889b      	ldrh	r3, [r3, #4]
 8001342:	f641 1263 	movw	r2, #6499	; 0x1963
 8001346:	4293      	cmp	r3, r2
 8001348:	d028      	beq.n	800139c <LCD_Scan_Dir+0x218>
		{
			if(regval&0X20)
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	f003 0320 	and.w	r3, r3, #32
 8001350:	2b00      	cmp	r3, #0
 8001352:	d013      	beq.n	800137c <LCD_Scan_Dir+0x1f8>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001356:	881a      	ldrh	r2, [r3, #0]
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 800135a:	885b      	ldrh	r3, [r3, #2]
 800135c:	429a      	cmp	r2, r3
 800135e:	d21d      	bcs.n	800139c <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001368:	885a      	ldrh	r2, [r3, #2]
 800136a:	4b03      	ldr	r3, [pc, #12]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 800136c:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 800136e:	4a02      	ldr	r2, [pc, #8]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001370:	897b      	ldrh	r3, [r7, #10]
 8001372:	8053      	strh	r3, [r2, #2]
 8001374:	e012      	b.n	800139c <LCD_Scan_Dir+0x218>
 8001376:	bf00      	nop
 8001378:	20000258 	.word	0x20000258
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 800137c:	4b7d      	ldr	r3, [pc, #500]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800137e:	881a      	ldrh	r2, [r3, #0]
 8001380:	4b7c      	ldr	r3, [pc, #496]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001382:	885b      	ldrh	r3, [r3, #2]
 8001384:	429a      	cmp	r2, r3
 8001386:	d909      	bls.n	800139c <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8001388:	4b7a      	ldr	r3, [pc, #488]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 800138e:	4b79      	ldr	r3, [pc, #484]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001390:	885a      	ldrh	r2, [r3, #2]
 8001392:	4b78      	ldr	r3, [pc, #480]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001394:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8001396:	4a77      	ldr	r2, [pc, #476]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001398:	897b      	ldrh	r3, [r7, #10]
 800139a:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 800139c:	4b75      	ldr	r3, [pc, #468]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800139e:	889b      	ldrh	r3, [r3, #4]
 80013a0:	f245 5210 	movw	r2, #21776	; 0x5510
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d162      	bne.n	800146e <LCD_Scan_Dir+0x2ea>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 80013a8:	4b72      	ldr	r3, [pc, #456]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80013aa:	895b      	ldrh	r3, [r3, #10]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fd53 	bl	8000e58 <LCD_WR_REG>
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff fd60 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 80013b8:	4b6e      	ldr	r3, [pc, #440]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80013ba:	895b      	ldrh	r3, [r3, #10]
 80013bc:	3301      	adds	r3, #1
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fd49 	bl	8000e58 <LCD_WR_REG>
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff fd56 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 80013cc:	4b69      	ldr	r3, [pc, #420]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80013ce:	895b      	ldrh	r3, [r3, #10]
 80013d0:	3302      	adds	r3, #2
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fd3f 	bl	8000e58 <LCD_WR_REG>
 80013da:	4b66      	ldr	r3, [pc, #408]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	3b01      	subs	r3, #1
 80013e0:	121b      	asrs	r3, r3, #8
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fd47 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 80013ea:	4b62      	ldr	r3, [pc, #392]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80013ec:	895b      	ldrh	r3, [r3, #10]
 80013ee:	3303      	adds	r3, #3
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fd30 	bl	8000e58 <LCD_WR_REG>
 80013f8:	4b5e      	ldr	r3, [pc, #376]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b29b      	uxth	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	b29b      	uxth	r3, r3
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fd37 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 800140a:	4b5a      	ldr	r3, [pc, #360]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800140c:	899b      	ldrh	r3, [r3, #12]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fd22 	bl	8000e58 <LCD_WR_REG>
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fd2f 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 800141a:	4b56      	ldr	r3, [pc, #344]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800141c:	899b      	ldrh	r3, [r3, #12]
 800141e:	3301      	adds	r3, #1
 8001420:	b29b      	uxth	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fd18 	bl	8000e58 <LCD_WR_REG>
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff fd25 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 800142e:	4b51      	ldr	r3, [pc, #324]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001430:	899b      	ldrh	r3, [r3, #12]
 8001432:	3302      	adds	r3, #2
 8001434:	b29b      	uxth	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fd0e 	bl	8000e58 <LCD_WR_REG>
 800143c:	4b4d      	ldr	r3, [pc, #308]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800143e:	885b      	ldrh	r3, [r3, #2]
 8001440:	3b01      	subs	r3, #1
 8001442:	121b      	asrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fd16 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 800144c:	4b49      	ldr	r3, [pc, #292]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800144e:	899b      	ldrh	r3, [r3, #12]
 8001450:	3303      	adds	r3, #3
 8001452:	b29b      	uxth	r3, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fcff 	bl	8000e58 <LCD_WR_REG>
 800145a:	4b46      	ldr	r3, [pc, #280]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800145c:	885b      	ldrh	r3, [r3, #2]
 800145e:	3b01      	subs	r3, #1
 8001460:	b29b      	uxth	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	b29b      	uxth	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fd06 	bl	8000e78 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 800146c:	e07e      	b.n	800156c <LCD_Scan_Dir+0x3e8>
		}else
		{
			LCD_WR_REG(lcddev.setxcmd);
 800146e:	4b41      	ldr	r3, [pc, #260]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001470:	895b      	ldrh	r3, [r3, #10]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fcf0 	bl	8000e58 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff fcfd 	bl	8000e78 <LCD_WR_DATA>
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff fcfa 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001484:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	121b      	asrs	r3, r3, #8
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fcf2 	bl	8000e78 <LCD_WR_DATA>
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	b29b      	uxth	r3, r3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fce9 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80014a8:	899b      	ldrh	r3, [r3, #12]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fcd4 	bl	8000e58 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff fce1 	bl	8000e78 <LCD_WR_DATA>
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff fcde 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80014be:	885b      	ldrh	r3, [r3, #2]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	121b      	asrs	r3, r3, #8
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fcd6 	bl	8000e78 <LCD_WR_DATA>
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80014ce:	885b      	ldrh	r3, [r3, #2]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fccd 	bl	8000e78 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 80014de:	e045      	b.n	800156c <LCD_Scan_Dir+0x3e8>
		}
  	}else
	{
		switch(dir)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b07      	cmp	r3, #7
 80014e4:	d835      	bhi.n	8001552 <LCD_Scan_Dir+0x3ce>
 80014e6:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <LCD_Scan_Dir+0x368>)
 80014e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ec:	0800150d 	.word	0x0800150d
 80014f0:	08001517 	.word	0x08001517
 80014f4:	08001521 	.word	0x08001521
 80014f8:	08001553 	.word	0x08001553
 80014fc:	0800152b 	.word	0x0800152b
 8001500:	08001535 	.word	0x08001535
 8001504:	0800153f 	.word	0x0800153f
 8001508:	08001549 	.word	0x08001549
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(1<<5)|(1<<4)|(0<<3);
 800150c:	89fb      	ldrh	r3, [r7, #14]
 800150e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001512:	81fb      	strh	r3, [r7, #14]
				break;
 8001514:	e01d      	b.n	8001552 <LCD_Scan_Dir+0x3ce>
			case L2R_D2U://从左到右,从下到上
				regval|=(0<<5)|(1<<4)|(0<<3);
 8001516:	89fb      	ldrh	r3, [r7, #14]
 8001518:	f043 0310 	orr.w	r3, r3, #16
 800151c:	81fb      	strh	r3, [r7, #14]
				break;
 800151e:	e018      	b.n	8001552 <LCD_Scan_Dir+0x3ce>
			case R2L_U2D://从右到左,从上到下
				regval|=(1<<5)|(0<<4)|(0<<3);
 8001520:	89fb      	ldrh	r3, [r7, #14]
 8001522:	f043 0320 	orr.w	r3, r3, #32
 8001526:	81fb      	strh	r3, [r7, #14]
				break;
 8001528:	e013      	b.n	8001552 <LCD_Scan_Dir+0x3ce>
			case R2L_D2U://从右到左,从下到上
				regval|=(0<<5)|(0<<4)|(0<<3);
				break;
			case U2D_L2R://从上到下,从左到右
				regval|=(1<<5)|(1<<4)|(1<<3);
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001530:	81fb      	strh	r3, [r7, #14]
				break;
 8001532:	e00e      	b.n	8001552 <LCD_Scan_Dir+0x3ce>
			case U2D_R2L://从上到下,从右到左
				regval|=(1<<5)|(0<<4)|(1<<3);
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800153a:	81fb      	strh	r3, [r7, #14]
				break;
 800153c:	e009      	b.n	8001552 <LCD_Scan_Dir+0x3ce>
			case D2U_L2R://从下到上,从左到右
				regval|=(0<<5)|(1<<4)|(1<<3);
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	f043 0318 	orr.w	r3, r3, #24
 8001544:	81fb      	strh	r3, [r7, #14]
				break;
 8001546:	e004      	b.n	8001552 <LCD_Scan_Dir+0x3ce>
			case D2U_R2L://从下到上,从右到左
				regval|=(0<<5)|(0<<4)|(1<<3);
 8001548:	89fb      	ldrh	r3, [r7, #14]
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	81fb      	strh	r3, [r7, #14]
				break;
 8001550:	bf00      	nop
		}
		dirreg=0X03;
 8001552:	2303      	movs	r3, #3
 8001554:	81bb      	strh	r3, [r7, #12]
		regval|=1<<12;
 8001556:	89fb      	ldrh	r3, [r7, #14]
 8001558:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800155c:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 800155e:	89fa      	ldrh	r2, [r7, #14]
 8001560:	89bb      	ldrh	r3, [r7, #12]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fca5 	bl	8000eb4 <LCD_WriteReg>
	}
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000258 	.word	0x20000258

08001578 <LCD_Fast_DrawPoint>:
}
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
 8001582:	460b      	mov	r3, r1
 8001584:	80bb      	strh	r3, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	807b      	strh	r3, [r7, #2]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 800158a:	4b85      	ldr	r3, [pc, #532]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800158c:	889b      	ldrh	r3, [r3, #4]
 800158e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001592:	4293      	cmp	r3, r2
 8001594:	d005      	beq.n	80015a2 <LCD_Fast_DrawPoint+0x2a>
 8001596:	4b82      	ldr	r3, [pc, #520]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001598:	889b      	ldrh	r3, [r3, #4]
 800159a:	f245 3210 	movw	r2, #21264	; 0x5310
 800159e:	4293      	cmp	r3, r2
 80015a0:	d122      	bne.n	80015e8 <LCD_Fast_DrawPoint+0x70>
	{
		LCD_WR_REG(lcddev.setxcmd);
 80015a2:	4b7f      	ldr	r3, [pc, #508]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 80015a4:	895b      	ldrh	r3, [r3, #10]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fc56 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fc60 	bl	8000e78 <LCD_WR_DATA>
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fc5a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80015c4:	4b76      	ldr	r3, [pc, #472]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 80015c6:	899b      	ldrh	r3, [r3, #12]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fc45 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80015ce:	88bb      	ldrh	r3, [r7, #4]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fc4f 	bl	8000e78 <LCD_WR_DATA>
 80015da:	88bb      	ldrh	r3, [r7, #4]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fc49 	bl	8000e78 <LCD_WR_DATA>
 80015e6:	e0cf      	b.n	8001788 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X5510)
 80015e8:	4b6d      	ldr	r3, [pc, #436]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 80015ea:	889b      	ldrh	r3, [r3, #4]
 80015ec:	f245 5210 	movw	r2, #21776	; 0x5510
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d130      	bne.n	8001656 <LCD_Fast_DrawPoint+0xde>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 80015f4:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 80015f6:	895b      	ldrh	r3, [r3, #10]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fc2d 	bl	8000e58 <LCD_WR_REG>
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	b29b      	uxth	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fc37 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 800160a:	4b65      	ldr	r3, [pc, #404]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800160c:	895b      	ldrh	r3, [r3, #10]
 800160e:	3301      	adds	r3, #1
 8001610:	b29b      	uxth	r3, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fc20 	bl	8000e58 <LCD_WR_REG>
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fc2a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8001624:	4b5e      	ldr	r3, [pc, #376]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001626:	899b      	ldrh	r3, [r3, #12]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fc15 	bl	8000e58 <LCD_WR_REG>
 800162e:	88bb      	ldrh	r3, [r7, #4]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	b29b      	uxth	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fc1f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 800163a:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800163c:	899b      	ldrh	r3, [r3, #12]
 800163e:	3301      	adds	r3, #1
 8001640:	b29b      	uxth	r3, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fc08 	bl	8000e58 <LCD_WR_REG>
 8001648:	88bb      	ldrh	r3, [r7, #4]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	b29b      	uxth	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fc12 	bl	8000e78 <LCD_WR_DATA>
 8001654:	e098      	b.n	8001788 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X1963)
 8001656:	4b52      	ldr	r3, [pc, #328]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001658:	889b      	ldrh	r3, [r3, #4]
 800165a:	f641 1263 	movw	r2, #6499	; 0x1963
 800165e:	4293      	cmp	r3, r2
 8001660:	d145      	bne.n	80016ee <LCD_Fast_DrawPoint+0x176>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8001662:	4b4f      	ldr	r3, [pc, #316]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001664:	799b      	ldrb	r3, [r3, #6]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d106      	bne.n	8001678 <LCD_Fast_DrawPoint+0x100>
 800166a:	4b4d      	ldr	r3, [pc, #308]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800166c:	881a      	ldrh	r2, [r3, #0]
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	3b01      	subs	r3, #1
 8001676:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001678:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800167a:	895b      	ldrh	r3, [r3, #10]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fbeb 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	b29b      	uxth	r3, r3
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fbf5 	bl	8000e78 <LCD_WR_DATA>
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	b29b      	uxth	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fbef 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fbe9 	bl	8000e78 <LCD_WR_DATA>
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fbe3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 80016b4:	899b      	ldrh	r3, [r3, #12]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fbce 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80016bc:	88bb      	ldrh	r3, [r7, #4]
 80016be:	0a1b      	lsrs	r3, r3, #8
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fbd8 	bl	8000e78 <LCD_WR_DATA>
 80016c8:	88bb      	ldrh	r3, [r7, #4]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fbd2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80016d4:	88bb      	ldrh	r3, [r7, #4]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fbcc 	bl	8000e78 <LCD_WR_DATA>
 80016e0:	88bb      	ldrh	r3, [r7, #4]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fbc6 	bl	8000e78 <LCD_WR_DATA>
 80016ec:	e04c      	b.n	8001788 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X6804)
 80016ee:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 80016f0:	889b      	ldrh	r3, [r3, #4]
 80016f2:	f646 0204 	movw	r2, #26628	; 0x6804
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d12d      	bne.n	8001756 <LCD_Fast_DrawPoint+0x1de>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 80016fc:	799b      	ldrb	r3, [r3, #6]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d106      	bne.n	8001710 <LCD_Fast_DrawPoint+0x198>
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001704:	881a      	ldrh	r2, [r3, #0]
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	b29b      	uxth	r3, r3
 800170c:	3b01      	subs	r3, #1
 800170e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001710:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001712:	895b      	ldrh	r3, [r3, #10]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fb9f 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	b29b      	uxth	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fba9 	bl	8000e78 <LCD_WR_DATA>
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	b29b      	uxth	r3, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fba3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001734:	899b      	ldrh	r3, [r3, #12]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fb8e 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 800173c:	88bb      	ldrh	r3, [r7, #4]
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	b29b      	uxth	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fb98 	bl	8000e78 <LCD_WR_DATA>
 8001748:	88bb      	ldrh	r3, [r7, #4]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	b29b      	uxth	r3, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fb92 	bl	8000e78 <LCD_WR_DATA>
 8001754:	e018      	b.n	8001788 <LCD_Fast_DrawPoint+0x210>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001758:	799b      	ldrb	r3, [r3, #6]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d106      	bne.n	800176c <LCD_Fast_DrawPoint+0x1f4>
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001760:	881a      	ldrh	r2, [r3, #0]
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	b29b      	uxth	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800176e:	895b      	ldrh	r3, [r3, #10]
 8001770:	88fa      	ldrh	r2, [r7, #6]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fb9d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800177c:	899b      	ldrh	r3, [r3, #12]
 800177e:	88ba      	ldrh	r2, [r7, #4]
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fb96 	bl	8000eb4 <LCD_WriteReg>
	}
	LCD->LCD_REG=lcddev.wramcmd;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <LCD_Fast_DrawPoint+0x22c>)
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800178c:	8912      	ldrh	r2, [r2, #8]
 800178e:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM=color;
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <LCD_Fast_DrawPoint+0x22c>)
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	8053      	strh	r3, [r2, #2]
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000258 	.word	0x20000258
 80017a4:	6c0007fe 	.word	0x6c0007fe

080017a8 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80017b2:	20be      	movs	r0, #190	; 0xbe
 80017b4:	f7ff fb50 	bl	8000e58 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80017b8:	2005      	movs	r0, #5
 80017ba:	f7ff fb5d 	bl	8000e78 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fe8b 	bl	80004dc <__aeabi_i2d>
 80017c6:	a310      	add	r3, pc, #64	; (adr r3, 8001808 <LCD_SSD_BackLightSet+0x60>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe fef0 	bl	80005b0 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f9c2 	bl	8000b60 <__aeabi_d2uiz>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fb49 	bl	8000e78 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 80017e6:	2001      	movs	r0, #1
 80017e8:	f7ff fb46 	bl	8000e78 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 80017ec:	20ff      	movs	r0, #255	; 0xff
 80017ee:	f7ff fb43 	bl	8000e78 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fb40 	bl	8000e78 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff fb3d 	bl	8000e78 <LCD_WR_DATA>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	66666666 	.word	0x66666666
 800180c:	40046666 	.word	0x40046666

08001810 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	if(dir==0)			//竖屏
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d177      	bne.n	8001910 <LCD_Display_Dir+0x100>
	{
		lcddev.dir=0;	//竖屏
 8001820:	4b80      	ldr	r3, [pc, #512]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001822:	2200      	movs	r2, #0
 8001824:	719a      	strb	r2, [r3, #6]
		lcddev.width=240;
 8001826:	4b7f      	ldr	r3, [pc, #508]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001828:	22f0      	movs	r2, #240	; 0xf0
 800182a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800182c:	4b7d      	ldr	r3, [pc, #500]	; (8001a24 <LCD_Display_Dir+0x214>)
 800182e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001832:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310)
 8001834:	4b7b      	ldr	r3, [pc, #492]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001836:	889b      	ldrh	r3, [r3, #4]
 8001838:	f249 3241 	movw	r2, #37697	; 0x9341
 800183c:	4293      	cmp	r3, r2
 800183e:	d00b      	beq.n	8001858 <LCD_Display_Dir+0x48>
 8001840:	4b78      	ldr	r3, [pc, #480]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001842:	889b      	ldrh	r3, [r3, #4]
 8001844:	f646 0204 	movw	r2, #26628	; 0x6804
 8001848:	4293      	cmp	r3, r2
 800184a:	d005      	beq.n	8001858 <LCD_Display_Dir+0x48>
 800184c:	4b75      	ldr	r3, [pc, #468]	; (8001a24 <LCD_Display_Dir+0x214>)
 800184e:	889b      	ldrh	r3, [r3, #4]
 8001850:	f245 3210 	movw	r2, #21264	; 0x5310
 8001854:	4293      	cmp	r3, r2
 8001856:	d11e      	bne.n	8001896 <LCD_Display_Dir+0x86>
		{
			lcddev.wramcmd=0X2C;
 8001858:	4b72      	ldr	r3, [pc, #456]	; (8001a24 <LCD_Display_Dir+0x214>)
 800185a:	222c      	movs	r2, #44	; 0x2c
 800185c:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 800185e:	4b71      	ldr	r3, [pc, #452]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001860:	222a      	movs	r2, #42	; 0x2a
 8001862:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001864:	4b6f      	ldr	r3, [pc, #444]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001866:	222b      	movs	r2, #43	; 0x2b
 8001868:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 800186a:	4b6e      	ldr	r3, [pc, #440]	; (8001a24 <LCD_Display_Dir+0x214>)
 800186c:	889b      	ldrh	r3, [r3, #4]
 800186e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001872:	4293      	cmp	r3, r2
 8001874:	d006      	beq.n	8001884 <LCD_Display_Dir+0x74>
 8001876:	4b6b      	ldr	r3, [pc, #428]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001878:	889b      	ldrh	r3, [r3, #4]
 800187a:	f245 3210 	movw	r2, #21264	; 0x5310
 800187e:	4293      	cmp	r3, r2
 8001880:	f040 80c7 	bne.w	8001a12 <LCD_Display_Dir+0x202>
			{
				lcddev.width=320;
 8001884:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001886:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800188a:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 800188c:	4b65      	ldr	r3, [pc, #404]	; (8001a24 <LCD_Display_Dir+0x214>)
 800188e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001892:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8001894:	e0bd      	b.n	8001a12 <LCD_Display_Dir+0x202>
			}
		}else if(lcddev.id==0x5510)
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001898:	889b      	ldrh	r3, [r3, #4]
 800189a:	f245 5210 	movw	r2, #21776	; 0x5510
 800189e:	4293      	cmp	r3, r2
 80018a0:	d114      	bne.n	80018cc <LCD_Display_Dir+0xbc>
		{
			lcddev.wramcmd=0X2C00;
 80018a2:	4b60      	ldr	r3, [pc, #384]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018a4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80018a8:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 80018aa:	4b5e      	ldr	r3, [pc, #376]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018ac:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80018b0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 80018b2:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018b4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80018b8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 80018ba:	4b5a      	ldr	r3, [pc, #360]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018c0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 80018c2:	4b58      	ldr	r3, [pc, #352]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80018c8:	805a      	strh	r2, [r3, #2]
 80018ca:	e0a3      	b.n	8001a14 <LCD_Display_Dir+0x204>
		}else if(lcddev.id==0X1963)
 80018cc:	4b55      	ldr	r3, [pc, #340]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018ce:	889b      	ldrh	r3, [r3, #4]
 80018d0:	f641 1263 	movw	r2, #6499	; 0x1963
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d111      	bne.n	80018fc <LCD_Display_Dir+0xec>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 80018d8:	4b52      	ldr	r3, [pc, #328]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018da:	222c      	movs	r2, #44	; 0x2c
 80018dc:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 80018de:	4b51      	ldr	r3, [pc, #324]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018e0:	222b      	movs	r2, #43	; 0x2b
 80018e2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 80018e4:	4b4f      	ldr	r3, [pc, #316]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018e6:	222a      	movs	r2, #42	; 0x2a
 80018e8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 80018ea:	4b4e      	ldr	r3, [pc, #312]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018f0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 80018f2:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80018f8:	805a      	strh	r2, [r3, #2]
 80018fa:	e08b      	b.n	8001a14 <LCD_Display_Dir+0x204>
		}else
		{
			lcddev.wramcmd=0X22;
 80018fc:	4b49      	ldr	r3, [pc, #292]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018fe:	2222      	movs	r2, #34	; 0x22
 8001900:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X20;
 8001902:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001904:	2220      	movs	r2, #32
 8001906:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X21;
 8001908:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <LCD_Display_Dir+0x214>)
 800190a:	2221      	movs	r2, #33	; 0x21
 800190c:	819a      	strh	r2, [r3, #12]
 800190e:	e081      	b.n	8001a14 <LCD_Display_Dir+0x204>
		}
	}else 				//横屏
	{
		lcddev.dir=1;	//横屏
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001912:	2201      	movs	r2, #1
 8001914:	719a      	strb	r2, [r3, #6]
		lcddev.width=320;
 8001916:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001918:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800191c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001920:	22f0      	movs	r2, #240	; 0xf0
 8001922:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001924:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001926:	889b      	ldrh	r3, [r3, #4]
 8001928:	f249 3241 	movw	r2, #37697	; 0x9341
 800192c:	4293      	cmp	r3, r2
 800192e:	d005      	beq.n	800193c <LCD_Display_Dir+0x12c>
 8001930:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001932:	889b      	ldrh	r3, [r3, #4]
 8001934:	f245 3210 	movw	r2, #21264	; 0x5310
 8001938:	4293      	cmp	r3, r2
 800193a:	d109      	bne.n	8001950 <LCD_Display_Dir+0x140>
		{
			lcddev.wramcmd=0X2C;
 800193c:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <LCD_Display_Dir+0x214>)
 800193e:	222c      	movs	r2, #44	; 0x2c
 8001940:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001942:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001944:	222a      	movs	r2, #42	; 0x2a
 8001946:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001948:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <LCD_Display_Dir+0x214>)
 800194a:	222b      	movs	r2, #43	; 0x2b
 800194c:	819a      	strh	r2, [r3, #12]
 800194e:	e04b      	b.n	80019e8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X6804)
 8001950:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001952:	889b      	ldrh	r3, [r3, #4]
 8001954:	f646 0204 	movw	r2, #26628	; 0x6804
 8001958:	4293      	cmp	r3, r2
 800195a:	d109      	bne.n	8001970 <LCD_Display_Dir+0x160>
		{
 			lcddev.wramcmd=0X2C;
 800195c:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <LCD_Display_Dir+0x214>)
 800195e:	222c      	movs	r2, #44	; 0x2c
 8001960:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2B;
 8001962:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001964:	222b      	movs	r2, #43	; 0x2b
 8001966:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;
 8001968:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <LCD_Display_Dir+0x214>)
 800196a:	222a      	movs	r2, #42	; 0x2a
 800196c:	819a      	strh	r2, [r3, #12]
 800196e:	e03b      	b.n	80019e8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0x5510)
 8001970:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001972:	889b      	ldrh	r3, [r3, #4]
 8001974:	f245 5210 	movw	r2, #21776	; 0x5510
 8001978:	4293      	cmp	r3, r2
 800197a:	d114      	bne.n	80019a6 <LCD_Display_Dir+0x196>
		{
			lcddev.wramcmd=0X2C00;
 800197c:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <LCD_Display_Dir+0x214>)
 800197e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001982:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001986:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800198a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <LCD_Display_Dir+0x214>)
 800198e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001992:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001996:	f44f 7248 	mov.w	r2, #800	; 0x320
 800199a:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <LCD_Display_Dir+0x214>)
 800199e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019a2:	805a      	strh	r2, [r3, #2]
 80019a4:	e020      	b.n	80019e8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X1963)
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019a8:	889b      	ldrh	r3, [r3, #4]
 80019aa:	f641 1263 	movw	r2, #6499	; 0x1963
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d111      	bne.n	80019d6 <LCD_Display_Dir+0x1c6>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019b4:	222c      	movs	r2, #44	; 0x2c
 80019b6:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019ba:	222a      	movs	r2, #42	; 0x2a
 80019bc:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019c0:	222b      	movs	r2, #43	; 0x2b
 80019c2:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019c6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019ca:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019d2:	805a      	strh	r2, [r3, #2]
 80019d4:	e008      	b.n	80019e8 <LCD_Display_Dir+0x1d8>
		}else
		{
			lcddev.wramcmd=0X22;
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019d8:	2222      	movs	r2, #34	; 0x22
 80019da:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X21;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019de:	2221      	movs	r2, #33	; 0x21
 80019e0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X20;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019e4:	2220      	movs	r2, #32
 80019e6:	819a      	strh	r2, [r3, #12]
		}
		if(lcddev.id==0X6804||lcddev.id==0X5310)
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019ea:	889b      	ldrh	r3, [r3, #4]
 80019ec:	f646 0204 	movw	r2, #26628	; 0x6804
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d005      	beq.n	8001a00 <LCD_Display_Dir+0x1f0>
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019f6:	889b      	ldrh	r3, [r3, #4]
 80019f8:	f245 3210 	movw	r2, #21264	; 0x5310
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d109      	bne.n	8001a14 <LCD_Display_Dir+0x204>
		{
			lcddev.width=480;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001a02:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a06:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001a0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a0e:	805a      	strh	r2, [r3, #2]
 8001a10:	e000      	b.n	8001a14 <LCD_Display_Dir+0x204>
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8001a12:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fbb5 	bl	8001184 <LCD_Scan_Dir>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000258 	.word	0x20000258

08001a28 <LCD_Init>:
}
//初始化lcd
//该初始化函数可以初始化各种ILI93XX液晶,但是其他函数是基于ILI9320的!!!
//在其他型号的驱动芯片上没有测试!
void LCD_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	RCC->AHBENR|=1<<8;     	 	//使能FSMC时钟
 8001a2c:	4baa      	ldr	r3, [pc, #680]	; (8001cd8 <LCD_Init+0x2b0>)
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	4aa9      	ldr	r2, [pc, #676]	; (8001cd8 <LCD_Init+0x2b0>)
 8001a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a36:	6153      	str	r3, [r2, #20]
  	RCC->APB2ENR|=1<<3;     	//使能PORTB时钟
 8001a38:	4ba7      	ldr	r3, [pc, #668]	; (8001cd8 <LCD_Init+0x2b0>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	4aa6      	ldr	r2, [pc, #664]	; (8001cd8 <LCD_Init+0x2b0>)
 8001a3e:	f043 0308 	orr.w	r3, r3, #8
 8001a42:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<5;     	//使能PORTD时钟
 8001a44:	4ba4      	ldr	r3, [pc, #656]	; (8001cd8 <LCD_Init+0x2b0>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	4aa3      	ldr	r2, [pc, #652]	; (8001cd8 <LCD_Init+0x2b0>)
 8001a4a:	f043 0320 	orr.w	r3, r3, #32
 8001a4e:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<6;     	//使能PORTE时钟
 8001a50:	4ba1      	ldr	r3, [pc, #644]	; (8001cd8 <LCD_Init+0x2b0>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4aa0      	ldr	r2, [pc, #640]	; (8001cd8 <LCD_Init+0x2b0>)
 8001a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a5a:	6193      	str	r3, [r2, #24]
 	RCC->APB2ENR|=1<<8;      	//使能PORTG时钟
 8001a5c:	4b9e      	ldr	r3, [pc, #632]	; (8001cd8 <LCD_Init+0x2b0>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a9d      	ldr	r2, [pc, #628]	; (8001cd8 <LCD_Init+0x2b0>)
 8001a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a66:	6193      	str	r3, [r2, #24]
	GPIOB->CRL&=0XFFFFFFF0;		//PB0 推挽输出 背光
 8001a68:	4b9c      	ldr	r3, [pc, #624]	; (8001cdc <LCD_Init+0x2b4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a9b      	ldr	r2, [pc, #620]	; (8001cdc <LCD_Init+0x2b4>)
 8001a6e:	f023 030f 	bic.w	r3, r3, #15
 8001a72:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=0X00000003;
 8001a74:	4b99      	ldr	r3, [pc, #612]	; (8001cdc <LCD_Init+0x2b4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a98      	ldr	r2, [pc, #608]	; (8001cdc <LCD_Init+0x2b4>)
 8001a7a:	f043 0303 	orr.w	r3, r3, #3
 8001a7e:	6013      	str	r3, [r2, #0]
	//PORTD复用推挽输出
	GPIOD->CRH&=0X00FFF000;
 8001a80:	4b97      	ldr	r3, [pc, #604]	; (8001ce0 <LCD_Init+0x2b8>)
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	4996      	ldr	r1, [pc, #600]	; (8001ce0 <LCD_Init+0x2b8>)
 8001a86:	4b97      	ldr	r3, [pc, #604]	; (8001ce4 <LCD_Init+0x2bc>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
	GPIOD->CRH|=0XBB000BBB;
 8001a8c:	4b94      	ldr	r3, [pc, #592]	; (8001ce0 <LCD_Init+0x2b8>)
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	4993      	ldr	r1, [pc, #588]	; (8001ce0 <LCD_Init+0x2b8>)
 8001a92:	4b95      	ldr	r3, [pc, #596]	; (8001ce8 <LCD_Init+0x2c0>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	604b      	str	r3, [r1, #4]
	GPIOD->CRL&=0XFF00FF00;
 8001a98:	4b91      	ldr	r3, [pc, #580]	; (8001ce0 <LCD_Init+0x2b8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a90      	ldr	r2, [pc, #576]	; (8001ce0 <LCD_Init+0x2b8>)
 8001a9e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001aa2:	6013      	str	r3, [r2, #0]
	GPIOD->CRL|=0X00BB00BB;
 8001aa4:	4b8e      	ldr	r3, [pc, #568]	; (8001ce0 <LCD_Init+0x2b8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a8d      	ldr	r2, [pc, #564]	; (8001ce0 <LCD_Init+0x2b8>)
 8001aaa:	f043 13bb 	orr.w	r3, r3, #12255419	; 0xbb00bb
 8001aae:	6013      	str	r3, [r2, #0]
	//PORTE复用推挽输出
	GPIOE->CRH&=0X00000000;
 8001ab0:	4b8e      	ldr	r3, [pc, #568]	; (8001cec <LCD_Init+0x2c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	4b8d      	ldr	r3, [pc, #564]	; (8001cec <LCD_Init+0x2c4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	605a      	str	r2, [r3, #4]
	GPIOE->CRH|=0XBBBBBBBB;
 8001aba:	4b8c      	ldr	r3, [pc, #560]	; (8001cec <LCD_Init+0x2c4>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4a8b      	ldr	r2, [pc, #556]	; (8001cec <LCD_Init+0x2c4>)
 8001ac0:	f043 33bb 	orr.w	r3, r3, #3149642683	; 0xbbbbbbbb
 8001ac4:	6053      	str	r3, [r2, #4]
	GPIOE->CRL&=0X0FFFFFFF;
 8001ac6:	4b89      	ldr	r3, [pc, #548]	; (8001cec <LCD_Init+0x2c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a88      	ldr	r2, [pc, #544]	; (8001cec <LCD_Init+0x2c4>)
 8001acc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001ad0:	6013      	str	r3, [r2, #0]
	GPIOE->CRL|=0XB0000000;
 8001ad2:	4b86      	ldr	r3, [pc, #536]	; (8001cec <LCD_Init+0x2c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a85      	ldr	r2, [pc, #532]	; (8001cec <LCD_Init+0x2c4>)
 8001ad8:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8001adc:	6013      	str	r3, [r2, #0]
	//PORTG12复用推挽输出
	GPIOG->CRH&=0XFFF0FFFF;
 8001ade:	4b84      	ldr	r3, [pc, #528]	; (8001cf0 <LCD_Init+0x2c8>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4a83      	ldr	r2, [pc, #524]	; (8001cf0 <LCD_Init+0x2c8>)
 8001ae4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001ae8:	6053      	str	r3, [r2, #4]
	GPIOG->CRH|=0X000B0000;
 8001aea:	4b81      	ldr	r3, [pc, #516]	; (8001cf0 <LCD_Init+0x2c8>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4a80      	ldr	r2, [pc, #512]	; (8001cf0 <LCD_Init+0x2c8>)
 8001af0:	f443 2330 	orr.w	r3, r3, #720896	; 0xb0000
 8001af4:	6053      	str	r3, [r2, #4]
	GPIOG->CRL&=0XFFFFFFF0;//PG0->RS
 8001af6:	4b7e      	ldr	r3, [pc, #504]	; (8001cf0 <LCD_Init+0x2c8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a7d      	ldr	r2, [pc, #500]	; (8001cf0 <LCD_Init+0x2c8>)
 8001afc:	f023 030f 	bic.w	r3, r3, #15
 8001b00:	6013      	str	r3, [r2, #0]
	GPIOG->CRL|=0X0000000B;
 8001b02:	4b7b      	ldr	r3, [pc, #492]	; (8001cf0 <LCD_Init+0x2c8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a7a      	ldr	r2, [pc, #488]	; (8001cf0 <LCD_Init+0x2c8>)
 8001b08:	f043 030b 	orr.w	r3, r3, #11
 8001b0c:	6013      	str	r3, [r2, #0]

	//寄存器清零
	//bank1有NE1~4,每一个有一个BCR+TCR，所以总共八个寄存器。
	//这里我们使用NE4 ，也就对应BTCR[6],[7]。
	FSMC_Bank1->BTCR[6]=0X00000000;
 8001b0e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
	FSMC_Bank1->BTCR[7]=0X00000000;
 8001b16:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
	FSMC_Bank1E->BWTR[6]=0X00000000;
 8001b1e:	4b75      	ldr	r3, [pc, #468]	; (8001cf4 <LCD_Init+0x2cc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
	//操作BCR寄存器	使用异步模式
	FSMC_Bank1->BTCR[6]|=1<<12;		//存储器写使能
 8001b24:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b28:	699b      	ldr	r3, [r3, #24]
 8001b2a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b32:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<14;		//读写使用不同的时序
 8001b34:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b42:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<4; 		//存储器数据宽度为16bit
 8001b44:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b4e:	f043 0310 	orr.w	r3, r3, #16
 8001b52:	6193      	str	r3, [r2, #24]
	//操作BTR寄存器
	//读时序控制寄存器
	FSMC_Bank1->BTCR[7]|=0<<28;		//模式A
 8001b54:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b58:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	61d3      	str	r3, [r2, #28]
	FSMC_Bank1->BTCR[7]|=1<<0; 		//地址建立时间（ADDSET）为2个HCLK 1/36M=27ns(实际>200ns)
 8001b60:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	61d3      	str	r3, [r2, #28]
	//因为液晶驱动IC的读数据的时候，速度不能太快，尤其对1289这个IC。
	FSMC_Bank1->BTCR[7]|=0XF<<8;  	//数据保存时间为16个HCLK
 8001b70:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b7a:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8001b7e:	61d3      	str	r3, [r2, #28]
	//写时序控制寄存器
	FSMC_Bank1E->BWTR[6]|=0<<28; 	//模式A
 8001b80:	4b5c      	ldr	r3, [pc, #368]	; (8001cf4 <LCD_Init+0x2cc>)
 8001b82:	4a5c      	ldr	r2, [pc, #368]	; (8001cf4 <LCD_Init+0x2cc>)
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	6193      	str	r3, [r2, #24]
	FSMC_Bank1E->BWTR[6]|=0<<0;		//地址建立时间（ADDSET）为1个HCLK
 8001b88:	4b5a      	ldr	r3, [pc, #360]	; (8001cf4 <LCD_Init+0x2cc>)
 8001b8a:	4a5a      	ldr	r2, [pc, #360]	; (8001cf4 <LCD_Init+0x2cc>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	6193      	str	r3, [r2, #24]
 	//4个HCLK（HCLK=72M）因为液晶驱动IC的写信号脉宽，最少也得50ns。72M/4=24M=55ns
	FSMC_Bank1E->BWTR[6]|=3<<8; 	//数据保存时间为4个HCLK
 8001b90:	4b58      	ldr	r3, [pc, #352]	; (8001cf4 <LCD_Init+0x2cc>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a57      	ldr	r2, [pc, #348]	; (8001cf4 <LCD_Init+0x2cc>)
 8001b96:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b9a:	6193      	str	r3, [r2, #24]
	//使能BANK1,区域4
	FSMC_Bank1->BTCR[6]|=1<<0;		//使能BANK1，区域4
 8001b9c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6193      	str	r3, [r2, #24]
	HAL_Delay(50); 					// delay 50 ms
 8001bac:	2032      	movs	r0, #50	; 0x32
 8001bae:	f003 feef 	bl	8005990 <HAL_Delay>
  	lcddev.id=LCD_ReadReg(0x0000);	//读ID（9320/9325/9328/4531/4535等IC）
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f7ff f994 	bl	8000ee0 <LCD_ReadReg>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b4e      	ldr	r3, [pc, #312]	; (8001cf8 <LCD_Init+0x2d0>)
 8001bbe:	809a      	strh	r2, [r3, #4]
  	if(lcddev.id<0XFF||lcddev.id==0XFFFF||lcddev.id==0X9300)//读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001bc0:	4b4d      	ldr	r3, [pc, #308]	; (8001cf8 <LCD_Init+0x2d0>)
 8001bc2:	889b      	ldrh	r3, [r3, #4]
 8001bc4:	2bfe      	cmp	r3, #254	; 0xfe
 8001bc6:	d90b      	bls.n	8001be0 <LCD_Init+0x1b8>
 8001bc8:	4b4b      	ldr	r3, [pc, #300]	; (8001cf8 <LCD_Init+0x2d0>)
 8001bca:	889b      	ldrh	r3, [r3, #4]
 8001bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d005      	beq.n	8001be0 <LCD_Init+0x1b8>
 8001bd4:	4b48      	ldr	r3, [pc, #288]	; (8001cf8 <LCD_Init+0x2d0>)
 8001bd6:	889b      	ldrh	r3, [r3, #4]
 8001bd8:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001bdc:	f040 80fc 	bne.w	8001dd8 <LCD_Init+0x3b0>
	{
 		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001be0:	20d3      	movs	r0, #211	; 0xd3
 8001be2:	f7ff f939 	bl	8000e58 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();	//dummy read
 8001be6:	f7ff f957 	bl	8000e98 <LCD_RD_DATA>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b42      	ldr	r3, [pc, #264]	; (8001cf8 <LCD_Init+0x2d0>)
 8001bf0:	809a      	strh	r2, [r3, #4]
 		lcddev.id=LCD_RD_DATA();	//读到0X00
 8001bf2:	f7ff f951 	bl	8000e98 <LCD_RD_DATA>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <LCD_Init+0x2d0>)
 8001bfc:	809a      	strh	r2, [r3, #4]
  		lcddev.id=LCD_RD_DATA();   	//读取93
 8001bfe:	f7ff f94b 	bl	8000e98 <LCD_RD_DATA>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b3c      	ldr	r3, [pc, #240]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c08:	809a      	strh	r2, [r3, #4]
 		lcddev.id<<=8;
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c0c:	889b      	ldrh	r3, [r3, #4]
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b39      	ldr	r3, [pc, #228]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c14:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();  	//读取41
 8001c16:	f7ff f93f 	bl	8000e98 <LCD_RD_DATA>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b36      	ldr	r3, [pc, #216]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c20:	889b      	ldrh	r3, [r3, #4]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c28:	809a      	strh	r2, [r3, #4]
 		if(lcddev.id!=0X9341)		//非9341,尝试是不是6804
 8001c2a:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c2c:	889b      	ldrh	r3, [r3, #4]
 8001c2e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c32:	4293      	cmp	r3, r2
 8001c34:	f000 80d0 	beq.w	8001dd8 <LCD_Init+0x3b0>
		{
 			LCD_WR_REG(0XBF);
 8001c38:	20bf      	movs	r0, #191	; 0xbf
 8001c3a:	f7ff f90d 	bl	8000e58 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA(); 	//dummy read
 8001c3e:	f7ff f92b 	bl	8000e98 <LCD_RD_DATA>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c48:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA();   	//读回0X01
 8001c4a:	f7ff f925 	bl	8000e98 <LCD_RD_DATA>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b29      	ldr	r3, [pc, #164]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c54:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA(); 	//读回0XD0
 8001c56:	f7ff f91f 	bl	8000e98 <LCD_RD_DATA>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b26      	ldr	r3, [pc, #152]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c60:	809a      	strh	r2, [r3, #4]
	  		lcddev.id=LCD_RD_DATA();	//这里读回0X68
 8001c62:	f7ff f919 	bl	8000e98 <LCD_RD_DATA>
 8001c66:	4603      	mov	r3, r0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c6c:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 8001c6e:	4b22      	ldr	r3, [pc, #136]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c70:	889b      	ldrh	r3, [r3, #4]
 8001c72:	021b      	lsls	r3, r3, #8
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	4b20      	ldr	r3, [pc, #128]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c78:	809a      	strh	r2, [r3, #4]
	  		lcddev.id|=LCD_RD_DATA();	//这里读回0X04
 8001c7a:	f7ff f90d 	bl	8000e98 <LCD_RD_DATA>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c84:	889b      	ldrh	r3, [r3, #4]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c8c:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X6804)		//也不是6804,尝试看看是不是NT35310
 8001c8e:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <LCD_Init+0x2d0>)
 8001c90:	889b      	ldrh	r3, [r3, #4]
 8001c92:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c96:	4293      	cmp	r3, r2
 8001c98:	f000 809e 	beq.w	8001dd8 <LCD_Init+0x3b0>
			{
				LCD_WR_REG(0XD4);
 8001c9c:	20d4      	movs	r0, #212	; 0xd4
 8001c9e:	f7ff f8db 	bl	8000e58 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();//dummy read
 8001ca2:	f7ff f8f9 	bl	8000e98 <LCD_RD_DATA>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <LCD_Init+0x2d0>)
 8001cac:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X01
 8001cae:	f7ff f8f3 	bl	8000e98 <LCD_RD_DATA>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <LCD_Init+0x2d0>)
 8001cb8:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X53
 8001cba:	f7ff f8ed 	bl	8000e98 <LCD_RD_DATA>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <LCD_Init+0x2d0>)
 8001cc4:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <LCD_Init+0x2d0>)
 8001cc8:	889b      	ldrh	r3, [r3, #4]
 8001cca:	021b      	lsls	r3, r3, #8
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <LCD_Init+0x2d0>)
 8001cd0:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 8001cd2:	f7ff f8e1 	bl	8000e98 <LCD_RD_DATA>
 8001cd6:	e011      	b.n	8001cfc <LCD_Init+0x2d4>
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010c00 	.word	0x40010c00
 8001ce0:	40011400 	.word	0x40011400
 8001ce4:	00fff000 	.word	0x00fff000
 8001ce8:	bb000bbb 	.word	0xbb000bbb
 8001cec:	40011800 	.word	0x40011800
 8001cf0:	40012000 	.word	0x40012000
 8001cf4:	a0000104 	.word	0xa0000104
 8001cf8:	20000258 	.word	0x20000258
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4bc7      	ldr	r3, [pc, #796]	; (8002020 <LCD_Init+0x5f8>)
 8001d02:	889b      	ldrh	r3, [r3, #4]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	4bc5      	ldr	r3, [pc, #788]	; (8002020 <LCD_Init+0x5f8>)
 8001d0a:	809a      	strh	r2, [r3, #4]
				if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001d0c:	4bc4      	ldr	r3, [pc, #784]	; (8002020 <LCD_Init+0x5f8>)
 8001d0e:	889b      	ldrh	r3, [r3, #4]
 8001d10:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d05f      	beq.n	8001dd8 <LCD_Init+0x3b0>
				{
					LCD_WR_REG(0XDA00);
 8001d18:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001d1c:	f7ff f89c 	bl	8000e58 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X00
 8001d20:	f7ff f8ba 	bl	8000e98 <LCD_RD_DATA>
 8001d24:	4603      	mov	r3, r0
 8001d26:	461a      	mov	r2, r3
 8001d28:	4bbd      	ldr	r3, [pc, #756]	; (8002020 <LCD_Init+0x5f8>)
 8001d2a:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDB00);
 8001d2c:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001d30:	f7ff f892 	bl	8000e58 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X80
 8001d34:	f7ff f8b0 	bl	8000e98 <LCD_RD_DATA>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4bb8      	ldr	r3, [pc, #736]	; (8002020 <LCD_Init+0x5f8>)
 8001d3e:	809a      	strh	r2, [r3, #4]
					lcddev.id<<=8;
 8001d40:	4bb7      	ldr	r3, [pc, #732]	; (8002020 <LCD_Init+0x5f8>)
 8001d42:	889b      	ldrh	r3, [r3, #4]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	4bb5      	ldr	r3, [pc, #724]	; (8002020 <LCD_Init+0x5f8>)
 8001d4a:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8001d4c:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001d50:	f7ff f882 	bl	8000e58 <LCD_WR_REG>
					lcddev.id|=LCD_RD_DATA();		//读回0X00
 8001d54:	f7ff f8a0 	bl	8000e98 <LCD_RD_DATA>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4bb0      	ldr	r3, [pc, #704]	; (8002020 <LCD_Init+0x5f8>)
 8001d5e:	889b      	ldrh	r3, [r3, #4]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	4bae      	ldr	r3, [pc, #696]	; (8002020 <LCD_Init+0x5f8>)
 8001d66:	809a      	strh	r2, [r3, #4]
					if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001d68:	4bad      	ldr	r3, [pc, #692]	; (8002020 <LCD_Init+0x5f8>)
 8001d6a:	889b      	ldrh	r3, [r3, #4]
 8001d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d70:	d103      	bne.n	8001d7a <LCD_Init+0x352>
 8001d72:	4bab      	ldr	r3, [pc, #684]	; (8002020 <LCD_Init+0x5f8>)
 8001d74:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d78:	809a      	strh	r2, [r3, #4]
					if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001d7a:	4ba9      	ldr	r3, [pc, #676]	; (8002020 <LCD_Init+0x5f8>)
 8001d7c:	889b      	ldrh	r3, [r3, #4]
 8001d7e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d028      	beq.n	8001dd8 <LCD_Init+0x3b0>
					{
						LCD_WR_REG(0XA1);
 8001d86:	20a1      	movs	r0, #161	; 0xa1
 8001d88:	f7ff f866 	bl	8000e58 <LCD_WR_REG>
						lcddev.id=LCD_RD_DATA();
 8001d8c:	f7ff f884 	bl	8000e98 <LCD_RD_DATA>
 8001d90:	4603      	mov	r3, r0
 8001d92:	461a      	mov	r2, r3
 8001d94:	4ba2      	ldr	r3, [pc, #648]	; (8002020 <LCD_Init+0x5f8>)
 8001d96:	809a      	strh	r2, [r3, #4]
						lcddev.id=LCD_RD_DATA();	//读回0X57
 8001d98:	f7ff f87e 	bl	8000e98 <LCD_RD_DATA>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b9f      	ldr	r3, [pc, #636]	; (8002020 <LCD_Init+0x5f8>)
 8001da2:	809a      	strh	r2, [r3, #4]
						lcddev.id<<=8;
 8001da4:	4b9e      	ldr	r3, [pc, #632]	; (8002020 <LCD_Init+0x5f8>)
 8001da6:	889b      	ldrh	r3, [r3, #4]
 8001da8:	021b      	lsls	r3, r3, #8
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4b9c      	ldr	r3, [pc, #624]	; (8002020 <LCD_Init+0x5f8>)
 8001dae:	809a      	strh	r2, [r3, #4]
						lcddev.id|=LCD_RD_DATA();	//读回0X61
 8001db0:	f7ff f872 	bl	8000e98 <LCD_RD_DATA>
 8001db4:	4603      	mov	r3, r0
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b99      	ldr	r3, [pc, #612]	; (8002020 <LCD_Init+0x5f8>)
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	4b97      	ldr	r3, [pc, #604]	; (8002020 <LCD_Init+0x5f8>)
 8001dc2:	809a      	strh	r2, [r3, #4]
						if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001dc4:	4b96      	ldr	r3, [pc, #600]	; (8002020 <LCD_Init+0x5f8>)
 8001dc6:	889b      	ldrh	r3, [r3, #4]
 8001dc8:	f245 7261 	movw	r2, #22369	; 0x5761
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d103      	bne.n	8001dd8 <LCD_Init+0x3b0>
 8001dd0:	4b93      	ldr	r3, [pc, #588]	; (8002020 <LCD_Init+0x5f8>)
 8001dd2:	f641 1263 	movw	r2, #6499	; 0x1963
 8001dd6:	809a      	strh	r2, [r3, #4]
					}
				}
			}
 		}
	}
 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 8001dd8:	4b91      	ldr	r3, [pc, #580]	; (8002020 <LCD_Init+0x5f8>)
 8001dda:	889b      	ldrh	r3, [r3, #4]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4891      	ldr	r0, [pc, #580]	; (8002024 <LCD_Init+0x5fc>)
 8001de0:	f005 fa28 	bl	8007234 <iprintf>
	if(lcddev.id==0X9341)	//9341初始化
 8001de4:	4b8e      	ldr	r3, [pc, #568]	; (8002020 <LCD_Init+0x5f8>)
 8001de6:	889b      	ldrh	r3, [r3, #4]
 8001de8:	f249 3241 	movw	r2, #37697	; 0x9341
 8001dec:	4293      	cmp	r3, r2
 8001dee:	f040 811b 	bne.w	8002028 <LCD_Init+0x600>
	{
		LCD_WR_REG(0xCF);
 8001df2:	20cf      	movs	r0, #207	; 0xcf
 8001df4:	f7ff f830 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7ff f83d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 8001dfe:	20c1      	movs	r0, #193	; 0xc1
 8001e00:	f7ff f83a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8001e04:	2030      	movs	r0, #48	; 0x30
 8001e06:	f7ff f837 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 8001e0a:	20ed      	movs	r0, #237	; 0xed
 8001e0c:	f7ff f824 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 8001e10:	2064      	movs	r0, #100	; 0x64
 8001e12:	f7ff f831 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001e16:	2003      	movs	r0, #3
 8001e18:	f7ff f82e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 8001e1c:	2012      	movs	r0, #18
 8001e1e:	f7ff f82b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 8001e22:	2081      	movs	r0, #129	; 0x81
 8001e24:	f7ff f828 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8001e28:	20e8      	movs	r0, #232	; 0xe8
 8001e2a:	f7ff f815 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 8001e2e:	2085      	movs	r0, #133	; 0x85
 8001e30:	f7ff f822 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001e34:	2010      	movs	r0, #16
 8001e36:	f7ff f81f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8001e3a:	207a      	movs	r0, #122	; 0x7a
 8001e3c:	f7ff f81c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 8001e40:	20cb      	movs	r0, #203	; 0xcb
 8001e42:	f7ff f809 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8001e46:	2039      	movs	r0, #57	; 0x39
 8001e48:	f7ff f816 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8001e4c:	202c      	movs	r0, #44	; 0x2c
 8001e4e:	f7ff f813 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e52:	2000      	movs	r0, #0
 8001e54:	f7ff f810 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8001e58:	2034      	movs	r0, #52	; 0x34
 8001e5a:	f7ff f80d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8001e5e:	2002      	movs	r0, #2
 8001e60:	f7ff f80a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8001e64:	20f7      	movs	r0, #247	; 0xf7
 8001e66:	f7fe fff7 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8001e6a:	2020      	movs	r0, #32
 8001e6c:	f7ff f804 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8001e70:	20ea      	movs	r0, #234	; 0xea
 8001e72:	f7fe fff1 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001e76:	2000      	movs	r0, #0
 8001e78:	f7fe fffe 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7fe fffb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 8001e82:	20c0      	movs	r0, #192	; 0xc0
 8001e84:	f7fe ffe8 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001e88:	201b      	movs	r0, #27
 8001e8a:	f7fe fff5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 8001e8e:	20c1      	movs	r0, #193	; 0xc1
 8001e90:	f7fe ffe2 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001e94:	2001      	movs	r0, #1
 8001e96:	f7fe ffef 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 8001e9a:	20c5      	movs	r0, #197	; 0xc5
 8001e9c:	f7fe ffdc 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 8001ea0:	2030      	movs	r0, #48	; 0x30
 8001ea2:	f7fe ffe9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 8001ea6:	2030      	movs	r0, #48	; 0x30
 8001ea8:	f7fe ffe6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 8001eac:	20c7      	movs	r0, #199	; 0xc7
 8001eae:	f7fe ffd3 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 8001eb2:	20b7      	movs	r0, #183	; 0xb7
 8001eb4:	f7fe ffe0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 8001eb8:	2036      	movs	r0, #54	; 0x36
 8001eba:	f7fe ffcd 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 8001ebe:	2048      	movs	r0, #72	; 0x48
 8001ec0:	f7fe ffda 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 8001ec4:	203a      	movs	r0, #58	; 0x3a
 8001ec6:	f7fe ffc7 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 8001eca:	2055      	movs	r0, #85	; 0x55
 8001ecc:	f7fe ffd4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 8001ed0:	20b1      	movs	r0, #177	; 0xb1
 8001ed2:	f7fe ffc1 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	f7fe ffce 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 8001edc:	201a      	movs	r0, #26
 8001ede:	f7fe ffcb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 8001ee2:	20b6      	movs	r0, #182	; 0xb6
 8001ee4:	f7fe ffb8 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8001ee8:	200a      	movs	r0, #10
 8001eea:	f7fe ffc5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8001eee:	20a2      	movs	r0, #162	; 0xa2
 8001ef0:	f7fe ffc2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001ef4:	20f2      	movs	r0, #242	; 0xf2
 8001ef6:	f7fe ffaf 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7fe ffbc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 8001f00:	2026      	movs	r0, #38	; 0x26
 8001f02:	f7fe ffa9 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001f06:	2001      	movs	r0, #1
 8001f08:	f7fe ffb6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 8001f0c:	20e0      	movs	r0, #224	; 0xe0
 8001f0e:	f7fe ffa3 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 8001f12:	200f      	movs	r0, #15
 8001f14:	f7fe ffb0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8001f18:	202a      	movs	r0, #42	; 0x2a
 8001f1a:	f7fe ffad 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 8001f1e:	2028      	movs	r0, #40	; 0x28
 8001f20:	f7fe ffaa 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8001f24:	2008      	movs	r0, #8
 8001f26:	f7fe ffa7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 8001f2a:	200e      	movs	r0, #14
 8001f2c:	f7fe ffa4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8001f30:	2008      	movs	r0, #8
 8001f32:	f7fe ffa1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8001f36:	2054      	movs	r0, #84	; 0x54
 8001f38:	f7fe ff9e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 8001f3c:	20a9      	movs	r0, #169	; 0xa9
 8001f3e:	f7fe ff9b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8001f42:	2043      	movs	r0, #67	; 0x43
 8001f44:	f7fe ff98 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8001f48:	200a      	movs	r0, #10
 8001f4a:	f7fe ff95 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001f4e:	200f      	movs	r0, #15
 8001f50:	f7fe ff92 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7fe ff8f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f7fe ff8c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f7fe ff89 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7fe ff86 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 8001f6c:	20e1      	movs	r0, #225	; 0xe1
 8001f6e:	f7fe ff73 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7fe ff80 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 8001f78:	2015      	movs	r0, #21
 8001f7a:	f7fe ff7d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8001f7e:	2017      	movs	r0, #23
 8001f80:	f7fe ff7a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 8001f84:	2007      	movs	r0, #7
 8001f86:	f7fe ff77 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8001f8a:	2011      	movs	r0, #17
 8001f8c:	f7fe ff74 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 8001f90:	2006      	movs	r0, #6
 8001f92:	f7fe ff71 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 8001f96:	202b      	movs	r0, #43	; 0x2b
 8001f98:	f7fe ff6e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8001f9c:	2056      	movs	r0, #86	; 0x56
 8001f9e:	f7fe ff6b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8001fa2:	203c      	movs	r0, #60	; 0x3c
 8001fa4:	f7fe ff68 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8001fa8:	2005      	movs	r0, #5
 8001faa:	f7fe ff65 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001fae:	2010      	movs	r0, #16
 8001fb0:	f7fe ff62 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001fb4:	200f      	movs	r0, #15
 8001fb6:	f7fe ff5f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001fba:	203f      	movs	r0, #63	; 0x3f
 8001fbc:	f7fe ff5c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001fc0:	203f      	movs	r0, #63	; 0x3f
 8001fc2:	f7fe ff59 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001fc6:	200f      	movs	r0, #15
 8001fc8:	f7fe ff56 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 8001fcc:	202b      	movs	r0, #43	; 0x2b
 8001fce:	f7fe ff43 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7fe ff50 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7fe ff4d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f7fe ff4a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 8001fe4:	203f      	movs	r0, #63	; 0x3f
 8001fe6:	f7fe ff47 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 8001fea:	202a      	movs	r0, #42	; 0x2a
 8001fec:	f7fe ff34 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7fe ff41 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7fe ff3e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7fe ff3b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 8002002:	20ef      	movs	r0, #239	; 0xef
 8002004:	f7fe ff38 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 8002008:	2011      	movs	r0, #17
 800200a:	f7fe ff25 	bl	8000e58 <LCD_WR_REG>
		HAL_Delay(20);
 800200e:	2014      	movs	r0, #20
 8002010:	f003 fcbe 	bl	8005990 <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 8002014:	2029      	movs	r0, #41	; 0x29
 8002016:	f7fe ff1f 	bl	8000e58 <LCD_WR_REG>
 800201a:	f003 b923 	b.w	8005264 <LCD_Init+0x383c>
 800201e:	bf00      	nop
 8002020:	20000258 	.word	0x20000258
 8002024:	08009368 	.word	0x08009368
	}else if(lcddev.id==0x6804) //6804初始化
 8002028:	4b58      	ldr	r3, [pc, #352]	; (800218c <LCD_Init+0x764>)
 800202a:	889b      	ldrh	r3, [r3, #4]
 800202c:	f646 0204 	movw	r2, #26628	; 0x6804
 8002030:	4293      	cmp	r3, r2
 8002032:	f040 80ad 	bne.w	8002190 <LCD_Init+0x768>
	{
		LCD_WR_REG(0X11);
 8002036:	2011      	movs	r0, #17
 8002038:	f7fe ff0e 	bl	8000e58 <LCD_WR_REG>
		HAL_Delay(20);
 800203c:	2014      	movs	r0, #20
 800203e:	f003 fca7 	bl	8005990 <HAL_Delay>
		LCD_WR_REG(0XD0);//VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002042:	20d0      	movs	r0, #208	; 0xd0
 8002044:	f7fe ff08 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X07);
 8002048:	2007      	movs	r0, #7
 800204a:	f7fe ff15 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X42);
 800204e:	2042      	movs	r0, #66	; 0x42
 8002050:	f7fe ff12 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X1D);
 8002054:	201d      	movs	r0, #29
 8002056:	f7fe ff0f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0XD1);//VCOMH VCOM_AC amplitude setting
 800205a:	20d1      	movs	r0, #209	; 0xd1
 800205c:	f7fe fefc 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002060:	2000      	movs	r0, #0
 8002062:	f7fe ff09 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X1a);
 8002066:	201a      	movs	r0, #26
 8002068:	f7fe ff06 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X09);
 800206c:	2009      	movs	r0, #9
 800206e:	f7fe ff03 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0XD2);//Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002072:	20d2      	movs	r0, #210	; 0xd2
 8002074:	f7fe fef0 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 8002078:	2001      	movs	r0, #1
 800207a:	f7fe fefd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X22);
 800207e:	2022      	movs	r0, #34	; 0x22
 8002080:	f7fe fefa 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0XC0);//REV SM GS
 8002084:	20c0      	movs	r0, #192	; 0xc0
 8002086:	f7fe fee7 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X10);
 800208a:	2010      	movs	r0, #16
 800208c:	f7fe fef4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X3B);
 8002090:	203b      	movs	r0, #59	; 0x3b
 8002092:	f7fe fef1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002096:	2000      	movs	r0, #0
 8002098:	f7fe feee 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X02);
 800209c:	2002      	movs	r0, #2
 800209e:	f7fe feeb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X11);
 80020a2:	2011      	movs	r0, #17
 80020a4:	f7fe fee8 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0XC5);// Frame rate setting = 72HZ  when setting 0x03
 80020a8:	20c5      	movs	r0, #197	; 0xc5
 80020aa:	f7fe fed5 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X03);
 80020ae:	2003      	movs	r0, #3
 80020b0:	f7fe fee2 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0XC8);//Gamma setting
 80020b4:	20c8      	movs	r0, #200	; 0xc8
 80020b6:	f7fe fecf 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7fe fedc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 80020c0:	2025      	movs	r0, #37	; 0x25
 80020c2:	f7fe fed9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X21);
 80020c6:	2021      	movs	r0, #33	; 0x21
 80020c8:	f7fe fed6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X05);
 80020cc:	2005      	movs	r0, #5
 80020ce:	f7fe fed3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7fe fed0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X0a);
 80020d8:	200a      	movs	r0, #10
 80020da:	f7fe fecd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X65);
 80020de:	2065      	movs	r0, #101	; 0x65
 80020e0:	f7fe feca 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 80020e4:	2025      	movs	r0, #37	; 0x25
 80020e6:	f7fe fec7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X77);
 80020ea:	2077      	movs	r0, #119	; 0x77
 80020ec:	f7fe fec4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X50);
 80020f0:	2050      	movs	r0, #80	; 0x50
 80020f2:	f7fe fec1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X0f);
 80020f6:	200f      	movs	r0, #15
 80020f8:	f7fe febe 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7fe febb 	bl	8000e78 <LCD_WR_DATA>

   		LCD_WR_REG(0XF8);
 8002102:	20f8      	movs	r0, #248	; 0xf8
 8002104:	f7fe fea8 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 8002108:	2001      	movs	r0, #1
 800210a:	f7fe feb5 	bl	8000e78 <LCD_WR_DATA>

 		LCD_WR_REG(0XFE);
 800210e:	20fe      	movs	r0, #254	; 0xfe
 8002110:	f7fe fea2 	bl	8000e58 <LCD_WR_REG>
 		LCD_WR_DATA(0X00);
 8002114:	2000      	movs	r0, #0
 8002116:	f7fe feaf 	bl	8000e78 <LCD_WR_DATA>
 		LCD_WR_DATA(0X02);
 800211a:	2002      	movs	r0, #2
 800211c:	f7fe feac 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0X20);//Exit invert mode
 8002120:	2020      	movs	r0, #32
 8002122:	f7fe fe99 	bl	8000e58 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002126:	2036      	movs	r0, #54	; 0x36
 8002128:	f7fe fe96 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X08);//原来是a
 800212c:	2008      	movs	r0, #8
 800212e:	f7fe fea3 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0X3A);
 8002132:	203a      	movs	r0, #58	; 0x3a
 8002134:	f7fe fe90 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X55);//16位模式
 8002138:	2055      	movs	r0, #85	; 0x55
 800213a:	f7fe fe9d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0X2B);
 800213e:	202b      	movs	r0, #43	; 0x2b
 8002140:	f7fe fe8a 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002144:	2000      	movs	r0, #0
 8002146:	f7fe fe97 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 800214a:	2000      	movs	r0, #0
 800214c:	f7fe fe94 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8002150:	2001      	movs	r0, #1
 8002152:	f7fe fe91 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X3F);
 8002156:	203f      	movs	r0, #63	; 0x3f
 8002158:	f7fe fe8e 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0X2A);
 800215c:	202a      	movs	r0, #42	; 0x2a
 800215e:	f7fe fe7b 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002162:	2000      	movs	r0, #0
 8002164:	f7fe fe88 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002168:	2000      	movs	r0, #0
 800216a:	f7fe fe85 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 800216e:	2001      	movs	r0, #1
 8002170:	f7fe fe82 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0XDF);
 8002174:	20df      	movs	r0, #223	; 0xdf
 8002176:	f7fe fe7f 	bl	8000e78 <LCD_WR_DATA>
		HAL_Delay(120);
 800217a:	2078      	movs	r0, #120	; 0x78
 800217c:	f003 fc08 	bl	8005990 <HAL_Delay>
		LCD_WR_REG(0X29);
 8002180:	2029      	movs	r0, #41	; 0x29
 8002182:	f7fe fe69 	bl	8000e58 <LCD_WR_REG>
 8002186:	f003 b86d 	b.w	8005264 <LCD_Init+0x383c>
 800218a:	bf00      	nop
 800218c:	20000258 	.word	0x20000258
 	}else if(lcddev.id==0x5310)
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <LCD_Init+0x778>)
 8002192:	889b      	ldrh	r3, [r3, #4]
 8002194:	f245 3210 	movw	r2, #21264	; 0x5310
 8002198:	4293      	cmp	r3, r2
 800219a:	f040 877c 	bne.w	8003096 <LCD_Init+0x166e>
 800219e:	e001      	b.n	80021a4 <LCD_Init+0x77c>
 80021a0:	20000258 	.word	0x20000258
	{
		LCD_WR_REG(0xED);
 80021a4:	20ed      	movs	r0, #237	; 0xed
 80021a6:	f7fe fe57 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7fe fe64 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 80021b0:	20fe      	movs	r0, #254	; 0xfe
 80021b2:	f7fe fe61 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 80021b6:	20ee      	movs	r0, #238	; 0xee
 80021b8:	f7fe fe4e 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 80021bc:	20de      	movs	r0, #222	; 0xde
 80021be:	f7fe fe5b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80021c2:	2021      	movs	r0, #33	; 0x21
 80021c4:	f7fe fe58 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 80021c8:	20f1      	movs	r0, #241	; 0xf1
 80021ca:	f7fe fe45 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80021ce:	2001      	movs	r0, #1
 80021d0:	f7fe fe52 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 80021d4:	20df      	movs	r0, #223	; 0xdf
 80021d6:	f7fe fe3f 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 80021da:	2010      	movs	r0, #16
 80021dc:	f7fe fe4c 	bl	8000e78 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80021e0:	20c4      	movs	r0, #196	; 0xc4
 80021e2:	f7fe fe39 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 80021e6:	208f      	movs	r0, #143	; 0x8f
 80021e8:	f7fe fe46 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 80021ec:	20c6      	movs	r0, #198	; 0xc6
 80021ee:	f7fe fe33 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7fe fe40 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80021f8:	20e2      	movs	r0, #226	; 0xe2
 80021fa:	f7fe fe3d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80021fe:	20e2      	movs	r0, #226	; 0xe2
 8002200:	f7fe fe3a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8002204:	20e2      	movs	r0, #226	; 0xe2
 8002206:	f7fe fe37 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 800220a:	20bf      	movs	r0, #191	; 0xbf
 800220c:	f7fe fe24 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002210:	20aa      	movs	r0, #170	; 0xaa
 8002212:	f7fe fe31 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 8002216:	20b0      	movs	r0, #176	; 0xb0
 8002218:	f7fe fe1e 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 800221c:	200d      	movs	r0, #13
 800221e:	f7fe fe2b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002222:	2000      	movs	r0, #0
 8002224:	f7fe fe28 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8002228:	200d      	movs	r0, #13
 800222a:	f7fe fe25 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800222e:	2000      	movs	r0, #0
 8002230:	f7fe fe22 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8002234:	2011      	movs	r0, #17
 8002236:	f7fe fe1f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800223a:	2000      	movs	r0, #0
 800223c:	f7fe fe1c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8002240:	2019      	movs	r0, #25
 8002242:	f7fe fe19 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002246:	2000      	movs	r0, #0
 8002248:	f7fe fe16 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 800224c:	2021      	movs	r0, #33	; 0x21
 800224e:	f7fe fe13 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002252:	2000      	movs	r0, #0
 8002254:	f7fe fe10 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8002258:	202d      	movs	r0, #45	; 0x2d
 800225a:	f7fe fe0d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800225e:	2000      	movs	r0, #0
 8002260:	f7fe fe0a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8002264:	203d      	movs	r0, #61	; 0x3d
 8002266:	f7fe fe07 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800226a:	2000      	movs	r0, #0
 800226c:	f7fe fe04 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002270:	205d      	movs	r0, #93	; 0x5d
 8002272:	f7fe fe01 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002276:	2000      	movs	r0, #0
 8002278:	f7fe fdfe 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 800227c:	205d      	movs	r0, #93	; 0x5d
 800227e:	f7fe fdfb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002282:	2000      	movs	r0, #0
 8002284:	f7fe fdf8 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8002288:	20b1      	movs	r0, #177	; 0xb1
 800228a:	f7fe fde5 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 800228e:	2080      	movs	r0, #128	; 0x80
 8002290:	f7fe fdf2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002294:	2000      	movs	r0, #0
 8002296:	f7fe fdef 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800229a:	208b      	movs	r0, #139	; 0x8b
 800229c:	f7fe fdec 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7fe fde9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 80022a6:	2096      	movs	r0, #150	; 0x96
 80022a8:	f7fe fde6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7fe fde3 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 80022b2:	20b2      	movs	r0, #178	; 0xb2
 80022b4:	f7fe fdd0 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7fe fddd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022be:	2000      	movs	r0, #0
 80022c0:	f7fe fdda 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 80022c4:	2002      	movs	r0, #2
 80022c6:	f7fe fdd7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7fe fdd4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f7fe fdd1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7fe fdce 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 80022dc:	20b3      	movs	r0, #179	; 0xb3
 80022de:	f7fe fdbb 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7fe fdc8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7fe fdc5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f7fe fdc2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7fe fdbf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7fe fdbc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002300:	2000      	movs	r0, #0
 8002302:	f7fe fdb9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002306:	2000      	movs	r0, #0
 8002308:	f7fe fdb6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800230c:	2000      	movs	r0, #0
 800230e:	f7fe fdb3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002312:	2000      	movs	r0, #0
 8002314:	f7fe fdb0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002318:	2000      	movs	r0, #0
 800231a:	f7fe fdad 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800231e:	2000      	movs	r0, #0
 8002320:	f7fe fdaa 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002324:	2000      	movs	r0, #0
 8002326:	f7fe fda7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800232a:	2000      	movs	r0, #0
 800232c:	f7fe fda4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002330:	2000      	movs	r0, #0
 8002332:	f7fe fda1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002336:	2000      	movs	r0, #0
 8002338:	f7fe fd9e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800233c:	2000      	movs	r0, #0
 800233e:	f7fe fd9b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002342:	2000      	movs	r0, #0
 8002344:	f7fe fd98 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002348:	2000      	movs	r0, #0
 800234a:	f7fe fd95 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800234e:	2000      	movs	r0, #0
 8002350:	f7fe fd92 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002354:	2000      	movs	r0, #0
 8002356:	f7fe fd8f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800235a:	2000      	movs	r0, #0
 800235c:	f7fe fd8c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002360:	2000      	movs	r0, #0
 8002362:	f7fe fd89 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002366:	2000      	movs	r0, #0
 8002368:	f7fe fd86 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800236c:	2000      	movs	r0, #0
 800236e:	f7fe fd83 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 8002372:	20b4      	movs	r0, #180	; 0xb4
 8002374:	f7fe fd70 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8002378:	208b      	movs	r0, #139	; 0x8b
 800237a:	f7fe fd7d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800237e:	2000      	movs	r0, #0
 8002380:	f7fe fd7a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8002384:	2096      	movs	r0, #150	; 0x96
 8002386:	f7fe fd77 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800238a:	2000      	movs	r0, #0
 800238c:	f7fe fd74 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8002390:	20a1      	movs	r0, #161	; 0xa1
 8002392:	f7fe fd71 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002396:	2000      	movs	r0, #0
 8002398:	f7fe fd6e 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 800239c:	20b5      	movs	r0, #181	; 0xb5
 800239e:	f7fe fd5b 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 80023a2:	2002      	movs	r0, #2
 80023a4:	f7fe fd68 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7fe fd65 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80023ae:	2003      	movs	r0, #3
 80023b0:	f7fe fd62 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7fe fd5f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80023ba:	2004      	movs	r0, #4
 80023bc:	f7fe fd5c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe fd59 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 80023c6:	20b6      	movs	r0, #182	; 0xb6
 80023c8:	f7fe fd46 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7fe fd53 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7fe fd50 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 80023d8:	20b7      	movs	r0, #183	; 0xb7
 80023da:	f7fe fd3d 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80023de:	2000      	movs	r0, #0
 80023e0:	f7fe fd4a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7fe fd47 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80023ea:	203f      	movs	r0, #63	; 0x3f
 80023ec:	f7fe fd44 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7fe fd41 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 80023f6:	205e      	movs	r0, #94	; 0x5e
 80023f8:	f7fe fd3e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7fe fd3b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002402:	2064      	movs	r0, #100	; 0x64
 8002404:	f7fe fd38 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002408:	2000      	movs	r0, #0
 800240a:	f7fe fd35 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 800240e:	208c      	movs	r0, #140	; 0x8c
 8002410:	f7fe fd32 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002414:	2000      	movs	r0, #0
 8002416:	f7fe fd2f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 800241a:	20ac      	movs	r0, #172	; 0xac
 800241c:	f7fe fd2c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002420:	2000      	movs	r0, #0
 8002422:	f7fe fd29 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002426:	20dc      	movs	r0, #220	; 0xdc
 8002428:	f7fe fd26 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800242c:	2000      	movs	r0, #0
 800242e:	f7fe fd23 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8002432:	2070      	movs	r0, #112	; 0x70
 8002434:	f7fe fd20 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe fd1d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 800243e:	2090      	movs	r0, #144	; 0x90
 8002440:	f7fe fd1a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002444:	2000      	movs	r0, #0
 8002446:	f7fe fd17 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 800244a:	20eb      	movs	r0, #235	; 0xeb
 800244c:	f7fe fd14 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002450:	2000      	movs	r0, #0
 8002452:	f7fe fd11 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002456:	20dc      	movs	r0, #220	; 0xdc
 8002458:	f7fe fd0e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800245c:	2000      	movs	r0, #0
 800245e:	f7fe fd0b 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8002462:	20b8      	movs	r0, #184	; 0xb8
 8002464:	f7fe fcf8 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002468:	2000      	movs	r0, #0
 800246a:	f7fe fd05 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800246e:	2000      	movs	r0, #0
 8002470:	f7fe fd02 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002474:	2000      	movs	r0, #0
 8002476:	f7fe fcff 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800247a:	2000      	movs	r0, #0
 800247c:	f7fe fcfc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002480:	2000      	movs	r0, #0
 8002482:	f7fe fcf9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002486:	2000      	movs	r0, #0
 8002488:	f7fe fcf6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800248c:	2000      	movs	r0, #0
 800248e:	f7fe fcf3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002492:	2000      	movs	r0, #0
 8002494:	f7fe fcf0 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8002498:	20ba      	movs	r0, #186	; 0xba
 800249a:	f7fe fcdd 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 800249e:	2024      	movs	r0, #36	; 0x24
 80024a0:	f7fe fcea 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024a4:	2000      	movs	r0, #0
 80024a6:	f7fe fce7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7fe fce4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe fce1 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 80024b6:	20c1      	movs	r0, #193	; 0xc1
 80024b8:	f7fe fcce 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 80024bc:	2020      	movs	r0, #32
 80024be:	f7fe fcdb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024c2:	2000      	movs	r0, #0
 80024c4:	f7fe fcd8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 80024c8:	2054      	movs	r0, #84	; 0x54
 80024ca:	f7fe fcd5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f7fe fcd2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 80024d4:	20ff      	movs	r0, #255	; 0xff
 80024d6:	f7fe fccf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024da:	2000      	movs	r0, #0
 80024dc:	f7fe fccc 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 80024e0:	20c2      	movs	r0, #194	; 0xc2
 80024e2:	f7fe fcb9 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 80024e6:	200a      	movs	r0, #10
 80024e8:	f7fe fcc6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe fcc3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80024f2:	2004      	movs	r0, #4
 80024f4:	f7fe fcc0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7fe fcbd 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 80024fe:	20c3      	movs	r0, #195	; 0xc3
 8002500:	f7fe fcaa 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8002504:	203c      	movs	r0, #60	; 0x3c
 8002506:	f7fe fcb7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800250a:	2000      	movs	r0, #0
 800250c:	f7fe fcb4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8002510:	203a      	movs	r0, #58	; 0x3a
 8002512:	f7fe fcb1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002516:	2000      	movs	r0, #0
 8002518:	f7fe fcae 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 800251c:	2039      	movs	r0, #57	; 0x39
 800251e:	f7fe fcab 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002522:	2000      	movs	r0, #0
 8002524:	f7fe fca8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8002528:	2037      	movs	r0, #55	; 0x37
 800252a:	f7fe fca5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800252e:	2000      	movs	r0, #0
 8002530:	f7fe fca2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002534:	203c      	movs	r0, #60	; 0x3c
 8002536:	f7fe fc9f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800253a:	2000      	movs	r0, #0
 800253c:	f7fe fc9c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002540:	2036      	movs	r0, #54	; 0x36
 8002542:	f7fe fc99 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe fc96 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 800254c:	2032      	movs	r0, #50	; 0x32
 800254e:	f7fe fc93 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002552:	2000      	movs	r0, #0
 8002554:	f7fe fc90 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002558:	202f      	movs	r0, #47	; 0x2f
 800255a:	f7fe fc8d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800255e:	2000      	movs	r0, #0
 8002560:	f7fe fc8a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002564:	202c      	movs	r0, #44	; 0x2c
 8002566:	f7fe fc87 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800256a:	2000      	movs	r0, #0
 800256c:	f7fe fc84 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002570:	2029      	movs	r0, #41	; 0x29
 8002572:	f7fe fc81 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002576:	2000      	movs	r0, #0
 8002578:	f7fe fc7e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 800257c:	2026      	movs	r0, #38	; 0x26
 800257e:	f7fe fc7b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002582:	2000      	movs	r0, #0
 8002584:	f7fe fc78 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002588:	2024      	movs	r0, #36	; 0x24
 800258a:	f7fe fc75 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800258e:	2000      	movs	r0, #0
 8002590:	f7fe fc72 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002594:	2024      	movs	r0, #36	; 0x24
 8002596:	f7fe fc6f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe fc6c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 80025a0:	2023      	movs	r0, #35	; 0x23
 80025a2:	f7fe fc69 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe fc66 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80025ac:	203c      	movs	r0, #60	; 0x3c
 80025ae:	f7fe fc63 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7fe fc60 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80025b8:	2036      	movs	r0, #54	; 0x36
 80025ba:	f7fe fc5d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025be:	2000      	movs	r0, #0
 80025c0:	f7fe fc5a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 80025c4:	2032      	movs	r0, #50	; 0x32
 80025c6:	f7fe fc57 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7fe fc54 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 80025d0:	202f      	movs	r0, #47	; 0x2f
 80025d2:	f7fe fc51 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe fc4e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 80025dc:	202c      	movs	r0, #44	; 0x2c
 80025de:	f7fe fc4b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fc48 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80025e8:	2029      	movs	r0, #41	; 0x29
 80025ea:	f7fe fc45 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7fe fc42 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 80025f4:	2026      	movs	r0, #38	; 0x26
 80025f6:	f7fe fc3f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe fc3c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002600:	2024      	movs	r0, #36	; 0x24
 8002602:	f7fe fc39 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe fc36 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 800260c:	2024      	movs	r0, #36	; 0x24
 800260e:	f7fe fc33 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe fc30 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002618:	2023      	movs	r0, #35	; 0x23
 800261a:	f7fe fc2d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe fc2a 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8002624:	20c4      	movs	r0, #196	; 0xc4
 8002626:	f7fe fc17 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 800262a:	2062      	movs	r0, #98	; 0x62
 800262c:	f7fe fc24 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002630:	2000      	movs	r0, #0
 8002632:	f7fe fc21 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8002636:	2005      	movs	r0, #5
 8002638:	f7fe fc1e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800263c:	2000      	movs	r0, #0
 800263e:	f7fe fc1b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002642:	2084      	movs	r0, #132	; 0x84
 8002644:	f7fe fc18 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002648:	2000      	movs	r0, #0
 800264a:	f7fe fc15 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 800264e:	20f0      	movs	r0, #240	; 0xf0
 8002650:	f7fe fc12 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002654:	2000      	movs	r0, #0
 8002656:	f7fe fc0f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 800265a:	2018      	movs	r0, #24
 800265c:	f7fe fc0c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe fc09 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 8002666:	20a4      	movs	r0, #164	; 0xa4
 8002668:	f7fe fc06 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe fc03 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002672:	2018      	movs	r0, #24
 8002674:	f7fe fc00 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe fbfd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 800267e:	2050      	movs	r0, #80	; 0x50
 8002680:	f7fe fbfa 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002684:	2000      	movs	r0, #0
 8002686:	f7fe fbf7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 800268a:	200c      	movs	r0, #12
 800268c:	f7fe fbf4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002690:	2000      	movs	r0, #0
 8002692:	f7fe fbf1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8002696:	2017      	movs	r0, #23
 8002698:	f7fe fbee 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800269c:	2000      	movs	r0, #0
 800269e:	f7fe fbeb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 80026a2:	2095      	movs	r0, #149	; 0x95
 80026a4:	f7fe fbe8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7fe fbe5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80026ae:	20f3      	movs	r0, #243	; 0xf3
 80026b0:	f7fe fbe2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe fbdf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 80026ba:	20e6      	movs	r0, #230	; 0xe6
 80026bc:	f7fe fbdc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe fbd9 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 80026c6:	20c5      	movs	r0, #197	; 0xc5
 80026c8:	f7fe fbc6 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 80026cc:	2032      	movs	r0, #50	; 0x32
 80026ce:	f7fe fbd3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7fe fbd0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80026d8:	2044      	movs	r0, #68	; 0x44
 80026da:	f7fe fbcd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7fe fbca 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 80026e4:	2065      	movs	r0, #101	; 0x65
 80026e6:	f7fe fbc7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7fe fbc4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80026f0:	2076      	movs	r0, #118	; 0x76
 80026f2:	f7fe fbc1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026f6:	2000      	movs	r0, #0
 80026f8:	f7fe fbbe 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80026fc:	2088      	movs	r0, #136	; 0x88
 80026fe:	f7fe fbbb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe fbb8 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8002708:	20c6      	movs	r0, #198	; 0xc6
 800270a:	f7fe fba5 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 800270e:	2020      	movs	r0, #32
 8002710:	f7fe fbb2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe fbaf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 800271a:	2017      	movs	r0, #23
 800271c:	f7fe fbac 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe fba9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002726:	2001      	movs	r0, #1
 8002728:	f7fe fba6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800272c:	2000      	movs	r0, #0
 800272e:	f7fe fba3 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8002732:	20c7      	movs	r0, #199	; 0xc7
 8002734:	f7fe fb90 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002738:	2000      	movs	r0, #0
 800273a:	f7fe fb9d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800273e:	2000      	movs	r0, #0
 8002740:	f7fe fb9a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002744:	2000      	movs	r0, #0
 8002746:	f7fe fb97 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe fb94 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8002750:	20c8      	movs	r0, #200	; 0xc8
 8002752:	f7fe fb81 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002756:	2000      	movs	r0, #0
 8002758:	f7fe fb8e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800275c:	2000      	movs	r0, #0
 800275e:	f7fe fb8b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002762:	2000      	movs	r0, #0
 8002764:	f7fe fb88 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe fb85 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 800276e:	20c9      	movs	r0, #201	; 0xc9
 8002770:	f7fe fb72 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002774:	2000      	movs	r0, #0
 8002776:	f7fe fb7f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800277a:	2000      	movs	r0, #0
 800277c:	f7fe fb7c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002780:	2000      	movs	r0, #0
 8002782:	f7fe fb79 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe fb76 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800278c:	2000      	movs	r0, #0
 800278e:	f7fe fb73 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe fb70 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002798:	2000      	movs	r0, #0
 800279a:	f7fe fb6d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800279e:	2000      	movs	r0, #0
 80027a0:	f7fe fb6a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7fe fb67 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7fe fb64 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f7fe fb61 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7fe fb5e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027bc:	2000      	movs	r0, #0
 80027be:	f7fe fb5b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7fe fb58 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027c8:	2000      	movs	r0, #0
 80027ca:	f7fe fb55 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe fb52 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 80027d4:	20e0      	movs	r0, #224	; 0xe0
 80027d6:	f7fe fb3f 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80027da:	2016      	movs	r0, #22
 80027dc:	f7fe fb4c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f7fe fb49 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80027e6:	201c      	movs	r0, #28
 80027e8:	f7fe fb46 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7fe fb43 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80027f2:	2021      	movs	r0, #33	; 0x21
 80027f4:	f7fe fb40 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027f8:	2000      	movs	r0, #0
 80027fa:	f7fe fb3d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80027fe:	2036      	movs	r0, #54	; 0x36
 8002800:	f7fe fb3a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002804:	2000      	movs	r0, #0
 8002806:	f7fe fb37 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 800280a:	2046      	movs	r0, #70	; 0x46
 800280c:	f7fe fb34 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002810:	2000      	movs	r0, #0
 8002812:	f7fe fb31 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8002816:	2052      	movs	r0, #82	; 0x52
 8002818:	f7fe fb2e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800281c:	2000      	movs	r0, #0
 800281e:	f7fe fb2b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002822:	2064      	movs	r0, #100	; 0x64
 8002824:	f7fe fb28 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002828:	2000      	movs	r0, #0
 800282a:	f7fe fb25 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 800282e:	207a      	movs	r0, #122	; 0x7a
 8002830:	f7fe fb22 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002834:	2000      	movs	r0, #0
 8002836:	f7fe fb1f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800283a:	208b      	movs	r0, #139	; 0x8b
 800283c:	f7fe fb1c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002840:	2000      	movs	r0, #0
 8002842:	f7fe fb19 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002846:	2099      	movs	r0, #153	; 0x99
 8002848:	f7fe fb16 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800284c:	2000      	movs	r0, #0
 800284e:	f7fe fb13 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002852:	20a8      	movs	r0, #168	; 0xa8
 8002854:	f7fe fb10 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002858:	2000      	movs	r0, #0
 800285a:	f7fe fb0d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 800285e:	20b9      	movs	r0, #185	; 0xb9
 8002860:	f7fe fb0a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002864:	2000      	movs	r0, #0
 8002866:	f7fe fb07 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800286a:	20c4      	movs	r0, #196	; 0xc4
 800286c:	f7fe fb04 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002870:	2000      	movs	r0, #0
 8002872:	f7fe fb01 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002876:	20ca      	movs	r0, #202	; 0xca
 8002878:	f7fe fafe 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800287c:	2000      	movs	r0, #0
 800287e:	f7fe fafb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002882:	20d2      	movs	r0, #210	; 0xd2
 8002884:	f7fe faf8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002888:	2000      	movs	r0, #0
 800288a:	f7fe faf5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 800288e:	20d9      	movs	r0, #217	; 0xd9
 8002890:	f7fe faf2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002894:	2000      	movs	r0, #0
 8002896:	f7fe faef 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 800289a:	20e0      	movs	r0, #224	; 0xe0
 800289c:	f7fe faec 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7fe fae9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80028a6:	20f3      	movs	r0, #243	; 0xf3
 80028a8:	f7fe fae6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7fe fae3 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 80028b2:	20e1      	movs	r0, #225	; 0xe1
 80028b4:	f7fe fad0 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80028b8:	2016      	movs	r0, #22
 80028ba:	f7fe fadd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028be:	2000      	movs	r0, #0
 80028c0:	f7fe fada 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80028c4:	201c      	movs	r0, #28
 80028c6:	f7fe fad7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ca:	2000      	movs	r0, #0
 80028cc:	f7fe fad4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 80028d0:	2022      	movs	r0, #34	; 0x22
 80028d2:	f7fe fad1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7fe face 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80028dc:	2036      	movs	r0, #54	; 0x36
 80028de:	f7fe facb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028e2:	2000      	movs	r0, #0
 80028e4:	f7fe fac8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80028e8:	2045      	movs	r0, #69	; 0x45
 80028ea:	f7fe fac5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fe fac2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80028f4:	2052      	movs	r0, #82	; 0x52
 80028f6:	f7fe fabf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7fe fabc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002900:	2064      	movs	r0, #100	; 0x64
 8002902:	f7fe fab9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe fab6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 800290c:	207a      	movs	r0, #122	; 0x7a
 800290e:	f7fe fab3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002912:	2000      	movs	r0, #0
 8002914:	f7fe fab0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8002918:	208b      	movs	r0, #139	; 0x8b
 800291a:	f7fe faad 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fe faaa 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002924:	2099      	movs	r0, #153	; 0x99
 8002926:	f7fe faa7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe faa4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002930:	20a8      	movs	r0, #168	; 0xa8
 8002932:	f7fe faa1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002936:	2000      	movs	r0, #0
 8002938:	f7fe fa9e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 800293c:	20b9      	movs	r0, #185	; 0xb9
 800293e:	f7fe fa9b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002942:	2000      	movs	r0, #0
 8002944:	f7fe fa98 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002948:	20c4      	movs	r0, #196	; 0xc4
 800294a:	f7fe fa95 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800294e:	2000      	movs	r0, #0
 8002950:	f7fe fa92 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002954:	20ca      	movs	r0, #202	; 0xca
 8002956:	f7fe fa8f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800295a:	2000      	movs	r0, #0
 800295c:	f7fe fa8c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002960:	20d2      	movs	r0, #210	; 0xd2
 8002962:	f7fe fa89 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002966:	2000      	movs	r0, #0
 8002968:	f7fe fa86 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 800296c:	20d8      	movs	r0, #216	; 0xd8
 800296e:	f7fe fa83 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002972:	2000      	movs	r0, #0
 8002974:	f7fe fa80 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002978:	20e0      	movs	r0, #224	; 0xe0
 800297a:	f7fe fa7d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800297e:	2000      	movs	r0, #0
 8002980:	f7fe fa7a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002984:	20f3      	movs	r0, #243	; 0xf3
 8002986:	f7fe fa77 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800298a:	2000      	movs	r0, #0
 800298c:	f7fe fa74 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8002990:	20e2      	movs	r0, #226	; 0xe2
 8002992:	f7fe fa61 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002996:	2005      	movs	r0, #5
 8002998:	f7fe fa6e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800299c:	2000      	movs	r0, #0
 800299e:	f7fe fa6b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 80029a2:	200b      	movs	r0, #11
 80029a4:	f7fe fa68 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029a8:	2000      	movs	r0, #0
 80029aa:	f7fe fa65 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 80029ae:	201b      	movs	r0, #27
 80029b0:	f7fe fa62 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7fe fa5f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80029ba:	2034      	movs	r0, #52	; 0x34
 80029bc:	f7fe fa5c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7fe fa59 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80029c6:	2044      	movs	r0, #68	; 0x44
 80029c8:	f7fe fa56 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7fe fa53 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 80029d2:	204f      	movs	r0, #79	; 0x4f
 80029d4:	f7fe fa50 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fe fa4d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 80029de:	2061      	movs	r0, #97	; 0x61
 80029e0:	f7fe fa4a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fe fa47 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 80029ea:	2079      	movs	r0, #121	; 0x79
 80029ec:	f7fe fa44 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fe fa41 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80029f6:	2088      	movs	r0, #136	; 0x88
 80029f8:	f7fe fa3e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7fe fa3b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8002a02:	2097      	movs	r0, #151	; 0x97
 8002a04:	f7fe fa38 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fe fa35 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8002a0e:	20a6      	movs	r0, #166	; 0xa6
 8002a10:	f7fe fa32 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe fa2f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8002a1a:	20b7      	movs	r0, #183	; 0xb7
 8002a1c:	f7fe fa2c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7fe fa29 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8002a26:	20c2      	movs	r0, #194	; 0xc2
 8002a28:	f7fe fa26 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fe fa23 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8002a32:	20c7      	movs	r0, #199	; 0xc7
 8002a34:	f7fe fa20 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fe fa1d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8002a3e:	20d1      	movs	r0, #209	; 0xd1
 8002a40:	f7fe fa1a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fe fa17 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 8002a4a:	20d6      	movs	r0, #214	; 0xd6
 8002a4c:	f7fe fa14 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7fe fa11 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002a56:	20dd      	movs	r0, #221	; 0xdd
 8002a58:	f7fe fa0e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fe fa0b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002a62:	20f3      	movs	r0, #243	; 0xf3
 8002a64:	f7fe fa08 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7fe fa05 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 8002a6e:	20e3      	movs	r0, #227	; 0xe3
 8002a70:	f7fe f9f2 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002a74:	2005      	movs	r0, #5
 8002a76:	f7fe f9ff 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7fe f9fc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8002a80:	200a      	movs	r0, #10
 8002a82:	f7fe f9f9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fe f9f6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002a8c:	201c      	movs	r0, #28
 8002a8e:	f7fe f9f3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7fe f9f0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002a98:	2033      	movs	r0, #51	; 0x33
 8002a9a:	f7fe f9ed 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fe f9ea 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002aa4:	2044      	movs	r0, #68	; 0x44
 8002aa6:	f7fe f9e7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7fe f9e4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002ab0:	2050      	movs	r0, #80	; 0x50
 8002ab2:	f7fe f9e1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7fe f9de 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 8002abc:	2062      	movs	r0, #98	; 0x62
 8002abe:	f7fe f9db 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7fe f9d8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 8002ac8:	2078      	movs	r0, #120	; 0x78
 8002aca:	f7fe f9d5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7fe f9d2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ad4:	2088      	movs	r0, #136	; 0x88
 8002ad6:	f7fe f9cf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fe f9cc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8002ae0:	2097      	movs	r0, #151	; 0x97
 8002ae2:	f7fe f9c9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7fe f9c6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8002aec:	20a6      	movs	r0, #166	; 0xa6
 8002aee:	f7fe f9c3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7fe f9c0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8002af8:	20b7      	movs	r0, #183	; 0xb7
 8002afa:	f7fe f9bd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7fe f9ba 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8002b04:	20c2      	movs	r0, #194	; 0xc2
 8002b06:	f7fe f9b7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f7fe f9b4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8002b10:	20c7      	movs	r0, #199	; 0xc7
 8002b12:	f7fe f9b1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f7fe f9ae 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8002b1c:	20d1      	movs	r0, #209	; 0xd1
 8002b1e:	f7fe f9ab 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f7fe f9a8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 8002b28:	20d5      	movs	r0, #213	; 0xd5
 8002b2a:	f7fe f9a5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7fe f9a2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002b34:	20dd      	movs	r0, #221	; 0xdd
 8002b36:	f7fe f99f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	f7fe f99c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002b40:	20f3      	movs	r0, #243	; 0xf3
 8002b42:	f7fe f999 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7fe f996 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8002b4c:	20e4      	movs	r0, #228	; 0xe4
 8002b4e:	f7fe f983 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002b52:	2001      	movs	r0, #1
 8002b54:	f7fe f990 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b58:	2000      	movs	r0, #0
 8002b5a:	f7fe f98d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f7fe f98a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b64:	2000      	movs	r0, #0
 8002b66:	f7fe f987 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	f7fe f984 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7fe f981 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8002b76:	202a      	movs	r0, #42	; 0x2a
 8002b78:	f7fe f97e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7fe f97b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002b82:	203c      	movs	r0, #60	; 0x3c
 8002b84:	f7fe f978 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f7fe f975 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8002b8e:	204b      	movs	r0, #75	; 0x4b
 8002b90:	f7fe f972 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b94:	2000      	movs	r0, #0
 8002b96:	f7fe f96f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002b9a:	205d      	movs	r0, #93	; 0x5d
 8002b9c:	f7fe f96c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7fe f969 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002ba6:	2074      	movs	r0, #116	; 0x74
 8002ba8:	f7fe f966 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f7fe f963 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002bb2:	2084      	movs	r0, #132	; 0x84
 8002bb4:	f7fe f960 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bb8:	2000      	movs	r0, #0
 8002bba:	f7fe f95d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8002bbe:	2093      	movs	r0, #147	; 0x93
 8002bc0:	f7fe f95a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f7fe f957 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002bca:	20a2      	movs	r0, #162	; 0xa2
 8002bcc:	f7fe f954 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7fe f951 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002bd6:	20b3      	movs	r0, #179	; 0xb3
 8002bd8:	f7fe f94e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bdc:	2000      	movs	r0, #0
 8002bde:	f7fe f94b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8002be2:	20be      	movs	r0, #190	; 0xbe
 8002be4:	f7fe f948 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002be8:	2000      	movs	r0, #0
 8002bea:	f7fe f945 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002bee:	20c4      	movs	r0, #196	; 0xc4
 8002bf0:	f7fe f942 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7fe f93f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8002bfa:	20cd      	movs	r0, #205	; 0xcd
 8002bfc:	f7fe f93c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c00:	2000      	movs	r0, #0
 8002c02:	f7fe f939 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8002c06:	20d3      	movs	r0, #211	; 0xd3
 8002c08:	f7fe f936 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c0c:	2000      	movs	r0, #0
 8002c0e:	f7fe f933 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002c12:	20dd      	movs	r0, #221	; 0xdd
 8002c14:	f7fe f930 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c18:	2000      	movs	r0, #0
 8002c1a:	f7fe f92d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002c1e:	20f3      	movs	r0, #243	; 0xf3
 8002c20:	f7fe f92a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7fe f927 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 8002c2a:	20e5      	movs	r0, #229	; 0xe5
 8002c2c:	f7fe f914 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7fe f921 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7fe f91e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	f7fe f91b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c42:	2000      	movs	r0, #0
 8002c44:	f7fe f918 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f7fe f915 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c4e:	2000      	movs	r0, #0
 8002c50:	f7fe f912 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002c54:	2029      	movs	r0, #41	; 0x29
 8002c56:	f7fe f90f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	f7fe f90c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002c60:	203c      	movs	r0, #60	; 0x3c
 8002c62:	f7fe f909 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c66:	2000      	movs	r0, #0
 8002c68:	f7fe f906 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8002c6c:	204b      	movs	r0, #75	; 0x4b
 8002c6e:	f7fe f903 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c72:	2000      	movs	r0, #0
 8002c74:	f7fe f900 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002c78:	205d      	movs	r0, #93	; 0x5d
 8002c7a:	f7fe f8fd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7fe f8fa 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002c84:	2074      	movs	r0, #116	; 0x74
 8002c86:	f7fe f8f7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fe f8f4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002c90:	2084      	movs	r0, #132	; 0x84
 8002c92:	f7fe f8f1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c96:	2000      	movs	r0, #0
 8002c98:	f7fe f8ee 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8002c9c:	2093      	movs	r0, #147	; 0x93
 8002c9e:	f7fe f8eb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7fe f8e8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002ca8:	20a2      	movs	r0, #162	; 0xa2
 8002caa:	f7fe f8e5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7fe f8e2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002cb4:	20b3      	movs	r0, #179	; 0xb3
 8002cb6:	f7fe f8df 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7fe f8dc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8002cc0:	20be      	movs	r0, #190	; 0xbe
 8002cc2:	f7fe f8d9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f7fe f8d6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002ccc:	20c4      	movs	r0, #196	; 0xc4
 8002cce:	f7fe f8d3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f7fe f8d0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8002cd8:	20cd      	movs	r0, #205	; 0xcd
 8002cda:	f7fe f8cd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cde:	2000      	movs	r0, #0
 8002ce0:	f7fe f8ca 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8002ce4:	20d3      	movs	r0, #211	; 0xd3
 8002ce6:	f7fe f8c7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cea:	2000      	movs	r0, #0
 8002cec:	f7fe f8c4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002cf0:	20dc      	movs	r0, #220	; 0xdc
 8002cf2:	f7fe f8c1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f7fe f8be 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002cfc:	20f3      	movs	r0, #243	; 0xf3
 8002cfe:	f7fe f8bb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7fe f8b8 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 8002d08:	20e6      	movs	r0, #230	; 0xe6
 8002d0a:	f7fe f8a5 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 8002d0e:	2011      	movs	r0, #17
 8002d10:	f7fe f8b2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d14:	2000      	movs	r0, #0
 8002d16:	f7fe f8af 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8002d1a:	2034      	movs	r0, #52	; 0x34
 8002d1c:	f7fe f8ac 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d20:	2000      	movs	r0, #0
 8002d22:	f7fe f8a9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002d26:	2056      	movs	r0, #86	; 0x56
 8002d28:	f7fe f8a6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fe f8a3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002d32:	2076      	movs	r0, #118	; 0x76
 8002d34:	f7fe f8a0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d38:	2000      	movs	r0, #0
 8002d3a:	f7fe f89d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002d3e:	2077      	movs	r0, #119	; 0x77
 8002d40:	f7fe f89a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fe f897 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002d4a:	2066      	movs	r0, #102	; 0x66
 8002d4c:	f7fe f894 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7fe f891 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002d56:	2088      	movs	r0, #136	; 0x88
 8002d58:	f7fe f88e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	f7fe f88b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002d62:	2099      	movs	r0, #153	; 0x99
 8002d64:	f7fe f888 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fe f885 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002d6e:	20bb      	movs	r0, #187	; 0xbb
 8002d70:	f7fe f882 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d74:	2000      	movs	r0, #0
 8002d76:	f7fe f87f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002d7a:	2099      	movs	r0, #153	; 0x99
 8002d7c:	f7fe f87c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d80:	2000      	movs	r0, #0
 8002d82:	f7fe f879 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002d86:	2066      	movs	r0, #102	; 0x66
 8002d88:	f7fe f876 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7fe f873 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002d92:	2055      	movs	r0, #85	; 0x55
 8002d94:	f7fe f870 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f7fe f86d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002d9e:	2055      	movs	r0, #85	; 0x55
 8002da0:	f7fe f86a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7fe f867 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002daa:	2045      	movs	r0, #69	; 0x45
 8002dac:	f7fe f864 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002db0:	2000      	movs	r0, #0
 8002db2:	f7fe f861 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8002db6:	2043      	movs	r0, #67	; 0x43
 8002db8:	f7fe f85e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f7fe f85b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002dc2:	2044      	movs	r0, #68	; 0x44
 8002dc4:	f7fe f858 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7fe f855 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 8002dce:	20e7      	movs	r0, #231	; 0xe7
 8002dd0:	f7fe f842 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8002dd4:	2032      	movs	r0, #50	; 0x32
 8002dd6:	f7fe f84f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fe f84c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002de0:	2055      	movs	r0, #85	; 0x55
 8002de2:	f7fe f849 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002de6:	2000      	movs	r0, #0
 8002de8:	f7fe f846 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002dec:	2076      	movs	r0, #118	; 0x76
 8002dee:	f7fe f843 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f7fe f840 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002df8:	2066      	movs	r0, #102	; 0x66
 8002dfa:	f7fe f83d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dfe:	2000      	movs	r0, #0
 8002e00:	f7fe f83a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8002e04:	2067      	movs	r0, #103	; 0x67
 8002e06:	f7fe f837 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f7fe f834 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8002e10:	2067      	movs	r0, #103	; 0x67
 8002e12:	f7fe f831 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e16:	2000      	movs	r0, #0
 8002e18:	f7fe f82e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002e1c:	2087      	movs	r0, #135	; 0x87
 8002e1e:	f7fe f82b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7fe f828 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002e28:	2099      	movs	r0, #153	; 0x99
 8002e2a:	f7fe f825 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7fe f822 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002e34:	20bb      	movs	r0, #187	; 0xbb
 8002e36:	f7fe f81f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7fe f81c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002e40:	2099      	movs	r0, #153	; 0x99
 8002e42:	f7fe f819 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e46:	2000      	movs	r0, #0
 8002e48:	f7fe f816 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002e4c:	2077      	movs	r0, #119	; 0x77
 8002e4e:	f7fe f813 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e52:	2000      	movs	r0, #0
 8002e54:	f7fe f810 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002e58:	2044      	movs	r0, #68	; 0x44
 8002e5a:	f7fe f80d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e5e:	2000      	movs	r0, #0
 8002e60:	f7fe f80a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002e64:	2056      	movs	r0, #86	; 0x56
 8002e66:	f7fe f807 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7fe f804 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002e70:	2023      	movs	r0, #35	; 0x23
 8002e72:	f7fe f801 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f7fd fffe 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002e7c:	2033      	movs	r0, #51	; 0x33
 8002e7e:	f7fd fffb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f7fd fff8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002e88:	2045      	movs	r0, #69	; 0x45
 8002e8a:	f7fd fff5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7fd fff2 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8002e94:	20e8      	movs	r0, #232	; 0xe8
 8002e96:	f7fd ffdf 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7fd ffec 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7fd ffe9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002ea6:	2099      	movs	r0, #153	; 0x99
 8002ea8:	f7fd ffe6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fd ffe3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002eb2:	2087      	movs	r0, #135	; 0x87
 8002eb4:	f7fd ffe0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f7fd ffdd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ebe:	2088      	movs	r0, #136	; 0x88
 8002ec0:	f7fd ffda 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7fd ffd7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002eca:	2077      	movs	r0, #119	; 0x77
 8002ecc:	f7fd ffd4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7fd ffd1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002ed6:	2066      	movs	r0, #102	; 0x66
 8002ed8:	f7fd ffce 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7fd ffcb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ee2:	2088      	movs	r0, #136	; 0x88
 8002ee4:	f7fd ffc8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7fd ffc5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 8002eee:	20aa      	movs	r0, #170	; 0xaa
 8002ef0:	f7fd ffc2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	f7fd ffbf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002efa:	20bb      	movs	r0, #187	; 0xbb
 8002efc:	f7fd ffbc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f00:	2000      	movs	r0, #0
 8002f02:	f7fd ffb9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002f06:	2099      	movs	r0, #153	; 0x99
 8002f08:	f7fd ffb6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7fd ffb3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002f12:	2066      	movs	r0, #102	; 0x66
 8002f14:	f7fd ffb0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f18:	2000      	movs	r0, #0
 8002f1a:	f7fd ffad 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002f1e:	2055      	movs	r0, #85	; 0x55
 8002f20:	f7fd ffaa 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f7fd ffa7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002f2a:	2055      	movs	r0, #85	; 0x55
 8002f2c:	f7fd ffa4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f30:	2000      	movs	r0, #0
 8002f32:	f7fd ffa1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002f36:	2044      	movs	r0, #68	; 0x44
 8002f38:	f7fd ff9e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7fd ff9b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002f42:	2044      	movs	r0, #68	; 0x44
 8002f44:	f7fd ff98 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f48:	2000      	movs	r0, #0
 8002f4a:	f7fd ff95 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002f4e:	2055      	movs	r0, #85	; 0x55
 8002f50:	f7fd ff92 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7fd ff8f 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 8002f5a:	20e9      	movs	r0, #233	; 0xe9
 8002f5c:	f7fd ff7c 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002f60:	20aa      	movs	r0, #170	; 0xaa
 8002f62:	f7fd ff89 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f66:	2000      	movs	r0, #0
 8002f68:	f7fd ff86 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	f7fd ff83 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f7fd ff80 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f7fd ff6d 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002f7e:	20aa      	movs	r0, #170	; 0xaa
 8002f80:	f7fd ff7a 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8002f84:	20cf      	movs	r0, #207	; 0xcf
 8002f86:	f7fd ff67 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7fd ff74 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7fd ff71 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f96:	2000      	movs	r0, #0
 8002f98:	f7fd ff6e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7fd ff6b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f7fd ff68 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f7fd ff65 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fae:	2000      	movs	r0, #0
 8002fb0:	f7fd ff62 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fb4:	2000      	movs	r0, #0
 8002fb6:	f7fd ff5f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fba:	2000      	movs	r0, #0
 8002fbc:	f7fd ff5c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	f7fd ff59 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fd ff56 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f7fd ff53 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7fd ff50 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fd8:	2000      	movs	r0, #0
 8002fda:	f7fd ff4d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fde:	2000      	movs	r0, #0
 8002fe0:	f7fd ff4a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f7fd ff47 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f7fd ff44 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 8002ff0:	20f0      	movs	r0, #240	; 0xf0
 8002ff2:	f7fd ff31 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002ff6:	2000      	movs	r0, #0
 8002ff8:	f7fd ff3e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002ffc:	2050      	movs	r0, #80	; 0x50
 8002ffe:	f7fd ff3b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003002:	2000      	movs	r0, #0
 8003004:	f7fd ff38 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003008:	2000      	movs	r0, #0
 800300a:	f7fd ff35 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800300e:	2000      	movs	r0, #0
 8003010:	f7fd ff32 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8003014:	20f3      	movs	r0, #243	; 0xf3
 8003016:	f7fd ff1f 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800301a:	2000      	movs	r0, #0
 800301c:	f7fd ff2c 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 8003020:	20f9      	movs	r0, #249	; 0xf9
 8003022:	f7fd ff19 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 8003026:	2006      	movs	r0, #6
 8003028:	f7fd ff26 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 800302c:	2010      	movs	r0, #16
 800302e:	f7fd ff23 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003032:	2029      	movs	r0, #41	; 0x29
 8003034:	f7fd ff20 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003038:	2000      	movs	r0, #0
 800303a:	f7fd ff1d 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 800303e:	203a      	movs	r0, #58	; 0x3a
 8003040:	f7fd ff0a 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8003044:	2055      	movs	r0, #85	; 0x55
 8003046:	f7fd ff17 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 800304a:	2011      	movs	r0, #17
 800304c:	f7fd ff04 	bl	8000e58 <LCD_WR_REG>
		HAL_Delay(100);
 8003050:	2064      	movs	r0, #100	; 0x64
 8003052:	f002 fc9d 	bl	8005990 <HAL_Delay>
		LCD_WR_REG(0x29);
 8003056:	2029      	movs	r0, #41	; 0x29
 8003058:	f7fd fefe 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 800305c:	2035      	movs	r0, #53	; 0x35
 800305e:	f7fd fefb 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003062:	2000      	movs	r0, #0
 8003064:	f7fd ff08 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8003068:	2051      	movs	r0, #81	; 0x51
 800306a:	f7fd fef5 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 800306e:	20ff      	movs	r0, #255	; 0xff
 8003070:	f7fd ff02 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8003074:	2053      	movs	r0, #83	; 0x53
 8003076:	f7fd feef 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 800307a:	202c      	movs	r0, #44	; 0x2c
 800307c:	f7fd fefc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8003080:	2055      	movs	r0, #85	; 0x55
 8003082:	f7fd fee9 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 8003086:	2082      	movs	r0, #130	; 0x82
 8003088:	f7fd fef6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800308c:	202c      	movs	r0, #44	; 0x2c
 800308e:	f7fd fee3 	bl	8000e58 <LCD_WR_REG>
 8003092:	f002 b8e7 	b.w	8005264 <LCD_Init+0x383c>
	}else if(lcddev.id==0x5510)
 8003096:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <LCD_Init+0x1680>)
 8003098:	889b      	ldrh	r3, [r3, #4]
 800309a:	f245 5210 	movw	r2, #21776	; 0x5510
 800309e:	4293      	cmp	r3, r2
 80030a0:	f040 8782 	bne.w	8003fa8 <LCD_Init+0x2580>
 80030a4:	e002      	b.n	80030ac <LCD_Init+0x1684>
 80030a6:	bf00      	nop
 80030a8:	20000258 	.word	0x20000258
	{
		LCD_WriteReg(0xF000,0x55);
 80030ac:	2155      	movs	r1, #85	; 0x55
 80030ae:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80030b2:	f7fd feff 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 80030b6:	21aa      	movs	r1, #170	; 0xaa
 80030b8:	f24f 0001 	movw	r0, #61441	; 0xf001
 80030bc:	f7fd fefa 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 80030c0:	2152      	movs	r1, #82	; 0x52
 80030c2:	f24f 0002 	movw	r0, #61442	; 0xf002
 80030c6:	f7fd fef5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 80030ca:	2108      	movs	r1, #8
 80030cc:	f24f 0003 	movw	r0, #61443	; 0xf003
 80030d0:	f7fd fef0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 80030d4:	2101      	movs	r1, #1
 80030d6:	f24f 0004 	movw	r0, #61444	; 0xf004
 80030da:	f7fd feeb 	bl	8000eb4 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 80030de:	210d      	movs	r1, #13
 80030e0:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80030e4:	f7fd fee6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 80030e8:	210d      	movs	r1, #13
 80030ea:	f24b 0001 	movw	r0, #45057	; 0xb001
 80030ee:	f7fd fee1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 80030f2:	210d      	movs	r1, #13
 80030f4:	f24b 0002 	movw	r0, #45058	; 0xb002
 80030f8:	f7fd fedc 	bl	8000eb4 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 80030fc:	2134      	movs	r1, #52	; 0x34
 80030fe:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003102:	f7fd fed7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 8003106:	2134      	movs	r1, #52	; 0x34
 8003108:	f24b 6001 	movw	r0, #46593	; 0xb601
 800310c:	f7fd fed2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8003110:	2134      	movs	r1, #52	; 0x34
 8003112:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003116:	f7fd fecd 	bl	8000eb4 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 800311a:	210d      	movs	r1, #13
 800311c:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003120:	f7fd fec8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8003124:	210d      	movs	r1, #13
 8003126:	f24b 1001 	movw	r0, #45313	; 0xb101
 800312a:	f7fd fec3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 800312e:	210d      	movs	r1, #13
 8003130:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003134:	f7fd febe 	bl	8000eb4 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 8003138:	2134      	movs	r1, #52	; 0x34
 800313a:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800313e:	f7fd feb9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8003142:	2134      	movs	r1, #52	; 0x34
 8003144:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003148:	f7fd feb4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 800314c:	2134      	movs	r1, #52	; 0x34
 800314e:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003152:	f7fd feaf 	bl	8000eb4 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8003156:	2100      	movs	r1, #0
 8003158:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 800315c:	f7fd feaa 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8003160:	2100      	movs	r1, #0
 8003162:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003166:	f7fd fea5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 800316a:	2100      	movs	r1, #0
 800316c:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003170:	f7fd fea0 	bl	8000eb4 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8003174:	2124      	movs	r1, #36	; 0x24
 8003176:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800317a:	f7fd fe9b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 800317e:	2124      	movs	r1, #36	; 0x24
 8003180:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003184:	f7fd fe96 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8003188:	2124      	movs	r1, #36	; 0x24
 800318a:	f64b 0002 	movw	r0, #47106	; 0xb802
 800318e:	f7fd fe91 	bl	8000eb4 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8003192:	2101      	movs	r1, #1
 8003194:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003198:	f7fd fe8c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 800319c:	210f      	movs	r1, #15
 800319e:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80031a2:	f7fd fe87 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 80031a6:	210f      	movs	r1, #15
 80031a8:	f24b 3001 	movw	r0, #45825	; 0xb301
 80031ac:	f7fd fe82 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 80031b0:	210f      	movs	r1, #15
 80031b2:	f24b 3002 	movw	r0, #45826	; 0xb302
 80031b6:	f7fd fe7d 	bl	8000eb4 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 80031ba:	2134      	movs	r1, #52	; 0x34
 80031bc:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80031c0:	f7fd fe78 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 80031c4:	2134      	movs	r1, #52	; 0x34
 80031c6:	f64b 1001 	movw	r0, #47361	; 0xb901
 80031ca:	f7fd fe73 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 80031ce:	2134      	movs	r1, #52	; 0x34
 80031d0:	f64b 1002 	movw	r0, #47362	; 0xb902
 80031d4:	f7fd fe6e 	bl	8000eb4 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 80031d8:	2108      	movs	r1, #8
 80031da:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80031de:	f7fd fe69 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 80031e2:	2108      	movs	r1, #8
 80031e4:	f24b 5001 	movw	r0, #46337	; 0xb501
 80031e8:	f7fd fe64 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 80031ec:	2108      	movs	r1, #8
 80031ee:	f24b 5002 	movw	r0, #46338	; 0xb502
 80031f2:	f7fd fe5f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 80031f6:	2103      	movs	r1, #3
 80031f8:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80031fc:	f7fd fe5a 	bl	8000eb4 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8003200:	2124      	movs	r1, #36	; 0x24
 8003202:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003206:	f7fd fe55 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 800320a:	2124      	movs	r1, #36	; 0x24
 800320c:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003210:	f7fd fe50 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8003214:	2124      	movs	r1, #36	; 0x24
 8003216:	f64b 2002 	movw	r0, #47618	; 0xba02
 800321a:	f7fd fe4b 	bl	8000eb4 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 800321e:	2100      	movs	r1, #0
 8003220:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003224:	f7fd fe46 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8003228:	2178      	movs	r1, #120	; 0x78
 800322a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800322e:	f7fd fe41 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003232:	2100      	movs	r1, #0
 8003234:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003238:	f7fd fe3c 	bl	8000eb4 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 800323c:	2100      	movs	r1, #0
 800323e:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003242:	f7fd fe37 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8003246:	2178      	movs	r1, #120	; 0x78
 8003248:	f64b 5001 	movw	r0, #48385	; 0xbd01
 800324c:	f7fd fe32 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8003250:	2100      	movs	r1, #0
 8003252:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003256:	f7fd fe2d 	bl	8000eb4 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 800325a:	2100      	movs	r1, #0
 800325c:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003260:	f7fd fe28 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8003264:	2164      	movs	r1, #100	; 0x64
 8003266:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800326a:	f7fd fe23 	bl	8000eb4 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 800326e:	2100      	movs	r1, #0
 8003270:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003274:	f7fd fe1e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8003278:	2133      	movs	r1, #51	; 0x33
 800327a:	f24d 1001 	movw	r0, #53505	; 0xd101
 800327e:	f7fd fe19 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8003282:	2100      	movs	r1, #0
 8003284:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003288:	f7fd fe14 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 800328c:	2134      	movs	r1, #52	; 0x34
 800328e:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003292:	f7fd fe0f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8003296:	2100      	movs	r1, #0
 8003298:	f24d 1004 	movw	r0, #53508	; 0xd104
 800329c:	f7fd fe0a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 80032a0:	213a      	movs	r1, #58	; 0x3a
 80032a2:	f24d 1005 	movw	r0, #53509	; 0xd105
 80032a6:	f7fd fe05 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 80032aa:	2100      	movs	r1, #0
 80032ac:	f24d 1006 	movw	r0, #53510	; 0xd106
 80032b0:	f7fd fe00 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 80032b4:	214a      	movs	r1, #74	; 0x4a
 80032b6:	f24d 1007 	movw	r0, #53511	; 0xd107
 80032ba:	f7fd fdfb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 80032be:	2100      	movs	r1, #0
 80032c0:	f24d 1008 	movw	r0, #53512	; 0xd108
 80032c4:	f7fd fdf6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 80032c8:	215c      	movs	r1, #92	; 0x5c
 80032ca:	f24d 1009 	movw	r0, #53513	; 0xd109
 80032ce:	f7fd fdf1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 80032d2:	2100      	movs	r1, #0
 80032d4:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80032d8:	f7fd fdec 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 80032dc:	2181      	movs	r1, #129	; 0x81
 80032de:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80032e2:	f7fd fde7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 80032e6:	2100      	movs	r1, #0
 80032e8:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80032ec:	f7fd fde2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 80032f0:	21a6      	movs	r1, #166	; 0xa6
 80032f2:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80032f6:	f7fd fddd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 80032fa:	2100      	movs	r1, #0
 80032fc:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003300:	f7fd fdd8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8003304:	21e5      	movs	r1, #229	; 0xe5
 8003306:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800330a:	f7fd fdd3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 800330e:	2101      	movs	r1, #1
 8003310:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003314:	f7fd fdce 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8003318:	2113      	movs	r1, #19
 800331a:	f24d 1011 	movw	r0, #53521	; 0xd111
 800331e:	f7fd fdc9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8003322:	2101      	movs	r1, #1
 8003324:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003328:	f7fd fdc4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 800332c:	2154      	movs	r1, #84	; 0x54
 800332e:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003332:	f7fd fdbf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8003336:	2101      	movs	r1, #1
 8003338:	f24d 1014 	movw	r0, #53524	; 0xd114
 800333c:	f7fd fdba 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8003340:	2182      	movs	r1, #130	; 0x82
 8003342:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003346:	f7fd fdb5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 800334a:	2101      	movs	r1, #1
 800334c:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003350:	f7fd fdb0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8003354:	21ca      	movs	r1, #202	; 0xca
 8003356:	f24d 1017 	movw	r0, #53527	; 0xd117
 800335a:	f7fd fdab 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 800335e:	2102      	movs	r1, #2
 8003360:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003364:	f7fd fda6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8003368:	2100      	movs	r1, #0
 800336a:	f24d 1019 	movw	r0, #53529	; 0xd119
 800336e:	f7fd fda1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8003372:	2102      	movs	r1, #2
 8003374:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003378:	f7fd fd9c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 800337c:	2101      	movs	r1, #1
 800337e:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003382:	f7fd fd97 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8003386:	2102      	movs	r1, #2
 8003388:	f24d 101c 	movw	r0, #53532	; 0xd11c
 800338c:	f7fd fd92 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8003390:	2134      	movs	r1, #52	; 0x34
 8003392:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003396:	f7fd fd8d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 800339a:	2102      	movs	r1, #2
 800339c:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80033a0:	f7fd fd88 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 80033a4:	2167      	movs	r1, #103	; 0x67
 80033a6:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80033aa:	f7fd fd83 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 80033ae:	2102      	movs	r1, #2
 80033b0:	f24d 1020 	movw	r0, #53536	; 0xd120
 80033b4:	f7fd fd7e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 80033b8:	2184      	movs	r1, #132	; 0x84
 80033ba:	f24d 1021 	movw	r0, #53537	; 0xd121
 80033be:	f7fd fd79 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 80033c2:	2102      	movs	r1, #2
 80033c4:	f24d 1022 	movw	r0, #53538	; 0xd122
 80033c8:	f7fd fd74 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 80033cc:	21a4      	movs	r1, #164	; 0xa4
 80033ce:	f24d 1023 	movw	r0, #53539	; 0xd123
 80033d2:	f7fd fd6f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 80033d6:	2102      	movs	r1, #2
 80033d8:	f24d 1024 	movw	r0, #53540	; 0xd124
 80033dc:	f7fd fd6a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 80033e0:	21b7      	movs	r1, #183	; 0xb7
 80033e2:	f24d 1025 	movw	r0, #53541	; 0xd125
 80033e6:	f7fd fd65 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 80033ea:	2102      	movs	r1, #2
 80033ec:	f24d 1026 	movw	r0, #53542	; 0xd126
 80033f0:	f7fd fd60 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 80033f4:	21cf      	movs	r1, #207	; 0xcf
 80033f6:	f24d 1027 	movw	r0, #53543	; 0xd127
 80033fa:	f7fd fd5b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 80033fe:	2102      	movs	r1, #2
 8003400:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003404:	f7fd fd56 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8003408:	21de      	movs	r1, #222	; 0xde
 800340a:	f24d 1029 	movw	r0, #53545	; 0xd129
 800340e:	f7fd fd51 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8003412:	2102      	movs	r1, #2
 8003414:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003418:	f7fd fd4c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 800341c:	21f2      	movs	r1, #242	; 0xf2
 800341e:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003422:	f7fd fd47 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8003426:	2102      	movs	r1, #2
 8003428:	f24d 102c 	movw	r0, #53548	; 0xd12c
 800342c:	f7fd fd42 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8003430:	21fe      	movs	r1, #254	; 0xfe
 8003432:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003436:	f7fd fd3d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 800343a:	2103      	movs	r1, #3
 800343c:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003440:	f7fd fd38 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8003444:	2110      	movs	r1, #16
 8003446:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800344a:	f7fd fd33 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 800344e:	2103      	movs	r1, #3
 8003450:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003454:	f7fd fd2e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8003458:	2133      	movs	r1, #51	; 0x33
 800345a:	f24d 1031 	movw	r0, #53553	; 0xd131
 800345e:	f7fd fd29 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8003462:	2103      	movs	r1, #3
 8003464:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003468:	f7fd fd24 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 800346c:	216d      	movs	r1, #109	; 0x6d
 800346e:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003472:	f7fd fd1f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8003476:	2100      	movs	r1, #0
 8003478:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 800347c:	f7fd fd1a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8003480:	2133      	movs	r1, #51	; 0x33
 8003482:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003486:	f7fd fd15 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 800348a:	2100      	movs	r1, #0
 800348c:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003490:	f7fd fd10 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8003494:	2134      	movs	r1, #52	; 0x34
 8003496:	f24d 2003 	movw	r0, #53763	; 0xd203
 800349a:	f7fd fd0b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 800349e:	2100      	movs	r1, #0
 80034a0:	f24d 2004 	movw	r0, #53764	; 0xd204
 80034a4:	f7fd fd06 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 80034a8:	213a      	movs	r1, #58	; 0x3a
 80034aa:	f24d 2005 	movw	r0, #53765	; 0xd205
 80034ae:	f7fd fd01 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 80034b2:	2100      	movs	r1, #0
 80034b4:	f24d 2006 	movw	r0, #53766	; 0xd206
 80034b8:	f7fd fcfc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 80034bc:	214a      	movs	r1, #74	; 0x4a
 80034be:	f24d 2007 	movw	r0, #53767	; 0xd207
 80034c2:	f7fd fcf7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 80034c6:	2100      	movs	r1, #0
 80034c8:	f24d 2008 	movw	r0, #53768	; 0xd208
 80034cc:	f7fd fcf2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 80034d0:	215c      	movs	r1, #92	; 0x5c
 80034d2:	f24d 2009 	movw	r0, #53769	; 0xd209
 80034d6:	f7fd fced 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 80034da:	2100      	movs	r1, #0
 80034dc:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80034e0:	f7fd fce8 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 80034e4:	2181      	movs	r1, #129	; 0x81
 80034e6:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80034ea:	f7fd fce3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 80034ee:	2100      	movs	r1, #0
 80034f0:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80034f4:	f7fd fcde 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 80034f8:	21a6      	movs	r1, #166	; 0xa6
 80034fa:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80034fe:	f7fd fcd9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8003502:	2100      	movs	r1, #0
 8003504:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003508:	f7fd fcd4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 800350c:	21e5      	movs	r1, #229	; 0xe5
 800350e:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003512:	f7fd fccf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 8003516:	2101      	movs	r1, #1
 8003518:	f24d 2010 	movw	r0, #53776	; 0xd210
 800351c:	f7fd fcca 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8003520:	2113      	movs	r1, #19
 8003522:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003526:	f7fd fcc5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 800352a:	2101      	movs	r1, #1
 800352c:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003530:	f7fd fcc0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8003534:	2154      	movs	r1, #84	; 0x54
 8003536:	f24d 2013 	movw	r0, #53779	; 0xd213
 800353a:	f7fd fcbb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 800353e:	2101      	movs	r1, #1
 8003540:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003544:	f7fd fcb6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8003548:	2182      	movs	r1, #130	; 0x82
 800354a:	f24d 2015 	movw	r0, #53781	; 0xd215
 800354e:	f7fd fcb1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8003552:	2101      	movs	r1, #1
 8003554:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003558:	f7fd fcac 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 800355c:	21ca      	movs	r1, #202	; 0xca
 800355e:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003562:	f7fd fca7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 8003566:	2102      	movs	r1, #2
 8003568:	f24d 2018 	movw	r0, #53784	; 0xd218
 800356c:	f7fd fca2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8003570:	2100      	movs	r1, #0
 8003572:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003576:	f7fd fc9d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 800357a:	2102      	movs	r1, #2
 800357c:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003580:	f7fd fc98 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8003584:	2101      	movs	r1, #1
 8003586:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800358a:	f7fd fc93 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 800358e:	2102      	movs	r1, #2
 8003590:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003594:	f7fd fc8e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8003598:	2134      	movs	r1, #52	; 0x34
 800359a:	f24d 201d 	movw	r0, #53789	; 0xd21d
 800359e:	f7fd fc89 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 80035a2:	2102      	movs	r1, #2
 80035a4:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80035a8:	f7fd fc84 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 80035ac:	2167      	movs	r1, #103	; 0x67
 80035ae:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80035b2:	f7fd fc7f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 80035b6:	2102      	movs	r1, #2
 80035b8:	f24d 2020 	movw	r0, #53792	; 0xd220
 80035bc:	f7fd fc7a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 80035c0:	2184      	movs	r1, #132	; 0x84
 80035c2:	f24d 2021 	movw	r0, #53793	; 0xd221
 80035c6:	f7fd fc75 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 80035ca:	2102      	movs	r1, #2
 80035cc:	f24d 2022 	movw	r0, #53794	; 0xd222
 80035d0:	f7fd fc70 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 80035d4:	21a4      	movs	r1, #164	; 0xa4
 80035d6:	f24d 2023 	movw	r0, #53795	; 0xd223
 80035da:	f7fd fc6b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 80035de:	2102      	movs	r1, #2
 80035e0:	f24d 2024 	movw	r0, #53796	; 0xd224
 80035e4:	f7fd fc66 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 80035e8:	21b7      	movs	r1, #183	; 0xb7
 80035ea:	f24d 2025 	movw	r0, #53797	; 0xd225
 80035ee:	f7fd fc61 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 80035f2:	2102      	movs	r1, #2
 80035f4:	f24d 2026 	movw	r0, #53798	; 0xd226
 80035f8:	f7fd fc5c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 80035fc:	21cf      	movs	r1, #207	; 0xcf
 80035fe:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003602:	f7fd fc57 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 8003606:	2102      	movs	r1, #2
 8003608:	f24d 2028 	movw	r0, #53800	; 0xd228
 800360c:	f7fd fc52 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8003610:	21de      	movs	r1, #222	; 0xde
 8003612:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003616:	f7fd fc4d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 800361a:	2102      	movs	r1, #2
 800361c:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003620:	f7fd fc48 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8003624:	21f2      	movs	r1, #242	; 0xf2
 8003626:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800362a:	f7fd fc43 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 800362e:	2102      	movs	r1, #2
 8003630:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003634:	f7fd fc3e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8003638:	21fe      	movs	r1, #254	; 0xfe
 800363a:	f24d 202d 	movw	r0, #53805	; 0xd22d
 800363e:	f7fd fc39 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8003642:	2103      	movs	r1, #3
 8003644:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003648:	f7fd fc34 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 800364c:	2110      	movs	r1, #16
 800364e:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003652:	f7fd fc2f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 8003656:	2103      	movs	r1, #3
 8003658:	f24d 2030 	movw	r0, #53808	; 0xd230
 800365c:	f7fd fc2a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8003660:	2133      	movs	r1, #51	; 0x33
 8003662:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003666:	f7fd fc25 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 800366a:	2103      	movs	r1, #3
 800366c:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003670:	f7fd fc20 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8003674:	216d      	movs	r1, #109	; 0x6d
 8003676:	f24d 2033 	movw	r0, #53811	; 0xd233
 800367a:	f7fd fc1b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 800367e:	2100      	movs	r1, #0
 8003680:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003684:	f7fd fc16 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8003688:	2133      	movs	r1, #51	; 0x33
 800368a:	f24d 3001 	movw	r0, #54017	; 0xd301
 800368e:	f7fd fc11 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 8003692:	2100      	movs	r1, #0
 8003694:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003698:	f7fd fc0c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 800369c:	2134      	movs	r1, #52	; 0x34
 800369e:	f24d 3003 	movw	r0, #54019	; 0xd303
 80036a2:	f7fd fc07 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 80036a6:	2100      	movs	r1, #0
 80036a8:	f24d 3004 	movw	r0, #54020	; 0xd304
 80036ac:	f7fd fc02 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 80036b0:	213a      	movs	r1, #58	; 0x3a
 80036b2:	f24d 3005 	movw	r0, #54021	; 0xd305
 80036b6:	f7fd fbfd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 80036ba:	2100      	movs	r1, #0
 80036bc:	f24d 3006 	movw	r0, #54022	; 0xd306
 80036c0:	f7fd fbf8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 80036c4:	214a      	movs	r1, #74	; 0x4a
 80036c6:	f24d 3007 	movw	r0, #54023	; 0xd307
 80036ca:	f7fd fbf3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 80036ce:	2100      	movs	r1, #0
 80036d0:	f24d 3008 	movw	r0, #54024	; 0xd308
 80036d4:	f7fd fbee 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 80036d8:	215c      	movs	r1, #92	; 0x5c
 80036da:	f24d 3009 	movw	r0, #54025	; 0xd309
 80036de:	f7fd fbe9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 80036e2:	2100      	movs	r1, #0
 80036e4:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80036e8:	f7fd fbe4 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 80036ec:	2181      	movs	r1, #129	; 0x81
 80036ee:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80036f2:	f7fd fbdf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 80036f6:	2100      	movs	r1, #0
 80036f8:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80036fc:	f7fd fbda 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8003700:	21a6      	movs	r1, #166	; 0xa6
 8003702:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003706:	f7fd fbd5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 800370a:	2100      	movs	r1, #0
 800370c:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003710:	f7fd fbd0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8003714:	21e5      	movs	r1, #229	; 0xe5
 8003716:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800371a:	f7fd fbcb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 800371e:	2101      	movs	r1, #1
 8003720:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003724:	f7fd fbc6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 8003728:	2113      	movs	r1, #19
 800372a:	f24d 3011 	movw	r0, #54033	; 0xd311
 800372e:	f7fd fbc1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8003732:	2101      	movs	r1, #1
 8003734:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003738:	f7fd fbbc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 800373c:	2154      	movs	r1, #84	; 0x54
 800373e:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003742:	f7fd fbb7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 8003746:	2101      	movs	r1, #1
 8003748:	f24d 3014 	movw	r0, #54036	; 0xd314
 800374c:	f7fd fbb2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8003750:	2182      	movs	r1, #130	; 0x82
 8003752:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003756:	f7fd fbad 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 800375a:	2101      	movs	r1, #1
 800375c:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003760:	f7fd fba8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8003764:	21ca      	movs	r1, #202	; 0xca
 8003766:	f24d 3017 	movw	r0, #54039	; 0xd317
 800376a:	f7fd fba3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 800376e:	2102      	movs	r1, #2
 8003770:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003774:	f7fd fb9e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8003778:	2100      	movs	r1, #0
 800377a:	f24d 3019 	movw	r0, #54041	; 0xd319
 800377e:	f7fd fb99 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8003782:	2102      	movs	r1, #2
 8003784:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003788:	f7fd fb94 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 800378c:	2101      	movs	r1, #1
 800378e:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003792:	f7fd fb8f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 8003796:	2102      	movs	r1, #2
 8003798:	f24d 301c 	movw	r0, #54044	; 0xd31c
 800379c:	f7fd fb8a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 80037a0:	2134      	movs	r1, #52	; 0x34
 80037a2:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80037a6:	f7fd fb85 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 80037aa:	2102      	movs	r1, #2
 80037ac:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80037b0:	f7fd fb80 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 80037b4:	2167      	movs	r1, #103	; 0x67
 80037b6:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80037ba:	f7fd fb7b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 80037be:	2102      	movs	r1, #2
 80037c0:	f24d 3020 	movw	r0, #54048	; 0xd320
 80037c4:	f7fd fb76 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 80037c8:	2184      	movs	r1, #132	; 0x84
 80037ca:	f24d 3021 	movw	r0, #54049	; 0xd321
 80037ce:	f7fd fb71 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 80037d2:	2102      	movs	r1, #2
 80037d4:	f24d 3022 	movw	r0, #54050	; 0xd322
 80037d8:	f7fd fb6c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 80037dc:	21a4      	movs	r1, #164	; 0xa4
 80037de:	f24d 3023 	movw	r0, #54051	; 0xd323
 80037e2:	f7fd fb67 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 80037e6:	2102      	movs	r1, #2
 80037e8:	f24d 3024 	movw	r0, #54052	; 0xd324
 80037ec:	f7fd fb62 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 80037f0:	21b7      	movs	r1, #183	; 0xb7
 80037f2:	f24d 3025 	movw	r0, #54053	; 0xd325
 80037f6:	f7fd fb5d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 80037fa:	2102      	movs	r1, #2
 80037fc:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003800:	f7fd fb58 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 8003804:	21cf      	movs	r1, #207	; 0xcf
 8003806:	f24d 3027 	movw	r0, #54055	; 0xd327
 800380a:	f7fd fb53 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 800380e:	2102      	movs	r1, #2
 8003810:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003814:	f7fd fb4e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 8003818:	21de      	movs	r1, #222	; 0xde
 800381a:	f24d 3029 	movw	r0, #54057	; 0xd329
 800381e:	f7fd fb49 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8003822:	2102      	movs	r1, #2
 8003824:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003828:	f7fd fb44 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 800382c:	21f2      	movs	r1, #242	; 0xf2
 800382e:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003832:	f7fd fb3f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 8003836:	2102      	movs	r1, #2
 8003838:	f24d 302c 	movw	r0, #54060	; 0xd32c
 800383c:	f7fd fb3a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8003840:	21fe      	movs	r1, #254	; 0xfe
 8003842:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003846:	f7fd fb35 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 800384a:	2103      	movs	r1, #3
 800384c:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003850:	f7fd fb30 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8003854:	2110      	movs	r1, #16
 8003856:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800385a:	f7fd fb2b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 800385e:	2103      	movs	r1, #3
 8003860:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003864:	f7fd fb26 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 8003868:	2133      	movs	r1, #51	; 0x33
 800386a:	f24d 3031 	movw	r0, #54065	; 0xd331
 800386e:	f7fd fb21 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 8003872:	2103      	movs	r1, #3
 8003874:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003878:	f7fd fb1c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 800387c:	216d      	movs	r1, #109	; 0x6d
 800387e:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003882:	f7fd fb17 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 8003886:	2100      	movs	r1, #0
 8003888:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 800388c:	f7fd fb12 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8003890:	2133      	movs	r1, #51	; 0x33
 8003892:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003896:	f7fd fb0d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 800389a:	2100      	movs	r1, #0
 800389c:	f24d 4002 	movw	r0, #54274	; 0xd402
 80038a0:	f7fd fb08 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 80038a4:	2134      	movs	r1, #52	; 0x34
 80038a6:	f24d 4003 	movw	r0, #54275	; 0xd403
 80038aa:	f7fd fb03 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 80038ae:	2100      	movs	r1, #0
 80038b0:	f24d 4004 	movw	r0, #54276	; 0xd404
 80038b4:	f7fd fafe 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 80038b8:	213a      	movs	r1, #58	; 0x3a
 80038ba:	f24d 4005 	movw	r0, #54277	; 0xd405
 80038be:	f7fd faf9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 80038c2:	2100      	movs	r1, #0
 80038c4:	f24d 4006 	movw	r0, #54278	; 0xd406
 80038c8:	f7fd faf4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 80038cc:	214a      	movs	r1, #74	; 0x4a
 80038ce:	f24d 4007 	movw	r0, #54279	; 0xd407
 80038d2:	f7fd faef 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 80038d6:	2100      	movs	r1, #0
 80038d8:	f24d 4008 	movw	r0, #54280	; 0xd408
 80038dc:	f7fd faea 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 80038e0:	215c      	movs	r1, #92	; 0x5c
 80038e2:	f24d 4009 	movw	r0, #54281	; 0xd409
 80038e6:	f7fd fae5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 80038ea:	2100      	movs	r1, #0
 80038ec:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80038f0:	f7fd fae0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 80038f4:	2181      	movs	r1, #129	; 0x81
 80038f6:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80038fa:	f7fd fadb 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 80038fe:	2100      	movs	r1, #0
 8003900:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003904:	f7fd fad6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 8003908:	21a6      	movs	r1, #166	; 0xa6
 800390a:	f24d 400d 	movw	r0, #54285	; 0xd40d
 800390e:	f7fd fad1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 8003912:	2100      	movs	r1, #0
 8003914:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003918:	f7fd facc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 800391c:	21e5      	movs	r1, #229	; 0xe5
 800391e:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003922:	f7fd fac7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 8003926:	2101      	movs	r1, #1
 8003928:	f24d 4010 	movw	r0, #54288	; 0xd410
 800392c:	f7fd fac2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8003930:	2113      	movs	r1, #19
 8003932:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003936:	f7fd fabd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 800393a:	2101      	movs	r1, #1
 800393c:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003940:	f7fd fab8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8003944:	2154      	movs	r1, #84	; 0x54
 8003946:	f24d 4013 	movw	r0, #54291	; 0xd413
 800394a:	f7fd fab3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 800394e:	2101      	movs	r1, #1
 8003950:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003954:	f7fd faae 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8003958:	2182      	movs	r1, #130	; 0x82
 800395a:	f24d 4015 	movw	r0, #54293	; 0xd415
 800395e:	f7fd faa9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8003962:	2101      	movs	r1, #1
 8003964:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003968:	f7fd faa4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 800396c:	21ca      	movs	r1, #202	; 0xca
 800396e:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003972:	f7fd fa9f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 8003976:	2102      	movs	r1, #2
 8003978:	f24d 4018 	movw	r0, #54296	; 0xd418
 800397c:	f7fd fa9a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8003980:	2100      	movs	r1, #0
 8003982:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003986:	f7fd fa95 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 800398a:	2102      	movs	r1, #2
 800398c:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003990:	f7fd fa90 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 8003994:	2101      	movs	r1, #1
 8003996:	f24d 401b 	movw	r0, #54299	; 0xd41b
 800399a:	f7fd fa8b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 800399e:	2102      	movs	r1, #2
 80039a0:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80039a4:	f7fd fa86 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 80039a8:	2134      	movs	r1, #52	; 0x34
 80039aa:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80039ae:	f7fd fa81 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 80039b2:	2102      	movs	r1, #2
 80039b4:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80039b8:	f7fd fa7c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 80039bc:	2167      	movs	r1, #103	; 0x67
 80039be:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80039c2:	f7fd fa77 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 80039c6:	2102      	movs	r1, #2
 80039c8:	f24d 4020 	movw	r0, #54304	; 0xd420
 80039cc:	f7fd fa72 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 80039d0:	2184      	movs	r1, #132	; 0x84
 80039d2:	f24d 4021 	movw	r0, #54305	; 0xd421
 80039d6:	f7fd fa6d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 80039da:	2102      	movs	r1, #2
 80039dc:	f24d 4022 	movw	r0, #54306	; 0xd422
 80039e0:	f7fd fa68 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 80039e4:	21a4      	movs	r1, #164	; 0xa4
 80039e6:	f24d 4023 	movw	r0, #54307	; 0xd423
 80039ea:	f7fd fa63 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 80039ee:	2102      	movs	r1, #2
 80039f0:	f24d 4024 	movw	r0, #54308	; 0xd424
 80039f4:	f7fd fa5e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 80039f8:	21b7      	movs	r1, #183	; 0xb7
 80039fa:	f24d 4025 	movw	r0, #54309	; 0xd425
 80039fe:	f7fd fa59 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 8003a02:	2102      	movs	r1, #2
 8003a04:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003a08:	f7fd fa54 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 8003a0c:	21cf      	movs	r1, #207	; 0xcf
 8003a0e:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003a12:	f7fd fa4f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 8003a16:	2102      	movs	r1, #2
 8003a18:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003a1c:	f7fd fa4a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 8003a20:	21de      	movs	r1, #222	; 0xde
 8003a22:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003a26:	f7fd fa45 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003a30:	f7fd fa40 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 8003a34:	21f2      	movs	r1, #242	; 0xf2
 8003a36:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003a3a:	f7fd fa3b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8003a3e:	2102      	movs	r1, #2
 8003a40:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003a44:	f7fd fa36 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8003a48:	21fe      	movs	r1, #254	; 0xfe
 8003a4a:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003a4e:	f7fd fa31 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8003a52:	2103      	movs	r1, #3
 8003a54:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003a58:	f7fd fa2c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8003a5c:	2110      	movs	r1, #16
 8003a5e:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003a62:	f7fd fa27 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 8003a66:	2103      	movs	r1, #3
 8003a68:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003a6c:	f7fd fa22 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8003a70:	2133      	movs	r1, #51	; 0x33
 8003a72:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003a76:	f7fd fa1d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 8003a7a:	2103      	movs	r1, #3
 8003a7c:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003a80:	f7fd fa18 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8003a84:	216d      	movs	r1, #109	; 0x6d
 8003a86:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003a8a:	f7fd fa13 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 8003a8e:	2100      	movs	r1, #0
 8003a90:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003a94:	f7fd fa0e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8003a98:	2133      	movs	r1, #51	; 0x33
 8003a9a:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003a9e:	f7fd fa09 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003aa8:	f7fd fa04 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 8003aac:	2134      	movs	r1, #52	; 0x34
 8003aae:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003ab2:	f7fd f9ff 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003abc:	f7fd f9fa 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 8003ac0:	213a      	movs	r1, #58	; 0x3a
 8003ac2:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003ac6:	f7fd f9f5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 8003aca:	2100      	movs	r1, #0
 8003acc:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003ad0:	f7fd f9f0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 8003ad4:	214a      	movs	r1, #74	; 0x4a
 8003ad6:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003ada:	f7fd f9eb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 8003ade:	2100      	movs	r1, #0
 8003ae0:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003ae4:	f7fd f9e6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 8003ae8:	215c      	movs	r1, #92	; 0x5c
 8003aea:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003aee:	f7fd f9e1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 8003af2:	2100      	movs	r1, #0
 8003af4:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003af8:	f7fd f9dc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 8003afc:	2181      	movs	r1, #129	; 0x81
 8003afe:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003b02:	f7fd f9d7 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 8003b06:	2100      	movs	r1, #0
 8003b08:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003b0c:	f7fd f9d2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 8003b10:	21a6      	movs	r1, #166	; 0xa6
 8003b12:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003b16:	f7fd f9cd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003b20:	f7fd f9c8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 8003b24:	21e5      	movs	r1, #229	; 0xe5
 8003b26:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003b2a:	f7fd f9c3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 8003b2e:	2101      	movs	r1, #1
 8003b30:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003b34:	f7fd f9be 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 8003b38:	2113      	movs	r1, #19
 8003b3a:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003b3e:	f7fd f9b9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8003b42:	2101      	movs	r1, #1
 8003b44:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003b48:	f7fd f9b4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8003b4c:	2154      	movs	r1, #84	; 0x54
 8003b4e:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003b52:	f7fd f9af 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 8003b56:	2101      	movs	r1, #1
 8003b58:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003b5c:	f7fd f9aa 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8003b60:	2182      	movs	r1, #130	; 0x82
 8003b62:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003b66:	f7fd f9a5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003b70:	f7fd f9a0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8003b74:	21ca      	movs	r1, #202	; 0xca
 8003b76:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003b7a:	f7fd f99b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 8003b7e:	2102      	movs	r1, #2
 8003b80:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003b84:	f7fd f996 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 8003b88:	2100      	movs	r1, #0
 8003b8a:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003b8e:	f7fd f991 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 8003b92:	2102      	movs	r1, #2
 8003b94:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003b98:	f7fd f98c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003ba2:	f7fd f987 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003bac:	f7fd f982 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 8003bb0:	2134      	movs	r1, #52	; 0x34
 8003bb2:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003bb6:	f7fd f97d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 8003bba:	2102      	movs	r1, #2
 8003bbc:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003bc0:	f7fd f978 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 8003bc4:	2167      	movs	r1, #103	; 0x67
 8003bc6:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003bca:	f7fd f973 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 8003bce:	2102      	movs	r1, #2
 8003bd0:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003bd4:	f7fd f96e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 8003bd8:	2184      	movs	r1, #132	; 0x84
 8003bda:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003bde:	f7fd f969 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 8003be2:	2102      	movs	r1, #2
 8003be4:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003be8:	f7fd f964 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 8003bec:	21a4      	movs	r1, #164	; 0xa4
 8003bee:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003bf2:	f7fd f95f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003bfc:	f7fd f95a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 8003c00:	21b7      	movs	r1, #183	; 0xb7
 8003c02:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003c06:	f7fd f955 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003c10:	f7fd f950 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 8003c14:	21cf      	movs	r1, #207	; 0xcf
 8003c16:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003c1a:	f7fd f94b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 8003c1e:	2102      	movs	r1, #2
 8003c20:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003c24:	f7fd f946 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 8003c28:	21de      	movs	r1, #222	; 0xde
 8003c2a:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003c2e:	f7fd f941 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8003c32:	2102      	movs	r1, #2
 8003c34:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003c38:	f7fd f93c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8003c3c:	21f2      	movs	r1, #242	; 0xf2
 8003c3e:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003c42:	f7fd f937 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 8003c46:	2102      	movs	r1, #2
 8003c48:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003c4c:	f7fd f932 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8003c50:	21fe      	movs	r1, #254	; 0xfe
 8003c52:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003c56:	f7fd f92d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 8003c5a:	2103      	movs	r1, #3
 8003c5c:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003c60:	f7fd f928 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8003c64:	2110      	movs	r1, #16
 8003c66:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003c6a:	f7fd f923 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 8003c6e:	2103      	movs	r1, #3
 8003c70:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003c74:	f7fd f91e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 8003c78:	2133      	movs	r1, #51	; 0x33
 8003c7a:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003c7e:	f7fd f919 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 8003c82:	2103      	movs	r1, #3
 8003c84:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003c88:	f7fd f914 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 8003c8c:	216d      	movs	r1, #109	; 0x6d
 8003c8e:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003c92:	f7fd f90f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 8003c96:	2100      	movs	r1, #0
 8003c98:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003c9c:	f7fd f90a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 8003ca0:	2133      	movs	r1, #51	; 0x33
 8003ca2:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003ca6:	f7fd f905 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 8003caa:	2100      	movs	r1, #0
 8003cac:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003cb0:	f7fd f900 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 8003cb4:	2134      	movs	r1, #52	; 0x34
 8003cb6:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003cba:	f7fd f8fb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003cc4:	f7fd f8f6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 8003cc8:	213a      	movs	r1, #58	; 0x3a
 8003cca:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003cce:	f7fd f8f1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003cd8:	f7fd f8ec 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 8003cdc:	214a      	movs	r1, #74	; 0x4a
 8003cde:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003ce2:	f7fd f8e7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003cec:	f7fd f8e2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 8003cf0:	215c      	movs	r1, #92	; 0x5c
 8003cf2:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003cf6:	f7fd f8dd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003d00:	f7fd f8d8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 8003d04:	2181      	movs	r1, #129	; 0x81
 8003d06:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003d0a:	f7fd f8d3 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 8003d0e:	2100      	movs	r1, #0
 8003d10:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003d14:	f7fd f8ce 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 8003d18:	21a6      	movs	r1, #166	; 0xa6
 8003d1a:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003d1e:	f7fd f8c9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8003d22:	2100      	movs	r1, #0
 8003d24:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003d28:	f7fd f8c4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 8003d2c:	21e5      	movs	r1, #229	; 0xe5
 8003d2e:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003d32:	f7fd f8bf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 8003d36:	2101      	movs	r1, #1
 8003d38:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003d3c:	f7fd f8ba 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8003d40:	2113      	movs	r1, #19
 8003d42:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003d46:	f7fd f8b5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003d50:	f7fd f8b0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8003d54:	2154      	movs	r1, #84	; 0x54
 8003d56:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003d5a:	f7fd f8ab 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 8003d5e:	2101      	movs	r1, #1
 8003d60:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003d64:	f7fd f8a6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 8003d68:	2182      	movs	r1, #130	; 0x82
 8003d6a:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003d6e:	f7fd f8a1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 8003d72:	2101      	movs	r1, #1
 8003d74:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003d78:	f7fd f89c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 8003d7c:	21ca      	movs	r1, #202	; 0xca
 8003d7e:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003d82:	f7fd f897 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 8003d86:	2102      	movs	r1, #2
 8003d88:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003d8c:	f7fd f892 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 8003d90:	2100      	movs	r1, #0
 8003d92:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003d96:	f7fd f88d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003da0:	f7fd f888 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 8003da4:	2101      	movs	r1, #1
 8003da6:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003daa:	f7fd f883 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 8003dae:	2102      	movs	r1, #2
 8003db0:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003db4:	f7fd f87e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 8003db8:	2134      	movs	r1, #52	; 0x34
 8003dba:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8003dbe:	f7fd f879 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003dc8:	f7fd f874 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 8003dcc:	2167      	movs	r1, #103	; 0x67
 8003dce:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8003dd2:	f7fd f86f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003ddc:	f7fd f86a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 8003de0:	2184      	movs	r1, #132	; 0x84
 8003de2:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003de6:	f7fd f865 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 8003dea:	2102      	movs	r1, #2
 8003dec:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003df0:	f7fd f860 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 8003df4:	21a4      	movs	r1, #164	; 0xa4
 8003df6:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003dfa:	f7fd f85b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 8003dfe:	2102      	movs	r1, #2
 8003e00:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003e04:	f7fd f856 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 8003e08:	21b7      	movs	r1, #183	; 0xb7
 8003e0a:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003e0e:	f7fd f851 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 8003e12:	2102      	movs	r1, #2
 8003e14:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003e18:	f7fd f84c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 8003e1c:	21cf      	movs	r1, #207	; 0xcf
 8003e1e:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003e22:	f7fd f847 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 8003e26:	2102      	movs	r1, #2
 8003e28:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003e2c:	f7fd f842 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8003e30:	21de      	movs	r1, #222	; 0xde
 8003e32:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003e36:	f7fd f83d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003e40:	f7fd f838 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8003e44:	21f2      	movs	r1, #242	; 0xf2
 8003e46:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003e4a:	f7fd f833 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8003e4e:	2102      	movs	r1, #2
 8003e50:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003e54:	f7fd f82e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 8003e58:	21fe      	movs	r1, #254	; 0xfe
 8003e5a:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003e5e:	f7fd f829 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8003e62:	2103      	movs	r1, #3
 8003e64:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003e68:	f7fd f824 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 8003e6c:	2110      	movs	r1, #16
 8003e6e:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003e72:	f7fd f81f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 8003e76:	2103      	movs	r1, #3
 8003e78:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003e7c:	f7fd f81a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8003e80:	2133      	movs	r1, #51	; 0x33
 8003e82:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003e86:	f7fd f815 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 8003e8a:	2103      	movs	r1, #3
 8003e8c:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003e90:	f7fd f810 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8003e94:	216d      	movs	r1, #109	; 0x6d
 8003e96:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003e9a:	f7fd f80b 	bl	8000eb4 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 8003e9e:	2155      	movs	r1, #85	; 0x55
 8003ea0:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003ea4:	f7fd f806 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8003ea8:	21aa      	movs	r1, #170	; 0xaa
 8003eaa:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003eae:	f7fd f801 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8003eb2:	2152      	movs	r1, #82	; 0x52
 8003eb4:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003eb8:	f7fc fffc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8003ebc:	2108      	movs	r1, #8
 8003ebe:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003ec2:	f7fc fff7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003ecc:	f7fc fff2 	bl	8000eb4 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8003ed0:	21cc      	movs	r1, #204	; 0xcc
 8003ed2:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003ed6:	f7fc ffed 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003eda:	2100      	movs	r1, #0
 8003edc:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003ee0:	f7fc ffe8 	bl	8000eb4 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 8003ee4:	2105      	movs	r1, #5
 8003ee6:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003eea:	f7fc ffe3 	bl	8000eb4 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 8003eee:	2170      	movs	r1, #112	; 0x70
 8003ef0:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003ef4:	f7fc ffde 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 8003ef8:	2170      	movs	r1, #112	; 0x70
 8003efa:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003efe:	f7fc ffd9 	bl	8000eb4 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 8003f02:	2101      	movs	r1, #1
 8003f04:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003f08:	f7fc ffd4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 8003f0c:	2103      	movs	r1, #3
 8003f0e:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003f12:	f7fc ffcf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 8003f16:	2103      	movs	r1, #3
 8003f18:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003f1c:	f7fc ffca 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8003f20:	2103      	movs	r1, #3
 8003f22:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003f26:	f7fc ffc5 	bl	8000eb4 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003f30:	f7fc ffc0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8003f34:	2100      	movs	r1, #0
 8003f36:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003f3a:	f7fc ffbb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003f3e:	2100      	movs	r1, #0
 8003f40:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003f44:	f7fc ffb6 	bl	8000eb4 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8003f48:	21d0      	movs	r1, #208	; 0xd0
 8003f4a:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003f4e:	f7fc ffb1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8003f52:	2102      	movs	r1, #2
 8003f54:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003f58:	f7fc ffac 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8003f5c:	2150      	movs	r1, #80	; 0x50
 8003f5e:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003f62:	f7fc ffa7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8003f66:	2150      	movs	r1, #80	; 0x50
 8003f68:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003f6c:	f7fc ffa2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8003f70:	2150      	movs	r1, #80	; 0x50
 8003f72:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003f76:	f7fc ff9d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003f80:	f7fc ff98 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8003f84:	2155      	movs	r1, #85	; 0x55
 8003f86:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003f8a:	f7fc ff93 	bl	8000eb4 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003f8e:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003f92:	f7fc ff61 	bl	8000e58 <LCD_WR_REG>
		delay_us(120);
 8003f96:	2078      	movs	r0, #120	; 0x78
 8003f98:	f7fc ff40 	bl	8000e1c <delay_us>
		LCD_WR_REG(0x2900);
 8003f9c:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003fa0:	f7fc ff5a 	bl	8000e58 <LCD_WR_REG>
 8003fa4:	f001 b95e 	b.w	8005264 <LCD_Init+0x383c>
	}else if(lcddev.id==0x9325)//9325
 8003fa8:	4bec      	ldr	r3, [pc, #944]	; (800435c <LCD_Init+0x2934>)
 8003faa:	889b      	ldrh	r3, [r3, #4]
 8003fac:	f249 3225 	movw	r2, #37669	; 0x9325
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	f040 80d7 	bne.w	8004164 <LCD_Init+0x273c>
	{
		LCD_WriteReg(0x00E5,0x78F0);
 8003fb6:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8003fba:	20e5      	movs	r0, #229	; 0xe5
 8003fbc:	f7fc ff7a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0001,0x0100);
 8003fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	f7fc ff75 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 8003fca:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003fce:	2002      	movs	r0, #2
 8003fd0:	f7fc ff70 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0003,0x1030);
 8003fd4:	f241 0130 	movw	r1, #4144	; 0x1030
 8003fd8:	2003      	movs	r0, #3
 8003fda:	f7fc ff6b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0004,0x0000);
 8003fde:	2100      	movs	r1, #0
 8003fe0:	2004      	movs	r0, #4
 8003fe2:	f7fc ff67 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8003fe6:	f240 2102 	movw	r1, #514	; 0x202
 8003fea:	2008      	movs	r0, #8
 8003fec:	f7fc ff62 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0009,0x0000);
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	2009      	movs	r0, #9
 8003ff4:	f7fc ff5e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000A,0x0000);
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	200a      	movs	r0, #10
 8003ffc:	f7fc ff5a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000C,0x0000);
 8004000:	2100      	movs	r1, #0
 8004002:	200c      	movs	r0, #12
 8004004:	f7fc ff56 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000D,0x0000);
 8004008:	2100      	movs	r1, #0
 800400a:	200d      	movs	r0, #13
 800400c:	f7fc ff52 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000F,0x0000);
 8004010:	2100      	movs	r1, #0
 8004012:	200f      	movs	r0, #15
 8004014:	f7fc ff4e 	bl	8000eb4 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010,0x0000);
 8004018:	2100      	movs	r1, #0
 800401a:	2010      	movs	r0, #16
 800401c:	f7fc ff4a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 8004020:	2107      	movs	r1, #7
 8004022:	2011      	movs	r0, #17
 8004024:	f7fc ff46 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 8004028:	2100      	movs	r1, #0
 800402a:	2012      	movs	r0, #18
 800402c:	f7fc ff42 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 8004030:	2100      	movs	r1, #0
 8004032:	2013      	movs	r0, #19
 8004034:	f7fc ff3e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0000);
 8004038:	2100      	movs	r1, #0
 800403a:	2007      	movs	r0, #7
 800403c:	f7fc ff3a 	bl	8000eb4 <LCD_WriteReg>
		//vgh
		LCD_WriteReg(0x0010,0x1690);
 8004040:	f241 6190 	movw	r1, #5776	; 0x1690
 8004044:	2010      	movs	r0, #16
 8004046:	f7fc ff35 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0227);
 800404a:	f240 2127 	movw	r1, #551	; 0x227
 800404e:	2011      	movs	r0, #17
 8004050:	f7fc ff30 	bl	8000eb4 <LCD_WriteReg>
		//delayms(100);
		//vregiout
		LCD_WriteReg(0x0012,0x009D); //0x001b
 8004054:	219d      	movs	r1, #157	; 0x9d
 8004056:	2012      	movs	r0, #18
 8004058:	f7fc ff2c 	bl	8000eb4 <LCD_WriteReg>
		//delayms(100);
		//vom amplitude
		LCD_WriteReg(0x0013,0x1900);
 800405c:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004060:	2013      	movs	r0, #19
 8004062:	f7fc ff27 	bl	8000eb4 <LCD_WriteReg>
		//delayms(100);
		//vom H
		LCD_WriteReg(0x0029,0x0025);
 8004066:	2125      	movs	r1, #37	; 0x25
 8004068:	2029      	movs	r0, #41	; 0x29
 800406a:	f7fc ff23 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x002B,0x000D);
 800406e:	210d      	movs	r1, #13
 8004070:	202b      	movs	r0, #43	; 0x2b
 8004072:	f7fc ff1f 	bl	8000eb4 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030,0x0007);
 8004076:	2107      	movs	r1, #7
 8004078:	2030      	movs	r0, #48	; 0x30
 800407a:	f7fc ff1b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0303);
 800407e:	f240 3103 	movw	r1, #771	; 0x303
 8004082:	2031      	movs	r0, #49	; 0x31
 8004084:	f7fc ff16 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0003);// 0006
 8004088:	2103      	movs	r1, #3
 800408a:	2032      	movs	r0, #50	; 0x32
 800408c:	f7fc ff12 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0206);
 8004090:	f240 2106 	movw	r1, #518	; 0x206
 8004094:	2035      	movs	r0, #53	; 0x35
 8004096:	f7fc ff0d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x0008);
 800409a:	2108      	movs	r1, #8
 800409c:	2036      	movs	r0, #54	; 0x36
 800409e:	f7fc ff09 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0406);
 80040a2:	f240 4106 	movw	r1, #1030	; 0x406
 80040a6:	2037      	movs	r0, #55	; 0x37
 80040a8:	f7fc ff04 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0304);//0200
 80040ac:	f44f 7141 	mov.w	r1, #772	; 0x304
 80040b0:	2038      	movs	r0, #56	; 0x38
 80040b2:	f7fc feff 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0007);
 80040b6:	2107      	movs	r1, #7
 80040b8:	2039      	movs	r0, #57	; 0x39
 80040ba:	f7fc fefb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x003C,0x0602);// 0504
 80040be:	f240 6102 	movw	r1, #1538	; 0x602
 80040c2:	203c      	movs	r0, #60	; 0x3c
 80040c4:	f7fc fef6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x003D,0x0008);
 80040c8:	2108      	movs	r1, #8
 80040ca:	203d      	movs	r0, #61	; 0x3d
 80040cc:	f7fc fef2 	bl	8000eb4 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050,0x0000);
 80040d0:	2100      	movs	r1, #0
 80040d2:	2050      	movs	r0, #80	; 0x50
 80040d4:	f7fc feee 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00EF);
 80040d8:	21ef      	movs	r1, #239	; 0xef
 80040da:	2051      	movs	r0, #81	; 0x51
 80040dc:	f7fc feea 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 80040e0:	2100      	movs	r1, #0
 80040e2:	2052      	movs	r0, #82	; 0x52
 80040e4:	f7fc fee6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013F);
 80040e8:	f240 113f 	movw	r1, #319	; 0x13f
 80040ec:	2053      	movs	r0, #83	; 0x53
 80040ee:	f7fc fee1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0xA700);
 80040f2:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80040f6:	2060      	movs	r0, #96	; 0x60
 80040f8:	f7fc fedc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 80040fc:	2101      	movs	r1, #1
 80040fe:	2061      	movs	r0, #97	; 0x61
 8004100:	f7fc fed8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x006A,0x0000);
 8004104:	2100      	movs	r1, #0
 8004106:	206a      	movs	r0, #106	; 0x6a
 8004108:	f7fc fed4 	bl	8000eb4 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080,0x0000);
 800410c:	2100      	movs	r1, #0
 800410e:	2080      	movs	r0, #128	; 0x80
 8004110:	f7fc fed0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0081,0x0000);
 8004114:	2100      	movs	r1, #0
 8004116:	2081      	movs	r0, #129	; 0x81
 8004118:	f7fc fecc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0082,0x0000);
 800411c:	2100      	movs	r1, #0
 800411e:	2082      	movs	r0, #130	; 0x82
 8004120:	f7fc fec8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0083,0x0000);
 8004124:	2100      	movs	r1, #0
 8004126:	2083      	movs	r0, #131	; 0x83
 8004128:	f7fc fec4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0084,0x0000);
 800412c:	2100      	movs	r1, #0
 800412e:	2084      	movs	r0, #132	; 0x84
 8004130:	f7fc fec0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0085,0x0000);
 8004134:	2100      	movs	r1, #0
 8004136:	2085      	movs	r0, #133	; 0x85
 8004138:	f7fc febc 	bl	8000eb4 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090,0x0010);
 800413c:	2110      	movs	r1, #16
 800413e:	2090      	movs	r0, #144	; 0x90
 8004140:	f7fc feb8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8004144:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004148:	2092      	movs	r0, #146	; 0x92
 800414a:	f7fc feb3 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x0007,0x0133);
 800414e:	f240 1133 	movw	r1, #307	; 0x133
 8004152:	2007      	movs	r0, #7
 8004154:	f7fc feae 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x0022);//
 8004158:	2122      	movs	r1, #34	; 0x22
 800415a:	2000      	movs	r0, #0
 800415c:	f7fc feaa 	bl	8000eb4 <LCD_WriteReg>
 8004160:	f001 b880 	b.w	8005264 <LCD_Init+0x383c>
	}else if(lcddev.id==0x9328)//ILI9328   OK
 8004164:	4b7d      	ldr	r3, [pc, #500]	; (800435c <LCD_Init+0x2934>)
 8004166:	889b      	ldrh	r3, [r3, #4]
 8004168:	f249 3228 	movw	r2, #37672	; 0x9328
 800416c:	4293      	cmp	r3, r2
 800416e:	f040 80f7 	bne.w	8004360 <LCD_Init+0x2938>
	{
  		LCD_WriteReg(0x00EC,0x108F);// internal timeing
 8004172:	f241 018f 	movw	r1, #4239	; 0x108f
 8004176:	20ec      	movs	r0, #236	; 0xec
 8004178:	f7fc fe9c 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0x00EF,0x1234);// ADD
 800417c:	f241 2134 	movw	r1, #4660	; 0x1234
 8004180:	20ef      	movs	r0, #239	; 0xef
 8004182:	f7fc fe97 	bl	8000eb4 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);
        //LCD_WriteReg(0x0000,0x0001);//开启内部时钟
        LCD_WriteReg(0x0001,0x0100);
 8004186:	f44f 7180 	mov.w	r1, #256	; 0x100
 800418a:	2001      	movs	r0, #1
 800418c:	f7fc fe92 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);//电源开启
 8004190:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004194:	2002      	movs	r0, #2
 8004196:	f7fc fe8d 	bl	8000eb4 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(0<<3) );//65K
 800419a:	f241 0130 	movw	r1, #4144	; 0x1030
 800419e:	2003      	movs	r0, #3
 80041a0:	f7fc fe88 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 80041a4:	2100      	movs	r1, #0
 80041a6:	2004      	movs	r0, #4
 80041a8:	f7fc fe84 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x0202);
 80041ac:	f240 2102 	movw	r1, #514	; 0x202
 80041b0:	2008      	movs	r0, #8
 80041b2:	f7fc fe7f 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0009,0x0000);
 80041b6:	2100      	movs	r1, #0
 80041b8:	2009      	movs	r0, #9
 80041ba:	f7fc fe7b 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000a,0x0000);//display setting
 80041be:	2100      	movs	r1, #0
 80041c0:	200a      	movs	r0, #10
 80041c2:	f7fc fe77 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000c,0x0001);//display setting
 80041c6:	2101      	movs	r1, #1
 80041c8:	200c      	movs	r0, #12
 80041ca:	f7fc fe73 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000d,0x0000);//0f3c
 80041ce:	2100      	movs	r1, #0
 80041d0:	200d      	movs	r0, #13
 80041d2:	f7fc fe6f 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000f,0x0000);
 80041d6:	2100      	movs	r1, #0
 80041d8:	200f      	movs	r0, #15
 80041da:	f7fc fe6b 	bl	8000eb4 <LCD_WriteReg>
		//电源配置
        LCD_WriteReg(0x0010,0x0000);
 80041de:	2100      	movs	r1, #0
 80041e0:	2010      	movs	r0, #16
 80041e2:	f7fc fe67 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0007);
 80041e6:	2107      	movs	r1, #7
 80041e8:	2011      	movs	r0, #17
 80041ea:	f7fc fe63 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x0000);
 80041ee:	2100      	movs	r1, #0
 80041f0:	2012      	movs	r0, #18
 80041f2:	f7fc fe5f 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0000);
 80041f6:	2100      	movs	r1, #0
 80041f8:	2013      	movs	r0, #19
 80041fa:	f7fc fe5b 	bl	8000eb4 <LCD_WriteReg>
     	LCD_WriteReg(0x0007,0x0001);
 80041fe:	2101      	movs	r1, #1
 8004200:	2007      	movs	r0, #7
 8004202:	f7fc fe57 	bl	8000eb4 <LCD_WriteReg>
     	HAL_Delay(50);
 8004206:	2032      	movs	r0, #50	; 0x32
 8004208:	f001 fbc2 	bl	8005990 <HAL_Delay>
        LCD_WriteReg(0x0010,0x1490);
 800420c:	f241 4190 	movw	r1, #5264	; 0x1490
 8004210:	2010      	movs	r0, #16
 8004212:	f7fc fe4f 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0227);
 8004216:	f240 2127 	movw	r1, #551	; 0x227
 800421a:	2011      	movs	r0, #17
 800421c:	f7fc fe4a 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 8004220:	2032      	movs	r0, #50	; 0x32
 8004222:	f001 fbb5 	bl	8005990 <HAL_Delay>
        LCD_WriteReg(0x0012,0x008A);
 8004226:	218a      	movs	r1, #138	; 0x8a
 8004228:	2012      	movs	r0, #18
 800422a:	f7fc fe43 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 800422e:	2032      	movs	r0, #50	; 0x32
 8004230:	f001 fbae 	bl	8005990 <HAL_Delay>
        LCD_WriteReg(0x0013,0x1a00);
 8004234:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8004238:	2013      	movs	r0, #19
 800423a:	f7fc fe3b 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x0006);
 800423e:	2106      	movs	r1, #6
 8004240:	2029      	movs	r0, #41	; 0x29
 8004242:	f7fc fe37 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x002b,0x000d);
 8004246:	210d      	movs	r1, #13
 8004248:	202b      	movs	r0, #43	; 0x2b
 800424a:	f7fc fe33 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 800424e:	2032      	movs	r0, #50	; 0x32
 8004250:	f001 fb9e 	bl	8005990 <HAL_Delay>
        LCD_WriteReg(0x0020,0x0000);
 8004254:	2100      	movs	r1, #0
 8004256:	2020      	movs	r0, #32
 8004258:	f7fc fe2c 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 800425c:	2100      	movs	r1, #0
 800425e:	2021      	movs	r0, #33	; 0x21
 8004260:	f7fc fe28 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 8004264:	2032      	movs	r0, #50	; 0x32
 8004266:	f001 fb93 	bl	8005990 <HAL_Delay>
		//伽马校正
        LCD_WriteReg(0x0030,0x0000);
 800426a:	2100      	movs	r1, #0
 800426c:	2030      	movs	r0, #48	; 0x30
 800426e:	f7fc fe21 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0604);
 8004272:	f240 6104 	movw	r1, #1540	; 0x604
 8004276:	2031      	movs	r0, #49	; 0x31
 8004278:	f7fc fe1c 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0305);
 800427c:	f240 3105 	movw	r1, #773	; 0x305
 8004280:	2032      	movs	r0, #50	; 0x32
 8004282:	f7fc fe17 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0000);
 8004286:	2100      	movs	r1, #0
 8004288:	2035      	movs	r0, #53	; 0x35
 800428a:	f7fc fe13 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x0C09);
 800428e:	f640 4109 	movw	r1, #3081	; 0xc09
 8004292:	2036      	movs	r0, #54	; 0x36
 8004294:	f7fc fe0e 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0204);
 8004298:	f44f 7101 	mov.w	r1, #516	; 0x204
 800429c:	2037      	movs	r0, #55	; 0x37
 800429e:	f7fc fe09 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0301);
 80042a2:	f240 3101 	movw	r1, #769	; 0x301
 80042a6:	2038      	movs	r0, #56	; 0x38
 80042a8:	f7fc fe04 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0707);
 80042ac:	f240 7107 	movw	r1, #1799	; 0x707
 80042b0:	2039      	movs	r0, #57	; 0x39
 80042b2:	f7fc fdff 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x003c,0x0000);
 80042b6:	2100      	movs	r1, #0
 80042b8:	203c      	movs	r0, #60	; 0x3c
 80042ba:	f7fc fdfb 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x003d,0x0a0a);
 80042be:	f640 210a 	movw	r1, #2570	; 0xa0a
 80042c2:	203d      	movs	r0, #61	; 0x3d
 80042c4:	f7fc fdf6 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 80042c8:	2032      	movs	r0, #50	; 0x32
 80042ca:	f001 fb61 	bl	8005990 <HAL_Delay>
        LCD_WriteReg(0x0050,0x0000); //水平GRAM起始位置
 80042ce:	2100      	movs	r1, #0
 80042d0:	2050      	movs	r0, #80	; 0x50
 80042d2:	f7fc fdef 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00ef); //水平GRAM终止位置
 80042d6:	21ef      	movs	r1, #239	; 0xef
 80042d8:	2051      	movs	r0, #81	; 0x51
 80042da:	f7fc fdeb 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000); //垂直GRAM起始位置
 80042de:	2100      	movs	r1, #0
 80042e0:	2052      	movs	r0, #82	; 0x52
 80042e2:	f7fc fde7 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013f); //垂直GRAM终止位置
 80042e6:	f240 113f 	movw	r1, #319	; 0x13f
 80042ea:	2053      	movs	r0, #83	; 0x53
 80042ec:	f7fc fde2 	bl	8000eb4 <LCD_WriteReg>

         LCD_WriteReg(0x0060,0xa700);
 80042f0:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80042f4:	2060      	movs	r0, #96	; 0x60
 80042f6:	f7fc fddd 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 80042fa:	2101      	movs	r1, #1
 80042fc:	2061      	movs	r0, #97	; 0x61
 80042fe:	f7fc fdd9 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x006a,0x0000);
 8004302:	2100      	movs	r1, #0
 8004304:	206a      	movs	r0, #106	; 0x6a
 8004306:	f7fc fdd5 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 800430a:	2100      	movs	r1, #0
 800430c:	2080      	movs	r0, #128	; 0x80
 800430e:	f7fc fdd1 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0081,0x0000);
 8004312:	2100      	movs	r1, #0
 8004314:	2081      	movs	r0, #129	; 0x81
 8004316:	f7fc fdcd 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 800431a:	2100      	movs	r1, #0
 800431c:	2082      	movs	r0, #130	; 0x82
 800431e:	f7fc fdc9 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8004322:	2100      	movs	r1, #0
 8004324:	2083      	movs	r0, #131	; 0x83
 8004326:	f7fc fdc5 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 800432a:	2100      	movs	r1, #0
 800432c:	2084      	movs	r0, #132	; 0x84
 800432e:	f7fc fdc1 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8004332:	2100      	movs	r1, #0
 8004334:	2085      	movs	r0, #133	; 0x85
 8004336:	f7fc fdbd 	bl	8000eb4 <LCD_WriteReg>

        LCD_WriteReg(0x0090,0x0010);
 800433a:	2110      	movs	r1, #16
 800433c:	2090      	movs	r0, #144	; 0x90
 800433e:	f7fc fdb9 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0600);
 8004342:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004346:	2092      	movs	r0, #146	; 0x92
 8004348:	f7fc fdb4 	bl	8000eb4 <LCD_WriteReg>
        //开启显示设置
        LCD_WriteReg(0x0007,0x0133);
 800434c:	f240 1133 	movw	r1, #307	; 0x133
 8004350:	2007      	movs	r0, #7
 8004352:	f7fc fdaf 	bl	8000eb4 <LCD_WriteReg>
 8004356:	f000 bf85 	b.w	8005264 <LCD_Init+0x383c>
 800435a:	bf00      	nop
 800435c:	20000258 	.word	0x20000258
	}else if(lcddev.id==0x9320)//测试OK.
 8004360:	4bce      	ldr	r3, [pc, #824]	; (800469c <LCD_Init+0x2c74>)
 8004362:	889b      	ldrh	r3, [r3, #4]
 8004364:	f249 3220 	movw	r2, #37664	; 0x9320
 8004368:	4293      	cmp	r3, r2
 800436a:	f040 80ad 	bne.w	80044c8 <LCD_Init+0x2aa0>
	{
		LCD_WriteReg(0x00,0x0000);
 800436e:	2100      	movs	r1, #0
 8004370:	2000      	movs	r0, #0
 8004372:	f7fc fd9f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x01,0x0100);	//Driver Output Contral.
 8004376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800437a:	2001      	movs	r0, #1
 800437c:	f7fc fd9a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);	//LCD Driver Waveform Contral.
 8004380:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004384:	2002      	movs	r0, #2
 8004386:	f7fc fd95 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode Set.
 800438a:	f241 0130 	movw	r1, #4144	; 0x1030
 800438e:	2003      	movs	r0, #3
 8004390:	f7fc fd90 	bl	8000eb4 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04,0x0000);	//Scalling Contral.
 8004394:	2100      	movs	r1, #0
 8004396:	2004      	movs	r0, #4
 8004398:	f7fc fd8c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0202);	//Display Contral 2.(0x0207)
 800439c:	f240 2102 	movw	r1, #514	; 0x202
 80043a0:	2008      	movs	r0, #8
 80043a2:	f7fc fd87 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000);	//Display Contral 3.(0x0000)
 80043a6:	2100      	movs	r1, #0
 80043a8:	2009      	movs	r0, #9
 80043aa:	f7fc fd83 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
 80043ae:	2100      	movs	r1, #0
 80043b0:	200a      	movs	r0, #10
 80043b2:	f7fc fd7f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
 80043b6:	2101      	movs	r1, #1
 80043b8:	200c      	movs	r0, #12
 80043ba:	f7fc fd7b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0d,0x0000);	//Frame Maker Position.
 80043be:	2100      	movs	r1, #0
 80043c0:	200d      	movs	r0, #13
 80043c2:	f7fc fd77 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0f,0x0000);	//Extern Display Interface Contral 2.
 80043c6:	2100      	movs	r1, #0
 80043c8:	200f      	movs	r0, #15
 80043ca:	f7fc fd73 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(50);
 80043ce:	2032      	movs	r0, #50	; 0x32
 80043d0:	f001 fade 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0x07,0x0101);	//Display Contral.
 80043d4:	f240 1101 	movw	r1, #257	; 0x101
 80043d8:	2007      	movs	r0, #7
 80043da:	f7fc fd6b 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(50);
 80043de:	2032      	movs	r0, #50	; 0x32
 80043e0:	f001 fad6 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
 80043e4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80043e8:	2010      	movs	r0, #16
 80043ea:	f7fc fd63 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0007);								//Power Control 2.(0x0001)
 80043ee:	2107      	movs	r1, #7
 80043f0:	2011      	movs	r0, #17
 80043f2:	f7fc fd5f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));				//Power Control 3.(0x0138)
 80043f6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80043fa:	2012      	movs	r0, #18
 80043fc:	f7fc fd5a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0b00);								//Power Control 4.
 8004400:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004404:	2013      	movs	r0, #19
 8004406:	f7fc fd55 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0000);								//Power Control 7.
 800440a:	2100      	movs	r1, #0
 800440c:	2029      	movs	r0, #41	; 0x29
 800440e:	f7fc fd51 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x2b,(1<<14)|(1<<4));
 8004412:	f244 0110 	movw	r1, #16400	; 0x4010
 8004416:	202b      	movs	r0, #43	; 0x2b
 8004418:	f7fc fd4c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x50,0);	//Set X Star
 800441c:	2100      	movs	r1, #0
 800441e:	2050      	movs	r0, #80	; 0x50
 8004420:	f7fc fd48 	bl	8000eb4 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51,239);	//Set Y Star
 8004424:	21ef      	movs	r1, #239	; 0xef
 8004426:	2051      	movs	r0, #81	; 0x51
 8004428:	f7fc fd44 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x52,0);	//Set Y End.t.
 800442c:	2100      	movs	r1, #0
 800442e:	2052      	movs	r0, #82	; 0x52
 8004430:	f7fc fd40 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x53,319);	//
 8004434:	f240 113f 	movw	r1, #319	; 0x13f
 8004438:	2053      	movs	r0, #83	; 0x53
 800443a:	f7fc fd3b 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x60,0x2700);	//Driver Output Control.
 800443e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004442:	2060      	movs	r0, #96	; 0x60
 8004444:	f7fc fd36 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x61,0x0001);	//Driver Output Control.
 8004448:	2101      	movs	r1, #1
 800444a:	2061      	movs	r0, #97	; 0x61
 800444c:	f7fc fd32 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x6a,0x0000);	//Vertical Srcoll Control.
 8004450:	2100      	movs	r1, #0
 8004452:	206a      	movs	r0, #106	; 0x6a
 8004454:	f7fc fd2e 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x80,0x0000);	//Display Position? Partial Display 1.
 8004458:	2100      	movs	r1, #0
 800445a:	2080      	movs	r0, #128	; 0x80
 800445c:	f7fc fd2a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000);	//RAM Address Start? Partial Display 1.
 8004460:	2100      	movs	r1, #0
 8004462:	2081      	movs	r0, #129	; 0x81
 8004464:	f7fc fd26 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000);	//RAM Address End-Partial Display 1.
 8004468:	2100      	movs	r1, #0
 800446a:	2082      	movs	r0, #130	; 0x82
 800446c:	f7fc fd22 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000);	//Displsy Position? Partial Display 2.
 8004470:	2100      	movs	r1, #0
 8004472:	2083      	movs	r0, #131	; 0x83
 8004474:	f7fc fd1e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000);	//RAM Address Start? Partial Display 2.
 8004478:	2100      	movs	r1, #0
 800447a:	2084      	movs	r0, #132	; 0x84
 800447c:	f7fc fd1a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000);	//RAM Address End? Partial Display 2.
 8004480:	2100      	movs	r1, #0
 8004482:	2085      	movs	r0, #133	; 0x85
 8004484:	f7fc fd16 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
 8004488:	2110      	movs	r1, #16
 800448a:	2090      	movs	r0, #144	; 0x90
 800448c:	f7fc fd12 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
 8004490:	2100      	movs	r1, #0
 8004492:	2092      	movs	r0, #146	; 0x92
 8004494:	f7fc fd0e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0001);	//Panel Interface Contral 3.
 8004498:	2101      	movs	r1, #1
 800449a:	2093      	movs	r0, #147	; 0x93
 800449c:	f7fc fd0a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
 80044a0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80044a4:	2095      	movs	r0, #149	; 0x95
 80044a6:	f7fc fd05 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x97,(0<<8));	//
 80044aa:	2100      	movs	r1, #0
 80044ac:	2097      	movs	r0, #151	; 0x97
 80044ae:	f7fc fd01 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x98,0x0000);	//Frame Cycle Contral.
 80044b2:	2100      	movs	r1, #0
 80044b4:	2098      	movs	r0, #152	; 0x98
 80044b6:	f7fc fcfd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);	//(0x0173)
 80044ba:	f240 1173 	movw	r1, #371	; 0x173
 80044be:	2007      	movs	r0, #7
 80044c0:	f7fc fcf8 	bl	8000eb4 <LCD_WriteReg>
 80044c4:	f000 bece 	b.w	8005264 <LCD_Init+0x383c>
	}else if(lcddev.id==0X9331)//OK |/|/|
 80044c8:	4b74      	ldr	r3, [pc, #464]	; (800469c <LCD_Init+0x2c74>)
 80044ca:	889b      	ldrh	r3, [r3, #4]
 80044cc:	f249 3231 	movw	r2, #37681	; 0x9331
 80044d0:	4293      	cmp	r3, r2
 80044d2:	f040 80e5 	bne.w	80046a0 <LCD_Init+0x2c78>
	{
		LCD_WriteReg(0x00E7, 0x1014);
 80044d6:	f241 0114 	movw	r1, #4116	; 0x1014
 80044da:	20e7      	movs	r0, #231	; 0xe7
 80044dc:	f7fc fcea 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80044e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044e4:	2001      	movs	r0, #1
 80044e6:	f7fc fce5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80044ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80044ee:	2002      	movs	r0, #2
 80044f0:	f7fc fce0 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(1<<3));//65K
 80044f4:	f241 0138 	movw	r1, #4152	; 0x1038
 80044f8:	2003      	movs	r0, #3
 80044fa:	f7fc fcdb 	bl	8000eb4 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 80044fe:	f240 2102 	movw	r1, #514	; 0x202
 8004502:	2008      	movs	r0, #8
 8004504:	f7fc fcd6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004508:	2100      	movs	r1, #0
 800450a:	2009      	movs	r0, #9
 800450c:	f7fc fcd2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004510:	2100      	movs	r1, #0
 8004512:	200a      	movs	r0, #10
 8004514:	f7fc fcce 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004518:	2100      	movs	r1, #0
 800451a:	200c      	movs	r0, #12
 800451c:	f7fc fcca 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004520:	2100      	movs	r1, #0
 8004522:	200d      	movs	r0, #13
 8004524:	f7fc fcc6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004528:	2100      	movs	r1, #0
 800452a:	200f      	movs	r0, #15
 800452c:	f7fc fcc2 	bl	8000eb4 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004530:	2100      	movs	r1, #0
 8004532:	2010      	movs	r0, #16
 8004534:	f7fc fcbe 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004538:	2107      	movs	r1, #7
 800453a:	2011      	movs	r0, #17
 800453c:	f7fc fcba 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004540:	2100      	movs	r1, #0
 8004542:	2012      	movs	r0, #18
 8004544:	f7fc fcb6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004548:	2100      	movs	r1, #0
 800454a:	2013      	movs	r0, #19
 800454c:	f7fc fcb2 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004550:	20c8      	movs	r0, #200	; 0xc8
 8004552:	f001 fa1d 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004556:	f241 6190 	movw	r1, #5776	; 0x1690
 800455a:	2010      	movs	r0, #16
 800455c:	f7fc fcaa 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004560:	f240 2127 	movw	r1, #551	; 0x227
 8004564:	2011      	movs	r0, #17
 8004566:	f7fc fca5 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800456a:	2032      	movs	r0, #50	; 0x32
 800456c:	f001 fa10 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004570:	210c      	movs	r1, #12
 8004572:	2012      	movs	r0, #18
 8004574:	f7fc fc9e 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004578:	2032      	movs	r0, #50	; 0x32
 800457a:	f001 fa09 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 800457e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004582:	2013      	movs	r0, #19
 8004584:	f7fc fc96 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004588:	2111      	movs	r1, #17
 800458a:	2029      	movs	r0, #41	; 0x29
 800458c:	f7fc fc92 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004590:	210b      	movs	r1, #11
 8004592:	202b      	movs	r0, #43	; 0x2b
 8004594:	f7fc fc8e 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004598:	2032      	movs	r0, #50	; 0x32
 800459a:	f001 f9f9 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 800459e:	2100      	movs	r1, #0
 80045a0:	2020      	movs	r0, #32
 80045a2:	f7fc fc87 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80045a6:	f240 113f 	movw	r1, #319	; 0x13f
 80045aa:	2021      	movs	r0, #33	; 0x21
 80045ac:	f7fc fc82 	bl	8000eb4 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 80045b0:	2100      	movs	r1, #0
 80045b2:	2030      	movs	r0, #48	; 0x30
 80045b4:	f7fc fc7e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 80045b8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80045bc:	2031      	movs	r0, #49	; 0x31
 80045be:	f7fc fc79 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 80045c2:	2100      	movs	r1, #0
 80045c4:	2032      	movs	r0, #50	; 0x32
 80045c6:	f7fc fc75 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80045ca:	f44f 7101 	mov.w	r1, #516	; 0x204
 80045ce:	2035      	movs	r0, #53	; 0x35
 80045d0:	f7fc fc70 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 80045d4:	f241 610a 	movw	r1, #5642	; 0x160a
 80045d8:	2036      	movs	r0, #54	; 0x36
 80045da:	f7fc fc6b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 80045de:	f240 7107 	movw	r1, #1799	; 0x707
 80045e2:	2037      	movs	r0, #55	; 0x37
 80045e4:	f7fc fc66 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 80045e8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80045ec:	2038      	movs	r0, #56	; 0x38
 80045ee:	f7fc fc61 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 80045f2:	f240 7107 	movw	r1, #1799	; 0x707
 80045f6:	2039      	movs	r0, #57	; 0x39
 80045f8:	f7fc fc5c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 80045fc:	f240 4102 	movw	r1, #1026	; 0x402
 8004600:	203c      	movs	r0, #60	; 0x3c
 8004602:	f7fc fc57 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004606:	f640 410f 	movw	r1, #3087	; 0xc0f
 800460a:	203d      	movs	r0, #61	; 0x3d
 800460c:	f7fc fc52 	bl	8000eb4 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004610:	2100      	movs	r1, #0
 8004612:	2050      	movs	r0, #80	; 0x50
 8004614:	f7fc fc4e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004618:	21ef      	movs	r1, #239	; 0xef
 800461a:	2051      	movs	r0, #81	; 0x51
 800461c:	f7fc fc4a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004620:	2100      	movs	r1, #0
 8004622:	2052      	movs	r0, #82	; 0x52
 8004624:	f7fc fc46 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004628:	f240 113f 	movw	r1, #319	; 0x13f
 800462c:	2053      	movs	r0, #83	; 0x53
 800462e:	f7fc fc41 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004632:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004636:	2060      	movs	r0, #96	; 0x60
 8004638:	f7fc fc3c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
 800463c:	2101      	movs	r1, #1
 800463e:	2061      	movs	r0, #97	; 0x61
 8004640:	f7fc fc38 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004644:	2100      	movs	r1, #0
 8004646:	206a      	movs	r0, #106	; 0x6a
 8004648:	f7fc fc34 	bl	8000eb4 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 800464c:	2100      	movs	r1, #0
 800464e:	2080      	movs	r0, #128	; 0x80
 8004650:	f7fc fc30 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004654:	2100      	movs	r1, #0
 8004656:	2081      	movs	r0, #129	; 0x81
 8004658:	f7fc fc2c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 800465c:	2100      	movs	r1, #0
 800465e:	2082      	movs	r0, #130	; 0x82
 8004660:	f7fc fc28 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004664:	2100      	movs	r1, #0
 8004666:	2083      	movs	r0, #131	; 0x83
 8004668:	f7fc fc24 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 800466c:	2100      	movs	r1, #0
 800466e:	2084      	movs	r0, #132	; 0x84
 8004670:	f7fc fc20 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004674:	2100      	movs	r1, #0
 8004676:	2085      	movs	r0, #133	; 0x85
 8004678:	f7fc fc1c 	bl	8000eb4 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 800467c:	2110      	movs	r1, #16
 800467e:	2090      	movs	r0, #144	; 0x90
 8004680:	f7fc fc18 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004684:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004688:	2092      	movs	r0, #146	; 0x92
 800468a:	f7fc fc13 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 800468e:	f240 1133 	movw	r1, #307	; 0x133
 8004692:	2007      	movs	r0, #7
 8004694:	f7fc fc0e 	bl	8000eb4 <LCD_WriteReg>
 8004698:	f000 bde4 	b.w	8005264 <LCD_Init+0x383c>
 800469c:	20000258 	.word	0x20000258
	}else if(lcddev.id==0x5408)
 80046a0:	4be2      	ldr	r3, [pc, #904]	; (8004a2c <LCD_Init+0x3004>)
 80046a2:	889b      	ldrh	r3, [r3, #4]
 80046a4:	f245 4208 	movw	r2, #21512	; 0x5408
 80046a8:	4293      	cmp	r3, r2
 80046aa:	f040 80a3 	bne.w	80047f4 <LCD_Init+0x2dcc>
	{
		LCD_WriteReg(0x01,0x0100);
 80046ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046b2:	2001      	movs	r0, #1
 80046b4:	f7fc fbfe 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);//LCD Driving Waveform Contral
 80046b8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80046bc:	2002      	movs	r0, #2
 80046be:	f7fc fbf9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode设置
 80046c2:	f241 0130 	movw	r1, #4144	; 0x1030
 80046c6:	2003      	movs	r0, #3
 80046c8:	f7fc fbf4 	bl	8000eb4 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04,0x0000); //Scalling Control register
 80046cc:	2100      	movs	r1, #0
 80046ce:	2004      	movs	r0, #4
 80046d0:	f7fc fbf0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0207); //Display Control 2
 80046d4:	f240 2107 	movw	r1, #519	; 0x207
 80046d8:	2008      	movs	r0, #8
 80046da:	f7fc fbeb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000); //Display Control 3
 80046de:	2100      	movs	r1, #0
 80046e0:	2009      	movs	r0, #9
 80046e2:	f7fc fbe7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0A,0x0000); //Frame Cycle Control
 80046e6:	2100      	movs	r1, #0
 80046e8:	200a      	movs	r0, #10
 80046ea:	f7fc fbe3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0C,0x0000); //External Display Interface Control 1
 80046ee:	2100      	movs	r1, #0
 80046f0:	200c      	movs	r0, #12
 80046f2:	f7fc fbdf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0D,0x0000); //Frame Maker Position
 80046f6:	2100      	movs	r1, #0
 80046f8:	200d      	movs	r0, #13
 80046fa:	f7fc fbdb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0F,0x0000); //External Display Interface Control 2
 80046fe:	2100      	movs	r1, #0
 8004700:	200f      	movs	r0, #15
 8004702:	f7fc fbd7 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004706:	2014      	movs	r0, #20
 8004708:	f001 f942 	bl	8005990 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10,0x16B0); //0x14B0 //Power Control 1
 800470c:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004710:	2010      	movs	r0, #16
 8004712:	f7fc fbcf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0001); //0x0007 //Power Control 2
 8004716:	2101      	movs	r1, #1
 8004718:	2011      	movs	r0, #17
 800471a:	f7fc fbcb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x17,0x0001); //0x0000 //Power Control 3
 800471e:	2101      	movs	r1, #1
 8004720:	2017      	movs	r0, #23
 8004722:	f7fc fbc7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x12,0x0138); //0x013B //Power Control 4
 8004726:	f44f 719c 	mov.w	r1, #312	; 0x138
 800472a:	2012      	movs	r0, #18
 800472c:	f7fc fbc2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0800); //0x0800 //Power Control 5
 8004730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004734:	2013      	movs	r0, #19
 8004736:	f7fc fbbd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0009); //NVM read data 2
 800473a:	2109      	movs	r1, #9
 800473c:	2029      	movs	r0, #41	; 0x29
 800473e:	f7fc fbb9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x2a,0x0009); //NVM read data 3
 8004742:	2109      	movs	r1, #9
 8004744:	202a      	movs	r0, #42	; 0x2a
 8004746:	f7fc fbb5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xa4,0x0000);
 800474a:	2100      	movs	r1, #0
 800474c:	20a4      	movs	r0, #164	; 0xa4
 800474e:	f7fc fbb1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x50,0x0000); //设置操作窗口的X轴开始列
 8004752:	2100      	movs	r1, #0
 8004754:	2050      	movs	r0, #80	; 0x50
 8004756:	f7fc fbad 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x51,0x00EF); //设置操作窗口的X轴结束列
 800475a:	21ef      	movs	r1, #239	; 0xef
 800475c:	2051      	movs	r0, #81	; 0x51
 800475e:	f7fc fba9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x52,0x0000); //设置操作窗口的Y轴开始行
 8004762:	2100      	movs	r1, #0
 8004764:	2052      	movs	r0, #82	; 0x52
 8004766:	f7fc fba5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x53,0x013F); //设置操作窗口的Y轴结束行
 800476a:	f240 113f 	movw	r1, #319	; 0x13f
 800476e:	2053      	movs	r0, #83	; 0x53
 8004770:	f7fc fba0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x60,0x2700); //Driver Output Control
 8004774:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004778:	2060      	movs	r0, #96	; 0x60
 800477a:	f7fc fb9b 	bl	8000eb4 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61,0x0001); //Driver Output Control
 800477e:	2101      	movs	r1, #1
 8004780:	2061      	movs	r0, #97	; 0x61
 8004782:	f7fc fb97 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x6A,0x0000); //Vertical Scroll Control
 8004786:	2100      	movs	r1, #0
 8004788:	206a      	movs	r0, #106	; 0x6a
 800478a:	f7fc fb93 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x80,0x0000); //Display Position – Partial Display 1
 800478e:	2100      	movs	r1, #0
 8004790:	2080      	movs	r0, #128	; 0x80
 8004792:	f7fc fb8f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000); //RAM Address Start – Partial Display 1
 8004796:	2100      	movs	r1, #0
 8004798:	2081      	movs	r0, #129	; 0x81
 800479a:	f7fc fb8b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000); //RAM address End - Partial Display 1
 800479e:	2100      	movs	r1, #0
 80047a0:	2082      	movs	r0, #130	; 0x82
 80047a2:	f7fc fb87 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000); //Display Position – Partial Display 2
 80047a6:	2100      	movs	r1, #0
 80047a8:	2083      	movs	r0, #131	; 0x83
 80047aa:	f7fc fb83 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000); //RAM Address Start – Partial Display 2
 80047ae:	2100      	movs	r1, #0
 80047b0:	2084      	movs	r0, #132	; 0x84
 80047b2:	f7fc fb7f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000); //RAM address End – Partail Display2
 80047b6:	2100      	movs	r1, #0
 80047b8:	2085      	movs	r0, #133	; 0x85
 80047ba:	f7fc fb7b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x90,0x0013); //Frame Cycle Control
 80047be:	2113      	movs	r1, #19
 80047c0:	2090      	movs	r0, #144	; 0x90
 80047c2:	f7fc fb77 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);  //Panel Interface Control 2
 80047c6:	2100      	movs	r1, #0
 80047c8:	2092      	movs	r0, #146	; 0x92
 80047ca:	f7fc fb73 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0003); //Panel Interface control 3
 80047ce:	2103      	movs	r1, #3
 80047d0:	2093      	movs	r0, #147	; 0x93
 80047d2:	f7fc fb6f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);  //Frame Cycle Control
 80047d6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80047da:	2095      	movs	r0, #149	; 0x95
 80047dc:	f7fc fb6a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);
 80047e0:	f240 1173 	movw	r1, #371	; 0x173
 80047e4:	2007      	movs	r0, #7
 80047e6:	f7fc fb65 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(50);
 80047ea:	2032      	movs	r0, #50	; 0x32
 80047ec:	f001 f8d0 	bl	8005990 <HAL_Delay>
 80047f0:	f000 bd38 	b.w	8005264 <LCD_Init+0x383c>
	}
	else if(lcddev.id==0x1505)//OK
 80047f4:	4b8d      	ldr	r3, [pc, #564]	; (8004a2c <LCD_Init+0x3004>)
 80047f6:	889b      	ldrh	r3, [r3, #4]
 80047f8:	f241 5205 	movw	r2, #5381	; 0x1505
 80047fc:	4293      	cmp	r3, r2
 80047fe:	f040 8117 	bne.w	8004a30 <LCD_Init+0x3008>
	{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
        LCD_WriteReg(0x0007,0x0000);
 8004802:	2100      	movs	r1, #0
 8004804:	2007      	movs	r0, #7
 8004806:	f7fc fb55 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 800480a:	2032      	movs	r0, #50	; 0x32
 800480c:	f001 f8c0 	bl	8005990 <HAL_Delay>
        LCD_WriteReg(0x0012,0x011C);//0x011A   why need to set several times?
 8004810:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004814:	2012      	movs	r0, #18
 8004816:	f7fc fb4d 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x00A4,0x0001);//NVM
 800481a:	2101      	movs	r1, #1
 800481c:	20a4      	movs	r0, #164	; 0xa4
 800481e:	f7fc fb49 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x000F);
 8004822:	210f      	movs	r1, #15
 8004824:	2008      	movs	r0, #8
 8004826:	f7fc fb45 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000A,0x0008);
 800482a:	2108      	movs	r1, #8
 800482c:	200a      	movs	r0, #10
 800482e:	f7fc fb41 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000D,0x0008);
 8004832:	2108      	movs	r1, #8
 8004834:	200d      	movs	r0, #13
 8004836:	f7fc fb3d 	bl	8000eb4 <LCD_WriteReg>
  		//伽马校正
        LCD_WriteReg(0x0030,0x0707);
 800483a:	f240 7107 	movw	r1, #1799	; 0x707
 800483e:	2030      	movs	r0, #48	; 0x30
 8004840:	f7fc fb38 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0007); //0x0707
 8004844:	2107      	movs	r1, #7
 8004846:	2031      	movs	r0, #49	; 0x31
 8004848:	f7fc fb34 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0603);
 800484c:	f240 6103 	movw	r1, #1539	; 0x603
 8004850:	2032      	movs	r0, #50	; 0x32
 8004852:	f7fc fb2f 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0033,0x0700);
 8004856:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800485a:	2033      	movs	r0, #51	; 0x33
 800485c:	f7fc fb2a 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0034,0x0202);
 8004860:	f240 2102 	movw	r1, #514	; 0x202
 8004864:	2034      	movs	r0, #52	; 0x34
 8004866:	f7fc fb25 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0002); //?0x0606
 800486a:	2102      	movs	r1, #2
 800486c:	2035      	movs	r0, #53	; 0x35
 800486e:	f7fc fb21 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x1F0F);
 8004872:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004876:	2036      	movs	r0, #54	; 0x36
 8004878:	f7fc fb1c 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0707); //0x0f0f  0x0105
 800487c:	f240 7107 	movw	r1, #1799	; 0x707
 8004880:	2037      	movs	r0, #55	; 0x37
 8004882:	f7fc fb17 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0000);
 8004886:	2100      	movs	r1, #0
 8004888:	2038      	movs	r0, #56	; 0x38
 800488a:	f7fc fb13 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0000);
 800488e:	2100      	movs	r1, #0
 8004890:	2039      	movs	r0, #57	; 0x39
 8004892:	f7fc fb0f 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x003A,0x0707);
 8004896:	f240 7107 	movw	r1, #1799	; 0x707
 800489a:	203a      	movs	r0, #58	; 0x3a
 800489c:	f7fc fb0a 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x003B,0x0000); //0x0303
 80048a0:	2100      	movs	r1, #0
 80048a2:	203b      	movs	r0, #59	; 0x3b
 80048a4:	f7fc fb06 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x003C,0x0007); //?0x0707
 80048a8:	2107      	movs	r1, #7
 80048aa:	203c      	movs	r0, #60	; 0x3c
 80048ac:	f7fc fb02 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x003D,0x0000); //0x1313//0x1f08
 80048b0:	2100      	movs	r1, #0
 80048b2:	203d      	movs	r0, #61	; 0x3d
 80048b4:	f7fc fafe 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 80048b8:	2032      	movs	r0, #50	; 0x32
 80048ba:	f001 f869 	bl	8005990 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0001);
 80048be:	2101      	movs	r1, #1
 80048c0:	2007      	movs	r0, #7
 80048c2:	f7fc faf7 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0017,0x0001);//开启电源
 80048c6:	2101      	movs	r1, #1
 80048c8:	2017      	movs	r0, #23
 80048ca:	f7fc faf3 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 80048ce:	2032      	movs	r0, #50	; 0x32
 80048d0:	f001 f85e 	bl	8005990 <HAL_Delay>
  		//电源配置
        LCD_WriteReg(0x0010,0x17A0);
 80048d4:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 80048d8:	2010      	movs	r0, #16
 80048da:	f7fc faeb 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0217);//reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 80048de:	f240 2117 	movw	r1, #535	; 0x217
 80048e2:	2011      	movs	r0, #17
 80048e4:	f7fc fae6 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x011E);//0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 80048e8:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80048ec:	2012      	movs	r0, #18
 80048ee:	f7fc fae1 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0F00);//VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 80048f2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80048f6:	2013      	movs	r0, #19
 80048f8:	f7fc fadc 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x002A,0x0000);
 80048fc:	2100      	movs	r1, #0
 80048fe:	202a      	movs	r0, #42	; 0x2a
 8004900:	f7fc fad8 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x000A);//0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004904:	210a      	movs	r1, #10
 8004906:	2029      	movs	r0, #41	; 0x29
 8004908:	f7fc fad4 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x013E);// 0x013C  power supply on
 800490c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004910:	2012      	movs	r0, #18
 8004912:	f7fc facf 	bl	8000eb4 <LCD_WriteReg>
        //Coordinates Control//
        LCD_WriteReg(0x0050,0x0000);//0x0e00
 8004916:	2100      	movs	r1, #0
 8004918:	2050      	movs	r0, #80	; 0x50
 800491a:	f7fc facb 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00EF);
 800491e:	21ef      	movs	r1, #239	; 0xef
 8004920:	2051      	movs	r0, #81	; 0x51
 8004922:	f7fc fac7 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000);
 8004926:	2100      	movs	r1, #0
 8004928:	2052      	movs	r0, #82	; 0x52
 800492a:	f7fc fac3 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013F);
 800492e:	f240 113f 	movw	r1, #319	; 0x13f
 8004932:	2053      	movs	r0, #83	; 0x53
 8004934:	f7fc fabe 	bl	8000eb4 <LCD_WriteReg>
    	//Pannel Image Control//
        LCD_WriteReg(0x0060,0x2700);
 8004938:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800493c:	2060      	movs	r0, #96	; 0x60
 800493e:	f7fc fab9 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8004942:	2101      	movs	r1, #1
 8004944:	2061      	movs	r0, #97	; 0x61
 8004946:	f7fc fab5 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x006A,0x0000);
 800494a:	2100      	movs	r1, #0
 800494c:	206a      	movs	r0, #106	; 0x6a
 800494e:	f7fc fab1 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8004952:	2100      	movs	r1, #0
 8004954:	2080      	movs	r0, #128	; 0x80
 8004956:	f7fc faad 	bl	8000eb4 <LCD_WriteReg>
    	//Partial Image Control//
        LCD_WriteReg(0x0081,0x0000);
 800495a:	2100      	movs	r1, #0
 800495c:	2081      	movs	r0, #129	; 0x81
 800495e:	f7fc faa9 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8004962:	2100      	movs	r1, #0
 8004964:	2082      	movs	r0, #130	; 0x82
 8004966:	f7fc faa5 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 800496a:	2100      	movs	r1, #0
 800496c:	2083      	movs	r0, #131	; 0x83
 800496e:	f7fc faa1 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8004972:	2100      	movs	r1, #0
 8004974:	2084      	movs	r0, #132	; 0x84
 8004976:	f7fc fa9d 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 800497a:	2100      	movs	r1, #0
 800497c:	2085      	movs	r0, #133	; 0x85
 800497e:	f7fc fa99 	bl	8000eb4 <LCD_WriteReg>
  		//Panel Interface Control//
        LCD_WriteReg(0x0090,0x0013);//0x0010 frenqucy
 8004982:	2113      	movs	r1, #19
 8004984:	2090      	movs	r0, #144	; 0x90
 8004986:	f7fc fa95 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0300);
 800498a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800498e:	2092      	movs	r0, #146	; 0x92
 8004990:	f7fc fa90 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0093,0x0005);
 8004994:	2105      	movs	r1, #5
 8004996:	2093      	movs	r0, #147	; 0x93
 8004998:	f7fc fa8c 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0095,0x0000);
 800499c:	2100      	movs	r1, #0
 800499e:	2095      	movs	r0, #149	; 0x95
 80049a0:	f7fc fa88 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0097,0x0000);
 80049a4:	2100      	movs	r1, #0
 80049a6:	2097      	movs	r0, #151	; 0x97
 80049a8:	f7fc fa84 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0098,0x0000);
 80049ac:	2100      	movs	r1, #0
 80049ae:	2098      	movs	r0, #152	; 0x98
 80049b0:	f7fc fa80 	bl	8000eb4 <LCD_WriteReg>

        LCD_WriteReg(0x0001,0x0100);
 80049b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049b8:	2001      	movs	r0, #1
 80049ba:	f7fc fa7b 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);
 80049be:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80049c2:	2002      	movs	r0, #2
 80049c4:	f7fc fa76 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 80049c8:	f241 0138 	movw	r1, #4152	; 0x1038
 80049cc:	2003      	movs	r0, #3
 80049ce:	f7fc fa71 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 80049d2:	2100      	movs	r1, #0
 80049d4:	2004      	movs	r0, #4
 80049d6:	f7fc fa6d 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000C,0x0000);
 80049da:	2100      	movs	r1, #0
 80049dc:	200c      	movs	r0, #12
 80049de:	f7fc fa69 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000F,0x0000);
 80049e2:	2100      	movs	r1, #0
 80049e4:	200f      	movs	r0, #15
 80049e6:	f7fc fa65 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0020,0x0000);
 80049ea:	2100      	movs	r1, #0
 80049ec:	2020      	movs	r0, #32
 80049ee:	f7fc fa61 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 80049f2:	2100      	movs	r1, #0
 80049f4:	2021      	movs	r0, #33	; 0x21
 80049f6:	f7fc fa5d 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0007,0x0021);
 80049fa:	2121      	movs	r1, #33	; 0x21
 80049fc:	2007      	movs	r0, #7
 80049fe:	f7fc fa59 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(20);
 8004a02:	2014      	movs	r0, #20
 8004a04:	f000 ffc4 	bl	8005990 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0061);
 8004a08:	2161      	movs	r1, #97	; 0x61
 8004a0a:	2007      	movs	r0, #7
 8004a0c:	f7fc fa52 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(20);
 8004a10:	2014      	movs	r0, #20
 8004a12:	f000 ffbd 	bl	8005990 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0173);
 8004a16:	f240 1173 	movw	r1, #371	; 0x173
 8004a1a:	2007      	movs	r0, #7
 8004a1c:	f7fc fa4a 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(20);
 8004a20:	2014      	movs	r0, #20
 8004a22:	f000 ffb5 	bl	8005990 <HAL_Delay>
 8004a26:	f000 bc1d 	b.w	8005264 <LCD_Init+0x383c>
 8004a2a:	bf00      	nop
 8004a2c:	20000258 	.word	0x20000258
	}else if(lcddev.id==0xB505)
 8004a30:	4bef      	ldr	r3, [pc, #956]	; (8004df0 <LCD_Init+0x33c8>)
 8004a32:	889b      	ldrh	r3, [r3, #4]
 8004a34:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	f040 8102 	bne.w	8004c42 <LCD_Init+0x321a>
	{
		LCD_WriteReg(0x0000,0x0000);
 8004a3e:	2100      	movs	r1, #0
 8004a40:	2000      	movs	r0, #0
 8004a42:	f7fc fa37 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004a46:	2100      	movs	r1, #0
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f7fc fa33 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004a4e:	2100      	movs	r1, #0
 8004a50:	2000      	movs	r0, #0
 8004a52:	f7fc fa2f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004a56:	2100      	movs	r1, #0
 8004a58:	2000      	movs	r0, #0
 8004a5a:	f7fc fa2b 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x00a4,0x0001);
 8004a5e:	2101      	movs	r1, #1
 8004a60:	20a4      	movs	r0, #164	; 0xa4
 8004a62:	f7fc fa27 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004a66:	2014      	movs	r0, #20
 8004a68:	f000 ff92 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8004a6c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a70:	2060      	movs	r0, #96	; 0x60
 8004a72:	f7fc fa1f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8004a76:	f240 2102 	movw	r1, #514	; 0x202
 8004a7a:	2008      	movs	r0, #8
 8004a7c:	f7fc fa1a 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0214);
 8004a80:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004a84:	2030      	movs	r0, #48	; 0x30
 8004a86:	f7fc fa15 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x3715);
 8004a8a:	f243 7115 	movw	r1, #14101	; 0x3715
 8004a8e:	2031      	movs	r0, #49	; 0x31
 8004a90:	f7fc fa10 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0604);
 8004a94:	f240 6104 	movw	r1, #1540	; 0x604
 8004a98:	2032      	movs	r0, #50	; 0x32
 8004a9a:	f7fc fa0b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0e16);
 8004a9e:	f640 6116 	movw	r1, #3606	; 0xe16
 8004aa2:	2033      	movs	r0, #51	; 0x33
 8004aa4:	f7fc fa06 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x2211);
 8004aa8:	f242 2111 	movw	r1, #8721	; 0x2211
 8004aac:	2034      	movs	r0, #52	; 0x34
 8004aae:	f7fc fa01 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x1500);
 8004ab2:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004ab6:	2035      	movs	r0, #53	; 0x35
 8004ab8:	f7fc f9fc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x8507);
 8004abc:	f248 5107 	movw	r1, #34055	; 0x8507
 8004ac0:	2036      	movs	r0, #54	; 0x36
 8004ac2:	f7fc f9f7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x1407);
 8004ac6:	f241 4107 	movw	r1, #5127	; 0x1407
 8004aca:	2037      	movs	r0, #55	; 0x37
 8004acc:	f7fc f9f2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x1403);
 8004ad0:	f241 4103 	movw	r1, #5123	; 0x1403
 8004ad4:	2038      	movs	r0, #56	; 0x38
 8004ad6:	f7fc f9ed 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0020);
 8004ada:	2120      	movs	r1, #32
 8004adc:	2039      	movs	r0, #57	; 0x39
 8004ade:	f7fc f9e9 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x0090,0x001a);
 8004ae2:	211a      	movs	r1, #26
 8004ae4:	2090      	movs	r0, #144	; 0x90
 8004ae6:	f7fc f9e5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0010,0x0000);
 8004aea:	2100      	movs	r1, #0
 8004aec:	2010      	movs	r0, #16
 8004aee:	f7fc f9e1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 8004af2:	2107      	movs	r1, #7
 8004af4:	2011      	movs	r0, #17
 8004af6:	f7fc f9dd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 8004afa:	2100      	movs	r1, #0
 8004afc:	2012      	movs	r0, #18
 8004afe:	f7fc f9d9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 8004b02:	2100      	movs	r1, #0
 8004b04:	2013      	movs	r0, #19
 8004b06:	f7fc f9d5 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004b0a:	2014      	movs	r0, #20
 8004b0c:	f000 ff40 	bl	8005990 <HAL_Delay>

		LCD_WriteReg(0x0010,0x0730);
 8004b10:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004b14:	2010      	movs	r0, #16
 8004b16:	f7fc f9cd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0137);
 8004b1a:	f240 1137 	movw	r1, #311	; 0x137
 8004b1e:	2011      	movs	r0, #17
 8004b20:	f7fc f9c8 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004b24:	2014      	movs	r0, #20
 8004b26:	f000 ff33 	bl	8005990 <HAL_Delay>

		LCD_WriteReg(0x0012,0x01b8);
 8004b2a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004b2e:	2012      	movs	r0, #18
 8004b30:	f7fc f9c0 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004b34:	2014      	movs	r0, #20
 8004b36:	f000 ff2b 	bl	8005990 <HAL_Delay>

		LCD_WriteReg(0x0013,0x0f00);
 8004b3a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004b3e:	2013      	movs	r0, #19
 8004b40:	f7fc f9b8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x002a,0x0080);
 8004b44:	2180      	movs	r1, #128	; 0x80
 8004b46:	202a      	movs	r0, #42	; 0x2a
 8004b48:	f7fc f9b4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0029,0x0048);
 8004b4c:	2148      	movs	r1, #72	; 0x48
 8004b4e:	2029      	movs	r0, #41	; 0x29
 8004b50:	f7fc f9b0 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004b54:	2014      	movs	r0, #20
 8004b56:	f000 ff1b 	bl	8005990 <HAL_Delay>

		LCD_WriteReg(0x0001,0x0100);
 8004b5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b5e:	2001      	movs	r0, #1
 8004b60:	f7fc f9a8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 8004b64:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004b68:	2002      	movs	r0, #2
 8004b6a:	f7fc f9a3 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 8004b6e:	f241 0138 	movw	r1, #4152	; 0x1038
 8004b72:	2003      	movs	r0, #3
 8004b74:	f7fc f99e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8004b78:	f240 2102 	movw	r1, #514	; 0x202
 8004b7c:	2008      	movs	r0, #8
 8004b7e:	f7fc f999 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000a,0x0000);
 8004b82:	2100      	movs	r1, #0
 8004b84:	200a      	movs	r0, #10
 8004b86:	f7fc f995 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000c,0x0000);
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	200c      	movs	r0, #12
 8004b8e:	f7fc f991 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000d,0x0000);
 8004b92:	2100      	movs	r1, #0
 8004b94:	200d      	movs	r0, #13
 8004b96:	f7fc f98d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000e,0x0030);
 8004b9a:	2130      	movs	r1, #48	; 0x30
 8004b9c:	200e      	movs	r0, #14
 8004b9e:	f7fc f989 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0050,0x0000);
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	2050      	movs	r0, #80	; 0x50
 8004ba6:	f7fc f985 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00ef);
 8004baa:	21ef      	movs	r1, #239	; 0xef
 8004bac:	2051      	movs	r0, #81	; 0x51
 8004bae:	f7fc f981 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	2052      	movs	r0, #82	; 0x52
 8004bb6:	f7fc f97d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013f);
 8004bba:	f240 113f 	movw	r1, #319	; 0x13f
 8004bbe:	2053      	movs	r0, #83	; 0x53
 8004bc0:	f7fc f978 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0x2700);
 8004bc4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004bc8:	2060      	movs	r0, #96	; 0x60
 8004bca:	f7fc f973 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 8004bce:	2101      	movs	r1, #1
 8004bd0:	2061      	movs	r0, #97	; 0x61
 8004bd2:	f7fc f96f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x006a,0x0000);
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	206a      	movs	r0, #106	; 0x6a
 8004bda:	f7fc f96b 	bl	8000eb4 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090,0X0011);
 8004bde:	2111      	movs	r1, #17
 8004be0:	2090      	movs	r0, #144	; 0x90
 8004be2:	f7fc f967 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8004be6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004bea:	2092      	movs	r0, #146	; 0x92
 8004bec:	f7fc f962 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0093,0x0402);
 8004bf0:	f240 4102 	movw	r1, #1026	; 0x402
 8004bf4:	2093      	movs	r0, #147	; 0x93
 8004bf6:	f7fc f95d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0094,0x0002);
 8004bfa:	2102      	movs	r1, #2
 8004bfc:	2094      	movs	r0, #148	; 0x94
 8004bfe:	f7fc f959 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004c02:	2014      	movs	r0, #20
 8004c04:	f000 fec4 	bl	8005990 <HAL_Delay>

		LCD_WriteReg(0x0007,0x0001);
 8004c08:	2101      	movs	r1, #1
 8004c0a:	2007      	movs	r0, #7
 8004c0c:	f7fc f952 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004c10:	2014      	movs	r0, #20
 8004c12:	f000 febd 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0x0007,0x0061);
 8004c16:	2161      	movs	r1, #97	; 0x61
 8004c18:	2007      	movs	r0, #7
 8004c1a:	f7fc f94b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0173);
 8004c1e:	f240 1173 	movw	r1, #371	; 0x173
 8004c22:	2007      	movs	r0, #7
 8004c24:	f7fc f946 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x0020,0x0000);
 8004c28:	2100      	movs	r1, #0
 8004c2a:	2020      	movs	r0, #32
 8004c2c:	f7fc f942 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0021,0x0000);
 8004c30:	2100      	movs	r1, #0
 8004c32:	2021      	movs	r0, #33	; 0x21
 8004c34:	f7fc f93e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x22);
 8004c38:	2122      	movs	r1, #34	; 0x22
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	f7fc f93a 	bl	8000eb4 <LCD_WriteReg>
 8004c40:	e310      	b.n	8005264 <LCD_Init+0x383c>
	}else if(lcddev.id==0xC505)
 8004c42:	4b6b      	ldr	r3, [pc, #428]	; (8004df0 <LCD_Init+0x33c8>)
 8004c44:	889b      	ldrh	r3, [r3, #4]
 8004c46:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	f040 80d2 	bne.w	8004df4 <LCD_Init+0x33cc>
	{
		LCD_WriteReg(0x0000,0x0000);
 8004c50:	2100      	movs	r1, #0
 8004c52:	2000      	movs	r0, #0
 8004c54:	f7fc f92e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004c58:	2100      	movs	r1, #0
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	f7fc f92a 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004c60:	2014      	movs	r0, #20
 8004c62:	f000 fe95 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0x0000,0x0000);
 8004c66:	2100      	movs	r1, #0
 8004c68:	2000      	movs	r0, #0
 8004c6a:	f7fc f923 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004c6e:	2100      	movs	r1, #0
 8004c70:	2000      	movs	r0, #0
 8004c72:	f7fc f91f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004c76:	2100      	movs	r1, #0
 8004c78:	2000      	movs	r0, #0
 8004c7a:	f7fc f91b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004c7e:	2100      	movs	r1, #0
 8004c80:	2000      	movs	r0, #0
 8004c82:	f7fc f917 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0x00a4,0x0001);
 8004c86:	2101      	movs	r1, #1
 8004c88:	20a4      	movs	r0, #164	; 0xa4
 8004c8a:	f7fc f913 	bl	8000eb4 <LCD_WriteReg>
 		HAL_Delay(20);
 8004c8e:	2014      	movs	r0, #20
 8004c90:	f000 fe7e 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8004c94:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004c98:	2060      	movs	r0, #96	; 0x60
 8004c9a:	f7fc f90b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0806);
 8004c9e:	f640 0106 	movw	r1, #2054	; 0x806
 8004ca2:	2008      	movs	r0, #8
 8004ca4:	f7fc f906 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0703);//gamma setting
 8004ca8:	f240 7103 	movw	r1, #1795	; 0x703
 8004cac:	2030      	movs	r0, #48	; 0x30
 8004cae:	f7fc f901 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0001);
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	2031      	movs	r0, #49	; 0x31
 8004cb6:	f7fc f8fd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0004);
 8004cba:	2104      	movs	r1, #4
 8004cbc:	2032      	movs	r0, #50	; 0x32
 8004cbe:	f7fc f8f9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0102);
 8004cc2:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004cc6:	2033      	movs	r0, #51	; 0x33
 8004cc8:	f7fc f8f4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x0300);
 8004ccc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004cd0:	2034      	movs	r0, #52	; 0x34
 8004cd2:	f7fc f8ef 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0103);
 8004cd6:	f240 1103 	movw	r1, #259	; 0x103
 8004cda:	2035      	movs	r0, #53	; 0x35
 8004cdc:	f7fc f8ea 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x001F);
 8004ce0:	211f      	movs	r1, #31
 8004ce2:	2036      	movs	r0, #54	; 0x36
 8004ce4:	f7fc f8e6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0703);
 8004ce8:	f240 7103 	movw	r1, #1795	; 0x703
 8004cec:	2037      	movs	r0, #55	; 0x37
 8004cee:	f7fc f8e1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0001);
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	2038      	movs	r0, #56	; 0x38
 8004cf6:	f7fc f8dd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0004);
 8004cfa:	2104      	movs	r1, #4
 8004cfc:	2039      	movs	r0, #57	; 0x39
 8004cfe:	f7fc f8d9 	bl	8000eb4 <LCD_WriteReg>



		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8004d02:	2115      	movs	r1, #21
 8004d04:	2090      	movs	r0, #144	; 0x90
 8004d06:	f7fc f8d5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8004d0a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004d0e:	2010      	movs	r0, #16
 8004d10:	f7fc f8d0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0247);	//DC1,DC0,VC
 8004d14:	f240 2147 	movw	r1, #583	; 0x247
 8004d18:	2011      	movs	r0, #17
 8004d1a:	f7fc f8cb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8004d1e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8004d22:	2012      	movs	r0, #18
 8004d24:	f7fc f8c6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8004d28:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8004d2c:	2013      	movs	r0, #19
 8004d2e:	f7fc f8c1 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(120);
 8004d32:	2078      	movs	r0, #120	; 0x78
 8004d34:	f000 fe2c 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8004d38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	f7fc f8b9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8004d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d46:	2002      	movs	r0, #2
 8004d48:	f7fc f8b4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004d4c:	f241 0130 	movw	r1, #4144	; 0x1030
 8004d50:	2003      	movs	r0, #3
 8004d52:	f7fc f8af 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8004d56:	2108      	movs	r1, #8
 8004d58:	200a      	movs	r0, #10
 8004d5a:	f7fc f8ab 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004d5e:	2100      	movs	r1, #0
 8004d60:	200c      	movs	r0, #12
 8004d62:	f7fc f8a7 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8004d66:	2120      	movs	r1, #32
 8004d68:	200e      	movs	r0, #14
 8004d6a:	f7fc f8a3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004d6e:	2100      	movs	r1, #0
 8004d70:	200f      	movs	r0, #15
 8004d72:	f7fc f89f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8004d76:	2100      	movs	r1, #0
 8004d78:	2020      	movs	r0, #32
 8004d7a:	f7fc f89b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8004d7e:	2100      	movs	r1, #0
 8004d80:	2021      	movs	r0, #33	; 0x21
 8004d82:	f7fc f897 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x002A,0x003D);	//vcom2
 8004d86:	213d      	movs	r1, #61	; 0x3d
 8004d88:	202a      	movs	r0, #42	; 0x2a
 8004d8a:	f7fc f893 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004d8e:	2014      	movs	r0, #20
 8004d90:	f000 fdfe 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8004d94:	212d      	movs	r1, #45	; 0x2d
 8004d96:	2029      	movs	r0, #41	; 0x29
 8004d98:	f7fc f88c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	2050      	movs	r0, #80	; 0x50
 8004da0:	f7fc f888 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8004da4:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8004da8:	2051      	movs	r0, #81	; 0x51
 8004daa:	f7fc f883 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004dae:	2100      	movs	r1, #0
 8004db0:	2052      	movs	r0, #82	; 0x52
 8004db2:	f7fc f87f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004db6:	f240 113f 	movw	r1, #319	; 0x13f
 8004dba:	2053      	movs	r0, #83	; 0x53
 8004dbc:	f7fc f87a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	2061      	movs	r0, #97	; 0x61
 8004dc4:	f7fc f876 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004dc8:	2100      	movs	r1, #0
 8004dca:	206a      	movs	r0, #106	; 0x6a
 8004dcc:	f7fc f872 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0300);
 8004dd0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004dd4:	2092      	movs	r0, #146	; 0x92
 8004dd6:	f7fc f86d 	bl	8000eb4 <LCD_WriteReg>

 		LCD_WriteReg(0x0093, 0x0005);
 8004dda:	2105      	movs	r1, #5
 8004ddc:	2093      	movs	r0, #147	; 0x93
 8004dde:	f7fc f869 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8004de2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004de6:	2007      	movs	r0, #7
 8004de8:	f7fc f864 	bl	8000eb4 <LCD_WriteReg>
 8004dec:	e23a      	b.n	8005264 <LCD_Init+0x383c>
 8004dee:	bf00      	nop
 8004df0:	20000258 	.word	0x20000258
	}else if(lcddev.id==0x4531)//OK |/|/|
 8004df4:	4bbb      	ldr	r3, [pc, #748]	; (80050e4 <LCD_Init+0x36bc>)
 8004df6:	889b      	ldrh	r3, [r3, #4]
 8004df8:	f244 5231 	movw	r2, #17713	; 0x4531
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	f040 80ba 	bne.w	8004f76 <LCD_Init+0x354e>
	{
		LCD_WriteReg(0X00,0X0001);
 8004e02:	2101      	movs	r1, #1
 8004e04:	2000      	movs	r0, #0
 8004e06:	f7fc f855 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(10);
 8004e0a:	200a      	movs	r0, #10
 8004e0c:	f000 fdc0 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0X10,0X1628);
 8004e10:	f241 6128 	movw	r1, #5672	; 0x1628
 8004e14:	2010      	movs	r0, #16
 8004e16:	f7fc f84d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X000e);//0x0006
 8004e1a:	210e      	movs	r1, #14
 8004e1c:	2012      	movs	r0, #18
 8004e1e:	f7fc f849 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X0A39);
 8004e22:	f640 2139 	movw	r1, #2617	; 0xa39
 8004e26:	2013      	movs	r0, #19
 8004e28:	f7fc f844 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(10);
 8004e2c:	200a      	movs	r0, #10
 8004e2e:	f000 fdaf 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0X11,0X0040);
 8004e32:	2140      	movs	r1, #64	; 0x40
 8004e34:	2011      	movs	r0, #17
 8004e36:	f7fc f83d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X15,0X0050);
 8004e3a:	2150      	movs	r1, #80	; 0x50
 8004e3c:	2015      	movs	r0, #21
 8004e3e:	f7fc f839 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(10);
 8004e42:	200a      	movs	r0, #10
 8004e44:	f000 fda4 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0X12,0X001e);//16
 8004e48:	211e      	movs	r1, #30
 8004e4a:	2012      	movs	r0, #18
 8004e4c:	f7fc f832 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(10);
 8004e50:	200a      	movs	r0, #10
 8004e52:	f000 fd9d 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0X10,0X1620);
 8004e56:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8004e5a:	2010      	movs	r0, #16
 8004e5c:	f7fc f82a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X2A39);
 8004e60:	f642 2139 	movw	r1, #10809	; 0x2a39
 8004e64:	2013      	movs	r0, #19
 8004e66:	f7fc f825 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(10);
 8004e6a:	200a      	movs	r0, #10
 8004e6c:	f000 fd90 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0X01,0X0100);
 8004e70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e74:	2001      	movs	r0, #1
 8004e76:	f7fc f81d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8004e7a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004e7e:	2002      	movs	r0, #2
 8004e80:	f7fc f818 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1038);//改变方向的
 8004e84:	f241 0138 	movw	r1, #4152	; 0x1038
 8004e88:	2003      	movs	r0, #3
 8004e8a:	f7fc f813 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0202);
 8004e8e:	f240 2102 	movw	r1, #514	; 0x202
 8004e92:	2008      	movs	r0, #8
 8004e94:	f7fc f80e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 8004e98:	2108      	movs	r1, #8
 8004e9a:	200a      	movs	r0, #10
 8004e9c:	f7fc f80a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X30,0X0000);
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	2030      	movs	r0, #48	; 0x30
 8004ea4:	f7fc f806 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 8004ea8:	f240 4102 	movw	r1, #1026	; 0x402
 8004eac:	2031      	movs	r0, #49	; 0x31
 8004eae:	f7fc f801 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0106);
 8004eb2:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004eb6:	2032      	movs	r0, #50	; 0x32
 8004eb8:	f7fb fffc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0503);
 8004ebc:	f240 5103 	movw	r1, #1283	; 0x503
 8004ec0:	2033      	movs	r0, #51	; 0x33
 8004ec2:	f7fb fff7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0104);
 8004ec6:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004eca:	2034      	movs	r0, #52	; 0x34
 8004ecc:	f7fb fff2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0301);
 8004ed0:	f240 3101 	movw	r1, #769	; 0x301
 8004ed4:	2035      	movs	r0, #53	; 0x35
 8004ed6:	f7fb ffed 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 8004eda:	f240 7107 	movw	r1, #1799	; 0x707
 8004ede:	2036      	movs	r0, #54	; 0x36
 8004ee0:	f7fb ffe8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 8004ee4:	f240 3105 	movw	r1, #773	; 0x305
 8004ee8:	2037      	movs	r0, #55	; 0x37
 8004eea:	f7fb ffe3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0208);
 8004eee:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004ef2:	2038      	movs	r0, #56	; 0x38
 8004ef4:	f7fb ffde 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0F0B);
 8004ef8:	f640 710b 	movw	r1, #3851	; 0xf0b
 8004efc:	2039      	movs	r0, #57	; 0x39
 8004efe:	f7fb ffd9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X41,0X0002);
 8004f02:	2102      	movs	r1, #2
 8004f04:	2041      	movs	r0, #65	; 0x41
 8004f06:	f7fb ffd5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X60,0X2700);
 8004f0a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f0e:	2060      	movs	r0, #96	; 0x60
 8004f10:	f7fb ffd0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8004f14:	2101      	movs	r1, #1
 8004f16:	2061      	movs	r0, #97	; 0x61
 8004f18:	f7fb ffcc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X0210);
 8004f1c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004f20:	2090      	movs	r0, #144	; 0x90
 8004f22:	f7fb ffc7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X010A);
 8004f26:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004f2a:	2092      	movs	r0, #146	; 0x92
 8004f2c:	f7fb ffc2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0004);
 8004f30:	2104      	movs	r1, #4
 8004f32:	2093      	movs	r0, #147	; 0x93
 8004f34:	f7fb ffbe 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0100);
 8004f38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f3c:	20a0      	movs	r0, #160	; 0xa0
 8004f3e:	f7fb ffb9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 8004f42:	2101      	movs	r1, #1
 8004f44:	2007      	movs	r0, #7
 8004f46:	f7fb ffb5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 8004f4a:	2121      	movs	r1, #33	; 0x21
 8004f4c:	2007      	movs	r0, #7
 8004f4e:	f7fb ffb1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 8004f52:	2123      	movs	r1, #35	; 0x23
 8004f54:	2007      	movs	r0, #7
 8004f56:	f7fb ffad 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 8004f5a:	2133      	movs	r1, #51	; 0x33
 8004f5c:	2007      	movs	r0, #7
 8004f5e:	f7fb ffa9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 8004f62:	f240 1133 	movw	r1, #307	; 0x133
 8004f66:	2007      	movs	r0, #7
 8004f68:	f7fb ffa4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0000);
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	20a0      	movs	r0, #160	; 0xa0
 8004f70:	f7fb ffa0 	bl	8000eb4 <LCD_WriteReg>
 8004f74:	e176      	b.n	8005264 <LCD_Init+0x383c>
	}else if(lcddev.id==0x4535)
 8004f76:	4b5b      	ldr	r3, [pc, #364]	; (80050e4 <LCD_Init+0x36bc>)
 8004f78:	889b      	ldrh	r3, [r3, #4]
 8004f7a:	f244 5235 	movw	r2, #17717	; 0x4535
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	f040 80b2 	bne.w	80050e8 <LCD_Init+0x36c0>
	{
		LCD_WriteReg(0X15,0X0030);
 8004f84:	2130      	movs	r1, #48	; 0x30
 8004f86:	2015      	movs	r0, #21
 8004f88:	f7fb ff94 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X9A,0X0010);
 8004f8c:	2110      	movs	r1, #16
 8004f8e:	209a      	movs	r0, #154	; 0x9a
 8004f90:	f7fb ff90 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0X11,0X0020);
 8004f94:	2120      	movs	r1, #32
 8004f96:	2011      	movs	r0, #17
 8004f98:	f7fb ff8c 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0X10,0X3428);
 8004f9c:	f243 4128 	movw	r1, #13352	; 0x3428
 8004fa0:	2010      	movs	r0, #16
 8004fa2:	f7fb ff87 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X0002);//16
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	2012      	movs	r0, #18
 8004faa:	f7fb ff83 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X1038);
 8004fae:	f241 0138 	movw	r1, #4152	; 0x1038
 8004fb2:	2013      	movs	r0, #19
 8004fb4:	f7fb ff7e 	bl	8000eb4 <LCD_WriteReg>
 		HAL_Delay(40);
 8004fb8:	2028      	movs	r0, #40	; 0x28
 8004fba:	f000 fce9 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0X12,0X0012);//16
 8004fbe:	2112      	movs	r1, #18
 8004fc0:	2012      	movs	r0, #18
 8004fc2:	f7fb ff77 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(40);
 8004fc6:	2028      	movs	r0, #40	; 0x28
 8004fc8:	f000 fce2 	bl	8005990 <HAL_Delay>
  		LCD_WriteReg(0X10,0X3420);
 8004fcc:	f243 4120 	movw	r1, #13344	; 0x3420
 8004fd0:	2010      	movs	r0, #16
 8004fd2:	f7fb ff6f 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X3038);
 8004fd6:	f243 0138 	movw	r1, #12344	; 0x3038
 8004fda:	2013      	movs	r0, #19
 8004fdc:	f7fb ff6a 	bl	8000eb4 <LCD_WriteReg>
 		HAL_Delay(70);
 8004fe0:	2046      	movs	r0, #70	; 0x46
 8004fe2:	f000 fcd5 	bl	8005990 <HAL_Delay>
		LCD_WriteReg(0X30,0X0000);
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	2030      	movs	r0, #48	; 0x30
 8004fea:	f7fb ff63 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 8004fee:	f240 4102 	movw	r1, #1026	; 0x402
 8004ff2:	2031      	movs	r0, #49	; 0x31
 8004ff4:	f7fb ff5e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0307);
 8004ff8:	f240 3107 	movw	r1, #775	; 0x307
 8004ffc:	2032      	movs	r0, #50	; 0x32
 8004ffe:	f7fb ff59 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0304);
 8005002:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005006:	2033      	movs	r0, #51	; 0x33
 8005008:	f7fb ff54 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0004);
 800500c:	2104      	movs	r1, #4
 800500e:	2034      	movs	r0, #52	; 0x34
 8005010:	f7fb ff50 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0401);
 8005014:	f240 4101 	movw	r1, #1025	; 0x401
 8005018:	2035      	movs	r0, #53	; 0x35
 800501a:	f7fb ff4b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 800501e:	f240 7107 	movw	r1, #1799	; 0x707
 8005022:	2036      	movs	r0, #54	; 0x36
 8005024:	f7fb ff46 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 8005028:	f240 3105 	movw	r1, #773	; 0x305
 800502c:	2037      	movs	r0, #55	; 0x37
 800502e:	f7fb ff41 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0610);
 8005032:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005036:	2038      	movs	r0, #56	; 0x38
 8005038:	f7fb ff3c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0610);
 800503c:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005040:	2039      	movs	r0, #57	; 0x39
 8005042:	f7fb ff37 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0X01,0X0100);
 8005046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800504a:	2001      	movs	r0, #1
 800504c:	f7fb ff32 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8005050:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005054:	2002      	movs	r0, #2
 8005056:	f7fb ff2d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1030);//改变方向的
 800505a:	f241 0130 	movw	r1, #4144	; 0x1030
 800505e:	2003      	movs	r0, #3
 8005060:	f7fb ff28 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0808);
 8005064:	f640 0108 	movw	r1, #2056	; 0x808
 8005068:	2008      	movs	r0, #8
 800506a:	f7fb ff23 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 800506e:	2108      	movs	r1, #8
 8005070:	200a      	movs	r0, #10
 8005072:	f7fb ff1f 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0X60,0X2700);
 8005076:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800507a:	2060      	movs	r0, #96	; 0x60
 800507c:	f7fb ff1a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8005080:	2101      	movs	r1, #1
 8005082:	2061      	movs	r0, #97	; 0x61
 8005084:	f7fb ff16 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X013E);
 8005088:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800508c:	2090      	movs	r0, #144	; 0x90
 800508e:	f7fb ff11 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X0100);
 8005092:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005096:	2092      	movs	r0, #146	; 0x92
 8005098:	f7fb ff0c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0100);
 800509c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050a0:	2093      	movs	r0, #147	; 0x93
 80050a2:	f7fb ff07 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0XA0,0X3000);
 80050a6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80050aa:	20a0      	movs	r0, #160	; 0xa0
 80050ac:	f7fb ff02 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0XA3,0X0010);
 80050b0:	2110      	movs	r1, #16
 80050b2:	20a3      	movs	r0, #163	; 0xa3
 80050b4:	f7fb fefe 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 80050b8:	2101      	movs	r1, #1
 80050ba:	2007      	movs	r0, #7
 80050bc:	f7fb fefa 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 80050c0:	2121      	movs	r1, #33	; 0x21
 80050c2:	2007      	movs	r0, #7
 80050c4:	f7fb fef6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 80050c8:	2123      	movs	r1, #35	; 0x23
 80050ca:	2007      	movs	r0, #7
 80050cc:	f7fb fef2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 80050d0:	2133      	movs	r1, #51	; 0x33
 80050d2:	2007      	movs	r0, #7
 80050d4:	f7fb feee 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 80050d8:	f240 1133 	movw	r1, #307	; 0x133
 80050dc:	2007      	movs	r0, #7
 80050de:	f7fb fee9 	bl	8000eb4 <LCD_WriteReg>
 80050e2:	e0bf      	b.n	8005264 <LCD_Init+0x383c>
 80050e4:	20000258 	.word	0x20000258
	}else if(lcddev.id==0X1963)
 80050e8:	4b65      	ldr	r3, [pc, #404]	; (8005280 <LCD_Init+0x3858>)
 80050ea:	889b      	ldrh	r3, [r3, #4]
 80050ec:	f641 1263 	movw	r2, #6499	; 0x1963
 80050f0:	4293      	cmp	r3, r2
 80050f2:	f040 80b7 	bne.w	8005264 <LCD_Init+0x383c>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80050f6:	20e2      	movs	r0, #226	; 0xe2
 80050f8:	f7fb feae 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 80050fc:	201d      	movs	r0, #29
 80050fe:	f7fb febb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005102:	2002      	movs	r0, #2
 8005104:	f7fb feb8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 8005108:	2004      	movs	r0, #4
 800510a:	f7fb feb5 	bl	8000e78 <LCD_WR_DATA>
		delay_us(100);
 800510e:	2064      	movs	r0, #100	; 0x64
 8005110:	f7fb fe84 	bl	8000e1c <delay_us>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005114:	20e0      	movs	r0, #224	; 0xe0
 8005116:	f7fb fe9f 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800511a:	2001      	movs	r0, #1
 800511c:	f7fb feac 	bl	8000e78 <LCD_WR_DATA>
		HAL_Delay(10);
 8005120:	200a      	movs	r0, #10
 8005122:	f000 fc35 	bl	8005990 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8005126:	20e0      	movs	r0, #224	; 0xe0
 8005128:	f7fb fe96 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 800512c:	2003      	movs	r0, #3
 800512e:	f7fb fea3 	bl	8000e78 <LCD_WR_DATA>
		HAL_Delay(12);
 8005132:	200c      	movs	r0, #12
 8005134:	f000 fc2c 	bl	8005990 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005138:	2001      	movs	r0, #1
 800513a:	f7fb fe8d 	bl	8000e58 <LCD_WR_REG>
		HAL_Delay(10);
 800513e:	200a      	movs	r0, #10
 8005140:	f000 fc26 	bl	8005990 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005144:	20e6      	movs	r0, #230	; 0xe6
 8005146:	f7fb fe87 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800514a:	202f      	movs	r0, #47	; 0x2f
 800514c:	f7fb fe94 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8005150:	20ff      	movs	r0, #255	; 0xff
 8005152:	f7fb fe91 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8005156:	20ff      	movs	r0, #255	; 0xff
 8005158:	f7fb fe8e 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 800515c:	20b0      	movs	r0, #176	; 0xb0
 800515e:	f7fb fe7b 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005162:	2020      	movs	r0, #32
 8005164:	f7fb fe88 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8005168:	2000      	movs	r0, #0
 800516a:	f7fb fe85 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 800516e:	2001      	movs	r0, #1
 8005170:	f7fb fe82 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005174:	f240 103f 	movw	r0, #319	; 0x13f
 8005178:	f7fb fe7e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 800517c:	2000      	movs	r0, #0
 800517e:	f7fb fe7b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005182:	20ef      	movs	r0, #239	; 0xef
 8005184:	f7fb fe78 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 8005188:	2000      	movs	r0, #0
 800518a:	f7fb fe75 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 800518e:	20b4      	movs	r0, #180	; 0xb4
 8005190:	f7fb fe62 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005194:	2002      	movs	r0, #2
 8005196:	f7fb fe6f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 800519a:	f240 203f 	movw	r0, #575	; 0x23f
 800519e:	f7fb fe6b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 80051a2:	2000      	movs	r0, #0
 80051a4:	f7fb fe68 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 80051a8:	202e      	movs	r0, #46	; 0x2e
 80051aa:	f7fb fe65 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 80051ae:	2000      	movs	r0, #0
 80051b0:	f7fb fe62 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051b4:	2000      	movs	r0, #0
 80051b6:	f7fb fe5f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051ba:	2000      	movs	r0, #0
 80051bc:	f7fb fe5c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051c0:	2000      	movs	r0, #0
 80051c2:	f7fb fe59 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 80051c6:	20b6      	movs	r0, #182	; 0xb6
 80051c8:	f7fb fe46 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 80051cc:	2001      	movs	r0, #1
 80051ce:	f7fb fe53 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 80051d2:	f44f 708e 	mov.w	r0, #284	; 0x11c
 80051d6:	f7fb fe4f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 80051da:	2000      	movs	r0, #0
 80051dc:	f7fb fe4c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 80051e0:	2017      	movs	r0, #23
 80051e2:	f7fb fe49 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80051e6:	2015      	movs	r0, #21
 80051e8:	f7fb fe46 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051ec:	2000      	movs	r0, #0
 80051ee:	f7fb fe43 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051f2:	2000      	movs	r0, #0
 80051f4:	f7fb fe40 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 80051f8:	20f0      	movs	r0, #240	; 0xf0
 80051fa:	f7fb fe2d 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 80051fe:	2003      	movs	r0, #3
 8005200:	f7fb fe3a 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 8005204:	2029      	movs	r0, #41	; 0x29
 8005206:	f7fb fe27 	bl	8000e58 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 800520a:	20d0      	movs	r0, #208	; 0xd0
 800520c:	f7fb fe24 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005210:	2000      	movs	r0, #0
 8005212:	f7fb fe31 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005216:	20be      	movs	r0, #190	; 0xbe
 8005218:	f7fb fe1e 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 800521c:	2005      	movs	r0, #5
 800521e:	f7fb fe2b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005222:	20fe      	movs	r0, #254	; 0xfe
 8005224:	f7fb fe28 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 8005228:	2001      	movs	r0, #1
 800522a:	f7fb fe25 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 800522e:	2000      	movs	r0, #0
 8005230:	f7fb fe22 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 8005234:	2000      	movs	r0, #0
 8005236:	f7fb fe1f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 800523a:	2000      	movs	r0, #0
 800523c:	f7fb fe1c 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005240:	20b8      	movs	r0, #184	; 0xb8
 8005242:	f7fb fe09 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005246:	2003      	movs	r0, #3
 8005248:	f7fb fe16 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 800524c:	2001      	movs	r0, #1
 800524e:	f7fb fe13 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8005252:	20ba      	movs	r0, #186	; 0xba
 8005254:	f7fb fe00 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005258:	2001      	movs	r0, #1
 800525a:	f7fb fe0d 	bl	8000e78 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 800525e:	2064      	movs	r0, #100	; 0x64
 8005260:	f7fc faa2 	bl	80017a8 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		//默认为竖屏
 8005264:	2000      	movs	r0, #0
 8005266:	f7fc fad3 	bl	8001810 <LCD_Display_Dir>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);				//点亮背光
 800526a:	2201      	movs	r2, #1
 800526c:	2101      	movs	r1, #1
 800526e:	4805      	ldr	r0, [pc, #20]	; (8005284 <LCD_Init+0x385c>)
 8005270:	f000 fe2a 	bl	8005ec8 <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);
 8005274:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005278:	f000 f806 	bl	8005288 <LCD_Clear>
}
 800527c:	bf00      	nop
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20000258 	.word	0x20000258
 8005284:	40010c00 	.word	0x40010c00

08005288 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint16_t color)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	80fb      	strh	r3, [r7, #6]
	uint32_t index=0;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 8005296:	4b21      	ldr	r3, [pc, #132]	; (800531c <LCD_Clear+0x94>)
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 800529c:	4b1f      	ldr	r3, [pc, #124]	; (800531c <LCD_Clear+0x94>)
 800529e:	885b      	ldrh	r3, [r3, #2]
 80052a0:	461a      	mov	r2, r3
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	fb02 f303 	mul.w	r3, r2, r3
 80052a8:	60bb      	str	r3, [r7, #8]
	if((lcddev.id==0X6804)&&(lcddev.dir==1))//6804横屏的时候特殊处理
 80052aa:	4b1c      	ldr	r3, [pc, #112]	; (800531c <LCD_Clear+0x94>)
 80052ac:	889b      	ldrh	r3, [r3, #4]
 80052ae:	f646 0204 	movw	r2, #26628	; 0x6804
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d11a      	bne.n	80052ec <LCD_Clear+0x64>
 80052b6:	4b19      	ldr	r3, [pc, #100]	; (800531c <LCD_Clear+0x94>)
 80052b8:	799b      	ldrb	r3, [r3, #6]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d116      	bne.n	80052ec <LCD_Clear+0x64>
	{
 		lcddev.dir=0;
 80052be:	4b17      	ldr	r3, [pc, #92]	; (800531c <LCD_Clear+0x94>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 80052c4:	4b15      	ldr	r3, [pc, #84]	; (800531c <LCD_Clear+0x94>)
 80052c6:	222a      	movs	r2, #42	; 0x2a
 80052c8:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 80052ca:	4b14      	ldr	r3, [pc, #80]	; (800531c <LCD_Clear+0x94>)
 80052cc:	222b      	movs	r2, #43	; 0x2b
 80052ce:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00,0x0000);		//设置光标位置
 80052d0:	2100      	movs	r1, #0
 80052d2:	2000      	movs	r0, #0
 80052d4:	f7fb fe26 	bl	8000f24 <LCD_SetCursor>
 		lcddev.dir=1;
 80052d8:	4b10      	ldr	r3, [pc, #64]	; (800531c <LCD_Clear+0x94>)
 80052da:	2201      	movs	r2, #1
 80052dc:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 80052de:	4b0f      	ldr	r3, [pc, #60]	; (800531c <LCD_Clear+0x94>)
 80052e0:	222b      	movs	r2, #43	; 0x2b
 80052e2:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 80052e4:	4b0d      	ldr	r3, [pc, #52]	; (800531c <LCD_Clear+0x94>)
 80052e6:	222a      	movs	r2, #42	; 0x2a
 80052e8:	819a      	strh	r2, [r3, #12]
 80052ea:	e003      	b.n	80052f4 <LCD_Clear+0x6c>
 	}else LCD_SetCursor(0x00,0x0000);	//设置光标位置
 80052ec:	2100      	movs	r1, #0
 80052ee:	2000      	movs	r0, #0
 80052f0:	f7fb fe18 	bl	8000f24 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 80052f4:	f7fb fe08 	bl	8000f08 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	e005      	b.n	800530a <LCD_Clear+0x82>
	{
		LCD->LCD_RAM=color;
 80052fe:	4a08      	ldr	r2, [pc, #32]	; (8005320 <LCD_Clear+0x98>)
 8005300:	88fb      	ldrh	r3, [r7, #6]
 8005302:	8053      	strh	r3, [r2, #2]
	for(index=0;index<totalpoint;index++)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	3301      	adds	r3, #1
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	429a      	cmp	r2, r3
 8005310:	d3f5      	bcc.n	80052fe <LCD_Clear+0x76>
	}
}
 8005312:	bf00      	nop
 8005314:	bf00      	nop
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000258 	.word	0x20000258
 8005320:	6c0007fe 	.word	0x6c0007fe

08005324 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 8005324:	b590      	push	{r4, r7, lr}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	4604      	mov	r4, r0
 800532c:	4608      	mov	r0, r1
 800532e:	4611      	mov	r1, r2
 8005330:	461a      	mov	r2, r3
 8005332:	4623      	mov	r3, r4
 8005334:	80fb      	strh	r3, [r7, #6]
 8005336:	4603      	mov	r3, r0
 8005338:	80bb      	strh	r3, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	70fb      	strb	r3, [r7, #3]
 800533e:	4613      	mov	r3, r2
 8005340:	70bb      	strb	r3, [r7, #2]
	uint8_t temp,t1,t;
	uint16_t y0=y;
 8005342:	88bb      	ldrh	r3, [r7, #4]
 8005344:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 8005346:	78bb      	ldrb	r3, [r7, #2]
 8005348:	08db      	lsrs	r3, r3, #3
 800534a:	b2db      	uxtb	r3, r3
 800534c:	461a      	mov	r2, r3
 800534e:	78bb      	ldrb	r3, [r7, #2]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	bf14      	ite	ne
 800535a:	2301      	movne	r3, #1
 800535c:	2300      	moveq	r3, #0
 800535e:	b2db      	uxtb	r3, r3
 8005360:	4413      	add	r3, r2
 8005362:	b2db      	uxtb	r3, r3
 8005364:	78ba      	ldrb	r2, [r7, #2]
 8005366:	0852      	lsrs	r2, r2, #1
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	3b20      	subs	r3, #32
 8005374:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 8005376:	2300      	movs	r3, #0
 8005378:	737b      	strb	r3, [r7, #13]
 800537a:	e069      	b.n	8005450 <LCD_ShowChar+0x12c>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 800537c:	78bb      	ldrb	r3, [r7, #2]
 800537e:	2b0c      	cmp	r3, #12
 8005380:	d10b      	bne.n	800539a <LCD_ShowChar+0x76>
 8005382:	78fa      	ldrb	r2, [r7, #3]
 8005384:	7b79      	ldrb	r1, [r7, #13]
 8005386:	4838      	ldr	r0, [pc, #224]	; (8005468 <LCD_ShowChar+0x144>)
 8005388:	4613      	mov	r3, r2
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4403      	add	r3, r0
 8005392:	440b      	add	r3, r1
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	73fb      	strb	r3, [r7, #15]
 8005398:	e019      	b.n	80053ce <LCD_ShowChar+0xaa>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 800539a:	78bb      	ldrb	r3, [r7, #2]
 800539c:	2b10      	cmp	r3, #16
 800539e:	d108      	bne.n	80053b2 <LCD_ShowChar+0x8e>
 80053a0:	78fa      	ldrb	r2, [r7, #3]
 80053a2:	7b7b      	ldrb	r3, [r7, #13]
 80053a4:	4931      	ldr	r1, [pc, #196]	; (800546c <LCD_ShowChar+0x148>)
 80053a6:	0112      	lsls	r2, r2, #4
 80053a8:	440a      	add	r2, r1
 80053aa:	4413      	add	r3, r2
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	73fb      	strb	r3, [r7, #15]
 80053b0:	e00d      	b.n	80053ce <LCD_ShowChar+0xaa>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 80053b2:	78bb      	ldrb	r3, [r7, #2]
 80053b4:	2b18      	cmp	r3, #24
 80053b6:	d150      	bne.n	800545a <LCD_ShowChar+0x136>
 80053b8:	78fa      	ldrb	r2, [r7, #3]
 80053ba:	7b79      	ldrb	r1, [r7, #13]
 80053bc:	482c      	ldr	r0, [pc, #176]	; (8005470 <LCD_ShowChar+0x14c>)
 80053be:	4613      	mov	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	4413      	add	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4403      	add	r3, r0
 80053c8:	440b      	add	r3, r1
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 80053ce:	2300      	movs	r3, #0
 80053d0:	73bb      	strb	r3, [r7, #14]
 80053d2:	e035      	b.n	8005440 <LCD_ShowChar+0x11c>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 80053d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da07      	bge.n	80053ec <LCD_ShowChar+0xc8>
 80053dc:	4b25      	ldr	r3, [pc, #148]	; (8005474 <LCD_ShowChar+0x150>)
 80053de:	881a      	ldrh	r2, [r3, #0]
 80053e0:	88b9      	ldrh	r1, [r7, #4]
 80053e2:	88fb      	ldrh	r3, [r7, #6]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7fc f8c7 	bl	8001578 <LCD_Fast_DrawPoint>
 80053ea:	e00a      	b.n	8005402 <LCD_ShowChar+0xde>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 80053ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d106      	bne.n	8005402 <LCD_ShowChar+0xde>
 80053f4:	4b20      	ldr	r3, [pc, #128]	; (8005478 <LCD_ShowChar+0x154>)
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	88b9      	ldrh	r1, [r7, #4]
 80053fa:	88fb      	ldrh	r3, [r7, #6]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fc f8bb 	bl	8001578 <LCD_Fast_DrawPoint>
			temp<<=1;
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	005b      	lsls	r3, r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
			y++;
 8005408:	88bb      	ldrh	r3, [r7, #4]
 800540a:	3301      	adds	r3, #1
 800540c:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 800540e:	4b1b      	ldr	r3, [pc, #108]	; (800547c <LCD_ShowChar+0x158>)
 8005410:	885b      	ldrh	r3, [r3, #2]
 8005412:	88ba      	ldrh	r2, [r7, #4]
 8005414:	429a      	cmp	r2, r3
 8005416:	d222      	bcs.n	800545e <LCD_ShowChar+0x13a>
			if((y-y0)==size)
 8005418:	88ba      	ldrh	r2, [r7, #4]
 800541a:	897b      	ldrh	r3, [r7, #10]
 800541c:	1ad2      	subs	r2, r2, r3
 800541e:	78bb      	ldrb	r3, [r7, #2]
 8005420:	429a      	cmp	r2, r3
 8005422:	d10a      	bne.n	800543a <LCD_ShowChar+0x116>
			{
				y=y0;
 8005424:	897b      	ldrh	r3, [r7, #10]
 8005426:	80bb      	strh	r3, [r7, #4]
				x++;
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	3301      	adds	r3, #1
 800542c:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 800542e:	4b13      	ldr	r3, [pc, #76]	; (800547c <LCD_ShowChar+0x158>)
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	88fa      	ldrh	r2, [r7, #6]
 8005434:	429a      	cmp	r2, r3
 8005436:	d307      	bcc.n	8005448 <LCD_ShowChar+0x124>
 8005438:	e012      	b.n	8005460 <LCD_ShowChar+0x13c>
		for(t1=0;t1<8;t1++)
 800543a:	7bbb      	ldrb	r3, [r7, #14]
 800543c:	3301      	adds	r3, #1
 800543e:	73bb      	strb	r3, [r7, #14]
 8005440:	7bbb      	ldrb	r3, [r7, #14]
 8005442:	2b07      	cmp	r3, #7
 8005444:	d9c6      	bls.n	80053d4 <LCD_ShowChar+0xb0>
 8005446:	e000      	b.n	800544a <LCD_ShowChar+0x126>
				break;
 8005448:	bf00      	nop
	for(t=0;t<csize;t++)
 800544a:	7b7b      	ldrb	r3, [r7, #13]
 800544c:	3301      	adds	r3, #1
 800544e:	737b      	strb	r3, [r7, #13]
 8005450:	7b7a      	ldrb	r2, [r7, #13]
 8005452:	7a7b      	ldrb	r3, [r7, #9]
 8005454:	429a      	cmp	r2, r3
 8005456:	d391      	bcc.n	800537c <LCD_ShowChar+0x58>
 8005458:	e002      	b.n	8005460 <LCD_ShowChar+0x13c>
		else return;								//没有的字库
 800545a:	bf00      	nop
 800545c:	e000      	b.n	8005460 <LCD_ShowChar+0x13c>
			if(y>=lcddev.height)return;		//超区域了
 800545e:	bf00      	nop
			}
		}
	}
}
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	bd90      	pop	{r4, r7, pc}
 8005466:	bf00      	nop
 8005468:	080093c0 	.word	0x080093c0
 800546c:	08009834 	.word	0x08009834
 8005470:	08009e24 	.word	0x08009e24
 8005474:	20000200 	.word	0x20000200
 8005478:	20000000 	.word	0x20000000
 800547c:	20000258 	.word	0x20000258

08005480 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 8005480:	b590      	push	{r4, r7, lr}
 8005482:	b087      	sub	sp, #28
 8005484:	af02      	add	r7, sp, #8
 8005486:	4604      	mov	r4, r0
 8005488:	4608      	mov	r0, r1
 800548a:	4611      	mov	r1, r2
 800548c:	461a      	mov	r2, r3
 800548e:	4623      	mov	r3, r4
 8005490:	80fb      	strh	r3, [r7, #6]
 8005492:	4603      	mov	r3, r0
 8005494:	80bb      	strh	r3, [r7, #4]
 8005496:	460b      	mov	r3, r1
 8005498:	807b      	strh	r3, [r7, #2]
 800549a:	4613      	mov	r3, r2
 800549c:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	73fb      	strb	r3, [r7, #15]
	width+=x;
 80054a2:	887a      	ldrh	r2, [r7, #2]
 80054a4:	88fb      	ldrh	r3, [r7, #6]
 80054a6:	4413      	add	r3, r2
 80054a8:	807b      	strh	r3, [r7, #2]
	height+=y;
 80054aa:	883a      	ldrh	r2, [r7, #0]
 80054ac:	88bb      	ldrh	r3, [r7, #4]
 80054ae:	4413      	add	r3, r2
 80054b0:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 80054b2:	e024      	b.n	80054fe <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 80054b4:	88fa      	ldrh	r2, [r7, #6]
 80054b6:	887b      	ldrh	r3, [r7, #2]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d307      	bcc.n	80054cc <LCD_ShowString+0x4c>
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	80fb      	strh	r3, [r7, #6]
 80054c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054c4:	b29a      	uxth	r2, r3
 80054c6:	88bb      	ldrh	r3, [r7, #4]
 80054c8:	4413      	add	r3, r2
 80054ca:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 80054cc:	88ba      	ldrh	r2, [r7, #4]
 80054ce:	883b      	ldrh	r3, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d21d      	bcs.n	8005510 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	781a      	ldrb	r2, [r3, #0]
 80054d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054dc:	88b9      	ldrh	r1, [r7, #4]
 80054de:	88f8      	ldrh	r0, [r7, #6]
 80054e0:	2400      	movs	r4, #0
 80054e2:	9400      	str	r4, [sp, #0]
 80054e4:	f7ff ff1e 	bl	8005324 <LCD_ShowChar>
        x+=size/2;
 80054e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80054ec:	085b      	lsrs	r3, r3, #1
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	4413      	add	r3, r2
 80054f6:	80fb      	strh	r3, [r7, #6]
        p++;
 80054f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054fa:	3301      	adds	r3, #1
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b7e      	cmp	r3, #126	; 0x7e
 8005504:	d805      	bhi.n	8005512 <LCD_ShowString+0x92>
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b1f      	cmp	r3, #31
 800550c:	d8d2      	bhi.n	80054b4 <LCD_ShowString+0x34>
    }
}
 800550e:	e000      	b.n	8005512 <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8005510:	bf00      	nop
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	bd90      	pop	{r4, r7, pc}
	...

0800551c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005522:	f000 f9d3 	bl	80058cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005526:	f000 f841 	bl	80055ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800552a:	f7fb fc15 	bl	8000d58 <MX_GPIO_Init>
	MX_FSMC_Init();
 800552e:	f7fb fb37 	bl	8000ba0 <MX_FSMC_Init>
	/* USER CODE BEGIN 2 */
	LCD_Init();
 8005532:	f7fc fa79 	bl	8001a28 <LCD_Init>
	LCD_Clear(WHITE);
 8005536:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800553a:	f7ff fea5 	bl	8005288 <LCD_Clear>
	POINT_COLOR = RED;
 800553e:	4b16      	ldr	r3, [pc, #88]	; (8005598 <main+0x7c>)
 8005540:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005544:	801a      	strh	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		LCD_ShowString(10, 30, 240, 24, 24, "STM32F103ZET6");
 8005546:	4b15      	ldr	r3, [pc, #84]	; (800559c <main+0x80>)
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	2318      	movs	r3, #24
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	2318      	movs	r3, #24
 8005550:	22f0      	movs	r2, #240	; 0xf0
 8005552:	211e      	movs	r1, #30
 8005554:	200a      	movs	r0, #10
 8005556:	f7ff ff93 	bl	8005480 <LCD_ShowString>
		LCD_ShowString(30, 80, 200, 16, 16, "This is a test");
 800555a:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <main+0x84>)
 800555c:	9301      	str	r3, [sp, #4]
 800555e:	2310      	movs	r3, #16
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	2310      	movs	r3, #16
 8005564:	22c8      	movs	r2, #200	; 0xc8
 8005566:	2150      	movs	r1, #80	; 0x50
 8005568:	201e      	movs	r0, #30
 800556a:	f7ff ff89 	bl	8005480 <LCD_ShowString>
		LCD_ShowString(30, 110, 200, 16, 16, "Auth:Aaron");
 800556e:	4b0d      	ldr	r3, [pc, #52]	; (80055a4 <main+0x88>)
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	2310      	movs	r3, #16
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	2310      	movs	r3, #16
 8005578:	22c8      	movs	r2, #200	; 0xc8
 800557a:	216e      	movs	r1, #110	; 0x6e
 800557c:	201e      	movs	r0, #30
 800557e:	f7ff ff7f 	bl	8005480 <LCD_ShowString>
		LCD_ShowString(54, 140, 200, 16, 16, "2021/05/04");
 8005582:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <main+0x8c>)
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	2310      	movs	r3, #16
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	2310      	movs	r3, #16
 800558c:	22c8      	movs	r2, #200	; 0xc8
 800558e:	218c      	movs	r1, #140	; 0x8c
 8005590:	2036      	movs	r0, #54	; 0x36
 8005592:	f7ff ff75 	bl	8005480 <LCD_ShowString>
		LCD_ShowString(10, 30, 240, 24, 24, "STM32F103ZET6");
 8005596:	e7d6      	b.n	8005546 <main+0x2a>
 8005598:	20000200 	.word	0x20000200
 800559c:	08009378 	.word	0x08009378
 80055a0:	08009388 	.word	0x08009388
 80055a4:	08009398 	.word	0x08009398
 80055a8:	080093a4 	.word	0x080093a4

080055ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b090      	sub	sp, #64	; 0x40
 80055b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80055b2:	f107 0318 	add.w	r3, r7, #24
 80055b6:	2228      	movs	r2, #40	; 0x28
 80055b8:	2100      	movs	r1, #0
 80055ba:	4618      	mov	r0, r3
 80055bc:	f001 f9d2 	bl	8006964 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80055c0:	1d3b      	adds	r3, r7, #4
 80055c2:	2200      	movs	r2, #0
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	605a      	str	r2, [r3, #4]
 80055c8:	609a      	str	r2, [r3, #8]
 80055ca:	60da      	str	r2, [r3, #12]
 80055cc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80055ce:	2301      	movs	r3, #1
 80055d0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80055d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055d6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80055d8:	2300      	movs	r3, #0
 80055da:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80055dc:	2301      	movs	r3, #1
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80055e0:	2302      	movs	r3, #2
 80055e2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80055e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055e8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80055ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80055ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80055f0:	f107 0318 	add.w	r3, r7, #24
 80055f4:	4618      	mov	r0, r3
 80055f6:	f000 fc7f 	bl	8005ef8 <HAL_RCC_OscConfig>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <SystemClock_Config+0x58>
		Error_Handler();
 8005600:	f000 f819 	bl	8005636 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005604:	230f      	movs	r3, #15
 8005606:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005608:	2302      	movs	r3, #2
 800560a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005614:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800561a:	1d3b      	adds	r3, r7, #4
 800561c:	2102      	movs	r1, #2
 800561e:	4618      	mov	r0, r3
 8005620:	f000 feea 	bl	80063f8 <HAL_RCC_ClockConfig>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d001      	beq.n	800562e <SystemClock_Config+0x82>
		Error_Handler();
 800562a:	f000 f804 	bl	8005636 <Error_Handler>
	}
}
 800562e:	bf00      	nop
 8005630:	3740      	adds	r7, #64	; 0x40
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005636:	b480      	push	{r7}
 8005638:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800563a:	b672      	cpsid	i
}
 800563c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800563e:	e7fe      	b.n	800563e <Error_Handler+0x8>

08005640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005646:	4b15      	ldr	r3, [pc, #84]	; (800569c <HAL_MspInit+0x5c>)
 8005648:	699b      	ldr	r3, [r3, #24]
 800564a:	4a14      	ldr	r2, [pc, #80]	; (800569c <HAL_MspInit+0x5c>)
 800564c:	f043 0301 	orr.w	r3, r3, #1
 8005650:	6193      	str	r3, [r2, #24]
 8005652:	4b12      	ldr	r3, [pc, #72]	; (800569c <HAL_MspInit+0x5c>)
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	60bb      	str	r3, [r7, #8]
 800565c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800565e:	4b0f      	ldr	r3, [pc, #60]	; (800569c <HAL_MspInit+0x5c>)
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	4a0e      	ldr	r2, [pc, #56]	; (800569c <HAL_MspInit+0x5c>)
 8005664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005668:	61d3      	str	r3, [r2, #28]
 800566a:	4b0c      	ldr	r3, [pc, #48]	; (800569c <HAL_MspInit+0x5c>)
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005672:	607b      	str	r3, [r7, #4]
 8005674:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005676:	4b0a      	ldr	r3, [pc, #40]	; (80056a0 <HAL_MspInit+0x60>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	4a04      	ldr	r2, [pc, #16]	; (80056a0 <HAL_MspInit+0x60>)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr
 800569c:	40021000 	.word	0x40021000
 80056a0:	40010000 	.word	0x40010000

080056a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80056a8:	e7fe      	b.n	80056a8 <NMI_Handler+0x4>

080056aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80056aa:	b480      	push	{r7}
 80056ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056ae:	e7fe      	b.n	80056ae <HardFault_Handler+0x4>

080056b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056b4:	e7fe      	b.n	80056b4 <MemManage_Handler+0x4>

080056b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056b6:	b480      	push	{r7}
 80056b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056ba:	e7fe      	b.n	80056ba <BusFault_Handler+0x4>

080056bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056c0:	e7fe      	b.n	80056c0 <UsageFault_Handler+0x4>

080056c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056c2:	b480      	push	{r7}
 80056c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056c6:	bf00      	nop
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr

080056ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056ce:	b480      	push	{r7}
 80056d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056d2:	bf00      	nop
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr

080056da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056da:	b480      	push	{r7}
 80056dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056de:	bf00      	nop
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bc80      	pop	{r7}
 80056e4:	4770      	bx	lr

080056e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056ea:	f000 f935 	bl	8005958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056ee:	bf00      	nop
 80056f0:	bd80      	pop	{r7, pc}

080056f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80056f2:	b480      	push	{r7}
 80056f4:	af00      	add	r7, sp, #0
	return 1;
 80056f6:	2301      	movs	r3, #1
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr

08005700 <_kill>:

int _kill(int pid, int sig)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800570a:	f001 f901 	bl	8006910 <__errno>
 800570e:	4603      	mov	r3, r0
 8005710:	2216      	movs	r2, #22
 8005712:	601a      	str	r2, [r3, #0]
	return -1;
 8005714:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <_exit>:

void _exit (int status)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005728:	f04f 31ff 	mov.w	r1, #4294967295
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff ffe7 	bl	8005700 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005732:	e7fe      	b.n	8005732 <_exit+0x12>

08005734 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	e00a      	b.n	800575c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005746:	f3af 8000 	nop.w
 800574a:	4601      	mov	r1, r0
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	60ba      	str	r2, [r7, #8]
 8005752:	b2ca      	uxtb	r2, r1
 8005754:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	3301      	adds	r3, #1
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	429a      	cmp	r2, r3
 8005762:	dbf0      	blt.n	8005746 <_read+0x12>
	}

return len;
 8005764:	687b      	ldr	r3, [r7, #4]
}
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b086      	sub	sp, #24
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800577a:	2300      	movs	r3, #0
 800577c:	617b      	str	r3, [r7, #20]
 800577e:	e009      	b.n	8005794 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	60ba      	str	r2, [r7, #8]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	3301      	adds	r3, #1
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	429a      	cmp	r2, r3
 800579a:	dbf1      	blt.n	8005780 <_write+0x12>
	}
	return len;
 800579c:	687b      	ldr	r3, [r7, #4]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <_close>:

int _close(int file)
{
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
	return -1;
 80057ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr

080057bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057cc:	605a      	str	r2, [r3, #4]
	return 0;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bc80      	pop	{r7}
 80057d8:	4770      	bx	lr

080057da <_isatty>:

int _isatty(int file)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
	return 1;
 80057e2:	2301      	movs	r3, #1
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr

080057ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
	return 0;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	bc80      	pop	{r7}
 8005804:	4770      	bx	lr
	...

08005808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005810:	4a14      	ldr	r2, [pc, #80]	; (8005864 <_sbrk+0x5c>)
 8005812:	4b15      	ldr	r3, [pc, #84]	; (8005868 <_sbrk+0x60>)
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800581c:	4b13      	ldr	r3, [pc, #76]	; (800586c <_sbrk+0x64>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d102      	bne.n	800582a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005824:	4b11      	ldr	r3, [pc, #68]	; (800586c <_sbrk+0x64>)
 8005826:	4a12      	ldr	r2, [pc, #72]	; (8005870 <_sbrk+0x68>)
 8005828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800582a:	4b10      	ldr	r3, [pc, #64]	; (800586c <_sbrk+0x64>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4413      	add	r3, r2
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	429a      	cmp	r2, r3
 8005836:	d207      	bcs.n	8005848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005838:	f001 f86a 	bl	8006910 <__errno>
 800583c:	4603      	mov	r3, r0
 800583e:	220c      	movs	r2, #12
 8005840:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005842:	f04f 33ff 	mov.w	r3, #4294967295
 8005846:	e009      	b.n	800585c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005848:	4b08      	ldr	r3, [pc, #32]	; (800586c <_sbrk+0x64>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800584e:	4b07      	ldr	r3, [pc, #28]	; (800586c <_sbrk+0x64>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4413      	add	r3, r2
 8005856:	4a05      	ldr	r2, [pc, #20]	; (800586c <_sbrk+0x64>)
 8005858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800585a:	68fb      	ldr	r3, [r7, #12]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20010000 	.word	0x20010000
 8005868:	00000400 	.word	0x00000400
 800586c:	20000204 	.word	0x20000204
 8005870:	20000280 	.word	0x20000280

08005874 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005878:	bf00      	nop
 800587a:	46bd      	mov	sp, r7
 800587c:	bc80      	pop	{r7}
 800587e:	4770      	bx	lr

08005880 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005880:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005882:	e003      	b.n	800588c <LoopCopyDataInit>

08005884 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005884:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005886:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005888:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800588a:	3104      	adds	r1, #4

0800588c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800588c:	480a      	ldr	r0, [pc, #40]	; (80058b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800588e:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8005890:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005892:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005894:	d3f6      	bcc.n	8005884 <CopyDataInit>
  ldr r2, =_sbss
 8005896:	4a0a      	ldr	r2, [pc, #40]	; (80058c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005898:	e002      	b.n	80058a0 <LoopFillZerobss>

0800589a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800589a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800589c:	f842 3b04 	str.w	r3, [r2], #4

080058a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80058a0:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80058a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80058a4:	d3f9      	bcc.n	800589a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80058a6:	f7ff ffe5 	bl	8005874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058aa:	f001 f837 	bl	800691c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80058ae:	f7ff fe35 	bl	800551c <main>
  bx lr
 80058b2:	4770      	bx	lr
  ldr r3, =_sidata
 80058b4:	0800af7c 	.word	0x0800af7c
  ldr r0, =_sdata
 80058b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80058bc:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80058c0:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80058c4:	2000027c 	.word	0x2000027c

080058c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80058c8:	e7fe      	b.n	80058c8 <ADC1_2_IRQHandler>
	...

080058cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058d0:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <HAL_Init+0x28>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a07      	ldr	r2, [pc, #28]	; (80058f4 <HAL_Init+0x28>)
 80058d6:	f043 0310 	orr.w	r3, r3, #16
 80058da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058dc:	2003      	movs	r0, #3
 80058de:	f000 f92b 	bl	8005b38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058e2:	2000      	movs	r0, #0
 80058e4:	f000 f808 	bl	80058f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058e8:	f7ff feaa 	bl	8005640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40022000 	.word	0x40022000

080058f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005900:	4b12      	ldr	r3, [pc, #72]	; (800594c <HAL_InitTick+0x54>)
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	4b12      	ldr	r3, [pc, #72]	; (8005950 <HAL_InitTick+0x58>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	4619      	mov	r1, r3
 800590a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800590e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005912:	fbb2 f3f3 	udiv	r3, r2, r3
 8005916:	4618      	mov	r0, r3
 8005918:	f000 f935 	bl	8005b86 <HAL_SYSTICK_Config>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e00e      	b.n	8005944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b0f      	cmp	r3, #15
 800592a:	d80a      	bhi.n	8005942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800592c:	2200      	movs	r2, #0
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	f04f 30ff 	mov.w	r0, #4294967295
 8005934:	f000 f90b 	bl	8005b4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005938:	4a06      	ldr	r2, [pc, #24]	; (8005954 <HAL_InitTick+0x5c>)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	e000      	b.n	8005944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	20000004 	.word	0x20000004
 8005950:	2000000c 	.word	0x2000000c
 8005954:	20000008 	.word	0x20000008

08005958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005958:	b480      	push	{r7}
 800595a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800595c:	4b05      	ldr	r3, [pc, #20]	; (8005974 <HAL_IncTick+0x1c>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	4b05      	ldr	r3, [pc, #20]	; (8005978 <HAL_IncTick+0x20>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4413      	add	r3, r2
 8005968:	4a03      	ldr	r2, [pc, #12]	; (8005978 <HAL_IncTick+0x20>)
 800596a:	6013      	str	r3, [r2, #0]
}
 800596c:	bf00      	nop
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr
 8005974:	2000000c 	.word	0x2000000c
 8005978:	20000268 	.word	0x20000268

0800597c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return uwTick;
 8005980:	4b02      	ldr	r3, [pc, #8]	; (800598c <HAL_GetTick+0x10>)
 8005982:	681b      	ldr	r3, [r3, #0]
}
 8005984:	4618      	mov	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr
 800598c:	20000268 	.word	0x20000268

08005990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005998:	f7ff fff0 	bl	800597c <HAL_GetTick>
 800599c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d005      	beq.n	80059b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059aa:	4b0a      	ldr	r3, [pc, #40]	; (80059d4 <HAL_Delay+0x44>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4413      	add	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80059b6:	bf00      	nop
 80059b8:	f7ff ffe0 	bl	800597c <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d8f7      	bhi.n	80059b8 <HAL_Delay+0x28>
  {
  }
}
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	2000000c 	.word	0x2000000c

080059d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059e8:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <__NVIC_SetPriorityGrouping+0x44>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059f4:	4013      	ands	r3, r2
 80059f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a0a:	4a04      	ldr	r2, [pc, #16]	; (8005a1c <__NVIC_SetPriorityGrouping+0x44>)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	60d3      	str	r3, [r2, #12]
}
 8005a10:	bf00      	nop
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	e000ed00 	.word	0xe000ed00

08005a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a24:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <__NVIC_GetPriorityGrouping+0x18>)
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	0a1b      	lsrs	r3, r3, #8
 8005a2a:	f003 0307 	and.w	r3, r3, #7
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bc80      	pop	{r7}
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	e000ed00 	.word	0xe000ed00

08005a3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	4603      	mov	r3, r0
 8005a44:	6039      	str	r1, [r7, #0]
 8005a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	db0a      	blt.n	8005a66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	490c      	ldr	r1, [pc, #48]	; (8005a88 <__NVIC_SetPriority+0x4c>)
 8005a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a5a:	0112      	lsls	r2, r2, #4
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	440b      	add	r3, r1
 8005a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a64:	e00a      	b.n	8005a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	4908      	ldr	r1, [pc, #32]	; (8005a8c <__NVIC_SetPriority+0x50>)
 8005a6c:	79fb      	ldrb	r3, [r7, #7]
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	3b04      	subs	r3, #4
 8005a74:	0112      	lsls	r2, r2, #4
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	440b      	add	r3, r1
 8005a7a:	761a      	strb	r2, [r3, #24]
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bc80      	pop	{r7}
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	e000e100 	.word	0xe000e100
 8005a8c:	e000ed00 	.word	0xe000ed00

08005a90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b089      	sub	sp, #36	; 0x24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f1c3 0307 	rsb	r3, r3, #7
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	bf28      	it	cs
 8005aae:	2304      	movcs	r3, #4
 8005ab0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	2b06      	cmp	r3, #6
 8005ab8:	d902      	bls.n	8005ac0 <NVIC_EncodePriority+0x30>
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	3b03      	subs	r3, #3
 8005abe:	e000      	b.n	8005ac2 <NVIC_EncodePriority+0x32>
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	fa02 f303 	lsl.w	r3, r2, r3
 8005ace:	43da      	mvns	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	401a      	ands	r2, r3
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae2:	43d9      	mvns	r1, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ae8:	4313      	orrs	r3, r2
         );
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3724      	adds	r7, #36	; 0x24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr

08005af4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b04:	d301      	bcc.n	8005b0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b06:	2301      	movs	r3, #1
 8005b08:	e00f      	b.n	8005b2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b0a:	4a0a      	ldr	r2, [pc, #40]	; (8005b34 <SysTick_Config+0x40>)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b12:	210f      	movs	r1, #15
 8005b14:	f04f 30ff 	mov.w	r0, #4294967295
 8005b18:	f7ff ff90 	bl	8005a3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b1c:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <SysTick_Config+0x40>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b22:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <SysTick_Config+0x40>)
 8005b24:	2207      	movs	r2, #7
 8005b26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	e000e010 	.word	0xe000e010

08005b38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7ff ff49 	bl	80059d8 <__NVIC_SetPriorityGrouping>
}
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b086      	sub	sp, #24
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	4603      	mov	r3, r0
 8005b56:	60b9      	str	r1, [r7, #8]
 8005b58:	607a      	str	r2, [r7, #4]
 8005b5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b60:	f7ff ff5e 	bl	8005a20 <__NVIC_GetPriorityGrouping>
 8005b64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	6978      	ldr	r0, [r7, #20]
 8005b6c:	f7ff ff90 	bl	8005a90 <NVIC_EncodePriority>
 8005b70:	4602      	mov	r2, r0
 8005b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b76:	4611      	mov	r1, r2
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff ff5f 	bl	8005a3c <__NVIC_SetPriority>
}
 8005b7e:	bf00      	nop
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b082      	sub	sp, #8
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7ff ffb0 	bl	8005af4 <SysTick_Config>
 8005b94:	4603      	mov	r3, r0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b08b      	sub	sp, #44	; 0x2c
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005baa:	2300      	movs	r3, #0
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bb2:	e179      	b.n	8005ea8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	f040 8168 	bne.w	8005ea2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	4aa0      	ldr	r2, [pc, #640]	; (8005e58 <HAL_GPIO_Init+0x2b8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d05e      	beq.n	8005c9a <HAL_GPIO_Init+0xfa>
 8005bdc:	4a9e      	ldr	r2, [pc, #632]	; (8005e58 <HAL_GPIO_Init+0x2b8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d875      	bhi.n	8005cce <HAL_GPIO_Init+0x12e>
 8005be2:	4a9e      	ldr	r2, [pc, #632]	; (8005e5c <HAL_GPIO_Init+0x2bc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d058      	beq.n	8005c9a <HAL_GPIO_Init+0xfa>
 8005be8:	4a9c      	ldr	r2, [pc, #624]	; (8005e5c <HAL_GPIO_Init+0x2bc>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d86f      	bhi.n	8005cce <HAL_GPIO_Init+0x12e>
 8005bee:	4a9c      	ldr	r2, [pc, #624]	; (8005e60 <HAL_GPIO_Init+0x2c0>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d052      	beq.n	8005c9a <HAL_GPIO_Init+0xfa>
 8005bf4:	4a9a      	ldr	r2, [pc, #616]	; (8005e60 <HAL_GPIO_Init+0x2c0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d869      	bhi.n	8005cce <HAL_GPIO_Init+0x12e>
 8005bfa:	4a9a      	ldr	r2, [pc, #616]	; (8005e64 <HAL_GPIO_Init+0x2c4>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d04c      	beq.n	8005c9a <HAL_GPIO_Init+0xfa>
 8005c00:	4a98      	ldr	r2, [pc, #608]	; (8005e64 <HAL_GPIO_Init+0x2c4>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d863      	bhi.n	8005cce <HAL_GPIO_Init+0x12e>
 8005c06:	4a98      	ldr	r2, [pc, #608]	; (8005e68 <HAL_GPIO_Init+0x2c8>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d046      	beq.n	8005c9a <HAL_GPIO_Init+0xfa>
 8005c0c:	4a96      	ldr	r2, [pc, #600]	; (8005e68 <HAL_GPIO_Init+0x2c8>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d85d      	bhi.n	8005cce <HAL_GPIO_Init+0x12e>
 8005c12:	2b12      	cmp	r3, #18
 8005c14:	d82a      	bhi.n	8005c6c <HAL_GPIO_Init+0xcc>
 8005c16:	2b12      	cmp	r3, #18
 8005c18:	d859      	bhi.n	8005cce <HAL_GPIO_Init+0x12e>
 8005c1a:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <HAL_GPIO_Init+0x80>)
 8005c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c20:	08005c9b 	.word	0x08005c9b
 8005c24:	08005c75 	.word	0x08005c75
 8005c28:	08005c87 	.word	0x08005c87
 8005c2c:	08005cc9 	.word	0x08005cc9
 8005c30:	08005ccf 	.word	0x08005ccf
 8005c34:	08005ccf 	.word	0x08005ccf
 8005c38:	08005ccf 	.word	0x08005ccf
 8005c3c:	08005ccf 	.word	0x08005ccf
 8005c40:	08005ccf 	.word	0x08005ccf
 8005c44:	08005ccf 	.word	0x08005ccf
 8005c48:	08005ccf 	.word	0x08005ccf
 8005c4c:	08005ccf 	.word	0x08005ccf
 8005c50:	08005ccf 	.word	0x08005ccf
 8005c54:	08005ccf 	.word	0x08005ccf
 8005c58:	08005ccf 	.word	0x08005ccf
 8005c5c:	08005ccf 	.word	0x08005ccf
 8005c60:	08005ccf 	.word	0x08005ccf
 8005c64:	08005c7d 	.word	0x08005c7d
 8005c68:	08005c91 	.word	0x08005c91
 8005c6c:	4a7f      	ldr	r2, [pc, #508]	; (8005e6c <HAL_GPIO_Init+0x2cc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d013      	beq.n	8005c9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005c72:	e02c      	b.n	8005cce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	623b      	str	r3, [r7, #32]
          break;
 8005c7a:	e029      	b.n	8005cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	3304      	adds	r3, #4
 8005c82:	623b      	str	r3, [r7, #32]
          break;
 8005c84:	e024      	b.n	8005cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	623b      	str	r3, [r7, #32]
          break;
 8005c8e:	e01f      	b.n	8005cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	330c      	adds	r3, #12
 8005c96:	623b      	str	r3, [r7, #32]
          break;
 8005c98:	e01a      	b.n	8005cd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d102      	bne.n	8005ca8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005ca2:	2304      	movs	r3, #4
 8005ca4:	623b      	str	r3, [r7, #32]
          break;
 8005ca6:	e013      	b.n	8005cd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d105      	bne.n	8005cbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005cb0:	2308      	movs	r3, #8
 8005cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	611a      	str	r2, [r3, #16]
          break;
 8005cba:	e009      	b.n	8005cd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005cbc:	2308      	movs	r3, #8
 8005cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69fa      	ldr	r2, [r7, #28]
 8005cc4:	615a      	str	r2, [r3, #20]
          break;
 8005cc6:	e003      	b.n	8005cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	623b      	str	r3, [r7, #32]
          break;
 8005ccc:	e000      	b.n	8005cd0 <HAL_GPIO_Init+0x130>
          break;
 8005cce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2bff      	cmp	r3, #255	; 0xff
 8005cd4:	d801      	bhi.n	8005cda <HAL_GPIO_Init+0x13a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	e001      	b.n	8005cde <HAL_GPIO_Init+0x13e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	2bff      	cmp	r3, #255	; 0xff
 8005ce4:	d802      	bhi.n	8005cec <HAL_GPIO_Init+0x14c>
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	e002      	b.n	8005cf2 <HAL_GPIO_Init+0x152>
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	3b08      	subs	r3, #8
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	210f      	movs	r1, #15
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8005d00:	43db      	mvns	r3, r3
 8005d02:	401a      	ands	r2, r3
 8005d04:	6a39      	ldr	r1, [r7, #32]
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	f000 80c1 	beq.w	8005ea2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005d20:	4b53      	ldr	r3, [pc, #332]	; (8005e70 <HAL_GPIO_Init+0x2d0>)
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	4a52      	ldr	r2, [pc, #328]	; (8005e70 <HAL_GPIO_Init+0x2d0>)
 8005d26:	f043 0301 	orr.w	r3, r3, #1
 8005d2a:	6193      	str	r3, [r2, #24]
 8005d2c:	4b50      	ldr	r3, [pc, #320]	; (8005e70 <HAL_GPIO_Init+0x2d0>)
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	60bb      	str	r3, [r7, #8]
 8005d36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005d38:	4a4e      	ldr	r2, [pc, #312]	; (8005e74 <HAL_GPIO_Init+0x2d4>)
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	089b      	lsrs	r3, r3, #2
 8005d3e:	3302      	adds	r3, #2
 8005d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	f003 0303 	and.w	r3, r3, #3
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	220f      	movs	r2, #15
 8005d50:	fa02 f303 	lsl.w	r3, r2, r3
 8005d54:	43db      	mvns	r3, r3
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4013      	ands	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a46      	ldr	r2, [pc, #280]	; (8005e78 <HAL_GPIO_Init+0x2d8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d01f      	beq.n	8005da4 <HAL_GPIO_Init+0x204>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a45      	ldr	r2, [pc, #276]	; (8005e7c <HAL_GPIO_Init+0x2dc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d019      	beq.n	8005da0 <HAL_GPIO_Init+0x200>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a44      	ldr	r2, [pc, #272]	; (8005e80 <HAL_GPIO_Init+0x2e0>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d013      	beq.n	8005d9c <HAL_GPIO_Init+0x1fc>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a43      	ldr	r2, [pc, #268]	; (8005e84 <HAL_GPIO_Init+0x2e4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d00d      	beq.n	8005d98 <HAL_GPIO_Init+0x1f8>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a42      	ldr	r2, [pc, #264]	; (8005e88 <HAL_GPIO_Init+0x2e8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d007      	beq.n	8005d94 <HAL_GPIO_Init+0x1f4>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a41      	ldr	r2, [pc, #260]	; (8005e8c <HAL_GPIO_Init+0x2ec>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d101      	bne.n	8005d90 <HAL_GPIO_Init+0x1f0>
 8005d8c:	2305      	movs	r3, #5
 8005d8e:	e00a      	b.n	8005da6 <HAL_GPIO_Init+0x206>
 8005d90:	2306      	movs	r3, #6
 8005d92:	e008      	b.n	8005da6 <HAL_GPIO_Init+0x206>
 8005d94:	2304      	movs	r3, #4
 8005d96:	e006      	b.n	8005da6 <HAL_GPIO_Init+0x206>
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e004      	b.n	8005da6 <HAL_GPIO_Init+0x206>
 8005d9c:	2302      	movs	r3, #2
 8005d9e:	e002      	b.n	8005da6 <HAL_GPIO_Init+0x206>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <HAL_GPIO_Init+0x206>
 8005da4:	2300      	movs	r3, #0
 8005da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da8:	f002 0203 	and.w	r2, r2, #3
 8005dac:	0092      	lsls	r2, r2, #2
 8005dae:	4093      	lsls	r3, r2
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005db6:	492f      	ldr	r1, [pc, #188]	; (8005e74 <HAL_GPIO_Init+0x2d4>)
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	089b      	lsrs	r3, r3, #2
 8005dbc:	3302      	adds	r3, #2
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d006      	beq.n	8005dde <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005dd0:	4b2f      	ldr	r3, [pc, #188]	; (8005e90 <HAL_GPIO_Init+0x2f0>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	492e      	ldr	r1, [pc, #184]	; (8005e90 <HAL_GPIO_Init+0x2f0>)
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	600b      	str	r3, [r1, #0]
 8005ddc:	e006      	b.n	8005dec <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005dde:	4b2c      	ldr	r3, [pc, #176]	; (8005e90 <HAL_GPIO_Init+0x2f0>)
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	43db      	mvns	r3, r3
 8005de6:	492a      	ldr	r1, [pc, #168]	; (8005e90 <HAL_GPIO_Init+0x2f0>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d006      	beq.n	8005e06 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005df8:	4b25      	ldr	r3, [pc, #148]	; (8005e90 <HAL_GPIO_Init+0x2f0>)
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	4924      	ldr	r1, [pc, #144]	; (8005e90 <HAL_GPIO_Init+0x2f0>)
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	604b      	str	r3, [r1, #4]
 8005e04:	e006      	b.n	8005e14 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005e06:	4b22      	ldr	r3, [pc, #136]	; (8005e90 <HAL_GPIO_Init+0x2f0>)
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	4920      	ldr	r1, [pc, #128]	; (8005e90 <HAL_GPIO_Init+0x2f0>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d006      	beq.n	8005e2e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005e20:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <HAL_GPIO_Init+0x2f0>)
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	491a      	ldr	r1, [pc, #104]	; (8005e90 <HAL_GPIO_Init+0x2f0>)
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	608b      	str	r3, [r1, #8]
 8005e2c:	e006      	b.n	8005e3c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005e2e:	4b18      	ldr	r3, [pc, #96]	; (8005e90 <HAL_GPIO_Init+0x2f0>)
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	43db      	mvns	r3, r3
 8005e36:	4916      	ldr	r1, [pc, #88]	; (8005e90 <HAL_GPIO_Init+0x2f0>)
 8005e38:	4013      	ands	r3, r2
 8005e3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d025      	beq.n	8005e94 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005e48:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <HAL_GPIO_Init+0x2f0>)
 8005e4a:	68da      	ldr	r2, [r3, #12]
 8005e4c:	4910      	ldr	r1, [pc, #64]	; (8005e90 <HAL_GPIO_Init+0x2f0>)
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60cb      	str	r3, [r1, #12]
 8005e54:	e025      	b.n	8005ea2 <HAL_GPIO_Init+0x302>
 8005e56:	bf00      	nop
 8005e58:	10320000 	.word	0x10320000
 8005e5c:	10310000 	.word	0x10310000
 8005e60:	10220000 	.word	0x10220000
 8005e64:	10210000 	.word	0x10210000
 8005e68:	10120000 	.word	0x10120000
 8005e6c:	10110000 	.word	0x10110000
 8005e70:	40021000 	.word	0x40021000
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40010800 	.word	0x40010800
 8005e7c:	40010c00 	.word	0x40010c00
 8005e80:	40011000 	.word	0x40011000
 8005e84:	40011400 	.word	0x40011400
 8005e88:	40011800 	.word	0x40011800
 8005e8c:	40011c00 	.word	0x40011c00
 8005e90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005e94:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <HAL_GPIO_Init+0x324>)
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	43db      	mvns	r3, r3
 8005e9c:	4909      	ldr	r1, [pc, #36]	; (8005ec4 <HAL_GPIO_Init+0x324>)
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f47f ae7e 	bne.w	8005bb4 <HAL_GPIO_Init+0x14>
  }
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	372c      	adds	r7, #44	; 0x2c
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bc80      	pop	{r7}
 8005ec2:	4770      	bx	lr
 8005ec4:	40010400 	.word	0x40010400

08005ec8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	807b      	strh	r3, [r7, #2]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ed8:	787b      	ldrb	r3, [r7, #1]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ede:	887a      	ldrh	r2, [r7, #2]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005ee4:	e003      	b.n	8005eee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005ee6:	887b      	ldrh	r3, [r7, #2]
 8005ee8:	041a      	lsls	r2, r3, #16
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	611a      	str	r2, [r3, #16]
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr

08005ef8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e26c      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8087 	beq.w	8006026 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f18:	4b92      	ldr	r3, [pc, #584]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f003 030c 	and.w	r3, r3, #12
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d00c      	beq.n	8005f3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f24:	4b8f      	ldr	r3, [pc, #572]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f003 030c 	and.w	r3, r3, #12
 8005f2c:	2b08      	cmp	r3, #8
 8005f2e:	d112      	bne.n	8005f56 <HAL_RCC_OscConfig+0x5e>
 8005f30:	4b8c      	ldr	r3, [pc, #560]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f3c:	d10b      	bne.n	8005f56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f3e:	4b89      	ldr	r3, [pc, #548]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d06c      	beq.n	8006024 <HAL_RCC_OscConfig+0x12c>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d168      	bne.n	8006024 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e246      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f5e:	d106      	bne.n	8005f6e <HAL_RCC_OscConfig+0x76>
 8005f60:	4b80      	ldr	r3, [pc, #512]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a7f      	ldr	r2, [pc, #508]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	e02e      	b.n	8005fcc <HAL_RCC_OscConfig+0xd4>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10c      	bne.n	8005f90 <HAL_RCC_OscConfig+0x98>
 8005f76:	4b7b      	ldr	r3, [pc, #492]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a7a      	ldr	r2, [pc, #488]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	4b78      	ldr	r3, [pc, #480]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a77      	ldr	r2, [pc, #476]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f8c:	6013      	str	r3, [r2, #0]
 8005f8e:	e01d      	b.n	8005fcc <HAL_RCC_OscConfig+0xd4>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f98:	d10c      	bne.n	8005fb4 <HAL_RCC_OscConfig+0xbc>
 8005f9a:	4b72      	ldr	r3, [pc, #456]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a71      	ldr	r2, [pc, #452]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	4b6f      	ldr	r3, [pc, #444]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a6e      	ldr	r2, [pc, #440]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb0:	6013      	str	r3, [r2, #0]
 8005fb2:	e00b      	b.n	8005fcc <HAL_RCC_OscConfig+0xd4>
 8005fb4:	4b6b      	ldr	r3, [pc, #428]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a6a      	ldr	r2, [pc, #424]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	4b68      	ldr	r3, [pc, #416]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a67      	ldr	r2, [pc, #412]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d013      	beq.n	8005ffc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd4:	f7ff fcd2 	bl	800597c <HAL_GetTick>
 8005fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fda:	e008      	b.n	8005fee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fdc:	f7ff fcce 	bl	800597c <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	2b64      	cmp	r3, #100	; 0x64
 8005fe8:	d901      	bls.n	8005fee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e1fa      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fee:	4b5d      	ldr	r3, [pc, #372]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d0f0      	beq.n	8005fdc <HAL_RCC_OscConfig+0xe4>
 8005ffa:	e014      	b.n	8006026 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ffc:	f7ff fcbe 	bl	800597c <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006004:	f7ff fcba 	bl	800597c <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b64      	cmp	r3, #100	; 0x64
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e1e6      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006016:	4b53      	ldr	r3, [pc, #332]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1f0      	bne.n	8006004 <HAL_RCC_OscConfig+0x10c>
 8006022:	e000      	b.n	8006026 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d063      	beq.n	80060fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006032:	4b4c      	ldr	r3, [pc, #304]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f003 030c 	and.w	r3, r3, #12
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00b      	beq.n	8006056 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800603e:	4b49      	ldr	r3, [pc, #292]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f003 030c 	and.w	r3, r3, #12
 8006046:	2b08      	cmp	r3, #8
 8006048:	d11c      	bne.n	8006084 <HAL_RCC_OscConfig+0x18c>
 800604a:	4b46      	ldr	r3, [pc, #280]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d116      	bne.n	8006084 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006056:	4b43      	ldr	r3, [pc, #268]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d005      	beq.n	800606e <HAL_RCC_OscConfig+0x176>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d001      	beq.n	800606e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e1ba      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800606e:	4b3d      	ldr	r3, [pc, #244]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	4939      	ldr	r1, [pc, #228]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 800607e:	4313      	orrs	r3, r2
 8006080:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006082:	e03a      	b.n	80060fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d020      	beq.n	80060ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800608c:	4b36      	ldr	r3, [pc, #216]	; (8006168 <HAL_RCC_OscConfig+0x270>)
 800608e:	2201      	movs	r2, #1
 8006090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006092:	f7ff fc73 	bl	800597c <HAL_GetTick>
 8006096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006098:	e008      	b.n	80060ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800609a:	f7ff fc6f 	bl	800597c <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e19b      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060ac:	4b2d      	ldr	r3, [pc, #180]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d0f0      	beq.n	800609a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b8:	4b2a      	ldr	r3, [pc, #168]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	4927      	ldr	r1, [pc, #156]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	600b      	str	r3, [r1, #0]
 80060cc:	e015      	b.n	80060fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ce:	4b26      	ldr	r3, [pc, #152]	; (8006168 <HAL_RCC_OscConfig+0x270>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d4:	f7ff fc52 	bl	800597c <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060dc:	f7ff fc4e 	bl	800597c <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e17a      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060ee:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f0      	bne.n	80060dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d03a      	beq.n	800617c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d019      	beq.n	8006142 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800610e:	4b17      	ldr	r3, [pc, #92]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8006110:	2201      	movs	r2, #1
 8006112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006114:	f7ff fc32 	bl	800597c <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800611a:	e008      	b.n	800612e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800611c:	f7ff fc2e 	bl	800597c <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b02      	cmp	r3, #2
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e15a      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800612e:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <HAL_RCC_OscConfig+0x26c>)
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d0f0      	beq.n	800611c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800613a:	2001      	movs	r0, #1
 800613c:	f000 faa6 	bl	800668c <RCC_Delay>
 8006140:	e01c      	b.n	800617c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006142:	4b0a      	ldr	r3, [pc, #40]	; (800616c <HAL_RCC_OscConfig+0x274>)
 8006144:	2200      	movs	r2, #0
 8006146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006148:	f7ff fc18 	bl	800597c <HAL_GetTick>
 800614c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800614e:	e00f      	b.n	8006170 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006150:	f7ff fc14 	bl	800597c <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	2b02      	cmp	r3, #2
 800615c:	d908      	bls.n	8006170 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e140      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
 8006162:	bf00      	nop
 8006164:	40021000 	.word	0x40021000
 8006168:	42420000 	.word	0x42420000
 800616c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006170:	4b9e      	ldr	r3, [pc, #632]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1e9      	bne.n	8006150 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80a6 	beq.w	80062d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800618e:	4b97      	ldr	r3, [pc, #604]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10d      	bne.n	80061b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800619a:	4b94      	ldr	r3, [pc, #592]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	4a93      	ldr	r2, [pc, #588]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 80061a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061a4:	61d3      	str	r3, [r2, #28]
 80061a6:	4b91      	ldr	r3, [pc, #580]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061b2:	2301      	movs	r3, #1
 80061b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061b6:	4b8e      	ldr	r3, [pc, #568]	; (80063f0 <HAL_RCC_OscConfig+0x4f8>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d118      	bne.n	80061f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061c2:	4b8b      	ldr	r3, [pc, #556]	; (80063f0 <HAL_RCC_OscConfig+0x4f8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a8a      	ldr	r2, [pc, #552]	; (80063f0 <HAL_RCC_OscConfig+0x4f8>)
 80061c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ce:	f7ff fbd5 	bl	800597c <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d4:	e008      	b.n	80061e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d6:	f7ff fbd1 	bl	800597c <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b64      	cmp	r3, #100	; 0x64
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e0fd      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061e8:	4b81      	ldr	r3, [pc, #516]	; (80063f0 <HAL_RCC_OscConfig+0x4f8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0f0      	beq.n	80061d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d106      	bne.n	800620a <HAL_RCC_OscConfig+0x312>
 80061fc:	4b7b      	ldr	r3, [pc, #492]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 80061fe:	6a1b      	ldr	r3, [r3, #32]
 8006200:	4a7a      	ldr	r2, [pc, #488]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006202:	f043 0301 	orr.w	r3, r3, #1
 8006206:	6213      	str	r3, [r2, #32]
 8006208:	e02d      	b.n	8006266 <HAL_RCC_OscConfig+0x36e>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10c      	bne.n	800622c <HAL_RCC_OscConfig+0x334>
 8006212:	4b76      	ldr	r3, [pc, #472]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	4a75      	ldr	r2, [pc, #468]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006218:	f023 0301 	bic.w	r3, r3, #1
 800621c:	6213      	str	r3, [r2, #32]
 800621e:	4b73      	ldr	r3, [pc, #460]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	4a72      	ldr	r2, [pc, #456]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006224:	f023 0304 	bic.w	r3, r3, #4
 8006228:	6213      	str	r3, [r2, #32]
 800622a:	e01c      	b.n	8006266 <HAL_RCC_OscConfig+0x36e>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	2b05      	cmp	r3, #5
 8006232:	d10c      	bne.n	800624e <HAL_RCC_OscConfig+0x356>
 8006234:	4b6d      	ldr	r3, [pc, #436]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	4a6c      	ldr	r2, [pc, #432]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 800623a:	f043 0304 	orr.w	r3, r3, #4
 800623e:	6213      	str	r3, [r2, #32]
 8006240:	4b6a      	ldr	r3, [pc, #424]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	4a69      	ldr	r2, [pc, #420]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006246:	f043 0301 	orr.w	r3, r3, #1
 800624a:	6213      	str	r3, [r2, #32]
 800624c:	e00b      	b.n	8006266 <HAL_RCC_OscConfig+0x36e>
 800624e:	4b67      	ldr	r3, [pc, #412]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	4a66      	ldr	r2, [pc, #408]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006254:	f023 0301 	bic.w	r3, r3, #1
 8006258:	6213      	str	r3, [r2, #32]
 800625a:	4b64      	ldr	r3, [pc, #400]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	4a63      	ldr	r2, [pc, #396]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006260:	f023 0304 	bic.w	r3, r3, #4
 8006264:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d015      	beq.n	800629a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800626e:	f7ff fb85 	bl	800597c <HAL_GetTick>
 8006272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006274:	e00a      	b.n	800628c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006276:	f7ff fb81 	bl	800597c <HAL_GetTick>
 800627a:	4602      	mov	r2, r0
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	f241 3288 	movw	r2, #5000	; 0x1388
 8006284:	4293      	cmp	r3, r2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e0ab      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800628c:	4b57      	ldr	r3, [pc, #348]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	f003 0302 	and.w	r3, r3, #2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0ee      	beq.n	8006276 <HAL_RCC_OscConfig+0x37e>
 8006298:	e014      	b.n	80062c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800629a:	f7ff fb6f 	bl	800597c <HAL_GetTick>
 800629e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062a0:	e00a      	b.n	80062b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a2:	f7ff fb6b 	bl	800597c <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e095      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062b8:	4b4c      	ldr	r3, [pc, #304]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1ee      	bne.n	80062a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d105      	bne.n	80062d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062ca:	4b48      	ldr	r3, [pc, #288]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	4a47      	ldr	r2, [pc, #284]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 80062d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8081 	beq.w	80063e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80062e0:	4b42      	ldr	r3, [pc, #264]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f003 030c 	and.w	r3, r3, #12
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d061      	beq.n	80063b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	69db      	ldr	r3, [r3, #28]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d146      	bne.n	8006382 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062f4:	4b3f      	ldr	r3, [pc, #252]	; (80063f4 <HAL_RCC_OscConfig+0x4fc>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062fa:	f7ff fb3f 	bl	800597c <HAL_GetTick>
 80062fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006302:	f7ff fb3b 	bl	800597c <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e067      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006314:	4b35      	ldr	r3, [pc, #212]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1f0      	bne.n	8006302 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006328:	d108      	bne.n	800633c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800632a:	4b30      	ldr	r3, [pc, #192]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	492d      	ldr	r1, [pc, #180]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006338:	4313      	orrs	r3, r2
 800633a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800633c:	4b2b      	ldr	r3, [pc, #172]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a19      	ldr	r1, [r3, #32]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	430b      	orrs	r3, r1
 800634e:	4927      	ldr	r1, [pc, #156]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006350:	4313      	orrs	r3, r2
 8006352:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006354:	4b27      	ldr	r3, [pc, #156]	; (80063f4 <HAL_RCC_OscConfig+0x4fc>)
 8006356:	2201      	movs	r2, #1
 8006358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800635a:	f7ff fb0f 	bl	800597c <HAL_GetTick>
 800635e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006360:	e008      	b.n	8006374 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006362:	f7ff fb0b 	bl	800597c <HAL_GetTick>
 8006366:	4602      	mov	r2, r0
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	1ad3      	subs	r3, r2, r3
 800636c:	2b02      	cmp	r3, #2
 800636e:	d901      	bls.n	8006374 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e037      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006374:	4b1d      	ldr	r3, [pc, #116]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d0f0      	beq.n	8006362 <HAL_RCC_OscConfig+0x46a>
 8006380:	e02f      	b.n	80063e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006382:	4b1c      	ldr	r3, [pc, #112]	; (80063f4 <HAL_RCC_OscConfig+0x4fc>)
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006388:	f7ff faf8 	bl	800597c <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006390:	f7ff faf4 	bl	800597c <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e020      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063a2:	4b12      	ldr	r3, [pc, #72]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f0      	bne.n	8006390 <HAL_RCC_OscConfig+0x498>
 80063ae:	e018      	b.n	80063e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e013      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063bc:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <HAL_RCC_OscConfig+0x4f4>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d106      	bne.n	80063de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063da:	429a      	cmp	r2, r3
 80063dc:	d001      	beq.n	80063e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e000      	b.n	80063e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	40021000 	.word	0x40021000
 80063f0:	40007000 	.word	0x40007000
 80063f4:	42420060 	.word	0x42420060

080063f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d101      	bne.n	800640c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0d0      	b.n	80065ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800640c:	4b6a      	ldr	r3, [pc, #424]	; (80065b8 <HAL_RCC_ClockConfig+0x1c0>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d910      	bls.n	800643c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641a:	4b67      	ldr	r3, [pc, #412]	; (80065b8 <HAL_RCC_ClockConfig+0x1c0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f023 0207 	bic.w	r2, r3, #7
 8006422:	4965      	ldr	r1, [pc, #404]	; (80065b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	4313      	orrs	r3, r2
 8006428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800642a:	4b63      	ldr	r3, [pc, #396]	; (80065b8 <HAL_RCC_ClockConfig+0x1c0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0307 	and.w	r3, r3, #7
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	429a      	cmp	r2, r3
 8006436:	d001      	beq.n	800643c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	e0b8      	b.n	80065ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0302 	and.w	r3, r3, #2
 8006444:	2b00      	cmp	r3, #0
 8006446:	d020      	beq.n	800648a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006454:	4b59      	ldr	r3, [pc, #356]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4a58      	ldr	r2, [pc, #352]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 800645a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800645e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800646c:	4b53      	ldr	r3, [pc, #332]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	4a52      	ldr	r2, [pc, #328]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006472:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006476:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006478:	4b50      	ldr	r3, [pc, #320]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	494d      	ldr	r1, [pc, #308]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006486:	4313      	orrs	r3, r2
 8006488:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d040      	beq.n	8006518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d107      	bne.n	80064ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800649e:	4b47      	ldr	r3, [pc, #284]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d115      	bne.n	80064d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e07f      	b.n	80065ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d107      	bne.n	80064c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064b6:	4b41      	ldr	r3, [pc, #260]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e073      	b.n	80065ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c6:	4b3d      	ldr	r3, [pc, #244]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0302 	and.w	r3, r3, #2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e06b      	b.n	80065ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80064d6:	4b39      	ldr	r3, [pc, #228]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f023 0203 	bic.w	r2, r3, #3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	4936      	ldr	r1, [pc, #216]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064e8:	f7ff fa48 	bl	800597c <HAL_GetTick>
 80064ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ee:	e00a      	b.n	8006506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064f0:	f7ff fa44 	bl	800597c <HAL_GetTick>
 80064f4:	4602      	mov	r2, r0
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80064fe:	4293      	cmp	r3, r2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e053      	b.n	80065ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006506:	4b2d      	ldr	r3, [pc, #180]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f003 020c 	and.w	r2, r3, #12
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	429a      	cmp	r2, r3
 8006516:	d1eb      	bne.n	80064f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006518:	4b27      	ldr	r3, [pc, #156]	; (80065b8 <HAL_RCC_ClockConfig+0x1c0>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0307 	and.w	r3, r3, #7
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d210      	bcs.n	8006548 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006526:	4b24      	ldr	r3, [pc, #144]	; (80065b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f023 0207 	bic.w	r2, r3, #7
 800652e:	4922      	ldr	r1, [pc, #136]	; (80065b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	4313      	orrs	r3, r2
 8006534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006536:	4b20      	ldr	r3, [pc, #128]	; (80065b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	429a      	cmp	r2, r3
 8006542:	d001      	beq.n	8006548 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e032      	b.n	80065ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0304 	and.w	r3, r3, #4
 8006550:	2b00      	cmp	r3, #0
 8006552:	d008      	beq.n	8006566 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006554:	4b19      	ldr	r3, [pc, #100]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	4916      	ldr	r1, [pc, #88]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006562:	4313      	orrs	r3, r2
 8006564:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0308 	and.w	r3, r3, #8
 800656e:	2b00      	cmp	r3, #0
 8006570:	d009      	beq.n	8006586 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006572:	4b12      	ldr	r3, [pc, #72]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	490e      	ldr	r1, [pc, #56]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 8006582:	4313      	orrs	r3, r2
 8006584:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006586:	f000 f821 	bl	80065cc <HAL_RCC_GetSysClockFreq>
 800658a:	4602      	mov	r2, r0
 800658c:	4b0b      	ldr	r3, [pc, #44]	; (80065bc <HAL_RCC_ClockConfig+0x1c4>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	091b      	lsrs	r3, r3, #4
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	490a      	ldr	r1, [pc, #40]	; (80065c0 <HAL_RCC_ClockConfig+0x1c8>)
 8006598:	5ccb      	ldrb	r3, [r1, r3]
 800659a:	fa22 f303 	lsr.w	r3, r2, r3
 800659e:	4a09      	ldr	r2, [pc, #36]	; (80065c4 <HAL_RCC_ClockConfig+0x1cc>)
 80065a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80065a2:	4b09      	ldr	r3, [pc, #36]	; (80065c8 <HAL_RCC_ClockConfig+0x1d0>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff f9a6 	bl	80058f8 <HAL_InitTick>

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	40022000 	.word	0x40022000
 80065bc:	40021000 	.word	0x40021000
 80065c0:	0800ab80 	.word	0x0800ab80
 80065c4:	20000004 	.word	0x20000004
 80065c8:	20000008 	.word	0x20000008

080065cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065cc:	b490      	push	{r4, r7}
 80065ce:	b08a      	sub	sp, #40	; 0x28
 80065d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80065d2:	4b2a      	ldr	r3, [pc, #168]	; (800667c <HAL_RCC_GetSysClockFreq+0xb0>)
 80065d4:	1d3c      	adds	r4, r7, #4
 80065d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80065d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80065dc:	f240 2301 	movw	r3, #513	; 0x201
 80065e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80065e2:	2300      	movs	r3, #0
 80065e4:	61fb      	str	r3, [r7, #28]
 80065e6:	2300      	movs	r3, #0
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	2300      	movs	r3, #0
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
 80065ee:	2300      	movs	r3, #0
 80065f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80065f2:	2300      	movs	r3, #0
 80065f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80065f6:	4b22      	ldr	r3, [pc, #136]	; (8006680 <HAL_RCC_GetSysClockFreq+0xb4>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	f003 030c 	and.w	r3, r3, #12
 8006602:	2b04      	cmp	r3, #4
 8006604:	d002      	beq.n	800660c <HAL_RCC_GetSysClockFreq+0x40>
 8006606:	2b08      	cmp	r3, #8
 8006608:	d003      	beq.n	8006612 <HAL_RCC_GetSysClockFreq+0x46>
 800660a:	e02d      	b.n	8006668 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800660c:	4b1d      	ldr	r3, [pc, #116]	; (8006684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800660e:	623b      	str	r3, [r7, #32]
      break;
 8006610:	e02d      	b.n	800666e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	0c9b      	lsrs	r3, r3, #18
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800661e:	4413      	add	r3, r2
 8006620:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006624:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d013      	beq.n	8006658 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006630:	4b13      	ldr	r3, [pc, #76]	; (8006680 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	0c5b      	lsrs	r3, r3, #17
 8006636:	f003 0301 	and.w	r3, r3, #1
 800663a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800663e:	4413      	add	r3, r2
 8006640:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006644:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	4a0e      	ldr	r2, [pc, #56]	; (8006684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800664a:	fb02 f203 	mul.w	r2, r2, r3
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	fbb2 f3f3 	udiv	r3, r2, r3
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
 8006656:	e004      	b.n	8006662 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	4a0b      	ldr	r2, [pc, #44]	; (8006688 <HAL_RCC_GetSysClockFreq+0xbc>)
 800665c:	fb02 f303 	mul.w	r3, r2, r3
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	623b      	str	r3, [r7, #32]
      break;
 8006666:	e002      	b.n	800666e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006668:	4b06      	ldr	r3, [pc, #24]	; (8006684 <HAL_RCC_GetSysClockFreq+0xb8>)
 800666a:	623b      	str	r3, [r7, #32]
      break;
 800666c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800666e:	6a3b      	ldr	r3, [r7, #32]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3728      	adds	r7, #40	; 0x28
 8006674:	46bd      	mov	sp, r7
 8006676:	bc90      	pop	{r4, r7}
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	080093b0 	.word	0x080093b0
 8006680:	40021000 	.word	0x40021000
 8006684:	007a1200 	.word	0x007a1200
 8006688:	003d0900 	.word	0x003d0900

0800668c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006694:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <RCC_Delay+0x34>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a0a      	ldr	r2, [pc, #40]	; (80066c4 <RCC_Delay+0x38>)
 800669a:	fba2 2303 	umull	r2, r3, r2, r3
 800669e:	0a5b      	lsrs	r3, r3, #9
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	fb02 f303 	mul.w	r3, r2, r3
 80066a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80066a8:	bf00      	nop
  }
  while (Delay --);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	1e5a      	subs	r2, r3, #1
 80066ae:	60fa      	str	r2, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f9      	bne.n	80066a8 <RCC_Delay+0x1c>
}
 80066b4:	bf00      	nop
 80066b6:	bf00      	nop
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bc80      	pop	{r7}
 80066be:	4770      	bx	lr
 80066c0:	20000004 	.word	0x20000004
 80066c4:	10624dd3 	.word	0x10624dd3

080066c8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d004      	beq.n	80066e4 <HAL_SRAM_Init+0x1c>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	699b      	ldr	r3, [r3, #24]
 80066de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e2:	d101      	bne.n	80066e8 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e038      	b.n	800675a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d106      	bne.n	8006702 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f7fa fb21 	bl	8000d44 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	3308      	adds	r3, #8
 800670a:	4619      	mov	r1, r3
 800670c:	4610      	mov	r0, r2
 800670e:	f000 f829 	bl	8006764 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	461a      	mov	r2, r3
 800671c:	68b9      	ldr	r1, [r7, #8]
 800671e:	f000 f88b 	bl	8006838 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6858      	ldr	r0, [r3, #4]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	689a      	ldr	r2, [r3, #8]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	f000 f8b6 	bl	80068a0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	6892      	ldr	r2, [r2, #8]
 800673c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	6892      	ldr	r2, [r2, #8]
 8006748:	f041 0101 	orr.w	r1, r1, #1
 800674c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
	...

08006764 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	f023 0101 	bic.w	r1, r3, #1
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	2b08      	cmp	r3, #8
 800678c:	d102      	bne.n	8006794 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800678e:	2340      	movs	r3, #64	; 0x40
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	e001      	b.n	8006798 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006794:	2300      	movs	r3, #0
 8006796:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80067a4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80067aa:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80067b0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80067b6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80067bc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80067c2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80067c8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80067ce:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80067d4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80067da:	4313      	orrs	r3, r2
 80067dc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ec:	693a      	ldr	r2, [r7, #16]
 80067ee:	4313      	orrs	r3, r2
 80067f0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80067f2:	4b10      	ldr	r3, [pc, #64]	; (8006834 <FSMC_NORSRAM_Init+0xd0>)
 80067f4:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067fc:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006804:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	43db      	mvns	r3, r3
 8006814:	ea02 0103 	and.w	r1, r2, r3
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4319      	orrs	r1, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	371c      	adds	r7, #28
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	0008fb7f 	.word	0x0008fb7f

08006838 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	431a      	orrs	r2, r3
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	431a      	orrs	r2, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	041b      	lsls	r3, r3, #16
 800686c:	431a      	orrs	r2, r3
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	3b01      	subs	r3, #1
 8006874:	051b      	lsls	r3, r3, #20
 8006876:	431a      	orrs	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	3b02      	subs	r3, #2
 800687e:	061b      	lsls	r3, r3, #24
 8006880:	431a      	orrs	r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	4313      	orrs	r3, r2
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	3201      	adds	r2, #1
 800688c:	4319      	orrs	r1, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	bc80      	pop	{r7}
 800689e:	4770      	bx	lr

080068a0 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b085      	sub	sp, #20
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068b4:	d11d      	bne.n	80068f2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068be:	4b13      	ldr	r3, [pc, #76]	; (800690c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	6811      	ldr	r1, [r2, #0]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	6852      	ldr	r2, [r2, #4]
 80068ca:	0112      	lsls	r2, r2, #4
 80068cc:	4311      	orrs	r1, r2
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	6892      	ldr	r2, [r2, #8]
 80068d2:	0212      	lsls	r2, r2, #8
 80068d4:	4311      	orrs	r1, r2
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	6992      	ldr	r2, [r2, #24]
 80068da:	4311      	orrs	r1, r2
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	68d2      	ldr	r2, [r2, #12]
 80068e0:	0412      	lsls	r2, r2, #16
 80068e2:	430a      	orrs	r2, r1
 80068e4:	ea43 0102 	orr.w	r1, r3, r2
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80068f0:	e005      	b.n	80068fe <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80068fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	cff00000 	.word	0xcff00000

08006910 <__errno>:
 8006910:	4b01      	ldr	r3, [pc, #4]	; (8006918 <__errno+0x8>)
 8006912:	6818      	ldr	r0, [r3, #0]
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	20000010 	.word	0x20000010

0800691c <__libc_init_array>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	2600      	movs	r6, #0
 8006920:	4d0c      	ldr	r5, [pc, #48]	; (8006954 <__libc_init_array+0x38>)
 8006922:	4c0d      	ldr	r4, [pc, #52]	; (8006958 <__libc_init_array+0x3c>)
 8006924:	1b64      	subs	r4, r4, r5
 8006926:	10a4      	asrs	r4, r4, #2
 8006928:	42a6      	cmp	r6, r4
 800692a:	d109      	bne.n	8006940 <__libc_init_array+0x24>
 800692c:	f002 fd0e 	bl	800934c <_init>
 8006930:	2600      	movs	r6, #0
 8006932:	4d0a      	ldr	r5, [pc, #40]	; (800695c <__libc_init_array+0x40>)
 8006934:	4c0a      	ldr	r4, [pc, #40]	; (8006960 <__libc_init_array+0x44>)
 8006936:	1b64      	subs	r4, r4, r5
 8006938:	10a4      	asrs	r4, r4, #2
 800693a:	42a6      	cmp	r6, r4
 800693c:	d105      	bne.n	800694a <__libc_init_array+0x2e>
 800693e:	bd70      	pop	{r4, r5, r6, pc}
 8006940:	f855 3b04 	ldr.w	r3, [r5], #4
 8006944:	4798      	blx	r3
 8006946:	3601      	adds	r6, #1
 8006948:	e7ee      	b.n	8006928 <__libc_init_array+0xc>
 800694a:	f855 3b04 	ldr.w	r3, [r5], #4
 800694e:	4798      	blx	r3
 8006950:	3601      	adds	r6, #1
 8006952:	e7f2      	b.n	800693a <__libc_init_array+0x1e>
 8006954:	0800af74 	.word	0x0800af74
 8006958:	0800af74 	.word	0x0800af74
 800695c:	0800af74 	.word	0x0800af74
 8006960:	0800af78 	.word	0x0800af78

08006964 <memset>:
 8006964:	4603      	mov	r3, r0
 8006966:	4402      	add	r2, r0
 8006968:	4293      	cmp	r3, r2
 800696a:	d100      	bne.n	800696e <memset+0xa>
 800696c:	4770      	bx	lr
 800696e:	f803 1b01 	strb.w	r1, [r3], #1
 8006972:	e7f9      	b.n	8006968 <memset+0x4>

08006974 <__cvt>:
 8006974:	2b00      	cmp	r3, #0
 8006976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800697a:	461f      	mov	r7, r3
 800697c:	bfbb      	ittet	lt
 800697e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006982:	461f      	movlt	r7, r3
 8006984:	2300      	movge	r3, #0
 8006986:	232d      	movlt	r3, #45	; 0x2d
 8006988:	b088      	sub	sp, #32
 800698a:	4614      	mov	r4, r2
 800698c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800698e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006990:	7013      	strb	r3, [r2, #0]
 8006992:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006994:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006998:	f023 0820 	bic.w	r8, r3, #32
 800699c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069a0:	d005      	beq.n	80069ae <__cvt+0x3a>
 80069a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069a6:	d100      	bne.n	80069aa <__cvt+0x36>
 80069a8:	3501      	adds	r5, #1
 80069aa:	2302      	movs	r3, #2
 80069ac:	e000      	b.n	80069b0 <__cvt+0x3c>
 80069ae:	2303      	movs	r3, #3
 80069b0:	aa07      	add	r2, sp, #28
 80069b2:	9204      	str	r2, [sp, #16]
 80069b4:	aa06      	add	r2, sp, #24
 80069b6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80069ba:	e9cd 3500 	strd	r3, r5, [sp]
 80069be:	4622      	mov	r2, r4
 80069c0:	463b      	mov	r3, r7
 80069c2:	f000 fcdd 	bl	8007380 <_dtoa_r>
 80069c6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80069ca:	4606      	mov	r6, r0
 80069cc:	d102      	bne.n	80069d4 <__cvt+0x60>
 80069ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069d0:	07db      	lsls	r3, r3, #31
 80069d2:	d522      	bpl.n	8006a1a <__cvt+0xa6>
 80069d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069d8:	eb06 0905 	add.w	r9, r6, r5
 80069dc:	d110      	bne.n	8006a00 <__cvt+0x8c>
 80069de:	7833      	ldrb	r3, [r6, #0]
 80069e0:	2b30      	cmp	r3, #48	; 0x30
 80069e2:	d10a      	bne.n	80069fa <__cvt+0x86>
 80069e4:	2200      	movs	r2, #0
 80069e6:	2300      	movs	r3, #0
 80069e8:	4620      	mov	r0, r4
 80069ea:	4639      	mov	r1, r7
 80069ec:	f7fa f848 	bl	8000a80 <__aeabi_dcmpeq>
 80069f0:	b918      	cbnz	r0, 80069fa <__cvt+0x86>
 80069f2:	f1c5 0501 	rsb	r5, r5, #1
 80069f6:	f8ca 5000 	str.w	r5, [sl]
 80069fa:	f8da 3000 	ldr.w	r3, [sl]
 80069fe:	4499      	add	r9, r3
 8006a00:	2200      	movs	r2, #0
 8006a02:	2300      	movs	r3, #0
 8006a04:	4620      	mov	r0, r4
 8006a06:	4639      	mov	r1, r7
 8006a08:	f7fa f83a 	bl	8000a80 <__aeabi_dcmpeq>
 8006a0c:	b108      	cbz	r0, 8006a12 <__cvt+0x9e>
 8006a0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006a12:	2230      	movs	r2, #48	; 0x30
 8006a14:	9b07      	ldr	r3, [sp, #28]
 8006a16:	454b      	cmp	r3, r9
 8006a18:	d307      	bcc.n	8006a2a <__cvt+0xb6>
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	9b07      	ldr	r3, [sp, #28]
 8006a1e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a20:	1b9b      	subs	r3, r3, r6
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	b008      	add	sp, #32
 8006a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2a:	1c59      	adds	r1, r3, #1
 8006a2c:	9107      	str	r1, [sp, #28]
 8006a2e:	701a      	strb	r2, [r3, #0]
 8006a30:	e7f0      	b.n	8006a14 <__cvt+0xa0>

08006a32 <__exponent>:
 8006a32:	4603      	mov	r3, r0
 8006a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a36:	2900      	cmp	r1, #0
 8006a38:	f803 2b02 	strb.w	r2, [r3], #2
 8006a3c:	bfb6      	itet	lt
 8006a3e:	222d      	movlt	r2, #45	; 0x2d
 8006a40:	222b      	movge	r2, #43	; 0x2b
 8006a42:	4249      	neglt	r1, r1
 8006a44:	2909      	cmp	r1, #9
 8006a46:	7042      	strb	r2, [r0, #1]
 8006a48:	dd2b      	ble.n	8006aa2 <__exponent+0x70>
 8006a4a:	f10d 0407 	add.w	r4, sp, #7
 8006a4e:	46a4      	mov	ip, r4
 8006a50:	270a      	movs	r7, #10
 8006a52:	fb91 f6f7 	sdiv	r6, r1, r7
 8006a56:	460a      	mov	r2, r1
 8006a58:	46a6      	mov	lr, r4
 8006a5a:	fb07 1516 	mls	r5, r7, r6, r1
 8006a5e:	2a63      	cmp	r2, #99	; 0x63
 8006a60:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006a64:	4631      	mov	r1, r6
 8006a66:	f104 34ff 	add.w	r4, r4, #4294967295
 8006a6a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006a6e:	dcf0      	bgt.n	8006a52 <__exponent+0x20>
 8006a70:	3130      	adds	r1, #48	; 0x30
 8006a72:	f1ae 0502 	sub.w	r5, lr, #2
 8006a76:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	1c44      	adds	r4, r0, #1
 8006a7e:	4561      	cmp	r1, ip
 8006a80:	d30a      	bcc.n	8006a98 <__exponent+0x66>
 8006a82:	f10d 0209 	add.w	r2, sp, #9
 8006a86:	eba2 020e 	sub.w	r2, r2, lr
 8006a8a:	4565      	cmp	r5, ip
 8006a8c:	bf88      	it	hi
 8006a8e:	2200      	movhi	r2, #0
 8006a90:	4413      	add	r3, r2
 8006a92:	1a18      	subs	r0, r3, r0
 8006a94:	b003      	add	sp, #12
 8006a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a9c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006aa0:	e7ed      	b.n	8006a7e <__exponent+0x4c>
 8006aa2:	2330      	movs	r3, #48	; 0x30
 8006aa4:	3130      	adds	r1, #48	; 0x30
 8006aa6:	7083      	strb	r3, [r0, #2]
 8006aa8:	70c1      	strb	r1, [r0, #3]
 8006aaa:	1d03      	adds	r3, r0, #4
 8006aac:	e7f1      	b.n	8006a92 <__exponent+0x60>
	...

08006ab0 <_printf_float>:
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	b091      	sub	sp, #68	; 0x44
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006abc:	4616      	mov	r6, r2
 8006abe:	461f      	mov	r7, r3
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	f001 fb41 	bl	8008148 <_localeconv_r>
 8006ac6:	6803      	ldr	r3, [r0, #0]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	9309      	str	r3, [sp, #36]	; 0x24
 8006acc:	f7f9 fbac 	bl	8000228 <strlen>
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	930e      	str	r3, [sp, #56]	; 0x38
 8006ad4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ad8:	900a      	str	r0, [sp, #40]	; 0x28
 8006ada:	3307      	adds	r3, #7
 8006adc:	f023 0307 	bic.w	r3, r3, #7
 8006ae0:	f103 0208 	add.w	r2, r3, #8
 8006ae4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006ae8:	f8d4 b000 	ldr.w	fp, [r4]
 8006aec:	f8c8 2000 	str.w	r2, [r8]
 8006af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006af8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006afc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006b00:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b02:	f04f 32ff 	mov.w	r2, #4294967295
 8006b06:	4640      	mov	r0, r8
 8006b08:	4b9c      	ldr	r3, [pc, #624]	; (8006d7c <_printf_float+0x2cc>)
 8006b0a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b0c:	f7f9 ffea 	bl	8000ae4 <__aeabi_dcmpun>
 8006b10:	bb70      	cbnz	r0, 8006b70 <_printf_float+0xc0>
 8006b12:	f04f 32ff 	mov.w	r2, #4294967295
 8006b16:	4640      	mov	r0, r8
 8006b18:	4b98      	ldr	r3, [pc, #608]	; (8006d7c <_printf_float+0x2cc>)
 8006b1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b1c:	f7f9 ffc4 	bl	8000aa8 <__aeabi_dcmple>
 8006b20:	bb30      	cbnz	r0, 8006b70 <_printf_float+0xc0>
 8006b22:	2200      	movs	r2, #0
 8006b24:	2300      	movs	r3, #0
 8006b26:	4640      	mov	r0, r8
 8006b28:	4651      	mov	r1, sl
 8006b2a:	f7f9 ffb3 	bl	8000a94 <__aeabi_dcmplt>
 8006b2e:	b110      	cbz	r0, 8006b36 <_printf_float+0x86>
 8006b30:	232d      	movs	r3, #45	; 0x2d
 8006b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b36:	4b92      	ldr	r3, [pc, #584]	; (8006d80 <_printf_float+0x2d0>)
 8006b38:	4892      	ldr	r0, [pc, #584]	; (8006d84 <_printf_float+0x2d4>)
 8006b3a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006b3e:	bf94      	ite	ls
 8006b40:	4698      	movls	r8, r3
 8006b42:	4680      	movhi	r8, r0
 8006b44:	2303      	movs	r3, #3
 8006b46:	f04f 0a00 	mov.w	sl, #0
 8006b4a:	6123      	str	r3, [r4, #16]
 8006b4c:	f02b 0304 	bic.w	r3, fp, #4
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	4633      	mov	r3, r6
 8006b54:	4621      	mov	r1, r4
 8006b56:	4628      	mov	r0, r5
 8006b58:	9700      	str	r7, [sp, #0]
 8006b5a:	aa0f      	add	r2, sp, #60	; 0x3c
 8006b5c:	f000 f9d4 	bl	8006f08 <_printf_common>
 8006b60:	3001      	adds	r0, #1
 8006b62:	f040 8090 	bne.w	8006c86 <_printf_float+0x1d6>
 8006b66:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6a:	b011      	add	sp, #68	; 0x44
 8006b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b70:	4642      	mov	r2, r8
 8006b72:	4653      	mov	r3, sl
 8006b74:	4640      	mov	r0, r8
 8006b76:	4651      	mov	r1, sl
 8006b78:	f7f9 ffb4 	bl	8000ae4 <__aeabi_dcmpun>
 8006b7c:	b148      	cbz	r0, 8006b92 <_printf_float+0xe2>
 8006b7e:	f1ba 0f00 	cmp.w	sl, #0
 8006b82:	bfb8      	it	lt
 8006b84:	232d      	movlt	r3, #45	; 0x2d
 8006b86:	4880      	ldr	r0, [pc, #512]	; (8006d88 <_printf_float+0x2d8>)
 8006b88:	bfb8      	it	lt
 8006b8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006b8e:	4b7f      	ldr	r3, [pc, #508]	; (8006d8c <_printf_float+0x2dc>)
 8006b90:	e7d3      	b.n	8006b3a <_printf_float+0x8a>
 8006b92:	6863      	ldr	r3, [r4, #4]
 8006b94:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	d142      	bne.n	8006c22 <_printf_float+0x172>
 8006b9c:	2306      	movs	r3, #6
 8006b9e:	6063      	str	r3, [r4, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	9206      	str	r2, [sp, #24]
 8006ba4:	aa0e      	add	r2, sp, #56	; 0x38
 8006ba6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006baa:	aa0d      	add	r2, sp, #52	; 0x34
 8006bac:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006bb0:	9203      	str	r2, [sp, #12]
 8006bb2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006bb6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006bba:	6023      	str	r3, [r4, #0]
 8006bbc:	6863      	ldr	r3, [r4, #4]
 8006bbe:	4642      	mov	r2, r8
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	4653      	mov	r3, sl
 8006bc6:	910b      	str	r1, [sp, #44]	; 0x2c
 8006bc8:	f7ff fed4 	bl	8006974 <__cvt>
 8006bcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006bce:	4680      	mov	r8, r0
 8006bd0:	2947      	cmp	r1, #71	; 0x47
 8006bd2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006bd4:	d108      	bne.n	8006be8 <_printf_float+0x138>
 8006bd6:	1cc8      	adds	r0, r1, #3
 8006bd8:	db02      	blt.n	8006be0 <_printf_float+0x130>
 8006bda:	6863      	ldr	r3, [r4, #4]
 8006bdc:	4299      	cmp	r1, r3
 8006bde:	dd40      	ble.n	8006c62 <_printf_float+0x1b2>
 8006be0:	f1a9 0902 	sub.w	r9, r9, #2
 8006be4:	fa5f f989 	uxtb.w	r9, r9
 8006be8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006bec:	d81f      	bhi.n	8006c2e <_printf_float+0x17e>
 8006bee:	464a      	mov	r2, r9
 8006bf0:	3901      	subs	r1, #1
 8006bf2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006bf6:	910d      	str	r1, [sp, #52]	; 0x34
 8006bf8:	f7ff ff1b 	bl	8006a32 <__exponent>
 8006bfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bfe:	4682      	mov	sl, r0
 8006c00:	1813      	adds	r3, r2, r0
 8006c02:	2a01      	cmp	r2, #1
 8006c04:	6123      	str	r3, [r4, #16]
 8006c06:	dc02      	bgt.n	8006c0e <_printf_float+0x15e>
 8006c08:	6822      	ldr	r2, [r4, #0]
 8006c0a:	07d2      	lsls	r2, r2, #31
 8006c0c:	d501      	bpl.n	8006c12 <_printf_float+0x162>
 8006c0e:	3301      	adds	r3, #1
 8006c10:	6123      	str	r3, [r4, #16]
 8006c12:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d09b      	beq.n	8006b52 <_printf_float+0xa2>
 8006c1a:	232d      	movs	r3, #45	; 0x2d
 8006c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c20:	e797      	b.n	8006b52 <_printf_float+0xa2>
 8006c22:	2947      	cmp	r1, #71	; 0x47
 8006c24:	d1bc      	bne.n	8006ba0 <_printf_float+0xf0>
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1ba      	bne.n	8006ba0 <_printf_float+0xf0>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e7b7      	b.n	8006b9e <_printf_float+0xee>
 8006c2e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006c32:	d118      	bne.n	8006c66 <_printf_float+0x1b6>
 8006c34:	2900      	cmp	r1, #0
 8006c36:	6863      	ldr	r3, [r4, #4]
 8006c38:	dd0b      	ble.n	8006c52 <_printf_float+0x1a2>
 8006c3a:	6121      	str	r1, [r4, #16]
 8006c3c:	b913      	cbnz	r3, 8006c44 <_printf_float+0x194>
 8006c3e:	6822      	ldr	r2, [r4, #0]
 8006c40:	07d0      	lsls	r0, r2, #31
 8006c42:	d502      	bpl.n	8006c4a <_printf_float+0x19a>
 8006c44:	3301      	adds	r3, #1
 8006c46:	440b      	add	r3, r1
 8006c48:	6123      	str	r3, [r4, #16]
 8006c4a:	f04f 0a00 	mov.w	sl, #0
 8006c4e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006c50:	e7df      	b.n	8006c12 <_printf_float+0x162>
 8006c52:	b913      	cbnz	r3, 8006c5a <_printf_float+0x1aa>
 8006c54:	6822      	ldr	r2, [r4, #0]
 8006c56:	07d2      	lsls	r2, r2, #31
 8006c58:	d501      	bpl.n	8006c5e <_printf_float+0x1ae>
 8006c5a:	3302      	adds	r3, #2
 8006c5c:	e7f4      	b.n	8006c48 <_printf_float+0x198>
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e7f2      	b.n	8006c48 <_printf_float+0x198>
 8006c62:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c68:	4299      	cmp	r1, r3
 8006c6a:	db05      	blt.n	8006c78 <_printf_float+0x1c8>
 8006c6c:	6823      	ldr	r3, [r4, #0]
 8006c6e:	6121      	str	r1, [r4, #16]
 8006c70:	07d8      	lsls	r0, r3, #31
 8006c72:	d5ea      	bpl.n	8006c4a <_printf_float+0x19a>
 8006c74:	1c4b      	adds	r3, r1, #1
 8006c76:	e7e7      	b.n	8006c48 <_printf_float+0x198>
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	bfcc      	ite	gt
 8006c7c:	2201      	movgt	r2, #1
 8006c7e:	f1c1 0202 	rsble	r2, r1, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	e7e0      	b.n	8006c48 <_printf_float+0x198>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	055a      	lsls	r2, r3, #21
 8006c8a:	d407      	bmi.n	8006c9c <_printf_float+0x1ec>
 8006c8c:	6923      	ldr	r3, [r4, #16]
 8006c8e:	4642      	mov	r2, r8
 8006c90:	4631      	mov	r1, r6
 8006c92:	4628      	mov	r0, r5
 8006c94:	47b8      	blx	r7
 8006c96:	3001      	adds	r0, #1
 8006c98:	d12b      	bne.n	8006cf2 <_printf_float+0x242>
 8006c9a:	e764      	b.n	8006b66 <_printf_float+0xb6>
 8006c9c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006ca0:	f240 80dd 	bls.w	8006e5e <_printf_float+0x3ae>
 8006ca4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2300      	movs	r3, #0
 8006cac:	f7f9 fee8 	bl	8000a80 <__aeabi_dcmpeq>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d033      	beq.n	8006d1c <_printf_float+0x26c>
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	4a35      	ldr	r2, [pc, #212]	; (8006d90 <_printf_float+0x2e0>)
 8006cbc:	47b8      	blx	r7
 8006cbe:	3001      	adds	r0, #1
 8006cc0:	f43f af51 	beq.w	8006b66 <_printf_float+0xb6>
 8006cc4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	db02      	blt.n	8006cd2 <_printf_float+0x222>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	07d8      	lsls	r0, r3, #31
 8006cd0:	d50f      	bpl.n	8006cf2 <_printf_float+0x242>
 8006cd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	f43f af42 	beq.w	8006b66 <_printf_float+0xb6>
 8006ce2:	f04f 0800 	mov.w	r8, #0
 8006ce6:	f104 091a 	add.w	r9, r4, #26
 8006cea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cec:	3b01      	subs	r3, #1
 8006cee:	4543      	cmp	r3, r8
 8006cf0:	dc09      	bgt.n	8006d06 <_printf_float+0x256>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	079b      	lsls	r3, r3, #30
 8006cf6:	f100 8102 	bmi.w	8006efe <_printf_float+0x44e>
 8006cfa:	68e0      	ldr	r0, [r4, #12]
 8006cfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cfe:	4298      	cmp	r0, r3
 8006d00:	bfb8      	it	lt
 8006d02:	4618      	movlt	r0, r3
 8006d04:	e731      	b.n	8006b6a <_printf_float+0xba>
 8006d06:	2301      	movs	r3, #1
 8006d08:	464a      	mov	r2, r9
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	f43f af28 	beq.w	8006b66 <_printf_float+0xb6>
 8006d16:	f108 0801 	add.w	r8, r8, #1
 8006d1a:	e7e6      	b.n	8006cea <_printf_float+0x23a>
 8006d1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	dc38      	bgt.n	8006d94 <_printf_float+0x2e4>
 8006d22:	2301      	movs	r3, #1
 8006d24:	4631      	mov	r1, r6
 8006d26:	4628      	mov	r0, r5
 8006d28:	4a19      	ldr	r2, [pc, #100]	; (8006d90 <_printf_float+0x2e0>)
 8006d2a:	47b8      	blx	r7
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	f43f af1a 	beq.w	8006b66 <_printf_float+0xb6>
 8006d32:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d36:	4313      	orrs	r3, r2
 8006d38:	d102      	bne.n	8006d40 <_printf_float+0x290>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	07d9      	lsls	r1, r3, #31
 8006d3e:	d5d8      	bpl.n	8006cf2 <_printf_float+0x242>
 8006d40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d44:	4631      	mov	r1, r6
 8006d46:	4628      	mov	r0, r5
 8006d48:	47b8      	blx	r7
 8006d4a:	3001      	adds	r0, #1
 8006d4c:	f43f af0b 	beq.w	8006b66 <_printf_float+0xb6>
 8006d50:	f04f 0900 	mov.w	r9, #0
 8006d54:	f104 0a1a 	add.w	sl, r4, #26
 8006d58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d5a:	425b      	negs	r3, r3
 8006d5c:	454b      	cmp	r3, r9
 8006d5e:	dc01      	bgt.n	8006d64 <_printf_float+0x2b4>
 8006d60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d62:	e794      	b.n	8006c8e <_printf_float+0x1de>
 8006d64:	2301      	movs	r3, #1
 8006d66:	4652      	mov	r2, sl
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b8      	blx	r7
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f43f aef9 	beq.w	8006b66 <_printf_float+0xb6>
 8006d74:	f109 0901 	add.w	r9, r9, #1
 8006d78:	e7ee      	b.n	8006d58 <_printf_float+0x2a8>
 8006d7a:	bf00      	nop
 8006d7c:	7fefffff 	.word	0x7fefffff
 8006d80:	0800ab94 	.word	0x0800ab94
 8006d84:	0800ab98 	.word	0x0800ab98
 8006d88:	0800aba0 	.word	0x0800aba0
 8006d8c:	0800ab9c 	.word	0x0800ab9c
 8006d90:	0800aba4 	.word	0x0800aba4
 8006d94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	bfa8      	it	ge
 8006d9c:	461a      	movge	r2, r3
 8006d9e:	2a00      	cmp	r2, #0
 8006da0:	4691      	mov	r9, r2
 8006da2:	dc37      	bgt.n	8006e14 <_printf_float+0x364>
 8006da4:	f04f 0b00 	mov.w	fp, #0
 8006da8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dac:	f104 021a 	add.w	r2, r4, #26
 8006db0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006db4:	ebaa 0309 	sub.w	r3, sl, r9
 8006db8:	455b      	cmp	r3, fp
 8006dba:	dc33      	bgt.n	8006e24 <_printf_float+0x374>
 8006dbc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	db3b      	blt.n	8006e3c <_printf_float+0x38c>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	07da      	lsls	r2, r3, #31
 8006dc8:	d438      	bmi.n	8006e3c <_printf_float+0x38c>
 8006dca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dcc:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006dce:	eba2 030a 	sub.w	r3, r2, sl
 8006dd2:	eba2 0901 	sub.w	r9, r2, r1
 8006dd6:	4599      	cmp	r9, r3
 8006dd8:	bfa8      	it	ge
 8006dda:	4699      	movge	r9, r3
 8006ddc:	f1b9 0f00 	cmp.w	r9, #0
 8006de0:	dc34      	bgt.n	8006e4c <_printf_float+0x39c>
 8006de2:	f04f 0800 	mov.w	r8, #0
 8006de6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dea:	f104 0a1a 	add.w	sl, r4, #26
 8006dee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006df2:	1a9b      	subs	r3, r3, r2
 8006df4:	eba3 0309 	sub.w	r3, r3, r9
 8006df8:	4543      	cmp	r3, r8
 8006dfa:	f77f af7a 	ble.w	8006cf2 <_printf_float+0x242>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4652      	mov	r2, sl
 8006e02:	4631      	mov	r1, r6
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b8      	blx	r7
 8006e08:	3001      	adds	r0, #1
 8006e0a:	f43f aeac 	beq.w	8006b66 <_printf_float+0xb6>
 8006e0e:	f108 0801 	add.w	r8, r8, #1
 8006e12:	e7ec      	b.n	8006dee <_printf_float+0x33e>
 8006e14:	4613      	mov	r3, r2
 8006e16:	4631      	mov	r1, r6
 8006e18:	4642      	mov	r2, r8
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	d1c0      	bne.n	8006da4 <_printf_float+0x2f4>
 8006e22:	e6a0      	b.n	8006b66 <_printf_float+0xb6>
 8006e24:	2301      	movs	r3, #1
 8006e26:	4631      	mov	r1, r6
 8006e28:	4628      	mov	r0, r5
 8006e2a:	920b      	str	r2, [sp, #44]	; 0x2c
 8006e2c:	47b8      	blx	r7
 8006e2e:	3001      	adds	r0, #1
 8006e30:	f43f ae99 	beq.w	8006b66 <_printf_float+0xb6>
 8006e34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e36:	f10b 0b01 	add.w	fp, fp, #1
 8006e3a:	e7b9      	b.n	8006db0 <_printf_float+0x300>
 8006e3c:	4631      	mov	r1, r6
 8006e3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b8      	blx	r7
 8006e46:	3001      	adds	r0, #1
 8006e48:	d1bf      	bne.n	8006dca <_printf_float+0x31a>
 8006e4a:	e68c      	b.n	8006b66 <_printf_float+0xb6>
 8006e4c:	464b      	mov	r3, r9
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	eb08 020a 	add.w	r2, r8, sl
 8006e56:	47b8      	blx	r7
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d1c2      	bne.n	8006de2 <_printf_float+0x332>
 8006e5c:	e683      	b.n	8006b66 <_printf_float+0xb6>
 8006e5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e60:	2a01      	cmp	r2, #1
 8006e62:	dc01      	bgt.n	8006e68 <_printf_float+0x3b8>
 8006e64:	07db      	lsls	r3, r3, #31
 8006e66:	d537      	bpl.n	8006ed8 <_printf_float+0x428>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	4642      	mov	r2, r8
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4628      	mov	r0, r5
 8006e70:	47b8      	blx	r7
 8006e72:	3001      	adds	r0, #1
 8006e74:	f43f ae77 	beq.w	8006b66 <_printf_float+0xb6>
 8006e78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4628      	mov	r0, r5
 8006e80:	47b8      	blx	r7
 8006e82:	3001      	adds	r0, #1
 8006e84:	f43f ae6f 	beq.w	8006b66 <_printf_float+0xb6>
 8006e88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f7f9 fdf6 	bl	8000a80 <__aeabi_dcmpeq>
 8006e94:	b9d8      	cbnz	r0, 8006ece <_printf_float+0x41e>
 8006e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e98:	f108 0201 	add.w	r2, r8, #1
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	4631      	mov	r1, r6
 8006ea0:	4628      	mov	r0, r5
 8006ea2:	47b8      	blx	r7
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d10e      	bne.n	8006ec6 <_printf_float+0x416>
 8006ea8:	e65d      	b.n	8006b66 <_printf_float+0xb6>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	464a      	mov	r2, r9
 8006eae:	4631      	mov	r1, r6
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	47b8      	blx	r7
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	f43f ae56 	beq.w	8006b66 <_printf_float+0xb6>
 8006eba:	f108 0801 	add.w	r8, r8, #1
 8006ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	4543      	cmp	r3, r8
 8006ec4:	dcf1      	bgt.n	8006eaa <_printf_float+0x3fa>
 8006ec6:	4653      	mov	r3, sl
 8006ec8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ecc:	e6e0      	b.n	8006c90 <_printf_float+0x1e0>
 8006ece:	f04f 0800 	mov.w	r8, #0
 8006ed2:	f104 091a 	add.w	r9, r4, #26
 8006ed6:	e7f2      	b.n	8006ebe <_printf_float+0x40e>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	4642      	mov	r2, r8
 8006edc:	e7df      	b.n	8006e9e <_printf_float+0x3ee>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	464a      	mov	r2, r9
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	f43f ae3c 	beq.w	8006b66 <_printf_float+0xb6>
 8006eee:	f108 0801 	add.w	r8, r8, #1
 8006ef2:	68e3      	ldr	r3, [r4, #12]
 8006ef4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ef6:	1a5b      	subs	r3, r3, r1
 8006ef8:	4543      	cmp	r3, r8
 8006efa:	dcf0      	bgt.n	8006ede <_printf_float+0x42e>
 8006efc:	e6fd      	b.n	8006cfa <_printf_float+0x24a>
 8006efe:	f04f 0800 	mov.w	r8, #0
 8006f02:	f104 0919 	add.w	r9, r4, #25
 8006f06:	e7f4      	b.n	8006ef2 <_printf_float+0x442>

08006f08 <_printf_common>:
 8006f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f0c:	4616      	mov	r6, r2
 8006f0e:	4699      	mov	r9, r3
 8006f10:	688a      	ldr	r2, [r1, #8]
 8006f12:	690b      	ldr	r3, [r1, #16]
 8006f14:	4607      	mov	r7, r0
 8006f16:	4293      	cmp	r3, r2
 8006f18:	bfb8      	it	lt
 8006f1a:	4613      	movlt	r3, r2
 8006f1c:	6033      	str	r3, [r6, #0]
 8006f1e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f22:	460c      	mov	r4, r1
 8006f24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f28:	b10a      	cbz	r2, 8006f2e <_printf_common+0x26>
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	6033      	str	r3, [r6, #0]
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	0699      	lsls	r1, r3, #26
 8006f32:	bf42      	ittt	mi
 8006f34:	6833      	ldrmi	r3, [r6, #0]
 8006f36:	3302      	addmi	r3, #2
 8006f38:	6033      	strmi	r3, [r6, #0]
 8006f3a:	6825      	ldr	r5, [r4, #0]
 8006f3c:	f015 0506 	ands.w	r5, r5, #6
 8006f40:	d106      	bne.n	8006f50 <_printf_common+0x48>
 8006f42:	f104 0a19 	add.w	sl, r4, #25
 8006f46:	68e3      	ldr	r3, [r4, #12]
 8006f48:	6832      	ldr	r2, [r6, #0]
 8006f4a:	1a9b      	subs	r3, r3, r2
 8006f4c:	42ab      	cmp	r3, r5
 8006f4e:	dc28      	bgt.n	8006fa2 <_printf_common+0x9a>
 8006f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006f54:	1e13      	subs	r3, r2, #0
 8006f56:	6822      	ldr	r2, [r4, #0]
 8006f58:	bf18      	it	ne
 8006f5a:	2301      	movne	r3, #1
 8006f5c:	0692      	lsls	r2, r2, #26
 8006f5e:	d42d      	bmi.n	8006fbc <_printf_common+0xb4>
 8006f60:	4649      	mov	r1, r9
 8006f62:	4638      	mov	r0, r7
 8006f64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006f68:	47c0      	blx	r8
 8006f6a:	3001      	adds	r0, #1
 8006f6c:	d020      	beq.n	8006fb0 <_printf_common+0xa8>
 8006f6e:	6823      	ldr	r3, [r4, #0]
 8006f70:	68e5      	ldr	r5, [r4, #12]
 8006f72:	f003 0306 	and.w	r3, r3, #6
 8006f76:	2b04      	cmp	r3, #4
 8006f78:	bf18      	it	ne
 8006f7a:	2500      	movne	r5, #0
 8006f7c:	6832      	ldr	r2, [r6, #0]
 8006f7e:	f04f 0600 	mov.w	r6, #0
 8006f82:	68a3      	ldr	r3, [r4, #8]
 8006f84:	bf08      	it	eq
 8006f86:	1aad      	subeq	r5, r5, r2
 8006f88:	6922      	ldr	r2, [r4, #16]
 8006f8a:	bf08      	it	eq
 8006f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f90:	4293      	cmp	r3, r2
 8006f92:	bfc4      	itt	gt
 8006f94:	1a9b      	subgt	r3, r3, r2
 8006f96:	18ed      	addgt	r5, r5, r3
 8006f98:	341a      	adds	r4, #26
 8006f9a:	42b5      	cmp	r5, r6
 8006f9c:	d11a      	bne.n	8006fd4 <_printf_common+0xcc>
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	e008      	b.n	8006fb4 <_printf_common+0xac>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	4652      	mov	r2, sl
 8006fa6:	4649      	mov	r1, r9
 8006fa8:	4638      	mov	r0, r7
 8006faa:	47c0      	blx	r8
 8006fac:	3001      	adds	r0, #1
 8006fae:	d103      	bne.n	8006fb8 <_printf_common+0xb0>
 8006fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fb8:	3501      	adds	r5, #1
 8006fba:	e7c4      	b.n	8006f46 <_printf_common+0x3e>
 8006fbc:	2030      	movs	r0, #48	; 0x30
 8006fbe:	18e1      	adds	r1, r4, r3
 8006fc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006fca:	4422      	add	r2, r4
 8006fcc:	3302      	adds	r3, #2
 8006fce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006fd2:	e7c5      	b.n	8006f60 <_printf_common+0x58>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	4649      	mov	r1, r9
 8006fda:	4638      	mov	r0, r7
 8006fdc:	47c0      	blx	r8
 8006fde:	3001      	adds	r0, #1
 8006fe0:	d0e6      	beq.n	8006fb0 <_printf_common+0xa8>
 8006fe2:	3601      	adds	r6, #1
 8006fe4:	e7d9      	b.n	8006f9a <_printf_common+0x92>
	...

08006fe8 <_printf_i>:
 8006fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fec:	460c      	mov	r4, r1
 8006fee:	7e27      	ldrb	r7, [r4, #24]
 8006ff0:	4691      	mov	r9, r2
 8006ff2:	2f78      	cmp	r7, #120	; 0x78
 8006ff4:	4680      	mov	r8, r0
 8006ff6:	469a      	mov	sl, r3
 8006ff8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ffa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ffe:	d807      	bhi.n	8007010 <_printf_i+0x28>
 8007000:	2f62      	cmp	r7, #98	; 0x62
 8007002:	d80a      	bhi.n	800701a <_printf_i+0x32>
 8007004:	2f00      	cmp	r7, #0
 8007006:	f000 80d9 	beq.w	80071bc <_printf_i+0x1d4>
 800700a:	2f58      	cmp	r7, #88	; 0x58
 800700c:	f000 80a4 	beq.w	8007158 <_printf_i+0x170>
 8007010:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007014:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007018:	e03a      	b.n	8007090 <_printf_i+0xa8>
 800701a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800701e:	2b15      	cmp	r3, #21
 8007020:	d8f6      	bhi.n	8007010 <_printf_i+0x28>
 8007022:	a001      	add	r0, pc, #4	; (adr r0, 8007028 <_printf_i+0x40>)
 8007024:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007028:	08007081 	.word	0x08007081
 800702c:	08007095 	.word	0x08007095
 8007030:	08007011 	.word	0x08007011
 8007034:	08007011 	.word	0x08007011
 8007038:	08007011 	.word	0x08007011
 800703c:	08007011 	.word	0x08007011
 8007040:	08007095 	.word	0x08007095
 8007044:	08007011 	.word	0x08007011
 8007048:	08007011 	.word	0x08007011
 800704c:	08007011 	.word	0x08007011
 8007050:	08007011 	.word	0x08007011
 8007054:	080071a3 	.word	0x080071a3
 8007058:	080070c5 	.word	0x080070c5
 800705c:	08007185 	.word	0x08007185
 8007060:	08007011 	.word	0x08007011
 8007064:	08007011 	.word	0x08007011
 8007068:	080071c5 	.word	0x080071c5
 800706c:	08007011 	.word	0x08007011
 8007070:	080070c5 	.word	0x080070c5
 8007074:	08007011 	.word	0x08007011
 8007078:	08007011 	.word	0x08007011
 800707c:	0800718d 	.word	0x0800718d
 8007080:	680b      	ldr	r3, [r1, #0]
 8007082:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007086:	1d1a      	adds	r2, r3, #4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	600a      	str	r2, [r1, #0]
 800708c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007090:	2301      	movs	r3, #1
 8007092:	e0a4      	b.n	80071de <_printf_i+0x1f6>
 8007094:	6825      	ldr	r5, [r4, #0]
 8007096:	6808      	ldr	r0, [r1, #0]
 8007098:	062e      	lsls	r6, r5, #24
 800709a:	f100 0304 	add.w	r3, r0, #4
 800709e:	d50a      	bpl.n	80070b6 <_printf_i+0xce>
 80070a0:	6805      	ldr	r5, [r0, #0]
 80070a2:	600b      	str	r3, [r1, #0]
 80070a4:	2d00      	cmp	r5, #0
 80070a6:	da03      	bge.n	80070b0 <_printf_i+0xc8>
 80070a8:	232d      	movs	r3, #45	; 0x2d
 80070aa:	426d      	negs	r5, r5
 80070ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070b0:	230a      	movs	r3, #10
 80070b2:	485e      	ldr	r0, [pc, #376]	; (800722c <_printf_i+0x244>)
 80070b4:	e019      	b.n	80070ea <_printf_i+0x102>
 80070b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80070ba:	6805      	ldr	r5, [r0, #0]
 80070bc:	600b      	str	r3, [r1, #0]
 80070be:	bf18      	it	ne
 80070c0:	b22d      	sxthne	r5, r5
 80070c2:	e7ef      	b.n	80070a4 <_printf_i+0xbc>
 80070c4:	680b      	ldr	r3, [r1, #0]
 80070c6:	6825      	ldr	r5, [r4, #0]
 80070c8:	1d18      	adds	r0, r3, #4
 80070ca:	6008      	str	r0, [r1, #0]
 80070cc:	0628      	lsls	r0, r5, #24
 80070ce:	d501      	bpl.n	80070d4 <_printf_i+0xec>
 80070d0:	681d      	ldr	r5, [r3, #0]
 80070d2:	e002      	b.n	80070da <_printf_i+0xf2>
 80070d4:	0669      	lsls	r1, r5, #25
 80070d6:	d5fb      	bpl.n	80070d0 <_printf_i+0xe8>
 80070d8:	881d      	ldrh	r5, [r3, #0]
 80070da:	2f6f      	cmp	r7, #111	; 0x6f
 80070dc:	bf0c      	ite	eq
 80070de:	2308      	moveq	r3, #8
 80070e0:	230a      	movne	r3, #10
 80070e2:	4852      	ldr	r0, [pc, #328]	; (800722c <_printf_i+0x244>)
 80070e4:	2100      	movs	r1, #0
 80070e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80070ea:	6866      	ldr	r6, [r4, #4]
 80070ec:	2e00      	cmp	r6, #0
 80070ee:	bfa8      	it	ge
 80070f0:	6821      	ldrge	r1, [r4, #0]
 80070f2:	60a6      	str	r6, [r4, #8]
 80070f4:	bfa4      	itt	ge
 80070f6:	f021 0104 	bicge.w	r1, r1, #4
 80070fa:	6021      	strge	r1, [r4, #0]
 80070fc:	b90d      	cbnz	r5, 8007102 <_printf_i+0x11a>
 80070fe:	2e00      	cmp	r6, #0
 8007100:	d04d      	beq.n	800719e <_printf_i+0x1b6>
 8007102:	4616      	mov	r6, r2
 8007104:	fbb5 f1f3 	udiv	r1, r5, r3
 8007108:	fb03 5711 	mls	r7, r3, r1, r5
 800710c:	5dc7      	ldrb	r7, [r0, r7]
 800710e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007112:	462f      	mov	r7, r5
 8007114:	42bb      	cmp	r3, r7
 8007116:	460d      	mov	r5, r1
 8007118:	d9f4      	bls.n	8007104 <_printf_i+0x11c>
 800711a:	2b08      	cmp	r3, #8
 800711c:	d10b      	bne.n	8007136 <_printf_i+0x14e>
 800711e:	6823      	ldr	r3, [r4, #0]
 8007120:	07df      	lsls	r7, r3, #31
 8007122:	d508      	bpl.n	8007136 <_printf_i+0x14e>
 8007124:	6923      	ldr	r3, [r4, #16]
 8007126:	6861      	ldr	r1, [r4, #4]
 8007128:	4299      	cmp	r1, r3
 800712a:	bfde      	ittt	le
 800712c:	2330      	movle	r3, #48	; 0x30
 800712e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007132:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007136:	1b92      	subs	r2, r2, r6
 8007138:	6122      	str	r2, [r4, #16]
 800713a:	464b      	mov	r3, r9
 800713c:	4621      	mov	r1, r4
 800713e:	4640      	mov	r0, r8
 8007140:	f8cd a000 	str.w	sl, [sp]
 8007144:	aa03      	add	r2, sp, #12
 8007146:	f7ff fedf 	bl	8006f08 <_printf_common>
 800714a:	3001      	adds	r0, #1
 800714c:	d14c      	bne.n	80071e8 <_printf_i+0x200>
 800714e:	f04f 30ff 	mov.w	r0, #4294967295
 8007152:	b004      	add	sp, #16
 8007154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007158:	4834      	ldr	r0, [pc, #208]	; (800722c <_printf_i+0x244>)
 800715a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800715e:	680e      	ldr	r6, [r1, #0]
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	f856 5b04 	ldr.w	r5, [r6], #4
 8007166:	061f      	lsls	r7, r3, #24
 8007168:	600e      	str	r6, [r1, #0]
 800716a:	d514      	bpl.n	8007196 <_printf_i+0x1ae>
 800716c:	07d9      	lsls	r1, r3, #31
 800716e:	bf44      	itt	mi
 8007170:	f043 0320 	orrmi.w	r3, r3, #32
 8007174:	6023      	strmi	r3, [r4, #0]
 8007176:	b91d      	cbnz	r5, 8007180 <_printf_i+0x198>
 8007178:	6823      	ldr	r3, [r4, #0]
 800717a:	f023 0320 	bic.w	r3, r3, #32
 800717e:	6023      	str	r3, [r4, #0]
 8007180:	2310      	movs	r3, #16
 8007182:	e7af      	b.n	80070e4 <_printf_i+0xfc>
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	f043 0320 	orr.w	r3, r3, #32
 800718a:	6023      	str	r3, [r4, #0]
 800718c:	2378      	movs	r3, #120	; 0x78
 800718e:	4828      	ldr	r0, [pc, #160]	; (8007230 <_printf_i+0x248>)
 8007190:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007194:	e7e3      	b.n	800715e <_printf_i+0x176>
 8007196:	065e      	lsls	r6, r3, #25
 8007198:	bf48      	it	mi
 800719a:	b2ad      	uxthmi	r5, r5
 800719c:	e7e6      	b.n	800716c <_printf_i+0x184>
 800719e:	4616      	mov	r6, r2
 80071a0:	e7bb      	b.n	800711a <_printf_i+0x132>
 80071a2:	680b      	ldr	r3, [r1, #0]
 80071a4:	6826      	ldr	r6, [r4, #0]
 80071a6:	1d1d      	adds	r5, r3, #4
 80071a8:	6960      	ldr	r0, [r4, #20]
 80071aa:	600d      	str	r5, [r1, #0]
 80071ac:	0635      	lsls	r5, r6, #24
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	d501      	bpl.n	80071b6 <_printf_i+0x1ce>
 80071b2:	6018      	str	r0, [r3, #0]
 80071b4:	e002      	b.n	80071bc <_printf_i+0x1d4>
 80071b6:	0671      	lsls	r1, r6, #25
 80071b8:	d5fb      	bpl.n	80071b2 <_printf_i+0x1ca>
 80071ba:	8018      	strh	r0, [r3, #0]
 80071bc:	2300      	movs	r3, #0
 80071be:	4616      	mov	r6, r2
 80071c0:	6123      	str	r3, [r4, #16]
 80071c2:	e7ba      	b.n	800713a <_printf_i+0x152>
 80071c4:	680b      	ldr	r3, [r1, #0]
 80071c6:	1d1a      	adds	r2, r3, #4
 80071c8:	600a      	str	r2, [r1, #0]
 80071ca:	681e      	ldr	r6, [r3, #0]
 80071cc:	2100      	movs	r1, #0
 80071ce:	4630      	mov	r0, r6
 80071d0:	6862      	ldr	r2, [r4, #4]
 80071d2:	f000 ffc9 	bl	8008168 <memchr>
 80071d6:	b108      	cbz	r0, 80071dc <_printf_i+0x1f4>
 80071d8:	1b80      	subs	r0, r0, r6
 80071da:	6060      	str	r0, [r4, #4]
 80071dc:	6863      	ldr	r3, [r4, #4]
 80071de:	6123      	str	r3, [r4, #16]
 80071e0:	2300      	movs	r3, #0
 80071e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071e6:	e7a8      	b.n	800713a <_printf_i+0x152>
 80071e8:	4632      	mov	r2, r6
 80071ea:	4649      	mov	r1, r9
 80071ec:	4640      	mov	r0, r8
 80071ee:	6923      	ldr	r3, [r4, #16]
 80071f0:	47d0      	blx	sl
 80071f2:	3001      	adds	r0, #1
 80071f4:	d0ab      	beq.n	800714e <_printf_i+0x166>
 80071f6:	6823      	ldr	r3, [r4, #0]
 80071f8:	079b      	lsls	r3, r3, #30
 80071fa:	d413      	bmi.n	8007224 <_printf_i+0x23c>
 80071fc:	68e0      	ldr	r0, [r4, #12]
 80071fe:	9b03      	ldr	r3, [sp, #12]
 8007200:	4298      	cmp	r0, r3
 8007202:	bfb8      	it	lt
 8007204:	4618      	movlt	r0, r3
 8007206:	e7a4      	b.n	8007152 <_printf_i+0x16a>
 8007208:	2301      	movs	r3, #1
 800720a:	4632      	mov	r2, r6
 800720c:	4649      	mov	r1, r9
 800720e:	4640      	mov	r0, r8
 8007210:	47d0      	blx	sl
 8007212:	3001      	adds	r0, #1
 8007214:	d09b      	beq.n	800714e <_printf_i+0x166>
 8007216:	3501      	adds	r5, #1
 8007218:	68e3      	ldr	r3, [r4, #12]
 800721a:	9903      	ldr	r1, [sp, #12]
 800721c:	1a5b      	subs	r3, r3, r1
 800721e:	42ab      	cmp	r3, r5
 8007220:	dcf2      	bgt.n	8007208 <_printf_i+0x220>
 8007222:	e7eb      	b.n	80071fc <_printf_i+0x214>
 8007224:	2500      	movs	r5, #0
 8007226:	f104 0619 	add.w	r6, r4, #25
 800722a:	e7f5      	b.n	8007218 <_printf_i+0x230>
 800722c:	0800aba6 	.word	0x0800aba6
 8007230:	0800abb7 	.word	0x0800abb7

08007234 <iprintf>:
 8007234:	b40f      	push	{r0, r1, r2, r3}
 8007236:	4b0a      	ldr	r3, [pc, #40]	; (8007260 <iprintf+0x2c>)
 8007238:	b513      	push	{r0, r1, r4, lr}
 800723a:	681c      	ldr	r4, [r3, #0]
 800723c:	b124      	cbz	r4, 8007248 <iprintf+0x14>
 800723e:	69a3      	ldr	r3, [r4, #24]
 8007240:	b913      	cbnz	r3, 8007248 <iprintf+0x14>
 8007242:	4620      	mov	r0, r4
 8007244:	f000 fee2 	bl	800800c <__sinit>
 8007248:	ab05      	add	r3, sp, #20
 800724a:	4620      	mov	r0, r4
 800724c:	9a04      	ldr	r2, [sp, #16]
 800724e:	68a1      	ldr	r1, [r4, #8]
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	f001 fc03 	bl	8008a5c <_vfiprintf_r>
 8007256:	b002      	add	sp, #8
 8007258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800725c:	b004      	add	sp, #16
 800725e:	4770      	bx	lr
 8007260:	20000010 	.word	0x20000010

08007264 <quorem>:
 8007264:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007268:	6903      	ldr	r3, [r0, #16]
 800726a:	690c      	ldr	r4, [r1, #16]
 800726c:	4607      	mov	r7, r0
 800726e:	42a3      	cmp	r3, r4
 8007270:	f2c0 8083 	blt.w	800737a <quorem+0x116>
 8007274:	3c01      	subs	r4, #1
 8007276:	f100 0514 	add.w	r5, r0, #20
 800727a:	f101 0814 	add.w	r8, r1, #20
 800727e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007282:	9301      	str	r3, [sp, #4]
 8007284:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007288:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800728c:	3301      	adds	r3, #1
 800728e:	429a      	cmp	r2, r3
 8007290:	fbb2 f6f3 	udiv	r6, r2, r3
 8007294:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007298:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800729c:	d332      	bcc.n	8007304 <quorem+0xa0>
 800729e:	f04f 0e00 	mov.w	lr, #0
 80072a2:	4640      	mov	r0, r8
 80072a4:	46ac      	mov	ip, r5
 80072a6:	46f2      	mov	sl, lr
 80072a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80072ac:	b293      	uxth	r3, r2
 80072ae:	fb06 e303 	mla	r3, r6, r3, lr
 80072b2:	0c12      	lsrs	r2, r2, #16
 80072b4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80072b8:	fb06 e202 	mla	r2, r6, r2, lr
 80072bc:	b29b      	uxth	r3, r3
 80072be:	ebaa 0303 	sub.w	r3, sl, r3
 80072c2:	f8dc a000 	ldr.w	sl, [ip]
 80072c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80072ca:	fa1f fa8a 	uxth.w	sl, sl
 80072ce:	4453      	add	r3, sl
 80072d0:	fa1f fa82 	uxth.w	sl, r2
 80072d4:	f8dc 2000 	ldr.w	r2, [ip]
 80072d8:	4581      	cmp	r9, r0
 80072da:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80072de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072e8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80072ec:	f84c 3b04 	str.w	r3, [ip], #4
 80072f0:	d2da      	bcs.n	80072a8 <quorem+0x44>
 80072f2:	f855 300b 	ldr.w	r3, [r5, fp]
 80072f6:	b92b      	cbnz	r3, 8007304 <quorem+0xa0>
 80072f8:	9b01      	ldr	r3, [sp, #4]
 80072fa:	3b04      	subs	r3, #4
 80072fc:	429d      	cmp	r5, r3
 80072fe:	461a      	mov	r2, r3
 8007300:	d32f      	bcc.n	8007362 <quorem+0xfe>
 8007302:	613c      	str	r4, [r7, #16]
 8007304:	4638      	mov	r0, r7
 8007306:	f001 f9c5 	bl	8008694 <__mcmp>
 800730a:	2800      	cmp	r0, #0
 800730c:	db25      	blt.n	800735a <quorem+0xf6>
 800730e:	4628      	mov	r0, r5
 8007310:	f04f 0c00 	mov.w	ip, #0
 8007314:	3601      	adds	r6, #1
 8007316:	f858 1b04 	ldr.w	r1, [r8], #4
 800731a:	f8d0 e000 	ldr.w	lr, [r0]
 800731e:	b28b      	uxth	r3, r1
 8007320:	ebac 0303 	sub.w	r3, ip, r3
 8007324:	fa1f f28e 	uxth.w	r2, lr
 8007328:	4413      	add	r3, r2
 800732a:	0c0a      	lsrs	r2, r1, #16
 800732c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007334:	b29b      	uxth	r3, r3
 8007336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800733a:	45c1      	cmp	r9, r8
 800733c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007340:	f840 3b04 	str.w	r3, [r0], #4
 8007344:	d2e7      	bcs.n	8007316 <quorem+0xb2>
 8007346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800734a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800734e:	b922      	cbnz	r2, 800735a <quorem+0xf6>
 8007350:	3b04      	subs	r3, #4
 8007352:	429d      	cmp	r5, r3
 8007354:	461a      	mov	r2, r3
 8007356:	d30a      	bcc.n	800736e <quorem+0x10a>
 8007358:	613c      	str	r4, [r7, #16]
 800735a:	4630      	mov	r0, r6
 800735c:	b003      	add	sp, #12
 800735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007362:	6812      	ldr	r2, [r2, #0]
 8007364:	3b04      	subs	r3, #4
 8007366:	2a00      	cmp	r2, #0
 8007368:	d1cb      	bne.n	8007302 <quorem+0x9e>
 800736a:	3c01      	subs	r4, #1
 800736c:	e7c6      	b.n	80072fc <quorem+0x98>
 800736e:	6812      	ldr	r2, [r2, #0]
 8007370:	3b04      	subs	r3, #4
 8007372:	2a00      	cmp	r2, #0
 8007374:	d1f0      	bne.n	8007358 <quorem+0xf4>
 8007376:	3c01      	subs	r4, #1
 8007378:	e7eb      	b.n	8007352 <quorem+0xee>
 800737a:	2000      	movs	r0, #0
 800737c:	e7ee      	b.n	800735c <quorem+0xf8>
	...

08007380 <_dtoa_r>:
 8007380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007384:	4616      	mov	r6, r2
 8007386:	461f      	mov	r7, r3
 8007388:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800738a:	b099      	sub	sp, #100	; 0x64
 800738c:	4605      	mov	r5, r0
 800738e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007392:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007396:	b974      	cbnz	r4, 80073b6 <_dtoa_r+0x36>
 8007398:	2010      	movs	r0, #16
 800739a:	f000 fedd 	bl	8008158 <malloc>
 800739e:	4602      	mov	r2, r0
 80073a0:	6268      	str	r0, [r5, #36]	; 0x24
 80073a2:	b920      	cbnz	r0, 80073ae <_dtoa_r+0x2e>
 80073a4:	21ea      	movs	r1, #234	; 0xea
 80073a6:	4bae      	ldr	r3, [pc, #696]	; (8007660 <_dtoa_r+0x2e0>)
 80073a8:	48ae      	ldr	r0, [pc, #696]	; (8007664 <_dtoa_r+0x2e4>)
 80073aa:	f001 fdad 	bl	8008f08 <__assert_func>
 80073ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073b2:	6004      	str	r4, [r0, #0]
 80073b4:	60c4      	str	r4, [r0, #12]
 80073b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073b8:	6819      	ldr	r1, [r3, #0]
 80073ba:	b151      	cbz	r1, 80073d2 <_dtoa_r+0x52>
 80073bc:	685a      	ldr	r2, [r3, #4]
 80073be:	2301      	movs	r3, #1
 80073c0:	4093      	lsls	r3, r2
 80073c2:	604a      	str	r2, [r1, #4]
 80073c4:	608b      	str	r3, [r1, #8]
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 ff2a 	bl	8008220 <_Bfree>
 80073cc:	2200      	movs	r2, #0
 80073ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	1e3b      	subs	r3, r7, #0
 80073d4:	bfaf      	iteee	ge
 80073d6:	2300      	movge	r3, #0
 80073d8:	2201      	movlt	r2, #1
 80073da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80073de:	9305      	strlt	r3, [sp, #20]
 80073e0:	bfa8      	it	ge
 80073e2:	f8c8 3000 	strge.w	r3, [r8]
 80073e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80073ea:	4b9f      	ldr	r3, [pc, #636]	; (8007668 <_dtoa_r+0x2e8>)
 80073ec:	bfb8      	it	lt
 80073ee:	f8c8 2000 	strlt.w	r2, [r8]
 80073f2:	ea33 0309 	bics.w	r3, r3, r9
 80073f6:	d119      	bne.n	800742c <_dtoa_r+0xac>
 80073f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80073fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073fe:	6013      	str	r3, [r2, #0]
 8007400:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007404:	4333      	orrs	r3, r6
 8007406:	f000 8580 	beq.w	8007f0a <_dtoa_r+0xb8a>
 800740a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800740c:	b953      	cbnz	r3, 8007424 <_dtoa_r+0xa4>
 800740e:	4b97      	ldr	r3, [pc, #604]	; (800766c <_dtoa_r+0x2ec>)
 8007410:	e022      	b.n	8007458 <_dtoa_r+0xd8>
 8007412:	4b97      	ldr	r3, [pc, #604]	; (8007670 <_dtoa_r+0x2f0>)
 8007414:	9308      	str	r3, [sp, #32]
 8007416:	3308      	adds	r3, #8
 8007418:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	9808      	ldr	r0, [sp, #32]
 800741e:	b019      	add	sp, #100	; 0x64
 8007420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007424:	4b91      	ldr	r3, [pc, #580]	; (800766c <_dtoa_r+0x2ec>)
 8007426:	9308      	str	r3, [sp, #32]
 8007428:	3303      	adds	r3, #3
 800742a:	e7f5      	b.n	8007418 <_dtoa_r+0x98>
 800742c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007430:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007434:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007438:	2200      	movs	r2, #0
 800743a:	2300      	movs	r3, #0
 800743c:	f7f9 fb20 	bl	8000a80 <__aeabi_dcmpeq>
 8007440:	4680      	mov	r8, r0
 8007442:	b158      	cbz	r0, 800745c <_dtoa_r+0xdc>
 8007444:	2301      	movs	r3, #1
 8007446:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8559 	beq.w	8007f04 <_dtoa_r+0xb84>
 8007452:	4888      	ldr	r0, [pc, #544]	; (8007674 <_dtoa_r+0x2f4>)
 8007454:	6018      	str	r0, [r3, #0]
 8007456:	1e43      	subs	r3, r0, #1
 8007458:	9308      	str	r3, [sp, #32]
 800745a:	e7df      	b.n	800741c <_dtoa_r+0x9c>
 800745c:	ab16      	add	r3, sp, #88	; 0x58
 800745e:	9301      	str	r3, [sp, #4]
 8007460:	ab17      	add	r3, sp, #92	; 0x5c
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	4628      	mov	r0, r5
 8007466:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800746a:	f001 f9bf 	bl	80087ec <__d2b>
 800746e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007472:	4682      	mov	sl, r0
 8007474:	2c00      	cmp	r4, #0
 8007476:	d07e      	beq.n	8007576 <_dtoa_r+0x1f6>
 8007478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800747c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800747e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007482:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007486:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800748a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800748e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007492:	2200      	movs	r2, #0
 8007494:	4b78      	ldr	r3, [pc, #480]	; (8007678 <_dtoa_r+0x2f8>)
 8007496:	f7f8 fed3 	bl	8000240 <__aeabi_dsub>
 800749a:	a36b      	add	r3, pc, #428	; (adr r3, 8007648 <_dtoa_r+0x2c8>)
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	f7f9 f886 	bl	80005b0 <__aeabi_dmul>
 80074a4:	a36a      	add	r3, pc, #424	; (adr r3, 8007650 <_dtoa_r+0x2d0>)
 80074a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074aa:	f7f8 fecb 	bl	8000244 <__adddf3>
 80074ae:	4606      	mov	r6, r0
 80074b0:	4620      	mov	r0, r4
 80074b2:	460f      	mov	r7, r1
 80074b4:	f7f9 f812 	bl	80004dc <__aeabi_i2d>
 80074b8:	a367      	add	r3, pc, #412	; (adr r3, 8007658 <_dtoa_r+0x2d8>)
 80074ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074be:	f7f9 f877 	bl	80005b0 <__aeabi_dmul>
 80074c2:	4602      	mov	r2, r0
 80074c4:	460b      	mov	r3, r1
 80074c6:	4630      	mov	r0, r6
 80074c8:	4639      	mov	r1, r7
 80074ca:	f7f8 febb 	bl	8000244 <__adddf3>
 80074ce:	4606      	mov	r6, r0
 80074d0:	460f      	mov	r7, r1
 80074d2:	f7f9 fb1d 	bl	8000b10 <__aeabi_d2iz>
 80074d6:	2200      	movs	r2, #0
 80074d8:	4681      	mov	r9, r0
 80074da:	2300      	movs	r3, #0
 80074dc:	4630      	mov	r0, r6
 80074de:	4639      	mov	r1, r7
 80074e0:	f7f9 fad8 	bl	8000a94 <__aeabi_dcmplt>
 80074e4:	b148      	cbz	r0, 80074fa <_dtoa_r+0x17a>
 80074e6:	4648      	mov	r0, r9
 80074e8:	f7f8 fff8 	bl	80004dc <__aeabi_i2d>
 80074ec:	4632      	mov	r2, r6
 80074ee:	463b      	mov	r3, r7
 80074f0:	f7f9 fac6 	bl	8000a80 <__aeabi_dcmpeq>
 80074f4:	b908      	cbnz	r0, 80074fa <_dtoa_r+0x17a>
 80074f6:	f109 39ff 	add.w	r9, r9, #4294967295
 80074fa:	f1b9 0f16 	cmp.w	r9, #22
 80074fe:	d857      	bhi.n	80075b0 <_dtoa_r+0x230>
 8007500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007504:	4b5d      	ldr	r3, [pc, #372]	; (800767c <_dtoa_r+0x2fc>)
 8007506:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f7f9 fac1 	bl	8000a94 <__aeabi_dcmplt>
 8007512:	2800      	cmp	r0, #0
 8007514:	d04e      	beq.n	80075b4 <_dtoa_r+0x234>
 8007516:	2300      	movs	r3, #0
 8007518:	f109 39ff 	add.w	r9, r9, #4294967295
 800751c:	930f      	str	r3, [sp, #60]	; 0x3c
 800751e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007520:	1b1c      	subs	r4, r3, r4
 8007522:	1e63      	subs	r3, r4, #1
 8007524:	9309      	str	r3, [sp, #36]	; 0x24
 8007526:	bf49      	itett	mi
 8007528:	f1c4 0301 	rsbmi	r3, r4, #1
 800752c:	2300      	movpl	r3, #0
 800752e:	9306      	strmi	r3, [sp, #24]
 8007530:	2300      	movmi	r3, #0
 8007532:	bf54      	ite	pl
 8007534:	9306      	strpl	r3, [sp, #24]
 8007536:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007538:	f1b9 0f00 	cmp.w	r9, #0
 800753c:	db3c      	blt.n	80075b8 <_dtoa_r+0x238>
 800753e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007540:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007544:	444b      	add	r3, r9
 8007546:	9309      	str	r3, [sp, #36]	; 0x24
 8007548:	2300      	movs	r3, #0
 800754a:	930a      	str	r3, [sp, #40]	; 0x28
 800754c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800754e:	2b09      	cmp	r3, #9
 8007550:	d86c      	bhi.n	800762c <_dtoa_r+0x2ac>
 8007552:	2b05      	cmp	r3, #5
 8007554:	bfc4      	itt	gt
 8007556:	3b04      	subgt	r3, #4
 8007558:	9322      	strgt	r3, [sp, #136]	; 0x88
 800755a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800755c:	bfc8      	it	gt
 800755e:	2400      	movgt	r4, #0
 8007560:	f1a3 0302 	sub.w	r3, r3, #2
 8007564:	bfd8      	it	le
 8007566:	2401      	movle	r4, #1
 8007568:	2b03      	cmp	r3, #3
 800756a:	f200 808b 	bhi.w	8007684 <_dtoa_r+0x304>
 800756e:	e8df f003 	tbb	[pc, r3]
 8007572:	4f2d      	.short	0x4f2d
 8007574:	5b4d      	.short	0x5b4d
 8007576:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800757a:	441c      	add	r4, r3
 800757c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007580:	2b20      	cmp	r3, #32
 8007582:	bfc3      	ittte	gt
 8007584:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007588:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800758c:	fa09 f303 	lslgt.w	r3, r9, r3
 8007590:	f1c3 0320 	rsble	r3, r3, #32
 8007594:	bfc6      	itte	gt
 8007596:	fa26 f000 	lsrgt.w	r0, r6, r0
 800759a:	4318      	orrgt	r0, r3
 800759c:	fa06 f003 	lslle.w	r0, r6, r3
 80075a0:	f7f8 ff8c 	bl	80004bc <__aeabi_ui2d>
 80075a4:	2301      	movs	r3, #1
 80075a6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80075aa:	3c01      	subs	r4, #1
 80075ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80075ae:	e770      	b.n	8007492 <_dtoa_r+0x112>
 80075b0:	2301      	movs	r3, #1
 80075b2:	e7b3      	b.n	800751c <_dtoa_r+0x19c>
 80075b4:	900f      	str	r0, [sp, #60]	; 0x3c
 80075b6:	e7b2      	b.n	800751e <_dtoa_r+0x19e>
 80075b8:	9b06      	ldr	r3, [sp, #24]
 80075ba:	eba3 0309 	sub.w	r3, r3, r9
 80075be:	9306      	str	r3, [sp, #24]
 80075c0:	f1c9 0300 	rsb	r3, r9, #0
 80075c4:	930a      	str	r3, [sp, #40]	; 0x28
 80075c6:	2300      	movs	r3, #0
 80075c8:	930e      	str	r3, [sp, #56]	; 0x38
 80075ca:	e7bf      	b.n	800754c <_dtoa_r+0x1cc>
 80075cc:	2300      	movs	r3, #0
 80075ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80075d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	dc59      	bgt.n	800768a <_dtoa_r+0x30a>
 80075d6:	f04f 0b01 	mov.w	fp, #1
 80075da:	465b      	mov	r3, fp
 80075dc:	f8cd b008 	str.w	fp, [sp, #8]
 80075e0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80075e4:	2200      	movs	r2, #0
 80075e6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80075e8:	6042      	str	r2, [r0, #4]
 80075ea:	2204      	movs	r2, #4
 80075ec:	f102 0614 	add.w	r6, r2, #20
 80075f0:	429e      	cmp	r6, r3
 80075f2:	6841      	ldr	r1, [r0, #4]
 80075f4:	d94f      	bls.n	8007696 <_dtoa_r+0x316>
 80075f6:	4628      	mov	r0, r5
 80075f8:	f000 fdd2 	bl	80081a0 <_Balloc>
 80075fc:	9008      	str	r0, [sp, #32]
 80075fe:	2800      	cmp	r0, #0
 8007600:	d14d      	bne.n	800769e <_dtoa_r+0x31e>
 8007602:	4602      	mov	r2, r0
 8007604:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007608:	4b1d      	ldr	r3, [pc, #116]	; (8007680 <_dtoa_r+0x300>)
 800760a:	e6cd      	b.n	80073a8 <_dtoa_r+0x28>
 800760c:	2301      	movs	r3, #1
 800760e:	e7de      	b.n	80075ce <_dtoa_r+0x24e>
 8007610:	2300      	movs	r3, #0
 8007612:	930b      	str	r3, [sp, #44]	; 0x2c
 8007614:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007616:	eb09 0b03 	add.w	fp, r9, r3
 800761a:	f10b 0301 	add.w	r3, fp, #1
 800761e:	2b01      	cmp	r3, #1
 8007620:	9302      	str	r3, [sp, #8]
 8007622:	bfb8      	it	lt
 8007624:	2301      	movlt	r3, #1
 8007626:	e7dd      	b.n	80075e4 <_dtoa_r+0x264>
 8007628:	2301      	movs	r3, #1
 800762a:	e7f2      	b.n	8007612 <_dtoa_r+0x292>
 800762c:	2401      	movs	r4, #1
 800762e:	2300      	movs	r3, #0
 8007630:	940b      	str	r4, [sp, #44]	; 0x2c
 8007632:	9322      	str	r3, [sp, #136]	; 0x88
 8007634:	f04f 3bff 	mov.w	fp, #4294967295
 8007638:	2200      	movs	r2, #0
 800763a:	2312      	movs	r3, #18
 800763c:	f8cd b008 	str.w	fp, [sp, #8]
 8007640:	9223      	str	r2, [sp, #140]	; 0x8c
 8007642:	e7cf      	b.n	80075e4 <_dtoa_r+0x264>
 8007644:	f3af 8000 	nop.w
 8007648:	636f4361 	.word	0x636f4361
 800764c:	3fd287a7 	.word	0x3fd287a7
 8007650:	8b60c8b3 	.word	0x8b60c8b3
 8007654:	3fc68a28 	.word	0x3fc68a28
 8007658:	509f79fb 	.word	0x509f79fb
 800765c:	3fd34413 	.word	0x3fd34413
 8007660:	0800abd5 	.word	0x0800abd5
 8007664:	0800abec 	.word	0x0800abec
 8007668:	7ff00000 	.word	0x7ff00000
 800766c:	0800abd1 	.word	0x0800abd1
 8007670:	0800abc8 	.word	0x0800abc8
 8007674:	0800aba5 	.word	0x0800aba5
 8007678:	3ff80000 	.word	0x3ff80000
 800767c:	0800ad48 	.word	0x0800ad48
 8007680:	0800ac4b 	.word	0x0800ac4b
 8007684:	2301      	movs	r3, #1
 8007686:	930b      	str	r3, [sp, #44]	; 0x2c
 8007688:	e7d4      	b.n	8007634 <_dtoa_r+0x2b4>
 800768a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800768e:	465b      	mov	r3, fp
 8007690:	f8cd b008 	str.w	fp, [sp, #8]
 8007694:	e7a6      	b.n	80075e4 <_dtoa_r+0x264>
 8007696:	3101      	adds	r1, #1
 8007698:	6041      	str	r1, [r0, #4]
 800769a:	0052      	lsls	r2, r2, #1
 800769c:	e7a6      	b.n	80075ec <_dtoa_r+0x26c>
 800769e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076a0:	9a08      	ldr	r2, [sp, #32]
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	9b02      	ldr	r3, [sp, #8]
 80076a6:	2b0e      	cmp	r3, #14
 80076a8:	f200 80a8 	bhi.w	80077fc <_dtoa_r+0x47c>
 80076ac:	2c00      	cmp	r4, #0
 80076ae:	f000 80a5 	beq.w	80077fc <_dtoa_r+0x47c>
 80076b2:	f1b9 0f00 	cmp.w	r9, #0
 80076b6:	dd34      	ble.n	8007722 <_dtoa_r+0x3a2>
 80076b8:	4a9a      	ldr	r2, [pc, #616]	; (8007924 <_dtoa_r+0x5a4>)
 80076ba:	f009 030f 	and.w	r3, r9, #15
 80076be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80076c2:	f419 7f80 	tst.w	r9, #256	; 0x100
 80076c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80076ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80076ce:	ea4f 1429 	mov.w	r4, r9, asr #4
 80076d2:	d016      	beq.n	8007702 <_dtoa_r+0x382>
 80076d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076d8:	4b93      	ldr	r3, [pc, #588]	; (8007928 <_dtoa_r+0x5a8>)
 80076da:	2703      	movs	r7, #3
 80076dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076e0:	f7f9 f890 	bl	8000804 <__aeabi_ddiv>
 80076e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076e8:	f004 040f 	and.w	r4, r4, #15
 80076ec:	4e8e      	ldr	r6, [pc, #568]	; (8007928 <_dtoa_r+0x5a8>)
 80076ee:	b954      	cbnz	r4, 8007706 <_dtoa_r+0x386>
 80076f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076f8:	f7f9 f884 	bl	8000804 <__aeabi_ddiv>
 80076fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007700:	e029      	b.n	8007756 <_dtoa_r+0x3d6>
 8007702:	2702      	movs	r7, #2
 8007704:	e7f2      	b.n	80076ec <_dtoa_r+0x36c>
 8007706:	07e1      	lsls	r1, r4, #31
 8007708:	d508      	bpl.n	800771c <_dtoa_r+0x39c>
 800770a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800770e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007712:	f7f8 ff4d 	bl	80005b0 <__aeabi_dmul>
 8007716:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800771a:	3701      	adds	r7, #1
 800771c:	1064      	asrs	r4, r4, #1
 800771e:	3608      	adds	r6, #8
 8007720:	e7e5      	b.n	80076ee <_dtoa_r+0x36e>
 8007722:	f000 80a5 	beq.w	8007870 <_dtoa_r+0x4f0>
 8007726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800772a:	f1c9 0400 	rsb	r4, r9, #0
 800772e:	4b7d      	ldr	r3, [pc, #500]	; (8007924 <_dtoa_r+0x5a4>)
 8007730:	f004 020f 	and.w	r2, r4, #15
 8007734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773c:	f7f8 ff38 	bl	80005b0 <__aeabi_dmul>
 8007740:	2702      	movs	r7, #2
 8007742:	2300      	movs	r3, #0
 8007744:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007748:	4e77      	ldr	r6, [pc, #476]	; (8007928 <_dtoa_r+0x5a8>)
 800774a:	1124      	asrs	r4, r4, #4
 800774c:	2c00      	cmp	r4, #0
 800774e:	f040 8084 	bne.w	800785a <_dtoa_r+0x4da>
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1d2      	bne.n	80076fc <_dtoa_r+0x37c>
 8007756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 808b 	beq.w	8007874 <_dtoa_r+0x4f4>
 800775e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007762:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007766:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800776a:	2200      	movs	r2, #0
 800776c:	4b6f      	ldr	r3, [pc, #444]	; (800792c <_dtoa_r+0x5ac>)
 800776e:	f7f9 f991 	bl	8000a94 <__aeabi_dcmplt>
 8007772:	2800      	cmp	r0, #0
 8007774:	d07e      	beq.n	8007874 <_dtoa_r+0x4f4>
 8007776:	9b02      	ldr	r3, [sp, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d07b      	beq.n	8007874 <_dtoa_r+0x4f4>
 800777c:	f1bb 0f00 	cmp.w	fp, #0
 8007780:	dd38      	ble.n	80077f4 <_dtoa_r+0x474>
 8007782:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007786:	2200      	movs	r2, #0
 8007788:	4b69      	ldr	r3, [pc, #420]	; (8007930 <_dtoa_r+0x5b0>)
 800778a:	f7f8 ff11 	bl	80005b0 <__aeabi_dmul>
 800778e:	465c      	mov	r4, fp
 8007790:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007794:	f109 38ff 	add.w	r8, r9, #4294967295
 8007798:	3701      	adds	r7, #1
 800779a:	4638      	mov	r0, r7
 800779c:	f7f8 fe9e 	bl	80004dc <__aeabi_i2d>
 80077a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077a4:	f7f8 ff04 	bl	80005b0 <__aeabi_dmul>
 80077a8:	2200      	movs	r2, #0
 80077aa:	4b62      	ldr	r3, [pc, #392]	; (8007934 <_dtoa_r+0x5b4>)
 80077ac:	f7f8 fd4a 	bl	8000244 <__adddf3>
 80077b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80077b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80077b8:	9611      	str	r6, [sp, #68]	; 0x44
 80077ba:	2c00      	cmp	r4, #0
 80077bc:	d15d      	bne.n	800787a <_dtoa_r+0x4fa>
 80077be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077c2:	2200      	movs	r2, #0
 80077c4:	4b5c      	ldr	r3, [pc, #368]	; (8007938 <_dtoa_r+0x5b8>)
 80077c6:	f7f8 fd3b 	bl	8000240 <__aeabi_dsub>
 80077ca:	4602      	mov	r2, r0
 80077cc:	460b      	mov	r3, r1
 80077ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077d2:	4633      	mov	r3, r6
 80077d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077d6:	f7f9 f97b 	bl	8000ad0 <__aeabi_dcmpgt>
 80077da:	2800      	cmp	r0, #0
 80077dc:	f040 829e 	bne.w	8007d1c <_dtoa_r+0x99c>
 80077e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80077ea:	f7f9 f953 	bl	8000a94 <__aeabi_dcmplt>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f040 8292 	bne.w	8007d18 <_dtoa_r+0x998>
 80077f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80077f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80077fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f2c0 8153 	blt.w	8007aaa <_dtoa_r+0x72a>
 8007804:	f1b9 0f0e 	cmp.w	r9, #14
 8007808:	f300 814f 	bgt.w	8007aaa <_dtoa_r+0x72a>
 800780c:	4b45      	ldr	r3, [pc, #276]	; (8007924 <_dtoa_r+0x5a4>)
 800780e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007812:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007816:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800781a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800781c:	2b00      	cmp	r3, #0
 800781e:	f280 80db 	bge.w	80079d8 <_dtoa_r+0x658>
 8007822:	9b02      	ldr	r3, [sp, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	f300 80d7 	bgt.w	80079d8 <_dtoa_r+0x658>
 800782a:	f040 8274 	bne.w	8007d16 <_dtoa_r+0x996>
 800782e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007832:	2200      	movs	r2, #0
 8007834:	4b40      	ldr	r3, [pc, #256]	; (8007938 <_dtoa_r+0x5b8>)
 8007836:	f7f8 febb 	bl	80005b0 <__aeabi_dmul>
 800783a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800783e:	f7f9 f93d 	bl	8000abc <__aeabi_dcmpge>
 8007842:	9c02      	ldr	r4, [sp, #8]
 8007844:	4626      	mov	r6, r4
 8007846:	2800      	cmp	r0, #0
 8007848:	f040 824a 	bne.w	8007ce0 <_dtoa_r+0x960>
 800784c:	2331      	movs	r3, #49	; 0x31
 800784e:	9f08      	ldr	r7, [sp, #32]
 8007850:	f109 0901 	add.w	r9, r9, #1
 8007854:	f807 3b01 	strb.w	r3, [r7], #1
 8007858:	e246      	b.n	8007ce8 <_dtoa_r+0x968>
 800785a:	07e2      	lsls	r2, r4, #31
 800785c:	d505      	bpl.n	800786a <_dtoa_r+0x4ea>
 800785e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007862:	f7f8 fea5 	bl	80005b0 <__aeabi_dmul>
 8007866:	2301      	movs	r3, #1
 8007868:	3701      	adds	r7, #1
 800786a:	1064      	asrs	r4, r4, #1
 800786c:	3608      	adds	r6, #8
 800786e:	e76d      	b.n	800774c <_dtoa_r+0x3cc>
 8007870:	2702      	movs	r7, #2
 8007872:	e770      	b.n	8007756 <_dtoa_r+0x3d6>
 8007874:	46c8      	mov	r8, r9
 8007876:	9c02      	ldr	r4, [sp, #8]
 8007878:	e78f      	b.n	800779a <_dtoa_r+0x41a>
 800787a:	9908      	ldr	r1, [sp, #32]
 800787c:	4b29      	ldr	r3, [pc, #164]	; (8007924 <_dtoa_r+0x5a4>)
 800787e:	4421      	add	r1, r4
 8007880:	9112      	str	r1, [sp, #72]	; 0x48
 8007882:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007884:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007888:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800788c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007890:	2900      	cmp	r1, #0
 8007892:	d055      	beq.n	8007940 <_dtoa_r+0x5c0>
 8007894:	2000      	movs	r0, #0
 8007896:	4929      	ldr	r1, [pc, #164]	; (800793c <_dtoa_r+0x5bc>)
 8007898:	f7f8 ffb4 	bl	8000804 <__aeabi_ddiv>
 800789c:	463b      	mov	r3, r7
 800789e:	4632      	mov	r2, r6
 80078a0:	f7f8 fcce 	bl	8000240 <__aeabi_dsub>
 80078a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80078a8:	9f08      	ldr	r7, [sp, #32]
 80078aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078ae:	f7f9 f92f 	bl	8000b10 <__aeabi_d2iz>
 80078b2:	4604      	mov	r4, r0
 80078b4:	f7f8 fe12 	bl	80004dc <__aeabi_i2d>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078c0:	f7f8 fcbe 	bl	8000240 <__aeabi_dsub>
 80078c4:	4602      	mov	r2, r0
 80078c6:	460b      	mov	r3, r1
 80078c8:	3430      	adds	r4, #48	; 0x30
 80078ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078d2:	f807 4b01 	strb.w	r4, [r7], #1
 80078d6:	f7f9 f8dd 	bl	8000a94 <__aeabi_dcmplt>
 80078da:	2800      	cmp	r0, #0
 80078dc:	d174      	bne.n	80079c8 <_dtoa_r+0x648>
 80078de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078e2:	2000      	movs	r0, #0
 80078e4:	4911      	ldr	r1, [pc, #68]	; (800792c <_dtoa_r+0x5ac>)
 80078e6:	f7f8 fcab 	bl	8000240 <__aeabi_dsub>
 80078ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80078ee:	f7f9 f8d1 	bl	8000a94 <__aeabi_dcmplt>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	f040 80b6 	bne.w	8007a64 <_dtoa_r+0x6e4>
 80078f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80078fa:	429f      	cmp	r7, r3
 80078fc:	f43f af7a 	beq.w	80077f4 <_dtoa_r+0x474>
 8007900:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007904:	2200      	movs	r2, #0
 8007906:	4b0a      	ldr	r3, [pc, #40]	; (8007930 <_dtoa_r+0x5b0>)
 8007908:	f7f8 fe52 	bl	80005b0 <__aeabi_dmul>
 800790c:	2200      	movs	r2, #0
 800790e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007912:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007916:	4b06      	ldr	r3, [pc, #24]	; (8007930 <_dtoa_r+0x5b0>)
 8007918:	f7f8 fe4a 	bl	80005b0 <__aeabi_dmul>
 800791c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007920:	e7c3      	b.n	80078aa <_dtoa_r+0x52a>
 8007922:	bf00      	nop
 8007924:	0800ad48 	.word	0x0800ad48
 8007928:	0800ad20 	.word	0x0800ad20
 800792c:	3ff00000 	.word	0x3ff00000
 8007930:	40240000 	.word	0x40240000
 8007934:	401c0000 	.word	0x401c0000
 8007938:	40140000 	.word	0x40140000
 800793c:	3fe00000 	.word	0x3fe00000
 8007940:	4630      	mov	r0, r6
 8007942:	4639      	mov	r1, r7
 8007944:	f7f8 fe34 	bl	80005b0 <__aeabi_dmul>
 8007948:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800794a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800794e:	9c08      	ldr	r4, [sp, #32]
 8007950:	9314      	str	r3, [sp, #80]	; 0x50
 8007952:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007956:	f7f9 f8db 	bl	8000b10 <__aeabi_d2iz>
 800795a:	9015      	str	r0, [sp, #84]	; 0x54
 800795c:	f7f8 fdbe 	bl	80004dc <__aeabi_i2d>
 8007960:	4602      	mov	r2, r0
 8007962:	460b      	mov	r3, r1
 8007964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007968:	f7f8 fc6a 	bl	8000240 <__aeabi_dsub>
 800796c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800796e:	4606      	mov	r6, r0
 8007970:	3330      	adds	r3, #48	; 0x30
 8007972:	f804 3b01 	strb.w	r3, [r4], #1
 8007976:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007978:	460f      	mov	r7, r1
 800797a:	429c      	cmp	r4, r3
 800797c:	f04f 0200 	mov.w	r2, #0
 8007980:	d124      	bne.n	80079cc <_dtoa_r+0x64c>
 8007982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007986:	4bb3      	ldr	r3, [pc, #716]	; (8007c54 <_dtoa_r+0x8d4>)
 8007988:	f7f8 fc5c 	bl	8000244 <__adddf3>
 800798c:	4602      	mov	r2, r0
 800798e:	460b      	mov	r3, r1
 8007990:	4630      	mov	r0, r6
 8007992:	4639      	mov	r1, r7
 8007994:	f7f9 f89c 	bl	8000ad0 <__aeabi_dcmpgt>
 8007998:	2800      	cmp	r0, #0
 800799a:	d162      	bne.n	8007a62 <_dtoa_r+0x6e2>
 800799c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079a0:	2000      	movs	r0, #0
 80079a2:	49ac      	ldr	r1, [pc, #688]	; (8007c54 <_dtoa_r+0x8d4>)
 80079a4:	f7f8 fc4c 	bl	8000240 <__aeabi_dsub>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4630      	mov	r0, r6
 80079ae:	4639      	mov	r1, r7
 80079b0:	f7f9 f870 	bl	8000a94 <__aeabi_dcmplt>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	f43f af1d 	beq.w	80077f4 <_dtoa_r+0x474>
 80079ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80079bc:	1e7b      	subs	r3, r7, #1
 80079be:	9314      	str	r3, [sp, #80]	; 0x50
 80079c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80079c4:	2b30      	cmp	r3, #48	; 0x30
 80079c6:	d0f8      	beq.n	80079ba <_dtoa_r+0x63a>
 80079c8:	46c1      	mov	r9, r8
 80079ca:	e03a      	b.n	8007a42 <_dtoa_r+0x6c2>
 80079cc:	4ba2      	ldr	r3, [pc, #648]	; (8007c58 <_dtoa_r+0x8d8>)
 80079ce:	f7f8 fdef 	bl	80005b0 <__aeabi_dmul>
 80079d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079d6:	e7bc      	b.n	8007952 <_dtoa_r+0x5d2>
 80079d8:	9f08      	ldr	r7, [sp, #32]
 80079da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079e2:	f7f8 ff0f 	bl	8000804 <__aeabi_ddiv>
 80079e6:	f7f9 f893 	bl	8000b10 <__aeabi_d2iz>
 80079ea:	4604      	mov	r4, r0
 80079ec:	f7f8 fd76 	bl	80004dc <__aeabi_i2d>
 80079f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079f4:	f7f8 fddc 	bl	80005b0 <__aeabi_dmul>
 80079f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80079fc:	460b      	mov	r3, r1
 80079fe:	4602      	mov	r2, r0
 8007a00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a04:	f7f8 fc1c 	bl	8000240 <__aeabi_dsub>
 8007a08:	f807 6b01 	strb.w	r6, [r7], #1
 8007a0c:	9e08      	ldr	r6, [sp, #32]
 8007a0e:	9b02      	ldr	r3, [sp, #8]
 8007a10:	1bbe      	subs	r6, r7, r6
 8007a12:	42b3      	cmp	r3, r6
 8007a14:	d13a      	bne.n	8007a8c <_dtoa_r+0x70c>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	f7f8 fc13 	bl	8000244 <__adddf3>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a2a:	f7f9 f851 	bl	8000ad0 <__aeabi_dcmpgt>
 8007a2e:	bb58      	cbnz	r0, 8007a88 <_dtoa_r+0x708>
 8007a30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a38:	f7f9 f822 	bl	8000a80 <__aeabi_dcmpeq>
 8007a3c:	b108      	cbz	r0, 8007a42 <_dtoa_r+0x6c2>
 8007a3e:	07e1      	lsls	r1, r4, #31
 8007a40:	d422      	bmi.n	8007a88 <_dtoa_r+0x708>
 8007a42:	4628      	mov	r0, r5
 8007a44:	4651      	mov	r1, sl
 8007a46:	f000 fbeb 	bl	8008220 <_Bfree>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	703b      	strb	r3, [r7, #0]
 8007a4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007a50:	f109 0001 	add.w	r0, r9, #1
 8007a54:	6018      	str	r0, [r3, #0]
 8007a56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	f43f acdf 	beq.w	800741c <_dtoa_r+0x9c>
 8007a5e:	601f      	str	r7, [r3, #0]
 8007a60:	e4dc      	b.n	800741c <_dtoa_r+0x9c>
 8007a62:	4627      	mov	r7, r4
 8007a64:	463b      	mov	r3, r7
 8007a66:	461f      	mov	r7, r3
 8007a68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a6c:	2a39      	cmp	r2, #57	; 0x39
 8007a6e:	d107      	bne.n	8007a80 <_dtoa_r+0x700>
 8007a70:	9a08      	ldr	r2, [sp, #32]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d1f7      	bne.n	8007a66 <_dtoa_r+0x6e6>
 8007a76:	2230      	movs	r2, #48	; 0x30
 8007a78:	9908      	ldr	r1, [sp, #32]
 8007a7a:	f108 0801 	add.w	r8, r8, #1
 8007a7e:	700a      	strb	r2, [r1, #0]
 8007a80:	781a      	ldrb	r2, [r3, #0]
 8007a82:	3201      	adds	r2, #1
 8007a84:	701a      	strb	r2, [r3, #0]
 8007a86:	e79f      	b.n	80079c8 <_dtoa_r+0x648>
 8007a88:	46c8      	mov	r8, r9
 8007a8a:	e7eb      	b.n	8007a64 <_dtoa_r+0x6e4>
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	4b72      	ldr	r3, [pc, #456]	; (8007c58 <_dtoa_r+0x8d8>)
 8007a90:	f7f8 fd8e 	bl	80005b0 <__aeabi_dmul>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f7f8 ffee 	bl	8000a80 <__aeabi_dcmpeq>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d098      	beq.n	80079da <_dtoa_r+0x65a>
 8007aa8:	e7cb      	b.n	8007a42 <_dtoa_r+0x6c2>
 8007aaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007aac:	2a00      	cmp	r2, #0
 8007aae:	f000 80cd 	beq.w	8007c4c <_dtoa_r+0x8cc>
 8007ab2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007ab4:	2a01      	cmp	r2, #1
 8007ab6:	f300 80af 	bgt.w	8007c18 <_dtoa_r+0x898>
 8007aba:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	f000 80a7 	beq.w	8007c10 <_dtoa_r+0x890>
 8007ac2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ac6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ac8:	9f06      	ldr	r7, [sp, #24]
 8007aca:	9a06      	ldr	r2, [sp, #24]
 8007acc:	2101      	movs	r1, #1
 8007ace:	441a      	add	r2, r3
 8007ad0:	9206      	str	r2, [sp, #24]
 8007ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	441a      	add	r2, r3
 8007ad8:	9209      	str	r2, [sp, #36]	; 0x24
 8007ada:	f000 fc5b 	bl	8008394 <__i2b>
 8007ade:	4606      	mov	r6, r0
 8007ae0:	2f00      	cmp	r7, #0
 8007ae2:	dd0c      	ble.n	8007afe <_dtoa_r+0x77e>
 8007ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	dd09      	ble.n	8007afe <_dtoa_r+0x77e>
 8007aea:	42bb      	cmp	r3, r7
 8007aec:	bfa8      	it	ge
 8007aee:	463b      	movge	r3, r7
 8007af0:	9a06      	ldr	r2, [sp, #24]
 8007af2:	1aff      	subs	r7, r7, r3
 8007af4:	1ad2      	subs	r2, r2, r3
 8007af6:	9206      	str	r2, [sp, #24]
 8007af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	9309      	str	r3, [sp, #36]	; 0x24
 8007afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b00:	b1f3      	cbz	r3, 8007b40 <_dtoa_r+0x7c0>
 8007b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 80a9 	beq.w	8007c5c <_dtoa_r+0x8dc>
 8007b0a:	2c00      	cmp	r4, #0
 8007b0c:	dd10      	ble.n	8007b30 <_dtoa_r+0x7b0>
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4622      	mov	r2, r4
 8007b12:	4628      	mov	r0, r5
 8007b14:	f000 fcf8 	bl	8008508 <__pow5mult>
 8007b18:	4652      	mov	r2, sl
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 fc4e 	bl	80083c0 <__multiply>
 8007b24:	4680      	mov	r8, r0
 8007b26:	4651      	mov	r1, sl
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f000 fb79 	bl	8008220 <_Bfree>
 8007b2e:	46c2      	mov	sl, r8
 8007b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b32:	1b1a      	subs	r2, r3, r4
 8007b34:	d004      	beq.n	8007b40 <_dtoa_r+0x7c0>
 8007b36:	4651      	mov	r1, sl
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f000 fce5 	bl	8008508 <__pow5mult>
 8007b3e:	4682      	mov	sl, r0
 8007b40:	2101      	movs	r1, #1
 8007b42:	4628      	mov	r0, r5
 8007b44:	f000 fc26 	bl	8008394 <__i2b>
 8007b48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f340 8087 	ble.w	8007c60 <_dtoa_r+0x8e0>
 8007b52:	461a      	mov	r2, r3
 8007b54:	4601      	mov	r1, r0
 8007b56:	4628      	mov	r0, r5
 8007b58:	f000 fcd6 	bl	8008508 <__pow5mult>
 8007b5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b5e:	4604      	mov	r4, r0
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	f340 8080 	ble.w	8007c66 <_dtoa_r+0x8e6>
 8007b66:	f04f 0800 	mov.w	r8, #0
 8007b6a:	6923      	ldr	r3, [r4, #16]
 8007b6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007b70:	6918      	ldr	r0, [r3, #16]
 8007b72:	f000 fbc1 	bl	80082f8 <__hi0bits>
 8007b76:	f1c0 0020 	rsb	r0, r0, #32
 8007b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7c:	4418      	add	r0, r3
 8007b7e:	f010 001f 	ands.w	r0, r0, #31
 8007b82:	f000 8092 	beq.w	8007caa <_dtoa_r+0x92a>
 8007b86:	f1c0 0320 	rsb	r3, r0, #32
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	f340 808a 	ble.w	8007ca4 <_dtoa_r+0x924>
 8007b90:	f1c0 001c 	rsb	r0, r0, #28
 8007b94:	9b06      	ldr	r3, [sp, #24]
 8007b96:	4407      	add	r7, r0
 8007b98:	4403      	add	r3, r0
 8007b9a:	9306      	str	r3, [sp, #24]
 8007b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b9e:	4403      	add	r3, r0
 8007ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba2:	9b06      	ldr	r3, [sp, #24]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	dd05      	ble.n	8007bb4 <_dtoa_r+0x834>
 8007ba8:	4651      	mov	r1, sl
 8007baa:	461a      	mov	r2, r3
 8007bac:	4628      	mov	r0, r5
 8007bae:	f000 fd05 	bl	80085bc <__lshift>
 8007bb2:	4682      	mov	sl, r0
 8007bb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	dd05      	ble.n	8007bc6 <_dtoa_r+0x846>
 8007bba:	4621      	mov	r1, r4
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f000 fcfc 	bl	80085bc <__lshift>
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d070      	beq.n	8007cae <_dtoa_r+0x92e>
 8007bcc:	4621      	mov	r1, r4
 8007bce:	4650      	mov	r0, sl
 8007bd0:	f000 fd60 	bl	8008694 <__mcmp>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	da6a      	bge.n	8007cae <_dtoa_r+0x92e>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4651      	mov	r1, sl
 8007bdc:	220a      	movs	r2, #10
 8007bde:	4628      	mov	r0, r5
 8007be0:	f000 fb40 	bl	8008264 <__multadd>
 8007be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007be6:	4682      	mov	sl, r0
 8007be8:	f109 39ff 	add.w	r9, r9, #4294967295
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 8193 	beq.w	8007f18 <_dtoa_r+0xb98>
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	220a      	movs	r2, #10
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	f000 fb33 	bl	8008264 <__multadd>
 8007bfe:	f1bb 0f00 	cmp.w	fp, #0
 8007c02:	4606      	mov	r6, r0
 8007c04:	f300 8093 	bgt.w	8007d2e <_dtoa_r+0x9ae>
 8007c08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	dc57      	bgt.n	8007cbe <_dtoa_r+0x93e>
 8007c0e:	e08e      	b.n	8007d2e <_dtoa_r+0x9ae>
 8007c10:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007c12:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c16:	e756      	b.n	8007ac6 <_dtoa_r+0x746>
 8007c18:	9b02      	ldr	r3, [sp, #8]
 8007c1a:	1e5c      	subs	r4, r3, #1
 8007c1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1e:	42a3      	cmp	r3, r4
 8007c20:	bfb7      	itett	lt
 8007c22:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c24:	1b1c      	subge	r4, r3, r4
 8007c26:	1ae2      	sublt	r2, r4, r3
 8007c28:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007c2a:	bfbe      	ittt	lt
 8007c2c:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007c2e:	189b      	addlt	r3, r3, r2
 8007c30:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007c32:	9b02      	ldr	r3, [sp, #8]
 8007c34:	bfb8      	it	lt
 8007c36:	2400      	movlt	r4, #0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	bfbb      	ittet	lt
 8007c3c:	9b06      	ldrlt	r3, [sp, #24]
 8007c3e:	9a02      	ldrlt	r2, [sp, #8]
 8007c40:	9f06      	ldrge	r7, [sp, #24]
 8007c42:	1a9f      	sublt	r7, r3, r2
 8007c44:	bfac      	ite	ge
 8007c46:	9b02      	ldrge	r3, [sp, #8]
 8007c48:	2300      	movlt	r3, #0
 8007c4a:	e73e      	b.n	8007aca <_dtoa_r+0x74a>
 8007c4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007c4e:	9f06      	ldr	r7, [sp, #24]
 8007c50:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007c52:	e745      	b.n	8007ae0 <_dtoa_r+0x760>
 8007c54:	3fe00000 	.word	0x3fe00000
 8007c58:	40240000 	.word	0x40240000
 8007c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c5e:	e76a      	b.n	8007b36 <_dtoa_r+0x7b6>
 8007c60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	dc19      	bgt.n	8007c9a <_dtoa_r+0x91a>
 8007c66:	9b04      	ldr	r3, [sp, #16]
 8007c68:	b9bb      	cbnz	r3, 8007c9a <_dtoa_r+0x91a>
 8007c6a:	9b05      	ldr	r3, [sp, #20]
 8007c6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c70:	b99b      	cbnz	r3, 8007c9a <_dtoa_r+0x91a>
 8007c72:	9b05      	ldr	r3, [sp, #20]
 8007c74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007c78:	0d1b      	lsrs	r3, r3, #20
 8007c7a:	051b      	lsls	r3, r3, #20
 8007c7c:	b183      	cbz	r3, 8007ca0 <_dtoa_r+0x920>
 8007c7e:	f04f 0801 	mov.w	r8, #1
 8007c82:	9b06      	ldr	r3, [sp, #24]
 8007c84:	3301      	adds	r3, #1
 8007c86:	9306      	str	r3, [sp, #24]
 8007c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f47f af6a 	bne.w	8007b6a <_dtoa_r+0x7ea>
 8007c96:	2001      	movs	r0, #1
 8007c98:	e76f      	b.n	8007b7a <_dtoa_r+0x7fa>
 8007c9a:	f04f 0800 	mov.w	r8, #0
 8007c9e:	e7f6      	b.n	8007c8e <_dtoa_r+0x90e>
 8007ca0:	4698      	mov	r8, r3
 8007ca2:	e7f4      	b.n	8007c8e <_dtoa_r+0x90e>
 8007ca4:	f43f af7d 	beq.w	8007ba2 <_dtoa_r+0x822>
 8007ca8:	4618      	mov	r0, r3
 8007caa:	301c      	adds	r0, #28
 8007cac:	e772      	b.n	8007b94 <_dtoa_r+0x814>
 8007cae:	9b02      	ldr	r3, [sp, #8]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	dc36      	bgt.n	8007d22 <_dtoa_r+0x9a2>
 8007cb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	dd33      	ble.n	8007d22 <_dtoa_r+0x9a2>
 8007cba:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007cbe:	f1bb 0f00 	cmp.w	fp, #0
 8007cc2:	d10d      	bne.n	8007ce0 <_dtoa_r+0x960>
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	465b      	mov	r3, fp
 8007cc8:	2205      	movs	r2, #5
 8007cca:	4628      	mov	r0, r5
 8007ccc:	f000 faca 	bl	8008264 <__multadd>
 8007cd0:	4601      	mov	r1, r0
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	4650      	mov	r0, sl
 8007cd6:	f000 fcdd 	bl	8008694 <__mcmp>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	f73f adb6 	bgt.w	800784c <_dtoa_r+0x4cc>
 8007ce0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ce2:	9f08      	ldr	r7, [sp, #32]
 8007ce4:	ea6f 0903 	mvn.w	r9, r3
 8007ce8:	f04f 0800 	mov.w	r8, #0
 8007cec:	4621      	mov	r1, r4
 8007cee:	4628      	mov	r0, r5
 8007cf0:	f000 fa96 	bl	8008220 <_Bfree>
 8007cf4:	2e00      	cmp	r6, #0
 8007cf6:	f43f aea4 	beq.w	8007a42 <_dtoa_r+0x6c2>
 8007cfa:	f1b8 0f00 	cmp.w	r8, #0
 8007cfe:	d005      	beq.n	8007d0c <_dtoa_r+0x98c>
 8007d00:	45b0      	cmp	r8, r6
 8007d02:	d003      	beq.n	8007d0c <_dtoa_r+0x98c>
 8007d04:	4641      	mov	r1, r8
 8007d06:	4628      	mov	r0, r5
 8007d08:	f000 fa8a 	bl	8008220 <_Bfree>
 8007d0c:	4631      	mov	r1, r6
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f000 fa86 	bl	8008220 <_Bfree>
 8007d14:	e695      	b.n	8007a42 <_dtoa_r+0x6c2>
 8007d16:	2400      	movs	r4, #0
 8007d18:	4626      	mov	r6, r4
 8007d1a:	e7e1      	b.n	8007ce0 <_dtoa_r+0x960>
 8007d1c:	46c1      	mov	r9, r8
 8007d1e:	4626      	mov	r6, r4
 8007d20:	e594      	b.n	800784c <_dtoa_r+0x4cc>
 8007d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d24:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 80fc 	beq.w	8007f26 <_dtoa_r+0xba6>
 8007d2e:	2f00      	cmp	r7, #0
 8007d30:	dd05      	ble.n	8007d3e <_dtoa_r+0x9be>
 8007d32:	4631      	mov	r1, r6
 8007d34:	463a      	mov	r2, r7
 8007d36:	4628      	mov	r0, r5
 8007d38:	f000 fc40 	bl	80085bc <__lshift>
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	f1b8 0f00 	cmp.w	r8, #0
 8007d42:	d05c      	beq.n	8007dfe <_dtoa_r+0xa7e>
 8007d44:	4628      	mov	r0, r5
 8007d46:	6871      	ldr	r1, [r6, #4]
 8007d48:	f000 fa2a 	bl	80081a0 <_Balloc>
 8007d4c:	4607      	mov	r7, r0
 8007d4e:	b928      	cbnz	r0, 8007d5c <_dtoa_r+0x9dc>
 8007d50:	4602      	mov	r2, r0
 8007d52:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007d56:	4b7e      	ldr	r3, [pc, #504]	; (8007f50 <_dtoa_r+0xbd0>)
 8007d58:	f7ff bb26 	b.w	80073a8 <_dtoa_r+0x28>
 8007d5c:	6932      	ldr	r2, [r6, #16]
 8007d5e:	f106 010c 	add.w	r1, r6, #12
 8007d62:	3202      	adds	r2, #2
 8007d64:	0092      	lsls	r2, r2, #2
 8007d66:	300c      	adds	r0, #12
 8007d68:	f000 fa0c 	bl	8008184 <memcpy>
 8007d6c:	2201      	movs	r2, #1
 8007d6e:	4639      	mov	r1, r7
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 fc23 	bl	80085bc <__lshift>
 8007d76:	46b0      	mov	r8, r6
 8007d78:	4606      	mov	r6, r0
 8007d7a:	9b08      	ldr	r3, [sp, #32]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	9302      	str	r3, [sp, #8]
 8007d80:	9b08      	ldr	r3, [sp, #32]
 8007d82:	445b      	add	r3, fp
 8007d84:	930a      	str	r3, [sp, #40]	; 0x28
 8007d86:	9b04      	ldr	r3, [sp, #16]
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d8e:	9b02      	ldr	r3, [sp, #8]
 8007d90:	4621      	mov	r1, r4
 8007d92:	4650      	mov	r0, sl
 8007d94:	f103 3bff 	add.w	fp, r3, #4294967295
 8007d98:	f7ff fa64 	bl	8007264 <quorem>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	4641      	mov	r1, r8
 8007da0:	3330      	adds	r3, #48	; 0x30
 8007da2:	9004      	str	r0, [sp, #16]
 8007da4:	4650      	mov	r0, sl
 8007da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007da8:	f000 fc74 	bl	8008694 <__mcmp>
 8007dac:	4632      	mov	r2, r6
 8007dae:	9006      	str	r0, [sp, #24]
 8007db0:	4621      	mov	r1, r4
 8007db2:	4628      	mov	r0, r5
 8007db4:	f000 fc8a 	bl	80086cc <__mdiff>
 8007db8:	68c2      	ldr	r2, [r0, #12]
 8007dba:	4607      	mov	r7, r0
 8007dbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dbe:	bb02      	cbnz	r2, 8007e02 <_dtoa_r+0xa82>
 8007dc0:	4601      	mov	r1, r0
 8007dc2:	4650      	mov	r0, sl
 8007dc4:	f000 fc66 	bl	8008694 <__mcmp>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dcc:	4639      	mov	r1, r7
 8007dce:	4628      	mov	r0, r5
 8007dd0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007dd4:	f000 fa24 	bl	8008220 <_Bfree>
 8007dd8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ddc:	9f02      	ldr	r7, [sp, #8]
 8007dde:	ea43 0102 	orr.w	r1, r3, r2
 8007de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de4:	430b      	orrs	r3, r1
 8007de6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007de8:	d10d      	bne.n	8007e06 <_dtoa_r+0xa86>
 8007dea:	2b39      	cmp	r3, #57	; 0x39
 8007dec:	d027      	beq.n	8007e3e <_dtoa_r+0xabe>
 8007dee:	9a06      	ldr	r2, [sp, #24]
 8007df0:	2a00      	cmp	r2, #0
 8007df2:	dd01      	ble.n	8007df8 <_dtoa_r+0xa78>
 8007df4:	9b04      	ldr	r3, [sp, #16]
 8007df6:	3331      	adds	r3, #49	; 0x31
 8007df8:	f88b 3000 	strb.w	r3, [fp]
 8007dfc:	e776      	b.n	8007cec <_dtoa_r+0x96c>
 8007dfe:	4630      	mov	r0, r6
 8007e00:	e7b9      	b.n	8007d76 <_dtoa_r+0x9f6>
 8007e02:	2201      	movs	r2, #1
 8007e04:	e7e2      	b.n	8007dcc <_dtoa_r+0xa4c>
 8007e06:	9906      	ldr	r1, [sp, #24]
 8007e08:	2900      	cmp	r1, #0
 8007e0a:	db04      	blt.n	8007e16 <_dtoa_r+0xa96>
 8007e0c:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007e0e:	4301      	orrs	r1, r0
 8007e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e12:	4301      	orrs	r1, r0
 8007e14:	d120      	bne.n	8007e58 <_dtoa_r+0xad8>
 8007e16:	2a00      	cmp	r2, #0
 8007e18:	ddee      	ble.n	8007df8 <_dtoa_r+0xa78>
 8007e1a:	4651      	mov	r1, sl
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	4628      	mov	r0, r5
 8007e20:	9302      	str	r3, [sp, #8]
 8007e22:	f000 fbcb 	bl	80085bc <__lshift>
 8007e26:	4621      	mov	r1, r4
 8007e28:	4682      	mov	sl, r0
 8007e2a:	f000 fc33 	bl	8008694 <__mcmp>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	9b02      	ldr	r3, [sp, #8]
 8007e32:	dc02      	bgt.n	8007e3a <_dtoa_r+0xaba>
 8007e34:	d1e0      	bne.n	8007df8 <_dtoa_r+0xa78>
 8007e36:	07da      	lsls	r2, r3, #31
 8007e38:	d5de      	bpl.n	8007df8 <_dtoa_r+0xa78>
 8007e3a:	2b39      	cmp	r3, #57	; 0x39
 8007e3c:	d1da      	bne.n	8007df4 <_dtoa_r+0xa74>
 8007e3e:	2339      	movs	r3, #57	; 0x39
 8007e40:	f88b 3000 	strb.w	r3, [fp]
 8007e44:	463b      	mov	r3, r7
 8007e46:	461f      	mov	r7, r3
 8007e48:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	2a39      	cmp	r2, #57	; 0x39
 8007e50:	d050      	beq.n	8007ef4 <_dtoa_r+0xb74>
 8007e52:	3201      	adds	r2, #1
 8007e54:	701a      	strb	r2, [r3, #0]
 8007e56:	e749      	b.n	8007cec <_dtoa_r+0x96c>
 8007e58:	2a00      	cmp	r2, #0
 8007e5a:	dd03      	ble.n	8007e64 <_dtoa_r+0xae4>
 8007e5c:	2b39      	cmp	r3, #57	; 0x39
 8007e5e:	d0ee      	beq.n	8007e3e <_dtoa_r+0xabe>
 8007e60:	3301      	adds	r3, #1
 8007e62:	e7c9      	b.n	8007df8 <_dtoa_r+0xa78>
 8007e64:	9a02      	ldr	r2, [sp, #8]
 8007e66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e68:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007e6c:	428a      	cmp	r2, r1
 8007e6e:	d02a      	beq.n	8007ec6 <_dtoa_r+0xb46>
 8007e70:	4651      	mov	r1, sl
 8007e72:	2300      	movs	r3, #0
 8007e74:	220a      	movs	r2, #10
 8007e76:	4628      	mov	r0, r5
 8007e78:	f000 f9f4 	bl	8008264 <__multadd>
 8007e7c:	45b0      	cmp	r8, r6
 8007e7e:	4682      	mov	sl, r0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	f04f 020a 	mov.w	r2, #10
 8007e88:	4641      	mov	r1, r8
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	d107      	bne.n	8007e9e <_dtoa_r+0xb1e>
 8007e8e:	f000 f9e9 	bl	8008264 <__multadd>
 8007e92:	4680      	mov	r8, r0
 8007e94:	4606      	mov	r6, r0
 8007e96:	9b02      	ldr	r3, [sp, #8]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	9302      	str	r3, [sp, #8]
 8007e9c:	e777      	b.n	8007d8e <_dtoa_r+0xa0e>
 8007e9e:	f000 f9e1 	bl	8008264 <__multadd>
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4680      	mov	r8, r0
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	220a      	movs	r2, #10
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f000 f9da 	bl	8008264 <__multadd>
 8007eb0:	4606      	mov	r6, r0
 8007eb2:	e7f0      	b.n	8007e96 <_dtoa_r+0xb16>
 8007eb4:	f1bb 0f00 	cmp.w	fp, #0
 8007eb8:	bfcc      	ite	gt
 8007eba:	465f      	movgt	r7, fp
 8007ebc:	2701      	movle	r7, #1
 8007ebe:	f04f 0800 	mov.w	r8, #0
 8007ec2:	9a08      	ldr	r2, [sp, #32]
 8007ec4:	4417      	add	r7, r2
 8007ec6:	4651      	mov	r1, sl
 8007ec8:	2201      	movs	r2, #1
 8007eca:	4628      	mov	r0, r5
 8007ecc:	9302      	str	r3, [sp, #8]
 8007ece:	f000 fb75 	bl	80085bc <__lshift>
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4682      	mov	sl, r0
 8007ed6:	f000 fbdd 	bl	8008694 <__mcmp>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	dcb2      	bgt.n	8007e44 <_dtoa_r+0xac4>
 8007ede:	d102      	bne.n	8007ee6 <_dtoa_r+0xb66>
 8007ee0:	9b02      	ldr	r3, [sp, #8]
 8007ee2:	07db      	lsls	r3, r3, #31
 8007ee4:	d4ae      	bmi.n	8007e44 <_dtoa_r+0xac4>
 8007ee6:	463b      	mov	r3, r7
 8007ee8:	461f      	mov	r7, r3
 8007eea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eee:	2a30      	cmp	r2, #48	; 0x30
 8007ef0:	d0fa      	beq.n	8007ee8 <_dtoa_r+0xb68>
 8007ef2:	e6fb      	b.n	8007cec <_dtoa_r+0x96c>
 8007ef4:	9a08      	ldr	r2, [sp, #32]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d1a5      	bne.n	8007e46 <_dtoa_r+0xac6>
 8007efa:	2331      	movs	r3, #49	; 0x31
 8007efc:	f109 0901 	add.w	r9, r9, #1
 8007f00:	7013      	strb	r3, [r2, #0]
 8007f02:	e6f3      	b.n	8007cec <_dtoa_r+0x96c>
 8007f04:	4b13      	ldr	r3, [pc, #76]	; (8007f54 <_dtoa_r+0xbd4>)
 8007f06:	f7ff baa7 	b.w	8007458 <_dtoa_r+0xd8>
 8007f0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f47f aa80 	bne.w	8007412 <_dtoa_r+0x92>
 8007f12:	4b11      	ldr	r3, [pc, #68]	; (8007f58 <_dtoa_r+0xbd8>)
 8007f14:	f7ff baa0 	b.w	8007458 <_dtoa_r+0xd8>
 8007f18:	f1bb 0f00 	cmp.w	fp, #0
 8007f1c:	dc03      	bgt.n	8007f26 <_dtoa_r+0xba6>
 8007f1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	f73f aecc 	bgt.w	8007cbe <_dtoa_r+0x93e>
 8007f26:	9f08      	ldr	r7, [sp, #32]
 8007f28:	4621      	mov	r1, r4
 8007f2a:	4650      	mov	r0, sl
 8007f2c:	f7ff f99a 	bl	8007264 <quorem>
 8007f30:	9a08      	ldr	r2, [sp, #32]
 8007f32:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007f36:	f807 3b01 	strb.w	r3, [r7], #1
 8007f3a:	1aba      	subs	r2, r7, r2
 8007f3c:	4593      	cmp	fp, r2
 8007f3e:	ddb9      	ble.n	8007eb4 <_dtoa_r+0xb34>
 8007f40:	4651      	mov	r1, sl
 8007f42:	2300      	movs	r3, #0
 8007f44:	220a      	movs	r2, #10
 8007f46:	4628      	mov	r0, r5
 8007f48:	f000 f98c 	bl	8008264 <__multadd>
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	e7eb      	b.n	8007f28 <_dtoa_r+0xba8>
 8007f50:	0800ac4b 	.word	0x0800ac4b
 8007f54:	0800aba4 	.word	0x0800aba4
 8007f58:	0800abc8 	.word	0x0800abc8

08007f5c <std>:
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	b510      	push	{r4, lr}
 8007f60:	4604      	mov	r4, r0
 8007f62:	e9c0 3300 	strd	r3, r3, [r0]
 8007f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f6a:	6083      	str	r3, [r0, #8]
 8007f6c:	8181      	strh	r1, [r0, #12]
 8007f6e:	6643      	str	r3, [r0, #100]	; 0x64
 8007f70:	81c2      	strh	r2, [r0, #14]
 8007f72:	6183      	str	r3, [r0, #24]
 8007f74:	4619      	mov	r1, r3
 8007f76:	2208      	movs	r2, #8
 8007f78:	305c      	adds	r0, #92	; 0x5c
 8007f7a:	f7fe fcf3 	bl	8006964 <memset>
 8007f7e:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <std+0x38>)
 8007f80:	6224      	str	r4, [r4, #32]
 8007f82:	6263      	str	r3, [r4, #36]	; 0x24
 8007f84:	4b04      	ldr	r3, [pc, #16]	; (8007f98 <std+0x3c>)
 8007f86:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f88:	4b04      	ldr	r3, [pc, #16]	; (8007f9c <std+0x40>)
 8007f8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f8c:	4b04      	ldr	r3, [pc, #16]	; (8007fa0 <std+0x44>)
 8007f8e:	6323      	str	r3, [r4, #48]	; 0x30
 8007f90:	bd10      	pop	{r4, pc}
 8007f92:	bf00      	nop
 8007f94:	08008cdd 	.word	0x08008cdd
 8007f98:	08008cff 	.word	0x08008cff
 8007f9c:	08008d37 	.word	0x08008d37
 8007fa0:	08008d5b 	.word	0x08008d5b

08007fa4 <_cleanup_r>:
 8007fa4:	4901      	ldr	r1, [pc, #4]	; (8007fac <_cleanup_r+0x8>)
 8007fa6:	f000 b8af 	b.w	8008108 <_fwalk_reent>
 8007faa:	bf00      	nop
 8007fac:	08009071 	.word	0x08009071

08007fb0 <__sfmoreglue>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	2568      	movs	r5, #104	; 0x68
 8007fb4:	1e4a      	subs	r2, r1, #1
 8007fb6:	4355      	muls	r5, r2
 8007fb8:	460e      	mov	r6, r1
 8007fba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fbe:	f000 fccb 	bl	8008958 <_malloc_r>
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	b140      	cbz	r0, 8007fd8 <__sfmoreglue+0x28>
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	e9c0 1600 	strd	r1, r6, [r0]
 8007fcc:	300c      	adds	r0, #12
 8007fce:	60a0      	str	r0, [r4, #8]
 8007fd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fd4:	f7fe fcc6 	bl	8006964 <memset>
 8007fd8:	4620      	mov	r0, r4
 8007fda:	bd70      	pop	{r4, r5, r6, pc}

08007fdc <__sfp_lock_acquire>:
 8007fdc:	4801      	ldr	r0, [pc, #4]	; (8007fe4 <__sfp_lock_acquire+0x8>)
 8007fde:	f000 b8b8 	b.w	8008152 <__retarget_lock_acquire_recursive>
 8007fe2:	bf00      	nop
 8007fe4:	20000274 	.word	0x20000274

08007fe8 <__sfp_lock_release>:
 8007fe8:	4801      	ldr	r0, [pc, #4]	; (8007ff0 <__sfp_lock_release+0x8>)
 8007fea:	f000 b8b3 	b.w	8008154 <__retarget_lock_release_recursive>
 8007fee:	bf00      	nop
 8007ff0:	20000274 	.word	0x20000274

08007ff4 <__sinit_lock_acquire>:
 8007ff4:	4801      	ldr	r0, [pc, #4]	; (8007ffc <__sinit_lock_acquire+0x8>)
 8007ff6:	f000 b8ac 	b.w	8008152 <__retarget_lock_acquire_recursive>
 8007ffa:	bf00      	nop
 8007ffc:	2000026f 	.word	0x2000026f

08008000 <__sinit_lock_release>:
 8008000:	4801      	ldr	r0, [pc, #4]	; (8008008 <__sinit_lock_release+0x8>)
 8008002:	f000 b8a7 	b.w	8008154 <__retarget_lock_release_recursive>
 8008006:	bf00      	nop
 8008008:	2000026f 	.word	0x2000026f

0800800c <__sinit>:
 800800c:	b510      	push	{r4, lr}
 800800e:	4604      	mov	r4, r0
 8008010:	f7ff fff0 	bl	8007ff4 <__sinit_lock_acquire>
 8008014:	69a3      	ldr	r3, [r4, #24]
 8008016:	b11b      	cbz	r3, 8008020 <__sinit+0x14>
 8008018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800801c:	f7ff bff0 	b.w	8008000 <__sinit_lock_release>
 8008020:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008024:	6523      	str	r3, [r4, #80]	; 0x50
 8008026:	4b13      	ldr	r3, [pc, #76]	; (8008074 <__sinit+0x68>)
 8008028:	4a13      	ldr	r2, [pc, #76]	; (8008078 <__sinit+0x6c>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	62a2      	str	r2, [r4, #40]	; 0x28
 800802e:	42a3      	cmp	r3, r4
 8008030:	bf08      	it	eq
 8008032:	2301      	moveq	r3, #1
 8008034:	4620      	mov	r0, r4
 8008036:	bf08      	it	eq
 8008038:	61a3      	streq	r3, [r4, #24]
 800803a:	f000 f81f 	bl	800807c <__sfp>
 800803e:	6060      	str	r0, [r4, #4]
 8008040:	4620      	mov	r0, r4
 8008042:	f000 f81b 	bl	800807c <__sfp>
 8008046:	60a0      	str	r0, [r4, #8]
 8008048:	4620      	mov	r0, r4
 800804a:	f000 f817 	bl	800807c <__sfp>
 800804e:	2200      	movs	r2, #0
 8008050:	2104      	movs	r1, #4
 8008052:	60e0      	str	r0, [r4, #12]
 8008054:	6860      	ldr	r0, [r4, #4]
 8008056:	f7ff ff81 	bl	8007f5c <std>
 800805a:	2201      	movs	r2, #1
 800805c:	2109      	movs	r1, #9
 800805e:	68a0      	ldr	r0, [r4, #8]
 8008060:	f7ff ff7c 	bl	8007f5c <std>
 8008064:	2202      	movs	r2, #2
 8008066:	2112      	movs	r1, #18
 8008068:	68e0      	ldr	r0, [r4, #12]
 800806a:	f7ff ff77 	bl	8007f5c <std>
 800806e:	2301      	movs	r3, #1
 8008070:	61a3      	str	r3, [r4, #24]
 8008072:	e7d1      	b.n	8008018 <__sinit+0xc>
 8008074:	0800ab90 	.word	0x0800ab90
 8008078:	08007fa5 	.word	0x08007fa5

0800807c <__sfp>:
 800807c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807e:	4607      	mov	r7, r0
 8008080:	f7ff ffac 	bl	8007fdc <__sfp_lock_acquire>
 8008084:	4b1e      	ldr	r3, [pc, #120]	; (8008100 <__sfp+0x84>)
 8008086:	681e      	ldr	r6, [r3, #0]
 8008088:	69b3      	ldr	r3, [r6, #24]
 800808a:	b913      	cbnz	r3, 8008092 <__sfp+0x16>
 800808c:	4630      	mov	r0, r6
 800808e:	f7ff ffbd 	bl	800800c <__sinit>
 8008092:	3648      	adds	r6, #72	; 0x48
 8008094:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008098:	3b01      	subs	r3, #1
 800809a:	d503      	bpl.n	80080a4 <__sfp+0x28>
 800809c:	6833      	ldr	r3, [r6, #0]
 800809e:	b30b      	cbz	r3, 80080e4 <__sfp+0x68>
 80080a0:	6836      	ldr	r6, [r6, #0]
 80080a2:	e7f7      	b.n	8008094 <__sfp+0x18>
 80080a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080a8:	b9d5      	cbnz	r5, 80080e0 <__sfp+0x64>
 80080aa:	4b16      	ldr	r3, [pc, #88]	; (8008104 <__sfp+0x88>)
 80080ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080b0:	60e3      	str	r3, [r4, #12]
 80080b2:	6665      	str	r5, [r4, #100]	; 0x64
 80080b4:	f000 f84c 	bl	8008150 <__retarget_lock_init_recursive>
 80080b8:	f7ff ff96 	bl	8007fe8 <__sfp_lock_release>
 80080bc:	2208      	movs	r2, #8
 80080be:	4629      	mov	r1, r5
 80080c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080c8:	6025      	str	r5, [r4, #0]
 80080ca:	61a5      	str	r5, [r4, #24]
 80080cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080d0:	f7fe fc48 	bl	8006964 <memset>
 80080d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080dc:	4620      	mov	r0, r4
 80080de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080e0:	3468      	adds	r4, #104	; 0x68
 80080e2:	e7d9      	b.n	8008098 <__sfp+0x1c>
 80080e4:	2104      	movs	r1, #4
 80080e6:	4638      	mov	r0, r7
 80080e8:	f7ff ff62 	bl	8007fb0 <__sfmoreglue>
 80080ec:	4604      	mov	r4, r0
 80080ee:	6030      	str	r0, [r6, #0]
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d1d5      	bne.n	80080a0 <__sfp+0x24>
 80080f4:	f7ff ff78 	bl	8007fe8 <__sfp_lock_release>
 80080f8:	230c      	movs	r3, #12
 80080fa:	603b      	str	r3, [r7, #0]
 80080fc:	e7ee      	b.n	80080dc <__sfp+0x60>
 80080fe:	bf00      	nop
 8008100:	0800ab90 	.word	0x0800ab90
 8008104:	ffff0001 	.word	0xffff0001

08008108 <_fwalk_reent>:
 8008108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800810c:	4606      	mov	r6, r0
 800810e:	4688      	mov	r8, r1
 8008110:	2700      	movs	r7, #0
 8008112:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008116:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800811a:	f1b9 0901 	subs.w	r9, r9, #1
 800811e:	d505      	bpl.n	800812c <_fwalk_reent+0x24>
 8008120:	6824      	ldr	r4, [r4, #0]
 8008122:	2c00      	cmp	r4, #0
 8008124:	d1f7      	bne.n	8008116 <_fwalk_reent+0xe>
 8008126:	4638      	mov	r0, r7
 8008128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800812c:	89ab      	ldrh	r3, [r5, #12]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d907      	bls.n	8008142 <_fwalk_reent+0x3a>
 8008132:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008136:	3301      	adds	r3, #1
 8008138:	d003      	beq.n	8008142 <_fwalk_reent+0x3a>
 800813a:	4629      	mov	r1, r5
 800813c:	4630      	mov	r0, r6
 800813e:	47c0      	blx	r8
 8008140:	4307      	orrs	r7, r0
 8008142:	3568      	adds	r5, #104	; 0x68
 8008144:	e7e9      	b.n	800811a <_fwalk_reent+0x12>
	...

08008148 <_localeconv_r>:
 8008148:	4800      	ldr	r0, [pc, #0]	; (800814c <_localeconv_r+0x4>)
 800814a:	4770      	bx	lr
 800814c:	20000164 	.word	0x20000164

08008150 <__retarget_lock_init_recursive>:
 8008150:	4770      	bx	lr

08008152 <__retarget_lock_acquire_recursive>:
 8008152:	4770      	bx	lr

08008154 <__retarget_lock_release_recursive>:
 8008154:	4770      	bx	lr
	...

08008158 <malloc>:
 8008158:	4b02      	ldr	r3, [pc, #8]	; (8008164 <malloc+0xc>)
 800815a:	4601      	mov	r1, r0
 800815c:	6818      	ldr	r0, [r3, #0]
 800815e:	f000 bbfb 	b.w	8008958 <_malloc_r>
 8008162:	bf00      	nop
 8008164:	20000010 	.word	0x20000010

08008168 <memchr>:
 8008168:	4603      	mov	r3, r0
 800816a:	b510      	push	{r4, lr}
 800816c:	b2c9      	uxtb	r1, r1
 800816e:	4402      	add	r2, r0
 8008170:	4293      	cmp	r3, r2
 8008172:	4618      	mov	r0, r3
 8008174:	d101      	bne.n	800817a <memchr+0x12>
 8008176:	2000      	movs	r0, #0
 8008178:	e003      	b.n	8008182 <memchr+0x1a>
 800817a:	7804      	ldrb	r4, [r0, #0]
 800817c:	3301      	adds	r3, #1
 800817e:	428c      	cmp	r4, r1
 8008180:	d1f6      	bne.n	8008170 <memchr+0x8>
 8008182:	bd10      	pop	{r4, pc}

08008184 <memcpy>:
 8008184:	440a      	add	r2, r1
 8008186:	4291      	cmp	r1, r2
 8008188:	f100 33ff 	add.w	r3, r0, #4294967295
 800818c:	d100      	bne.n	8008190 <memcpy+0xc>
 800818e:	4770      	bx	lr
 8008190:	b510      	push	{r4, lr}
 8008192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008196:	4291      	cmp	r1, r2
 8008198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800819c:	d1f9      	bne.n	8008192 <memcpy+0xe>
 800819e:	bd10      	pop	{r4, pc}

080081a0 <_Balloc>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081a4:	4604      	mov	r4, r0
 80081a6:	460d      	mov	r5, r1
 80081a8:	b976      	cbnz	r6, 80081c8 <_Balloc+0x28>
 80081aa:	2010      	movs	r0, #16
 80081ac:	f7ff ffd4 	bl	8008158 <malloc>
 80081b0:	4602      	mov	r2, r0
 80081b2:	6260      	str	r0, [r4, #36]	; 0x24
 80081b4:	b920      	cbnz	r0, 80081c0 <_Balloc+0x20>
 80081b6:	2166      	movs	r1, #102	; 0x66
 80081b8:	4b17      	ldr	r3, [pc, #92]	; (8008218 <_Balloc+0x78>)
 80081ba:	4818      	ldr	r0, [pc, #96]	; (800821c <_Balloc+0x7c>)
 80081bc:	f000 fea4 	bl	8008f08 <__assert_func>
 80081c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081c4:	6006      	str	r6, [r0, #0]
 80081c6:	60c6      	str	r6, [r0, #12]
 80081c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081ca:	68f3      	ldr	r3, [r6, #12]
 80081cc:	b183      	cbz	r3, 80081f0 <_Balloc+0x50>
 80081ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081d6:	b9b8      	cbnz	r0, 8008208 <_Balloc+0x68>
 80081d8:	2101      	movs	r1, #1
 80081da:	fa01 f605 	lsl.w	r6, r1, r5
 80081de:	1d72      	adds	r2, r6, #5
 80081e0:	4620      	mov	r0, r4
 80081e2:	0092      	lsls	r2, r2, #2
 80081e4:	f000 fb5e 	bl	80088a4 <_calloc_r>
 80081e8:	b160      	cbz	r0, 8008204 <_Balloc+0x64>
 80081ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081ee:	e00e      	b.n	800820e <_Balloc+0x6e>
 80081f0:	2221      	movs	r2, #33	; 0x21
 80081f2:	2104      	movs	r1, #4
 80081f4:	4620      	mov	r0, r4
 80081f6:	f000 fb55 	bl	80088a4 <_calloc_r>
 80081fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081fc:	60f0      	str	r0, [r6, #12]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d1e4      	bne.n	80081ce <_Balloc+0x2e>
 8008204:	2000      	movs	r0, #0
 8008206:	bd70      	pop	{r4, r5, r6, pc}
 8008208:	6802      	ldr	r2, [r0, #0]
 800820a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800820e:	2300      	movs	r3, #0
 8008210:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008214:	e7f7      	b.n	8008206 <_Balloc+0x66>
 8008216:	bf00      	nop
 8008218:	0800abd5 	.word	0x0800abd5
 800821c:	0800acbc 	.word	0x0800acbc

08008220 <_Bfree>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008224:	4605      	mov	r5, r0
 8008226:	460c      	mov	r4, r1
 8008228:	b976      	cbnz	r6, 8008248 <_Bfree+0x28>
 800822a:	2010      	movs	r0, #16
 800822c:	f7ff ff94 	bl	8008158 <malloc>
 8008230:	4602      	mov	r2, r0
 8008232:	6268      	str	r0, [r5, #36]	; 0x24
 8008234:	b920      	cbnz	r0, 8008240 <_Bfree+0x20>
 8008236:	218a      	movs	r1, #138	; 0x8a
 8008238:	4b08      	ldr	r3, [pc, #32]	; (800825c <_Bfree+0x3c>)
 800823a:	4809      	ldr	r0, [pc, #36]	; (8008260 <_Bfree+0x40>)
 800823c:	f000 fe64 	bl	8008f08 <__assert_func>
 8008240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008244:	6006      	str	r6, [r0, #0]
 8008246:	60c6      	str	r6, [r0, #12]
 8008248:	b13c      	cbz	r4, 800825a <_Bfree+0x3a>
 800824a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800824c:	6862      	ldr	r2, [r4, #4]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008254:	6021      	str	r1, [r4, #0]
 8008256:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800825a:	bd70      	pop	{r4, r5, r6, pc}
 800825c:	0800abd5 	.word	0x0800abd5
 8008260:	0800acbc 	.word	0x0800acbc

08008264 <__multadd>:
 8008264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008268:	4698      	mov	r8, r3
 800826a:	460c      	mov	r4, r1
 800826c:	2300      	movs	r3, #0
 800826e:	690e      	ldr	r6, [r1, #16]
 8008270:	4607      	mov	r7, r0
 8008272:	f101 0014 	add.w	r0, r1, #20
 8008276:	6805      	ldr	r5, [r0, #0]
 8008278:	3301      	adds	r3, #1
 800827a:	b2a9      	uxth	r1, r5
 800827c:	fb02 8101 	mla	r1, r2, r1, r8
 8008280:	0c2d      	lsrs	r5, r5, #16
 8008282:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008286:	fb02 c505 	mla	r5, r2, r5, ip
 800828a:	b289      	uxth	r1, r1
 800828c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008290:	429e      	cmp	r6, r3
 8008292:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008296:	f840 1b04 	str.w	r1, [r0], #4
 800829a:	dcec      	bgt.n	8008276 <__multadd+0x12>
 800829c:	f1b8 0f00 	cmp.w	r8, #0
 80082a0:	d022      	beq.n	80082e8 <__multadd+0x84>
 80082a2:	68a3      	ldr	r3, [r4, #8]
 80082a4:	42b3      	cmp	r3, r6
 80082a6:	dc19      	bgt.n	80082dc <__multadd+0x78>
 80082a8:	6861      	ldr	r1, [r4, #4]
 80082aa:	4638      	mov	r0, r7
 80082ac:	3101      	adds	r1, #1
 80082ae:	f7ff ff77 	bl	80081a0 <_Balloc>
 80082b2:	4605      	mov	r5, r0
 80082b4:	b928      	cbnz	r0, 80082c2 <__multadd+0x5e>
 80082b6:	4602      	mov	r2, r0
 80082b8:	21b5      	movs	r1, #181	; 0xb5
 80082ba:	4b0d      	ldr	r3, [pc, #52]	; (80082f0 <__multadd+0x8c>)
 80082bc:	480d      	ldr	r0, [pc, #52]	; (80082f4 <__multadd+0x90>)
 80082be:	f000 fe23 	bl	8008f08 <__assert_func>
 80082c2:	6922      	ldr	r2, [r4, #16]
 80082c4:	f104 010c 	add.w	r1, r4, #12
 80082c8:	3202      	adds	r2, #2
 80082ca:	0092      	lsls	r2, r2, #2
 80082cc:	300c      	adds	r0, #12
 80082ce:	f7ff ff59 	bl	8008184 <memcpy>
 80082d2:	4621      	mov	r1, r4
 80082d4:	4638      	mov	r0, r7
 80082d6:	f7ff ffa3 	bl	8008220 <_Bfree>
 80082da:	462c      	mov	r4, r5
 80082dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80082e0:	3601      	adds	r6, #1
 80082e2:	f8c3 8014 	str.w	r8, [r3, #20]
 80082e6:	6126      	str	r6, [r4, #16]
 80082e8:	4620      	mov	r0, r4
 80082ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ee:	bf00      	nop
 80082f0:	0800ac4b 	.word	0x0800ac4b
 80082f4:	0800acbc 	.word	0x0800acbc

080082f8 <__hi0bits>:
 80082f8:	0c02      	lsrs	r2, r0, #16
 80082fa:	0412      	lsls	r2, r2, #16
 80082fc:	4603      	mov	r3, r0
 80082fe:	b9ca      	cbnz	r2, 8008334 <__hi0bits+0x3c>
 8008300:	0403      	lsls	r3, r0, #16
 8008302:	2010      	movs	r0, #16
 8008304:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008308:	bf04      	itt	eq
 800830a:	021b      	lsleq	r3, r3, #8
 800830c:	3008      	addeq	r0, #8
 800830e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008312:	bf04      	itt	eq
 8008314:	011b      	lsleq	r3, r3, #4
 8008316:	3004      	addeq	r0, #4
 8008318:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800831c:	bf04      	itt	eq
 800831e:	009b      	lsleq	r3, r3, #2
 8008320:	3002      	addeq	r0, #2
 8008322:	2b00      	cmp	r3, #0
 8008324:	db05      	blt.n	8008332 <__hi0bits+0x3a>
 8008326:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800832a:	f100 0001 	add.w	r0, r0, #1
 800832e:	bf08      	it	eq
 8008330:	2020      	moveq	r0, #32
 8008332:	4770      	bx	lr
 8008334:	2000      	movs	r0, #0
 8008336:	e7e5      	b.n	8008304 <__hi0bits+0xc>

08008338 <__lo0bits>:
 8008338:	6803      	ldr	r3, [r0, #0]
 800833a:	4602      	mov	r2, r0
 800833c:	f013 0007 	ands.w	r0, r3, #7
 8008340:	d00b      	beq.n	800835a <__lo0bits+0x22>
 8008342:	07d9      	lsls	r1, r3, #31
 8008344:	d422      	bmi.n	800838c <__lo0bits+0x54>
 8008346:	0798      	lsls	r0, r3, #30
 8008348:	bf49      	itett	mi
 800834a:	085b      	lsrmi	r3, r3, #1
 800834c:	089b      	lsrpl	r3, r3, #2
 800834e:	2001      	movmi	r0, #1
 8008350:	6013      	strmi	r3, [r2, #0]
 8008352:	bf5c      	itt	pl
 8008354:	2002      	movpl	r0, #2
 8008356:	6013      	strpl	r3, [r2, #0]
 8008358:	4770      	bx	lr
 800835a:	b299      	uxth	r1, r3
 800835c:	b909      	cbnz	r1, 8008362 <__lo0bits+0x2a>
 800835e:	2010      	movs	r0, #16
 8008360:	0c1b      	lsrs	r3, r3, #16
 8008362:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008366:	bf04      	itt	eq
 8008368:	0a1b      	lsreq	r3, r3, #8
 800836a:	3008      	addeq	r0, #8
 800836c:	0719      	lsls	r1, r3, #28
 800836e:	bf04      	itt	eq
 8008370:	091b      	lsreq	r3, r3, #4
 8008372:	3004      	addeq	r0, #4
 8008374:	0799      	lsls	r1, r3, #30
 8008376:	bf04      	itt	eq
 8008378:	089b      	lsreq	r3, r3, #2
 800837a:	3002      	addeq	r0, #2
 800837c:	07d9      	lsls	r1, r3, #31
 800837e:	d403      	bmi.n	8008388 <__lo0bits+0x50>
 8008380:	085b      	lsrs	r3, r3, #1
 8008382:	f100 0001 	add.w	r0, r0, #1
 8008386:	d003      	beq.n	8008390 <__lo0bits+0x58>
 8008388:	6013      	str	r3, [r2, #0]
 800838a:	4770      	bx	lr
 800838c:	2000      	movs	r0, #0
 800838e:	4770      	bx	lr
 8008390:	2020      	movs	r0, #32
 8008392:	4770      	bx	lr

08008394 <__i2b>:
 8008394:	b510      	push	{r4, lr}
 8008396:	460c      	mov	r4, r1
 8008398:	2101      	movs	r1, #1
 800839a:	f7ff ff01 	bl	80081a0 <_Balloc>
 800839e:	4602      	mov	r2, r0
 80083a0:	b928      	cbnz	r0, 80083ae <__i2b+0x1a>
 80083a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083a6:	4b04      	ldr	r3, [pc, #16]	; (80083b8 <__i2b+0x24>)
 80083a8:	4804      	ldr	r0, [pc, #16]	; (80083bc <__i2b+0x28>)
 80083aa:	f000 fdad 	bl	8008f08 <__assert_func>
 80083ae:	2301      	movs	r3, #1
 80083b0:	6144      	str	r4, [r0, #20]
 80083b2:	6103      	str	r3, [r0, #16]
 80083b4:	bd10      	pop	{r4, pc}
 80083b6:	bf00      	nop
 80083b8:	0800ac4b 	.word	0x0800ac4b
 80083bc:	0800acbc 	.word	0x0800acbc

080083c0 <__multiply>:
 80083c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c4:	4614      	mov	r4, r2
 80083c6:	690a      	ldr	r2, [r1, #16]
 80083c8:	6923      	ldr	r3, [r4, #16]
 80083ca:	460d      	mov	r5, r1
 80083cc:	429a      	cmp	r2, r3
 80083ce:	bfbe      	ittt	lt
 80083d0:	460b      	movlt	r3, r1
 80083d2:	4625      	movlt	r5, r4
 80083d4:	461c      	movlt	r4, r3
 80083d6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80083da:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80083de:	68ab      	ldr	r3, [r5, #8]
 80083e0:	6869      	ldr	r1, [r5, #4]
 80083e2:	eb0a 0709 	add.w	r7, sl, r9
 80083e6:	42bb      	cmp	r3, r7
 80083e8:	b085      	sub	sp, #20
 80083ea:	bfb8      	it	lt
 80083ec:	3101      	addlt	r1, #1
 80083ee:	f7ff fed7 	bl	80081a0 <_Balloc>
 80083f2:	b930      	cbnz	r0, 8008402 <__multiply+0x42>
 80083f4:	4602      	mov	r2, r0
 80083f6:	f240 115d 	movw	r1, #349	; 0x15d
 80083fa:	4b41      	ldr	r3, [pc, #260]	; (8008500 <__multiply+0x140>)
 80083fc:	4841      	ldr	r0, [pc, #260]	; (8008504 <__multiply+0x144>)
 80083fe:	f000 fd83 	bl	8008f08 <__assert_func>
 8008402:	f100 0614 	add.w	r6, r0, #20
 8008406:	4633      	mov	r3, r6
 8008408:	2200      	movs	r2, #0
 800840a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800840e:	4543      	cmp	r3, r8
 8008410:	d31e      	bcc.n	8008450 <__multiply+0x90>
 8008412:	f105 0c14 	add.w	ip, r5, #20
 8008416:	f104 0314 	add.w	r3, r4, #20
 800841a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800841e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008422:	9202      	str	r2, [sp, #8]
 8008424:	ebac 0205 	sub.w	r2, ip, r5
 8008428:	3a15      	subs	r2, #21
 800842a:	f022 0203 	bic.w	r2, r2, #3
 800842e:	3204      	adds	r2, #4
 8008430:	f105 0115 	add.w	r1, r5, #21
 8008434:	458c      	cmp	ip, r1
 8008436:	bf38      	it	cc
 8008438:	2204      	movcc	r2, #4
 800843a:	9201      	str	r2, [sp, #4]
 800843c:	9a02      	ldr	r2, [sp, #8]
 800843e:	9303      	str	r3, [sp, #12]
 8008440:	429a      	cmp	r2, r3
 8008442:	d808      	bhi.n	8008456 <__multiply+0x96>
 8008444:	2f00      	cmp	r7, #0
 8008446:	dc55      	bgt.n	80084f4 <__multiply+0x134>
 8008448:	6107      	str	r7, [r0, #16]
 800844a:	b005      	add	sp, #20
 800844c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008450:	f843 2b04 	str.w	r2, [r3], #4
 8008454:	e7db      	b.n	800840e <__multiply+0x4e>
 8008456:	f8b3 a000 	ldrh.w	sl, [r3]
 800845a:	f1ba 0f00 	cmp.w	sl, #0
 800845e:	d020      	beq.n	80084a2 <__multiply+0xe2>
 8008460:	46b1      	mov	r9, r6
 8008462:	2200      	movs	r2, #0
 8008464:	f105 0e14 	add.w	lr, r5, #20
 8008468:	f85e 4b04 	ldr.w	r4, [lr], #4
 800846c:	f8d9 b000 	ldr.w	fp, [r9]
 8008470:	b2a1      	uxth	r1, r4
 8008472:	fa1f fb8b 	uxth.w	fp, fp
 8008476:	fb0a b101 	mla	r1, sl, r1, fp
 800847a:	4411      	add	r1, r2
 800847c:	f8d9 2000 	ldr.w	r2, [r9]
 8008480:	0c24      	lsrs	r4, r4, #16
 8008482:	0c12      	lsrs	r2, r2, #16
 8008484:	fb0a 2404 	mla	r4, sl, r4, r2
 8008488:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800848c:	b289      	uxth	r1, r1
 800848e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008492:	45f4      	cmp	ip, lr
 8008494:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008498:	f849 1b04 	str.w	r1, [r9], #4
 800849c:	d8e4      	bhi.n	8008468 <__multiply+0xa8>
 800849e:	9901      	ldr	r1, [sp, #4]
 80084a0:	5072      	str	r2, [r6, r1]
 80084a2:	9a03      	ldr	r2, [sp, #12]
 80084a4:	3304      	adds	r3, #4
 80084a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80084aa:	f1b9 0f00 	cmp.w	r9, #0
 80084ae:	d01f      	beq.n	80084f0 <__multiply+0x130>
 80084b0:	46b6      	mov	lr, r6
 80084b2:	f04f 0a00 	mov.w	sl, #0
 80084b6:	6834      	ldr	r4, [r6, #0]
 80084b8:	f105 0114 	add.w	r1, r5, #20
 80084bc:	880a      	ldrh	r2, [r1, #0]
 80084be:	f8be b002 	ldrh.w	fp, [lr, #2]
 80084c2:	b2a4      	uxth	r4, r4
 80084c4:	fb09 b202 	mla	r2, r9, r2, fp
 80084c8:	4492      	add	sl, r2
 80084ca:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80084ce:	f84e 4b04 	str.w	r4, [lr], #4
 80084d2:	f851 4b04 	ldr.w	r4, [r1], #4
 80084d6:	f8be 2000 	ldrh.w	r2, [lr]
 80084da:	0c24      	lsrs	r4, r4, #16
 80084dc:	fb09 2404 	mla	r4, r9, r4, r2
 80084e0:	458c      	cmp	ip, r1
 80084e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80084e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80084ea:	d8e7      	bhi.n	80084bc <__multiply+0xfc>
 80084ec:	9a01      	ldr	r2, [sp, #4]
 80084ee:	50b4      	str	r4, [r6, r2]
 80084f0:	3604      	adds	r6, #4
 80084f2:	e7a3      	b.n	800843c <__multiply+0x7c>
 80084f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1a5      	bne.n	8008448 <__multiply+0x88>
 80084fc:	3f01      	subs	r7, #1
 80084fe:	e7a1      	b.n	8008444 <__multiply+0x84>
 8008500:	0800ac4b 	.word	0x0800ac4b
 8008504:	0800acbc 	.word	0x0800acbc

08008508 <__pow5mult>:
 8008508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800850c:	4615      	mov	r5, r2
 800850e:	f012 0203 	ands.w	r2, r2, #3
 8008512:	4606      	mov	r6, r0
 8008514:	460f      	mov	r7, r1
 8008516:	d007      	beq.n	8008528 <__pow5mult+0x20>
 8008518:	4c25      	ldr	r4, [pc, #148]	; (80085b0 <__pow5mult+0xa8>)
 800851a:	3a01      	subs	r2, #1
 800851c:	2300      	movs	r3, #0
 800851e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008522:	f7ff fe9f 	bl	8008264 <__multadd>
 8008526:	4607      	mov	r7, r0
 8008528:	10ad      	asrs	r5, r5, #2
 800852a:	d03d      	beq.n	80085a8 <__pow5mult+0xa0>
 800852c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800852e:	b97c      	cbnz	r4, 8008550 <__pow5mult+0x48>
 8008530:	2010      	movs	r0, #16
 8008532:	f7ff fe11 	bl	8008158 <malloc>
 8008536:	4602      	mov	r2, r0
 8008538:	6270      	str	r0, [r6, #36]	; 0x24
 800853a:	b928      	cbnz	r0, 8008548 <__pow5mult+0x40>
 800853c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008540:	4b1c      	ldr	r3, [pc, #112]	; (80085b4 <__pow5mult+0xac>)
 8008542:	481d      	ldr	r0, [pc, #116]	; (80085b8 <__pow5mult+0xb0>)
 8008544:	f000 fce0 	bl	8008f08 <__assert_func>
 8008548:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800854c:	6004      	str	r4, [r0, #0]
 800854e:	60c4      	str	r4, [r0, #12]
 8008550:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008558:	b94c      	cbnz	r4, 800856e <__pow5mult+0x66>
 800855a:	f240 2171 	movw	r1, #625	; 0x271
 800855e:	4630      	mov	r0, r6
 8008560:	f7ff ff18 	bl	8008394 <__i2b>
 8008564:	2300      	movs	r3, #0
 8008566:	4604      	mov	r4, r0
 8008568:	f8c8 0008 	str.w	r0, [r8, #8]
 800856c:	6003      	str	r3, [r0, #0]
 800856e:	f04f 0900 	mov.w	r9, #0
 8008572:	07eb      	lsls	r3, r5, #31
 8008574:	d50a      	bpl.n	800858c <__pow5mult+0x84>
 8008576:	4639      	mov	r1, r7
 8008578:	4622      	mov	r2, r4
 800857a:	4630      	mov	r0, r6
 800857c:	f7ff ff20 	bl	80083c0 <__multiply>
 8008580:	4680      	mov	r8, r0
 8008582:	4639      	mov	r1, r7
 8008584:	4630      	mov	r0, r6
 8008586:	f7ff fe4b 	bl	8008220 <_Bfree>
 800858a:	4647      	mov	r7, r8
 800858c:	106d      	asrs	r5, r5, #1
 800858e:	d00b      	beq.n	80085a8 <__pow5mult+0xa0>
 8008590:	6820      	ldr	r0, [r4, #0]
 8008592:	b938      	cbnz	r0, 80085a4 <__pow5mult+0x9c>
 8008594:	4622      	mov	r2, r4
 8008596:	4621      	mov	r1, r4
 8008598:	4630      	mov	r0, r6
 800859a:	f7ff ff11 	bl	80083c0 <__multiply>
 800859e:	6020      	str	r0, [r4, #0]
 80085a0:	f8c0 9000 	str.w	r9, [r0]
 80085a4:	4604      	mov	r4, r0
 80085a6:	e7e4      	b.n	8008572 <__pow5mult+0x6a>
 80085a8:	4638      	mov	r0, r7
 80085aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ae:	bf00      	nop
 80085b0:	0800ae10 	.word	0x0800ae10
 80085b4:	0800abd5 	.word	0x0800abd5
 80085b8:	0800acbc 	.word	0x0800acbc

080085bc <__lshift>:
 80085bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c0:	460c      	mov	r4, r1
 80085c2:	4607      	mov	r7, r0
 80085c4:	4691      	mov	r9, r2
 80085c6:	6923      	ldr	r3, [r4, #16]
 80085c8:	6849      	ldr	r1, [r1, #4]
 80085ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085ce:	68a3      	ldr	r3, [r4, #8]
 80085d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085d4:	f108 0601 	add.w	r6, r8, #1
 80085d8:	42b3      	cmp	r3, r6
 80085da:	db0b      	blt.n	80085f4 <__lshift+0x38>
 80085dc:	4638      	mov	r0, r7
 80085de:	f7ff fddf 	bl	80081a0 <_Balloc>
 80085e2:	4605      	mov	r5, r0
 80085e4:	b948      	cbnz	r0, 80085fa <__lshift+0x3e>
 80085e6:	4602      	mov	r2, r0
 80085e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80085ec:	4b27      	ldr	r3, [pc, #156]	; (800868c <__lshift+0xd0>)
 80085ee:	4828      	ldr	r0, [pc, #160]	; (8008690 <__lshift+0xd4>)
 80085f0:	f000 fc8a 	bl	8008f08 <__assert_func>
 80085f4:	3101      	adds	r1, #1
 80085f6:	005b      	lsls	r3, r3, #1
 80085f8:	e7ee      	b.n	80085d8 <__lshift+0x1c>
 80085fa:	2300      	movs	r3, #0
 80085fc:	f100 0114 	add.w	r1, r0, #20
 8008600:	f100 0210 	add.w	r2, r0, #16
 8008604:	4618      	mov	r0, r3
 8008606:	4553      	cmp	r3, sl
 8008608:	db33      	blt.n	8008672 <__lshift+0xb6>
 800860a:	6920      	ldr	r0, [r4, #16]
 800860c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008610:	f104 0314 	add.w	r3, r4, #20
 8008614:	f019 091f 	ands.w	r9, r9, #31
 8008618:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800861c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008620:	d02b      	beq.n	800867a <__lshift+0xbe>
 8008622:	468a      	mov	sl, r1
 8008624:	2200      	movs	r2, #0
 8008626:	f1c9 0e20 	rsb	lr, r9, #32
 800862a:	6818      	ldr	r0, [r3, #0]
 800862c:	fa00 f009 	lsl.w	r0, r0, r9
 8008630:	4302      	orrs	r2, r0
 8008632:	f84a 2b04 	str.w	r2, [sl], #4
 8008636:	f853 2b04 	ldr.w	r2, [r3], #4
 800863a:	459c      	cmp	ip, r3
 800863c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008640:	d8f3      	bhi.n	800862a <__lshift+0x6e>
 8008642:	ebac 0304 	sub.w	r3, ip, r4
 8008646:	3b15      	subs	r3, #21
 8008648:	f023 0303 	bic.w	r3, r3, #3
 800864c:	3304      	adds	r3, #4
 800864e:	f104 0015 	add.w	r0, r4, #21
 8008652:	4584      	cmp	ip, r0
 8008654:	bf38      	it	cc
 8008656:	2304      	movcc	r3, #4
 8008658:	50ca      	str	r2, [r1, r3]
 800865a:	b10a      	cbz	r2, 8008660 <__lshift+0xa4>
 800865c:	f108 0602 	add.w	r6, r8, #2
 8008660:	3e01      	subs	r6, #1
 8008662:	4638      	mov	r0, r7
 8008664:	4621      	mov	r1, r4
 8008666:	612e      	str	r6, [r5, #16]
 8008668:	f7ff fdda 	bl	8008220 <_Bfree>
 800866c:	4628      	mov	r0, r5
 800866e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008672:	f842 0f04 	str.w	r0, [r2, #4]!
 8008676:	3301      	adds	r3, #1
 8008678:	e7c5      	b.n	8008606 <__lshift+0x4a>
 800867a:	3904      	subs	r1, #4
 800867c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008680:	459c      	cmp	ip, r3
 8008682:	f841 2f04 	str.w	r2, [r1, #4]!
 8008686:	d8f9      	bhi.n	800867c <__lshift+0xc0>
 8008688:	e7ea      	b.n	8008660 <__lshift+0xa4>
 800868a:	bf00      	nop
 800868c:	0800ac4b 	.word	0x0800ac4b
 8008690:	0800acbc 	.word	0x0800acbc

08008694 <__mcmp>:
 8008694:	4603      	mov	r3, r0
 8008696:	690a      	ldr	r2, [r1, #16]
 8008698:	6900      	ldr	r0, [r0, #16]
 800869a:	b530      	push	{r4, r5, lr}
 800869c:	1a80      	subs	r0, r0, r2
 800869e:	d10d      	bne.n	80086bc <__mcmp+0x28>
 80086a0:	3314      	adds	r3, #20
 80086a2:	3114      	adds	r1, #20
 80086a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80086a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80086ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80086b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80086b4:	4295      	cmp	r5, r2
 80086b6:	d002      	beq.n	80086be <__mcmp+0x2a>
 80086b8:	d304      	bcc.n	80086c4 <__mcmp+0x30>
 80086ba:	2001      	movs	r0, #1
 80086bc:	bd30      	pop	{r4, r5, pc}
 80086be:	42a3      	cmp	r3, r4
 80086c0:	d3f4      	bcc.n	80086ac <__mcmp+0x18>
 80086c2:	e7fb      	b.n	80086bc <__mcmp+0x28>
 80086c4:	f04f 30ff 	mov.w	r0, #4294967295
 80086c8:	e7f8      	b.n	80086bc <__mcmp+0x28>
	...

080086cc <__mdiff>:
 80086cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d0:	460c      	mov	r4, r1
 80086d2:	4606      	mov	r6, r0
 80086d4:	4611      	mov	r1, r2
 80086d6:	4620      	mov	r0, r4
 80086d8:	4692      	mov	sl, r2
 80086da:	f7ff ffdb 	bl	8008694 <__mcmp>
 80086de:	1e05      	subs	r5, r0, #0
 80086e0:	d111      	bne.n	8008706 <__mdiff+0x3a>
 80086e2:	4629      	mov	r1, r5
 80086e4:	4630      	mov	r0, r6
 80086e6:	f7ff fd5b 	bl	80081a0 <_Balloc>
 80086ea:	4602      	mov	r2, r0
 80086ec:	b928      	cbnz	r0, 80086fa <__mdiff+0x2e>
 80086ee:	f240 2132 	movw	r1, #562	; 0x232
 80086f2:	4b3c      	ldr	r3, [pc, #240]	; (80087e4 <__mdiff+0x118>)
 80086f4:	483c      	ldr	r0, [pc, #240]	; (80087e8 <__mdiff+0x11c>)
 80086f6:	f000 fc07 	bl	8008f08 <__assert_func>
 80086fa:	2301      	movs	r3, #1
 80086fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008700:	4610      	mov	r0, r2
 8008702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008706:	bfa4      	itt	ge
 8008708:	4653      	movge	r3, sl
 800870a:	46a2      	movge	sl, r4
 800870c:	4630      	mov	r0, r6
 800870e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008712:	bfa6      	itte	ge
 8008714:	461c      	movge	r4, r3
 8008716:	2500      	movge	r5, #0
 8008718:	2501      	movlt	r5, #1
 800871a:	f7ff fd41 	bl	80081a0 <_Balloc>
 800871e:	4602      	mov	r2, r0
 8008720:	b918      	cbnz	r0, 800872a <__mdiff+0x5e>
 8008722:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008726:	4b2f      	ldr	r3, [pc, #188]	; (80087e4 <__mdiff+0x118>)
 8008728:	e7e4      	b.n	80086f4 <__mdiff+0x28>
 800872a:	f100 0814 	add.w	r8, r0, #20
 800872e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008732:	60c5      	str	r5, [r0, #12]
 8008734:	f04f 0c00 	mov.w	ip, #0
 8008738:	f10a 0514 	add.w	r5, sl, #20
 800873c:	f10a 0010 	add.w	r0, sl, #16
 8008740:	46c2      	mov	sl, r8
 8008742:	6926      	ldr	r6, [r4, #16]
 8008744:	f104 0914 	add.w	r9, r4, #20
 8008748:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800874c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008750:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008754:	f859 3b04 	ldr.w	r3, [r9], #4
 8008758:	fa1f f18b 	uxth.w	r1, fp
 800875c:	4461      	add	r1, ip
 800875e:	fa1f fc83 	uxth.w	ip, r3
 8008762:	0c1b      	lsrs	r3, r3, #16
 8008764:	eba1 010c 	sub.w	r1, r1, ip
 8008768:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800876c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008770:	b289      	uxth	r1, r1
 8008772:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008776:	454e      	cmp	r6, r9
 8008778:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800877c:	f84a 3b04 	str.w	r3, [sl], #4
 8008780:	d8e6      	bhi.n	8008750 <__mdiff+0x84>
 8008782:	1b33      	subs	r3, r6, r4
 8008784:	3b15      	subs	r3, #21
 8008786:	f023 0303 	bic.w	r3, r3, #3
 800878a:	3415      	adds	r4, #21
 800878c:	3304      	adds	r3, #4
 800878e:	42a6      	cmp	r6, r4
 8008790:	bf38      	it	cc
 8008792:	2304      	movcc	r3, #4
 8008794:	441d      	add	r5, r3
 8008796:	4443      	add	r3, r8
 8008798:	461e      	mov	r6, r3
 800879a:	462c      	mov	r4, r5
 800879c:	4574      	cmp	r4, lr
 800879e:	d30e      	bcc.n	80087be <__mdiff+0xf2>
 80087a0:	f10e 0103 	add.w	r1, lr, #3
 80087a4:	1b49      	subs	r1, r1, r5
 80087a6:	f021 0103 	bic.w	r1, r1, #3
 80087aa:	3d03      	subs	r5, #3
 80087ac:	45ae      	cmp	lr, r5
 80087ae:	bf38      	it	cc
 80087b0:	2100      	movcc	r1, #0
 80087b2:	4419      	add	r1, r3
 80087b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80087b8:	b18b      	cbz	r3, 80087de <__mdiff+0x112>
 80087ba:	6117      	str	r7, [r2, #16]
 80087bc:	e7a0      	b.n	8008700 <__mdiff+0x34>
 80087be:	f854 8b04 	ldr.w	r8, [r4], #4
 80087c2:	fa1f f188 	uxth.w	r1, r8
 80087c6:	4461      	add	r1, ip
 80087c8:	1408      	asrs	r0, r1, #16
 80087ca:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80087ce:	b289      	uxth	r1, r1
 80087d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80087d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80087d8:	f846 1b04 	str.w	r1, [r6], #4
 80087dc:	e7de      	b.n	800879c <__mdiff+0xd0>
 80087de:	3f01      	subs	r7, #1
 80087e0:	e7e8      	b.n	80087b4 <__mdiff+0xe8>
 80087e2:	bf00      	nop
 80087e4:	0800ac4b 	.word	0x0800ac4b
 80087e8:	0800acbc 	.word	0x0800acbc

080087ec <__d2b>:
 80087ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80087f0:	2101      	movs	r1, #1
 80087f2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80087f6:	4690      	mov	r8, r2
 80087f8:	461d      	mov	r5, r3
 80087fa:	f7ff fcd1 	bl	80081a0 <_Balloc>
 80087fe:	4604      	mov	r4, r0
 8008800:	b930      	cbnz	r0, 8008810 <__d2b+0x24>
 8008802:	4602      	mov	r2, r0
 8008804:	f240 310a 	movw	r1, #778	; 0x30a
 8008808:	4b24      	ldr	r3, [pc, #144]	; (800889c <__d2b+0xb0>)
 800880a:	4825      	ldr	r0, [pc, #148]	; (80088a0 <__d2b+0xb4>)
 800880c:	f000 fb7c 	bl	8008f08 <__assert_func>
 8008810:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008814:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008818:	bb2d      	cbnz	r5, 8008866 <__d2b+0x7a>
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	f1b8 0300 	subs.w	r3, r8, #0
 8008820:	d026      	beq.n	8008870 <__d2b+0x84>
 8008822:	4668      	mov	r0, sp
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	f7ff fd87 	bl	8008338 <__lo0bits>
 800882a:	9900      	ldr	r1, [sp, #0]
 800882c:	b1f0      	cbz	r0, 800886c <__d2b+0x80>
 800882e:	9a01      	ldr	r2, [sp, #4]
 8008830:	f1c0 0320 	rsb	r3, r0, #32
 8008834:	fa02 f303 	lsl.w	r3, r2, r3
 8008838:	430b      	orrs	r3, r1
 800883a:	40c2      	lsrs	r2, r0
 800883c:	6163      	str	r3, [r4, #20]
 800883e:	9201      	str	r2, [sp, #4]
 8008840:	9b01      	ldr	r3, [sp, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	bf14      	ite	ne
 8008846:	2102      	movne	r1, #2
 8008848:	2101      	moveq	r1, #1
 800884a:	61a3      	str	r3, [r4, #24]
 800884c:	6121      	str	r1, [r4, #16]
 800884e:	b1c5      	cbz	r5, 8008882 <__d2b+0x96>
 8008850:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008854:	4405      	add	r5, r0
 8008856:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800885a:	603d      	str	r5, [r7, #0]
 800885c:	6030      	str	r0, [r6, #0]
 800885e:	4620      	mov	r0, r4
 8008860:	b002      	add	sp, #8
 8008862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800886a:	e7d6      	b.n	800881a <__d2b+0x2e>
 800886c:	6161      	str	r1, [r4, #20]
 800886e:	e7e7      	b.n	8008840 <__d2b+0x54>
 8008870:	a801      	add	r0, sp, #4
 8008872:	f7ff fd61 	bl	8008338 <__lo0bits>
 8008876:	2101      	movs	r1, #1
 8008878:	9b01      	ldr	r3, [sp, #4]
 800887a:	6121      	str	r1, [r4, #16]
 800887c:	6163      	str	r3, [r4, #20]
 800887e:	3020      	adds	r0, #32
 8008880:	e7e5      	b.n	800884e <__d2b+0x62>
 8008882:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8008886:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800888a:	6038      	str	r0, [r7, #0]
 800888c:	6918      	ldr	r0, [r3, #16]
 800888e:	f7ff fd33 	bl	80082f8 <__hi0bits>
 8008892:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8008896:	6031      	str	r1, [r6, #0]
 8008898:	e7e1      	b.n	800885e <__d2b+0x72>
 800889a:	bf00      	nop
 800889c:	0800ac4b 	.word	0x0800ac4b
 80088a0:	0800acbc 	.word	0x0800acbc

080088a4 <_calloc_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	fb02 f501 	mul.w	r5, r2, r1
 80088aa:	4629      	mov	r1, r5
 80088ac:	f000 f854 	bl	8008958 <_malloc_r>
 80088b0:	4604      	mov	r4, r0
 80088b2:	b118      	cbz	r0, 80088bc <_calloc_r+0x18>
 80088b4:	462a      	mov	r2, r5
 80088b6:	2100      	movs	r1, #0
 80088b8:	f7fe f854 	bl	8006964 <memset>
 80088bc:	4620      	mov	r0, r4
 80088be:	bd38      	pop	{r3, r4, r5, pc}

080088c0 <_free_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4605      	mov	r5, r0
 80088c4:	2900      	cmp	r1, #0
 80088c6:	d043      	beq.n	8008950 <_free_r+0x90>
 80088c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088cc:	1f0c      	subs	r4, r1, #4
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	bfb8      	it	lt
 80088d2:	18e4      	addlt	r4, r4, r3
 80088d4:	f000 fca2 	bl	800921c <__malloc_lock>
 80088d8:	4a1e      	ldr	r2, [pc, #120]	; (8008954 <_free_r+0x94>)
 80088da:	6813      	ldr	r3, [r2, #0]
 80088dc:	4610      	mov	r0, r2
 80088de:	b933      	cbnz	r3, 80088ee <_free_r+0x2e>
 80088e0:	6063      	str	r3, [r4, #4]
 80088e2:	6014      	str	r4, [r2, #0]
 80088e4:	4628      	mov	r0, r5
 80088e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088ea:	f000 bc9d 	b.w	8009228 <__malloc_unlock>
 80088ee:	42a3      	cmp	r3, r4
 80088f0:	d90a      	bls.n	8008908 <_free_r+0x48>
 80088f2:	6821      	ldr	r1, [r4, #0]
 80088f4:	1862      	adds	r2, r4, r1
 80088f6:	4293      	cmp	r3, r2
 80088f8:	bf01      	itttt	eq
 80088fa:	681a      	ldreq	r2, [r3, #0]
 80088fc:	685b      	ldreq	r3, [r3, #4]
 80088fe:	1852      	addeq	r2, r2, r1
 8008900:	6022      	streq	r2, [r4, #0]
 8008902:	6063      	str	r3, [r4, #4]
 8008904:	6004      	str	r4, [r0, #0]
 8008906:	e7ed      	b.n	80088e4 <_free_r+0x24>
 8008908:	461a      	mov	r2, r3
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	b10b      	cbz	r3, 8008912 <_free_r+0x52>
 800890e:	42a3      	cmp	r3, r4
 8008910:	d9fa      	bls.n	8008908 <_free_r+0x48>
 8008912:	6811      	ldr	r1, [r2, #0]
 8008914:	1850      	adds	r0, r2, r1
 8008916:	42a0      	cmp	r0, r4
 8008918:	d10b      	bne.n	8008932 <_free_r+0x72>
 800891a:	6820      	ldr	r0, [r4, #0]
 800891c:	4401      	add	r1, r0
 800891e:	1850      	adds	r0, r2, r1
 8008920:	4283      	cmp	r3, r0
 8008922:	6011      	str	r1, [r2, #0]
 8008924:	d1de      	bne.n	80088e4 <_free_r+0x24>
 8008926:	6818      	ldr	r0, [r3, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	4401      	add	r1, r0
 800892c:	6011      	str	r1, [r2, #0]
 800892e:	6053      	str	r3, [r2, #4]
 8008930:	e7d8      	b.n	80088e4 <_free_r+0x24>
 8008932:	d902      	bls.n	800893a <_free_r+0x7a>
 8008934:	230c      	movs	r3, #12
 8008936:	602b      	str	r3, [r5, #0]
 8008938:	e7d4      	b.n	80088e4 <_free_r+0x24>
 800893a:	6820      	ldr	r0, [r4, #0]
 800893c:	1821      	adds	r1, r4, r0
 800893e:	428b      	cmp	r3, r1
 8008940:	bf01      	itttt	eq
 8008942:	6819      	ldreq	r1, [r3, #0]
 8008944:	685b      	ldreq	r3, [r3, #4]
 8008946:	1809      	addeq	r1, r1, r0
 8008948:	6021      	streq	r1, [r4, #0]
 800894a:	6063      	str	r3, [r4, #4]
 800894c:	6054      	str	r4, [r2, #4]
 800894e:	e7c9      	b.n	80088e4 <_free_r+0x24>
 8008950:	bd38      	pop	{r3, r4, r5, pc}
 8008952:	bf00      	nop
 8008954:	20000208 	.word	0x20000208

08008958 <_malloc_r>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	1ccd      	adds	r5, r1, #3
 800895c:	f025 0503 	bic.w	r5, r5, #3
 8008960:	3508      	adds	r5, #8
 8008962:	2d0c      	cmp	r5, #12
 8008964:	bf38      	it	cc
 8008966:	250c      	movcc	r5, #12
 8008968:	2d00      	cmp	r5, #0
 800896a:	4606      	mov	r6, r0
 800896c:	db01      	blt.n	8008972 <_malloc_r+0x1a>
 800896e:	42a9      	cmp	r1, r5
 8008970:	d903      	bls.n	800897a <_malloc_r+0x22>
 8008972:	230c      	movs	r3, #12
 8008974:	6033      	str	r3, [r6, #0]
 8008976:	2000      	movs	r0, #0
 8008978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897a:	f000 fc4f 	bl	800921c <__malloc_lock>
 800897e:	4921      	ldr	r1, [pc, #132]	; (8008a04 <_malloc_r+0xac>)
 8008980:	680a      	ldr	r2, [r1, #0]
 8008982:	4614      	mov	r4, r2
 8008984:	b99c      	cbnz	r4, 80089ae <_malloc_r+0x56>
 8008986:	4f20      	ldr	r7, [pc, #128]	; (8008a08 <_malloc_r+0xb0>)
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	b923      	cbnz	r3, 8008996 <_malloc_r+0x3e>
 800898c:	4621      	mov	r1, r4
 800898e:	4630      	mov	r0, r6
 8008990:	f000 f994 	bl	8008cbc <_sbrk_r>
 8008994:	6038      	str	r0, [r7, #0]
 8008996:	4629      	mov	r1, r5
 8008998:	4630      	mov	r0, r6
 800899a:	f000 f98f 	bl	8008cbc <_sbrk_r>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	d123      	bne.n	80089ea <_malloc_r+0x92>
 80089a2:	230c      	movs	r3, #12
 80089a4:	4630      	mov	r0, r6
 80089a6:	6033      	str	r3, [r6, #0]
 80089a8:	f000 fc3e 	bl	8009228 <__malloc_unlock>
 80089ac:	e7e3      	b.n	8008976 <_malloc_r+0x1e>
 80089ae:	6823      	ldr	r3, [r4, #0]
 80089b0:	1b5b      	subs	r3, r3, r5
 80089b2:	d417      	bmi.n	80089e4 <_malloc_r+0x8c>
 80089b4:	2b0b      	cmp	r3, #11
 80089b6:	d903      	bls.n	80089c0 <_malloc_r+0x68>
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	441c      	add	r4, r3
 80089bc:	6025      	str	r5, [r4, #0]
 80089be:	e004      	b.n	80089ca <_malloc_r+0x72>
 80089c0:	6863      	ldr	r3, [r4, #4]
 80089c2:	42a2      	cmp	r2, r4
 80089c4:	bf0c      	ite	eq
 80089c6:	600b      	streq	r3, [r1, #0]
 80089c8:	6053      	strne	r3, [r2, #4]
 80089ca:	4630      	mov	r0, r6
 80089cc:	f000 fc2c 	bl	8009228 <__malloc_unlock>
 80089d0:	f104 000b 	add.w	r0, r4, #11
 80089d4:	1d23      	adds	r3, r4, #4
 80089d6:	f020 0007 	bic.w	r0, r0, #7
 80089da:	1ac2      	subs	r2, r0, r3
 80089dc:	d0cc      	beq.n	8008978 <_malloc_r+0x20>
 80089de:	1a1b      	subs	r3, r3, r0
 80089e0:	50a3      	str	r3, [r4, r2]
 80089e2:	e7c9      	b.n	8008978 <_malloc_r+0x20>
 80089e4:	4622      	mov	r2, r4
 80089e6:	6864      	ldr	r4, [r4, #4]
 80089e8:	e7cc      	b.n	8008984 <_malloc_r+0x2c>
 80089ea:	1cc4      	adds	r4, r0, #3
 80089ec:	f024 0403 	bic.w	r4, r4, #3
 80089f0:	42a0      	cmp	r0, r4
 80089f2:	d0e3      	beq.n	80089bc <_malloc_r+0x64>
 80089f4:	1a21      	subs	r1, r4, r0
 80089f6:	4630      	mov	r0, r6
 80089f8:	f000 f960 	bl	8008cbc <_sbrk_r>
 80089fc:	3001      	adds	r0, #1
 80089fe:	d1dd      	bne.n	80089bc <_malloc_r+0x64>
 8008a00:	e7cf      	b.n	80089a2 <_malloc_r+0x4a>
 8008a02:	bf00      	nop
 8008a04:	20000208 	.word	0x20000208
 8008a08:	2000020c 	.word	0x2000020c

08008a0c <__sfputc_r>:
 8008a0c:	6893      	ldr	r3, [r2, #8]
 8008a0e:	b410      	push	{r4}
 8008a10:	3b01      	subs	r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	6093      	str	r3, [r2, #8]
 8008a16:	da07      	bge.n	8008a28 <__sfputc_r+0x1c>
 8008a18:	6994      	ldr	r4, [r2, #24]
 8008a1a:	42a3      	cmp	r3, r4
 8008a1c:	db01      	blt.n	8008a22 <__sfputc_r+0x16>
 8008a1e:	290a      	cmp	r1, #10
 8008a20:	d102      	bne.n	8008a28 <__sfputc_r+0x1c>
 8008a22:	bc10      	pop	{r4}
 8008a24:	f000 b99e 	b.w	8008d64 <__swbuf_r>
 8008a28:	6813      	ldr	r3, [r2, #0]
 8008a2a:	1c58      	adds	r0, r3, #1
 8008a2c:	6010      	str	r0, [r2, #0]
 8008a2e:	7019      	strb	r1, [r3, #0]
 8008a30:	4608      	mov	r0, r1
 8008a32:	bc10      	pop	{r4}
 8008a34:	4770      	bx	lr

08008a36 <__sfputs_r>:
 8008a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a38:	4606      	mov	r6, r0
 8008a3a:	460f      	mov	r7, r1
 8008a3c:	4614      	mov	r4, r2
 8008a3e:	18d5      	adds	r5, r2, r3
 8008a40:	42ac      	cmp	r4, r5
 8008a42:	d101      	bne.n	8008a48 <__sfputs_r+0x12>
 8008a44:	2000      	movs	r0, #0
 8008a46:	e007      	b.n	8008a58 <__sfputs_r+0x22>
 8008a48:	463a      	mov	r2, r7
 8008a4a:	4630      	mov	r0, r6
 8008a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a50:	f7ff ffdc 	bl	8008a0c <__sfputc_r>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d1f3      	bne.n	8008a40 <__sfputs_r+0xa>
 8008a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a5c <_vfiprintf_r>:
 8008a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a60:	460d      	mov	r5, r1
 8008a62:	4614      	mov	r4, r2
 8008a64:	4698      	mov	r8, r3
 8008a66:	4606      	mov	r6, r0
 8008a68:	b09d      	sub	sp, #116	; 0x74
 8008a6a:	b118      	cbz	r0, 8008a74 <_vfiprintf_r+0x18>
 8008a6c:	6983      	ldr	r3, [r0, #24]
 8008a6e:	b90b      	cbnz	r3, 8008a74 <_vfiprintf_r+0x18>
 8008a70:	f7ff facc 	bl	800800c <__sinit>
 8008a74:	4b89      	ldr	r3, [pc, #548]	; (8008c9c <_vfiprintf_r+0x240>)
 8008a76:	429d      	cmp	r5, r3
 8008a78:	d11b      	bne.n	8008ab2 <_vfiprintf_r+0x56>
 8008a7a:	6875      	ldr	r5, [r6, #4]
 8008a7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a7e:	07d9      	lsls	r1, r3, #31
 8008a80:	d405      	bmi.n	8008a8e <_vfiprintf_r+0x32>
 8008a82:	89ab      	ldrh	r3, [r5, #12]
 8008a84:	059a      	lsls	r2, r3, #22
 8008a86:	d402      	bmi.n	8008a8e <_vfiprintf_r+0x32>
 8008a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a8a:	f7ff fb62 	bl	8008152 <__retarget_lock_acquire_recursive>
 8008a8e:	89ab      	ldrh	r3, [r5, #12]
 8008a90:	071b      	lsls	r3, r3, #28
 8008a92:	d501      	bpl.n	8008a98 <_vfiprintf_r+0x3c>
 8008a94:	692b      	ldr	r3, [r5, #16]
 8008a96:	b9eb      	cbnz	r3, 8008ad4 <_vfiprintf_r+0x78>
 8008a98:	4629      	mov	r1, r5
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	f000 f9c6 	bl	8008e2c <__swsetup_r>
 8008aa0:	b1c0      	cbz	r0, 8008ad4 <_vfiprintf_r+0x78>
 8008aa2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aa4:	07dc      	lsls	r4, r3, #31
 8008aa6:	d50e      	bpl.n	8008ac6 <_vfiprintf_r+0x6a>
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aac:	b01d      	add	sp, #116	; 0x74
 8008aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab2:	4b7b      	ldr	r3, [pc, #492]	; (8008ca0 <_vfiprintf_r+0x244>)
 8008ab4:	429d      	cmp	r5, r3
 8008ab6:	d101      	bne.n	8008abc <_vfiprintf_r+0x60>
 8008ab8:	68b5      	ldr	r5, [r6, #8]
 8008aba:	e7df      	b.n	8008a7c <_vfiprintf_r+0x20>
 8008abc:	4b79      	ldr	r3, [pc, #484]	; (8008ca4 <_vfiprintf_r+0x248>)
 8008abe:	429d      	cmp	r5, r3
 8008ac0:	bf08      	it	eq
 8008ac2:	68f5      	ldreq	r5, [r6, #12]
 8008ac4:	e7da      	b.n	8008a7c <_vfiprintf_r+0x20>
 8008ac6:	89ab      	ldrh	r3, [r5, #12]
 8008ac8:	0598      	lsls	r0, r3, #22
 8008aca:	d4ed      	bmi.n	8008aa8 <_vfiprintf_r+0x4c>
 8008acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ace:	f7ff fb41 	bl	8008154 <__retarget_lock_release_recursive>
 8008ad2:	e7e9      	b.n	8008aa8 <_vfiprintf_r+0x4c>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ad8:	2320      	movs	r3, #32
 8008ada:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ade:	2330      	movs	r3, #48	; 0x30
 8008ae0:	f04f 0901 	mov.w	r9, #1
 8008ae4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ae8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008ca8 <_vfiprintf_r+0x24c>
 8008aec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008af0:	4623      	mov	r3, r4
 8008af2:	469a      	mov	sl, r3
 8008af4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008af8:	b10a      	cbz	r2, 8008afe <_vfiprintf_r+0xa2>
 8008afa:	2a25      	cmp	r2, #37	; 0x25
 8008afc:	d1f9      	bne.n	8008af2 <_vfiprintf_r+0x96>
 8008afe:	ebba 0b04 	subs.w	fp, sl, r4
 8008b02:	d00b      	beq.n	8008b1c <_vfiprintf_r+0xc0>
 8008b04:	465b      	mov	r3, fp
 8008b06:	4622      	mov	r2, r4
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f7ff ff93 	bl	8008a36 <__sfputs_r>
 8008b10:	3001      	adds	r0, #1
 8008b12:	f000 80aa 	beq.w	8008c6a <_vfiprintf_r+0x20e>
 8008b16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b18:	445a      	add	r2, fp
 8008b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 80a2 	beq.w	8008c6a <_vfiprintf_r+0x20e>
 8008b26:	2300      	movs	r3, #0
 8008b28:	f04f 32ff 	mov.w	r2, #4294967295
 8008b2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b30:	f10a 0a01 	add.w	sl, sl, #1
 8008b34:	9304      	str	r3, [sp, #16]
 8008b36:	9307      	str	r3, [sp, #28]
 8008b38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b3c:	931a      	str	r3, [sp, #104]	; 0x68
 8008b3e:	4654      	mov	r4, sl
 8008b40:	2205      	movs	r2, #5
 8008b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b46:	4858      	ldr	r0, [pc, #352]	; (8008ca8 <_vfiprintf_r+0x24c>)
 8008b48:	f7ff fb0e 	bl	8008168 <memchr>
 8008b4c:	9a04      	ldr	r2, [sp, #16]
 8008b4e:	b9d8      	cbnz	r0, 8008b88 <_vfiprintf_r+0x12c>
 8008b50:	06d1      	lsls	r1, r2, #27
 8008b52:	bf44      	itt	mi
 8008b54:	2320      	movmi	r3, #32
 8008b56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b5a:	0713      	lsls	r3, r2, #28
 8008b5c:	bf44      	itt	mi
 8008b5e:	232b      	movmi	r3, #43	; 0x2b
 8008b60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b64:	f89a 3000 	ldrb.w	r3, [sl]
 8008b68:	2b2a      	cmp	r3, #42	; 0x2a
 8008b6a:	d015      	beq.n	8008b98 <_vfiprintf_r+0x13c>
 8008b6c:	4654      	mov	r4, sl
 8008b6e:	2000      	movs	r0, #0
 8008b70:	f04f 0c0a 	mov.w	ip, #10
 8008b74:	9a07      	ldr	r2, [sp, #28]
 8008b76:	4621      	mov	r1, r4
 8008b78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b7c:	3b30      	subs	r3, #48	; 0x30
 8008b7e:	2b09      	cmp	r3, #9
 8008b80:	d94e      	bls.n	8008c20 <_vfiprintf_r+0x1c4>
 8008b82:	b1b0      	cbz	r0, 8008bb2 <_vfiprintf_r+0x156>
 8008b84:	9207      	str	r2, [sp, #28]
 8008b86:	e014      	b.n	8008bb2 <_vfiprintf_r+0x156>
 8008b88:	eba0 0308 	sub.w	r3, r0, r8
 8008b8c:	fa09 f303 	lsl.w	r3, r9, r3
 8008b90:	4313      	orrs	r3, r2
 8008b92:	46a2      	mov	sl, r4
 8008b94:	9304      	str	r3, [sp, #16]
 8008b96:	e7d2      	b.n	8008b3e <_vfiprintf_r+0xe2>
 8008b98:	9b03      	ldr	r3, [sp, #12]
 8008b9a:	1d19      	adds	r1, r3, #4
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	9103      	str	r1, [sp, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	bfbb      	ittet	lt
 8008ba4:	425b      	neglt	r3, r3
 8008ba6:	f042 0202 	orrlt.w	r2, r2, #2
 8008baa:	9307      	strge	r3, [sp, #28]
 8008bac:	9307      	strlt	r3, [sp, #28]
 8008bae:	bfb8      	it	lt
 8008bb0:	9204      	strlt	r2, [sp, #16]
 8008bb2:	7823      	ldrb	r3, [r4, #0]
 8008bb4:	2b2e      	cmp	r3, #46	; 0x2e
 8008bb6:	d10c      	bne.n	8008bd2 <_vfiprintf_r+0x176>
 8008bb8:	7863      	ldrb	r3, [r4, #1]
 8008bba:	2b2a      	cmp	r3, #42	; 0x2a
 8008bbc:	d135      	bne.n	8008c2a <_vfiprintf_r+0x1ce>
 8008bbe:	9b03      	ldr	r3, [sp, #12]
 8008bc0:	3402      	adds	r4, #2
 8008bc2:	1d1a      	adds	r2, r3, #4
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	9203      	str	r2, [sp, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	bfb8      	it	lt
 8008bcc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bd0:	9305      	str	r3, [sp, #20]
 8008bd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cb8 <_vfiprintf_r+0x25c>
 8008bd6:	2203      	movs	r2, #3
 8008bd8:	4650      	mov	r0, sl
 8008bda:	7821      	ldrb	r1, [r4, #0]
 8008bdc:	f7ff fac4 	bl	8008168 <memchr>
 8008be0:	b140      	cbz	r0, 8008bf4 <_vfiprintf_r+0x198>
 8008be2:	2340      	movs	r3, #64	; 0x40
 8008be4:	eba0 000a 	sub.w	r0, r0, sl
 8008be8:	fa03 f000 	lsl.w	r0, r3, r0
 8008bec:	9b04      	ldr	r3, [sp, #16]
 8008bee:	3401      	adds	r4, #1
 8008bf0:	4303      	orrs	r3, r0
 8008bf2:	9304      	str	r3, [sp, #16]
 8008bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bf8:	2206      	movs	r2, #6
 8008bfa:	482c      	ldr	r0, [pc, #176]	; (8008cac <_vfiprintf_r+0x250>)
 8008bfc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c00:	f7ff fab2 	bl	8008168 <memchr>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d03f      	beq.n	8008c88 <_vfiprintf_r+0x22c>
 8008c08:	4b29      	ldr	r3, [pc, #164]	; (8008cb0 <_vfiprintf_r+0x254>)
 8008c0a:	bb1b      	cbnz	r3, 8008c54 <_vfiprintf_r+0x1f8>
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	3307      	adds	r3, #7
 8008c10:	f023 0307 	bic.w	r3, r3, #7
 8008c14:	3308      	adds	r3, #8
 8008c16:	9303      	str	r3, [sp, #12]
 8008c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1a:	443b      	add	r3, r7
 8008c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c1e:	e767      	b.n	8008af0 <_vfiprintf_r+0x94>
 8008c20:	460c      	mov	r4, r1
 8008c22:	2001      	movs	r0, #1
 8008c24:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c28:	e7a5      	b.n	8008b76 <_vfiprintf_r+0x11a>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f04f 0c0a 	mov.w	ip, #10
 8008c30:	4619      	mov	r1, r3
 8008c32:	3401      	adds	r4, #1
 8008c34:	9305      	str	r3, [sp, #20]
 8008c36:	4620      	mov	r0, r4
 8008c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c3c:	3a30      	subs	r2, #48	; 0x30
 8008c3e:	2a09      	cmp	r2, #9
 8008c40:	d903      	bls.n	8008c4a <_vfiprintf_r+0x1ee>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d0c5      	beq.n	8008bd2 <_vfiprintf_r+0x176>
 8008c46:	9105      	str	r1, [sp, #20]
 8008c48:	e7c3      	b.n	8008bd2 <_vfiprintf_r+0x176>
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c52:	e7f0      	b.n	8008c36 <_vfiprintf_r+0x1da>
 8008c54:	ab03      	add	r3, sp, #12
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	462a      	mov	r2, r5
 8008c5a:	4630      	mov	r0, r6
 8008c5c:	4b15      	ldr	r3, [pc, #84]	; (8008cb4 <_vfiprintf_r+0x258>)
 8008c5e:	a904      	add	r1, sp, #16
 8008c60:	f7fd ff26 	bl	8006ab0 <_printf_float>
 8008c64:	4607      	mov	r7, r0
 8008c66:	1c78      	adds	r0, r7, #1
 8008c68:	d1d6      	bne.n	8008c18 <_vfiprintf_r+0x1bc>
 8008c6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c6c:	07d9      	lsls	r1, r3, #31
 8008c6e:	d405      	bmi.n	8008c7c <_vfiprintf_r+0x220>
 8008c70:	89ab      	ldrh	r3, [r5, #12]
 8008c72:	059a      	lsls	r2, r3, #22
 8008c74:	d402      	bmi.n	8008c7c <_vfiprintf_r+0x220>
 8008c76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c78:	f7ff fa6c 	bl	8008154 <__retarget_lock_release_recursive>
 8008c7c:	89ab      	ldrh	r3, [r5, #12]
 8008c7e:	065b      	lsls	r3, r3, #25
 8008c80:	f53f af12 	bmi.w	8008aa8 <_vfiprintf_r+0x4c>
 8008c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c86:	e711      	b.n	8008aac <_vfiprintf_r+0x50>
 8008c88:	ab03      	add	r3, sp, #12
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	462a      	mov	r2, r5
 8008c8e:	4630      	mov	r0, r6
 8008c90:	4b08      	ldr	r3, [pc, #32]	; (8008cb4 <_vfiprintf_r+0x258>)
 8008c92:	a904      	add	r1, sp, #16
 8008c94:	f7fe f9a8 	bl	8006fe8 <_printf_i>
 8008c98:	e7e4      	b.n	8008c64 <_vfiprintf_r+0x208>
 8008c9a:	bf00      	nop
 8008c9c:	0800ac7c 	.word	0x0800ac7c
 8008ca0:	0800ac9c 	.word	0x0800ac9c
 8008ca4:	0800ac5c 	.word	0x0800ac5c
 8008ca8:	0800ae1c 	.word	0x0800ae1c
 8008cac:	0800ae26 	.word	0x0800ae26
 8008cb0:	08006ab1 	.word	0x08006ab1
 8008cb4:	08008a37 	.word	0x08008a37
 8008cb8:	0800ae22 	.word	0x0800ae22

08008cbc <_sbrk_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	4d05      	ldr	r5, [pc, #20]	; (8008cd8 <_sbrk_r+0x1c>)
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	4608      	mov	r0, r1
 8008cc6:	602b      	str	r3, [r5, #0]
 8008cc8:	f7fc fd9e 	bl	8005808 <_sbrk>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	d102      	bne.n	8008cd6 <_sbrk_r+0x1a>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	b103      	cbz	r3, 8008cd6 <_sbrk_r+0x1a>
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	20000278 	.word	0x20000278

08008cdc <__sread>:
 8008cdc:	b510      	push	{r4, lr}
 8008cde:	460c      	mov	r4, r1
 8008ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce4:	f000 faa6 	bl	8009234 <_read_r>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	bfab      	itete	ge
 8008cec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cee:	89a3      	ldrhlt	r3, [r4, #12]
 8008cf0:	181b      	addge	r3, r3, r0
 8008cf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cf6:	bfac      	ite	ge
 8008cf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cfa:	81a3      	strhlt	r3, [r4, #12]
 8008cfc:	bd10      	pop	{r4, pc}

08008cfe <__swrite>:
 8008cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d02:	461f      	mov	r7, r3
 8008d04:	898b      	ldrh	r3, [r1, #12]
 8008d06:	4605      	mov	r5, r0
 8008d08:	05db      	lsls	r3, r3, #23
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	4616      	mov	r6, r2
 8008d0e:	d505      	bpl.n	8008d1c <__swrite+0x1e>
 8008d10:	2302      	movs	r3, #2
 8008d12:	2200      	movs	r2, #0
 8008d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d18:	f000 f9f8 	bl	800910c <_lseek_r>
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	4632      	mov	r2, r6
 8008d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d24:	81a3      	strh	r3, [r4, #12]
 8008d26:	4628      	mov	r0, r5
 8008d28:	463b      	mov	r3, r7
 8008d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d32:	f000 b869 	b.w	8008e08 <_write_r>

08008d36 <__sseek>:
 8008d36:	b510      	push	{r4, lr}
 8008d38:	460c      	mov	r4, r1
 8008d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3e:	f000 f9e5 	bl	800910c <_lseek_r>
 8008d42:	1c43      	adds	r3, r0, #1
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	bf15      	itete	ne
 8008d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d52:	81a3      	strheq	r3, [r4, #12]
 8008d54:	bf18      	it	ne
 8008d56:	81a3      	strhne	r3, [r4, #12]
 8008d58:	bd10      	pop	{r4, pc}

08008d5a <__sclose>:
 8008d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d5e:	f000 b8f1 	b.w	8008f44 <_close_r>
	...

08008d64 <__swbuf_r>:
 8008d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d66:	460e      	mov	r6, r1
 8008d68:	4614      	mov	r4, r2
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	b118      	cbz	r0, 8008d76 <__swbuf_r+0x12>
 8008d6e:	6983      	ldr	r3, [r0, #24]
 8008d70:	b90b      	cbnz	r3, 8008d76 <__swbuf_r+0x12>
 8008d72:	f7ff f94b 	bl	800800c <__sinit>
 8008d76:	4b21      	ldr	r3, [pc, #132]	; (8008dfc <__swbuf_r+0x98>)
 8008d78:	429c      	cmp	r4, r3
 8008d7a:	d12b      	bne.n	8008dd4 <__swbuf_r+0x70>
 8008d7c:	686c      	ldr	r4, [r5, #4]
 8008d7e:	69a3      	ldr	r3, [r4, #24]
 8008d80:	60a3      	str	r3, [r4, #8]
 8008d82:	89a3      	ldrh	r3, [r4, #12]
 8008d84:	071a      	lsls	r2, r3, #28
 8008d86:	d52f      	bpl.n	8008de8 <__swbuf_r+0x84>
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	b36b      	cbz	r3, 8008de8 <__swbuf_r+0x84>
 8008d8c:	6923      	ldr	r3, [r4, #16]
 8008d8e:	6820      	ldr	r0, [r4, #0]
 8008d90:	b2f6      	uxtb	r6, r6
 8008d92:	1ac0      	subs	r0, r0, r3
 8008d94:	6963      	ldr	r3, [r4, #20]
 8008d96:	4637      	mov	r7, r6
 8008d98:	4283      	cmp	r3, r0
 8008d9a:	dc04      	bgt.n	8008da6 <__swbuf_r+0x42>
 8008d9c:	4621      	mov	r1, r4
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f000 f966 	bl	8009070 <_fflush_r>
 8008da4:	bb30      	cbnz	r0, 8008df4 <__swbuf_r+0x90>
 8008da6:	68a3      	ldr	r3, [r4, #8]
 8008da8:	3001      	adds	r0, #1
 8008daa:	3b01      	subs	r3, #1
 8008dac:	60a3      	str	r3, [r4, #8]
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	6022      	str	r2, [r4, #0]
 8008db4:	701e      	strb	r6, [r3, #0]
 8008db6:	6963      	ldr	r3, [r4, #20]
 8008db8:	4283      	cmp	r3, r0
 8008dba:	d004      	beq.n	8008dc6 <__swbuf_r+0x62>
 8008dbc:	89a3      	ldrh	r3, [r4, #12]
 8008dbe:	07db      	lsls	r3, r3, #31
 8008dc0:	d506      	bpl.n	8008dd0 <__swbuf_r+0x6c>
 8008dc2:	2e0a      	cmp	r6, #10
 8008dc4:	d104      	bne.n	8008dd0 <__swbuf_r+0x6c>
 8008dc6:	4621      	mov	r1, r4
 8008dc8:	4628      	mov	r0, r5
 8008dca:	f000 f951 	bl	8009070 <_fflush_r>
 8008dce:	b988      	cbnz	r0, 8008df4 <__swbuf_r+0x90>
 8008dd0:	4638      	mov	r0, r7
 8008dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dd4:	4b0a      	ldr	r3, [pc, #40]	; (8008e00 <__swbuf_r+0x9c>)
 8008dd6:	429c      	cmp	r4, r3
 8008dd8:	d101      	bne.n	8008dde <__swbuf_r+0x7a>
 8008dda:	68ac      	ldr	r4, [r5, #8]
 8008ddc:	e7cf      	b.n	8008d7e <__swbuf_r+0x1a>
 8008dde:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <__swbuf_r+0xa0>)
 8008de0:	429c      	cmp	r4, r3
 8008de2:	bf08      	it	eq
 8008de4:	68ec      	ldreq	r4, [r5, #12]
 8008de6:	e7ca      	b.n	8008d7e <__swbuf_r+0x1a>
 8008de8:	4621      	mov	r1, r4
 8008dea:	4628      	mov	r0, r5
 8008dec:	f000 f81e 	bl	8008e2c <__swsetup_r>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d0cb      	beq.n	8008d8c <__swbuf_r+0x28>
 8008df4:	f04f 37ff 	mov.w	r7, #4294967295
 8008df8:	e7ea      	b.n	8008dd0 <__swbuf_r+0x6c>
 8008dfa:	bf00      	nop
 8008dfc:	0800ac7c 	.word	0x0800ac7c
 8008e00:	0800ac9c 	.word	0x0800ac9c
 8008e04:	0800ac5c 	.word	0x0800ac5c

08008e08 <_write_r>:
 8008e08:	b538      	push	{r3, r4, r5, lr}
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	4608      	mov	r0, r1
 8008e0e:	4611      	mov	r1, r2
 8008e10:	2200      	movs	r2, #0
 8008e12:	4d05      	ldr	r5, [pc, #20]	; (8008e28 <_write_r+0x20>)
 8008e14:	602a      	str	r2, [r5, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	f7fc fca9 	bl	800576e <_write>
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	d102      	bne.n	8008e26 <_write_r+0x1e>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	b103      	cbz	r3, 8008e26 <_write_r+0x1e>
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	20000278 	.word	0x20000278

08008e2c <__swsetup_r>:
 8008e2c:	4b32      	ldr	r3, [pc, #200]	; (8008ef8 <__swsetup_r+0xcc>)
 8008e2e:	b570      	push	{r4, r5, r6, lr}
 8008e30:	681d      	ldr	r5, [r3, #0]
 8008e32:	4606      	mov	r6, r0
 8008e34:	460c      	mov	r4, r1
 8008e36:	b125      	cbz	r5, 8008e42 <__swsetup_r+0x16>
 8008e38:	69ab      	ldr	r3, [r5, #24]
 8008e3a:	b913      	cbnz	r3, 8008e42 <__swsetup_r+0x16>
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	f7ff f8e5 	bl	800800c <__sinit>
 8008e42:	4b2e      	ldr	r3, [pc, #184]	; (8008efc <__swsetup_r+0xd0>)
 8008e44:	429c      	cmp	r4, r3
 8008e46:	d10f      	bne.n	8008e68 <__swsetup_r+0x3c>
 8008e48:	686c      	ldr	r4, [r5, #4]
 8008e4a:	89a3      	ldrh	r3, [r4, #12]
 8008e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e50:	0719      	lsls	r1, r3, #28
 8008e52:	d42c      	bmi.n	8008eae <__swsetup_r+0x82>
 8008e54:	06dd      	lsls	r5, r3, #27
 8008e56:	d411      	bmi.n	8008e7c <__swsetup_r+0x50>
 8008e58:	2309      	movs	r3, #9
 8008e5a:	6033      	str	r3, [r6, #0]
 8008e5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e60:	f04f 30ff 	mov.w	r0, #4294967295
 8008e64:	81a3      	strh	r3, [r4, #12]
 8008e66:	e03e      	b.n	8008ee6 <__swsetup_r+0xba>
 8008e68:	4b25      	ldr	r3, [pc, #148]	; (8008f00 <__swsetup_r+0xd4>)
 8008e6a:	429c      	cmp	r4, r3
 8008e6c:	d101      	bne.n	8008e72 <__swsetup_r+0x46>
 8008e6e:	68ac      	ldr	r4, [r5, #8]
 8008e70:	e7eb      	b.n	8008e4a <__swsetup_r+0x1e>
 8008e72:	4b24      	ldr	r3, [pc, #144]	; (8008f04 <__swsetup_r+0xd8>)
 8008e74:	429c      	cmp	r4, r3
 8008e76:	bf08      	it	eq
 8008e78:	68ec      	ldreq	r4, [r5, #12]
 8008e7a:	e7e6      	b.n	8008e4a <__swsetup_r+0x1e>
 8008e7c:	0758      	lsls	r0, r3, #29
 8008e7e:	d512      	bpl.n	8008ea6 <__swsetup_r+0x7a>
 8008e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e82:	b141      	cbz	r1, 8008e96 <__swsetup_r+0x6a>
 8008e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e88:	4299      	cmp	r1, r3
 8008e8a:	d002      	beq.n	8008e92 <__swsetup_r+0x66>
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f7ff fd17 	bl	80088c0 <_free_r>
 8008e92:	2300      	movs	r3, #0
 8008e94:	6363      	str	r3, [r4, #52]	; 0x34
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e9c:	81a3      	strh	r3, [r4, #12]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	6063      	str	r3, [r4, #4]
 8008ea2:	6923      	ldr	r3, [r4, #16]
 8008ea4:	6023      	str	r3, [r4, #0]
 8008ea6:	89a3      	ldrh	r3, [r4, #12]
 8008ea8:	f043 0308 	orr.w	r3, r3, #8
 8008eac:	81a3      	strh	r3, [r4, #12]
 8008eae:	6923      	ldr	r3, [r4, #16]
 8008eb0:	b94b      	cbnz	r3, 8008ec6 <__swsetup_r+0x9a>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ebc:	d003      	beq.n	8008ec6 <__swsetup_r+0x9a>
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f000 f959 	bl	8009178 <__smakebuf_r>
 8008ec6:	89a0      	ldrh	r0, [r4, #12]
 8008ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ecc:	f010 0301 	ands.w	r3, r0, #1
 8008ed0:	d00a      	beq.n	8008ee8 <__swsetup_r+0xbc>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	60a3      	str	r3, [r4, #8]
 8008ed6:	6963      	ldr	r3, [r4, #20]
 8008ed8:	425b      	negs	r3, r3
 8008eda:	61a3      	str	r3, [r4, #24]
 8008edc:	6923      	ldr	r3, [r4, #16]
 8008ede:	b943      	cbnz	r3, 8008ef2 <__swsetup_r+0xc6>
 8008ee0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ee4:	d1ba      	bne.n	8008e5c <__swsetup_r+0x30>
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}
 8008ee8:	0781      	lsls	r1, r0, #30
 8008eea:	bf58      	it	pl
 8008eec:	6963      	ldrpl	r3, [r4, #20]
 8008eee:	60a3      	str	r3, [r4, #8]
 8008ef0:	e7f4      	b.n	8008edc <__swsetup_r+0xb0>
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	e7f7      	b.n	8008ee6 <__swsetup_r+0xba>
 8008ef6:	bf00      	nop
 8008ef8:	20000010 	.word	0x20000010
 8008efc:	0800ac7c 	.word	0x0800ac7c
 8008f00:	0800ac9c 	.word	0x0800ac9c
 8008f04:	0800ac5c 	.word	0x0800ac5c

08008f08 <__assert_func>:
 8008f08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f0a:	4614      	mov	r4, r2
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	4b09      	ldr	r3, [pc, #36]	; (8008f34 <__assert_func+0x2c>)
 8008f10:	4605      	mov	r5, r0
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68d8      	ldr	r0, [r3, #12]
 8008f16:	b14c      	cbz	r4, 8008f2c <__assert_func+0x24>
 8008f18:	4b07      	ldr	r3, [pc, #28]	; (8008f38 <__assert_func+0x30>)
 8008f1a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f1e:	9100      	str	r1, [sp, #0]
 8008f20:	462b      	mov	r3, r5
 8008f22:	4906      	ldr	r1, [pc, #24]	; (8008f3c <__assert_func+0x34>)
 8008f24:	f000 f8e0 	bl	80090e8 <fiprintf>
 8008f28:	f000 f9a3 	bl	8009272 <abort>
 8008f2c:	4b04      	ldr	r3, [pc, #16]	; (8008f40 <__assert_func+0x38>)
 8008f2e:	461c      	mov	r4, r3
 8008f30:	e7f3      	b.n	8008f1a <__assert_func+0x12>
 8008f32:	bf00      	nop
 8008f34:	20000010 	.word	0x20000010
 8008f38:	0800ae2d 	.word	0x0800ae2d
 8008f3c:	0800ae3a 	.word	0x0800ae3a
 8008f40:	0800ae68 	.word	0x0800ae68

08008f44 <_close_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	2300      	movs	r3, #0
 8008f48:	4d05      	ldr	r5, [pc, #20]	; (8008f60 <_close_r+0x1c>)
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	602b      	str	r3, [r5, #0]
 8008f50:	f7fc fc29 	bl	80057a6 <_close>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d102      	bne.n	8008f5e <_close_r+0x1a>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b103      	cbz	r3, 8008f5e <_close_r+0x1a>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	20000278 	.word	0x20000278

08008f64 <__sflush_r>:
 8008f64:	898a      	ldrh	r2, [r1, #12]
 8008f66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	0710      	lsls	r0, r2, #28
 8008f6e:	460c      	mov	r4, r1
 8008f70:	d458      	bmi.n	8009024 <__sflush_r+0xc0>
 8008f72:	684b      	ldr	r3, [r1, #4]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	dc05      	bgt.n	8008f84 <__sflush_r+0x20>
 8008f78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	dc02      	bgt.n	8008f84 <__sflush_r+0x20>
 8008f7e:	2000      	movs	r0, #0
 8008f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f86:	2e00      	cmp	r6, #0
 8008f88:	d0f9      	beq.n	8008f7e <__sflush_r+0x1a>
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f90:	682f      	ldr	r7, [r5, #0]
 8008f92:	602b      	str	r3, [r5, #0]
 8008f94:	d032      	beq.n	8008ffc <__sflush_r+0x98>
 8008f96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	075a      	lsls	r2, r3, #29
 8008f9c:	d505      	bpl.n	8008faa <__sflush_r+0x46>
 8008f9e:	6863      	ldr	r3, [r4, #4]
 8008fa0:	1ac0      	subs	r0, r0, r3
 8008fa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fa4:	b10b      	cbz	r3, 8008faa <__sflush_r+0x46>
 8008fa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fa8:	1ac0      	subs	r0, r0, r3
 8008faa:	2300      	movs	r3, #0
 8008fac:	4602      	mov	r2, r0
 8008fae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	6a21      	ldr	r1, [r4, #32]
 8008fb4:	47b0      	blx	r6
 8008fb6:	1c43      	adds	r3, r0, #1
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	d106      	bne.n	8008fca <__sflush_r+0x66>
 8008fbc:	6829      	ldr	r1, [r5, #0]
 8008fbe:	291d      	cmp	r1, #29
 8008fc0:	d82c      	bhi.n	800901c <__sflush_r+0xb8>
 8008fc2:	4a2a      	ldr	r2, [pc, #168]	; (800906c <__sflush_r+0x108>)
 8008fc4:	40ca      	lsrs	r2, r1
 8008fc6:	07d6      	lsls	r6, r2, #31
 8008fc8:	d528      	bpl.n	800901c <__sflush_r+0xb8>
 8008fca:	2200      	movs	r2, #0
 8008fcc:	6062      	str	r2, [r4, #4]
 8008fce:	6922      	ldr	r2, [r4, #16]
 8008fd0:	04d9      	lsls	r1, r3, #19
 8008fd2:	6022      	str	r2, [r4, #0]
 8008fd4:	d504      	bpl.n	8008fe0 <__sflush_r+0x7c>
 8008fd6:	1c42      	adds	r2, r0, #1
 8008fd8:	d101      	bne.n	8008fde <__sflush_r+0x7a>
 8008fda:	682b      	ldr	r3, [r5, #0]
 8008fdc:	b903      	cbnz	r3, 8008fe0 <__sflush_r+0x7c>
 8008fde:	6560      	str	r0, [r4, #84]	; 0x54
 8008fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fe2:	602f      	str	r7, [r5, #0]
 8008fe4:	2900      	cmp	r1, #0
 8008fe6:	d0ca      	beq.n	8008f7e <__sflush_r+0x1a>
 8008fe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fec:	4299      	cmp	r1, r3
 8008fee:	d002      	beq.n	8008ff6 <__sflush_r+0x92>
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f7ff fc65 	bl	80088c0 <_free_r>
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	6360      	str	r0, [r4, #52]	; 0x34
 8008ffa:	e7c1      	b.n	8008f80 <__sflush_r+0x1c>
 8008ffc:	6a21      	ldr	r1, [r4, #32]
 8008ffe:	2301      	movs	r3, #1
 8009000:	4628      	mov	r0, r5
 8009002:	47b0      	blx	r6
 8009004:	1c41      	adds	r1, r0, #1
 8009006:	d1c7      	bne.n	8008f98 <__sflush_r+0x34>
 8009008:	682b      	ldr	r3, [r5, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0c4      	beq.n	8008f98 <__sflush_r+0x34>
 800900e:	2b1d      	cmp	r3, #29
 8009010:	d001      	beq.n	8009016 <__sflush_r+0xb2>
 8009012:	2b16      	cmp	r3, #22
 8009014:	d101      	bne.n	800901a <__sflush_r+0xb6>
 8009016:	602f      	str	r7, [r5, #0]
 8009018:	e7b1      	b.n	8008f7e <__sflush_r+0x1a>
 800901a:	89a3      	ldrh	r3, [r4, #12]
 800901c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009020:	81a3      	strh	r3, [r4, #12]
 8009022:	e7ad      	b.n	8008f80 <__sflush_r+0x1c>
 8009024:	690f      	ldr	r7, [r1, #16]
 8009026:	2f00      	cmp	r7, #0
 8009028:	d0a9      	beq.n	8008f7e <__sflush_r+0x1a>
 800902a:	0793      	lsls	r3, r2, #30
 800902c:	bf18      	it	ne
 800902e:	2300      	movne	r3, #0
 8009030:	680e      	ldr	r6, [r1, #0]
 8009032:	bf08      	it	eq
 8009034:	694b      	ldreq	r3, [r1, #20]
 8009036:	eba6 0807 	sub.w	r8, r6, r7
 800903a:	600f      	str	r7, [r1, #0]
 800903c:	608b      	str	r3, [r1, #8]
 800903e:	f1b8 0f00 	cmp.w	r8, #0
 8009042:	dd9c      	ble.n	8008f7e <__sflush_r+0x1a>
 8009044:	4643      	mov	r3, r8
 8009046:	463a      	mov	r2, r7
 8009048:	4628      	mov	r0, r5
 800904a:	6a21      	ldr	r1, [r4, #32]
 800904c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800904e:	47b0      	blx	r6
 8009050:	2800      	cmp	r0, #0
 8009052:	dc06      	bgt.n	8009062 <__sflush_r+0xfe>
 8009054:	89a3      	ldrh	r3, [r4, #12]
 8009056:	f04f 30ff 	mov.w	r0, #4294967295
 800905a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800905e:	81a3      	strh	r3, [r4, #12]
 8009060:	e78e      	b.n	8008f80 <__sflush_r+0x1c>
 8009062:	4407      	add	r7, r0
 8009064:	eba8 0800 	sub.w	r8, r8, r0
 8009068:	e7e9      	b.n	800903e <__sflush_r+0xda>
 800906a:	bf00      	nop
 800906c:	20400001 	.word	0x20400001

08009070 <_fflush_r>:
 8009070:	b538      	push	{r3, r4, r5, lr}
 8009072:	690b      	ldr	r3, [r1, #16]
 8009074:	4605      	mov	r5, r0
 8009076:	460c      	mov	r4, r1
 8009078:	b913      	cbnz	r3, 8009080 <_fflush_r+0x10>
 800907a:	2500      	movs	r5, #0
 800907c:	4628      	mov	r0, r5
 800907e:	bd38      	pop	{r3, r4, r5, pc}
 8009080:	b118      	cbz	r0, 800908a <_fflush_r+0x1a>
 8009082:	6983      	ldr	r3, [r0, #24]
 8009084:	b90b      	cbnz	r3, 800908a <_fflush_r+0x1a>
 8009086:	f7fe ffc1 	bl	800800c <__sinit>
 800908a:	4b14      	ldr	r3, [pc, #80]	; (80090dc <_fflush_r+0x6c>)
 800908c:	429c      	cmp	r4, r3
 800908e:	d11b      	bne.n	80090c8 <_fflush_r+0x58>
 8009090:	686c      	ldr	r4, [r5, #4]
 8009092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d0ef      	beq.n	800907a <_fflush_r+0xa>
 800909a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800909c:	07d0      	lsls	r0, r2, #31
 800909e:	d404      	bmi.n	80090aa <_fflush_r+0x3a>
 80090a0:	0599      	lsls	r1, r3, #22
 80090a2:	d402      	bmi.n	80090aa <_fflush_r+0x3a>
 80090a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090a6:	f7ff f854 	bl	8008152 <__retarget_lock_acquire_recursive>
 80090aa:	4628      	mov	r0, r5
 80090ac:	4621      	mov	r1, r4
 80090ae:	f7ff ff59 	bl	8008f64 <__sflush_r>
 80090b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090b4:	4605      	mov	r5, r0
 80090b6:	07da      	lsls	r2, r3, #31
 80090b8:	d4e0      	bmi.n	800907c <_fflush_r+0xc>
 80090ba:	89a3      	ldrh	r3, [r4, #12]
 80090bc:	059b      	lsls	r3, r3, #22
 80090be:	d4dd      	bmi.n	800907c <_fflush_r+0xc>
 80090c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090c2:	f7ff f847 	bl	8008154 <__retarget_lock_release_recursive>
 80090c6:	e7d9      	b.n	800907c <_fflush_r+0xc>
 80090c8:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <_fflush_r+0x70>)
 80090ca:	429c      	cmp	r4, r3
 80090cc:	d101      	bne.n	80090d2 <_fflush_r+0x62>
 80090ce:	68ac      	ldr	r4, [r5, #8]
 80090d0:	e7df      	b.n	8009092 <_fflush_r+0x22>
 80090d2:	4b04      	ldr	r3, [pc, #16]	; (80090e4 <_fflush_r+0x74>)
 80090d4:	429c      	cmp	r4, r3
 80090d6:	bf08      	it	eq
 80090d8:	68ec      	ldreq	r4, [r5, #12]
 80090da:	e7da      	b.n	8009092 <_fflush_r+0x22>
 80090dc:	0800ac7c 	.word	0x0800ac7c
 80090e0:	0800ac9c 	.word	0x0800ac9c
 80090e4:	0800ac5c 	.word	0x0800ac5c

080090e8 <fiprintf>:
 80090e8:	b40e      	push	{r1, r2, r3}
 80090ea:	b503      	push	{r0, r1, lr}
 80090ec:	4601      	mov	r1, r0
 80090ee:	ab03      	add	r3, sp, #12
 80090f0:	4805      	ldr	r0, [pc, #20]	; (8009108 <fiprintf+0x20>)
 80090f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f6:	6800      	ldr	r0, [r0, #0]
 80090f8:	9301      	str	r3, [sp, #4]
 80090fa:	f7ff fcaf 	bl	8008a5c <_vfiprintf_r>
 80090fe:	b002      	add	sp, #8
 8009100:	f85d eb04 	ldr.w	lr, [sp], #4
 8009104:	b003      	add	sp, #12
 8009106:	4770      	bx	lr
 8009108:	20000010 	.word	0x20000010

0800910c <_lseek_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4604      	mov	r4, r0
 8009110:	4608      	mov	r0, r1
 8009112:	4611      	mov	r1, r2
 8009114:	2200      	movs	r2, #0
 8009116:	4d05      	ldr	r5, [pc, #20]	; (800912c <_lseek_r+0x20>)
 8009118:	602a      	str	r2, [r5, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	f7fc fb67 	bl	80057ee <_lseek>
 8009120:	1c43      	adds	r3, r0, #1
 8009122:	d102      	bne.n	800912a <_lseek_r+0x1e>
 8009124:	682b      	ldr	r3, [r5, #0]
 8009126:	b103      	cbz	r3, 800912a <_lseek_r+0x1e>
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	bd38      	pop	{r3, r4, r5, pc}
 800912c:	20000278 	.word	0x20000278

08009130 <__swhatbuf_r>:
 8009130:	b570      	push	{r4, r5, r6, lr}
 8009132:	460e      	mov	r6, r1
 8009134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009138:	4614      	mov	r4, r2
 800913a:	2900      	cmp	r1, #0
 800913c:	461d      	mov	r5, r3
 800913e:	b096      	sub	sp, #88	; 0x58
 8009140:	da07      	bge.n	8009152 <__swhatbuf_r+0x22>
 8009142:	2300      	movs	r3, #0
 8009144:	602b      	str	r3, [r5, #0]
 8009146:	89b3      	ldrh	r3, [r6, #12]
 8009148:	061a      	lsls	r2, r3, #24
 800914a:	d410      	bmi.n	800916e <__swhatbuf_r+0x3e>
 800914c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009150:	e00e      	b.n	8009170 <__swhatbuf_r+0x40>
 8009152:	466a      	mov	r2, sp
 8009154:	f000 f894 	bl	8009280 <_fstat_r>
 8009158:	2800      	cmp	r0, #0
 800915a:	dbf2      	blt.n	8009142 <__swhatbuf_r+0x12>
 800915c:	9a01      	ldr	r2, [sp, #4]
 800915e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009162:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009166:	425a      	negs	r2, r3
 8009168:	415a      	adcs	r2, r3
 800916a:	602a      	str	r2, [r5, #0]
 800916c:	e7ee      	b.n	800914c <__swhatbuf_r+0x1c>
 800916e:	2340      	movs	r3, #64	; 0x40
 8009170:	2000      	movs	r0, #0
 8009172:	6023      	str	r3, [r4, #0]
 8009174:	b016      	add	sp, #88	; 0x58
 8009176:	bd70      	pop	{r4, r5, r6, pc}

08009178 <__smakebuf_r>:
 8009178:	898b      	ldrh	r3, [r1, #12]
 800917a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800917c:	079d      	lsls	r5, r3, #30
 800917e:	4606      	mov	r6, r0
 8009180:	460c      	mov	r4, r1
 8009182:	d507      	bpl.n	8009194 <__smakebuf_r+0x1c>
 8009184:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009188:	6023      	str	r3, [r4, #0]
 800918a:	6123      	str	r3, [r4, #16]
 800918c:	2301      	movs	r3, #1
 800918e:	6163      	str	r3, [r4, #20]
 8009190:	b002      	add	sp, #8
 8009192:	bd70      	pop	{r4, r5, r6, pc}
 8009194:	466a      	mov	r2, sp
 8009196:	ab01      	add	r3, sp, #4
 8009198:	f7ff ffca 	bl	8009130 <__swhatbuf_r>
 800919c:	9900      	ldr	r1, [sp, #0]
 800919e:	4605      	mov	r5, r0
 80091a0:	4630      	mov	r0, r6
 80091a2:	f7ff fbd9 	bl	8008958 <_malloc_r>
 80091a6:	b948      	cbnz	r0, 80091bc <__smakebuf_r+0x44>
 80091a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ac:	059a      	lsls	r2, r3, #22
 80091ae:	d4ef      	bmi.n	8009190 <__smakebuf_r+0x18>
 80091b0:	f023 0303 	bic.w	r3, r3, #3
 80091b4:	f043 0302 	orr.w	r3, r3, #2
 80091b8:	81a3      	strh	r3, [r4, #12]
 80091ba:	e7e3      	b.n	8009184 <__smakebuf_r+0xc>
 80091bc:	4b0d      	ldr	r3, [pc, #52]	; (80091f4 <__smakebuf_r+0x7c>)
 80091be:	62b3      	str	r3, [r6, #40]	; 0x28
 80091c0:	89a3      	ldrh	r3, [r4, #12]
 80091c2:	6020      	str	r0, [r4, #0]
 80091c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091c8:	81a3      	strh	r3, [r4, #12]
 80091ca:	9b00      	ldr	r3, [sp, #0]
 80091cc:	6120      	str	r0, [r4, #16]
 80091ce:	6163      	str	r3, [r4, #20]
 80091d0:	9b01      	ldr	r3, [sp, #4]
 80091d2:	b15b      	cbz	r3, 80091ec <__smakebuf_r+0x74>
 80091d4:	4630      	mov	r0, r6
 80091d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091da:	f000 f863 	bl	80092a4 <_isatty_r>
 80091de:	b128      	cbz	r0, 80091ec <__smakebuf_r+0x74>
 80091e0:	89a3      	ldrh	r3, [r4, #12]
 80091e2:	f023 0303 	bic.w	r3, r3, #3
 80091e6:	f043 0301 	orr.w	r3, r3, #1
 80091ea:	81a3      	strh	r3, [r4, #12]
 80091ec:	89a0      	ldrh	r0, [r4, #12]
 80091ee:	4305      	orrs	r5, r0
 80091f0:	81a5      	strh	r5, [r4, #12]
 80091f2:	e7cd      	b.n	8009190 <__smakebuf_r+0x18>
 80091f4:	08007fa5 	.word	0x08007fa5

080091f8 <__ascii_mbtowc>:
 80091f8:	b082      	sub	sp, #8
 80091fa:	b901      	cbnz	r1, 80091fe <__ascii_mbtowc+0x6>
 80091fc:	a901      	add	r1, sp, #4
 80091fe:	b142      	cbz	r2, 8009212 <__ascii_mbtowc+0x1a>
 8009200:	b14b      	cbz	r3, 8009216 <__ascii_mbtowc+0x1e>
 8009202:	7813      	ldrb	r3, [r2, #0]
 8009204:	600b      	str	r3, [r1, #0]
 8009206:	7812      	ldrb	r2, [r2, #0]
 8009208:	1e10      	subs	r0, r2, #0
 800920a:	bf18      	it	ne
 800920c:	2001      	movne	r0, #1
 800920e:	b002      	add	sp, #8
 8009210:	4770      	bx	lr
 8009212:	4610      	mov	r0, r2
 8009214:	e7fb      	b.n	800920e <__ascii_mbtowc+0x16>
 8009216:	f06f 0001 	mvn.w	r0, #1
 800921a:	e7f8      	b.n	800920e <__ascii_mbtowc+0x16>

0800921c <__malloc_lock>:
 800921c:	4801      	ldr	r0, [pc, #4]	; (8009224 <__malloc_lock+0x8>)
 800921e:	f7fe bf98 	b.w	8008152 <__retarget_lock_acquire_recursive>
 8009222:	bf00      	nop
 8009224:	20000270 	.word	0x20000270

08009228 <__malloc_unlock>:
 8009228:	4801      	ldr	r0, [pc, #4]	; (8009230 <__malloc_unlock+0x8>)
 800922a:	f7fe bf93 	b.w	8008154 <__retarget_lock_release_recursive>
 800922e:	bf00      	nop
 8009230:	20000270 	.word	0x20000270

08009234 <_read_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4604      	mov	r4, r0
 8009238:	4608      	mov	r0, r1
 800923a:	4611      	mov	r1, r2
 800923c:	2200      	movs	r2, #0
 800923e:	4d05      	ldr	r5, [pc, #20]	; (8009254 <_read_r+0x20>)
 8009240:	602a      	str	r2, [r5, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	f7fc fa76 	bl	8005734 <_read>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d102      	bne.n	8009252 <_read_r+0x1e>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	b103      	cbz	r3, 8009252 <_read_r+0x1e>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	20000278 	.word	0x20000278

08009258 <__ascii_wctomb>:
 8009258:	4603      	mov	r3, r0
 800925a:	4608      	mov	r0, r1
 800925c:	b141      	cbz	r1, 8009270 <__ascii_wctomb+0x18>
 800925e:	2aff      	cmp	r2, #255	; 0xff
 8009260:	d904      	bls.n	800926c <__ascii_wctomb+0x14>
 8009262:	228a      	movs	r2, #138	; 0x8a
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	4770      	bx	lr
 800926c:	2001      	movs	r0, #1
 800926e:	700a      	strb	r2, [r1, #0]
 8009270:	4770      	bx	lr

08009272 <abort>:
 8009272:	2006      	movs	r0, #6
 8009274:	b508      	push	{r3, lr}
 8009276:	f000 f84d 	bl	8009314 <raise>
 800927a:	2001      	movs	r0, #1
 800927c:	f7fc fa50 	bl	8005720 <_exit>

08009280 <_fstat_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	2300      	movs	r3, #0
 8009284:	4d06      	ldr	r5, [pc, #24]	; (80092a0 <_fstat_r+0x20>)
 8009286:	4604      	mov	r4, r0
 8009288:	4608      	mov	r0, r1
 800928a:	4611      	mov	r1, r2
 800928c:	602b      	str	r3, [r5, #0]
 800928e:	f7fc fa95 	bl	80057bc <_fstat>
 8009292:	1c43      	adds	r3, r0, #1
 8009294:	d102      	bne.n	800929c <_fstat_r+0x1c>
 8009296:	682b      	ldr	r3, [r5, #0]
 8009298:	b103      	cbz	r3, 800929c <_fstat_r+0x1c>
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	bd38      	pop	{r3, r4, r5, pc}
 800929e:	bf00      	nop
 80092a0:	20000278 	.word	0x20000278

080092a4 <_isatty_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	2300      	movs	r3, #0
 80092a8:	4d05      	ldr	r5, [pc, #20]	; (80092c0 <_isatty_r+0x1c>)
 80092aa:	4604      	mov	r4, r0
 80092ac:	4608      	mov	r0, r1
 80092ae:	602b      	str	r3, [r5, #0]
 80092b0:	f7fc fa93 	bl	80057da <_isatty>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	d102      	bne.n	80092be <_isatty_r+0x1a>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	b103      	cbz	r3, 80092be <_isatty_r+0x1a>
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	20000278 	.word	0x20000278

080092c4 <_raise_r>:
 80092c4:	291f      	cmp	r1, #31
 80092c6:	b538      	push	{r3, r4, r5, lr}
 80092c8:	4604      	mov	r4, r0
 80092ca:	460d      	mov	r5, r1
 80092cc:	d904      	bls.n	80092d8 <_raise_r+0x14>
 80092ce:	2316      	movs	r3, #22
 80092d0:	6003      	str	r3, [r0, #0]
 80092d2:	f04f 30ff 	mov.w	r0, #4294967295
 80092d6:	bd38      	pop	{r3, r4, r5, pc}
 80092d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092da:	b112      	cbz	r2, 80092e2 <_raise_r+0x1e>
 80092dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092e0:	b94b      	cbnz	r3, 80092f6 <_raise_r+0x32>
 80092e2:	4620      	mov	r0, r4
 80092e4:	f000 f830 	bl	8009348 <_getpid_r>
 80092e8:	462a      	mov	r2, r5
 80092ea:	4601      	mov	r1, r0
 80092ec:	4620      	mov	r0, r4
 80092ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092f2:	f000 b817 	b.w	8009324 <_kill_r>
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d00a      	beq.n	8009310 <_raise_r+0x4c>
 80092fa:	1c59      	adds	r1, r3, #1
 80092fc:	d103      	bne.n	8009306 <_raise_r+0x42>
 80092fe:	2316      	movs	r3, #22
 8009300:	6003      	str	r3, [r0, #0]
 8009302:	2001      	movs	r0, #1
 8009304:	e7e7      	b.n	80092d6 <_raise_r+0x12>
 8009306:	2400      	movs	r4, #0
 8009308:	4628      	mov	r0, r5
 800930a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800930e:	4798      	blx	r3
 8009310:	2000      	movs	r0, #0
 8009312:	e7e0      	b.n	80092d6 <_raise_r+0x12>

08009314 <raise>:
 8009314:	4b02      	ldr	r3, [pc, #8]	; (8009320 <raise+0xc>)
 8009316:	4601      	mov	r1, r0
 8009318:	6818      	ldr	r0, [r3, #0]
 800931a:	f7ff bfd3 	b.w	80092c4 <_raise_r>
 800931e:	bf00      	nop
 8009320:	20000010 	.word	0x20000010

08009324 <_kill_r>:
 8009324:	b538      	push	{r3, r4, r5, lr}
 8009326:	2300      	movs	r3, #0
 8009328:	4d06      	ldr	r5, [pc, #24]	; (8009344 <_kill_r+0x20>)
 800932a:	4604      	mov	r4, r0
 800932c:	4608      	mov	r0, r1
 800932e:	4611      	mov	r1, r2
 8009330:	602b      	str	r3, [r5, #0]
 8009332:	f7fc f9e5 	bl	8005700 <_kill>
 8009336:	1c43      	adds	r3, r0, #1
 8009338:	d102      	bne.n	8009340 <_kill_r+0x1c>
 800933a:	682b      	ldr	r3, [r5, #0]
 800933c:	b103      	cbz	r3, 8009340 <_kill_r+0x1c>
 800933e:	6023      	str	r3, [r4, #0]
 8009340:	bd38      	pop	{r3, r4, r5, pc}
 8009342:	bf00      	nop
 8009344:	20000278 	.word	0x20000278

08009348 <_getpid_r>:
 8009348:	f7fc b9d3 	b.w	80056f2 <_getpid>

0800934c <_init>:
 800934c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800934e:	bf00      	nop
 8009350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009352:	bc08      	pop	{r3}
 8009354:	469e      	mov	lr, r3
 8009356:	4770      	bx	lr

08009358 <_fini>:
 8009358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935a:	bf00      	nop
 800935c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800935e:	bc08      	pop	{r3}
 8009360:	469e      	mov	lr, r3
 8009362:	4770      	bx	lr
