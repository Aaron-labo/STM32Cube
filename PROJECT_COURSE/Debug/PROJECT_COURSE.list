
PROJECT_COURSE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d608  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d3a4  0800d7f0  0800d7f0  0001d7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ab94  0801ab94  000301e8  2**0
                  CONTENTS
  4 .ARM          00000000  0801ab94  0801ab94  000301e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801ab94  0801ab94  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ab94  0801ab94  0002ab94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ab98  0801ab98  0002ab98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0801ab9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  200001e8  0801ad84  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  0801ad84  00030444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a630  00000000  00000000  00030211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a77  00000000  00000000  0004a841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0004e2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0004f4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ddda  00000000  00000000  00050590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a59  00000000  00000000  0006e36a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f8a5  00000000  00000000  00084dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00124668  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061a4  00000000  00000000  001246bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e8 	.word	0x200001e8
 8000204:	00000000 	.word	0x00000000
 8000208:	0800d7d8 	.word	0x0800d7d8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001ec 	.word	0x200001ec
 8000224:	0800d7d8 	.word	0x0800d7d8

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_fcmpun>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80011f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80011f4:	d102      	bne.n	80011fc <__aeabi_fcmpun+0x14>
 80011f6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011fa:	d108      	bne.n	800120e <__aeabi_fcmpun+0x26>
 80011fc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001200:	d102      	bne.n	8001208 <__aeabi_fcmpun+0x20>
 8001202:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001206:	d102      	bne.n	800120e <__aeabi_fcmpun+0x26>
 8001208:	f04f 0000 	mov.w	r0, #0
 800120c:	4770      	bx	lr
 800120e:	f04f 0001 	mov.w	r0, #1
 8001212:	4770      	bx	lr

08001214 <__aeabi_d2lz>:
 8001214:	b538      	push	{r3, r4, r5, lr}
 8001216:	460c      	mov	r4, r1
 8001218:	4605      	mov	r5, r0
 800121a:	4621      	mov	r1, r4
 800121c:	4628      	mov	r0, r5
 800121e:	2200      	movs	r2, #0
 8001220:	2300      	movs	r3, #0
 8001222:	f7ff fc37 	bl	8000a94 <__aeabi_dcmplt>
 8001226:	b928      	cbnz	r0, 8001234 <__aeabi_d2lz+0x20>
 8001228:	4628      	mov	r0, r5
 800122a:	4621      	mov	r1, r4
 800122c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001230:	f000 b80a 	b.w	8001248 <__aeabi_d2ulz>
 8001234:	4628      	mov	r0, r5
 8001236:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800123a:	f000 f805 	bl	8001248 <__aeabi_d2ulz>
 800123e:	4240      	negs	r0, r0
 8001240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001244:	bd38      	pop	{r3, r4, r5, pc}
 8001246:	bf00      	nop

08001248 <__aeabi_d2ulz>:
 8001248:	b5d0      	push	{r4, r6, r7, lr}
 800124a:	2200      	movs	r2, #0
 800124c:	4b0b      	ldr	r3, [pc, #44]	; (800127c <__aeabi_d2ulz+0x34>)
 800124e:	4606      	mov	r6, r0
 8001250:	460f      	mov	r7, r1
 8001252:	f7ff f9ad 	bl	80005b0 <__aeabi_dmul>
 8001256:	f7ff fc83 	bl	8000b60 <__aeabi_d2uiz>
 800125a:	4604      	mov	r4, r0
 800125c:	f7ff f92e 	bl	80004bc <__aeabi_ui2d>
 8001260:	2200      	movs	r2, #0
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <__aeabi_d2ulz+0x38>)
 8001264:	f7ff f9a4 	bl	80005b0 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4630      	mov	r0, r6
 800126e:	4639      	mov	r1, r7
 8001270:	f7fe ffe6 	bl	8000240 <__aeabi_dsub>
 8001274:	f7ff fc74 	bl	8000b60 <__aeabi_d2uiz>
 8001278:	4621      	mov	r1, r4
 800127a:	bdd0      	pop	{r4, r6, r7, pc}
 800127c:	3df00000 	.word	0x3df00000
 8001280:	41f00000 	.word	0x41f00000

08001284 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08e      	sub	sp, #56	; 0x38
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	615a      	str	r2, [r3, #20]
 80012ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80012b0:	4b30      	ldr	r3, [pc, #192]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012b2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012b6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80012b8:	4b2e      	ldr	r3, [pc, #184]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012ba:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <MX_FSMC_Init+0xf4>)
 80012bc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012c0:	2206      	movs	r2, #6
 80012c2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012d0:	4b28      	ldr	r3, [pc, #160]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012d2:	2210      	movs	r2, #16
 80012d4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012d6:	4b27      	ldr	r3, [pc, #156]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012f6:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80012fc:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <MX_FSMC_Init+0xf0>)
 80012fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001302:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <MX_FSMC_Init+0xf0>)
 8001306:	2200      	movs	r2, #0
 8001308:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_FSMC_Init+0xf0>)
 800130c:	2200      	movs	r2, #0
 800130e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 1;
 8001310:	2301      	movs	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001314:	230f      	movs	r3, #15
 8001316:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 4;
 8001318:	2304      	movs	r3, #4
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 800131c:	230f      	movs	r3, #15
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001320:	2310      	movs	r3, #16
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001324:	2311      	movs	r3, #17
 8001326:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001328:	2300      	movs	r3, #0
 800132a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001330:	230f      	movs	r3, #15
 8001332:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 8001334:	2303      	movs	r3, #3
 8001336:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8001338:	230f      	movs	r3, #15
 800133a:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800133c:	2310      	movs	r3, #16
 800133e:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001340:	2311      	movs	r3, #17
 8001342:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001344:	2300      	movs	r3, #0
 8001346:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001348:	463a      	mov	r2, r7
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4619      	mov	r1, r3
 8001350:	4808      	ldr	r0, [pc, #32]	; (8001374 <MX_FSMC_Init+0xf0>)
 8001352:	f007 f811 	bl	8008378 <HAL_SRAM_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 800135c:	f000 fc5c 	bl	8001c18 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <MX_FSMC_Init+0xf8>)
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	4a05      	ldr	r2, [pc, #20]	; (800137c <MX_FSMC_Init+0xf8>)
 8001366:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800136a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800136c:	bf00      	nop
 800136e:	3738      	adds	r7, #56	; 0x38
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000021c 	.word	0x2000021c
 8001378:	a0000104 	.word	0xa0000104
 800137c:	40010000 	.word	0x40010000

08001380 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001394:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <HAL_FSMC_MspInit+0x94>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d136      	bne.n	800140a <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_FSMC_MspInit+0x94>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_FSMC_MspInit+0x98>)
 80013a4:	695b      	ldr	r3, [r3, #20]
 80013a6:	4a1c      	ldr	r2, [pc, #112]	; (8001418 <HAL_FSMC_MspInit+0x98>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	6153      	str	r3, [r2, #20]
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_FSMC_MspInit+0x98>)
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 80013ba:	f241 0301 	movw	r3, #4097	; 0x1001
 80013be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c4:	2303      	movs	r3, #3
 80013c6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	4619      	mov	r1, r3
 80013ce:	4813      	ldr	r0, [pc, #76]	; (800141c <HAL_FSMC_MspInit+0x9c>)
 80013d0:	f005 ff28 	bl	8007224 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013d4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80013d8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	4619      	mov	r1, r3
 80013e8:	480d      	ldr	r0, [pc, #52]	; (8001420 <HAL_FSMC_MspInit+0xa0>)
 80013ea:	f005 ff1b 	bl	8007224 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013ee:	f24c 7333 	movw	r3, #50995	; 0xc733
 80013f2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4619      	mov	r1, r3
 8001402:	4808      	ldr	r0, [pc, #32]	; (8001424 <HAL_FSMC_MspInit+0xa4>)
 8001404:	f005 ff0e 	bl	8007224 <HAL_GPIO_Init>
 8001408:	e000      	b.n	800140c <HAL_FSMC_MspInit+0x8c>
    return;
 800140a:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000204 	.word	0x20000204
 8001418:	40021000 	.word	0x40021000
 800141c:	40012000 	.word	0x40012000
 8001420:	40011800 	.word	0x40011800
 8001424:	40011400 	.word	0x40011400

08001428 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001430:	f7ff ffa6 	bl	8001380 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001442:	f107 0318 	add.w	r3, r7, #24
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001450:	4b63      	ldr	r3, [pc, #396]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a62      	ldr	r2, [pc, #392]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 8001456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b60      	ldr	r3, [pc, #384]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b5d      	ldr	r3, [pc, #372]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a5c      	ldr	r2, [pc, #368]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b5a      	ldr	r3, [pc, #360]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	4b57      	ldr	r3, [pc, #348]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a56      	ldr	r2, [pc, #344]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b54      	ldr	r3, [pc, #336]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001498:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a50      	ldr	r2, [pc, #320]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 800149e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b4e      	ldr	r3, [pc, #312]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b0:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a4a      	ldr	r2, [pc, #296]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 80014b6:	f043 0320 	orr.w	r3, r3, #32
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b48      	ldr	r3, [pc, #288]	; (80015e0 <MX_GPIO_Init+0x1a4>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2120      	movs	r1, #32
 80014cc:	4845      	ldr	r0, [pc, #276]	; (80015e4 <MX_GPIO_Init+0x1a8>)
 80014ce:	f006 f854 	bl	800757a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2140      	movs	r1, #64	; 0x40
 80014d6:	4844      	ldr	r0, [pc, #272]	; (80015e8 <MX_GPIO_Init+0x1ac>)
 80014d8:	f006 f84f 	bl	800757a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|BEEP_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	f240 1101 	movw	r1, #257	; 0x101
 80014e2:	4842      	ldr	r0, [pc, #264]	; (80015ec <MX_GPIO_Init+0x1b0>)
 80014e4:	f006 f849 	bl	800757a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, NRF_CS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80014ee:	4840      	ldr	r0, [pc, #256]	; (80015f0 <MX_GPIO_Init+0x1b4>)
 80014f0:	f006 f843 	bl	800757a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2120      	movs	r1, #32
 80014f8:	483c      	ldr	r0, [pc, #240]	; (80015ec <MX_GPIO_Init+0x1b0>)
 80014fa:	f006 f83e 	bl	800757a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 80014fe:	2318      	movs	r3, #24
 8001500:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001506:	2301      	movs	r3, #1
 8001508:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	4619      	mov	r1, r3
 8001510:	4834      	ldr	r0, [pc, #208]	; (80015e4 <MX_GPIO_Init+0x1a8>)
 8001512:	f005 fe87 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001516:	2320      	movs	r3, #32
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800151e:	2301      	movs	r3, #1
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 0318 	add.w	r3, r7, #24
 800152a:	4619      	mov	r1, r3
 800152c:	482d      	ldr	r0, [pc, #180]	; (80015e4 <MX_GPIO_Init+0x1a8>)
 800152e:	f005 fe79 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KY_UP_Pin|HC_SR501_Pin|Echo_Pin;
 8001532:	23a1      	movs	r3, #161	; 0xa1
 8001534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800153a:	2302      	movs	r3, #2
 800153c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0318 	add.w	r3, r7, #24
 8001542:	4619      	mov	r1, r3
 8001544:	4828      	ldr	r0, [pc, #160]	; (80015e8 <MX_GPIO_Init+0x1ac>)
 8001546:	f005 fe6d 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trig_Pin;
 800154a:	2340      	movs	r3, #64	; 0x40
 800154c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001552:	2302      	movs	r3, #2
 8001554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0318 	add.w	r3, r7, #24
 800155e:	4619      	mov	r1, r3
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <MX_GPIO_Init+0x1ac>)
 8001562:	f005 fe5f 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LED0_Pin;
 8001566:	2321      	movs	r3, #33	; 0x21
 8001568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156e:	2301      	movs	r3, #1
 8001570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001572:	2303      	movs	r3, #3
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001576:	f107 0318 	add.w	r3, r7, #24
 800157a:	4619      	mov	r1, r3
 800157c:	481b      	ldr	r0, [pc, #108]	; (80015ec <MX_GPIO_Init+0x1b0>)
 800157e:	f005 fe51 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PG11 */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin|GPIO_PIN_11;
 8001582:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8001586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800158c:	2302      	movs	r3, #2
 800158e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001590:	f107 0318 	add.w	r3, r7, #24
 8001594:	4619      	mov	r1, r3
 8001596:	4816      	ldr	r0, [pc, #88]	; (80015f0 <MX_GPIO_Init+0x1b4>)
 8001598:	f005 fe44 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = NRF_CS_Pin|NRF_CE_Pin;
 800159c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015a6:	2302      	movs	r3, #2
 80015a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	4619      	mov	r1, r3
 80015b4:	480e      	ldr	r0, [pc, #56]	; (80015f0 <MX_GPIO_Init+0x1b4>)
 80015b6:	f005 fe35 	bl	8007224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80015ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 80015cc:	f107 0318 	add.w	r3, r7, #24
 80015d0:	4619      	mov	r1, r3
 80015d2:	4806      	ldr	r0, [pc, #24]	; (80015ec <MX_GPIO_Init+0x1b0>)
 80015d4:	f005 fe26 	bl	8007224 <HAL_GPIO_Init>

}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	; 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40011800 	.word	0x40011800
 80015e8:	40010800 	.word	0x40010800
 80015ec:	40010c00 	.word	0x40010c00
 80015f0:	40012000 	.word	0x40012000

080015f4 <LCD_Show>:
uint8_t Rx_Buf[32];
uint8_t Tx_Buf[32];
uint8_t mode, key;
uint32_t i = 0;

void LCD_Show() {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b092      	sub	sp, #72	; 0x48
 80015f8:	af02      	add	r7, sp, #8
	uint8_t ShowBuffer[64]; //LCD输出缓冲区

	//LCD输出一个logo
	POINT_COLOR = BLACK; //将画笔颜色设置为黑色
 80015fa:	4b64      	ldr	r3, [pc, #400]	; (800178c <LCD_Show+0x198>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(25, 30, 240, 16, 16, (uint8_t*) ".------..------..------.");
 8001600:	4b63      	ldr	r3, [pc, #396]	; (8001790 <LCD_Show+0x19c>)
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	2310      	movs	r3, #16
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2310      	movs	r3, #16
 800160a:	22f0      	movs	r2, #240	; 0xf0
 800160c:	211e      	movs	r1, #30
 800160e:	2019      	movs	r0, #25
 8001610:	f005 fc50 	bl	8006eb4 <LCD_ShowString>
	LCD_ShowString(25, 45, 240, 16, 16, (uint8_t*) "|W.--. ||X.--. ||Y.--. |");
 8001614:	4b5f      	ldr	r3, [pc, #380]	; (8001794 <LCD_Show+0x1a0>)
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	2310      	movs	r3, #16
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2310      	movs	r3, #16
 800161e:	22f0      	movs	r2, #240	; 0xf0
 8001620:	212d      	movs	r1, #45	; 0x2d
 8001622:	2019      	movs	r0, #25
 8001624:	f005 fc46 	bl	8006eb4 <LCD_ShowString>
	LCD_ShowString(25, 60, 240, 16, 16,
 8001628:	4b5b      	ldr	r3, [pc, #364]	; (8001798 <LCD_Show+0x1a4>)
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2310      	movs	r3, #16
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2310      	movs	r3, #16
 8001632:	22f0      	movs	r2, #240	; 0xf0
 8001634:	213c      	movs	r1, #60	; 0x3c
 8001636:	2019      	movs	r0, #25
 8001638:	f005 fc3c 	bl	8006eb4 <LCD_ShowString>
			(uint8_t*) "| :/\\: || :/\\: || (\\/) |");
	LCD_ShowString(25, 75, 240, 16, 16,
 800163c:	4b57      	ldr	r3, [pc, #348]	; (800179c <LCD_Show+0x1a8>)
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	2310      	movs	r3, #16
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2310      	movs	r3, #16
 8001646:	22f0      	movs	r2, #240	; 0xf0
 8001648:	214b      	movs	r1, #75	; 0x4b
 800164a:	2019      	movs	r0, #25
 800164c:	f005 fc32 	bl	8006eb4 <LCD_ShowString>
			(uint8_t*) "| :\\/: || (__) || :\\/: |");
	LCD_ShowString(25, 90, 240, 16, 16, (uint8_t*) "| '--'W|| '--'X|| '--'Y|");
 8001650:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <LCD_Show+0x1ac>)
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	2310      	movs	r3, #16
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	2310      	movs	r3, #16
 800165a:	22f0      	movs	r2, #240	; 0xf0
 800165c:	215a      	movs	r1, #90	; 0x5a
 800165e:	2019      	movs	r0, #25
 8001660:	f005 fc28 	bl	8006eb4 <LCD_ShowString>
	LCD_ShowString(25, 105, 240, 16, 16, (uint8_t*) "`------'`------'`------'");
 8001664:	4b4f      	ldr	r3, [pc, #316]	; (80017a4 <LCD_Show+0x1b0>)
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2310      	movs	r3, #16
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2310      	movs	r3, #16
 800166e:	22f0      	movs	r2, #240	; 0xf0
 8001670:	2169      	movs	r1, #105	; 0x69
 8001672:	2019      	movs	r0, #25
 8001674:	f005 fc1e 	bl	8006eb4 <LCD_ShowString>

	//LCD输出测距结果
	POINT_COLOR = BLACK; //将画笔颜色设置为黑色
 8001678:	4b44      	ldr	r3, [pc, #272]	; (800178c <LCD_Show+0x198>)
 800167a:	2200      	movs	r2, #0
 800167c:	801a      	strh	r2, [r3, #0]
	sprintf((char*) ShowBuffer, "DIST:%7.2f", hc_sr04.distance);
 800167e:	4b4a      	ldr	r3, [pc, #296]	; (80017a8 <LCD_Show+0x1b4>)
 8001680:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001684:	4638      	mov	r0, r7
 8001686:	4949      	ldr	r1, [pc, #292]	; (80017ac <LCD_Show+0x1b8>)
 8001688:	f008 fab0 	bl	8009bec <siprintf>
	LCD_ShowString(30, 140, 240, 24, 24, ShowBuffer);
 800168c:	463b      	mov	r3, r7
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	2318      	movs	r3, #24
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2318      	movs	r3, #24
 8001696:	22f0      	movs	r2, #240	; 0xf0
 8001698:	218c      	movs	r1, #140	; 0x8c
 800169a:	201e      	movs	r0, #30
 800169c:	f005 fc0a 	bl	8006eb4 <LCD_ShowString>

	//LCD输出测温结果
	sprintf((char*) ShowBuffer, "TEMP:%7.2f", temperature);
 80016a0:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <LCD_Show+0x1bc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe ff2b 	bl	8000500 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4638      	mov	r0, r7
 80016b0:	4940      	ldr	r1, [pc, #256]	; (80017b4 <LCD_Show+0x1c0>)
 80016b2:	f008 fa9b 	bl	8009bec <siprintf>
	LCD_ShowString(30, 170, 240, 24, 24, ShowBuffer);
 80016b6:	463b      	mov	r3, r7
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	2318      	movs	r3, #24
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2318      	movs	r3, #24
 80016c0:	22f0      	movs	r2, #240	; 0xf0
 80016c2:	21aa      	movs	r1, #170	; 0xaa
 80016c4:	201e      	movs	r0, #30
 80016c6:	f005 fbf5 	bl	8006eb4 <LCD_ShowString>

	if (mode == KEY0_PRES) {
 80016ca:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <LCD_Show+0x1c4>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d10b      	bne.n	80016ea <LCD_Show+0xf6>
		LCD_ShowString(25, 280, 200, 24, 24, (uint8_t*) "NRF24L01 RX_MODE");
 80016d2:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <LCD_Show+0x1c8>)
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	2318      	movs	r3, #24
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	2318      	movs	r3, #24
 80016dc:	22c8      	movs	r2, #200	; 0xc8
 80016de:	f44f 718c 	mov.w	r1, #280	; 0x118
 80016e2:	2019      	movs	r0, #25
 80016e4:	f005 fbe6 	bl	8006eb4 <LCD_ShowString>
 80016e8:	e00e      	b.n	8001708 <LCD_Show+0x114>
	} else if (mode == KEY1_PRES) {
 80016ea:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <LCD_Show+0x1c4>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d10a      	bne.n	8001708 <LCD_Show+0x114>
		LCD_ShowString(25, 280, 200, 24, 24, (uint8_t*) "NRF24L01 TX_MODE");
 80016f2:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <LCD_Show+0x1cc>)
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	2318      	movs	r3, #24
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2318      	movs	r3, #24
 80016fc:	22c8      	movs	r2, #200	; 0xc8
 80016fe:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001702:	2019      	movs	r0, #25
 8001704:	f005 fbd6 	bl	8006eb4 <LCD_ShowString>
	}

	//LCD输出红外结果
	if (LastCome != manCome) {
 8001708:	4b2e      	ldr	r3, [pc, #184]	; (80017c4 <LCD_Show+0x1d0>)
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <LCD_Show+0x1d4>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	429a      	cmp	r2, r3
 8001712:	d009      	beq.n	8001728 <LCD_Show+0x134>
		LCD_Fill(20, 200, 220, 280, WHITE);
 8001714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	f44f 738c 	mov.w	r3, #280	; 0x118
 800171e:	22dc      	movs	r2, #220	; 0xdc
 8001720:	21c8      	movs	r1, #200	; 0xc8
 8001722:	2014      	movs	r0, #20
 8001724:	f005 fa72 	bl	8006c0c <LCD_Fill>
	}
	if (manCome == 1) {
 8001728:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <LCD_Show+0x1d4>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d118      	bne.n	8001762 <LCD_Show+0x16e>
		POINT_COLOR = RED;
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <LCD_Show+0x198>)
 8001732:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001736:	801a      	strh	r2, [r3, #0]
		LCD_ShowString(30, 210, 240, 24, 24, (uint8_t*) "SOMEBODY");
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <LCD_Show+0x1d8>)
 800173a:	9301      	str	r3, [sp, #4]
 800173c:	2318      	movs	r3, #24
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	2318      	movs	r3, #24
 8001742:	22f0      	movs	r2, #240	; 0xf0
 8001744:	21d2      	movs	r1, #210	; 0xd2
 8001746:	201e      	movs	r0, #30
 8001748:	f005 fbb4 	bl	8006eb4 <LCD_ShowString>
		LCD_ShowString(30, 240, 240, 24, 24, (uint8_t*) "APPROCHING!!!!");
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <LCD_Show+0x1dc>)
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	2318      	movs	r3, #24
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	2318      	movs	r3, #24
 8001756:	22f0      	movs	r2, #240	; 0xf0
 8001758:	21f0      	movs	r1, #240	; 0xf0
 800175a:	201e      	movs	r0, #30
 800175c:	f005 fbaa 	bl	8006eb4 <LCD_ShowString>
 8001760:	e00c      	b.n	800177c <LCD_Show+0x188>
	} else {
		POINT_COLOR = BLACK;
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <LCD_Show+0x198>)
 8001764:	2200      	movs	r2, #0
 8001766:	801a      	strh	r2, [r3, #0]
		LCD_ShowString(40, 220, 240, 24, 24, (uint8_t*) "NOBODY......");
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <LCD_Show+0x1e0>)
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	2318      	movs	r3, #24
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2318      	movs	r3, #24
 8001772:	22f0      	movs	r2, #240	; 0xf0
 8001774:	21dc      	movs	r1, #220	; 0xdc
 8001776:	2028      	movs	r0, #40	; 0x28
 8001778:	f005 fb9c 	bl	8006eb4 <LCD_ShowString>
	}
	LastCome = manCome;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <LCD_Show+0x1d4>)
 800177e:	781a      	ldrb	r2, [r3, #0]
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <LCD_Show+0x1d0>)
 8001782:	701a      	strb	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	3740      	adds	r7, #64	; 0x40
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000210 	.word	0x20000210
 8001790:	0800d7f0 	.word	0x0800d7f0
 8001794:	0800d80c 	.word	0x0800d80c
 8001798:	0800d828 	.word	0x0800d828
 800179c:	0800d844 	.word	0x0800d844
 80017a0:	0800d860 	.word	0x0800d860
 80017a4:	0800d87c 	.word	0x0800d87c
 80017a8:	20000300 	.word	0x20000300
 80017ac:	0800d898 	.word	0x0800d898
 80017b0:	20000268 	.word	0x20000268
 80017b4:	0800d8a4 	.word	0x0800d8a4
 80017b8:	2000026c 	.word	0x2000026c
 80017bc:	0800d8b0 	.word	0x0800d8b0
 80017c0:	0800d8c4 	.word	0x0800d8c4
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000290 	.word	0x20000290
 80017cc:	0800d8d8 	.word	0x0800d8d8
 80017d0:	0800d8e4 	.word	0x0800d8e4
 80017d4:	0800d8f4 	.word	0x0800d8f4

080017d8 <nRF24L01_Start>:

void nRF24L01_Start(void) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af02      	add	r7, sp, #8
	while (NRF24L01_Check()) {
 80017de:	e01e      	b.n	800181e <nRF24L01_Start+0x46>
		POINT_COLOR = RED;
 80017e0:	4b65      	ldr	r3, [pc, #404]	; (8001978 <nRF24L01_Start+0x1a0>)
 80017e2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80017e6:	801a      	strh	r2, [r3, #0]
		LCD_ShowString(30, 70, 200, 24, 24, (uint8_t*) "NRF24L01 Error...");
 80017e8:	4b64      	ldr	r3, [pc, #400]	; (800197c <nRF24L01_Start+0x1a4>)
 80017ea:	9301      	str	r3, [sp, #4]
 80017ec:	2318      	movs	r3, #24
 80017ee:	9300      	str	r3, [sp, #0]
 80017f0:	2318      	movs	r3, #24
 80017f2:	22c8      	movs	r2, #200	; 0xc8
 80017f4:	2146      	movs	r1, #70	; 0x46
 80017f6:	201e      	movs	r0, #30
 80017f8:	f005 fb5c 	bl	8006eb4 <LCD_ShowString>
		HAL_Delay(700);
 80017fc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001800:	f005 fc08 	bl	8007014 <HAL_Delay>
		LCD_Fill(30, 70, 230, 94, WHITE);
 8001804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	235e      	movs	r3, #94	; 0x5e
 800180c:	22e6      	movs	r2, #230	; 0xe6
 800180e:	2146      	movs	r1, #70	; 0x46
 8001810:	201e      	movs	r0, #30
 8001812:	f005 f9fb 	bl	8006c0c <LCD_Fill>
		HAL_Delay(700);
 8001816:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800181a:	f005 fbfb 	bl	8007014 <HAL_Delay>
	while (NRF24L01_Check()) {
 800181e:	f007 fb69 	bl	8008ef4 <NRF24L01_Check>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1db      	bne.n	80017e0 <nRF24L01_Start+0x8>
	}
	LCD_Fill(30, 70, 230, 94, WHITE);
 8001828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	235e      	movs	r3, #94	; 0x5e
 8001830:	22e6      	movs	r2, #230	; 0xe6
 8001832:	2146      	movs	r1, #70	; 0x46
 8001834:	201e      	movs	r0, #30
 8001836:	f005 f9e9 	bl	8006c0c <LCD_Fill>
	POINT_COLOR = BLACK;
 800183a:	4b4f      	ldr	r3, [pc, #316]	; (8001978 <nRF24L01_Start+0x1a0>)
 800183c:	2200      	movs	r2, #0
 800183e:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(30, 70, 200, 24, 24, (uint8_t*) "NRF24L01 OK");
 8001840:	4b4f      	ldr	r3, [pc, #316]	; (8001980 <nRF24L01_Start+0x1a8>)
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	2318      	movs	r3, #24
 8001846:	9300      	str	r3, [sp, #0]
 8001848:	2318      	movs	r3, #24
 800184a:	22c8      	movs	r2, #200	; 0xc8
 800184c:	2146      	movs	r1, #70	; 0x46
 800184e:	201e      	movs	r0, #30
 8001850:	f005 fb30 	bl	8006eb4 <LCD_ShowString>
	HAL_Delay(300);
 8001854:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001858:	f005 fbdc 	bl	8007014 <HAL_Delay>
	LCD_ShowString(30, 70, 200, 24, 24, (uint8_t*) "NRF24L01 OK.");
 800185c:	4b49      	ldr	r3, [pc, #292]	; (8001984 <nRF24L01_Start+0x1ac>)
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	2318      	movs	r3, #24
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2318      	movs	r3, #24
 8001866:	22c8      	movs	r2, #200	; 0xc8
 8001868:	2146      	movs	r1, #70	; 0x46
 800186a:	201e      	movs	r0, #30
 800186c:	f005 fb22 	bl	8006eb4 <LCD_ShowString>
	HAL_Delay(500);
 8001870:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001874:	f005 fbce 	bl	8007014 <HAL_Delay>
	LCD_ShowString(30, 70, 200, 24, 24, (uint8_t*) "NRF24L01 OK..");
 8001878:	4b43      	ldr	r3, [pc, #268]	; (8001988 <nRF24L01_Start+0x1b0>)
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	2318      	movs	r3, #24
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2318      	movs	r3, #24
 8001882:	22c8      	movs	r2, #200	; 0xc8
 8001884:	2146      	movs	r1, #70	; 0x46
 8001886:	201e      	movs	r0, #30
 8001888:	f005 fb14 	bl	8006eb4 <LCD_ShowString>
	HAL_Delay(500);
 800188c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001890:	f005 fbc0 	bl	8007014 <HAL_Delay>
	LCD_ShowString(30, 70, 200, 24, 24, (uint8_t*) "NRF24L01 OK...");
 8001894:	4b3d      	ldr	r3, [pc, #244]	; (800198c <nRF24L01_Start+0x1b4>)
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	2318      	movs	r3, #24
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2318      	movs	r3, #24
 800189e:	22c8      	movs	r2, #200	; 0xc8
 80018a0:	2146      	movs	r1, #70	; 0x46
 80018a2:	201e      	movs	r0, #30
 80018a4:	f005 fb06 	bl	8006eb4 <LCD_ShowString>
	HAL_Delay(500);
 80018a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ac:	f005 fbb2 	bl	8007014 <HAL_Delay>

	while (1) {
		i++;
 80018b0:	4b37      	ldr	r3, [pc, #220]	; (8001990 <nRF24L01_Start+0x1b8>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3301      	adds	r3, #1
 80018b6:	4a36      	ldr	r2, [pc, #216]	; (8001990 <nRF24L01_Start+0x1b8>)
 80018b8:	6013      	str	r3, [r2, #0]
		mode = KeyScan(0);
 80018ba:	2000      	movs	r0, #0
 80018bc:	f000 fec4 	bl	8002648 <KeyScan>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <nRF24L01_Start+0x1bc>)
 80018c6:	701a      	strb	r2, [r3, #0]
		POINT_COLOR = RED;
 80018c8:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <nRF24L01_Start+0x1a0>)
 80018ca:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80018ce:	801a      	strh	r2, [r3, #0]
		if (i == 80000) {
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <nRF24L01_Start+0x1b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a30      	ldr	r2, [pc, #192]	; (8001998 <nRF24L01_Start+0x1c0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d11e      	bne.n	8001918 <nRF24L01_Start+0x140>
			LCD_ShowString(40, 130, 200, 24, 24, (uint8_t*) "RECEIVE(KEY0)");
 80018da:	4b30      	ldr	r3, [pc, #192]	; (800199c <nRF24L01_Start+0x1c4>)
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	2318      	movs	r3, #24
 80018e0:	9300      	str	r3, [sp, #0]
 80018e2:	2318      	movs	r3, #24
 80018e4:	22c8      	movs	r2, #200	; 0xc8
 80018e6:	2182      	movs	r1, #130	; 0x82
 80018e8:	2028      	movs	r0, #40	; 0x28
 80018ea:	f005 fae3 	bl	8006eb4 <LCD_ShowString>
			LCD_ShowString(100, 170, 200, 24, 24, (uint8_t*) "OR");
 80018ee:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <nRF24L01_Start+0x1c8>)
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	2318      	movs	r3, #24
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2318      	movs	r3, #24
 80018f8:	22c8      	movs	r2, #200	; 0xc8
 80018fa:	21aa      	movs	r1, #170	; 0xaa
 80018fc:	2064      	movs	r0, #100	; 0x64
 80018fe:	f005 fad9 	bl	8006eb4 <LCD_ShowString>
			LCD_ShowString(60, 210, 200, 24, 24, (uint8_t*) "SENT(KEY1)");
 8001902:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <nRF24L01_Start+0x1cc>)
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2318      	movs	r3, #24
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2318      	movs	r3, #24
 800190c:	22c8      	movs	r2, #200	; 0xc8
 800190e:	21d2      	movs	r1, #210	; 0xd2
 8001910:	203c      	movs	r0, #60	; 0x3c
 8001912:	f005 facf 	bl	8006eb4 <LCD_ShowString>
 8001916:	e010      	b.n	800193a <nRF24L01_Start+0x162>
		} else if (i == 160000) {
 8001918:	4b1d      	ldr	r3, [pc, #116]	; (8001990 <nRF24L01_Start+0x1b8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <nRF24L01_Start+0x1d0>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d10b      	bne.n	800193a <nRF24L01_Start+0x162>
			LCD_Fill(30, 130, 230, 234, WHITE);
 8001922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	23ea      	movs	r3, #234	; 0xea
 800192a:	22e6      	movs	r2, #230	; 0xe6
 800192c:	2182      	movs	r1, #130	; 0x82
 800192e:	201e      	movs	r0, #30
 8001930:	f005 f96c 	bl	8006c0c <LCD_Fill>
			i = 0;
 8001934:	4b16      	ldr	r3, [pc, #88]	; (8001990 <nRF24L01_Start+0x1b8>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
		}

		POINT_COLOR = BLACK;
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <nRF24L01_Start+0x1a0>)
 800193c:	2200      	movs	r2, #0
 800193e:	801a      	strh	r2, [r3, #0]
		switch (mode) {
 8001940:	4b14      	ldr	r3, [pc, #80]	; (8001994 <nRF24L01_Start+0x1bc>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d002      	beq.n	800194e <nRF24L01_Start+0x176>
 8001948:	2b02      	cmp	r3, #2
 800194a:	d003      	beq.n	8001954 <nRF24L01_Start+0x17c>
 800194c:	e005      	b.n	800195a <nRF24L01_Start+0x182>
		case KEY0_PRES:
			NRF24L01_RX_Mode();
 800194e:	f007 fc29 	bl	80091a4 <NRF24L01_RX_Mode>
			break;
 8001952:	e003      	b.n	800195c <nRF24L01_Start+0x184>
		case KEY1_PRES:
			NRF24L01_TX_Mode();
 8001954:	f007 fc5a 	bl	800920c <NRF24L01_TX_Mode>
			break;
 8001958:	e000      	b.n	800195c <nRF24L01_Start+0x184>
		i++;
 800195a:	e7a9      	b.n	80018b0 <nRF24L01_Start+0xd8>
		default:
			continue;
		}
		break;
 800195c:	bf00      	nop
	}
	LCD_Fill(0, 0, 320, 240, WHITE);
 800195e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	23f0      	movs	r3, #240	; 0xf0
 8001966:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800196a:	2100      	movs	r1, #0
 800196c:	2000      	movs	r0, #0
 800196e:	f005 f94d 	bl	8006c0c <LCD_Fill>
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000210 	.word	0x20000210
 800197c:	0800d904 	.word	0x0800d904
 8001980:	0800d918 	.word	0x0800d918
 8001984:	0800d924 	.word	0x0800d924
 8001988:	0800d934 	.word	0x0800d934
 800198c:	0800d944 	.word	0x0800d944
 8001990:	20000208 	.word	0x20000208
 8001994:	2000026c 	.word	0x2000026c
 8001998:	00013880 	.word	0x00013880
 800199c:	0800d954 	.word	0x0800d954
 80019a0:	0800d964 	.word	0x0800d964
 80019a4:	0800d968 	.word	0x0800d968
 80019a8:	00027100 	.word	0x00027100

080019ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80019b0:	f005 face 	bl	8006f50 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80019b4:	f000 f8d2 	bl	8001b5c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019b8:	f7ff fd40 	bl	800143c <MX_GPIO_Init>
	MX_FSMC_Init();
 80019bc:	f7ff fc62 	bl	8001284 <MX_FSMC_Init>
	MX_USART1_UART_Init();
 80019c0:	f000 fb58 	bl	8002074 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 80019c4:	f000 fad0 	bl	8001f68 <MX_TIM2_Init>
	MX_SPI2_Init();
 80019c8:	f000 f92c 	bl	8001c24 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	HC_SR04_Init(&hc_sr04); //HC_SR04初始化
 80019cc:	4856      	ldr	r0, [pc, #344]	; (8001b28 <main+0x17c>)
 80019ce:	f000 fd93 	bl	80024f8 <HC_SR04_Init>
	DS18B20_Init(); //DS18B20初始化
 80019d2:	f000 fd15 	bl	8002400 <DS18B20_Init>
	NRF24L01_Init(); //nRF24L01初始化
 80019d6:	f007 f9fb 	bl	8008dd0 <NRF24L01_Init>

	LCD_Init(); //LCD初始化
 80019da:	f001 fc8d 	bl	80032f8 <LCD_Init>
	LCD_Clear(WHITE); //清屏为白色
 80019de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80019e2:	f005 f8c5 	bl	8006b70 <LCD_Clear>
	POINT_COLOR = BLACK; //将画笔颜色设置为黑色
 80019e6:	4b51      	ldr	r3, [pc, #324]	; (8001b2c <main+0x180>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	801a      	strh	r2, [r3, #0]

	nRF24L01_Start();
 80019ec:	f7ff fef4 	bl	80017d8 <nRF24L01_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (mode == KEY0_PRES) {
 80019f0:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <main+0x184>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d13a      	bne.n	8001a6e <main+0xc2>
			while (1) {
				if (NRF24L01_RxPacket(Rx_Buf) == 0) {
 80019f8:	484e      	ldr	r0, [pc, #312]	; (8001b34 <main+0x188>)
 80019fa:	f007 fbad 	bl	8009158 <NRF24L01_RxPacket>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d131      	bne.n	8001a68 <main+0xbc>
					Rx_Buf[31] = 0;
 8001a04:	4b4b      	ldr	r3, [pc, #300]	; (8001b34 <main+0x188>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	77da      	strb	r2, [r3, #31]
					if (Rx_Buf[0] == 'D') {
 8001a0a:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <main+0x188>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b44      	cmp	r3, #68	; 0x44
 8001a10:	d108      	bne.n	8001a24 <main+0x78>
						hc_sr04.distance = atof((char*)(&Rx_Buf[1]));
 8001a12:	4849      	ldr	r0, [pc, #292]	; (8001b38 <main+0x18c>)
 8001a14:	f007 fc36 	bl	8009284 <atof>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4942      	ldr	r1, [pc, #264]	; (8001b28 <main+0x17c>)
 8001a1e:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8001a22:	e021      	b.n	8001a68 <main+0xbc>
					} else if (Rx_Buf[0] == 'T') {
 8001a24:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <main+0x188>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b54      	cmp	r3, #84	; 0x54
 8001a2a:	d106      	bne.n	8001a3a <main+0x8e>
						temperature = atoff((char*)(&Rx_Buf[1]));
 8001a2c:	4842      	ldr	r0, [pc, #264]	; (8001b38 <main+0x18c>)
 8001a2e:	f007 fc2c 	bl	800928a <atoff>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4a41      	ldr	r2, [pc, #260]	; (8001b3c <main+0x190>)
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	e016      	b.n	8001a68 <main+0xbc>
					}else if(Rx_Buf[0] == 'I'){
 8001a3a:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <main+0x188>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b49      	cmp	r3, #73	; 0x49
 8001a40:	d112      	bne.n	8001a68 <main+0xbc>
						manCome = atoi((char*)(&Rx_Buf[1]));
 8001a42:	483d      	ldr	r0, [pc, #244]	; (8001b38 <main+0x18c>)
 8001a44:	f007 fc24 	bl	8009290 <atoi>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4b3c      	ldr	r3, [pc, #240]	; (8001b40 <main+0x194>)
 8001a4e:	701a      	strb	r2, [r3, #0]
						HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, !manCome);
 8001a50:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <main+0x194>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	bf0c      	ite	eq
 8001a58:	2301      	moveq	r3, #1
 8001a5a:	2300      	movne	r3, #0
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	461a      	mov	r2, r3
 8001a60:	2120      	movs	r1, #32
 8001a62:	4838      	ldr	r0, [pc, #224]	; (8001b44 <main+0x198>)
 8001a64:	f005 fd89 	bl	800757a <HAL_GPIO_WritePin>
					}
				}
				LCD_Show();
 8001a68:	f7ff fdc4 	bl	80015f4 <LCD_Show>
				if (NRF24L01_RxPacket(Rx_Buf) == 0) {
 8001a6c:	e7c4      	b.n	80019f8 <main+0x4c>
			}
		} else if (mode == KEY1_PRES) {
 8001a6e:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <main+0x184>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d1bc      	bne.n	80019f0 <main+0x44>
			while (1) {
				//使用HC_SR04测距
//				HAL_Delay(150);
				HC_SR04_Measure(&hc_sr04);
 8001a76:	482c      	ldr	r0, [pc, #176]	; (8001b28 <main+0x17c>)
 8001a78:	f000 fd76 	bl	8002568 <HC_SR04_Measure>
				LCD_Show();
 8001a7c:	f7ff fdba 	bl	80015f4 <LCD_Show>
				sprintf((char*)Tx_Buf, "D%.2f", hc_sr04.distance);
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <main+0x17c>)
 8001a82:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a86:	4930      	ldr	r1, [pc, #192]	; (8001b48 <main+0x19c>)
 8001a88:	4830      	ldr	r0, [pc, #192]	; (8001b4c <main+0x1a0>)
 8001a8a:	f008 f8af 	bl	8009bec <siprintf>
				while (NRF24L01_TxPacket(Tx_Buf) != TX_OK)
 8001a8e:	bf00      	nop
 8001a90:	482e      	ldr	r0, [pc, #184]	; (8001b4c <main+0x1a0>)
 8001a92:	f007 fb1d 	bl	80090d0 <NRF24L01_TxPacket>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b20      	cmp	r3, #32
 8001a9a:	d1f9      	bne.n	8001a90 <main+0xe4>
					;

				//使用18b20测温
//				HAL_Delay(150);
				temperature = DS18B20_Get_Temperature();
 8001a9c:	f000 fccc 	bl	8002438 <DS18B20_Get_Temperature>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a26      	ldr	r2, [pc, #152]	; (8001b3c <main+0x190>)
 8001aa4:	6013      	str	r3, [r2, #0]
				LCD_Show();
 8001aa6:	f7ff fda5 	bl	80015f4 <LCD_Show>
				sprintf((char*)Tx_Buf, "T%.2f", temperature);
 8001aaa:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <main+0x190>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd26 	bl	8000500 <__aeabi_f2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4925      	ldr	r1, [pc, #148]	; (8001b50 <main+0x1a4>)
 8001aba:	4824      	ldr	r0, [pc, #144]	; (8001b4c <main+0x1a0>)
 8001abc:	f008 f896 	bl	8009bec <siprintf>
				while (NRF24L01_TxPacket(Tx_Buf) != TX_OK)
 8001ac0:	bf00      	nop
 8001ac2:	4822      	ldr	r0, [pc, #136]	; (8001b4c <main+0x1a0>)
 8001ac4:	f007 fb04 	bl	80090d0 <NRF24L01_TxPacket>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d1f9      	bne.n	8001ac2 <main+0x116>
					;

				//当红外传感器检测到人时，让LED0亮
//				HAL_Delay(150);
				manCome = HC_SR501;
 8001ace:	2120      	movs	r1, #32
 8001ad0:	4820      	ldr	r0, [pc, #128]	; (8001b54 <main+0x1a8>)
 8001ad2:	f005 fd3b 	bl	800754c <HAL_GPIO_ReadPin>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <main+0x194>)
 8001adc:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, !HC_SR501);
 8001ade:	2120      	movs	r1, #32
 8001ae0:	481c      	ldr	r0, [pc, #112]	; (8001b54 <main+0x1a8>)
 8001ae2:	f005 fd33 	bl	800754c <HAL_GPIO_ReadPin>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	bf0c      	ite	eq
 8001aec:	2301      	moveq	r3, #1
 8001aee:	2300      	movne	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	461a      	mov	r2, r3
 8001af4:	2120      	movs	r1, #32
 8001af6:	4813      	ldr	r0, [pc, #76]	; (8001b44 <main+0x198>)
 8001af8:	f005 fd3f 	bl	800757a <HAL_GPIO_WritePin>
				LCD_Show();
 8001afc:	f7ff fd7a 	bl	80015f4 <LCD_Show>
				sprintf((char*)Tx_Buf, "I%d", manCome);
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <main+0x194>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4914      	ldr	r1, [pc, #80]	; (8001b58 <main+0x1ac>)
 8001b08:	4810      	ldr	r0, [pc, #64]	; (8001b4c <main+0x1a0>)
 8001b0a:	f008 f86f 	bl	8009bec <siprintf>
				while (NRF24L01_TxPacket(Tx_Buf) != TX_OK)
 8001b0e:	bf00      	nop
 8001b10:	480e      	ldr	r0, [pc, #56]	; (8001b4c <main+0x1a0>)
 8001b12:	f007 fadd 	bl	80090d0 <NRF24L01_TxPacket>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b20      	cmp	r3, #32
 8001b1a:	d1f9      	bne.n	8001b10 <main+0x164>
					;

				HAL_Delay(500);
 8001b1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b20:	f005 fa78 	bl	8007014 <HAL_Delay>
				HC_SR04_Measure(&hc_sr04);
 8001b24:	e7a7      	b.n	8001a76 <main+0xca>
 8001b26:	bf00      	nop
 8001b28:	20000300 	.word	0x20000300
 8001b2c:	20000210 	.word	0x20000210
 8001b30:	2000026c 	.word	0x2000026c
 8001b34:	20000320 	.word	0x20000320
 8001b38:	20000321 	.word	0x20000321
 8001b3c:	20000268 	.word	0x20000268
 8001b40:	20000290 	.word	0x20000290
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	0800d974 	.word	0x0800d974
 8001b4c:	20000270 	.word	0x20000270
 8001b50:	0800d97c 	.word	0x0800d97c
 8001b54:	40010800 	.word	0x40010800
 8001b58:	0800d984 	.word	0x0800d984

08001b5c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b090      	sub	sp, #64	; 0x40
 8001b60:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001b62:	f107 0318 	add.w	r3, r7, #24
 8001b66:	2228      	movs	r2, #40	; 0x28
 8001b68:	2100      	movs	r1, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f007 fbbe 	bl	80092ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b86:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b90:	2302      	movs	r3, #2
 8001b92:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ba0:	f107 0318 	add.w	r3, r7, #24
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f005 fd01 	bl	80075ac <HAL_RCC_OscConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <SystemClock_Config+0x58>
		Error_Handler();
 8001bb0:	f000 f832 	bl	8001c18 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001bb4:	230f      	movs	r3, #15
 8001bb6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2102      	movs	r1, #2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f005 ff6c 	bl	8007aac <HAL_RCC_ClockConfig>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <SystemClock_Config+0x82>
		Error_Handler();
 8001bda:	f000 f81d 	bl	8001c18 <Error_Handler>
	}
}
 8001bde:	bf00      	nop
 8001be0:	3740      	adds	r7, #64	; 0x40
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 8001bf0:	bf00      	nop
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <__io_putchar+0x2c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f9      	beq.n	8001bf2 <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b04      	ldr	r3, [pc, #16]	; (8001c14 <__io_putchar+0x2c>)
 8001c04:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

	return ch;
 8001c06:	687b      	ldr	r3, [r7, #4]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40013800 	.word	0x40013800

08001c18 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c1c:	b672      	cpsid	i
}
 8001c1e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001c20:	e7fe      	b.n	8001c20 <Error_Handler+0x8>
	...

08001c24 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001c28:	4b17      	ldr	r3, [pc, #92]	; (8001c88 <MX_SPI2_Init+0x64>)
 8001c2a:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <MX_SPI2_Init+0x68>)
 8001c2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <MX_SPI2_Init+0x64>)
 8001c30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c36:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <MX_SPI2_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <MX_SPI2_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c42:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <MX_SPI2_Init+0x64>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MX_SPI2_Init+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MX_SPI2_Init+0x64>)
 8001c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <MX_SPI2_Init+0x64>)
 8001c58:	2208      	movs	r2, #8
 8001c5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c5c:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <MX_SPI2_Init+0x64>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <MX_SPI2_Init+0x64>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <MX_SPI2_Init+0x64>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <MX_SPI2_Init+0x64>)
 8001c70:	220a      	movs	r2, #10
 8001c72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c74:	4804      	ldr	r0, [pc, #16]	; (8001c88 <MX_SPI2_Init+0x64>)
 8001c76:	f006 f8b3 	bl	8007de0 <HAL_SPI_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c80:	f7ff ffca 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000340 	.word	0x20000340
 8001c8c:	40003800 	.word	0x40003800

08001c90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_SPI_MspInit+0x8c>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d131      	bne.n	8001d14 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <HAL_SPI_MspInit+0x90>)
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	4a1a      	ldr	r2, [pc, #104]	; (8001d20 <HAL_SPI_MspInit+0x90>)
 8001cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cba:	61d3      	str	r3, [r2, #28]
 8001cbc:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <HAL_SPI_MspInit+0x90>)
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_SPI_MspInit+0x90>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <HAL_SPI_MspInit+0x90>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_SPI_MspInit+0x90>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001ce0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001ce4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cee:	f107 0310 	add.w	r3, r7, #16
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480b      	ldr	r0, [pc, #44]	; (8001d24 <HAL_SPI_MspInit+0x94>)
 8001cf6:	f005 fa95 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001cfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d08:	f107 0310 	add.w	r3, r7, #16
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4805      	ldr	r0, [pc, #20]	; (8001d24 <HAL_SPI_MspInit+0x94>)
 8001d10:	f005 fa88 	bl	8007224 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d14:	bf00      	nop
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40003800 	.word	0x40003800
 8001d20:	40021000 	.word	0x40021000
 8001d24:	40010c00 	.word	0x40010c00

08001d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <HAL_MspInit+0x5c>)
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	4a14      	ldr	r2, [pc, #80]	; (8001d84 <HAL_MspInit+0x5c>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	6193      	str	r3, [r2, #24]
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_MspInit+0x5c>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <HAL_MspInit+0x5c>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4a0e      	ldr	r2, [pc, #56]	; (8001d84 <HAL_MspInit+0x5c>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	61d3      	str	r3, [r2, #28]
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_MspInit+0x5c>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	607b      	str	r3, [r7, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_MspInit+0x60>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	4a04      	ldr	r2, [pc, #16]	; (8001d88 <HAL_MspInit+0x60>)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40010000 	.word	0x40010000

08001d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d90:	e7fe      	b.n	8001d90 <NMI_Handler+0x4>

08001d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d96:	e7fe      	b.n	8001d96 <HardFault_Handler+0x4>

08001d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <MemManage_Handler+0x4>

08001d9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001da2:	e7fe      	b.n	8001da2 <BusFault_Handler+0x4>

08001da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <UsageFault_Handler+0x4>

08001daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd2:	f005 f903 	bl	8006fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
	return 1;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr

08001de8 <_kill>:

int _kill(int pid, int sig)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001df2:	f007 fa51 	bl	8009298 <__errno>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2216      	movs	r2, #22
 8001dfa:	601a      	str	r2, [r3, #0]
	return -1;
 8001dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_exit>:

void _exit (int status)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e10:	f04f 31ff 	mov.w	r1, #4294967295
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ffe7 	bl	8001de8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e1a:	e7fe      	b.n	8001e1a <_exit+0x12>

08001e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	e00a      	b.n	8001e44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e2e:	f3af 8000 	nop.w
 8001e32:	4601      	mov	r1, r0
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	60ba      	str	r2, [r7, #8]
 8001e3a:	b2ca      	uxtb	r2, r1
 8001e3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbf0      	blt.n	8001e2e <_read+0x12>
	}

return len;
 8001e4c:	687b      	ldr	r3, [r7, #4]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	e009      	b.n	8001e7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	60ba      	str	r2, [r7, #8]
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff feb9 	bl	8001be8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	dbf1      	blt.n	8001e68 <_write+0x12>
	}
	return len;
 8001e84:	687b      	ldr	r3, [r7, #4]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <_close>:

int _close(int file)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
	return -1;
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb4:	605a      	str	r2, [r3, #4]
	return 0;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr

08001ec2 <_isatty>:

int _isatty(int file)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
	return 1;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b085      	sub	sp, #20
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	607a      	str	r2, [r7, #4]
	return 0;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr
	...

08001ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef8:	4a14      	ldr	r2, [pc, #80]	; (8001f4c <_sbrk+0x5c>)
 8001efa:	4b15      	ldr	r3, [pc, #84]	; (8001f50 <_sbrk+0x60>)
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d102      	bne.n	8001f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <_sbrk+0x64>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <_sbrk+0x68>)
 8001f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <_sbrk+0x64>)
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d207      	bcs.n	8001f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f20:	f007 f9ba 	bl	8009298 <__errno>
 8001f24:	4603      	mov	r3, r0
 8001f26:	220c      	movs	r2, #12
 8001f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2e:	e009      	b.n	8001f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f36:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <_sbrk+0x64>)
 8001f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f42:	68fb      	ldr	r3, [r7, #12]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20010000 	.word	0x20010000
 8001f50:	00000400 	.word	0x00000400
 8001f54:	2000020c 	.word	0x2000020c
 8001f58:	20000448 	.word	0x20000448

08001f5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6e:	f107 0308 	add.w	r3, r7, #8
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001f86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001f8e:	2247      	movs	r2, #71	; 0x47
 8001f90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f92:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fac:	4813      	ldr	r0, [pc, #76]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001fae:	f006 fa30 	bl	8008412 <HAL_TIM_Base_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001fb8:	f7ff fe2e 	bl	8001c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fc2:	f107 0308 	add.w	r3, r7, #8
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480c      	ldr	r0, [pc, #48]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001fca:	f006 faef 	bl	80085ac <HAL_TIM_ConfigClockSource>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001fd4:	f7ff fe20 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001fe6:	f006 fcb5 	bl	8008954 <HAL_TIMEx_MasterConfigSynchronization>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ff0:	f7ff fe12 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000398 	.word	0x20000398

08002000 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002010:	d10b      	bne.n	800202a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_TIM_Base_MspInit+0x34>)
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	4a07      	ldr	r2, [pc, #28]	; (8002034 <HAL_TIM_Base_MspInit+0x34>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	61d3      	str	r3, [r2, #28]
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_TIM_Base_MspInit+0x34>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	40021000 	.word	0x40021000

08002038 <delay_us>:
/* USER CODE BEGIN 1 */
/**
 * @brief 微秒级延时，参考F103的库实现
 * @retval None
 */
void delay_us(uint32_t duration) {
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	//见stm32f1xx_hal_rcc.c -- static void RCC_Delay(uint32_t mdelay)
	__IO uint32_t Delay = duration * (SystemCoreClock / 8U / 1000000U);
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <delay_us+0x34>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <delay_us+0x38>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0d5b      	lsrs	r3, r3, #21
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	fb02 f303 	mul.w	r3, r2, r3
 8002052:	60fb      	str	r3, [r7, #12]
	do {
		__NOP();
 8002054:	bf00      	nop
	} while (Delay--);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1e5a      	subs	r2, r3, #1
 800205a:	60fa      	str	r2, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f9      	bne.n	8002054 <delay_us+0x1c>
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	20000004 	.word	0x20000004
 8002070:	431bde83 	.word	0x431bde83

08002074 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <MX_USART1_UART_Init+0x4c>)
 800207a:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <MX_USART1_UART_Init+0x50>)
 800207c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <MX_USART1_UART_Init+0x4c>)
 8002080:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002084:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002086:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <MX_USART1_UART_Init+0x4c>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <MX_USART1_UART_Init+0x4c>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <MX_USART1_UART_Init+0x4c>)
 8002094:	2200      	movs	r2, #0
 8002096:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <MX_USART1_UART_Init+0x4c>)
 800209a:	220c      	movs	r2, #12
 800209c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <MX_USART1_UART_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <MX_USART1_UART_Init+0x4c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020aa:	4805      	ldr	r0, [pc, #20]	; (80020c0 <MX_USART1_UART_Init+0x4c>)
 80020ac:	f006 fcbe 	bl	8008a2c <HAL_UART_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80020b6:	f7ff fdaf 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	200003e0 	.word	0x200003e0
 80020c4:	40013800 	.word	0x40013800

080020c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0310 	add.w	r3, r7, #16
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a1c      	ldr	r2, [pc, #112]	; (8002154 <HAL_UART_MspInit+0x8c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d131      	bne.n	800214c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020e8:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <HAL_UART_MspInit+0x90>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a1a      	ldr	r2, [pc, #104]	; (8002158 <HAL_UART_MspInit+0x90>)
 80020ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <HAL_UART_MspInit+0x90>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_UART_MspInit+0x90>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a14      	ldr	r2, [pc, #80]	; (8002158 <HAL_UART_MspInit+0x90>)
 8002106:	f043 0304 	orr.w	r3, r3, #4
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <HAL_UART_MspInit+0x90>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002118:	f44f 7300 	mov.w	r3, #512	; 0x200
 800211c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211e:	2302      	movs	r3, #2
 8002120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002122:	2303      	movs	r3, #3
 8002124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	f107 0310 	add.w	r3, r7, #16
 800212a:	4619      	mov	r1, r3
 800212c:	480b      	ldr	r0, [pc, #44]	; (800215c <HAL_UART_MspInit+0x94>)
 800212e:	f005 f879 	bl	8007224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002136:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002140:	f107 0310 	add.w	r3, r7, #16
 8002144:	4619      	mov	r1, r3
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <HAL_UART_MspInit+0x94>)
 8002148:	f005 f86c 	bl	8007224 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800214c:	bf00      	nop
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40013800 	.word	0x40013800
 8002158:	40021000 	.word	0x40021000
 800215c:	40010800 	.word	0x40010800

08002160 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002160:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002162:	e003      	b.n	800216c <LoopCopyDataInit>

08002164 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002166:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002168:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800216a:	3104      	adds	r1, #4

0800216c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800216c:	480a      	ldr	r0, [pc, #40]	; (8002198 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800216e:	4b0b      	ldr	r3, [pc, #44]	; (800219c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002170:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002172:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002174:	d3f6      	bcc.n	8002164 <CopyDataInit>
  ldr r2, =_sbss
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002178:	e002      	b.n	8002180 <LoopFillZerobss>

0800217a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800217c:	f842 3b04 	str.w	r3, [r2], #4

08002180 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002182:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002184:	d3f9      	bcc.n	800217a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002186:	f7ff fee9 	bl	8001f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800218a:	f007 f88b 	bl	80092a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800218e:	f7ff fc0d 	bl	80019ac <main>
  bx lr
 8002192:	4770      	bx	lr
  ldr r3, =_sidata
 8002194:	0801ab9c 	.word	0x0801ab9c
  ldr r0, =_sdata
 8002198:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800219c:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 80021a0:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 80021a4:	20000444 	.word	0x20000444

080021a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021a8:	e7fe      	b.n	80021a8 <ADC1_2_IRQHandler>
	...

080021ac <DS18B20_IO_IN>:
#include "ds18b20.h"
#include "tim.h"


void DS18B20_IO_IN(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	GPIO_InitStructure.Pin = GPIO_PIN_11;
 80021b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021b6:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80021b8:	2300      	movs	r3, #0
 80021ba:	607b      	str	r3, [r7, #4]
	HAL_GPIO_Init(GPIOG,&GPIO_InitStructure);
 80021bc:	463b      	mov	r3, r7
 80021be:	4619      	mov	r1, r3
 80021c0:	4803      	ldr	r0, [pc, #12]	; (80021d0 <DS18B20_IO_IN+0x24>)
 80021c2:	f005 f82f 	bl	8007224 <HAL_GPIO_Init>
}
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40012000 	.word	0x40012000

080021d4 <DS18B20_IO_OUT>:

void DS18B20_IO_OUT(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = GPIO_PIN_11;
 80021da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021de:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80021e0:	2301      	movs	r3, #1
 80021e2:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOG,&GPIO_InitStructure);
 80021e8:	463b      	mov	r3, r7
 80021ea:	4619      	mov	r1, r3
 80021ec:	4803      	ldr	r0, [pc, #12]	; (80021fc <DS18B20_IO_OUT+0x28>)
 80021ee:	f005 f819 	bl	8007224 <HAL_GPIO_Init>
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40012000 	.word	0x40012000

08002200 <DS18B20_Rst>:

void DS18B20_Rst(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	DS18B20_IO_OUT();
 8002204:	f7ff ffe6 	bl	80021d4 <DS18B20_IO_OUT>
	DS18B20_DQ_OUT_LOW;
 8002208:	2200      	movs	r2, #0
 800220a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800220e:	4809      	ldr	r0, [pc, #36]	; (8002234 <DS18B20_Rst+0x34>)
 8002210:	f005 f9b3 	bl	800757a <HAL_GPIO_WritePin>
	delay_us(750);
 8002214:	f240 20ee 	movw	r0, #750	; 0x2ee
 8002218:	f7ff ff0e 	bl	8002038 <delay_us>
	DS18B20_DQ_OUT_HIGH;
 800221c:	2201      	movs	r2, #1
 800221e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002222:	4804      	ldr	r0, [pc, #16]	; (8002234 <DS18B20_Rst+0x34>)
 8002224:	f005 f9a9 	bl	800757a <HAL_GPIO_WritePin>
	delay_us(15);
 8002228:	200f      	movs	r0, #15
 800222a:	f7ff ff05 	bl	8002038 <delay_us>
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40012000 	.word	0x40012000

08002238 <DS18B20_Check>:

uint8_t DS18B20_Check(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
	uint8_t retry = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	71fb      	strb	r3, [r7, #7]
	DS18B20_IO_IN();
 8002242:	f7ff ffb3 	bl	80021ac <DS18B20_IO_IN>
	while(DS18B20_DQ_IN && retry < 200)
 8002246:	e005      	b.n	8002254 <DS18B20_Check+0x1c>
	{
		retry++;
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	3301      	adds	r3, #1
 800224c:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 800224e:	2001      	movs	r0, #1
 8002250:	f7ff fef2 	bl	8002038 <delay_us>
	while(DS18B20_DQ_IN && retry < 200)
 8002254:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002258:	4815      	ldr	r0, [pc, #84]	; (80022b0 <DS18B20_Check+0x78>)
 800225a:	f005 f977 	bl	800754c <HAL_GPIO_ReadPin>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <DS18B20_Check+0x32>
 8002264:	79fb      	ldrb	r3, [r7, #7]
 8002266:	2bc7      	cmp	r3, #199	; 0xc7
 8002268:	d9ee      	bls.n	8002248 <DS18B20_Check+0x10>
	}

	if(retry >= 200)
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	2bc7      	cmp	r3, #199	; 0xc7
 800226e:	d901      	bls.n	8002274 <DS18B20_Check+0x3c>
		return 1;
 8002270:	2301      	movs	r3, #1
 8002272:	e019      	b.n	80022a8 <DS18B20_Check+0x70>
	else
		retry = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	71fb      	strb	r3, [r7, #7]

	while(!DS18B20_DQ_IN && retry < 240)
 8002278:	e005      	b.n	8002286 <DS18B20_Check+0x4e>
	{
		retry++;
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	3301      	adds	r3, #1
 800227e:	71fb      	strb	r3, [r7, #7]
		delay_us(1);
 8002280:	2001      	movs	r0, #1
 8002282:	f7ff fed9 	bl	8002038 <delay_us>
	while(!DS18B20_DQ_IN && retry < 240)
 8002286:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800228a:	4809      	ldr	r0, [pc, #36]	; (80022b0 <DS18B20_Check+0x78>)
 800228c:	f005 f95e 	bl	800754c <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d102      	bne.n	800229c <DS18B20_Check+0x64>
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	2bef      	cmp	r3, #239	; 0xef
 800229a:	d9ee      	bls.n	800227a <DS18B20_Check+0x42>
	}

	if(retry >= 240)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	2bef      	cmp	r3, #239	; 0xef
 80022a0:	d901      	bls.n	80022a6 <DS18B20_Check+0x6e>
		return 1;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <DS18B20_Check+0x70>

	return 0;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40012000 	.word	0x40012000

080022b4 <DS18B20_Read_Bit>:

uint8_t DS18B20_Read_Bit(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
	uint8_t data;
	DS18B20_IO_OUT();
 80022ba:	f7ff ff8b 	bl	80021d4 <DS18B20_IO_OUT>
	DS18B20_DQ_OUT_LOW;
 80022be:	2200      	movs	r2, #0
 80022c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022c4:	4812      	ldr	r0, [pc, #72]	; (8002310 <DS18B20_Read_Bit+0x5c>)
 80022c6:	f005 f958 	bl	800757a <HAL_GPIO_WritePin>
	delay_us(2);
 80022ca:	2002      	movs	r0, #2
 80022cc:	f7ff feb4 	bl	8002038 <delay_us>
	DS18B20_DQ_OUT_HIGH;
 80022d0:	2201      	movs	r2, #1
 80022d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d6:	480e      	ldr	r0, [pc, #56]	; (8002310 <DS18B20_Read_Bit+0x5c>)
 80022d8:	f005 f94f 	bl	800757a <HAL_GPIO_WritePin>
	DS18B20_IO_IN();
 80022dc:	f7ff ff66 	bl	80021ac <DS18B20_IO_IN>
	delay_us(12);
 80022e0:	200c      	movs	r0, #12
 80022e2:	f7ff fea9 	bl	8002038 <delay_us>

	if(DS18B20_DQ_IN)
 80022e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ea:	4809      	ldr	r0, [pc, #36]	; (8002310 <DS18B20_Read_Bit+0x5c>)
 80022ec:	f005 f92e 	bl	800754c <HAL_GPIO_ReadPin>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d002      	beq.n	80022fc <DS18B20_Read_Bit+0x48>
		data = 1;
 80022f6:	2301      	movs	r3, #1
 80022f8:	71fb      	strb	r3, [r7, #7]
 80022fa:	e001      	b.n	8002300 <DS18B20_Read_Bit+0x4c>
	else
		data = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	71fb      	strb	r3, [r7, #7]

	delay_us(50);
 8002300:	2032      	movs	r0, #50	; 0x32
 8002302:	f7ff fe99 	bl	8002038 <delay_us>
	return data;
 8002306:	79fb      	ldrb	r3, [r7, #7]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40012000 	.word	0x40012000

08002314 <DS18B20_Read_Byte>:

uint8_t DS18B20_Read_Byte(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
	uint8_t i,j,data;
	data = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	71bb      	strb	r3, [r7, #6]
	for(i=1;i<=8;i++)
 800231e:	2301      	movs	r3, #1
 8002320:	71fb      	strb	r3, [r7, #7]
 8002322:	e010      	b.n	8002346 <DS18B20_Read_Byte+0x32>
	{
		j = DS18B20_Read_Bit();
 8002324:	f7ff ffc6 	bl	80022b4 <DS18B20_Read_Bit>
 8002328:	4603      	mov	r3, r0
 800232a:	717b      	strb	r3, [r7, #5]
		data = (j<<7)|(data>>1);
 800232c:	797b      	ldrb	r3, [r7, #5]
 800232e:	01db      	lsls	r3, r3, #7
 8002330:	b25a      	sxtb	r2, r3
 8002332:	79bb      	ldrb	r3, [r7, #6]
 8002334:	085b      	lsrs	r3, r3, #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	b25b      	sxtb	r3, r3
 800233a:	4313      	orrs	r3, r2
 800233c:	b25b      	sxtb	r3, r3
 800233e:	71bb      	strb	r3, [r7, #6]
	for(i=1;i<=8;i++)
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	3301      	adds	r3, #1
 8002344:	71fb      	strb	r3, [r7, #7]
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	2b08      	cmp	r3, #8
 800234a:	d9eb      	bls.n	8002324 <DS18B20_Read_Byte+0x10>
	}
	return data;
 800234c:	79bb      	ldrb	r3, [r7, #6]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <DS18B20_Write_Byte>:

void DS18B20_Write_Byte(uint8_t data)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
	uint8_t j;
	uint8_t testb;
	DS18B20_IO_OUT();
 8002362:	f7ff ff37 	bl	80021d4 <DS18B20_IO_OUT>
	for(j=1;j<=8;j++)
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	e031      	b.n	80023d0 <DS18B20_Write_Byte+0x78>
	{
		testb=data&0x01;
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	73bb      	strb	r3, [r7, #14]
		data=data>>1;
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	085b      	lsrs	r3, r3, #1
 8002378:	71fb      	strb	r3, [r7, #7]
		if(testb)
 800237a:	7bbb      	ldrb	r3, [r7, #14]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d012      	beq.n	80023a6 <DS18B20_Write_Byte+0x4e>
		{
			DS18B20_DQ_OUT_LOW;
 8002380:	2200      	movs	r2, #0
 8002382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002386:	4816      	ldr	r0, [pc, #88]	; (80023e0 <DS18B20_Write_Byte+0x88>)
 8002388:	f005 f8f7 	bl	800757a <HAL_GPIO_WritePin>
			delay_us(2);
 800238c:	2002      	movs	r0, #2
 800238e:	f7ff fe53 	bl	8002038 <delay_us>
			DS18B20_DQ_OUT_HIGH;
 8002392:	2201      	movs	r2, #1
 8002394:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002398:	4811      	ldr	r0, [pc, #68]	; (80023e0 <DS18B20_Write_Byte+0x88>)
 800239a:	f005 f8ee 	bl	800757a <HAL_GPIO_WritePin>
			delay_us(60);
 800239e:	203c      	movs	r0, #60	; 0x3c
 80023a0:	f7ff fe4a 	bl	8002038 <delay_us>
 80023a4:	e011      	b.n	80023ca <DS18B20_Write_Byte+0x72>
		}
		else
		{
			DS18B20_DQ_OUT_LOW;
 80023a6:	2200      	movs	r2, #0
 80023a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ac:	480c      	ldr	r0, [pc, #48]	; (80023e0 <DS18B20_Write_Byte+0x88>)
 80023ae:	f005 f8e4 	bl	800757a <HAL_GPIO_WritePin>
			delay_us(60);
 80023b2:	203c      	movs	r0, #60	; 0x3c
 80023b4:	f7ff fe40 	bl	8002038 <delay_us>
			DS18B20_DQ_OUT_HIGH;
 80023b8:	2201      	movs	r2, #1
 80023ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023be:	4808      	ldr	r0, [pc, #32]	; (80023e0 <DS18B20_Write_Byte+0x88>)
 80023c0:	f005 f8db 	bl	800757a <HAL_GPIO_WritePin>
			delay_us(2);
 80023c4:	2002      	movs	r0, #2
 80023c6:	f7ff fe37 	bl	8002038 <delay_us>
	for(j=1;j<=8;j++)
 80023ca:	7bfb      	ldrb	r3, [r7, #15]
 80023cc:	3301      	adds	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d9ca      	bls.n	800236c <DS18B20_Write_Byte+0x14>
		}
	}
}
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40012000 	.word	0x40012000

080023e4 <DS18B20_Start>:

void DS18B20_Start(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
	DS18B20_Rst();
 80023e8:	f7ff ff0a 	bl	8002200 <DS18B20_Rst>
	DS18B20_Check();
 80023ec:	f7ff ff24 	bl	8002238 <DS18B20_Check>
	DS18B20_Write_Byte(0xcc);
 80023f0:	20cc      	movs	r0, #204	; 0xcc
 80023f2:	f7ff ffb1 	bl	8002358 <DS18B20_Write_Byte>
	DS18B20_Write_Byte(0x44);
 80023f6:	2044      	movs	r0, #68	; 0x44
 80023f8:	f7ff ffae 	bl	8002358 <DS18B20_Write_Byte>
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}

08002400 <DS18B20_Init>:

uint8_t DS18B20_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.Pin = GPIO_PIN_11;
 8002406:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800240a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800240c:	2301      	movs	r3, #1
 800240e:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8002410:	2301      	movs	r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOG,&GPIO_InitStructure);
 8002418:	463b      	mov	r3, r7
 800241a:	4619      	mov	r1, r3
 800241c:	4805      	ldr	r0, [pc, #20]	; (8002434 <DS18B20_Init+0x34>)
 800241e:	f004 ff01 	bl	8007224 <HAL_GPIO_Init>

	DS18B20_Rst();
 8002422:	f7ff feed 	bl	8002200 <DS18B20_Rst>
	return DS18B20_Check();
 8002426:	f7ff ff07 	bl	8002238 <DS18B20_Check>
 800242a:	4603      	mov	r3, r0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40012000 	.word	0x40012000

08002438 <DS18B20_Get_Temperature>:

float DS18B20_Get_Temperature(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
	uint8_t temp_L,temp_H;
	uint16_t temp;
	float temperature = 0;
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	60bb      	str	r3, [r7, #8]

	DS18B20_Start();
 8002444:	f7ff ffce 	bl	80023e4 <DS18B20_Start>
	DS18B20_Rst();
 8002448:	f7ff feda 	bl	8002200 <DS18B20_Rst>
	DS18B20_Check();
 800244c:	f7ff fef4 	bl	8002238 <DS18B20_Check>
	DS18B20_Write_Byte(0xcc);
 8002450:	20cc      	movs	r0, #204	; 0xcc
 8002452:	f7ff ff81 	bl	8002358 <DS18B20_Write_Byte>
	DS18B20_Write_Byte(0xbe);
 8002456:	20be      	movs	r0, #190	; 0xbe
 8002458:	f7ff ff7e 	bl	8002358 <DS18B20_Write_Byte>
	temp_L = DS18B20_Read_Byte();
 800245c:	f7ff ff5a 	bl	8002314 <DS18B20_Read_Byte>
 8002460:	4603      	mov	r3, r0
 8002462:	73fb      	strb	r3, [r7, #15]
	temp_H = DS18B20_Read_Byte();
 8002464:	f7ff ff56 	bl	8002314 <DS18B20_Read_Byte>
 8002468:	4603      	mov	r3, r0
 800246a:	73bb      	strb	r3, [r7, #14]

	if(temp_H>7)
 800246c:	7bbb      	ldrb	r3, [r7, #14]
 800246e:	2b07      	cmp	r3, #7
 8002470:	d905      	bls.n	800247e <DS18B20_Get_Temperature+0x46>
	{
		temp_H = ~temp_H;
 8002472:	7bbb      	ldrb	r3, [r7, #14]
 8002474:	43db      	mvns	r3, r3
 8002476:	73bb      	strb	r3, [r7, #14]
		temp_L = ~temp_L;
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	43db      	mvns	r3, r3
 800247c:	73fb      	strb	r3, [r7, #15]
	}

	temp = temp_L | (temp_H << 8);
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	b21a      	sxth	r2, r3
 8002482:	7bbb      	ldrb	r3, [r7, #14]
 8002484:	021b      	lsls	r3, r3, #8
 8002486:	b21b      	sxth	r3, r3
 8002488:	4313      	orrs	r3, r2
 800248a:	b21b      	sxth	r3, r3
 800248c:	80fb      	strh	r3, [r7, #6]
	temperature += (float)(temp >> 4);
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	b29b      	uxth	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fc8d 	bl	8000db4 <__aeabi_i2f>
 800249a:	4603      	mov	r3, r0
 800249c:	4619      	mov	r1, r3
 800249e:	68b8      	ldr	r0, [r7, #8]
 80024a0:	f7fe fbd4 	bl	8000c4c <__addsf3>
 80024a4:	4603      	mov	r3, r0
 80024a6:	60bb      	str	r3, [r7, #8]
	temperature += (float)(temp &= 0x0f)/100;
 80024a8:	88fb      	ldrh	r3, [r7, #6]
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	80fb      	strh	r3, [r7, #6]
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fc7a 	bl	8000dac <__aeabi_ui2f>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4908      	ldr	r1, [pc, #32]	; (80024dc <DS18B20_Get_Temperature+0xa4>)
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fd81 	bl	8000fc4 <__aeabi_fdiv>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4619      	mov	r1, r3
 80024c6:	68b8      	ldr	r0, [r7, #8]
 80024c8:	f7fe fbc0 	bl	8000c4c <__addsf3>
 80024cc:	4603      	mov	r3, r0
 80024ce:	60bb      	str	r3, [r7, #8]

	return temperature;
 80024d0:	68bb      	ldr	r3, [r7, #8]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	42c80000 	.word	0x42c80000

080024e0 <HC_SRO4_Mutex_Pend>:
 * @brief   pend the mutex to protect tim.
 * @param   none
 * @return  none
 * @note    it will be need if you use rtos
 */
static void HC_SRO4_Mutex_Pend() {
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
	//add your code here
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HC_SRO4_Mutex_Post>:
 * @brief   post the mutex to protect tim.
 * @param   none
 * @return  none
 * @note    it will be need if you use rtos
 */
static void HC_SRO4_Mutex_Post() {
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
	//add your code here
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HC_SR04_Init>:
/**
 * @brief   hc_sr04_device object initialization.
 * @param   hc_sr04_device  the pointer of the hc_sr04_device_t object
 * @return  none
 */
void HC_SR04_Init(hc_sr04_device_t *hc_sr04_device) {
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
	// the gpio and tim is initialized in main
	//可根据实际情况更改
	hc_sr04_device->trig_port = Trig_GPIO_Port;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HC_SR04_Init+0x30>)
 8002504:	601a      	str	r2, [r3, #0]
	hc_sr04_device->trig_pin = Trig_Pin;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2240      	movs	r2, #64	; 0x40
 800250a:	809a      	strh	r2, [r3, #4]
	hc_sr04_device->echo_port = Echo_GPIO_Port;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a06      	ldr	r2, [pc, #24]	; (8002528 <HC_SR04_Init+0x30>)
 8002510:	609a      	str	r2, [r3, #8]
	hc_sr04_device->echo_pin = Echo_Pin;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2280      	movs	r2, #128	; 0x80
 8002516:	819a      	strh	r2, [r3, #12]
	hc_sr04_device->tim = &htim2;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a04      	ldr	r2, [pc, #16]	; (800252c <HC_SR04_Init+0x34>)
 800251c:	611a      	str	r2, [r3, #16]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr
 8002528:	40010800 	.word	0x40010800
 800252c:	20000398 	.word	0x20000398

08002530 <HC_SR04_Start>:
/**
 * @brief   Send trig signal.
 * @param   hc_sr04_device  the pointer of the hc_sr04_device_t object
 * @return  none
 */
static void HC_SR04_Start(hc_sr04_device_t *hc_sr04_device) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	/* output high level */
	HAL_GPIO_WritePin(hc_sr04_device->trig_port, hc_sr04_device->trig_pin,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	889b      	ldrh	r3, [r3, #4]
 8002540:	2201      	movs	r2, #1
 8002542:	4619      	mov	r1, r3
 8002544:	f005 f819 	bl	800757a <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/* maintain high level at least 10us */
	delay_us(10);
 8002548:	200a      	movs	r0, #10
 800254a:	f7ff fd75 	bl	8002038 <delay_us>

	/* resume low level */
	HAL_GPIO_WritePin(hc_sr04_device->trig_port, hc_sr04_device->trig_pin,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	889b      	ldrh	r3, [r3, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	4619      	mov	r1, r3
 800255a:	f005 f80e 	bl	800757a <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HC_SR04_Measure>:
 * @param   hc_sr04_device  the pointer of the hc_sr04_device_t object
 * @return  errcode
 * @retval  0 success
 * @retval -1 fail
 */
int HC_SR04_Measure(hc_sr04_device_t *hc_sr04_device) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	uint32_t tick_us;

	HC_SRO4_Mutex_Pend();
 8002570:	f7ff ffb6 	bl	80024e0 <HC_SRO4_Mutex_Pend>

	HC_SR04_Start(hc_sr04_device);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ffdb 	bl	8002530 <HC_SR04_Start>

	__HAL_TIM_SetCounter(hc_sr04_device->tim, 0);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

	/* waitting for start of the high level through echo pin */
	while (HAL_GPIO_ReadPin(hc_sr04_device->echo_port, hc_sr04_device->echo_pin)
 8002584:	bf00      	nop
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	899b      	ldrh	r3, [r3, #12]
 800258e:	4619      	mov	r1, r3
 8002590:	4610      	mov	r0, r2
 8002592:	f004 ffdb 	bl	800754c <HAL_GPIO_ReadPin>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f4      	beq.n	8002586 <HC_SR04_Measure+0x1e>
			== GPIO_PIN_RESET)
		;

	/* start the tim and enable the interrupt */
	HAL_TIM_Base_Start(hc_sr04_device->tim);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f005 ff85 	bl	80084b0 <HAL_TIM_Base_Start>

	/* waitting for end of the high level through echo pin */
	while (HAL_GPIO_ReadPin(hc_sr04_device->echo_port, hc_sr04_device->echo_pin)
 80025a6:	bf00      	nop
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	899b      	ldrh	r3, [r3, #12]
 80025b0:	4619      	mov	r1, r3
 80025b2:	4610      	mov	r0, r2
 80025b4:	f004 ffca 	bl	800754c <HAL_GPIO_ReadPin>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d0f4      	beq.n	80025a8 <HC_SR04_Measure+0x40>
			== GPIO_PIN_SET)
		;

	/* stop the tim */
	HAL_TIM_Base_Stop(hc_sr04_device->tim);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f005 ffcc 	bl	8008560 <HAL_TIM_Base_Stop>

	/* get the time of high level */
	tick_us = __HAL_TIM_GetCounter(hc_sr04_device->tim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	60fb      	str	r3, [r7, #12]

	/* calc distance in unit cm */
	hc_sr04_device->distance = (double) (tick_us / 1000000.0) * 340.0 / 2.0
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f7fd ff72 	bl	80004bc <__aeabi_ui2d>
 80025d8:	a317      	add	r3, pc, #92	; (adr r3, 8002638 <HC_SR04_Measure+0xd0>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f7fe f911 	bl	8000804 <__aeabi_ddiv>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4610      	mov	r0, r2
 80025e8:	4619      	mov	r1, r3
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	4b14      	ldr	r3, [pc, #80]	; (8002640 <HC_SR04_Measure+0xd8>)
 80025f0:	f7fd ffde 	bl	80005b0 <__aeabi_dmul>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002604:	f7fe f8fe 	bl	8000804 <__aeabi_ddiv>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
			* 100.0;
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <HC_SR04_Measure+0xdc>)
 8002616:	f7fd ffcb 	bl	80005b0 <__aeabi_dmul>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
	hc_sr04_device->distance = (double) (tick_us / 1000000.0) * 340.0 / 2.0
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	e9c1 2306 	strd	r2, r3, [r1, #24]

	HC_SRO4_Mutex_Post();
 8002624:	f7ff ff62 	bl	80024ec <HC_SRO4_Mutex_Post>

	return 0;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	f3af 8000 	nop.w
 8002638:	00000000 	.word	0x00000000
 800263c:	412e8480 	.word	0x412e8480
 8002640:	40754000 	.word	0x40754000
 8002644:	40590000 	.word	0x40590000

08002648 <KeyScan>:

//按键扫描函数
//mode==1时，按键按下亮，松开灭
//mode==0时，按键按下亮，再次按下灭
uint8_t KeyScan(uint8_t mode)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
	static uint8_t key_up = 1;
	if(mode == 1){
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d102      	bne.n	800265e <KeyScan+0x16>
		key_up = 1;
 8002658:	4b2f      	ldr	r3, [pc, #188]	; (8002718 <KeyScan+0xd0>)
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
	}

	if(key_up && (KEY0 == GPIO_PIN_RESET || KEY1 == GPIO_PIN_RESET || KY_UP == GPIO_PIN_SET)){
 800265e:	4b2e      	ldr	r3, [pc, #184]	; (8002718 <KeyScan+0xd0>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d035      	beq.n	80026d2 <KeyScan+0x8a>
 8002666:	2110      	movs	r1, #16
 8002668:	482c      	ldr	r0, [pc, #176]	; (800271c <KeyScan+0xd4>)
 800266a:	f004 ff6f 	bl	800754c <HAL_GPIO_ReadPin>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00d      	beq.n	8002690 <KeyScan+0x48>
 8002674:	2108      	movs	r1, #8
 8002676:	4829      	ldr	r0, [pc, #164]	; (800271c <KeyScan+0xd4>)
 8002678:	f004 ff68 	bl	800754c <HAL_GPIO_ReadPin>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <KeyScan+0x48>
 8002682:	2101      	movs	r1, #1
 8002684:	4826      	ldr	r0, [pc, #152]	; (8002720 <KeyScan+0xd8>)
 8002686:	f004 ff61 	bl	800754c <HAL_GPIO_ReadPin>
 800268a:	4603      	mov	r3, r0
 800268c:	2b01      	cmp	r3, #1
 800268e:	d120      	bne.n	80026d2 <KeyScan+0x8a>
		HAL_Delay(10);
 8002690:	200a      	movs	r0, #10
 8002692:	f004 fcbf 	bl	8007014 <HAL_Delay>
		key_up = 0;
 8002696:	4b20      	ldr	r3, [pc, #128]	; (8002718 <KeyScan+0xd0>)
 8002698:	2200      	movs	r2, #0
 800269a:	701a      	strb	r2, [r3, #0]
		if(KEY0 == GPIO_PIN_RESET){
 800269c:	2110      	movs	r1, #16
 800269e:	481f      	ldr	r0, [pc, #124]	; (800271c <KeyScan+0xd4>)
 80026a0:	f004 ff54 	bl	800754c <HAL_GPIO_ReadPin>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <KeyScan+0x66>
			return KEY0_PRES;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e030      	b.n	8002710 <KeyScan+0xc8>
		}else if(KEY1 == GPIO_PIN_RESET){
 80026ae:	2108      	movs	r1, #8
 80026b0:	481a      	ldr	r0, [pc, #104]	; (800271c <KeyScan+0xd4>)
 80026b2:	f004 ff4b 	bl	800754c <HAL_GPIO_ReadPin>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <KeyScan+0x78>
			return KEY1_PRES;
 80026bc:	2302      	movs	r3, #2
 80026be:	e027      	b.n	8002710 <KeyScan+0xc8>
		}else if(KY_UP == GPIO_PIN_SET){
 80026c0:	2101      	movs	r1, #1
 80026c2:	4817      	ldr	r0, [pc, #92]	; (8002720 <KeyScan+0xd8>)
 80026c4:	f004 ff42 	bl	800754c <HAL_GPIO_ReadPin>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d11e      	bne.n	800270c <KeyScan+0xc4>
			return KY_UP_PRES;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e01e      	b.n	8002710 <KeyScan+0xc8>
		}
	}else if(KEY0 == GPIO_PIN_SET && KEY1 == GPIO_PIN_SET && KY_UP == GPIO_PIN_RESET){
 80026d2:	2110      	movs	r1, #16
 80026d4:	4811      	ldr	r0, [pc, #68]	; (800271c <KeyScan+0xd4>)
 80026d6:	f004 ff39 	bl	800754c <HAL_GPIO_ReadPin>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d116      	bne.n	800270e <KeyScan+0xc6>
 80026e0:	2108      	movs	r1, #8
 80026e2:	480e      	ldr	r0, [pc, #56]	; (800271c <KeyScan+0xd4>)
 80026e4:	f004 ff32 	bl	800754c <HAL_GPIO_ReadPin>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d10f      	bne.n	800270e <KeyScan+0xc6>
 80026ee:	2101      	movs	r1, #1
 80026f0:	480b      	ldr	r0, [pc, #44]	; (8002720 <KeyScan+0xd8>)
 80026f2:	f004 ff2b 	bl	800754c <HAL_GPIO_ReadPin>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d108      	bne.n	800270e <KeyScan+0xc6>
		key_up = 1;
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <KeyScan+0xd0>)
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
		if(mode)
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <KeyScan+0xc6>
		{
			return NO_PRES;
 8002708:	2304      	movs	r3, #4
 800270a:	e001      	b.n	8002710 <KeyScan+0xc8>
		if(KEY0 == GPIO_PIN_RESET){
 800270c:	bf00      	nop
		}
	}
	return 0;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000008 	.word	0x20000008
 800271c:	40011800 	.word	0x40011800
 8002720:	40010800 	.word	0x40010800

08002724 <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(uint16_t regval)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=regval;//写入要写的寄存器序号
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <LCD_WR_REG+0x1c>)
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	8013      	strh	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	6c0007fe 	.word	0x6c0007fe

08002744 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(uint16_t data)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800274e:	4a04      	ldr	r2, [pc, #16]	; (8002760 <LCD_WR_DATA+0x1c>)
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	8053      	strh	r3, [r2, #2]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	6c0007fe 	.word	0x6c0007fe

08002764 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
	uint16_t ram;			//防止被优化
	ram=LCD->LCD_RAM;
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <LCD_RD_DATA+0x18>)
 800276c:	885b      	ldrh	r3, [r3, #2]
 800276e:	80fb      	strh	r3, [r7, #6]
	return ram;
 8002770:	88fb      	ldrh	r3, [r7, #6]
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	6c0007fe 	.word	0x6c0007fe

08002780 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	460a      	mov	r2, r1
 800278a:	80fb      	strh	r3, [r7, #6]
 800278c:	4613      	mov	r3, r2
 800278e:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 8002790:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <LCD_WriteReg+0x28>)
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//写入数据
 8002796:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <LCD_WriteReg+0x28>)
 8002798:	88bb      	ldrh	r3, [r7, #4]
 800279a:	8053      	strh	r3, [r2, #2]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	6c0007fe 	.word	0x6c0007fe

080027ac <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器地址
//返回值:读到的数据
uint16_t LCD_ReadReg(uint16_t LCD_Reg)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);		//写入要读的寄存器序号
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff ffb3 	bl	8002724 <LCD_WR_REG>
	delay_us(5);
 80027be:	2005      	movs	r0, #5
 80027c0:	f7ff fc3a 	bl	8002038 <delay_us>
	return LCD_RD_DATA();		//返回读到的值
 80027c4:	f7ff ffce 	bl	8002764 <LCD_RD_DATA>
 80027c8:	4603      	mov	r3, r0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
 	LCD->LCD_REG=lcddev.wramcmd;
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <LCD_WriteRAM_Prepare+0x14>)
 80027da:	4a04      	ldr	r2, [pc, #16]	; (80027ec <LCD_WriteRAM_Prepare+0x18>)
 80027dc:	8912      	ldrh	r2, [r2, #8]
 80027de:	801a      	strh	r2, [r3, #0]
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	6c0007fe 	.word	0x6c0007fe
 80027ec:	20000420 	.word	0x20000420

080027f0 <LCD_SetCursor>:
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	460a      	mov	r2, r1
 80027fa:	80fb      	strh	r3, [r7, #6]
 80027fc:	4613      	mov	r3, r2
 80027fe:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8002800:	4b92      	ldr	r3, [pc, #584]	; (8002a4c <LCD_SetCursor+0x25c>)
 8002802:	889b      	ldrh	r3, [r3, #4]
 8002804:	f249 3241 	movw	r2, #37697	; 0x9341
 8002808:	4293      	cmp	r3, r2
 800280a:	d005      	beq.n	8002818 <LCD_SetCursor+0x28>
 800280c:	4b8f      	ldr	r3, [pc, #572]	; (8002a4c <LCD_SetCursor+0x25c>)
 800280e:	889b      	ldrh	r3, [r3, #4]
 8002810:	f245 3210 	movw	r2, #21264	; 0x5310
 8002814:	4293      	cmp	r3, r2
 8002816:	d122      	bne.n	800285e <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8002818:	4b8c      	ldr	r3, [pc, #560]	; (8002a4c <LCD_SetCursor+0x25c>)
 800281a:	895b      	ldrh	r3, [r3, #10]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff81 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	0a1b      	lsrs	r3, r3, #8
 8002826:	b29b      	uxth	r3, r3
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff8b 	bl	8002744 <LCD_WR_DATA>
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	b2db      	uxtb	r3, r3
 8002832:	b29b      	uxth	r3, r3
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff85 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800283a:	4b84      	ldr	r3, [pc, #528]	; (8002a4c <LCD_SetCursor+0x25c>)
 800283c:	899b      	ldrh	r3, [r3, #12]
 800283e:	4618      	mov	r0, r3
 8002840:	f7ff ff70 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8002844:	88bb      	ldrh	r3, [r7, #4]
 8002846:	0a1b      	lsrs	r3, r3, #8
 8002848:	b29b      	uxth	r3, r3
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff7a 	bl	8002744 <LCD_WR_DATA>
 8002850:	88bb      	ldrh	r3, [r7, #4]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	b29b      	uxth	r3, r3
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff74 	bl	8002744 <LCD_WR_DATA>
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 800285c:	e0f1      	b.n	8002a42 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X6804)
 800285e:	4b7b      	ldr	r3, [pc, #492]	; (8002a4c <LCD_SetCursor+0x25c>)
 8002860:	889b      	ldrh	r3, [r3, #4]
 8002862:	f646 0204 	movw	r2, #26628	; 0x6804
 8002866:	4293      	cmp	r3, r2
 8002868:	d12d      	bne.n	80028c6 <LCD_SetCursor+0xd6>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏时处理
 800286a:	4b78      	ldr	r3, [pc, #480]	; (8002a4c <LCD_SetCursor+0x25c>)
 800286c:	799b      	ldrb	r3, [r3, #6]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d106      	bne.n	8002880 <LCD_SetCursor+0x90>
 8002872:	4b76      	ldr	r3, [pc, #472]	; (8002a4c <LCD_SetCursor+0x25c>)
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	b29b      	uxth	r3, r3
 800287c:	3b01      	subs	r3, #1
 800287e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8002880:	4b72      	ldr	r3, [pc, #456]	; (8002a4c <LCD_SetCursor+0x25c>)
 8002882:	895b      	ldrh	r3, [r3, #10]
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff ff4d 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	b29b      	uxth	r3, r3
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff57 	bl	8002744 <LCD_WR_DATA>
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	b29b      	uxth	r3, r3
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff51 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80028a2:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <LCD_SetCursor+0x25c>)
 80028a4:	899b      	ldrh	r3, [r3, #12]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ff3c 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 80028ac:	88bb      	ldrh	r3, [r7, #4]
 80028ae:	0a1b      	lsrs	r3, r3, #8
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff46 	bl	8002744 <LCD_WR_DATA>
 80028b8:	88bb      	ldrh	r3, [r7, #4]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	b29b      	uxth	r3, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ff40 	bl	8002744 <LCD_WR_DATA>
}
 80028c4:	e0bd      	b.n	8002a42 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X1963)
 80028c6:	4b61      	ldr	r3, [pc, #388]	; (8002a4c <LCD_SetCursor+0x25c>)
 80028c8:	889b      	ldrh	r3, [r3, #4]
 80028ca:	f641 1263 	movw	r2, #6499	; 0x1963
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d167      	bne.n	80029a2 <LCD_SetCursor+0x1b2>
		if(lcddev.dir==0)//x坐标需要变换
 80028d2:	4b5e      	ldr	r3, [pc, #376]	; (8002a4c <LCD_SetCursor+0x25c>)
 80028d4:	799b      	ldrb	r3, [r3, #6]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d11e      	bne.n	8002918 <LCD_SetCursor+0x128>
			Xpos=lcddev.width-1-Xpos;
 80028da:	4b5c      	ldr	r3, [pc, #368]	; (8002a4c <LCD_SetCursor+0x25c>)
 80028dc:	881a      	ldrh	r2, [r3, #0]
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 80028e8:	4b58      	ldr	r3, [pc, #352]	; (8002a4c <LCD_SetCursor+0x25c>)
 80028ea:	895b      	ldrh	r3, [r3, #10]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff ff19 	bl	8002724 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80028f2:	2000      	movs	r0, #0
 80028f4:	f7ff ff26 	bl	8002744 <LCD_WR_DATA>
 80028f8:	2000      	movs	r0, #0
 80028fa:	f7ff ff23 	bl	8002744 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	0a1b      	lsrs	r3, r3, #8
 8002902:	b29b      	uxth	r3, r3
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff1d 	bl	8002744 <LCD_WR_DATA>
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	b2db      	uxtb	r3, r3
 800290e:	b29b      	uxth	r3, r3
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff17 	bl	8002744 <LCD_WR_DATA>
 8002916:	e021      	b.n	800295c <LCD_SetCursor+0x16c>
			LCD_WR_REG(lcddev.setxcmd);
 8002918:	4b4c      	ldr	r3, [pc, #304]	; (8002a4c <LCD_SetCursor+0x25c>)
 800291a:	895b      	ldrh	r3, [r3, #10]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff01 	bl	8002724 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	b29b      	uxth	r3, r3
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff0b 	bl	8002744 <LCD_WR_DATA>
 800292e:	88fb      	ldrh	r3, [r7, #6]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	b29b      	uxth	r3, r3
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff05 	bl	8002744 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 800293a:	4b44      	ldr	r3, [pc, #272]	; (8002a4c <LCD_SetCursor+0x25c>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	3b01      	subs	r3, #1
 8002940:	121b      	asrs	r3, r3, #8
 8002942:	b29b      	uxth	r3, r3
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fefd 	bl	8002744 <LCD_WR_DATA>
 800294a:	4b40      	ldr	r3, [pc, #256]	; (8002a4c <LCD_SetCursor+0x25c>)
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	3b01      	subs	r3, #1
 8002950:	b29b      	uxth	r3, r3
 8002952:	b2db      	uxtb	r3, r3
 8002954:	b29b      	uxth	r3, r3
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fef4 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800295c:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <LCD_SetCursor+0x25c>)
 800295e:	899b      	ldrh	r3, [r3, #12]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fedf 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8002966:	88bb      	ldrh	r3, [r7, #4]
 8002968:	0a1b      	lsrs	r3, r3, #8
 800296a:	b29b      	uxth	r3, r3
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fee9 	bl	8002744 <LCD_WR_DATA>
 8002972:	88bb      	ldrh	r3, [r7, #4]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	b29b      	uxth	r3, r3
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fee3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 800297e:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <LCD_SetCursor+0x25c>)
 8002980:	885b      	ldrh	r3, [r3, #2]
 8002982:	3b01      	subs	r3, #1
 8002984:	121b      	asrs	r3, r3, #8
 8002986:	b29b      	uxth	r3, r3
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fedb 	bl	8002744 <LCD_WR_DATA>
 800298e:	4b2f      	ldr	r3, [pc, #188]	; (8002a4c <LCD_SetCursor+0x25c>)
 8002990:	885b      	ldrh	r3, [r3, #2]
 8002992:	3b01      	subs	r3, #1
 8002994:	b29b      	uxth	r3, r3
 8002996:	b2db      	uxtb	r3, r3
 8002998:	b29b      	uxth	r3, r3
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fed2 	bl	8002744 <LCD_WR_DATA>
}
 80029a0:	e04f      	b.n	8002a42 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X5510)
 80029a2:	4b2a      	ldr	r3, [pc, #168]	; (8002a4c <LCD_SetCursor+0x25c>)
 80029a4:	889b      	ldrh	r3, [r3, #4]
 80029a6:	f245 5210 	movw	r2, #21776	; 0x5510
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d130      	bne.n	8002a10 <LCD_SetCursor+0x220>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 80029ae:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <LCD_SetCursor+0x25c>)
 80029b0:	895b      	ldrh	r3, [r3, #10]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff feb6 	bl	8002724 <LCD_WR_REG>
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	b29b      	uxth	r3, r3
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fec0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 80029c4:	4b21      	ldr	r3, [pc, #132]	; (8002a4c <LCD_SetCursor+0x25c>)
 80029c6:	895b      	ldrh	r3, [r3, #10]
 80029c8:	3301      	adds	r3, #1
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fea9 	bl	8002724 <LCD_WR_REG>
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff feb3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 80029de:	4b1b      	ldr	r3, [pc, #108]	; (8002a4c <LCD_SetCursor+0x25c>)
 80029e0:	899b      	ldrh	r3, [r3, #12]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fe9e 	bl	8002724 <LCD_WR_REG>
 80029e8:	88bb      	ldrh	r3, [r7, #4]
 80029ea:	0a1b      	lsrs	r3, r3, #8
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fea8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 80029f4:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <LCD_SetCursor+0x25c>)
 80029f6:	899b      	ldrh	r3, [r3, #12]
 80029f8:	3301      	adds	r3, #1
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fe91 	bl	8002724 <LCD_WR_REG>
 8002a02:	88bb      	ldrh	r3, [r7, #4]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fe9b 	bl	8002744 <LCD_WR_DATA>
}
 8002a0e:	e018      	b.n	8002a42 <LCD_SetCursor+0x252>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
 8002a10:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <LCD_SetCursor+0x25c>)
 8002a12:	799b      	ldrb	r3, [r3, #6]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d106      	bne.n	8002a26 <LCD_SetCursor+0x236>
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <LCD_SetCursor+0x25c>)
 8002a1a:	881a      	ldrh	r2, [r3, #0]
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	3b01      	subs	r3, #1
 8002a24:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <LCD_SetCursor+0x25c>)
 8002a28:	895b      	ldrh	r3, [r3, #10]
 8002a2a:	88fa      	ldrh	r2, [r7, #6]
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff fea6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <LCD_SetCursor+0x25c>)
 8002a36:	899b      	ldrh	r3, [r3, #12]
 8002a38:	88ba      	ldrh	r2, [r7, #4]
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff fe9f 	bl	8002780 <LCD_WriteReg>
}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000420 	.word	0x20000420

08002a50 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X6804&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8002a62:	4b78      	ldr	r3, [pc, #480]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002a64:	799b      	ldrb	r3, [r3, #6]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d10b      	bne.n	8002a82 <LCD_Scan_Dir+0x32>
 8002a6a:	4b76      	ldr	r3, [pc, #472]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002a6c:	889b      	ldrh	r3, [r3, #4]
 8002a6e:	f646 0204 	movw	r2, #26628	; 0x6804
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d005      	beq.n	8002a82 <LCD_Scan_Dir+0x32>
 8002a76:	4b73      	ldr	r3, [pc, #460]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002a78:	889b      	ldrh	r3, [r3, #4]
 8002a7a:	f641 1263 	movw	r2, #6499	; 0x1963
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d109      	bne.n	8002a96 <LCD_Scan_Dir+0x46>
 8002a82:	4b70      	ldr	r3, [pc, #448]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002a84:	799b      	ldrb	r3, [r3, #6]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d134      	bne.n	8002af4 <LCD_Scan_Dir+0xa4>
 8002a8a:	4b6e      	ldr	r3, [pc, #440]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002a8c:	889b      	ldrh	r3, [r3, #4]
 8002a8e:	f641 1263 	movw	r2, #6499	; 0x1963
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d12e      	bne.n	8002af4 <LCD_Scan_Dir+0xa4>
	{
		switch(dir)//方向转换
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	2b07      	cmp	r3, #7
 8002a9a:	d82c      	bhi.n	8002af6 <LCD_Scan_Dir+0xa6>
 8002a9c:	a201      	add	r2, pc, #4	; (adr r2, 8002aa4 <LCD_Scan_Dir+0x54>)
 8002a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa2:	bf00      	nop
 8002aa4:	08002ac5 	.word	0x08002ac5
 8002aa8:	08002acb 	.word	0x08002acb
 8002aac:	08002ad1 	.word	0x08002ad1
 8002ab0:	08002ad7 	.word	0x08002ad7
 8002ab4:	08002add 	.word	0x08002add
 8002ab8:	08002ae3 	.word	0x08002ae3
 8002abc:	08002ae9 	.word	0x08002ae9
 8002ac0:	08002aef 	.word	0x08002aef
		{
			case 0:dir=6;break;
 8002ac4:	2306      	movs	r3, #6
 8002ac6:	71fb      	strb	r3, [r7, #7]
 8002ac8:	e015      	b.n	8002af6 <LCD_Scan_Dir+0xa6>
			case 1:dir=7;break;
 8002aca:	2307      	movs	r3, #7
 8002acc:	71fb      	strb	r3, [r7, #7]
 8002ace:	e012      	b.n	8002af6 <LCD_Scan_Dir+0xa6>
			case 2:dir=4;break;
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	71fb      	strb	r3, [r7, #7]
 8002ad4:	e00f      	b.n	8002af6 <LCD_Scan_Dir+0xa6>
			case 3:dir=5;break;
 8002ad6:	2305      	movs	r3, #5
 8002ad8:	71fb      	strb	r3, [r7, #7]
 8002ada:	e00c      	b.n	8002af6 <LCD_Scan_Dir+0xa6>
			case 4:dir=1;break;
 8002adc:	2301      	movs	r3, #1
 8002ade:	71fb      	strb	r3, [r7, #7]
 8002ae0:	e009      	b.n	8002af6 <LCD_Scan_Dir+0xa6>
			case 5:dir=0;break;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	71fb      	strb	r3, [r7, #7]
 8002ae6:	e006      	b.n	8002af6 <LCD_Scan_Dir+0xa6>
			case 6:dir=3;break;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	71fb      	strb	r3, [r7, #7]
 8002aec:	e003      	b.n	8002af6 <LCD_Scan_Dir+0xa6>
			case 7:dir=2;break;
 8002aee:	2302      	movs	r3, #2
 8002af0:	71fb      	strb	r3, [r7, #7]
 8002af2:	e000      	b.n	8002af6 <LCD_Scan_Dir+0xa6>
		}
	}
 8002af4:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/6804/5310/5510/1963,特殊处理
 8002af6:	4b53      	ldr	r3, [pc, #332]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002af8:	889b      	ldrh	r3, [r3, #4]
 8002afa:	f249 3241 	movw	r2, #37697	; 0x9341
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d018      	beq.n	8002b34 <LCD_Scan_Dir+0xe4>
 8002b02:	4b50      	ldr	r3, [pc, #320]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002b04:	889b      	ldrh	r3, [r3, #4]
 8002b06:	f646 0204 	movw	r2, #26628	; 0x6804
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d012      	beq.n	8002b34 <LCD_Scan_Dir+0xe4>
 8002b0e:	4b4d      	ldr	r3, [pc, #308]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002b10:	889b      	ldrh	r3, [r3, #4]
 8002b12:	f245 3210 	movw	r2, #21264	; 0x5310
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00c      	beq.n	8002b34 <LCD_Scan_Dir+0xe4>
 8002b1a:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002b1c:	889b      	ldrh	r3, [r3, #4]
 8002b1e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d006      	beq.n	8002b34 <LCD_Scan_Dir+0xe4>
 8002b26:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002b28:	889b      	ldrh	r3, [r3, #4]
 8002b2a:	f641 1263 	movw	r2, #6499	; 0x1963
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	f040 813c 	bne.w	8002dac <LCD_Scan_Dir+0x35c>
	{
		switch(dir)
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	2b07      	cmp	r3, #7
 8002b38:	d835      	bhi.n	8002ba6 <LCD_Scan_Dir+0x156>
 8002b3a:	a201      	add	r2, pc, #4	; (adr r2, 8002b40 <LCD_Scan_Dir+0xf0>)
 8002b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b40:	08002ba7 	.word	0x08002ba7
 8002b44:	08002b61 	.word	0x08002b61
 8002b48:	08002b6b 	.word	0x08002b6b
 8002b4c:	08002b75 	.word	0x08002b75
 8002b50:	08002b7f 	.word	0x08002b7f
 8002b54:	08002b89 	.word	0x08002b89
 8002b58:	08002b93 	.word	0x08002b93
 8002b5c:	08002b9d 	.word	0x08002b9d
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8002b60:	89fb      	ldrh	r3, [r7, #14]
 8002b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b66:	81fb      	strh	r3, [r7, #14]
				break;
 8002b68:	e01d      	b.n	8002ba6 <LCD_Scan_Dir+0x156>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 8002b6a:	89fb      	ldrh	r3, [r7, #14]
 8002b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b70:	81fb      	strh	r3, [r7, #14]
				break;
 8002b72:	e018      	b.n	8002ba6 <LCD_Scan_Dir+0x156>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 8002b74:	89fb      	ldrh	r3, [r7, #14]
 8002b76:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b7a:	81fb      	strh	r3, [r7, #14]
				break;
 8002b7c:	e013      	b.n	8002ba6 <LCD_Scan_Dir+0x156>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 8002b7e:	89fb      	ldrh	r3, [r7, #14]
 8002b80:	f043 0320 	orr.w	r3, r3, #32
 8002b84:	81fb      	strh	r3, [r7, #14]
				break;
 8002b86:	e00e      	b.n	8002ba6 <LCD_Scan_Dir+0x156>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 8002b88:	89fb      	ldrh	r3, [r7, #14]
 8002b8a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002b8e:	81fb      	strh	r3, [r7, #14]
				break;
 8002b90:	e009      	b.n	8002ba6 <LCD_Scan_Dir+0x156>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 8002b92:	89fb      	ldrh	r3, [r7, #14]
 8002b94:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002b98:	81fb      	strh	r3, [r7, #14]
				break;
 8002b9a:	e004      	b.n	8002ba6 <LCD_Scan_Dir+0x156>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 8002b9c:	89fb      	ldrh	r3, [r7, #14]
 8002b9e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002ba2:	81fb      	strh	r3, [r7, #14]
				break;
 8002ba4:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 8002ba6:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002ba8:	889b      	ldrh	r3, [r3, #4]
 8002baa:	f245 5210 	movw	r2, #21776	; 0x5510
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d103      	bne.n	8002bba <LCD_Scan_Dir+0x16a>
 8002bb2:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8002bb6:	81bb      	strh	r3, [r7, #12]
 8002bb8:	e001      	b.n	8002bbe <LCD_Scan_Dir+0x16e>
		else dirreg=0X36;
 8002bba:	2336      	movs	r3, #54	; 0x36
 8002bbc:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 8002bbe:	4b21      	ldr	r3, [pc, #132]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002bc0:	889b      	ldrh	r3, [r3, #4]
 8002bc2:	f245 3210 	movw	r2, #21264	; 0x5310
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d00f      	beq.n	8002bea <LCD_Scan_Dir+0x19a>
 8002bca:	4b1e      	ldr	r3, [pc, #120]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002bcc:	889b      	ldrh	r3, [r3, #4]
 8002bce:	f245 5210 	movw	r2, #21776	; 0x5510
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d009      	beq.n	8002bea <LCD_Scan_Dir+0x19a>
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002bd8:	889b      	ldrh	r3, [r3, #4]
 8002bda:	f641 1263 	movw	r2, #6499	; 0x1963
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d003      	beq.n	8002bea <LCD_Scan_Dir+0x19a>
 8002be2:	89fb      	ldrh	r3, [r7, #14]
 8002be4:	f043 0308 	orr.w	r3, r3, #8
 8002be8:	81fb      	strh	r3, [r7, #14]
		if(lcddev.id==0X6804)regval|=0x02;//6804的BIT6和9341的反了
 8002bea:	4b16      	ldr	r3, [pc, #88]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002bec:	889b      	ldrh	r3, [r3, #4]
 8002bee:	f646 0204 	movw	r2, #26628	; 0x6804
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d103      	bne.n	8002bfe <LCD_Scan_Dir+0x1ae>
 8002bf6:	89fb      	ldrh	r3, [r7, #14]
 8002bf8:	f043 0302 	orr.w	r3, r3, #2
 8002bfc:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8002bfe:	89fa      	ldrh	r2, [r7, #14]
 8002c00:	89bb      	ldrh	r3, [r7, #12]
 8002c02:	4611      	mov	r1, r2
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fdbb 	bl	8002780 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002c0c:	889b      	ldrh	r3, [r3, #4]
 8002c0e:	f641 1263 	movw	r2, #6499	; 0x1963
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d028      	beq.n	8002c68 <LCD_Scan_Dir+0x218>
		{
			if(regval&0X20)
 8002c16:	89fb      	ldrh	r3, [r7, #14]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d013      	beq.n	8002c48 <LCD_Scan_Dir+0x1f8>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002c22:	881a      	ldrh	r2, [r3, #0]
 8002c24:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002c26:	885b      	ldrh	r3, [r3, #2]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d21d      	bcs.n	8002c68 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002c34:	885a      	ldrh	r2, [r3, #2]
 8002c36:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002c38:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8002c3a:	4a02      	ldr	r2, [pc, #8]	; (8002c44 <LCD_Scan_Dir+0x1f4>)
 8002c3c:	897b      	ldrh	r3, [r7, #10]
 8002c3e:	8053      	strh	r3, [r2, #2]
 8002c40:	e012      	b.n	8002c68 <LCD_Scan_Dir+0x218>
 8002c42:	bf00      	nop
 8002c44:	20000420 	.word	0x20000420
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 8002c48:	4b7d      	ldr	r3, [pc, #500]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002c4a:	881a      	ldrh	r2, [r3, #0]
 8002c4c:	4b7c      	ldr	r3, [pc, #496]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002c4e:	885b      	ldrh	r3, [r3, #2]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d909      	bls.n	8002c68 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8002c54:	4b7a      	ldr	r3, [pc, #488]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8002c5a:	4b79      	ldr	r3, [pc, #484]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002c5c:	885a      	ldrh	r2, [r3, #2]
 8002c5e:	4b78      	ldr	r3, [pc, #480]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002c60:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8002c62:	4a77      	ldr	r2, [pc, #476]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002c64:	897b      	ldrh	r3, [r7, #10]
 8002c66:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 8002c68:	4b75      	ldr	r3, [pc, #468]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002c6a:	889b      	ldrh	r3, [r3, #4]
 8002c6c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d162      	bne.n	8002d3a <LCD_Scan_Dir+0x2ea>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 8002c74:	4b72      	ldr	r3, [pc, #456]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002c76:	895b      	ldrh	r3, [r3, #10]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fd53 	bl	8002724 <LCD_WR_REG>
 8002c7e:	2000      	movs	r0, #0
 8002c80:	f7ff fd60 	bl	8002744 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 8002c84:	4b6e      	ldr	r3, [pc, #440]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002c86:	895b      	ldrh	r3, [r3, #10]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fd49 	bl	8002724 <LCD_WR_REG>
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7ff fd56 	bl	8002744 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 8002c98:	4b69      	ldr	r3, [pc, #420]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002c9a:	895b      	ldrh	r3, [r3, #10]
 8002c9c:	3302      	adds	r3, #2
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fd3f 	bl	8002724 <LCD_WR_REG>
 8002ca6:	4b66      	ldr	r3, [pc, #408]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	121b      	asrs	r3, r3, #8
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fd47 	bl	8002744 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8002cb6:	4b62      	ldr	r3, [pc, #392]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002cb8:	895b      	ldrh	r3, [r3, #10]
 8002cba:	3303      	adds	r3, #3
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff fd30 	bl	8002724 <LCD_WR_REG>
 8002cc4:	4b5e      	ldr	r3, [pc, #376]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff fd37 	bl	8002744 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 8002cd6:	4b5a      	ldr	r3, [pc, #360]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002cd8:	899b      	ldrh	r3, [r3, #12]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fd22 	bl	8002724 <LCD_WR_REG>
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f7ff fd2f 	bl	8002744 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 8002ce6:	4b56      	ldr	r3, [pc, #344]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002ce8:	899b      	ldrh	r3, [r3, #12]
 8002cea:	3301      	adds	r3, #1
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fd18 	bl	8002724 <LCD_WR_REG>
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f7ff fd25 	bl	8002744 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 8002cfa:	4b51      	ldr	r3, [pc, #324]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002cfc:	899b      	ldrh	r3, [r3, #12]
 8002cfe:	3302      	adds	r3, #2
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff fd0e 	bl	8002724 <LCD_WR_REG>
 8002d08:	4b4d      	ldr	r3, [pc, #308]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002d0a:	885b      	ldrh	r3, [r3, #2]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	121b      	asrs	r3, r3, #8
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fd16 	bl	8002744 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8002d18:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002d1a:	899b      	ldrh	r3, [r3, #12]
 8002d1c:	3303      	adds	r3, #3
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fcff 	bl	8002724 <LCD_WR_REG>
 8002d26:	4b46      	ldr	r3, [pc, #280]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002d28:	885b      	ldrh	r3, [r3, #2]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fd06 	bl	8002744 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8002d38:	e07e      	b.n	8002e38 <LCD_Scan_Dir+0x3e8>
		}else
		{
			LCD_WR_REG(lcddev.setxcmd);
 8002d3a:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002d3c:	895b      	ldrh	r3, [r3, #10]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fcf0 	bl	8002724 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7ff fcfd 	bl	8002744 <LCD_WR_DATA>
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7ff fcfa 	bl	8002744 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8002d50:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	121b      	asrs	r3, r3, #8
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fcf2 	bl	8002744 <LCD_WR_DATA>
 8002d60:	4b37      	ldr	r3, [pc, #220]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fce9 	bl	8002744 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 8002d72:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002d74:	899b      	ldrh	r3, [r3, #12]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fcd4 	bl	8002724 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7ff fce1 	bl	8002744 <LCD_WR_DATA>
 8002d82:	2000      	movs	r0, #0
 8002d84:	f7ff fcde 	bl	8002744 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8002d88:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002d8a:	885b      	ldrh	r3, [r3, #2]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	121b      	asrs	r3, r3, #8
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff fcd6 	bl	8002744 <LCD_WR_DATA>
 8002d98:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <LCD_Scan_Dir+0x3f0>)
 8002d9a:	885b      	ldrh	r3, [r3, #2]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff fccd 	bl	8002744 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8002daa:	e045      	b.n	8002e38 <LCD_Scan_Dir+0x3e8>
		}
  	}else
	{
		switch(dir)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	2b07      	cmp	r3, #7
 8002db0:	d835      	bhi.n	8002e1e <LCD_Scan_Dir+0x3ce>
 8002db2:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <LCD_Scan_Dir+0x368>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002dd9 	.word	0x08002dd9
 8002dbc:	08002de3 	.word	0x08002de3
 8002dc0:	08002ded 	.word	0x08002ded
 8002dc4:	08002e1f 	.word	0x08002e1f
 8002dc8:	08002df7 	.word	0x08002df7
 8002dcc:	08002e01 	.word	0x08002e01
 8002dd0:	08002e0b 	.word	0x08002e0b
 8002dd4:	08002e15 	.word	0x08002e15
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(1<<5)|(1<<4)|(0<<3);
 8002dd8:	89fb      	ldrh	r3, [r7, #14]
 8002dda:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002dde:	81fb      	strh	r3, [r7, #14]
				break;
 8002de0:	e01d      	b.n	8002e1e <LCD_Scan_Dir+0x3ce>
			case L2R_D2U://从左到右,从下到上
				regval|=(0<<5)|(1<<4)|(0<<3);
 8002de2:	89fb      	ldrh	r3, [r7, #14]
 8002de4:	f043 0310 	orr.w	r3, r3, #16
 8002de8:	81fb      	strh	r3, [r7, #14]
				break;
 8002dea:	e018      	b.n	8002e1e <LCD_Scan_Dir+0x3ce>
			case R2L_U2D://从右到左,从上到下
				regval|=(1<<5)|(0<<4)|(0<<3);
 8002dec:	89fb      	ldrh	r3, [r7, #14]
 8002dee:	f043 0320 	orr.w	r3, r3, #32
 8002df2:	81fb      	strh	r3, [r7, #14]
				break;
 8002df4:	e013      	b.n	8002e1e <LCD_Scan_Dir+0x3ce>
			case R2L_D2U://从右到左,从下到上
				regval|=(0<<5)|(0<<4)|(0<<3);
				break;
			case U2D_L2R://从上到下,从左到右
				regval|=(1<<5)|(1<<4)|(1<<3);
 8002df6:	89fb      	ldrh	r3, [r7, #14]
 8002df8:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002dfc:	81fb      	strh	r3, [r7, #14]
				break;
 8002dfe:	e00e      	b.n	8002e1e <LCD_Scan_Dir+0x3ce>
			case U2D_R2L://从上到下,从右到左
				regval|=(1<<5)|(0<<4)|(1<<3);
 8002e00:	89fb      	ldrh	r3, [r7, #14]
 8002e02:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002e06:	81fb      	strh	r3, [r7, #14]
				break;
 8002e08:	e009      	b.n	8002e1e <LCD_Scan_Dir+0x3ce>
			case D2U_L2R://从下到上,从左到右
				regval|=(0<<5)|(1<<4)|(1<<3);
 8002e0a:	89fb      	ldrh	r3, [r7, #14]
 8002e0c:	f043 0318 	orr.w	r3, r3, #24
 8002e10:	81fb      	strh	r3, [r7, #14]
				break;
 8002e12:	e004      	b.n	8002e1e <LCD_Scan_Dir+0x3ce>
			case D2U_R2L://从下到上,从右到左
				regval|=(0<<5)|(0<<4)|(1<<3);
 8002e14:	89fb      	ldrh	r3, [r7, #14]
 8002e16:	f043 0308 	orr.w	r3, r3, #8
 8002e1a:	81fb      	strh	r3, [r7, #14]
				break;
 8002e1c:	bf00      	nop
		}
		dirreg=0X03;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	81bb      	strh	r3, [r7, #12]
		regval|=1<<12;
 8002e22:	89fb      	ldrh	r3, [r7, #14]
 8002e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e28:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8002e2a:	89fa      	ldrh	r2, [r7, #14]
 8002e2c:	89bb      	ldrh	r3, [r7, #12]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fca5 	bl	8002780 <LCD_WriteReg>
	}
}
 8002e36:	bf00      	nop
 8002e38:	bf00      	nop
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000420 	.word	0x20000420

08002e44 <LCD_Fast_DrawPoint>:
}
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	80fb      	strh	r3, [r7, #6]
 8002e4e:	460b      	mov	r3, r1
 8002e50:	80bb      	strh	r3, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	807b      	strh	r3, [r7, #2]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8002e56:	4b85      	ldr	r3, [pc, #532]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002e58:	889b      	ldrh	r3, [r3, #4]
 8002e5a:	f249 3241 	movw	r2, #37697	; 0x9341
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d005      	beq.n	8002e6e <LCD_Fast_DrawPoint+0x2a>
 8002e62:	4b82      	ldr	r3, [pc, #520]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002e64:	889b      	ldrh	r3, [r3, #4]
 8002e66:	f245 3210 	movw	r2, #21264	; 0x5310
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d122      	bne.n	8002eb4 <LCD_Fast_DrawPoint+0x70>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8002e6e:	4b7f      	ldr	r3, [pc, #508]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002e70:	895b      	ldrh	r3, [r3, #10]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fc56 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fc60 	bl	8002744 <LCD_WR_DATA>
 8002e84:	88fb      	ldrh	r3, [r7, #6]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fc5a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8002e90:	4b76      	ldr	r3, [pc, #472]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002e92:	899b      	ldrh	r3, [r3, #12]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fc45 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8002e9a:	88bb      	ldrh	r3, [r7, #4]
 8002e9c:	0a1b      	lsrs	r3, r3, #8
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff fc4f 	bl	8002744 <LCD_WR_DATA>
 8002ea6:	88bb      	ldrh	r3, [r7, #4]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff fc49 	bl	8002744 <LCD_WR_DATA>
 8002eb2:	e0cf      	b.n	8003054 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X5510)
 8002eb4:	4b6d      	ldr	r3, [pc, #436]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002eb6:	889b      	ldrh	r3, [r3, #4]
 8002eb8:	f245 5210 	movw	r2, #21776	; 0x5510
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d130      	bne.n	8002f22 <LCD_Fast_DrawPoint+0xde>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 8002ec0:	4b6a      	ldr	r3, [pc, #424]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002ec2:	895b      	ldrh	r3, [r3, #10]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fc2d 	bl	8002724 <LCD_WR_REG>
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	0a1b      	lsrs	r3, r3, #8
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fc37 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 8002ed6:	4b65      	ldr	r3, [pc, #404]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002ed8:	895b      	ldrh	r3, [r3, #10]
 8002eda:	3301      	adds	r3, #1
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff fc20 	bl	8002724 <LCD_WR_REG>
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fc2a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8002ef0:	4b5e      	ldr	r3, [pc, #376]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002ef2:	899b      	ldrh	r3, [r3, #12]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fc15 	bl	8002724 <LCD_WR_REG>
 8002efa:	88bb      	ldrh	r3, [r7, #4]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fc1f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8002f06:	4b59      	ldr	r3, [pc, #356]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002f08:	899b      	ldrh	r3, [r3, #12]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fc08 	bl	8002724 <LCD_WR_REG>
 8002f14:	88bb      	ldrh	r3, [r7, #4]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7ff fc12 	bl	8002744 <LCD_WR_DATA>
 8002f20:	e098      	b.n	8003054 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X1963)
 8002f22:	4b52      	ldr	r3, [pc, #328]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002f24:	889b      	ldrh	r3, [r3, #4]
 8002f26:	f641 1263 	movw	r2, #6499	; 0x1963
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d145      	bne.n	8002fba <LCD_Fast_DrawPoint+0x176>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8002f2e:	4b4f      	ldr	r3, [pc, #316]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002f30:	799b      	ldrb	r3, [r3, #6]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <LCD_Fast_DrawPoint+0x100>
 8002f36:	4b4d      	ldr	r3, [pc, #308]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002f38:	881a      	ldrh	r2, [r3, #0]
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8002f44:	4b49      	ldr	r3, [pc, #292]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002f46:	895b      	ldrh	r3, [r3, #10]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fbeb 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fbf5 	bl	8002744 <LCD_WR_DATA>
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fbef 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8002f66:	88fb      	ldrh	r3, [r7, #6]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fbe9 	bl	8002744 <LCD_WR_DATA>
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fbe3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002f80:	899b      	ldrh	r3, [r3, #12]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fbce 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8002f88:	88bb      	ldrh	r3, [r7, #4]
 8002f8a:	0a1b      	lsrs	r3, r3, #8
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fbd8 	bl	8002744 <LCD_WR_DATA>
 8002f94:	88bb      	ldrh	r3, [r7, #4]
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fbd2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8002fa0:	88bb      	ldrh	r3, [r7, #4]
 8002fa2:	0a1b      	lsrs	r3, r3, #8
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fbcc 	bl	8002744 <LCD_WR_DATA>
 8002fac:	88bb      	ldrh	r3, [r7, #4]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff fbc6 	bl	8002744 <LCD_WR_DATA>
 8002fb8:	e04c      	b.n	8003054 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X6804)
 8002fba:	4b2c      	ldr	r3, [pc, #176]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002fbc:	889b      	ldrh	r3, [r3, #4]
 8002fbe:	f646 0204 	movw	r2, #26628	; 0x6804
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d12d      	bne.n	8003022 <LCD_Fast_DrawPoint+0x1de>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 8002fc6:	4b29      	ldr	r3, [pc, #164]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002fc8:	799b      	ldrb	r3, [r3, #6]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d106      	bne.n	8002fdc <LCD_Fast_DrawPoint+0x198>
 8002fce:	4b27      	ldr	r3, [pc, #156]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002fd0:	881a      	ldrh	r2, [r3, #0]
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8002fdc:	4b23      	ldr	r3, [pc, #140]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8002fde:	895b      	ldrh	r3, [r3, #10]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff fb9f 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	0a1b      	lsrs	r3, r3, #8
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7ff fba9 	bl	8002744 <LCD_WR_DATA>
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fba3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8003000:	899b      	ldrh	r3, [r3, #12]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fb8e 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8003008:	88bb      	ldrh	r3, [r7, #4]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	b29b      	uxth	r3, r3
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fb98 	bl	8002744 <LCD_WR_DATA>
 8003014:	88bb      	ldrh	r3, [r7, #4]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	b29b      	uxth	r3, r3
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff fb92 	bl	8002744 <LCD_WR_DATA>
 8003020:	e018      	b.n	8003054 <LCD_Fast_DrawPoint+0x210>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 8003022:	4b12      	ldr	r3, [pc, #72]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8003024:	799b      	ldrb	r3, [r3, #6]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d106      	bne.n	8003038 <LCD_Fast_DrawPoint+0x1f4>
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 800302c:	881a      	ldrh	r2, [r3, #0]
 800302e:	88fb      	ldrh	r3, [r7, #6]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 800303a:	895b      	ldrh	r3, [r3, #10]
 800303c:	88fa      	ldrh	r2, [r7, #6]
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fb9d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 8003046:	4b09      	ldr	r3, [pc, #36]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8003048:	899b      	ldrh	r3, [r3, #12]
 800304a:	88ba      	ldrh	r2, [r7, #4]
 800304c:	4611      	mov	r1, r2
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fb96 	bl	8002780 <LCD_WriteReg>
	}
	LCD->LCD_REG=lcddev.wramcmd;
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <LCD_Fast_DrawPoint+0x22c>)
 8003056:	4a05      	ldr	r2, [pc, #20]	; (800306c <LCD_Fast_DrawPoint+0x228>)
 8003058:	8912      	ldrh	r2, [r2, #8]
 800305a:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM=color;
 800305c:	4a04      	ldr	r2, [pc, #16]	; (8003070 <LCD_Fast_DrawPoint+0x22c>)
 800305e:	887b      	ldrh	r3, [r7, #2]
 8003060:	8053      	strh	r3, [r2, #2]
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	20000420 	.word	0x20000420
 8003070:	6c0007fe 	.word	0x6c0007fe
 8003074:	00000000 	.word	0x00000000

08003078 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8003082:	20be      	movs	r0, #190	; 0xbe
 8003084:	f7ff fb4e 	bl	8002724 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8003088:	2005      	movs	r0, #5
 800308a:	f7ff fb5b 	bl	8002744 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	4618      	mov	r0, r3
 8003092:	f7fd fa23 	bl	80004dc <__aeabi_i2d>
 8003096:	a310      	add	r3, pc, #64	; (adr r3, 80030d8 <LCD_SSD_BackLightSet+0x60>)
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	f7fd fa88 	bl	80005b0 <__aeabi_dmul>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4610      	mov	r0, r2
 80030a6:	4619      	mov	r1, r3
 80030a8:	f7fd fd5a 	bl	8000b60 <__aeabi_d2uiz>
 80030ac:	4603      	mov	r3, r0
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fb47 	bl	8002744 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 80030b6:	2001      	movs	r0, #1
 80030b8:	f7ff fb44 	bl	8002744 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 80030bc:	20ff      	movs	r0, #255	; 0xff
 80030be:	f7ff fb41 	bl	8002744 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 80030c2:	2000      	movs	r0, #0
 80030c4:	f7ff fb3e 	bl	8002744 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 80030c8:	2000      	movs	r0, #0
 80030ca:	f7ff fb3b 	bl	8002744 <LCD_WR_DATA>
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	66666666 	.word	0x66666666
 80030dc:	40046666 	.word	0x40046666

080030e0 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
	if(dir==0)			//竖屏
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d177      	bne.n	80031e0 <LCD_Display_Dir+0x100>
	{
		lcddev.dir=0;	//竖屏
 80030f0:	4b80      	ldr	r3, [pc, #512]	; (80032f4 <LCD_Display_Dir+0x214>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	719a      	strb	r2, [r3, #6]
		lcddev.width=240;
 80030f6:	4b7f      	ldr	r3, [pc, #508]	; (80032f4 <LCD_Display_Dir+0x214>)
 80030f8:	22f0      	movs	r2, #240	; 0xf0
 80030fa:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80030fc:	4b7d      	ldr	r3, [pc, #500]	; (80032f4 <LCD_Display_Dir+0x214>)
 80030fe:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003102:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310)
 8003104:	4b7b      	ldr	r3, [pc, #492]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003106:	889b      	ldrh	r3, [r3, #4]
 8003108:	f249 3241 	movw	r2, #37697	; 0x9341
 800310c:	4293      	cmp	r3, r2
 800310e:	d00b      	beq.n	8003128 <LCD_Display_Dir+0x48>
 8003110:	4b78      	ldr	r3, [pc, #480]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003112:	889b      	ldrh	r3, [r3, #4]
 8003114:	f646 0204 	movw	r2, #26628	; 0x6804
 8003118:	4293      	cmp	r3, r2
 800311a:	d005      	beq.n	8003128 <LCD_Display_Dir+0x48>
 800311c:	4b75      	ldr	r3, [pc, #468]	; (80032f4 <LCD_Display_Dir+0x214>)
 800311e:	889b      	ldrh	r3, [r3, #4]
 8003120:	f245 3210 	movw	r2, #21264	; 0x5310
 8003124:	4293      	cmp	r3, r2
 8003126:	d11e      	bne.n	8003166 <LCD_Display_Dir+0x86>
		{
			lcddev.wramcmd=0X2C;
 8003128:	4b72      	ldr	r3, [pc, #456]	; (80032f4 <LCD_Display_Dir+0x214>)
 800312a:	222c      	movs	r2, #44	; 0x2c
 800312c:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 800312e:	4b71      	ldr	r3, [pc, #452]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003130:	222a      	movs	r2, #42	; 0x2a
 8003132:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8003134:	4b6f      	ldr	r3, [pc, #444]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003136:	222b      	movs	r2, #43	; 0x2b
 8003138:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 800313a:	4b6e      	ldr	r3, [pc, #440]	; (80032f4 <LCD_Display_Dir+0x214>)
 800313c:	889b      	ldrh	r3, [r3, #4]
 800313e:	f646 0204 	movw	r2, #26628	; 0x6804
 8003142:	4293      	cmp	r3, r2
 8003144:	d006      	beq.n	8003154 <LCD_Display_Dir+0x74>
 8003146:	4b6b      	ldr	r3, [pc, #428]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003148:	889b      	ldrh	r3, [r3, #4]
 800314a:	f245 3210 	movw	r2, #21264	; 0x5310
 800314e:	4293      	cmp	r3, r2
 8003150:	f040 80c7 	bne.w	80032e2 <LCD_Display_Dir+0x202>
			{
				lcddev.width=320;
 8003154:	4b67      	ldr	r3, [pc, #412]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003156:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800315a:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 800315c:	4b65      	ldr	r3, [pc, #404]	; (80032f4 <LCD_Display_Dir+0x214>)
 800315e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003162:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8003164:	e0bd      	b.n	80032e2 <LCD_Display_Dir+0x202>
			}
		}else if(lcddev.id==0x5510)
 8003166:	4b63      	ldr	r3, [pc, #396]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003168:	889b      	ldrh	r3, [r3, #4]
 800316a:	f245 5210 	movw	r2, #21776	; 0x5510
 800316e:	4293      	cmp	r3, r2
 8003170:	d114      	bne.n	800319c <LCD_Display_Dir+0xbc>
		{
			lcddev.wramcmd=0X2C00;
 8003172:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003174:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003178:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 800317a:	4b5e      	ldr	r3, [pc, #376]	; (80032f4 <LCD_Display_Dir+0x214>)
 800317c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8003180:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8003182:	4b5c      	ldr	r3, [pc, #368]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003184:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003188:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 800318a:	4b5a      	ldr	r3, [pc, #360]	; (80032f4 <LCD_Display_Dir+0x214>)
 800318c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003190:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8003192:	4b58      	ldr	r3, [pc, #352]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003194:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003198:	805a      	strh	r2, [r3, #2]
 800319a:	e0a3      	b.n	80032e4 <LCD_Display_Dir+0x204>
		}else if(lcddev.id==0X1963)
 800319c:	4b55      	ldr	r3, [pc, #340]	; (80032f4 <LCD_Display_Dir+0x214>)
 800319e:	889b      	ldrh	r3, [r3, #4]
 80031a0:	f641 1263 	movw	r2, #6499	; 0x1963
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d111      	bne.n	80031cc <LCD_Display_Dir+0xec>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 80031a8:	4b52      	ldr	r3, [pc, #328]	; (80032f4 <LCD_Display_Dir+0x214>)
 80031aa:	222c      	movs	r2, #44	; 0x2c
 80031ac:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 80031ae:	4b51      	ldr	r3, [pc, #324]	; (80032f4 <LCD_Display_Dir+0x214>)
 80031b0:	222b      	movs	r2, #43	; 0x2b
 80031b2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 80031b4:	4b4f      	ldr	r3, [pc, #316]	; (80032f4 <LCD_Display_Dir+0x214>)
 80031b6:	222a      	movs	r2, #42	; 0x2a
 80031b8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 80031ba:	4b4e      	ldr	r3, [pc, #312]	; (80032f4 <LCD_Display_Dir+0x214>)
 80031bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80031c0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 80031c2:	4b4c      	ldr	r3, [pc, #304]	; (80032f4 <LCD_Display_Dir+0x214>)
 80031c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80031c8:	805a      	strh	r2, [r3, #2]
 80031ca:	e08b      	b.n	80032e4 <LCD_Display_Dir+0x204>
		}else
		{
			lcddev.wramcmd=0X22;
 80031cc:	4b49      	ldr	r3, [pc, #292]	; (80032f4 <LCD_Display_Dir+0x214>)
 80031ce:	2222      	movs	r2, #34	; 0x22
 80031d0:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X20;
 80031d2:	4b48      	ldr	r3, [pc, #288]	; (80032f4 <LCD_Display_Dir+0x214>)
 80031d4:	2220      	movs	r2, #32
 80031d6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X21;
 80031d8:	4b46      	ldr	r3, [pc, #280]	; (80032f4 <LCD_Display_Dir+0x214>)
 80031da:	2221      	movs	r2, #33	; 0x21
 80031dc:	819a      	strh	r2, [r3, #12]
 80031de:	e081      	b.n	80032e4 <LCD_Display_Dir+0x204>
		}
	}else 				//横屏
	{
		lcddev.dir=1;	//横屏
 80031e0:	4b44      	ldr	r3, [pc, #272]	; (80032f4 <LCD_Display_Dir+0x214>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	719a      	strb	r2, [r3, #6]
		lcddev.width=320;
 80031e6:	4b43      	ldr	r3, [pc, #268]	; (80032f4 <LCD_Display_Dir+0x214>)
 80031e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031ec:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80031ee:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <LCD_Display_Dir+0x214>)
 80031f0:	22f0      	movs	r2, #240	; 0xf0
 80031f2:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 80031f4:	4b3f      	ldr	r3, [pc, #252]	; (80032f4 <LCD_Display_Dir+0x214>)
 80031f6:	889b      	ldrh	r3, [r3, #4]
 80031f8:	f249 3241 	movw	r2, #37697	; 0x9341
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d005      	beq.n	800320c <LCD_Display_Dir+0x12c>
 8003200:	4b3c      	ldr	r3, [pc, #240]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003202:	889b      	ldrh	r3, [r3, #4]
 8003204:	f245 3210 	movw	r2, #21264	; 0x5310
 8003208:	4293      	cmp	r3, r2
 800320a:	d109      	bne.n	8003220 <LCD_Display_Dir+0x140>
		{
			lcddev.wramcmd=0X2C;
 800320c:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <LCD_Display_Dir+0x214>)
 800320e:	222c      	movs	r2, #44	; 0x2c
 8003210:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8003212:	4b38      	ldr	r3, [pc, #224]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003214:	222a      	movs	r2, #42	; 0x2a
 8003216:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8003218:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <LCD_Display_Dir+0x214>)
 800321a:	222b      	movs	r2, #43	; 0x2b
 800321c:	819a      	strh	r2, [r3, #12]
 800321e:	e04b      	b.n	80032b8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X6804)
 8003220:	4b34      	ldr	r3, [pc, #208]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003222:	889b      	ldrh	r3, [r3, #4]
 8003224:	f646 0204 	movw	r2, #26628	; 0x6804
 8003228:	4293      	cmp	r3, r2
 800322a:	d109      	bne.n	8003240 <LCD_Display_Dir+0x160>
		{
 			lcddev.wramcmd=0X2C;
 800322c:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <LCD_Display_Dir+0x214>)
 800322e:	222c      	movs	r2, #44	; 0x2c
 8003230:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2B;
 8003232:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003234:	222b      	movs	r2, #43	; 0x2b
 8003236:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;
 8003238:	4b2e      	ldr	r3, [pc, #184]	; (80032f4 <LCD_Display_Dir+0x214>)
 800323a:	222a      	movs	r2, #42	; 0x2a
 800323c:	819a      	strh	r2, [r3, #12]
 800323e:	e03b      	b.n	80032b8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0x5510)
 8003240:	4b2c      	ldr	r3, [pc, #176]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003242:	889b      	ldrh	r3, [r3, #4]
 8003244:	f245 5210 	movw	r2, #21776	; 0x5510
 8003248:	4293      	cmp	r3, r2
 800324a:	d114      	bne.n	8003276 <LCD_Display_Dir+0x196>
		{
			lcddev.wramcmd=0X2C00;
 800324c:	4b29      	ldr	r3, [pc, #164]	; (80032f4 <LCD_Display_Dir+0x214>)
 800324e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8003252:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8003254:	4b27      	ldr	r3, [pc, #156]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003256:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800325a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 800325c:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <LCD_Display_Dir+0x214>)
 800325e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8003262:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8003264:	4b23      	ldr	r3, [pc, #140]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003266:	f44f 7248 	mov.w	r2, #800	; 0x320
 800326a:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 800326c:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <LCD_Display_Dir+0x214>)
 800326e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003272:	805a      	strh	r2, [r3, #2]
 8003274:	e020      	b.n	80032b8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X1963)
 8003276:	4b1f      	ldr	r3, [pc, #124]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003278:	889b      	ldrh	r3, [r3, #4]
 800327a:	f641 1263 	movw	r2, #6499	; 0x1963
 800327e:	4293      	cmp	r3, r2
 8003280:	d111      	bne.n	80032a6 <LCD_Display_Dir+0x1c6>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8003282:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003284:	222c      	movs	r2, #44	; 0x2c
 8003286:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 8003288:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <LCD_Display_Dir+0x214>)
 800328a:	222a      	movs	r2, #42	; 0x2a
 800328c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 800328e:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003290:	222b      	movs	r2, #43	; 0x2b
 8003292:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 8003294:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <LCD_Display_Dir+0x214>)
 8003296:	f44f 7248 	mov.w	r2, #800	; 0x320
 800329a:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 800329c:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <LCD_Display_Dir+0x214>)
 800329e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80032a2:	805a      	strh	r2, [r3, #2]
 80032a4:	e008      	b.n	80032b8 <LCD_Display_Dir+0x1d8>
		}else
		{
			lcddev.wramcmd=0X22;
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <LCD_Display_Dir+0x214>)
 80032a8:	2222      	movs	r2, #34	; 0x22
 80032aa:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X21;
 80032ac:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <LCD_Display_Dir+0x214>)
 80032ae:	2221      	movs	r2, #33	; 0x21
 80032b0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X20;
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <LCD_Display_Dir+0x214>)
 80032b4:	2220      	movs	r2, #32
 80032b6:	819a      	strh	r2, [r3, #12]
		}
		if(lcddev.id==0X6804||lcddev.id==0X5310)
 80032b8:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <LCD_Display_Dir+0x214>)
 80032ba:	889b      	ldrh	r3, [r3, #4]
 80032bc:	f646 0204 	movw	r2, #26628	; 0x6804
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d005      	beq.n	80032d0 <LCD_Display_Dir+0x1f0>
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <LCD_Display_Dir+0x214>)
 80032c6:	889b      	ldrh	r3, [r3, #4]
 80032c8:	f245 3210 	movw	r2, #21264	; 0x5310
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d109      	bne.n	80032e4 <LCD_Display_Dir+0x204>
		{
			lcddev.width=480;
 80032d0:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <LCD_Display_Dir+0x214>)
 80032d2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80032d6:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <LCD_Display_Dir+0x214>)
 80032da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032de:	805a      	strh	r2, [r3, #2]
 80032e0:	e000      	b.n	80032e4 <LCD_Display_Dir+0x204>
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 80032e2:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 80032e4:	2000      	movs	r0, #0
 80032e6:	f7ff fbb3 	bl	8002a50 <LCD_Scan_Dir>
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000420 	.word	0x20000420

080032f8 <LCD_Init>:
}
//初始化lcd
//该初始化函数可以初始化各种ILI93XX液晶,但是其他函数是基于ILI9320的!!!
//在其他型号的驱动芯片上没有测试!
void LCD_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af02      	add	r7, sp, #8
	RCC->AHBENR|=1<<8;     	 	//使能FSMC时钟
 80032fe:	4bab      	ldr	r3, [pc, #684]	; (80035ac <LCD_Init+0x2b4>)
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	4aaa      	ldr	r2, [pc, #680]	; (80035ac <LCD_Init+0x2b4>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003308:	6153      	str	r3, [r2, #20]
  	RCC->APB2ENR|=1<<3;     	//使能PORTB时钟
 800330a:	4ba8      	ldr	r3, [pc, #672]	; (80035ac <LCD_Init+0x2b4>)
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	4aa7      	ldr	r2, [pc, #668]	; (80035ac <LCD_Init+0x2b4>)
 8003310:	f043 0308 	orr.w	r3, r3, #8
 8003314:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<5;     	//使能PORTD时钟
 8003316:	4ba5      	ldr	r3, [pc, #660]	; (80035ac <LCD_Init+0x2b4>)
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	4aa4      	ldr	r2, [pc, #656]	; (80035ac <LCD_Init+0x2b4>)
 800331c:	f043 0320 	orr.w	r3, r3, #32
 8003320:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<6;     	//使能PORTE时钟
 8003322:	4ba2      	ldr	r3, [pc, #648]	; (80035ac <LCD_Init+0x2b4>)
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	4aa1      	ldr	r2, [pc, #644]	; (80035ac <LCD_Init+0x2b4>)
 8003328:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800332c:	6193      	str	r3, [r2, #24]
 	RCC->APB2ENR|=1<<8;      	//使能PORTG时钟
 800332e:	4b9f      	ldr	r3, [pc, #636]	; (80035ac <LCD_Init+0x2b4>)
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	4a9e      	ldr	r2, [pc, #632]	; (80035ac <LCD_Init+0x2b4>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	6193      	str	r3, [r2, #24]
	GPIOB->CRL&=0XFFFFFFF0;		//PB0 推挽输出 背光
 800333a:	4b9d      	ldr	r3, [pc, #628]	; (80035b0 <LCD_Init+0x2b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a9c      	ldr	r2, [pc, #624]	; (80035b0 <LCD_Init+0x2b8>)
 8003340:	f023 030f 	bic.w	r3, r3, #15
 8003344:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=0X00000003;
 8003346:	4b9a      	ldr	r3, [pc, #616]	; (80035b0 <LCD_Init+0x2b8>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a99      	ldr	r2, [pc, #612]	; (80035b0 <LCD_Init+0x2b8>)
 800334c:	f043 0303 	orr.w	r3, r3, #3
 8003350:	6013      	str	r3, [r2, #0]
	//PORTD复用推挽输出
	GPIOD->CRH&=0X00FFF000;
 8003352:	4b98      	ldr	r3, [pc, #608]	; (80035b4 <LCD_Init+0x2bc>)
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	4997      	ldr	r1, [pc, #604]	; (80035b4 <LCD_Init+0x2bc>)
 8003358:	4b97      	ldr	r3, [pc, #604]	; (80035b8 <LCD_Init+0x2c0>)
 800335a:	4013      	ands	r3, r2
 800335c:	604b      	str	r3, [r1, #4]
	GPIOD->CRH|=0XBB000BBB;
 800335e:	4b95      	ldr	r3, [pc, #596]	; (80035b4 <LCD_Init+0x2bc>)
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	4994      	ldr	r1, [pc, #592]	; (80035b4 <LCD_Init+0x2bc>)
 8003364:	4b95      	ldr	r3, [pc, #596]	; (80035bc <LCD_Init+0x2c4>)
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]
	GPIOD->CRL&=0XFF00FF00;
 800336a:	4b92      	ldr	r3, [pc, #584]	; (80035b4 <LCD_Init+0x2bc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a91      	ldr	r2, [pc, #580]	; (80035b4 <LCD_Init+0x2bc>)
 8003370:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8003374:	6013      	str	r3, [r2, #0]
	GPIOD->CRL|=0X00BB00BB;
 8003376:	4b8f      	ldr	r3, [pc, #572]	; (80035b4 <LCD_Init+0x2bc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a8e      	ldr	r2, [pc, #568]	; (80035b4 <LCD_Init+0x2bc>)
 800337c:	f043 13bb 	orr.w	r3, r3, #12255419	; 0xbb00bb
 8003380:	6013      	str	r3, [r2, #0]
	//PORTE复用推挽输出
	GPIOE->CRH&=0X00000000;
 8003382:	4b8f      	ldr	r3, [pc, #572]	; (80035c0 <LCD_Init+0x2c8>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4b8e      	ldr	r3, [pc, #568]	; (80035c0 <LCD_Init+0x2c8>)
 8003388:	2200      	movs	r2, #0
 800338a:	605a      	str	r2, [r3, #4]
	GPIOE->CRH|=0XBBBBBBBB;
 800338c:	4b8c      	ldr	r3, [pc, #560]	; (80035c0 <LCD_Init+0x2c8>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4a8b      	ldr	r2, [pc, #556]	; (80035c0 <LCD_Init+0x2c8>)
 8003392:	f043 33bb 	orr.w	r3, r3, #3149642683	; 0xbbbbbbbb
 8003396:	6053      	str	r3, [r2, #4]
	GPIOE->CRL&=0X0FFFFFFF;
 8003398:	4b89      	ldr	r3, [pc, #548]	; (80035c0 <LCD_Init+0x2c8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a88      	ldr	r2, [pc, #544]	; (80035c0 <LCD_Init+0x2c8>)
 800339e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80033a2:	6013      	str	r3, [r2, #0]
	GPIOE->CRL|=0XB0000000;
 80033a4:	4b86      	ldr	r3, [pc, #536]	; (80035c0 <LCD_Init+0x2c8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a85      	ldr	r2, [pc, #532]	; (80035c0 <LCD_Init+0x2c8>)
 80033aa:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 80033ae:	6013      	str	r3, [r2, #0]
	//PORTG12复用推挽输出
	GPIOG->CRH&=0XFFF0FFFF;
 80033b0:	4b84      	ldr	r3, [pc, #528]	; (80035c4 <LCD_Init+0x2cc>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4a83      	ldr	r2, [pc, #524]	; (80035c4 <LCD_Init+0x2cc>)
 80033b6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80033ba:	6053      	str	r3, [r2, #4]
	GPIOG->CRH|=0X000B0000;
 80033bc:	4b81      	ldr	r3, [pc, #516]	; (80035c4 <LCD_Init+0x2cc>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4a80      	ldr	r2, [pc, #512]	; (80035c4 <LCD_Init+0x2cc>)
 80033c2:	f443 2330 	orr.w	r3, r3, #720896	; 0xb0000
 80033c6:	6053      	str	r3, [r2, #4]
	GPIOG->CRL&=0XFFFFFFF0;//PG0->RS
 80033c8:	4b7e      	ldr	r3, [pc, #504]	; (80035c4 <LCD_Init+0x2cc>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a7d      	ldr	r2, [pc, #500]	; (80035c4 <LCD_Init+0x2cc>)
 80033ce:	f023 030f 	bic.w	r3, r3, #15
 80033d2:	6013      	str	r3, [r2, #0]
	GPIOG->CRL|=0X0000000B;
 80033d4:	4b7b      	ldr	r3, [pc, #492]	; (80035c4 <LCD_Init+0x2cc>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a7a      	ldr	r2, [pc, #488]	; (80035c4 <LCD_Init+0x2cc>)
 80033da:	f043 030b 	orr.w	r3, r3, #11
 80033de:	6013      	str	r3, [r2, #0]

	//寄存器清零
	//bank1有NE1~4,每一个有一个BCR+TCR，所以总共八个寄存器。
	//这里我们使用NE4 ，也就对应BTCR[6],[7]。
	FSMC_Bank1->BTCR[6]=0X00000000;
 80033e0:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80033e4:	2200      	movs	r2, #0
 80033e6:	619a      	str	r2, [r3, #24]
	FSMC_Bank1->BTCR[7]=0X00000000;
 80033e8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80033ec:	2200      	movs	r2, #0
 80033ee:	61da      	str	r2, [r3, #28]
	FSMC_Bank1E->BWTR[6]=0X00000000;
 80033f0:	4b75      	ldr	r3, [pc, #468]	; (80035c8 <LCD_Init+0x2d0>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	619a      	str	r2, [r3, #24]
	//操作BCR寄存器	使用异步模式
	FSMC_Bank1->BTCR[6]|=1<<12;		//存储器写使能
 80033f6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003400:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003404:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<14;		//读写使用不同的时序
 8003406:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003414:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<4; 		//存储器数据宽度为16bit
 8003416:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003420:	f043 0310 	orr.w	r3, r3, #16
 8003424:	6193      	str	r3, [r2, #24]
	//操作BTR寄存器
	//读时序控制寄存器
	FSMC_Bank1->BTCR[7]|=0<<28;		//模式A
 8003426:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800342a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	61d3      	str	r3, [r2, #28]
	FSMC_Bank1->BTCR[7]|=1<<0; 		//地址建立时间（ADDSET）为2个HCLK 1/36M=27ns(实际>200ns)
 8003432:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8003436:	69db      	ldr	r3, [r3, #28]
 8003438:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	61d3      	str	r3, [r2, #28]
	//因为液晶驱动IC的读数据的时候，速度不能太快，尤其对1289这个IC。
	FSMC_Bank1->BTCR[7]|=0XF<<8;  	//数据保存时间为16个HCLK
 8003442:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800344c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8003450:	61d3      	str	r3, [r2, #28]
	//写时序控制寄存器
	FSMC_Bank1E->BWTR[6]|=0<<28; 	//模式A
 8003452:	4b5d      	ldr	r3, [pc, #372]	; (80035c8 <LCD_Init+0x2d0>)
 8003454:	4a5c      	ldr	r2, [pc, #368]	; (80035c8 <LCD_Init+0x2d0>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	6193      	str	r3, [r2, #24]
	FSMC_Bank1E->BWTR[6]|=0<<0;		//地址建立时间（ADDSET）为1个HCLK
 800345a:	4b5b      	ldr	r3, [pc, #364]	; (80035c8 <LCD_Init+0x2d0>)
 800345c:	4a5a      	ldr	r2, [pc, #360]	; (80035c8 <LCD_Init+0x2d0>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	6193      	str	r3, [r2, #24]
 	//4个HCLK（HCLK=72M）因为液晶驱动IC的写信号脉宽，最少也得50ns。72M/4=24M=55ns
	FSMC_Bank1E->BWTR[6]|=3<<8; 	//数据保存时间为4个HCLK
 8003462:	4b59      	ldr	r3, [pc, #356]	; (80035c8 <LCD_Init+0x2d0>)
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	4a58      	ldr	r2, [pc, #352]	; (80035c8 <LCD_Init+0x2d0>)
 8003468:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800346c:	6193      	str	r3, [r2, #24]
	//使能BANK1,区域4
	FSMC_Bank1->BTCR[6]|=1<<0;		//使能BANK1，区域4
 800346e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6193      	str	r3, [r2, #24]
	HAL_Delay(50); 					// delay 50 ms
 800347e:	2032      	movs	r0, #50	; 0x32
 8003480:	f003 fdc8 	bl	8007014 <HAL_Delay>
  	lcddev.id=LCD_ReadReg(0x0000);	//读ID（9320/9325/9328/4531/4535等IC）
 8003484:	2000      	movs	r0, #0
 8003486:	f7ff f991 	bl	80027ac <LCD_ReadReg>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	4b4f      	ldr	r3, [pc, #316]	; (80035cc <LCD_Init+0x2d4>)
 8003490:	809a      	strh	r2, [r3, #4]
  	if(lcddev.id<0XFF||lcddev.id==0XFFFF||lcddev.id==0X9300)//读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8003492:	4b4e      	ldr	r3, [pc, #312]	; (80035cc <LCD_Init+0x2d4>)
 8003494:	889b      	ldrh	r3, [r3, #4]
 8003496:	2bfe      	cmp	r3, #254	; 0xfe
 8003498:	d90b      	bls.n	80034b2 <LCD_Init+0x1ba>
 800349a:	4b4c      	ldr	r3, [pc, #304]	; (80035cc <LCD_Init+0x2d4>)
 800349c:	889b      	ldrh	r3, [r3, #4]
 800349e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d005      	beq.n	80034b2 <LCD_Init+0x1ba>
 80034a6:	4b49      	ldr	r3, [pc, #292]	; (80035cc <LCD_Init+0x2d4>)
 80034a8:	889b      	ldrh	r3, [r3, #4]
 80034aa:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 80034ae:	f040 80fd 	bne.w	80036ac <LCD_Init+0x3b4>
	{
 		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 80034b2:	20d3      	movs	r0, #211	; 0xd3
 80034b4:	f7ff f936 	bl	8002724 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();	//dummy read
 80034b8:	f7ff f954 	bl	8002764 <LCD_RD_DATA>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	4b42      	ldr	r3, [pc, #264]	; (80035cc <LCD_Init+0x2d4>)
 80034c2:	809a      	strh	r2, [r3, #4]
 		lcddev.id=LCD_RD_DATA();	//读到0X00
 80034c4:	f7ff f94e 	bl	8002764 <LCD_RD_DATA>
 80034c8:	4603      	mov	r3, r0
 80034ca:	461a      	mov	r2, r3
 80034cc:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <LCD_Init+0x2d4>)
 80034ce:	809a      	strh	r2, [r3, #4]
  		lcddev.id=LCD_RD_DATA();   	//读取93
 80034d0:	f7ff f948 	bl	8002764 <LCD_RD_DATA>
 80034d4:	4603      	mov	r3, r0
 80034d6:	461a      	mov	r2, r3
 80034d8:	4b3c      	ldr	r3, [pc, #240]	; (80035cc <LCD_Init+0x2d4>)
 80034da:	809a      	strh	r2, [r3, #4]
 		lcddev.id<<=8;
 80034dc:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <LCD_Init+0x2d4>)
 80034de:	889b      	ldrh	r3, [r3, #4]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	4b39      	ldr	r3, [pc, #228]	; (80035cc <LCD_Init+0x2d4>)
 80034e6:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();  	//读取41
 80034e8:	f7ff f93c 	bl	8002764 <LCD_RD_DATA>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	4b36      	ldr	r3, [pc, #216]	; (80035cc <LCD_Init+0x2d4>)
 80034f2:	889b      	ldrh	r3, [r3, #4]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	4b34      	ldr	r3, [pc, #208]	; (80035cc <LCD_Init+0x2d4>)
 80034fa:	809a      	strh	r2, [r3, #4]
 		if(lcddev.id!=0X9341)		//非9341,尝试是不是6804
 80034fc:	4b33      	ldr	r3, [pc, #204]	; (80035cc <LCD_Init+0x2d4>)
 80034fe:	889b      	ldrh	r3, [r3, #4]
 8003500:	f249 3241 	movw	r2, #37697	; 0x9341
 8003504:	4293      	cmp	r3, r2
 8003506:	f000 80d1 	beq.w	80036ac <LCD_Init+0x3b4>
		{
 			LCD_WR_REG(0XBF);
 800350a:	20bf      	movs	r0, #191	; 0xbf
 800350c:	f7ff f90a 	bl	8002724 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA(); 	//dummy read
 8003510:	f7ff f928 	bl	8002764 <LCD_RD_DATA>
 8003514:	4603      	mov	r3, r0
 8003516:	461a      	mov	r2, r3
 8003518:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <LCD_Init+0x2d4>)
 800351a:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA();   	//读回0X01
 800351c:	f7ff f922 	bl	8002764 <LCD_RD_DATA>
 8003520:	4603      	mov	r3, r0
 8003522:	461a      	mov	r2, r3
 8003524:	4b29      	ldr	r3, [pc, #164]	; (80035cc <LCD_Init+0x2d4>)
 8003526:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA(); 	//读回0XD0
 8003528:	f7ff f91c 	bl	8002764 <LCD_RD_DATA>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	4b26      	ldr	r3, [pc, #152]	; (80035cc <LCD_Init+0x2d4>)
 8003532:	809a      	strh	r2, [r3, #4]
	  		lcddev.id=LCD_RD_DATA();	//这里读回0X68
 8003534:	f7ff f916 	bl	8002764 <LCD_RD_DATA>
 8003538:	4603      	mov	r3, r0
 800353a:	461a      	mov	r2, r3
 800353c:	4b23      	ldr	r3, [pc, #140]	; (80035cc <LCD_Init+0x2d4>)
 800353e:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 8003540:	4b22      	ldr	r3, [pc, #136]	; (80035cc <LCD_Init+0x2d4>)
 8003542:	889b      	ldrh	r3, [r3, #4]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	b29a      	uxth	r2, r3
 8003548:	4b20      	ldr	r3, [pc, #128]	; (80035cc <LCD_Init+0x2d4>)
 800354a:	809a      	strh	r2, [r3, #4]
	  		lcddev.id|=LCD_RD_DATA();	//这里读回0X04
 800354c:	f7ff f90a 	bl	8002764 <LCD_RD_DATA>
 8003550:	4603      	mov	r3, r0
 8003552:	461a      	mov	r2, r3
 8003554:	4b1d      	ldr	r3, [pc, #116]	; (80035cc <LCD_Init+0x2d4>)
 8003556:	889b      	ldrh	r3, [r3, #4]
 8003558:	4313      	orrs	r3, r2
 800355a:	b29a      	uxth	r2, r3
 800355c:	4b1b      	ldr	r3, [pc, #108]	; (80035cc <LCD_Init+0x2d4>)
 800355e:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X6804)		//也不是6804,尝试看看是不是NT35310
 8003560:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <LCD_Init+0x2d4>)
 8003562:	889b      	ldrh	r3, [r3, #4]
 8003564:	f646 0204 	movw	r2, #26628	; 0x6804
 8003568:	4293      	cmp	r3, r2
 800356a:	f000 809f 	beq.w	80036ac <LCD_Init+0x3b4>
			{
				LCD_WR_REG(0XD4);
 800356e:	20d4      	movs	r0, #212	; 0xd4
 8003570:	f7ff f8d8 	bl	8002724 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();//dummy read
 8003574:	f7ff f8f6 	bl	8002764 <LCD_RD_DATA>
 8003578:	4603      	mov	r3, r0
 800357a:	461a      	mov	r2, r3
 800357c:	4b13      	ldr	r3, [pc, #76]	; (80035cc <LCD_Init+0x2d4>)
 800357e:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X01
 8003580:	f7ff f8f0 	bl	8002764 <LCD_RD_DATA>
 8003584:	4603      	mov	r3, r0
 8003586:	461a      	mov	r2, r3
 8003588:	4b10      	ldr	r3, [pc, #64]	; (80035cc <LCD_Init+0x2d4>)
 800358a:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X53
 800358c:	f7ff f8ea 	bl	8002764 <LCD_RD_DATA>
 8003590:	4603      	mov	r3, r0
 8003592:	461a      	mov	r2, r3
 8003594:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <LCD_Init+0x2d4>)
 8003596:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 8003598:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <LCD_Init+0x2d4>)
 800359a:	889b      	ldrh	r3, [r3, #4]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	b29a      	uxth	r2, r3
 80035a0:	4b0a      	ldr	r3, [pc, #40]	; (80035cc <LCD_Init+0x2d4>)
 80035a2:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 80035a4:	f7ff f8de 	bl	8002764 <LCD_RD_DATA>
 80035a8:	e012      	b.n	80035d0 <LCD_Init+0x2d8>
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40010c00 	.word	0x40010c00
 80035b4:	40011400 	.word	0x40011400
 80035b8:	00fff000 	.word	0x00fff000
 80035bc:	bb000bbb 	.word	0xbb000bbb
 80035c0:	40011800 	.word	0x40011800
 80035c4:	40012000 	.word	0x40012000
 80035c8:	a0000104 	.word	0xa0000104
 80035cc:	20000420 	.word	0x20000420
 80035d0:	4603      	mov	r3, r0
 80035d2:	461a      	mov	r2, r3
 80035d4:	4bc9      	ldr	r3, [pc, #804]	; (80038fc <LCD_Init+0x604>)
 80035d6:	889b      	ldrh	r3, [r3, #4]
 80035d8:	4313      	orrs	r3, r2
 80035da:	b29a      	uxth	r2, r3
 80035dc:	4bc7      	ldr	r3, [pc, #796]	; (80038fc <LCD_Init+0x604>)
 80035de:	809a      	strh	r2, [r3, #4]
				if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80035e0:	4bc6      	ldr	r3, [pc, #792]	; (80038fc <LCD_Init+0x604>)
 80035e2:	889b      	ldrh	r3, [r3, #4]
 80035e4:	f245 3210 	movw	r2, #21264	; 0x5310
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d05f      	beq.n	80036ac <LCD_Init+0x3b4>
				{
					LCD_WR_REG(0XDA00);
 80035ec:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80035f0:	f7ff f898 	bl	8002724 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X00
 80035f4:	f7ff f8b6 	bl	8002764 <LCD_RD_DATA>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	4bbf      	ldr	r3, [pc, #764]	; (80038fc <LCD_Init+0x604>)
 80035fe:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDB00);
 8003600:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8003604:	f7ff f88e 	bl	8002724 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X80
 8003608:	f7ff f8ac 	bl	8002764 <LCD_RD_DATA>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	4bba      	ldr	r3, [pc, #744]	; (80038fc <LCD_Init+0x604>)
 8003612:	809a      	strh	r2, [r3, #4]
					lcddev.id<<=8;
 8003614:	4bb9      	ldr	r3, [pc, #740]	; (80038fc <LCD_Init+0x604>)
 8003616:	889b      	ldrh	r3, [r3, #4]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	b29a      	uxth	r2, r3
 800361c:	4bb7      	ldr	r3, [pc, #732]	; (80038fc <LCD_Init+0x604>)
 800361e:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8003620:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8003624:	f7ff f87e 	bl	8002724 <LCD_WR_REG>
					lcddev.id|=LCD_RD_DATA();		//读回0X00
 8003628:	f7ff f89c 	bl	8002764 <LCD_RD_DATA>
 800362c:	4603      	mov	r3, r0
 800362e:	461a      	mov	r2, r3
 8003630:	4bb2      	ldr	r3, [pc, #712]	; (80038fc <LCD_Init+0x604>)
 8003632:	889b      	ldrh	r3, [r3, #4]
 8003634:	4313      	orrs	r3, r2
 8003636:	b29a      	uxth	r2, r3
 8003638:	4bb0      	ldr	r3, [pc, #704]	; (80038fc <LCD_Init+0x604>)
 800363a:	809a      	strh	r2, [r3, #4]
					if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800363c:	4baf      	ldr	r3, [pc, #700]	; (80038fc <LCD_Init+0x604>)
 800363e:	889b      	ldrh	r3, [r3, #4]
 8003640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003644:	d103      	bne.n	800364e <LCD_Init+0x356>
 8003646:	4bad      	ldr	r3, [pc, #692]	; (80038fc <LCD_Init+0x604>)
 8003648:	f245 5210 	movw	r2, #21776	; 0x5510
 800364c:	809a      	strh	r2, [r3, #4]
					if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 800364e:	4bab      	ldr	r3, [pc, #684]	; (80038fc <LCD_Init+0x604>)
 8003650:	889b      	ldrh	r3, [r3, #4]
 8003652:	f245 5210 	movw	r2, #21776	; 0x5510
 8003656:	4293      	cmp	r3, r2
 8003658:	d028      	beq.n	80036ac <LCD_Init+0x3b4>
					{
						LCD_WR_REG(0XA1);
 800365a:	20a1      	movs	r0, #161	; 0xa1
 800365c:	f7ff f862 	bl	8002724 <LCD_WR_REG>
						lcddev.id=LCD_RD_DATA();
 8003660:	f7ff f880 	bl	8002764 <LCD_RD_DATA>
 8003664:	4603      	mov	r3, r0
 8003666:	461a      	mov	r2, r3
 8003668:	4ba4      	ldr	r3, [pc, #656]	; (80038fc <LCD_Init+0x604>)
 800366a:	809a      	strh	r2, [r3, #4]
						lcddev.id=LCD_RD_DATA();	//读回0X57
 800366c:	f7ff f87a 	bl	8002764 <LCD_RD_DATA>
 8003670:	4603      	mov	r3, r0
 8003672:	461a      	mov	r2, r3
 8003674:	4ba1      	ldr	r3, [pc, #644]	; (80038fc <LCD_Init+0x604>)
 8003676:	809a      	strh	r2, [r3, #4]
						lcddev.id<<=8;
 8003678:	4ba0      	ldr	r3, [pc, #640]	; (80038fc <LCD_Init+0x604>)
 800367a:	889b      	ldrh	r3, [r3, #4]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	b29a      	uxth	r2, r3
 8003680:	4b9e      	ldr	r3, [pc, #632]	; (80038fc <LCD_Init+0x604>)
 8003682:	809a      	strh	r2, [r3, #4]
						lcddev.id|=LCD_RD_DATA();	//读回0X61
 8003684:	f7ff f86e 	bl	8002764 <LCD_RD_DATA>
 8003688:	4603      	mov	r3, r0
 800368a:	461a      	mov	r2, r3
 800368c:	4b9b      	ldr	r3, [pc, #620]	; (80038fc <LCD_Init+0x604>)
 800368e:	889b      	ldrh	r3, [r3, #4]
 8003690:	4313      	orrs	r3, r2
 8003692:	b29a      	uxth	r2, r3
 8003694:	4b99      	ldr	r3, [pc, #612]	; (80038fc <LCD_Init+0x604>)
 8003696:	809a      	strh	r2, [r3, #4]
						if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8003698:	4b98      	ldr	r3, [pc, #608]	; (80038fc <LCD_Init+0x604>)
 800369a:	889b      	ldrh	r3, [r3, #4]
 800369c:	f245 7261 	movw	r2, #22369	; 0x5761
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d103      	bne.n	80036ac <LCD_Init+0x3b4>
 80036a4:	4b95      	ldr	r3, [pc, #596]	; (80038fc <LCD_Init+0x604>)
 80036a6:	f641 1263 	movw	r2, #6499	; 0x1963
 80036aa:	809a      	strh	r2, [r3, #4]
					}
				}
			}
 		}
	}
 	print(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 80036ac:	4b93      	ldr	r3, [pc, #588]	; (80038fc <LCD_Init+0x604>)
 80036ae:	889b      	ldrh	r3, [r3, #4]
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	4b93      	ldr	r3, [pc, #588]	; (8003900 <LCD_Init+0x608>)
 80036b4:	4a93      	ldr	r2, [pc, #588]	; (8003904 <LCD_Init+0x60c>)
 80036b6:	f44f 711d 	mov.w	r1, #628	; 0x274
 80036ba:	4893      	ldr	r0, [pc, #588]	; (8003908 <LCD_Init+0x610>)
 80036bc:	f006 fa7e 	bl	8009bbc <iprintf>
	if(lcddev.id==0X9341)	//9341初始化
 80036c0:	4b8e      	ldr	r3, [pc, #568]	; (80038fc <LCD_Init+0x604>)
 80036c2:	889b      	ldrh	r3, [r3, #4]
 80036c4:	f249 3241 	movw	r2, #37697	; 0x9341
 80036c8:	4293      	cmp	r3, r2
 80036ca:	f040 811f 	bne.w	800390c <LCD_Init+0x614>
	{
		LCD_WR_REG(0xCF);
 80036ce:	20cf      	movs	r0, #207	; 0xcf
 80036d0:	f7ff f828 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80036d4:	2000      	movs	r0, #0
 80036d6:	f7ff f835 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 80036da:	20c1      	movs	r0, #193	; 0xc1
 80036dc:	f7ff f832 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 80036e0:	2030      	movs	r0, #48	; 0x30
 80036e2:	f7ff f82f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 80036e6:	20ed      	movs	r0, #237	; 0xed
 80036e8:	f7ff f81c 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 80036ec:	2064      	movs	r0, #100	; 0x64
 80036ee:	f7ff f829 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80036f2:	2003      	movs	r0, #3
 80036f4:	f7ff f826 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 80036f8:	2012      	movs	r0, #18
 80036fa:	f7ff f823 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 80036fe:	2081      	movs	r0, #129	; 0x81
 8003700:	f7ff f820 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8003704:	20e8      	movs	r0, #232	; 0xe8
 8003706:	f7ff f80d 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 800370a:	2085      	movs	r0, #133	; 0x85
 800370c:	f7ff f81a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8003710:	2010      	movs	r0, #16
 8003712:	f7ff f817 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8003716:	207a      	movs	r0, #122	; 0x7a
 8003718:	f7ff f814 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 800371c:	20cb      	movs	r0, #203	; 0xcb
 800371e:	f7ff f801 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8003722:	2039      	movs	r0, #57	; 0x39
 8003724:	f7ff f80e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8003728:	202c      	movs	r0, #44	; 0x2c
 800372a:	f7ff f80b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800372e:	2000      	movs	r0, #0
 8003730:	f7ff f808 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8003734:	2034      	movs	r0, #52	; 0x34
 8003736:	f7ff f805 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800373a:	2002      	movs	r0, #2
 800373c:	f7ff f802 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8003740:	20f7      	movs	r0, #247	; 0xf7
 8003742:	f7fe ffef 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8003746:	2020      	movs	r0, #32
 8003748:	f7fe fffc 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 800374c:	20ea      	movs	r0, #234	; 0xea
 800374e:	f7fe ffe9 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003752:	2000      	movs	r0, #0
 8003754:	f7fe fff6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003758:	2000      	movs	r0, #0
 800375a:	f7fe fff3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 800375e:	20c0      	movs	r0, #192	; 0xc0
 8003760:	f7fe ffe0 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8003764:	201b      	movs	r0, #27
 8003766:	f7fe ffed 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 800376a:	20c1      	movs	r0, #193	; 0xc1
 800376c:	f7fe ffda 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8003770:	2001      	movs	r0, #1
 8003772:	f7fe ffe7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 8003776:	20c5      	movs	r0, #197	; 0xc5
 8003778:	f7fe ffd4 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 800377c:	2030      	movs	r0, #48	; 0x30
 800377e:	f7fe ffe1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 8003782:	2030      	movs	r0, #48	; 0x30
 8003784:	f7fe ffde 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 8003788:	20c7      	movs	r0, #199	; 0xc7
 800378a:	f7fe ffcb 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 800378e:	20b7      	movs	r0, #183	; 0xb7
 8003790:	f7fe ffd8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 8003794:	2036      	movs	r0, #54	; 0x36
 8003796:	f7fe ffc5 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 800379a:	2048      	movs	r0, #72	; 0x48
 800379c:	f7fe ffd2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 80037a0:	203a      	movs	r0, #58	; 0x3a
 80037a2:	f7fe ffbf 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 80037a6:	2055      	movs	r0, #85	; 0x55
 80037a8:	f7fe ffcc 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 80037ac:	20b1      	movs	r0, #177	; 0xb1
 80037ae:	f7fe ffb9 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80037b2:	2000      	movs	r0, #0
 80037b4:	f7fe ffc6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 80037b8:	201a      	movs	r0, #26
 80037ba:	f7fe ffc3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 80037be:	20b6      	movs	r0, #182	; 0xb6
 80037c0:	f7fe ffb0 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 80037c4:	200a      	movs	r0, #10
 80037c6:	f7fe ffbd 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80037ca:	20a2      	movs	r0, #162	; 0xa2
 80037cc:	f7fe ffba 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80037d0:	20f2      	movs	r0, #242	; 0xf2
 80037d2:	f7fe ffa7 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80037d6:	2000      	movs	r0, #0
 80037d8:	f7fe ffb4 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 80037dc:	2026      	movs	r0, #38	; 0x26
 80037de:	f7fe ffa1 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80037e2:	2001      	movs	r0, #1
 80037e4:	f7fe ffae 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 80037e8:	20e0      	movs	r0, #224	; 0xe0
 80037ea:	f7fe ff9b 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 80037ee:	200f      	movs	r0, #15
 80037f0:	f7fe ffa8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 80037f4:	202a      	movs	r0, #42	; 0x2a
 80037f6:	f7fe ffa5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 80037fa:	2028      	movs	r0, #40	; 0x28
 80037fc:	f7fe ffa2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8003800:	2008      	movs	r0, #8
 8003802:	f7fe ff9f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 8003806:	200e      	movs	r0, #14
 8003808:	f7fe ff9c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 800380c:	2008      	movs	r0, #8
 800380e:	f7fe ff99 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8003812:	2054      	movs	r0, #84	; 0x54
 8003814:	f7fe ff96 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 8003818:	20a9      	movs	r0, #169	; 0xa9
 800381a:	f7fe ff93 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 800381e:	2043      	movs	r0, #67	; 0x43
 8003820:	f7fe ff90 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8003824:	200a      	movs	r0, #10
 8003826:	f7fe ff8d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 800382a:	200f      	movs	r0, #15
 800382c:	f7fe ff8a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003830:	2000      	movs	r0, #0
 8003832:	f7fe ff87 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003836:	2000      	movs	r0, #0
 8003838:	f7fe ff84 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800383c:	2000      	movs	r0, #0
 800383e:	f7fe ff81 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003842:	2000      	movs	r0, #0
 8003844:	f7fe ff7e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 8003848:	20e1      	movs	r0, #225	; 0xe1
 800384a:	f7fe ff6b 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800384e:	2000      	movs	r0, #0
 8003850:	f7fe ff78 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 8003854:	2015      	movs	r0, #21
 8003856:	f7fe ff75 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 800385a:	2017      	movs	r0, #23
 800385c:	f7fe ff72 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 8003860:	2007      	movs	r0, #7
 8003862:	f7fe ff6f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8003866:	2011      	movs	r0, #17
 8003868:	f7fe ff6c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 800386c:	2006      	movs	r0, #6
 800386e:	f7fe ff69 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 8003872:	202b      	movs	r0, #43	; 0x2b
 8003874:	f7fe ff66 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8003878:	2056      	movs	r0, #86	; 0x56
 800387a:	f7fe ff63 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 800387e:	203c      	movs	r0, #60	; 0x3c
 8003880:	f7fe ff60 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8003884:	2005      	movs	r0, #5
 8003886:	f7fe ff5d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 800388a:	2010      	movs	r0, #16
 800388c:	f7fe ff5a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8003890:	200f      	movs	r0, #15
 8003892:	f7fe ff57 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8003896:	203f      	movs	r0, #63	; 0x3f
 8003898:	f7fe ff54 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 800389c:	203f      	movs	r0, #63	; 0x3f
 800389e:	f7fe ff51 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80038a2:	200f      	movs	r0, #15
 80038a4:	f7fe ff4e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 80038a8:	202b      	movs	r0, #43	; 0x2b
 80038aa:	f7fe ff3b 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80038ae:	2000      	movs	r0, #0
 80038b0:	f7fe ff48 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038b4:	2000      	movs	r0, #0
 80038b6:	f7fe ff45 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 80038ba:	2001      	movs	r0, #1
 80038bc:	f7fe ff42 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 80038c0:	203f      	movs	r0, #63	; 0x3f
 80038c2:	f7fe ff3f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 80038c6:	202a      	movs	r0, #42	; 0x2a
 80038c8:	f7fe ff2c 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80038cc:	2000      	movs	r0, #0
 80038ce:	f7fe ff39 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038d2:	2000      	movs	r0, #0
 80038d4:	f7fe ff36 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038d8:	2000      	movs	r0, #0
 80038da:	f7fe ff33 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 80038de:	20ef      	movs	r0, #239	; 0xef
 80038e0:	f7fe ff30 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 80038e4:	2011      	movs	r0, #17
 80038e6:	f7fe ff1d 	bl	8002724 <LCD_WR_REG>
		HAL_Delay(20);
 80038ea:	2014      	movs	r0, #20
 80038ec:	f003 fb92 	bl	8007014 <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 80038f0:	2029      	movs	r0, #41	; 0x29
 80038f2:	f7fe ff17 	bl	8002724 <LCD_WR_REG>
 80038f6:	f003 b928 	b.w	8006b4a <LCD_Init+0x3852>
 80038fa:	bf00      	nop
 80038fc:	20000420 	.word	0x20000420
 8003900:	0801a6cc 	.word	0x0801a6cc
 8003904:	0800d988 	.word	0x0800d988
 8003908:	0800d9a0 	.word	0x0800d9a0
	}else if(lcddev.id==0x6804) //6804初始化
 800390c:	4b58      	ldr	r3, [pc, #352]	; (8003a70 <LCD_Init+0x778>)
 800390e:	889b      	ldrh	r3, [r3, #4]
 8003910:	f646 0204 	movw	r2, #26628	; 0x6804
 8003914:	4293      	cmp	r3, r2
 8003916:	f040 80ad 	bne.w	8003a74 <LCD_Init+0x77c>
	{
		LCD_WR_REG(0X11);
 800391a:	2011      	movs	r0, #17
 800391c:	f7fe ff02 	bl	8002724 <LCD_WR_REG>
		HAL_Delay(20);
 8003920:	2014      	movs	r0, #20
 8003922:	f003 fb77 	bl	8007014 <HAL_Delay>
		LCD_WR_REG(0XD0);//VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8003926:	20d0      	movs	r0, #208	; 0xd0
 8003928:	f7fe fefc 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0X07);
 800392c:	2007      	movs	r0, #7
 800392e:	f7fe ff09 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X42);
 8003932:	2042      	movs	r0, #66	; 0x42
 8003934:	f7fe ff06 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X1D);
 8003938:	201d      	movs	r0, #29
 800393a:	f7fe ff03 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0XD1);//VCOMH VCOM_AC amplitude setting
 800393e:	20d1      	movs	r0, #209	; 0xd1
 8003940:	f7fe fef0 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8003944:	2000      	movs	r0, #0
 8003946:	f7fe fefd 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X1a);
 800394a:	201a      	movs	r0, #26
 800394c:	f7fe fefa 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X09);
 8003950:	2009      	movs	r0, #9
 8003952:	f7fe fef7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0XD2);//Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8003956:	20d2      	movs	r0, #210	; 0xd2
 8003958:	f7fe fee4 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 800395c:	2001      	movs	r0, #1
 800395e:	f7fe fef1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X22);
 8003962:	2022      	movs	r0, #34	; 0x22
 8003964:	f7fe feee 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0XC0);//REV SM GS
 8003968:	20c0      	movs	r0, #192	; 0xc0
 800396a:	f7fe fedb 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0X10);
 800396e:	2010      	movs	r0, #16
 8003970:	f7fe fee8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X3B);
 8003974:	203b      	movs	r0, #59	; 0x3b
 8003976:	f7fe fee5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 800397a:	2000      	movs	r0, #0
 800397c:	f7fe fee2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X02);
 8003980:	2002      	movs	r0, #2
 8003982:	f7fe fedf 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X11);
 8003986:	2011      	movs	r0, #17
 8003988:	f7fe fedc 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0XC5);// Frame rate setting = 72HZ  when setting 0x03
 800398c:	20c5      	movs	r0, #197	; 0xc5
 800398e:	f7fe fec9 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0X03);
 8003992:	2003      	movs	r0, #3
 8003994:	f7fe fed6 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0XC8);//Gamma setting
 8003998:	20c8      	movs	r0, #200	; 0xc8
 800399a:	f7fe fec3 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 800399e:	2000      	movs	r0, #0
 80039a0:	f7fe fed0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 80039a4:	2025      	movs	r0, #37	; 0x25
 80039a6:	f7fe fecd 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X21);
 80039aa:	2021      	movs	r0, #33	; 0x21
 80039ac:	f7fe feca 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X05);
 80039b0:	2005      	movs	r0, #5
 80039b2:	f7fe fec7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80039b6:	2000      	movs	r0, #0
 80039b8:	f7fe fec4 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X0a);
 80039bc:	200a      	movs	r0, #10
 80039be:	f7fe fec1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X65);
 80039c2:	2065      	movs	r0, #101	; 0x65
 80039c4:	f7fe febe 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 80039c8:	2025      	movs	r0, #37	; 0x25
 80039ca:	f7fe febb 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X77);
 80039ce:	2077      	movs	r0, #119	; 0x77
 80039d0:	f7fe feb8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X50);
 80039d4:	2050      	movs	r0, #80	; 0x50
 80039d6:	f7fe feb5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X0f);
 80039da:	200f      	movs	r0, #15
 80039dc:	f7fe feb2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80039e0:	2000      	movs	r0, #0
 80039e2:	f7fe feaf 	bl	8002744 <LCD_WR_DATA>

   		LCD_WR_REG(0XF8);
 80039e6:	20f8      	movs	r0, #248	; 0xf8
 80039e8:	f7fe fe9c 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 80039ec:	2001      	movs	r0, #1
 80039ee:	f7fe fea9 	bl	8002744 <LCD_WR_DATA>

 		LCD_WR_REG(0XFE);
 80039f2:	20fe      	movs	r0, #254	; 0xfe
 80039f4:	f7fe fe96 	bl	8002724 <LCD_WR_REG>
 		LCD_WR_DATA(0X00);
 80039f8:	2000      	movs	r0, #0
 80039fa:	f7fe fea3 	bl	8002744 <LCD_WR_DATA>
 		LCD_WR_DATA(0X02);
 80039fe:	2002      	movs	r0, #2
 8003a00:	f7fe fea0 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0X20);//Exit invert mode
 8003a04:	2020      	movs	r0, #32
 8003a06:	f7fe fe8d 	bl	8002724 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8003a0a:	2036      	movs	r0, #54	; 0x36
 8003a0c:	f7fe fe8a 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0X08);//原来是a
 8003a10:	2008      	movs	r0, #8
 8003a12:	f7fe fe97 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0X3A);
 8003a16:	203a      	movs	r0, #58	; 0x3a
 8003a18:	f7fe fe84 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0X55);//16位模式
 8003a1c:	2055      	movs	r0, #85	; 0x55
 8003a1e:	f7fe fe91 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0X2B);
 8003a22:	202b      	movs	r0, #43	; 0x2b
 8003a24:	f7fe fe7e 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f7fe fe8b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f7fe fe88 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8003a34:	2001      	movs	r0, #1
 8003a36:	f7fe fe85 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X3F);
 8003a3a:	203f      	movs	r0, #63	; 0x3f
 8003a3c:	f7fe fe82 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0X2A);
 8003a40:	202a      	movs	r0, #42	; 0x2a
 8003a42:	f7fe fe6f 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8003a46:	2000      	movs	r0, #0
 8003a48:	f7fe fe7c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f7fe fe79 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8003a52:	2001      	movs	r0, #1
 8003a54:	f7fe fe76 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0XDF);
 8003a58:	20df      	movs	r0, #223	; 0xdf
 8003a5a:	f7fe fe73 	bl	8002744 <LCD_WR_DATA>
		HAL_Delay(120);
 8003a5e:	2078      	movs	r0, #120	; 0x78
 8003a60:	f003 fad8 	bl	8007014 <HAL_Delay>
		LCD_WR_REG(0X29);
 8003a64:	2029      	movs	r0, #41	; 0x29
 8003a66:	f7fe fe5d 	bl	8002724 <LCD_WR_REG>
 8003a6a:	f003 b86e 	b.w	8006b4a <LCD_Init+0x3852>
 8003a6e:	bf00      	nop
 8003a70:	20000420 	.word	0x20000420
 	}else if(lcddev.id==0x5310)
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <LCD_Init+0x78c>)
 8003a76:	889b      	ldrh	r3, [r3, #4]
 8003a78:	f245 3210 	movw	r2, #21264	; 0x5310
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	f040 877c 	bne.w	800497a <LCD_Init+0x1682>
 8003a82:	e001      	b.n	8003a88 <LCD_Init+0x790>
 8003a84:	20000420 	.word	0x20000420
	{
		LCD_WR_REG(0xED);
 8003a88:	20ed      	movs	r0, #237	; 0xed
 8003a8a:	f7fe fe4b 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f7fe fe58 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 8003a94:	20fe      	movs	r0, #254	; 0xfe
 8003a96:	f7fe fe55 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 8003a9a:	20ee      	movs	r0, #238	; 0xee
 8003a9c:	f7fe fe42 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 8003aa0:	20de      	movs	r0, #222	; 0xde
 8003aa2:	f7fe fe4f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8003aa6:	2021      	movs	r0, #33	; 0x21
 8003aa8:	f7fe fe4c 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 8003aac:	20f1      	movs	r0, #241	; 0xf1
 8003aae:	f7fe fe39 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8003ab2:	2001      	movs	r0, #1
 8003ab4:	f7fe fe46 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 8003ab8:	20df      	movs	r0, #223	; 0xdf
 8003aba:	f7fe fe33 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 8003abe:	2010      	movs	r0, #16
 8003ac0:	f7fe fe40 	bl	8002744 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8003ac4:	20c4      	movs	r0, #196	; 0xc4
 8003ac6:	f7fe fe2d 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 8003aca:	208f      	movs	r0, #143	; 0x8f
 8003acc:	f7fe fe3a 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8003ad0:	20c6      	movs	r0, #198	; 0xc6
 8003ad2:	f7fe fe27 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f7fe fe34 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8003adc:	20e2      	movs	r0, #226	; 0xe2
 8003ade:	f7fe fe31 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8003ae2:	20e2      	movs	r0, #226	; 0xe2
 8003ae4:	f7fe fe2e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8003ae8:	20e2      	movs	r0, #226	; 0xe2
 8003aea:	f7fe fe2b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 8003aee:	20bf      	movs	r0, #191	; 0xbf
 8003af0:	f7fe fe18 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8003af4:	20aa      	movs	r0, #170	; 0xaa
 8003af6:	f7fe fe25 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 8003afa:	20b0      	movs	r0, #176	; 0xb0
 8003afc:	f7fe fe12 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 8003b00:	200d      	movs	r0, #13
 8003b02:	f7fe fe1f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b06:	2000      	movs	r0, #0
 8003b08:	f7fe fe1c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8003b0c:	200d      	movs	r0, #13
 8003b0e:	f7fe fe19 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b12:	2000      	movs	r0, #0
 8003b14:	f7fe fe16 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8003b18:	2011      	movs	r0, #17
 8003b1a:	f7fe fe13 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b1e:	2000      	movs	r0, #0
 8003b20:	f7fe fe10 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8003b24:	2019      	movs	r0, #25
 8003b26:	f7fe fe0d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b2a:	2000      	movs	r0, #0
 8003b2c:	f7fe fe0a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8003b30:	2021      	movs	r0, #33	; 0x21
 8003b32:	f7fe fe07 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b36:	2000      	movs	r0, #0
 8003b38:	f7fe fe04 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8003b3c:	202d      	movs	r0, #45	; 0x2d
 8003b3e:	f7fe fe01 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b42:	2000      	movs	r0, #0
 8003b44:	f7fe fdfe 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8003b48:	203d      	movs	r0, #61	; 0x3d
 8003b4a:	f7fe fdfb 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b4e:	2000      	movs	r0, #0
 8003b50:	f7fe fdf8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8003b54:	205d      	movs	r0, #93	; 0x5d
 8003b56:	f7fe fdf5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	f7fe fdf2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8003b60:	205d      	movs	r0, #93	; 0x5d
 8003b62:	f7fe fdef 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b66:	2000      	movs	r0, #0
 8003b68:	f7fe fdec 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8003b6c:	20b1      	movs	r0, #177	; 0xb1
 8003b6e:	f7fe fdd9 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 8003b72:	2080      	movs	r0, #128	; 0x80
 8003b74:	f7fe fde6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f7fe fde3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8003b7e:	208b      	movs	r0, #139	; 0x8b
 8003b80:	f7fe fde0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b84:	2000      	movs	r0, #0
 8003b86:	f7fe fddd 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8003b8a:	2096      	movs	r0, #150	; 0x96
 8003b8c:	f7fe fdda 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b90:	2000      	movs	r0, #0
 8003b92:	f7fe fdd7 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 8003b96:	20b2      	movs	r0, #178	; 0xb2
 8003b98:	f7fe fdc4 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	f7fe fdd1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	f7fe fdce 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8003ba8:	2002      	movs	r0, #2
 8003baa:	f7fe fdcb 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bae:	2000      	movs	r0, #0
 8003bb0:	f7fe fdc8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8003bb4:	2003      	movs	r0, #3
 8003bb6:	f7fe fdc5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bba:	2000      	movs	r0, #0
 8003bbc:	f7fe fdc2 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 8003bc0:	20b3      	movs	r0, #179	; 0xb3
 8003bc2:	f7fe fdaf 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	f7fe fdbc 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bcc:	2000      	movs	r0, #0
 8003bce:	f7fe fdb9 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f7fe fdb6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bd8:	2000      	movs	r0, #0
 8003bda:	f7fe fdb3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bde:	2000      	movs	r0, #0
 8003be0:	f7fe fdb0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003be4:	2000      	movs	r0, #0
 8003be6:	f7fe fdad 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bea:	2000      	movs	r0, #0
 8003bec:	f7fe fdaa 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f7fe fda7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f7fe fda4 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	f7fe fda1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c02:	2000      	movs	r0, #0
 8003c04:	f7fe fd9e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c08:	2000      	movs	r0, #0
 8003c0a:	f7fe fd9b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c0e:	2000      	movs	r0, #0
 8003c10:	f7fe fd98 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c14:	2000      	movs	r0, #0
 8003c16:	f7fe fd95 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	f7fe fd92 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c20:	2000      	movs	r0, #0
 8003c22:	f7fe fd8f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c26:	2000      	movs	r0, #0
 8003c28:	f7fe fd8c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	f7fe fd89 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c32:	2000      	movs	r0, #0
 8003c34:	f7fe fd86 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c38:	2000      	movs	r0, #0
 8003c3a:	f7fe fd83 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f7fe fd80 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c44:	2000      	movs	r0, #0
 8003c46:	f7fe fd7d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f7fe fd7a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c50:	2000      	movs	r0, #0
 8003c52:	f7fe fd77 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 8003c56:	20b4      	movs	r0, #180	; 0xb4
 8003c58:	f7fe fd64 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8003c5c:	208b      	movs	r0, #139	; 0x8b
 8003c5e:	f7fe fd71 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c62:	2000      	movs	r0, #0
 8003c64:	f7fe fd6e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8003c68:	2096      	movs	r0, #150	; 0x96
 8003c6a:	f7fe fd6b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f7fe fd68 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8003c74:	20a1      	movs	r0, #161	; 0xa1
 8003c76:	f7fe fd65 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c7a:	2000      	movs	r0, #0
 8003c7c:	f7fe fd62 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 8003c80:	20b5      	movs	r0, #181	; 0xb5
 8003c82:	f7fe fd4f 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 8003c86:	2002      	movs	r0, #2
 8003c88:	f7fe fd5c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f7fe fd59 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8003c92:	2003      	movs	r0, #3
 8003c94:	f7fe fd56 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c98:	2000      	movs	r0, #0
 8003c9a:	f7fe fd53 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8003c9e:	2004      	movs	r0, #4
 8003ca0:	f7fe fd50 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	f7fe fd4d 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 8003caa:	20b6      	movs	r0, #182	; 0xb6
 8003cac:	f7fe fd3a 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	f7fe fd47 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	f7fe fd44 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 8003cbc:	20b7      	movs	r0, #183	; 0xb7
 8003cbe:	f7fe fd31 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003cc2:	2000      	movs	r0, #0
 8003cc4:	f7fe fd3e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cc8:	2000      	movs	r0, #0
 8003cca:	f7fe fd3b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8003cce:	203f      	movs	r0, #63	; 0x3f
 8003cd0:	f7fe fd38 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	f7fe fd35 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 8003cda:	205e      	movs	r0, #94	; 0x5e
 8003cdc:	f7fe fd32 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f7fe fd2f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8003ce6:	2064      	movs	r0, #100	; 0x64
 8003ce8:	f7fe fd2c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cec:	2000      	movs	r0, #0
 8003cee:	f7fe fd29 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 8003cf2:	208c      	movs	r0, #140	; 0x8c
 8003cf4:	f7fe fd26 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	f7fe fd23 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 8003cfe:	20ac      	movs	r0, #172	; 0xac
 8003d00:	f7fe fd20 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d04:	2000      	movs	r0, #0
 8003d06:	f7fe fd1d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8003d0a:	20dc      	movs	r0, #220	; 0xdc
 8003d0c:	f7fe fd1a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d10:	2000      	movs	r0, #0
 8003d12:	f7fe fd17 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8003d16:	2070      	movs	r0, #112	; 0x70
 8003d18:	f7fe fd14 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f7fe fd11 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 8003d22:	2090      	movs	r0, #144	; 0x90
 8003d24:	f7fe fd0e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d28:	2000      	movs	r0, #0
 8003d2a:	f7fe fd0b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 8003d2e:	20eb      	movs	r0, #235	; 0xeb
 8003d30:	f7fe fd08 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d34:	2000      	movs	r0, #0
 8003d36:	f7fe fd05 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8003d3a:	20dc      	movs	r0, #220	; 0xdc
 8003d3c:	f7fe fd02 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d40:	2000      	movs	r0, #0
 8003d42:	f7fe fcff 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8003d46:	20b8      	movs	r0, #184	; 0xb8
 8003d48:	f7fe fcec 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003d4c:	2000      	movs	r0, #0
 8003d4e:	f7fe fcf9 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d52:	2000      	movs	r0, #0
 8003d54:	f7fe fcf6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d58:	2000      	movs	r0, #0
 8003d5a:	f7fe fcf3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f7fe fcf0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d64:	2000      	movs	r0, #0
 8003d66:	f7fe fced 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f7fe fcea 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d70:	2000      	movs	r0, #0
 8003d72:	f7fe fce7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d76:	2000      	movs	r0, #0
 8003d78:	f7fe fce4 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8003d7c:	20ba      	movs	r0, #186	; 0xba
 8003d7e:	f7fe fcd1 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 8003d82:	2024      	movs	r0, #36	; 0x24
 8003d84:	f7fe fcde 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d88:	2000      	movs	r0, #0
 8003d8a:	f7fe fcdb 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d8e:	2000      	movs	r0, #0
 8003d90:	f7fe fcd8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d94:	2000      	movs	r0, #0
 8003d96:	f7fe fcd5 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 8003d9a:	20c1      	movs	r0, #193	; 0xc1
 8003d9c:	f7fe fcc2 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8003da0:	2020      	movs	r0, #32
 8003da2:	f7fe fccf 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003da6:	2000      	movs	r0, #0
 8003da8:	f7fe fccc 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8003dac:	2054      	movs	r0, #84	; 0x54
 8003dae:	f7fe fcc9 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003db2:	2000      	movs	r0, #0
 8003db4:	f7fe fcc6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8003db8:	20ff      	movs	r0, #255	; 0xff
 8003dba:	f7fe fcc3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f7fe fcc0 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 8003dc4:	20c2      	movs	r0, #194	; 0xc2
 8003dc6:	f7fe fcad 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8003dca:	200a      	movs	r0, #10
 8003dcc:	f7fe fcba 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	f7fe fcb7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8003dd6:	2004      	movs	r0, #4
 8003dd8:	f7fe fcb4 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f7fe fcb1 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 8003de2:	20c3      	movs	r0, #195	; 0xc3
 8003de4:	f7fe fc9e 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8003de8:	203c      	movs	r0, #60	; 0x3c
 8003dea:	f7fe fcab 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dee:	2000      	movs	r0, #0
 8003df0:	f7fe fca8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8003df4:	203a      	movs	r0, #58	; 0x3a
 8003df6:	f7fe fca5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f7fe fca2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 8003e00:	2039      	movs	r0, #57	; 0x39
 8003e02:	f7fe fc9f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e06:	2000      	movs	r0, #0
 8003e08:	f7fe fc9c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8003e0c:	2037      	movs	r0, #55	; 0x37
 8003e0e:	f7fe fc99 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e12:	2000      	movs	r0, #0
 8003e14:	f7fe fc96 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8003e18:	203c      	movs	r0, #60	; 0x3c
 8003e1a:	f7fe fc93 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e1e:	2000      	movs	r0, #0
 8003e20:	f7fe fc90 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8003e24:	2036      	movs	r0, #54	; 0x36
 8003e26:	f7fe fc8d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	f7fe fc8a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8003e30:	2032      	movs	r0, #50	; 0x32
 8003e32:	f7fe fc87 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e36:	2000      	movs	r0, #0
 8003e38:	f7fe fc84 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8003e3c:	202f      	movs	r0, #47	; 0x2f
 8003e3e:	f7fe fc81 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e42:	2000      	movs	r0, #0
 8003e44:	f7fe fc7e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8003e48:	202c      	movs	r0, #44	; 0x2c
 8003e4a:	f7fe fc7b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e4e:	2000      	movs	r0, #0
 8003e50:	f7fe fc78 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003e54:	2029      	movs	r0, #41	; 0x29
 8003e56:	f7fe fc75 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	f7fe fc72 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8003e60:	2026      	movs	r0, #38	; 0x26
 8003e62:	f7fe fc6f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e66:	2000      	movs	r0, #0
 8003e68:	f7fe fc6c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8003e6c:	2024      	movs	r0, #36	; 0x24
 8003e6e:	f7fe fc69 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e72:	2000      	movs	r0, #0
 8003e74:	f7fe fc66 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8003e78:	2024      	movs	r0, #36	; 0x24
 8003e7a:	f7fe fc63 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e7e:	2000      	movs	r0, #0
 8003e80:	f7fe fc60 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8003e84:	2023      	movs	r0, #35	; 0x23
 8003e86:	f7fe fc5d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	f7fe fc5a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8003e90:	203c      	movs	r0, #60	; 0x3c
 8003e92:	f7fe fc57 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e96:	2000      	movs	r0, #0
 8003e98:	f7fe fc54 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8003e9c:	2036      	movs	r0, #54	; 0x36
 8003e9e:	f7fe fc51 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	f7fe fc4e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8003ea8:	2032      	movs	r0, #50	; 0x32
 8003eaa:	f7fe fc4b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003eae:	2000      	movs	r0, #0
 8003eb0:	f7fe fc48 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8003eb4:	202f      	movs	r0, #47	; 0x2f
 8003eb6:	f7fe fc45 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003eba:	2000      	movs	r0, #0
 8003ebc:	f7fe fc42 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8003ec0:	202c      	movs	r0, #44	; 0x2c
 8003ec2:	f7fe fc3f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f7fe fc3c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003ecc:	2029      	movs	r0, #41	; 0x29
 8003ece:	f7fe fc39 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	f7fe fc36 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8003ed8:	2026      	movs	r0, #38	; 0x26
 8003eda:	f7fe fc33 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ede:	2000      	movs	r0, #0
 8003ee0:	f7fe fc30 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8003ee4:	2024      	movs	r0, #36	; 0x24
 8003ee6:	f7fe fc2d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003eea:	2000      	movs	r0, #0
 8003eec:	f7fe fc2a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8003ef0:	2024      	movs	r0, #36	; 0x24
 8003ef2:	f7fe fc27 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	f7fe fc24 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8003efc:	2023      	movs	r0, #35	; 0x23
 8003efe:	f7fe fc21 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f02:	2000      	movs	r0, #0
 8003f04:	f7fe fc1e 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8003f08:	20c4      	movs	r0, #196	; 0xc4
 8003f0a:	f7fe fc0b 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 8003f0e:	2062      	movs	r0, #98	; 0x62
 8003f10:	f7fe fc18 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f14:	2000      	movs	r0, #0
 8003f16:	f7fe fc15 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8003f1a:	2005      	movs	r0, #5
 8003f1c:	f7fe fc12 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f20:	2000      	movs	r0, #0
 8003f22:	f7fe fc0f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8003f26:	2084      	movs	r0, #132	; 0x84
 8003f28:	f7fe fc0c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	f7fe fc09 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8003f32:	20f0      	movs	r0, #240	; 0xf0
 8003f34:	f7fe fc06 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f38:	2000      	movs	r0, #0
 8003f3a:	f7fe fc03 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8003f3e:	2018      	movs	r0, #24
 8003f40:	f7fe fc00 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f44:	2000      	movs	r0, #0
 8003f46:	f7fe fbfd 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 8003f4a:	20a4      	movs	r0, #164	; 0xa4
 8003f4c:	f7fe fbfa 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f50:	2000      	movs	r0, #0
 8003f52:	f7fe fbf7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8003f56:	2018      	movs	r0, #24
 8003f58:	f7fe fbf4 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	f7fe fbf1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8003f62:	2050      	movs	r0, #80	; 0x50
 8003f64:	f7fe fbee 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f68:	2000      	movs	r0, #0
 8003f6a:	f7fe fbeb 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 8003f6e:	200c      	movs	r0, #12
 8003f70:	f7fe fbe8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f74:	2000      	movs	r0, #0
 8003f76:	f7fe fbe5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8003f7a:	2017      	movs	r0, #23
 8003f7c:	f7fe fbe2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f80:	2000      	movs	r0, #0
 8003f82:	f7fe fbdf 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 8003f86:	2095      	movs	r0, #149	; 0x95
 8003f88:	f7fe fbdc 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f8c:	2000      	movs	r0, #0
 8003f8e:	f7fe fbd9 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003f92:	20f3      	movs	r0, #243	; 0xf3
 8003f94:	f7fe fbd6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f7fe fbd3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 8003f9e:	20e6      	movs	r0, #230	; 0xe6
 8003fa0:	f7fe fbd0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fa4:	2000      	movs	r0, #0
 8003fa6:	f7fe fbcd 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 8003faa:	20c5      	movs	r0, #197	; 0xc5
 8003fac:	f7fe fbba 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8003fb0:	2032      	movs	r0, #50	; 0x32
 8003fb2:	f7fe fbc7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	f7fe fbc4 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003fbc:	2044      	movs	r0, #68	; 0x44
 8003fbe:	f7fe fbc1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	f7fe fbbe 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 8003fc8:	2065      	movs	r0, #101	; 0x65
 8003fca:	f7fe fbbb 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fce:	2000      	movs	r0, #0
 8003fd0:	f7fe fbb8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8003fd4:	2076      	movs	r0, #118	; 0x76
 8003fd6:	f7fe fbb5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fda:	2000      	movs	r0, #0
 8003fdc:	f7fe fbb2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003fe0:	2088      	movs	r0, #136	; 0x88
 8003fe2:	f7fe fbaf 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	f7fe fbac 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8003fec:	20c6      	movs	r0, #198	; 0xc6
 8003fee:	f7fe fb99 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8003ff2:	2020      	movs	r0, #32
 8003ff4:	f7fe fba6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f7fe fba3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8003ffe:	2017      	movs	r0, #23
 8004000:	f7fe fba0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004004:	2000      	movs	r0, #0
 8004006:	f7fe fb9d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 800400a:	2001      	movs	r0, #1
 800400c:	f7fe fb9a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004010:	2000      	movs	r0, #0
 8004012:	f7fe fb97 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8004016:	20c7      	movs	r0, #199	; 0xc7
 8004018:	f7fe fb84 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800401c:	2000      	movs	r0, #0
 800401e:	f7fe fb91 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004022:	2000      	movs	r0, #0
 8004024:	f7fe fb8e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004028:	2000      	movs	r0, #0
 800402a:	f7fe fb8b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800402e:	2000      	movs	r0, #0
 8004030:	f7fe fb88 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8004034:	20c8      	movs	r0, #200	; 0xc8
 8004036:	f7fe fb75 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800403a:	2000      	movs	r0, #0
 800403c:	f7fe fb82 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004040:	2000      	movs	r0, #0
 8004042:	f7fe fb7f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004046:	2000      	movs	r0, #0
 8004048:	f7fe fb7c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800404c:	2000      	movs	r0, #0
 800404e:	f7fe fb79 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 8004052:	20c9      	movs	r0, #201	; 0xc9
 8004054:	f7fe fb66 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004058:	2000      	movs	r0, #0
 800405a:	f7fe fb73 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800405e:	2000      	movs	r0, #0
 8004060:	f7fe fb70 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004064:	2000      	movs	r0, #0
 8004066:	f7fe fb6d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800406a:	2000      	movs	r0, #0
 800406c:	f7fe fb6a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004070:	2000      	movs	r0, #0
 8004072:	f7fe fb67 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004076:	2000      	movs	r0, #0
 8004078:	f7fe fb64 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800407c:	2000      	movs	r0, #0
 800407e:	f7fe fb61 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004082:	2000      	movs	r0, #0
 8004084:	f7fe fb5e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004088:	2000      	movs	r0, #0
 800408a:	f7fe fb5b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800408e:	2000      	movs	r0, #0
 8004090:	f7fe fb58 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004094:	2000      	movs	r0, #0
 8004096:	f7fe fb55 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800409a:	2000      	movs	r0, #0
 800409c:	f7fe fb52 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040a0:	2000      	movs	r0, #0
 80040a2:	f7fe fb4f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040a6:	2000      	movs	r0, #0
 80040a8:	f7fe fb4c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7fe fb49 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040b2:	2000      	movs	r0, #0
 80040b4:	f7fe fb46 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 80040b8:	20e0      	movs	r0, #224	; 0xe0
 80040ba:	f7fe fb33 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80040be:	2016      	movs	r0, #22
 80040c0:	f7fe fb40 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7fe fb3d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80040ca:	201c      	movs	r0, #28
 80040cc:	f7fe fb3a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040d0:	2000      	movs	r0, #0
 80040d2:	f7fe fb37 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80040d6:	2021      	movs	r0, #33	; 0x21
 80040d8:	f7fe fb34 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040dc:	2000      	movs	r0, #0
 80040de:	f7fe fb31 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80040e2:	2036      	movs	r0, #54	; 0x36
 80040e4:	f7fe fb2e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040e8:	2000      	movs	r0, #0
 80040ea:	f7fe fb2b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 80040ee:	2046      	movs	r0, #70	; 0x46
 80040f0:	f7fe fb28 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7fe fb25 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80040fa:	2052      	movs	r0, #82	; 0x52
 80040fc:	f7fe fb22 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004100:	2000      	movs	r0, #0
 8004102:	f7fe fb1f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8004106:	2064      	movs	r0, #100	; 0x64
 8004108:	f7fe fb1c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800410c:	2000      	movs	r0, #0
 800410e:	f7fe fb19 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8004112:	207a      	movs	r0, #122	; 0x7a
 8004114:	f7fe fb16 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004118:	2000      	movs	r0, #0
 800411a:	f7fe fb13 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800411e:	208b      	movs	r0, #139	; 0x8b
 8004120:	f7fe fb10 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004124:	2000      	movs	r0, #0
 8004126:	f7fe fb0d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800412a:	2099      	movs	r0, #153	; 0x99
 800412c:	f7fe fb0a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004130:	2000      	movs	r0, #0
 8004132:	f7fe fb07 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8004136:	20a8      	movs	r0, #168	; 0xa8
 8004138:	f7fe fb04 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800413c:	2000      	movs	r0, #0
 800413e:	f7fe fb01 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8004142:	20b9      	movs	r0, #185	; 0xb9
 8004144:	f7fe fafe 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004148:	2000      	movs	r0, #0
 800414a:	f7fe fafb 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800414e:	20c4      	movs	r0, #196	; 0xc4
 8004150:	f7fe faf8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004154:	2000      	movs	r0, #0
 8004156:	f7fe faf5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 800415a:	20ca      	movs	r0, #202	; 0xca
 800415c:	f7fe faf2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004160:	2000      	movs	r0, #0
 8004162:	f7fe faef 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8004166:	20d2      	movs	r0, #210	; 0xd2
 8004168:	f7fe faec 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800416c:	2000      	movs	r0, #0
 800416e:	f7fe fae9 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 8004172:	20d9      	movs	r0, #217	; 0xd9
 8004174:	f7fe fae6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004178:	2000      	movs	r0, #0
 800417a:	f7fe fae3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 800417e:	20e0      	movs	r0, #224	; 0xe0
 8004180:	f7fe fae0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004184:	2000      	movs	r0, #0
 8004186:	f7fe fadd 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800418a:	20f3      	movs	r0, #243	; 0xf3
 800418c:	f7fe fada 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004190:	2000      	movs	r0, #0
 8004192:	f7fe fad7 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 8004196:	20e1      	movs	r0, #225	; 0xe1
 8004198:	f7fe fac4 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 800419c:	2016      	movs	r0, #22
 800419e:	f7fe fad1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041a2:	2000      	movs	r0, #0
 80041a4:	f7fe face 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80041a8:	201c      	movs	r0, #28
 80041aa:	f7fe facb 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041ae:	2000      	movs	r0, #0
 80041b0:	f7fe fac8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 80041b4:	2022      	movs	r0, #34	; 0x22
 80041b6:	f7fe fac5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041ba:	2000      	movs	r0, #0
 80041bc:	f7fe fac2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80041c0:	2036      	movs	r0, #54	; 0x36
 80041c2:	f7fe fabf 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041c6:	2000      	movs	r0, #0
 80041c8:	f7fe fabc 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80041cc:	2045      	movs	r0, #69	; 0x45
 80041ce:	f7fe fab9 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041d2:	2000      	movs	r0, #0
 80041d4:	f7fe fab6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80041d8:	2052      	movs	r0, #82	; 0x52
 80041da:	f7fe fab3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041de:	2000      	movs	r0, #0
 80041e0:	f7fe fab0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80041e4:	2064      	movs	r0, #100	; 0x64
 80041e6:	f7fe faad 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041ea:	2000      	movs	r0, #0
 80041ec:	f7fe faaa 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80041f0:	207a      	movs	r0, #122	; 0x7a
 80041f2:	f7fe faa7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041f6:	2000      	movs	r0, #0
 80041f8:	f7fe faa4 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80041fc:	208b      	movs	r0, #139	; 0x8b
 80041fe:	f7fe faa1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004202:	2000      	movs	r0, #0
 8004204:	f7fe fa9e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8004208:	2099      	movs	r0, #153	; 0x99
 800420a:	f7fe fa9b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800420e:	2000      	movs	r0, #0
 8004210:	f7fe fa98 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8004214:	20a8      	movs	r0, #168	; 0xa8
 8004216:	f7fe fa95 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800421a:	2000      	movs	r0, #0
 800421c:	f7fe fa92 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8004220:	20b9      	movs	r0, #185	; 0xb9
 8004222:	f7fe fa8f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004226:	2000      	movs	r0, #0
 8004228:	f7fe fa8c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800422c:	20c4      	movs	r0, #196	; 0xc4
 800422e:	f7fe fa89 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004232:	2000      	movs	r0, #0
 8004234:	f7fe fa86 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8004238:	20ca      	movs	r0, #202	; 0xca
 800423a:	f7fe fa83 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800423e:	2000      	movs	r0, #0
 8004240:	f7fe fa80 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8004244:	20d2      	movs	r0, #210	; 0xd2
 8004246:	f7fe fa7d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800424a:	2000      	movs	r0, #0
 800424c:	f7fe fa7a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 8004250:	20d8      	movs	r0, #216	; 0xd8
 8004252:	f7fe fa77 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004256:	2000      	movs	r0, #0
 8004258:	f7fe fa74 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 800425c:	20e0      	movs	r0, #224	; 0xe0
 800425e:	f7fe fa71 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004262:	2000      	movs	r0, #0
 8004264:	f7fe fa6e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8004268:	20f3      	movs	r0, #243	; 0xf3
 800426a:	f7fe fa6b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800426e:	2000      	movs	r0, #0
 8004270:	f7fe fa68 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8004274:	20e2      	movs	r0, #226	; 0xe2
 8004276:	f7fe fa55 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 800427a:	2005      	movs	r0, #5
 800427c:	f7fe fa62 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004280:	2000      	movs	r0, #0
 8004282:	f7fe fa5f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 8004286:	200b      	movs	r0, #11
 8004288:	f7fe fa5c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800428c:	2000      	movs	r0, #0
 800428e:	f7fe fa59 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 8004292:	201b      	movs	r0, #27
 8004294:	f7fe fa56 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004298:	2000      	movs	r0, #0
 800429a:	f7fe fa53 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 800429e:	2034      	movs	r0, #52	; 0x34
 80042a0:	f7fe fa50 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042a4:	2000      	movs	r0, #0
 80042a6:	f7fe fa4d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80042aa:	2044      	movs	r0, #68	; 0x44
 80042ac:	f7fe fa4a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042b0:	2000      	movs	r0, #0
 80042b2:	f7fe fa47 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 80042b6:	204f      	movs	r0, #79	; 0x4f
 80042b8:	f7fe fa44 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042bc:	2000      	movs	r0, #0
 80042be:	f7fe fa41 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 80042c2:	2061      	movs	r0, #97	; 0x61
 80042c4:	f7fe fa3e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042c8:	2000      	movs	r0, #0
 80042ca:	f7fe fa3b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 80042ce:	2079      	movs	r0, #121	; 0x79
 80042d0:	f7fe fa38 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042d4:	2000      	movs	r0, #0
 80042d6:	f7fe fa35 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80042da:	2088      	movs	r0, #136	; 0x88
 80042dc:	f7fe fa32 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042e0:	2000      	movs	r0, #0
 80042e2:	f7fe fa2f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80042e6:	2097      	movs	r0, #151	; 0x97
 80042e8:	f7fe fa2c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042ec:	2000      	movs	r0, #0
 80042ee:	f7fe fa29 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80042f2:	20a6      	movs	r0, #166	; 0xa6
 80042f4:	f7fe fa26 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042f8:	2000      	movs	r0, #0
 80042fa:	f7fe fa23 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80042fe:	20b7      	movs	r0, #183	; 0xb7
 8004300:	f7fe fa20 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004304:	2000      	movs	r0, #0
 8004306:	f7fe fa1d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 800430a:	20c2      	movs	r0, #194	; 0xc2
 800430c:	f7fe fa1a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004310:	2000      	movs	r0, #0
 8004312:	f7fe fa17 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8004316:	20c7      	movs	r0, #199	; 0xc7
 8004318:	f7fe fa14 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800431c:	2000      	movs	r0, #0
 800431e:	f7fe fa11 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8004322:	20d1      	movs	r0, #209	; 0xd1
 8004324:	f7fe fa0e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004328:	2000      	movs	r0, #0
 800432a:	f7fe fa0b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 800432e:	20d6      	movs	r0, #214	; 0xd6
 8004330:	f7fe fa08 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004334:	2000      	movs	r0, #0
 8004336:	f7fe fa05 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 800433a:	20dd      	movs	r0, #221	; 0xdd
 800433c:	f7fe fa02 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004340:	2000      	movs	r0, #0
 8004342:	f7fe f9ff 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8004346:	20f3      	movs	r0, #243	; 0xf3
 8004348:	f7fe f9fc 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800434c:	2000      	movs	r0, #0
 800434e:	f7fe f9f9 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 8004352:	20e3      	movs	r0, #227	; 0xe3
 8004354:	f7fe f9e6 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8004358:	2005      	movs	r0, #5
 800435a:	f7fe f9f3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800435e:	2000      	movs	r0, #0
 8004360:	f7fe f9f0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8004364:	200a      	movs	r0, #10
 8004366:	f7fe f9ed 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800436a:	2000      	movs	r0, #0
 800436c:	f7fe f9ea 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8004370:	201c      	movs	r0, #28
 8004372:	f7fe f9e7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004376:	2000      	movs	r0, #0
 8004378:	f7fe f9e4 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 800437c:	2033      	movs	r0, #51	; 0x33
 800437e:	f7fe f9e1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004382:	2000      	movs	r0, #0
 8004384:	f7fe f9de 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8004388:	2044      	movs	r0, #68	; 0x44
 800438a:	f7fe f9db 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800438e:	2000      	movs	r0, #0
 8004390:	f7fe f9d8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8004394:	2050      	movs	r0, #80	; 0x50
 8004396:	f7fe f9d5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800439a:	2000      	movs	r0, #0
 800439c:	f7fe f9d2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 80043a0:	2062      	movs	r0, #98	; 0x62
 80043a2:	f7fe f9cf 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043a6:	2000      	movs	r0, #0
 80043a8:	f7fe f9cc 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 80043ac:	2078      	movs	r0, #120	; 0x78
 80043ae:	f7fe f9c9 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043b2:	2000      	movs	r0, #0
 80043b4:	f7fe f9c6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80043b8:	2088      	movs	r0, #136	; 0x88
 80043ba:	f7fe f9c3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043be:	2000      	movs	r0, #0
 80043c0:	f7fe f9c0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80043c4:	2097      	movs	r0, #151	; 0x97
 80043c6:	f7fe f9bd 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043ca:	2000      	movs	r0, #0
 80043cc:	f7fe f9ba 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80043d0:	20a6      	movs	r0, #166	; 0xa6
 80043d2:	f7fe f9b7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043d6:	2000      	movs	r0, #0
 80043d8:	f7fe f9b4 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80043dc:	20b7      	movs	r0, #183	; 0xb7
 80043de:	f7fe f9b1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043e2:	2000      	movs	r0, #0
 80043e4:	f7fe f9ae 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80043e8:	20c2      	movs	r0, #194	; 0xc2
 80043ea:	f7fe f9ab 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043ee:	2000      	movs	r0, #0
 80043f0:	f7fe f9a8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 80043f4:	20c7      	movs	r0, #199	; 0xc7
 80043f6:	f7fe f9a5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043fa:	2000      	movs	r0, #0
 80043fc:	f7fe f9a2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8004400:	20d1      	movs	r0, #209	; 0xd1
 8004402:	f7fe f99f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004406:	2000      	movs	r0, #0
 8004408:	f7fe f99c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 800440c:	20d5      	movs	r0, #213	; 0xd5
 800440e:	f7fe f999 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004412:	2000      	movs	r0, #0
 8004414:	f7fe f996 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8004418:	20dd      	movs	r0, #221	; 0xdd
 800441a:	f7fe f993 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800441e:	2000      	movs	r0, #0
 8004420:	f7fe f990 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8004424:	20f3      	movs	r0, #243	; 0xf3
 8004426:	f7fe f98d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800442a:	2000      	movs	r0, #0
 800442c:	f7fe f98a 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8004430:	20e4      	movs	r0, #228	; 0xe4
 8004432:	f7fe f977 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8004436:	2001      	movs	r0, #1
 8004438:	f7fe f984 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800443c:	2000      	movs	r0, #0
 800443e:	f7fe f981 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8004442:	2001      	movs	r0, #1
 8004444:	f7fe f97e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004448:	2000      	movs	r0, #0
 800444a:	f7fe f97b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800444e:	2002      	movs	r0, #2
 8004450:	f7fe f978 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004454:	2000      	movs	r0, #0
 8004456:	f7fe f975 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 800445a:	202a      	movs	r0, #42	; 0x2a
 800445c:	f7fe f972 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004460:	2000      	movs	r0, #0
 8004462:	f7fe f96f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8004466:	203c      	movs	r0, #60	; 0x3c
 8004468:	f7fe f96c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800446c:	2000      	movs	r0, #0
 800446e:	f7fe f969 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8004472:	204b      	movs	r0, #75	; 0x4b
 8004474:	f7fe f966 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004478:	2000      	movs	r0, #0
 800447a:	f7fe f963 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 800447e:	205d      	movs	r0, #93	; 0x5d
 8004480:	f7fe f960 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004484:	2000      	movs	r0, #0
 8004486:	f7fe f95d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 800448a:	2074      	movs	r0, #116	; 0x74
 800448c:	f7fe f95a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004490:	2000      	movs	r0, #0
 8004492:	f7fe f957 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8004496:	2084      	movs	r0, #132	; 0x84
 8004498:	f7fe f954 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800449c:	2000      	movs	r0, #0
 800449e:	f7fe f951 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 80044a2:	2093      	movs	r0, #147	; 0x93
 80044a4:	f7fe f94e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044a8:	2000      	movs	r0, #0
 80044aa:	f7fe f94b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80044ae:	20a2      	movs	r0, #162	; 0xa2
 80044b0:	f7fe f948 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044b4:	2000      	movs	r0, #0
 80044b6:	f7fe f945 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 80044ba:	20b3      	movs	r0, #179	; 0xb3
 80044bc:	f7fe f942 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044c0:	2000      	movs	r0, #0
 80044c2:	f7fe f93f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80044c6:	20be      	movs	r0, #190	; 0xbe
 80044c8:	f7fe f93c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044cc:	2000      	movs	r0, #0
 80044ce:	f7fe f939 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80044d2:	20c4      	movs	r0, #196	; 0xc4
 80044d4:	f7fe f936 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044d8:	2000      	movs	r0, #0
 80044da:	f7fe f933 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80044de:	20cd      	movs	r0, #205	; 0xcd
 80044e0:	f7fe f930 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044e4:	2000      	movs	r0, #0
 80044e6:	f7fe f92d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80044ea:	20d3      	movs	r0, #211	; 0xd3
 80044ec:	f7fe f92a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044f0:	2000      	movs	r0, #0
 80044f2:	f7fe f927 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 80044f6:	20dd      	movs	r0, #221	; 0xdd
 80044f8:	f7fe f924 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044fc:	2000      	movs	r0, #0
 80044fe:	f7fe f921 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8004502:	20f3      	movs	r0, #243	; 0xf3
 8004504:	f7fe f91e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004508:	2000      	movs	r0, #0
 800450a:	f7fe f91b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 800450e:	20e5      	movs	r0, #229	; 0xe5
 8004510:	f7fe f908 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004514:	2000      	movs	r0, #0
 8004516:	f7fe f915 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800451a:	2000      	movs	r0, #0
 800451c:	f7fe f912 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004520:	2000      	movs	r0, #0
 8004522:	f7fe f90f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004526:	2000      	movs	r0, #0
 8004528:	f7fe f90c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800452c:	2002      	movs	r0, #2
 800452e:	f7fe f909 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004532:	2000      	movs	r0, #0
 8004534:	f7fe f906 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8004538:	2029      	movs	r0, #41	; 0x29
 800453a:	f7fe f903 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800453e:	2000      	movs	r0, #0
 8004540:	f7fe f900 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8004544:	203c      	movs	r0, #60	; 0x3c
 8004546:	f7fe f8fd 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800454a:	2000      	movs	r0, #0
 800454c:	f7fe f8fa 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8004550:	204b      	movs	r0, #75	; 0x4b
 8004552:	f7fe f8f7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004556:	2000      	movs	r0, #0
 8004558:	f7fe f8f4 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 800455c:	205d      	movs	r0, #93	; 0x5d
 800455e:	f7fe f8f1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004562:	2000      	movs	r0, #0
 8004564:	f7fe f8ee 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8004568:	2074      	movs	r0, #116	; 0x74
 800456a:	f7fe f8eb 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800456e:	2000      	movs	r0, #0
 8004570:	f7fe f8e8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8004574:	2084      	movs	r0, #132	; 0x84
 8004576:	f7fe f8e5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800457a:	2000      	movs	r0, #0
 800457c:	f7fe f8e2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8004580:	2093      	movs	r0, #147	; 0x93
 8004582:	f7fe f8df 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004586:	2000      	movs	r0, #0
 8004588:	f7fe f8dc 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 800458c:	20a2      	movs	r0, #162	; 0xa2
 800458e:	f7fe f8d9 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004592:	2000      	movs	r0, #0
 8004594:	f7fe f8d6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8004598:	20b3      	movs	r0, #179	; 0xb3
 800459a:	f7fe f8d3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800459e:	2000      	movs	r0, #0
 80045a0:	f7fe f8d0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80045a4:	20be      	movs	r0, #190	; 0xbe
 80045a6:	f7fe f8cd 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045aa:	2000      	movs	r0, #0
 80045ac:	f7fe f8ca 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80045b0:	20c4      	movs	r0, #196	; 0xc4
 80045b2:	f7fe f8c7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045b6:	2000      	movs	r0, #0
 80045b8:	f7fe f8c4 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80045bc:	20cd      	movs	r0, #205	; 0xcd
 80045be:	f7fe f8c1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045c2:	2000      	movs	r0, #0
 80045c4:	f7fe f8be 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80045c8:	20d3      	movs	r0, #211	; 0xd3
 80045ca:	f7fe f8bb 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045ce:	2000      	movs	r0, #0
 80045d0:	f7fe f8b8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 80045d4:	20dc      	movs	r0, #220	; 0xdc
 80045d6:	f7fe f8b5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045da:	2000      	movs	r0, #0
 80045dc:	f7fe f8b2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80045e0:	20f3      	movs	r0, #243	; 0xf3
 80045e2:	f7fe f8af 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045e6:	2000      	movs	r0, #0
 80045e8:	f7fe f8ac 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 80045ec:	20e6      	movs	r0, #230	; 0xe6
 80045ee:	f7fe f899 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 80045f2:	2011      	movs	r0, #17
 80045f4:	f7fe f8a6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80045f8:	2000      	movs	r0, #0
 80045fa:	f7fe f8a3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80045fe:	2034      	movs	r0, #52	; 0x34
 8004600:	f7fe f8a0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004604:	2000      	movs	r0, #0
 8004606:	f7fe f89d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 800460a:	2056      	movs	r0, #86	; 0x56
 800460c:	f7fe f89a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004610:	2000      	movs	r0, #0
 8004612:	f7fe f897 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8004616:	2076      	movs	r0, #118	; 0x76
 8004618:	f7fe f894 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800461c:	2000      	movs	r0, #0
 800461e:	f7fe f891 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8004622:	2077      	movs	r0, #119	; 0x77
 8004624:	f7fe f88e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004628:	2000      	movs	r0, #0
 800462a:	f7fe f88b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800462e:	2066      	movs	r0, #102	; 0x66
 8004630:	f7fe f888 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004634:	2000      	movs	r0, #0
 8004636:	f7fe f885 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800463a:	2088      	movs	r0, #136	; 0x88
 800463c:	f7fe f882 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004640:	2000      	movs	r0, #0
 8004642:	f7fe f87f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8004646:	2099      	movs	r0, #153	; 0x99
 8004648:	f7fe f87c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800464c:	2000      	movs	r0, #0
 800464e:	f7fe f879 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8004652:	20bb      	movs	r0, #187	; 0xbb
 8004654:	f7fe f876 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004658:	2000      	movs	r0, #0
 800465a:	f7fe f873 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800465e:	2099      	movs	r0, #153	; 0x99
 8004660:	f7fe f870 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004664:	2000      	movs	r0, #0
 8004666:	f7fe f86d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800466a:	2066      	movs	r0, #102	; 0x66
 800466c:	f7fe f86a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004670:	2000      	movs	r0, #0
 8004672:	f7fe f867 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8004676:	2055      	movs	r0, #85	; 0x55
 8004678:	f7fe f864 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800467c:	2000      	movs	r0, #0
 800467e:	f7fe f861 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8004682:	2055      	movs	r0, #85	; 0x55
 8004684:	f7fe f85e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004688:	2000      	movs	r0, #0
 800468a:	f7fe f85b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 800468e:	2045      	movs	r0, #69	; 0x45
 8004690:	f7fe f858 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004694:	2000      	movs	r0, #0
 8004696:	f7fe f855 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 800469a:	2043      	movs	r0, #67	; 0x43
 800469c:	f7fe f852 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046a0:	2000      	movs	r0, #0
 80046a2:	f7fe f84f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80046a6:	2044      	movs	r0, #68	; 0x44
 80046a8:	f7fe f84c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046ac:	2000      	movs	r0, #0
 80046ae:	f7fe f849 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 80046b2:	20e7      	movs	r0, #231	; 0xe7
 80046b4:	f7fe f836 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 80046b8:	2032      	movs	r0, #50	; 0x32
 80046ba:	f7fe f843 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046be:	2000      	movs	r0, #0
 80046c0:	f7fe f840 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80046c4:	2055      	movs	r0, #85	; 0x55
 80046c6:	f7fe f83d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046ca:	2000      	movs	r0, #0
 80046cc:	f7fe f83a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80046d0:	2076      	movs	r0, #118	; 0x76
 80046d2:	f7fe f837 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046d6:	2000      	movs	r0, #0
 80046d8:	f7fe f834 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80046dc:	2066      	movs	r0, #102	; 0x66
 80046de:	f7fe f831 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046e2:	2000      	movs	r0, #0
 80046e4:	f7fe f82e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80046e8:	2067      	movs	r0, #103	; 0x67
 80046ea:	f7fe f82b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046ee:	2000      	movs	r0, #0
 80046f0:	f7fe f828 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80046f4:	2067      	movs	r0, #103	; 0x67
 80046f6:	f7fe f825 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80046fa:	2000      	movs	r0, #0
 80046fc:	f7fe f822 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8004700:	2087      	movs	r0, #135	; 0x87
 8004702:	f7fe f81f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004706:	2000      	movs	r0, #0
 8004708:	f7fe f81c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800470c:	2099      	movs	r0, #153	; 0x99
 800470e:	f7fe f819 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004712:	2000      	movs	r0, #0
 8004714:	f7fe f816 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8004718:	20bb      	movs	r0, #187	; 0xbb
 800471a:	f7fe f813 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800471e:	2000      	movs	r0, #0
 8004720:	f7fe f810 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8004724:	2099      	movs	r0, #153	; 0x99
 8004726:	f7fe f80d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800472a:	2000      	movs	r0, #0
 800472c:	f7fe f80a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8004730:	2077      	movs	r0, #119	; 0x77
 8004732:	f7fe f807 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004736:	2000      	movs	r0, #0
 8004738:	f7fe f804 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800473c:	2044      	movs	r0, #68	; 0x44
 800473e:	f7fe f801 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004742:	2000      	movs	r0, #0
 8004744:	f7fd fffe 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8004748:	2056      	movs	r0, #86	; 0x56
 800474a:	f7fd fffb 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800474e:	2000      	movs	r0, #0
 8004750:	f7fd fff8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8004754:	2023      	movs	r0, #35	; 0x23
 8004756:	f7fd fff5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800475a:	2000      	movs	r0, #0
 800475c:	f7fd fff2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8004760:	2033      	movs	r0, #51	; 0x33
 8004762:	f7fd ffef 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004766:	2000      	movs	r0, #0
 8004768:	f7fd ffec 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 800476c:	2045      	movs	r0, #69	; 0x45
 800476e:	f7fd ffe9 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004772:	2000      	movs	r0, #0
 8004774:	f7fd ffe6 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8004778:	20e8      	movs	r0, #232	; 0xe8
 800477a:	f7fd ffd3 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800477e:	2000      	movs	r0, #0
 8004780:	f7fd ffe0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004784:	2000      	movs	r0, #0
 8004786:	f7fd ffdd 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800478a:	2099      	movs	r0, #153	; 0x99
 800478c:	f7fd ffda 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004790:	2000      	movs	r0, #0
 8004792:	f7fd ffd7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8004796:	2087      	movs	r0, #135	; 0x87
 8004798:	f7fd ffd4 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800479c:	2000      	movs	r0, #0
 800479e:	f7fd ffd1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80047a2:	2088      	movs	r0, #136	; 0x88
 80047a4:	f7fd ffce 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047a8:	2000      	movs	r0, #0
 80047aa:	f7fd ffcb 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 80047ae:	2077      	movs	r0, #119	; 0x77
 80047b0:	f7fd ffc8 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047b4:	2000      	movs	r0, #0
 80047b6:	f7fd ffc5 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80047ba:	2066      	movs	r0, #102	; 0x66
 80047bc:	f7fd ffc2 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047c0:	2000      	movs	r0, #0
 80047c2:	f7fd ffbf 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80047c6:	2088      	movs	r0, #136	; 0x88
 80047c8:	f7fd ffbc 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047cc:	2000      	movs	r0, #0
 80047ce:	f7fd ffb9 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 80047d2:	20aa      	movs	r0, #170	; 0xaa
 80047d4:	f7fd ffb6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047d8:	2000      	movs	r0, #0
 80047da:	f7fd ffb3 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80047de:	20bb      	movs	r0, #187	; 0xbb
 80047e0:	f7fd ffb0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047e4:	2000      	movs	r0, #0
 80047e6:	f7fd ffad 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80047ea:	2099      	movs	r0, #153	; 0x99
 80047ec:	f7fd ffaa 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047f0:	2000      	movs	r0, #0
 80047f2:	f7fd ffa7 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80047f6:	2066      	movs	r0, #102	; 0x66
 80047f8:	f7fd ffa4 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80047fc:	2000      	movs	r0, #0
 80047fe:	f7fd ffa1 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8004802:	2055      	movs	r0, #85	; 0x55
 8004804:	f7fd ff9e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004808:	2000      	movs	r0, #0
 800480a:	f7fd ff9b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800480e:	2055      	movs	r0, #85	; 0x55
 8004810:	f7fd ff98 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004814:	2000      	movs	r0, #0
 8004816:	f7fd ff95 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800481a:	2044      	movs	r0, #68	; 0x44
 800481c:	f7fd ff92 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004820:	2000      	movs	r0, #0
 8004822:	f7fd ff8f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8004826:	2044      	movs	r0, #68	; 0x44
 8004828:	f7fd ff8c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800482c:	2000      	movs	r0, #0
 800482e:	f7fd ff89 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8004832:	2055      	movs	r0, #85	; 0x55
 8004834:	f7fd ff86 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004838:	2000      	movs	r0, #0
 800483a:	f7fd ff83 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 800483e:	20e9      	movs	r0, #233	; 0xe9
 8004840:	f7fd ff70 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8004844:	20aa      	movs	r0, #170	; 0xaa
 8004846:	f7fd ff7d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800484a:	2000      	movs	r0, #0
 800484c:	f7fd ff7a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004850:	2000      	movs	r0, #0
 8004852:	f7fd ff77 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004856:	2000      	movs	r0, #0
 8004858:	f7fd ff74 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 800485c:	2000      	movs	r0, #0
 800485e:	f7fd ff61 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8004862:	20aa      	movs	r0, #170	; 0xaa
 8004864:	f7fd ff6e 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8004868:	20cf      	movs	r0, #207	; 0xcf
 800486a:	f7fd ff5b 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800486e:	2000      	movs	r0, #0
 8004870:	f7fd ff68 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004874:	2000      	movs	r0, #0
 8004876:	f7fd ff65 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800487a:	2000      	movs	r0, #0
 800487c:	f7fd ff62 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004880:	2000      	movs	r0, #0
 8004882:	f7fd ff5f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004886:	2000      	movs	r0, #0
 8004888:	f7fd ff5c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800488c:	2000      	movs	r0, #0
 800488e:	f7fd ff59 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004892:	2000      	movs	r0, #0
 8004894:	f7fd ff56 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004898:	2000      	movs	r0, #0
 800489a:	f7fd ff53 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800489e:	2000      	movs	r0, #0
 80048a0:	f7fd ff50 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048a4:	2000      	movs	r0, #0
 80048a6:	f7fd ff4d 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048aa:	2000      	movs	r0, #0
 80048ac:	f7fd ff4a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048b0:	2000      	movs	r0, #0
 80048b2:	f7fd ff47 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048b6:	2000      	movs	r0, #0
 80048b8:	f7fd ff44 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048bc:	2000      	movs	r0, #0
 80048be:	f7fd ff41 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048c2:	2000      	movs	r0, #0
 80048c4:	f7fd ff3e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048c8:	2000      	movs	r0, #0
 80048ca:	f7fd ff3b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048ce:	2000      	movs	r0, #0
 80048d0:	f7fd ff38 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 80048d4:	20f0      	movs	r0, #240	; 0xf0
 80048d6:	f7fd ff25 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80048da:	2000      	movs	r0, #0
 80048dc:	f7fd ff32 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 80048e0:	2050      	movs	r0, #80	; 0x50
 80048e2:	f7fd ff2f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048e6:	2000      	movs	r0, #0
 80048e8:	f7fd ff2c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048ec:	2000      	movs	r0, #0
 80048ee:	f7fd ff29 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048f2:	2000      	movs	r0, #0
 80048f4:	f7fd ff26 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 80048f8:	20f3      	movs	r0, #243	; 0xf3
 80048fa:	f7fd ff13 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80048fe:	2000      	movs	r0, #0
 8004900:	f7fd ff20 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 8004904:	20f9      	movs	r0, #249	; 0xf9
 8004906:	f7fd ff0d 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 800490a:	2006      	movs	r0, #6
 800490c:	f7fd ff1a 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8004910:	2010      	movs	r0, #16
 8004912:	f7fd ff17 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8004916:	2029      	movs	r0, #41	; 0x29
 8004918:	f7fd ff14 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800491c:	2000      	movs	r0, #0
 800491e:	f7fd ff11 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 8004922:	203a      	movs	r0, #58	; 0x3a
 8004924:	f7fd fefe 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8004928:	2055      	movs	r0, #85	; 0x55
 800492a:	f7fd ff0b 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 800492e:	2011      	movs	r0, #17
 8004930:	f7fd fef8 	bl	8002724 <LCD_WR_REG>
		HAL_Delay(100);
 8004934:	2064      	movs	r0, #100	; 0x64
 8004936:	f002 fb6d 	bl	8007014 <HAL_Delay>
		LCD_WR_REG(0x29);
 800493a:	2029      	movs	r0, #41	; 0x29
 800493c:	f7fd fef2 	bl	8002724 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8004940:	2035      	movs	r0, #53	; 0x35
 8004942:	f7fd feef 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004946:	2000      	movs	r0, #0
 8004948:	f7fd fefc 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 800494c:	2051      	movs	r0, #81	; 0x51
 800494e:	f7fd fee9 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 8004952:	20ff      	movs	r0, #255	; 0xff
 8004954:	f7fd fef6 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8004958:	2053      	movs	r0, #83	; 0x53
 800495a:	f7fd fee3 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 800495e:	202c      	movs	r0, #44	; 0x2c
 8004960:	f7fd fef0 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8004964:	2055      	movs	r0, #85	; 0x55
 8004966:	f7fd fedd 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 800496a:	2082      	movs	r0, #130	; 0x82
 800496c:	f7fd feea 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8004970:	202c      	movs	r0, #44	; 0x2c
 8004972:	f7fd fed7 	bl	8002724 <LCD_WR_REG>
 8004976:	f002 b8e8 	b.w	8006b4a <LCD_Init+0x3852>
	}else if(lcddev.id==0x5510)
 800497a:	4b04      	ldr	r3, [pc, #16]	; (800498c <LCD_Init+0x1694>)
 800497c:	889b      	ldrh	r3, [r3, #4]
 800497e:	f245 5210 	movw	r2, #21776	; 0x5510
 8004982:	4293      	cmp	r3, r2
 8004984:	f040 8782 	bne.w	800588c <LCD_Init+0x2594>
 8004988:	e002      	b.n	8004990 <LCD_Init+0x1698>
 800498a:	bf00      	nop
 800498c:	20000420 	.word	0x20000420
	{
		LCD_WriteReg(0xF000,0x55);
 8004990:	2155      	movs	r1, #85	; 0x55
 8004992:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004996:	f7fd fef3 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 800499a:	21aa      	movs	r1, #170	; 0xaa
 800499c:	f24f 0001 	movw	r0, #61441	; 0xf001
 80049a0:	f7fd feee 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 80049a4:	2152      	movs	r1, #82	; 0x52
 80049a6:	f24f 0002 	movw	r0, #61442	; 0xf002
 80049aa:	f7fd fee9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 80049ae:	2108      	movs	r1, #8
 80049b0:	f24f 0003 	movw	r0, #61443	; 0xf003
 80049b4:	f7fd fee4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 80049b8:	2101      	movs	r1, #1
 80049ba:	f24f 0004 	movw	r0, #61444	; 0xf004
 80049be:	f7fd fedf 	bl	8002780 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 80049c2:	210d      	movs	r1, #13
 80049c4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80049c8:	f7fd feda 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 80049cc:	210d      	movs	r1, #13
 80049ce:	f24b 0001 	movw	r0, #45057	; 0xb001
 80049d2:	f7fd fed5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 80049d6:	210d      	movs	r1, #13
 80049d8:	f24b 0002 	movw	r0, #45058	; 0xb002
 80049dc:	f7fd fed0 	bl	8002780 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 80049e0:	2134      	movs	r1, #52	; 0x34
 80049e2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80049e6:	f7fd fecb 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 80049ea:	2134      	movs	r1, #52	; 0x34
 80049ec:	f24b 6001 	movw	r0, #46593	; 0xb601
 80049f0:	f7fd fec6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 80049f4:	2134      	movs	r1, #52	; 0x34
 80049f6:	f24b 6002 	movw	r0, #46594	; 0xb602
 80049fa:	f7fd fec1 	bl	8002780 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 80049fe:	210d      	movs	r1, #13
 8004a00:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004a04:	f7fd febc 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8004a08:	210d      	movs	r1, #13
 8004a0a:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004a0e:	f7fd feb7 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 8004a12:	210d      	movs	r1, #13
 8004a14:	f24b 1002 	movw	r0, #45314	; 0xb102
 8004a18:	f7fd feb2 	bl	8002780 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 8004a1c:	2134      	movs	r1, #52	; 0x34
 8004a1e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004a22:	f7fd fead 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8004a26:	2134      	movs	r1, #52	; 0x34
 8004a28:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004a2c:	f7fd fea8 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8004a30:	2134      	movs	r1, #52	; 0x34
 8004a32:	f24b 7002 	movw	r0, #46850	; 0xb702
 8004a36:	f7fd fea3 	bl	8002780 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8004a40:	f7fd fe9e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8004a44:	2100      	movs	r1, #0
 8004a46:	f24b 2001 	movw	r0, #45569	; 0xb201
 8004a4a:	f7fd fe99 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 8004a4e:	2100      	movs	r1, #0
 8004a50:	f24b 2002 	movw	r0, #45570	; 0xb202
 8004a54:	f7fd fe94 	bl	8002780 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8004a58:	2124      	movs	r1, #36	; 0x24
 8004a5a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004a5e:	f7fd fe8f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 8004a62:	2124      	movs	r1, #36	; 0x24
 8004a64:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004a68:	f7fd fe8a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8004a6c:	2124      	movs	r1, #36	; 0x24
 8004a6e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004a72:	f7fd fe85 	bl	8002780 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8004a76:	2101      	movs	r1, #1
 8004a78:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8004a7c:	f7fd fe80 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 8004a80:	210f      	movs	r1, #15
 8004a82:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8004a86:	f7fd fe7b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 8004a8a:	210f      	movs	r1, #15
 8004a8c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8004a90:	f7fd fe76 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 8004a94:	210f      	movs	r1, #15
 8004a96:	f24b 3002 	movw	r0, #45826	; 0xb302
 8004a9a:	f7fd fe71 	bl	8002780 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 8004a9e:	2134      	movs	r1, #52	; 0x34
 8004aa0:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8004aa4:	f7fd fe6c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 8004aa8:	2134      	movs	r1, #52	; 0x34
 8004aaa:	f64b 1001 	movw	r0, #47361	; 0xb901
 8004aae:	f7fd fe67 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 8004ab2:	2134      	movs	r1, #52	; 0x34
 8004ab4:	f64b 1002 	movw	r0, #47362	; 0xb902
 8004ab8:	f7fd fe62 	bl	8002780 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 8004abc:	2108      	movs	r1, #8
 8004abe:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8004ac2:	f7fd fe5d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 8004ac6:	2108      	movs	r1, #8
 8004ac8:	f24b 5001 	movw	r0, #46337	; 0xb501
 8004acc:	f7fd fe58 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 8004ad0:	2108      	movs	r1, #8
 8004ad2:	f24b 5002 	movw	r0, #46338	; 0xb502
 8004ad6:	f7fd fe53 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 8004ada:	2103      	movs	r1, #3
 8004adc:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8004ae0:	f7fd fe4e 	bl	8002780 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8004ae4:	2124      	movs	r1, #36	; 0x24
 8004ae6:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8004aea:	f7fd fe49 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 8004aee:	2124      	movs	r1, #36	; 0x24
 8004af0:	f64b 2001 	movw	r0, #47617	; 0xba01
 8004af4:	f7fd fe44 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8004af8:	2124      	movs	r1, #36	; 0x24
 8004afa:	f64b 2002 	movw	r0, #47618	; 0xba02
 8004afe:	f7fd fe3f 	bl	8002780 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 8004b02:	2100      	movs	r1, #0
 8004b04:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004b08:	f7fd fe3a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8004b0c:	2178      	movs	r1, #120	; 0x78
 8004b0e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004b12:	f7fd fe35 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8004b16:	2100      	movs	r1, #0
 8004b18:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004b1c:	f7fd fe30 	bl	8002780 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8004b20:	2100      	movs	r1, #0
 8004b22:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8004b26:	f7fd fe2b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8004b2a:	2178      	movs	r1, #120	; 0x78
 8004b2c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8004b30:	f7fd fe26 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8004b34:	2100      	movs	r1, #0
 8004b36:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8004b3a:	f7fd fe21 	bl	8002780 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 8004b3e:	2100      	movs	r1, #0
 8004b40:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8004b44:	f7fd fe1c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8004b48:	2164      	movs	r1, #100	; 0x64
 8004b4a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8004b4e:	f7fd fe17 	bl	8002780 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 8004b52:	2100      	movs	r1, #0
 8004b54:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8004b58:	f7fd fe12 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8004b5c:	2133      	movs	r1, #51	; 0x33
 8004b5e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8004b62:	f7fd fe0d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8004b66:	2100      	movs	r1, #0
 8004b68:	f24d 1002 	movw	r0, #53506	; 0xd102
 8004b6c:	f7fd fe08 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 8004b70:	2134      	movs	r1, #52	; 0x34
 8004b72:	f24d 1003 	movw	r0, #53507	; 0xd103
 8004b76:	f7fd fe03 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	f24d 1004 	movw	r0, #53508	; 0xd104
 8004b80:	f7fd fdfe 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 8004b84:	213a      	movs	r1, #58	; 0x3a
 8004b86:	f24d 1005 	movw	r0, #53509	; 0xd105
 8004b8a:	f7fd fdf9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 8004b8e:	2100      	movs	r1, #0
 8004b90:	f24d 1006 	movw	r0, #53510	; 0xd106
 8004b94:	f7fd fdf4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 8004b98:	214a      	movs	r1, #74	; 0x4a
 8004b9a:	f24d 1007 	movw	r0, #53511	; 0xd107
 8004b9e:	f7fd fdef 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 8004ba2:	2100      	movs	r1, #0
 8004ba4:	f24d 1008 	movw	r0, #53512	; 0xd108
 8004ba8:	f7fd fdea 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 8004bac:	215c      	movs	r1, #92	; 0x5c
 8004bae:	f24d 1009 	movw	r0, #53513	; 0xd109
 8004bb2:	f7fd fde5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8004bbc:	f7fd fde0 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 8004bc0:	2181      	movs	r1, #129	; 0x81
 8004bc2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8004bc6:	f7fd fddb 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 8004bca:	2100      	movs	r1, #0
 8004bcc:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8004bd0:	f7fd fdd6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 8004bd4:	21a6      	movs	r1, #166	; 0xa6
 8004bd6:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8004bda:	f7fd fdd1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 8004bde:	2100      	movs	r1, #0
 8004be0:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8004be4:	f7fd fdcc 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8004be8:	21e5      	movs	r1, #229	; 0xe5
 8004bea:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8004bee:	f7fd fdc7 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	f24d 1010 	movw	r0, #53520	; 0xd110
 8004bf8:	f7fd fdc2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8004bfc:	2113      	movs	r1, #19
 8004bfe:	f24d 1011 	movw	r0, #53521	; 0xd111
 8004c02:	f7fd fdbd 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8004c06:	2101      	movs	r1, #1
 8004c08:	f24d 1012 	movw	r0, #53522	; 0xd112
 8004c0c:	f7fd fdb8 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8004c10:	2154      	movs	r1, #84	; 0x54
 8004c12:	f24d 1013 	movw	r0, #53523	; 0xd113
 8004c16:	f7fd fdb3 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8004c20:	f7fd fdae 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8004c24:	2182      	movs	r1, #130	; 0x82
 8004c26:	f24d 1015 	movw	r0, #53525	; 0xd115
 8004c2a:	f7fd fda9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 8004c2e:	2101      	movs	r1, #1
 8004c30:	f24d 1016 	movw	r0, #53526	; 0xd116
 8004c34:	f7fd fda4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8004c38:	21ca      	movs	r1, #202	; 0xca
 8004c3a:	f24d 1017 	movw	r0, #53527	; 0xd117
 8004c3e:	f7fd fd9f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 8004c42:	2102      	movs	r1, #2
 8004c44:	f24d 1018 	movw	r0, #53528	; 0xd118
 8004c48:	f7fd fd9a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8004c52:	f7fd fd95 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8004c56:	2102      	movs	r1, #2
 8004c58:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8004c5c:	f7fd fd90 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 8004c60:	2101      	movs	r1, #1
 8004c62:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8004c66:	f7fd fd8b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8004c70:	f7fd fd86 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8004c74:	2134      	movs	r1, #52	; 0x34
 8004c76:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8004c7a:	f7fd fd81 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 8004c7e:	2102      	movs	r1, #2
 8004c80:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8004c84:	f7fd fd7c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 8004c88:	2167      	movs	r1, #103	; 0x67
 8004c8a:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8004c8e:	f7fd fd77 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 8004c92:	2102      	movs	r1, #2
 8004c94:	f24d 1020 	movw	r0, #53536	; 0xd120
 8004c98:	f7fd fd72 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 8004c9c:	2184      	movs	r1, #132	; 0x84
 8004c9e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8004ca2:	f7fd fd6d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	f24d 1022 	movw	r0, #53538	; 0xd122
 8004cac:	f7fd fd68 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 8004cb0:	21a4      	movs	r1, #164	; 0xa4
 8004cb2:	f24d 1023 	movw	r0, #53539	; 0xd123
 8004cb6:	f7fd fd63 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 8004cba:	2102      	movs	r1, #2
 8004cbc:	f24d 1024 	movw	r0, #53540	; 0xd124
 8004cc0:	f7fd fd5e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 8004cc4:	21b7      	movs	r1, #183	; 0xb7
 8004cc6:	f24d 1025 	movw	r0, #53541	; 0xd125
 8004cca:	f7fd fd59 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 8004cce:	2102      	movs	r1, #2
 8004cd0:	f24d 1026 	movw	r0, #53542	; 0xd126
 8004cd4:	f7fd fd54 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 8004cd8:	21cf      	movs	r1, #207	; 0xcf
 8004cda:	f24d 1027 	movw	r0, #53543	; 0xd127
 8004cde:	f7fd fd4f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 8004ce2:	2102      	movs	r1, #2
 8004ce4:	f24d 1028 	movw	r0, #53544	; 0xd128
 8004ce8:	f7fd fd4a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8004cec:	21de      	movs	r1, #222	; 0xde
 8004cee:	f24d 1029 	movw	r0, #53545	; 0xd129
 8004cf2:	f7fd fd45 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8004cf6:	2102      	movs	r1, #2
 8004cf8:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8004cfc:	f7fd fd40 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8004d00:	21f2      	movs	r1, #242	; 0xf2
 8004d02:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8004d06:	f7fd fd3b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8004d0a:	2102      	movs	r1, #2
 8004d0c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8004d10:	f7fd fd36 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8004d14:	21fe      	movs	r1, #254	; 0xfe
 8004d16:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8004d1a:	f7fd fd31 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 8004d1e:	2103      	movs	r1, #3
 8004d20:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8004d24:	f7fd fd2c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8004d28:	2110      	movs	r1, #16
 8004d2a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8004d2e:	f7fd fd27 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8004d32:	2103      	movs	r1, #3
 8004d34:	f24d 1030 	movw	r0, #53552	; 0xd130
 8004d38:	f7fd fd22 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8004d3c:	2133      	movs	r1, #51	; 0x33
 8004d3e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8004d42:	f7fd fd1d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8004d46:	2103      	movs	r1, #3
 8004d48:	f24d 1032 	movw	r0, #53554	; 0xd132
 8004d4c:	f7fd fd18 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 8004d50:	216d      	movs	r1, #109	; 0x6d
 8004d52:	f24d 1033 	movw	r0, #53555	; 0xd133
 8004d56:	f7fd fd13 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8004d60:	f7fd fd0e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8004d64:	2133      	movs	r1, #51	; 0x33
 8004d66:	f24d 2001 	movw	r0, #53761	; 0xd201
 8004d6a:	f7fd fd09 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 8004d6e:	2100      	movs	r1, #0
 8004d70:	f24d 2002 	movw	r0, #53762	; 0xd202
 8004d74:	f7fd fd04 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8004d78:	2134      	movs	r1, #52	; 0x34
 8004d7a:	f24d 2003 	movw	r0, #53763	; 0xd203
 8004d7e:	f7fd fcff 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 8004d82:	2100      	movs	r1, #0
 8004d84:	f24d 2004 	movw	r0, #53764	; 0xd204
 8004d88:	f7fd fcfa 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 8004d8c:	213a      	movs	r1, #58	; 0x3a
 8004d8e:	f24d 2005 	movw	r0, #53765	; 0xd205
 8004d92:	f7fd fcf5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 8004d96:	2100      	movs	r1, #0
 8004d98:	f24d 2006 	movw	r0, #53766	; 0xd206
 8004d9c:	f7fd fcf0 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 8004da0:	214a      	movs	r1, #74	; 0x4a
 8004da2:	f24d 2007 	movw	r0, #53767	; 0xd207
 8004da6:	f7fd fceb 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 8004daa:	2100      	movs	r1, #0
 8004dac:	f24d 2008 	movw	r0, #53768	; 0xd208
 8004db0:	f7fd fce6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 8004db4:	215c      	movs	r1, #92	; 0x5c
 8004db6:	f24d 2009 	movw	r0, #53769	; 0xd209
 8004dba:	f7fd fce1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8004dc4:	f7fd fcdc 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 8004dc8:	2181      	movs	r1, #129	; 0x81
 8004dca:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8004dce:	f7fd fcd7 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8004dd8:	f7fd fcd2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 8004ddc:	21a6      	movs	r1, #166	; 0xa6
 8004dde:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8004de2:	f7fd fccd 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8004de6:	2100      	movs	r1, #0
 8004de8:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8004dec:	f7fd fcc8 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 8004df0:	21e5      	movs	r1, #229	; 0xe5
 8004df2:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8004df6:	f7fd fcc3 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	f24d 2010 	movw	r0, #53776	; 0xd210
 8004e00:	f7fd fcbe 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8004e04:	2113      	movs	r1, #19
 8004e06:	f24d 2011 	movw	r0, #53777	; 0xd211
 8004e0a:	f7fd fcb9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 8004e0e:	2101      	movs	r1, #1
 8004e10:	f24d 2012 	movw	r0, #53778	; 0xd212
 8004e14:	f7fd fcb4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8004e18:	2154      	movs	r1, #84	; 0x54
 8004e1a:	f24d 2013 	movw	r0, #53779	; 0xd213
 8004e1e:	f7fd fcaf 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8004e22:	2101      	movs	r1, #1
 8004e24:	f24d 2014 	movw	r0, #53780	; 0xd214
 8004e28:	f7fd fcaa 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8004e2c:	2182      	movs	r1, #130	; 0x82
 8004e2e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8004e32:	f7fd fca5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8004e36:	2101      	movs	r1, #1
 8004e38:	f24d 2016 	movw	r0, #53782	; 0xd216
 8004e3c:	f7fd fca0 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 8004e40:	21ca      	movs	r1, #202	; 0xca
 8004e42:	f24d 2017 	movw	r0, #53783	; 0xd217
 8004e46:	f7fd fc9b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 8004e4a:	2102      	movs	r1, #2
 8004e4c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8004e50:	f7fd fc96 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8004e54:	2100      	movs	r1, #0
 8004e56:	f24d 2019 	movw	r0, #53785	; 0xd219
 8004e5a:	f7fd fc91 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 8004e5e:	2102      	movs	r1, #2
 8004e60:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8004e64:	f7fd fc8c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8004e68:	2101      	movs	r1, #1
 8004e6a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8004e6e:	f7fd fc87 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 8004e72:	2102      	movs	r1, #2
 8004e74:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8004e78:	f7fd fc82 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8004e7c:	2134      	movs	r1, #52	; 0x34
 8004e7e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8004e82:	f7fd fc7d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 8004e86:	2102      	movs	r1, #2
 8004e88:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8004e8c:	f7fd fc78 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 8004e90:	2167      	movs	r1, #103	; 0x67
 8004e92:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8004e96:	f7fd fc73 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 8004e9a:	2102      	movs	r1, #2
 8004e9c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8004ea0:	f7fd fc6e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 8004ea4:	2184      	movs	r1, #132	; 0x84
 8004ea6:	f24d 2021 	movw	r0, #53793	; 0xd221
 8004eaa:	f7fd fc69 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 8004eae:	2102      	movs	r1, #2
 8004eb0:	f24d 2022 	movw	r0, #53794	; 0xd222
 8004eb4:	f7fd fc64 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 8004eb8:	21a4      	movs	r1, #164	; 0xa4
 8004eba:	f24d 2023 	movw	r0, #53795	; 0xd223
 8004ebe:	f7fd fc5f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 8004ec2:	2102      	movs	r1, #2
 8004ec4:	f24d 2024 	movw	r0, #53796	; 0xd224
 8004ec8:	f7fd fc5a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 8004ecc:	21b7      	movs	r1, #183	; 0xb7
 8004ece:	f24d 2025 	movw	r0, #53797	; 0xd225
 8004ed2:	f7fd fc55 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 8004ed6:	2102      	movs	r1, #2
 8004ed8:	f24d 2026 	movw	r0, #53798	; 0xd226
 8004edc:	f7fd fc50 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 8004ee0:	21cf      	movs	r1, #207	; 0xcf
 8004ee2:	f24d 2027 	movw	r0, #53799	; 0xd227
 8004ee6:	f7fd fc4b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 8004eea:	2102      	movs	r1, #2
 8004eec:	f24d 2028 	movw	r0, #53800	; 0xd228
 8004ef0:	f7fd fc46 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8004ef4:	21de      	movs	r1, #222	; 0xde
 8004ef6:	f24d 2029 	movw	r0, #53801	; 0xd229
 8004efa:	f7fd fc41 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 8004efe:	2102      	movs	r1, #2
 8004f00:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8004f04:	f7fd fc3c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8004f08:	21f2      	movs	r1, #242	; 0xf2
 8004f0a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8004f0e:	f7fd fc37 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8004f12:	2102      	movs	r1, #2
 8004f14:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8004f18:	f7fd fc32 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8004f1c:	21fe      	movs	r1, #254	; 0xfe
 8004f1e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8004f22:	f7fd fc2d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8004f26:	2103      	movs	r1, #3
 8004f28:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8004f2c:	f7fd fc28 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8004f30:	2110      	movs	r1, #16
 8004f32:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8004f36:	f7fd fc23 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 8004f3a:	2103      	movs	r1, #3
 8004f3c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8004f40:	f7fd fc1e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8004f44:	2133      	movs	r1, #51	; 0x33
 8004f46:	f24d 2031 	movw	r0, #53809	; 0xd231
 8004f4a:	f7fd fc19 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 8004f4e:	2103      	movs	r1, #3
 8004f50:	f24d 2032 	movw	r0, #53810	; 0xd232
 8004f54:	f7fd fc14 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8004f58:	216d      	movs	r1, #109	; 0x6d
 8004f5a:	f24d 2033 	movw	r0, #53811	; 0xd233
 8004f5e:	f7fd fc0f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 8004f62:	2100      	movs	r1, #0
 8004f64:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8004f68:	f7fd fc0a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8004f6c:	2133      	movs	r1, #51	; 0x33
 8004f6e:	f24d 3001 	movw	r0, #54017	; 0xd301
 8004f72:	f7fd fc05 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 8004f76:	2100      	movs	r1, #0
 8004f78:	f24d 3002 	movw	r0, #54018	; 0xd302
 8004f7c:	f7fd fc00 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 8004f80:	2134      	movs	r1, #52	; 0x34
 8004f82:	f24d 3003 	movw	r0, #54019	; 0xd303
 8004f86:	f7fd fbfb 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	f24d 3004 	movw	r0, #54020	; 0xd304
 8004f90:	f7fd fbf6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 8004f94:	213a      	movs	r1, #58	; 0x3a
 8004f96:	f24d 3005 	movw	r0, #54021	; 0xd305
 8004f9a:	f7fd fbf1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	f24d 3006 	movw	r0, #54022	; 0xd306
 8004fa4:	f7fd fbec 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 8004fa8:	214a      	movs	r1, #74	; 0x4a
 8004faa:	f24d 3007 	movw	r0, #54023	; 0xd307
 8004fae:	f7fd fbe7 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	f24d 3008 	movw	r0, #54024	; 0xd308
 8004fb8:	f7fd fbe2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 8004fbc:	215c      	movs	r1, #92	; 0x5c
 8004fbe:	f24d 3009 	movw	r0, #54025	; 0xd309
 8004fc2:	f7fd fbdd 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8004fcc:	f7fd fbd8 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 8004fd0:	2181      	movs	r1, #129	; 0x81
 8004fd2:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8004fd6:	f7fd fbd3 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 8004fda:	2100      	movs	r1, #0
 8004fdc:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8004fe0:	f7fd fbce 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8004fe4:	21a6      	movs	r1, #166	; 0xa6
 8004fe6:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8004fea:	f7fd fbc9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 8004fee:	2100      	movs	r1, #0
 8004ff0:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8004ff4:	f7fd fbc4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8004ff8:	21e5      	movs	r1, #229	; 0xe5
 8004ffa:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8004ffe:	f7fd fbbf 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 8005002:	2101      	movs	r1, #1
 8005004:	f24d 3010 	movw	r0, #54032	; 0xd310
 8005008:	f7fd fbba 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 800500c:	2113      	movs	r1, #19
 800500e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8005012:	f7fd fbb5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8005016:	2101      	movs	r1, #1
 8005018:	f24d 3012 	movw	r0, #54034	; 0xd312
 800501c:	f7fd fbb0 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8005020:	2154      	movs	r1, #84	; 0x54
 8005022:	f24d 3013 	movw	r0, #54035	; 0xd313
 8005026:	f7fd fbab 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 800502a:	2101      	movs	r1, #1
 800502c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8005030:	f7fd fba6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8005034:	2182      	movs	r1, #130	; 0x82
 8005036:	f24d 3015 	movw	r0, #54037	; 0xd315
 800503a:	f7fd fba1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 800503e:	2101      	movs	r1, #1
 8005040:	f24d 3016 	movw	r0, #54038	; 0xd316
 8005044:	f7fd fb9c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8005048:	21ca      	movs	r1, #202	; 0xca
 800504a:	f24d 3017 	movw	r0, #54039	; 0xd317
 800504e:	f7fd fb97 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 8005052:	2102      	movs	r1, #2
 8005054:	f24d 3018 	movw	r0, #54040	; 0xd318
 8005058:	f7fd fb92 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 800505c:	2100      	movs	r1, #0
 800505e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8005062:	f7fd fb8d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8005066:	2102      	movs	r1, #2
 8005068:	f24d 301a 	movw	r0, #54042	; 0xd31a
 800506c:	f7fd fb88 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 8005070:	2101      	movs	r1, #1
 8005072:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8005076:	f7fd fb83 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 800507a:	2102      	movs	r1, #2
 800507c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8005080:	f7fd fb7e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 8005084:	2134      	movs	r1, #52	; 0x34
 8005086:	f24d 301d 	movw	r0, #54045	; 0xd31d
 800508a:	f7fd fb79 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 800508e:	2102      	movs	r1, #2
 8005090:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8005094:	f7fd fb74 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 8005098:	2167      	movs	r1, #103	; 0x67
 800509a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 800509e:	f7fd fb6f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 80050a2:	2102      	movs	r1, #2
 80050a4:	f24d 3020 	movw	r0, #54048	; 0xd320
 80050a8:	f7fd fb6a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 80050ac:	2184      	movs	r1, #132	; 0x84
 80050ae:	f24d 3021 	movw	r0, #54049	; 0xd321
 80050b2:	f7fd fb65 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 80050b6:	2102      	movs	r1, #2
 80050b8:	f24d 3022 	movw	r0, #54050	; 0xd322
 80050bc:	f7fd fb60 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 80050c0:	21a4      	movs	r1, #164	; 0xa4
 80050c2:	f24d 3023 	movw	r0, #54051	; 0xd323
 80050c6:	f7fd fb5b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 80050ca:	2102      	movs	r1, #2
 80050cc:	f24d 3024 	movw	r0, #54052	; 0xd324
 80050d0:	f7fd fb56 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 80050d4:	21b7      	movs	r1, #183	; 0xb7
 80050d6:	f24d 3025 	movw	r0, #54053	; 0xd325
 80050da:	f7fd fb51 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 80050de:	2102      	movs	r1, #2
 80050e0:	f24d 3026 	movw	r0, #54054	; 0xd326
 80050e4:	f7fd fb4c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 80050e8:	21cf      	movs	r1, #207	; 0xcf
 80050ea:	f24d 3027 	movw	r0, #54055	; 0xd327
 80050ee:	f7fd fb47 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 80050f2:	2102      	movs	r1, #2
 80050f4:	f24d 3028 	movw	r0, #54056	; 0xd328
 80050f8:	f7fd fb42 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 80050fc:	21de      	movs	r1, #222	; 0xde
 80050fe:	f24d 3029 	movw	r0, #54057	; 0xd329
 8005102:	f7fd fb3d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8005106:	2102      	movs	r1, #2
 8005108:	f24d 302a 	movw	r0, #54058	; 0xd32a
 800510c:	f7fd fb38 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 8005110:	21f2      	movs	r1, #242	; 0xf2
 8005112:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8005116:	f7fd fb33 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 800511a:	2102      	movs	r1, #2
 800511c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8005120:	f7fd fb2e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8005124:	21fe      	movs	r1, #254	; 0xfe
 8005126:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800512a:	f7fd fb29 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 800512e:	2103      	movs	r1, #3
 8005130:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8005134:	f7fd fb24 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8005138:	2110      	movs	r1, #16
 800513a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800513e:	f7fd fb1f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 8005142:	2103      	movs	r1, #3
 8005144:	f24d 3030 	movw	r0, #54064	; 0xd330
 8005148:	f7fd fb1a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 800514c:	2133      	movs	r1, #51	; 0x33
 800514e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8005152:	f7fd fb15 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 8005156:	2103      	movs	r1, #3
 8005158:	f24d 3032 	movw	r0, #54066	; 0xd332
 800515c:	f7fd fb10 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 8005160:	216d      	movs	r1, #109	; 0x6d
 8005162:	f24d 3033 	movw	r0, #54067	; 0xd333
 8005166:	f7fd fb0b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 800516a:	2100      	movs	r1, #0
 800516c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8005170:	f7fd fb06 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8005174:	2133      	movs	r1, #51	; 0x33
 8005176:	f24d 4001 	movw	r0, #54273	; 0xd401
 800517a:	f7fd fb01 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 800517e:	2100      	movs	r1, #0
 8005180:	f24d 4002 	movw	r0, #54274	; 0xd402
 8005184:	f7fd fafc 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 8005188:	2134      	movs	r1, #52	; 0x34
 800518a:	f24d 4003 	movw	r0, #54275	; 0xd403
 800518e:	f7fd faf7 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 8005192:	2100      	movs	r1, #0
 8005194:	f24d 4004 	movw	r0, #54276	; 0xd404
 8005198:	f7fd faf2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 800519c:	213a      	movs	r1, #58	; 0x3a
 800519e:	f24d 4005 	movw	r0, #54277	; 0xd405
 80051a2:	f7fd faed 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 80051a6:	2100      	movs	r1, #0
 80051a8:	f24d 4006 	movw	r0, #54278	; 0xd406
 80051ac:	f7fd fae8 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 80051b0:	214a      	movs	r1, #74	; 0x4a
 80051b2:	f24d 4007 	movw	r0, #54279	; 0xd407
 80051b6:	f7fd fae3 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 80051ba:	2100      	movs	r1, #0
 80051bc:	f24d 4008 	movw	r0, #54280	; 0xd408
 80051c0:	f7fd fade 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 80051c4:	215c      	movs	r1, #92	; 0x5c
 80051c6:	f24d 4009 	movw	r0, #54281	; 0xd409
 80051ca:	f7fd fad9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 80051ce:	2100      	movs	r1, #0
 80051d0:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80051d4:	f7fd fad4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 80051d8:	2181      	movs	r1, #129	; 0x81
 80051da:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80051de:	f7fd facf 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 80051e2:	2100      	movs	r1, #0
 80051e4:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80051e8:	f7fd faca 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 80051ec:	21a6      	movs	r1, #166	; 0xa6
 80051ee:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80051f2:	f7fd fac5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 80051f6:	2100      	movs	r1, #0
 80051f8:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80051fc:	f7fd fac0 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 8005200:	21e5      	movs	r1, #229	; 0xe5
 8005202:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8005206:	f7fd fabb 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 800520a:	2101      	movs	r1, #1
 800520c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8005210:	f7fd fab6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8005214:	2113      	movs	r1, #19
 8005216:	f24d 4011 	movw	r0, #54289	; 0xd411
 800521a:	f7fd fab1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 800521e:	2101      	movs	r1, #1
 8005220:	f24d 4012 	movw	r0, #54290	; 0xd412
 8005224:	f7fd faac 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8005228:	2154      	movs	r1, #84	; 0x54
 800522a:	f24d 4013 	movw	r0, #54291	; 0xd413
 800522e:	f7fd faa7 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 8005232:	2101      	movs	r1, #1
 8005234:	f24d 4014 	movw	r0, #54292	; 0xd414
 8005238:	f7fd faa2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 800523c:	2182      	movs	r1, #130	; 0x82
 800523e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8005242:	f7fd fa9d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8005246:	2101      	movs	r1, #1
 8005248:	f24d 4016 	movw	r0, #54294	; 0xd416
 800524c:	f7fd fa98 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 8005250:	21ca      	movs	r1, #202	; 0xca
 8005252:	f24d 4017 	movw	r0, #54295	; 0xd417
 8005256:	f7fd fa93 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 800525a:	2102      	movs	r1, #2
 800525c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8005260:	f7fd fa8e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8005264:	2100      	movs	r1, #0
 8005266:	f24d 4019 	movw	r0, #54297	; 0xd419
 800526a:	f7fd fa89 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 800526e:	2102      	movs	r1, #2
 8005270:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8005274:	f7fd fa84 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 8005278:	2101      	movs	r1, #1
 800527a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 800527e:	f7fd fa7f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 8005282:	2102      	movs	r1, #2
 8005284:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8005288:	f7fd fa7a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 800528c:	2134      	movs	r1, #52	; 0x34
 800528e:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8005292:	f7fd fa75 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 8005296:	2102      	movs	r1, #2
 8005298:	f24d 401e 	movw	r0, #54302	; 0xd41e
 800529c:	f7fd fa70 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 80052a0:	2167      	movs	r1, #103	; 0x67
 80052a2:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80052a6:	f7fd fa6b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 80052aa:	2102      	movs	r1, #2
 80052ac:	f24d 4020 	movw	r0, #54304	; 0xd420
 80052b0:	f7fd fa66 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 80052b4:	2184      	movs	r1, #132	; 0x84
 80052b6:	f24d 4021 	movw	r0, #54305	; 0xd421
 80052ba:	f7fd fa61 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 80052be:	2102      	movs	r1, #2
 80052c0:	f24d 4022 	movw	r0, #54306	; 0xd422
 80052c4:	f7fd fa5c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 80052c8:	21a4      	movs	r1, #164	; 0xa4
 80052ca:	f24d 4023 	movw	r0, #54307	; 0xd423
 80052ce:	f7fd fa57 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 80052d2:	2102      	movs	r1, #2
 80052d4:	f24d 4024 	movw	r0, #54308	; 0xd424
 80052d8:	f7fd fa52 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 80052dc:	21b7      	movs	r1, #183	; 0xb7
 80052de:	f24d 4025 	movw	r0, #54309	; 0xd425
 80052e2:	f7fd fa4d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 80052e6:	2102      	movs	r1, #2
 80052e8:	f24d 4026 	movw	r0, #54310	; 0xd426
 80052ec:	f7fd fa48 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 80052f0:	21cf      	movs	r1, #207	; 0xcf
 80052f2:	f24d 4027 	movw	r0, #54311	; 0xd427
 80052f6:	f7fd fa43 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 80052fa:	2102      	movs	r1, #2
 80052fc:	f24d 4028 	movw	r0, #54312	; 0xd428
 8005300:	f7fd fa3e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 8005304:	21de      	movs	r1, #222	; 0xde
 8005306:	f24d 4029 	movw	r0, #54313	; 0xd429
 800530a:	f7fd fa39 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 800530e:	2102      	movs	r1, #2
 8005310:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8005314:	f7fd fa34 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 8005318:	21f2      	movs	r1, #242	; 0xf2
 800531a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 800531e:	f7fd fa2f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8005322:	2102      	movs	r1, #2
 8005324:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8005328:	f7fd fa2a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 800532c:	21fe      	movs	r1, #254	; 0xfe
 800532e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8005332:	f7fd fa25 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8005336:	2103      	movs	r1, #3
 8005338:	f24d 402e 	movw	r0, #54318	; 0xd42e
 800533c:	f7fd fa20 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8005340:	2110      	movs	r1, #16
 8005342:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8005346:	f7fd fa1b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 800534a:	2103      	movs	r1, #3
 800534c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8005350:	f7fd fa16 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8005354:	2133      	movs	r1, #51	; 0x33
 8005356:	f24d 4031 	movw	r0, #54321	; 0xd431
 800535a:	f7fd fa11 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 800535e:	2103      	movs	r1, #3
 8005360:	f24d 4032 	movw	r0, #54322	; 0xd432
 8005364:	f7fd fa0c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8005368:	216d      	movs	r1, #109	; 0x6d
 800536a:	f24d 4033 	movw	r0, #54323	; 0xd433
 800536e:	f7fd fa07 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 8005372:	2100      	movs	r1, #0
 8005374:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8005378:	f7fd fa02 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 800537c:	2133      	movs	r1, #51	; 0x33
 800537e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8005382:	f7fd f9fd 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 8005386:	2100      	movs	r1, #0
 8005388:	f24d 5002 	movw	r0, #54530	; 0xd502
 800538c:	f7fd f9f8 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 8005390:	2134      	movs	r1, #52	; 0x34
 8005392:	f24d 5003 	movw	r0, #54531	; 0xd503
 8005396:	f7fd f9f3 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 800539a:	2100      	movs	r1, #0
 800539c:	f24d 5004 	movw	r0, #54532	; 0xd504
 80053a0:	f7fd f9ee 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 80053a4:	213a      	movs	r1, #58	; 0x3a
 80053a6:	f24d 5005 	movw	r0, #54533	; 0xd505
 80053aa:	f7fd f9e9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 80053ae:	2100      	movs	r1, #0
 80053b0:	f24d 5006 	movw	r0, #54534	; 0xd506
 80053b4:	f7fd f9e4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 80053b8:	214a      	movs	r1, #74	; 0x4a
 80053ba:	f24d 5007 	movw	r0, #54535	; 0xd507
 80053be:	f7fd f9df 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 80053c2:	2100      	movs	r1, #0
 80053c4:	f24d 5008 	movw	r0, #54536	; 0xd508
 80053c8:	f7fd f9da 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 80053cc:	215c      	movs	r1, #92	; 0x5c
 80053ce:	f24d 5009 	movw	r0, #54537	; 0xd509
 80053d2:	f7fd f9d5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 80053d6:	2100      	movs	r1, #0
 80053d8:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80053dc:	f7fd f9d0 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 80053e0:	2181      	movs	r1, #129	; 0x81
 80053e2:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80053e6:	f7fd f9cb 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 80053ea:	2100      	movs	r1, #0
 80053ec:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80053f0:	f7fd f9c6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 80053f4:	21a6      	movs	r1, #166	; 0xa6
 80053f6:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80053fa:	f7fd f9c1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 80053fe:	2100      	movs	r1, #0
 8005400:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8005404:	f7fd f9bc 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 8005408:	21e5      	movs	r1, #229	; 0xe5
 800540a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 800540e:	f7fd f9b7 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 8005412:	2101      	movs	r1, #1
 8005414:	f24d 5010 	movw	r0, #54544	; 0xd510
 8005418:	f7fd f9b2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 800541c:	2113      	movs	r1, #19
 800541e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8005422:	f7fd f9ad 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8005426:	2101      	movs	r1, #1
 8005428:	f24d 5012 	movw	r0, #54546	; 0xd512
 800542c:	f7fd f9a8 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8005430:	2154      	movs	r1, #84	; 0x54
 8005432:	f24d 5013 	movw	r0, #54547	; 0xd513
 8005436:	f7fd f9a3 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 800543a:	2101      	movs	r1, #1
 800543c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8005440:	f7fd f99e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8005444:	2182      	movs	r1, #130	; 0x82
 8005446:	f24d 5015 	movw	r0, #54549	; 0xd515
 800544a:	f7fd f999 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 800544e:	2101      	movs	r1, #1
 8005450:	f24d 5016 	movw	r0, #54550	; 0xd516
 8005454:	f7fd f994 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8005458:	21ca      	movs	r1, #202	; 0xca
 800545a:	f24d 5017 	movw	r0, #54551	; 0xd517
 800545e:	f7fd f98f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 8005462:	2102      	movs	r1, #2
 8005464:	f24d 5018 	movw	r0, #54552	; 0xd518
 8005468:	f7fd f98a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 800546c:	2100      	movs	r1, #0
 800546e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8005472:	f7fd f985 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 8005476:	2102      	movs	r1, #2
 8005478:	f24d 501a 	movw	r0, #54554	; 0xd51a
 800547c:	f7fd f980 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 8005480:	2101      	movs	r1, #1
 8005482:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8005486:	f7fd f97b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 800548a:	2102      	movs	r1, #2
 800548c:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8005490:	f7fd f976 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 8005494:	2134      	movs	r1, #52	; 0x34
 8005496:	f24d 501d 	movw	r0, #54557	; 0xd51d
 800549a:	f7fd f971 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 800549e:	2102      	movs	r1, #2
 80054a0:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80054a4:	f7fd f96c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 80054a8:	2167      	movs	r1, #103	; 0x67
 80054aa:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80054ae:	f7fd f967 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 80054b2:	2102      	movs	r1, #2
 80054b4:	f24d 5020 	movw	r0, #54560	; 0xd520
 80054b8:	f7fd f962 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 80054bc:	2184      	movs	r1, #132	; 0x84
 80054be:	f24d 5021 	movw	r0, #54561	; 0xd521
 80054c2:	f7fd f95d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 80054c6:	2102      	movs	r1, #2
 80054c8:	f24d 5022 	movw	r0, #54562	; 0xd522
 80054cc:	f7fd f958 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 80054d0:	21a4      	movs	r1, #164	; 0xa4
 80054d2:	f24d 5023 	movw	r0, #54563	; 0xd523
 80054d6:	f7fd f953 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 80054da:	2102      	movs	r1, #2
 80054dc:	f24d 5024 	movw	r0, #54564	; 0xd524
 80054e0:	f7fd f94e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 80054e4:	21b7      	movs	r1, #183	; 0xb7
 80054e6:	f24d 5025 	movw	r0, #54565	; 0xd525
 80054ea:	f7fd f949 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 80054ee:	2102      	movs	r1, #2
 80054f0:	f24d 5026 	movw	r0, #54566	; 0xd526
 80054f4:	f7fd f944 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 80054f8:	21cf      	movs	r1, #207	; 0xcf
 80054fa:	f24d 5027 	movw	r0, #54567	; 0xd527
 80054fe:	f7fd f93f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 8005502:	2102      	movs	r1, #2
 8005504:	f24d 5028 	movw	r0, #54568	; 0xd528
 8005508:	f7fd f93a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 800550c:	21de      	movs	r1, #222	; 0xde
 800550e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8005512:	f7fd f935 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8005516:	2102      	movs	r1, #2
 8005518:	f24d 502a 	movw	r0, #54570	; 0xd52a
 800551c:	f7fd f930 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8005520:	21f2      	movs	r1, #242	; 0xf2
 8005522:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8005526:	f7fd f92b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 800552a:	2102      	movs	r1, #2
 800552c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8005530:	f7fd f926 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8005534:	21fe      	movs	r1, #254	; 0xfe
 8005536:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800553a:	f7fd f921 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 800553e:	2103      	movs	r1, #3
 8005540:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8005544:	f7fd f91c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8005548:	2110      	movs	r1, #16
 800554a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800554e:	f7fd f917 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 8005552:	2103      	movs	r1, #3
 8005554:	f24d 5030 	movw	r0, #54576	; 0xd530
 8005558:	f7fd f912 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 800555c:	2133      	movs	r1, #51	; 0x33
 800555e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8005562:	f7fd f90d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 8005566:	2103      	movs	r1, #3
 8005568:	f24d 5032 	movw	r0, #54578	; 0xd532
 800556c:	f7fd f908 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 8005570:	216d      	movs	r1, #109	; 0x6d
 8005572:	f24d 5033 	movw	r0, #54579	; 0xd533
 8005576:	f7fd f903 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 800557a:	2100      	movs	r1, #0
 800557c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8005580:	f7fd f8fe 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 8005584:	2133      	movs	r1, #51	; 0x33
 8005586:	f24d 6001 	movw	r0, #54785	; 0xd601
 800558a:	f7fd f8f9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 800558e:	2100      	movs	r1, #0
 8005590:	f24d 6002 	movw	r0, #54786	; 0xd602
 8005594:	f7fd f8f4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 8005598:	2134      	movs	r1, #52	; 0x34
 800559a:	f24d 6003 	movw	r0, #54787	; 0xd603
 800559e:	f7fd f8ef 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 80055a2:	2100      	movs	r1, #0
 80055a4:	f24d 6004 	movw	r0, #54788	; 0xd604
 80055a8:	f7fd f8ea 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 80055ac:	213a      	movs	r1, #58	; 0x3a
 80055ae:	f24d 6005 	movw	r0, #54789	; 0xd605
 80055b2:	f7fd f8e5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 80055b6:	2100      	movs	r1, #0
 80055b8:	f24d 6006 	movw	r0, #54790	; 0xd606
 80055bc:	f7fd f8e0 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 80055c0:	214a      	movs	r1, #74	; 0x4a
 80055c2:	f24d 6007 	movw	r0, #54791	; 0xd607
 80055c6:	f7fd f8db 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 80055ca:	2100      	movs	r1, #0
 80055cc:	f24d 6008 	movw	r0, #54792	; 0xd608
 80055d0:	f7fd f8d6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 80055d4:	215c      	movs	r1, #92	; 0x5c
 80055d6:	f24d 6009 	movw	r0, #54793	; 0xd609
 80055da:	f7fd f8d1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 80055de:	2100      	movs	r1, #0
 80055e0:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80055e4:	f7fd f8cc 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 80055e8:	2181      	movs	r1, #129	; 0x81
 80055ea:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80055ee:	f7fd f8c7 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 80055f2:	2100      	movs	r1, #0
 80055f4:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80055f8:	f7fd f8c2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 80055fc:	21a6      	movs	r1, #166	; 0xa6
 80055fe:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8005602:	f7fd f8bd 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8005606:	2100      	movs	r1, #0
 8005608:	f24d 600e 	movw	r0, #54798	; 0xd60e
 800560c:	f7fd f8b8 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 8005610:	21e5      	movs	r1, #229	; 0xe5
 8005612:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8005616:	f7fd f8b3 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 800561a:	2101      	movs	r1, #1
 800561c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8005620:	f7fd f8ae 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8005624:	2113      	movs	r1, #19
 8005626:	f24d 6011 	movw	r0, #54801	; 0xd611
 800562a:	f7fd f8a9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 800562e:	2101      	movs	r1, #1
 8005630:	f24d 6012 	movw	r0, #54802	; 0xd612
 8005634:	f7fd f8a4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8005638:	2154      	movs	r1, #84	; 0x54
 800563a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800563e:	f7fd f89f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 8005642:	2101      	movs	r1, #1
 8005644:	f24d 6014 	movw	r0, #54804	; 0xd614
 8005648:	f7fd f89a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 800564c:	2182      	movs	r1, #130	; 0x82
 800564e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8005652:	f7fd f895 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 8005656:	2101      	movs	r1, #1
 8005658:	f24d 6016 	movw	r0, #54806	; 0xd616
 800565c:	f7fd f890 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 8005660:	21ca      	movs	r1, #202	; 0xca
 8005662:	f24d 6017 	movw	r0, #54807	; 0xd617
 8005666:	f7fd f88b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 800566a:	2102      	movs	r1, #2
 800566c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8005670:	f7fd f886 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 8005674:	2100      	movs	r1, #0
 8005676:	f24d 6019 	movw	r0, #54809	; 0xd619
 800567a:	f7fd f881 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 800567e:	2102      	movs	r1, #2
 8005680:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8005684:	f7fd f87c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 8005688:	2101      	movs	r1, #1
 800568a:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800568e:	f7fd f877 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 8005692:	2102      	movs	r1, #2
 8005694:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8005698:	f7fd f872 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 800569c:	2134      	movs	r1, #52	; 0x34
 800569e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80056a2:	f7fd f86d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 80056a6:	2102      	movs	r1, #2
 80056a8:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80056ac:	f7fd f868 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 80056b0:	2167      	movs	r1, #103	; 0x67
 80056b2:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80056b6:	f7fd f863 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 80056ba:	2102      	movs	r1, #2
 80056bc:	f24d 6020 	movw	r0, #54816	; 0xd620
 80056c0:	f7fd f85e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 80056c4:	2184      	movs	r1, #132	; 0x84
 80056c6:	f24d 6021 	movw	r0, #54817	; 0xd621
 80056ca:	f7fd f859 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 80056ce:	2102      	movs	r1, #2
 80056d0:	f24d 6022 	movw	r0, #54818	; 0xd622
 80056d4:	f7fd f854 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 80056d8:	21a4      	movs	r1, #164	; 0xa4
 80056da:	f24d 6023 	movw	r0, #54819	; 0xd623
 80056de:	f7fd f84f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 80056e2:	2102      	movs	r1, #2
 80056e4:	f24d 6024 	movw	r0, #54820	; 0xd624
 80056e8:	f7fd f84a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 80056ec:	21b7      	movs	r1, #183	; 0xb7
 80056ee:	f24d 6025 	movw	r0, #54821	; 0xd625
 80056f2:	f7fd f845 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 80056f6:	2102      	movs	r1, #2
 80056f8:	f24d 6026 	movw	r0, #54822	; 0xd626
 80056fc:	f7fd f840 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 8005700:	21cf      	movs	r1, #207	; 0xcf
 8005702:	f24d 6027 	movw	r0, #54823	; 0xd627
 8005706:	f7fd f83b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 800570a:	2102      	movs	r1, #2
 800570c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8005710:	f7fd f836 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8005714:	21de      	movs	r1, #222	; 0xde
 8005716:	f24d 6029 	movw	r0, #54825	; 0xd629
 800571a:	f7fd f831 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 800571e:	2102      	movs	r1, #2
 8005720:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8005724:	f7fd f82c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8005728:	21f2      	movs	r1, #242	; 0xf2
 800572a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800572e:	f7fd f827 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8005732:	2102      	movs	r1, #2
 8005734:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8005738:	f7fd f822 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 800573c:	21fe      	movs	r1, #254	; 0xfe
 800573e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8005742:	f7fd f81d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8005746:	2103      	movs	r1, #3
 8005748:	f24d 602e 	movw	r0, #54830	; 0xd62e
 800574c:	f7fd f818 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 8005750:	2110      	movs	r1, #16
 8005752:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8005756:	f7fd f813 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 800575a:	2103      	movs	r1, #3
 800575c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8005760:	f7fd f80e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8005764:	2133      	movs	r1, #51	; 0x33
 8005766:	f24d 6031 	movw	r0, #54833	; 0xd631
 800576a:	f7fd f809 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 800576e:	2103      	movs	r1, #3
 8005770:	f24d 6032 	movw	r0, #54834	; 0xd632
 8005774:	f7fd f804 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8005778:	216d      	movs	r1, #109	; 0x6d
 800577a:	f24d 6033 	movw	r0, #54835	; 0xd633
 800577e:	f7fc ffff 	bl	8002780 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 8005782:	2155      	movs	r1, #85	; 0x55
 8005784:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8005788:	f7fc fffa 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 800578c:	21aa      	movs	r1, #170	; 0xaa
 800578e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8005792:	f7fc fff5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8005796:	2152      	movs	r1, #82	; 0x52
 8005798:	f24f 0002 	movw	r0, #61442	; 0xf002
 800579c:	f7fc fff0 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 80057a0:	2108      	movs	r1, #8
 80057a2:	f24f 0003 	movw	r0, #61443	; 0xf003
 80057a6:	f7fc ffeb 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 80057aa:	2100      	movs	r1, #0
 80057ac:	f24f 0004 	movw	r0, #61444	; 0xf004
 80057b0:	f7fc ffe6 	bl	8002780 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80057b4:	21cc      	movs	r1, #204	; 0xcc
 80057b6:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80057ba:	f7fc ffe1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80057be:	2100      	movs	r1, #0
 80057c0:	f24b 1001 	movw	r0, #45313	; 0xb101
 80057c4:	f7fc ffdc 	bl	8002780 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 80057c8:	2105      	movs	r1, #5
 80057ca:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80057ce:	f7fc ffd7 	bl	8002780 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 80057d2:	2170      	movs	r1, #112	; 0x70
 80057d4:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80057d8:	f7fc ffd2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 80057dc:	2170      	movs	r1, #112	; 0x70
 80057de:	f24b 7001 	movw	r0, #46849	; 0xb701
 80057e2:	f7fc ffcd 	bl	8002780 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 80057e6:	2101      	movs	r1, #1
 80057e8:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80057ec:	f7fc ffc8 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 80057f0:	2103      	movs	r1, #3
 80057f2:	f64b 0001 	movw	r0, #47105	; 0xb801
 80057f6:	f7fc ffc3 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 80057fa:	2103      	movs	r1, #3
 80057fc:	f64b 0002 	movw	r0, #47106	; 0xb802
 8005800:	f7fc ffbe 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8005804:	2103      	movs	r1, #3
 8005806:	f64b 0003 	movw	r0, #47107	; 0xb803
 800580a:	f7fc ffb9 	bl	8002780 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 800580e:	2102      	movs	r1, #2
 8005810:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8005814:	f7fc ffb4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8005818:	2100      	movs	r1, #0
 800581a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800581e:	f7fc ffaf 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8005822:	2100      	movs	r1, #0
 8005824:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8005828:	f7fc ffaa 	bl	8002780 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 800582c:	21d0      	movs	r1, #208	; 0xd0
 800582e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8005832:	f7fc ffa5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8005836:	2102      	movs	r1, #2
 8005838:	f64c 1001 	movw	r0, #51457	; 0xc901
 800583c:	f7fc ffa0 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8005840:	2150      	movs	r1, #80	; 0x50
 8005842:	f64c 1002 	movw	r0, #51458	; 0xc902
 8005846:	f7fc ff9b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 800584a:	2150      	movs	r1, #80	; 0x50
 800584c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8005850:	f7fc ff96 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8005854:	2150      	movs	r1, #80	; 0x50
 8005856:	f64c 1004 	movw	r0, #51460	; 0xc904
 800585a:	f7fc ff91 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 800585e:	2100      	movs	r1, #0
 8005860:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8005864:	f7fc ff8c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8005868:	2155      	movs	r1, #85	; 0x55
 800586a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 800586e:	f7fc ff87 	bl	8002780 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8005872:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8005876:	f7fc ff55 	bl	8002724 <LCD_WR_REG>
		delay_us(120);
 800587a:	2078      	movs	r0, #120	; 0x78
 800587c:	f7fc fbdc 	bl	8002038 <delay_us>
		LCD_WR_REG(0x2900);
 8005880:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8005884:	f7fc ff4e 	bl	8002724 <LCD_WR_REG>
 8005888:	f001 b95f 	b.w	8006b4a <LCD_Init+0x3852>
	}else if(lcddev.id==0x9325)//9325
 800588c:	4bec      	ldr	r3, [pc, #944]	; (8005c40 <LCD_Init+0x2948>)
 800588e:	889b      	ldrh	r3, [r3, #4]
 8005890:	f249 3225 	movw	r2, #37669	; 0x9325
 8005894:	4293      	cmp	r3, r2
 8005896:	f040 80d7 	bne.w	8005a48 <LCD_Init+0x2750>
	{
		LCD_WriteReg(0x00E5,0x78F0);
 800589a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800589e:	20e5      	movs	r0, #229	; 0xe5
 80058a0:	f7fc ff6e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0001,0x0100);
 80058a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058a8:	2001      	movs	r0, #1
 80058aa:	f7fc ff69 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 80058ae:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80058b2:	2002      	movs	r0, #2
 80058b4:	f7fc ff64 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0003,0x1030);
 80058b8:	f241 0130 	movw	r1, #4144	; 0x1030
 80058bc:	2003      	movs	r0, #3
 80058be:	f7fc ff5f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0004,0x0000);
 80058c2:	2100      	movs	r1, #0
 80058c4:	2004      	movs	r0, #4
 80058c6:	f7fc ff5b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 80058ca:	f240 2102 	movw	r1, #514	; 0x202
 80058ce:	2008      	movs	r0, #8
 80058d0:	f7fc ff56 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0009,0x0000);
 80058d4:	2100      	movs	r1, #0
 80058d6:	2009      	movs	r0, #9
 80058d8:	f7fc ff52 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x000A,0x0000);
 80058dc:	2100      	movs	r1, #0
 80058de:	200a      	movs	r0, #10
 80058e0:	f7fc ff4e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x000C,0x0000);
 80058e4:	2100      	movs	r1, #0
 80058e6:	200c      	movs	r0, #12
 80058e8:	f7fc ff4a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x000D,0x0000);
 80058ec:	2100      	movs	r1, #0
 80058ee:	200d      	movs	r0, #13
 80058f0:	f7fc ff46 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x000F,0x0000);
 80058f4:	2100      	movs	r1, #0
 80058f6:	200f      	movs	r0, #15
 80058f8:	f7fc ff42 	bl	8002780 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010,0x0000);
 80058fc:	2100      	movs	r1, #0
 80058fe:	2010      	movs	r0, #16
 8005900:	f7fc ff3e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 8005904:	2107      	movs	r1, #7
 8005906:	2011      	movs	r0, #17
 8005908:	f7fc ff3a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 800590c:	2100      	movs	r1, #0
 800590e:	2012      	movs	r0, #18
 8005910:	f7fc ff36 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 8005914:	2100      	movs	r1, #0
 8005916:	2013      	movs	r0, #19
 8005918:	f7fc ff32 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0000);
 800591c:	2100      	movs	r1, #0
 800591e:	2007      	movs	r0, #7
 8005920:	f7fc ff2e 	bl	8002780 <LCD_WriteReg>
		//vgh
		LCD_WriteReg(0x0010,0x1690);
 8005924:	f241 6190 	movw	r1, #5776	; 0x1690
 8005928:	2010      	movs	r0, #16
 800592a:	f7fc ff29 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0227);
 800592e:	f240 2127 	movw	r1, #551	; 0x227
 8005932:	2011      	movs	r0, #17
 8005934:	f7fc ff24 	bl	8002780 <LCD_WriteReg>
		//delayms(100);
		//vregiout
		LCD_WriteReg(0x0012,0x009D); //0x001b
 8005938:	219d      	movs	r1, #157	; 0x9d
 800593a:	2012      	movs	r0, #18
 800593c:	f7fc ff20 	bl	8002780 <LCD_WriteReg>
		//delayms(100);
		//vom amplitude
		LCD_WriteReg(0x0013,0x1900);
 8005940:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8005944:	2013      	movs	r0, #19
 8005946:	f7fc ff1b 	bl	8002780 <LCD_WriteReg>
		//delayms(100);
		//vom H
		LCD_WriteReg(0x0029,0x0025);
 800594a:	2125      	movs	r1, #37	; 0x25
 800594c:	2029      	movs	r0, #41	; 0x29
 800594e:	f7fc ff17 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x002B,0x000D);
 8005952:	210d      	movs	r1, #13
 8005954:	202b      	movs	r0, #43	; 0x2b
 8005956:	f7fc ff13 	bl	8002780 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030,0x0007);
 800595a:	2107      	movs	r1, #7
 800595c:	2030      	movs	r0, #48	; 0x30
 800595e:	f7fc ff0f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0303);
 8005962:	f240 3103 	movw	r1, #771	; 0x303
 8005966:	2031      	movs	r0, #49	; 0x31
 8005968:	f7fc ff0a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0003);// 0006
 800596c:	2103      	movs	r1, #3
 800596e:	2032      	movs	r0, #50	; 0x32
 8005970:	f7fc ff06 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0206);
 8005974:	f240 2106 	movw	r1, #518	; 0x206
 8005978:	2035      	movs	r0, #53	; 0x35
 800597a:	f7fc ff01 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x0008);
 800597e:	2108      	movs	r1, #8
 8005980:	2036      	movs	r0, #54	; 0x36
 8005982:	f7fc fefd 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0406);
 8005986:	f240 4106 	movw	r1, #1030	; 0x406
 800598a:	2037      	movs	r0, #55	; 0x37
 800598c:	f7fc fef8 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0304);//0200
 8005990:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005994:	2038      	movs	r0, #56	; 0x38
 8005996:	f7fc fef3 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0007);
 800599a:	2107      	movs	r1, #7
 800599c:	2039      	movs	r0, #57	; 0x39
 800599e:	f7fc feef 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x003C,0x0602);// 0504
 80059a2:	f240 6102 	movw	r1, #1538	; 0x602
 80059a6:	203c      	movs	r0, #60	; 0x3c
 80059a8:	f7fc feea 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x003D,0x0008);
 80059ac:	2108      	movs	r1, #8
 80059ae:	203d      	movs	r0, #61	; 0x3d
 80059b0:	f7fc fee6 	bl	8002780 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050,0x0000);
 80059b4:	2100      	movs	r1, #0
 80059b6:	2050      	movs	r0, #80	; 0x50
 80059b8:	f7fc fee2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00EF);
 80059bc:	21ef      	movs	r1, #239	; 0xef
 80059be:	2051      	movs	r0, #81	; 0x51
 80059c0:	f7fc fede 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 80059c4:	2100      	movs	r1, #0
 80059c6:	2052      	movs	r0, #82	; 0x52
 80059c8:	f7fc feda 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013F);
 80059cc:	f240 113f 	movw	r1, #319	; 0x13f
 80059d0:	2053      	movs	r0, #83	; 0x53
 80059d2:	f7fc fed5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0xA700);
 80059d6:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80059da:	2060      	movs	r0, #96	; 0x60
 80059dc:	f7fc fed0 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 80059e0:	2101      	movs	r1, #1
 80059e2:	2061      	movs	r0, #97	; 0x61
 80059e4:	f7fc fecc 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x006A,0x0000);
 80059e8:	2100      	movs	r1, #0
 80059ea:	206a      	movs	r0, #106	; 0x6a
 80059ec:	f7fc fec8 	bl	8002780 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080,0x0000);
 80059f0:	2100      	movs	r1, #0
 80059f2:	2080      	movs	r0, #128	; 0x80
 80059f4:	f7fc fec4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0081,0x0000);
 80059f8:	2100      	movs	r1, #0
 80059fa:	2081      	movs	r0, #129	; 0x81
 80059fc:	f7fc fec0 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0082,0x0000);
 8005a00:	2100      	movs	r1, #0
 8005a02:	2082      	movs	r0, #130	; 0x82
 8005a04:	f7fc febc 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0083,0x0000);
 8005a08:	2100      	movs	r1, #0
 8005a0a:	2083      	movs	r0, #131	; 0x83
 8005a0c:	f7fc feb8 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0084,0x0000);
 8005a10:	2100      	movs	r1, #0
 8005a12:	2084      	movs	r0, #132	; 0x84
 8005a14:	f7fc feb4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0085,0x0000);
 8005a18:	2100      	movs	r1, #0
 8005a1a:	2085      	movs	r0, #133	; 0x85
 8005a1c:	f7fc feb0 	bl	8002780 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090,0x0010);
 8005a20:	2110      	movs	r1, #16
 8005a22:	2090      	movs	r0, #144	; 0x90
 8005a24:	f7fc feac 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8005a28:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a2c:	2092      	movs	r0, #146	; 0x92
 8005a2e:	f7fc fea7 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0x0007,0x0133);
 8005a32:	f240 1133 	movw	r1, #307	; 0x133
 8005a36:	2007      	movs	r0, #7
 8005a38:	f7fc fea2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x0022);//
 8005a3c:	2122      	movs	r1, #34	; 0x22
 8005a3e:	2000      	movs	r0, #0
 8005a40:	f7fc fe9e 	bl	8002780 <LCD_WriteReg>
 8005a44:	f001 b881 	b.w	8006b4a <LCD_Init+0x3852>
	}else if(lcddev.id==0x9328)//ILI9328   OK
 8005a48:	4b7d      	ldr	r3, [pc, #500]	; (8005c40 <LCD_Init+0x2948>)
 8005a4a:	889b      	ldrh	r3, [r3, #4]
 8005a4c:	f249 3228 	movw	r2, #37672	; 0x9328
 8005a50:	4293      	cmp	r3, r2
 8005a52:	f040 80f7 	bne.w	8005c44 <LCD_Init+0x294c>
	{
  		LCD_WriteReg(0x00EC,0x108F);// internal timeing
 8005a56:	f241 018f 	movw	r1, #4239	; 0x108f
 8005a5a:	20ec      	movs	r0, #236	; 0xec
 8005a5c:	f7fc fe90 	bl	8002780 <LCD_WriteReg>
 		LCD_WriteReg(0x00EF,0x1234);// ADD
 8005a60:	f241 2134 	movw	r1, #4660	; 0x1234
 8005a64:	20ef      	movs	r0, #239	; 0xef
 8005a66:	f7fc fe8b 	bl	8002780 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);
        //LCD_WriteReg(0x0000,0x0001);//开启内部时钟
        LCD_WriteReg(0x0001,0x0100);
 8005a6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a6e:	2001      	movs	r0, #1
 8005a70:	f7fc fe86 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);//电源开启
 8005a74:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005a78:	2002      	movs	r0, #2
 8005a7a:	f7fc fe81 	bl	8002780 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(0<<3) );//65K
 8005a7e:	f241 0130 	movw	r1, #4144	; 0x1030
 8005a82:	2003      	movs	r0, #3
 8005a84:	f7fc fe7c 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 8005a88:	2100      	movs	r1, #0
 8005a8a:	2004      	movs	r0, #4
 8005a8c:	f7fc fe78 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x0202);
 8005a90:	f240 2102 	movw	r1, #514	; 0x202
 8005a94:	2008      	movs	r0, #8
 8005a96:	f7fc fe73 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0009,0x0000);
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	2009      	movs	r0, #9
 8005a9e:	f7fc fe6f 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x000a,0x0000);//display setting
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	200a      	movs	r0, #10
 8005aa6:	f7fc fe6b 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x000c,0x0001);//display setting
 8005aaa:	2101      	movs	r1, #1
 8005aac:	200c      	movs	r0, #12
 8005aae:	f7fc fe67 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x000d,0x0000);//0f3c
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	200d      	movs	r0, #13
 8005ab6:	f7fc fe63 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x000f,0x0000);
 8005aba:	2100      	movs	r1, #0
 8005abc:	200f      	movs	r0, #15
 8005abe:	f7fc fe5f 	bl	8002780 <LCD_WriteReg>
		//电源配置
        LCD_WriteReg(0x0010,0x0000);
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	2010      	movs	r0, #16
 8005ac6:	f7fc fe5b 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0007);
 8005aca:	2107      	movs	r1, #7
 8005acc:	2011      	movs	r0, #17
 8005ace:	f7fc fe57 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x0000);
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	2012      	movs	r0, #18
 8005ad6:	f7fc fe53 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0000);
 8005ada:	2100      	movs	r1, #0
 8005adc:	2013      	movs	r0, #19
 8005ade:	f7fc fe4f 	bl	8002780 <LCD_WriteReg>
     	LCD_WriteReg(0x0007,0x0001);
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	2007      	movs	r0, #7
 8005ae6:	f7fc fe4b 	bl	8002780 <LCD_WriteReg>
     	HAL_Delay(50);
 8005aea:	2032      	movs	r0, #50	; 0x32
 8005aec:	f001 fa92 	bl	8007014 <HAL_Delay>
        LCD_WriteReg(0x0010,0x1490);
 8005af0:	f241 4190 	movw	r1, #5264	; 0x1490
 8005af4:	2010      	movs	r0, #16
 8005af6:	f7fc fe43 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0227);
 8005afa:	f240 2127 	movw	r1, #551	; 0x227
 8005afe:	2011      	movs	r0, #17
 8005b00:	f7fc fe3e 	bl	8002780 <LCD_WriteReg>
        HAL_Delay(50);
 8005b04:	2032      	movs	r0, #50	; 0x32
 8005b06:	f001 fa85 	bl	8007014 <HAL_Delay>
        LCD_WriteReg(0x0012,0x008A);
 8005b0a:	218a      	movs	r1, #138	; 0x8a
 8005b0c:	2012      	movs	r0, #18
 8005b0e:	f7fc fe37 	bl	8002780 <LCD_WriteReg>
        HAL_Delay(50);
 8005b12:	2032      	movs	r0, #50	; 0x32
 8005b14:	f001 fa7e 	bl	8007014 <HAL_Delay>
        LCD_WriteReg(0x0013,0x1a00);
 8005b18:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8005b1c:	2013      	movs	r0, #19
 8005b1e:	f7fc fe2f 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x0006);
 8005b22:	2106      	movs	r1, #6
 8005b24:	2029      	movs	r0, #41	; 0x29
 8005b26:	f7fc fe2b 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x002b,0x000d);
 8005b2a:	210d      	movs	r1, #13
 8005b2c:	202b      	movs	r0, #43	; 0x2b
 8005b2e:	f7fc fe27 	bl	8002780 <LCD_WriteReg>
        HAL_Delay(50);
 8005b32:	2032      	movs	r0, #50	; 0x32
 8005b34:	f001 fa6e 	bl	8007014 <HAL_Delay>
        LCD_WriteReg(0x0020,0x0000);
 8005b38:	2100      	movs	r1, #0
 8005b3a:	2020      	movs	r0, #32
 8005b3c:	f7fc fe20 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 8005b40:	2100      	movs	r1, #0
 8005b42:	2021      	movs	r0, #33	; 0x21
 8005b44:	f7fc fe1c 	bl	8002780 <LCD_WriteReg>
        HAL_Delay(50);
 8005b48:	2032      	movs	r0, #50	; 0x32
 8005b4a:	f001 fa63 	bl	8007014 <HAL_Delay>
		//伽马校正
        LCD_WriteReg(0x0030,0x0000);
 8005b4e:	2100      	movs	r1, #0
 8005b50:	2030      	movs	r0, #48	; 0x30
 8005b52:	f7fc fe15 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0604);
 8005b56:	f240 6104 	movw	r1, #1540	; 0x604
 8005b5a:	2031      	movs	r0, #49	; 0x31
 8005b5c:	f7fc fe10 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0305);
 8005b60:	f240 3105 	movw	r1, #773	; 0x305
 8005b64:	2032      	movs	r0, #50	; 0x32
 8005b66:	f7fc fe0b 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0000);
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	2035      	movs	r0, #53	; 0x35
 8005b6e:	f7fc fe07 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x0C09);
 8005b72:	f640 4109 	movw	r1, #3081	; 0xc09
 8005b76:	2036      	movs	r0, #54	; 0x36
 8005b78:	f7fc fe02 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0204);
 8005b7c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005b80:	2037      	movs	r0, #55	; 0x37
 8005b82:	f7fc fdfd 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0301);
 8005b86:	f240 3101 	movw	r1, #769	; 0x301
 8005b8a:	2038      	movs	r0, #56	; 0x38
 8005b8c:	f7fc fdf8 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0707);
 8005b90:	f240 7107 	movw	r1, #1799	; 0x707
 8005b94:	2039      	movs	r0, #57	; 0x39
 8005b96:	f7fc fdf3 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x003c,0x0000);
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	203c      	movs	r0, #60	; 0x3c
 8005b9e:	f7fc fdef 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x003d,0x0a0a);
 8005ba2:	f640 210a 	movw	r1, #2570	; 0xa0a
 8005ba6:	203d      	movs	r0, #61	; 0x3d
 8005ba8:	f7fc fdea 	bl	8002780 <LCD_WriteReg>
        HAL_Delay(50);
 8005bac:	2032      	movs	r0, #50	; 0x32
 8005bae:	f001 fa31 	bl	8007014 <HAL_Delay>
        LCD_WriteReg(0x0050,0x0000); //水平GRAM起始位置
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	2050      	movs	r0, #80	; 0x50
 8005bb6:	f7fc fde3 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00ef); //水平GRAM终止位置
 8005bba:	21ef      	movs	r1, #239	; 0xef
 8005bbc:	2051      	movs	r0, #81	; 0x51
 8005bbe:	f7fc fddf 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000); //垂直GRAM起始位置
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	2052      	movs	r0, #82	; 0x52
 8005bc6:	f7fc fddb 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013f); //垂直GRAM终止位置
 8005bca:	f240 113f 	movw	r1, #319	; 0x13f
 8005bce:	2053      	movs	r0, #83	; 0x53
 8005bd0:	f7fc fdd6 	bl	8002780 <LCD_WriteReg>

         LCD_WriteReg(0x0060,0xa700);
 8005bd4:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8005bd8:	2060      	movs	r0, #96	; 0x60
 8005bda:	f7fc fdd1 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8005bde:	2101      	movs	r1, #1
 8005be0:	2061      	movs	r0, #97	; 0x61
 8005be2:	f7fc fdcd 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x006a,0x0000);
 8005be6:	2100      	movs	r1, #0
 8005be8:	206a      	movs	r0, #106	; 0x6a
 8005bea:	f7fc fdc9 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8005bee:	2100      	movs	r1, #0
 8005bf0:	2080      	movs	r0, #128	; 0x80
 8005bf2:	f7fc fdc5 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0081,0x0000);
 8005bf6:	2100      	movs	r1, #0
 8005bf8:	2081      	movs	r0, #129	; 0x81
 8005bfa:	f7fc fdc1 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8005bfe:	2100      	movs	r1, #0
 8005c00:	2082      	movs	r0, #130	; 0x82
 8005c02:	f7fc fdbd 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8005c06:	2100      	movs	r1, #0
 8005c08:	2083      	movs	r0, #131	; 0x83
 8005c0a:	f7fc fdb9 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8005c0e:	2100      	movs	r1, #0
 8005c10:	2084      	movs	r0, #132	; 0x84
 8005c12:	f7fc fdb5 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8005c16:	2100      	movs	r1, #0
 8005c18:	2085      	movs	r0, #133	; 0x85
 8005c1a:	f7fc fdb1 	bl	8002780 <LCD_WriteReg>

        LCD_WriteReg(0x0090,0x0010);
 8005c1e:	2110      	movs	r1, #16
 8005c20:	2090      	movs	r0, #144	; 0x90
 8005c22:	f7fc fdad 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0600);
 8005c26:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005c2a:	2092      	movs	r0, #146	; 0x92
 8005c2c:	f7fc fda8 	bl	8002780 <LCD_WriteReg>
        //开启显示设置
        LCD_WriteReg(0x0007,0x0133);
 8005c30:	f240 1133 	movw	r1, #307	; 0x133
 8005c34:	2007      	movs	r0, #7
 8005c36:	f7fc fda3 	bl	8002780 <LCD_WriteReg>
 8005c3a:	f000 bf86 	b.w	8006b4a <LCD_Init+0x3852>
 8005c3e:	bf00      	nop
 8005c40:	20000420 	.word	0x20000420
	}else if(lcddev.id==0x9320)//测试OK.
 8005c44:	4bce      	ldr	r3, [pc, #824]	; (8005f80 <LCD_Init+0x2c88>)
 8005c46:	889b      	ldrh	r3, [r3, #4]
 8005c48:	f249 3220 	movw	r2, #37664	; 0x9320
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	f040 80ad 	bne.w	8005dac <LCD_Init+0x2ab4>
	{
		LCD_WriteReg(0x00,0x0000);
 8005c52:	2100      	movs	r1, #0
 8005c54:	2000      	movs	r0, #0
 8005c56:	f7fc fd93 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x01,0x0100);	//Driver Output Contral.
 8005c5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c5e:	2001      	movs	r0, #1
 8005c60:	f7fc fd8e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);	//LCD Driver Waveform Contral.
 8005c64:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005c68:	2002      	movs	r0, #2
 8005c6a:	f7fc fd89 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode Set.
 8005c6e:	f241 0130 	movw	r1, #4144	; 0x1030
 8005c72:	2003      	movs	r0, #3
 8005c74:	f7fc fd84 	bl	8002780 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04,0x0000);	//Scalling Contral.
 8005c78:	2100      	movs	r1, #0
 8005c7a:	2004      	movs	r0, #4
 8005c7c:	f7fc fd80 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0202);	//Display Contral 2.(0x0207)
 8005c80:	f240 2102 	movw	r1, #514	; 0x202
 8005c84:	2008      	movs	r0, #8
 8005c86:	f7fc fd7b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000);	//Display Contral 3.(0x0000)
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	2009      	movs	r0, #9
 8005c8e:	f7fc fd77 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
 8005c92:	2100      	movs	r1, #0
 8005c94:	200a      	movs	r0, #10
 8005c96:	f7fc fd73 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	200c      	movs	r0, #12
 8005c9e:	f7fc fd6f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0d,0x0000);	//Frame Maker Position.
 8005ca2:	2100      	movs	r1, #0
 8005ca4:	200d      	movs	r0, #13
 8005ca6:	f7fc fd6b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0f,0x0000);	//Extern Display Interface Contral 2.
 8005caa:	2100      	movs	r1, #0
 8005cac:	200f      	movs	r0, #15
 8005cae:	f7fc fd67 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(50);
 8005cb2:	2032      	movs	r0, #50	; 0x32
 8005cb4:	f001 f9ae 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0x07,0x0101);	//Display Contral.
 8005cb8:	f240 1101 	movw	r1, #257	; 0x101
 8005cbc:	2007      	movs	r0, #7
 8005cbe:	f7fc fd5f 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(50);
 8005cc2:	2032      	movs	r0, #50	; 0x32
 8005cc4:	f001 f9a6 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
 8005cc8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8005ccc:	2010      	movs	r0, #16
 8005cce:	f7fc fd57 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0007);								//Power Control 2.(0x0001)
 8005cd2:	2107      	movs	r1, #7
 8005cd4:	2011      	movs	r0, #17
 8005cd6:	f7fc fd53 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));				//Power Control 3.(0x0138)
 8005cda:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005cde:	2012      	movs	r0, #18
 8005ce0:	f7fc fd4e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0b00);								//Power Control 4.
 8005ce4:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8005ce8:	2013      	movs	r0, #19
 8005cea:	f7fc fd49 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0000);								//Power Control 7.
 8005cee:	2100      	movs	r1, #0
 8005cf0:	2029      	movs	r0, #41	; 0x29
 8005cf2:	f7fc fd45 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0x2b,(1<<14)|(1<<4));
 8005cf6:	f244 0110 	movw	r1, #16400	; 0x4010
 8005cfa:	202b      	movs	r0, #43	; 0x2b
 8005cfc:	f7fc fd40 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x50,0);	//Set X Star
 8005d00:	2100      	movs	r1, #0
 8005d02:	2050      	movs	r0, #80	; 0x50
 8005d04:	f7fc fd3c 	bl	8002780 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51,239);	//Set Y Star
 8005d08:	21ef      	movs	r1, #239	; 0xef
 8005d0a:	2051      	movs	r0, #81	; 0x51
 8005d0c:	f7fc fd38 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x52,0);	//Set Y End.t.
 8005d10:	2100      	movs	r1, #0
 8005d12:	2052      	movs	r0, #82	; 0x52
 8005d14:	f7fc fd34 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x53,319);	//
 8005d18:	f240 113f 	movw	r1, #319	; 0x13f
 8005d1c:	2053      	movs	r0, #83	; 0x53
 8005d1e:	f7fc fd2f 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0x60,0x2700);	//Driver Output Control.
 8005d22:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005d26:	2060      	movs	r0, #96	; 0x60
 8005d28:	f7fc fd2a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x61,0x0001);	//Driver Output Control.
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	2061      	movs	r0, #97	; 0x61
 8005d30:	f7fc fd26 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x6a,0x0000);	//Vertical Srcoll Control.
 8005d34:	2100      	movs	r1, #0
 8005d36:	206a      	movs	r0, #106	; 0x6a
 8005d38:	f7fc fd22 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0x80,0x0000);	//Display Position? Partial Display 1.
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	2080      	movs	r0, #128	; 0x80
 8005d40:	f7fc fd1e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000);	//RAM Address Start? Partial Display 1.
 8005d44:	2100      	movs	r1, #0
 8005d46:	2081      	movs	r0, #129	; 0x81
 8005d48:	f7fc fd1a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000);	//RAM Address End-Partial Display 1.
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	2082      	movs	r0, #130	; 0x82
 8005d50:	f7fc fd16 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000);	//Displsy Position? Partial Display 2.
 8005d54:	2100      	movs	r1, #0
 8005d56:	2083      	movs	r0, #131	; 0x83
 8005d58:	f7fc fd12 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000);	//RAM Address Start? Partial Display 2.
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	2084      	movs	r0, #132	; 0x84
 8005d60:	f7fc fd0e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000);	//RAM Address End? Partial Display 2.
 8005d64:	2100      	movs	r1, #0
 8005d66:	2085      	movs	r0, #133	; 0x85
 8005d68:	f7fc fd0a 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
 8005d6c:	2110      	movs	r1, #16
 8005d6e:	2090      	movs	r0, #144	; 0x90
 8005d70:	f7fc fd06 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
 8005d74:	2100      	movs	r1, #0
 8005d76:	2092      	movs	r0, #146	; 0x92
 8005d78:	f7fc fd02 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0001);	//Panel Interface Contral 3.
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	2093      	movs	r0, #147	; 0x93
 8005d80:	f7fc fcfe 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
 8005d84:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005d88:	2095      	movs	r0, #149	; 0x95
 8005d8a:	f7fc fcf9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x97,(0<<8));	//
 8005d8e:	2100      	movs	r1, #0
 8005d90:	2097      	movs	r0, #151	; 0x97
 8005d92:	f7fc fcf5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x98,0x0000);	//Frame Cycle Contral.
 8005d96:	2100      	movs	r1, #0
 8005d98:	2098      	movs	r0, #152	; 0x98
 8005d9a:	f7fc fcf1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);	//(0x0173)
 8005d9e:	f240 1173 	movw	r1, #371	; 0x173
 8005da2:	2007      	movs	r0, #7
 8005da4:	f7fc fcec 	bl	8002780 <LCD_WriteReg>
 8005da8:	f000 becf 	b.w	8006b4a <LCD_Init+0x3852>
	}else if(lcddev.id==0X9331)//OK |/|/|
 8005dac:	4b74      	ldr	r3, [pc, #464]	; (8005f80 <LCD_Init+0x2c88>)
 8005dae:	889b      	ldrh	r3, [r3, #4]
 8005db0:	f249 3231 	movw	r2, #37681	; 0x9331
 8005db4:	4293      	cmp	r3, r2
 8005db6:	f040 80e5 	bne.w	8005f84 <LCD_Init+0x2c8c>
	{
		LCD_WriteReg(0x00E7, 0x1014);
 8005dba:	f241 0114 	movw	r1, #4116	; 0x1014
 8005dbe:	20e7      	movs	r0, #231	; 0xe7
 8005dc0:	f7fc fcde 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8005dc4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dc8:	2001      	movs	r0, #1
 8005dca:	f7fc fcd9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8005dce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005dd2:	2002      	movs	r0, #2
 8005dd4:	f7fc fcd4 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(1<<3));//65K
 8005dd8:	f241 0138 	movw	r1, #4152	; 0x1038
 8005ddc:	2003      	movs	r0, #3
 8005dde:	f7fc fccf 	bl	8002780 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8005de2:	f240 2102 	movw	r1, #514	; 0x202
 8005de6:	2008      	movs	r0, #8
 8005de8:	f7fc fcca 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8005dec:	2100      	movs	r1, #0
 8005dee:	2009      	movs	r0, #9
 8005df0:	f7fc fcc6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8005df4:	2100      	movs	r1, #0
 8005df6:	200a      	movs	r0, #10
 8005df8:	f7fc fcc2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	200c      	movs	r0, #12
 8005e00:	f7fc fcbe 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8005e04:	2100      	movs	r1, #0
 8005e06:	200d      	movs	r0, #13
 8005e08:	f7fc fcba 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	200f      	movs	r0, #15
 8005e10:	f7fc fcb6 	bl	8002780 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8005e14:	2100      	movs	r1, #0
 8005e16:	2010      	movs	r0, #16
 8005e18:	f7fc fcb2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8005e1c:	2107      	movs	r1, #7
 8005e1e:	2011      	movs	r0, #17
 8005e20:	f7fc fcae 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8005e24:	2100      	movs	r1, #0
 8005e26:	2012      	movs	r0, #18
 8005e28:	f7fc fcaa 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	2013      	movs	r0, #19
 8005e30:	f7fc fca6 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8005e34:	20c8      	movs	r0, #200	; 0xc8
 8005e36:	f001 f8ed 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8005e3a:	f241 6190 	movw	r1, #5776	; 0x1690
 8005e3e:	2010      	movs	r0, #16
 8005e40:	f7fc fc9e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8005e44:	f240 2127 	movw	r1, #551	; 0x227
 8005e48:	2011      	movs	r0, #17
 8005e4a:	f7fc fc99 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8005e4e:	2032      	movs	r0, #50	; 0x32
 8005e50:	f001 f8e0 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8005e54:	210c      	movs	r1, #12
 8005e56:	2012      	movs	r0, #18
 8005e58:	f7fc fc92 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8005e5c:	2032      	movs	r0, #50	; 0x32
 8005e5e:	f001 f8d9 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8005e62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e66:	2013      	movs	r0, #19
 8005e68:	f7fc fc8a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8005e6c:	2111      	movs	r1, #17
 8005e6e:	2029      	movs	r0, #41	; 0x29
 8005e70:	f7fc fc86 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8005e74:	210b      	movs	r1, #11
 8005e76:	202b      	movs	r0, #43	; 0x2b
 8005e78:	f7fc fc82 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8005e7c:	2032      	movs	r0, #50	; 0x32
 8005e7e:	f001 f8c9 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8005e82:	2100      	movs	r1, #0
 8005e84:	2020      	movs	r0, #32
 8005e86:	f7fc fc7b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8005e8a:	f240 113f 	movw	r1, #319	; 0x13f
 8005e8e:	2021      	movs	r0, #33	; 0x21
 8005e90:	f7fc fc76 	bl	8002780 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8005e94:	2100      	movs	r1, #0
 8005e96:	2030      	movs	r0, #48	; 0x30
 8005e98:	f7fc fc72 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8005e9c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005ea0:	2031      	movs	r0, #49	; 0x31
 8005ea2:	f7fc fc6d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	2032      	movs	r0, #50	; 0x32
 8005eaa:	f7fc fc69 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8005eae:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005eb2:	2035      	movs	r0, #53	; 0x35
 8005eb4:	f7fc fc64 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8005eb8:	f241 610a 	movw	r1, #5642	; 0x160a
 8005ebc:	2036      	movs	r0, #54	; 0x36
 8005ebe:	f7fc fc5f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8005ec2:	f240 7107 	movw	r1, #1799	; 0x707
 8005ec6:	2037      	movs	r0, #55	; 0x37
 8005ec8:	f7fc fc5a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8005ecc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005ed0:	2038      	movs	r0, #56	; 0x38
 8005ed2:	f7fc fc55 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8005ed6:	f240 7107 	movw	r1, #1799	; 0x707
 8005eda:	2039      	movs	r0, #57	; 0x39
 8005edc:	f7fc fc50 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8005ee0:	f240 4102 	movw	r1, #1026	; 0x402
 8005ee4:	203c      	movs	r0, #60	; 0x3c
 8005ee6:	f7fc fc4b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8005eea:	f640 410f 	movw	r1, #3087	; 0xc0f
 8005eee:	203d      	movs	r0, #61	; 0x3d
 8005ef0:	f7fc fc46 	bl	8002780 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	2050      	movs	r0, #80	; 0x50
 8005ef8:	f7fc fc42 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8005efc:	21ef      	movs	r1, #239	; 0xef
 8005efe:	2051      	movs	r0, #81	; 0x51
 8005f00:	f7fc fc3e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8005f04:	2100      	movs	r1, #0
 8005f06:	2052      	movs	r0, #82	; 0x52
 8005f08:	f7fc fc3a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8005f0c:	f240 113f 	movw	r1, #319	; 0x13f
 8005f10:	2053      	movs	r0, #83	; 0x53
 8005f12:	f7fc fc35 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8005f16:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005f1a:	2060      	movs	r0, #96	; 0x60
 8005f1c:	f7fc fc30 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
 8005f20:	2101      	movs	r1, #1
 8005f22:	2061      	movs	r0, #97	; 0x61
 8005f24:	f7fc fc2c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8005f28:	2100      	movs	r1, #0
 8005f2a:	206a      	movs	r0, #106	; 0x6a
 8005f2c:	f7fc fc28 	bl	8002780 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8005f30:	2100      	movs	r1, #0
 8005f32:	2080      	movs	r0, #128	; 0x80
 8005f34:	f7fc fc24 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8005f38:	2100      	movs	r1, #0
 8005f3a:	2081      	movs	r0, #129	; 0x81
 8005f3c:	f7fc fc20 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005f40:	2100      	movs	r1, #0
 8005f42:	2082      	movs	r0, #130	; 0x82
 8005f44:	f7fc fc1c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8005f48:	2100      	movs	r1, #0
 8005f4a:	2083      	movs	r0, #131	; 0x83
 8005f4c:	f7fc fc18 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8005f50:	2100      	movs	r1, #0
 8005f52:	2084      	movs	r0, #132	; 0x84
 8005f54:	f7fc fc14 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8005f58:	2100      	movs	r1, #0
 8005f5a:	2085      	movs	r0, #133	; 0x85
 8005f5c:	f7fc fc10 	bl	8002780 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8005f60:	2110      	movs	r1, #16
 8005f62:	2090      	movs	r0, #144	; 0x90
 8005f64:	f7fc fc0c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8005f68:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f6c:	2092      	movs	r0, #146	; 0x92
 8005f6e:	f7fc fc07 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8005f72:	f240 1133 	movw	r1, #307	; 0x133
 8005f76:	2007      	movs	r0, #7
 8005f78:	f7fc fc02 	bl	8002780 <LCD_WriteReg>
 8005f7c:	f000 bde5 	b.w	8006b4a <LCD_Init+0x3852>
 8005f80:	20000420 	.word	0x20000420
	}else if(lcddev.id==0x5408)
 8005f84:	4be2      	ldr	r3, [pc, #904]	; (8006310 <LCD_Init+0x3018>)
 8005f86:	889b      	ldrh	r3, [r3, #4]
 8005f88:	f245 4208 	movw	r2, #21512	; 0x5408
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	f040 80a3 	bne.w	80060d8 <LCD_Init+0x2de0>
	{
		LCD_WriteReg(0x01,0x0100);
 8005f92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f96:	2001      	movs	r0, #1
 8005f98:	f7fc fbf2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);//LCD Driving Waveform Contral
 8005f9c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005fa0:	2002      	movs	r0, #2
 8005fa2:	f7fc fbed 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode设置
 8005fa6:	f241 0130 	movw	r1, #4144	; 0x1030
 8005faa:	2003      	movs	r0, #3
 8005fac:	f7fc fbe8 	bl	8002780 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04,0x0000); //Scalling Control register
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	2004      	movs	r0, #4
 8005fb4:	f7fc fbe4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0207); //Display Control 2
 8005fb8:	f240 2107 	movw	r1, #519	; 0x207
 8005fbc:	2008      	movs	r0, #8
 8005fbe:	f7fc fbdf 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000); //Display Control 3
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	2009      	movs	r0, #9
 8005fc6:	f7fc fbdb 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0A,0x0000); //Frame Cycle Control
 8005fca:	2100      	movs	r1, #0
 8005fcc:	200a      	movs	r0, #10
 8005fce:	f7fc fbd7 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0C,0x0000); //External Display Interface Control 1
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	200c      	movs	r0, #12
 8005fd6:	f7fc fbd3 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0D,0x0000); //Frame Maker Position
 8005fda:	2100      	movs	r1, #0
 8005fdc:	200d      	movs	r0, #13
 8005fde:	f7fc fbcf 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0F,0x0000); //External Display Interface Control 2
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	200f      	movs	r0, #15
 8005fe6:	f7fc fbcb 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(20);
 8005fea:	2014      	movs	r0, #20
 8005fec:	f001 f812 	bl	8007014 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10,0x16B0); //0x14B0 //Power Control 1
 8005ff0:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8005ff4:	2010      	movs	r0, #16
 8005ff6:	f7fc fbc3 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0001); //0x0007 //Power Control 2
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	2011      	movs	r0, #17
 8005ffe:	f7fc fbbf 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x17,0x0001); //0x0000 //Power Control 3
 8006002:	2101      	movs	r1, #1
 8006004:	2017      	movs	r0, #23
 8006006:	f7fc fbbb 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x12,0x0138); //0x013B //Power Control 4
 800600a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800600e:	2012      	movs	r0, #18
 8006010:	f7fc fbb6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0800); //0x0800 //Power Control 5
 8006014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006018:	2013      	movs	r0, #19
 800601a:	f7fc fbb1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0009); //NVM read data 2
 800601e:	2109      	movs	r1, #9
 8006020:	2029      	movs	r0, #41	; 0x29
 8006022:	f7fc fbad 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x2a,0x0009); //NVM read data 3
 8006026:	2109      	movs	r1, #9
 8006028:	202a      	movs	r0, #42	; 0x2a
 800602a:	f7fc fba9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0xa4,0x0000);
 800602e:	2100      	movs	r1, #0
 8006030:	20a4      	movs	r0, #164	; 0xa4
 8006032:	f7fc fba5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x50,0x0000); //设置操作窗口的X轴开始列
 8006036:	2100      	movs	r1, #0
 8006038:	2050      	movs	r0, #80	; 0x50
 800603a:	f7fc fba1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x51,0x00EF); //设置操作窗口的X轴结束列
 800603e:	21ef      	movs	r1, #239	; 0xef
 8006040:	2051      	movs	r0, #81	; 0x51
 8006042:	f7fc fb9d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x52,0x0000); //设置操作窗口的Y轴开始行
 8006046:	2100      	movs	r1, #0
 8006048:	2052      	movs	r0, #82	; 0x52
 800604a:	f7fc fb99 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x53,0x013F); //设置操作窗口的Y轴结束行
 800604e:	f240 113f 	movw	r1, #319	; 0x13f
 8006052:	2053      	movs	r0, #83	; 0x53
 8006054:	f7fc fb94 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x60,0x2700); //Driver Output Control
 8006058:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800605c:	2060      	movs	r0, #96	; 0x60
 800605e:	f7fc fb8f 	bl	8002780 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61,0x0001); //Driver Output Control
 8006062:	2101      	movs	r1, #1
 8006064:	2061      	movs	r0, #97	; 0x61
 8006066:	f7fc fb8b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x6A,0x0000); //Vertical Scroll Control
 800606a:	2100      	movs	r1, #0
 800606c:	206a      	movs	r0, #106	; 0x6a
 800606e:	f7fc fb87 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x80,0x0000); //Display Position – Partial Display 1
 8006072:	2100      	movs	r1, #0
 8006074:	2080      	movs	r0, #128	; 0x80
 8006076:	f7fc fb83 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000); //RAM Address Start – Partial Display 1
 800607a:	2100      	movs	r1, #0
 800607c:	2081      	movs	r0, #129	; 0x81
 800607e:	f7fc fb7f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000); //RAM address End - Partial Display 1
 8006082:	2100      	movs	r1, #0
 8006084:	2082      	movs	r0, #130	; 0x82
 8006086:	f7fc fb7b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000); //Display Position – Partial Display 2
 800608a:	2100      	movs	r1, #0
 800608c:	2083      	movs	r0, #131	; 0x83
 800608e:	f7fc fb77 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000); //RAM Address Start – Partial Display 2
 8006092:	2100      	movs	r1, #0
 8006094:	2084      	movs	r0, #132	; 0x84
 8006096:	f7fc fb73 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000); //RAM address End – Partail Display2
 800609a:	2100      	movs	r1, #0
 800609c:	2085      	movs	r0, #133	; 0x85
 800609e:	f7fc fb6f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x90,0x0013); //Frame Cycle Control
 80060a2:	2113      	movs	r1, #19
 80060a4:	2090      	movs	r0, #144	; 0x90
 80060a6:	f7fc fb6b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);  //Panel Interface Control 2
 80060aa:	2100      	movs	r1, #0
 80060ac:	2092      	movs	r0, #146	; 0x92
 80060ae:	f7fc fb67 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0003); //Panel Interface control 3
 80060b2:	2103      	movs	r1, #3
 80060b4:	2093      	movs	r0, #147	; 0x93
 80060b6:	f7fc fb63 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);  //Frame Cycle Control
 80060ba:	f44f 7188 	mov.w	r1, #272	; 0x110
 80060be:	2095      	movs	r0, #149	; 0x95
 80060c0:	f7fc fb5e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);
 80060c4:	f240 1173 	movw	r1, #371	; 0x173
 80060c8:	2007      	movs	r0, #7
 80060ca:	f7fc fb59 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(50);
 80060ce:	2032      	movs	r0, #50	; 0x32
 80060d0:	f000 ffa0 	bl	8007014 <HAL_Delay>
 80060d4:	f000 bd39 	b.w	8006b4a <LCD_Init+0x3852>
	}
	else if(lcddev.id==0x1505)//OK
 80060d8:	4b8d      	ldr	r3, [pc, #564]	; (8006310 <LCD_Init+0x3018>)
 80060da:	889b      	ldrh	r3, [r3, #4]
 80060dc:	f241 5205 	movw	r2, #5381	; 0x1505
 80060e0:	4293      	cmp	r3, r2
 80060e2:	f040 8117 	bne.w	8006314 <LCD_Init+0x301c>
	{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
        LCD_WriteReg(0x0007,0x0000);
 80060e6:	2100      	movs	r1, #0
 80060e8:	2007      	movs	r0, #7
 80060ea:	f7fc fb49 	bl	8002780 <LCD_WriteReg>
        HAL_Delay(50);
 80060ee:	2032      	movs	r0, #50	; 0x32
 80060f0:	f000 ff90 	bl	8007014 <HAL_Delay>
        LCD_WriteReg(0x0012,0x011C);//0x011A   why need to set several times?
 80060f4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80060f8:	2012      	movs	r0, #18
 80060fa:	f7fc fb41 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x00A4,0x0001);//NVM
 80060fe:	2101      	movs	r1, #1
 8006100:	20a4      	movs	r0, #164	; 0xa4
 8006102:	f7fc fb3d 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x000F);
 8006106:	210f      	movs	r1, #15
 8006108:	2008      	movs	r0, #8
 800610a:	f7fc fb39 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x000A,0x0008);
 800610e:	2108      	movs	r1, #8
 8006110:	200a      	movs	r0, #10
 8006112:	f7fc fb35 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x000D,0x0008);
 8006116:	2108      	movs	r1, #8
 8006118:	200d      	movs	r0, #13
 800611a:	f7fc fb31 	bl	8002780 <LCD_WriteReg>
  		//伽马校正
        LCD_WriteReg(0x0030,0x0707);
 800611e:	f240 7107 	movw	r1, #1799	; 0x707
 8006122:	2030      	movs	r0, #48	; 0x30
 8006124:	f7fc fb2c 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0007); //0x0707
 8006128:	2107      	movs	r1, #7
 800612a:	2031      	movs	r0, #49	; 0x31
 800612c:	f7fc fb28 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0603);
 8006130:	f240 6103 	movw	r1, #1539	; 0x603
 8006134:	2032      	movs	r0, #50	; 0x32
 8006136:	f7fc fb23 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0033,0x0700);
 800613a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800613e:	2033      	movs	r0, #51	; 0x33
 8006140:	f7fc fb1e 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0034,0x0202);
 8006144:	f240 2102 	movw	r1, #514	; 0x202
 8006148:	2034      	movs	r0, #52	; 0x34
 800614a:	f7fc fb19 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0002); //?0x0606
 800614e:	2102      	movs	r1, #2
 8006150:	2035      	movs	r0, #53	; 0x35
 8006152:	f7fc fb15 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x1F0F);
 8006156:	f641 710f 	movw	r1, #7951	; 0x1f0f
 800615a:	2036      	movs	r0, #54	; 0x36
 800615c:	f7fc fb10 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0707); //0x0f0f  0x0105
 8006160:	f240 7107 	movw	r1, #1799	; 0x707
 8006164:	2037      	movs	r0, #55	; 0x37
 8006166:	f7fc fb0b 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0000);
 800616a:	2100      	movs	r1, #0
 800616c:	2038      	movs	r0, #56	; 0x38
 800616e:	f7fc fb07 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0000);
 8006172:	2100      	movs	r1, #0
 8006174:	2039      	movs	r0, #57	; 0x39
 8006176:	f7fc fb03 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x003A,0x0707);
 800617a:	f240 7107 	movw	r1, #1799	; 0x707
 800617e:	203a      	movs	r0, #58	; 0x3a
 8006180:	f7fc fafe 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x003B,0x0000); //0x0303
 8006184:	2100      	movs	r1, #0
 8006186:	203b      	movs	r0, #59	; 0x3b
 8006188:	f7fc fafa 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x003C,0x0007); //?0x0707
 800618c:	2107      	movs	r1, #7
 800618e:	203c      	movs	r0, #60	; 0x3c
 8006190:	f7fc faf6 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x003D,0x0000); //0x1313//0x1f08
 8006194:	2100      	movs	r1, #0
 8006196:	203d      	movs	r0, #61	; 0x3d
 8006198:	f7fc faf2 	bl	8002780 <LCD_WriteReg>
        HAL_Delay(50);
 800619c:	2032      	movs	r0, #50	; 0x32
 800619e:	f000 ff39 	bl	8007014 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0001);
 80061a2:	2101      	movs	r1, #1
 80061a4:	2007      	movs	r0, #7
 80061a6:	f7fc faeb 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0017,0x0001);//开启电源
 80061aa:	2101      	movs	r1, #1
 80061ac:	2017      	movs	r0, #23
 80061ae:	f7fc fae7 	bl	8002780 <LCD_WriteReg>
        HAL_Delay(50);
 80061b2:	2032      	movs	r0, #50	; 0x32
 80061b4:	f000 ff2e 	bl	8007014 <HAL_Delay>
  		//电源配置
        LCD_WriteReg(0x0010,0x17A0);
 80061b8:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 80061bc:	2010      	movs	r0, #16
 80061be:	f7fc fadf 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0217);//reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 80061c2:	f240 2117 	movw	r1, #535	; 0x217
 80061c6:	2011      	movs	r0, #17
 80061c8:	f7fc fada 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x011E);//0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 80061cc:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80061d0:	2012      	movs	r0, #18
 80061d2:	f7fc fad5 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0F00);//VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 80061d6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80061da:	2013      	movs	r0, #19
 80061dc:	f7fc fad0 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x002A,0x0000);
 80061e0:	2100      	movs	r1, #0
 80061e2:	202a      	movs	r0, #42	; 0x2a
 80061e4:	f7fc facc 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x000A);//0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 80061e8:	210a      	movs	r1, #10
 80061ea:	2029      	movs	r0, #41	; 0x29
 80061ec:	f7fc fac8 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x013E);// 0x013C  power supply on
 80061f0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80061f4:	2012      	movs	r0, #18
 80061f6:	f7fc fac3 	bl	8002780 <LCD_WriteReg>
        //Coordinates Control//
        LCD_WriteReg(0x0050,0x0000);//0x0e00
 80061fa:	2100      	movs	r1, #0
 80061fc:	2050      	movs	r0, #80	; 0x50
 80061fe:	f7fc fabf 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00EF);
 8006202:	21ef      	movs	r1, #239	; 0xef
 8006204:	2051      	movs	r0, #81	; 0x51
 8006206:	f7fc fabb 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000);
 800620a:	2100      	movs	r1, #0
 800620c:	2052      	movs	r0, #82	; 0x52
 800620e:	f7fc fab7 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013F);
 8006212:	f240 113f 	movw	r1, #319	; 0x13f
 8006216:	2053      	movs	r0, #83	; 0x53
 8006218:	f7fc fab2 	bl	8002780 <LCD_WriteReg>
    	//Pannel Image Control//
        LCD_WriteReg(0x0060,0x2700);
 800621c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006220:	2060      	movs	r0, #96	; 0x60
 8006222:	f7fc faad 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8006226:	2101      	movs	r1, #1
 8006228:	2061      	movs	r0, #97	; 0x61
 800622a:	f7fc faa9 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x006A,0x0000);
 800622e:	2100      	movs	r1, #0
 8006230:	206a      	movs	r0, #106	; 0x6a
 8006232:	f7fc faa5 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8006236:	2100      	movs	r1, #0
 8006238:	2080      	movs	r0, #128	; 0x80
 800623a:	f7fc faa1 	bl	8002780 <LCD_WriteReg>
    	//Partial Image Control//
        LCD_WriteReg(0x0081,0x0000);
 800623e:	2100      	movs	r1, #0
 8006240:	2081      	movs	r0, #129	; 0x81
 8006242:	f7fc fa9d 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8006246:	2100      	movs	r1, #0
 8006248:	2082      	movs	r0, #130	; 0x82
 800624a:	f7fc fa99 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 800624e:	2100      	movs	r1, #0
 8006250:	2083      	movs	r0, #131	; 0x83
 8006252:	f7fc fa95 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8006256:	2100      	movs	r1, #0
 8006258:	2084      	movs	r0, #132	; 0x84
 800625a:	f7fc fa91 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 800625e:	2100      	movs	r1, #0
 8006260:	2085      	movs	r0, #133	; 0x85
 8006262:	f7fc fa8d 	bl	8002780 <LCD_WriteReg>
  		//Panel Interface Control//
        LCD_WriteReg(0x0090,0x0013);//0x0010 frenqucy
 8006266:	2113      	movs	r1, #19
 8006268:	2090      	movs	r0, #144	; 0x90
 800626a:	f7fc fa89 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0300);
 800626e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006272:	2092      	movs	r0, #146	; 0x92
 8006274:	f7fc fa84 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0093,0x0005);
 8006278:	2105      	movs	r1, #5
 800627a:	2093      	movs	r0, #147	; 0x93
 800627c:	f7fc fa80 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0095,0x0000);
 8006280:	2100      	movs	r1, #0
 8006282:	2095      	movs	r0, #149	; 0x95
 8006284:	f7fc fa7c 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0097,0x0000);
 8006288:	2100      	movs	r1, #0
 800628a:	2097      	movs	r0, #151	; 0x97
 800628c:	f7fc fa78 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0098,0x0000);
 8006290:	2100      	movs	r1, #0
 8006292:	2098      	movs	r0, #152	; 0x98
 8006294:	f7fc fa74 	bl	8002780 <LCD_WriteReg>

        LCD_WriteReg(0x0001,0x0100);
 8006298:	f44f 7180 	mov.w	r1, #256	; 0x100
 800629c:	2001      	movs	r0, #1
 800629e:	f7fc fa6f 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);
 80062a2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80062a6:	2002      	movs	r0, #2
 80062a8:	f7fc fa6a 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 80062ac:	f241 0138 	movw	r1, #4152	; 0x1038
 80062b0:	2003      	movs	r0, #3
 80062b2:	f7fc fa65 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 80062b6:	2100      	movs	r1, #0
 80062b8:	2004      	movs	r0, #4
 80062ba:	f7fc fa61 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x000C,0x0000);
 80062be:	2100      	movs	r1, #0
 80062c0:	200c      	movs	r0, #12
 80062c2:	f7fc fa5d 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x000F,0x0000);
 80062c6:	2100      	movs	r1, #0
 80062c8:	200f      	movs	r0, #15
 80062ca:	f7fc fa59 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0020,0x0000);
 80062ce:	2100      	movs	r1, #0
 80062d0:	2020      	movs	r0, #32
 80062d2:	f7fc fa55 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 80062d6:	2100      	movs	r1, #0
 80062d8:	2021      	movs	r0, #33	; 0x21
 80062da:	f7fc fa51 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0007,0x0021);
 80062de:	2121      	movs	r1, #33	; 0x21
 80062e0:	2007      	movs	r0, #7
 80062e2:	f7fc fa4d 	bl	8002780 <LCD_WriteReg>
        HAL_Delay(20);
 80062e6:	2014      	movs	r0, #20
 80062e8:	f000 fe94 	bl	8007014 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0061);
 80062ec:	2161      	movs	r1, #97	; 0x61
 80062ee:	2007      	movs	r0, #7
 80062f0:	f7fc fa46 	bl	8002780 <LCD_WriteReg>
        HAL_Delay(20);
 80062f4:	2014      	movs	r0, #20
 80062f6:	f000 fe8d 	bl	8007014 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0173);
 80062fa:	f240 1173 	movw	r1, #371	; 0x173
 80062fe:	2007      	movs	r0, #7
 8006300:	f7fc fa3e 	bl	8002780 <LCD_WriteReg>
        HAL_Delay(20);
 8006304:	2014      	movs	r0, #20
 8006306:	f000 fe85 	bl	8007014 <HAL_Delay>
 800630a:	f000 bc1e 	b.w	8006b4a <LCD_Init+0x3852>
 800630e:	bf00      	nop
 8006310:	20000420 	.word	0x20000420
	}else if(lcddev.id==0xB505)
 8006314:	4bef      	ldr	r3, [pc, #956]	; (80066d4 <LCD_Init+0x33dc>)
 8006316:	889b      	ldrh	r3, [r3, #4]
 8006318:	f24b 5205 	movw	r2, #46341	; 0xb505
 800631c:	4293      	cmp	r3, r2
 800631e:	f040 8102 	bne.w	8006526 <LCD_Init+0x322e>
	{
		LCD_WriteReg(0x0000,0x0000);
 8006322:	2100      	movs	r1, #0
 8006324:	2000      	movs	r0, #0
 8006326:	f7fc fa2b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800632a:	2100      	movs	r1, #0
 800632c:	2000      	movs	r0, #0
 800632e:	f7fc fa27 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8006332:	2100      	movs	r1, #0
 8006334:	2000      	movs	r0, #0
 8006336:	f7fc fa23 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800633a:	2100      	movs	r1, #0
 800633c:	2000      	movs	r0, #0
 800633e:	f7fc fa1f 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0x00a4,0x0001);
 8006342:	2101      	movs	r1, #1
 8006344:	20a4      	movs	r0, #164	; 0xa4
 8006346:	f7fc fa1b 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(20);
 800634a:	2014      	movs	r0, #20
 800634c:	f000 fe62 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8006350:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006354:	2060      	movs	r0, #96	; 0x60
 8006356:	f7fc fa13 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 800635a:	f240 2102 	movw	r1, #514	; 0x202
 800635e:	2008      	movs	r0, #8
 8006360:	f7fc fa0e 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0214);
 8006364:	f44f 7105 	mov.w	r1, #532	; 0x214
 8006368:	2030      	movs	r0, #48	; 0x30
 800636a:	f7fc fa09 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x3715);
 800636e:	f243 7115 	movw	r1, #14101	; 0x3715
 8006372:	2031      	movs	r0, #49	; 0x31
 8006374:	f7fc fa04 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0604);
 8006378:	f240 6104 	movw	r1, #1540	; 0x604
 800637c:	2032      	movs	r0, #50	; 0x32
 800637e:	f7fc f9ff 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0e16);
 8006382:	f640 6116 	movw	r1, #3606	; 0xe16
 8006386:	2033      	movs	r0, #51	; 0x33
 8006388:	f7fc f9fa 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x2211);
 800638c:	f242 2111 	movw	r1, #8721	; 0x2211
 8006390:	2034      	movs	r0, #52	; 0x34
 8006392:	f7fc f9f5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x1500);
 8006396:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 800639a:	2035      	movs	r0, #53	; 0x35
 800639c:	f7fc f9f0 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x8507);
 80063a0:	f248 5107 	movw	r1, #34055	; 0x8507
 80063a4:	2036      	movs	r0, #54	; 0x36
 80063a6:	f7fc f9eb 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x1407);
 80063aa:	f241 4107 	movw	r1, #5127	; 0x1407
 80063ae:	2037      	movs	r0, #55	; 0x37
 80063b0:	f7fc f9e6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x1403);
 80063b4:	f241 4103 	movw	r1, #5123	; 0x1403
 80063b8:	2038      	movs	r0, #56	; 0x38
 80063ba:	f7fc f9e1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0020);
 80063be:	2120      	movs	r1, #32
 80063c0:	2039      	movs	r0, #57	; 0x39
 80063c2:	f7fc f9dd 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0x0090,0x001a);
 80063c6:	211a      	movs	r1, #26
 80063c8:	2090      	movs	r0, #144	; 0x90
 80063ca:	f7fc f9d9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0010,0x0000);
 80063ce:	2100      	movs	r1, #0
 80063d0:	2010      	movs	r0, #16
 80063d2:	f7fc f9d5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 80063d6:	2107      	movs	r1, #7
 80063d8:	2011      	movs	r0, #17
 80063da:	f7fc f9d1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 80063de:	2100      	movs	r1, #0
 80063e0:	2012      	movs	r0, #18
 80063e2:	f7fc f9cd 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 80063e6:	2100      	movs	r1, #0
 80063e8:	2013      	movs	r0, #19
 80063ea:	f7fc f9c9 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(20);
 80063ee:	2014      	movs	r0, #20
 80063f0:	f000 fe10 	bl	8007014 <HAL_Delay>

		LCD_WriteReg(0x0010,0x0730);
 80063f4:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 80063f8:	2010      	movs	r0, #16
 80063fa:	f7fc f9c1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0137);
 80063fe:	f240 1137 	movw	r1, #311	; 0x137
 8006402:	2011      	movs	r0, #17
 8006404:	f7fc f9bc 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(20);
 8006408:	2014      	movs	r0, #20
 800640a:	f000 fe03 	bl	8007014 <HAL_Delay>

		LCD_WriteReg(0x0012,0x01b8);
 800640e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8006412:	2012      	movs	r0, #18
 8006414:	f7fc f9b4 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(20);
 8006418:	2014      	movs	r0, #20
 800641a:	f000 fdfb 	bl	8007014 <HAL_Delay>

		LCD_WriteReg(0x0013,0x0f00);
 800641e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8006422:	2013      	movs	r0, #19
 8006424:	f7fc f9ac 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x002a,0x0080);
 8006428:	2180      	movs	r1, #128	; 0x80
 800642a:	202a      	movs	r0, #42	; 0x2a
 800642c:	f7fc f9a8 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0029,0x0048);
 8006430:	2148      	movs	r1, #72	; 0x48
 8006432:	2029      	movs	r0, #41	; 0x29
 8006434:	f7fc f9a4 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(20);
 8006438:	2014      	movs	r0, #20
 800643a:	f000 fdeb 	bl	8007014 <HAL_Delay>

		LCD_WriteReg(0x0001,0x0100);
 800643e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006442:	2001      	movs	r0, #1
 8006444:	f7fc f99c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 8006448:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800644c:	2002      	movs	r0, #2
 800644e:	f7fc f997 	bl	8002780 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 8006452:	f241 0138 	movw	r1, #4152	; 0x1038
 8006456:	2003      	movs	r0, #3
 8006458:	f7fc f992 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 800645c:	f240 2102 	movw	r1, #514	; 0x202
 8006460:	2008      	movs	r0, #8
 8006462:	f7fc f98d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x000a,0x0000);
 8006466:	2100      	movs	r1, #0
 8006468:	200a      	movs	r0, #10
 800646a:	f7fc f989 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x000c,0x0000);
 800646e:	2100      	movs	r1, #0
 8006470:	200c      	movs	r0, #12
 8006472:	f7fc f985 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x000d,0x0000);
 8006476:	2100      	movs	r1, #0
 8006478:	200d      	movs	r0, #13
 800647a:	f7fc f981 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x000e,0x0030);
 800647e:	2130      	movs	r1, #48	; 0x30
 8006480:	200e      	movs	r0, #14
 8006482:	f7fc f97d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0050,0x0000);
 8006486:	2100      	movs	r1, #0
 8006488:	2050      	movs	r0, #80	; 0x50
 800648a:	f7fc f979 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00ef);
 800648e:	21ef      	movs	r1, #239	; 0xef
 8006490:	2051      	movs	r0, #81	; 0x51
 8006492:	f7fc f975 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 8006496:	2100      	movs	r1, #0
 8006498:	2052      	movs	r0, #82	; 0x52
 800649a:	f7fc f971 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013f);
 800649e:	f240 113f 	movw	r1, #319	; 0x13f
 80064a2:	2053      	movs	r0, #83	; 0x53
 80064a4:	f7fc f96c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0x2700);
 80064a8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80064ac:	2060      	movs	r0, #96	; 0x60
 80064ae:	f7fc f967 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 80064b2:	2101      	movs	r1, #1
 80064b4:	2061      	movs	r0, #97	; 0x61
 80064b6:	f7fc f963 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x006a,0x0000);
 80064ba:	2100      	movs	r1, #0
 80064bc:	206a      	movs	r0, #106	; 0x6a
 80064be:	f7fc f95f 	bl	8002780 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090,0X0011);
 80064c2:	2111      	movs	r1, #17
 80064c4:	2090      	movs	r0, #144	; 0x90
 80064c6:	f7fc f95b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 80064ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80064ce:	2092      	movs	r0, #146	; 0x92
 80064d0:	f7fc f956 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0093,0x0402);
 80064d4:	f240 4102 	movw	r1, #1026	; 0x402
 80064d8:	2093      	movs	r0, #147	; 0x93
 80064da:	f7fc f951 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0094,0x0002);
 80064de:	2102      	movs	r1, #2
 80064e0:	2094      	movs	r0, #148	; 0x94
 80064e2:	f7fc f94d 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(20);
 80064e6:	2014      	movs	r0, #20
 80064e8:	f000 fd94 	bl	8007014 <HAL_Delay>

		LCD_WriteReg(0x0007,0x0001);
 80064ec:	2101      	movs	r1, #1
 80064ee:	2007      	movs	r0, #7
 80064f0:	f7fc f946 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(20);
 80064f4:	2014      	movs	r0, #20
 80064f6:	f000 fd8d 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0x0007,0x0061);
 80064fa:	2161      	movs	r1, #97	; 0x61
 80064fc:	2007      	movs	r0, #7
 80064fe:	f7fc f93f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0173);
 8006502:	f240 1173 	movw	r1, #371	; 0x173
 8006506:	2007      	movs	r0, #7
 8006508:	f7fc f93a 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0x0020,0x0000);
 800650c:	2100      	movs	r1, #0
 800650e:	2020      	movs	r0, #32
 8006510:	f7fc f936 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0021,0x0000);
 8006514:	2100      	movs	r1, #0
 8006516:	2021      	movs	r0, #33	; 0x21
 8006518:	f7fc f932 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x22);
 800651c:	2122      	movs	r1, #34	; 0x22
 800651e:	2000      	movs	r0, #0
 8006520:	f7fc f92e 	bl	8002780 <LCD_WriteReg>
 8006524:	e311      	b.n	8006b4a <LCD_Init+0x3852>
	}else if(lcddev.id==0xC505)
 8006526:	4b6b      	ldr	r3, [pc, #428]	; (80066d4 <LCD_Init+0x33dc>)
 8006528:	889b      	ldrh	r3, [r3, #4]
 800652a:	f24c 5205 	movw	r2, #50437	; 0xc505
 800652e:	4293      	cmp	r3, r2
 8006530:	f040 80d2 	bne.w	80066d8 <LCD_Init+0x33e0>
	{
		LCD_WriteReg(0x0000,0x0000);
 8006534:	2100      	movs	r1, #0
 8006536:	2000      	movs	r0, #0
 8006538:	f7fc f922 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800653c:	2100      	movs	r1, #0
 800653e:	2000      	movs	r0, #0
 8006540:	f7fc f91e 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(20);
 8006544:	2014      	movs	r0, #20
 8006546:	f000 fd65 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0x0000,0x0000);
 800654a:	2100      	movs	r1, #0
 800654c:	2000      	movs	r0, #0
 800654e:	f7fc f917 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8006552:	2100      	movs	r1, #0
 8006554:	2000      	movs	r0, #0
 8006556:	f7fc f913 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800655a:	2100      	movs	r1, #0
 800655c:	2000      	movs	r0, #0
 800655e:	f7fc f90f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8006562:	2100      	movs	r1, #0
 8006564:	2000      	movs	r0, #0
 8006566:	f7fc f90b 	bl	8002780 <LCD_WriteReg>
 		LCD_WriteReg(0x00a4,0x0001);
 800656a:	2101      	movs	r1, #1
 800656c:	20a4      	movs	r0, #164	; 0xa4
 800656e:	f7fc f907 	bl	8002780 <LCD_WriteReg>
 		HAL_Delay(20);
 8006572:	2014      	movs	r0, #20
 8006574:	f000 fd4e 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8006578:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800657c:	2060      	movs	r0, #96	; 0x60
 800657e:	f7fc f8ff 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0806);
 8006582:	f640 0106 	movw	r1, #2054	; 0x806
 8006586:	2008      	movs	r0, #8
 8006588:	f7fc f8fa 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0703);//gamma setting
 800658c:	f240 7103 	movw	r1, #1795	; 0x703
 8006590:	2030      	movs	r0, #48	; 0x30
 8006592:	f7fc f8f5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0001);
 8006596:	2101      	movs	r1, #1
 8006598:	2031      	movs	r0, #49	; 0x31
 800659a:	f7fc f8f1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0004);
 800659e:	2104      	movs	r1, #4
 80065a0:	2032      	movs	r0, #50	; 0x32
 80065a2:	f7fc f8ed 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0102);
 80065a6:	f44f 7181 	mov.w	r1, #258	; 0x102
 80065aa:	2033      	movs	r0, #51	; 0x33
 80065ac:	f7fc f8e8 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x0300);
 80065b0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80065b4:	2034      	movs	r0, #52	; 0x34
 80065b6:	f7fc f8e3 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0103);
 80065ba:	f240 1103 	movw	r1, #259	; 0x103
 80065be:	2035      	movs	r0, #53	; 0x35
 80065c0:	f7fc f8de 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x001F);
 80065c4:	211f      	movs	r1, #31
 80065c6:	2036      	movs	r0, #54	; 0x36
 80065c8:	f7fc f8da 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0703);
 80065cc:	f240 7103 	movw	r1, #1795	; 0x703
 80065d0:	2037      	movs	r0, #55	; 0x37
 80065d2:	f7fc f8d5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0001);
 80065d6:	2101      	movs	r1, #1
 80065d8:	2038      	movs	r0, #56	; 0x38
 80065da:	f7fc f8d1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0004);
 80065de:	2104      	movs	r1, #4
 80065e0:	2039      	movs	r0, #57	; 0x39
 80065e2:	f7fc f8cd 	bl	8002780 <LCD_WriteReg>



		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80065e6:	2115      	movs	r1, #21
 80065e8:	2090      	movs	r0, #144	; 0x90
 80065ea:	f7fc f8c9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80065ee:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80065f2:	2010      	movs	r0, #16
 80065f4:	f7fc f8c4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0247);	//DC1,DC0,VC
 80065f8:	f240 2147 	movw	r1, #583	; 0x247
 80065fc:	2011      	movs	r0, #17
 80065fe:	f7fc f8bf 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8006602:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8006606:	2012      	movs	r0, #18
 8006608:	f7fc f8ba 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 800660c:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8006610:	2013      	movs	r0, #19
 8006612:	f7fc f8b5 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(120);
 8006616:	2078      	movs	r0, #120	; 0x78
 8006618:	f000 fcfc 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 800661c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006620:	2001      	movs	r0, #1
 8006622:	f7fc f8ad 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8006626:	f44f 7100 	mov.w	r1, #512	; 0x200
 800662a:	2002      	movs	r0, #2
 800662c:	f7fc f8a8 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8006630:	f241 0130 	movw	r1, #4144	; 0x1030
 8006634:	2003      	movs	r0, #3
 8006636:	f7fc f8a3 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800663a:	2108      	movs	r1, #8
 800663c:	200a      	movs	r0, #10
 800663e:	f7fc f89f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006642:	2100      	movs	r1, #0
 8006644:	200c      	movs	r0, #12
 8006646:	f7fc f89b 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800664a:	2120      	movs	r1, #32
 800664c:	200e      	movs	r0, #14
 800664e:	f7fc f897 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8006652:	2100      	movs	r1, #0
 8006654:	200f      	movs	r0, #15
 8006656:	f7fc f893 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800665a:	2100      	movs	r1, #0
 800665c:	2020      	movs	r0, #32
 800665e:	f7fc f88f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8006662:	2100      	movs	r1, #0
 8006664:	2021      	movs	r0, #33	; 0x21
 8006666:	f7fc f88b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x002A,0x003D);	//vcom2
 800666a:	213d      	movs	r1, #61	; 0x3d
 800666c:	202a      	movs	r0, #42	; 0x2a
 800666e:	f7fc f887 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(20);
 8006672:	2014      	movs	r0, #20
 8006674:	f000 fcce 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8006678:	212d      	movs	r1, #45	; 0x2d
 800667a:	2029      	movs	r0, #41	; 0x29
 800667c:	f7fc f880 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8006680:	2100      	movs	r1, #0
 8006682:	2050      	movs	r0, #80	; 0x50
 8006684:	f7fc f87c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8006688:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 800668c:	2051      	movs	r0, #81	; 0x51
 800668e:	f7fc f877 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8006692:	2100      	movs	r1, #0
 8006694:	2052      	movs	r0, #82	; 0x52
 8006696:	f7fc f873 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800669a:	f240 113f 	movw	r1, #319	; 0x13f
 800669e:	2053      	movs	r0, #83	; 0x53
 80066a0:	f7fc f86e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 80066a4:	2100      	movs	r1, #0
 80066a6:	2061      	movs	r0, #97	; 0x61
 80066a8:	f7fc f86a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80066ac:	2100      	movs	r1, #0
 80066ae:	206a      	movs	r0, #106	; 0x6a
 80066b0:	f7fc f866 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0300);
 80066b4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80066b8:	2092      	movs	r0, #146	; 0x92
 80066ba:	f7fc f861 	bl	8002780 <LCD_WriteReg>

 		LCD_WriteReg(0x0093, 0x0005);
 80066be:	2105      	movs	r1, #5
 80066c0:	2093      	movs	r0, #147	; 0x93
 80066c2:	f7fc f85d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80066c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066ca:	2007      	movs	r0, #7
 80066cc:	f7fc f858 	bl	8002780 <LCD_WriteReg>
 80066d0:	e23b      	b.n	8006b4a <LCD_Init+0x3852>
 80066d2:	bf00      	nop
 80066d4:	20000420 	.word	0x20000420
	}else if(lcddev.id==0x4531)//OK |/|/|
 80066d8:	4bbb      	ldr	r3, [pc, #748]	; (80069c8 <LCD_Init+0x36d0>)
 80066da:	889b      	ldrh	r3, [r3, #4]
 80066dc:	f244 5231 	movw	r2, #17713	; 0x4531
 80066e0:	4293      	cmp	r3, r2
 80066e2:	f040 80ba 	bne.w	800685a <LCD_Init+0x3562>
	{
		LCD_WriteReg(0X00,0X0001);
 80066e6:	2101      	movs	r1, #1
 80066e8:	2000      	movs	r0, #0
 80066ea:	f7fc f849 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(10);
 80066ee:	200a      	movs	r0, #10
 80066f0:	f000 fc90 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0X10,0X1628);
 80066f4:	f241 6128 	movw	r1, #5672	; 0x1628
 80066f8:	2010      	movs	r0, #16
 80066fa:	f7fc f841 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X000e);//0x0006
 80066fe:	210e      	movs	r1, #14
 8006700:	2012      	movs	r0, #18
 8006702:	f7fc f83d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X0A39);
 8006706:	f640 2139 	movw	r1, #2617	; 0xa39
 800670a:	2013      	movs	r0, #19
 800670c:	f7fc f838 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(10);
 8006710:	200a      	movs	r0, #10
 8006712:	f000 fc7f 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0X11,0X0040);
 8006716:	2140      	movs	r1, #64	; 0x40
 8006718:	2011      	movs	r0, #17
 800671a:	f7fc f831 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X15,0X0050);
 800671e:	2150      	movs	r1, #80	; 0x50
 8006720:	2015      	movs	r0, #21
 8006722:	f7fc f82d 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(10);
 8006726:	200a      	movs	r0, #10
 8006728:	f000 fc74 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0X12,0X001e);//16
 800672c:	211e      	movs	r1, #30
 800672e:	2012      	movs	r0, #18
 8006730:	f7fc f826 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(10);
 8006734:	200a      	movs	r0, #10
 8006736:	f000 fc6d 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0X10,0X1620);
 800673a:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 800673e:	2010      	movs	r0, #16
 8006740:	f7fc f81e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X2A39);
 8006744:	f642 2139 	movw	r1, #10809	; 0x2a39
 8006748:	2013      	movs	r0, #19
 800674a:	f7fc f819 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(10);
 800674e:	200a      	movs	r0, #10
 8006750:	f000 fc60 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0X01,0X0100);
 8006754:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006758:	2001      	movs	r0, #1
 800675a:	f7fc f811 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 800675e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006762:	2002      	movs	r0, #2
 8006764:	f7fc f80c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1038);//改变方向的
 8006768:	f241 0138 	movw	r1, #4152	; 0x1038
 800676c:	2003      	movs	r0, #3
 800676e:	f7fc f807 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0202);
 8006772:	f240 2102 	movw	r1, #514	; 0x202
 8006776:	2008      	movs	r0, #8
 8006778:	f7fc f802 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 800677c:	2108      	movs	r1, #8
 800677e:	200a      	movs	r0, #10
 8006780:	f7fb fffe 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X30,0X0000);
 8006784:	2100      	movs	r1, #0
 8006786:	2030      	movs	r0, #48	; 0x30
 8006788:	f7fb fffa 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 800678c:	f240 4102 	movw	r1, #1026	; 0x402
 8006790:	2031      	movs	r0, #49	; 0x31
 8006792:	f7fb fff5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0106);
 8006796:	f44f 7183 	mov.w	r1, #262	; 0x106
 800679a:	2032      	movs	r0, #50	; 0x32
 800679c:	f7fb fff0 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0503);
 80067a0:	f240 5103 	movw	r1, #1283	; 0x503
 80067a4:	2033      	movs	r0, #51	; 0x33
 80067a6:	f7fb ffeb 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0104);
 80067aa:	f44f 7182 	mov.w	r1, #260	; 0x104
 80067ae:	2034      	movs	r0, #52	; 0x34
 80067b0:	f7fb ffe6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0301);
 80067b4:	f240 3101 	movw	r1, #769	; 0x301
 80067b8:	2035      	movs	r0, #53	; 0x35
 80067ba:	f7fb ffe1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 80067be:	f240 7107 	movw	r1, #1799	; 0x707
 80067c2:	2036      	movs	r0, #54	; 0x36
 80067c4:	f7fb ffdc 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 80067c8:	f240 3105 	movw	r1, #773	; 0x305
 80067cc:	2037      	movs	r0, #55	; 0x37
 80067ce:	f7fb ffd7 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0208);
 80067d2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80067d6:	2038      	movs	r0, #56	; 0x38
 80067d8:	f7fb ffd2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0F0B);
 80067dc:	f640 710b 	movw	r1, #3851	; 0xf0b
 80067e0:	2039      	movs	r0, #57	; 0x39
 80067e2:	f7fb ffcd 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X41,0X0002);
 80067e6:	2102      	movs	r1, #2
 80067e8:	2041      	movs	r0, #65	; 0x41
 80067ea:	f7fb ffc9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X60,0X2700);
 80067ee:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80067f2:	2060      	movs	r0, #96	; 0x60
 80067f4:	f7fb ffc4 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 80067f8:	2101      	movs	r1, #1
 80067fa:	2061      	movs	r0, #97	; 0x61
 80067fc:	f7fb ffc0 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X0210);
 8006800:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006804:	2090      	movs	r0, #144	; 0x90
 8006806:	f7fb ffbb 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X010A);
 800680a:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800680e:	2092      	movs	r0, #146	; 0x92
 8006810:	f7fb ffb6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0004);
 8006814:	2104      	movs	r1, #4
 8006816:	2093      	movs	r0, #147	; 0x93
 8006818:	f7fb ffb2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0100);
 800681c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006820:	20a0      	movs	r0, #160	; 0xa0
 8006822:	f7fb ffad 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 8006826:	2101      	movs	r1, #1
 8006828:	2007      	movs	r0, #7
 800682a:	f7fb ffa9 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 800682e:	2121      	movs	r1, #33	; 0x21
 8006830:	2007      	movs	r0, #7
 8006832:	f7fb ffa5 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 8006836:	2123      	movs	r1, #35	; 0x23
 8006838:	2007      	movs	r0, #7
 800683a:	f7fb ffa1 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 800683e:	2133      	movs	r1, #51	; 0x33
 8006840:	2007      	movs	r0, #7
 8006842:	f7fb ff9d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 8006846:	f240 1133 	movw	r1, #307	; 0x133
 800684a:	2007      	movs	r0, #7
 800684c:	f7fb ff98 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0000);
 8006850:	2100      	movs	r1, #0
 8006852:	20a0      	movs	r0, #160	; 0xa0
 8006854:	f7fb ff94 	bl	8002780 <LCD_WriteReg>
 8006858:	e177      	b.n	8006b4a <LCD_Init+0x3852>
	}else if(lcddev.id==0x4535)
 800685a:	4b5b      	ldr	r3, [pc, #364]	; (80069c8 <LCD_Init+0x36d0>)
 800685c:	889b      	ldrh	r3, [r3, #4]
 800685e:	f244 5235 	movw	r2, #17717	; 0x4535
 8006862:	4293      	cmp	r3, r2
 8006864:	f040 80b2 	bne.w	80069cc <LCD_Init+0x36d4>
	{
		LCD_WriteReg(0X15,0X0030);
 8006868:	2130      	movs	r1, #48	; 0x30
 800686a:	2015      	movs	r0, #21
 800686c:	f7fb ff88 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X9A,0X0010);
 8006870:	2110      	movs	r1, #16
 8006872:	209a      	movs	r0, #154	; 0x9a
 8006874:	f7fb ff84 	bl	8002780 <LCD_WriteReg>
 		LCD_WriteReg(0X11,0X0020);
 8006878:	2120      	movs	r1, #32
 800687a:	2011      	movs	r0, #17
 800687c:	f7fb ff80 	bl	8002780 <LCD_WriteReg>
 		LCD_WriteReg(0X10,0X3428);
 8006880:	f243 4128 	movw	r1, #13352	; 0x3428
 8006884:	2010      	movs	r0, #16
 8006886:	f7fb ff7b 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X0002);//16
 800688a:	2102      	movs	r1, #2
 800688c:	2012      	movs	r0, #18
 800688e:	f7fb ff77 	bl	8002780 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X1038);
 8006892:	f241 0138 	movw	r1, #4152	; 0x1038
 8006896:	2013      	movs	r0, #19
 8006898:	f7fb ff72 	bl	8002780 <LCD_WriteReg>
 		HAL_Delay(40);
 800689c:	2028      	movs	r0, #40	; 0x28
 800689e:	f000 fbb9 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0X12,0X0012);//16
 80068a2:	2112      	movs	r1, #18
 80068a4:	2012      	movs	r0, #18
 80068a6:	f7fb ff6b 	bl	8002780 <LCD_WriteReg>
		HAL_Delay(40);
 80068aa:	2028      	movs	r0, #40	; 0x28
 80068ac:	f000 fbb2 	bl	8007014 <HAL_Delay>
  		LCD_WriteReg(0X10,0X3420);
 80068b0:	f243 4120 	movw	r1, #13344	; 0x3420
 80068b4:	2010      	movs	r0, #16
 80068b6:	f7fb ff63 	bl	8002780 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X3038);
 80068ba:	f243 0138 	movw	r1, #12344	; 0x3038
 80068be:	2013      	movs	r0, #19
 80068c0:	f7fb ff5e 	bl	8002780 <LCD_WriteReg>
 		HAL_Delay(70);
 80068c4:	2046      	movs	r0, #70	; 0x46
 80068c6:	f000 fba5 	bl	8007014 <HAL_Delay>
		LCD_WriteReg(0X30,0X0000);
 80068ca:	2100      	movs	r1, #0
 80068cc:	2030      	movs	r0, #48	; 0x30
 80068ce:	f7fb ff57 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 80068d2:	f240 4102 	movw	r1, #1026	; 0x402
 80068d6:	2031      	movs	r0, #49	; 0x31
 80068d8:	f7fb ff52 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0307);
 80068dc:	f240 3107 	movw	r1, #775	; 0x307
 80068e0:	2032      	movs	r0, #50	; 0x32
 80068e2:	f7fb ff4d 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0304);
 80068e6:	f44f 7141 	mov.w	r1, #772	; 0x304
 80068ea:	2033      	movs	r0, #51	; 0x33
 80068ec:	f7fb ff48 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0004);
 80068f0:	2104      	movs	r1, #4
 80068f2:	2034      	movs	r0, #52	; 0x34
 80068f4:	f7fb ff44 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0401);
 80068f8:	f240 4101 	movw	r1, #1025	; 0x401
 80068fc:	2035      	movs	r0, #53	; 0x35
 80068fe:	f7fb ff3f 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 8006902:	f240 7107 	movw	r1, #1799	; 0x707
 8006906:	2036      	movs	r0, #54	; 0x36
 8006908:	f7fb ff3a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 800690c:	f240 3105 	movw	r1, #773	; 0x305
 8006910:	2037      	movs	r0, #55	; 0x37
 8006912:	f7fb ff35 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0610);
 8006916:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800691a:	2038      	movs	r0, #56	; 0x38
 800691c:	f7fb ff30 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0610);
 8006920:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8006924:	2039      	movs	r0, #57	; 0x39
 8006926:	f7fb ff2b 	bl	8002780 <LCD_WriteReg>

		LCD_WriteReg(0X01,0X0100);
 800692a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800692e:	2001      	movs	r0, #1
 8006930:	f7fb ff26 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8006934:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006938:	2002      	movs	r0, #2
 800693a:	f7fb ff21 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1030);//改变方向的
 800693e:	f241 0130 	movw	r1, #4144	; 0x1030
 8006942:	2003      	movs	r0, #3
 8006944:	f7fb ff1c 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0808);
 8006948:	f640 0108 	movw	r1, #2056	; 0x808
 800694c:	2008      	movs	r0, #8
 800694e:	f7fb ff17 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 8006952:	2108      	movs	r1, #8
 8006954:	200a      	movs	r0, #10
 8006956:	f7fb ff13 	bl	8002780 <LCD_WriteReg>
 		LCD_WriteReg(0X60,0X2700);
 800695a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800695e:	2060      	movs	r0, #96	; 0x60
 8006960:	f7fb ff0e 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8006964:	2101      	movs	r1, #1
 8006966:	2061      	movs	r0, #97	; 0x61
 8006968:	f7fb ff0a 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X013E);
 800696c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8006970:	2090      	movs	r0, #144	; 0x90
 8006972:	f7fb ff05 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X0100);
 8006976:	f44f 7180 	mov.w	r1, #256	; 0x100
 800697a:	2092      	movs	r0, #146	; 0x92
 800697c:	f7fb ff00 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0100);
 8006980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006984:	2093      	movs	r0, #147	; 0x93
 8006986:	f7fb fefb 	bl	8002780 <LCD_WriteReg>
 		LCD_WriteReg(0XA0,0X3000);
 800698a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800698e:	20a0      	movs	r0, #160	; 0xa0
 8006990:	f7fb fef6 	bl	8002780 <LCD_WriteReg>
 		LCD_WriteReg(0XA3,0X0010);
 8006994:	2110      	movs	r1, #16
 8006996:	20a3      	movs	r0, #163	; 0xa3
 8006998:	f7fb fef2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 800699c:	2101      	movs	r1, #1
 800699e:	2007      	movs	r0, #7
 80069a0:	f7fb feee 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 80069a4:	2121      	movs	r1, #33	; 0x21
 80069a6:	2007      	movs	r0, #7
 80069a8:	f7fb feea 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 80069ac:	2123      	movs	r1, #35	; 0x23
 80069ae:	2007      	movs	r0, #7
 80069b0:	f7fb fee6 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 80069b4:	2133      	movs	r1, #51	; 0x33
 80069b6:	2007      	movs	r0, #7
 80069b8:	f7fb fee2 	bl	8002780 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 80069bc:	f240 1133 	movw	r1, #307	; 0x133
 80069c0:	2007      	movs	r0, #7
 80069c2:	f7fb fedd 	bl	8002780 <LCD_WriteReg>
 80069c6:	e0c0      	b.n	8006b4a <LCD_Init+0x3852>
 80069c8:	20000420 	.word	0x20000420
	}else if(lcddev.id==0X1963)
 80069cc:	4b66      	ldr	r3, [pc, #408]	; (8006b68 <LCD_Init+0x3870>)
 80069ce:	889b      	ldrh	r3, [r3, #4]
 80069d0:	f641 1263 	movw	r2, #6499	; 0x1963
 80069d4:	4293      	cmp	r3, r2
 80069d6:	f040 80b8 	bne.w	8006b4a <LCD_Init+0x3852>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80069da:	20e2      	movs	r0, #226	; 0xe2
 80069dc:	f7fb fea2 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 80069e0:	201d      	movs	r0, #29
 80069e2:	f7fb feaf 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80069e6:	2002      	movs	r0, #2
 80069e8:	f7fb feac 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 80069ec:	2004      	movs	r0, #4
 80069ee:	f7fb fea9 	bl	8002744 <LCD_WR_DATA>
		delay_us(100);
 80069f2:	2064      	movs	r0, #100	; 0x64
 80069f4:	f7fb fb20 	bl	8002038 <delay_us>
		LCD_WR_REG(0xE0);		// Start PLL command
 80069f8:	20e0      	movs	r0, #224	; 0xe0
 80069fa:	f7fb fe93 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80069fe:	2001      	movs	r0, #1
 8006a00:	f7fb fea0 	bl	8002744 <LCD_WR_DATA>
		HAL_Delay(10);
 8006a04:	200a      	movs	r0, #10
 8006a06:	f000 fb05 	bl	8007014 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8006a0a:	20e0      	movs	r0, #224	; 0xe0
 8006a0c:	f7fb fe8a 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8006a10:	2003      	movs	r0, #3
 8006a12:	f7fb fe97 	bl	8002744 <LCD_WR_DATA>
		HAL_Delay(12);
 8006a16:	200c      	movs	r0, #12
 8006a18:	f000 fafc 	bl	8007014 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8006a1c:	2001      	movs	r0, #1
 8006a1e:	f7fb fe81 	bl	8002724 <LCD_WR_REG>
		HAL_Delay(10);
 8006a22:	200a      	movs	r0, #10
 8006a24:	f000 faf6 	bl	8007014 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8006a28:	20e6      	movs	r0, #230	; 0xe6
 8006a2a:	f7fb fe7b 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8006a2e:	202f      	movs	r0, #47	; 0x2f
 8006a30:	f7fb fe88 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8006a34:	20ff      	movs	r0, #255	; 0xff
 8006a36:	f7fb fe85 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8006a3a:	20ff      	movs	r0, #255	; 0xff
 8006a3c:	f7fb fe82 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 8006a40:	20b0      	movs	r0, #176	; 0xb0
 8006a42:	f7fb fe6f 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8006a46:	2020      	movs	r0, #32
 8006a48:	f7fb fe7c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	f7fb fe79 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 8006a52:	2001      	movs	r0, #1
 8006a54:	f7fb fe76 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8006a58:	f240 10df 	movw	r0, #479	; 0x1df
 8006a5c:	f7fb fe72 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 8006a60:	2003      	movs	r0, #3
 8006a62:	f7fb fe6f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8006a66:	f240 301f 	movw	r0, #799	; 0x31f
 8006a6a:	f7fb fe6b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 8006a6e:	2000      	movs	r0, #0
 8006a70:	f7fb fe68 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 8006a74:	20b4      	movs	r0, #180	; 0xb4
 8006a76:	f7fb fe55 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8006a7a:	2002      	movs	r0, #2
 8006a7c:	f7fb fe62 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 8006a80:	f240 20df 	movw	r0, #735	; 0x2df
 8006a84:	f7fb fe5e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f7fb fe5b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 8006a8e:	202e      	movs	r0, #46	; 0x2e
 8006a90:	f7fb fe58 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8006a94:	2000      	movs	r0, #0
 8006a96:	f7fb fe55 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006a9a:	2000      	movs	r0, #0
 8006a9c:	f7fb fe52 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006aa0:	2000      	movs	r0, #0
 8006aa2:	f7fb fe4f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	f7fb fe4c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 8006aac:	20b6      	movs	r0, #182	; 0xb6
 8006aae:	f7fb fe39 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8006ab2:	2003      	movs	r0, #3
 8006ab4:	f7fb fe46 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 8006ab8:	f44f 7053 	mov.w	r0, #844	; 0x34c
 8006abc:	f7fb fe42 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	f7fb fe3f 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 8006ac6:	2017      	movs	r0, #23
 8006ac8:	f7fb fe3c 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8006acc:	2015      	movs	r0, #21
 8006ace:	f7fb fe39 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ad2:	2000      	movs	r0, #0
 8006ad4:	f7fb fe36 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006ad8:	2000      	movs	r0, #0
 8006ada:	f7fb fe33 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 8006ade:	20f0      	movs	r0, #240	; 0xf0
 8006ae0:	f7fb fe20 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8006ae4:	2003      	movs	r0, #3
 8006ae6:	f7fb fe2d 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 8006aea:	2029      	movs	r0, #41	; 0x29
 8006aec:	f7fb fe1a 	bl	8002724 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8006af0:	20d0      	movs	r0, #208	; 0xd0
 8006af2:	f7fb fe17 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8006af6:	2000      	movs	r0, #0
 8006af8:	f7fb fe24 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 8006afc:	20be      	movs	r0, #190	; 0xbe
 8006afe:	f7fb fe11 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8006b02:	2005      	movs	r0, #5
 8006b04:	f7fb fe1e 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8006b08:	20fe      	movs	r0, #254	; 0xfe
 8006b0a:	f7fb fe1b 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 8006b0e:	2001      	movs	r0, #1
 8006b10:	f7fb fe18 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 8006b14:	2000      	movs	r0, #0
 8006b16:	f7fb fe15 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 8006b1a:	2000      	movs	r0, #0
 8006b1c:	f7fb fe12 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 8006b20:	2000      	movs	r0, #0
 8006b22:	f7fb fe0f 	bl	8002744 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8006b26:	20b8      	movs	r0, #184	; 0xb8
 8006b28:	f7fb fdfc 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8006b2c:	2003      	movs	r0, #3
 8006b2e:	f7fb fe09 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 8006b32:	2001      	movs	r0, #1
 8006b34:	f7fb fe06 	bl	8002744 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8006b38:	20ba      	movs	r0, #186	; 0xba
 8006b3a:	f7fb fdf3 	bl	8002724 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8006b3e:	2001      	movs	r0, #1
 8006b40:	f7fb fe00 	bl	8002744 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 8006b44:	2064      	movs	r0, #100	; 0x64
 8006b46:	f7fc fa97 	bl	8003078 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		//默认为竖屏
 8006b4a:	2000      	movs	r0, #0
 8006b4c:	f7fc fac8 	bl	80030e0 <LCD_Display_Dir>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);				//点亮背光
 8006b50:	2201      	movs	r2, #1
 8006b52:	2101      	movs	r1, #1
 8006b54:	4805      	ldr	r0, [pc, #20]	; (8006b6c <LCD_Init+0x3874>)
 8006b56:	f000 fd10 	bl	800757a <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);
 8006b5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006b5e:	f000 f807 	bl	8006b70 <LCD_Clear>
}
 8006b62:	bf00      	nop
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	20000420 	.word	0x20000420
 8006b6c:	40010c00 	.word	0x40010c00

08006b70 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint16_t color)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	80fb      	strh	r3, [r7, #6]
	uint32_t index=0;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 8006b7e:	4b21      	ldr	r3, [pc, #132]	; (8006c04 <LCD_Clear+0x94>)
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 8006b84:	4b1f      	ldr	r3, [pc, #124]	; (8006c04 <LCD_Clear+0x94>)
 8006b86:	885b      	ldrh	r3, [r3, #2]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	fb02 f303 	mul.w	r3, r2, r3
 8006b90:	60bb      	str	r3, [r7, #8]
	if((lcddev.id==0X6804)&&(lcddev.dir==1))//6804横屏的时候特殊处理
 8006b92:	4b1c      	ldr	r3, [pc, #112]	; (8006c04 <LCD_Clear+0x94>)
 8006b94:	889b      	ldrh	r3, [r3, #4]
 8006b96:	f646 0204 	movw	r2, #26628	; 0x6804
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d11a      	bne.n	8006bd4 <LCD_Clear+0x64>
 8006b9e:	4b19      	ldr	r3, [pc, #100]	; (8006c04 <LCD_Clear+0x94>)
 8006ba0:	799b      	ldrb	r3, [r3, #6]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d116      	bne.n	8006bd4 <LCD_Clear+0x64>
	{
 		lcddev.dir=0;
 8006ba6:	4b17      	ldr	r3, [pc, #92]	; (8006c04 <LCD_Clear+0x94>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 8006bac:	4b15      	ldr	r3, [pc, #84]	; (8006c04 <LCD_Clear+0x94>)
 8006bae:	222a      	movs	r2, #42	; 0x2a
 8006bb0:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 8006bb2:	4b14      	ldr	r3, [pc, #80]	; (8006c04 <LCD_Clear+0x94>)
 8006bb4:	222b      	movs	r2, #43	; 0x2b
 8006bb6:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00,0x0000);		//设置光标位置
 8006bb8:	2100      	movs	r1, #0
 8006bba:	2000      	movs	r0, #0
 8006bbc:	f7fb fe18 	bl	80027f0 <LCD_SetCursor>
 		lcddev.dir=1;
 8006bc0:	4b10      	ldr	r3, [pc, #64]	; (8006c04 <LCD_Clear+0x94>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 8006bc6:	4b0f      	ldr	r3, [pc, #60]	; (8006c04 <LCD_Clear+0x94>)
 8006bc8:	222b      	movs	r2, #43	; 0x2b
 8006bca:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 8006bcc:	4b0d      	ldr	r3, [pc, #52]	; (8006c04 <LCD_Clear+0x94>)
 8006bce:	222a      	movs	r2, #42	; 0x2a
 8006bd0:	819a      	strh	r2, [r3, #12]
 8006bd2:	e003      	b.n	8006bdc <LCD_Clear+0x6c>
 	}else LCD_SetCursor(0x00,0x0000);	//设置光标位置
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	f7fb fe0a 	bl	80027f0 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 8006bdc:	f7fb fdfa 	bl	80027d4 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	e005      	b.n	8006bf2 <LCD_Clear+0x82>
	{
		LCD->LCD_RAM=color;
 8006be6:	4a08      	ldr	r2, [pc, #32]	; (8006c08 <LCD_Clear+0x98>)
 8006be8:	88fb      	ldrh	r3, [r7, #6]
 8006bea:	8053      	strh	r3, [r2, #2]
	for(index=0;index<totalpoint;index++)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d3f5      	bcc.n	8006be6 <LCD_Clear+0x76>
	}
}
 8006bfa:	bf00      	nop
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	20000420 	.word	0x20000420
 8006c08:	6c0007fe 	.word	0x6c0007fe

08006c0c <LCD_Fill>:
//在指定区域内填充单个颜色
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Fill(uint16_t sx,uint16_t sy,uint16_t ex,uint16_t ey,uint16_t color)
{
 8006c0c:	b590      	push	{r4, r7, lr}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	af02      	add	r7, sp, #8
 8006c12:	4604      	mov	r4, r0
 8006c14:	4608      	mov	r0, r1
 8006c16:	4611      	mov	r1, r2
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	80fb      	strh	r3, [r7, #6]
 8006c1e:	4603      	mov	r3, r0
 8006c20:	80bb      	strh	r3, [r7, #4]
 8006c22:	460b      	mov	r3, r1
 8006c24:	807b      	strh	r3, [r7, #2]
 8006c26:	4613      	mov	r3, r2
 8006c28:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	uint16_t xlen=0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if((lcddev.id==0X6804)&&(lcddev.dir==1))	//6804横屏的时候特殊处理
 8006c2e:	4b32      	ldr	r3, [pc, #200]	; (8006cf8 <LCD_Fill+0xec>)
 8006c30:	889b      	ldrh	r3, [r3, #4]
 8006c32:	f646 0204 	movw	r2, #26628	; 0x6804
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d133      	bne.n	8006ca2 <LCD_Fill+0x96>
 8006c3a:	4b2f      	ldr	r3, [pc, #188]	; (8006cf8 <LCD_Fill+0xec>)
 8006c3c:	799b      	ldrb	r3, [r3, #6]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d12f      	bne.n	8006ca2 <LCD_Fill+0x96>
	{
		temp=sx;
 8006c42:	88fb      	ldrh	r3, [r7, #6]
 8006c44:	813b      	strh	r3, [r7, #8]
		sx=sy;
 8006c46:	88bb      	ldrh	r3, [r7, #4]
 8006c48:	80fb      	strh	r3, [r7, #6]
		sy=lcddev.width-ex-1;
 8006c4a:	4b2b      	ldr	r3, [pc, #172]	; (8006cf8 <LCD_Fill+0xec>)
 8006c4c:	881a      	ldrh	r2, [r3, #0]
 8006c4e:	887b      	ldrh	r3, [r7, #2]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	3b01      	subs	r3, #1
 8006c56:	80bb      	strh	r3, [r7, #4]
		ex=ey;
 8006c58:	883b      	ldrh	r3, [r7, #0]
 8006c5a:	807b      	strh	r3, [r7, #2]
		ey=lcddev.width-temp-1;
 8006c5c:	4b26      	ldr	r3, [pc, #152]	; (8006cf8 <LCD_Fill+0xec>)
 8006c5e:	881a      	ldrh	r2, [r3, #0]
 8006c60:	893b      	ldrh	r3, [r7, #8]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	3b01      	subs	r3, #1
 8006c68:	803b      	strh	r3, [r7, #0]
 		lcddev.dir=0;
 8006c6a:	4b23      	ldr	r3, [pc, #140]	; (8006cf8 <LCD_Fill+0xec>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 8006c70:	4b21      	ldr	r3, [pc, #132]	; (8006cf8 <LCD_Fill+0xec>)
 8006c72:	222a      	movs	r2, #42	; 0x2a
 8006c74:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 8006c76:	4b20      	ldr	r3, [pc, #128]	; (8006cf8 <LCD_Fill+0xec>)
 8006c78:	222b      	movs	r2, #43	; 0x2b
 8006c7a:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx,sy,ex,ey,color);
 8006c7c:	883c      	ldrh	r4, [r7, #0]
 8006c7e:	887a      	ldrh	r2, [r7, #2]
 8006c80:	88b9      	ldrh	r1, [r7, #4]
 8006c82:	88f8      	ldrh	r0, [r7, #6]
 8006c84:	8c3b      	ldrh	r3, [r7, #32]
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	4623      	mov	r3, r4
 8006c8a:	f7ff ffbf 	bl	8006c0c <LCD_Fill>
 		lcddev.dir=1;
 8006c8e:	4b1a      	ldr	r3, [pc, #104]	; (8006cf8 <LCD_Fill+0xec>)
 8006c90:	2201      	movs	r2, #1
 8006c92:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 8006c94:	4b18      	ldr	r3, [pc, #96]	; (8006cf8 <LCD_Fill+0xec>)
 8006c96:	222b      	movs	r2, #43	; 0x2b
 8006c98:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 8006c9a:	4b17      	ldr	r3, [pc, #92]	; (8006cf8 <LCD_Fill+0xec>)
 8006c9c:	222a      	movs	r2, #42	; 0x2a
 8006c9e:	819a      	strh	r2, [r3, #12]
 8006ca0:	e025      	b.n	8006cee <LCD_Fill+0xe2>
 	}else
	{
		xlen=ex-sx+1;
 8006ca2:	887a      	ldrh	r2, [r7, #2]
 8006ca4:	88fb      	ldrh	r3, [r7, #6]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	3301      	adds	r3, #1
 8006cac:	817b      	strh	r3, [r7, #10]
		for(i=sy;i<=ey;i++)
 8006cae:	88bb      	ldrh	r3, [r7, #4]
 8006cb0:	81fb      	strh	r3, [r7, #14]
 8006cb2:	e017      	b.n	8006ce4 <LCD_Fill+0xd8>
		{
		 	LCD_SetCursor(sx,i);      				//设置光标位置
 8006cb4:	89fa      	ldrh	r2, [r7, #14]
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	4611      	mov	r1, r2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fb fd98 	bl	80027f0 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM
 8006cc0:	f7fb fd88 	bl	80027d4 <LCD_WriteRAM_Prepare>
			for(j=0;j<xlen;j++)LCD->LCD_RAM=color;	//显示颜色
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	81bb      	strh	r3, [r7, #12]
 8006cc8:	e005      	b.n	8006cd6 <LCD_Fill+0xca>
 8006cca:	4a0c      	ldr	r2, [pc, #48]	; (8006cfc <LCD_Fill+0xf0>)
 8006ccc:	8c3b      	ldrh	r3, [r7, #32]
 8006cce:	8053      	strh	r3, [r2, #2]
 8006cd0:	89bb      	ldrh	r3, [r7, #12]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	81bb      	strh	r3, [r7, #12]
 8006cd6:	89ba      	ldrh	r2, [r7, #12]
 8006cd8:	897b      	ldrh	r3, [r7, #10]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d3f5      	bcc.n	8006cca <LCD_Fill+0xbe>
		for(i=sy;i<=ey;i++)
 8006cde:	89fb      	ldrh	r3, [r7, #14]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	81fb      	strh	r3, [r7, #14]
 8006ce4:	89fa      	ldrh	r2, [r7, #14]
 8006ce6:	883b      	ldrh	r3, [r7, #0]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d9e3      	bls.n	8006cb4 <LCD_Fill+0xa8>
		}
	}
}
 8006cec:	bf00      	nop
 8006cee:	bf00      	nop
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd90      	pop	{r4, r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20000420 	.word	0x20000420
 8006cfc:	6c0007fe 	.word	0x6c0007fe

08006d00 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	4604      	mov	r4, r0
 8006d08:	4608      	mov	r0, r1
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	4623      	mov	r3, r4
 8006d10:	80fb      	strh	r3, [r7, #6]
 8006d12:	4603      	mov	r3, r0
 8006d14:	80bb      	strh	r3, [r7, #4]
 8006d16:	460b      	mov	r3, r1
 8006d18:	70fb      	strb	r3, [r7, #3]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	70bb      	strb	r3, [r7, #2]
	uint8_t temp,t1,t;
	uint16_t y0=y;
 8006d1e:	88bb      	ldrh	r3, [r7, #4]
 8006d20:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 8006d22:	78bb      	ldrb	r3, [r7, #2]
 8006d24:	08db      	lsrs	r3, r3, #3
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	78bb      	ldrb	r3, [r7, #2]
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	bf14      	ite	ne
 8006d36:	2301      	movne	r3, #1
 8006d38:	2300      	moveq	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	4413      	add	r3, r2
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	78ba      	ldrb	r2, [r7, #2]
 8006d42:	0852      	lsrs	r2, r2, #1
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	fb02 f303 	mul.w	r3, r2, r3
 8006d4a:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8006d4c:	78fb      	ldrb	r3, [r7, #3]
 8006d4e:	3b20      	subs	r3, #32
 8006d50:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 8006d52:	2300      	movs	r3, #0
 8006d54:	737b      	strb	r3, [r7, #13]
 8006d56:	e08f      	b.n	8006e78 <LCD_ShowChar+0x178>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 8006d58:	78bb      	ldrb	r3, [r7, #2]
 8006d5a:	2b0c      	cmp	r3, #12
 8006d5c:	d10b      	bne.n	8006d76 <LCD_ShowChar+0x76>
 8006d5e:	78fa      	ldrb	r2, [r7, #3]
 8006d60:	7b79      	ldrb	r1, [r7, #13]
 8006d62:	484b      	ldr	r0, [pc, #300]	; (8006e90 <LCD_ShowChar+0x190>)
 8006d64:	4613      	mov	r3, r2
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	4413      	add	r3, r2
 8006d6a:	009b      	lsls	r3, r3, #2
 8006d6c:	4403      	add	r3, r0
 8006d6e:	440b      	add	r3, r1
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	73fb      	strb	r3, [r7, #15]
 8006d74:	e03f      	b.n	8006df6 <LCD_ShowChar+0xf6>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 8006d76:	78bb      	ldrb	r3, [r7, #2]
 8006d78:	2b10      	cmp	r3, #16
 8006d7a:	d108      	bne.n	8006d8e <LCD_ShowChar+0x8e>
 8006d7c:	78fa      	ldrb	r2, [r7, #3]
 8006d7e:	7b7b      	ldrb	r3, [r7, #13]
 8006d80:	4944      	ldr	r1, [pc, #272]	; (8006e94 <LCD_ShowChar+0x194>)
 8006d82:	0112      	lsls	r2, r2, #4
 8006d84:	440a      	add	r2, r1
 8006d86:	4413      	add	r3, r2
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	73fb      	strb	r3, [r7, #15]
 8006d8c:	e033      	b.n	8006df6 <LCD_ShowChar+0xf6>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 8006d8e:	78bb      	ldrb	r3, [r7, #2]
 8006d90:	2b18      	cmp	r3, #24
 8006d92:	d10b      	bne.n	8006dac <LCD_ShowChar+0xac>
 8006d94:	78fa      	ldrb	r2, [r7, #3]
 8006d96:	7b79      	ldrb	r1, [r7, #13]
 8006d98:	483f      	ldr	r0, [pc, #252]	; (8006e98 <LCD_ShowChar+0x198>)
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	00db      	lsls	r3, r3, #3
 8006d9e:	4413      	add	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4403      	add	r3, r0
 8006da4:	440b      	add	r3, r1
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	73fb      	strb	r3, [r7, #15]
 8006daa:	e024      	b.n	8006df6 <LCD_ShowChar+0xf6>
		else if(size==32)temp=asc2_3216[num][t];    //调用3216字体
 8006dac:	78bb      	ldrb	r3, [r7, #2]
 8006dae:	2b20      	cmp	r3, #32
 8006db0:	d108      	bne.n	8006dc4 <LCD_ShowChar+0xc4>
 8006db2:	78fa      	ldrb	r2, [r7, #3]
 8006db4:	7b7b      	ldrb	r3, [r7, #13]
 8006db6:	4939      	ldr	r1, [pc, #228]	; (8006e9c <LCD_ShowChar+0x19c>)
 8006db8:	0192      	lsls	r2, r2, #6
 8006dba:	440a      	add	r2, r1
 8006dbc:	4413      	add	r3, r2
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	73fb      	strb	r3, [r7, #15]
 8006dc2:	e018      	b.n	8006df6 <LCD_ShowChar+0xf6>
		else if(size==48)temp=asc2_4824[num][t];    //调用4824字体
 8006dc4:	78bb      	ldrb	r3, [r7, #2]
 8006dc6:	2b30      	cmp	r3, #48	; 0x30
 8006dc8:	d10a      	bne.n	8006de0 <LCD_ShowChar+0xe0>
 8006dca:	78fa      	ldrb	r2, [r7, #3]
 8006dcc:	7b7b      	ldrb	r3, [r7, #13]
 8006dce:	4934      	ldr	r1, [pc, #208]	; (8006ea0 <LCD_ShowChar+0x1a0>)
 8006dd0:	20a8      	movs	r0, #168	; 0xa8
 8006dd2:	fb00 f202 	mul.w	r2, r0, r2
 8006dd6:	440a      	add	r2, r1
 8006dd8:	4413      	add	r3, r2
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	73fb      	strb	r3, [r7, #15]
 8006dde:	e00a      	b.n	8006df6 <LCD_ShowChar+0xf6>
		else if(size==64)temp=asc2_6432[num][t];    //调用6432字体
 8006de0:	78bb      	ldrb	r3, [r7, #2]
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d14e      	bne.n	8006e84 <LCD_ShowChar+0x184>
 8006de6:	78fa      	ldrb	r2, [r7, #3]
 8006de8:	7b7b      	ldrb	r3, [r7, #13]
 8006dea:	492e      	ldr	r1, [pc, #184]	; (8006ea4 <LCD_ShowChar+0x1a4>)
 8006dec:	0212      	lsls	r2, r2, #8
 8006dee:	440a      	add	r2, r1
 8006df0:	4413      	add	r3, r2
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 8006df6:	2300      	movs	r3, #0
 8006df8:	73bb      	strb	r3, [r7, #14]
 8006dfa:	e035      	b.n	8006e68 <LCD_ShowChar+0x168>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 8006dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	da07      	bge.n	8006e14 <LCD_ShowChar+0x114>
 8006e04:	4b28      	ldr	r3, [pc, #160]	; (8006ea8 <LCD_ShowChar+0x1a8>)
 8006e06:	881a      	ldrh	r2, [r3, #0]
 8006e08:	88b9      	ldrh	r1, [r7, #4]
 8006e0a:	88fb      	ldrh	r3, [r7, #6]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fc f819 	bl	8002e44 <LCD_Fast_DrawPoint>
 8006e12:	e00a      	b.n	8006e2a <LCD_ShowChar+0x12a>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8006e14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d106      	bne.n	8006e2a <LCD_ShowChar+0x12a>
 8006e1c:	4b23      	ldr	r3, [pc, #140]	; (8006eac <LCD_ShowChar+0x1ac>)
 8006e1e:	881a      	ldrh	r2, [r3, #0]
 8006e20:	88b9      	ldrh	r1, [r7, #4]
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fc f80d 	bl	8002e44 <LCD_Fast_DrawPoint>
			temp<<=1;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	73fb      	strb	r3, [r7, #15]
			y++;
 8006e30:	88bb      	ldrh	r3, [r7, #4]
 8006e32:	3301      	adds	r3, #1
 8006e34:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 8006e36:	4b1e      	ldr	r3, [pc, #120]	; (8006eb0 <LCD_ShowChar+0x1b0>)
 8006e38:	885b      	ldrh	r3, [r3, #2]
 8006e3a:	88ba      	ldrh	r2, [r7, #4]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d223      	bcs.n	8006e88 <LCD_ShowChar+0x188>
			if((y-y0)==size)
 8006e40:	88ba      	ldrh	r2, [r7, #4]
 8006e42:	897b      	ldrh	r3, [r7, #10]
 8006e44:	1ad2      	subs	r2, r2, r3
 8006e46:	78bb      	ldrb	r3, [r7, #2]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d10a      	bne.n	8006e62 <LCD_ShowChar+0x162>
			{
				y=y0;
 8006e4c:	897b      	ldrh	r3, [r7, #10]
 8006e4e:	80bb      	strh	r3, [r7, #4]
				x++;
 8006e50:	88fb      	ldrh	r3, [r7, #6]
 8006e52:	3301      	adds	r3, #1
 8006e54:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 8006e56:	4b16      	ldr	r3, [pc, #88]	; (8006eb0 <LCD_ShowChar+0x1b0>)
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	88fa      	ldrh	r2, [r7, #6]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d307      	bcc.n	8006e70 <LCD_ShowChar+0x170>
 8006e60:	e013      	b.n	8006e8a <LCD_ShowChar+0x18a>
		for(t1=0;t1<8;t1++)
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
 8006e64:	3301      	adds	r3, #1
 8006e66:	73bb      	strb	r3, [r7, #14]
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	2b07      	cmp	r3, #7
 8006e6c:	d9c6      	bls.n	8006dfc <LCD_ShowChar+0xfc>
 8006e6e:	e000      	b.n	8006e72 <LCD_ShowChar+0x172>
				break;
 8006e70:	bf00      	nop
	for(t=0;t<csize;t++)
 8006e72:	7b7b      	ldrb	r3, [r7, #13]
 8006e74:	3301      	adds	r3, #1
 8006e76:	737b      	strb	r3, [r7, #13]
 8006e78:	7b7a      	ldrb	r2, [r7, #13]
 8006e7a:	7a7b      	ldrb	r3, [r7, #9]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	f4ff af6b 	bcc.w	8006d58 <LCD_ShowChar+0x58>
 8006e82:	e002      	b.n	8006e8a <LCD_ShowChar+0x18a>
		else return;								//没有的字库
 8006e84:	bf00      	nop
 8006e86:	e000      	b.n	8006e8a <LCD_ShowChar+0x18a>
			if(y>=lcddev.height)return;		//超区域了
 8006e88:	bf00      	nop
			}
		}
	}
}
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd90      	pop	{r4, r7, pc}
 8006e90:	0800d9f4 	.word	0x0800d9f4
 8006e94:	0800de68 	.word	0x0800de68
 8006e98:	0800e458 	.word	0x0800e458
 8006e9c:	0800f1b4 	.word	0x0800f1b4
 8006ea0:	08010974 	.word	0x08010974
 8006ea4:	080147cc 	.word	0x080147cc
 8006ea8:	20000210 	.word	0x20000210
 8006eac:	2000000a 	.word	0x2000000a
 8006eb0:	20000420 	.word	0x20000420

08006eb4 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 8006eb4:	b590      	push	{r4, r7, lr}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af02      	add	r7, sp, #8
 8006eba:	4604      	mov	r4, r0
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4623      	mov	r3, r4
 8006ec4:	80fb      	strh	r3, [r7, #6]
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	80bb      	strh	r3, [r7, #4]
 8006eca:	460b      	mov	r3, r1
 8006ecc:	807b      	strh	r3, [r7, #2]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8006ed6:	887a      	ldrh	r2, [r7, #2]
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	4413      	add	r3, r2
 8006edc:	807b      	strh	r3, [r7, #2]
	height+=y;
 8006ede:	883a      	ldrh	r2, [r7, #0]
 8006ee0:	88bb      	ldrh	r3, [r7, #4]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8006ee6:	e024      	b.n	8006f32 <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 8006ee8:	88fa      	ldrh	r2, [r7, #6]
 8006eea:	887b      	ldrh	r3, [r7, #2]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d307      	bcc.n	8006f00 <LCD_ShowString+0x4c>
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	80fb      	strh	r3, [r7, #6]
 8006ef4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	88bb      	ldrh	r3, [r7, #4]
 8006efc:	4413      	add	r3, r2
 8006efe:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 8006f00:	88ba      	ldrh	r2, [r7, #4]
 8006f02:	883b      	ldrh	r3, [r7, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d21d      	bcs.n	8006f44 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	781a      	ldrb	r2, [r3, #0]
 8006f0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f10:	88b9      	ldrh	r1, [r7, #4]
 8006f12:	88f8      	ldrh	r0, [r7, #6]
 8006f14:	2400      	movs	r4, #0
 8006f16:	9400      	str	r4, [sp, #0]
 8006f18:	f7ff fef2 	bl	8006d00 <LCD_ShowChar>
        x+=size/2;
 8006f1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f20:	085b      	lsrs	r3, r3, #1
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	4413      	add	r3, r2
 8006f2a:	80fb      	strh	r3, [r7, #6]
        p++;
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2e:	3301      	adds	r3, #1
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	2b7e      	cmp	r3, #126	; 0x7e
 8006f38:	d805      	bhi.n	8006f46 <LCD_ShowString+0x92>
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b1f      	cmp	r3, #31
 8006f40:	d8d2      	bhi.n	8006ee8 <LCD_ShowString+0x34>
    }
}
 8006f42:	e000      	b.n	8006f46 <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8006f44:	bf00      	nop
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd90      	pop	{r4, r7, pc}
	...

08006f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f54:	4b08      	ldr	r3, [pc, #32]	; (8006f78 <HAL_Init+0x28>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a07      	ldr	r2, [pc, #28]	; (8006f78 <HAL_Init+0x28>)
 8006f5a:	f043 0310 	orr.w	r3, r3, #16
 8006f5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f60:	2003      	movs	r0, #3
 8006f62:	f000 f92b 	bl	80071bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f66:	2000      	movs	r0, #0
 8006f68:	f000 f808 	bl	8006f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f6c:	f7fa fedc 	bl	8001d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	40022000 	.word	0x40022000

08006f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006f84:	4b12      	ldr	r3, [pc, #72]	; (8006fd0 <HAL_InitTick+0x54>)
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	4b12      	ldr	r3, [pc, #72]	; (8006fd4 <HAL_InitTick+0x58>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 f935 	bl	800720a <HAL_SYSTICK_Config>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e00e      	b.n	8006fc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b0f      	cmp	r3, #15
 8006fae:	d80a      	bhi.n	8006fc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	6879      	ldr	r1, [r7, #4]
 8006fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fb8:	f000 f90b 	bl	80071d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006fbc:	4a06      	ldr	r2, [pc, #24]	; (8006fd8 <HAL_InitTick+0x5c>)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e000      	b.n	8006fc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20000004 	.word	0x20000004
 8006fd4:	20000010 	.word	0x20000010
 8006fd8:	2000000c 	.word	0x2000000c

08006fdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006fe0:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <HAL_IncTick+0x1c>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <HAL_IncTick+0x20>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4413      	add	r3, r2
 8006fec:	4a03      	ldr	r2, [pc, #12]	; (8006ffc <HAL_IncTick+0x20>)
 8006fee:	6013      	str	r3, [r2, #0]
}
 8006ff0:	bf00      	nop
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bc80      	pop	{r7}
 8006ff6:	4770      	bx	lr
 8006ff8:	20000010 	.word	0x20000010
 8006ffc:	20000430 	.word	0x20000430

08007000 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
  return uwTick;
 8007004:	4b02      	ldr	r3, [pc, #8]	; (8007010 <HAL_GetTick+0x10>)
 8007006:	681b      	ldr	r3, [r3, #0]
}
 8007008:	4618      	mov	r0, r3
 800700a:	46bd      	mov	sp, r7
 800700c:	bc80      	pop	{r7}
 800700e:	4770      	bx	lr
 8007010:	20000430 	.word	0x20000430

08007014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800701c:	f7ff fff0 	bl	8007000 <HAL_GetTick>
 8007020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d005      	beq.n	800703a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800702e:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <HAL_Delay+0x44>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800703a:	bf00      	nop
 800703c:	f7ff ffe0 	bl	8007000 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	429a      	cmp	r2, r3
 800704a:	d8f7      	bhi.n	800703c <HAL_Delay+0x28>
  {
  }
}
 800704c:	bf00      	nop
 800704e:	bf00      	nop
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	20000010 	.word	0x20000010

0800705c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800706c:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <__NVIC_SetPriorityGrouping+0x44>)
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007072:	68ba      	ldr	r2, [r7, #8]
 8007074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007078:	4013      	ands	r3, r2
 800707a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800708c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800708e:	4a04      	ldr	r2, [pc, #16]	; (80070a0 <__NVIC_SetPriorityGrouping+0x44>)
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	60d3      	str	r3, [r2, #12]
}
 8007094:	bf00      	nop
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	bc80      	pop	{r7}
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	e000ed00 	.word	0xe000ed00

080070a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070a4:	b480      	push	{r7}
 80070a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070a8:	4b04      	ldr	r3, [pc, #16]	; (80070bc <__NVIC_GetPriorityGrouping+0x18>)
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	0a1b      	lsrs	r3, r3, #8
 80070ae:	f003 0307 	and.w	r3, r3, #7
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bc80      	pop	{r7}
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	e000ed00 	.word	0xe000ed00

080070c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	4603      	mov	r3, r0
 80070c8:	6039      	str	r1, [r7, #0]
 80070ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	db0a      	blt.n	80070ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	490c      	ldr	r1, [pc, #48]	; (800710c <__NVIC_SetPriority+0x4c>)
 80070da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070de:	0112      	lsls	r2, r2, #4
 80070e0:	b2d2      	uxtb	r2, r2
 80070e2:	440b      	add	r3, r1
 80070e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80070e8:	e00a      	b.n	8007100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	4908      	ldr	r1, [pc, #32]	; (8007110 <__NVIC_SetPriority+0x50>)
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	f003 030f 	and.w	r3, r3, #15
 80070f6:	3b04      	subs	r3, #4
 80070f8:	0112      	lsls	r2, r2, #4
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	440b      	add	r3, r1
 80070fe:	761a      	strb	r2, [r3, #24]
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	bc80      	pop	{r7}
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	e000e100 	.word	0xe000e100
 8007110:	e000ed00 	.word	0xe000ed00

08007114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007114:	b480      	push	{r7}
 8007116:	b089      	sub	sp, #36	; 0x24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f003 0307 	and.w	r3, r3, #7
 8007126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f1c3 0307 	rsb	r3, r3, #7
 800712e:	2b04      	cmp	r3, #4
 8007130:	bf28      	it	cs
 8007132:	2304      	movcs	r3, #4
 8007134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	3304      	adds	r3, #4
 800713a:	2b06      	cmp	r3, #6
 800713c:	d902      	bls.n	8007144 <NVIC_EncodePriority+0x30>
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	3b03      	subs	r3, #3
 8007142:	e000      	b.n	8007146 <NVIC_EncodePriority+0x32>
 8007144:	2300      	movs	r3, #0
 8007146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007148:	f04f 32ff 	mov.w	r2, #4294967295
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	fa02 f303 	lsl.w	r3, r2, r3
 8007152:	43da      	mvns	r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	401a      	ands	r2, r3
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800715c:	f04f 31ff 	mov.w	r1, #4294967295
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	fa01 f303 	lsl.w	r3, r1, r3
 8007166:	43d9      	mvns	r1, r3
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800716c:	4313      	orrs	r3, r2
         );
}
 800716e:	4618      	mov	r0, r3
 8007170:	3724      	adds	r7, #36	; 0x24
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr

08007178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3b01      	subs	r3, #1
 8007184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007188:	d301      	bcc.n	800718e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800718a:	2301      	movs	r3, #1
 800718c:	e00f      	b.n	80071ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800718e:	4a0a      	ldr	r2, [pc, #40]	; (80071b8 <SysTick_Config+0x40>)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	3b01      	subs	r3, #1
 8007194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007196:	210f      	movs	r1, #15
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	f7ff ff90 	bl	80070c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <SysTick_Config+0x40>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071a6:	4b04      	ldr	r3, [pc, #16]	; (80071b8 <SysTick_Config+0x40>)
 80071a8:	2207      	movs	r2, #7
 80071aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	e000e010 	.word	0xe000e010

080071bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff ff49 	bl	800705c <__NVIC_SetPriorityGrouping>
}
 80071ca:	bf00      	nop
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b086      	sub	sp, #24
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	4603      	mov	r3, r0
 80071da:	60b9      	str	r1, [r7, #8]
 80071dc:	607a      	str	r2, [r7, #4]
 80071de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80071e4:	f7ff ff5e 	bl	80070a4 <__NVIC_GetPriorityGrouping>
 80071e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	6978      	ldr	r0, [r7, #20]
 80071f0:	f7ff ff90 	bl	8007114 <NVIC_EncodePriority>
 80071f4:	4602      	mov	r2, r0
 80071f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071fa:	4611      	mov	r1, r2
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7ff ff5f 	bl	80070c0 <__NVIC_SetPriority>
}
 8007202:	bf00      	nop
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b082      	sub	sp, #8
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f7ff ffb0 	bl	8007178 <SysTick_Config>
 8007218:	4603      	mov	r3, r0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
	...

08007224 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007224:	b480      	push	{r7}
 8007226:	b08b      	sub	sp, #44	; 0x2c
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800722e:	2300      	movs	r3, #0
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007232:	2300      	movs	r3, #0
 8007234:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007236:	e179      	b.n	800752c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007238:	2201      	movs	r2, #1
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	fa02 f303 	lsl.w	r3, r2, r3
 8007240:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	4013      	ands	r3, r2
 800724a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	429a      	cmp	r2, r3
 8007252:	f040 8168 	bne.w	8007526 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	4aa0      	ldr	r2, [pc, #640]	; (80074dc <HAL_GPIO_Init+0x2b8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d05e      	beq.n	800731e <HAL_GPIO_Init+0xfa>
 8007260:	4a9e      	ldr	r2, [pc, #632]	; (80074dc <HAL_GPIO_Init+0x2b8>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d875      	bhi.n	8007352 <HAL_GPIO_Init+0x12e>
 8007266:	4a9e      	ldr	r2, [pc, #632]	; (80074e0 <HAL_GPIO_Init+0x2bc>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d058      	beq.n	800731e <HAL_GPIO_Init+0xfa>
 800726c:	4a9c      	ldr	r2, [pc, #624]	; (80074e0 <HAL_GPIO_Init+0x2bc>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d86f      	bhi.n	8007352 <HAL_GPIO_Init+0x12e>
 8007272:	4a9c      	ldr	r2, [pc, #624]	; (80074e4 <HAL_GPIO_Init+0x2c0>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d052      	beq.n	800731e <HAL_GPIO_Init+0xfa>
 8007278:	4a9a      	ldr	r2, [pc, #616]	; (80074e4 <HAL_GPIO_Init+0x2c0>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d869      	bhi.n	8007352 <HAL_GPIO_Init+0x12e>
 800727e:	4a9a      	ldr	r2, [pc, #616]	; (80074e8 <HAL_GPIO_Init+0x2c4>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d04c      	beq.n	800731e <HAL_GPIO_Init+0xfa>
 8007284:	4a98      	ldr	r2, [pc, #608]	; (80074e8 <HAL_GPIO_Init+0x2c4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d863      	bhi.n	8007352 <HAL_GPIO_Init+0x12e>
 800728a:	4a98      	ldr	r2, [pc, #608]	; (80074ec <HAL_GPIO_Init+0x2c8>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d046      	beq.n	800731e <HAL_GPIO_Init+0xfa>
 8007290:	4a96      	ldr	r2, [pc, #600]	; (80074ec <HAL_GPIO_Init+0x2c8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d85d      	bhi.n	8007352 <HAL_GPIO_Init+0x12e>
 8007296:	2b12      	cmp	r3, #18
 8007298:	d82a      	bhi.n	80072f0 <HAL_GPIO_Init+0xcc>
 800729a:	2b12      	cmp	r3, #18
 800729c:	d859      	bhi.n	8007352 <HAL_GPIO_Init+0x12e>
 800729e:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <HAL_GPIO_Init+0x80>)
 80072a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a4:	0800731f 	.word	0x0800731f
 80072a8:	080072f9 	.word	0x080072f9
 80072ac:	0800730b 	.word	0x0800730b
 80072b0:	0800734d 	.word	0x0800734d
 80072b4:	08007353 	.word	0x08007353
 80072b8:	08007353 	.word	0x08007353
 80072bc:	08007353 	.word	0x08007353
 80072c0:	08007353 	.word	0x08007353
 80072c4:	08007353 	.word	0x08007353
 80072c8:	08007353 	.word	0x08007353
 80072cc:	08007353 	.word	0x08007353
 80072d0:	08007353 	.word	0x08007353
 80072d4:	08007353 	.word	0x08007353
 80072d8:	08007353 	.word	0x08007353
 80072dc:	08007353 	.word	0x08007353
 80072e0:	08007353 	.word	0x08007353
 80072e4:	08007353 	.word	0x08007353
 80072e8:	08007301 	.word	0x08007301
 80072ec:	08007315 	.word	0x08007315
 80072f0:	4a7f      	ldr	r2, [pc, #508]	; (80074f0 <HAL_GPIO_Init+0x2cc>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d013      	beq.n	800731e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80072f6:	e02c      	b.n	8007352 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	623b      	str	r3, [r7, #32]
          break;
 80072fe:	e029      	b.n	8007354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	3304      	adds	r3, #4
 8007306:	623b      	str	r3, [r7, #32]
          break;
 8007308:	e024      	b.n	8007354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	3308      	adds	r3, #8
 8007310:	623b      	str	r3, [r7, #32]
          break;
 8007312:	e01f      	b.n	8007354 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	330c      	adds	r3, #12
 800731a:	623b      	str	r3, [r7, #32]
          break;
 800731c:	e01a      	b.n	8007354 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d102      	bne.n	800732c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007326:	2304      	movs	r3, #4
 8007328:	623b      	str	r3, [r7, #32]
          break;
 800732a:	e013      	b.n	8007354 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d105      	bne.n	8007340 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007334:	2308      	movs	r3, #8
 8007336:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	611a      	str	r2, [r3, #16]
          break;
 800733e:	e009      	b.n	8007354 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007340:	2308      	movs	r3, #8
 8007342:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	69fa      	ldr	r2, [r7, #28]
 8007348:	615a      	str	r2, [r3, #20]
          break;
 800734a:	e003      	b.n	8007354 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800734c:	2300      	movs	r3, #0
 800734e:	623b      	str	r3, [r7, #32]
          break;
 8007350:	e000      	b.n	8007354 <HAL_GPIO_Init+0x130>
          break;
 8007352:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	2bff      	cmp	r3, #255	; 0xff
 8007358:	d801      	bhi.n	800735e <HAL_GPIO_Init+0x13a>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	e001      	b.n	8007362 <HAL_GPIO_Init+0x13e>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3304      	adds	r3, #4
 8007362:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	2bff      	cmp	r3, #255	; 0xff
 8007368:	d802      	bhi.n	8007370 <HAL_GPIO_Init+0x14c>
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	e002      	b.n	8007376 <HAL_GPIO_Init+0x152>
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	3b08      	subs	r3, #8
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	210f      	movs	r1, #15
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	fa01 f303 	lsl.w	r3, r1, r3
 8007384:	43db      	mvns	r3, r3
 8007386:	401a      	ands	r2, r3
 8007388:	6a39      	ldr	r1, [r7, #32]
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	fa01 f303 	lsl.w	r3, r1, r3
 8007390:	431a      	orrs	r2, r3
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f000 80c1 	beq.w	8007526 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80073a4:	4b53      	ldr	r3, [pc, #332]	; (80074f4 <HAL_GPIO_Init+0x2d0>)
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	4a52      	ldr	r2, [pc, #328]	; (80074f4 <HAL_GPIO_Init+0x2d0>)
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	6193      	str	r3, [r2, #24]
 80073b0:	4b50      	ldr	r3, [pc, #320]	; (80074f4 <HAL_GPIO_Init+0x2d0>)
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	60bb      	str	r3, [r7, #8]
 80073ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80073bc:	4a4e      	ldr	r2, [pc, #312]	; (80074f8 <HAL_GPIO_Init+0x2d4>)
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	089b      	lsrs	r3, r3, #2
 80073c2:	3302      	adds	r3, #2
 80073c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	f003 0303 	and.w	r3, r3, #3
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	220f      	movs	r2, #15
 80073d4:	fa02 f303 	lsl.w	r3, r2, r3
 80073d8:	43db      	mvns	r3, r3
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	4013      	ands	r3, r2
 80073de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a46      	ldr	r2, [pc, #280]	; (80074fc <HAL_GPIO_Init+0x2d8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d01f      	beq.n	8007428 <HAL_GPIO_Init+0x204>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a45      	ldr	r2, [pc, #276]	; (8007500 <HAL_GPIO_Init+0x2dc>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d019      	beq.n	8007424 <HAL_GPIO_Init+0x200>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a44      	ldr	r2, [pc, #272]	; (8007504 <HAL_GPIO_Init+0x2e0>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d013      	beq.n	8007420 <HAL_GPIO_Init+0x1fc>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a43      	ldr	r2, [pc, #268]	; (8007508 <HAL_GPIO_Init+0x2e4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d00d      	beq.n	800741c <HAL_GPIO_Init+0x1f8>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a42      	ldr	r2, [pc, #264]	; (800750c <HAL_GPIO_Init+0x2e8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d007      	beq.n	8007418 <HAL_GPIO_Init+0x1f4>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a41      	ldr	r2, [pc, #260]	; (8007510 <HAL_GPIO_Init+0x2ec>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d101      	bne.n	8007414 <HAL_GPIO_Init+0x1f0>
 8007410:	2305      	movs	r3, #5
 8007412:	e00a      	b.n	800742a <HAL_GPIO_Init+0x206>
 8007414:	2306      	movs	r3, #6
 8007416:	e008      	b.n	800742a <HAL_GPIO_Init+0x206>
 8007418:	2304      	movs	r3, #4
 800741a:	e006      	b.n	800742a <HAL_GPIO_Init+0x206>
 800741c:	2303      	movs	r3, #3
 800741e:	e004      	b.n	800742a <HAL_GPIO_Init+0x206>
 8007420:	2302      	movs	r3, #2
 8007422:	e002      	b.n	800742a <HAL_GPIO_Init+0x206>
 8007424:	2301      	movs	r3, #1
 8007426:	e000      	b.n	800742a <HAL_GPIO_Init+0x206>
 8007428:	2300      	movs	r3, #0
 800742a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742c:	f002 0203 	and.w	r2, r2, #3
 8007430:	0092      	lsls	r2, r2, #2
 8007432:	4093      	lsls	r3, r2
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	4313      	orrs	r3, r2
 8007438:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800743a:	492f      	ldr	r1, [pc, #188]	; (80074f8 <HAL_GPIO_Init+0x2d4>)
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743e:	089b      	lsrs	r3, r3, #2
 8007440:	3302      	adds	r3, #2
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d006      	beq.n	8007462 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007454:	4b2f      	ldr	r3, [pc, #188]	; (8007514 <HAL_GPIO_Init+0x2f0>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	492e      	ldr	r1, [pc, #184]	; (8007514 <HAL_GPIO_Init+0x2f0>)
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	4313      	orrs	r3, r2
 800745e:	600b      	str	r3, [r1, #0]
 8007460:	e006      	b.n	8007470 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007462:	4b2c      	ldr	r3, [pc, #176]	; (8007514 <HAL_GPIO_Init+0x2f0>)
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	43db      	mvns	r3, r3
 800746a:	492a      	ldr	r1, [pc, #168]	; (8007514 <HAL_GPIO_Init+0x2f0>)
 800746c:	4013      	ands	r3, r2
 800746e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d006      	beq.n	800748a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800747c:	4b25      	ldr	r3, [pc, #148]	; (8007514 <HAL_GPIO_Init+0x2f0>)
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	4924      	ldr	r1, [pc, #144]	; (8007514 <HAL_GPIO_Init+0x2f0>)
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	4313      	orrs	r3, r2
 8007486:	604b      	str	r3, [r1, #4]
 8007488:	e006      	b.n	8007498 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800748a:	4b22      	ldr	r3, [pc, #136]	; (8007514 <HAL_GPIO_Init+0x2f0>)
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	43db      	mvns	r3, r3
 8007492:	4920      	ldr	r1, [pc, #128]	; (8007514 <HAL_GPIO_Init+0x2f0>)
 8007494:	4013      	ands	r3, r2
 8007496:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d006      	beq.n	80074b2 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80074a4:	4b1b      	ldr	r3, [pc, #108]	; (8007514 <HAL_GPIO_Init+0x2f0>)
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	491a      	ldr	r1, [pc, #104]	; (8007514 <HAL_GPIO_Init+0x2f0>)
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	608b      	str	r3, [r1, #8]
 80074b0:	e006      	b.n	80074c0 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80074b2:	4b18      	ldr	r3, [pc, #96]	; (8007514 <HAL_GPIO_Init+0x2f0>)
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	43db      	mvns	r3, r3
 80074ba:	4916      	ldr	r1, [pc, #88]	; (8007514 <HAL_GPIO_Init+0x2f0>)
 80074bc:	4013      	ands	r3, r2
 80074be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d025      	beq.n	8007518 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80074cc:	4b11      	ldr	r3, [pc, #68]	; (8007514 <HAL_GPIO_Init+0x2f0>)
 80074ce:	68da      	ldr	r2, [r3, #12]
 80074d0:	4910      	ldr	r1, [pc, #64]	; (8007514 <HAL_GPIO_Init+0x2f0>)
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	60cb      	str	r3, [r1, #12]
 80074d8:	e025      	b.n	8007526 <HAL_GPIO_Init+0x302>
 80074da:	bf00      	nop
 80074dc:	10320000 	.word	0x10320000
 80074e0:	10310000 	.word	0x10310000
 80074e4:	10220000 	.word	0x10220000
 80074e8:	10210000 	.word	0x10210000
 80074ec:	10120000 	.word	0x10120000
 80074f0:	10110000 	.word	0x10110000
 80074f4:	40021000 	.word	0x40021000
 80074f8:	40010000 	.word	0x40010000
 80074fc:	40010800 	.word	0x40010800
 8007500:	40010c00 	.word	0x40010c00
 8007504:	40011000 	.word	0x40011000
 8007508:	40011400 	.word	0x40011400
 800750c:	40011800 	.word	0x40011800
 8007510:	40011c00 	.word	0x40011c00
 8007514:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007518:	4b0b      	ldr	r3, [pc, #44]	; (8007548 <HAL_GPIO_Init+0x324>)
 800751a:	68da      	ldr	r2, [r3, #12]
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	43db      	mvns	r3, r3
 8007520:	4909      	ldr	r1, [pc, #36]	; (8007548 <HAL_GPIO_Init+0x324>)
 8007522:	4013      	ands	r3, r2
 8007524:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	3301      	adds	r3, #1
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	fa22 f303 	lsr.w	r3, r2, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	f47f ae7e 	bne.w	8007238 <HAL_GPIO_Init+0x14>
  }
}
 800753c:	bf00      	nop
 800753e:	bf00      	nop
 8007540:	372c      	adds	r7, #44	; 0x2c
 8007542:	46bd      	mov	sp, r7
 8007544:	bc80      	pop	{r7}
 8007546:	4770      	bx	lr
 8007548:	40010400 	.word	0x40010400

0800754c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689a      	ldr	r2, [r3, #8]
 800755c:	887b      	ldrh	r3, [r7, #2]
 800755e:	4013      	ands	r3, r2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007564:	2301      	movs	r3, #1
 8007566:	73fb      	strb	r3, [r7, #15]
 8007568:	e001      	b.n	800756e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800756a:	2300      	movs	r3, #0
 800756c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800756e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	bc80      	pop	{r7}
 8007578:	4770      	bx	lr

0800757a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800757a:	b480      	push	{r7}
 800757c:	b083      	sub	sp, #12
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	460b      	mov	r3, r1
 8007584:	807b      	strh	r3, [r7, #2]
 8007586:	4613      	mov	r3, r2
 8007588:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800758a:	787b      	ldrb	r3, [r7, #1]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007590:	887a      	ldrh	r2, [r7, #2]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007596:	e003      	b.n	80075a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007598:	887b      	ldrh	r3, [r7, #2]
 800759a:	041a      	lsls	r2, r3, #16
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	611a      	str	r2, [r3, #16]
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bc80      	pop	{r7}
 80075a8:	4770      	bx	lr
	...

080075ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d101      	bne.n	80075be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e26c      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 8087 	beq.w	80076da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80075cc:	4b92      	ldr	r3, [pc, #584]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f003 030c 	and.w	r3, r3, #12
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	d00c      	beq.n	80075f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80075d8:	4b8f      	ldr	r3, [pc, #572]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f003 030c 	and.w	r3, r3, #12
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d112      	bne.n	800760a <HAL_RCC_OscConfig+0x5e>
 80075e4:	4b8c      	ldr	r3, [pc, #560]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075f0:	d10b      	bne.n	800760a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075f2:	4b89      	ldr	r3, [pc, #548]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d06c      	beq.n	80076d8 <HAL_RCC_OscConfig+0x12c>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d168      	bne.n	80076d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e246      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007612:	d106      	bne.n	8007622 <HAL_RCC_OscConfig+0x76>
 8007614:	4b80      	ldr	r3, [pc, #512]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a7f      	ldr	r2, [pc, #508]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 800761a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800761e:	6013      	str	r3, [r2, #0]
 8007620:	e02e      	b.n	8007680 <HAL_RCC_OscConfig+0xd4>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10c      	bne.n	8007644 <HAL_RCC_OscConfig+0x98>
 800762a:	4b7b      	ldr	r3, [pc, #492]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a7a      	ldr	r2, [pc, #488]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 8007630:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	4b78      	ldr	r3, [pc, #480]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a77      	ldr	r2, [pc, #476]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 800763c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	e01d      	b.n	8007680 <HAL_RCC_OscConfig+0xd4>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800764c:	d10c      	bne.n	8007668 <HAL_RCC_OscConfig+0xbc>
 800764e:	4b72      	ldr	r3, [pc, #456]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a71      	ldr	r2, [pc, #452]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 8007654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007658:	6013      	str	r3, [r2, #0]
 800765a:	4b6f      	ldr	r3, [pc, #444]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a6e      	ldr	r2, [pc, #440]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 8007660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	e00b      	b.n	8007680 <HAL_RCC_OscConfig+0xd4>
 8007668:	4b6b      	ldr	r3, [pc, #428]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a6a      	ldr	r2, [pc, #424]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 800766e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	4b68      	ldr	r3, [pc, #416]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a67      	ldr	r2, [pc, #412]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 800767a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800767e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d013      	beq.n	80076b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007688:	f7ff fcba 	bl	8007000 <HAL_GetTick>
 800768c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800768e:	e008      	b.n	80076a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007690:	f7ff fcb6 	bl	8007000 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	2b64      	cmp	r3, #100	; 0x64
 800769c:	d901      	bls.n	80076a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e1fa      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076a2:	4b5d      	ldr	r3, [pc, #372]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0f0      	beq.n	8007690 <HAL_RCC_OscConfig+0xe4>
 80076ae:	e014      	b.n	80076da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076b0:	f7ff fca6 	bl	8007000 <HAL_GetTick>
 80076b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076b6:	e008      	b.n	80076ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80076b8:	f7ff fca2 	bl	8007000 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b64      	cmp	r3, #100	; 0x64
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e1e6      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076ca:	4b53      	ldr	r3, [pc, #332]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1f0      	bne.n	80076b8 <HAL_RCC_OscConfig+0x10c>
 80076d6:	e000      	b.n	80076da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0302 	and.w	r3, r3, #2
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d063      	beq.n	80077ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80076e6:	4b4c      	ldr	r3, [pc, #304]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f003 030c 	and.w	r3, r3, #12
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00b      	beq.n	800770a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80076f2:	4b49      	ldr	r3, [pc, #292]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f003 030c 	and.w	r3, r3, #12
 80076fa:	2b08      	cmp	r3, #8
 80076fc:	d11c      	bne.n	8007738 <HAL_RCC_OscConfig+0x18c>
 80076fe:	4b46      	ldr	r3, [pc, #280]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d116      	bne.n	8007738 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800770a:	4b43      	ldr	r3, [pc, #268]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d005      	beq.n	8007722 <HAL_RCC_OscConfig+0x176>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d001      	beq.n	8007722 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e1ba      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007722:	4b3d      	ldr	r3, [pc, #244]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	00db      	lsls	r3, r3, #3
 8007730:	4939      	ldr	r1, [pc, #228]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 8007732:	4313      	orrs	r3, r2
 8007734:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007736:	e03a      	b.n	80077ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d020      	beq.n	8007782 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007740:	4b36      	ldr	r3, [pc, #216]	; (800781c <HAL_RCC_OscConfig+0x270>)
 8007742:	2201      	movs	r2, #1
 8007744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007746:	f7ff fc5b 	bl	8007000 <HAL_GetTick>
 800774a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800774c:	e008      	b.n	8007760 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800774e:	f7ff fc57 	bl	8007000 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	2b02      	cmp	r3, #2
 800775a:	d901      	bls.n	8007760 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e19b      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007760:	4b2d      	ldr	r3, [pc, #180]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d0f0      	beq.n	800774e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800776c:	4b2a      	ldr	r3, [pc, #168]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	4927      	ldr	r1, [pc, #156]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 800777c:	4313      	orrs	r3, r2
 800777e:	600b      	str	r3, [r1, #0]
 8007780:	e015      	b.n	80077ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007782:	4b26      	ldr	r3, [pc, #152]	; (800781c <HAL_RCC_OscConfig+0x270>)
 8007784:	2200      	movs	r2, #0
 8007786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007788:	f7ff fc3a 	bl	8007000 <HAL_GetTick>
 800778c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800778e:	e008      	b.n	80077a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007790:	f7ff fc36 	bl	8007000 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d901      	bls.n	80077a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e17a      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077a2:	4b1d      	ldr	r3, [pc, #116]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1f0      	bne.n	8007790 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0308 	and.w	r3, r3, #8
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d03a      	beq.n	8007830 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d019      	beq.n	80077f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077c2:	4b17      	ldr	r3, [pc, #92]	; (8007820 <HAL_RCC_OscConfig+0x274>)
 80077c4:	2201      	movs	r2, #1
 80077c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077c8:	f7ff fc1a 	bl	8007000 <HAL_GetTick>
 80077cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077ce:	e008      	b.n	80077e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077d0:	f7ff fc16 	bl	8007000 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d901      	bls.n	80077e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e15a      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077e2:	4b0d      	ldr	r3, [pc, #52]	; (8007818 <HAL_RCC_OscConfig+0x26c>)
 80077e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0f0      	beq.n	80077d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80077ee:	2001      	movs	r0, #1
 80077f0:	f000 fad8 	bl	8007da4 <RCC_Delay>
 80077f4:	e01c      	b.n	8007830 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077f6:	4b0a      	ldr	r3, [pc, #40]	; (8007820 <HAL_RCC_OscConfig+0x274>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077fc:	f7ff fc00 	bl	8007000 <HAL_GetTick>
 8007800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007802:	e00f      	b.n	8007824 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007804:	f7ff fbfc 	bl	8007000 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d908      	bls.n	8007824 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e140      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
 8007816:	bf00      	nop
 8007818:	40021000 	.word	0x40021000
 800781c:	42420000 	.word	0x42420000
 8007820:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007824:	4b9e      	ldr	r3, [pc, #632]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e9      	bne.n	8007804 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 80a6 	beq.w	800798a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800783e:	2300      	movs	r3, #0
 8007840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007842:	4b97      	ldr	r3, [pc, #604]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10d      	bne.n	800786a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800784e:	4b94      	ldr	r3, [pc, #592]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	4a93      	ldr	r2, [pc, #588]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007858:	61d3      	str	r3, [r2, #28]
 800785a:	4b91      	ldr	r3, [pc, #580]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007862:	60bb      	str	r3, [r7, #8]
 8007864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007866:	2301      	movs	r3, #1
 8007868:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800786a:	4b8e      	ldr	r3, [pc, #568]	; (8007aa4 <HAL_RCC_OscConfig+0x4f8>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007872:	2b00      	cmp	r3, #0
 8007874:	d118      	bne.n	80078a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007876:	4b8b      	ldr	r3, [pc, #556]	; (8007aa4 <HAL_RCC_OscConfig+0x4f8>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a8a      	ldr	r2, [pc, #552]	; (8007aa4 <HAL_RCC_OscConfig+0x4f8>)
 800787c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007882:	f7ff fbbd 	bl	8007000 <HAL_GetTick>
 8007886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007888:	e008      	b.n	800789c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800788a:	f7ff fbb9 	bl	8007000 <HAL_GetTick>
 800788e:	4602      	mov	r2, r0
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	1ad3      	subs	r3, r2, r3
 8007894:	2b64      	cmp	r3, #100	; 0x64
 8007896:	d901      	bls.n	800789c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e0fd      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800789c:	4b81      	ldr	r3, [pc, #516]	; (8007aa4 <HAL_RCC_OscConfig+0x4f8>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d0f0      	beq.n	800788a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d106      	bne.n	80078be <HAL_RCC_OscConfig+0x312>
 80078b0:	4b7b      	ldr	r3, [pc, #492]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 80078b2:	6a1b      	ldr	r3, [r3, #32]
 80078b4:	4a7a      	ldr	r2, [pc, #488]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 80078b6:	f043 0301 	orr.w	r3, r3, #1
 80078ba:	6213      	str	r3, [r2, #32]
 80078bc:	e02d      	b.n	800791a <HAL_RCC_OscConfig+0x36e>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10c      	bne.n	80078e0 <HAL_RCC_OscConfig+0x334>
 80078c6:	4b76      	ldr	r3, [pc, #472]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	4a75      	ldr	r2, [pc, #468]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 80078cc:	f023 0301 	bic.w	r3, r3, #1
 80078d0:	6213      	str	r3, [r2, #32]
 80078d2:	4b73      	ldr	r3, [pc, #460]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	4a72      	ldr	r2, [pc, #456]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 80078d8:	f023 0304 	bic.w	r3, r3, #4
 80078dc:	6213      	str	r3, [r2, #32]
 80078de:	e01c      	b.n	800791a <HAL_RCC_OscConfig+0x36e>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	2b05      	cmp	r3, #5
 80078e6:	d10c      	bne.n	8007902 <HAL_RCC_OscConfig+0x356>
 80078e8:	4b6d      	ldr	r3, [pc, #436]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	4a6c      	ldr	r2, [pc, #432]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 80078ee:	f043 0304 	orr.w	r3, r3, #4
 80078f2:	6213      	str	r3, [r2, #32]
 80078f4:	4b6a      	ldr	r3, [pc, #424]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 80078f6:	6a1b      	ldr	r3, [r3, #32]
 80078f8:	4a69      	ldr	r2, [pc, #420]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 80078fa:	f043 0301 	orr.w	r3, r3, #1
 80078fe:	6213      	str	r3, [r2, #32]
 8007900:	e00b      	b.n	800791a <HAL_RCC_OscConfig+0x36e>
 8007902:	4b67      	ldr	r3, [pc, #412]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	4a66      	ldr	r2, [pc, #408]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	6213      	str	r3, [r2, #32]
 800790e:	4b64      	ldr	r3, [pc, #400]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	4a63      	ldr	r2, [pc, #396]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007914:	f023 0304 	bic.w	r3, r3, #4
 8007918:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d015      	beq.n	800794e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007922:	f7ff fb6d 	bl	8007000 <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007928:	e00a      	b.n	8007940 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800792a:	f7ff fb69 	bl	8007000 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	f241 3288 	movw	r2, #5000	; 0x1388
 8007938:	4293      	cmp	r3, r2
 800793a:	d901      	bls.n	8007940 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800793c:	2303      	movs	r3, #3
 800793e:	e0ab      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007940:	4b57      	ldr	r3, [pc, #348]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007942:	6a1b      	ldr	r3, [r3, #32]
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0ee      	beq.n	800792a <HAL_RCC_OscConfig+0x37e>
 800794c:	e014      	b.n	8007978 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800794e:	f7ff fb57 	bl	8007000 <HAL_GetTick>
 8007952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007954:	e00a      	b.n	800796c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007956:	f7ff fb53 	bl	8007000 <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	f241 3288 	movw	r2, #5000	; 0x1388
 8007964:	4293      	cmp	r3, r2
 8007966:	d901      	bls.n	800796c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e095      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800796c:	4b4c      	ldr	r3, [pc, #304]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	f003 0302 	and.w	r3, r3, #2
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1ee      	bne.n	8007956 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007978:	7dfb      	ldrb	r3, [r7, #23]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d105      	bne.n	800798a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800797e:	4b48      	ldr	r3, [pc, #288]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007980:	69db      	ldr	r3, [r3, #28]
 8007982:	4a47      	ldr	r2, [pc, #284]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007988:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	69db      	ldr	r3, [r3, #28]
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 8081 	beq.w	8007a96 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007994:	4b42      	ldr	r3, [pc, #264]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f003 030c 	and.w	r3, r3, #12
 800799c:	2b08      	cmp	r3, #8
 800799e:	d061      	beq.n	8007a64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	69db      	ldr	r3, [r3, #28]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d146      	bne.n	8007a36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079a8:	4b3f      	ldr	r3, [pc, #252]	; (8007aa8 <HAL_RCC_OscConfig+0x4fc>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079ae:	f7ff fb27 	bl	8007000 <HAL_GetTick>
 80079b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079b4:	e008      	b.n	80079c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079b6:	f7ff fb23 	bl	8007000 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d901      	bls.n	80079c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e067      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80079c8:	4b35      	ldr	r3, [pc, #212]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d1f0      	bne.n	80079b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a1b      	ldr	r3, [r3, #32]
 80079d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079dc:	d108      	bne.n	80079f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80079de:	4b30      	ldr	r3, [pc, #192]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	492d      	ldr	r1, [pc, #180]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079f0:	4b2b      	ldr	r3, [pc, #172]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a19      	ldr	r1, [r3, #32]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	430b      	orrs	r3, r1
 8007a02:	4927      	ldr	r1, [pc, #156]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a08:	4b27      	ldr	r3, [pc, #156]	; (8007aa8 <HAL_RCC_OscConfig+0x4fc>)
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a0e:	f7ff faf7 	bl	8007000 <HAL_GetTick>
 8007a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a14:	e008      	b.n	8007a28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a16:	f7ff faf3 	bl	8007000 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d901      	bls.n	8007a28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e037      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007a28:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0f0      	beq.n	8007a16 <HAL_RCC_OscConfig+0x46a>
 8007a34:	e02f      	b.n	8007a96 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a36:	4b1c      	ldr	r3, [pc, #112]	; (8007aa8 <HAL_RCC_OscConfig+0x4fc>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a3c:	f7ff fae0 	bl	8007000 <HAL_GetTick>
 8007a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a42:	e008      	b.n	8007a56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a44:	f7ff fadc 	bl	8007000 <HAL_GetTick>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d901      	bls.n	8007a56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e020      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007a56:	4b12      	ldr	r3, [pc, #72]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1f0      	bne.n	8007a44 <HAL_RCC_OscConfig+0x498>
 8007a62:	e018      	b.n	8007a96 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d101      	bne.n	8007a70 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e013      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007a70:	4b0b      	ldr	r3, [pc, #44]	; (8007aa0 <HAL_RCC_OscConfig+0x4f4>)
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a1b      	ldr	r3, [r3, #32]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d106      	bne.n	8007a92 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d001      	beq.n	8007a96 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e000      	b.n	8007a98 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3718      	adds	r7, #24
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	40021000 	.word	0x40021000
 8007aa4:	40007000 	.word	0x40007000
 8007aa8:	42420060 	.word	0x42420060

08007aac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e0d0      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ac0:	4b6a      	ldr	r3, [pc, #424]	; (8007c6c <HAL_RCC_ClockConfig+0x1c0>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	683a      	ldr	r2, [r7, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d910      	bls.n	8007af0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ace:	4b67      	ldr	r3, [pc, #412]	; (8007c6c <HAL_RCC_ClockConfig+0x1c0>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f023 0207 	bic.w	r2, r3, #7
 8007ad6:	4965      	ldr	r1, [pc, #404]	; (8007c6c <HAL_RCC_ClockConfig+0x1c0>)
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ade:	4b63      	ldr	r3, [pc, #396]	; (8007c6c <HAL_RCC_ClockConfig+0x1c0>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0307 	and.w	r3, r3, #7
 8007ae6:	683a      	ldr	r2, [r7, #0]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d001      	beq.n	8007af0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e0b8      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d020      	beq.n	8007b3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0304 	and.w	r3, r3, #4
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b08:	4b59      	ldr	r3, [pc, #356]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	4a58      	ldr	r2, [pc, #352]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007b0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007b12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0308 	and.w	r3, r3, #8
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d005      	beq.n	8007b2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b20:	4b53      	ldr	r3, [pc, #332]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	4a52      	ldr	r2, [pc, #328]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007b26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007b2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b2c:	4b50      	ldr	r3, [pc, #320]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	494d      	ldr	r1, [pc, #308]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d040      	beq.n	8007bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d107      	bne.n	8007b62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b52:	4b47      	ldr	r3, [pc, #284]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d115      	bne.n	8007b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e07f      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d107      	bne.n	8007b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b6a:	4b41      	ldr	r3, [pc, #260]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d109      	bne.n	8007b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e073      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b7a:	4b3d      	ldr	r3, [pc, #244]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d101      	bne.n	8007b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e06b      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b8a:	4b39      	ldr	r3, [pc, #228]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f023 0203 	bic.w	r2, r3, #3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	4936      	ldr	r1, [pc, #216]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b9c:	f7ff fa30 	bl	8007000 <HAL_GetTick>
 8007ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ba2:	e00a      	b.n	8007bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ba4:	f7ff fa2c 	bl	8007000 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d901      	bls.n	8007bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e053      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bba:	4b2d      	ldr	r3, [pc, #180]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f003 020c 	and.w	r2, r3, #12
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d1eb      	bne.n	8007ba4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bcc:	4b27      	ldr	r3, [pc, #156]	; (8007c6c <HAL_RCC_ClockConfig+0x1c0>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0307 	and.w	r3, r3, #7
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d210      	bcs.n	8007bfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bda:	4b24      	ldr	r3, [pc, #144]	; (8007c6c <HAL_RCC_ClockConfig+0x1c0>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f023 0207 	bic.w	r2, r3, #7
 8007be2:	4922      	ldr	r1, [pc, #136]	; (8007c6c <HAL_RCC_ClockConfig+0x1c0>)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bea:	4b20      	ldr	r3, [pc, #128]	; (8007c6c <HAL_RCC_ClockConfig+0x1c0>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0307 	and.w	r3, r3, #7
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d001      	beq.n	8007bfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e032      	b.n	8007c62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0304 	and.w	r3, r3, #4
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d008      	beq.n	8007c1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c08:	4b19      	ldr	r3, [pc, #100]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	4916      	ldr	r1, [pc, #88]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d009      	beq.n	8007c3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c26:	4b12      	ldr	r3, [pc, #72]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	490e      	ldr	r1, [pc, #56]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c3a:	f000 f821 	bl	8007c80 <HAL_RCC_GetSysClockFreq>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	4b0b      	ldr	r3, [pc, #44]	; (8007c70 <HAL_RCC_ClockConfig+0x1c4>)
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	091b      	lsrs	r3, r3, #4
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	490a      	ldr	r1, [pc, #40]	; (8007c74 <HAL_RCC_ClockConfig+0x1c8>)
 8007c4c:	5ccb      	ldrb	r3, [r1, r3]
 8007c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c52:	4a09      	ldr	r2, [pc, #36]	; (8007c78 <HAL_RCC_ClockConfig+0x1cc>)
 8007c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c56:	4b09      	ldr	r3, [pc, #36]	; (8007c7c <HAL_RCC_ClockConfig+0x1d0>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7ff f98e 	bl	8006f7c <HAL_InitTick>

  return HAL_OK;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	40022000 	.word	0x40022000
 8007c70:	40021000 	.word	0x40021000
 8007c74:	0800d9dc 	.word	0x0800d9dc
 8007c78:	20000004 	.word	0x20000004
 8007c7c:	2000000c 	.word	0x2000000c

08007c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c80:	b490      	push	{r4, r7}
 8007c82:	b08a      	sub	sp, #40	; 0x28
 8007c84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007c86:	4b2a      	ldr	r3, [pc, #168]	; (8007d30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007c88:	1d3c      	adds	r4, r7, #4
 8007c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007c8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007c90:	f240 2301 	movw	r3, #513	; 0x201
 8007c94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	61fb      	str	r3, [r7, #28]
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	61bb      	str	r3, [r7, #24]
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007caa:	4b22      	ldr	r3, [pc, #136]	; (8007d34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	f003 030c 	and.w	r3, r3, #12
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d002      	beq.n	8007cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d003      	beq.n	8007cc6 <HAL_RCC_GetSysClockFreq+0x46>
 8007cbe:	e02d      	b.n	8007d1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007cc0:	4b1d      	ldr	r3, [pc, #116]	; (8007d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cc2:	623b      	str	r3, [r7, #32]
      break;
 8007cc4:	e02d      	b.n	8007d22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	0c9b      	lsrs	r3, r3, #18
 8007cca:	f003 030f 	and.w	r3, r3, #15
 8007cce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007cd8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d013      	beq.n	8007d0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007ce4:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	0c5b      	lsrs	r3, r3, #17
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8007cf8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	4a0e      	ldr	r2, [pc, #56]	; (8007d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007cfe:	fb02 f203 	mul.w	r2, r2, r3
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d08:	627b      	str	r3, [r7, #36]	; 0x24
 8007d0a:	e004      	b.n	8007d16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	4a0b      	ldr	r2, [pc, #44]	; (8007d3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d10:	fb02 f303 	mul.w	r3, r2, r3
 8007d14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8007d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d18:	623b      	str	r3, [r7, #32]
      break;
 8007d1a:	e002      	b.n	8007d22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007d1c:	4b06      	ldr	r3, [pc, #24]	; (8007d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d1e:	623b      	str	r3, [r7, #32]
      break;
 8007d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d22:	6a3b      	ldr	r3, [r7, #32]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3728      	adds	r7, #40	; 0x28
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bc90      	pop	{r4, r7}
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	0800d9c4 	.word	0x0800d9c4
 8007d34:	40021000 	.word	0x40021000
 8007d38:	007a1200 	.word	0x007a1200
 8007d3c:	003d0900 	.word	0x003d0900

08007d40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007d44:	4b02      	ldr	r3, [pc, #8]	; (8007d50 <HAL_RCC_GetHCLKFreq+0x10>)
 8007d46:	681b      	ldr	r3, [r3, #0]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bc80      	pop	{r7}
 8007d4e:	4770      	bx	lr
 8007d50:	20000004 	.word	0x20000004

08007d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007d58:	f7ff fff2 	bl	8007d40 <HAL_RCC_GetHCLKFreq>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	4b05      	ldr	r3, [pc, #20]	; (8007d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	0a1b      	lsrs	r3, r3, #8
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	4903      	ldr	r1, [pc, #12]	; (8007d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d6a:	5ccb      	ldrb	r3, [r1, r3]
 8007d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	40021000 	.word	0x40021000
 8007d78:	0800d9ec 	.word	0x0800d9ec

08007d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007d80:	f7ff ffde 	bl	8007d40 <HAL_RCC_GetHCLKFreq>
 8007d84:	4602      	mov	r2, r0
 8007d86:	4b05      	ldr	r3, [pc, #20]	; (8007d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	0adb      	lsrs	r3, r3, #11
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	4903      	ldr	r1, [pc, #12]	; (8007da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d92:	5ccb      	ldrb	r3, [r1, r3]
 8007d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	40021000 	.word	0x40021000
 8007da0:	0800d9ec 	.word	0x0800d9ec

08007da4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b085      	sub	sp, #20
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007dac:	4b0a      	ldr	r3, [pc, #40]	; (8007dd8 <RCC_Delay+0x34>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a0a      	ldr	r2, [pc, #40]	; (8007ddc <RCC_Delay+0x38>)
 8007db2:	fba2 2303 	umull	r2, r3, r2, r3
 8007db6:	0a5b      	lsrs	r3, r3, #9
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	fb02 f303 	mul.w	r3, r2, r3
 8007dbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007dc0:	bf00      	nop
  }
  while (Delay --);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1e5a      	subs	r2, r3, #1
 8007dc6:	60fa      	str	r2, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1f9      	bne.n	8007dc0 <RCC_Delay+0x1c>
}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr
 8007dd8:	20000004 	.word	0x20000004
 8007ddc:	10624dd3 	.word	0x10624dd3

08007de0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	e076      	b.n	8007ee0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d108      	bne.n	8007e0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e02:	d009      	beq.n	8007e18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	61da      	str	r2, [r3, #28]
 8007e0a:	e005      	b.n	8007e18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d106      	bne.n	8007e38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7f9 ff2c 	bl	8001c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e60:	431a      	orrs	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e92:	431a      	orrs	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e9c:	ea42 0103 	orr.w	r1, r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	0c1a      	lsrs	r2, r3, #16
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f002 0204 	and.w	r2, r2, #4
 8007ebe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	69da      	ldr	r2, [r3, #28]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ece:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08c      	sub	sp, #48	; 0x30
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007efa:	2300      	movs	r3, #0
 8007efc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d101      	bne.n	8007f0e <HAL_SPI_TransmitReceive+0x26>
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	e18a      	b.n	8008224 <HAL_SPI_TransmitReceive+0x33c>
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f16:	f7ff f873 	bl	8007000 <HAL_GetTick>
 8007f1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007f2c:	887b      	ldrh	r3, [r7, #2]
 8007f2e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d00f      	beq.n	8007f58 <HAL_SPI_TransmitReceive+0x70>
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f3e:	d107      	bne.n	8007f50 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d103      	bne.n	8007f50 <HAL_SPI_TransmitReceive+0x68>
 8007f48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d003      	beq.n	8007f58 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007f50:	2302      	movs	r3, #2
 8007f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f56:	e15b      	b.n	8008210 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d005      	beq.n	8007f6a <HAL_SPI_TransmitReceive+0x82>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d002      	beq.n	8007f6a <HAL_SPI_TransmitReceive+0x82>
 8007f64:	887b      	ldrh	r3, [r7, #2]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d103      	bne.n	8007f72 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f70:	e14e      	b.n	8008210 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b04      	cmp	r3, #4
 8007f7c:	d003      	beq.n	8007f86 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2205      	movs	r2, #5
 8007f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	887a      	ldrh	r2, [r7, #2]
 8007f96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	887a      	ldrh	r2, [r7, #2]
 8007f9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	887a      	ldrh	r2, [r7, #2]
 8007fa8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	887a      	ldrh	r2, [r7, #2]
 8007fae:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc6:	2b40      	cmp	r3, #64	; 0x40
 8007fc8:	d007      	beq.n	8007fda <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fd8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fe2:	d178      	bne.n	80080d6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <HAL_SPI_TransmitReceive+0x10a>
 8007fec:	8b7b      	ldrh	r3, [r7, #26]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d166      	bne.n	80080c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	881a      	ldrh	r2, [r3, #0]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	1c9a      	adds	r2, r3, #2
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800800c:	b29b      	uxth	r3, r3
 800800e:	3b01      	subs	r3, #1
 8008010:	b29a      	uxth	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008016:	e053      	b.n	80080c0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b02      	cmp	r3, #2
 8008024:	d11b      	bne.n	800805e <HAL_SPI_TransmitReceive+0x176>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800802a:	b29b      	uxth	r3, r3
 800802c:	2b00      	cmp	r3, #0
 800802e:	d016      	beq.n	800805e <HAL_SPI_TransmitReceive+0x176>
 8008030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008032:	2b01      	cmp	r3, #1
 8008034:	d113      	bne.n	800805e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803a:	881a      	ldrh	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008046:	1c9a      	adds	r2, r3, #2
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008050:	b29b      	uxth	r3, r3
 8008052:	3b01      	subs	r3, #1
 8008054:	b29a      	uxth	r2, r3
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800805a:	2300      	movs	r3, #0
 800805c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b01      	cmp	r3, #1
 800806a:	d119      	bne.n	80080a0 <HAL_SPI_TransmitReceive+0x1b8>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008070:	b29b      	uxth	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d014      	beq.n	80080a0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68da      	ldr	r2, [r3, #12]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	b292      	uxth	r2, r2
 8008082:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	1c9a      	adds	r2, r3, #2
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008092:	b29b      	uxth	r3, r3
 8008094:	3b01      	subs	r3, #1
 8008096:	b29a      	uxth	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800809c:	2301      	movs	r3, #1
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80080a0:	f7fe ffae 	bl	8007000 <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d807      	bhi.n	80080c0 <HAL_SPI_TransmitReceive+0x1d8>
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b6:	d003      	beq.n	80080c0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80080be:	e0a7      	b.n	8008210 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1a6      	bne.n	8008018 <HAL_SPI_TransmitReceive+0x130>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1a1      	bne.n	8008018 <HAL_SPI_TransmitReceive+0x130>
 80080d4:	e07c      	b.n	80081d0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <HAL_SPI_TransmitReceive+0x1fc>
 80080de:	8b7b      	ldrh	r3, [r7, #26]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d16b      	bne.n	80081bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	330c      	adds	r3, #12
 80080ee:	7812      	ldrb	r2, [r2, #0]
 80080f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f6:	1c5a      	adds	r2, r3, #1
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b01      	subs	r3, #1
 8008104:	b29a      	uxth	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800810a:	e057      	b.n	80081bc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	2b02      	cmp	r3, #2
 8008118:	d11c      	bne.n	8008154 <HAL_SPI_TransmitReceive+0x26c>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800811e:	b29b      	uxth	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d017      	beq.n	8008154 <HAL_SPI_TransmitReceive+0x26c>
 8008124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008126:	2b01      	cmp	r3, #1
 8008128:	d114      	bne.n	8008154 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	330c      	adds	r3, #12
 8008134:	7812      	ldrb	r2, [r2, #0]
 8008136:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008146:	b29b      	uxth	r3, r3
 8008148:	3b01      	subs	r3, #1
 800814a:	b29a      	uxth	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008150:	2300      	movs	r3, #0
 8008152:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b01      	cmp	r3, #1
 8008160:	d119      	bne.n	8008196 <HAL_SPI_TransmitReceive+0x2ae>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008166:	b29b      	uxth	r3, r3
 8008168:	2b00      	cmp	r3, #0
 800816a:	d014      	beq.n	8008196 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008176:	b2d2      	uxtb	r2, r2
 8008178:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008188:	b29b      	uxth	r3, r3
 800818a:	3b01      	subs	r3, #1
 800818c:	b29a      	uxth	r2, r3
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008192:	2301      	movs	r3, #1
 8008194:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008196:	f7fe ff33 	bl	8007000 <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d803      	bhi.n	80081ae <HAL_SPI_TransmitReceive+0x2c6>
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ac:	d102      	bne.n	80081b4 <HAL_SPI_TransmitReceive+0x2cc>
 80081ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d103      	bne.n	80081bc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80081ba:	e029      	b.n	8008210 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1a2      	bne.n	800810c <HAL_SPI_TransmitReceive+0x224>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d19d      	bne.n	800810c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f000 f8b1 	bl	800833c <SPI_EndRxTxTransaction>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d006      	beq.n	80081ee <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2220      	movs	r2, #32
 80081ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80081ec:	e010      	b.n	8008210 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10b      	bne.n	800820e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081f6:	2300      	movs	r3, #0
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	617b      	str	r3, [r7, #20]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	617b      	str	r3, [r7, #20]
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	e000      	b.n	8008210 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800820e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008220:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008224:	4618      	mov	r0, r3
 8008226:	3730      	adds	r7, #48	; 0x30
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b088      	sub	sp, #32
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	603b      	str	r3, [r7, #0]
 8008238:	4613      	mov	r3, r2
 800823a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800823c:	f7fe fee0 	bl	8007000 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008244:	1a9b      	subs	r3, r3, r2
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	4413      	add	r3, r2
 800824a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800824c:	f7fe fed8 	bl	8007000 <HAL_GetTick>
 8008250:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008252:	4b39      	ldr	r3, [pc, #228]	; (8008338 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	015b      	lsls	r3, r3, #5
 8008258:	0d1b      	lsrs	r3, r3, #20
 800825a:	69fa      	ldr	r2, [r7, #28]
 800825c:	fb02 f303 	mul.w	r3, r2, r3
 8008260:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008262:	e054      	b.n	800830e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826a:	d050      	beq.n	800830e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800826c:	f7fe fec8 	bl	8007000 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	69fa      	ldr	r2, [r7, #28]
 8008278:	429a      	cmp	r2, r3
 800827a:	d902      	bls.n	8008282 <SPI_WaitFlagStateUntilTimeout+0x56>
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d13d      	bne.n	80082fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	685a      	ldr	r2, [r3, #4]
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008290:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800829a:	d111      	bne.n	80082c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082a4:	d004      	beq.n	80082b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082ae:	d107      	bne.n	80082c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082c8:	d10f      	bne.n	80082ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082d8:	601a      	str	r2, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2200      	movs	r2, #0
 80082f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e017      	b.n	800832e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	3b01      	subs	r3, #1
 800830c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689a      	ldr	r2, [r3, #8]
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4013      	ands	r3, r2
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	429a      	cmp	r2, r3
 800831c:	bf0c      	ite	eq
 800831e:	2301      	moveq	r3, #1
 8008320:	2300      	movne	r3, #0
 8008322:	b2db      	uxtb	r3, r3
 8008324:	461a      	mov	r2, r3
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	429a      	cmp	r2, r3
 800832a:	d19b      	bne.n	8008264 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3720      	adds	r7, #32
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	20000004 	.word	0x20000004

0800833c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af02      	add	r7, sp, #8
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	2200      	movs	r2, #0
 8008350:	2180      	movs	r1, #128	; 0x80
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7ff ff6a 	bl	800822c <SPI_WaitFlagStateUntilTimeout>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d007      	beq.n	800836e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008362:	f043 0220 	orr.w	r2, r3, #32
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e000      	b.n	8008370 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d004      	beq.n	8008394 <HAL_SRAM_Init+0x1c>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008392:	d101      	bne.n	8008398 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e038      	b.n	800840a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d106      	bne.n	80083b2 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f7f9 f83b 	bl	8001428 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3308      	adds	r3, #8
 80083ba:	4619      	mov	r1, r3
 80083bc:	4610      	mov	r0, r2
 80083be:	f000 fc11 	bl	8008be4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6818      	ldr	r0, [r3, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	689b      	ldr	r3, [r3, #8]
 80083ca:	461a      	mov	r2, r3
 80083cc:	68b9      	ldr	r1, [r7, #8]
 80083ce:	f000 fc73 	bl	8008cb8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6858      	ldr	r0, [r3, #4]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	689a      	ldr	r2, [r3, #8]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	6879      	ldr	r1, [r7, #4]
 80083e0:	f000 fc9e 	bl	8008d20 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	6892      	ldr	r2, [r2, #8]
 80083ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68fa      	ldr	r2, [r7, #12]
 80083f6:	6892      	ldr	r2, [r2, #8]
 80083f8:	f041 0101 	orr.w	r1, r1, #1
 80083fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b082      	sub	sp, #8
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d101      	bne.n	8008424 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e041      	b.n	80084a8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800842a:	b2db      	uxtb	r3, r3
 800842c:	2b00      	cmp	r3, #0
 800842e:	d106      	bne.n	800843e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f7f9 fde1 	bl	8002000 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2202      	movs	r2, #2
 8008442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3304      	adds	r3, #4
 800844e:	4619      	mov	r1, r3
 8008450:	4610      	mov	r0, r2
 8008452:	f000 f96f 	bl	8008734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d001      	beq.n	80084c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e03c      	b.n	8008542 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2202      	movs	r2, #2
 80084cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a1d      	ldr	r2, [pc, #116]	; (800854c <HAL_TIM_Base_Start+0x9c>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d018      	beq.n	800850c <HAL_TIM_Base_Start+0x5c>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a1c      	ldr	r2, [pc, #112]	; (8008550 <HAL_TIM_Base_Start+0xa0>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d013      	beq.n	800850c <HAL_TIM_Base_Start+0x5c>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ec:	d00e      	beq.n	800850c <HAL_TIM_Base_Start+0x5c>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a18      	ldr	r2, [pc, #96]	; (8008554 <HAL_TIM_Base_Start+0xa4>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d009      	beq.n	800850c <HAL_TIM_Base_Start+0x5c>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a16      	ldr	r2, [pc, #88]	; (8008558 <HAL_TIM_Base_Start+0xa8>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d004      	beq.n	800850c <HAL_TIM_Base_Start+0x5c>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a15      	ldr	r2, [pc, #84]	; (800855c <HAL_TIM_Base_Start+0xac>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d111      	bne.n	8008530 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f003 0307 	and.w	r3, r3, #7
 8008516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b06      	cmp	r3, #6
 800851c:	d010      	beq.n	8008540 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f042 0201 	orr.w	r2, r2, #1
 800852c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800852e:	e007      	b.n	8008540 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f042 0201 	orr.w	r2, r2, #1
 800853e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	bc80      	pop	{r7}
 800854a:	4770      	bx	lr
 800854c:	40012c00 	.word	0x40012c00
 8008550:	40013400 	.word	0x40013400
 8008554:	40000400 	.word	0x40000400
 8008558:	40000800 	.word	0x40000800
 800855c:	40000c00 	.word	0x40000c00

08008560 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6a1a      	ldr	r2, [r3, #32]
 800856e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008572:	4013      	ands	r3, r2
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10f      	bne.n	8008598 <HAL_TIM_Base_Stop+0x38>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6a1a      	ldr	r2, [r3, #32]
 800857e:	f240 4344 	movw	r3, #1092	; 0x444
 8008582:	4013      	ands	r3, r2
 8008584:	2b00      	cmp	r3, #0
 8008586:	d107      	bne.n	8008598 <HAL_TIM_Base_Stop+0x38>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f022 0201 	bic.w	r2, r2, #1
 8008596:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bc80      	pop	{r7}
 80085aa:	4770      	bx	lr

080085ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d101      	bne.n	80085c4 <HAL_TIM_ConfigClockSource+0x18>
 80085c0:	2302      	movs	r3, #2
 80085c2:	e0b3      	b.n	800872c <HAL_TIM_ConfigClockSource+0x180>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80085e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085fc:	d03e      	beq.n	800867c <HAL_TIM_ConfigClockSource+0xd0>
 80085fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008602:	f200 8087 	bhi.w	8008714 <HAL_TIM_ConfigClockSource+0x168>
 8008606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800860a:	f000 8085 	beq.w	8008718 <HAL_TIM_ConfigClockSource+0x16c>
 800860e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008612:	d87f      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x168>
 8008614:	2b70      	cmp	r3, #112	; 0x70
 8008616:	d01a      	beq.n	800864e <HAL_TIM_ConfigClockSource+0xa2>
 8008618:	2b70      	cmp	r3, #112	; 0x70
 800861a:	d87b      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x168>
 800861c:	2b60      	cmp	r3, #96	; 0x60
 800861e:	d050      	beq.n	80086c2 <HAL_TIM_ConfigClockSource+0x116>
 8008620:	2b60      	cmp	r3, #96	; 0x60
 8008622:	d877      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x168>
 8008624:	2b50      	cmp	r3, #80	; 0x50
 8008626:	d03c      	beq.n	80086a2 <HAL_TIM_ConfigClockSource+0xf6>
 8008628:	2b50      	cmp	r3, #80	; 0x50
 800862a:	d873      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x168>
 800862c:	2b40      	cmp	r3, #64	; 0x40
 800862e:	d058      	beq.n	80086e2 <HAL_TIM_ConfigClockSource+0x136>
 8008630:	2b40      	cmp	r3, #64	; 0x40
 8008632:	d86f      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x168>
 8008634:	2b30      	cmp	r3, #48	; 0x30
 8008636:	d064      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x156>
 8008638:	2b30      	cmp	r3, #48	; 0x30
 800863a:	d86b      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x168>
 800863c:	2b20      	cmp	r3, #32
 800863e:	d060      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x156>
 8008640:	2b20      	cmp	r3, #32
 8008642:	d867      	bhi.n	8008714 <HAL_TIM_ConfigClockSource+0x168>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d05c      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x156>
 8008648:	2b10      	cmp	r3, #16
 800864a:	d05a      	beq.n	8008702 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800864c:	e062      	b.n	8008714 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	6899      	ldr	r1, [r3, #8]
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	f000 f95a 	bl	8008916 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008670:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	609a      	str	r2, [r3, #8]
      break;
 800867a:	e04e      	b.n	800871a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	6899      	ldr	r1, [r3, #8]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f000 f943 	bl	8008916 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689a      	ldr	r2, [r3, #8]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800869e:	609a      	str	r2, [r3, #8]
      break;
 80086a0:	e03b      	b.n	800871a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6818      	ldr	r0, [r3, #0]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	6859      	ldr	r1, [r3, #4]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	461a      	mov	r2, r3
 80086b0:	f000 f8ba 	bl	8008828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2150      	movs	r1, #80	; 0x50
 80086ba:	4618      	mov	r0, r3
 80086bc:	f000 f911 	bl	80088e2 <TIM_ITRx_SetConfig>
      break;
 80086c0:	e02b      	b.n	800871a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6818      	ldr	r0, [r3, #0]
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	6859      	ldr	r1, [r3, #4]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	461a      	mov	r2, r3
 80086d0:	f000 f8d8 	bl	8008884 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	2160      	movs	r1, #96	; 0x60
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 f901 	bl	80088e2 <TIM_ITRx_SetConfig>
      break;
 80086e0:	e01b      	b.n	800871a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6818      	ldr	r0, [r3, #0]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	6859      	ldr	r1, [r3, #4]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	461a      	mov	r2, r3
 80086f0:	f000 f89a 	bl	8008828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2140      	movs	r1, #64	; 0x40
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 f8f1 	bl	80088e2 <TIM_ITRx_SetConfig>
      break;
 8008700:	e00b      	b.n	800871a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4619      	mov	r1, r3
 800870c:	4610      	mov	r0, r2
 800870e:	f000 f8e8 	bl	80088e2 <TIM_ITRx_SetConfig>
        break;
 8008712:	e002      	b.n	800871a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008714:	bf00      	nop
 8008716:	e000      	b.n	800871a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008718:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800872a:	2300      	movs	r3, #0
}
 800872c:	4618      	mov	r0, r3
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a33      	ldr	r2, [pc, #204]	; (8008814 <TIM_Base_SetConfig+0xe0>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d013      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a32      	ldr	r2, [pc, #200]	; (8008818 <TIM_Base_SetConfig+0xe4>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00f      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800875a:	d00b      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a2f      	ldr	r2, [pc, #188]	; (800881c <TIM_Base_SetConfig+0xe8>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d007      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a2e      	ldr	r2, [pc, #184]	; (8008820 <TIM_Base_SetConfig+0xec>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d003      	beq.n	8008774 <TIM_Base_SetConfig+0x40>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a2d      	ldr	r2, [pc, #180]	; (8008824 <TIM_Base_SetConfig+0xf0>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d108      	bne.n	8008786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800877a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	4313      	orrs	r3, r2
 8008784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a22      	ldr	r2, [pc, #136]	; (8008814 <TIM_Base_SetConfig+0xe0>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d013      	beq.n	80087b6 <TIM_Base_SetConfig+0x82>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4a21      	ldr	r2, [pc, #132]	; (8008818 <TIM_Base_SetConfig+0xe4>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d00f      	beq.n	80087b6 <TIM_Base_SetConfig+0x82>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879c:	d00b      	beq.n	80087b6 <TIM_Base_SetConfig+0x82>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a1e      	ldr	r2, [pc, #120]	; (800881c <TIM_Base_SetConfig+0xe8>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d007      	beq.n	80087b6 <TIM_Base_SetConfig+0x82>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a1d      	ldr	r2, [pc, #116]	; (8008820 <TIM_Base_SetConfig+0xec>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d003      	beq.n	80087b6 <TIM_Base_SetConfig+0x82>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a1c      	ldr	r2, [pc, #112]	; (8008824 <TIM_Base_SetConfig+0xf0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d108      	bne.n	80087c8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a09      	ldr	r2, [pc, #36]	; (8008814 <TIM_Base_SetConfig+0xe0>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d003      	beq.n	80087fc <TIM_Base_SetConfig+0xc8>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4a08      	ldr	r2, [pc, #32]	; (8008818 <TIM_Base_SetConfig+0xe4>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d103      	bne.n	8008804 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	691a      	ldr	r2, [r3, #16]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2201      	movs	r2, #1
 8008808:	615a      	str	r2, [r3, #20]
}
 800880a:	bf00      	nop
 800880c:	3714      	adds	r7, #20
 800880e:	46bd      	mov	sp, r7
 8008810:	bc80      	pop	{r7}
 8008812:	4770      	bx	lr
 8008814:	40012c00 	.word	0x40012c00
 8008818:	40013400 	.word	0x40013400
 800881c:	40000400 	.word	0x40000400
 8008820:	40000800 	.word	0x40000800
 8008824:	40000c00 	.word	0x40000c00

08008828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6a1b      	ldr	r3, [r3, #32]
 8008838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a1b      	ldr	r3, [r3, #32]
 800883e:	f023 0201 	bic.w	r2, r3, #1
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	011b      	lsls	r3, r3, #4
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	4313      	orrs	r3, r2
 800885c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f023 030a 	bic.w	r3, r3, #10
 8008864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	693a      	ldr	r2, [r7, #16]
 8008872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	621a      	str	r2, [r3, #32]
}
 800887a:	bf00      	nop
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	bc80      	pop	{r7}
 8008882:	4770      	bx	lr

08008884 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6a1b      	ldr	r3, [r3, #32]
 8008894:	f023 0210 	bic.w	r2, r3, #16
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6a1b      	ldr	r3, [r3, #32]
 80088a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	031b      	lsls	r3, r3, #12
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	011b      	lsls	r3, r3, #4
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	693a      	ldr	r2, [r7, #16]
 80088d6:	621a      	str	r2, [r3, #32]
}
 80088d8:	bf00      	nop
 80088da:	371c      	adds	r7, #28
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr

080088e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b085      	sub	sp, #20
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	f043 0307 	orr.w	r3, r3, #7
 8008904:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	609a      	str	r2, [r3, #8]
}
 800890c:	bf00      	nop
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	bc80      	pop	{r7}
 8008914:	4770      	bx	lr

08008916 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008916:	b480      	push	{r7}
 8008918:	b087      	sub	sp, #28
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
 8008922:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008930:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	021a      	lsls	r2, r3, #8
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	431a      	orrs	r2, r3
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	4313      	orrs	r3, r2
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	4313      	orrs	r3, r2
 8008942:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	609a      	str	r2, [r3, #8]
}
 800894a:	bf00      	nop
 800894c:	371c      	adds	r7, #28
 800894e:	46bd      	mov	sp, r7
 8008950:	bc80      	pop	{r7}
 8008952:	4770      	bx	lr

08008954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008964:	2b01      	cmp	r3, #1
 8008966:	d101      	bne.n	800896c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008968:	2302      	movs	r3, #2
 800896a:	e050      	b.n	8008a0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	4313      	orrs	r3, r2
 800899c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a1b      	ldr	r2, [pc, #108]	; (8008a18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d018      	beq.n	80089e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a19      	ldr	r2, [pc, #100]	; (8008a1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d013      	beq.n	80089e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089c2:	d00e      	beq.n	80089e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a15      	ldr	r2, [pc, #84]	; (8008a20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d009      	beq.n	80089e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a14      	ldr	r2, [pc, #80]	; (8008a24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d004      	beq.n	80089e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a12      	ldr	r2, [pc, #72]	; (8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d10c      	bne.n	80089fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68ba      	ldr	r2, [r7, #8]
 80089fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bc80      	pop	{r7}
 8008a16:	4770      	bx	lr
 8008a18:	40012c00 	.word	0x40012c00
 8008a1c:	40013400 	.word	0x40013400
 8008a20:	40000400 	.word	0x40000400
 8008a24:	40000800 	.word	0x40000800
 8008a28:	40000c00 	.word	0x40000c00

08008a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e03f      	b.n	8008abe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d106      	bne.n	8008a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7f9 fb38 	bl	80020c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2224      	movs	r2, #36	; 0x24
 8008a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	68da      	ldr	r2, [r3, #12]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f829 	bl	8008ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	691a      	ldr	r2, [r3, #16]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	695a      	ldr	r2, [r3, #20]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68da      	ldr	r2, [r3, #12]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2220      	movs	r2, #32
 8008ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008b02:	f023 030c 	bic.w	r3, r3, #12
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	6812      	ldr	r2, [r2, #0]
 8008b0a:	68b9      	ldr	r1, [r7, #8]
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	699a      	ldr	r2, [r3, #24]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	430a      	orrs	r2, r1
 8008b24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a2c      	ldr	r2, [pc, #176]	; (8008bdc <UART_SetConfig+0x114>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d103      	bne.n	8008b38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008b30:	f7ff f924 	bl	8007d7c <HAL_RCC_GetPCLK2Freq>
 8008b34:	60f8      	str	r0, [r7, #12]
 8008b36:	e002      	b.n	8008b3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008b38:	f7ff f90c 	bl	8007d54 <HAL_RCC_GetPCLK1Freq>
 8008b3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	4613      	mov	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	009a      	lsls	r2, r3, #2
 8008b48:	441a      	add	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b54:	4a22      	ldr	r2, [pc, #136]	; (8008be0 <UART_SetConfig+0x118>)
 8008b56:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5a:	095b      	lsrs	r3, r3, #5
 8008b5c:	0119      	lsls	r1, r3, #4
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	4613      	mov	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	009a      	lsls	r2, r3, #2
 8008b68:	441a      	add	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b74:	4b1a      	ldr	r3, [pc, #104]	; (8008be0 <UART_SetConfig+0x118>)
 8008b76:	fba3 0302 	umull	r0, r3, r3, r2
 8008b7a:	095b      	lsrs	r3, r3, #5
 8008b7c:	2064      	movs	r0, #100	; 0x64
 8008b7e:	fb00 f303 	mul.w	r3, r0, r3
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	011b      	lsls	r3, r3, #4
 8008b86:	3332      	adds	r3, #50	; 0x32
 8008b88:	4a15      	ldr	r2, [pc, #84]	; (8008be0 <UART_SetConfig+0x118>)
 8008b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8e:	095b      	lsrs	r3, r3, #5
 8008b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b94:	4419      	add	r1, r3
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009a      	lsls	r2, r3, #2
 8008ba0:	441a      	add	r2, r3
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bac:	4b0c      	ldr	r3, [pc, #48]	; (8008be0 <UART_SetConfig+0x118>)
 8008bae:	fba3 0302 	umull	r0, r3, r3, r2
 8008bb2:	095b      	lsrs	r3, r3, #5
 8008bb4:	2064      	movs	r0, #100	; 0x64
 8008bb6:	fb00 f303 	mul.w	r3, r0, r3
 8008bba:	1ad3      	subs	r3, r2, r3
 8008bbc:	011b      	lsls	r3, r3, #4
 8008bbe:	3332      	adds	r3, #50	; 0x32
 8008bc0:	4a07      	ldr	r2, [pc, #28]	; (8008be0 <UART_SetConfig+0x118>)
 8008bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc6:	095b      	lsrs	r3, r3, #5
 8008bc8:	f003 020f 	and.w	r2, r3, #15
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	440a      	add	r2, r1
 8008bd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008bd4:	bf00      	nop
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	40013800 	.word	0x40013800
 8008be0:	51eb851f 	.word	0x51eb851f

08008be4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bf8:	683a      	ldr	r2, [r7, #0]
 8008bfa:	6812      	ldr	r2, [r2, #0]
 8008bfc:	f023 0101 	bic.w	r1, r3, #1
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	2b08      	cmp	r3, #8
 8008c0c:	d102      	bne.n	8008c14 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008c0e:	2340      	movs	r3, #64	; 0x40
 8008c10:	617b      	str	r3, [r7, #20]
 8008c12:	e001      	b.n	8008c18 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008c14:	2300      	movs	r3, #0
 8008c16:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008c24:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008c2a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008c30:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008c36:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8008c3c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8008c42:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8008c48:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8008c4e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8008c54:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	699b      	ldr	r3, [r3, #24]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8008c72:	4b10      	ldr	r3, [pc, #64]	; (8008cb4 <FSMC_NORSRAM_Init+0xd0>)
 8008c74:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c7c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008c84:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	43db      	mvns	r3, r3
 8008c94:	ea02 0103 	and.w	r1, r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	4319      	orrs	r1, r3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8008ca6:	2300      	movs	r3, #0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bc80      	pop	{r7}
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	0008fb7f 	.word	0x0008fb7f

08008cb8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	1c5a      	adds	r2, r3, #1
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cce:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	011b      	lsls	r3, r3, #4
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	021b      	lsls	r3, r3, #8
 8008ce4:	431a      	orrs	r2, r3
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	041b      	lsls	r3, r3, #16
 8008cec:	431a      	orrs	r2, r3
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	691b      	ldr	r3, [r3, #16]
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	051b      	lsls	r3, r3, #20
 8008cf6:	431a      	orrs	r2, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	695b      	ldr	r3, [r3, #20]
 8008cfc:	3b02      	subs	r3, #2
 8008cfe:	061b      	lsls	r3, r3, #24
 8008d00:	431a      	orrs	r2, r3
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	699b      	ldr	r3, [r3, #24]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	3201      	adds	r2, #1
 8008d0c:	4319      	orrs	r1, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bc80      	pop	{r7}
 8008d1e:	4770      	bx	lr

08008d20 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	607a      	str	r2, [r7, #4]
 8008d2c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d34:	d11d      	bne.n	8008d72 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008d3e:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008d40:	4013      	ands	r3, r2
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	6811      	ldr	r1, [r2, #0]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	6852      	ldr	r2, [r2, #4]
 8008d4a:	0112      	lsls	r2, r2, #4
 8008d4c:	4311      	orrs	r1, r2
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	6892      	ldr	r2, [r2, #8]
 8008d52:	0212      	lsls	r2, r2, #8
 8008d54:	4311      	orrs	r1, r2
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	6992      	ldr	r2, [r2, #24]
 8008d5a:	4311      	orrs	r1, r2
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	68d2      	ldr	r2, [r2, #12]
 8008d60:	0412      	lsls	r2, r2, #16
 8008d62:	430a      	orrs	r2, r1
 8008d64:	ea43 0102 	orr.w	r1, r3, r2
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008d70:	e005      	b.n	8008d7e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bc80      	pop	{r7}
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	cff00000 	.word	0xcff00000

08008d90 <NRF24L01_SPI_Init>:

const uint8_t TX_ADDRESS[TX_ADR_WIDTH] = { 0x34, 0x43, 0x10, 0x10, 0x01 }; //发送地址
const uint8_t RX_ADDRESS[RX_ADR_WIDTH] = { 0x34, 0x43, 0x10, 0x10, 0x01 }; //接收地址

//针对NRF24L01修改SPI2驱动
void NRF24L01_SPI_Init(void) {
 8008d90:	b580      	push	{r7, lr}
 8008d92:	af00      	add	r7, sp, #0
	__HAL_SPI_DISABLE(&hspi2);               //先关闭SPI2
 8008d94:	4b0d      	ldr	r3, [pc, #52]	; (8008dcc <NRF24L01_SPI_Init+0x3c>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4b0c      	ldr	r3, [pc, #48]	; (8008dcc <NRF24L01_SPI_Init+0x3c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008da2:	601a      	str	r2, [r3, #0]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW; //串行同步时钟的空闲状态为低电平
 8008da4:	4b09      	ldr	r3, [pc, #36]	; (8008dcc <NRF24L01_SPI_Init+0x3c>)
 8008da6:	2200      	movs	r2, #0
 8008da8:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;     //串行同步时钟的第1个跳变沿（上升或下降）数据被采样
 8008daa:	4b08      	ldr	r3, [pc, #32]	; (8008dcc <NRF24L01_SPI_Init+0x3c>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	615a      	str	r2, [r3, #20]
	HAL_SPI_Init(&hspi2);
 8008db0:	4806      	ldr	r0, [pc, #24]	; (8008dcc <NRF24L01_SPI_Init+0x3c>)
 8008db2:	f7ff f815 	bl	8007de0 <HAL_SPI_Init>
	__HAL_SPI_ENABLE(&hspi2);                //使能SPI2
 8008db6:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <NRF24L01_SPI_Init+0x3c>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	4b03      	ldr	r3, [pc, #12]	; (8008dcc <NRF24L01_SPI_Init+0x3c>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008dc4:	601a      	str	r2, [r3, #0]
}
 8008dc6:	bf00      	nop
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20000340 	.word	0x20000340

08008dd0 <NRF24L01_Init>:

//初始化24L01的IO口
void NRF24L01_Init(void) {
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;
	__HAL_RCC_GPIOB_CLK_ENABLE();			//开启GPIOB时钟
 8008dd6:	4b1f      	ldr	r3, [pc, #124]	; (8008e54 <NRF24L01_Init+0x84>)
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	4a1e      	ldr	r2, [pc, #120]	; (8008e54 <NRF24L01_Init+0x84>)
 8008ddc:	f043 0308 	orr.w	r3, r3, #8
 8008de0:	6193      	str	r3, [r2, #24]
 8008de2:	4b1c      	ldr	r3, [pc, #112]	; (8008e54 <NRF24L01_Init+0x84>)
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	f003 0308 	and.w	r3, r3, #8
 8008dea:	607b      	str	r3, [r7, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();			//开启GPIOG时钟
 8008dee:	4b19      	ldr	r3, [pc, #100]	; (8008e54 <NRF24L01_Init+0x84>)
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	4a18      	ldr	r2, [pc, #96]	; (8008e54 <NRF24L01_Init+0x84>)
 8008df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008df8:	6193      	str	r3, [r2, #24]
 8008dfa:	4b16      	ldr	r3, [pc, #88]	; (8008e54 <NRF24L01_Init+0x84>)
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e02:	603b      	str	r3, [r7, #0]
 8008e04:	683b      	ldr	r3, [r7, #0]

	//GPIOB7,8推挽输出
    GPIO_Initure.Pin=GPIO_PIN_7|GPIO_PIN_8;	//PB1,2
 8008e06:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008e0a:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //输出
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB,&GPIO_Initure);     //初始化
 8008e10:	f107 0308 	add.w	r3, r7, #8
 8008e14:	4619      	mov	r1, r3
 8008e16:	4810      	ldr	r0, [pc, #64]	; (8008e58 <NRF24L01_Init+0x88>)
 8008e18:	f7fe fa04 	bl	8007224 <HAL_GPIO_Init>

	//GPIOA.6上拉输入
	GPIO_Initure.Pin = GPIO_PIN_6;							//PA4
 8008e1c:	2340      	movs	r3, #64	; 0x40
 8008e1e:	60bb      	str	r3, [r7, #8]
	GPIO_Initure.Mode = GPIO_MODE_INPUT;      	//输入
 8008e20:	2300      	movs	r3, #0
 8008e22:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);     	//初始化
 8008e24:	f107 0308 	add.w	r3, r7, #8
 8008e28:	4619      	mov	r1, r3
 8008e2a:	480b      	ldr	r0, [pc, #44]	; (8008e58 <NRF24L01_Init+0x88>)
 8008e2c:	f7fe f9fa 	bl	8007224 <HAL_GPIO_Init>

//		MX_SPI1_Init();    		              			//初始化SPI1
	NRF24L01_SPI_Init();                				//针对NRF的特点修改SPI的设置
 8008e30:	f7ff ffae 	bl	8008d90 <NRF24L01_SPI_Init>
	NRF24L01_CE_LOW(); 			            			//使能24L01
 8008e34:	2200      	movs	r2, #0
 8008e36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008e3a:	4808      	ldr	r0, [pc, #32]	; (8008e5c <NRF24L01_Init+0x8c>)
 8008e3c:	f7fe fb9d 	bl	800757a <HAL_GPIO_WritePin>
	NRF24L01_SPI_CS_DISABLE();			    			//SPI片选取消
 8008e40:	2201      	movs	r2, #1
 8008e42:	2180      	movs	r1, #128	; 0x80
 8008e44:	4805      	ldr	r0, [pc, #20]	; (8008e5c <NRF24L01_Init+0x8c>)
 8008e46:	f7fe fb98 	bl	800757a <HAL_GPIO_WritePin>
}
 8008e4a:	bf00      	nop
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	40021000 	.word	0x40021000
 8008e58:	40010c00 	.word	0x40010c00
 8008e5c:	40012000 	.word	0x40012000

08008e60 <SPI1_SetSpeed>:
 *SPI速度设置函数
 *SPI速度=fAPB1/分频系数
 *@ref SPI_BaudRate_Prescaler:SPI_BAUDRATEPRESCALER_2~SPI_BAUDRATEPRESCALER_2 256
 *fAPB1时钟一般为42Mhz：
 */
static void SPI1_SetSpeed(uint8_t SPI_BaudRatePrescaler) {
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	71fb      	strb	r3, [r7, #7]
	assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));		//判断有效性
	__HAL_SPI_DISABLE(&hspi2);            //关闭SPI
 8008e6a:	4b13      	ldr	r3, [pc, #76]	; (8008eb8 <SPI1_SetSpeed+0x58>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	4b11      	ldr	r3, [pc, #68]	; (8008eb8 <SPI1_SetSpeed+0x58>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e78:	601a      	str	r2, [r3, #0]
	hspi2.Instance->CR1 &= 0XFFC7;          //位3-5清零，用来设置波特率
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <SPI1_SetSpeed+0x58>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	6819      	ldr	r1, [r3, #0]
 8008e80:	4b0d      	ldr	r3, [pc, #52]	; (8008eb8 <SPI1_SetSpeed+0x58>)
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8008e88:	400b      	ands	r3, r1
 8008e8a:	6013      	str	r3, [r2, #0]
	hspi2.Instance->CR1 |= SPI_BaudRatePrescaler;          //设置SPI速度
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <SPI1_SetSpeed+0x58>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6819      	ldr	r1, [r3, #0]
 8008e92:	79fa      	ldrb	r2, [r7, #7]
 8008e94:	4b08      	ldr	r3, [pc, #32]	; (8008eb8 <SPI1_SetSpeed+0x58>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi2);             //使能SPI
 8008e9c:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <SPI1_SetSpeed+0x58>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	4b05      	ldr	r3, [pc, #20]	; (8008eb8 <SPI1_SetSpeed+0x58>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eaa:	601a      	str	r2, [r3, #0]
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bc80      	pop	{r7}
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	20000340 	.word	0x20000340

08008ebc <SPIx_ReadWriteByte>:
 * 函数功能: 往串行Flash读取写入一个字节数据并接收一个字节数据
 * 输入参数: byte：待发送数据
 * 返 回 值: uint8_t：接收到的数据
 * 说    明：无
 */
uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef *hspi, uint8_t byte) {
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af02      	add	r7, sp, #8
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	70fb      	strb	r3, [r7, #3]
	uint8_t d_read, d_send = byte;
 8008ec8:	78fb      	ldrb	r3, [r7, #3]
 8008eca:	73bb      	strb	r3, [r7, #14]
	if (HAL_SPI_TransmitReceive(hspi, &d_send, &d_read, 1, 0xFF) != HAL_OK) {
 8008ecc:	f107 020f 	add.w	r2, r7, #15
 8008ed0:	f107 010e 	add.w	r1, r7, #14
 8008ed4:	23ff      	movs	r3, #255	; 0xff
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	2301      	movs	r3, #1
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7ff f804 	bl	8007ee8 <HAL_SPI_TransmitReceive>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <SPIx_ReadWriteByte+0x2e>
		d_read = 0xFF;
 8008ee6:	23ff      	movs	r3, #255	; 0xff
 8008ee8:	73fb      	strb	r3, [r7, #15]
	}
	return d_read;
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3710      	adds	r7, #16
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <NRF24L01_Check>:
 * 函数功能: 检测24L01是否存在
 * 输入参数: 无
 * 返 回 值: 0，成功;1，失败
 * 说    明：无
 */
uint8_t NRF24L01_Check(void) {
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
	uint8_t buf[5] = { 0XA5, 0XA5, 0XA5, 0XA5, 0XA5 };
 8008efa:	4a19      	ldr	r2, [pc, #100]	; (8008f60 <NRF24L01_Check+0x6c>)
 8008efc:	463b      	mov	r3, r7
 8008efe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f02:	6018      	str	r0, [r3, #0]
 8008f04:	3304      	adds	r3, #4
 8008f06:	7019      	strb	r1, [r3, #0]
	uint8_t i;

	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_4); //spi速度为8.0Mhz（（24L01的最大SPI时钟为10Mhz,这里大一点没关系）
 8008f08:	2008      	movs	r0, #8
 8008f0a:	f7ff ffa9 	bl	8008e60 <SPI1_SetSpeed>
	NRF24L01_Write_Buf(NRF_WRITE_REG + TX_ADDR, buf, 5); //写入5个字节的地址.
 8008f0e:	463b      	mov	r3, r7
 8008f10:	2205      	movs	r2, #5
 8008f12:	4619      	mov	r1, r3
 8008f14:	2030      	movs	r0, #48	; 0x30
 8008f16:	f000 f8a7 	bl	8009068 <NRF24L01_Write_Buf>
	NRF24L01_Read_Buf(TX_ADDR, buf, 5); //读出写入的地址
 8008f1a:	463b      	mov	r3, r7
 8008f1c:	2205      	movs	r2, #5
 8008f1e:	4619      	mov	r1, r3
 8008f20:	2010      	movs	r0, #16
 8008f22:	f000 f86b 	bl	8008ffc <NRF24L01_Read_Buf>
	for (i = 0; i < 5; i++)
 8008f26:	2300      	movs	r3, #0
 8008f28:	71fb      	strb	r3, [r7, #7]
 8008f2a:	e00a      	b.n	8008f42 <NRF24L01_Check+0x4e>
		if (buf[i] != 0XA5)
 8008f2c:	79fb      	ldrb	r3, [r7, #7]
 8008f2e:	f107 0208 	add.w	r2, r7, #8
 8008f32:	4413      	add	r3, r2
 8008f34:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8008f38:	2ba5      	cmp	r3, #165	; 0xa5
 8008f3a:	d106      	bne.n	8008f4a <NRF24L01_Check+0x56>
	for (i = 0; i < 5; i++)
 8008f3c:	79fb      	ldrb	r3, [r7, #7]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	71fb      	strb	r3, [r7, #7]
 8008f42:	79fb      	ldrb	r3, [r7, #7]
 8008f44:	2b04      	cmp	r3, #4
 8008f46:	d9f1      	bls.n	8008f2c <NRF24L01_Check+0x38>
 8008f48:	e000      	b.n	8008f4c <NRF24L01_Check+0x58>
			break;
 8008f4a:	bf00      	nop
	if (i != 5)
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	2b05      	cmp	r3, #5
 8008f50:	d001      	beq.n	8008f56 <NRF24L01_Check+0x62>
		return 1; //检测24L01错误
 8008f52:	2301      	movs	r3, #1
 8008f54:	e000      	b.n	8008f58 <NRF24L01_Check+0x64>
	return 0;		 	//检测到24L01
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3708      	adds	r7, #8
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	0800d9d4 	.word	0x0800d9d4

08008f64 <NRF24L01_Write_Reg>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：reg:指定寄存器地址
 *
 */
uint8_t NRF24L01_Write_Reg(uint8_t reg, uint8_t value) {
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	460a      	mov	r2, r1
 8008f6e:	71fb      	strb	r3, [r7, #7]
 8008f70:	4613      	mov	r3, r2
 8008f72:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	NRF24L01_SPI_CS_ENABLE();                 //使能SPI传输
 8008f74:	2200      	movs	r2, #0
 8008f76:	2180      	movs	r1, #128	; 0x80
 8008f78:	480c      	ldr	r0, [pc, #48]	; (8008fac <NRF24L01_Write_Reg+0x48>)
 8008f7a:	f7fe fafe 	bl	800757a <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi2, reg);   //发送寄存器号
 8008f7e:	79fb      	ldrb	r3, [r7, #7]
 8008f80:	4619      	mov	r1, r3
 8008f82:	480b      	ldr	r0, [pc, #44]	; (8008fb0 <NRF24L01_Write_Reg+0x4c>)
 8008f84:	f7ff ff9a 	bl	8008ebc <SPIx_ReadWriteByte>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]
	SPIx_ReadWriteByte(&hspi2, value);         //写入寄存器的值
 8008f8c:	79bb      	ldrb	r3, [r7, #6]
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4807      	ldr	r0, [pc, #28]	; (8008fb0 <NRF24L01_Write_Reg+0x4c>)
 8008f92:	f7ff ff93 	bl	8008ebc <SPIx_ReadWriteByte>
	NRF24L01_SPI_CS_DISABLE();                //禁止SPI传输
 8008f96:	2201      	movs	r2, #1
 8008f98:	2180      	movs	r1, #128	; 0x80
 8008f9a:	4804      	ldr	r0, [pc, #16]	; (8008fac <NRF24L01_Write_Reg+0x48>)
 8008f9c:	f7fe faed 	bl	800757a <HAL_GPIO_WritePin>
	return (status);       			//返回状态值
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	40012000 	.word	0x40012000
 8008fb0:	20000340 	.word	0x20000340

08008fb4 <NRF24L01_Read_Reg>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：reg:要读的寄存器
 *
 */
uint8_t NRF24L01_Read_Reg(uint8_t reg) {
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_val;
	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2180      	movs	r1, #128	; 0x80
 8008fc2:	480c      	ldr	r0, [pc, #48]	; (8008ff4 <NRF24L01_Read_Reg+0x40>)
 8008fc4:	f7fe fad9 	bl	800757a <HAL_GPIO_WritePin>
	SPIx_ReadWriteByte(&hspi2, reg);   //发送寄存器号
 8008fc8:	79fb      	ldrb	r3, [r7, #7]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	480a      	ldr	r0, [pc, #40]	; (8008ff8 <NRF24L01_Read_Reg+0x44>)
 8008fce:	f7ff ff75 	bl	8008ebc <SPIx_ReadWriteByte>
	reg_val = SPIx_ReadWriteByte(&hspi2, 0XFF);   //读取寄存器内容
 8008fd2:	21ff      	movs	r1, #255	; 0xff
 8008fd4:	4808      	ldr	r0, [pc, #32]	; (8008ff8 <NRF24L01_Read_Reg+0x44>)
 8008fd6:	f7ff ff71 	bl	8008ebc <SPIx_ReadWriteByte>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	73fb      	strb	r3, [r7, #15]
	NRF24L01_SPI_CS_DISABLE();          //禁止SPI传输
 8008fde:	2201      	movs	r2, #1
 8008fe0:	2180      	movs	r1, #128	; 0x80
 8008fe2:	4804      	ldr	r0, [pc, #16]	; (8008ff4 <NRF24L01_Read_Reg+0x40>)
 8008fe4:	f7fe fac9 	bl	800757a <HAL_GPIO_WritePin>
	return (reg_val);           //返回状态值
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	bf00      	nop
 8008ff4:	40012000 	.word	0x40012000
 8008ff8:	20000340 	.word	0x20000340

08008ffc <NRF24L01_Read_Buf>:
 * 输入参数: 无
 * 返 回 值: 此次读到的状态寄存器值
 * 说    明：无
 *
 */
uint8_t NRF24L01_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len) {
 8008ffc:	b590      	push	{r4, r7, lr}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	6039      	str	r1, [r7, #0]
 8009006:	71fb      	strb	r3, [r7, #7]
 8009008:	4613      	mov	r3, r2
 800900a:	71bb      	strb	r3, [r7, #6]
	uint8_t status, uint8_t_ctr;

	NRF24L01_SPI_CS_ENABLE();           //使能SPI传输
 800900c:	2200      	movs	r2, #0
 800900e:	2180      	movs	r1, #128	; 0x80
 8009010:	4813      	ldr	r0, [pc, #76]	; (8009060 <NRF24L01_Read_Buf+0x64>)
 8009012:	f7fe fab2 	bl	800757a <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi2, reg);           //发送寄存器值(位置),并读取状态值
 8009016:	79fb      	ldrb	r3, [r7, #7]
 8009018:	4619      	mov	r1, r3
 800901a:	4812      	ldr	r0, [pc, #72]	; (8009064 <NRF24L01_Read_Buf+0x68>)
 800901c:	f7ff ff4e 	bl	8008ebc <SPIx_ReadWriteByte>
 8009020:	4603      	mov	r3, r0
 8009022:	73bb      	strb	r3, [r7, #14]
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 8009024:	2300      	movs	r3, #0
 8009026:	73fb      	strb	r3, [r7, #15]
 8009028:	e00b      	b.n	8009042 <NRF24L01_Read_Buf+0x46>
		pBuf[uint8_t_ctr] = SPIx_ReadWriteByte(&hspi2, 0XFF);           //读出数据
 800902a:	7bfb      	ldrb	r3, [r7, #15]
 800902c:	683a      	ldr	r2, [r7, #0]
 800902e:	18d4      	adds	r4, r2, r3
 8009030:	21ff      	movs	r1, #255	; 0xff
 8009032:	480c      	ldr	r0, [pc, #48]	; (8009064 <NRF24L01_Read_Buf+0x68>)
 8009034:	f7ff ff42 	bl	8008ebc <SPIx_ReadWriteByte>
 8009038:	4603      	mov	r3, r0
 800903a:	7023      	strb	r3, [r4, #0]
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	3301      	adds	r3, #1
 8009040:	73fb      	strb	r3, [r7, #15]
 8009042:	7bfa      	ldrb	r2, [r7, #15]
 8009044:	79bb      	ldrb	r3, [r7, #6]
 8009046:	429a      	cmp	r2, r3
 8009048:	d3ef      	bcc.n	800902a <NRF24L01_Read_Buf+0x2e>
	}
	NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 800904a:	2201      	movs	r2, #1
 800904c:	2180      	movs	r1, #128	; 0x80
 800904e:	4804      	ldr	r0, [pc, #16]	; (8009060 <NRF24L01_Read_Buf+0x64>)
 8009050:	f7fe fa93 	bl	800757a <HAL_GPIO_WritePin>
	return status;        //返回读到的状态值
 8009054:	7bbb      	ldrb	r3, [r7, #14]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	bd90      	pop	{r4, r7, pc}
 800905e:	bf00      	nop
 8009060:	40012000 	.word	0x40012000
 8009064:	20000340 	.word	0x20000340

08009068 <NRF24L01_Write_Buf>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：reg:寄存器(位置)  *pBuf:数据指针  len:数据长度
 *
 */
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len) {
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	4603      	mov	r3, r0
 8009070:	6039      	str	r1, [r7, #0]
 8009072:	71fb      	strb	r3, [r7, #7]
 8009074:	4613      	mov	r3, r2
 8009076:	71bb      	strb	r3, [r7, #6]
	uint8_t status, uint8_t_ctr;
	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 8009078:	2200      	movs	r2, #0
 800907a:	2180      	movs	r1, #128	; 0x80
 800907c:	4812      	ldr	r0, [pc, #72]	; (80090c8 <NRF24L01_Write_Buf+0x60>)
 800907e:	f7fe fa7c 	bl	800757a <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi2, reg);          //发送寄存器值(位置),并读取状态值
 8009082:	79fb      	ldrb	r3, [r7, #7]
 8009084:	4619      	mov	r1, r3
 8009086:	4811      	ldr	r0, [pc, #68]	; (80090cc <NRF24L01_Write_Buf+0x64>)
 8009088:	f7ff ff18 	bl	8008ebc <SPIx_ReadWriteByte>
 800908c:	4603      	mov	r3, r0
 800908e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 8009090:	2300      	movs	r3, #0
 8009092:	73fb      	strb	r3, [r7, #15]
 8009094:	e00a      	b.n	80090ac <NRF24L01_Write_Buf+0x44>
		SPIx_ReadWriteByte(&hspi2, *pBuf++); //写入数据
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	1c5a      	adds	r2, r3, #1
 800909a:	603a      	str	r2, [r7, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	4619      	mov	r1, r3
 80090a0:	480a      	ldr	r0, [pc, #40]	; (80090cc <NRF24L01_Write_Buf+0x64>)
 80090a2:	f7ff ff0b 	bl	8008ebc <SPIx_ReadWriteByte>
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	3301      	adds	r3, #1
 80090aa:	73fb      	strb	r3, [r7, #15]
 80090ac:	7bfa      	ldrb	r2, [r7, #15]
 80090ae:	79bb      	ldrb	r3, [r7, #6]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d3f0      	bcc.n	8009096 <NRF24L01_Write_Buf+0x2e>
	}
	NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 80090b4:	2201      	movs	r2, #1
 80090b6:	2180      	movs	r1, #128	; 0x80
 80090b8:	4803      	ldr	r0, [pc, #12]	; (80090c8 <NRF24L01_Write_Buf+0x60>)
 80090ba:	f7fe fa5e 	bl	800757a <HAL_GPIO_WritePin>
	return status;          //返回读到的状态值
 80090be:	7bbb      	ldrb	r3, [r7, #14]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	40012000 	.word	0x40012000
 80090cc:	20000340 	.word	0x20000340

080090d0 <NRF24L01_TxPacket>:
 * 输入参数: 无
 * 返 回 值: 发送完成状况
 * 说    明：txbuf:待发送数据首地址
 *
 */
uint8_t NRF24L01_TxPacket(uint8_t *txbuf) {
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
	uint8_t sta;
	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为4.0Mhz（24L01的最大SPI时钟为10Mhz）
 80090d8:	2010      	movs	r0, #16
 80090da:	f7ff fec1 	bl	8008e60 <SPI1_SetSpeed>
	NRF24L01_CE_LOW();
 80090de:	2200      	movs	r2, #0
 80090e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80090e4:	481b      	ldr	r0, [pc, #108]	; (8009154 <NRF24L01_TxPacket+0x84>)
 80090e6:	f7fe fa48 	bl	800757a <HAL_GPIO_WritePin>
	NRF24L01_Write_Buf(WR_TX_PLOAD, txbuf, TX_PLOAD_WIDTH); //写数据到TX BUF  32个字节
 80090ea:	2220      	movs	r2, #32
 80090ec:	6879      	ldr	r1, [r7, #4]
 80090ee:	20a0      	movs	r0, #160	; 0xa0
 80090f0:	f7ff ffba 	bl	8009068 <NRF24L01_Write_Buf>
	NRF24L01_CE_HIGH(); //启动发送
 80090f4:	2201      	movs	r2, #1
 80090f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80090fa:	4816      	ldr	r0, [pc, #88]	; (8009154 <NRF24L01_TxPacket+0x84>)
 80090fc:	f7fe fa3d 	bl	800757a <HAL_GPIO_WritePin>

	while (NRF24L01_IRQ_PIN_READ() != 0)
 8009100:	bf00      	nop
 8009102:	2140      	movs	r1, #64	; 0x40
 8009104:	4813      	ldr	r0, [pc, #76]	; (8009154 <NRF24L01_TxPacket+0x84>)
 8009106:	f7fe fa21 	bl	800754c <HAL_GPIO_ReadPin>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1f8      	bne.n	8009102 <NRF24L01_TxPacket+0x32>
		; //等待发送完成

	sta = NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
 8009110:	2007      	movs	r0, #7
 8009112:	f7ff ff4f 	bl	8008fb4 <NRF24L01_Read_Reg>
 8009116:	4603      	mov	r3, r0
 8009118:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG + STATUS, sta); //清除TX_DS或MAX_RT中断标志
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	4619      	mov	r1, r3
 800911e:	2027      	movs	r0, #39	; 0x27
 8009120:	f7ff ff20 	bl	8008f64 <NRF24L01_Write_Reg>
	if (sta & MAX_TX) //达到最大重发次数
 8009124:	7bfb      	ldrb	r3, [r7, #15]
 8009126:	f003 0310 	and.w	r3, r3, #16
 800912a:	2b00      	cmp	r3, #0
 800912c:	d005      	beq.n	800913a <NRF24L01_TxPacket+0x6a>
	{
		NRF24L01_Write_Reg(FLUSH_TX, 0xff); //清除TX FIFO寄存器
 800912e:	21ff      	movs	r1, #255	; 0xff
 8009130:	20e1      	movs	r0, #225	; 0xe1
 8009132:	f7ff ff17 	bl	8008f64 <NRF24L01_Write_Reg>
		return MAX_TX;
 8009136:	2310      	movs	r3, #16
 8009138:	e007      	b.n	800914a <NRF24L01_TxPacket+0x7a>
	}
	if (sta & TX_OK) //发送完成
 800913a:	7bfb      	ldrb	r3, [r7, #15]
 800913c:	f003 0320 	and.w	r3, r3, #32
 8009140:	2b00      	cmp	r3, #0
 8009142:	d001      	beq.n	8009148 <NRF24L01_TxPacket+0x78>
	{
		return TX_OK;
 8009144:	2320      	movs	r3, #32
 8009146:	e000      	b.n	800914a <NRF24L01_TxPacket+0x7a>
	}
	return 0xff; //其他原因发送失败
 8009148:	23ff      	movs	r3, #255	; 0xff
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	40012000 	.word	0x40012000

08009158 <NRF24L01_RxPacket>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：无
 *
 */
uint8_t NRF24L01_RxPacket(uint8_t *rxbuf) {
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
	uint8_t sta;
	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为4.0Mhz（24L01的最大SPI时钟为10Mhz）
 8009160:	2010      	movs	r0, #16
 8009162:	f7ff fe7d 	bl	8008e60 <SPI1_SetSpeed>
	sta = NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
 8009166:	2007      	movs	r0, #7
 8009168:	f7ff ff24 	bl	8008fb4 <NRF24L01_Read_Reg>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG + STATUS, sta); //清除TX_DS或MAX_RT中断标志
 8009170:	7bfb      	ldrb	r3, [r7, #15]
 8009172:	4619      	mov	r1, r3
 8009174:	2027      	movs	r0, #39	; 0x27
 8009176:	f7ff fef5 	bl	8008f64 <NRF24L01_Write_Reg>
	if (sta & RX_OK) //接收到数据
 800917a:	7bfb      	ldrb	r3, [r7, #15]
 800917c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00a      	beq.n	800919a <NRF24L01_RxPacket+0x42>
	{
		NRF24L01_Read_Buf(RD_RX_PLOAD, rxbuf, RX_PLOAD_WIDTH); //读取数据
 8009184:	2220      	movs	r2, #32
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	2061      	movs	r0, #97	; 0x61
 800918a:	f7ff ff37 	bl	8008ffc <NRF24L01_Read_Buf>
		NRF24L01_Write_Reg(FLUSH_RX, 0xff); //清除RX FIFO寄存器
 800918e:	21ff      	movs	r1, #255	; 0xff
 8009190:	20e2      	movs	r0, #226	; 0xe2
 8009192:	f7ff fee7 	bl	8008f64 <NRF24L01_Write_Reg>
		return 0;
 8009196:	2300      	movs	r3, #0
 8009198:	e000      	b.n	800919c <NRF24L01_RxPacket+0x44>
	}
	return 1; //没收到任何数据
 800919a:	2301      	movs	r3, #1
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <NRF24L01_RX_Mode>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：无
 *
 */
void NRF24L01_RX_Mode(void) {
 80091a4:	b580      	push	{r7, lr}
 80091a6:	af00      	add	r7, sp, #0
	NRF24L01_CE_LOW();
 80091a8:	2200      	movs	r2, #0
 80091aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80091ae:	4815      	ldr	r0, [pc, #84]	; (8009204 <NRF24L01_RX_Mode+0x60>)
 80091b0:	f7fe f9e3 	bl	800757a <HAL_GPIO_WritePin>
	NRF24L01_Write_Reg(NRF_WRITE_REG + CONFIG, 0x0F); //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC
 80091b4:	210f      	movs	r1, #15
 80091b6:	2020      	movs	r0, #32
 80091b8:	f7ff fed4 	bl	8008f64 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_AA, 0x01);    //使能通道0的自动应答
 80091bc:	2101      	movs	r1, #1
 80091be:	2021      	movs	r0, #33	; 0x21
 80091c0:	f7ff fed0 	bl	8008f64 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_RXADDR, 0x01);    //使能通道0的接收地址
 80091c4:	2101      	movs	r1, #1
 80091c6:	2022      	movs	r0, #34	; 0x22
 80091c8:	f7ff fecc 	bl	8008f64 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_CH, 40);	     //设置RF通信频率
 80091cc:	2128      	movs	r1, #40	; 0x28
 80091ce:	2025      	movs	r0, #37	; 0x25
 80091d0:	f7ff fec8 	bl	8008f64 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_SETUP, 0x0f);	//设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 80091d4:	210f      	movs	r1, #15
 80091d6:	2026      	movs	r0, #38	; 0x26
 80091d8:	f7ff fec4 	bl	8008f64 <NRF24L01_Write_Reg>

	NRF24L01_Write_Reg(NRF_WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH);//选择通道0的有效数据宽度
 80091dc:	2120      	movs	r1, #32
 80091de:	2031      	movs	r0, #49	; 0x31
 80091e0:	f7ff fec0 	bl	8008f64 <NRF24L01_Write_Reg>

	NRF24L01_Write_Buf(NRF_WRITE_REG + RX_ADDR_P0, (uint8_t*) RX_ADDRESS,
 80091e4:	2205      	movs	r2, #5
 80091e6:	4908      	ldr	r1, [pc, #32]	; (8009208 <NRF24L01_RX_Mode+0x64>)
 80091e8:	202a      	movs	r0, #42	; 0x2a
 80091ea:	f7ff ff3d 	bl	8009068 <NRF24L01_Write_Buf>
			RX_ADR_WIDTH);	     //写RX节点地址

	NRF24L01_CE_HIGH(); //CE为高,进入接收模式
 80091ee:	2201      	movs	r2, #1
 80091f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80091f4:	4803      	ldr	r0, [pc, #12]	; (8009204 <NRF24L01_RX_Mode+0x60>)
 80091f6:	f7fe f9c0 	bl	800757a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80091fa:	2001      	movs	r0, #1
 80091fc:	f7fd ff0a 	bl	8007014 <HAL_Delay>
}
 8009200:	bf00      	nop
 8009202:	bd80      	pop	{r7, pc}
 8009204:	40012000 	.word	0x40012000
 8009208:	0801a6e0 	.word	0x0801a6e0

0800920c <NRF24L01_TX_Mode>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：无
 *
 */
void NRF24L01_TX_Mode(void) {
 800920c:	b580      	push	{r7, lr}
 800920e:	af00      	add	r7, sp, #0
	NRF24L01_CE_LOW();
 8009210:	2200      	movs	r2, #0
 8009212:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009216:	4818      	ldr	r0, [pc, #96]	; (8009278 <NRF24L01_TX_Mode+0x6c>)
 8009218:	f7fe f9af 	bl	800757a <HAL_GPIO_WritePin>
	NRF24L01_Write_Buf(NRF_WRITE_REG + TX_ADDR, (uint8_t*) TX_ADDRESS,
 800921c:	2205      	movs	r2, #5
 800921e:	4917      	ldr	r1, [pc, #92]	; (800927c <NRF24L01_TX_Mode+0x70>)
 8009220:	2030      	movs	r0, #48	; 0x30
 8009222:	f7ff ff21 	bl	8009068 <NRF24L01_Write_Buf>
			TX_ADR_WIDTH); //写TX节点地址
	NRF24L01_Write_Buf(NRF_WRITE_REG + RX_ADDR_P0, (uint8_t*) RX_ADDRESS,
 8009226:	2205      	movs	r2, #5
 8009228:	4915      	ldr	r1, [pc, #84]	; (8009280 <NRF24L01_TX_Mode+0x74>)
 800922a:	202a      	movs	r0, #42	; 0x2a
 800922c:	f7ff ff1c 	bl	8009068 <NRF24L01_Write_Buf>
			RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK

	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_AA, 0x01);     //使能通道0的自动应答
 8009230:	2101      	movs	r1, #1
 8009232:	2021      	movs	r0, #33	; 0x21
 8009234:	f7ff fe96 	bl	8008f64 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_RXADDR, 0x01); //使能通道0的接收地址
 8009238:	2101      	movs	r1, #1
 800923a:	2022      	movs	r0, #34	; 0x22
 800923c:	f7ff fe92 	bl	8008f64 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + SETUP_RETR, 0xff); //设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次
 8009240:	21ff      	movs	r1, #255	; 0xff
 8009242:	2024      	movs	r0, #36	; 0x24
 8009244:	f7ff fe8e 	bl	8008f64 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_CH, 40);       //设置RF通道为40
 8009248:	2128      	movs	r1, #40	; 0x28
 800924a:	2025      	movs	r0, #37	; 0x25
 800924c:	f7ff fe8a 	bl	8008f64 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_SETUP, 0x0f); //设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 8009250:	210f      	movs	r1, #15
 8009252:	2026      	movs	r0, #38	; 0x26
 8009254:	f7ff fe86 	bl	8008f64 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + CONFIG, 0x0e); //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断
 8009258:	210e      	movs	r1, #14
 800925a:	2020      	movs	r0, #32
 800925c:	f7ff fe82 	bl	8008f64 <NRF24L01_Write_Reg>
	NRF24L01_CE_HIGH();    //CE为高,10us后启动发送
 8009260:	2201      	movs	r2, #1
 8009262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009266:	4804      	ldr	r0, [pc, #16]	; (8009278 <NRF24L01_TX_Mode+0x6c>)
 8009268:	f7fe f987 	bl	800757a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800926c:	2001      	movs	r0, #1
 800926e:	f7fd fed1 	bl	8007014 <HAL_Delay>
}
 8009272:	bf00      	nop
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	40012000 	.word	0x40012000
 800927c:	0801a6d8 	.word	0x0801a6d8
 8009280:	0801a6e0 	.word	0x0801a6e0

08009284 <atof>:
 8009284:	2100      	movs	r1, #0
 8009286:	f001 bae7 	b.w	800a858 <strtod>

0800928a <atoff>:
 800928a:	2100      	movs	r1, #0
 800928c:	f001 baf0 	b.w	800a870 <strtof>

08009290 <atoi>:
 8009290:	220a      	movs	r2, #10
 8009292:	2100      	movs	r1, #0
 8009294:	f001 bbc4 	b.w	800aa20 <strtol>

08009298 <__errno>:
 8009298:	4b01      	ldr	r3, [pc, #4]	; (80092a0 <__errno+0x8>)
 800929a:	6818      	ldr	r0, [r3, #0]
 800929c:	4770      	bx	lr
 800929e:	bf00      	nop
 80092a0:	20000014 	.word	0x20000014

080092a4 <__libc_init_array>:
 80092a4:	b570      	push	{r4, r5, r6, lr}
 80092a6:	2600      	movs	r6, #0
 80092a8:	4d0c      	ldr	r5, [pc, #48]	; (80092dc <__libc_init_array+0x38>)
 80092aa:	4c0d      	ldr	r4, [pc, #52]	; (80092e0 <__libc_init_array+0x3c>)
 80092ac:	1b64      	subs	r4, r4, r5
 80092ae:	10a4      	asrs	r4, r4, #2
 80092b0:	42a6      	cmp	r6, r4
 80092b2:	d109      	bne.n	80092c8 <__libc_init_array+0x24>
 80092b4:	f004 fa90 	bl	800d7d8 <_init>
 80092b8:	2600      	movs	r6, #0
 80092ba:	4d0a      	ldr	r5, [pc, #40]	; (80092e4 <__libc_init_array+0x40>)
 80092bc:	4c0a      	ldr	r4, [pc, #40]	; (80092e8 <__libc_init_array+0x44>)
 80092be:	1b64      	subs	r4, r4, r5
 80092c0:	10a4      	asrs	r4, r4, #2
 80092c2:	42a6      	cmp	r6, r4
 80092c4:	d105      	bne.n	80092d2 <__libc_init_array+0x2e>
 80092c6:	bd70      	pop	{r4, r5, r6, pc}
 80092c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092cc:	4798      	blx	r3
 80092ce:	3601      	adds	r6, #1
 80092d0:	e7ee      	b.n	80092b0 <__libc_init_array+0xc>
 80092d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d6:	4798      	blx	r3
 80092d8:	3601      	adds	r6, #1
 80092da:	e7f2      	b.n	80092c2 <__libc_init_array+0x1e>
 80092dc:	0801ab94 	.word	0x0801ab94
 80092e0:	0801ab94 	.word	0x0801ab94
 80092e4:	0801ab94 	.word	0x0801ab94
 80092e8:	0801ab98 	.word	0x0801ab98

080092ec <memset>:
 80092ec:	4603      	mov	r3, r0
 80092ee:	4402      	add	r2, r0
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d100      	bne.n	80092f6 <memset+0xa>
 80092f4:	4770      	bx	lr
 80092f6:	f803 1b01 	strb.w	r1, [r3], #1
 80092fa:	e7f9      	b.n	80092f0 <memset+0x4>

080092fc <__cvt>:
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009302:	461f      	mov	r7, r3
 8009304:	bfbb      	ittet	lt
 8009306:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800930a:	461f      	movlt	r7, r3
 800930c:	2300      	movge	r3, #0
 800930e:	232d      	movlt	r3, #45	; 0x2d
 8009310:	b088      	sub	sp, #32
 8009312:	4614      	mov	r4, r2
 8009314:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009316:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009318:	7013      	strb	r3, [r2, #0]
 800931a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800931c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009320:	f023 0820 	bic.w	r8, r3, #32
 8009324:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009328:	d005      	beq.n	8009336 <__cvt+0x3a>
 800932a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800932e:	d100      	bne.n	8009332 <__cvt+0x36>
 8009330:	3501      	adds	r5, #1
 8009332:	2302      	movs	r3, #2
 8009334:	e000      	b.n	8009338 <__cvt+0x3c>
 8009336:	2303      	movs	r3, #3
 8009338:	aa07      	add	r2, sp, #28
 800933a:	9204      	str	r2, [sp, #16]
 800933c:	aa06      	add	r2, sp, #24
 800933e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009342:	e9cd 3500 	strd	r3, r5, [sp]
 8009346:	4622      	mov	r2, r4
 8009348:	463b      	mov	r3, r7
 800934a:	f001 fc01 	bl	800ab50 <_dtoa_r>
 800934e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009352:	4606      	mov	r6, r0
 8009354:	d102      	bne.n	800935c <__cvt+0x60>
 8009356:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009358:	07db      	lsls	r3, r3, #31
 800935a:	d522      	bpl.n	80093a2 <__cvt+0xa6>
 800935c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009360:	eb06 0905 	add.w	r9, r6, r5
 8009364:	d110      	bne.n	8009388 <__cvt+0x8c>
 8009366:	7833      	ldrb	r3, [r6, #0]
 8009368:	2b30      	cmp	r3, #48	; 0x30
 800936a:	d10a      	bne.n	8009382 <__cvt+0x86>
 800936c:	2200      	movs	r2, #0
 800936e:	2300      	movs	r3, #0
 8009370:	4620      	mov	r0, r4
 8009372:	4639      	mov	r1, r7
 8009374:	f7f7 fb84 	bl	8000a80 <__aeabi_dcmpeq>
 8009378:	b918      	cbnz	r0, 8009382 <__cvt+0x86>
 800937a:	f1c5 0501 	rsb	r5, r5, #1
 800937e:	f8ca 5000 	str.w	r5, [sl]
 8009382:	f8da 3000 	ldr.w	r3, [sl]
 8009386:	4499      	add	r9, r3
 8009388:	2200      	movs	r2, #0
 800938a:	2300      	movs	r3, #0
 800938c:	4620      	mov	r0, r4
 800938e:	4639      	mov	r1, r7
 8009390:	f7f7 fb76 	bl	8000a80 <__aeabi_dcmpeq>
 8009394:	b108      	cbz	r0, 800939a <__cvt+0x9e>
 8009396:	f8cd 901c 	str.w	r9, [sp, #28]
 800939a:	2230      	movs	r2, #48	; 0x30
 800939c:	9b07      	ldr	r3, [sp, #28]
 800939e:	454b      	cmp	r3, r9
 80093a0:	d307      	bcc.n	80093b2 <__cvt+0xb6>
 80093a2:	4630      	mov	r0, r6
 80093a4:	9b07      	ldr	r3, [sp, #28]
 80093a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80093a8:	1b9b      	subs	r3, r3, r6
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	b008      	add	sp, #32
 80093ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b2:	1c59      	adds	r1, r3, #1
 80093b4:	9107      	str	r1, [sp, #28]
 80093b6:	701a      	strb	r2, [r3, #0]
 80093b8:	e7f0      	b.n	800939c <__cvt+0xa0>

080093ba <__exponent>:
 80093ba:	4603      	mov	r3, r0
 80093bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093be:	2900      	cmp	r1, #0
 80093c0:	f803 2b02 	strb.w	r2, [r3], #2
 80093c4:	bfb6      	itet	lt
 80093c6:	222d      	movlt	r2, #45	; 0x2d
 80093c8:	222b      	movge	r2, #43	; 0x2b
 80093ca:	4249      	neglt	r1, r1
 80093cc:	2909      	cmp	r1, #9
 80093ce:	7042      	strb	r2, [r0, #1]
 80093d0:	dd2b      	ble.n	800942a <__exponent+0x70>
 80093d2:	f10d 0407 	add.w	r4, sp, #7
 80093d6:	46a4      	mov	ip, r4
 80093d8:	270a      	movs	r7, #10
 80093da:	fb91 f6f7 	sdiv	r6, r1, r7
 80093de:	460a      	mov	r2, r1
 80093e0:	46a6      	mov	lr, r4
 80093e2:	fb07 1516 	mls	r5, r7, r6, r1
 80093e6:	2a63      	cmp	r2, #99	; 0x63
 80093e8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80093ec:	4631      	mov	r1, r6
 80093ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80093f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80093f6:	dcf0      	bgt.n	80093da <__exponent+0x20>
 80093f8:	3130      	adds	r1, #48	; 0x30
 80093fa:	f1ae 0502 	sub.w	r5, lr, #2
 80093fe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009402:	4629      	mov	r1, r5
 8009404:	1c44      	adds	r4, r0, #1
 8009406:	4561      	cmp	r1, ip
 8009408:	d30a      	bcc.n	8009420 <__exponent+0x66>
 800940a:	f10d 0209 	add.w	r2, sp, #9
 800940e:	eba2 020e 	sub.w	r2, r2, lr
 8009412:	4565      	cmp	r5, ip
 8009414:	bf88      	it	hi
 8009416:	2200      	movhi	r2, #0
 8009418:	4413      	add	r3, r2
 800941a:	1a18      	subs	r0, r3, r0
 800941c:	b003      	add	sp, #12
 800941e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009420:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009424:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009428:	e7ed      	b.n	8009406 <__exponent+0x4c>
 800942a:	2330      	movs	r3, #48	; 0x30
 800942c:	3130      	adds	r1, #48	; 0x30
 800942e:	7083      	strb	r3, [r0, #2]
 8009430:	70c1      	strb	r1, [r0, #3]
 8009432:	1d03      	adds	r3, r0, #4
 8009434:	e7f1      	b.n	800941a <__exponent+0x60>
	...

08009438 <_printf_float>:
 8009438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943c:	b091      	sub	sp, #68	; 0x44
 800943e:	460c      	mov	r4, r1
 8009440:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009444:	4616      	mov	r6, r2
 8009446:	461f      	mov	r7, r3
 8009448:	4605      	mov	r5, r0
 800944a:	f002 fdcb 	bl	800bfe4 <_localeconv_r>
 800944e:	6803      	ldr	r3, [r0, #0]
 8009450:	4618      	mov	r0, r3
 8009452:	9309      	str	r3, [sp, #36]	; 0x24
 8009454:	f7f6 fee8 	bl	8000228 <strlen>
 8009458:	2300      	movs	r3, #0
 800945a:	930e      	str	r3, [sp, #56]	; 0x38
 800945c:	f8d8 3000 	ldr.w	r3, [r8]
 8009460:	900a      	str	r0, [sp, #40]	; 0x28
 8009462:	3307      	adds	r3, #7
 8009464:	f023 0307 	bic.w	r3, r3, #7
 8009468:	f103 0208 	add.w	r2, r3, #8
 800946c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009470:	f8d4 b000 	ldr.w	fp, [r4]
 8009474:	f8c8 2000 	str.w	r2, [r8]
 8009478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009480:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8009484:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8009488:	930b      	str	r3, [sp, #44]	; 0x2c
 800948a:	f04f 32ff 	mov.w	r2, #4294967295
 800948e:	4640      	mov	r0, r8
 8009490:	4b9c      	ldr	r3, [pc, #624]	; (8009704 <_printf_float+0x2cc>)
 8009492:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009494:	f7f7 fb26 	bl	8000ae4 <__aeabi_dcmpun>
 8009498:	bb70      	cbnz	r0, 80094f8 <_printf_float+0xc0>
 800949a:	f04f 32ff 	mov.w	r2, #4294967295
 800949e:	4640      	mov	r0, r8
 80094a0:	4b98      	ldr	r3, [pc, #608]	; (8009704 <_printf_float+0x2cc>)
 80094a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094a4:	f7f7 fb00 	bl	8000aa8 <__aeabi_dcmple>
 80094a8:	bb30      	cbnz	r0, 80094f8 <_printf_float+0xc0>
 80094aa:	2200      	movs	r2, #0
 80094ac:	2300      	movs	r3, #0
 80094ae:	4640      	mov	r0, r8
 80094b0:	4651      	mov	r1, sl
 80094b2:	f7f7 faef 	bl	8000a94 <__aeabi_dcmplt>
 80094b6:	b110      	cbz	r0, 80094be <_printf_float+0x86>
 80094b8:	232d      	movs	r3, #45	; 0x2d
 80094ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094be:	4b92      	ldr	r3, [pc, #584]	; (8009708 <_printf_float+0x2d0>)
 80094c0:	4892      	ldr	r0, [pc, #584]	; (800970c <_printf_float+0x2d4>)
 80094c2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80094c6:	bf94      	ite	ls
 80094c8:	4698      	movls	r8, r3
 80094ca:	4680      	movhi	r8, r0
 80094cc:	2303      	movs	r3, #3
 80094ce:	f04f 0a00 	mov.w	sl, #0
 80094d2:	6123      	str	r3, [r4, #16]
 80094d4:	f02b 0304 	bic.w	r3, fp, #4
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	4633      	mov	r3, r6
 80094dc:	4621      	mov	r1, r4
 80094de:	4628      	mov	r0, r5
 80094e0:	9700      	str	r7, [sp, #0]
 80094e2:	aa0f      	add	r2, sp, #60	; 0x3c
 80094e4:	f000 f9d4 	bl	8009890 <_printf_common>
 80094e8:	3001      	adds	r0, #1
 80094ea:	f040 8090 	bne.w	800960e <_printf_float+0x1d6>
 80094ee:	f04f 30ff 	mov.w	r0, #4294967295
 80094f2:	b011      	add	sp, #68	; 0x44
 80094f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f8:	4642      	mov	r2, r8
 80094fa:	4653      	mov	r3, sl
 80094fc:	4640      	mov	r0, r8
 80094fe:	4651      	mov	r1, sl
 8009500:	f7f7 faf0 	bl	8000ae4 <__aeabi_dcmpun>
 8009504:	b148      	cbz	r0, 800951a <_printf_float+0xe2>
 8009506:	f1ba 0f00 	cmp.w	sl, #0
 800950a:	bfb8      	it	lt
 800950c:	232d      	movlt	r3, #45	; 0x2d
 800950e:	4880      	ldr	r0, [pc, #512]	; (8009710 <_printf_float+0x2d8>)
 8009510:	bfb8      	it	lt
 8009512:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009516:	4b7f      	ldr	r3, [pc, #508]	; (8009714 <_printf_float+0x2dc>)
 8009518:	e7d3      	b.n	80094c2 <_printf_float+0x8a>
 800951a:	6863      	ldr	r3, [r4, #4]
 800951c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	d142      	bne.n	80095aa <_printf_float+0x172>
 8009524:	2306      	movs	r3, #6
 8009526:	6063      	str	r3, [r4, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	9206      	str	r2, [sp, #24]
 800952c:	aa0e      	add	r2, sp, #56	; 0x38
 800952e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009532:	aa0d      	add	r2, sp, #52	; 0x34
 8009534:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009538:	9203      	str	r2, [sp, #12]
 800953a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800953e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009542:	6023      	str	r3, [r4, #0]
 8009544:	6863      	ldr	r3, [r4, #4]
 8009546:	4642      	mov	r2, r8
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	4628      	mov	r0, r5
 800954c:	4653      	mov	r3, sl
 800954e:	910b      	str	r1, [sp, #44]	; 0x2c
 8009550:	f7ff fed4 	bl	80092fc <__cvt>
 8009554:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009556:	4680      	mov	r8, r0
 8009558:	2947      	cmp	r1, #71	; 0x47
 800955a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800955c:	d108      	bne.n	8009570 <_printf_float+0x138>
 800955e:	1cc8      	adds	r0, r1, #3
 8009560:	db02      	blt.n	8009568 <_printf_float+0x130>
 8009562:	6863      	ldr	r3, [r4, #4]
 8009564:	4299      	cmp	r1, r3
 8009566:	dd40      	ble.n	80095ea <_printf_float+0x1b2>
 8009568:	f1a9 0902 	sub.w	r9, r9, #2
 800956c:	fa5f f989 	uxtb.w	r9, r9
 8009570:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009574:	d81f      	bhi.n	80095b6 <_printf_float+0x17e>
 8009576:	464a      	mov	r2, r9
 8009578:	3901      	subs	r1, #1
 800957a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800957e:	910d      	str	r1, [sp, #52]	; 0x34
 8009580:	f7ff ff1b 	bl	80093ba <__exponent>
 8009584:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009586:	4682      	mov	sl, r0
 8009588:	1813      	adds	r3, r2, r0
 800958a:	2a01      	cmp	r2, #1
 800958c:	6123      	str	r3, [r4, #16]
 800958e:	dc02      	bgt.n	8009596 <_printf_float+0x15e>
 8009590:	6822      	ldr	r2, [r4, #0]
 8009592:	07d2      	lsls	r2, r2, #31
 8009594:	d501      	bpl.n	800959a <_printf_float+0x162>
 8009596:	3301      	adds	r3, #1
 8009598:	6123      	str	r3, [r4, #16]
 800959a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d09b      	beq.n	80094da <_printf_float+0xa2>
 80095a2:	232d      	movs	r3, #45	; 0x2d
 80095a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095a8:	e797      	b.n	80094da <_printf_float+0xa2>
 80095aa:	2947      	cmp	r1, #71	; 0x47
 80095ac:	d1bc      	bne.n	8009528 <_printf_float+0xf0>
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1ba      	bne.n	8009528 <_printf_float+0xf0>
 80095b2:	2301      	movs	r3, #1
 80095b4:	e7b7      	b.n	8009526 <_printf_float+0xee>
 80095b6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80095ba:	d118      	bne.n	80095ee <_printf_float+0x1b6>
 80095bc:	2900      	cmp	r1, #0
 80095be:	6863      	ldr	r3, [r4, #4]
 80095c0:	dd0b      	ble.n	80095da <_printf_float+0x1a2>
 80095c2:	6121      	str	r1, [r4, #16]
 80095c4:	b913      	cbnz	r3, 80095cc <_printf_float+0x194>
 80095c6:	6822      	ldr	r2, [r4, #0]
 80095c8:	07d0      	lsls	r0, r2, #31
 80095ca:	d502      	bpl.n	80095d2 <_printf_float+0x19a>
 80095cc:	3301      	adds	r3, #1
 80095ce:	440b      	add	r3, r1
 80095d0:	6123      	str	r3, [r4, #16]
 80095d2:	f04f 0a00 	mov.w	sl, #0
 80095d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80095d8:	e7df      	b.n	800959a <_printf_float+0x162>
 80095da:	b913      	cbnz	r3, 80095e2 <_printf_float+0x1aa>
 80095dc:	6822      	ldr	r2, [r4, #0]
 80095de:	07d2      	lsls	r2, r2, #31
 80095e0:	d501      	bpl.n	80095e6 <_printf_float+0x1ae>
 80095e2:	3302      	adds	r3, #2
 80095e4:	e7f4      	b.n	80095d0 <_printf_float+0x198>
 80095e6:	2301      	movs	r3, #1
 80095e8:	e7f2      	b.n	80095d0 <_printf_float+0x198>
 80095ea:	f04f 0967 	mov.w	r9, #103	; 0x67
 80095ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095f0:	4299      	cmp	r1, r3
 80095f2:	db05      	blt.n	8009600 <_printf_float+0x1c8>
 80095f4:	6823      	ldr	r3, [r4, #0]
 80095f6:	6121      	str	r1, [r4, #16]
 80095f8:	07d8      	lsls	r0, r3, #31
 80095fa:	d5ea      	bpl.n	80095d2 <_printf_float+0x19a>
 80095fc:	1c4b      	adds	r3, r1, #1
 80095fe:	e7e7      	b.n	80095d0 <_printf_float+0x198>
 8009600:	2900      	cmp	r1, #0
 8009602:	bfcc      	ite	gt
 8009604:	2201      	movgt	r2, #1
 8009606:	f1c1 0202 	rsble	r2, r1, #2
 800960a:	4413      	add	r3, r2
 800960c:	e7e0      	b.n	80095d0 <_printf_float+0x198>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	055a      	lsls	r2, r3, #21
 8009612:	d407      	bmi.n	8009624 <_printf_float+0x1ec>
 8009614:	6923      	ldr	r3, [r4, #16]
 8009616:	4642      	mov	r2, r8
 8009618:	4631      	mov	r1, r6
 800961a:	4628      	mov	r0, r5
 800961c:	47b8      	blx	r7
 800961e:	3001      	adds	r0, #1
 8009620:	d12b      	bne.n	800967a <_printf_float+0x242>
 8009622:	e764      	b.n	80094ee <_printf_float+0xb6>
 8009624:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009628:	f240 80dd 	bls.w	80097e6 <_printf_float+0x3ae>
 800962c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009630:	2200      	movs	r2, #0
 8009632:	2300      	movs	r3, #0
 8009634:	f7f7 fa24 	bl	8000a80 <__aeabi_dcmpeq>
 8009638:	2800      	cmp	r0, #0
 800963a:	d033      	beq.n	80096a4 <_printf_float+0x26c>
 800963c:	2301      	movs	r3, #1
 800963e:	4631      	mov	r1, r6
 8009640:	4628      	mov	r0, r5
 8009642:	4a35      	ldr	r2, [pc, #212]	; (8009718 <_printf_float+0x2e0>)
 8009644:	47b8      	blx	r7
 8009646:	3001      	adds	r0, #1
 8009648:	f43f af51 	beq.w	80094ee <_printf_float+0xb6>
 800964c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009650:	429a      	cmp	r2, r3
 8009652:	db02      	blt.n	800965a <_printf_float+0x222>
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	07d8      	lsls	r0, r3, #31
 8009658:	d50f      	bpl.n	800967a <_printf_float+0x242>
 800965a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800965e:	4631      	mov	r1, r6
 8009660:	4628      	mov	r0, r5
 8009662:	47b8      	blx	r7
 8009664:	3001      	adds	r0, #1
 8009666:	f43f af42 	beq.w	80094ee <_printf_float+0xb6>
 800966a:	f04f 0800 	mov.w	r8, #0
 800966e:	f104 091a 	add.w	r9, r4, #26
 8009672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009674:	3b01      	subs	r3, #1
 8009676:	4543      	cmp	r3, r8
 8009678:	dc09      	bgt.n	800968e <_printf_float+0x256>
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	079b      	lsls	r3, r3, #30
 800967e:	f100 8102 	bmi.w	8009886 <_printf_float+0x44e>
 8009682:	68e0      	ldr	r0, [r4, #12]
 8009684:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009686:	4298      	cmp	r0, r3
 8009688:	bfb8      	it	lt
 800968a:	4618      	movlt	r0, r3
 800968c:	e731      	b.n	80094f2 <_printf_float+0xba>
 800968e:	2301      	movs	r3, #1
 8009690:	464a      	mov	r2, r9
 8009692:	4631      	mov	r1, r6
 8009694:	4628      	mov	r0, r5
 8009696:	47b8      	blx	r7
 8009698:	3001      	adds	r0, #1
 800969a:	f43f af28 	beq.w	80094ee <_printf_float+0xb6>
 800969e:	f108 0801 	add.w	r8, r8, #1
 80096a2:	e7e6      	b.n	8009672 <_printf_float+0x23a>
 80096a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	dc38      	bgt.n	800971c <_printf_float+0x2e4>
 80096aa:	2301      	movs	r3, #1
 80096ac:	4631      	mov	r1, r6
 80096ae:	4628      	mov	r0, r5
 80096b0:	4a19      	ldr	r2, [pc, #100]	; (8009718 <_printf_float+0x2e0>)
 80096b2:	47b8      	blx	r7
 80096b4:	3001      	adds	r0, #1
 80096b6:	f43f af1a 	beq.w	80094ee <_printf_float+0xb6>
 80096ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80096be:	4313      	orrs	r3, r2
 80096c0:	d102      	bne.n	80096c8 <_printf_float+0x290>
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	07d9      	lsls	r1, r3, #31
 80096c6:	d5d8      	bpl.n	800967a <_printf_float+0x242>
 80096c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096cc:	4631      	mov	r1, r6
 80096ce:	4628      	mov	r0, r5
 80096d0:	47b8      	blx	r7
 80096d2:	3001      	adds	r0, #1
 80096d4:	f43f af0b 	beq.w	80094ee <_printf_float+0xb6>
 80096d8:	f04f 0900 	mov.w	r9, #0
 80096dc:	f104 0a1a 	add.w	sl, r4, #26
 80096e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096e2:	425b      	negs	r3, r3
 80096e4:	454b      	cmp	r3, r9
 80096e6:	dc01      	bgt.n	80096ec <_printf_float+0x2b4>
 80096e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096ea:	e794      	b.n	8009616 <_printf_float+0x1de>
 80096ec:	2301      	movs	r3, #1
 80096ee:	4652      	mov	r2, sl
 80096f0:	4631      	mov	r1, r6
 80096f2:	4628      	mov	r0, r5
 80096f4:	47b8      	blx	r7
 80096f6:	3001      	adds	r0, #1
 80096f8:	f43f aef9 	beq.w	80094ee <_printf_float+0xb6>
 80096fc:	f109 0901 	add.w	r9, r9, #1
 8009700:	e7ee      	b.n	80096e0 <_printf_float+0x2a8>
 8009702:	bf00      	nop
 8009704:	7fefffff 	.word	0x7fefffff
 8009708:	0801a6ec 	.word	0x0801a6ec
 800970c:	0801a6f0 	.word	0x0801a6f0
 8009710:	0801a6f8 	.word	0x0801a6f8
 8009714:	0801a6f4 	.word	0x0801a6f4
 8009718:	0801a6fc 	.word	0x0801a6fc
 800971c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800971e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009720:	429a      	cmp	r2, r3
 8009722:	bfa8      	it	ge
 8009724:	461a      	movge	r2, r3
 8009726:	2a00      	cmp	r2, #0
 8009728:	4691      	mov	r9, r2
 800972a:	dc37      	bgt.n	800979c <_printf_float+0x364>
 800972c:	f04f 0b00 	mov.w	fp, #0
 8009730:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009734:	f104 021a 	add.w	r2, r4, #26
 8009738:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800973c:	ebaa 0309 	sub.w	r3, sl, r9
 8009740:	455b      	cmp	r3, fp
 8009742:	dc33      	bgt.n	80097ac <_printf_float+0x374>
 8009744:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009748:	429a      	cmp	r2, r3
 800974a:	db3b      	blt.n	80097c4 <_printf_float+0x38c>
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	07da      	lsls	r2, r3, #31
 8009750:	d438      	bmi.n	80097c4 <_printf_float+0x38c>
 8009752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009754:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009756:	eba2 030a 	sub.w	r3, r2, sl
 800975a:	eba2 0901 	sub.w	r9, r2, r1
 800975e:	4599      	cmp	r9, r3
 8009760:	bfa8      	it	ge
 8009762:	4699      	movge	r9, r3
 8009764:	f1b9 0f00 	cmp.w	r9, #0
 8009768:	dc34      	bgt.n	80097d4 <_printf_float+0x39c>
 800976a:	f04f 0800 	mov.w	r8, #0
 800976e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009772:	f104 0a1a 	add.w	sl, r4, #26
 8009776:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800977a:	1a9b      	subs	r3, r3, r2
 800977c:	eba3 0309 	sub.w	r3, r3, r9
 8009780:	4543      	cmp	r3, r8
 8009782:	f77f af7a 	ble.w	800967a <_printf_float+0x242>
 8009786:	2301      	movs	r3, #1
 8009788:	4652      	mov	r2, sl
 800978a:	4631      	mov	r1, r6
 800978c:	4628      	mov	r0, r5
 800978e:	47b8      	blx	r7
 8009790:	3001      	adds	r0, #1
 8009792:	f43f aeac 	beq.w	80094ee <_printf_float+0xb6>
 8009796:	f108 0801 	add.w	r8, r8, #1
 800979a:	e7ec      	b.n	8009776 <_printf_float+0x33e>
 800979c:	4613      	mov	r3, r2
 800979e:	4631      	mov	r1, r6
 80097a0:	4642      	mov	r2, r8
 80097a2:	4628      	mov	r0, r5
 80097a4:	47b8      	blx	r7
 80097a6:	3001      	adds	r0, #1
 80097a8:	d1c0      	bne.n	800972c <_printf_float+0x2f4>
 80097aa:	e6a0      	b.n	80094ee <_printf_float+0xb6>
 80097ac:	2301      	movs	r3, #1
 80097ae:	4631      	mov	r1, r6
 80097b0:	4628      	mov	r0, r5
 80097b2:	920b      	str	r2, [sp, #44]	; 0x2c
 80097b4:	47b8      	blx	r7
 80097b6:	3001      	adds	r0, #1
 80097b8:	f43f ae99 	beq.w	80094ee <_printf_float+0xb6>
 80097bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097be:	f10b 0b01 	add.w	fp, fp, #1
 80097c2:	e7b9      	b.n	8009738 <_printf_float+0x300>
 80097c4:	4631      	mov	r1, r6
 80097c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097ca:	4628      	mov	r0, r5
 80097cc:	47b8      	blx	r7
 80097ce:	3001      	adds	r0, #1
 80097d0:	d1bf      	bne.n	8009752 <_printf_float+0x31a>
 80097d2:	e68c      	b.n	80094ee <_printf_float+0xb6>
 80097d4:	464b      	mov	r3, r9
 80097d6:	4631      	mov	r1, r6
 80097d8:	4628      	mov	r0, r5
 80097da:	eb08 020a 	add.w	r2, r8, sl
 80097de:	47b8      	blx	r7
 80097e0:	3001      	adds	r0, #1
 80097e2:	d1c2      	bne.n	800976a <_printf_float+0x332>
 80097e4:	e683      	b.n	80094ee <_printf_float+0xb6>
 80097e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097e8:	2a01      	cmp	r2, #1
 80097ea:	dc01      	bgt.n	80097f0 <_printf_float+0x3b8>
 80097ec:	07db      	lsls	r3, r3, #31
 80097ee:	d537      	bpl.n	8009860 <_printf_float+0x428>
 80097f0:	2301      	movs	r3, #1
 80097f2:	4642      	mov	r2, r8
 80097f4:	4631      	mov	r1, r6
 80097f6:	4628      	mov	r0, r5
 80097f8:	47b8      	blx	r7
 80097fa:	3001      	adds	r0, #1
 80097fc:	f43f ae77 	beq.w	80094ee <_printf_float+0xb6>
 8009800:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009804:	4631      	mov	r1, r6
 8009806:	4628      	mov	r0, r5
 8009808:	47b8      	blx	r7
 800980a:	3001      	adds	r0, #1
 800980c:	f43f ae6f 	beq.w	80094ee <_printf_float+0xb6>
 8009810:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009814:	2200      	movs	r2, #0
 8009816:	2300      	movs	r3, #0
 8009818:	f7f7 f932 	bl	8000a80 <__aeabi_dcmpeq>
 800981c:	b9d8      	cbnz	r0, 8009856 <_printf_float+0x41e>
 800981e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009820:	f108 0201 	add.w	r2, r8, #1
 8009824:	3b01      	subs	r3, #1
 8009826:	4631      	mov	r1, r6
 8009828:	4628      	mov	r0, r5
 800982a:	47b8      	blx	r7
 800982c:	3001      	adds	r0, #1
 800982e:	d10e      	bne.n	800984e <_printf_float+0x416>
 8009830:	e65d      	b.n	80094ee <_printf_float+0xb6>
 8009832:	2301      	movs	r3, #1
 8009834:	464a      	mov	r2, r9
 8009836:	4631      	mov	r1, r6
 8009838:	4628      	mov	r0, r5
 800983a:	47b8      	blx	r7
 800983c:	3001      	adds	r0, #1
 800983e:	f43f ae56 	beq.w	80094ee <_printf_float+0xb6>
 8009842:	f108 0801 	add.w	r8, r8, #1
 8009846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009848:	3b01      	subs	r3, #1
 800984a:	4543      	cmp	r3, r8
 800984c:	dcf1      	bgt.n	8009832 <_printf_float+0x3fa>
 800984e:	4653      	mov	r3, sl
 8009850:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009854:	e6e0      	b.n	8009618 <_printf_float+0x1e0>
 8009856:	f04f 0800 	mov.w	r8, #0
 800985a:	f104 091a 	add.w	r9, r4, #26
 800985e:	e7f2      	b.n	8009846 <_printf_float+0x40e>
 8009860:	2301      	movs	r3, #1
 8009862:	4642      	mov	r2, r8
 8009864:	e7df      	b.n	8009826 <_printf_float+0x3ee>
 8009866:	2301      	movs	r3, #1
 8009868:	464a      	mov	r2, r9
 800986a:	4631      	mov	r1, r6
 800986c:	4628      	mov	r0, r5
 800986e:	47b8      	blx	r7
 8009870:	3001      	adds	r0, #1
 8009872:	f43f ae3c 	beq.w	80094ee <_printf_float+0xb6>
 8009876:	f108 0801 	add.w	r8, r8, #1
 800987a:	68e3      	ldr	r3, [r4, #12]
 800987c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800987e:	1a5b      	subs	r3, r3, r1
 8009880:	4543      	cmp	r3, r8
 8009882:	dcf0      	bgt.n	8009866 <_printf_float+0x42e>
 8009884:	e6fd      	b.n	8009682 <_printf_float+0x24a>
 8009886:	f04f 0800 	mov.w	r8, #0
 800988a:	f104 0919 	add.w	r9, r4, #25
 800988e:	e7f4      	b.n	800987a <_printf_float+0x442>

08009890 <_printf_common>:
 8009890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009894:	4616      	mov	r6, r2
 8009896:	4699      	mov	r9, r3
 8009898:	688a      	ldr	r2, [r1, #8]
 800989a:	690b      	ldr	r3, [r1, #16]
 800989c:	4607      	mov	r7, r0
 800989e:	4293      	cmp	r3, r2
 80098a0:	bfb8      	it	lt
 80098a2:	4613      	movlt	r3, r2
 80098a4:	6033      	str	r3, [r6, #0]
 80098a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098aa:	460c      	mov	r4, r1
 80098ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098b0:	b10a      	cbz	r2, 80098b6 <_printf_common+0x26>
 80098b2:	3301      	adds	r3, #1
 80098b4:	6033      	str	r3, [r6, #0]
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	0699      	lsls	r1, r3, #26
 80098ba:	bf42      	ittt	mi
 80098bc:	6833      	ldrmi	r3, [r6, #0]
 80098be:	3302      	addmi	r3, #2
 80098c0:	6033      	strmi	r3, [r6, #0]
 80098c2:	6825      	ldr	r5, [r4, #0]
 80098c4:	f015 0506 	ands.w	r5, r5, #6
 80098c8:	d106      	bne.n	80098d8 <_printf_common+0x48>
 80098ca:	f104 0a19 	add.w	sl, r4, #25
 80098ce:	68e3      	ldr	r3, [r4, #12]
 80098d0:	6832      	ldr	r2, [r6, #0]
 80098d2:	1a9b      	subs	r3, r3, r2
 80098d4:	42ab      	cmp	r3, r5
 80098d6:	dc28      	bgt.n	800992a <_printf_common+0x9a>
 80098d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098dc:	1e13      	subs	r3, r2, #0
 80098de:	6822      	ldr	r2, [r4, #0]
 80098e0:	bf18      	it	ne
 80098e2:	2301      	movne	r3, #1
 80098e4:	0692      	lsls	r2, r2, #26
 80098e6:	d42d      	bmi.n	8009944 <_printf_common+0xb4>
 80098e8:	4649      	mov	r1, r9
 80098ea:	4638      	mov	r0, r7
 80098ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098f0:	47c0      	blx	r8
 80098f2:	3001      	adds	r0, #1
 80098f4:	d020      	beq.n	8009938 <_printf_common+0xa8>
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	68e5      	ldr	r5, [r4, #12]
 80098fa:	f003 0306 	and.w	r3, r3, #6
 80098fe:	2b04      	cmp	r3, #4
 8009900:	bf18      	it	ne
 8009902:	2500      	movne	r5, #0
 8009904:	6832      	ldr	r2, [r6, #0]
 8009906:	f04f 0600 	mov.w	r6, #0
 800990a:	68a3      	ldr	r3, [r4, #8]
 800990c:	bf08      	it	eq
 800990e:	1aad      	subeq	r5, r5, r2
 8009910:	6922      	ldr	r2, [r4, #16]
 8009912:	bf08      	it	eq
 8009914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009918:	4293      	cmp	r3, r2
 800991a:	bfc4      	itt	gt
 800991c:	1a9b      	subgt	r3, r3, r2
 800991e:	18ed      	addgt	r5, r5, r3
 8009920:	341a      	adds	r4, #26
 8009922:	42b5      	cmp	r5, r6
 8009924:	d11a      	bne.n	800995c <_printf_common+0xcc>
 8009926:	2000      	movs	r0, #0
 8009928:	e008      	b.n	800993c <_printf_common+0xac>
 800992a:	2301      	movs	r3, #1
 800992c:	4652      	mov	r2, sl
 800992e:	4649      	mov	r1, r9
 8009930:	4638      	mov	r0, r7
 8009932:	47c0      	blx	r8
 8009934:	3001      	adds	r0, #1
 8009936:	d103      	bne.n	8009940 <_printf_common+0xb0>
 8009938:	f04f 30ff 	mov.w	r0, #4294967295
 800993c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009940:	3501      	adds	r5, #1
 8009942:	e7c4      	b.n	80098ce <_printf_common+0x3e>
 8009944:	2030      	movs	r0, #48	; 0x30
 8009946:	18e1      	adds	r1, r4, r3
 8009948:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009952:	4422      	add	r2, r4
 8009954:	3302      	adds	r3, #2
 8009956:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800995a:	e7c5      	b.n	80098e8 <_printf_common+0x58>
 800995c:	2301      	movs	r3, #1
 800995e:	4622      	mov	r2, r4
 8009960:	4649      	mov	r1, r9
 8009962:	4638      	mov	r0, r7
 8009964:	47c0      	blx	r8
 8009966:	3001      	adds	r0, #1
 8009968:	d0e6      	beq.n	8009938 <_printf_common+0xa8>
 800996a:	3601      	adds	r6, #1
 800996c:	e7d9      	b.n	8009922 <_printf_common+0x92>
	...

08009970 <_printf_i>:
 8009970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009974:	460c      	mov	r4, r1
 8009976:	7e27      	ldrb	r7, [r4, #24]
 8009978:	4691      	mov	r9, r2
 800997a:	2f78      	cmp	r7, #120	; 0x78
 800997c:	4680      	mov	r8, r0
 800997e:	469a      	mov	sl, r3
 8009980:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009982:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009986:	d807      	bhi.n	8009998 <_printf_i+0x28>
 8009988:	2f62      	cmp	r7, #98	; 0x62
 800998a:	d80a      	bhi.n	80099a2 <_printf_i+0x32>
 800998c:	2f00      	cmp	r7, #0
 800998e:	f000 80d9 	beq.w	8009b44 <_printf_i+0x1d4>
 8009992:	2f58      	cmp	r7, #88	; 0x58
 8009994:	f000 80a4 	beq.w	8009ae0 <_printf_i+0x170>
 8009998:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800999c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099a0:	e03a      	b.n	8009a18 <_printf_i+0xa8>
 80099a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099a6:	2b15      	cmp	r3, #21
 80099a8:	d8f6      	bhi.n	8009998 <_printf_i+0x28>
 80099aa:	a001      	add	r0, pc, #4	; (adr r0, 80099b0 <_printf_i+0x40>)
 80099ac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80099b0:	08009a09 	.word	0x08009a09
 80099b4:	08009a1d 	.word	0x08009a1d
 80099b8:	08009999 	.word	0x08009999
 80099bc:	08009999 	.word	0x08009999
 80099c0:	08009999 	.word	0x08009999
 80099c4:	08009999 	.word	0x08009999
 80099c8:	08009a1d 	.word	0x08009a1d
 80099cc:	08009999 	.word	0x08009999
 80099d0:	08009999 	.word	0x08009999
 80099d4:	08009999 	.word	0x08009999
 80099d8:	08009999 	.word	0x08009999
 80099dc:	08009b2b 	.word	0x08009b2b
 80099e0:	08009a4d 	.word	0x08009a4d
 80099e4:	08009b0d 	.word	0x08009b0d
 80099e8:	08009999 	.word	0x08009999
 80099ec:	08009999 	.word	0x08009999
 80099f0:	08009b4d 	.word	0x08009b4d
 80099f4:	08009999 	.word	0x08009999
 80099f8:	08009a4d 	.word	0x08009a4d
 80099fc:	08009999 	.word	0x08009999
 8009a00:	08009999 	.word	0x08009999
 8009a04:	08009b15 	.word	0x08009b15
 8009a08:	680b      	ldr	r3, [r1, #0]
 8009a0a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a0e:	1d1a      	adds	r2, r3, #4
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	600a      	str	r2, [r1, #0]
 8009a14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e0a4      	b.n	8009b66 <_printf_i+0x1f6>
 8009a1c:	6825      	ldr	r5, [r4, #0]
 8009a1e:	6808      	ldr	r0, [r1, #0]
 8009a20:	062e      	lsls	r6, r5, #24
 8009a22:	f100 0304 	add.w	r3, r0, #4
 8009a26:	d50a      	bpl.n	8009a3e <_printf_i+0xce>
 8009a28:	6805      	ldr	r5, [r0, #0]
 8009a2a:	600b      	str	r3, [r1, #0]
 8009a2c:	2d00      	cmp	r5, #0
 8009a2e:	da03      	bge.n	8009a38 <_printf_i+0xc8>
 8009a30:	232d      	movs	r3, #45	; 0x2d
 8009a32:	426d      	negs	r5, r5
 8009a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a38:	230a      	movs	r3, #10
 8009a3a:	485e      	ldr	r0, [pc, #376]	; (8009bb4 <_printf_i+0x244>)
 8009a3c:	e019      	b.n	8009a72 <_printf_i+0x102>
 8009a3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009a42:	6805      	ldr	r5, [r0, #0]
 8009a44:	600b      	str	r3, [r1, #0]
 8009a46:	bf18      	it	ne
 8009a48:	b22d      	sxthne	r5, r5
 8009a4a:	e7ef      	b.n	8009a2c <_printf_i+0xbc>
 8009a4c:	680b      	ldr	r3, [r1, #0]
 8009a4e:	6825      	ldr	r5, [r4, #0]
 8009a50:	1d18      	adds	r0, r3, #4
 8009a52:	6008      	str	r0, [r1, #0]
 8009a54:	0628      	lsls	r0, r5, #24
 8009a56:	d501      	bpl.n	8009a5c <_printf_i+0xec>
 8009a58:	681d      	ldr	r5, [r3, #0]
 8009a5a:	e002      	b.n	8009a62 <_printf_i+0xf2>
 8009a5c:	0669      	lsls	r1, r5, #25
 8009a5e:	d5fb      	bpl.n	8009a58 <_printf_i+0xe8>
 8009a60:	881d      	ldrh	r5, [r3, #0]
 8009a62:	2f6f      	cmp	r7, #111	; 0x6f
 8009a64:	bf0c      	ite	eq
 8009a66:	2308      	moveq	r3, #8
 8009a68:	230a      	movne	r3, #10
 8009a6a:	4852      	ldr	r0, [pc, #328]	; (8009bb4 <_printf_i+0x244>)
 8009a6c:	2100      	movs	r1, #0
 8009a6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a72:	6866      	ldr	r6, [r4, #4]
 8009a74:	2e00      	cmp	r6, #0
 8009a76:	bfa8      	it	ge
 8009a78:	6821      	ldrge	r1, [r4, #0]
 8009a7a:	60a6      	str	r6, [r4, #8]
 8009a7c:	bfa4      	itt	ge
 8009a7e:	f021 0104 	bicge.w	r1, r1, #4
 8009a82:	6021      	strge	r1, [r4, #0]
 8009a84:	b90d      	cbnz	r5, 8009a8a <_printf_i+0x11a>
 8009a86:	2e00      	cmp	r6, #0
 8009a88:	d04d      	beq.n	8009b26 <_printf_i+0x1b6>
 8009a8a:	4616      	mov	r6, r2
 8009a8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a90:	fb03 5711 	mls	r7, r3, r1, r5
 8009a94:	5dc7      	ldrb	r7, [r0, r7]
 8009a96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a9a:	462f      	mov	r7, r5
 8009a9c:	42bb      	cmp	r3, r7
 8009a9e:	460d      	mov	r5, r1
 8009aa0:	d9f4      	bls.n	8009a8c <_printf_i+0x11c>
 8009aa2:	2b08      	cmp	r3, #8
 8009aa4:	d10b      	bne.n	8009abe <_printf_i+0x14e>
 8009aa6:	6823      	ldr	r3, [r4, #0]
 8009aa8:	07df      	lsls	r7, r3, #31
 8009aaa:	d508      	bpl.n	8009abe <_printf_i+0x14e>
 8009aac:	6923      	ldr	r3, [r4, #16]
 8009aae:	6861      	ldr	r1, [r4, #4]
 8009ab0:	4299      	cmp	r1, r3
 8009ab2:	bfde      	ittt	le
 8009ab4:	2330      	movle	r3, #48	; 0x30
 8009ab6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009aba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009abe:	1b92      	subs	r2, r2, r6
 8009ac0:	6122      	str	r2, [r4, #16]
 8009ac2:	464b      	mov	r3, r9
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	f8cd a000 	str.w	sl, [sp]
 8009acc:	aa03      	add	r2, sp, #12
 8009ace:	f7ff fedf 	bl	8009890 <_printf_common>
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	d14c      	bne.n	8009b70 <_printf_i+0x200>
 8009ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8009ada:	b004      	add	sp, #16
 8009adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae0:	4834      	ldr	r0, [pc, #208]	; (8009bb4 <_printf_i+0x244>)
 8009ae2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ae6:	680e      	ldr	r6, [r1, #0]
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	f856 5b04 	ldr.w	r5, [r6], #4
 8009aee:	061f      	lsls	r7, r3, #24
 8009af0:	600e      	str	r6, [r1, #0]
 8009af2:	d514      	bpl.n	8009b1e <_printf_i+0x1ae>
 8009af4:	07d9      	lsls	r1, r3, #31
 8009af6:	bf44      	itt	mi
 8009af8:	f043 0320 	orrmi.w	r3, r3, #32
 8009afc:	6023      	strmi	r3, [r4, #0]
 8009afe:	b91d      	cbnz	r5, 8009b08 <_printf_i+0x198>
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	f023 0320 	bic.w	r3, r3, #32
 8009b06:	6023      	str	r3, [r4, #0]
 8009b08:	2310      	movs	r3, #16
 8009b0a:	e7af      	b.n	8009a6c <_printf_i+0xfc>
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	f043 0320 	orr.w	r3, r3, #32
 8009b12:	6023      	str	r3, [r4, #0]
 8009b14:	2378      	movs	r3, #120	; 0x78
 8009b16:	4828      	ldr	r0, [pc, #160]	; (8009bb8 <_printf_i+0x248>)
 8009b18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b1c:	e7e3      	b.n	8009ae6 <_printf_i+0x176>
 8009b1e:	065e      	lsls	r6, r3, #25
 8009b20:	bf48      	it	mi
 8009b22:	b2ad      	uxthmi	r5, r5
 8009b24:	e7e6      	b.n	8009af4 <_printf_i+0x184>
 8009b26:	4616      	mov	r6, r2
 8009b28:	e7bb      	b.n	8009aa2 <_printf_i+0x132>
 8009b2a:	680b      	ldr	r3, [r1, #0]
 8009b2c:	6826      	ldr	r6, [r4, #0]
 8009b2e:	1d1d      	adds	r5, r3, #4
 8009b30:	6960      	ldr	r0, [r4, #20]
 8009b32:	600d      	str	r5, [r1, #0]
 8009b34:	0635      	lsls	r5, r6, #24
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	d501      	bpl.n	8009b3e <_printf_i+0x1ce>
 8009b3a:	6018      	str	r0, [r3, #0]
 8009b3c:	e002      	b.n	8009b44 <_printf_i+0x1d4>
 8009b3e:	0671      	lsls	r1, r6, #25
 8009b40:	d5fb      	bpl.n	8009b3a <_printf_i+0x1ca>
 8009b42:	8018      	strh	r0, [r3, #0]
 8009b44:	2300      	movs	r3, #0
 8009b46:	4616      	mov	r6, r2
 8009b48:	6123      	str	r3, [r4, #16]
 8009b4a:	e7ba      	b.n	8009ac2 <_printf_i+0x152>
 8009b4c:	680b      	ldr	r3, [r1, #0]
 8009b4e:	1d1a      	adds	r2, r3, #4
 8009b50:	600a      	str	r2, [r1, #0]
 8009b52:	681e      	ldr	r6, [r3, #0]
 8009b54:	2100      	movs	r1, #0
 8009b56:	4630      	mov	r0, r6
 8009b58:	6862      	ldr	r2, [r4, #4]
 8009b5a:	f002 fa65 	bl	800c028 <memchr>
 8009b5e:	b108      	cbz	r0, 8009b64 <_printf_i+0x1f4>
 8009b60:	1b80      	subs	r0, r0, r6
 8009b62:	6060      	str	r0, [r4, #4]
 8009b64:	6863      	ldr	r3, [r4, #4]
 8009b66:	6123      	str	r3, [r4, #16]
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b6e:	e7a8      	b.n	8009ac2 <_printf_i+0x152>
 8009b70:	4632      	mov	r2, r6
 8009b72:	4649      	mov	r1, r9
 8009b74:	4640      	mov	r0, r8
 8009b76:	6923      	ldr	r3, [r4, #16]
 8009b78:	47d0      	blx	sl
 8009b7a:	3001      	adds	r0, #1
 8009b7c:	d0ab      	beq.n	8009ad6 <_printf_i+0x166>
 8009b7e:	6823      	ldr	r3, [r4, #0]
 8009b80:	079b      	lsls	r3, r3, #30
 8009b82:	d413      	bmi.n	8009bac <_printf_i+0x23c>
 8009b84:	68e0      	ldr	r0, [r4, #12]
 8009b86:	9b03      	ldr	r3, [sp, #12]
 8009b88:	4298      	cmp	r0, r3
 8009b8a:	bfb8      	it	lt
 8009b8c:	4618      	movlt	r0, r3
 8009b8e:	e7a4      	b.n	8009ada <_printf_i+0x16a>
 8009b90:	2301      	movs	r3, #1
 8009b92:	4632      	mov	r2, r6
 8009b94:	4649      	mov	r1, r9
 8009b96:	4640      	mov	r0, r8
 8009b98:	47d0      	blx	sl
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	d09b      	beq.n	8009ad6 <_printf_i+0x166>
 8009b9e:	3501      	adds	r5, #1
 8009ba0:	68e3      	ldr	r3, [r4, #12]
 8009ba2:	9903      	ldr	r1, [sp, #12]
 8009ba4:	1a5b      	subs	r3, r3, r1
 8009ba6:	42ab      	cmp	r3, r5
 8009ba8:	dcf2      	bgt.n	8009b90 <_printf_i+0x220>
 8009baa:	e7eb      	b.n	8009b84 <_printf_i+0x214>
 8009bac:	2500      	movs	r5, #0
 8009bae:	f104 0619 	add.w	r6, r4, #25
 8009bb2:	e7f5      	b.n	8009ba0 <_printf_i+0x230>
 8009bb4:	0801a6fe 	.word	0x0801a6fe
 8009bb8:	0801a70f 	.word	0x0801a70f

08009bbc <iprintf>:
 8009bbc:	b40f      	push	{r0, r1, r2, r3}
 8009bbe:	4b0a      	ldr	r3, [pc, #40]	; (8009be8 <iprintf+0x2c>)
 8009bc0:	b513      	push	{r0, r1, r4, lr}
 8009bc2:	681c      	ldr	r4, [r3, #0]
 8009bc4:	b124      	cbz	r4, 8009bd0 <iprintf+0x14>
 8009bc6:	69a3      	ldr	r3, [r4, #24]
 8009bc8:	b913      	cbnz	r3, 8009bd0 <iprintf+0x14>
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f001 fe06 	bl	800b7dc <__sinit>
 8009bd0:	ab05      	add	r3, sp, #20
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	9a04      	ldr	r2, [sp, #16]
 8009bd6:	68a1      	ldr	r1, [r4, #8]
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	f003 f931 	bl	800ce40 <_vfiprintf_r>
 8009bde:	b002      	add	sp, #8
 8009be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009be4:	b004      	add	sp, #16
 8009be6:	4770      	bx	lr
 8009be8:	20000014 	.word	0x20000014

08009bec <siprintf>:
 8009bec:	b40e      	push	{r1, r2, r3}
 8009bee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009bf2:	b500      	push	{lr}
 8009bf4:	b09c      	sub	sp, #112	; 0x70
 8009bf6:	ab1d      	add	r3, sp, #116	; 0x74
 8009bf8:	9002      	str	r0, [sp, #8]
 8009bfa:	9006      	str	r0, [sp, #24]
 8009bfc:	9107      	str	r1, [sp, #28]
 8009bfe:	9104      	str	r1, [sp, #16]
 8009c00:	4808      	ldr	r0, [pc, #32]	; (8009c24 <siprintf+0x38>)
 8009c02:	4909      	ldr	r1, [pc, #36]	; (8009c28 <siprintf+0x3c>)
 8009c04:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c08:	9105      	str	r1, [sp, #20]
 8009c0a:	6800      	ldr	r0, [r0, #0]
 8009c0c:	a902      	add	r1, sp, #8
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	f002 ffee 	bl	800cbf0 <_svfiprintf_r>
 8009c14:	2200      	movs	r2, #0
 8009c16:	9b02      	ldr	r3, [sp, #8]
 8009c18:	701a      	strb	r2, [r3, #0]
 8009c1a:	b01c      	add	sp, #112	; 0x70
 8009c1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c20:	b003      	add	sp, #12
 8009c22:	4770      	bx	lr
 8009c24:	20000014 	.word	0x20000014
 8009c28:	ffff0208 	.word	0xffff0208

08009c2c <sulp>:
 8009c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c30:	460f      	mov	r7, r1
 8009c32:	4690      	mov	r8, r2
 8009c34:	f002 fd84 	bl	800c740 <__ulp>
 8009c38:	4604      	mov	r4, r0
 8009c3a:	460d      	mov	r5, r1
 8009c3c:	f1b8 0f00 	cmp.w	r8, #0
 8009c40:	d011      	beq.n	8009c66 <sulp+0x3a>
 8009c42:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009c46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	dd0b      	ble.n	8009c66 <sulp+0x3a>
 8009c4e:	2400      	movs	r4, #0
 8009c50:	051b      	lsls	r3, r3, #20
 8009c52:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009c56:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009c5a:	4622      	mov	r2, r4
 8009c5c:	462b      	mov	r3, r5
 8009c5e:	f7f6 fca7 	bl	80005b0 <__aeabi_dmul>
 8009c62:	4604      	mov	r4, r0
 8009c64:	460d      	mov	r5, r1
 8009c66:	4620      	mov	r0, r4
 8009c68:	4629      	mov	r1, r5
 8009c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009c70 <_strtod_l>:
 8009c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	469b      	mov	fp, r3
 8009c76:	2300      	movs	r3, #0
 8009c78:	b0a1      	sub	sp, #132	; 0x84
 8009c7a:	931c      	str	r3, [sp, #112]	; 0x70
 8009c7c:	4ba1      	ldr	r3, [pc, #644]	; (8009f04 <_strtod_l+0x294>)
 8009c7e:	4682      	mov	sl, r0
 8009c80:	681f      	ldr	r7, [r3, #0]
 8009c82:	460e      	mov	r6, r1
 8009c84:	4638      	mov	r0, r7
 8009c86:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c88:	f7f6 face 	bl	8000228 <strlen>
 8009c8c:	f04f 0800 	mov.w	r8, #0
 8009c90:	4604      	mov	r4, r0
 8009c92:	f04f 0900 	mov.w	r9, #0
 8009c96:	961b      	str	r6, [sp, #108]	; 0x6c
 8009c98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c9a:	781a      	ldrb	r2, [r3, #0]
 8009c9c:	2a2b      	cmp	r2, #43	; 0x2b
 8009c9e:	d04c      	beq.n	8009d3a <_strtod_l+0xca>
 8009ca0:	d83a      	bhi.n	8009d18 <_strtod_l+0xa8>
 8009ca2:	2a0d      	cmp	r2, #13
 8009ca4:	d833      	bhi.n	8009d0e <_strtod_l+0x9e>
 8009ca6:	2a08      	cmp	r2, #8
 8009ca8:	d833      	bhi.n	8009d12 <_strtod_l+0xa2>
 8009caa:	2a00      	cmp	r2, #0
 8009cac:	d03d      	beq.n	8009d2a <_strtod_l+0xba>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	930c      	str	r3, [sp, #48]	; 0x30
 8009cb2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009cb4:	782b      	ldrb	r3, [r5, #0]
 8009cb6:	2b30      	cmp	r3, #48	; 0x30
 8009cb8:	f040 80af 	bne.w	8009e1a <_strtod_l+0x1aa>
 8009cbc:	786b      	ldrb	r3, [r5, #1]
 8009cbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009cc2:	2b58      	cmp	r3, #88	; 0x58
 8009cc4:	d16c      	bne.n	8009da0 <_strtod_l+0x130>
 8009cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cc8:	4650      	mov	r0, sl
 8009cca:	9301      	str	r3, [sp, #4]
 8009ccc:	ab1c      	add	r3, sp, #112	; 0x70
 8009cce:	9300      	str	r3, [sp, #0]
 8009cd0:	4a8d      	ldr	r2, [pc, #564]	; (8009f08 <_strtod_l+0x298>)
 8009cd2:	f8cd b008 	str.w	fp, [sp, #8]
 8009cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8009cd8:	a91b      	add	r1, sp, #108	; 0x6c
 8009cda:	f001 fe85 	bl	800b9e8 <__gethex>
 8009cde:	f010 0607 	ands.w	r6, r0, #7
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	d005      	beq.n	8009cf2 <_strtod_l+0x82>
 8009ce6:	2e06      	cmp	r6, #6
 8009ce8:	d129      	bne.n	8009d3e <_strtod_l+0xce>
 8009cea:	2300      	movs	r3, #0
 8009cec:	3501      	adds	r5, #1
 8009cee:	951b      	str	r5, [sp, #108]	; 0x6c
 8009cf0:	930c      	str	r3, [sp, #48]	; 0x30
 8009cf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f040 8596 	bne.w	800a826 <_strtod_l+0xbb6>
 8009cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009cfc:	b1d3      	cbz	r3, 8009d34 <_strtod_l+0xc4>
 8009cfe:	4642      	mov	r2, r8
 8009d00:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d04:	4610      	mov	r0, r2
 8009d06:	4619      	mov	r1, r3
 8009d08:	b021      	add	sp, #132	; 0x84
 8009d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d0e:	2a20      	cmp	r2, #32
 8009d10:	d1cd      	bne.n	8009cae <_strtod_l+0x3e>
 8009d12:	3301      	adds	r3, #1
 8009d14:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d16:	e7bf      	b.n	8009c98 <_strtod_l+0x28>
 8009d18:	2a2d      	cmp	r2, #45	; 0x2d
 8009d1a:	d1c8      	bne.n	8009cae <_strtod_l+0x3e>
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	920c      	str	r2, [sp, #48]	; 0x30
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	921b      	str	r2, [sp, #108]	; 0x6c
 8009d24:	785b      	ldrb	r3, [r3, #1]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1c3      	bne.n	8009cb2 <_strtod_l+0x42>
 8009d2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009d2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f040 8577 	bne.w	800a822 <_strtod_l+0xbb2>
 8009d34:	4642      	mov	r2, r8
 8009d36:	464b      	mov	r3, r9
 8009d38:	e7e4      	b.n	8009d04 <_strtod_l+0x94>
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	e7ef      	b.n	8009d1e <_strtod_l+0xae>
 8009d3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d40:	b13a      	cbz	r2, 8009d52 <_strtod_l+0xe2>
 8009d42:	2135      	movs	r1, #53	; 0x35
 8009d44:	a81e      	add	r0, sp, #120	; 0x78
 8009d46:	f002 fdff 	bl	800c948 <__copybits>
 8009d4a:	4650      	mov	r0, sl
 8009d4c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009d4e:	f002 f9c7 	bl	800c0e0 <_Bfree>
 8009d52:	3e01      	subs	r6, #1
 8009d54:	2e05      	cmp	r6, #5
 8009d56:	d807      	bhi.n	8009d68 <_strtod_l+0xf8>
 8009d58:	e8df f006 	tbb	[pc, r6]
 8009d5c:	1d180b0e 	.word	0x1d180b0e
 8009d60:	030e      	.short	0x030e
 8009d62:	f04f 0900 	mov.w	r9, #0
 8009d66:	46c8      	mov	r8, r9
 8009d68:	0721      	lsls	r1, r4, #28
 8009d6a:	d5c2      	bpl.n	8009cf2 <_strtod_l+0x82>
 8009d6c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009d70:	e7bf      	b.n	8009cf2 <_strtod_l+0x82>
 8009d72:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8009d76:	e7f7      	b.n	8009d68 <_strtod_l+0xf8>
 8009d78:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009d7a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8009d7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009d82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009d86:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009d8a:	e7ed      	b.n	8009d68 <_strtod_l+0xf8>
 8009d8c:	f04f 0800 	mov.w	r8, #0
 8009d90:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009f0c <_strtod_l+0x29c>
 8009d94:	e7e8      	b.n	8009d68 <_strtod_l+0xf8>
 8009d96:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009d9a:	f04f 38ff 	mov.w	r8, #4294967295
 8009d9e:	e7e3      	b.n	8009d68 <_strtod_l+0xf8>
 8009da0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	921b      	str	r2, [sp, #108]	; 0x6c
 8009da6:	785b      	ldrb	r3, [r3, #1]
 8009da8:	2b30      	cmp	r3, #48	; 0x30
 8009daa:	d0f9      	beq.n	8009da0 <_strtod_l+0x130>
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d0a0      	beq.n	8009cf2 <_strtod_l+0x82>
 8009db0:	2301      	movs	r3, #1
 8009db2:	9307      	str	r3, [sp, #28]
 8009db4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009db6:	220a      	movs	r2, #10
 8009db8:	9308      	str	r3, [sp, #32]
 8009dba:	2300      	movs	r3, #0
 8009dbc:	469b      	mov	fp, r3
 8009dbe:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8009dc2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009dc4:	7805      	ldrb	r5, [r0, #0]
 8009dc6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009dca:	b2d9      	uxtb	r1, r3
 8009dcc:	2909      	cmp	r1, #9
 8009dce:	d926      	bls.n	8009e1e <_strtod_l+0x1ae>
 8009dd0:	4622      	mov	r2, r4
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f003 f9c1 	bl	800d15a <strncmp>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d032      	beq.n	8009e42 <_strtod_l+0x1d2>
 8009ddc:	2000      	movs	r0, #0
 8009dde:	462b      	mov	r3, r5
 8009de0:	465c      	mov	r4, fp
 8009de2:	4602      	mov	r2, r0
 8009de4:	9004      	str	r0, [sp, #16]
 8009de6:	2b65      	cmp	r3, #101	; 0x65
 8009de8:	d001      	beq.n	8009dee <_strtod_l+0x17e>
 8009dea:	2b45      	cmp	r3, #69	; 0x45
 8009dec:	d113      	bne.n	8009e16 <_strtod_l+0x1a6>
 8009dee:	b91c      	cbnz	r4, 8009df8 <_strtod_l+0x188>
 8009df0:	9b07      	ldr	r3, [sp, #28]
 8009df2:	4303      	orrs	r3, r0
 8009df4:	d099      	beq.n	8009d2a <_strtod_l+0xba>
 8009df6:	2400      	movs	r4, #0
 8009df8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009dfa:	1c73      	adds	r3, r6, #1
 8009dfc:	931b      	str	r3, [sp, #108]	; 0x6c
 8009dfe:	7873      	ldrb	r3, [r6, #1]
 8009e00:	2b2b      	cmp	r3, #43	; 0x2b
 8009e02:	d078      	beq.n	8009ef6 <_strtod_l+0x286>
 8009e04:	2b2d      	cmp	r3, #45	; 0x2d
 8009e06:	d07b      	beq.n	8009f00 <_strtod_l+0x290>
 8009e08:	2700      	movs	r7, #0
 8009e0a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009e0e:	2909      	cmp	r1, #9
 8009e10:	f240 8082 	bls.w	8009f18 <_strtod_l+0x2a8>
 8009e14:	961b      	str	r6, [sp, #108]	; 0x6c
 8009e16:	2500      	movs	r5, #0
 8009e18:	e09e      	b.n	8009f58 <_strtod_l+0x2e8>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e7c9      	b.n	8009db2 <_strtod_l+0x142>
 8009e1e:	f1bb 0f08 	cmp.w	fp, #8
 8009e22:	bfd5      	itete	le
 8009e24:	9906      	ldrle	r1, [sp, #24]
 8009e26:	9905      	ldrgt	r1, [sp, #20]
 8009e28:	fb02 3301 	mlale	r3, r2, r1, r3
 8009e2c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009e30:	f100 0001 	add.w	r0, r0, #1
 8009e34:	bfd4      	ite	le
 8009e36:	9306      	strle	r3, [sp, #24]
 8009e38:	9305      	strgt	r3, [sp, #20]
 8009e3a:	f10b 0b01 	add.w	fp, fp, #1
 8009e3e:	901b      	str	r0, [sp, #108]	; 0x6c
 8009e40:	e7bf      	b.n	8009dc2 <_strtod_l+0x152>
 8009e42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e44:	191a      	adds	r2, r3, r4
 8009e46:	921b      	str	r2, [sp, #108]	; 0x6c
 8009e48:	5d1b      	ldrb	r3, [r3, r4]
 8009e4a:	f1bb 0f00 	cmp.w	fp, #0
 8009e4e:	d036      	beq.n	8009ebe <_strtod_l+0x24e>
 8009e50:	465c      	mov	r4, fp
 8009e52:	9004      	str	r0, [sp, #16]
 8009e54:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009e58:	2a09      	cmp	r2, #9
 8009e5a:	d912      	bls.n	8009e82 <_strtod_l+0x212>
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	e7c2      	b.n	8009de6 <_strtod_l+0x176>
 8009e60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e62:	3001      	adds	r0, #1
 8009e64:	1c5a      	adds	r2, r3, #1
 8009e66:	921b      	str	r2, [sp, #108]	; 0x6c
 8009e68:	785b      	ldrb	r3, [r3, #1]
 8009e6a:	2b30      	cmp	r3, #48	; 0x30
 8009e6c:	d0f8      	beq.n	8009e60 <_strtod_l+0x1f0>
 8009e6e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009e72:	2a08      	cmp	r2, #8
 8009e74:	f200 84dc 	bhi.w	800a830 <_strtod_l+0xbc0>
 8009e78:	9004      	str	r0, [sp, #16]
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009e80:	9208      	str	r2, [sp, #32]
 8009e82:	3b30      	subs	r3, #48	; 0x30
 8009e84:	f100 0201 	add.w	r2, r0, #1
 8009e88:	d013      	beq.n	8009eb2 <_strtod_l+0x242>
 8009e8a:	9904      	ldr	r1, [sp, #16]
 8009e8c:	1905      	adds	r5, r0, r4
 8009e8e:	4411      	add	r1, r2
 8009e90:	9104      	str	r1, [sp, #16]
 8009e92:	4622      	mov	r2, r4
 8009e94:	210a      	movs	r1, #10
 8009e96:	42aa      	cmp	r2, r5
 8009e98:	d113      	bne.n	8009ec2 <_strtod_l+0x252>
 8009e9a:	1822      	adds	r2, r4, r0
 8009e9c:	2a08      	cmp	r2, #8
 8009e9e:	f104 0401 	add.w	r4, r4, #1
 8009ea2:	4404      	add	r4, r0
 8009ea4:	dc1b      	bgt.n	8009ede <_strtod_l+0x26e>
 8009ea6:	220a      	movs	r2, #10
 8009ea8:	9906      	ldr	r1, [sp, #24]
 8009eaa:	fb02 3301 	mla	r3, r2, r1, r3
 8009eae:	9306      	str	r3, [sp, #24]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	1c59      	adds	r1, r3, #1
 8009eb8:	911b      	str	r1, [sp, #108]	; 0x6c
 8009eba:	785b      	ldrb	r3, [r3, #1]
 8009ebc:	e7ca      	b.n	8009e54 <_strtod_l+0x1e4>
 8009ebe:	4658      	mov	r0, fp
 8009ec0:	e7d3      	b.n	8009e6a <_strtod_l+0x1fa>
 8009ec2:	2a08      	cmp	r2, #8
 8009ec4:	dc04      	bgt.n	8009ed0 <_strtod_l+0x260>
 8009ec6:	9f06      	ldr	r7, [sp, #24]
 8009ec8:	434f      	muls	r7, r1
 8009eca:	9706      	str	r7, [sp, #24]
 8009ecc:	3201      	adds	r2, #1
 8009ece:	e7e2      	b.n	8009e96 <_strtod_l+0x226>
 8009ed0:	1c57      	adds	r7, r2, #1
 8009ed2:	2f10      	cmp	r7, #16
 8009ed4:	bfde      	ittt	le
 8009ed6:	9f05      	ldrle	r7, [sp, #20]
 8009ed8:	434f      	mulle	r7, r1
 8009eda:	9705      	strle	r7, [sp, #20]
 8009edc:	e7f6      	b.n	8009ecc <_strtod_l+0x25c>
 8009ede:	2c10      	cmp	r4, #16
 8009ee0:	bfdf      	itttt	le
 8009ee2:	220a      	movle	r2, #10
 8009ee4:	9905      	ldrle	r1, [sp, #20]
 8009ee6:	fb02 3301 	mlale	r3, r2, r1, r3
 8009eea:	9305      	strle	r3, [sp, #20]
 8009eec:	e7e0      	b.n	8009eb0 <_strtod_l+0x240>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	9304      	str	r3, [sp, #16]
 8009ef4:	e77c      	b.n	8009df0 <_strtod_l+0x180>
 8009ef6:	2700      	movs	r7, #0
 8009ef8:	1cb3      	adds	r3, r6, #2
 8009efa:	931b      	str	r3, [sp, #108]	; 0x6c
 8009efc:	78b3      	ldrb	r3, [r6, #2]
 8009efe:	e784      	b.n	8009e0a <_strtod_l+0x19a>
 8009f00:	2701      	movs	r7, #1
 8009f02:	e7f9      	b.n	8009ef8 <_strtod_l+0x288>
 8009f04:	0801a9d4 	.word	0x0801a9d4
 8009f08:	0801a720 	.word	0x0801a720
 8009f0c:	7ff00000 	.word	0x7ff00000
 8009f10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f12:	1c59      	adds	r1, r3, #1
 8009f14:	911b      	str	r1, [sp, #108]	; 0x6c
 8009f16:	785b      	ldrb	r3, [r3, #1]
 8009f18:	2b30      	cmp	r3, #48	; 0x30
 8009f1a:	d0f9      	beq.n	8009f10 <_strtod_l+0x2a0>
 8009f1c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009f20:	2908      	cmp	r1, #8
 8009f22:	f63f af78 	bhi.w	8009e16 <_strtod_l+0x1a6>
 8009f26:	f04f 0e0a 	mov.w	lr, #10
 8009f2a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8009f2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f30:	9309      	str	r3, [sp, #36]	; 0x24
 8009f32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f34:	1c59      	adds	r1, r3, #1
 8009f36:	911b      	str	r1, [sp, #108]	; 0x6c
 8009f38:	785b      	ldrb	r3, [r3, #1]
 8009f3a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8009f3e:	2d09      	cmp	r5, #9
 8009f40:	d935      	bls.n	8009fae <_strtod_l+0x33e>
 8009f42:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f44:	1b49      	subs	r1, r1, r5
 8009f46:	2908      	cmp	r1, #8
 8009f48:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009f4c:	dc02      	bgt.n	8009f54 <_strtod_l+0x2e4>
 8009f4e:	4565      	cmp	r5, ip
 8009f50:	bfa8      	it	ge
 8009f52:	4665      	movge	r5, ip
 8009f54:	b107      	cbz	r7, 8009f58 <_strtod_l+0x2e8>
 8009f56:	426d      	negs	r5, r5
 8009f58:	2c00      	cmp	r4, #0
 8009f5a:	d14c      	bne.n	8009ff6 <_strtod_l+0x386>
 8009f5c:	9907      	ldr	r1, [sp, #28]
 8009f5e:	4301      	orrs	r1, r0
 8009f60:	f47f aec7 	bne.w	8009cf2 <_strtod_l+0x82>
 8009f64:	2a00      	cmp	r2, #0
 8009f66:	f47f aee0 	bne.w	8009d2a <_strtod_l+0xba>
 8009f6a:	2b69      	cmp	r3, #105	; 0x69
 8009f6c:	d026      	beq.n	8009fbc <_strtod_l+0x34c>
 8009f6e:	dc23      	bgt.n	8009fb8 <_strtod_l+0x348>
 8009f70:	2b49      	cmp	r3, #73	; 0x49
 8009f72:	d023      	beq.n	8009fbc <_strtod_l+0x34c>
 8009f74:	2b4e      	cmp	r3, #78	; 0x4e
 8009f76:	f47f aed8 	bne.w	8009d2a <_strtod_l+0xba>
 8009f7a:	499c      	ldr	r1, [pc, #624]	; (800a1ec <_strtod_l+0x57c>)
 8009f7c:	a81b      	add	r0, sp, #108	; 0x6c
 8009f7e:	f001 ff81 	bl	800be84 <__match>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	f43f aed1 	beq.w	8009d2a <_strtod_l+0xba>
 8009f88:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	2b28      	cmp	r3, #40	; 0x28
 8009f8e:	d12c      	bne.n	8009fea <_strtod_l+0x37a>
 8009f90:	4997      	ldr	r1, [pc, #604]	; (800a1f0 <_strtod_l+0x580>)
 8009f92:	aa1e      	add	r2, sp, #120	; 0x78
 8009f94:	a81b      	add	r0, sp, #108	; 0x6c
 8009f96:	f001 ff89 	bl	800beac <__hexnan>
 8009f9a:	2805      	cmp	r0, #5
 8009f9c:	d125      	bne.n	8009fea <_strtod_l+0x37a>
 8009f9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009fa0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8009fa4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009fa8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009fac:	e6a1      	b.n	8009cf2 <_strtod_l+0x82>
 8009fae:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8009fb2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009fb6:	e7bc      	b.n	8009f32 <_strtod_l+0x2c2>
 8009fb8:	2b6e      	cmp	r3, #110	; 0x6e
 8009fba:	e7dc      	b.n	8009f76 <_strtod_l+0x306>
 8009fbc:	498d      	ldr	r1, [pc, #564]	; (800a1f4 <_strtod_l+0x584>)
 8009fbe:	a81b      	add	r0, sp, #108	; 0x6c
 8009fc0:	f001 ff60 	bl	800be84 <__match>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	f43f aeb0 	beq.w	8009d2a <_strtod_l+0xba>
 8009fca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fcc:	498a      	ldr	r1, [pc, #552]	; (800a1f8 <_strtod_l+0x588>)
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	a81b      	add	r0, sp, #108	; 0x6c
 8009fd2:	931b      	str	r3, [sp, #108]	; 0x6c
 8009fd4:	f001 ff56 	bl	800be84 <__match>
 8009fd8:	b910      	cbnz	r0, 8009fe0 <_strtod_l+0x370>
 8009fda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fdc:	3301      	adds	r3, #1
 8009fde:	931b      	str	r3, [sp, #108]	; 0x6c
 8009fe0:	f04f 0800 	mov.w	r8, #0
 8009fe4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800a208 <_strtod_l+0x598>
 8009fe8:	e683      	b.n	8009cf2 <_strtod_l+0x82>
 8009fea:	4884      	ldr	r0, [pc, #528]	; (800a1fc <_strtod_l+0x58c>)
 8009fec:	f003 f858 	bl	800d0a0 <nan>
 8009ff0:	4680      	mov	r8, r0
 8009ff2:	4689      	mov	r9, r1
 8009ff4:	e67d      	b.n	8009cf2 <_strtod_l+0x82>
 8009ff6:	9b04      	ldr	r3, [sp, #16]
 8009ff8:	f1bb 0f00 	cmp.w	fp, #0
 8009ffc:	bf08      	it	eq
 8009ffe:	46a3      	moveq	fp, r4
 800a000:	1aeb      	subs	r3, r5, r3
 800a002:	2c10      	cmp	r4, #16
 800a004:	9806      	ldr	r0, [sp, #24]
 800a006:	4626      	mov	r6, r4
 800a008:	9307      	str	r3, [sp, #28]
 800a00a:	bfa8      	it	ge
 800a00c:	2610      	movge	r6, #16
 800a00e:	f7f6 fa55 	bl	80004bc <__aeabi_ui2d>
 800a012:	2c09      	cmp	r4, #9
 800a014:	4680      	mov	r8, r0
 800a016:	4689      	mov	r9, r1
 800a018:	dd13      	ble.n	800a042 <_strtod_l+0x3d2>
 800a01a:	4b79      	ldr	r3, [pc, #484]	; (800a200 <_strtod_l+0x590>)
 800a01c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a020:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a024:	f7f6 fac4 	bl	80005b0 <__aeabi_dmul>
 800a028:	4680      	mov	r8, r0
 800a02a:	9805      	ldr	r0, [sp, #20]
 800a02c:	4689      	mov	r9, r1
 800a02e:	f7f6 fa45 	bl	80004bc <__aeabi_ui2d>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	4640      	mov	r0, r8
 800a038:	4649      	mov	r1, r9
 800a03a:	f7f6 f903 	bl	8000244 <__adddf3>
 800a03e:	4680      	mov	r8, r0
 800a040:	4689      	mov	r9, r1
 800a042:	2c0f      	cmp	r4, #15
 800a044:	dc36      	bgt.n	800a0b4 <_strtod_l+0x444>
 800a046:	9b07      	ldr	r3, [sp, #28]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f43f ae52 	beq.w	8009cf2 <_strtod_l+0x82>
 800a04e:	dd22      	ble.n	800a096 <_strtod_l+0x426>
 800a050:	2b16      	cmp	r3, #22
 800a052:	dc09      	bgt.n	800a068 <_strtod_l+0x3f8>
 800a054:	4c6a      	ldr	r4, [pc, #424]	; (800a200 <_strtod_l+0x590>)
 800a056:	4642      	mov	r2, r8
 800a058:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800a05c:	464b      	mov	r3, r9
 800a05e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a062:	f7f6 faa5 	bl	80005b0 <__aeabi_dmul>
 800a066:	e7c3      	b.n	8009ff0 <_strtod_l+0x380>
 800a068:	9a07      	ldr	r2, [sp, #28]
 800a06a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a06e:	4293      	cmp	r3, r2
 800a070:	db20      	blt.n	800a0b4 <_strtod_l+0x444>
 800a072:	4d63      	ldr	r5, [pc, #396]	; (800a200 <_strtod_l+0x590>)
 800a074:	f1c4 040f 	rsb	r4, r4, #15
 800a078:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a07c:	4642      	mov	r2, r8
 800a07e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a082:	464b      	mov	r3, r9
 800a084:	f7f6 fa94 	bl	80005b0 <__aeabi_dmul>
 800a088:	9b07      	ldr	r3, [sp, #28]
 800a08a:	1b1c      	subs	r4, r3, r4
 800a08c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a090:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a094:	e7e5      	b.n	800a062 <_strtod_l+0x3f2>
 800a096:	9b07      	ldr	r3, [sp, #28]
 800a098:	3316      	adds	r3, #22
 800a09a:	db0b      	blt.n	800a0b4 <_strtod_l+0x444>
 800a09c:	9b04      	ldr	r3, [sp, #16]
 800a09e:	4a58      	ldr	r2, [pc, #352]	; (800a200 <_strtod_l+0x590>)
 800a0a0:	1b5d      	subs	r5, r3, r5
 800a0a2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800a0a6:	4640      	mov	r0, r8
 800a0a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a0ac:	4649      	mov	r1, r9
 800a0ae:	f7f6 fba9 	bl	8000804 <__aeabi_ddiv>
 800a0b2:	e79d      	b.n	8009ff0 <_strtod_l+0x380>
 800a0b4:	9b07      	ldr	r3, [sp, #28]
 800a0b6:	1ba6      	subs	r6, r4, r6
 800a0b8:	441e      	add	r6, r3
 800a0ba:	2e00      	cmp	r6, #0
 800a0bc:	dd71      	ble.n	800a1a2 <_strtod_l+0x532>
 800a0be:	f016 030f 	ands.w	r3, r6, #15
 800a0c2:	d00a      	beq.n	800a0da <_strtod_l+0x46a>
 800a0c4:	494e      	ldr	r1, [pc, #312]	; (800a200 <_strtod_l+0x590>)
 800a0c6:	4642      	mov	r2, r8
 800a0c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0d0:	464b      	mov	r3, r9
 800a0d2:	f7f6 fa6d 	bl	80005b0 <__aeabi_dmul>
 800a0d6:	4680      	mov	r8, r0
 800a0d8:	4689      	mov	r9, r1
 800a0da:	f036 060f 	bics.w	r6, r6, #15
 800a0de:	d050      	beq.n	800a182 <_strtod_l+0x512>
 800a0e0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a0e4:	dd27      	ble.n	800a136 <_strtod_l+0x4c6>
 800a0e6:	f04f 0b00 	mov.w	fp, #0
 800a0ea:	f8cd b010 	str.w	fp, [sp, #16]
 800a0ee:	f8cd b020 	str.w	fp, [sp, #32]
 800a0f2:	f8cd b018 	str.w	fp, [sp, #24]
 800a0f6:	2322      	movs	r3, #34	; 0x22
 800a0f8:	f04f 0800 	mov.w	r8, #0
 800a0fc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a208 <_strtod_l+0x598>
 800a100:	f8ca 3000 	str.w	r3, [sl]
 800a104:	9b08      	ldr	r3, [sp, #32]
 800a106:	2b00      	cmp	r3, #0
 800a108:	f43f adf3 	beq.w	8009cf2 <_strtod_l+0x82>
 800a10c:	4650      	mov	r0, sl
 800a10e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a110:	f001 ffe6 	bl	800c0e0 <_Bfree>
 800a114:	4650      	mov	r0, sl
 800a116:	9906      	ldr	r1, [sp, #24]
 800a118:	f001 ffe2 	bl	800c0e0 <_Bfree>
 800a11c:	4650      	mov	r0, sl
 800a11e:	9904      	ldr	r1, [sp, #16]
 800a120:	f001 ffde 	bl	800c0e0 <_Bfree>
 800a124:	4650      	mov	r0, sl
 800a126:	9908      	ldr	r1, [sp, #32]
 800a128:	f001 ffda 	bl	800c0e0 <_Bfree>
 800a12c:	4659      	mov	r1, fp
 800a12e:	4650      	mov	r0, sl
 800a130:	f001 ffd6 	bl	800c0e0 <_Bfree>
 800a134:	e5dd      	b.n	8009cf2 <_strtod_l+0x82>
 800a136:	2300      	movs	r3, #0
 800a138:	4640      	mov	r0, r8
 800a13a:	4649      	mov	r1, r9
 800a13c:	461f      	mov	r7, r3
 800a13e:	1136      	asrs	r6, r6, #4
 800a140:	2e01      	cmp	r6, #1
 800a142:	dc21      	bgt.n	800a188 <_strtod_l+0x518>
 800a144:	b10b      	cbz	r3, 800a14a <_strtod_l+0x4da>
 800a146:	4680      	mov	r8, r0
 800a148:	4689      	mov	r9, r1
 800a14a:	4b2e      	ldr	r3, [pc, #184]	; (800a204 <_strtod_l+0x594>)
 800a14c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a150:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a154:	4642      	mov	r2, r8
 800a156:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a15a:	464b      	mov	r3, r9
 800a15c:	f7f6 fa28 	bl	80005b0 <__aeabi_dmul>
 800a160:	4b29      	ldr	r3, [pc, #164]	; (800a208 <_strtod_l+0x598>)
 800a162:	460a      	mov	r2, r1
 800a164:	400b      	ands	r3, r1
 800a166:	4929      	ldr	r1, [pc, #164]	; (800a20c <_strtod_l+0x59c>)
 800a168:	4680      	mov	r8, r0
 800a16a:	428b      	cmp	r3, r1
 800a16c:	d8bb      	bhi.n	800a0e6 <_strtod_l+0x476>
 800a16e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a172:	428b      	cmp	r3, r1
 800a174:	bf86      	itte	hi
 800a176:	f04f 38ff 	movhi.w	r8, #4294967295
 800a17a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a210 <_strtod_l+0x5a0>
 800a17e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a182:	2300      	movs	r3, #0
 800a184:	9305      	str	r3, [sp, #20]
 800a186:	e07e      	b.n	800a286 <_strtod_l+0x616>
 800a188:	07f2      	lsls	r2, r6, #31
 800a18a:	d507      	bpl.n	800a19c <_strtod_l+0x52c>
 800a18c:	4b1d      	ldr	r3, [pc, #116]	; (800a204 <_strtod_l+0x594>)
 800a18e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a196:	f7f6 fa0b 	bl	80005b0 <__aeabi_dmul>
 800a19a:	2301      	movs	r3, #1
 800a19c:	3701      	adds	r7, #1
 800a19e:	1076      	asrs	r6, r6, #1
 800a1a0:	e7ce      	b.n	800a140 <_strtod_l+0x4d0>
 800a1a2:	d0ee      	beq.n	800a182 <_strtod_l+0x512>
 800a1a4:	4276      	negs	r6, r6
 800a1a6:	f016 020f 	ands.w	r2, r6, #15
 800a1aa:	d00a      	beq.n	800a1c2 <_strtod_l+0x552>
 800a1ac:	4b14      	ldr	r3, [pc, #80]	; (800a200 <_strtod_l+0x590>)
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1b4:	4649      	mov	r1, r9
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	f7f6 fb23 	bl	8000804 <__aeabi_ddiv>
 800a1be:	4680      	mov	r8, r0
 800a1c0:	4689      	mov	r9, r1
 800a1c2:	1136      	asrs	r6, r6, #4
 800a1c4:	d0dd      	beq.n	800a182 <_strtod_l+0x512>
 800a1c6:	2e1f      	cmp	r6, #31
 800a1c8:	dd24      	ble.n	800a214 <_strtod_l+0x5a4>
 800a1ca:	f04f 0b00 	mov.w	fp, #0
 800a1ce:	f8cd b010 	str.w	fp, [sp, #16]
 800a1d2:	f8cd b020 	str.w	fp, [sp, #32]
 800a1d6:	f8cd b018 	str.w	fp, [sp, #24]
 800a1da:	2322      	movs	r3, #34	; 0x22
 800a1dc:	f04f 0800 	mov.w	r8, #0
 800a1e0:	f04f 0900 	mov.w	r9, #0
 800a1e4:	f8ca 3000 	str.w	r3, [sl]
 800a1e8:	e78c      	b.n	800a104 <_strtod_l+0x494>
 800a1ea:	bf00      	nop
 800a1ec:	0801a6f9 	.word	0x0801a6f9
 800a1f0:	0801a734 	.word	0x0801a734
 800a1f4:	0801a6f1 	.word	0x0801a6f1
 800a1f8:	0801a874 	.word	0x0801a874
 800a1fc:	0801ab90 	.word	0x0801ab90
 800a200:	0801aa70 	.word	0x0801aa70
 800a204:	0801aa48 	.word	0x0801aa48
 800a208:	7ff00000 	.word	0x7ff00000
 800a20c:	7ca00000 	.word	0x7ca00000
 800a210:	7fefffff 	.word	0x7fefffff
 800a214:	f016 0310 	ands.w	r3, r6, #16
 800a218:	bf18      	it	ne
 800a21a:	236a      	movne	r3, #106	; 0x6a
 800a21c:	4640      	mov	r0, r8
 800a21e:	9305      	str	r3, [sp, #20]
 800a220:	4649      	mov	r1, r9
 800a222:	2300      	movs	r3, #0
 800a224:	4fb2      	ldr	r7, [pc, #712]	; (800a4f0 <_strtod_l+0x880>)
 800a226:	07f2      	lsls	r2, r6, #31
 800a228:	d504      	bpl.n	800a234 <_strtod_l+0x5c4>
 800a22a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a22e:	f7f6 f9bf 	bl	80005b0 <__aeabi_dmul>
 800a232:	2301      	movs	r3, #1
 800a234:	1076      	asrs	r6, r6, #1
 800a236:	f107 0708 	add.w	r7, r7, #8
 800a23a:	d1f4      	bne.n	800a226 <_strtod_l+0x5b6>
 800a23c:	b10b      	cbz	r3, 800a242 <_strtod_l+0x5d2>
 800a23e:	4680      	mov	r8, r0
 800a240:	4689      	mov	r9, r1
 800a242:	9b05      	ldr	r3, [sp, #20]
 800a244:	b1bb      	cbz	r3, 800a276 <_strtod_l+0x606>
 800a246:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800a24a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a24e:	2b00      	cmp	r3, #0
 800a250:	4649      	mov	r1, r9
 800a252:	dd10      	ble.n	800a276 <_strtod_l+0x606>
 800a254:	2b1f      	cmp	r3, #31
 800a256:	f340 812b 	ble.w	800a4b0 <_strtod_l+0x840>
 800a25a:	2b34      	cmp	r3, #52	; 0x34
 800a25c:	bfd8      	it	le
 800a25e:	f04f 32ff 	movle.w	r2, #4294967295
 800a262:	f04f 0800 	mov.w	r8, #0
 800a266:	bfcf      	iteee	gt
 800a268:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a26c:	3b20      	suble	r3, #32
 800a26e:	fa02 f303 	lslle.w	r3, r2, r3
 800a272:	ea03 0901 	andle.w	r9, r3, r1
 800a276:	2200      	movs	r2, #0
 800a278:	2300      	movs	r3, #0
 800a27a:	4640      	mov	r0, r8
 800a27c:	4649      	mov	r1, r9
 800a27e:	f7f6 fbff 	bl	8000a80 <__aeabi_dcmpeq>
 800a282:	2800      	cmp	r0, #0
 800a284:	d1a1      	bne.n	800a1ca <_strtod_l+0x55a>
 800a286:	9b06      	ldr	r3, [sp, #24]
 800a288:	465a      	mov	r2, fp
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	4650      	mov	r0, sl
 800a28e:	4623      	mov	r3, r4
 800a290:	9908      	ldr	r1, [sp, #32]
 800a292:	f001 ff91 	bl	800c1b8 <__s2b>
 800a296:	9008      	str	r0, [sp, #32]
 800a298:	2800      	cmp	r0, #0
 800a29a:	f43f af24 	beq.w	800a0e6 <_strtod_l+0x476>
 800a29e:	9b04      	ldr	r3, [sp, #16]
 800a2a0:	f04f 0b00 	mov.w	fp, #0
 800a2a4:	1b5d      	subs	r5, r3, r5
 800a2a6:	9b07      	ldr	r3, [sp, #28]
 800a2a8:	f8cd b010 	str.w	fp, [sp, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	bfb4      	ite	lt
 800a2b0:	462b      	movlt	r3, r5
 800a2b2:	2300      	movge	r3, #0
 800a2b4:	930e      	str	r3, [sp, #56]	; 0x38
 800a2b6:	9b07      	ldr	r3, [sp, #28]
 800a2b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a2bc:	9316      	str	r3, [sp, #88]	; 0x58
 800a2be:	9b08      	ldr	r3, [sp, #32]
 800a2c0:	4650      	mov	r0, sl
 800a2c2:	6859      	ldr	r1, [r3, #4]
 800a2c4:	f001 fecc 	bl	800c060 <_Balloc>
 800a2c8:	9006      	str	r0, [sp, #24]
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	f43f af13 	beq.w	800a0f6 <_strtod_l+0x486>
 800a2d0:	9b08      	ldr	r3, [sp, #32]
 800a2d2:	300c      	adds	r0, #12
 800a2d4:	691a      	ldr	r2, [r3, #16]
 800a2d6:	f103 010c 	add.w	r1, r3, #12
 800a2da:	3202      	adds	r2, #2
 800a2dc:	0092      	lsls	r2, r2, #2
 800a2de:	f001 feb1 	bl	800c044 <memcpy>
 800a2e2:	ab1e      	add	r3, sp, #120	; 0x78
 800a2e4:	9301      	str	r3, [sp, #4]
 800a2e6:	ab1d      	add	r3, sp, #116	; 0x74
 800a2e8:	9300      	str	r3, [sp, #0]
 800a2ea:	4642      	mov	r2, r8
 800a2ec:	464b      	mov	r3, r9
 800a2ee:	4650      	mov	r0, sl
 800a2f0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800a2f4:	f002 fa9e 	bl	800c834 <__d2b>
 800a2f8:	901c      	str	r0, [sp, #112]	; 0x70
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	f43f aefb 	beq.w	800a0f6 <_strtod_l+0x486>
 800a300:	2101      	movs	r1, #1
 800a302:	4650      	mov	r0, sl
 800a304:	f001 fff0 	bl	800c2e8 <__i2b>
 800a308:	4603      	mov	r3, r0
 800a30a:	9004      	str	r0, [sp, #16]
 800a30c:	2800      	cmp	r0, #0
 800a30e:	f43f aef2 	beq.w	800a0f6 <_strtod_l+0x486>
 800a312:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a314:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a316:	2d00      	cmp	r5, #0
 800a318:	bfab      	itete	ge
 800a31a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a31c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a31e:	18ee      	addge	r6, r5, r3
 800a320:	1b5c      	sublt	r4, r3, r5
 800a322:	9b05      	ldr	r3, [sp, #20]
 800a324:	bfa8      	it	ge
 800a326:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a328:	eba5 0503 	sub.w	r5, r5, r3
 800a32c:	4415      	add	r5, r2
 800a32e:	4b71      	ldr	r3, [pc, #452]	; (800a4f4 <_strtod_l+0x884>)
 800a330:	f105 35ff 	add.w	r5, r5, #4294967295
 800a334:	bfb8      	it	lt
 800a336:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a338:	429d      	cmp	r5, r3
 800a33a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a33e:	f280 80c9 	bge.w	800a4d4 <_strtod_l+0x864>
 800a342:	1b5b      	subs	r3, r3, r5
 800a344:	2b1f      	cmp	r3, #31
 800a346:	f04f 0701 	mov.w	r7, #1
 800a34a:	eba2 0203 	sub.w	r2, r2, r3
 800a34e:	f300 80b6 	bgt.w	800a4be <_strtod_l+0x84e>
 800a352:	2500      	movs	r5, #0
 800a354:	fa07 f303 	lsl.w	r3, r7, r3
 800a358:	930f      	str	r3, [sp, #60]	; 0x3c
 800a35a:	18b7      	adds	r7, r6, r2
 800a35c:	9b05      	ldr	r3, [sp, #20]
 800a35e:	42be      	cmp	r6, r7
 800a360:	4414      	add	r4, r2
 800a362:	441c      	add	r4, r3
 800a364:	4633      	mov	r3, r6
 800a366:	bfa8      	it	ge
 800a368:	463b      	movge	r3, r7
 800a36a:	42a3      	cmp	r3, r4
 800a36c:	bfa8      	it	ge
 800a36e:	4623      	movge	r3, r4
 800a370:	2b00      	cmp	r3, #0
 800a372:	bfc2      	ittt	gt
 800a374:	1aff      	subgt	r7, r7, r3
 800a376:	1ae4      	subgt	r4, r4, r3
 800a378:	1af6      	subgt	r6, r6, r3
 800a37a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	dd17      	ble.n	800a3b0 <_strtod_l+0x740>
 800a380:	461a      	mov	r2, r3
 800a382:	4650      	mov	r0, sl
 800a384:	9904      	ldr	r1, [sp, #16]
 800a386:	f002 f869 	bl	800c45c <__pow5mult>
 800a38a:	9004      	str	r0, [sp, #16]
 800a38c:	2800      	cmp	r0, #0
 800a38e:	f43f aeb2 	beq.w	800a0f6 <_strtod_l+0x486>
 800a392:	4601      	mov	r1, r0
 800a394:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a396:	4650      	mov	r0, sl
 800a398:	f001 ffbc 	bl	800c314 <__multiply>
 800a39c:	9009      	str	r0, [sp, #36]	; 0x24
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	f43f aea9 	beq.w	800a0f6 <_strtod_l+0x486>
 800a3a4:	4650      	mov	r0, sl
 800a3a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a3a8:	f001 fe9a 	bl	800c0e0 <_Bfree>
 800a3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ae:	931c      	str	r3, [sp, #112]	; 0x70
 800a3b0:	2f00      	cmp	r7, #0
 800a3b2:	f300 8093 	bgt.w	800a4dc <_strtod_l+0x86c>
 800a3b6:	9b07      	ldr	r3, [sp, #28]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	dd08      	ble.n	800a3ce <_strtod_l+0x75e>
 800a3bc:	4650      	mov	r0, sl
 800a3be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a3c0:	9906      	ldr	r1, [sp, #24]
 800a3c2:	f002 f84b 	bl	800c45c <__pow5mult>
 800a3c6:	9006      	str	r0, [sp, #24]
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	f43f ae94 	beq.w	800a0f6 <_strtod_l+0x486>
 800a3ce:	2c00      	cmp	r4, #0
 800a3d0:	dd08      	ble.n	800a3e4 <_strtod_l+0x774>
 800a3d2:	4622      	mov	r2, r4
 800a3d4:	4650      	mov	r0, sl
 800a3d6:	9906      	ldr	r1, [sp, #24]
 800a3d8:	f002 f89a 	bl	800c510 <__lshift>
 800a3dc:	9006      	str	r0, [sp, #24]
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	f43f ae89 	beq.w	800a0f6 <_strtod_l+0x486>
 800a3e4:	2e00      	cmp	r6, #0
 800a3e6:	dd08      	ble.n	800a3fa <_strtod_l+0x78a>
 800a3e8:	4632      	mov	r2, r6
 800a3ea:	4650      	mov	r0, sl
 800a3ec:	9904      	ldr	r1, [sp, #16]
 800a3ee:	f002 f88f 	bl	800c510 <__lshift>
 800a3f2:	9004      	str	r0, [sp, #16]
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	f43f ae7e 	beq.w	800a0f6 <_strtod_l+0x486>
 800a3fa:	4650      	mov	r0, sl
 800a3fc:	9a06      	ldr	r2, [sp, #24]
 800a3fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a400:	f002 f90e 	bl	800c620 <__mdiff>
 800a404:	4683      	mov	fp, r0
 800a406:	2800      	cmp	r0, #0
 800a408:	f43f ae75 	beq.w	800a0f6 <_strtod_l+0x486>
 800a40c:	2400      	movs	r4, #0
 800a40e:	68c3      	ldr	r3, [r0, #12]
 800a410:	9904      	ldr	r1, [sp, #16]
 800a412:	60c4      	str	r4, [r0, #12]
 800a414:	930d      	str	r3, [sp, #52]	; 0x34
 800a416:	f002 f8e7 	bl	800c5e8 <__mcmp>
 800a41a:	42a0      	cmp	r0, r4
 800a41c:	da70      	bge.n	800a500 <_strtod_l+0x890>
 800a41e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a420:	ea53 0308 	orrs.w	r3, r3, r8
 800a424:	f040 8096 	bne.w	800a554 <_strtod_l+0x8e4>
 800a428:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f040 8091 	bne.w	800a554 <_strtod_l+0x8e4>
 800a432:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a436:	0d1b      	lsrs	r3, r3, #20
 800a438:	051b      	lsls	r3, r3, #20
 800a43a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a43e:	f240 8089 	bls.w	800a554 <_strtod_l+0x8e4>
 800a442:	f8db 3014 	ldr.w	r3, [fp, #20]
 800a446:	b923      	cbnz	r3, 800a452 <_strtod_l+0x7e2>
 800a448:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	f340 8081 	ble.w	800a554 <_strtod_l+0x8e4>
 800a452:	4659      	mov	r1, fp
 800a454:	2201      	movs	r2, #1
 800a456:	4650      	mov	r0, sl
 800a458:	f002 f85a 	bl	800c510 <__lshift>
 800a45c:	9904      	ldr	r1, [sp, #16]
 800a45e:	4683      	mov	fp, r0
 800a460:	f002 f8c2 	bl	800c5e8 <__mcmp>
 800a464:	2800      	cmp	r0, #0
 800a466:	dd75      	ble.n	800a554 <_strtod_l+0x8e4>
 800a468:	9905      	ldr	r1, [sp, #20]
 800a46a:	464b      	mov	r3, r9
 800a46c:	4a22      	ldr	r2, [pc, #136]	; (800a4f8 <_strtod_l+0x888>)
 800a46e:	2900      	cmp	r1, #0
 800a470:	f000 8091 	beq.w	800a596 <_strtod_l+0x926>
 800a474:	ea02 0109 	and.w	r1, r2, r9
 800a478:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a47c:	f300 808b 	bgt.w	800a596 <_strtod_l+0x926>
 800a480:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a484:	f77f aea9 	ble.w	800a1da <_strtod_l+0x56a>
 800a488:	2300      	movs	r3, #0
 800a48a:	4a1c      	ldr	r2, [pc, #112]	; (800a4fc <_strtod_l+0x88c>)
 800a48c:	4640      	mov	r0, r8
 800a48e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800a492:	4649      	mov	r1, r9
 800a494:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a498:	f7f6 f88a 	bl	80005b0 <__aeabi_dmul>
 800a49c:	460b      	mov	r3, r1
 800a49e:	4303      	orrs	r3, r0
 800a4a0:	bf08      	it	eq
 800a4a2:	2322      	moveq	r3, #34	; 0x22
 800a4a4:	4680      	mov	r8, r0
 800a4a6:	4689      	mov	r9, r1
 800a4a8:	bf08      	it	eq
 800a4aa:	f8ca 3000 	streq.w	r3, [sl]
 800a4ae:	e62d      	b.n	800a10c <_strtod_l+0x49c>
 800a4b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b8:	ea03 0808 	and.w	r8, r3, r8
 800a4bc:	e6db      	b.n	800a276 <_strtod_l+0x606>
 800a4be:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800a4c2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800a4c6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800a4ca:	35e2      	adds	r5, #226	; 0xe2
 800a4cc:	fa07 f505 	lsl.w	r5, r7, r5
 800a4d0:	970f      	str	r7, [sp, #60]	; 0x3c
 800a4d2:	e742      	b.n	800a35a <_strtod_l+0x6ea>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	2500      	movs	r5, #0
 800a4d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4da:	e73e      	b.n	800a35a <_strtod_l+0x6ea>
 800a4dc:	463a      	mov	r2, r7
 800a4de:	4650      	mov	r0, sl
 800a4e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a4e2:	f002 f815 	bl	800c510 <__lshift>
 800a4e6:	901c      	str	r0, [sp, #112]	; 0x70
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	f47f af64 	bne.w	800a3b6 <_strtod_l+0x746>
 800a4ee:	e602      	b.n	800a0f6 <_strtod_l+0x486>
 800a4f0:	0801a748 	.word	0x0801a748
 800a4f4:	fffffc02 	.word	0xfffffc02
 800a4f8:	7ff00000 	.word	0x7ff00000
 800a4fc:	39500000 	.word	0x39500000
 800a500:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a504:	d166      	bne.n	800a5d4 <_strtod_l+0x964>
 800a506:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a508:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a50c:	b35a      	cbz	r2, 800a566 <_strtod_l+0x8f6>
 800a50e:	4a9c      	ldr	r2, [pc, #624]	; (800a780 <_strtod_l+0xb10>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d12c      	bne.n	800a56e <_strtod_l+0x8fe>
 800a514:	9b05      	ldr	r3, [sp, #20]
 800a516:	4640      	mov	r0, r8
 800a518:	b303      	cbz	r3, 800a55c <_strtod_l+0x8ec>
 800a51a:	464b      	mov	r3, r9
 800a51c:	4a99      	ldr	r2, [pc, #612]	; (800a784 <_strtod_l+0xb14>)
 800a51e:	f04f 31ff 	mov.w	r1, #4294967295
 800a522:	401a      	ands	r2, r3
 800a524:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a528:	d81b      	bhi.n	800a562 <_strtod_l+0x8f2>
 800a52a:	0d12      	lsrs	r2, r2, #20
 800a52c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a530:	fa01 f303 	lsl.w	r3, r1, r3
 800a534:	4298      	cmp	r0, r3
 800a536:	d11a      	bne.n	800a56e <_strtod_l+0x8fe>
 800a538:	4b93      	ldr	r3, [pc, #588]	; (800a788 <_strtod_l+0xb18>)
 800a53a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d102      	bne.n	800a546 <_strtod_l+0x8d6>
 800a540:	3001      	adds	r0, #1
 800a542:	f43f add8 	beq.w	800a0f6 <_strtod_l+0x486>
 800a546:	f04f 0800 	mov.w	r8, #0
 800a54a:	4b8e      	ldr	r3, [pc, #568]	; (800a784 <_strtod_l+0xb14>)
 800a54c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a54e:	401a      	ands	r2, r3
 800a550:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a554:	9b05      	ldr	r3, [sp, #20]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d196      	bne.n	800a488 <_strtod_l+0x818>
 800a55a:	e5d7      	b.n	800a10c <_strtod_l+0x49c>
 800a55c:	f04f 33ff 	mov.w	r3, #4294967295
 800a560:	e7e8      	b.n	800a534 <_strtod_l+0x8c4>
 800a562:	460b      	mov	r3, r1
 800a564:	e7e6      	b.n	800a534 <_strtod_l+0x8c4>
 800a566:	ea53 0308 	orrs.w	r3, r3, r8
 800a56a:	f43f af7d 	beq.w	800a468 <_strtod_l+0x7f8>
 800a56e:	b1e5      	cbz	r5, 800a5aa <_strtod_l+0x93a>
 800a570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a572:	421d      	tst	r5, r3
 800a574:	d0ee      	beq.n	800a554 <_strtod_l+0x8e4>
 800a576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a578:	4640      	mov	r0, r8
 800a57a:	4649      	mov	r1, r9
 800a57c:	9a05      	ldr	r2, [sp, #20]
 800a57e:	b1c3      	cbz	r3, 800a5b2 <_strtod_l+0x942>
 800a580:	f7ff fb54 	bl	8009c2c <sulp>
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a58c:	f7f5 fe5a 	bl	8000244 <__adddf3>
 800a590:	4680      	mov	r8, r0
 800a592:	4689      	mov	r9, r1
 800a594:	e7de      	b.n	800a554 <_strtod_l+0x8e4>
 800a596:	4013      	ands	r3, r2
 800a598:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a59c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a5a0:	f04f 38ff 	mov.w	r8, #4294967295
 800a5a4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a5a8:	e7d4      	b.n	800a554 <_strtod_l+0x8e4>
 800a5aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a5ac:	ea13 0f08 	tst.w	r3, r8
 800a5b0:	e7e0      	b.n	800a574 <_strtod_l+0x904>
 800a5b2:	f7ff fb3b 	bl	8009c2c <sulp>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5be:	f7f5 fe3f 	bl	8000240 <__aeabi_dsub>
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	4680      	mov	r8, r0
 800a5c8:	4689      	mov	r9, r1
 800a5ca:	f7f6 fa59 	bl	8000a80 <__aeabi_dcmpeq>
 800a5ce:	2800      	cmp	r0, #0
 800a5d0:	d0c0      	beq.n	800a554 <_strtod_l+0x8e4>
 800a5d2:	e602      	b.n	800a1da <_strtod_l+0x56a>
 800a5d4:	4658      	mov	r0, fp
 800a5d6:	9904      	ldr	r1, [sp, #16]
 800a5d8:	f002 f988 	bl	800c8ec <__ratio>
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a5e2:	4606      	mov	r6, r0
 800a5e4:	460f      	mov	r7, r1
 800a5e6:	f7f6 fa5f 	bl	8000aa8 <__aeabi_dcmple>
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d075      	beq.n	800a6da <_strtod_l+0xa6a>
 800a5ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d047      	beq.n	800a684 <_strtod_l+0xa14>
 800a5f4:	2600      	movs	r6, #0
 800a5f6:	4f65      	ldr	r7, [pc, #404]	; (800a78c <_strtod_l+0xb1c>)
 800a5f8:	4d64      	ldr	r5, [pc, #400]	; (800a78c <_strtod_l+0xb1c>)
 800a5fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a600:	0d1b      	lsrs	r3, r3, #20
 800a602:	051b      	lsls	r3, r3, #20
 800a604:	930f      	str	r3, [sp, #60]	; 0x3c
 800a606:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a608:	4b61      	ldr	r3, [pc, #388]	; (800a790 <_strtod_l+0xb20>)
 800a60a:	429a      	cmp	r2, r3
 800a60c:	f040 80c8 	bne.w	800a7a0 <_strtod_l+0xb30>
 800a610:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a614:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a61a:	4640      	mov	r0, r8
 800a61c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a620:	4649      	mov	r1, r9
 800a622:	f002 f88d 	bl	800c740 <__ulp>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	4630      	mov	r0, r6
 800a62c:	4639      	mov	r1, r7
 800a62e:	f7f5 ffbf 	bl	80005b0 <__aeabi_dmul>
 800a632:	4642      	mov	r2, r8
 800a634:	464b      	mov	r3, r9
 800a636:	f7f5 fe05 	bl	8000244 <__adddf3>
 800a63a:	460b      	mov	r3, r1
 800a63c:	4951      	ldr	r1, [pc, #324]	; (800a784 <_strtod_l+0xb14>)
 800a63e:	4a55      	ldr	r2, [pc, #340]	; (800a794 <_strtod_l+0xb24>)
 800a640:	4019      	ands	r1, r3
 800a642:	4291      	cmp	r1, r2
 800a644:	4680      	mov	r8, r0
 800a646:	d95e      	bls.n	800a706 <_strtod_l+0xa96>
 800a648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a64a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a64e:	4293      	cmp	r3, r2
 800a650:	d103      	bne.n	800a65a <_strtod_l+0x9ea>
 800a652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a654:	3301      	adds	r3, #1
 800a656:	f43f ad4e 	beq.w	800a0f6 <_strtod_l+0x486>
 800a65a:	f04f 38ff 	mov.w	r8, #4294967295
 800a65e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a788 <_strtod_l+0xb18>
 800a662:	4650      	mov	r0, sl
 800a664:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a666:	f001 fd3b 	bl	800c0e0 <_Bfree>
 800a66a:	4650      	mov	r0, sl
 800a66c:	9906      	ldr	r1, [sp, #24]
 800a66e:	f001 fd37 	bl	800c0e0 <_Bfree>
 800a672:	4650      	mov	r0, sl
 800a674:	9904      	ldr	r1, [sp, #16]
 800a676:	f001 fd33 	bl	800c0e0 <_Bfree>
 800a67a:	4659      	mov	r1, fp
 800a67c:	4650      	mov	r0, sl
 800a67e:	f001 fd2f 	bl	800c0e0 <_Bfree>
 800a682:	e61c      	b.n	800a2be <_strtod_l+0x64e>
 800a684:	f1b8 0f00 	cmp.w	r8, #0
 800a688:	d119      	bne.n	800a6be <_strtod_l+0xa4e>
 800a68a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a68c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a690:	b9e3      	cbnz	r3, 800a6cc <_strtod_l+0xa5c>
 800a692:	2200      	movs	r2, #0
 800a694:	4630      	mov	r0, r6
 800a696:	4639      	mov	r1, r7
 800a698:	4b3c      	ldr	r3, [pc, #240]	; (800a78c <_strtod_l+0xb1c>)
 800a69a:	f7f6 f9fb 	bl	8000a94 <__aeabi_dcmplt>
 800a69e:	b9c8      	cbnz	r0, 800a6d4 <_strtod_l+0xa64>
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	4b3c      	ldr	r3, [pc, #240]	; (800a798 <_strtod_l+0xb28>)
 800a6a8:	f7f5 ff82 	bl	80005b0 <__aeabi_dmul>
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	460d      	mov	r5, r1
 800a6b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a6b4:	9418      	str	r4, [sp, #96]	; 0x60
 800a6b6:	9319      	str	r3, [sp, #100]	; 0x64
 800a6b8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800a6bc:	e79d      	b.n	800a5fa <_strtod_l+0x98a>
 800a6be:	f1b8 0f01 	cmp.w	r8, #1
 800a6c2:	d103      	bne.n	800a6cc <_strtod_l+0xa5c>
 800a6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f43f ad87 	beq.w	800a1da <_strtod_l+0x56a>
 800a6cc:	2600      	movs	r6, #0
 800a6ce:	2400      	movs	r4, #0
 800a6d0:	4f32      	ldr	r7, [pc, #200]	; (800a79c <_strtod_l+0xb2c>)
 800a6d2:	e791      	b.n	800a5f8 <_strtod_l+0x988>
 800a6d4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a6d6:	4d30      	ldr	r5, [pc, #192]	; (800a798 <_strtod_l+0xb28>)
 800a6d8:	e7ea      	b.n	800a6b0 <_strtod_l+0xa40>
 800a6da:	4b2f      	ldr	r3, [pc, #188]	; (800a798 <_strtod_l+0xb28>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	4630      	mov	r0, r6
 800a6e0:	4639      	mov	r1, r7
 800a6e2:	f7f5 ff65 	bl	80005b0 <__aeabi_dmul>
 800a6e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	460d      	mov	r5, r1
 800a6ec:	b933      	cbnz	r3, 800a6fc <_strtod_l+0xa8c>
 800a6ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6f2:	9010      	str	r0, [sp, #64]	; 0x40
 800a6f4:	9311      	str	r3, [sp, #68]	; 0x44
 800a6f6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a6fa:	e77e      	b.n	800a5fa <_strtod_l+0x98a>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a704:	e7f7      	b.n	800a6f6 <_strtod_l+0xa86>
 800a706:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a70a:	9b05      	ldr	r3, [sp, #20]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1a8      	bne.n	800a662 <_strtod_l+0x9f2>
 800a710:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a714:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a716:	0d1b      	lsrs	r3, r3, #20
 800a718:	051b      	lsls	r3, r3, #20
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d1a1      	bne.n	800a662 <_strtod_l+0x9f2>
 800a71e:	4620      	mov	r0, r4
 800a720:	4629      	mov	r1, r5
 800a722:	f7f6 fd77 	bl	8001214 <__aeabi_d2lz>
 800a726:	f7f5 ff15 	bl	8000554 <__aeabi_l2d>
 800a72a:	4602      	mov	r2, r0
 800a72c:	460b      	mov	r3, r1
 800a72e:	4620      	mov	r0, r4
 800a730:	4629      	mov	r1, r5
 800a732:	f7f5 fd85 	bl	8000240 <__aeabi_dsub>
 800a736:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a738:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a73c:	ea43 0308 	orr.w	r3, r3, r8
 800a740:	4313      	orrs	r3, r2
 800a742:	4604      	mov	r4, r0
 800a744:	460d      	mov	r5, r1
 800a746:	d066      	beq.n	800a816 <_strtod_l+0xba6>
 800a748:	a309      	add	r3, pc, #36	; (adr r3, 800a770 <_strtod_l+0xb00>)
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	f7f6 f9a1 	bl	8000a94 <__aeabi_dcmplt>
 800a752:	2800      	cmp	r0, #0
 800a754:	f47f acda 	bne.w	800a10c <_strtod_l+0x49c>
 800a758:	a307      	add	r3, pc, #28	; (adr r3, 800a778 <_strtod_l+0xb08>)
 800a75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75e:	4620      	mov	r0, r4
 800a760:	4629      	mov	r1, r5
 800a762:	f7f6 f9b5 	bl	8000ad0 <__aeabi_dcmpgt>
 800a766:	2800      	cmp	r0, #0
 800a768:	f43f af7b 	beq.w	800a662 <_strtod_l+0x9f2>
 800a76c:	e4ce      	b.n	800a10c <_strtod_l+0x49c>
 800a76e:	bf00      	nop
 800a770:	94a03595 	.word	0x94a03595
 800a774:	3fdfffff 	.word	0x3fdfffff
 800a778:	35afe535 	.word	0x35afe535
 800a77c:	3fe00000 	.word	0x3fe00000
 800a780:	000fffff 	.word	0x000fffff
 800a784:	7ff00000 	.word	0x7ff00000
 800a788:	7fefffff 	.word	0x7fefffff
 800a78c:	3ff00000 	.word	0x3ff00000
 800a790:	7fe00000 	.word	0x7fe00000
 800a794:	7c9fffff 	.word	0x7c9fffff
 800a798:	3fe00000 	.word	0x3fe00000
 800a79c:	bff00000 	.word	0xbff00000
 800a7a0:	9b05      	ldr	r3, [sp, #20]
 800a7a2:	b313      	cbz	r3, 800a7ea <_strtod_l+0xb7a>
 800a7a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a7aa:	d81e      	bhi.n	800a7ea <_strtod_l+0xb7a>
 800a7ac:	a326      	add	r3, pc, #152	; (adr r3, 800a848 <_strtod_l+0xbd8>)
 800a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	f7f6 f977 	bl	8000aa8 <__aeabi_dcmple>
 800a7ba:	b190      	cbz	r0, 800a7e2 <_strtod_l+0xb72>
 800a7bc:	4629      	mov	r1, r5
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f7f6 f9ce 	bl	8000b60 <__aeabi_d2uiz>
 800a7c4:	2801      	cmp	r0, #1
 800a7c6:	bf38      	it	cc
 800a7c8:	2001      	movcc	r0, #1
 800a7ca:	f7f5 fe77 	bl	80004bc <__aeabi_ui2d>
 800a7ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	460d      	mov	r5, r1
 800a7d4:	b9d3      	cbnz	r3, 800a80c <_strtod_l+0xb9c>
 800a7d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7da:	9012      	str	r0, [sp, #72]	; 0x48
 800a7dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800a7de:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a7e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7e4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a7e8:	1a9f      	subs	r7, r3, r2
 800a7ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a7ee:	f001 ffa7 	bl	800c740 <__ulp>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	4639      	mov	r1, r7
 800a7fa:	f7f5 fed9 	bl	80005b0 <__aeabi_dmul>
 800a7fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a802:	f7f5 fd1f 	bl	8000244 <__adddf3>
 800a806:	4680      	mov	r8, r0
 800a808:	4689      	mov	r9, r1
 800a80a:	e77e      	b.n	800a70a <_strtod_l+0xa9a>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a814:	e7e3      	b.n	800a7de <_strtod_l+0xb6e>
 800a816:	a30e      	add	r3, pc, #56	; (adr r3, 800a850 <_strtod_l+0xbe0>)
 800a818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81c:	f7f6 f93a 	bl	8000a94 <__aeabi_dcmplt>
 800a820:	e7a1      	b.n	800a766 <_strtod_l+0xaf6>
 800a822:	2300      	movs	r3, #0
 800a824:	930c      	str	r3, [sp, #48]	; 0x30
 800a826:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a828:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a82a:	6013      	str	r3, [r2, #0]
 800a82c:	f7ff ba65 	b.w	8009cfa <_strtod_l+0x8a>
 800a830:	2b65      	cmp	r3, #101	; 0x65
 800a832:	f43f ab5c 	beq.w	8009eee <_strtod_l+0x27e>
 800a836:	2b45      	cmp	r3, #69	; 0x45
 800a838:	f43f ab59 	beq.w	8009eee <_strtod_l+0x27e>
 800a83c:	2201      	movs	r2, #1
 800a83e:	f7ff bb8d 	b.w	8009f5c <_strtod_l+0x2ec>
 800a842:	bf00      	nop
 800a844:	f3af 8000 	nop.w
 800a848:	ffc00000 	.word	0xffc00000
 800a84c:	41dfffff 	.word	0x41dfffff
 800a850:	94a03595 	.word	0x94a03595
 800a854:	3fcfffff 	.word	0x3fcfffff

0800a858 <strtod>:
 800a858:	460a      	mov	r2, r1
 800a85a:	4601      	mov	r1, r0
 800a85c:	4802      	ldr	r0, [pc, #8]	; (800a868 <strtod+0x10>)
 800a85e:	4b03      	ldr	r3, [pc, #12]	; (800a86c <strtod+0x14>)
 800a860:	6800      	ldr	r0, [r0, #0]
 800a862:	f7ff ba05 	b.w	8009c70 <_strtod_l>
 800a866:	bf00      	nop
 800a868:	20000014 	.word	0x20000014
 800a86c:	2000007c 	.word	0x2000007c

0800a870 <strtof>:
 800a870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a874:	4f22      	ldr	r7, [pc, #136]	; (800a900 <strtof+0x90>)
 800a876:	460a      	mov	r2, r1
 800a878:	4b22      	ldr	r3, [pc, #136]	; (800a904 <strtof+0x94>)
 800a87a:	4601      	mov	r1, r0
 800a87c:	6838      	ldr	r0, [r7, #0]
 800a87e:	f7ff f9f7 	bl	8009c70 <_strtod_l>
 800a882:	4602      	mov	r2, r0
 800a884:	460b      	mov	r3, r1
 800a886:	4606      	mov	r6, r0
 800a888:	460c      	mov	r4, r1
 800a88a:	f7f6 f92b 	bl	8000ae4 <__aeabi_dcmpun>
 800a88e:	b168      	cbz	r0, 800a8ac <strtof+0x3c>
 800a890:	2c00      	cmp	r4, #0
 800a892:	481d      	ldr	r0, [pc, #116]	; (800a908 <strtof+0x98>)
 800a894:	da06      	bge.n	800a8a4 <strtof+0x34>
 800a896:	f002 fc19 	bl	800d0cc <nanf>
 800a89a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800a89e:	4628      	mov	r0, r5
 800a8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a8:	f002 bc10 	b.w	800d0cc <nanf>
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	f7f6 f976 	bl	8000ba0 <__aeabi_d2f>
 800a8b4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	4914      	ldr	r1, [pc, #80]	; (800a90c <strtof+0x9c>)
 800a8bc:	4640      	mov	r0, r8
 800a8be:	f7f6 fc93 	bl	80011e8 <__aeabi_fcmpun>
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d1eb      	bne.n	800a89e <strtof+0x2e>
 800a8c6:	4640      	mov	r0, r8
 800a8c8:	4910      	ldr	r1, [pc, #64]	; (800a90c <strtof+0x9c>)
 800a8ca:	f7f6 fc6f 	bl	80011ac <__aeabi_fcmple>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d1e5      	bne.n	800a89e <strtof+0x2e>
 800a8d2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800a8d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8da:	4630      	mov	r0, r6
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4b0c      	ldr	r3, [pc, #48]	; (800a910 <strtof+0xa0>)
 800a8e0:	f7f6 f900 	bl	8000ae4 <__aeabi_dcmpun>
 800a8e4:	b940      	cbnz	r0, 800a8f8 <strtof+0x88>
 800a8e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	4b08      	ldr	r3, [pc, #32]	; (800a910 <strtof+0xa0>)
 800a8f0:	f7f6 f8da 	bl	8000aa8 <__aeabi_dcmple>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	d0d2      	beq.n	800a89e <strtof+0x2e>
 800a8f8:	2222      	movs	r2, #34	; 0x22
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	e7ce      	b.n	800a89e <strtof+0x2e>
 800a900:	20000014 	.word	0x20000014
 800a904:	2000007c 	.word	0x2000007c
 800a908:	0801ab90 	.word	0x0801ab90
 800a90c:	7f7fffff 	.word	0x7f7fffff
 800a910:	7fefffff 	.word	0x7fefffff

0800a914 <_strtol_l.isra.0>:
 800a914:	2b01      	cmp	r3, #1
 800a916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a91a:	4686      	mov	lr, r0
 800a91c:	d001      	beq.n	800a922 <_strtol_l.isra.0+0xe>
 800a91e:	2b24      	cmp	r3, #36	; 0x24
 800a920:	d906      	bls.n	800a930 <_strtol_l.isra.0+0x1c>
 800a922:	f7fe fcb9 	bl	8009298 <__errno>
 800a926:	2316      	movs	r3, #22
 800a928:	6003      	str	r3, [r0, #0]
 800a92a:	2000      	movs	r0, #0
 800a92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a930:	468c      	mov	ip, r1
 800a932:	4e3a      	ldr	r6, [pc, #232]	; (800aa1c <_strtol_l.isra.0+0x108>)
 800a934:	4660      	mov	r0, ip
 800a936:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a93a:	5da5      	ldrb	r5, [r4, r6]
 800a93c:	f015 0508 	ands.w	r5, r5, #8
 800a940:	d1f8      	bne.n	800a934 <_strtol_l.isra.0+0x20>
 800a942:	2c2d      	cmp	r4, #45	; 0x2d
 800a944:	d133      	bne.n	800a9ae <_strtol_l.isra.0+0x9a>
 800a946:	f04f 0801 	mov.w	r8, #1
 800a94a:	f89c 4000 	ldrb.w	r4, [ip]
 800a94e:	f100 0c02 	add.w	ip, r0, #2
 800a952:	2b00      	cmp	r3, #0
 800a954:	d05d      	beq.n	800aa12 <_strtol_l.isra.0+0xfe>
 800a956:	2b10      	cmp	r3, #16
 800a958:	d10c      	bne.n	800a974 <_strtol_l.isra.0+0x60>
 800a95a:	2c30      	cmp	r4, #48	; 0x30
 800a95c:	d10a      	bne.n	800a974 <_strtol_l.isra.0+0x60>
 800a95e:	f89c 0000 	ldrb.w	r0, [ip]
 800a962:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a966:	2858      	cmp	r0, #88	; 0x58
 800a968:	d14e      	bne.n	800aa08 <_strtol_l.isra.0+0xf4>
 800a96a:	2310      	movs	r3, #16
 800a96c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a970:	f10c 0c02 	add.w	ip, ip, #2
 800a974:	2500      	movs	r5, #0
 800a976:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800a97a:	3f01      	subs	r7, #1
 800a97c:	fbb7 f9f3 	udiv	r9, r7, r3
 800a980:	4628      	mov	r0, r5
 800a982:	fb03 7a19 	mls	sl, r3, r9, r7
 800a986:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a98a:	2e09      	cmp	r6, #9
 800a98c:	d818      	bhi.n	800a9c0 <_strtol_l.isra.0+0xac>
 800a98e:	4634      	mov	r4, r6
 800a990:	42a3      	cmp	r3, r4
 800a992:	dd24      	ble.n	800a9de <_strtol_l.isra.0+0xca>
 800a994:	2d00      	cmp	r5, #0
 800a996:	db1f      	blt.n	800a9d8 <_strtol_l.isra.0+0xc4>
 800a998:	4581      	cmp	r9, r0
 800a99a:	d31d      	bcc.n	800a9d8 <_strtol_l.isra.0+0xc4>
 800a99c:	d101      	bne.n	800a9a2 <_strtol_l.isra.0+0x8e>
 800a99e:	45a2      	cmp	sl, r4
 800a9a0:	db1a      	blt.n	800a9d8 <_strtol_l.isra.0+0xc4>
 800a9a2:	2501      	movs	r5, #1
 800a9a4:	fb00 4003 	mla	r0, r0, r3, r4
 800a9a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a9ac:	e7eb      	b.n	800a986 <_strtol_l.isra.0+0x72>
 800a9ae:	2c2b      	cmp	r4, #43	; 0x2b
 800a9b0:	bf08      	it	eq
 800a9b2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a9b6:	46a8      	mov	r8, r5
 800a9b8:	bf08      	it	eq
 800a9ba:	f100 0c02 	addeq.w	ip, r0, #2
 800a9be:	e7c8      	b.n	800a952 <_strtol_l.isra.0+0x3e>
 800a9c0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a9c4:	2e19      	cmp	r6, #25
 800a9c6:	d801      	bhi.n	800a9cc <_strtol_l.isra.0+0xb8>
 800a9c8:	3c37      	subs	r4, #55	; 0x37
 800a9ca:	e7e1      	b.n	800a990 <_strtol_l.isra.0+0x7c>
 800a9cc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a9d0:	2e19      	cmp	r6, #25
 800a9d2:	d804      	bhi.n	800a9de <_strtol_l.isra.0+0xca>
 800a9d4:	3c57      	subs	r4, #87	; 0x57
 800a9d6:	e7db      	b.n	800a990 <_strtol_l.isra.0+0x7c>
 800a9d8:	f04f 35ff 	mov.w	r5, #4294967295
 800a9dc:	e7e4      	b.n	800a9a8 <_strtol_l.isra.0+0x94>
 800a9de:	2d00      	cmp	r5, #0
 800a9e0:	da08      	bge.n	800a9f4 <_strtol_l.isra.0+0xe0>
 800a9e2:	2322      	movs	r3, #34	; 0x22
 800a9e4:	4638      	mov	r0, r7
 800a9e6:	f8ce 3000 	str.w	r3, [lr]
 800a9ea:	2a00      	cmp	r2, #0
 800a9ec:	d09e      	beq.n	800a92c <_strtol_l.isra.0+0x18>
 800a9ee:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a9f2:	e007      	b.n	800aa04 <_strtol_l.isra.0+0xf0>
 800a9f4:	f1b8 0f00 	cmp.w	r8, #0
 800a9f8:	d000      	beq.n	800a9fc <_strtol_l.isra.0+0xe8>
 800a9fa:	4240      	negs	r0, r0
 800a9fc:	2a00      	cmp	r2, #0
 800a9fe:	d095      	beq.n	800a92c <_strtol_l.isra.0+0x18>
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	d1f4      	bne.n	800a9ee <_strtol_l.isra.0+0xda>
 800aa04:	6011      	str	r1, [r2, #0]
 800aa06:	e791      	b.n	800a92c <_strtol_l.isra.0+0x18>
 800aa08:	2430      	movs	r4, #48	; 0x30
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1b2      	bne.n	800a974 <_strtol_l.isra.0+0x60>
 800aa0e:	2308      	movs	r3, #8
 800aa10:	e7b0      	b.n	800a974 <_strtol_l.isra.0+0x60>
 800aa12:	2c30      	cmp	r4, #48	; 0x30
 800aa14:	d0a3      	beq.n	800a95e <_strtol_l.isra.0+0x4a>
 800aa16:	230a      	movs	r3, #10
 800aa18:	e7ac      	b.n	800a974 <_strtol_l.isra.0+0x60>
 800aa1a:	bf00      	nop
 800aa1c:	0801a771 	.word	0x0801a771

0800aa20 <strtol>:
 800aa20:	4613      	mov	r3, r2
 800aa22:	460a      	mov	r2, r1
 800aa24:	4601      	mov	r1, r0
 800aa26:	4802      	ldr	r0, [pc, #8]	; (800aa30 <strtol+0x10>)
 800aa28:	6800      	ldr	r0, [r0, #0]
 800aa2a:	f7ff bf73 	b.w	800a914 <_strtol_l.isra.0>
 800aa2e:	bf00      	nop
 800aa30:	20000014 	.word	0x20000014

0800aa34 <quorem>:
 800aa34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa38:	6903      	ldr	r3, [r0, #16]
 800aa3a:	690c      	ldr	r4, [r1, #16]
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	42a3      	cmp	r3, r4
 800aa40:	f2c0 8083 	blt.w	800ab4a <quorem+0x116>
 800aa44:	3c01      	subs	r4, #1
 800aa46:	f100 0514 	add.w	r5, r0, #20
 800aa4a:	f101 0814 	add.w	r8, r1, #20
 800aa4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa52:	9301      	str	r3, [sp, #4]
 800aa54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	fbb2 f6f3 	udiv	r6, r2, r3
 800aa64:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aa68:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aa6c:	d332      	bcc.n	800aad4 <quorem+0xa0>
 800aa6e:	f04f 0e00 	mov.w	lr, #0
 800aa72:	4640      	mov	r0, r8
 800aa74:	46ac      	mov	ip, r5
 800aa76:	46f2      	mov	sl, lr
 800aa78:	f850 2b04 	ldr.w	r2, [r0], #4
 800aa7c:	b293      	uxth	r3, r2
 800aa7e:	fb06 e303 	mla	r3, r6, r3, lr
 800aa82:	0c12      	lsrs	r2, r2, #16
 800aa84:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aa88:	fb06 e202 	mla	r2, r6, r2, lr
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	ebaa 0303 	sub.w	r3, sl, r3
 800aa92:	f8dc a000 	ldr.w	sl, [ip]
 800aa96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aa9a:	fa1f fa8a 	uxth.w	sl, sl
 800aa9e:	4453      	add	r3, sl
 800aaa0:	fa1f fa82 	uxth.w	sl, r2
 800aaa4:	f8dc 2000 	ldr.w	r2, [ip]
 800aaa8:	4581      	cmp	r9, r0
 800aaaa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800aaae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aab2:	b29b      	uxth	r3, r3
 800aab4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aab8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aabc:	f84c 3b04 	str.w	r3, [ip], #4
 800aac0:	d2da      	bcs.n	800aa78 <quorem+0x44>
 800aac2:	f855 300b 	ldr.w	r3, [r5, fp]
 800aac6:	b92b      	cbnz	r3, 800aad4 <quorem+0xa0>
 800aac8:	9b01      	ldr	r3, [sp, #4]
 800aaca:	3b04      	subs	r3, #4
 800aacc:	429d      	cmp	r5, r3
 800aace:	461a      	mov	r2, r3
 800aad0:	d32f      	bcc.n	800ab32 <quorem+0xfe>
 800aad2:	613c      	str	r4, [r7, #16]
 800aad4:	4638      	mov	r0, r7
 800aad6:	f001 fd87 	bl	800c5e8 <__mcmp>
 800aada:	2800      	cmp	r0, #0
 800aadc:	db25      	blt.n	800ab2a <quorem+0xf6>
 800aade:	4628      	mov	r0, r5
 800aae0:	f04f 0c00 	mov.w	ip, #0
 800aae4:	3601      	adds	r6, #1
 800aae6:	f858 1b04 	ldr.w	r1, [r8], #4
 800aaea:	f8d0 e000 	ldr.w	lr, [r0]
 800aaee:	b28b      	uxth	r3, r1
 800aaf0:	ebac 0303 	sub.w	r3, ip, r3
 800aaf4:	fa1f f28e 	uxth.w	r2, lr
 800aaf8:	4413      	add	r3, r2
 800aafa:	0c0a      	lsrs	r2, r1, #16
 800aafc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab0a:	45c1      	cmp	r9, r8
 800ab0c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab10:	f840 3b04 	str.w	r3, [r0], #4
 800ab14:	d2e7      	bcs.n	800aae6 <quorem+0xb2>
 800ab16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab1e:	b922      	cbnz	r2, 800ab2a <quorem+0xf6>
 800ab20:	3b04      	subs	r3, #4
 800ab22:	429d      	cmp	r5, r3
 800ab24:	461a      	mov	r2, r3
 800ab26:	d30a      	bcc.n	800ab3e <quorem+0x10a>
 800ab28:	613c      	str	r4, [r7, #16]
 800ab2a:	4630      	mov	r0, r6
 800ab2c:	b003      	add	sp, #12
 800ab2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab32:	6812      	ldr	r2, [r2, #0]
 800ab34:	3b04      	subs	r3, #4
 800ab36:	2a00      	cmp	r2, #0
 800ab38:	d1cb      	bne.n	800aad2 <quorem+0x9e>
 800ab3a:	3c01      	subs	r4, #1
 800ab3c:	e7c6      	b.n	800aacc <quorem+0x98>
 800ab3e:	6812      	ldr	r2, [r2, #0]
 800ab40:	3b04      	subs	r3, #4
 800ab42:	2a00      	cmp	r2, #0
 800ab44:	d1f0      	bne.n	800ab28 <quorem+0xf4>
 800ab46:	3c01      	subs	r4, #1
 800ab48:	e7eb      	b.n	800ab22 <quorem+0xee>
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	e7ee      	b.n	800ab2c <quorem+0xf8>
	...

0800ab50 <_dtoa_r>:
 800ab50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	4616      	mov	r6, r2
 800ab56:	461f      	mov	r7, r3
 800ab58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ab5a:	b099      	sub	sp, #100	; 0x64
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800ab62:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800ab66:	b974      	cbnz	r4, 800ab86 <_dtoa_r+0x36>
 800ab68:	2010      	movs	r0, #16
 800ab6a:	f001 fa43 	bl	800bff4 <malloc>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	6268      	str	r0, [r5, #36]	; 0x24
 800ab72:	b920      	cbnz	r0, 800ab7e <_dtoa_r+0x2e>
 800ab74:	21ea      	movs	r1, #234	; 0xea
 800ab76:	4bae      	ldr	r3, [pc, #696]	; (800ae30 <_dtoa_r+0x2e0>)
 800ab78:	48ae      	ldr	r0, [pc, #696]	; (800ae34 <_dtoa_r+0x2e4>)
 800ab7a:	f002 fbe1 	bl	800d340 <__assert_func>
 800ab7e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab82:	6004      	str	r4, [r0, #0]
 800ab84:	60c4      	str	r4, [r0, #12]
 800ab86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab88:	6819      	ldr	r1, [r3, #0]
 800ab8a:	b151      	cbz	r1, 800aba2 <_dtoa_r+0x52>
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	2301      	movs	r3, #1
 800ab90:	4093      	lsls	r3, r2
 800ab92:	604a      	str	r2, [r1, #4]
 800ab94:	608b      	str	r3, [r1, #8]
 800ab96:	4628      	mov	r0, r5
 800ab98:	f001 faa2 	bl	800c0e0 <_Bfree>
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	1e3b      	subs	r3, r7, #0
 800aba4:	bfaf      	iteee	ge
 800aba6:	2300      	movge	r3, #0
 800aba8:	2201      	movlt	r2, #1
 800abaa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800abae:	9305      	strlt	r3, [sp, #20]
 800abb0:	bfa8      	it	ge
 800abb2:	f8c8 3000 	strge.w	r3, [r8]
 800abb6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800abba:	4b9f      	ldr	r3, [pc, #636]	; (800ae38 <_dtoa_r+0x2e8>)
 800abbc:	bfb8      	it	lt
 800abbe:	f8c8 2000 	strlt.w	r2, [r8]
 800abc2:	ea33 0309 	bics.w	r3, r3, r9
 800abc6:	d119      	bne.n	800abfc <_dtoa_r+0xac>
 800abc8:	f242 730f 	movw	r3, #9999	; 0x270f
 800abcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800abce:	6013      	str	r3, [r2, #0]
 800abd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abd4:	4333      	orrs	r3, r6
 800abd6:	f000 8580 	beq.w	800b6da <_dtoa_r+0xb8a>
 800abda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800abdc:	b953      	cbnz	r3, 800abf4 <_dtoa_r+0xa4>
 800abde:	4b97      	ldr	r3, [pc, #604]	; (800ae3c <_dtoa_r+0x2ec>)
 800abe0:	e022      	b.n	800ac28 <_dtoa_r+0xd8>
 800abe2:	4b97      	ldr	r3, [pc, #604]	; (800ae40 <_dtoa_r+0x2f0>)
 800abe4:	9308      	str	r3, [sp, #32]
 800abe6:	3308      	adds	r3, #8
 800abe8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800abea:	6013      	str	r3, [r2, #0]
 800abec:	9808      	ldr	r0, [sp, #32]
 800abee:	b019      	add	sp, #100	; 0x64
 800abf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf4:	4b91      	ldr	r3, [pc, #580]	; (800ae3c <_dtoa_r+0x2ec>)
 800abf6:	9308      	str	r3, [sp, #32]
 800abf8:	3303      	adds	r3, #3
 800abfa:	e7f5      	b.n	800abe8 <_dtoa_r+0x98>
 800abfc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ac00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ac04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac08:	2200      	movs	r2, #0
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	f7f5 ff38 	bl	8000a80 <__aeabi_dcmpeq>
 800ac10:	4680      	mov	r8, r0
 800ac12:	b158      	cbz	r0, 800ac2c <_dtoa_r+0xdc>
 800ac14:	2301      	movs	r3, #1
 800ac16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ac18:	6013      	str	r3, [r2, #0]
 800ac1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f000 8559 	beq.w	800b6d4 <_dtoa_r+0xb84>
 800ac22:	4888      	ldr	r0, [pc, #544]	; (800ae44 <_dtoa_r+0x2f4>)
 800ac24:	6018      	str	r0, [r3, #0]
 800ac26:	1e43      	subs	r3, r0, #1
 800ac28:	9308      	str	r3, [sp, #32]
 800ac2a:	e7df      	b.n	800abec <_dtoa_r+0x9c>
 800ac2c:	ab16      	add	r3, sp, #88	; 0x58
 800ac2e:	9301      	str	r3, [sp, #4]
 800ac30:	ab17      	add	r3, sp, #92	; 0x5c
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	4628      	mov	r0, r5
 800ac36:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ac3a:	f001 fdfb 	bl	800c834 <__d2b>
 800ac3e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ac42:	4682      	mov	sl, r0
 800ac44:	2c00      	cmp	r4, #0
 800ac46:	d07e      	beq.n	800ad46 <_dtoa_r+0x1f6>
 800ac48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac4e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ac52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac56:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ac5a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ac5e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ac62:	2200      	movs	r2, #0
 800ac64:	4b78      	ldr	r3, [pc, #480]	; (800ae48 <_dtoa_r+0x2f8>)
 800ac66:	f7f5 faeb 	bl	8000240 <__aeabi_dsub>
 800ac6a:	a36b      	add	r3, pc, #428	; (adr r3, 800ae18 <_dtoa_r+0x2c8>)
 800ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac70:	f7f5 fc9e 	bl	80005b0 <__aeabi_dmul>
 800ac74:	a36a      	add	r3, pc, #424	; (adr r3, 800ae20 <_dtoa_r+0x2d0>)
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	f7f5 fae3 	bl	8000244 <__adddf3>
 800ac7e:	4606      	mov	r6, r0
 800ac80:	4620      	mov	r0, r4
 800ac82:	460f      	mov	r7, r1
 800ac84:	f7f5 fc2a 	bl	80004dc <__aeabi_i2d>
 800ac88:	a367      	add	r3, pc, #412	; (adr r3, 800ae28 <_dtoa_r+0x2d8>)
 800ac8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8e:	f7f5 fc8f 	bl	80005b0 <__aeabi_dmul>
 800ac92:	4602      	mov	r2, r0
 800ac94:	460b      	mov	r3, r1
 800ac96:	4630      	mov	r0, r6
 800ac98:	4639      	mov	r1, r7
 800ac9a:	f7f5 fad3 	bl	8000244 <__adddf3>
 800ac9e:	4606      	mov	r6, r0
 800aca0:	460f      	mov	r7, r1
 800aca2:	f7f5 ff35 	bl	8000b10 <__aeabi_d2iz>
 800aca6:	2200      	movs	r2, #0
 800aca8:	4681      	mov	r9, r0
 800acaa:	2300      	movs	r3, #0
 800acac:	4630      	mov	r0, r6
 800acae:	4639      	mov	r1, r7
 800acb0:	f7f5 fef0 	bl	8000a94 <__aeabi_dcmplt>
 800acb4:	b148      	cbz	r0, 800acca <_dtoa_r+0x17a>
 800acb6:	4648      	mov	r0, r9
 800acb8:	f7f5 fc10 	bl	80004dc <__aeabi_i2d>
 800acbc:	4632      	mov	r2, r6
 800acbe:	463b      	mov	r3, r7
 800acc0:	f7f5 fede 	bl	8000a80 <__aeabi_dcmpeq>
 800acc4:	b908      	cbnz	r0, 800acca <_dtoa_r+0x17a>
 800acc6:	f109 39ff 	add.w	r9, r9, #4294967295
 800acca:	f1b9 0f16 	cmp.w	r9, #22
 800acce:	d857      	bhi.n	800ad80 <_dtoa_r+0x230>
 800acd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800acd4:	4b5d      	ldr	r3, [pc, #372]	; (800ae4c <_dtoa_r+0x2fc>)
 800acd6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800acda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acde:	f7f5 fed9 	bl	8000a94 <__aeabi_dcmplt>
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d04e      	beq.n	800ad84 <_dtoa_r+0x234>
 800ace6:	2300      	movs	r3, #0
 800ace8:	f109 39ff 	add.w	r9, r9, #4294967295
 800acec:	930f      	str	r3, [sp, #60]	; 0x3c
 800acee:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800acf0:	1b1c      	subs	r4, r3, r4
 800acf2:	1e63      	subs	r3, r4, #1
 800acf4:	9309      	str	r3, [sp, #36]	; 0x24
 800acf6:	bf49      	itett	mi
 800acf8:	f1c4 0301 	rsbmi	r3, r4, #1
 800acfc:	2300      	movpl	r3, #0
 800acfe:	9306      	strmi	r3, [sp, #24]
 800ad00:	2300      	movmi	r3, #0
 800ad02:	bf54      	ite	pl
 800ad04:	9306      	strpl	r3, [sp, #24]
 800ad06:	9309      	strmi	r3, [sp, #36]	; 0x24
 800ad08:	f1b9 0f00 	cmp.w	r9, #0
 800ad0c:	db3c      	blt.n	800ad88 <_dtoa_r+0x238>
 800ad0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad10:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ad14:	444b      	add	r3, r9
 800ad16:	9309      	str	r3, [sp, #36]	; 0x24
 800ad18:	2300      	movs	r3, #0
 800ad1a:	930a      	str	r3, [sp, #40]	; 0x28
 800ad1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad1e:	2b09      	cmp	r3, #9
 800ad20:	d86c      	bhi.n	800adfc <_dtoa_r+0x2ac>
 800ad22:	2b05      	cmp	r3, #5
 800ad24:	bfc4      	itt	gt
 800ad26:	3b04      	subgt	r3, #4
 800ad28:	9322      	strgt	r3, [sp, #136]	; 0x88
 800ad2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad2c:	bfc8      	it	gt
 800ad2e:	2400      	movgt	r4, #0
 800ad30:	f1a3 0302 	sub.w	r3, r3, #2
 800ad34:	bfd8      	it	le
 800ad36:	2401      	movle	r4, #1
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	f200 808b 	bhi.w	800ae54 <_dtoa_r+0x304>
 800ad3e:	e8df f003 	tbb	[pc, r3]
 800ad42:	4f2d      	.short	0x4f2d
 800ad44:	5b4d      	.short	0x5b4d
 800ad46:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800ad4a:	441c      	add	r4, r3
 800ad4c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800ad50:	2b20      	cmp	r3, #32
 800ad52:	bfc3      	ittte	gt
 800ad54:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ad58:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800ad5c:	fa09 f303 	lslgt.w	r3, r9, r3
 800ad60:	f1c3 0320 	rsble	r3, r3, #32
 800ad64:	bfc6      	itte	gt
 800ad66:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ad6a:	4318      	orrgt	r0, r3
 800ad6c:	fa06 f003 	lslle.w	r0, r6, r3
 800ad70:	f7f5 fba4 	bl	80004bc <__aeabi_ui2d>
 800ad74:	2301      	movs	r3, #1
 800ad76:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ad7a:	3c01      	subs	r4, #1
 800ad7c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad7e:	e770      	b.n	800ac62 <_dtoa_r+0x112>
 800ad80:	2301      	movs	r3, #1
 800ad82:	e7b3      	b.n	800acec <_dtoa_r+0x19c>
 800ad84:	900f      	str	r0, [sp, #60]	; 0x3c
 800ad86:	e7b2      	b.n	800acee <_dtoa_r+0x19e>
 800ad88:	9b06      	ldr	r3, [sp, #24]
 800ad8a:	eba3 0309 	sub.w	r3, r3, r9
 800ad8e:	9306      	str	r3, [sp, #24]
 800ad90:	f1c9 0300 	rsb	r3, r9, #0
 800ad94:	930a      	str	r3, [sp, #40]	; 0x28
 800ad96:	2300      	movs	r3, #0
 800ad98:	930e      	str	r3, [sp, #56]	; 0x38
 800ad9a:	e7bf      	b.n	800ad1c <_dtoa_r+0x1cc>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ada0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	dc59      	bgt.n	800ae5a <_dtoa_r+0x30a>
 800ada6:	f04f 0b01 	mov.w	fp, #1
 800adaa:	465b      	mov	r3, fp
 800adac:	f8cd b008 	str.w	fp, [sp, #8]
 800adb0:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800adb4:	2200      	movs	r2, #0
 800adb6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800adb8:	6042      	str	r2, [r0, #4]
 800adba:	2204      	movs	r2, #4
 800adbc:	f102 0614 	add.w	r6, r2, #20
 800adc0:	429e      	cmp	r6, r3
 800adc2:	6841      	ldr	r1, [r0, #4]
 800adc4:	d94f      	bls.n	800ae66 <_dtoa_r+0x316>
 800adc6:	4628      	mov	r0, r5
 800adc8:	f001 f94a 	bl	800c060 <_Balloc>
 800adcc:	9008      	str	r0, [sp, #32]
 800adce:	2800      	cmp	r0, #0
 800add0:	d14d      	bne.n	800ae6e <_dtoa_r+0x31e>
 800add2:	4602      	mov	r2, r0
 800add4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800add8:	4b1d      	ldr	r3, [pc, #116]	; (800ae50 <_dtoa_r+0x300>)
 800adda:	e6cd      	b.n	800ab78 <_dtoa_r+0x28>
 800addc:	2301      	movs	r3, #1
 800adde:	e7de      	b.n	800ad9e <_dtoa_r+0x24e>
 800ade0:	2300      	movs	r3, #0
 800ade2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ade4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ade6:	eb09 0b03 	add.w	fp, r9, r3
 800adea:	f10b 0301 	add.w	r3, fp, #1
 800adee:	2b01      	cmp	r3, #1
 800adf0:	9302      	str	r3, [sp, #8]
 800adf2:	bfb8      	it	lt
 800adf4:	2301      	movlt	r3, #1
 800adf6:	e7dd      	b.n	800adb4 <_dtoa_r+0x264>
 800adf8:	2301      	movs	r3, #1
 800adfa:	e7f2      	b.n	800ade2 <_dtoa_r+0x292>
 800adfc:	2401      	movs	r4, #1
 800adfe:	2300      	movs	r3, #0
 800ae00:	940b      	str	r4, [sp, #44]	; 0x2c
 800ae02:	9322      	str	r3, [sp, #136]	; 0x88
 800ae04:	f04f 3bff 	mov.w	fp, #4294967295
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2312      	movs	r3, #18
 800ae0c:	f8cd b008 	str.w	fp, [sp, #8]
 800ae10:	9223      	str	r2, [sp, #140]	; 0x8c
 800ae12:	e7cf      	b.n	800adb4 <_dtoa_r+0x264>
 800ae14:	f3af 8000 	nop.w
 800ae18:	636f4361 	.word	0x636f4361
 800ae1c:	3fd287a7 	.word	0x3fd287a7
 800ae20:	8b60c8b3 	.word	0x8b60c8b3
 800ae24:	3fc68a28 	.word	0x3fc68a28
 800ae28:	509f79fb 	.word	0x509f79fb
 800ae2c:	3fd34413 	.word	0x3fd34413
 800ae30:	0801a87e 	.word	0x0801a87e
 800ae34:	0801a895 	.word	0x0801a895
 800ae38:	7ff00000 	.word	0x7ff00000
 800ae3c:	0801a87a 	.word	0x0801a87a
 800ae40:	0801a871 	.word	0x0801a871
 800ae44:	0801a6fd 	.word	0x0801a6fd
 800ae48:	3ff80000 	.word	0x3ff80000
 800ae4c:	0801aa70 	.word	0x0801aa70
 800ae50:	0801a8f4 	.word	0x0801a8f4
 800ae54:	2301      	movs	r3, #1
 800ae56:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae58:	e7d4      	b.n	800ae04 <_dtoa_r+0x2b4>
 800ae5a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800ae5e:	465b      	mov	r3, fp
 800ae60:	f8cd b008 	str.w	fp, [sp, #8]
 800ae64:	e7a6      	b.n	800adb4 <_dtoa_r+0x264>
 800ae66:	3101      	adds	r1, #1
 800ae68:	6041      	str	r1, [r0, #4]
 800ae6a:	0052      	lsls	r2, r2, #1
 800ae6c:	e7a6      	b.n	800adbc <_dtoa_r+0x26c>
 800ae6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae70:	9a08      	ldr	r2, [sp, #32]
 800ae72:	601a      	str	r2, [r3, #0]
 800ae74:	9b02      	ldr	r3, [sp, #8]
 800ae76:	2b0e      	cmp	r3, #14
 800ae78:	f200 80a8 	bhi.w	800afcc <_dtoa_r+0x47c>
 800ae7c:	2c00      	cmp	r4, #0
 800ae7e:	f000 80a5 	beq.w	800afcc <_dtoa_r+0x47c>
 800ae82:	f1b9 0f00 	cmp.w	r9, #0
 800ae86:	dd34      	ble.n	800aef2 <_dtoa_r+0x3a2>
 800ae88:	4a9a      	ldr	r2, [pc, #616]	; (800b0f4 <_dtoa_r+0x5a4>)
 800ae8a:	f009 030f 	and.w	r3, r9, #15
 800ae8e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ae92:	f419 7f80 	tst.w	r9, #256	; 0x100
 800ae96:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ae9a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ae9e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800aea2:	d016      	beq.n	800aed2 <_dtoa_r+0x382>
 800aea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aea8:	4b93      	ldr	r3, [pc, #588]	; (800b0f8 <_dtoa_r+0x5a8>)
 800aeaa:	2703      	movs	r7, #3
 800aeac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aeb0:	f7f5 fca8 	bl	8000804 <__aeabi_ddiv>
 800aeb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aeb8:	f004 040f 	and.w	r4, r4, #15
 800aebc:	4e8e      	ldr	r6, [pc, #568]	; (800b0f8 <_dtoa_r+0x5a8>)
 800aebe:	b954      	cbnz	r4, 800aed6 <_dtoa_r+0x386>
 800aec0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aec4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aec8:	f7f5 fc9c 	bl	8000804 <__aeabi_ddiv>
 800aecc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aed0:	e029      	b.n	800af26 <_dtoa_r+0x3d6>
 800aed2:	2702      	movs	r7, #2
 800aed4:	e7f2      	b.n	800aebc <_dtoa_r+0x36c>
 800aed6:	07e1      	lsls	r1, r4, #31
 800aed8:	d508      	bpl.n	800aeec <_dtoa_r+0x39c>
 800aeda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aede:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aee2:	f7f5 fb65 	bl	80005b0 <__aeabi_dmul>
 800aee6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800aeea:	3701      	adds	r7, #1
 800aeec:	1064      	asrs	r4, r4, #1
 800aeee:	3608      	adds	r6, #8
 800aef0:	e7e5      	b.n	800aebe <_dtoa_r+0x36e>
 800aef2:	f000 80a5 	beq.w	800b040 <_dtoa_r+0x4f0>
 800aef6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aefa:	f1c9 0400 	rsb	r4, r9, #0
 800aefe:	4b7d      	ldr	r3, [pc, #500]	; (800b0f4 <_dtoa_r+0x5a4>)
 800af00:	f004 020f 	and.w	r2, r4, #15
 800af04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0c:	f7f5 fb50 	bl	80005b0 <__aeabi_dmul>
 800af10:	2702      	movs	r7, #2
 800af12:	2300      	movs	r3, #0
 800af14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af18:	4e77      	ldr	r6, [pc, #476]	; (800b0f8 <_dtoa_r+0x5a8>)
 800af1a:	1124      	asrs	r4, r4, #4
 800af1c:	2c00      	cmp	r4, #0
 800af1e:	f040 8084 	bne.w	800b02a <_dtoa_r+0x4da>
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1d2      	bne.n	800aecc <_dtoa_r+0x37c>
 800af26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 808b 	beq.w	800b044 <_dtoa_r+0x4f4>
 800af2e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800af32:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800af36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af3a:	2200      	movs	r2, #0
 800af3c:	4b6f      	ldr	r3, [pc, #444]	; (800b0fc <_dtoa_r+0x5ac>)
 800af3e:	f7f5 fda9 	bl	8000a94 <__aeabi_dcmplt>
 800af42:	2800      	cmp	r0, #0
 800af44:	d07e      	beq.n	800b044 <_dtoa_r+0x4f4>
 800af46:	9b02      	ldr	r3, [sp, #8]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d07b      	beq.n	800b044 <_dtoa_r+0x4f4>
 800af4c:	f1bb 0f00 	cmp.w	fp, #0
 800af50:	dd38      	ble.n	800afc4 <_dtoa_r+0x474>
 800af52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800af56:	2200      	movs	r2, #0
 800af58:	4b69      	ldr	r3, [pc, #420]	; (800b100 <_dtoa_r+0x5b0>)
 800af5a:	f7f5 fb29 	bl	80005b0 <__aeabi_dmul>
 800af5e:	465c      	mov	r4, fp
 800af60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af64:	f109 38ff 	add.w	r8, r9, #4294967295
 800af68:	3701      	adds	r7, #1
 800af6a:	4638      	mov	r0, r7
 800af6c:	f7f5 fab6 	bl	80004dc <__aeabi_i2d>
 800af70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af74:	f7f5 fb1c 	bl	80005b0 <__aeabi_dmul>
 800af78:	2200      	movs	r2, #0
 800af7a:	4b62      	ldr	r3, [pc, #392]	; (800b104 <_dtoa_r+0x5b4>)
 800af7c:	f7f5 f962 	bl	8000244 <__adddf3>
 800af80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800af84:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800af88:	9611      	str	r6, [sp, #68]	; 0x44
 800af8a:	2c00      	cmp	r4, #0
 800af8c:	d15d      	bne.n	800b04a <_dtoa_r+0x4fa>
 800af8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af92:	2200      	movs	r2, #0
 800af94:	4b5c      	ldr	r3, [pc, #368]	; (800b108 <_dtoa_r+0x5b8>)
 800af96:	f7f5 f953 	bl	8000240 <__aeabi_dsub>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afa2:	4633      	mov	r3, r6
 800afa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afa6:	f7f5 fd93 	bl	8000ad0 <__aeabi_dcmpgt>
 800afaa:	2800      	cmp	r0, #0
 800afac:	f040 829e 	bne.w	800b4ec <_dtoa_r+0x99c>
 800afb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800afb6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800afba:	f7f5 fd6b 	bl	8000a94 <__aeabi_dcmplt>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	f040 8292 	bne.w	800b4e8 <_dtoa_r+0x998>
 800afc4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800afc8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800afcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f2c0 8153 	blt.w	800b27a <_dtoa_r+0x72a>
 800afd4:	f1b9 0f0e 	cmp.w	r9, #14
 800afd8:	f300 814f 	bgt.w	800b27a <_dtoa_r+0x72a>
 800afdc:	4b45      	ldr	r3, [pc, #276]	; (800b0f4 <_dtoa_r+0x5a4>)
 800afde:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800afe2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800afe6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800afea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afec:	2b00      	cmp	r3, #0
 800afee:	f280 80db 	bge.w	800b1a8 <_dtoa_r+0x658>
 800aff2:	9b02      	ldr	r3, [sp, #8]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	f300 80d7 	bgt.w	800b1a8 <_dtoa_r+0x658>
 800affa:	f040 8274 	bne.w	800b4e6 <_dtoa_r+0x996>
 800affe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b002:	2200      	movs	r2, #0
 800b004:	4b40      	ldr	r3, [pc, #256]	; (800b108 <_dtoa_r+0x5b8>)
 800b006:	f7f5 fad3 	bl	80005b0 <__aeabi_dmul>
 800b00a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b00e:	f7f5 fd55 	bl	8000abc <__aeabi_dcmpge>
 800b012:	9c02      	ldr	r4, [sp, #8]
 800b014:	4626      	mov	r6, r4
 800b016:	2800      	cmp	r0, #0
 800b018:	f040 824a 	bne.w	800b4b0 <_dtoa_r+0x960>
 800b01c:	2331      	movs	r3, #49	; 0x31
 800b01e:	9f08      	ldr	r7, [sp, #32]
 800b020:	f109 0901 	add.w	r9, r9, #1
 800b024:	f807 3b01 	strb.w	r3, [r7], #1
 800b028:	e246      	b.n	800b4b8 <_dtoa_r+0x968>
 800b02a:	07e2      	lsls	r2, r4, #31
 800b02c:	d505      	bpl.n	800b03a <_dtoa_r+0x4ea>
 800b02e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b032:	f7f5 fabd 	bl	80005b0 <__aeabi_dmul>
 800b036:	2301      	movs	r3, #1
 800b038:	3701      	adds	r7, #1
 800b03a:	1064      	asrs	r4, r4, #1
 800b03c:	3608      	adds	r6, #8
 800b03e:	e76d      	b.n	800af1c <_dtoa_r+0x3cc>
 800b040:	2702      	movs	r7, #2
 800b042:	e770      	b.n	800af26 <_dtoa_r+0x3d6>
 800b044:	46c8      	mov	r8, r9
 800b046:	9c02      	ldr	r4, [sp, #8]
 800b048:	e78f      	b.n	800af6a <_dtoa_r+0x41a>
 800b04a:	9908      	ldr	r1, [sp, #32]
 800b04c:	4b29      	ldr	r3, [pc, #164]	; (800b0f4 <_dtoa_r+0x5a4>)
 800b04e:	4421      	add	r1, r4
 800b050:	9112      	str	r1, [sp, #72]	; 0x48
 800b052:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b054:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b058:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b05c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b060:	2900      	cmp	r1, #0
 800b062:	d055      	beq.n	800b110 <_dtoa_r+0x5c0>
 800b064:	2000      	movs	r0, #0
 800b066:	4929      	ldr	r1, [pc, #164]	; (800b10c <_dtoa_r+0x5bc>)
 800b068:	f7f5 fbcc 	bl	8000804 <__aeabi_ddiv>
 800b06c:	463b      	mov	r3, r7
 800b06e:	4632      	mov	r2, r6
 800b070:	f7f5 f8e6 	bl	8000240 <__aeabi_dsub>
 800b074:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b078:	9f08      	ldr	r7, [sp, #32]
 800b07a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b07e:	f7f5 fd47 	bl	8000b10 <__aeabi_d2iz>
 800b082:	4604      	mov	r4, r0
 800b084:	f7f5 fa2a 	bl	80004dc <__aeabi_i2d>
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b090:	f7f5 f8d6 	bl	8000240 <__aeabi_dsub>
 800b094:	4602      	mov	r2, r0
 800b096:	460b      	mov	r3, r1
 800b098:	3430      	adds	r4, #48	; 0x30
 800b09a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b09e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0a2:	f807 4b01 	strb.w	r4, [r7], #1
 800b0a6:	f7f5 fcf5 	bl	8000a94 <__aeabi_dcmplt>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	d174      	bne.n	800b198 <_dtoa_r+0x648>
 800b0ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	4911      	ldr	r1, [pc, #68]	; (800b0fc <_dtoa_r+0x5ac>)
 800b0b6:	f7f5 f8c3 	bl	8000240 <__aeabi_dsub>
 800b0ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b0be:	f7f5 fce9 	bl	8000a94 <__aeabi_dcmplt>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	f040 80b6 	bne.w	800b234 <_dtoa_r+0x6e4>
 800b0c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b0ca:	429f      	cmp	r7, r3
 800b0cc:	f43f af7a 	beq.w	800afc4 <_dtoa_r+0x474>
 800b0d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	4b0a      	ldr	r3, [pc, #40]	; (800b100 <_dtoa_r+0x5b0>)
 800b0d8:	f7f5 fa6a 	bl	80005b0 <__aeabi_dmul>
 800b0dc:	2200      	movs	r2, #0
 800b0de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b0e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0e6:	4b06      	ldr	r3, [pc, #24]	; (800b100 <_dtoa_r+0x5b0>)
 800b0e8:	f7f5 fa62 	bl	80005b0 <__aeabi_dmul>
 800b0ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0f0:	e7c3      	b.n	800b07a <_dtoa_r+0x52a>
 800b0f2:	bf00      	nop
 800b0f4:	0801aa70 	.word	0x0801aa70
 800b0f8:	0801aa48 	.word	0x0801aa48
 800b0fc:	3ff00000 	.word	0x3ff00000
 800b100:	40240000 	.word	0x40240000
 800b104:	401c0000 	.word	0x401c0000
 800b108:	40140000 	.word	0x40140000
 800b10c:	3fe00000 	.word	0x3fe00000
 800b110:	4630      	mov	r0, r6
 800b112:	4639      	mov	r1, r7
 800b114:	f7f5 fa4c 	bl	80005b0 <__aeabi_dmul>
 800b118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b11a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b11e:	9c08      	ldr	r4, [sp, #32]
 800b120:	9314      	str	r3, [sp, #80]	; 0x50
 800b122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b126:	f7f5 fcf3 	bl	8000b10 <__aeabi_d2iz>
 800b12a:	9015      	str	r0, [sp, #84]	; 0x54
 800b12c:	f7f5 f9d6 	bl	80004dc <__aeabi_i2d>
 800b130:	4602      	mov	r2, r0
 800b132:	460b      	mov	r3, r1
 800b134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b138:	f7f5 f882 	bl	8000240 <__aeabi_dsub>
 800b13c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b13e:	4606      	mov	r6, r0
 800b140:	3330      	adds	r3, #48	; 0x30
 800b142:	f804 3b01 	strb.w	r3, [r4], #1
 800b146:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b148:	460f      	mov	r7, r1
 800b14a:	429c      	cmp	r4, r3
 800b14c:	f04f 0200 	mov.w	r2, #0
 800b150:	d124      	bne.n	800b19c <_dtoa_r+0x64c>
 800b152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b156:	4bb3      	ldr	r3, [pc, #716]	; (800b424 <_dtoa_r+0x8d4>)
 800b158:	f7f5 f874 	bl	8000244 <__adddf3>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	4630      	mov	r0, r6
 800b162:	4639      	mov	r1, r7
 800b164:	f7f5 fcb4 	bl	8000ad0 <__aeabi_dcmpgt>
 800b168:	2800      	cmp	r0, #0
 800b16a:	d162      	bne.n	800b232 <_dtoa_r+0x6e2>
 800b16c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b170:	2000      	movs	r0, #0
 800b172:	49ac      	ldr	r1, [pc, #688]	; (800b424 <_dtoa_r+0x8d4>)
 800b174:	f7f5 f864 	bl	8000240 <__aeabi_dsub>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4630      	mov	r0, r6
 800b17e:	4639      	mov	r1, r7
 800b180:	f7f5 fc88 	bl	8000a94 <__aeabi_dcmplt>
 800b184:	2800      	cmp	r0, #0
 800b186:	f43f af1d 	beq.w	800afc4 <_dtoa_r+0x474>
 800b18a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b18c:	1e7b      	subs	r3, r7, #1
 800b18e:	9314      	str	r3, [sp, #80]	; 0x50
 800b190:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b194:	2b30      	cmp	r3, #48	; 0x30
 800b196:	d0f8      	beq.n	800b18a <_dtoa_r+0x63a>
 800b198:	46c1      	mov	r9, r8
 800b19a:	e03a      	b.n	800b212 <_dtoa_r+0x6c2>
 800b19c:	4ba2      	ldr	r3, [pc, #648]	; (800b428 <_dtoa_r+0x8d8>)
 800b19e:	f7f5 fa07 	bl	80005b0 <__aeabi_dmul>
 800b1a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1a6:	e7bc      	b.n	800b122 <_dtoa_r+0x5d2>
 800b1a8:	9f08      	ldr	r7, [sp, #32]
 800b1aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1b2:	f7f5 fb27 	bl	8000804 <__aeabi_ddiv>
 800b1b6:	f7f5 fcab 	bl	8000b10 <__aeabi_d2iz>
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	f7f5 f98e 	bl	80004dc <__aeabi_i2d>
 800b1c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1c4:	f7f5 f9f4 	bl	80005b0 <__aeabi_dmul>
 800b1c8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1d4:	f7f5 f834 	bl	8000240 <__aeabi_dsub>
 800b1d8:	f807 6b01 	strb.w	r6, [r7], #1
 800b1dc:	9e08      	ldr	r6, [sp, #32]
 800b1de:	9b02      	ldr	r3, [sp, #8]
 800b1e0:	1bbe      	subs	r6, r7, r6
 800b1e2:	42b3      	cmp	r3, r6
 800b1e4:	d13a      	bne.n	800b25c <_dtoa_r+0x70c>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	f7f5 f82b 	bl	8000244 <__adddf3>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b1fa:	f7f5 fc69 	bl	8000ad0 <__aeabi_dcmpgt>
 800b1fe:	bb58      	cbnz	r0, 800b258 <_dtoa_r+0x708>
 800b200:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b208:	f7f5 fc3a 	bl	8000a80 <__aeabi_dcmpeq>
 800b20c:	b108      	cbz	r0, 800b212 <_dtoa_r+0x6c2>
 800b20e:	07e1      	lsls	r1, r4, #31
 800b210:	d422      	bmi.n	800b258 <_dtoa_r+0x708>
 800b212:	4628      	mov	r0, r5
 800b214:	4651      	mov	r1, sl
 800b216:	f000 ff63 	bl	800c0e0 <_Bfree>
 800b21a:	2300      	movs	r3, #0
 800b21c:	703b      	strb	r3, [r7, #0]
 800b21e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b220:	f109 0001 	add.w	r0, r9, #1
 800b224:	6018      	str	r0, [r3, #0]
 800b226:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f43f acdf 	beq.w	800abec <_dtoa_r+0x9c>
 800b22e:	601f      	str	r7, [r3, #0]
 800b230:	e4dc      	b.n	800abec <_dtoa_r+0x9c>
 800b232:	4627      	mov	r7, r4
 800b234:	463b      	mov	r3, r7
 800b236:	461f      	mov	r7, r3
 800b238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b23c:	2a39      	cmp	r2, #57	; 0x39
 800b23e:	d107      	bne.n	800b250 <_dtoa_r+0x700>
 800b240:	9a08      	ldr	r2, [sp, #32]
 800b242:	429a      	cmp	r2, r3
 800b244:	d1f7      	bne.n	800b236 <_dtoa_r+0x6e6>
 800b246:	2230      	movs	r2, #48	; 0x30
 800b248:	9908      	ldr	r1, [sp, #32]
 800b24a:	f108 0801 	add.w	r8, r8, #1
 800b24e:	700a      	strb	r2, [r1, #0]
 800b250:	781a      	ldrb	r2, [r3, #0]
 800b252:	3201      	adds	r2, #1
 800b254:	701a      	strb	r2, [r3, #0]
 800b256:	e79f      	b.n	800b198 <_dtoa_r+0x648>
 800b258:	46c8      	mov	r8, r9
 800b25a:	e7eb      	b.n	800b234 <_dtoa_r+0x6e4>
 800b25c:	2200      	movs	r2, #0
 800b25e:	4b72      	ldr	r3, [pc, #456]	; (800b428 <_dtoa_r+0x8d8>)
 800b260:	f7f5 f9a6 	bl	80005b0 <__aeabi_dmul>
 800b264:	4602      	mov	r2, r0
 800b266:	460b      	mov	r3, r1
 800b268:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b26c:	2200      	movs	r2, #0
 800b26e:	2300      	movs	r3, #0
 800b270:	f7f5 fc06 	bl	8000a80 <__aeabi_dcmpeq>
 800b274:	2800      	cmp	r0, #0
 800b276:	d098      	beq.n	800b1aa <_dtoa_r+0x65a>
 800b278:	e7cb      	b.n	800b212 <_dtoa_r+0x6c2>
 800b27a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b27c:	2a00      	cmp	r2, #0
 800b27e:	f000 80cd 	beq.w	800b41c <_dtoa_r+0x8cc>
 800b282:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b284:	2a01      	cmp	r2, #1
 800b286:	f300 80af 	bgt.w	800b3e8 <_dtoa_r+0x898>
 800b28a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b28c:	2a00      	cmp	r2, #0
 800b28e:	f000 80a7 	beq.w	800b3e0 <_dtoa_r+0x890>
 800b292:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b296:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b298:	9f06      	ldr	r7, [sp, #24]
 800b29a:	9a06      	ldr	r2, [sp, #24]
 800b29c:	2101      	movs	r1, #1
 800b29e:	441a      	add	r2, r3
 800b2a0:	9206      	str	r2, [sp, #24]
 800b2a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	441a      	add	r2, r3
 800b2a8:	9209      	str	r2, [sp, #36]	; 0x24
 800b2aa:	f001 f81d 	bl	800c2e8 <__i2b>
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	2f00      	cmp	r7, #0
 800b2b2:	dd0c      	ble.n	800b2ce <_dtoa_r+0x77e>
 800b2b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	dd09      	ble.n	800b2ce <_dtoa_r+0x77e>
 800b2ba:	42bb      	cmp	r3, r7
 800b2bc:	bfa8      	it	ge
 800b2be:	463b      	movge	r3, r7
 800b2c0:	9a06      	ldr	r2, [sp, #24]
 800b2c2:	1aff      	subs	r7, r7, r3
 800b2c4:	1ad2      	subs	r2, r2, r3
 800b2c6:	9206      	str	r2, [sp, #24]
 800b2c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2ca:	1ad3      	subs	r3, r2, r3
 800b2cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2d0:	b1f3      	cbz	r3, 800b310 <_dtoa_r+0x7c0>
 800b2d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f000 80a9 	beq.w	800b42c <_dtoa_r+0x8dc>
 800b2da:	2c00      	cmp	r4, #0
 800b2dc:	dd10      	ble.n	800b300 <_dtoa_r+0x7b0>
 800b2de:	4631      	mov	r1, r6
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	f001 f8ba 	bl	800c45c <__pow5mult>
 800b2e8:	4652      	mov	r2, sl
 800b2ea:	4601      	mov	r1, r0
 800b2ec:	4606      	mov	r6, r0
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f001 f810 	bl	800c314 <__multiply>
 800b2f4:	4680      	mov	r8, r0
 800b2f6:	4651      	mov	r1, sl
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	f000 fef1 	bl	800c0e0 <_Bfree>
 800b2fe:	46c2      	mov	sl, r8
 800b300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b302:	1b1a      	subs	r2, r3, r4
 800b304:	d004      	beq.n	800b310 <_dtoa_r+0x7c0>
 800b306:	4651      	mov	r1, sl
 800b308:	4628      	mov	r0, r5
 800b30a:	f001 f8a7 	bl	800c45c <__pow5mult>
 800b30e:	4682      	mov	sl, r0
 800b310:	2101      	movs	r1, #1
 800b312:	4628      	mov	r0, r5
 800b314:	f000 ffe8 	bl	800c2e8 <__i2b>
 800b318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b31a:	4604      	mov	r4, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f340 8087 	ble.w	800b430 <_dtoa_r+0x8e0>
 800b322:	461a      	mov	r2, r3
 800b324:	4601      	mov	r1, r0
 800b326:	4628      	mov	r0, r5
 800b328:	f001 f898 	bl	800c45c <__pow5mult>
 800b32c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b32e:	4604      	mov	r4, r0
 800b330:	2b01      	cmp	r3, #1
 800b332:	f340 8080 	ble.w	800b436 <_dtoa_r+0x8e6>
 800b336:	f04f 0800 	mov.w	r8, #0
 800b33a:	6923      	ldr	r3, [r4, #16]
 800b33c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b340:	6918      	ldr	r0, [r3, #16]
 800b342:	f000 ff83 	bl	800c24c <__hi0bits>
 800b346:	f1c0 0020 	rsb	r0, r0, #32
 800b34a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b34c:	4418      	add	r0, r3
 800b34e:	f010 001f 	ands.w	r0, r0, #31
 800b352:	f000 8092 	beq.w	800b47a <_dtoa_r+0x92a>
 800b356:	f1c0 0320 	rsb	r3, r0, #32
 800b35a:	2b04      	cmp	r3, #4
 800b35c:	f340 808a 	ble.w	800b474 <_dtoa_r+0x924>
 800b360:	f1c0 001c 	rsb	r0, r0, #28
 800b364:	9b06      	ldr	r3, [sp, #24]
 800b366:	4407      	add	r7, r0
 800b368:	4403      	add	r3, r0
 800b36a:	9306      	str	r3, [sp, #24]
 800b36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b36e:	4403      	add	r3, r0
 800b370:	9309      	str	r3, [sp, #36]	; 0x24
 800b372:	9b06      	ldr	r3, [sp, #24]
 800b374:	2b00      	cmp	r3, #0
 800b376:	dd05      	ble.n	800b384 <_dtoa_r+0x834>
 800b378:	4651      	mov	r1, sl
 800b37a:	461a      	mov	r2, r3
 800b37c:	4628      	mov	r0, r5
 800b37e:	f001 f8c7 	bl	800c510 <__lshift>
 800b382:	4682      	mov	sl, r0
 800b384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b386:	2b00      	cmp	r3, #0
 800b388:	dd05      	ble.n	800b396 <_dtoa_r+0x846>
 800b38a:	4621      	mov	r1, r4
 800b38c:	461a      	mov	r2, r3
 800b38e:	4628      	mov	r0, r5
 800b390:	f001 f8be 	bl	800c510 <__lshift>
 800b394:	4604      	mov	r4, r0
 800b396:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d070      	beq.n	800b47e <_dtoa_r+0x92e>
 800b39c:	4621      	mov	r1, r4
 800b39e:	4650      	mov	r0, sl
 800b3a0:	f001 f922 	bl	800c5e8 <__mcmp>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	da6a      	bge.n	800b47e <_dtoa_r+0x92e>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	4651      	mov	r1, sl
 800b3ac:	220a      	movs	r2, #10
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	f000 feb8 	bl	800c124 <__multadd>
 800b3b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3b6:	4682      	mov	sl, r0
 800b3b8:	f109 39ff 	add.w	r9, r9, #4294967295
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f000 8193 	beq.w	800b6e8 <_dtoa_r+0xb98>
 800b3c2:	4631      	mov	r1, r6
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	220a      	movs	r2, #10
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f000 feab 	bl	800c124 <__multadd>
 800b3ce:	f1bb 0f00 	cmp.w	fp, #0
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	f300 8093 	bgt.w	800b4fe <_dtoa_r+0x9ae>
 800b3d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	dc57      	bgt.n	800b48e <_dtoa_r+0x93e>
 800b3de:	e08e      	b.n	800b4fe <_dtoa_r+0x9ae>
 800b3e0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b3e2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b3e6:	e756      	b.n	800b296 <_dtoa_r+0x746>
 800b3e8:	9b02      	ldr	r3, [sp, #8]
 800b3ea:	1e5c      	subs	r4, r3, #1
 800b3ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ee:	42a3      	cmp	r3, r4
 800b3f0:	bfb7      	itett	lt
 800b3f2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b3f4:	1b1c      	subge	r4, r3, r4
 800b3f6:	1ae2      	sublt	r2, r4, r3
 800b3f8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b3fa:	bfbe      	ittt	lt
 800b3fc:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b3fe:	189b      	addlt	r3, r3, r2
 800b400:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b402:	9b02      	ldr	r3, [sp, #8]
 800b404:	bfb8      	it	lt
 800b406:	2400      	movlt	r4, #0
 800b408:	2b00      	cmp	r3, #0
 800b40a:	bfbb      	ittet	lt
 800b40c:	9b06      	ldrlt	r3, [sp, #24]
 800b40e:	9a02      	ldrlt	r2, [sp, #8]
 800b410:	9f06      	ldrge	r7, [sp, #24]
 800b412:	1a9f      	sublt	r7, r3, r2
 800b414:	bfac      	ite	ge
 800b416:	9b02      	ldrge	r3, [sp, #8]
 800b418:	2300      	movlt	r3, #0
 800b41a:	e73e      	b.n	800b29a <_dtoa_r+0x74a>
 800b41c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b41e:	9f06      	ldr	r7, [sp, #24]
 800b420:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b422:	e745      	b.n	800b2b0 <_dtoa_r+0x760>
 800b424:	3fe00000 	.word	0x3fe00000
 800b428:	40240000 	.word	0x40240000
 800b42c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b42e:	e76a      	b.n	800b306 <_dtoa_r+0x7b6>
 800b430:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b432:	2b01      	cmp	r3, #1
 800b434:	dc19      	bgt.n	800b46a <_dtoa_r+0x91a>
 800b436:	9b04      	ldr	r3, [sp, #16]
 800b438:	b9bb      	cbnz	r3, 800b46a <_dtoa_r+0x91a>
 800b43a:	9b05      	ldr	r3, [sp, #20]
 800b43c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b440:	b99b      	cbnz	r3, 800b46a <_dtoa_r+0x91a>
 800b442:	9b05      	ldr	r3, [sp, #20]
 800b444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b448:	0d1b      	lsrs	r3, r3, #20
 800b44a:	051b      	lsls	r3, r3, #20
 800b44c:	b183      	cbz	r3, 800b470 <_dtoa_r+0x920>
 800b44e:	f04f 0801 	mov.w	r8, #1
 800b452:	9b06      	ldr	r3, [sp, #24]
 800b454:	3301      	adds	r3, #1
 800b456:	9306      	str	r3, [sp, #24]
 800b458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b45a:	3301      	adds	r3, #1
 800b45c:	9309      	str	r3, [sp, #36]	; 0x24
 800b45e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b460:	2b00      	cmp	r3, #0
 800b462:	f47f af6a 	bne.w	800b33a <_dtoa_r+0x7ea>
 800b466:	2001      	movs	r0, #1
 800b468:	e76f      	b.n	800b34a <_dtoa_r+0x7fa>
 800b46a:	f04f 0800 	mov.w	r8, #0
 800b46e:	e7f6      	b.n	800b45e <_dtoa_r+0x90e>
 800b470:	4698      	mov	r8, r3
 800b472:	e7f4      	b.n	800b45e <_dtoa_r+0x90e>
 800b474:	f43f af7d 	beq.w	800b372 <_dtoa_r+0x822>
 800b478:	4618      	mov	r0, r3
 800b47a:	301c      	adds	r0, #28
 800b47c:	e772      	b.n	800b364 <_dtoa_r+0x814>
 800b47e:	9b02      	ldr	r3, [sp, #8]
 800b480:	2b00      	cmp	r3, #0
 800b482:	dc36      	bgt.n	800b4f2 <_dtoa_r+0x9a2>
 800b484:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b486:	2b02      	cmp	r3, #2
 800b488:	dd33      	ble.n	800b4f2 <_dtoa_r+0x9a2>
 800b48a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b48e:	f1bb 0f00 	cmp.w	fp, #0
 800b492:	d10d      	bne.n	800b4b0 <_dtoa_r+0x960>
 800b494:	4621      	mov	r1, r4
 800b496:	465b      	mov	r3, fp
 800b498:	2205      	movs	r2, #5
 800b49a:	4628      	mov	r0, r5
 800b49c:	f000 fe42 	bl	800c124 <__multadd>
 800b4a0:	4601      	mov	r1, r0
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	4650      	mov	r0, sl
 800b4a6:	f001 f89f 	bl	800c5e8 <__mcmp>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	f73f adb6 	bgt.w	800b01c <_dtoa_r+0x4cc>
 800b4b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b4b2:	9f08      	ldr	r7, [sp, #32]
 800b4b4:	ea6f 0903 	mvn.w	r9, r3
 800b4b8:	f04f 0800 	mov.w	r8, #0
 800b4bc:	4621      	mov	r1, r4
 800b4be:	4628      	mov	r0, r5
 800b4c0:	f000 fe0e 	bl	800c0e0 <_Bfree>
 800b4c4:	2e00      	cmp	r6, #0
 800b4c6:	f43f aea4 	beq.w	800b212 <_dtoa_r+0x6c2>
 800b4ca:	f1b8 0f00 	cmp.w	r8, #0
 800b4ce:	d005      	beq.n	800b4dc <_dtoa_r+0x98c>
 800b4d0:	45b0      	cmp	r8, r6
 800b4d2:	d003      	beq.n	800b4dc <_dtoa_r+0x98c>
 800b4d4:	4641      	mov	r1, r8
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f000 fe02 	bl	800c0e0 <_Bfree>
 800b4dc:	4631      	mov	r1, r6
 800b4de:	4628      	mov	r0, r5
 800b4e0:	f000 fdfe 	bl	800c0e0 <_Bfree>
 800b4e4:	e695      	b.n	800b212 <_dtoa_r+0x6c2>
 800b4e6:	2400      	movs	r4, #0
 800b4e8:	4626      	mov	r6, r4
 800b4ea:	e7e1      	b.n	800b4b0 <_dtoa_r+0x960>
 800b4ec:	46c1      	mov	r9, r8
 800b4ee:	4626      	mov	r6, r4
 800b4f0:	e594      	b.n	800b01c <_dtoa_r+0x4cc>
 800b4f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4f4:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f000 80fc 	beq.w	800b6f6 <_dtoa_r+0xba6>
 800b4fe:	2f00      	cmp	r7, #0
 800b500:	dd05      	ble.n	800b50e <_dtoa_r+0x9be>
 800b502:	4631      	mov	r1, r6
 800b504:	463a      	mov	r2, r7
 800b506:	4628      	mov	r0, r5
 800b508:	f001 f802 	bl	800c510 <__lshift>
 800b50c:	4606      	mov	r6, r0
 800b50e:	f1b8 0f00 	cmp.w	r8, #0
 800b512:	d05c      	beq.n	800b5ce <_dtoa_r+0xa7e>
 800b514:	4628      	mov	r0, r5
 800b516:	6871      	ldr	r1, [r6, #4]
 800b518:	f000 fda2 	bl	800c060 <_Balloc>
 800b51c:	4607      	mov	r7, r0
 800b51e:	b928      	cbnz	r0, 800b52c <_dtoa_r+0x9dc>
 800b520:	4602      	mov	r2, r0
 800b522:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b526:	4b7e      	ldr	r3, [pc, #504]	; (800b720 <_dtoa_r+0xbd0>)
 800b528:	f7ff bb26 	b.w	800ab78 <_dtoa_r+0x28>
 800b52c:	6932      	ldr	r2, [r6, #16]
 800b52e:	f106 010c 	add.w	r1, r6, #12
 800b532:	3202      	adds	r2, #2
 800b534:	0092      	lsls	r2, r2, #2
 800b536:	300c      	adds	r0, #12
 800b538:	f000 fd84 	bl	800c044 <memcpy>
 800b53c:	2201      	movs	r2, #1
 800b53e:	4639      	mov	r1, r7
 800b540:	4628      	mov	r0, r5
 800b542:	f000 ffe5 	bl	800c510 <__lshift>
 800b546:	46b0      	mov	r8, r6
 800b548:	4606      	mov	r6, r0
 800b54a:	9b08      	ldr	r3, [sp, #32]
 800b54c:	3301      	adds	r3, #1
 800b54e:	9302      	str	r3, [sp, #8]
 800b550:	9b08      	ldr	r3, [sp, #32]
 800b552:	445b      	add	r3, fp
 800b554:	930a      	str	r3, [sp, #40]	; 0x28
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	f003 0301 	and.w	r3, r3, #1
 800b55c:	9309      	str	r3, [sp, #36]	; 0x24
 800b55e:	9b02      	ldr	r3, [sp, #8]
 800b560:	4621      	mov	r1, r4
 800b562:	4650      	mov	r0, sl
 800b564:	f103 3bff 	add.w	fp, r3, #4294967295
 800b568:	f7ff fa64 	bl	800aa34 <quorem>
 800b56c:	4603      	mov	r3, r0
 800b56e:	4641      	mov	r1, r8
 800b570:	3330      	adds	r3, #48	; 0x30
 800b572:	9004      	str	r0, [sp, #16]
 800b574:	4650      	mov	r0, sl
 800b576:	930b      	str	r3, [sp, #44]	; 0x2c
 800b578:	f001 f836 	bl	800c5e8 <__mcmp>
 800b57c:	4632      	mov	r2, r6
 800b57e:	9006      	str	r0, [sp, #24]
 800b580:	4621      	mov	r1, r4
 800b582:	4628      	mov	r0, r5
 800b584:	f001 f84c 	bl	800c620 <__mdiff>
 800b588:	68c2      	ldr	r2, [r0, #12]
 800b58a:	4607      	mov	r7, r0
 800b58c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b58e:	bb02      	cbnz	r2, 800b5d2 <_dtoa_r+0xa82>
 800b590:	4601      	mov	r1, r0
 800b592:	4650      	mov	r0, sl
 800b594:	f001 f828 	bl	800c5e8 <__mcmp>
 800b598:	4602      	mov	r2, r0
 800b59a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b59c:	4639      	mov	r1, r7
 800b59e:	4628      	mov	r0, r5
 800b5a0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b5a4:	f000 fd9c 	bl	800c0e0 <_Bfree>
 800b5a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b5aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5ac:	9f02      	ldr	r7, [sp, #8]
 800b5ae:	ea43 0102 	orr.w	r1, r3, r2
 800b5b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5b4:	430b      	orrs	r3, r1
 800b5b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5b8:	d10d      	bne.n	800b5d6 <_dtoa_r+0xa86>
 800b5ba:	2b39      	cmp	r3, #57	; 0x39
 800b5bc:	d027      	beq.n	800b60e <_dtoa_r+0xabe>
 800b5be:	9a06      	ldr	r2, [sp, #24]
 800b5c0:	2a00      	cmp	r2, #0
 800b5c2:	dd01      	ble.n	800b5c8 <_dtoa_r+0xa78>
 800b5c4:	9b04      	ldr	r3, [sp, #16]
 800b5c6:	3331      	adds	r3, #49	; 0x31
 800b5c8:	f88b 3000 	strb.w	r3, [fp]
 800b5cc:	e776      	b.n	800b4bc <_dtoa_r+0x96c>
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	e7b9      	b.n	800b546 <_dtoa_r+0x9f6>
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	e7e2      	b.n	800b59c <_dtoa_r+0xa4c>
 800b5d6:	9906      	ldr	r1, [sp, #24]
 800b5d8:	2900      	cmp	r1, #0
 800b5da:	db04      	blt.n	800b5e6 <_dtoa_r+0xa96>
 800b5dc:	9822      	ldr	r0, [sp, #136]	; 0x88
 800b5de:	4301      	orrs	r1, r0
 800b5e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5e2:	4301      	orrs	r1, r0
 800b5e4:	d120      	bne.n	800b628 <_dtoa_r+0xad8>
 800b5e6:	2a00      	cmp	r2, #0
 800b5e8:	ddee      	ble.n	800b5c8 <_dtoa_r+0xa78>
 800b5ea:	4651      	mov	r1, sl
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	9302      	str	r3, [sp, #8]
 800b5f2:	f000 ff8d 	bl	800c510 <__lshift>
 800b5f6:	4621      	mov	r1, r4
 800b5f8:	4682      	mov	sl, r0
 800b5fa:	f000 fff5 	bl	800c5e8 <__mcmp>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	9b02      	ldr	r3, [sp, #8]
 800b602:	dc02      	bgt.n	800b60a <_dtoa_r+0xaba>
 800b604:	d1e0      	bne.n	800b5c8 <_dtoa_r+0xa78>
 800b606:	07da      	lsls	r2, r3, #31
 800b608:	d5de      	bpl.n	800b5c8 <_dtoa_r+0xa78>
 800b60a:	2b39      	cmp	r3, #57	; 0x39
 800b60c:	d1da      	bne.n	800b5c4 <_dtoa_r+0xa74>
 800b60e:	2339      	movs	r3, #57	; 0x39
 800b610:	f88b 3000 	strb.w	r3, [fp]
 800b614:	463b      	mov	r3, r7
 800b616:	461f      	mov	r7, r3
 800b618:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b61c:	3b01      	subs	r3, #1
 800b61e:	2a39      	cmp	r2, #57	; 0x39
 800b620:	d050      	beq.n	800b6c4 <_dtoa_r+0xb74>
 800b622:	3201      	adds	r2, #1
 800b624:	701a      	strb	r2, [r3, #0]
 800b626:	e749      	b.n	800b4bc <_dtoa_r+0x96c>
 800b628:	2a00      	cmp	r2, #0
 800b62a:	dd03      	ble.n	800b634 <_dtoa_r+0xae4>
 800b62c:	2b39      	cmp	r3, #57	; 0x39
 800b62e:	d0ee      	beq.n	800b60e <_dtoa_r+0xabe>
 800b630:	3301      	adds	r3, #1
 800b632:	e7c9      	b.n	800b5c8 <_dtoa_r+0xa78>
 800b634:	9a02      	ldr	r2, [sp, #8]
 800b636:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b638:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b63c:	428a      	cmp	r2, r1
 800b63e:	d02a      	beq.n	800b696 <_dtoa_r+0xb46>
 800b640:	4651      	mov	r1, sl
 800b642:	2300      	movs	r3, #0
 800b644:	220a      	movs	r2, #10
 800b646:	4628      	mov	r0, r5
 800b648:	f000 fd6c 	bl	800c124 <__multadd>
 800b64c:	45b0      	cmp	r8, r6
 800b64e:	4682      	mov	sl, r0
 800b650:	f04f 0300 	mov.w	r3, #0
 800b654:	f04f 020a 	mov.w	r2, #10
 800b658:	4641      	mov	r1, r8
 800b65a:	4628      	mov	r0, r5
 800b65c:	d107      	bne.n	800b66e <_dtoa_r+0xb1e>
 800b65e:	f000 fd61 	bl	800c124 <__multadd>
 800b662:	4680      	mov	r8, r0
 800b664:	4606      	mov	r6, r0
 800b666:	9b02      	ldr	r3, [sp, #8]
 800b668:	3301      	adds	r3, #1
 800b66a:	9302      	str	r3, [sp, #8]
 800b66c:	e777      	b.n	800b55e <_dtoa_r+0xa0e>
 800b66e:	f000 fd59 	bl	800c124 <__multadd>
 800b672:	4631      	mov	r1, r6
 800b674:	4680      	mov	r8, r0
 800b676:	2300      	movs	r3, #0
 800b678:	220a      	movs	r2, #10
 800b67a:	4628      	mov	r0, r5
 800b67c:	f000 fd52 	bl	800c124 <__multadd>
 800b680:	4606      	mov	r6, r0
 800b682:	e7f0      	b.n	800b666 <_dtoa_r+0xb16>
 800b684:	f1bb 0f00 	cmp.w	fp, #0
 800b688:	bfcc      	ite	gt
 800b68a:	465f      	movgt	r7, fp
 800b68c:	2701      	movle	r7, #1
 800b68e:	f04f 0800 	mov.w	r8, #0
 800b692:	9a08      	ldr	r2, [sp, #32]
 800b694:	4417      	add	r7, r2
 800b696:	4651      	mov	r1, sl
 800b698:	2201      	movs	r2, #1
 800b69a:	4628      	mov	r0, r5
 800b69c:	9302      	str	r3, [sp, #8]
 800b69e:	f000 ff37 	bl	800c510 <__lshift>
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	4682      	mov	sl, r0
 800b6a6:	f000 ff9f 	bl	800c5e8 <__mcmp>
 800b6aa:	2800      	cmp	r0, #0
 800b6ac:	dcb2      	bgt.n	800b614 <_dtoa_r+0xac4>
 800b6ae:	d102      	bne.n	800b6b6 <_dtoa_r+0xb66>
 800b6b0:	9b02      	ldr	r3, [sp, #8]
 800b6b2:	07db      	lsls	r3, r3, #31
 800b6b4:	d4ae      	bmi.n	800b614 <_dtoa_r+0xac4>
 800b6b6:	463b      	mov	r3, r7
 800b6b8:	461f      	mov	r7, r3
 800b6ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6be:	2a30      	cmp	r2, #48	; 0x30
 800b6c0:	d0fa      	beq.n	800b6b8 <_dtoa_r+0xb68>
 800b6c2:	e6fb      	b.n	800b4bc <_dtoa_r+0x96c>
 800b6c4:	9a08      	ldr	r2, [sp, #32]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d1a5      	bne.n	800b616 <_dtoa_r+0xac6>
 800b6ca:	2331      	movs	r3, #49	; 0x31
 800b6cc:	f109 0901 	add.w	r9, r9, #1
 800b6d0:	7013      	strb	r3, [r2, #0]
 800b6d2:	e6f3      	b.n	800b4bc <_dtoa_r+0x96c>
 800b6d4:	4b13      	ldr	r3, [pc, #76]	; (800b724 <_dtoa_r+0xbd4>)
 800b6d6:	f7ff baa7 	b.w	800ac28 <_dtoa_r+0xd8>
 800b6da:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	f47f aa80 	bne.w	800abe2 <_dtoa_r+0x92>
 800b6e2:	4b11      	ldr	r3, [pc, #68]	; (800b728 <_dtoa_r+0xbd8>)
 800b6e4:	f7ff baa0 	b.w	800ac28 <_dtoa_r+0xd8>
 800b6e8:	f1bb 0f00 	cmp.w	fp, #0
 800b6ec:	dc03      	bgt.n	800b6f6 <_dtoa_r+0xba6>
 800b6ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b6f0:	2b02      	cmp	r3, #2
 800b6f2:	f73f aecc 	bgt.w	800b48e <_dtoa_r+0x93e>
 800b6f6:	9f08      	ldr	r7, [sp, #32]
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	4650      	mov	r0, sl
 800b6fc:	f7ff f99a 	bl	800aa34 <quorem>
 800b700:	9a08      	ldr	r2, [sp, #32]
 800b702:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b706:	f807 3b01 	strb.w	r3, [r7], #1
 800b70a:	1aba      	subs	r2, r7, r2
 800b70c:	4593      	cmp	fp, r2
 800b70e:	ddb9      	ble.n	800b684 <_dtoa_r+0xb34>
 800b710:	4651      	mov	r1, sl
 800b712:	2300      	movs	r3, #0
 800b714:	220a      	movs	r2, #10
 800b716:	4628      	mov	r0, r5
 800b718:	f000 fd04 	bl	800c124 <__multadd>
 800b71c:	4682      	mov	sl, r0
 800b71e:	e7eb      	b.n	800b6f8 <_dtoa_r+0xba8>
 800b720:	0801a8f4 	.word	0x0801a8f4
 800b724:	0801a6fc 	.word	0x0801a6fc
 800b728:	0801a871 	.word	0x0801a871

0800b72c <std>:
 800b72c:	2300      	movs	r3, #0
 800b72e:	b510      	push	{r4, lr}
 800b730:	4604      	mov	r4, r0
 800b732:	e9c0 3300 	strd	r3, r3, [r0]
 800b736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b73a:	6083      	str	r3, [r0, #8]
 800b73c:	8181      	strh	r1, [r0, #12]
 800b73e:	6643      	str	r3, [r0, #100]	; 0x64
 800b740:	81c2      	strh	r2, [r0, #14]
 800b742:	6183      	str	r3, [r0, #24]
 800b744:	4619      	mov	r1, r3
 800b746:	2208      	movs	r2, #8
 800b748:	305c      	adds	r0, #92	; 0x5c
 800b74a:	f7fd fdcf 	bl	80092ec <memset>
 800b74e:	4b05      	ldr	r3, [pc, #20]	; (800b764 <std+0x38>)
 800b750:	6224      	str	r4, [r4, #32]
 800b752:	6263      	str	r3, [r4, #36]	; 0x24
 800b754:	4b04      	ldr	r3, [pc, #16]	; (800b768 <std+0x3c>)
 800b756:	62a3      	str	r3, [r4, #40]	; 0x28
 800b758:	4b04      	ldr	r3, [pc, #16]	; (800b76c <std+0x40>)
 800b75a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b75c:	4b04      	ldr	r3, [pc, #16]	; (800b770 <std+0x44>)
 800b75e:	6323      	str	r3, [r4, #48]	; 0x30
 800b760:	bd10      	pop	{r4, pc}
 800b762:	bf00      	nop
 800b764:	0800d0d5 	.word	0x0800d0d5
 800b768:	0800d0f7 	.word	0x0800d0f7
 800b76c:	0800d12f 	.word	0x0800d12f
 800b770:	0800d153 	.word	0x0800d153

0800b774 <_cleanup_r>:
 800b774:	4901      	ldr	r1, [pc, #4]	; (800b77c <_cleanup_r+0x8>)
 800b776:	f000 b8af 	b.w	800b8d8 <_fwalk_reent>
 800b77a:	bf00      	nop
 800b77c:	0800d4a9 	.word	0x0800d4a9

0800b780 <__sfmoreglue>:
 800b780:	b570      	push	{r4, r5, r6, lr}
 800b782:	2568      	movs	r5, #104	; 0x68
 800b784:	1e4a      	subs	r2, r1, #1
 800b786:	4355      	muls	r5, r2
 800b788:	460e      	mov	r6, r1
 800b78a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b78e:	f001 f979 	bl	800ca84 <_malloc_r>
 800b792:	4604      	mov	r4, r0
 800b794:	b140      	cbz	r0, 800b7a8 <__sfmoreglue+0x28>
 800b796:	2100      	movs	r1, #0
 800b798:	e9c0 1600 	strd	r1, r6, [r0]
 800b79c:	300c      	adds	r0, #12
 800b79e:	60a0      	str	r0, [r4, #8]
 800b7a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7a4:	f7fd fda2 	bl	80092ec <memset>
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	bd70      	pop	{r4, r5, r6, pc}

0800b7ac <__sfp_lock_acquire>:
 800b7ac:	4801      	ldr	r0, [pc, #4]	; (800b7b4 <__sfp_lock_acquire+0x8>)
 800b7ae:	f000 bc1e 	b.w	800bfee <__retarget_lock_acquire_recursive>
 800b7b2:	bf00      	nop
 800b7b4:	2000043c 	.word	0x2000043c

0800b7b8 <__sfp_lock_release>:
 800b7b8:	4801      	ldr	r0, [pc, #4]	; (800b7c0 <__sfp_lock_release+0x8>)
 800b7ba:	f000 bc19 	b.w	800bff0 <__retarget_lock_release_recursive>
 800b7be:	bf00      	nop
 800b7c0:	2000043c 	.word	0x2000043c

0800b7c4 <__sinit_lock_acquire>:
 800b7c4:	4801      	ldr	r0, [pc, #4]	; (800b7cc <__sinit_lock_acquire+0x8>)
 800b7c6:	f000 bc12 	b.w	800bfee <__retarget_lock_acquire_recursive>
 800b7ca:	bf00      	nop
 800b7cc:	20000437 	.word	0x20000437

0800b7d0 <__sinit_lock_release>:
 800b7d0:	4801      	ldr	r0, [pc, #4]	; (800b7d8 <__sinit_lock_release+0x8>)
 800b7d2:	f000 bc0d 	b.w	800bff0 <__retarget_lock_release_recursive>
 800b7d6:	bf00      	nop
 800b7d8:	20000437 	.word	0x20000437

0800b7dc <__sinit>:
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	4604      	mov	r4, r0
 800b7e0:	f7ff fff0 	bl	800b7c4 <__sinit_lock_acquire>
 800b7e4:	69a3      	ldr	r3, [r4, #24]
 800b7e6:	b11b      	cbz	r3, 800b7f0 <__sinit+0x14>
 800b7e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7ec:	f7ff bff0 	b.w	800b7d0 <__sinit_lock_release>
 800b7f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b7f4:	6523      	str	r3, [r4, #80]	; 0x50
 800b7f6:	4b13      	ldr	r3, [pc, #76]	; (800b844 <__sinit+0x68>)
 800b7f8:	4a13      	ldr	r2, [pc, #76]	; (800b848 <__sinit+0x6c>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	62a2      	str	r2, [r4, #40]	; 0x28
 800b7fe:	42a3      	cmp	r3, r4
 800b800:	bf08      	it	eq
 800b802:	2301      	moveq	r3, #1
 800b804:	4620      	mov	r0, r4
 800b806:	bf08      	it	eq
 800b808:	61a3      	streq	r3, [r4, #24]
 800b80a:	f000 f81f 	bl	800b84c <__sfp>
 800b80e:	6060      	str	r0, [r4, #4]
 800b810:	4620      	mov	r0, r4
 800b812:	f000 f81b 	bl	800b84c <__sfp>
 800b816:	60a0      	str	r0, [r4, #8]
 800b818:	4620      	mov	r0, r4
 800b81a:	f000 f817 	bl	800b84c <__sfp>
 800b81e:	2200      	movs	r2, #0
 800b820:	2104      	movs	r1, #4
 800b822:	60e0      	str	r0, [r4, #12]
 800b824:	6860      	ldr	r0, [r4, #4]
 800b826:	f7ff ff81 	bl	800b72c <std>
 800b82a:	2201      	movs	r2, #1
 800b82c:	2109      	movs	r1, #9
 800b82e:	68a0      	ldr	r0, [r4, #8]
 800b830:	f7ff ff7c 	bl	800b72c <std>
 800b834:	2202      	movs	r2, #2
 800b836:	2112      	movs	r1, #18
 800b838:	68e0      	ldr	r0, [r4, #12]
 800b83a:	f7ff ff77 	bl	800b72c <std>
 800b83e:	2301      	movs	r3, #1
 800b840:	61a3      	str	r3, [r4, #24]
 800b842:	e7d1      	b.n	800b7e8 <__sinit+0xc>
 800b844:	0801a6e8 	.word	0x0801a6e8
 800b848:	0800b775 	.word	0x0800b775

0800b84c <__sfp>:
 800b84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84e:	4607      	mov	r7, r0
 800b850:	f7ff ffac 	bl	800b7ac <__sfp_lock_acquire>
 800b854:	4b1e      	ldr	r3, [pc, #120]	; (800b8d0 <__sfp+0x84>)
 800b856:	681e      	ldr	r6, [r3, #0]
 800b858:	69b3      	ldr	r3, [r6, #24]
 800b85a:	b913      	cbnz	r3, 800b862 <__sfp+0x16>
 800b85c:	4630      	mov	r0, r6
 800b85e:	f7ff ffbd 	bl	800b7dc <__sinit>
 800b862:	3648      	adds	r6, #72	; 0x48
 800b864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b868:	3b01      	subs	r3, #1
 800b86a:	d503      	bpl.n	800b874 <__sfp+0x28>
 800b86c:	6833      	ldr	r3, [r6, #0]
 800b86e:	b30b      	cbz	r3, 800b8b4 <__sfp+0x68>
 800b870:	6836      	ldr	r6, [r6, #0]
 800b872:	e7f7      	b.n	800b864 <__sfp+0x18>
 800b874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b878:	b9d5      	cbnz	r5, 800b8b0 <__sfp+0x64>
 800b87a:	4b16      	ldr	r3, [pc, #88]	; (800b8d4 <__sfp+0x88>)
 800b87c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b880:	60e3      	str	r3, [r4, #12]
 800b882:	6665      	str	r5, [r4, #100]	; 0x64
 800b884:	f000 fbb2 	bl	800bfec <__retarget_lock_init_recursive>
 800b888:	f7ff ff96 	bl	800b7b8 <__sfp_lock_release>
 800b88c:	2208      	movs	r2, #8
 800b88e:	4629      	mov	r1, r5
 800b890:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b894:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b898:	6025      	str	r5, [r4, #0]
 800b89a:	61a5      	str	r5, [r4, #24]
 800b89c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8a0:	f7fd fd24 	bl	80092ec <memset>
 800b8a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8b0:	3468      	adds	r4, #104	; 0x68
 800b8b2:	e7d9      	b.n	800b868 <__sfp+0x1c>
 800b8b4:	2104      	movs	r1, #4
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	f7ff ff62 	bl	800b780 <__sfmoreglue>
 800b8bc:	4604      	mov	r4, r0
 800b8be:	6030      	str	r0, [r6, #0]
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	d1d5      	bne.n	800b870 <__sfp+0x24>
 800b8c4:	f7ff ff78 	bl	800b7b8 <__sfp_lock_release>
 800b8c8:	230c      	movs	r3, #12
 800b8ca:	603b      	str	r3, [r7, #0]
 800b8cc:	e7ee      	b.n	800b8ac <__sfp+0x60>
 800b8ce:	bf00      	nop
 800b8d0:	0801a6e8 	.word	0x0801a6e8
 800b8d4:	ffff0001 	.word	0xffff0001

0800b8d8 <_fwalk_reent>:
 800b8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8dc:	4606      	mov	r6, r0
 800b8de:	4688      	mov	r8, r1
 800b8e0:	2700      	movs	r7, #0
 800b8e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b8e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8ea:	f1b9 0901 	subs.w	r9, r9, #1
 800b8ee:	d505      	bpl.n	800b8fc <_fwalk_reent+0x24>
 800b8f0:	6824      	ldr	r4, [r4, #0]
 800b8f2:	2c00      	cmp	r4, #0
 800b8f4:	d1f7      	bne.n	800b8e6 <_fwalk_reent+0xe>
 800b8f6:	4638      	mov	r0, r7
 800b8f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8fc:	89ab      	ldrh	r3, [r5, #12]
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d907      	bls.n	800b912 <_fwalk_reent+0x3a>
 800b902:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b906:	3301      	adds	r3, #1
 800b908:	d003      	beq.n	800b912 <_fwalk_reent+0x3a>
 800b90a:	4629      	mov	r1, r5
 800b90c:	4630      	mov	r0, r6
 800b90e:	47c0      	blx	r8
 800b910:	4307      	orrs	r7, r0
 800b912:	3568      	adds	r5, #104	; 0x68
 800b914:	e7e9      	b.n	800b8ea <_fwalk_reent+0x12>

0800b916 <rshift>:
 800b916:	6903      	ldr	r3, [r0, #16]
 800b918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b91c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b920:	f100 0414 	add.w	r4, r0, #20
 800b924:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b928:	dd46      	ble.n	800b9b8 <rshift+0xa2>
 800b92a:	f011 011f 	ands.w	r1, r1, #31
 800b92e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b932:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b936:	d10c      	bne.n	800b952 <rshift+0x3c>
 800b938:	4629      	mov	r1, r5
 800b93a:	f100 0710 	add.w	r7, r0, #16
 800b93e:	42b1      	cmp	r1, r6
 800b940:	d335      	bcc.n	800b9ae <rshift+0x98>
 800b942:	1a9b      	subs	r3, r3, r2
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	1eea      	subs	r2, r5, #3
 800b948:	4296      	cmp	r6, r2
 800b94a:	bf38      	it	cc
 800b94c:	2300      	movcc	r3, #0
 800b94e:	4423      	add	r3, r4
 800b950:	e015      	b.n	800b97e <rshift+0x68>
 800b952:	46a1      	mov	r9, r4
 800b954:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b958:	f1c1 0820 	rsb	r8, r1, #32
 800b95c:	40cf      	lsrs	r7, r1
 800b95e:	f105 0e04 	add.w	lr, r5, #4
 800b962:	4576      	cmp	r6, lr
 800b964:	46f4      	mov	ip, lr
 800b966:	d816      	bhi.n	800b996 <rshift+0x80>
 800b968:	1a9b      	subs	r3, r3, r2
 800b96a:	009a      	lsls	r2, r3, #2
 800b96c:	3a04      	subs	r2, #4
 800b96e:	3501      	adds	r5, #1
 800b970:	42ae      	cmp	r6, r5
 800b972:	bf38      	it	cc
 800b974:	2200      	movcc	r2, #0
 800b976:	18a3      	adds	r3, r4, r2
 800b978:	50a7      	str	r7, [r4, r2]
 800b97a:	b107      	cbz	r7, 800b97e <rshift+0x68>
 800b97c:	3304      	adds	r3, #4
 800b97e:	42a3      	cmp	r3, r4
 800b980:	eba3 0204 	sub.w	r2, r3, r4
 800b984:	bf08      	it	eq
 800b986:	2300      	moveq	r3, #0
 800b988:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b98c:	6102      	str	r2, [r0, #16]
 800b98e:	bf08      	it	eq
 800b990:	6143      	streq	r3, [r0, #20]
 800b992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b996:	f8dc c000 	ldr.w	ip, [ip]
 800b99a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b99e:	ea4c 0707 	orr.w	r7, ip, r7
 800b9a2:	f849 7b04 	str.w	r7, [r9], #4
 800b9a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b9aa:	40cf      	lsrs	r7, r1
 800b9ac:	e7d9      	b.n	800b962 <rshift+0x4c>
 800b9ae:	f851 cb04 	ldr.w	ip, [r1], #4
 800b9b2:	f847 cf04 	str.w	ip, [r7, #4]!
 800b9b6:	e7c2      	b.n	800b93e <rshift+0x28>
 800b9b8:	4623      	mov	r3, r4
 800b9ba:	e7e0      	b.n	800b97e <rshift+0x68>

0800b9bc <__hexdig_fun>:
 800b9bc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b9c0:	2b09      	cmp	r3, #9
 800b9c2:	d802      	bhi.n	800b9ca <__hexdig_fun+0xe>
 800b9c4:	3820      	subs	r0, #32
 800b9c6:	b2c0      	uxtb	r0, r0
 800b9c8:	4770      	bx	lr
 800b9ca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b9ce:	2b05      	cmp	r3, #5
 800b9d0:	d801      	bhi.n	800b9d6 <__hexdig_fun+0x1a>
 800b9d2:	3847      	subs	r0, #71	; 0x47
 800b9d4:	e7f7      	b.n	800b9c6 <__hexdig_fun+0xa>
 800b9d6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b9da:	2b05      	cmp	r3, #5
 800b9dc:	d801      	bhi.n	800b9e2 <__hexdig_fun+0x26>
 800b9de:	3827      	subs	r0, #39	; 0x27
 800b9e0:	e7f1      	b.n	800b9c6 <__hexdig_fun+0xa>
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	4770      	bx	lr
	...

0800b9e8 <__gethex>:
 800b9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9ec:	b08b      	sub	sp, #44	; 0x2c
 800b9ee:	9306      	str	r3, [sp, #24]
 800b9f0:	4bb9      	ldr	r3, [pc, #740]	; (800bcd8 <__gethex+0x2f0>)
 800b9f2:	9002      	str	r0, [sp, #8]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	468b      	mov	fp, r1
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	4690      	mov	r8, r2
 800b9fc:	9303      	str	r3, [sp, #12]
 800b9fe:	f7f4 fc13 	bl	8000228 <strlen>
 800ba02:	4682      	mov	sl, r0
 800ba04:	9b03      	ldr	r3, [sp, #12]
 800ba06:	f8db 2000 	ldr.w	r2, [fp]
 800ba0a:	4403      	add	r3, r0
 800ba0c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ba10:	9307      	str	r3, [sp, #28]
 800ba12:	1c93      	adds	r3, r2, #2
 800ba14:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ba18:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ba1c:	32fe      	adds	r2, #254	; 0xfe
 800ba1e:	18d1      	adds	r1, r2, r3
 800ba20:	461f      	mov	r7, r3
 800ba22:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ba26:	9101      	str	r1, [sp, #4]
 800ba28:	2830      	cmp	r0, #48	; 0x30
 800ba2a:	d0f8      	beq.n	800ba1e <__gethex+0x36>
 800ba2c:	f7ff ffc6 	bl	800b9bc <__hexdig_fun>
 800ba30:	4604      	mov	r4, r0
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d13a      	bne.n	800baac <__gethex+0xc4>
 800ba36:	4652      	mov	r2, sl
 800ba38:	4638      	mov	r0, r7
 800ba3a:	9903      	ldr	r1, [sp, #12]
 800ba3c:	f001 fb8d 	bl	800d15a <strncmp>
 800ba40:	4605      	mov	r5, r0
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d166      	bne.n	800bb14 <__gethex+0x12c>
 800ba46:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ba4a:	eb07 060a 	add.w	r6, r7, sl
 800ba4e:	f7ff ffb5 	bl	800b9bc <__hexdig_fun>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d060      	beq.n	800bb18 <__gethex+0x130>
 800ba56:	4633      	mov	r3, r6
 800ba58:	7818      	ldrb	r0, [r3, #0]
 800ba5a:	461f      	mov	r7, r3
 800ba5c:	2830      	cmp	r0, #48	; 0x30
 800ba5e:	f103 0301 	add.w	r3, r3, #1
 800ba62:	d0f9      	beq.n	800ba58 <__gethex+0x70>
 800ba64:	f7ff ffaa 	bl	800b9bc <__hexdig_fun>
 800ba68:	2301      	movs	r3, #1
 800ba6a:	fab0 f480 	clz	r4, r0
 800ba6e:	4635      	mov	r5, r6
 800ba70:	0964      	lsrs	r4, r4, #5
 800ba72:	9301      	str	r3, [sp, #4]
 800ba74:	463a      	mov	r2, r7
 800ba76:	4616      	mov	r6, r2
 800ba78:	7830      	ldrb	r0, [r6, #0]
 800ba7a:	3201      	adds	r2, #1
 800ba7c:	f7ff ff9e 	bl	800b9bc <__hexdig_fun>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	d1f8      	bne.n	800ba76 <__gethex+0x8e>
 800ba84:	4652      	mov	r2, sl
 800ba86:	4630      	mov	r0, r6
 800ba88:	9903      	ldr	r1, [sp, #12]
 800ba8a:	f001 fb66 	bl	800d15a <strncmp>
 800ba8e:	b980      	cbnz	r0, 800bab2 <__gethex+0xca>
 800ba90:	b94d      	cbnz	r5, 800baa6 <__gethex+0xbe>
 800ba92:	eb06 050a 	add.w	r5, r6, sl
 800ba96:	462a      	mov	r2, r5
 800ba98:	4616      	mov	r6, r2
 800ba9a:	7830      	ldrb	r0, [r6, #0]
 800ba9c:	3201      	adds	r2, #1
 800ba9e:	f7ff ff8d 	bl	800b9bc <__hexdig_fun>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	d1f8      	bne.n	800ba98 <__gethex+0xb0>
 800baa6:	1bad      	subs	r5, r5, r6
 800baa8:	00ad      	lsls	r5, r5, #2
 800baaa:	e004      	b.n	800bab6 <__gethex+0xce>
 800baac:	2400      	movs	r4, #0
 800baae:	4625      	mov	r5, r4
 800bab0:	e7e0      	b.n	800ba74 <__gethex+0x8c>
 800bab2:	2d00      	cmp	r5, #0
 800bab4:	d1f7      	bne.n	800baa6 <__gethex+0xbe>
 800bab6:	7833      	ldrb	r3, [r6, #0]
 800bab8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800babc:	2b50      	cmp	r3, #80	; 0x50
 800babe:	d139      	bne.n	800bb34 <__gethex+0x14c>
 800bac0:	7873      	ldrb	r3, [r6, #1]
 800bac2:	2b2b      	cmp	r3, #43	; 0x2b
 800bac4:	d02a      	beq.n	800bb1c <__gethex+0x134>
 800bac6:	2b2d      	cmp	r3, #45	; 0x2d
 800bac8:	d02c      	beq.n	800bb24 <__gethex+0x13c>
 800baca:	f04f 0900 	mov.w	r9, #0
 800bace:	1c71      	adds	r1, r6, #1
 800bad0:	7808      	ldrb	r0, [r1, #0]
 800bad2:	f7ff ff73 	bl	800b9bc <__hexdig_fun>
 800bad6:	1e43      	subs	r3, r0, #1
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	2b18      	cmp	r3, #24
 800badc:	d82a      	bhi.n	800bb34 <__gethex+0x14c>
 800bade:	f1a0 0210 	sub.w	r2, r0, #16
 800bae2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bae6:	f7ff ff69 	bl	800b9bc <__hexdig_fun>
 800baea:	1e43      	subs	r3, r0, #1
 800baec:	b2db      	uxtb	r3, r3
 800baee:	2b18      	cmp	r3, #24
 800baf0:	d91b      	bls.n	800bb2a <__gethex+0x142>
 800baf2:	f1b9 0f00 	cmp.w	r9, #0
 800baf6:	d000      	beq.n	800bafa <__gethex+0x112>
 800baf8:	4252      	negs	r2, r2
 800bafa:	4415      	add	r5, r2
 800bafc:	f8cb 1000 	str.w	r1, [fp]
 800bb00:	b1d4      	cbz	r4, 800bb38 <__gethex+0x150>
 800bb02:	9b01      	ldr	r3, [sp, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	bf14      	ite	ne
 800bb08:	2700      	movne	r7, #0
 800bb0a:	2706      	moveq	r7, #6
 800bb0c:	4638      	mov	r0, r7
 800bb0e:	b00b      	add	sp, #44	; 0x2c
 800bb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb14:	463e      	mov	r6, r7
 800bb16:	4625      	mov	r5, r4
 800bb18:	2401      	movs	r4, #1
 800bb1a:	e7cc      	b.n	800bab6 <__gethex+0xce>
 800bb1c:	f04f 0900 	mov.w	r9, #0
 800bb20:	1cb1      	adds	r1, r6, #2
 800bb22:	e7d5      	b.n	800bad0 <__gethex+0xe8>
 800bb24:	f04f 0901 	mov.w	r9, #1
 800bb28:	e7fa      	b.n	800bb20 <__gethex+0x138>
 800bb2a:	230a      	movs	r3, #10
 800bb2c:	fb03 0202 	mla	r2, r3, r2, r0
 800bb30:	3a10      	subs	r2, #16
 800bb32:	e7d6      	b.n	800bae2 <__gethex+0xfa>
 800bb34:	4631      	mov	r1, r6
 800bb36:	e7e1      	b.n	800bafc <__gethex+0x114>
 800bb38:	4621      	mov	r1, r4
 800bb3a:	1bf3      	subs	r3, r6, r7
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	2b07      	cmp	r3, #7
 800bb40:	dc0a      	bgt.n	800bb58 <__gethex+0x170>
 800bb42:	9802      	ldr	r0, [sp, #8]
 800bb44:	f000 fa8c 	bl	800c060 <_Balloc>
 800bb48:	4604      	mov	r4, r0
 800bb4a:	b940      	cbnz	r0, 800bb5e <__gethex+0x176>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	21de      	movs	r1, #222	; 0xde
 800bb50:	4b62      	ldr	r3, [pc, #392]	; (800bcdc <__gethex+0x2f4>)
 800bb52:	4863      	ldr	r0, [pc, #396]	; (800bce0 <__gethex+0x2f8>)
 800bb54:	f001 fbf4 	bl	800d340 <__assert_func>
 800bb58:	3101      	adds	r1, #1
 800bb5a:	105b      	asrs	r3, r3, #1
 800bb5c:	e7ef      	b.n	800bb3e <__gethex+0x156>
 800bb5e:	f04f 0b00 	mov.w	fp, #0
 800bb62:	f100 0914 	add.w	r9, r0, #20
 800bb66:	f1ca 0301 	rsb	r3, sl, #1
 800bb6a:	f8cd 9010 	str.w	r9, [sp, #16]
 800bb6e:	f8cd b004 	str.w	fp, [sp, #4]
 800bb72:	9308      	str	r3, [sp, #32]
 800bb74:	42b7      	cmp	r7, r6
 800bb76:	d33f      	bcc.n	800bbf8 <__gethex+0x210>
 800bb78:	9f04      	ldr	r7, [sp, #16]
 800bb7a:	9b01      	ldr	r3, [sp, #4]
 800bb7c:	f847 3b04 	str.w	r3, [r7], #4
 800bb80:	eba7 0709 	sub.w	r7, r7, r9
 800bb84:	10bf      	asrs	r7, r7, #2
 800bb86:	6127      	str	r7, [r4, #16]
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f000 fb5f 	bl	800c24c <__hi0bits>
 800bb8e:	017f      	lsls	r7, r7, #5
 800bb90:	f8d8 6000 	ldr.w	r6, [r8]
 800bb94:	1a3f      	subs	r7, r7, r0
 800bb96:	42b7      	cmp	r7, r6
 800bb98:	dd62      	ble.n	800bc60 <__gethex+0x278>
 800bb9a:	1bbf      	subs	r7, r7, r6
 800bb9c:	4639      	mov	r1, r7
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f000 fef5 	bl	800c98e <__any_on>
 800bba4:	4682      	mov	sl, r0
 800bba6:	b1a8      	cbz	r0, 800bbd4 <__gethex+0x1ec>
 800bba8:	f04f 0a01 	mov.w	sl, #1
 800bbac:	1e7b      	subs	r3, r7, #1
 800bbae:	1159      	asrs	r1, r3, #5
 800bbb0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bbb4:	f003 021f 	and.w	r2, r3, #31
 800bbb8:	fa0a f202 	lsl.w	r2, sl, r2
 800bbbc:	420a      	tst	r2, r1
 800bbbe:	d009      	beq.n	800bbd4 <__gethex+0x1ec>
 800bbc0:	4553      	cmp	r3, sl
 800bbc2:	dd05      	ble.n	800bbd0 <__gethex+0x1e8>
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	1eb9      	subs	r1, r7, #2
 800bbc8:	f000 fee1 	bl	800c98e <__any_on>
 800bbcc:	2800      	cmp	r0, #0
 800bbce:	d144      	bne.n	800bc5a <__gethex+0x272>
 800bbd0:	f04f 0a02 	mov.w	sl, #2
 800bbd4:	4639      	mov	r1, r7
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f7ff fe9d 	bl	800b916 <rshift>
 800bbdc:	443d      	add	r5, r7
 800bbde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bbe2:	42ab      	cmp	r3, r5
 800bbe4:	da4a      	bge.n	800bc7c <__gethex+0x294>
 800bbe6:	4621      	mov	r1, r4
 800bbe8:	9802      	ldr	r0, [sp, #8]
 800bbea:	f000 fa79 	bl	800c0e0 <_Bfree>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bbf2:	27a3      	movs	r7, #163	; 0xa3
 800bbf4:	6013      	str	r3, [r2, #0]
 800bbf6:	e789      	b.n	800bb0c <__gethex+0x124>
 800bbf8:	1e73      	subs	r3, r6, #1
 800bbfa:	9a07      	ldr	r2, [sp, #28]
 800bbfc:	9305      	str	r3, [sp, #20]
 800bbfe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d019      	beq.n	800bc3a <__gethex+0x252>
 800bc06:	f1bb 0f20 	cmp.w	fp, #32
 800bc0a:	d107      	bne.n	800bc1c <__gethex+0x234>
 800bc0c:	9b04      	ldr	r3, [sp, #16]
 800bc0e:	9a01      	ldr	r2, [sp, #4]
 800bc10:	f843 2b04 	str.w	r2, [r3], #4
 800bc14:	9304      	str	r3, [sp, #16]
 800bc16:	2300      	movs	r3, #0
 800bc18:	469b      	mov	fp, r3
 800bc1a:	9301      	str	r3, [sp, #4]
 800bc1c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bc20:	f7ff fecc 	bl	800b9bc <__hexdig_fun>
 800bc24:	9b01      	ldr	r3, [sp, #4]
 800bc26:	f000 000f 	and.w	r0, r0, #15
 800bc2a:	fa00 f00b 	lsl.w	r0, r0, fp
 800bc2e:	4303      	orrs	r3, r0
 800bc30:	9301      	str	r3, [sp, #4]
 800bc32:	f10b 0b04 	add.w	fp, fp, #4
 800bc36:	9b05      	ldr	r3, [sp, #20]
 800bc38:	e00d      	b.n	800bc56 <__gethex+0x26e>
 800bc3a:	9b05      	ldr	r3, [sp, #20]
 800bc3c:	9a08      	ldr	r2, [sp, #32]
 800bc3e:	4413      	add	r3, r2
 800bc40:	42bb      	cmp	r3, r7
 800bc42:	d3e0      	bcc.n	800bc06 <__gethex+0x21e>
 800bc44:	4618      	mov	r0, r3
 800bc46:	4652      	mov	r2, sl
 800bc48:	9903      	ldr	r1, [sp, #12]
 800bc4a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc4c:	f001 fa85 	bl	800d15a <strncmp>
 800bc50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d1d7      	bne.n	800bc06 <__gethex+0x21e>
 800bc56:	461e      	mov	r6, r3
 800bc58:	e78c      	b.n	800bb74 <__gethex+0x18c>
 800bc5a:	f04f 0a03 	mov.w	sl, #3
 800bc5e:	e7b9      	b.n	800bbd4 <__gethex+0x1ec>
 800bc60:	da09      	bge.n	800bc76 <__gethex+0x28e>
 800bc62:	1bf7      	subs	r7, r6, r7
 800bc64:	4621      	mov	r1, r4
 800bc66:	463a      	mov	r2, r7
 800bc68:	9802      	ldr	r0, [sp, #8]
 800bc6a:	f000 fc51 	bl	800c510 <__lshift>
 800bc6e:	4604      	mov	r4, r0
 800bc70:	1bed      	subs	r5, r5, r7
 800bc72:	f100 0914 	add.w	r9, r0, #20
 800bc76:	f04f 0a00 	mov.w	sl, #0
 800bc7a:	e7b0      	b.n	800bbde <__gethex+0x1f6>
 800bc7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bc80:	42a8      	cmp	r0, r5
 800bc82:	dd71      	ble.n	800bd68 <__gethex+0x380>
 800bc84:	1b45      	subs	r5, r0, r5
 800bc86:	42ae      	cmp	r6, r5
 800bc88:	dc34      	bgt.n	800bcf4 <__gethex+0x30c>
 800bc8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d028      	beq.n	800bce4 <__gethex+0x2fc>
 800bc92:	2b03      	cmp	r3, #3
 800bc94:	d02a      	beq.n	800bcec <__gethex+0x304>
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d115      	bne.n	800bcc6 <__gethex+0x2de>
 800bc9a:	42ae      	cmp	r6, r5
 800bc9c:	d113      	bne.n	800bcc6 <__gethex+0x2de>
 800bc9e:	2e01      	cmp	r6, #1
 800bca0:	d10b      	bne.n	800bcba <__gethex+0x2d2>
 800bca2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bca6:	9a06      	ldr	r2, [sp, #24]
 800bca8:	2762      	movs	r7, #98	; 0x62
 800bcaa:	6013      	str	r3, [r2, #0]
 800bcac:	2301      	movs	r3, #1
 800bcae:	6123      	str	r3, [r4, #16]
 800bcb0:	f8c9 3000 	str.w	r3, [r9]
 800bcb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcb6:	601c      	str	r4, [r3, #0]
 800bcb8:	e728      	b.n	800bb0c <__gethex+0x124>
 800bcba:	4620      	mov	r0, r4
 800bcbc:	1e71      	subs	r1, r6, #1
 800bcbe:	f000 fe66 	bl	800c98e <__any_on>
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	d1ed      	bne.n	800bca2 <__gethex+0x2ba>
 800bcc6:	4621      	mov	r1, r4
 800bcc8:	9802      	ldr	r0, [sp, #8]
 800bcca:	f000 fa09 	bl	800c0e0 <_Bfree>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bcd2:	2750      	movs	r7, #80	; 0x50
 800bcd4:	6013      	str	r3, [r2, #0]
 800bcd6:	e719      	b.n	800bb0c <__gethex+0x124>
 800bcd8:	0801a9d4 	.word	0x0801a9d4
 800bcdc:	0801a8f4 	.word	0x0801a8f4
 800bce0:	0801a968 	.word	0x0801a968
 800bce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1ed      	bne.n	800bcc6 <__gethex+0x2de>
 800bcea:	e7da      	b.n	800bca2 <__gethex+0x2ba>
 800bcec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1d7      	bne.n	800bca2 <__gethex+0x2ba>
 800bcf2:	e7e8      	b.n	800bcc6 <__gethex+0x2de>
 800bcf4:	1e6f      	subs	r7, r5, #1
 800bcf6:	f1ba 0f00 	cmp.w	sl, #0
 800bcfa:	d132      	bne.n	800bd62 <__gethex+0x37a>
 800bcfc:	b127      	cbz	r7, 800bd08 <__gethex+0x320>
 800bcfe:	4639      	mov	r1, r7
 800bd00:	4620      	mov	r0, r4
 800bd02:	f000 fe44 	bl	800c98e <__any_on>
 800bd06:	4682      	mov	sl, r0
 800bd08:	2101      	movs	r1, #1
 800bd0a:	117b      	asrs	r3, r7, #5
 800bd0c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bd10:	f007 071f 	and.w	r7, r7, #31
 800bd14:	fa01 f707 	lsl.w	r7, r1, r7
 800bd18:	421f      	tst	r7, r3
 800bd1a:	f04f 0702 	mov.w	r7, #2
 800bd1e:	4629      	mov	r1, r5
 800bd20:	4620      	mov	r0, r4
 800bd22:	bf18      	it	ne
 800bd24:	f04a 0a02 	orrne.w	sl, sl, #2
 800bd28:	1b76      	subs	r6, r6, r5
 800bd2a:	f7ff fdf4 	bl	800b916 <rshift>
 800bd2e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd32:	f1ba 0f00 	cmp.w	sl, #0
 800bd36:	d048      	beq.n	800bdca <__gethex+0x3e2>
 800bd38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd3c:	2b02      	cmp	r3, #2
 800bd3e:	d015      	beq.n	800bd6c <__gethex+0x384>
 800bd40:	2b03      	cmp	r3, #3
 800bd42:	d017      	beq.n	800bd74 <__gethex+0x38c>
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d109      	bne.n	800bd5c <__gethex+0x374>
 800bd48:	f01a 0f02 	tst.w	sl, #2
 800bd4c:	d006      	beq.n	800bd5c <__gethex+0x374>
 800bd4e:	f8d9 0000 	ldr.w	r0, [r9]
 800bd52:	ea4a 0a00 	orr.w	sl, sl, r0
 800bd56:	f01a 0f01 	tst.w	sl, #1
 800bd5a:	d10e      	bne.n	800bd7a <__gethex+0x392>
 800bd5c:	f047 0710 	orr.w	r7, r7, #16
 800bd60:	e033      	b.n	800bdca <__gethex+0x3e2>
 800bd62:	f04f 0a01 	mov.w	sl, #1
 800bd66:	e7cf      	b.n	800bd08 <__gethex+0x320>
 800bd68:	2701      	movs	r7, #1
 800bd6a:	e7e2      	b.n	800bd32 <__gethex+0x34a>
 800bd6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd6e:	f1c3 0301 	rsb	r3, r3, #1
 800bd72:	9315      	str	r3, [sp, #84]	; 0x54
 800bd74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d0f0      	beq.n	800bd5c <__gethex+0x374>
 800bd7a:	f04f 0c00 	mov.w	ip, #0
 800bd7e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bd82:	f104 0314 	add.w	r3, r4, #20
 800bd86:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bd8a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd94:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bd98:	d01c      	beq.n	800bdd4 <__gethex+0x3ec>
 800bd9a:	3201      	adds	r2, #1
 800bd9c:	6002      	str	r2, [r0, #0]
 800bd9e:	2f02      	cmp	r7, #2
 800bda0:	f104 0314 	add.w	r3, r4, #20
 800bda4:	d13d      	bne.n	800be22 <__gethex+0x43a>
 800bda6:	f8d8 2000 	ldr.w	r2, [r8]
 800bdaa:	3a01      	subs	r2, #1
 800bdac:	42b2      	cmp	r2, r6
 800bdae:	d10a      	bne.n	800bdc6 <__gethex+0x3de>
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	1171      	asrs	r1, r6, #5
 800bdb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bdb8:	f006 061f 	and.w	r6, r6, #31
 800bdbc:	fa02 f606 	lsl.w	r6, r2, r6
 800bdc0:	421e      	tst	r6, r3
 800bdc2:	bf18      	it	ne
 800bdc4:	4617      	movne	r7, r2
 800bdc6:	f047 0720 	orr.w	r7, r7, #32
 800bdca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bdcc:	601c      	str	r4, [r3, #0]
 800bdce:	9b06      	ldr	r3, [sp, #24]
 800bdd0:	601d      	str	r5, [r3, #0]
 800bdd2:	e69b      	b.n	800bb0c <__gethex+0x124>
 800bdd4:	4299      	cmp	r1, r3
 800bdd6:	f843 cc04 	str.w	ip, [r3, #-4]
 800bdda:	d8d8      	bhi.n	800bd8e <__gethex+0x3a6>
 800bddc:	68a3      	ldr	r3, [r4, #8]
 800bdde:	459b      	cmp	fp, r3
 800bde0:	db17      	blt.n	800be12 <__gethex+0x42a>
 800bde2:	6861      	ldr	r1, [r4, #4]
 800bde4:	9802      	ldr	r0, [sp, #8]
 800bde6:	3101      	adds	r1, #1
 800bde8:	f000 f93a 	bl	800c060 <_Balloc>
 800bdec:	4681      	mov	r9, r0
 800bdee:	b918      	cbnz	r0, 800bdf8 <__gethex+0x410>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	2184      	movs	r1, #132	; 0x84
 800bdf4:	4b19      	ldr	r3, [pc, #100]	; (800be5c <__gethex+0x474>)
 800bdf6:	e6ac      	b.n	800bb52 <__gethex+0x16a>
 800bdf8:	6922      	ldr	r2, [r4, #16]
 800bdfa:	f104 010c 	add.w	r1, r4, #12
 800bdfe:	3202      	adds	r2, #2
 800be00:	0092      	lsls	r2, r2, #2
 800be02:	300c      	adds	r0, #12
 800be04:	f000 f91e 	bl	800c044 <memcpy>
 800be08:	4621      	mov	r1, r4
 800be0a:	9802      	ldr	r0, [sp, #8]
 800be0c:	f000 f968 	bl	800c0e0 <_Bfree>
 800be10:	464c      	mov	r4, r9
 800be12:	6923      	ldr	r3, [r4, #16]
 800be14:	1c5a      	adds	r2, r3, #1
 800be16:	6122      	str	r2, [r4, #16]
 800be18:	2201      	movs	r2, #1
 800be1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be1e:	615a      	str	r2, [r3, #20]
 800be20:	e7bd      	b.n	800bd9e <__gethex+0x3b6>
 800be22:	6922      	ldr	r2, [r4, #16]
 800be24:	455a      	cmp	r2, fp
 800be26:	dd0b      	ble.n	800be40 <__gethex+0x458>
 800be28:	2101      	movs	r1, #1
 800be2a:	4620      	mov	r0, r4
 800be2c:	f7ff fd73 	bl	800b916 <rshift>
 800be30:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be34:	3501      	adds	r5, #1
 800be36:	42ab      	cmp	r3, r5
 800be38:	f6ff aed5 	blt.w	800bbe6 <__gethex+0x1fe>
 800be3c:	2701      	movs	r7, #1
 800be3e:	e7c2      	b.n	800bdc6 <__gethex+0x3de>
 800be40:	f016 061f 	ands.w	r6, r6, #31
 800be44:	d0fa      	beq.n	800be3c <__gethex+0x454>
 800be46:	449a      	add	sl, r3
 800be48:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800be4c:	f000 f9fe 	bl	800c24c <__hi0bits>
 800be50:	f1c6 0620 	rsb	r6, r6, #32
 800be54:	42b0      	cmp	r0, r6
 800be56:	dbe7      	blt.n	800be28 <__gethex+0x440>
 800be58:	e7f0      	b.n	800be3c <__gethex+0x454>
 800be5a:	bf00      	nop
 800be5c:	0801a8f4 	.word	0x0801a8f4

0800be60 <L_shift>:
 800be60:	f1c2 0208 	rsb	r2, r2, #8
 800be64:	0092      	lsls	r2, r2, #2
 800be66:	b570      	push	{r4, r5, r6, lr}
 800be68:	f1c2 0620 	rsb	r6, r2, #32
 800be6c:	6843      	ldr	r3, [r0, #4]
 800be6e:	6804      	ldr	r4, [r0, #0]
 800be70:	fa03 f506 	lsl.w	r5, r3, r6
 800be74:	432c      	orrs	r4, r5
 800be76:	40d3      	lsrs	r3, r2
 800be78:	6004      	str	r4, [r0, #0]
 800be7a:	f840 3f04 	str.w	r3, [r0, #4]!
 800be7e:	4288      	cmp	r0, r1
 800be80:	d3f4      	bcc.n	800be6c <L_shift+0xc>
 800be82:	bd70      	pop	{r4, r5, r6, pc}

0800be84 <__match>:
 800be84:	b530      	push	{r4, r5, lr}
 800be86:	6803      	ldr	r3, [r0, #0]
 800be88:	3301      	adds	r3, #1
 800be8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be8e:	b914      	cbnz	r4, 800be96 <__match+0x12>
 800be90:	6003      	str	r3, [r0, #0]
 800be92:	2001      	movs	r0, #1
 800be94:	bd30      	pop	{r4, r5, pc}
 800be96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800be9e:	2d19      	cmp	r5, #25
 800bea0:	bf98      	it	ls
 800bea2:	3220      	addls	r2, #32
 800bea4:	42a2      	cmp	r2, r4
 800bea6:	d0f0      	beq.n	800be8a <__match+0x6>
 800bea8:	2000      	movs	r0, #0
 800beaa:	e7f3      	b.n	800be94 <__match+0x10>

0800beac <__hexnan>:
 800beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb0:	2500      	movs	r5, #0
 800beb2:	680b      	ldr	r3, [r1, #0]
 800beb4:	4682      	mov	sl, r0
 800beb6:	115e      	asrs	r6, r3, #5
 800beb8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bebc:	f013 031f 	ands.w	r3, r3, #31
 800bec0:	bf18      	it	ne
 800bec2:	3604      	addne	r6, #4
 800bec4:	1f37      	subs	r7, r6, #4
 800bec6:	4690      	mov	r8, r2
 800bec8:	46b9      	mov	r9, r7
 800beca:	463c      	mov	r4, r7
 800becc:	46ab      	mov	fp, r5
 800bece:	b087      	sub	sp, #28
 800bed0:	6801      	ldr	r1, [r0, #0]
 800bed2:	9301      	str	r3, [sp, #4]
 800bed4:	f846 5c04 	str.w	r5, [r6, #-4]
 800bed8:	9502      	str	r5, [sp, #8]
 800beda:	784a      	ldrb	r2, [r1, #1]
 800bedc:	1c4b      	adds	r3, r1, #1
 800bede:	9303      	str	r3, [sp, #12]
 800bee0:	b342      	cbz	r2, 800bf34 <__hexnan+0x88>
 800bee2:	4610      	mov	r0, r2
 800bee4:	9105      	str	r1, [sp, #20]
 800bee6:	9204      	str	r2, [sp, #16]
 800bee8:	f7ff fd68 	bl	800b9bc <__hexdig_fun>
 800beec:	2800      	cmp	r0, #0
 800beee:	d14f      	bne.n	800bf90 <__hexnan+0xe4>
 800bef0:	9a04      	ldr	r2, [sp, #16]
 800bef2:	9905      	ldr	r1, [sp, #20]
 800bef4:	2a20      	cmp	r2, #32
 800bef6:	d818      	bhi.n	800bf2a <__hexnan+0x7e>
 800bef8:	9b02      	ldr	r3, [sp, #8]
 800befa:	459b      	cmp	fp, r3
 800befc:	dd13      	ble.n	800bf26 <__hexnan+0x7a>
 800befe:	454c      	cmp	r4, r9
 800bf00:	d206      	bcs.n	800bf10 <__hexnan+0x64>
 800bf02:	2d07      	cmp	r5, #7
 800bf04:	dc04      	bgt.n	800bf10 <__hexnan+0x64>
 800bf06:	462a      	mov	r2, r5
 800bf08:	4649      	mov	r1, r9
 800bf0a:	4620      	mov	r0, r4
 800bf0c:	f7ff ffa8 	bl	800be60 <L_shift>
 800bf10:	4544      	cmp	r4, r8
 800bf12:	d950      	bls.n	800bfb6 <__hexnan+0x10a>
 800bf14:	2300      	movs	r3, #0
 800bf16:	f1a4 0904 	sub.w	r9, r4, #4
 800bf1a:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf1e:	461d      	mov	r5, r3
 800bf20:	464c      	mov	r4, r9
 800bf22:	f8cd b008 	str.w	fp, [sp, #8]
 800bf26:	9903      	ldr	r1, [sp, #12]
 800bf28:	e7d7      	b.n	800beda <__hexnan+0x2e>
 800bf2a:	2a29      	cmp	r2, #41	; 0x29
 800bf2c:	d156      	bne.n	800bfdc <__hexnan+0x130>
 800bf2e:	3102      	adds	r1, #2
 800bf30:	f8ca 1000 	str.w	r1, [sl]
 800bf34:	f1bb 0f00 	cmp.w	fp, #0
 800bf38:	d050      	beq.n	800bfdc <__hexnan+0x130>
 800bf3a:	454c      	cmp	r4, r9
 800bf3c:	d206      	bcs.n	800bf4c <__hexnan+0xa0>
 800bf3e:	2d07      	cmp	r5, #7
 800bf40:	dc04      	bgt.n	800bf4c <__hexnan+0xa0>
 800bf42:	462a      	mov	r2, r5
 800bf44:	4649      	mov	r1, r9
 800bf46:	4620      	mov	r0, r4
 800bf48:	f7ff ff8a 	bl	800be60 <L_shift>
 800bf4c:	4544      	cmp	r4, r8
 800bf4e:	d934      	bls.n	800bfba <__hexnan+0x10e>
 800bf50:	4623      	mov	r3, r4
 800bf52:	f1a8 0204 	sub.w	r2, r8, #4
 800bf56:	f853 1b04 	ldr.w	r1, [r3], #4
 800bf5a:	429f      	cmp	r7, r3
 800bf5c:	f842 1f04 	str.w	r1, [r2, #4]!
 800bf60:	d2f9      	bcs.n	800bf56 <__hexnan+0xaa>
 800bf62:	1b3b      	subs	r3, r7, r4
 800bf64:	f023 0303 	bic.w	r3, r3, #3
 800bf68:	3304      	adds	r3, #4
 800bf6a:	3401      	adds	r4, #1
 800bf6c:	3e03      	subs	r6, #3
 800bf6e:	42b4      	cmp	r4, r6
 800bf70:	bf88      	it	hi
 800bf72:	2304      	movhi	r3, #4
 800bf74:	2200      	movs	r2, #0
 800bf76:	4443      	add	r3, r8
 800bf78:	f843 2b04 	str.w	r2, [r3], #4
 800bf7c:	429f      	cmp	r7, r3
 800bf7e:	d2fb      	bcs.n	800bf78 <__hexnan+0xcc>
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	b91b      	cbnz	r3, 800bf8c <__hexnan+0xe0>
 800bf84:	4547      	cmp	r7, r8
 800bf86:	d127      	bne.n	800bfd8 <__hexnan+0x12c>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	603b      	str	r3, [r7, #0]
 800bf8c:	2005      	movs	r0, #5
 800bf8e:	e026      	b.n	800bfde <__hexnan+0x132>
 800bf90:	3501      	adds	r5, #1
 800bf92:	2d08      	cmp	r5, #8
 800bf94:	f10b 0b01 	add.w	fp, fp, #1
 800bf98:	dd06      	ble.n	800bfa8 <__hexnan+0xfc>
 800bf9a:	4544      	cmp	r4, r8
 800bf9c:	d9c3      	bls.n	800bf26 <__hexnan+0x7a>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	2501      	movs	r5, #1
 800bfa2:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfa6:	3c04      	subs	r4, #4
 800bfa8:	6822      	ldr	r2, [r4, #0]
 800bfaa:	f000 000f 	and.w	r0, r0, #15
 800bfae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bfb2:	6022      	str	r2, [r4, #0]
 800bfb4:	e7b7      	b.n	800bf26 <__hexnan+0x7a>
 800bfb6:	2508      	movs	r5, #8
 800bfb8:	e7b5      	b.n	800bf26 <__hexnan+0x7a>
 800bfba:	9b01      	ldr	r3, [sp, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d0df      	beq.n	800bf80 <__hexnan+0xd4>
 800bfc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bfc4:	f1c3 0320 	rsb	r3, r3, #32
 800bfc8:	fa22 f303 	lsr.w	r3, r2, r3
 800bfcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bfd0:	401a      	ands	r2, r3
 800bfd2:	f846 2c04 	str.w	r2, [r6, #-4]
 800bfd6:	e7d3      	b.n	800bf80 <__hexnan+0xd4>
 800bfd8:	3f04      	subs	r7, #4
 800bfda:	e7d1      	b.n	800bf80 <__hexnan+0xd4>
 800bfdc:	2004      	movs	r0, #4
 800bfde:	b007      	add	sp, #28
 800bfe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfe4 <_localeconv_r>:
 800bfe4:	4800      	ldr	r0, [pc, #0]	; (800bfe8 <_localeconv_r+0x4>)
 800bfe6:	4770      	bx	lr
 800bfe8:	2000016c 	.word	0x2000016c

0800bfec <__retarget_lock_init_recursive>:
 800bfec:	4770      	bx	lr

0800bfee <__retarget_lock_acquire_recursive>:
 800bfee:	4770      	bx	lr

0800bff0 <__retarget_lock_release_recursive>:
 800bff0:	4770      	bx	lr
	...

0800bff4 <malloc>:
 800bff4:	4b02      	ldr	r3, [pc, #8]	; (800c000 <malloc+0xc>)
 800bff6:	4601      	mov	r1, r0
 800bff8:	6818      	ldr	r0, [r3, #0]
 800bffa:	f000 bd43 	b.w	800ca84 <_malloc_r>
 800bffe:	bf00      	nop
 800c000:	20000014 	.word	0x20000014

0800c004 <__ascii_mbtowc>:
 800c004:	b082      	sub	sp, #8
 800c006:	b901      	cbnz	r1, 800c00a <__ascii_mbtowc+0x6>
 800c008:	a901      	add	r1, sp, #4
 800c00a:	b142      	cbz	r2, 800c01e <__ascii_mbtowc+0x1a>
 800c00c:	b14b      	cbz	r3, 800c022 <__ascii_mbtowc+0x1e>
 800c00e:	7813      	ldrb	r3, [r2, #0]
 800c010:	600b      	str	r3, [r1, #0]
 800c012:	7812      	ldrb	r2, [r2, #0]
 800c014:	1e10      	subs	r0, r2, #0
 800c016:	bf18      	it	ne
 800c018:	2001      	movne	r0, #1
 800c01a:	b002      	add	sp, #8
 800c01c:	4770      	bx	lr
 800c01e:	4610      	mov	r0, r2
 800c020:	e7fb      	b.n	800c01a <__ascii_mbtowc+0x16>
 800c022:	f06f 0001 	mvn.w	r0, #1
 800c026:	e7f8      	b.n	800c01a <__ascii_mbtowc+0x16>

0800c028 <memchr>:
 800c028:	4603      	mov	r3, r0
 800c02a:	b510      	push	{r4, lr}
 800c02c:	b2c9      	uxtb	r1, r1
 800c02e:	4402      	add	r2, r0
 800c030:	4293      	cmp	r3, r2
 800c032:	4618      	mov	r0, r3
 800c034:	d101      	bne.n	800c03a <memchr+0x12>
 800c036:	2000      	movs	r0, #0
 800c038:	e003      	b.n	800c042 <memchr+0x1a>
 800c03a:	7804      	ldrb	r4, [r0, #0]
 800c03c:	3301      	adds	r3, #1
 800c03e:	428c      	cmp	r4, r1
 800c040:	d1f6      	bne.n	800c030 <memchr+0x8>
 800c042:	bd10      	pop	{r4, pc}

0800c044 <memcpy>:
 800c044:	440a      	add	r2, r1
 800c046:	4291      	cmp	r1, r2
 800c048:	f100 33ff 	add.w	r3, r0, #4294967295
 800c04c:	d100      	bne.n	800c050 <memcpy+0xc>
 800c04e:	4770      	bx	lr
 800c050:	b510      	push	{r4, lr}
 800c052:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c056:	4291      	cmp	r1, r2
 800c058:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c05c:	d1f9      	bne.n	800c052 <memcpy+0xe>
 800c05e:	bd10      	pop	{r4, pc}

0800c060 <_Balloc>:
 800c060:	b570      	push	{r4, r5, r6, lr}
 800c062:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c064:	4604      	mov	r4, r0
 800c066:	460d      	mov	r5, r1
 800c068:	b976      	cbnz	r6, 800c088 <_Balloc+0x28>
 800c06a:	2010      	movs	r0, #16
 800c06c:	f7ff ffc2 	bl	800bff4 <malloc>
 800c070:	4602      	mov	r2, r0
 800c072:	6260      	str	r0, [r4, #36]	; 0x24
 800c074:	b920      	cbnz	r0, 800c080 <_Balloc+0x20>
 800c076:	2166      	movs	r1, #102	; 0x66
 800c078:	4b17      	ldr	r3, [pc, #92]	; (800c0d8 <_Balloc+0x78>)
 800c07a:	4818      	ldr	r0, [pc, #96]	; (800c0dc <_Balloc+0x7c>)
 800c07c:	f001 f960 	bl	800d340 <__assert_func>
 800c080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c084:	6006      	str	r6, [r0, #0]
 800c086:	60c6      	str	r6, [r0, #12]
 800c088:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c08a:	68f3      	ldr	r3, [r6, #12]
 800c08c:	b183      	cbz	r3, 800c0b0 <_Balloc+0x50>
 800c08e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c096:	b9b8      	cbnz	r0, 800c0c8 <_Balloc+0x68>
 800c098:	2101      	movs	r1, #1
 800c09a:	fa01 f605 	lsl.w	r6, r1, r5
 800c09e:	1d72      	adds	r2, r6, #5
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	0092      	lsls	r2, r2, #2
 800c0a4:	f000 fc94 	bl	800c9d0 <_calloc_r>
 800c0a8:	b160      	cbz	r0, 800c0c4 <_Balloc+0x64>
 800c0aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0ae:	e00e      	b.n	800c0ce <_Balloc+0x6e>
 800c0b0:	2221      	movs	r2, #33	; 0x21
 800c0b2:	2104      	movs	r1, #4
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	f000 fc8b 	bl	800c9d0 <_calloc_r>
 800c0ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0bc:	60f0      	str	r0, [r6, #12]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d1e4      	bne.n	800c08e <_Balloc+0x2e>
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	bd70      	pop	{r4, r5, r6, pc}
 800c0c8:	6802      	ldr	r2, [r0, #0]
 800c0ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0d4:	e7f7      	b.n	800c0c6 <_Balloc+0x66>
 800c0d6:	bf00      	nop
 800c0d8:	0801a87e 	.word	0x0801a87e
 800c0dc:	0801a9e8 	.word	0x0801a9e8

0800c0e0 <_Bfree>:
 800c0e0:	b570      	push	{r4, r5, r6, lr}
 800c0e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c0e4:	4605      	mov	r5, r0
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	b976      	cbnz	r6, 800c108 <_Bfree+0x28>
 800c0ea:	2010      	movs	r0, #16
 800c0ec:	f7ff ff82 	bl	800bff4 <malloc>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	6268      	str	r0, [r5, #36]	; 0x24
 800c0f4:	b920      	cbnz	r0, 800c100 <_Bfree+0x20>
 800c0f6:	218a      	movs	r1, #138	; 0x8a
 800c0f8:	4b08      	ldr	r3, [pc, #32]	; (800c11c <_Bfree+0x3c>)
 800c0fa:	4809      	ldr	r0, [pc, #36]	; (800c120 <_Bfree+0x40>)
 800c0fc:	f001 f920 	bl	800d340 <__assert_func>
 800c100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c104:	6006      	str	r6, [r0, #0]
 800c106:	60c6      	str	r6, [r0, #12]
 800c108:	b13c      	cbz	r4, 800c11a <_Bfree+0x3a>
 800c10a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c10c:	6862      	ldr	r2, [r4, #4]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c114:	6021      	str	r1, [r4, #0]
 800c116:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c11a:	bd70      	pop	{r4, r5, r6, pc}
 800c11c:	0801a87e 	.word	0x0801a87e
 800c120:	0801a9e8 	.word	0x0801a9e8

0800c124 <__multadd>:
 800c124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c128:	4698      	mov	r8, r3
 800c12a:	460c      	mov	r4, r1
 800c12c:	2300      	movs	r3, #0
 800c12e:	690e      	ldr	r6, [r1, #16]
 800c130:	4607      	mov	r7, r0
 800c132:	f101 0014 	add.w	r0, r1, #20
 800c136:	6805      	ldr	r5, [r0, #0]
 800c138:	3301      	adds	r3, #1
 800c13a:	b2a9      	uxth	r1, r5
 800c13c:	fb02 8101 	mla	r1, r2, r1, r8
 800c140:	0c2d      	lsrs	r5, r5, #16
 800c142:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c146:	fb02 c505 	mla	r5, r2, r5, ip
 800c14a:	b289      	uxth	r1, r1
 800c14c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c150:	429e      	cmp	r6, r3
 800c152:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c156:	f840 1b04 	str.w	r1, [r0], #4
 800c15a:	dcec      	bgt.n	800c136 <__multadd+0x12>
 800c15c:	f1b8 0f00 	cmp.w	r8, #0
 800c160:	d022      	beq.n	800c1a8 <__multadd+0x84>
 800c162:	68a3      	ldr	r3, [r4, #8]
 800c164:	42b3      	cmp	r3, r6
 800c166:	dc19      	bgt.n	800c19c <__multadd+0x78>
 800c168:	6861      	ldr	r1, [r4, #4]
 800c16a:	4638      	mov	r0, r7
 800c16c:	3101      	adds	r1, #1
 800c16e:	f7ff ff77 	bl	800c060 <_Balloc>
 800c172:	4605      	mov	r5, r0
 800c174:	b928      	cbnz	r0, 800c182 <__multadd+0x5e>
 800c176:	4602      	mov	r2, r0
 800c178:	21b5      	movs	r1, #181	; 0xb5
 800c17a:	4b0d      	ldr	r3, [pc, #52]	; (800c1b0 <__multadd+0x8c>)
 800c17c:	480d      	ldr	r0, [pc, #52]	; (800c1b4 <__multadd+0x90>)
 800c17e:	f001 f8df 	bl	800d340 <__assert_func>
 800c182:	6922      	ldr	r2, [r4, #16]
 800c184:	f104 010c 	add.w	r1, r4, #12
 800c188:	3202      	adds	r2, #2
 800c18a:	0092      	lsls	r2, r2, #2
 800c18c:	300c      	adds	r0, #12
 800c18e:	f7ff ff59 	bl	800c044 <memcpy>
 800c192:	4621      	mov	r1, r4
 800c194:	4638      	mov	r0, r7
 800c196:	f7ff ffa3 	bl	800c0e0 <_Bfree>
 800c19a:	462c      	mov	r4, r5
 800c19c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c1a0:	3601      	adds	r6, #1
 800c1a2:	f8c3 8014 	str.w	r8, [r3, #20]
 800c1a6:	6126      	str	r6, [r4, #16]
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1ae:	bf00      	nop
 800c1b0:	0801a8f4 	.word	0x0801a8f4
 800c1b4:	0801a9e8 	.word	0x0801a9e8

0800c1b8 <__s2b>:
 800c1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1bc:	4615      	mov	r5, r2
 800c1be:	2209      	movs	r2, #9
 800c1c0:	461f      	mov	r7, r3
 800c1c2:	3308      	adds	r3, #8
 800c1c4:	460c      	mov	r4, r1
 800c1c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	db09      	blt.n	800c1e8 <__s2b+0x30>
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f7ff ff43 	bl	800c060 <_Balloc>
 800c1da:	b940      	cbnz	r0, 800c1ee <__s2b+0x36>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	21ce      	movs	r1, #206	; 0xce
 800c1e0:	4b18      	ldr	r3, [pc, #96]	; (800c244 <__s2b+0x8c>)
 800c1e2:	4819      	ldr	r0, [pc, #100]	; (800c248 <__s2b+0x90>)
 800c1e4:	f001 f8ac 	bl	800d340 <__assert_func>
 800c1e8:	0052      	lsls	r2, r2, #1
 800c1ea:	3101      	adds	r1, #1
 800c1ec:	e7f0      	b.n	800c1d0 <__s2b+0x18>
 800c1ee:	9b08      	ldr	r3, [sp, #32]
 800c1f0:	2d09      	cmp	r5, #9
 800c1f2:	6143      	str	r3, [r0, #20]
 800c1f4:	f04f 0301 	mov.w	r3, #1
 800c1f8:	6103      	str	r3, [r0, #16]
 800c1fa:	dd16      	ble.n	800c22a <__s2b+0x72>
 800c1fc:	f104 0909 	add.w	r9, r4, #9
 800c200:	46c8      	mov	r8, r9
 800c202:	442c      	add	r4, r5
 800c204:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c208:	4601      	mov	r1, r0
 800c20a:	220a      	movs	r2, #10
 800c20c:	4630      	mov	r0, r6
 800c20e:	3b30      	subs	r3, #48	; 0x30
 800c210:	f7ff ff88 	bl	800c124 <__multadd>
 800c214:	45a0      	cmp	r8, r4
 800c216:	d1f5      	bne.n	800c204 <__s2b+0x4c>
 800c218:	f1a5 0408 	sub.w	r4, r5, #8
 800c21c:	444c      	add	r4, r9
 800c21e:	1b2d      	subs	r5, r5, r4
 800c220:	1963      	adds	r3, r4, r5
 800c222:	42bb      	cmp	r3, r7
 800c224:	db04      	blt.n	800c230 <__s2b+0x78>
 800c226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c22a:	2509      	movs	r5, #9
 800c22c:	340a      	adds	r4, #10
 800c22e:	e7f6      	b.n	800c21e <__s2b+0x66>
 800c230:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c234:	4601      	mov	r1, r0
 800c236:	220a      	movs	r2, #10
 800c238:	4630      	mov	r0, r6
 800c23a:	3b30      	subs	r3, #48	; 0x30
 800c23c:	f7ff ff72 	bl	800c124 <__multadd>
 800c240:	e7ee      	b.n	800c220 <__s2b+0x68>
 800c242:	bf00      	nop
 800c244:	0801a8f4 	.word	0x0801a8f4
 800c248:	0801a9e8 	.word	0x0801a9e8

0800c24c <__hi0bits>:
 800c24c:	0c02      	lsrs	r2, r0, #16
 800c24e:	0412      	lsls	r2, r2, #16
 800c250:	4603      	mov	r3, r0
 800c252:	b9ca      	cbnz	r2, 800c288 <__hi0bits+0x3c>
 800c254:	0403      	lsls	r3, r0, #16
 800c256:	2010      	movs	r0, #16
 800c258:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c25c:	bf04      	itt	eq
 800c25e:	021b      	lsleq	r3, r3, #8
 800c260:	3008      	addeq	r0, #8
 800c262:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c266:	bf04      	itt	eq
 800c268:	011b      	lsleq	r3, r3, #4
 800c26a:	3004      	addeq	r0, #4
 800c26c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c270:	bf04      	itt	eq
 800c272:	009b      	lsleq	r3, r3, #2
 800c274:	3002      	addeq	r0, #2
 800c276:	2b00      	cmp	r3, #0
 800c278:	db05      	blt.n	800c286 <__hi0bits+0x3a>
 800c27a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c27e:	f100 0001 	add.w	r0, r0, #1
 800c282:	bf08      	it	eq
 800c284:	2020      	moveq	r0, #32
 800c286:	4770      	bx	lr
 800c288:	2000      	movs	r0, #0
 800c28a:	e7e5      	b.n	800c258 <__hi0bits+0xc>

0800c28c <__lo0bits>:
 800c28c:	6803      	ldr	r3, [r0, #0]
 800c28e:	4602      	mov	r2, r0
 800c290:	f013 0007 	ands.w	r0, r3, #7
 800c294:	d00b      	beq.n	800c2ae <__lo0bits+0x22>
 800c296:	07d9      	lsls	r1, r3, #31
 800c298:	d422      	bmi.n	800c2e0 <__lo0bits+0x54>
 800c29a:	0798      	lsls	r0, r3, #30
 800c29c:	bf49      	itett	mi
 800c29e:	085b      	lsrmi	r3, r3, #1
 800c2a0:	089b      	lsrpl	r3, r3, #2
 800c2a2:	2001      	movmi	r0, #1
 800c2a4:	6013      	strmi	r3, [r2, #0]
 800c2a6:	bf5c      	itt	pl
 800c2a8:	2002      	movpl	r0, #2
 800c2aa:	6013      	strpl	r3, [r2, #0]
 800c2ac:	4770      	bx	lr
 800c2ae:	b299      	uxth	r1, r3
 800c2b0:	b909      	cbnz	r1, 800c2b6 <__lo0bits+0x2a>
 800c2b2:	2010      	movs	r0, #16
 800c2b4:	0c1b      	lsrs	r3, r3, #16
 800c2b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c2ba:	bf04      	itt	eq
 800c2bc:	0a1b      	lsreq	r3, r3, #8
 800c2be:	3008      	addeq	r0, #8
 800c2c0:	0719      	lsls	r1, r3, #28
 800c2c2:	bf04      	itt	eq
 800c2c4:	091b      	lsreq	r3, r3, #4
 800c2c6:	3004      	addeq	r0, #4
 800c2c8:	0799      	lsls	r1, r3, #30
 800c2ca:	bf04      	itt	eq
 800c2cc:	089b      	lsreq	r3, r3, #2
 800c2ce:	3002      	addeq	r0, #2
 800c2d0:	07d9      	lsls	r1, r3, #31
 800c2d2:	d403      	bmi.n	800c2dc <__lo0bits+0x50>
 800c2d4:	085b      	lsrs	r3, r3, #1
 800c2d6:	f100 0001 	add.w	r0, r0, #1
 800c2da:	d003      	beq.n	800c2e4 <__lo0bits+0x58>
 800c2dc:	6013      	str	r3, [r2, #0]
 800c2de:	4770      	bx	lr
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	4770      	bx	lr
 800c2e4:	2020      	movs	r0, #32
 800c2e6:	4770      	bx	lr

0800c2e8 <__i2b>:
 800c2e8:	b510      	push	{r4, lr}
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	2101      	movs	r1, #1
 800c2ee:	f7ff feb7 	bl	800c060 <_Balloc>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	b928      	cbnz	r0, 800c302 <__i2b+0x1a>
 800c2f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c2fa:	4b04      	ldr	r3, [pc, #16]	; (800c30c <__i2b+0x24>)
 800c2fc:	4804      	ldr	r0, [pc, #16]	; (800c310 <__i2b+0x28>)
 800c2fe:	f001 f81f 	bl	800d340 <__assert_func>
 800c302:	2301      	movs	r3, #1
 800c304:	6144      	str	r4, [r0, #20]
 800c306:	6103      	str	r3, [r0, #16]
 800c308:	bd10      	pop	{r4, pc}
 800c30a:	bf00      	nop
 800c30c:	0801a8f4 	.word	0x0801a8f4
 800c310:	0801a9e8 	.word	0x0801a9e8

0800c314 <__multiply>:
 800c314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c318:	4614      	mov	r4, r2
 800c31a:	690a      	ldr	r2, [r1, #16]
 800c31c:	6923      	ldr	r3, [r4, #16]
 800c31e:	460d      	mov	r5, r1
 800c320:	429a      	cmp	r2, r3
 800c322:	bfbe      	ittt	lt
 800c324:	460b      	movlt	r3, r1
 800c326:	4625      	movlt	r5, r4
 800c328:	461c      	movlt	r4, r3
 800c32a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c32e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c332:	68ab      	ldr	r3, [r5, #8]
 800c334:	6869      	ldr	r1, [r5, #4]
 800c336:	eb0a 0709 	add.w	r7, sl, r9
 800c33a:	42bb      	cmp	r3, r7
 800c33c:	b085      	sub	sp, #20
 800c33e:	bfb8      	it	lt
 800c340:	3101      	addlt	r1, #1
 800c342:	f7ff fe8d 	bl	800c060 <_Balloc>
 800c346:	b930      	cbnz	r0, 800c356 <__multiply+0x42>
 800c348:	4602      	mov	r2, r0
 800c34a:	f240 115d 	movw	r1, #349	; 0x15d
 800c34e:	4b41      	ldr	r3, [pc, #260]	; (800c454 <__multiply+0x140>)
 800c350:	4841      	ldr	r0, [pc, #260]	; (800c458 <__multiply+0x144>)
 800c352:	f000 fff5 	bl	800d340 <__assert_func>
 800c356:	f100 0614 	add.w	r6, r0, #20
 800c35a:	4633      	mov	r3, r6
 800c35c:	2200      	movs	r2, #0
 800c35e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c362:	4543      	cmp	r3, r8
 800c364:	d31e      	bcc.n	800c3a4 <__multiply+0x90>
 800c366:	f105 0c14 	add.w	ip, r5, #20
 800c36a:	f104 0314 	add.w	r3, r4, #20
 800c36e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c372:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c376:	9202      	str	r2, [sp, #8]
 800c378:	ebac 0205 	sub.w	r2, ip, r5
 800c37c:	3a15      	subs	r2, #21
 800c37e:	f022 0203 	bic.w	r2, r2, #3
 800c382:	3204      	adds	r2, #4
 800c384:	f105 0115 	add.w	r1, r5, #21
 800c388:	458c      	cmp	ip, r1
 800c38a:	bf38      	it	cc
 800c38c:	2204      	movcc	r2, #4
 800c38e:	9201      	str	r2, [sp, #4]
 800c390:	9a02      	ldr	r2, [sp, #8]
 800c392:	9303      	str	r3, [sp, #12]
 800c394:	429a      	cmp	r2, r3
 800c396:	d808      	bhi.n	800c3aa <__multiply+0x96>
 800c398:	2f00      	cmp	r7, #0
 800c39a:	dc55      	bgt.n	800c448 <__multiply+0x134>
 800c39c:	6107      	str	r7, [r0, #16]
 800c39e:	b005      	add	sp, #20
 800c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a4:	f843 2b04 	str.w	r2, [r3], #4
 800c3a8:	e7db      	b.n	800c362 <__multiply+0x4e>
 800c3aa:	f8b3 a000 	ldrh.w	sl, [r3]
 800c3ae:	f1ba 0f00 	cmp.w	sl, #0
 800c3b2:	d020      	beq.n	800c3f6 <__multiply+0xe2>
 800c3b4:	46b1      	mov	r9, r6
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f105 0e14 	add.w	lr, r5, #20
 800c3bc:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c3c0:	f8d9 b000 	ldr.w	fp, [r9]
 800c3c4:	b2a1      	uxth	r1, r4
 800c3c6:	fa1f fb8b 	uxth.w	fp, fp
 800c3ca:	fb0a b101 	mla	r1, sl, r1, fp
 800c3ce:	4411      	add	r1, r2
 800c3d0:	f8d9 2000 	ldr.w	r2, [r9]
 800c3d4:	0c24      	lsrs	r4, r4, #16
 800c3d6:	0c12      	lsrs	r2, r2, #16
 800c3d8:	fb0a 2404 	mla	r4, sl, r4, r2
 800c3dc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c3e0:	b289      	uxth	r1, r1
 800c3e2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c3e6:	45f4      	cmp	ip, lr
 800c3e8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c3ec:	f849 1b04 	str.w	r1, [r9], #4
 800c3f0:	d8e4      	bhi.n	800c3bc <__multiply+0xa8>
 800c3f2:	9901      	ldr	r1, [sp, #4]
 800c3f4:	5072      	str	r2, [r6, r1]
 800c3f6:	9a03      	ldr	r2, [sp, #12]
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c3fe:	f1b9 0f00 	cmp.w	r9, #0
 800c402:	d01f      	beq.n	800c444 <__multiply+0x130>
 800c404:	46b6      	mov	lr, r6
 800c406:	f04f 0a00 	mov.w	sl, #0
 800c40a:	6834      	ldr	r4, [r6, #0]
 800c40c:	f105 0114 	add.w	r1, r5, #20
 800c410:	880a      	ldrh	r2, [r1, #0]
 800c412:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c416:	b2a4      	uxth	r4, r4
 800c418:	fb09 b202 	mla	r2, r9, r2, fp
 800c41c:	4492      	add	sl, r2
 800c41e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c422:	f84e 4b04 	str.w	r4, [lr], #4
 800c426:	f851 4b04 	ldr.w	r4, [r1], #4
 800c42a:	f8be 2000 	ldrh.w	r2, [lr]
 800c42e:	0c24      	lsrs	r4, r4, #16
 800c430:	fb09 2404 	mla	r4, r9, r4, r2
 800c434:	458c      	cmp	ip, r1
 800c436:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c43a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c43e:	d8e7      	bhi.n	800c410 <__multiply+0xfc>
 800c440:	9a01      	ldr	r2, [sp, #4]
 800c442:	50b4      	str	r4, [r6, r2]
 800c444:	3604      	adds	r6, #4
 800c446:	e7a3      	b.n	800c390 <__multiply+0x7c>
 800c448:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1a5      	bne.n	800c39c <__multiply+0x88>
 800c450:	3f01      	subs	r7, #1
 800c452:	e7a1      	b.n	800c398 <__multiply+0x84>
 800c454:	0801a8f4 	.word	0x0801a8f4
 800c458:	0801a9e8 	.word	0x0801a9e8

0800c45c <__pow5mult>:
 800c45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c460:	4615      	mov	r5, r2
 800c462:	f012 0203 	ands.w	r2, r2, #3
 800c466:	4606      	mov	r6, r0
 800c468:	460f      	mov	r7, r1
 800c46a:	d007      	beq.n	800c47c <__pow5mult+0x20>
 800c46c:	4c25      	ldr	r4, [pc, #148]	; (800c504 <__pow5mult+0xa8>)
 800c46e:	3a01      	subs	r2, #1
 800c470:	2300      	movs	r3, #0
 800c472:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c476:	f7ff fe55 	bl	800c124 <__multadd>
 800c47a:	4607      	mov	r7, r0
 800c47c:	10ad      	asrs	r5, r5, #2
 800c47e:	d03d      	beq.n	800c4fc <__pow5mult+0xa0>
 800c480:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c482:	b97c      	cbnz	r4, 800c4a4 <__pow5mult+0x48>
 800c484:	2010      	movs	r0, #16
 800c486:	f7ff fdb5 	bl	800bff4 <malloc>
 800c48a:	4602      	mov	r2, r0
 800c48c:	6270      	str	r0, [r6, #36]	; 0x24
 800c48e:	b928      	cbnz	r0, 800c49c <__pow5mult+0x40>
 800c490:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c494:	4b1c      	ldr	r3, [pc, #112]	; (800c508 <__pow5mult+0xac>)
 800c496:	481d      	ldr	r0, [pc, #116]	; (800c50c <__pow5mult+0xb0>)
 800c498:	f000 ff52 	bl	800d340 <__assert_func>
 800c49c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4a0:	6004      	str	r4, [r0, #0]
 800c4a2:	60c4      	str	r4, [r0, #12]
 800c4a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c4a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4ac:	b94c      	cbnz	r4, 800c4c2 <__pow5mult+0x66>
 800c4ae:	f240 2171 	movw	r1, #625	; 0x271
 800c4b2:	4630      	mov	r0, r6
 800c4b4:	f7ff ff18 	bl	800c2e8 <__i2b>
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4c0:	6003      	str	r3, [r0, #0]
 800c4c2:	f04f 0900 	mov.w	r9, #0
 800c4c6:	07eb      	lsls	r3, r5, #31
 800c4c8:	d50a      	bpl.n	800c4e0 <__pow5mult+0x84>
 800c4ca:	4639      	mov	r1, r7
 800c4cc:	4622      	mov	r2, r4
 800c4ce:	4630      	mov	r0, r6
 800c4d0:	f7ff ff20 	bl	800c314 <__multiply>
 800c4d4:	4680      	mov	r8, r0
 800c4d6:	4639      	mov	r1, r7
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f7ff fe01 	bl	800c0e0 <_Bfree>
 800c4de:	4647      	mov	r7, r8
 800c4e0:	106d      	asrs	r5, r5, #1
 800c4e2:	d00b      	beq.n	800c4fc <__pow5mult+0xa0>
 800c4e4:	6820      	ldr	r0, [r4, #0]
 800c4e6:	b938      	cbnz	r0, 800c4f8 <__pow5mult+0x9c>
 800c4e8:	4622      	mov	r2, r4
 800c4ea:	4621      	mov	r1, r4
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	f7ff ff11 	bl	800c314 <__multiply>
 800c4f2:	6020      	str	r0, [r4, #0]
 800c4f4:	f8c0 9000 	str.w	r9, [r0]
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	e7e4      	b.n	800c4c6 <__pow5mult+0x6a>
 800c4fc:	4638      	mov	r0, r7
 800c4fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c502:	bf00      	nop
 800c504:	0801ab38 	.word	0x0801ab38
 800c508:	0801a87e 	.word	0x0801a87e
 800c50c:	0801a9e8 	.word	0x0801a9e8

0800c510 <__lshift>:
 800c510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c514:	460c      	mov	r4, r1
 800c516:	4607      	mov	r7, r0
 800c518:	4691      	mov	r9, r2
 800c51a:	6923      	ldr	r3, [r4, #16]
 800c51c:	6849      	ldr	r1, [r1, #4]
 800c51e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c522:	68a3      	ldr	r3, [r4, #8]
 800c524:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c528:	f108 0601 	add.w	r6, r8, #1
 800c52c:	42b3      	cmp	r3, r6
 800c52e:	db0b      	blt.n	800c548 <__lshift+0x38>
 800c530:	4638      	mov	r0, r7
 800c532:	f7ff fd95 	bl	800c060 <_Balloc>
 800c536:	4605      	mov	r5, r0
 800c538:	b948      	cbnz	r0, 800c54e <__lshift+0x3e>
 800c53a:	4602      	mov	r2, r0
 800c53c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c540:	4b27      	ldr	r3, [pc, #156]	; (800c5e0 <__lshift+0xd0>)
 800c542:	4828      	ldr	r0, [pc, #160]	; (800c5e4 <__lshift+0xd4>)
 800c544:	f000 fefc 	bl	800d340 <__assert_func>
 800c548:	3101      	adds	r1, #1
 800c54a:	005b      	lsls	r3, r3, #1
 800c54c:	e7ee      	b.n	800c52c <__lshift+0x1c>
 800c54e:	2300      	movs	r3, #0
 800c550:	f100 0114 	add.w	r1, r0, #20
 800c554:	f100 0210 	add.w	r2, r0, #16
 800c558:	4618      	mov	r0, r3
 800c55a:	4553      	cmp	r3, sl
 800c55c:	db33      	blt.n	800c5c6 <__lshift+0xb6>
 800c55e:	6920      	ldr	r0, [r4, #16]
 800c560:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c564:	f104 0314 	add.w	r3, r4, #20
 800c568:	f019 091f 	ands.w	r9, r9, #31
 800c56c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c570:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c574:	d02b      	beq.n	800c5ce <__lshift+0xbe>
 800c576:	468a      	mov	sl, r1
 800c578:	2200      	movs	r2, #0
 800c57a:	f1c9 0e20 	rsb	lr, r9, #32
 800c57e:	6818      	ldr	r0, [r3, #0]
 800c580:	fa00 f009 	lsl.w	r0, r0, r9
 800c584:	4302      	orrs	r2, r0
 800c586:	f84a 2b04 	str.w	r2, [sl], #4
 800c58a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c58e:	459c      	cmp	ip, r3
 800c590:	fa22 f20e 	lsr.w	r2, r2, lr
 800c594:	d8f3      	bhi.n	800c57e <__lshift+0x6e>
 800c596:	ebac 0304 	sub.w	r3, ip, r4
 800c59a:	3b15      	subs	r3, #21
 800c59c:	f023 0303 	bic.w	r3, r3, #3
 800c5a0:	3304      	adds	r3, #4
 800c5a2:	f104 0015 	add.w	r0, r4, #21
 800c5a6:	4584      	cmp	ip, r0
 800c5a8:	bf38      	it	cc
 800c5aa:	2304      	movcc	r3, #4
 800c5ac:	50ca      	str	r2, [r1, r3]
 800c5ae:	b10a      	cbz	r2, 800c5b4 <__lshift+0xa4>
 800c5b0:	f108 0602 	add.w	r6, r8, #2
 800c5b4:	3e01      	subs	r6, #1
 800c5b6:	4638      	mov	r0, r7
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	612e      	str	r6, [r5, #16]
 800c5bc:	f7ff fd90 	bl	800c0e0 <_Bfree>
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5c6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	e7c5      	b.n	800c55a <__lshift+0x4a>
 800c5ce:	3904      	subs	r1, #4
 800c5d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5d4:	459c      	cmp	ip, r3
 800c5d6:	f841 2f04 	str.w	r2, [r1, #4]!
 800c5da:	d8f9      	bhi.n	800c5d0 <__lshift+0xc0>
 800c5dc:	e7ea      	b.n	800c5b4 <__lshift+0xa4>
 800c5de:	bf00      	nop
 800c5e0:	0801a8f4 	.word	0x0801a8f4
 800c5e4:	0801a9e8 	.word	0x0801a9e8

0800c5e8 <__mcmp>:
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	690a      	ldr	r2, [r1, #16]
 800c5ec:	6900      	ldr	r0, [r0, #16]
 800c5ee:	b530      	push	{r4, r5, lr}
 800c5f0:	1a80      	subs	r0, r0, r2
 800c5f2:	d10d      	bne.n	800c610 <__mcmp+0x28>
 800c5f4:	3314      	adds	r3, #20
 800c5f6:	3114      	adds	r1, #20
 800c5f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c5fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c600:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c604:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c608:	4295      	cmp	r5, r2
 800c60a:	d002      	beq.n	800c612 <__mcmp+0x2a>
 800c60c:	d304      	bcc.n	800c618 <__mcmp+0x30>
 800c60e:	2001      	movs	r0, #1
 800c610:	bd30      	pop	{r4, r5, pc}
 800c612:	42a3      	cmp	r3, r4
 800c614:	d3f4      	bcc.n	800c600 <__mcmp+0x18>
 800c616:	e7fb      	b.n	800c610 <__mcmp+0x28>
 800c618:	f04f 30ff 	mov.w	r0, #4294967295
 800c61c:	e7f8      	b.n	800c610 <__mcmp+0x28>
	...

0800c620 <__mdiff>:
 800c620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c624:	460c      	mov	r4, r1
 800c626:	4606      	mov	r6, r0
 800c628:	4611      	mov	r1, r2
 800c62a:	4620      	mov	r0, r4
 800c62c:	4692      	mov	sl, r2
 800c62e:	f7ff ffdb 	bl	800c5e8 <__mcmp>
 800c632:	1e05      	subs	r5, r0, #0
 800c634:	d111      	bne.n	800c65a <__mdiff+0x3a>
 800c636:	4629      	mov	r1, r5
 800c638:	4630      	mov	r0, r6
 800c63a:	f7ff fd11 	bl	800c060 <_Balloc>
 800c63e:	4602      	mov	r2, r0
 800c640:	b928      	cbnz	r0, 800c64e <__mdiff+0x2e>
 800c642:	f240 2132 	movw	r1, #562	; 0x232
 800c646:	4b3c      	ldr	r3, [pc, #240]	; (800c738 <__mdiff+0x118>)
 800c648:	483c      	ldr	r0, [pc, #240]	; (800c73c <__mdiff+0x11c>)
 800c64a:	f000 fe79 	bl	800d340 <__assert_func>
 800c64e:	2301      	movs	r3, #1
 800c650:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c654:	4610      	mov	r0, r2
 800c656:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c65a:	bfa4      	itt	ge
 800c65c:	4653      	movge	r3, sl
 800c65e:	46a2      	movge	sl, r4
 800c660:	4630      	mov	r0, r6
 800c662:	f8da 1004 	ldr.w	r1, [sl, #4]
 800c666:	bfa6      	itte	ge
 800c668:	461c      	movge	r4, r3
 800c66a:	2500      	movge	r5, #0
 800c66c:	2501      	movlt	r5, #1
 800c66e:	f7ff fcf7 	bl	800c060 <_Balloc>
 800c672:	4602      	mov	r2, r0
 800c674:	b918      	cbnz	r0, 800c67e <__mdiff+0x5e>
 800c676:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c67a:	4b2f      	ldr	r3, [pc, #188]	; (800c738 <__mdiff+0x118>)
 800c67c:	e7e4      	b.n	800c648 <__mdiff+0x28>
 800c67e:	f100 0814 	add.w	r8, r0, #20
 800c682:	f8da 7010 	ldr.w	r7, [sl, #16]
 800c686:	60c5      	str	r5, [r0, #12]
 800c688:	f04f 0c00 	mov.w	ip, #0
 800c68c:	f10a 0514 	add.w	r5, sl, #20
 800c690:	f10a 0010 	add.w	r0, sl, #16
 800c694:	46c2      	mov	sl, r8
 800c696:	6926      	ldr	r6, [r4, #16]
 800c698:	f104 0914 	add.w	r9, r4, #20
 800c69c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800c6a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c6a4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800c6a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c6ac:	fa1f f18b 	uxth.w	r1, fp
 800c6b0:	4461      	add	r1, ip
 800c6b2:	fa1f fc83 	uxth.w	ip, r3
 800c6b6:	0c1b      	lsrs	r3, r3, #16
 800c6b8:	eba1 010c 	sub.w	r1, r1, ip
 800c6bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c6c0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c6c4:	b289      	uxth	r1, r1
 800c6c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c6ca:	454e      	cmp	r6, r9
 800c6cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c6d0:	f84a 3b04 	str.w	r3, [sl], #4
 800c6d4:	d8e6      	bhi.n	800c6a4 <__mdiff+0x84>
 800c6d6:	1b33      	subs	r3, r6, r4
 800c6d8:	3b15      	subs	r3, #21
 800c6da:	f023 0303 	bic.w	r3, r3, #3
 800c6de:	3415      	adds	r4, #21
 800c6e0:	3304      	adds	r3, #4
 800c6e2:	42a6      	cmp	r6, r4
 800c6e4:	bf38      	it	cc
 800c6e6:	2304      	movcc	r3, #4
 800c6e8:	441d      	add	r5, r3
 800c6ea:	4443      	add	r3, r8
 800c6ec:	461e      	mov	r6, r3
 800c6ee:	462c      	mov	r4, r5
 800c6f0:	4574      	cmp	r4, lr
 800c6f2:	d30e      	bcc.n	800c712 <__mdiff+0xf2>
 800c6f4:	f10e 0103 	add.w	r1, lr, #3
 800c6f8:	1b49      	subs	r1, r1, r5
 800c6fa:	f021 0103 	bic.w	r1, r1, #3
 800c6fe:	3d03      	subs	r5, #3
 800c700:	45ae      	cmp	lr, r5
 800c702:	bf38      	it	cc
 800c704:	2100      	movcc	r1, #0
 800c706:	4419      	add	r1, r3
 800c708:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c70c:	b18b      	cbz	r3, 800c732 <__mdiff+0x112>
 800c70e:	6117      	str	r7, [r2, #16]
 800c710:	e7a0      	b.n	800c654 <__mdiff+0x34>
 800c712:	f854 8b04 	ldr.w	r8, [r4], #4
 800c716:	fa1f f188 	uxth.w	r1, r8
 800c71a:	4461      	add	r1, ip
 800c71c:	1408      	asrs	r0, r1, #16
 800c71e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800c722:	b289      	uxth	r1, r1
 800c724:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c728:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c72c:	f846 1b04 	str.w	r1, [r6], #4
 800c730:	e7de      	b.n	800c6f0 <__mdiff+0xd0>
 800c732:	3f01      	subs	r7, #1
 800c734:	e7e8      	b.n	800c708 <__mdiff+0xe8>
 800c736:	bf00      	nop
 800c738:	0801a8f4 	.word	0x0801a8f4
 800c73c:	0801a9e8 	.word	0x0801a9e8

0800c740 <__ulp>:
 800c740:	4b11      	ldr	r3, [pc, #68]	; (800c788 <__ulp+0x48>)
 800c742:	400b      	ands	r3, r1
 800c744:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	dd02      	ble.n	800c752 <__ulp+0x12>
 800c74c:	2000      	movs	r0, #0
 800c74e:	4619      	mov	r1, r3
 800c750:	4770      	bx	lr
 800c752:	425b      	negs	r3, r3
 800c754:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c758:	f04f 0000 	mov.w	r0, #0
 800c75c:	f04f 0100 	mov.w	r1, #0
 800c760:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c764:	da04      	bge.n	800c770 <__ulp+0x30>
 800c766:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c76a:	fa43 f102 	asr.w	r1, r3, r2
 800c76e:	4770      	bx	lr
 800c770:	f1a2 0314 	sub.w	r3, r2, #20
 800c774:	2b1e      	cmp	r3, #30
 800c776:	bfd6      	itet	le
 800c778:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c77c:	2301      	movgt	r3, #1
 800c77e:	fa22 f303 	lsrle.w	r3, r2, r3
 800c782:	4618      	mov	r0, r3
 800c784:	4770      	bx	lr
 800c786:	bf00      	nop
 800c788:	7ff00000 	.word	0x7ff00000

0800c78c <__b2d>:
 800c78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c790:	6907      	ldr	r7, [r0, #16]
 800c792:	f100 0914 	add.w	r9, r0, #20
 800c796:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800c79a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800c79e:	f1a7 0804 	sub.w	r8, r7, #4
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	f7ff fd52 	bl	800c24c <__hi0bits>
 800c7a8:	f1c0 0320 	rsb	r3, r0, #32
 800c7ac:	280a      	cmp	r0, #10
 800c7ae:	600b      	str	r3, [r1, #0]
 800c7b0:	491f      	ldr	r1, [pc, #124]	; (800c830 <__b2d+0xa4>)
 800c7b2:	dc17      	bgt.n	800c7e4 <__b2d+0x58>
 800c7b4:	45c1      	cmp	r9, r8
 800c7b6:	bf28      	it	cs
 800c7b8:	2200      	movcs	r2, #0
 800c7ba:	f1c0 0c0b 	rsb	ip, r0, #11
 800c7be:	fa26 f30c 	lsr.w	r3, r6, ip
 800c7c2:	bf38      	it	cc
 800c7c4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c7c8:	ea43 0501 	orr.w	r5, r3, r1
 800c7cc:	f100 0315 	add.w	r3, r0, #21
 800c7d0:	fa06 f303 	lsl.w	r3, r6, r3
 800c7d4:	fa22 f20c 	lsr.w	r2, r2, ip
 800c7d8:	ea43 0402 	orr.w	r4, r3, r2
 800c7dc:	4620      	mov	r0, r4
 800c7de:	4629      	mov	r1, r5
 800c7e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7e4:	45c1      	cmp	r9, r8
 800c7e6:	bf2e      	itee	cs
 800c7e8:	2200      	movcs	r2, #0
 800c7ea:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800c7ee:	f1a7 0808 	subcc.w	r8, r7, #8
 800c7f2:	f1b0 030b 	subs.w	r3, r0, #11
 800c7f6:	d016      	beq.n	800c826 <__b2d+0x9a>
 800c7f8:	f1c3 0720 	rsb	r7, r3, #32
 800c7fc:	fa22 f107 	lsr.w	r1, r2, r7
 800c800:	45c8      	cmp	r8, r9
 800c802:	fa06 f603 	lsl.w	r6, r6, r3
 800c806:	ea46 0601 	orr.w	r6, r6, r1
 800c80a:	bf94      	ite	ls
 800c80c:	2100      	movls	r1, #0
 800c80e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800c812:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800c816:	fa02 f003 	lsl.w	r0, r2, r3
 800c81a:	40f9      	lsrs	r1, r7
 800c81c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c820:	ea40 0401 	orr.w	r4, r0, r1
 800c824:	e7da      	b.n	800c7dc <__b2d+0x50>
 800c826:	4614      	mov	r4, r2
 800c828:	ea46 0501 	orr.w	r5, r6, r1
 800c82c:	e7d6      	b.n	800c7dc <__b2d+0x50>
 800c82e:	bf00      	nop
 800c830:	3ff00000 	.word	0x3ff00000

0800c834 <__d2b>:
 800c834:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c838:	2101      	movs	r1, #1
 800c83a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c83e:	4690      	mov	r8, r2
 800c840:	461d      	mov	r5, r3
 800c842:	f7ff fc0d 	bl	800c060 <_Balloc>
 800c846:	4604      	mov	r4, r0
 800c848:	b930      	cbnz	r0, 800c858 <__d2b+0x24>
 800c84a:	4602      	mov	r2, r0
 800c84c:	f240 310a 	movw	r1, #778	; 0x30a
 800c850:	4b24      	ldr	r3, [pc, #144]	; (800c8e4 <__d2b+0xb0>)
 800c852:	4825      	ldr	r0, [pc, #148]	; (800c8e8 <__d2b+0xb4>)
 800c854:	f000 fd74 	bl	800d340 <__assert_func>
 800c858:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c85c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c860:	bb2d      	cbnz	r5, 800c8ae <__d2b+0x7a>
 800c862:	9301      	str	r3, [sp, #4]
 800c864:	f1b8 0300 	subs.w	r3, r8, #0
 800c868:	d026      	beq.n	800c8b8 <__d2b+0x84>
 800c86a:	4668      	mov	r0, sp
 800c86c:	9300      	str	r3, [sp, #0]
 800c86e:	f7ff fd0d 	bl	800c28c <__lo0bits>
 800c872:	9900      	ldr	r1, [sp, #0]
 800c874:	b1f0      	cbz	r0, 800c8b4 <__d2b+0x80>
 800c876:	9a01      	ldr	r2, [sp, #4]
 800c878:	f1c0 0320 	rsb	r3, r0, #32
 800c87c:	fa02 f303 	lsl.w	r3, r2, r3
 800c880:	430b      	orrs	r3, r1
 800c882:	40c2      	lsrs	r2, r0
 800c884:	6163      	str	r3, [r4, #20]
 800c886:	9201      	str	r2, [sp, #4]
 800c888:	9b01      	ldr	r3, [sp, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	bf14      	ite	ne
 800c88e:	2102      	movne	r1, #2
 800c890:	2101      	moveq	r1, #1
 800c892:	61a3      	str	r3, [r4, #24]
 800c894:	6121      	str	r1, [r4, #16]
 800c896:	b1c5      	cbz	r5, 800c8ca <__d2b+0x96>
 800c898:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c89c:	4405      	add	r5, r0
 800c89e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c8a2:	603d      	str	r5, [r7, #0]
 800c8a4:	6030      	str	r0, [r6, #0]
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	b002      	add	sp, #8
 800c8aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8b2:	e7d6      	b.n	800c862 <__d2b+0x2e>
 800c8b4:	6161      	str	r1, [r4, #20]
 800c8b6:	e7e7      	b.n	800c888 <__d2b+0x54>
 800c8b8:	a801      	add	r0, sp, #4
 800c8ba:	f7ff fce7 	bl	800c28c <__lo0bits>
 800c8be:	2101      	movs	r1, #1
 800c8c0:	9b01      	ldr	r3, [sp, #4]
 800c8c2:	6121      	str	r1, [r4, #16]
 800c8c4:	6163      	str	r3, [r4, #20]
 800c8c6:	3020      	adds	r0, #32
 800c8c8:	e7e5      	b.n	800c896 <__d2b+0x62>
 800c8ca:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c8ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c8d2:	6038      	str	r0, [r7, #0]
 800c8d4:	6918      	ldr	r0, [r3, #16]
 800c8d6:	f7ff fcb9 	bl	800c24c <__hi0bits>
 800c8da:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c8de:	6031      	str	r1, [r6, #0]
 800c8e0:	e7e1      	b.n	800c8a6 <__d2b+0x72>
 800c8e2:	bf00      	nop
 800c8e4:	0801a8f4 	.word	0x0801a8f4
 800c8e8:	0801a9e8 	.word	0x0801a9e8

0800c8ec <__ratio>:
 800c8ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8f0:	4688      	mov	r8, r1
 800c8f2:	4669      	mov	r1, sp
 800c8f4:	4681      	mov	r9, r0
 800c8f6:	f7ff ff49 	bl	800c78c <__b2d>
 800c8fa:	460f      	mov	r7, r1
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	460d      	mov	r5, r1
 800c900:	4640      	mov	r0, r8
 800c902:	a901      	add	r1, sp, #4
 800c904:	f7ff ff42 	bl	800c78c <__b2d>
 800c908:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c90c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c910:	468b      	mov	fp, r1
 800c912:	eba3 0c02 	sub.w	ip, r3, r2
 800c916:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c91a:	1a9b      	subs	r3, r3, r2
 800c91c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c920:	2b00      	cmp	r3, #0
 800c922:	bfd5      	itete	le
 800c924:	460a      	movle	r2, r1
 800c926:	462a      	movgt	r2, r5
 800c928:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c92c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c930:	bfd8      	it	le
 800c932:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c936:	465b      	mov	r3, fp
 800c938:	4602      	mov	r2, r0
 800c93a:	4639      	mov	r1, r7
 800c93c:	4620      	mov	r0, r4
 800c93e:	f7f3 ff61 	bl	8000804 <__aeabi_ddiv>
 800c942:	b003      	add	sp, #12
 800c944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c948 <__copybits>:
 800c948:	3901      	subs	r1, #1
 800c94a:	b570      	push	{r4, r5, r6, lr}
 800c94c:	1149      	asrs	r1, r1, #5
 800c94e:	6914      	ldr	r4, [r2, #16]
 800c950:	3101      	adds	r1, #1
 800c952:	f102 0314 	add.w	r3, r2, #20
 800c956:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c95a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c95e:	1f05      	subs	r5, r0, #4
 800c960:	42a3      	cmp	r3, r4
 800c962:	d30c      	bcc.n	800c97e <__copybits+0x36>
 800c964:	1aa3      	subs	r3, r4, r2
 800c966:	3b11      	subs	r3, #17
 800c968:	f023 0303 	bic.w	r3, r3, #3
 800c96c:	3211      	adds	r2, #17
 800c96e:	42a2      	cmp	r2, r4
 800c970:	bf88      	it	hi
 800c972:	2300      	movhi	r3, #0
 800c974:	4418      	add	r0, r3
 800c976:	2300      	movs	r3, #0
 800c978:	4288      	cmp	r0, r1
 800c97a:	d305      	bcc.n	800c988 <__copybits+0x40>
 800c97c:	bd70      	pop	{r4, r5, r6, pc}
 800c97e:	f853 6b04 	ldr.w	r6, [r3], #4
 800c982:	f845 6f04 	str.w	r6, [r5, #4]!
 800c986:	e7eb      	b.n	800c960 <__copybits+0x18>
 800c988:	f840 3b04 	str.w	r3, [r0], #4
 800c98c:	e7f4      	b.n	800c978 <__copybits+0x30>

0800c98e <__any_on>:
 800c98e:	f100 0214 	add.w	r2, r0, #20
 800c992:	6900      	ldr	r0, [r0, #16]
 800c994:	114b      	asrs	r3, r1, #5
 800c996:	4298      	cmp	r0, r3
 800c998:	b510      	push	{r4, lr}
 800c99a:	db11      	blt.n	800c9c0 <__any_on+0x32>
 800c99c:	dd0a      	ble.n	800c9b4 <__any_on+0x26>
 800c99e:	f011 011f 	ands.w	r1, r1, #31
 800c9a2:	d007      	beq.n	800c9b4 <__any_on+0x26>
 800c9a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9a8:	fa24 f001 	lsr.w	r0, r4, r1
 800c9ac:	fa00 f101 	lsl.w	r1, r0, r1
 800c9b0:	428c      	cmp	r4, r1
 800c9b2:	d10b      	bne.n	800c9cc <__any_on+0x3e>
 800c9b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d803      	bhi.n	800c9c4 <__any_on+0x36>
 800c9bc:	2000      	movs	r0, #0
 800c9be:	bd10      	pop	{r4, pc}
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	e7f7      	b.n	800c9b4 <__any_on+0x26>
 800c9c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9c8:	2900      	cmp	r1, #0
 800c9ca:	d0f5      	beq.n	800c9b8 <__any_on+0x2a>
 800c9cc:	2001      	movs	r0, #1
 800c9ce:	e7f6      	b.n	800c9be <__any_on+0x30>

0800c9d0 <_calloc_r>:
 800c9d0:	b538      	push	{r3, r4, r5, lr}
 800c9d2:	fb02 f501 	mul.w	r5, r2, r1
 800c9d6:	4629      	mov	r1, r5
 800c9d8:	f000 f854 	bl	800ca84 <_malloc_r>
 800c9dc:	4604      	mov	r4, r0
 800c9de:	b118      	cbz	r0, 800c9e8 <_calloc_r+0x18>
 800c9e0:	462a      	mov	r2, r5
 800c9e2:	2100      	movs	r1, #0
 800c9e4:	f7fc fc82 	bl	80092ec <memset>
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	bd38      	pop	{r3, r4, r5, pc}

0800c9ec <_free_r>:
 800c9ec:	b538      	push	{r3, r4, r5, lr}
 800c9ee:	4605      	mov	r5, r0
 800c9f0:	2900      	cmp	r1, #0
 800c9f2:	d043      	beq.n	800ca7c <_free_r+0x90>
 800c9f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9f8:	1f0c      	subs	r4, r1, #4
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	bfb8      	it	lt
 800c9fe:	18e4      	addlt	r4, r4, r3
 800ca00:	f000 fe30 	bl	800d664 <__malloc_lock>
 800ca04:	4a1e      	ldr	r2, [pc, #120]	; (800ca80 <_free_r+0x94>)
 800ca06:	6813      	ldr	r3, [r2, #0]
 800ca08:	4610      	mov	r0, r2
 800ca0a:	b933      	cbnz	r3, 800ca1a <_free_r+0x2e>
 800ca0c:	6063      	str	r3, [r4, #4]
 800ca0e:	6014      	str	r4, [r2, #0]
 800ca10:	4628      	mov	r0, r5
 800ca12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca16:	f000 be2b 	b.w	800d670 <__malloc_unlock>
 800ca1a:	42a3      	cmp	r3, r4
 800ca1c:	d90a      	bls.n	800ca34 <_free_r+0x48>
 800ca1e:	6821      	ldr	r1, [r4, #0]
 800ca20:	1862      	adds	r2, r4, r1
 800ca22:	4293      	cmp	r3, r2
 800ca24:	bf01      	itttt	eq
 800ca26:	681a      	ldreq	r2, [r3, #0]
 800ca28:	685b      	ldreq	r3, [r3, #4]
 800ca2a:	1852      	addeq	r2, r2, r1
 800ca2c:	6022      	streq	r2, [r4, #0]
 800ca2e:	6063      	str	r3, [r4, #4]
 800ca30:	6004      	str	r4, [r0, #0]
 800ca32:	e7ed      	b.n	800ca10 <_free_r+0x24>
 800ca34:	461a      	mov	r2, r3
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	b10b      	cbz	r3, 800ca3e <_free_r+0x52>
 800ca3a:	42a3      	cmp	r3, r4
 800ca3c:	d9fa      	bls.n	800ca34 <_free_r+0x48>
 800ca3e:	6811      	ldr	r1, [r2, #0]
 800ca40:	1850      	adds	r0, r2, r1
 800ca42:	42a0      	cmp	r0, r4
 800ca44:	d10b      	bne.n	800ca5e <_free_r+0x72>
 800ca46:	6820      	ldr	r0, [r4, #0]
 800ca48:	4401      	add	r1, r0
 800ca4a:	1850      	adds	r0, r2, r1
 800ca4c:	4283      	cmp	r3, r0
 800ca4e:	6011      	str	r1, [r2, #0]
 800ca50:	d1de      	bne.n	800ca10 <_free_r+0x24>
 800ca52:	6818      	ldr	r0, [r3, #0]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	4401      	add	r1, r0
 800ca58:	6011      	str	r1, [r2, #0]
 800ca5a:	6053      	str	r3, [r2, #4]
 800ca5c:	e7d8      	b.n	800ca10 <_free_r+0x24>
 800ca5e:	d902      	bls.n	800ca66 <_free_r+0x7a>
 800ca60:	230c      	movs	r3, #12
 800ca62:	602b      	str	r3, [r5, #0]
 800ca64:	e7d4      	b.n	800ca10 <_free_r+0x24>
 800ca66:	6820      	ldr	r0, [r4, #0]
 800ca68:	1821      	adds	r1, r4, r0
 800ca6a:	428b      	cmp	r3, r1
 800ca6c:	bf01      	itttt	eq
 800ca6e:	6819      	ldreq	r1, [r3, #0]
 800ca70:	685b      	ldreq	r3, [r3, #4]
 800ca72:	1809      	addeq	r1, r1, r0
 800ca74:	6021      	streq	r1, [r4, #0]
 800ca76:	6063      	str	r3, [r4, #4]
 800ca78:	6054      	str	r4, [r2, #4]
 800ca7a:	e7c9      	b.n	800ca10 <_free_r+0x24>
 800ca7c:	bd38      	pop	{r3, r4, r5, pc}
 800ca7e:	bf00      	nop
 800ca80:	20000214 	.word	0x20000214

0800ca84 <_malloc_r>:
 800ca84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca86:	1ccd      	adds	r5, r1, #3
 800ca88:	f025 0503 	bic.w	r5, r5, #3
 800ca8c:	3508      	adds	r5, #8
 800ca8e:	2d0c      	cmp	r5, #12
 800ca90:	bf38      	it	cc
 800ca92:	250c      	movcc	r5, #12
 800ca94:	2d00      	cmp	r5, #0
 800ca96:	4606      	mov	r6, r0
 800ca98:	db01      	blt.n	800ca9e <_malloc_r+0x1a>
 800ca9a:	42a9      	cmp	r1, r5
 800ca9c:	d903      	bls.n	800caa6 <_malloc_r+0x22>
 800ca9e:	230c      	movs	r3, #12
 800caa0:	6033      	str	r3, [r6, #0]
 800caa2:	2000      	movs	r0, #0
 800caa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caa6:	f000 fddd 	bl	800d664 <__malloc_lock>
 800caaa:	4921      	ldr	r1, [pc, #132]	; (800cb30 <_malloc_r+0xac>)
 800caac:	680a      	ldr	r2, [r1, #0]
 800caae:	4614      	mov	r4, r2
 800cab0:	b99c      	cbnz	r4, 800cada <_malloc_r+0x56>
 800cab2:	4f20      	ldr	r7, [pc, #128]	; (800cb34 <_malloc_r+0xb0>)
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	b923      	cbnz	r3, 800cac2 <_malloc_r+0x3e>
 800cab8:	4621      	mov	r1, r4
 800caba:	4630      	mov	r0, r6
 800cabc:	f000 faf6 	bl	800d0ac <_sbrk_r>
 800cac0:	6038      	str	r0, [r7, #0]
 800cac2:	4629      	mov	r1, r5
 800cac4:	4630      	mov	r0, r6
 800cac6:	f000 faf1 	bl	800d0ac <_sbrk_r>
 800caca:	1c43      	adds	r3, r0, #1
 800cacc:	d123      	bne.n	800cb16 <_malloc_r+0x92>
 800cace:	230c      	movs	r3, #12
 800cad0:	4630      	mov	r0, r6
 800cad2:	6033      	str	r3, [r6, #0]
 800cad4:	f000 fdcc 	bl	800d670 <__malloc_unlock>
 800cad8:	e7e3      	b.n	800caa2 <_malloc_r+0x1e>
 800cada:	6823      	ldr	r3, [r4, #0]
 800cadc:	1b5b      	subs	r3, r3, r5
 800cade:	d417      	bmi.n	800cb10 <_malloc_r+0x8c>
 800cae0:	2b0b      	cmp	r3, #11
 800cae2:	d903      	bls.n	800caec <_malloc_r+0x68>
 800cae4:	6023      	str	r3, [r4, #0]
 800cae6:	441c      	add	r4, r3
 800cae8:	6025      	str	r5, [r4, #0]
 800caea:	e004      	b.n	800caf6 <_malloc_r+0x72>
 800caec:	6863      	ldr	r3, [r4, #4]
 800caee:	42a2      	cmp	r2, r4
 800caf0:	bf0c      	ite	eq
 800caf2:	600b      	streq	r3, [r1, #0]
 800caf4:	6053      	strne	r3, [r2, #4]
 800caf6:	4630      	mov	r0, r6
 800caf8:	f000 fdba 	bl	800d670 <__malloc_unlock>
 800cafc:	f104 000b 	add.w	r0, r4, #11
 800cb00:	1d23      	adds	r3, r4, #4
 800cb02:	f020 0007 	bic.w	r0, r0, #7
 800cb06:	1ac2      	subs	r2, r0, r3
 800cb08:	d0cc      	beq.n	800caa4 <_malloc_r+0x20>
 800cb0a:	1a1b      	subs	r3, r3, r0
 800cb0c:	50a3      	str	r3, [r4, r2]
 800cb0e:	e7c9      	b.n	800caa4 <_malloc_r+0x20>
 800cb10:	4622      	mov	r2, r4
 800cb12:	6864      	ldr	r4, [r4, #4]
 800cb14:	e7cc      	b.n	800cab0 <_malloc_r+0x2c>
 800cb16:	1cc4      	adds	r4, r0, #3
 800cb18:	f024 0403 	bic.w	r4, r4, #3
 800cb1c:	42a0      	cmp	r0, r4
 800cb1e:	d0e3      	beq.n	800cae8 <_malloc_r+0x64>
 800cb20:	1a21      	subs	r1, r4, r0
 800cb22:	4630      	mov	r0, r6
 800cb24:	f000 fac2 	bl	800d0ac <_sbrk_r>
 800cb28:	3001      	adds	r0, #1
 800cb2a:	d1dd      	bne.n	800cae8 <_malloc_r+0x64>
 800cb2c:	e7cf      	b.n	800cace <_malloc_r+0x4a>
 800cb2e:	bf00      	nop
 800cb30:	20000214 	.word	0x20000214
 800cb34:	20000218 	.word	0x20000218

0800cb38 <__ssputs_r>:
 800cb38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb3c:	688e      	ldr	r6, [r1, #8]
 800cb3e:	4682      	mov	sl, r0
 800cb40:	429e      	cmp	r6, r3
 800cb42:	460c      	mov	r4, r1
 800cb44:	4690      	mov	r8, r2
 800cb46:	461f      	mov	r7, r3
 800cb48:	d838      	bhi.n	800cbbc <__ssputs_r+0x84>
 800cb4a:	898a      	ldrh	r2, [r1, #12]
 800cb4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb50:	d032      	beq.n	800cbb8 <__ssputs_r+0x80>
 800cb52:	6825      	ldr	r5, [r4, #0]
 800cb54:	6909      	ldr	r1, [r1, #16]
 800cb56:	3301      	adds	r3, #1
 800cb58:	eba5 0901 	sub.w	r9, r5, r1
 800cb5c:	6965      	ldr	r5, [r4, #20]
 800cb5e:	444b      	add	r3, r9
 800cb60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb68:	106d      	asrs	r5, r5, #1
 800cb6a:	429d      	cmp	r5, r3
 800cb6c:	bf38      	it	cc
 800cb6e:	461d      	movcc	r5, r3
 800cb70:	0553      	lsls	r3, r2, #21
 800cb72:	d531      	bpl.n	800cbd8 <__ssputs_r+0xa0>
 800cb74:	4629      	mov	r1, r5
 800cb76:	f7ff ff85 	bl	800ca84 <_malloc_r>
 800cb7a:	4606      	mov	r6, r0
 800cb7c:	b950      	cbnz	r0, 800cb94 <__ssputs_r+0x5c>
 800cb7e:	230c      	movs	r3, #12
 800cb80:	f04f 30ff 	mov.w	r0, #4294967295
 800cb84:	f8ca 3000 	str.w	r3, [sl]
 800cb88:	89a3      	ldrh	r3, [r4, #12]
 800cb8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb8e:	81a3      	strh	r3, [r4, #12]
 800cb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb94:	464a      	mov	r2, r9
 800cb96:	6921      	ldr	r1, [r4, #16]
 800cb98:	f7ff fa54 	bl	800c044 <memcpy>
 800cb9c:	89a3      	ldrh	r3, [r4, #12]
 800cb9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cba6:	81a3      	strh	r3, [r4, #12]
 800cba8:	6126      	str	r6, [r4, #16]
 800cbaa:	444e      	add	r6, r9
 800cbac:	6026      	str	r6, [r4, #0]
 800cbae:	463e      	mov	r6, r7
 800cbb0:	6165      	str	r5, [r4, #20]
 800cbb2:	eba5 0509 	sub.w	r5, r5, r9
 800cbb6:	60a5      	str	r5, [r4, #8]
 800cbb8:	42be      	cmp	r6, r7
 800cbba:	d900      	bls.n	800cbbe <__ssputs_r+0x86>
 800cbbc:	463e      	mov	r6, r7
 800cbbe:	4632      	mov	r2, r6
 800cbc0:	4641      	mov	r1, r8
 800cbc2:	6820      	ldr	r0, [r4, #0]
 800cbc4:	f000 fd34 	bl	800d630 <memmove>
 800cbc8:	68a3      	ldr	r3, [r4, #8]
 800cbca:	6822      	ldr	r2, [r4, #0]
 800cbcc:	1b9b      	subs	r3, r3, r6
 800cbce:	4432      	add	r2, r6
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	60a3      	str	r3, [r4, #8]
 800cbd4:	6022      	str	r2, [r4, #0]
 800cbd6:	e7db      	b.n	800cb90 <__ssputs_r+0x58>
 800cbd8:	462a      	mov	r2, r5
 800cbda:	f000 fd4f 	bl	800d67c <_realloc_r>
 800cbde:	4606      	mov	r6, r0
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d1e1      	bne.n	800cba8 <__ssputs_r+0x70>
 800cbe4:	4650      	mov	r0, sl
 800cbe6:	6921      	ldr	r1, [r4, #16]
 800cbe8:	f7ff ff00 	bl	800c9ec <_free_r>
 800cbec:	e7c7      	b.n	800cb7e <__ssputs_r+0x46>
	...

0800cbf0 <_svfiprintf_r>:
 800cbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbf4:	4698      	mov	r8, r3
 800cbf6:	898b      	ldrh	r3, [r1, #12]
 800cbf8:	4607      	mov	r7, r0
 800cbfa:	061b      	lsls	r3, r3, #24
 800cbfc:	460d      	mov	r5, r1
 800cbfe:	4614      	mov	r4, r2
 800cc00:	b09d      	sub	sp, #116	; 0x74
 800cc02:	d50e      	bpl.n	800cc22 <_svfiprintf_r+0x32>
 800cc04:	690b      	ldr	r3, [r1, #16]
 800cc06:	b963      	cbnz	r3, 800cc22 <_svfiprintf_r+0x32>
 800cc08:	2140      	movs	r1, #64	; 0x40
 800cc0a:	f7ff ff3b 	bl	800ca84 <_malloc_r>
 800cc0e:	6028      	str	r0, [r5, #0]
 800cc10:	6128      	str	r0, [r5, #16]
 800cc12:	b920      	cbnz	r0, 800cc1e <_svfiprintf_r+0x2e>
 800cc14:	230c      	movs	r3, #12
 800cc16:	603b      	str	r3, [r7, #0]
 800cc18:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1c:	e0d1      	b.n	800cdc2 <_svfiprintf_r+0x1d2>
 800cc1e:	2340      	movs	r3, #64	; 0x40
 800cc20:	616b      	str	r3, [r5, #20]
 800cc22:	2300      	movs	r3, #0
 800cc24:	9309      	str	r3, [sp, #36]	; 0x24
 800cc26:	2320      	movs	r3, #32
 800cc28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc2c:	2330      	movs	r3, #48	; 0x30
 800cc2e:	f04f 0901 	mov.w	r9, #1
 800cc32:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cddc <_svfiprintf_r+0x1ec>
 800cc3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc3e:	4623      	mov	r3, r4
 800cc40:	469a      	mov	sl, r3
 800cc42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc46:	b10a      	cbz	r2, 800cc4c <_svfiprintf_r+0x5c>
 800cc48:	2a25      	cmp	r2, #37	; 0x25
 800cc4a:	d1f9      	bne.n	800cc40 <_svfiprintf_r+0x50>
 800cc4c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc50:	d00b      	beq.n	800cc6a <_svfiprintf_r+0x7a>
 800cc52:	465b      	mov	r3, fp
 800cc54:	4622      	mov	r2, r4
 800cc56:	4629      	mov	r1, r5
 800cc58:	4638      	mov	r0, r7
 800cc5a:	f7ff ff6d 	bl	800cb38 <__ssputs_r>
 800cc5e:	3001      	adds	r0, #1
 800cc60:	f000 80aa 	beq.w	800cdb8 <_svfiprintf_r+0x1c8>
 800cc64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc66:	445a      	add	r2, fp
 800cc68:	9209      	str	r2, [sp, #36]	; 0x24
 800cc6a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	f000 80a2 	beq.w	800cdb8 <_svfiprintf_r+0x1c8>
 800cc74:	2300      	movs	r3, #0
 800cc76:	f04f 32ff 	mov.w	r2, #4294967295
 800cc7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc7e:	f10a 0a01 	add.w	sl, sl, #1
 800cc82:	9304      	str	r3, [sp, #16]
 800cc84:	9307      	str	r3, [sp, #28]
 800cc86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc8a:	931a      	str	r3, [sp, #104]	; 0x68
 800cc8c:	4654      	mov	r4, sl
 800cc8e:	2205      	movs	r2, #5
 800cc90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc94:	4851      	ldr	r0, [pc, #324]	; (800cddc <_svfiprintf_r+0x1ec>)
 800cc96:	f7ff f9c7 	bl	800c028 <memchr>
 800cc9a:	9a04      	ldr	r2, [sp, #16]
 800cc9c:	b9d8      	cbnz	r0, 800ccd6 <_svfiprintf_r+0xe6>
 800cc9e:	06d0      	lsls	r0, r2, #27
 800cca0:	bf44      	itt	mi
 800cca2:	2320      	movmi	r3, #32
 800cca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cca8:	0711      	lsls	r1, r2, #28
 800ccaa:	bf44      	itt	mi
 800ccac:	232b      	movmi	r3, #43	; 0x2b
 800ccae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccb2:	f89a 3000 	ldrb.w	r3, [sl]
 800ccb6:	2b2a      	cmp	r3, #42	; 0x2a
 800ccb8:	d015      	beq.n	800cce6 <_svfiprintf_r+0xf6>
 800ccba:	4654      	mov	r4, sl
 800ccbc:	2000      	movs	r0, #0
 800ccbe:	f04f 0c0a 	mov.w	ip, #10
 800ccc2:	9a07      	ldr	r2, [sp, #28]
 800ccc4:	4621      	mov	r1, r4
 800ccc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccca:	3b30      	subs	r3, #48	; 0x30
 800cccc:	2b09      	cmp	r3, #9
 800ccce:	d94e      	bls.n	800cd6e <_svfiprintf_r+0x17e>
 800ccd0:	b1b0      	cbz	r0, 800cd00 <_svfiprintf_r+0x110>
 800ccd2:	9207      	str	r2, [sp, #28]
 800ccd4:	e014      	b.n	800cd00 <_svfiprintf_r+0x110>
 800ccd6:	eba0 0308 	sub.w	r3, r0, r8
 800ccda:	fa09 f303 	lsl.w	r3, r9, r3
 800ccde:	4313      	orrs	r3, r2
 800cce0:	46a2      	mov	sl, r4
 800cce2:	9304      	str	r3, [sp, #16]
 800cce4:	e7d2      	b.n	800cc8c <_svfiprintf_r+0x9c>
 800cce6:	9b03      	ldr	r3, [sp, #12]
 800cce8:	1d19      	adds	r1, r3, #4
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	9103      	str	r1, [sp, #12]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	bfbb      	ittet	lt
 800ccf2:	425b      	neglt	r3, r3
 800ccf4:	f042 0202 	orrlt.w	r2, r2, #2
 800ccf8:	9307      	strge	r3, [sp, #28]
 800ccfa:	9307      	strlt	r3, [sp, #28]
 800ccfc:	bfb8      	it	lt
 800ccfe:	9204      	strlt	r2, [sp, #16]
 800cd00:	7823      	ldrb	r3, [r4, #0]
 800cd02:	2b2e      	cmp	r3, #46	; 0x2e
 800cd04:	d10c      	bne.n	800cd20 <_svfiprintf_r+0x130>
 800cd06:	7863      	ldrb	r3, [r4, #1]
 800cd08:	2b2a      	cmp	r3, #42	; 0x2a
 800cd0a:	d135      	bne.n	800cd78 <_svfiprintf_r+0x188>
 800cd0c:	9b03      	ldr	r3, [sp, #12]
 800cd0e:	3402      	adds	r4, #2
 800cd10:	1d1a      	adds	r2, r3, #4
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	9203      	str	r2, [sp, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	bfb8      	it	lt
 800cd1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd1e:	9305      	str	r3, [sp, #20]
 800cd20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cdec <_svfiprintf_r+0x1fc>
 800cd24:	2203      	movs	r2, #3
 800cd26:	4650      	mov	r0, sl
 800cd28:	7821      	ldrb	r1, [r4, #0]
 800cd2a:	f7ff f97d 	bl	800c028 <memchr>
 800cd2e:	b140      	cbz	r0, 800cd42 <_svfiprintf_r+0x152>
 800cd30:	2340      	movs	r3, #64	; 0x40
 800cd32:	eba0 000a 	sub.w	r0, r0, sl
 800cd36:	fa03 f000 	lsl.w	r0, r3, r0
 800cd3a:	9b04      	ldr	r3, [sp, #16]
 800cd3c:	3401      	adds	r4, #1
 800cd3e:	4303      	orrs	r3, r0
 800cd40:	9304      	str	r3, [sp, #16]
 800cd42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd46:	2206      	movs	r2, #6
 800cd48:	4825      	ldr	r0, [pc, #148]	; (800cde0 <_svfiprintf_r+0x1f0>)
 800cd4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd4e:	f7ff f96b 	bl	800c028 <memchr>
 800cd52:	2800      	cmp	r0, #0
 800cd54:	d038      	beq.n	800cdc8 <_svfiprintf_r+0x1d8>
 800cd56:	4b23      	ldr	r3, [pc, #140]	; (800cde4 <_svfiprintf_r+0x1f4>)
 800cd58:	bb1b      	cbnz	r3, 800cda2 <_svfiprintf_r+0x1b2>
 800cd5a:	9b03      	ldr	r3, [sp, #12]
 800cd5c:	3307      	adds	r3, #7
 800cd5e:	f023 0307 	bic.w	r3, r3, #7
 800cd62:	3308      	adds	r3, #8
 800cd64:	9303      	str	r3, [sp, #12]
 800cd66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd68:	4433      	add	r3, r6
 800cd6a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd6c:	e767      	b.n	800cc3e <_svfiprintf_r+0x4e>
 800cd6e:	460c      	mov	r4, r1
 800cd70:	2001      	movs	r0, #1
 800cd72:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd76:	e7a5      	b.n	800ccc4 <_svfiprintf_r+0xd4>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	f04f 0c0a 	mov.w	ip, #10
 800cd7e:	4619      	mov	r1, r3
 800cd80:	3401      	adds	r4, #1
 800cd82:	9305      	str	r3, [sp, #20]
 800cd84:	4620      	mov	r0, r4
 800cd86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd8a:	3a30      	subs	r2, #48	; 0x30
 800cd8c:	2a09      	cmp	r2, #9
 800cd8e:	d903      	bls.n	800cd98 <_svfiprintf_r+0x1a8>
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d0c5      	beq.n	800cd20 <_svfiprintf_r+0x130>
 800cd94:	9105      	str	r1, [sp, #20]
 800cd96:	e7c3      	b.n	800cd20 <_svfiprintf_r+0x130>
 800cd98:	4604      	mov	r4, r0
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cda0:	e7f0      	b.n	800cd84 <_svfiprintf_r+0x194>
 800cda2:	ab03      	add	r3, sp, #12
 800cda4:	9300      	str	r3, [sp, #0]
 800cda6:	462a      	mov	r2, r5
 800cda8:	4638      	mov	r0, r7
 800cdaa:	4b0f      	ldr	r3, [pc, #60]	; (800cde8 <_svfiprintf_r+0x1f8>)
 800cdac:	a904      	add	r1, sp, #16
 800cdae:	f7fc fb43 	bl	8009438 <_printf_float>
 800cdb2:	1c42      	adds	r2, r0, #1
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	d1d6      	bne.n	800cd66 <_svfiprintf_r+0x176>
 800cdb8:	89ab      	ldrh	r3, [r5, #12]
 800cdba:	065b      	lsls	r3, r3, #25
 800cdbc:	f53f af2c 	bmi.w	800cc18 <_svfiprintf_r+0x28>
 800cdc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdc2:	b01d      	add	sp, #116	; 0x74
 800cdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc8:	ab03      	add	r3, sp, #12
 800cdca:	9300      	str	r3, [sp, #0]
 800cdcc:	462a      	mov	r2, r5
 800cdce:	4638      	mov	r0, r7
 800cdd0:	4b05      	ldr	r3, [pc, #20]	; (800cde8 <_svfiprintf_r+0x1f8>)
 800cdd2:	a904      	add	r1, sp, #16
 800cdd4:	f7fc fdcc 	bl	8009970 <_printf_i>
 800cdd8:	e7eb      	b.n	800cdb2 <_svfiprintf_r+0x1c2>
 800cdda:	bf00      	nop
 800cddc:	0801ab44 	.word	0x0801ab44
 800cde0:	0801ab4e 	.word	0x0801ab4e
 800cde4:	08009439 	.word	0x08009439
 800cde8:	0800cb39 	.word	0x0800cb39
 800cdec:	0801ab4a 	.word	0x0801ab4a

0800cdf0 <__sfputc_r>:
 800cdf0:	6893      	ldr	r3, [r2, #8]
 800cdf2:	b410      	push	{r4}
 800cdf4:	3b01      	subs	r3, #1
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	6093      	str	r3, [r2, #8]
 800cdfa:	da07      	bge.n	800ce0c <__sfputc_r+0x1c>
 800cdfc:	6994      	ldr	r4, [r2, #24]
 800cdfe:	42a3      	cmp	r3, r4
 800ce00:	db01      	blt.n	800ce06 <__sfputc_r+0x16>
 800ce02:	290a      	cmp	r1, #10
 800ce04:	d102      	bne.n	800ce0c <__sfputc_r+0x1c>
 800ce06:	bc10      	pop	{r4}
 800ce08:	f000 b9ba 	b.w	800d180 <__swbuf_r>
 800ce0c:	6813      	ldr	r3, [r2, #0]
 800ce0e:	1c58      	adds	r0, r3, #1
 800ce10:	6010      	str	r0, [r2, #0]
 800ce12:	7019      	strb	r1, [r3, #0]
 800ce14:	4608      	mov	r0, r1
 800ce16:	bc10      	pop	{r4}
 800ce18:	4770      	bx	lr

0800ce1a <__sfputs_r>:
 800ce1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1c:	4606      	mov	r6, r0
 800ce1e:	460f      	mov	r7, r1
 800ce20:	4614      	mov	r4, r2
 800ce22:	18d5      	adds	r5, r2, r3
 800ce24:	42ac      	cmp	r4, r5
 800ce26:	d101      	bne.n	800ce2c <__sfputs_r+0x12>
 800ce28:	2000      	movs	r0, #0
 800ce2a:	e007      	b.n	800ce3c <__sfputs_r+0x22>
 800ce2c:	463a      	mov	r2, r7
 800ce2e:	4630      	mov	r0, r6
 800ce30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce34:	f7ff ffdc 	bl	800cdf0 <__sfputc_r>
 800ce38:	1c43      	adds	r3, r0, #1
 800ce3a:	d1f3      	bne.n	800ce24 <__sfputs_r+0xa>
 800ce3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce40 <_vfiprintf_r>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	460d      	mov	r5, r1
 800ce46:	4614      	mov	r4, r2
 800ce48:	4698      	mov	r8, r3
 800ce4a:	4606      	mov	r6, r0
 800ce4c:	b09d      	sub	sp, #116	; 0x74
 800ce4e:	b118      	cbz	r0, 800ce58 <_vfiprintf_r+0x18>
 800ce50:	6983      	ldr	r3, [r0, #24]
 800ce52:	b90b      	cbnz	r3, 800ce58 <_vfiprintf_r+0x18>
 800ce54:	f7fe fcc2 	bl	800b7dc <__sinit>
 800ce58:	4b89      	ldr	r3, [pc, #548]	; (800d080 <_vfiprintf_r+0x240>)
 800ce5a:	429d      	cmp	r5, r3
 800ce5c:	d11b      	bne.n	800ce96 <_vfiprintf_r+0x56>
 800ce5e:	6875      	ldr	r5, [r6, #4]
 800ce60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce62:	07d9      	lsls	r1, r3, #31
 800ce64:	d405      	bmi.n	800ce72 <_vfiprintf_r+0x32>
 800ce66:	89ab      	ldrh	r3, [r5, #12]
 800ce68:	059a      	lsls	r2, r3, #22
 800ce6a:	d402      	bmi.n	800ce72 <_vfiprintf_r+0x32>
 800ce6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce6e:	f7ff f8be 	bl	800bfee <__retarget_lock_acquire_recursive>
 800ce72:	89ab      	ldrh	r3, [r5, #12]
 800ce74:	071b      	lsls	r3, r3, #28
 800ce76:	d501      	bpl.n	800ce7c <_vfiprintf_r+0x3c>
 800ce78:	692b      	ldr	r3, [r5, #16]
 800ce7a:	b9eb      	cbnz	r3, 800ceb8 <_vfiprintf_r+0x78>
 800ce7c:	4629      	mov	r1, r5
 800ce7e:	4630      	mov	r0, r6
 800ce80:	f000 f9f0 	bl	800d264 <__swsetup_r>
 800ce84:	b1c0      	cbz	r0, 800ceb8 <_vfiprintf_r+0x78>
 800ce86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce88:	07dc      	lsls	r4, r3, #31
 800ce8a:	d50e      	bpl.n	800ceaa <_vfiprintf_r+0x6a>
 800ce8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce90:	b01d      	add	sp, #116	; 0x74
 800ce92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce96:	4b7b      	ldr	r3, [pc, #492]	; (800d084 <_vfiprintf_r+0x244>)
 800ce98:	429d      	cmp	r5, r3
 800ce9a:	d101      	bne.n	800cea0 <_vfiprintf_r+0x60>
 800ce9c:	68b5      	ldr	r5, [r6, #8]
 800ce9e:	e7df      	b.n	800ce60 <_vfiprintf_r+0x20>
 800cea0:	4b79      	ldr	r3, [pc, #484]	; (800d088 <_vfiprintf_r+0x248>)
 800cea2:	429d      	cmp	r5, r3
 800cea4:	bf08      	it	eq
 800cea6:	68f5      	ldreq	r5, [r6, #12]
 800cea8:	e7da      	b.n	800ce60 <_vfiprintf_r+0x20>
 800ceaa:	89ab      	ldrh	r3, [r5, #12]
 800ceac:	0598      	lsls	r0, r3, #22
 800ceae:	d4ed      	bmi.n	800ce8c <_vfiprintf_r+0x4c>
 800ceb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ceb2:	f7ff f89d 	bl	800bff0 <__retarget_lock_release_recursive>
 800ceb6:	e7e9      	b.n	800ce8c <_vfiprintf_r+0x4c>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	9309      	str	r3, [sp, #36]	; 0x24
 800cebc:	2320      	movs	r3, #32
 800cebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cec2:	2330      	movs	r3, #48	; 0x30
 800cec4:	f04f 0901 	mov.w	r9, #1
 800cec8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cecc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800d08c <_vfiprintf_r+0x24c>
 800ced0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ced4:	4623      	mov	r3, r4
 800ced6:	469a      	mov	sl, r3
 800ced8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cedc:	b10a      	cbz	r2, 800cee2 <_vfiprintf_r+0xa2>
 800cede:	2a25      	cmp	r2, #37	; 0x25
 800cee0:	d1f9      	bne.n	800ced6 <_vfiprintf_r+0x96>
 800cee2:	ebba 0b04 	subs.w	fp, sl, r4
 800cee6:	d00b      	beq.n	800cf00 <_vfiprintf_r+0xc0>
 800cee8:	465b      	mov	r3, fp
 800ceea:	4622      	mov	r2, r4
 800ceec:	4629      	mov	r1, r5
 800ceee:	4630      	mov	r0, r6
 800cef0:	f7ff ff93 	bl	800ce1a <__sfputs_r>
 800cef4:	3001      	adds	r0, #1
 800cef6:	f000 80aa 	beq.w	800d04e <_vfiprintf_r+0x20e>
 800cefa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cefc:	445a      	add	r2, fp
 800cefe:	9209      	str	r2, [sp, #36]	; 0x24
 800cf00:	f89a 3000 	ldrb.w	r3, [sl]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f000 80a2 	beq.w	800d04e <_vfiprintf_r+0x20e>
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf14:	f10a 0a01 	add.w	sl, sl, #1
 800cf18:	9304      	str	r3, [sp, #16]
 800cf1a:	9307      	str	r3, [sp, #28]
 800cf1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf20:	931a      	str	r3, [sp, #104]	; 0x68
 800cf22:	4654      	mov	r4, sl
 800cf24:	2205      	movs	r2, #5
 800cf26:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf2a:	4858      	ldr	r0, [pc, #352]	; (800d08c <_vfiprintf_r+0x24c>)
 800cf2c:	f7ff f87c 	bl	800c028 <memchr>
 800cf30:	9a04      	ldr	r2, [sp, #16]
 800cf32:	b9d8      	cbnz	r0, 800cf6c <_vfiprintf_r+0x12c>
 800cf34:	06d1      	lsls	r1, r2, #27
 800cf36:	bf44      	itt	mi
 800cf38:	2320      	movmi	r3, #32
 800cf3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf3e:	0713      	lsls	r3, r2, #28
 800cf40:	bf44      	itt	mi
 800cf42:	232b      	movmi	r3, #43	; 0x2b
 800cf44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf48:	f89a 3000 	ldrb.w	r3, [sl]
 800cf4c:	2b2a      	cmp	r3, #42	; 0x2a
 800cf4e:	d015      	beq.n	800cf7c <_vfiprintf_r+0x13c>
 800cf50:	4654      	mov	r4, sl
 800cf52:	2000      	movs	r0, #0
 800cf54:	f04f 0c0a 	mov.w	ip, #10
 800cf58:	9a07      	ldr	r2, [sp, #28]
 800cf5a:	4621      	mov	r1, r4
 800cf5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf60:	3b30      	subs	r3, #48	; 0x30
 800cf62:	2b09      	cmp	r3, #9
 800cf64:	d94e      	bls.n	800d004 <_vfiprintf_r+0x1c4>
 800cf66:	b1b0      	cbz	r0, 800cf96 <_vfiprintf_r+0x156>
 800cf68:	9207      	str	r2, [sp, #28]
 800cf6a:	e014      	b.n	800cf96 <_vfiprintf_r+0x156>
 800cf6c:	eba0 0308 	sub.w	r3, r0, r8
 800cf70:	fa09 f303 	lsl.w	r3, r9, r3
 800cf74:	4313      	orrs	r3, r2
 800cf76:	46a2      	mov	sl, r4
 800cf78:	9304      	str	r3, [sp, #16]
 800cf7a:	e7d2      	b.n	800cf22 <_vfiprintf_r+0xe2>
 800cf7c:	9b03      	ldr	r3, [sp, #12]
 800cf7e:	1d19      	adds	r1, r3, #4
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	9103      	str	r1, [sp, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	bfbb      	ittet	lt
 800cf88:	425b      	neglt	r3, r3
 800cf8a:	f042 0202 	orrlt.w	r2, r2, #2
 800cf8e:	9307      	strge	r3, [sp, #28]
 800cf90:	9307      	strlt	r3, [sp, #28]
 800cf92:	bfb8      	it	lt
 800cf94:	9204      	strlt	r2, [sp, #16]
 800cf96:	7823      	ldrb	r3, [r4, #0]
 800cf98:	2b2e      	cmp	r3, #46	; 0x2e
 800cf9a:	d10c      	bne.n	800cfb6 <_vfiprintf_r+0x176>
 800cf9c:	7863      	ldrb	r3, [r4, #1]
 800cf9e:	2b2a      	cmp	r3, #42	; 0x2a
 800cfa0:	d135      	bne.n	800d00e <_vfiprintf_r+0x1ce>
 800cfa2:	9b03      	ldr	r3, [sp, #12]
 800cfa4:	3402      	adds	r4, #2
 800cfa6:	1d1a      	adds	r2, r3, #4
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	9203      	str	r2, [sp, #12]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	bfb8      	it	lt
 800cfb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800cfb4:	9305      	str	r3, [sp, #20]
 800cfb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d09c <_vfiprintf_r+0x25c>
 800cfba:	2203      	movs	r2, #3
 800cfbc:	4650      	mov	r0, sl
 800cfbe:	7821      	ldrb	r1, [r4, #0]
 800cfc0:	f7ff f832 	bl	800c028 <memchr>
 800cfc4:	b140      	cbz	r0, 800cfd8 <_vfiprintf_r+0x198>
 800cfc6:	2340      	movs	r3, #64	; 0x40
 800cfc8:	eba0 000a 	sub.w	r0, r0, sl
 800cfcc:	fa03 f000 	lsl.w	r0, r3, r0
 800cfd0:	9b04      	ldr	r3, [sp, #16]
 800cfd2:	3401      	adds	r4, #1
 800cfd4:	4303      	orrs	r3, r0
 800cfd6:	9304      	str	r3, [sp, #16]
 800cfd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfdc:	2206      	movs	r2, #6
 800cfde:	482c      	ldr	r0, [pc, #176]	; (800d090 <_vfiprintf_r+0x250>)
 800cfe0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfe4:	f7ff f820 	bl	800c028 <memchr>
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	d03f      	beq.n	800d06c <_vfiprintf_r+0x22c>
 800cfec:	4b29      	ldr	r3, [pc, #164]	; (800d094 <_vfiprintf_r+0x254>)
 800cfee:	bb1b      	cbnz	r3, 800d038 <_vfiprintf_r+0x1f8>
 800cff0:	9b03      	ldr	r3, [sp, #12]
 800cff2:	3307      	adds	r3, #7
 800cff4:	f023 0307 	bic.w	r3, r3, #7
 800cff8:	3308      	adds	r3, #8
 800cffa:	9303      	str	r3, [sp, #12]
 800cffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cffe:	443b      	add	r3, r7
 800d000:	9309      	str	r3, [sp, #36]	; 0x24
 800d002:	e767      	b.n	800ced4 <_vfiprintf_r+0x94>
 800d004:	460c      	mov	r4, r1
 800d006:	2001      	movs	r0, #1
 800d008:	fb0c 3202 	mla	r2, ip, r2, r3
 800d00c:	e7a5      	b.n	800cf5a <_vfiprintf_r+0x11a>
 800d00e:	2300      	movs	r3, #0
 800d010:	f04f 0c0a 	mov.w	ip, #10
 800d014:	4619      	mov	r1, r3
 800d016:	3401      	adds	r4, #1
 800d018:	9305      	str	r3, [sp, #20]
 800d01a:	4620      	mov	r0, r4
 800d01c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d020:	3a30      	subs	r2, #48	; 0x30
 800d022:	2a09      	cmp	r2, #9
 800d024:	d903      	bls.n	800d02e <_vfiprintf_r+0x1ee>
 800d026:	2b00      	cmp	r3, #0
 800d028:	d0c5      	beq.n	800cfb6 <_vfiprintf_r+0x176>
 800d02a:	9105      	str	r1, [sp, #20]
 800d02c:	e7c3      	b.n	800cfb6 <_vfiprintf_r+0x176>
 800d02e:	4604      	mov	r4, r0
 800d030:	2301      	movs	r3, #1
 800d032:	fb0c 2101 	mla	r1, ip, r1, r2
 800d036:	e7f0      	b.n	800d01a <_vfiprintf_r+0x1da>
 800d038:	ab03      	add	r3, sp, #12
 800d03a:	9300      	str	r3, [sp, #0]
 800d03c:	462a      	mov	r2, r5
 800d03e:	4630      	mov	r0, r6
 800d040:	4b15      	ldr	r3, [pc, #84]	; (800d098 <_vfiprintf_r+0x258>)
 800d042:	a904      	add	r1, sp, #16
 800d044:	f7fc f9f8 	bl	8009438 <_printf_float>
 800d048:	4607      	mov	r7, r0
 800d04a:	1c78      	adds	r0, r7, #1
 800d04c:	d1d6      	bne.n	800cffc <_vfiprintf_r+0x1bc>
 800d04e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d050:	07d9      	lsls	r1, r3, #31
 800d052:	d405      	bmi.n	800d060 <_vfiprintf_r+0x220>
 800d054:	89ab      	ldrh	r3, [r5, #12]
 800d056:	059a      	lsls	r2, r3, #22
 800d058:	d402      	bmi.n	800d060 <_vfiprintf_r+0x220>
 800d05a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d05c:	f7fe ffc8 	bl	800bff0 <__retarget_lock_release_recursive>
 800d060:	89ab      	ldrh	r3, [r5, #12]
 800d062:	065b      	lsls	r3, r3, #25
 800d064:	f53f af12 	bmi.w	800ce8c <_vfiprintf_r+0x4c>
 800d068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d06a:	e711      	b.n	800ce90 <_vfiprintf_r+0x50>
 800d06c:	ab03      	add	r3, sp, #12
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	462a      	mov	r2, r5
 800d072:	4630      	mov	r0, r6
 800d074:	4b08      	ldr	r3, [pc, #32]	; (800d098 <_vfiprintf_r+0x258>)
 800d076:	a904      	add	r1, sp, #16
 800d078:	f7fc fc7a 	bl	8009970 <_printf_i>
 800d07c:	e7e4      	b.n	800d048 <_vfiprintf_r+0x208>
 800d07e:	bf00      	nop
 800d080:	0801a928 	.word	0x0801a928
 800d084:	0801a948 	.word	0x0801a948
 800d088:	0801a908 	.word	0x0801a908
 800d08c:	0801ab44 	.word	0x0801ab44
 800d090:	0801ab4e 	.word	0x0801ab4e
 800d094:	08009439 	.word	0x08009439
 800d098:	0800ce1b 	.word	0x0800ce1b
 800d09c:	0801ab4a 	.word	0x0801ab4a

0800d0a0 <nan>:
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	4901      	ldr	r1, [pc, #4]	; (800d0a8 <nan+0x8>)
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	7ff80000 	.word	0x7ff80000

0800d0ac <_sbrk_r>:
 800d0ac:	b538      	push	{r3, r4, r5, lr}
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	4d05      	ldr	r5, [pc, #20]	; (800d0c8 <_sbrk_r+0x1c>)
 800d0b2:	4604      	mov	r4, r0
 800d0b4:	4608      	mov	r0, r1
 800d0b6:	602b      	str	r3, [r5, #0]
 800d0b8:	f7f4 ff1a 	bl	8001ef0 <_sbrk>
 800d0bc:	1c43      	adds	r3, r0, #1
 800d0be:	d102      	bne.n	800d0c6 <_sbrk_r+0x1a>
 800d0c0:	682b      	ldr	r3, [r5, #0]
 800d0c2:	b103      	cbz	r3, 800d0c6 <_sbrk_r+0x1a>
 800d0c4:	6023      	str	r3, [r4, #0]
 800d0c6:	bd38      	pop	{r3, r4, r5, pc}
 800d0c8:	20000440 	.word	0x20000440

0800d0cc <nanf>:
 800d0cc:	4800      	ldr	r0, [pc, #0]	; (800d0d0 <nanf+0x4>)
 800d0ce:	4770      	bx	lr
 800d0d0:	7fc00000 	.word	0x7fc00000

0800d0d4 <__sread>:
 800d0d4:	b510      	push	{r4, lr}
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0dc:	f000 faf4 	bl	800d6c8 <_read_r>
 800d0e0:	2800      	cmp	r0, #0
 800d0e2:	bfab      	itete	ge
 800d0e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0e6:	89a3      	ldrhlt	r3, [r4, #12]
 800d0e8:	181b      	addge	r3, r3, r0
 800d0ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0ee:	bfac      	ite	ge
 800d0f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0f2:	81a3      	strhlt	r3, [r4, #12]
 800d0f4:	bd10      	pop	{r4, pc}

0800d0f6 <__swrite>:
 800d0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0fa:	461f      	mov	r7, r3
 800d0fc:	898b      	ldrh	r3, [r1, #12]
 800d0fe:	4605      	mov	r5, r0
 800d100:	05db      	lsls	r3, r3, #23
 800d102:	460c      	mov	r4, r1
 800d104:	4616      	mov	r6, r2
 800d106:	d505      	bpl.n	800d114 <__swrite+0x1e>
 800d108:	2302      	movs	r3, #2
 800d10a:	2200      	movs	r2, #0
 800d10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d110:	f000 fa18 	bl	800d544 <_lseek_r>
 800d114:	89a3      	ldrh	r3, [r4, #12]
 800d116:	4632      	mov	r2, r6
 800d118:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d11c:	81a3      	strh	r3, [r4, #12]
 800d11e:	4628      	mov	r0, r5
 800d120:	463b      	mov	r3, r7
 800d122:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d12a:	f000 b889 	b.w	800d240 <_write_r>

0800d12e <__sseek>:
 800d12e:	b510      	push	{r4, lr}
 800d130:	460c      	mov	r4, r1
 800d132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d136:	f000 fa05 	bl	800d544 <_lseek_r>
 800d13a:	1c43      	adds	r3, r0, #1
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	bf15      	itete	ne
 800d140:	6560      	strne	r0, [r4, #84]	; 0x54
 800d142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d14a:	81a3      	strheq	r3, [r4, #12]
 800d14c:	bf18      	it	ne
 800d14e:	81a3      	strhne	r3, [r4, #12]
 800d150:	bd10      	pop	{r4, pc}

0800d152 <__sclose>:
 800d152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d156:	f000 b911 	b.w	800d37c <_close_r>

0800d15a <strncmp>:
 800d15a:	b510      	push	{r4, lr}
 800d15c:	b16a      	cbz	r2, 800d17a <strncmp+0x20>
 800d15e:	3901      	subs	r1, #1
 800d160:	1884      	adds	r4, r0, r2
 800d162:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d166:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d16a:	4293      	cmp	r3, r2
 800d16c:	d103      	bne.n	800d176 <strncmp+0x1c>
 800d16e:	42a0      	cmp	r0, r4
 800d170:	d001      	beq.n	800d176 <strncmp+0x1c>
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1f5      	bne.n	800d162 <strncmp+0x8>
 800d176:	1a98      	subs	r0, r3, r2
 800d178:	bd10      	pop	{r4, pc}
 800d17a:	4610      	mov	r0, r2
 800d17c:	e7fc      	b.n	800d178 <strncmp+0x1e>
	...

0800d180 <__swbuf_r>:
 800d180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d182:	460e      	mov	r6, r1
 800d184:	4614      	mov	r4, r2
 800d186:	4605      	mov	r5, r0
 800d188:	b118      	cbz	r0, 800d192 <__swbuf_r+0x12>
 800d18a:	6983      	ldr	r3, [r0, #24]
 800d18c:	b90b      	cbnz	r3, 800d192 <__swbuf_r+0x12>
 800d18e:	f7fe fb25 	bl	800b7dc <__sinit>
 800d192:	4b21      	ldr	r3, [pc, #132]	; (800d218 <__swbuf_r+0x98>)
 800d194:	429c      	cmp	r4, r3
 800d196:	d12b      	bne.n	800d1f0 <__swbuf_r+0x70>
 800d198:	686c      	ldr	r4, [r5, #4]
 800d19a:	69a3      	ldr	r3, [r4, #24]
 800d19c:	60a3      	str	r3, [r4, #8]
 800d19e:	89a3      	ldrh	r3, [r4, #12]
 800d1a0:	071a      	lsls	r2, r3, #28
 800d1a2:	d52f      	bpl.n	800d204 <__swbuf_r+0x84>
 800d1a4:	6923      	ldr	r3, [r4, #16]
 800d1a6:	b36b      	cbz	r3, 800d204 <__swbuf_r+0x84>
 800d1a8:	6923      	ldr	r3, [r4, #16]
 800d1aa:	6820      	ldr	r0, [r4, #0]
 800d1ac:	b2f6      	uxtb	r6, r6
 800d1ae:	1ac0      	subs	r0, r0, r3
 800d1b0:	6963      	ldr	r3, [r4, #20]
 800d1b2:	4637      	mov	r7, r6
 800d1b4:	4283      	cmp	r3, r0
 800d1b6:	dc04      	bgt.n	800d1c2 <__swbuf_r+0x42>
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	f000 f974 	bl	800d4a8 <_fflush_r>
 800d1c0:	bb30      	cbnz	r0, 800d210 <__swbuf_r+0x90>
 800d1c2:	68a3      	ldr	r3, [r4, #8]
 800d1c4:	3001      	adds	r0, #1
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	60a3      	str	r3, [r4, #8]
 800d1ca:	6823      	ldr	r3, [r4, #0]
 800d1cc:	1c5a      	adds	r2, r3, #1
 800d1ce:	6022      	str	r2, [r4, #0]
 800d1d0:	701e      	strb	r6, [r3, #0]
 800d1d2:	6963      	ldr	r3, [r4, #20]
 800d1d4:	4283      	cmp	r3, r0
 800d1d6:	d004      	beq.n	800d1e2 <__swbuf_r+0x62>
 800d1d8:	89a3      	ldrh	r3, [r4, #12]
 800d1da:	07db      	lsls	r3, r3, #31
 800d1dc:	d506      	bpl.n	800d1ec <__swbuf_r+0x6c>
 800d1de:	2e0a      	cmp	r6, #10
 800d1e0:	d104      	bne.n	800d1ec <__swbuf_r+0x6c>
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	4628      	mov	r0, r5
 800d1e6:	f000 f95f 	bl	800d4a8 <_fflush_r>
 800d1ea:	b988      	cbnz	r0, 800d210 <__swbuf_r+0x90>
 800d1ec:	4638      	mov	r0, r7
 800d1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1f0:	4b0a      	ldr	r3, [pc, #40]	; (800d21c <__swbuf_r+0x9c>)
 800d1f2:	429c      	cmp	r4, r3
 800d1f4:	d101      	bne.n	800d1fa <__swbuf_r+0x7a>
 800d1f6:	68ac      	ldr	r4, [r5, #8]
 800d1f8:	e7cf      	b.n	800d19a <__swbuf_r+0x1a>
 800d1fa:	4b09      	ldr	r3, [pc, #36]	; (800d220 <__swbuf_r+0xa0>)
 800d1fc:	429c      	cmp	r4, r3
 800d1fe:	bf08      	it	eq
 800d200:	68ec      	ldreq	r4, [r5, #12]
 800d202:	e7ca      	b.n	800d19a <__swbuf_r+0x1a>
 800d204:	4621      	mov	r1, r4
 800d206:	4628      	mov	r0, r5
 800d208:	f000 f82c 	bl	800d264 <__swsetup_r>
 800d20c:	2800      	cmp	r0, #0
 800d20e:	d0cb      	beq.n	800d1a8 <__swbuf_r+0x28>
 800d210:	f04f 37ff 	mov.w	r7, #4294967295
 800d214:	e7ea      	b.n	800d1ec <__swbuf_r+0x6c>
 800d216:	bf00      	nop
 800d218:	0801a928 	.word	0x0801a928
 800d21c:	0801a948 	.word	0x0801a948
 800d220:	0801a908 	.word	0x0801a908

0800d224 <__ascii_wctomb>:
 800d224:	4603      	mov	r3, r0
 800d226:	4608      	mov	r0, r1
 800d228:	b141      	cbz	r1, 800d23c <__ascii_wctomb+0x18>
 800d22a:	2aff      	cmp	r2, #255	; 0xff
 800d22c:	d904      	bls.n	800d238 <__ascii_wctomb+0x14>
 800d22e:	228a      	movs	r2, #138	; 0x8a
 800d230:	f04f 30ff 	mov.w	r0, #4294967295
 800d234:	601a      	str	r2, [r3, #0]
 800d236:	4770      	bx	lr
 800d238:	2001      	movs	r0, #1
 800d23a:	700a      	strb	r2, [r1, #0]
 800d23c:	4770      	bx	lr
	...

0800d240 <_write_r>:
 800d240:	b538      	push	{r3, r4, r5, lr}
 800d242:	4604      	mov	r4, r0
 800d244:	4608      	mov	r0, r1
 800d246:	4611      	mov	r1, r2
 800d248:	2200      	movs	r2, #0
 800d24a:	4d05      	ldr	r5, [pc, #20]	; (800d260 <_write_r+0x20>)
 800d24c:	602a      	str	r2, [r5, #0]
 800d24e:	461a      	mov	r2, r3
 800d250:	f7f4 fe01 	bl	8001e56 <_write>
 800d254:	1c43      	adds	r3, r0, #1
 800d256:	d102      	bne.n	800d25e <_write_r+0x1e>
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	b103      	cbz	r3, 800d25e <_write_r+0x1e>
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	bd38      	pop	{r3, r4, r5, pc}
 800d260:	20000440 	.word	0x20000440

0800d264 <__swsetup_r>:
 800d264:	4b32      	ldr	r3, [pc, #200]	; (800d330 <__swsetup_r+0xcc>)
 800d266:	b570      	push	{r4, r5, r6, lr}
 800d268:	681d      	ldr	r5, [r3, #0]
 800d26a:	4606      	mov	r6, r0
 800d26c:	460c      	mov	r4, r1
 800d26e:	b125      	cbz	r5, 800d27a <__swsetup_r+0x16>
 800d270:	69ab      	ldr	r3, [r5, #24]
 800d272:	b913      	cbnz	r3, 800d27a <__swsetup_r+0x16>
 800d274:	4628      	mov	r0, r5
 800d276:	f7fe fab1 	bl	800b7dc <__sinit>
 800d27a:	4b2e      	ldr	r3, [pc, #184]	; (800d334 <__swsetup_r+0xd0>)
 800d27c:	429c      	cmp	r4, r3
 800d27e:	d10f      	bne.n	800d2a0 <__swsetup_r+0x3c>
 800d280:	686c      	ldr	r4, [r5, #4]
 800d282:	89a3      	ldrh	r3, [r4, #12]
 800d284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d288:	0719      	lsls	r1, r3, #28
 800d28a:	d42c      	bmi.n	800d2e6 <__swsetup_r+0x82>
 800d28c:	06dd      	lsls	r5, r3, #27
 800d28e:	d411      	bmi.n	800d2b4 <__swsetup_r+0x50>
 800d290:	2309      	movs	r3, #9
 800d292:	6033      	str	r3, [r6, #0]
 800d294:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d298:	f04f 30ff 	mov.w	r0, #4294967295
 800d29c:	81a3      	strh	r3, [r4, #12]
 800d29e:	e03e      	b.n	800d31e <__swsetup_r+0xba>
 800d2a0:	4b25      	ldr	r3, [pc, #148]	; (800d338 <__swsetup_r+0xd4>)
 800d2a2:	429c      	cmp	r4, r3
 800d2a4:	d101      	bne.n	800d2aa <__swsetup_r+0x46>
 800d2a6:	68ac      	ldr	r4, [r5, #8]
 800d2a8:	e7eb      	b.n	800d282 <__swsetup_r+0x1e>
 800d2aa:	4b24      	ldr	r3, [pc, #144]	; (800d33c <__swsetup_r+0xd8>)
 800d2ac:	429c      	cmp	r4, r3
 800d2ae:	bf08      	it	eq
 800d2b0:	68ec      	ldreq	r4, [r5, #12]
 800d2b2:	e7e6      	b.n	800d282 <__swsetup_r+0x1e>
 800d2b4:	0758      	lsls	r0, r3, #29
 800d2b6:	d512      	bpl.n	800d2de <__swsetup_r+0x7a>
 800d2b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2ba:	b141      	cbz	r1, 800d2ce <__swsetup_r+0x6a>
 800d2bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2c0:	4299      	cmp	r1, r3
 800d2c2:	d002      	beq.n	800d2ca <__swsetup_r+0x66>
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	f7ff fb91 	bl	800c9ec <_free_r>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	6363      	str	r3, [r4, #52]	; 0x34
 800d2ce:	89a3      	ldrh	r3, [r4, #12]
 800d2d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d2d4:	81a3      	strh	r3, [r4, #12]
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	6063      	str	r3, [r4, #4]
 800d2da:	6923      	ldr	r3, [r4, #16]
 800d2dc:	6023      	str	r3, [r4, #0]
 800d2de:	89a3      	ldrh	r3, [r4, #12]
 800d2e0:	f043 0308 	orr.w	r3, r3, #8
 800d2e4:	81a3      	strh	r3, [r4, #12]
 800d2e6:	6923      	ldr	r3, [r4, #16]
 800d2e8:	b94b      	cbnz	r3, 800d2fe <__swsetup_r+0x9a>
 800d2ea:	89a3      	ldrh	r3, [r4, #12]
 800d2ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d2f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2f4:	d003      	beq.n	800d2fe <__swsetup_r+0x9a>
 800d2f6:	4621      	mov	r1, r4
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	f000 f959 	bl	800d5b0 <__smakebuf_r>
 800d2fe:	89a0      	ldrh	r0, [r4, #12]
 800d300:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d304:	f010 0301 	ands.w	r3, r0, #1
 800d308:	d00a      	beq.n	800d320 <__swsetup_r+0xbc>
 800d30a:	2300      	movs	r3, #0
 800d30c:	60a3      	str	r3, [r4, #8]
 800d30e:	6963      	ldr	r3, [r4, #20]
 800d310:	425b      	negs	r3, r3
 800d312:	61a3      	str	r3, [r4, #24]
 800d314:	6923      	ldr	r3, [r4, #16]
 800d316:	b943      	cbnz	r3, 800d32a <__swsetup_r+0xc6>
 800d318:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d31c:	d1ba      	bne.n	800d294 <__swsetup_r+0x30>
 800d31e:	bd70      	pop	{r4, r5, r6, pc}
 800d320:	0781      	lsls	r1, r0, #30
 800d322:	bf58      	it	pl
 800d324:	6963      	ldrpl	r3, [r4, #20]
 800d326:	60a3      	str	r3, [r4, #8]
 800d328:	e7f4      	b.n	800d314 <__swsetup_r+0xb0>
 800d32a:	2000      	movs	r0, #0
 800d32c:	e7f7      	b.n	800d31e <__swsetup_r+0xba>
 800d32e:	bf00      	nop
 800d330:	20000014 	.word	0x20000014
 800d334:	0801a928 	.word	0x0801a928
 800d338:	0801a948 	.word	0x0801a948
 800d33c:	0801a908 	.word	0x0801a908

0800d340 <__assert_func>:
 800d340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d342:	4614      	mov	r4, r2
 800d344:	461a      	mov	r2, r3
 800d346:	4b09      	ldr	r3, [pc, #36]	; (800d36c <__assert_func+0x2c>)
 800d348:	4605      	mov	r5, r0
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	68d8      	ldr	r0, [r3, #12]
 800d34e:	b14c      	cbz	r4, 800d364 <__assert_func+0x24>
 800d350:	4b07      	ldr	r3, [pc, #28]	; (800d370 <__assert_func+0x30>)
 800d352:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d356:	9100      	str	r1, [sp, #0]
 800d358:	462b      	mov	r3, r5
 800d35a:	4906      	ldr	r1, [pc, #24]	; (800d374 <__assert_func+0x34>)
 800d35c:	f000 f8e0 	bl	800d520 <fiprintf>
 800d360:	f000 f9c4 	bl	800d6ec <abort>
 800d364:	4b04      	ldr	r3, [pc, #16]	; (800d378 <__assert_func+0x38>)
 800d366:	461c      	mov	r4, r3
 800d368:	e7f3      	b.n	800d352 <__assert_func+0x12>
 800d36a:	bf00      	nop
 800d36c:	20000014 	.word	0x20000014
 800d370:	0801ab55 	.word	0x0801ab55
 800d374:	0801ab62 	.word	0x0801ab62
 800d378:	0801ab90 	.word	0x0801ab90

0800d37c <_close_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	2300      	movs	r3, #0
 800d380:	4d05      	ldr	r5, [pc, #20]	; (800d398 <_close_r+0x1c>)
 800d382:	4604      	mov	r4, r0
 800d384:	4608      	mov	r0, r1
 800d386:	602b      	str	r3, [r5, #0]
 800d388:	f7f4 fd81 	bl	8001e8e <_close>
 800d38c:	1c43      	adds	r3, r0, #1
 800d38e:	d102      	bne.n	800d396 <_close_r+0x1a>
 800d390:	682b      	ldr	r3, [r5, #0]
 800d392:	b103      	cbz	r3, 800d396 <_close_r+0x1a>
 800d394:	6023      	str	r3, [r4, #0]
 800d396:	bd38      	pop	{r3, r4, r5, pc}
 800d398:	20000440 	.word	0x20000440

0800d39c <__sflush_r>:
 800d39c:	898a      	ldrh	r2, [r1, #12]
 800d39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3a2:	4605      	mov	r5, r0
 800d3a4:	0710      	lsls	r0, r2, #28
 800d3a6:	460c      	mov	r4, r1
 800d3a8:	d458      	bmi.n	800d45c <__sflush_r+0xc0>
 800d3aa:	684b      	ldr	r3, [r1, #4]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	dc05      	bgt.n	800d3bc <__sflush_r+0x20>
 800d3b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	dc02      	bgt.n	800d3bc <__sflush_r+0x20>
 800d3b6:	2000      	movs	r0, #0
 800d3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3be:	2e00      	cmp	r6, #0
 800d3c0:	d0f9      	beq.n	800d3b6 <__sflush_r+0x1a>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3c8:	682f      	ldr	r7, [r5, #0]
 800d3ca:	602b      	str	r3, [r5, #0]
 800d3cc:	d032      	beq.n	800d434 <__sflush_r+0x98>
 800d3ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3d0:	89a3      	ldrh	r3, [r4, #12]
 800d3d2:	075a      	lsls	r2, r3, #29
 800d3d4:	d505      	bpl.n	800d3e2 <__sflush_r+0x46>
 800d3d6:	6863      	ldr	r3, [r4, #4]
 800d3d8:	1ac0      	subs	r0, r0, r3
 800d3da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3dc:	b10b      	cbz	r3, 800d3e2 <__sflush_r+0x46>
 800d3de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3e0:	1ac0      	subs	r0, r0, r3
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	6a21      	ldr	r1, [r4, #32]
 800d3ec:	47b0      	blx	r6
 800d3ee:	1c43      	adds	r3, r0, #1
 800d3f0:	89a3      	ldrh	r3, [r4, #12]
 800d3f2:	d106      	bne.n	800d402 <__sflush_r+0x66>
 800d3f4:	6829      	ldr	r1, [r5, #0]
 800d3f6:	291d      	cmp	r1, #29
 800d3f8:	d82c      	bhi.n	800d454 <__sflush_r+0xb8>
 800d3fa:	4a2a      	ldr	r2, [pc, #168]	; (800d4a4 <__sflush_r+0x108>)
 800d3fc:	40ca      	lsrs	r2, r1
 800d3fe:	07d6      	lsls	r6, r2, #31
 800d400:	d528      	bpl.n	800d454 <__sflush_r+0xb8>
 800d402:	2200      	movs	r2, #0
 800d404:	6062      	str	r2, [r4, #4]
 800d406:	6922      	ldr	r2, [r4, #16]
 800d408:	04d9      	lsls	r1, r3, #19
 800d40a:	6022      	str	r2, [r4, #0]
 800d40c:	d504      	bpl.n	800d418 <__sflush_r+0x7c>
 800d40e:	1c42      	adds	r2, r0, #1
 800d410:	d101      	bne.n	800d416 <__sflush_r+0x7a>
 800d412:	682b      	ldr	r3, [r5, #0]
 800d414:	b903      	cbnz	r3, 800d418 <__sflush_r+0x7c>
 800d416:	6560      	str	r0, [r4, #84]	; 0x54
 800d418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d41a:	602f      	str	r7, [r5, #0]
 800d41c:	2900      	cmp	r1, #0
 800d41e:	d0ca      	beq.n	800d3b6 <__sflush_r+0x1a>
 800d420:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d424:	4299      	cmp	r1, r3
 800d426:	d002      	beq.n	800d42e <__sflush_r+0x92>
 800d428:	4628      	mov	r0, r5
 800d42a:	f7ff fadf 	bl	800c9ec <_free_r>
 800d42e:	2000      	movs	r0, #0
 800d430:	6360      	str	r0, [r4, #52]	; 0x34
 800d432:	e7c1      	b.n	800d3b8 <__sflush_r+0x1c>
 800d434:	6a21      	ldr	r1, [r4, #32]
 800d436:	2301      	movs	r3, #1
 800d438:	4628      	mov	r0, r5
 800d43a:	47b0      	blx	r6
 800d43c:	1c41      	adds	r1, r0, #1
 800d43e:	d1c7      	bne.n	800d3d0 <__sflush_r+0x34>
 800d440:	682b      	ldr	r3, [r5, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d0c4      	beq.n	800d3d0 <__sflush_r+0x34>
 800d446:	2b1d      	cmp	r3, #29
 800d448:	d001      	beq.n	800d44e <__sflush_r+0xb2>
 800d44a:	2b16      	cmp	r3, #22
 800d44c:	d101      	bne.n	800d452 <__sflush_r+0xb6>
 800d44e:	602f      	str	r7, [r5, #0]
 800d450:	e7b1      	b.n	800d3b6 <__sflush_r+0x1a>
 800d452:	89a3      	ldrh	r3, [r4, #12]
 800d454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d458:	81a3      	strh	r3, [r4, #12]
 800d45a:	e7ad      	b.n	800d3b8 <__sflush_r+0x1c>
 800d45c:	690f      	ldr	r7, [r1, #16]
 800d45e:	2f00      	cmp	r7, #0
 800d460:	d0a9      	beq.n	800d3b6 <__sflush_r+0x1a>
 800d462:	0793      	lsls	r3, r2, #30
 800d464:	bf18      	it	ne
 800d466:	2300      	movne	r3, #0
 800d468:	680e      	ldr	r6, [r1, #0]
 800d46a:	bf08      	it	eq
 800d46c:	694b      	ldreq	r3, [r1, #20]
 800d46e:	eba6 0807 	sub.w	r8, r6, r7
 800d472:	600f      	str	r7, [r1, #0]
 800d474:	608b      	str	r3, [r1, #8]
 800d476:	f1b8 0f00 	cmp.w	r8, #0
 800d47a:	dd9c      	ble.n	800d3b6 <__sflush_r+0x1a>
 800d47c:	4643      	mov	r3, r8
 800d47e:	463a      	mov	r2, r7
 800d480:	4628      	mov	r0, r5
 800d482:	6a21      	ldr	r1, [r4, #32]
 800d484:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d486:	47b0      	blx	r6
 800d488:	2800      	cmp	r0, #0
 800d48a:	dc06      	bgt.n	800d49a <__sflush_r+0xfe>
 800d48c:	89a3      	ldrh	r3, [r4, #12]
 800d48e:	f04f 30ff 	mov.w	r0, #4294967295
 800d492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d496:	81a3      	strh	r3, [r4, #12]
 800d498:	e78e      	b.n	800d3b8 <__sflush_r+0x1c>
 800d49a:	4407      	add	r7, r0
 800d49c:	eba8 0800 	sub.w	r8, r8, r0
 800d4a0:	e7e9      	b.n	800d476 <__sflush_r+0xda>
 800d4a2:	bf00      	nop
 800d4a4:	20400001 	.word	0x20400001

0800d4a8 <_fflush_r>:
 800d4a8:	b538      	push	{r3, r4, r5, lr}
 800d4aa:	690b      	ldr	r3, [r1, #16]
 800d4ac:	4605      	mov	r5, r0
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	b913      	cbnz	r3, 800d4b8 <_fflush_r+0x10>
 800d4b2:	2500      	movs	r5, #0
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	bd38      	pop	{r3, r4, r5, pc}
 800d4b8:	b118      	cbz	r0, 800d4c2 <_fflush_r+0x1a>
 800d4ba:	6983      	ldr	r3, [r0, #24]
 800d4bc:	b90b      	cbnz	r3, 800d4c2 <_fflush_r+0x1a>
 800d4be:	f7fe f98d 	bl	800b7dc <__sinit>
 800d4c2:	4b14      	ldr	r3, [pc, #80]	; (800d514 <_fflush_r+0x6c>)
 800d4c4:	429c      	cmp	r4, r3
 800d4c6:	d11b      	bne.n	800d500 <_fflush_r+0x58>
 800d4c8:	686c      	ldr	r4, [r5, #4]
 800d4ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d0ef      	beq.n	800d4b2 <_fflush_r+0xa>
 800d4d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4d4:	07d0      	lsls	r0, r2, #31
 800d4d6:	d404      	bmi.n	800d4e2 <_fflush_r+0x3a>
 800d4d8:	0599      	lsls	r1, r3, #22
 800d4da:	d402      	bmi.n	800d4e2 <_fflush_r+0x3a>
 800d4dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4de:	f7fe fd86 	bl	800bfee <__retarget_lock_acquire_recursive>
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	f7ff ff59 	bl	800d39c <__sflush_r>
 800d4ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4ec:	4605      	mov	r5, r0
 800d4ee:	07da      	lsls	r2, r3, #31
 800d4f0:	d4e0      	bmi.n	800d4b4 <_fflush_r+0xc>
 800d4f2:	89a3      	ldrh	r3, [r4, #12]
 800d4f4:	059b      	lsls	r3, r3, #22
 800d4f6:	d4dd      	bmi.n	800d4b4 <_fflush_r+0xc>
 800d4f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4fa:	f7fe fd79 	bl	800bff0 <__retarget_lock_release_recursive>
 800d4fe:	e7d9      	b.n	800d4b4 <_fflush_r+0xc>
 800d500:	4b05      	ldr	r3, [pc, #20]	; (800d518 <_fflush_r+0x70>)
 800d502:	429c      	cmp	r4, r3
 800d504:	d101      	bne.n	800d50a <_fflush_r+0x62>
 800d506:	68ac      	ldr	r4, [r5, #8]
 800d508:	e7df      	b.n	800d4ca <_fflush_r+0x22>
 800d50a:	4b04      	ldr	r3, [pc, #16]	; (800d51c <_fflush_r+0x74>)
 800d50c:	429c      	cmp	r4, r3
 800d50e:	bf08      	it	eq
 800d510:	68ec      	ldreq	r4, [r5, #12]
 800d512:	e7da      	b.n	800d4ca <_fflush_r+0x22>
 800d514:	0801a928 	.word	0x0801a928
 800d518:	0801a948 	.word	0x0801a948
 800d51c:	0801a908 	.word	0x0801a908

0800d520 <fiprintf>:
 800d520:	b40e      	push	{r1, r2, r3}
 800d522:	b503      	push	{r0, r1, lr}
 800d524:	4601      	mov	r1, r0
 800d526:	ab03      	add	r3, sp, #12
 800d528:	4805      	ldr	r0, [pc, #20]	; (800d540 <fiprintf+0x20>)
 800d52a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d52e:	6800      	ldr	r0, [r0, #0]
 800d530:	9301      	str	r3, [sp, #4]
 800d532:	f7ff fc85 	bl	800ce40 <_vfiprintf_r>
 800d536:	b002      	add	sp, #8
 800d538:	f85d eb04 	ldr.w	lr, [sp], #4
 800d53c:	b003      	add	sp, #12
 800d53e:	4770      	bx	lr
 800d540:	20000014 	.word	0x20000014

0800d544 <_lseek_r>:
 800d544:	b538      	push	{r3, r4, r5, lr}
 800d546:	4604      	mov	r4, r0
 800d548:	4608      	mov	r0, r1
 800d54a:	4611      	mov	r1, r2
 800d54c:	2200      	movs	r2, #0
 800d54e:	4d05      	ldr	r5, [pc, #20]	; (800d564 <_lseek_r+0x20>)
 800d550:	602a      	str	r2, [r5, #0]
 800d552:	461a      	mov	r2, r3
 800d554:	f7f4 fcbf 	bl	8001ed6 <_lseek>
 800d558:	1c43      	adds	r3, r0, #1
 800d55a:	d102      	bne.n	800d562 <_lseek_r+0x1e>
 800d55c:	682b      	ldr	r3, [r5, #0]
 800d55e:	b103      	cbz	r3, 800d562 <_lseek_r+0x1e>
 800d560:	6023      	str	r3, [r4, #0]
 800d562:	bd38      	pop	{r3, r4, r5, pc}
 800d564:	20000440 	.word	0x20000440

0800d568 <__swhatbuf_r>:
 800d568:	b570      	push	{r4, r5, r6, lr}
 800d56a:	460e      	mov	r6, r1
 800d56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d570:	4614      	mov	r4, r2
 800d572:	2900      	cmp	r1, #0
 800d574:	461d      	mov	r5, r3
 800d576:	b096      	sub	sp, #88	; 0x58
 800d578:	da07      	bge.n	800d58a <__swhatbuf_r+0x22>
 800d57a:	2300      	movs	r3, #0
 800d57c:	602b      	str	r3, [r5, #0]
 800d57e:	89b3      	ldrh	r3, [r6, #12]
 800d580:	061a      	lsls	r2, r3, #24
 800d582:	d410      	bmi.n	800d5a6 <__swhatbuf_r+0x3e>
 800d584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d588:	e00e      	b.n	800d5a8 <__swhatbuf_r+0x40>
 800d58a:	466a      	mov	r2, sp
 800d58c:	f000 f8b6 	bl	800d6fc <_fstat_r>
 800d590:	2800      	cmp	r0, #0
 800d592:	dbf2      	blt.n	800d57a <__swhatbuf_r+0x12>
 800d594:	9a01      	ldr	r2, [sp, #4]
 800d596:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d59a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d59e:	425a      	negs	r2, r3
 800d5a0:	415a      	adcs	r2, r3
 800d5a2:	602a      	str	r2, [r5, #0]
 800d5a4:	e7ee      	b.n	800d584 <__swhatbuf_r+0x1c>
 800d5a6:	2340      	movs	r3, #64	; 0x40
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	6023      	str	r3, [r4, #0]
 800d5ac:	b016      	add	sp, #88	; 0x58
 800d5ae:	bd70      	pop	{r4, r5, r6, pc}

0800d5b0 <__smakebuf_r>:
 800d5b0:	898b      	ldrh	r3, [r1, #12]
 800d5b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5b4:	079d      	lsls	r5, r3, #30
 800d5b6:	4606      	mov	r6, r0
 800d5b8:	460c      	mov	r4, r1
 800d5ba:	d507      	bpl.n	800d5cc <__smakebuf_r+0x1c>
 800d5bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d5c0:	6023      	str	r3, [r4, #0]
 800d5c2:	6123      	str	r3, [r4, #16]
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	6163      	str	r3, [r4, #20]
 800d5c8:	b002      	add	sp, #8
 800d5ca:	bd70      	pop	{r4, r5, r6, pc}
 800d5cc:	466a      	mov	r2, sp
 800d5ce:	ab01      	add	r3, sp, #4
 800d5d0:	f7ff ffca 	bl	800d568 <__swhatbuf_r>
 800d5d4:	9900      	ldr	r1, [sp, #0]
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	4630      	mov	r0, r6
 800d5da:	f7ff fa53 	bl	800ca84 <_malloc_r>
 800d5de:	b948      	cbnz	r0, 800d5f4 <__smakebuf_r+0x44>
 800d5e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5e4:	059a      	lsls	r2, r3, #22
 800d5e6:	d4ef      	bmi.n	800d5c8 <__smakebuf_r+0x18>
 800d5e8:	f023 0303 	bic.w	r3, r3, #3
 800d5ec:	f043 0302 	orr.w	r3, r3, #2
 800d5f0:	81a3      	strh	r3, [r4, #12]
 800d5f2:	e7e3      	b.n	800d5bc <__smakebuf_r+0xc>
 800d5f4:	4b0d      	ldr	r3, [pc, #52]	; (800d62c <__smakebuf_r+0x7c>)
 800d5f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d5f8:	89a3      	ldrh	r3, [r4, #12]
 800d5fa:	6020      	str	r0, [r4, #0]
 800d5fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d600:	81a3      	strh	r3, [r4, #12]
 800d602:	9b00      	ldr	r3, [sp, #0]
 800d604:	6120      	str	r0, [r4, #16]
 800d606:	6163      	str	r3, [r4, #20]
 800d608:	9b01      	ldr	r3, [sp, #4]
 800d60a:	b15b      	cbz	r3, 800d624 <__smakebuf_r+0x74>
 800d60c:	4630      	mov	r0, r6
 800d60e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d612:	f000 f885 	bl	800d720 <_isatty_r>
 800d616:	b128      	cbz	r0, 800d624 <__smakebuf_r+0x74>
 800d618:	89a3      	ldrh	r3, [r4, #12]
 800d61a:	f023 0303 	bic.w	r3, r3, #3
 800d61e:	f043 0301 	orr.w	r3, r3, #1
 800d622:	81a3      	strh	r3, [r4, #12]
 800d624:	89a0      	ldrh	r0, [r4, #12]
 800d626:	4305      	orrs	r5, r0
 800d628:	81a5      	strh	r5, [r4, #12]
 800d62a:	e7cd      	b.n	800d5c8 <__smakebuf_r+0x18>
 800d62c:	0800b775 	.word	0x0800b775

0800d630 <memmove>:
 800d630:	4288      	cmp	r0, r1
 800d632:	b510      	push	{r4, lr}
 800d634:	eb01 0402 	add.w	r4, r1, r2
 800d638:	d902      	bls.n	800d640 <memmove+0x10>
 800d63a:	4284      	cmp	r4, r0
 800d63c:	4623      	mov	r3, r4
 800d63e:	d807      	bhi.n	800d650 <memmove+0x20>
 800d640:	1e43      	subs	r3, r0, #1
 800d642:	42a1      	cmp	r1, r4
 800d644:	d008      	beq.n	800d658 <memmove+0x28>
 800d646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d64a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d64e:	e7f8      	b.n	800d642 <memmove+0x12>
 800d650:	4601      	mov	r1, r0
 800d652:	4402      	add	r2, r0
 800d654:	428a      	cmp	r2, r1
 800d656:	d100      	bne.n	800d65a <memmove+0x2a>
 800d658:	bd10      	pop	{r4, pc}
 800d65a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d65e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d662:	e7f7      	b.n	800d654 <memmove+0x24>

0800d664 <__malloc_lock>:
 800d664:	4801      	ldr	r0, [pc, #4]	; (800d66c <__malloc_lock+0x8>)
 800d666:	f7fe bcc2 	b.w	800bfee <__retarget_lock_acquire_recursive>
 800d66a:	bf00      	nop
 800d66c:	20000438 	.word	0x20000438

0800d670 <__malloc_unlock>:
 800d670:	4801      	ldr	r0, [pc, #4]	; (800d678 <__malloc_unlock+0x8>)
 800d672:	f7fe bcbd 	b.w	800bff0 <__retarget_lock_release_recursive>
 800d676:	bf00      	nop
 800d678:	20000438 	.word	0x20000438

0800d67c <_realloc_r>:
 800d67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67e:	4607      	mov	r7, r0
 800d680:	4614      	mov	r4, r2
 800d682:	460e      	mov	r6, r1
 800d684:	b921      	cbnz	r1, 800d690 <_realloc_r+0x14>
 800d686:	4611      	mov	r1, r2
 800d688:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d68c:	f7ff b9fa 	b.w	800ca84 <_malloc_r>
 800d690:	b922      	cbnz	r2, 800d69c <_realloc_r+0x20>
 800d692:	f7ff f9ab 	bl	800c9ec <_free_r>
 800d696:	4625      	mov	r5, r4
 800d698:	4628      	mov	r0, r5
 800d69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d69c:	f000 f850 	bl	800d740 <_malloc_usable_size_r>
 800d6a0:	42a0      	cmp	r0, r4
 800d6a2:	d20f      	bcs.n	800d6c4 <_realloc_r+0x48>
 800d6a4:	4621      	mov	r1, r4
 800d6a6:	4638      	mov	r0, r7
 800d6a8:	f7ff f9ec 	bl	800ca84 <_malloc_r>
 800d6ac:	4605      	mov	r5, r0
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d0f2      	beq.n	800d698 <_realloc_r+0x1c>
 800d6b2:	4631      	mov	r1, r6
 800d6b4:	4622      	mov	r2, r4
 800d6b6:	f7fe fcc5 	bl	800c044 <memcpy>
 800d6ba:	4631      	mov	r1, r6
 800d6bc:	4638      	mov	r0, r7
 800d6be:	f7ff f995 	bl	800c9ec <_free_r>
 800d6c2:	e7e9      	b.n	800d698 <_realloc_r+0x1c>
 800d6c4:	4635      	mov	r5, r6
 800d6c6:	e7e7      	b.n	800d698 <_realloc_r+0x1c>

0800d6c8 <_read_r>:
 800d6c8:	b538      	push	{r3, r4, r5, lr}
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	4608      	mov	r0, r1
 800d6ce:	4611      	mov	r1, r2
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	4d05      	ldr	r5, [pc, #20]	; (800d6e8 <_read_r+0x20>)
 800d6d4:	602a      	str	r2, [r5, #0]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	f7f4 fba0 	bl	8001e1c <_read>
 800d6dc:	1c43      	adds	r3, r0, #1
 800d6de:	d102      	bne.n	800d6e6 <_read_r+0x1e>
 800d6e0:	682b      	ldr	r3, [r5, #0]
 800d6e2:	b103      	cbz	r3, 800d6e6 <_read_r+0x1e>
 800d6e4:	6023      	str	r3, [r4, #0]
 800d6e6:	bd38      	pop	{r3, r4, r5, pc}
 800d6e8:	20000440 	.word	0x20000440

0800d6ec <abort>:
 800d6ec:	2006      	movs	r0, #6
 800d6ee:	b508      	push	{r3, lr}
 800d6f0:	f000 f856 	bl	800d7a0 <raise>
 800d6f4:	2001      	movs	r0, #1
 800d6f6:	f7f4 fb87 	bl	8001e08 <_exit>
	...

0800d6fc <_fstat_r>:
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	2300      	movs	r3, #0
 800d700:	4d06      	ldr	r5, [pc, #24]	; (800d71c <_fstat_r+0x20>)
 800d702:	4604      	mov	r4, r0
 800d704:	4608      	mov	r0, r1
 800d706:	4611      	mov	r1, r2
 800d708:	602b      	str	r3, [r5, #0]
 800d70a:	f7f4 fbcb 	bl	8001ea4 <_fstat>
 800d70e:	1c43      	adds	r3, r0, #1
 800d710:	d102      	bne.n	800d718 <_fstat_r+0x1c>
 800d712:	682b      	ldr	r3, [r5, #0]
 800d714:	b103      	cbz	r3, 800d718 <_fstat_r+0x1c>
 800d716:	6023      	str	r3, [r4, #0]
 800d718:	bd38      	pop	{r3, r4, r5, pc}
 800d71a:	bf00      	nop
 800d71c:	20000440 	.word	0x20000440

0800d720 <_isatty_r>:
 800d720:	b538      	push	{r3, r4, r5, lr}
 800d722:	2300      	movs	r3, #0
 800d724:	4d05      	ldr	r5, [pc, #20]	; (800d73c <_isatty_r+0x1c>)
 800d726:	4604      	mov	r4, r0
 800d728:	4608      	mov	r0, r1
 800d72a:	602b      	str	r3, [r5, #0]
 800d72c:	f7f4 fbc9 	bl	8001ec2 <_isatty>
 800d730:	1c43      	adds	r3, r0, #1
 800d732:	d102      	bne.n	800d73a <_isatty_r+0x1a>
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	b103      	cbz	r3, 800d73a <_isatty_r+0x1a>
 800d738:	6023      	str	r3, [r4, #0]
 800d73a:	bd38      	pop	{r3, r4, r5, pc}
 800d73c:	20000440 	.word	0x20000440

0800d740 <_malloc_usable_size_r>:
 800d740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d744:	1f18      	subs	r0, r3, #4
 800d746:	2b00      	cmp	r3, #0
 800d748:	bfbc      	itt	lt
 800d74a:	580b      	ldrlt	r3, [r1, r0]
 800d74c:	18c0      	addlt	r0, r0, r3
 800d74e:	4770      	bx	lr

0800d750 <_raise_r>:
 800d750:	291f      	cmp	r1, #31
 800d752:	b538      	push	{r3, r4, r5, lr}
 800d754:	4604      	mov	r4, r0
 800d756:	460d      	mov	r5, r1
 800d758:	d904      	bls.n	800d764 <_raise_r+0x14>
 800d75a:	2316      	movs	r3, #22
 800d75c:	6003      	str	r3, [r0, #0]
 800d75e:	f04f 30ff 	mov.w	r0, #4294967295
 800d762:	bd38      	pop	{r3, r4, r5, pc}
 800d764:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d766:	b112      	cbz	r2, 800d76e <_raise_r+0x1e>
 800d768:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d76c:	b94b      	cbnz	r3, 800d782 <_raise_r+0x32>
 800d76e:	4620      	mov	r0, r4
 800d770:	f000 f830 	bl	800d7d4 <_getpid_r>
 800d774:	462a      	mov	r2, r5
 800d776:	4601      	mov	r1, r0
 800d778:	4620      	mov	r0, r4
 800d77a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d77e:	f000 b817 	b.w	800d7b0 <_kill_r>
 800d782:	2b01      	cmp	r3, #1
 800d784:	d00a      	beq.n	800d79c <_raise_r+0x4c>
 800d786:	1c59      	adds	r1, r3, #1
 800d788:	d103      	bne.n	800d792 <_raise_r+0x42>
 800d78a:	2316      	movs	r3, #22
 800d78c:	6003      	str	r3, [r0, #0]
 800d78e:	2001      	movs	r0, #1
 800d790:	e7e7      	b.n	800d762 <_raise_r+0x12>
 800d792:	2400      	movs	r4, #0
 800d794:	4628      	mov	r0, r5
 800d796:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d79a:	4798      	blx	r3
 800d79c:	2000      	movs	r0, #0
 800d79e:	e7e0      	b.n	800d762 <_raise_r+0x12>

0800d7a0 <raise>:
 800d7a0:	4b02      	ldr	r3, [pc, #8]	; (800d7ac <raise+0xc>)
 800d7a2:	4601      	mov	r1, r0
 800d7a4:	6818      	ldr	r0, [r3, #0]
 800d7a6:	f7ff bfd3 	b.w	800d750 <_raise_r>
 800d7aa:	bf00      	nop
 800d7ac:	20000014 	.word	0x20000014

0800d7b0 <_kill_r>:
 800d7b0:	b538      	push	{r3, r4, r5, lr}
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	4d06      	ldr	r5, [pc, #24]	; (800d7d0 <_kill_r+0x20>)
 800d7b6:	4604      	mov	r4, r0
 800d7b8:	4608      	mov	r0, r1
 800d7ba:	4611      	mov	r1, r2
 800d7bc:	602b      	str	r3, [r5, #0]
 800d7be:	f7f4 fb13 	bl	8001de8 <_kill>
 800d7c2:	1c43      	adds	r3, r0, #1
 800d7c4:	d102      	bne.n	800d7cc <_kill_r+0x1c>
 800d7c6:	682b      	ldr	r3, [r5, #0]
 800d7c8:	b103      	cbz	r3, 800d7cc <_kill_r+0x1c>
 800d7ca:	6023      	str	r3, [r4, #0]
 800d7cc:	bd38      	pop	{r3, r4, r5, pc}
 800d7ce:	bf00      	nop
 800d7d0:	20000440 	.word	0x20000440

0800d7d4 <_getpid_r>:
 800d7d4:	f7f4 bb01 	b.w	8001dda <_getpid>

0800d7d8 <_init>:
 800d7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7da:	bf00      	nop
 800d7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7de:	bc08      	pop	{r3}
 800d7e0:	469e      	mov	lr, r3
 800d7e2:	4770      	bx	lr

0800d7e4 <_fini>:
 800d7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7e6:	bf00      	nop
 800d7e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d7ea:	bc08      	pop	{r3}
 800d7ec:	469e      	mov	lr, r3
 800d7ee:	4770      	bx	lr
