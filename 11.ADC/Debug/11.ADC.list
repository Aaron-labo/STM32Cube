
11.ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08006ee0  08006ee0  00016ee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800734c  0800734c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  0800734c  0800734c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800734c  0800734c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800734c  0800734c  0001734c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007350  08007350  00017350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  200001dc  08007530  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08007530  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e317  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027d6  00000000  00000000  0002e51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  00030cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  00031638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b738  00000000  00000000  00031e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c834  00000000  00000000  0004d578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000975c5  00000000  00000000  00059dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1371  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003400  00000000  00000000  000f13c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08006ec4 	.word	0x08006ec4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08006ec4 	.word	0x08006ec4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <MX_ADC1_Init+0x94>)
 800102e:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <MX_ADC1_Init+0x98>)
 8001030:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <MX_ADC1_Init+0x94>)
 8001034:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001038:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800103a:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_ADC1_Init+0x94>)
 800103c:	2201      	movs	r2, #1
 800103e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_ADC1_Init+0x94>)
 8001042:	2200      	movs	r2, #0
 8001044:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_ADC1_Init+0x94>)
 8001048:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800104c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800104e:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_ADC1_Init+0x94>)
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001054:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MX_ADC1_Init+0x94>)
 8001056:	2202      	movs	r2, #2
 8001058:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105a:	4815      	ldr	r0, [pc, #84]	; (80010b0 <MX_ADC1_Init+0x94>)
 800105c:	f000 fc90 	bl	8001980 <HAL_ADC_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001066:	f000 fa27 	bl	80014b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800106a:	2305      	movs	r3, #5
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800106e:	2301      	movs	r3, #1
 8001070:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	4619      	mov	r1, r3
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <MX_ADC1_Init+0x94>)
 800107c:	f000 fe64 	bl	8001d48 <HAL_ADC_ConfigChannel>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001086:	f000 fa17 	bl	80014b8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800108a:	2306      	movs	r3, #6
 800108c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800108e:	2302      	movs	r3, #2
 8001090:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	4619      	mov	r1, r3
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <MX_ADC1_Init+0x94>)
 8001098:	f000 fe56 	bl	8001d48 <HAL_ADC_ConfigChannel>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010a2:	f000 fa09 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000020c 	.word	0x2000020c
 80010b4:	40012400 	.word	0x40012400

080010b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 0310 	add.w	r3, r7, #16
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a29      	ldr	r2, [pc, #164]	; (8001178 <HAL_ADC_MspInit+0xc0>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d14a      	bne.n	800116e <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d8:	4b28      	ldr	r3, [pc, #160]	; (800117c <HAL_ADC_MspInit+0xc4>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a27      	ldr	r2, [pc, #156]	; (800117c <HAL_ADC_MspInit+0xc4>)
 80010de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_ADC_MspInit+0xc4>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f0:	4b22      	ldr	r3, [pc, #136]	; (800117c <HAL_ADC_MspInit+0xc4>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a21      	ldr	r2, [pc, #132]	; (800117c <HAL_ADC_MspInit+0xc4>)
 80010f6:	f043 0304 	orr.w	r3, r3, #4
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <HAL_ADC_MspInit+0xc4>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001108:	2360      	movs	r3, #96	; 0x60
 800110a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110c:	2303      	movs	r3, #3
 800110e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	481a      	ldr	r0, [pc, #104]	; (8001180 <HAL_ADC_MspInit+0xc8>)
 8001118:	f001 fdf2 	bl	8002d00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_ADC_MspInit+0xcc>)
 800111e:	4a1a      	ldr	r2, [pc, #104]	; (8001188 <HAL_ADC_MspInit+0xd0>)
 8001120:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_ADC_MspInit+0xcc>)
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_ADC_MspInit+0xcc>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_ADC_MspInit+0xcc>)
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_ADC_MspInit+0xcc>)
 8001136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <HAL_ADC_MspInit+0xcc>)
 800113e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001142:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <HAL_ADC_MspInit+0xcc>)
 8001146:	2220      	movs	r2, #32
 8001148:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_ADC_MspInit+0xcc>)
 800114c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001150:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001152:	480c      	ldr	r0, [pc, #48]	; (8001184 <HAL_ADC_MspInit+0xcc>)
 8001154:	f001 f98c 	bl	8002470 <HAL_DMA_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 800115e:	f000 f9ab 	bl	80014b8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_ADC_MspInit+0xcc>)
 8001166:	621a      	str	r2, [r3, #32]
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_ADC_MspInit+0xcc>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800116e:	bf00      	nop
 8001170:	3720      	adds	r7, #32
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40012400 	.word	0x40012400
 800117c:	40021000 	.word	0x40021000
 8001180:	40010800 	.word	0x40010800
 8001184:	2000023c 	.word	0x2000023c
 8001188:	40020008 	.word	0x40020008

0800118c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_DMA_Init+0x38>)
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <MX_DMA_Init+0x38>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6153      	str	r3, [r2, #20]
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <MX_DMA_Init+0x38>)
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	200b      	movs	r0, #11
 80011b0:	f001 f927 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011b4:	200b      	movs	r0, #11
 80011b6:	f001 f940 	bl	800243a <HAL_NVIC_EnableIRQ>

}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000

080011c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	605a      	str	r2, [r3, #4]
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <MX_GPIO_Init+0x98>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <MX_GPIO_Init+0x98>)
 80011e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e6:	6193      	str	r3, [r2, #24]
 80011e8:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_GPIO_Init+0x98>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_GPIO_Init+0x98>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a19      	ldr	r2, [pc, #100]	; (8001260 <MX_GPIO_Init+0x98>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <MX_GPIO_Init+0x98>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2120      	movs	r1, #32
 8001210:	4814      	ldr	r0, [pc, #80]	; (8001264 <MX_GPIO_Init+0x9c>)
 8001212:	f001 ff09 	bl	8003028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2110      	movs	r1, #16
 800121a:	4813      	ldr	r0, [pc, #76]	; (8001268 <MX_GPIO_Init+0xa0>)
 800121c:	f001 ff04 	bl	8003028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001220:	2320      	movs	r3, #32
 8001222:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001228:	2301      	movs	r3, #1
 800122a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122c:	2303      	movs	r3, #3
 800122e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4619      	mov	r1, r3
 8001236:	480b      	ldr	r0, [pc, #44]	; (8001264 <MX_GPIO_Init+0x9c>)
 8001238:	f001 fd62 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800123c:	2310      	movs	r3, #16
 800123e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001244:	2302      	movs	r3, #2
 8001246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2302      	movs	r3, #2
 800124a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4619      	mov	r1, r3
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_GPIO_Init+0xa0>)
 8001254:	f001 fd54 	bl	8002d00 <HAL_GPIO_Init>

}
 8001258:	bf00      	nop
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	40011800 	.word	0x40011800
 8001268:	40010800 	.word	0x40010800
 800126c:	00000000 	.word	0x00000000

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001274:	f000 fafe 	bl	8001874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001278:	f000 f8ae 	bl	80013d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800127c:	f7ff ffa4 	bl	80011c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001280:	f7ff ff84 	bl	800118c <MX_DMA_Init>
  MX_ADC1_Init();
 8001284:	f7ff feca 	bl	800101c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001288:	f000 fa50 	bl	800172c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 800128c:	4848      	ldr	r0, [pc, #288]	; (80013b0 <main+0x140>)
 800128e:	f000 ff45 	bl	800211c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Value, 100);
 8001292:	2264      	movs	r2, #100	; 0x64
 8001294:	4947      	ldr	r1, [pc, #284]	; (80013b4 <main+0x144>)
 8001296:	4846      	ldr	r0, [pc, #280]	; (80013b0 <main+0x140>)
 8001298:	f000 fc5c 	bl	8001b54 <HAL_ADC_Start_DMA>
  printf("***********BEGIN************\r\n");
 800129c:	4846      	ldr	r0, [pc, #280]	; (80013b8 <main+0x148>)
 800129e:	f003 fd95 	bl	8004dcc <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 80012a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a6:	f000 fb47 	bl	8001938 <HAL_Delay>
	  for(i = 0; i < 100;)
 80012aa:	4b44      	ldr	r3, [pc, #272]	; (80013bc <main+0x14c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e02f      	b.n	8001312 <main+0xa2>
	  {
		  ad1 += (float)ADC_Value[i++];
 80012b2:	4b42      	ldr	r3, [pc, #264]	; (80013bc <main+0x14c>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	b2d1      	uxtb	r1, r2
 80012ba:	4a40      	ldr	r2, [pc, #256]	; (80013bc <main+0x14c>)
 80012bc:	7011      	strb	r1, [r2, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <main+0x144>)
 80012c2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fd00 	bl	8000ccc <__aeabi_ui2f>
 80012cc:	4602      	mov	r2, r0
 80012ce:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <main+0x150>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	4610      	mov	r0, r2
 80012d6:	f7ff fc49 	bl	8000b6c <__addsf3>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	4b38      	ldr	r3, [pc, #224]	; (80013c0 <main+0x150>)
 80012e0:	601a      	str	r2, [r3, #0]
		  ad2 += (float)ADC_Value[i++];
 80012e2:	4b36      	ldr	r3, [pc, #216]	; (80013bc <main+0x14c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	b2d1      	uxtb	r1, r2
 80012ea:	4a34      	ldr	r2, [pc, #208]	; (80013bc <main+0x14c>)
 80012ec:	7011      	strb	r1, [r2, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <main+0x144>)
 80012f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fce8 	bl	8000ccc <__aeabi_ui2f>
 80012fc:	4602      	mov	r2, r0
 80012fe:	4b31      	ldr	r3, [pc, #196]	; (80013c4 <main+0x154>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	4610      	mov	r0, r2
 8001306:	f7ff fc31 	bl	8000b6c <__addsf3>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <main+0x154>)
 8001310:	601a      	str	r2, [r3, #0]
	  for(i = 0; i < 100;)
 8001312:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <main+0x14c>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b63      	cmp	r3, #99	; 0x63
 8001318:	d9cb      	bls.n	80012b2 <main+0x42>
	  }
	  ad1 /= 50;
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <main+0x150>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	492a      	ldr	r1, [pc, #168]	; (80013c8 <main+0x158>)
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fddf 	bl	8000ee4 <__aeabi_fdiv>
 8001326:	4603      	mov	r3, r0
 8001328:	461a      	mov	r2, r3
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <main+0x150>)
 800132c:	601a      	str	r2, [r3, #0]
	  ad2 /= 50;
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <main+0x154>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4925      	ldr	r1, [pc, #148]	; (80013c8 <main+0x158>)
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fdd5 	bl	8000ee4 <__aeabi_fdiv>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	4b21      	ldr	r3, [pc, #132]	; (80013c4 <main+0x154>)
 8001340:	601a      	str	r2, [r3, #0]
	  printf("AD1 value = %.3fV \r\n", ad1*3.3/4096);
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <main+0x150>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8da 	bl	8000500 <__aeabi_f2d>
 800134c:	a316      	add	r3, pc, #88	; (adr r3, 80013a8 <main+0x138>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff f92d 	bl	80005b0 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <main+0x15c>)
 8001364:	f7ff fa4e 	bl	8000804 <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4818      	ldr	r0, [pc, #96]	; (80013d0 <main+0x160>)
 800136e:	f003 fca7 	bl	8004cc0 <iprintf>
	  printf("AD2 value = %.3fV \r\n", ad2*3.3/4096);
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <main+0x154>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff f8c2 	bl	8000500 <__aeabi_f2d>
 800137c:	a30a      	add	r3, pc, #40	; (adr r3, 80013a8 <main+0x138>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff f915 	bl	80005b0 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <main+0x15c>)
 8001394:	f7ff fa36 	bl	8000804 <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	480d      	ldr	r0, [pc, #52]	; (80013d4 <main+0x164>)
 800139e:	f003 fc8f 	bl	8004cc0 <iprintf>
	  HAL_Delay(500);
 80013a2:	e77e      	b.n	80012a2 <main+0x32>
 80013a4:	f3af 8000 	nop.w
 80013a8:	66666666 	.word	0x66666666
 80013ac:	400a6666 	.word	0x400a6666
 80013b0:	2000020c 	.word	0x2000020c
 80013b4:	20000280 	.word	0x20000280
 80013b8:	08006ee0 	.word	0x08006ee0
 80013bc:	20000348 	.word	0x20000348
 80013c0:	200001f8 	.word	0x200001f8
 80013c4:	200001fc 	.word	0x200001fc
 80013c8:	42480000 	.word	0x42480000
 80013cc:	40b00000 	.word	0x40b00000
 80013d0:	08006f00 	.word	0x08006f00
 80013d4:	08006f18 	.word	0x08006f18

080013d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b096      	sub	sp, #88	; 0x58
 80013dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e2:	2228      	movs	r2, #40	; 0x28
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 f802 	bl	80043f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]
 800140a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800140c:	2301      	movs	r3, #1
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141a:	2301      	movs	r3, #1
 800141c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141e:	2302      	movs	r3, #2
 8001420:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001426:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001428:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800142c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001432:	4618      	mov	r0, r3
 8001434:	f001 fe10 	bl	8003058 <HAL_RCC_OscConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800143e:	f000 f83b 	bl	80014b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001442:	230f      	movs	r3, #15
 8001444:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001446:	2302      	movs	r3, #2
 8001448:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800144e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	2102      	movs	r1, #2
 800145e:	4618      	mov	r0, r3
 8001460:	f002 f87a 	bl	8003558 <HAL_RCC_ClockConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800146a:	f000 f825 	bl	80014b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800146e:	2302      	movs	r3, #2
 8001470:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001476:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	4618      	mov	r0, r3
 800147c:	f002 fa06 	bl	800388c <HAL_RCCEx_PeriphCLKConfig>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001486:	f000 f817 	bl	80014b8 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3758      	adds	r7, #88	; 0x58
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
  x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  // 具体哪个串口可以更改huart2为其它串口
   HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1 , 0xffff);
 800149c:	1d39      	adds	r1, r7, #4
 800149e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a2:	2201      	movs	r2, #1
 80014a4:	4803      	ldr	r0, [pc, #12]	; (80014b4 <__io_putchar+0x20>)
 80014a6:	f002 fbda 	bl	8003c5e <HAL_UART_Transmit>

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

  return ch;
 80014aa:	687b      	ldr	r3, [r7, #4]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	200003b4 	.word	0x200003b4

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <Error_Handler+0x8>
	...

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_MspInit+0x5c>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4a14      	ldr	r2, [pc, #80]	; (8001520 <HAL_MspInit+0x5c>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6193      	str	r3, [r2, #24]
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_MspInit+0x5c>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_MspInit+0x5c>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_MspInit+0x5c>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	61d3      	str	r3, [r2, #28]
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_MspInit+0x5c>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_MspInit+0x60>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_MspInit+0x60>)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000
 8001524:	40010000 	.word	0x40010000

08001528 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800152c:	e7fe      	b.n	800152c <NMI_Handler+0x4>

0800152e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <MemManage_Handler+0x4>

0800153a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <UsageFault_Handler+0x4>

08001546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr

08001552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156e:	f000 f9c7 	bl	8001900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <DMA1_Channel1_IRQHandler+0x10>)
 800157e:	f001 f955 	bl	800282c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000023c 	.word	0x2000023c

0800158c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <USART1_IRQHandler+0x10>)
 8001592:	f002 fbf7 	bl	8003d84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200003b4 	.word	0x200003b4

080015a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
	return 1;
 80015a4:	2301      	movs	r3, #1
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <_kill>:

int _kill(int pid, int sig)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015b8:	f002 fef0 	bl	800439c <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	2216      	movs	r2, #22
 80015c0:	601a      	str	r2, [r3, #0]
	return -1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <_exit>:

void _exit (int status)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015d6:	f04f 31ff 	mov.w	r1, #4294967295
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffe7 	bl	80015ae <_kill>
	while (1) {}		/* Make sure we hang here */
 80015e0:	e7fe      	b.n	80015e0 <_exit+0x12>

080015e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	e00a      	b.n	800160a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015f4:	f3af 8000 	nop.w
 80015f8:	4601      	mov	r1, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	60ba      	str	r2, [r7, #8]
 8001600:	b2ca      	uxtb	r2, r1
 8001602:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	429a      	cmp	r2, r3
 8001610:	dbf0      	blt.n	80015f4 <_read+0x12>
	}

return len;
 8001612:	687b      	ldr	r3, [r7, #4]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	e009      	b.n	8001642 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	60ba      	str	r2, [r7, #8]
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff2c 	bl	8001494 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3301      	adds	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	429a      	cmp	r2, r3
 8001648:	dbf1      	blt.n	800162e <_write+0x12>
	}
	return len;
 800164a:	687b      	ldr	r3, [r7, #4]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <_close>:

int _close(int file)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	return -1;
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr

0800166a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166a:	b480      	push	{r7}
 800166c:	b083      	sub	sp, #12
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167a:	605a      	str	r2, [r3, #4]
	return 0;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <_isatty>:

int _isatty(int file)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	return 1;
 8001690:	2301      	movs	r3, #1
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800169c:	b480      	push	{r7}
 800169e:	b085      	sub	sp, #20
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
	return 0;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016bc:	4a14      	ldr	r2, [pc, #80]	; (8001710 <_sbrk+0x5c>)
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <_sbrk+0x60>)
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <_sbrk+0x64>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <_sbrk+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d207      	bcs.n	80016f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e4:	f002 fe5a 	bl	800439c <__errno>
 80016e8:	4603      	mov	r3, r0
 80016ea:	220c      	movs	r2, #12
 80016ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	e009      	b.n	8001708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <_sbrk+0x64>)
 8001704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20010000 	.word	0x20010000
 8001714:	00000400 	.word	0x00000400
 8001718:	20000200 	.word	0x20000200
 800171c:	20000408 	.word	0x20000408

08001720 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <MX_USART1_UART_Init+0x50>)
 8001734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 8001738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800173c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 8001746:	2200      	movs	r2, #0
 8001748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 8001752:	220c      	movs	r2, #12
 8001754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 800175e:	2200      	movs	r2, #0
 8001760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART1_UART_Init+0x4c>)
 8001764:	f002 fa2e 	bl	8003bc4 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800176e:	f7ff fea3 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200003b4 	.word	0x200003b4
 800177c:	40013800 	.word	0x40013800

08001780 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a20      	ldr	r2, [pc, #128]	; (800181c <HAL_UART_MspInit+0x9c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d139      	bne.n	8001814 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <HAL_UART_MspInit+0xa0>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <HAL_UART_MspInit+0xa0>)
 80017a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_UART_MspInit+0xa0>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_UART_MspInit+0xa0>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a18      	ldr	r2, [pc, #96]	; (8001820 <HAL_UART_MspInit+0xa0>)
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	6193      	str	r3, [r2, #24]
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <HAL_UART_MspInit+0xa0>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	4619      	mov	r1, r3
 80017e4:	480f      	ldr	r0, [pc, #60]	; (8001824 <HAL_UART_MspInit+0xa4>)
 80017e6:	f001 fa8b 	bl	8002d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	4619      	mov	r1, r3
 80017fe:	4809      	ldr	r0, [pc, #36]	; (8001824 <HAL_UART_MspInit+0xa4>)
 8001800:	f001 fa7e 	bl	8002d00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	2025      	movs	r0, #37	; 0x25
 800180a:	f000 fdfa 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800180e:	2025      	movs	r0, #37	; 0x25
 8001810:	f000 fe13 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001814:	bf00      	nop
 8001816:	3720      	adds	r7, #32
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40013800 	.word	0x40013800
 8001820:	40021000 	.word	0x40021000
 8001824:	40010800 	.word	0x40010800

08001828 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001828:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800182a:	e003      	b.n	8001834 <LoopCopyDataInit>

0800182c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800182e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001830:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001832:	3104      	adds	r1, #4

08001834 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001834:	480a      	ldr	r0, [pc, #40]	; (8001860 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001838:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800183a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800183c:	d3f6      	bcc.n	800182c <CopyDataInit>
  ldr r2, =_sbss
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001840:	e002      	b.n	8001848 <LoopFillZerobss>

08001842 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001844:	f842 3b04 	str.w	r3, [r2], #4

08001848 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800184a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800184c:	d3f9      	bcc.n	8001842 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800184e:	f7ff ff67 	bl	8001720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001852:	f002 fda9 	bl	80043a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001856:	f7ff fd0b 	bl	8001270 <main>
  bx lr
 800185a:	4770      	bx	lr
  ldr r3, =_sidata
 800185c:	08007354 	.word	0x08007354
  ldr r0, =_sdata
 8001860:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001864:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001868:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800186c:	20000408 	.word	0x20000408

08001870 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001870:	e7fe      	b.n	8001870 <ADC1_2_IRQHandler>
	...

08001874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <HAL_Init+0x28>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a07      	ldr	r2, [pc, #28]	; (800189c <HAL_Init+0x28>)
 800187e:	f043 0310 	orr.w	r3, r3, #16
 8001882:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001884:	2003      	movs	r0, #3
 8001886:	f000 fdb1 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800188a:	2000      	movs	r0, #0
 800188c:	f000 f808 	bl	80018a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001890:	f7ff fe18 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40022000 	.word	0x40022000

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_InitTick+0x54>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_InitTick+0x58>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	4619      	mov	r1, r3
 80018b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f000 fdc9 	bl	8002456 <HAL_SYSTICK_Config>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00e      	b.n	80018ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b0f      	cmp	r3, #15
 80018d2:	d80a      	bhi.n	80018ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d4:	2200      	movs	r2, #0
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f000 fd91 	bl	8002402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <HAL_InitTick+0x5c>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	e000      	b.n	80018ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_IncTick+0x1c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_IncTick+0x20>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a03      	ldr	r2, [pc, #12]	; (8001920 <HAL_IncTick+0x20>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	20000008 	.word	0x20000008
 8001920:	200003f4 	.word	0x200003f4

08001924 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return uwTick;
 8001928:	4b02      	ldr	r3, [pc, #8]	; (8001934 <HAL_GetTick+0x10>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	200003f4 	.word	0x200003f4

08001938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001940:	f7ff fff0 	bl	8001924 <HAL_GetTick>
 8001944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001950:	d005      	beq.n	800195e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_Delay+0x44>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	4413      	add	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800195e:	bf00      	nop
 8001960:	f7ff ffe0 	bl	8001924 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	429a      	cmp	r2, r3
 800196e:	d8f7      	bhi.n	8001960 <HAL_Delay+0x28>
  {
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000008 	.word	0x20000008

08001980 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001988:	2300      	movs	r3, #0
 800198a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e0ce      	b.n	8001b40 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d109      	bne.n	80019c4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff fb7a 	bl	80010b8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 fb09 	bl	8001fdc <ADC_ConversionStop_Disable>
 80019ca:	4603      	mov	r3, r0
 80019cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f040 80a9 	bne.w	8001b2e <HAL_ADC_Init+0x1ae>
 80019dc:	7dfb      	ldrb	r3, [r7, #23]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f040 80a5 	bne.w	8001b2e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019ec:	f023 0302 	bic.w	r3, r3, #2
 80019f0:	f043 0202 	orr.w	r2, r3, #2
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4951      	ldr	r1, [pc, #324]	; (8001b48 <HAL_ADC_Init+0x1c8>)
 8001a02:	428b      	cmp	r3, r1
 8001a04:	d10a      	bne.n	8001a1c <HAL_ADC_Init+0x9c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001a0e:	d002      	beq.n	8001a16 <HAL_ADC_Init+0x96>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	e004      	b.n	8001a20 <HAL_ADC_Init+0xa0>
 8001a16:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001a1a:	e001      	b.n	8001a20 <HAL_ADC_Init+0xa0>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a20:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7b1b      	ldrb	r3, [r3, #12]
 8001a26:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001a28:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a38:	d003      	beq.n	8001a42 <HAL_ADC_Init+0xc2>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d102      	bne.n	8001a48 <HAL_ADC_Init+0xc8>
 8001a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a46:	e000      	b.n	8001a4a <HAL_ADC_Init+0xca>
 8001a48:	2300      	movs	r3, #0
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	7d1b      	ldrb	r3, [r3, #20]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d119      	bne.n	8001a8c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	7b1b      	ldrb	r3, [r3, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d109      	bne.n	8001a74 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	3b01      	subs	r3, #1
 8001a66:	035a      	lsls	r2, r3, #13
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a70:	613b      	str	r3, [r7, #16]
 8001a72:	e00b      	b.n	8001a8c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	f043 0220 	orr.w	r2, r3, #32
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <HAL_ADC_Init+0x1cc>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6812      	ldr	r2, [r2, #0]
 8001aae:	68b9      	ldr	r1, [r7, #8]
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001abc:	d003      	beq.n	8001ac6 <HAL_ADC_Init+0x146>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d104      	bne.n	8001ad0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	051b      	lsls	r3, r3, #20
 8001ace:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_ADC_Init+0x1d0>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d10b      	bne.n	8001b0c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	f023 0303 	bic.w	r3, r3, #3
 8001b02:	f043 0201 	orr.w	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b0a:	e018      	b.n	8001b3e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	f023 0312 	bic.w	r3, r3, #18
 8001b14:	f043 0210 	orr.w	r2, r3, #16
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b20:	f043 0201 	orr.w	r2, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b2c:	e007      	b.n	8001b3e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	f043 0210 	orr.w	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40013c00 	.word	0x40013c00
 8001b4c:	ffe1f7fd 	.word	0xffe1f7fd
 8001b50:	ff1f0efe 	.word	0xff1f0efe

08001b54 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a64      	ldr	r2, [pc, #400]	; (8001cfc <HAL_ADC_Start_DMA+0x1a8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d004      	beq.n	8001b78 <HAL_ADC_Start_DMA+0x24>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a63      	ldr	r2, [pc, #396]	; (8001d00 <HAL_ADC_Start_DMA+0x1ac>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d106      	bne.n	8001b86 <HAL_ADC_Start_DMA+0x32>
 8001b78:	4b60      	ldr	r3, [pc, #384]	; (8001cfc <HAL_ADC_Start_DMA+0x1a8>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f040 80b3 	bne.w	8001cec <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_ADC_Start_DMA+0x40>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e0ae      	b.n	8001cf2 <HAL_ADC_Start_DMA+0x19e>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 f9cb 	bl	8001f38 <ADC_Enable>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f040 809a 	bne.w	8001ce2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a4e      	ldr	r2, [pc, #312]	; (8001d00 <HAL_ADC_Start_DMA+0x1ac>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d105      	bne.n	8001bd8 <HAL_ADC_Start_DMA+0x84>
 8001bcc:	4b4b      	ldr	r3, [pc, #300]	; (8001cfc <HAL_ADC_Start_DMA+0x1a8>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d115      	bne.n	8001c04 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d026      	beq.n	8001c40 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c02:	e01d      	b.n	8001c40 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c08:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a39      	ldr	r2, [pc, #228]	; (8001cfc <HAL_ADC_Start_DMA+0x1a8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d004      	beq.n	8001c24 <HAL_ADC_Start_DMA+0xd0>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a38      	ldr	r2, [pc, #224]	; (8001d00 <HAL_ADC_Start_DMA+0x1ac>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d10d      	bne.n	8001c40 <HAL_ADC_Start_DMA+0xec>
 8001c24:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_ADC_Start_DMA+0x1a8>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d007      	beq.n	8001c40 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	f023 0206 	bic.w	r2, r3, #6
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c58:	e002      	b.n	8001c60 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4a25      	ldr	r2, [pc, #148]	; (8001d04 <HAL_ADC_Start_DMA+0x1b0>)
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4a24      	ldr	r2, [pc, #144]	; (8001d08 <HAL_ADC_Start_DMA+0x1b4>)
 8001c76:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	4a23      	ldr	r2, [pc, #140]	; (8001d0c <HAL_ADC_Start_DMA+0x1b8>)
 8001c7e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0202 	mvn.w	r2, #2
 8001c88:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c98:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6a18      	ldr	r0, [r3, #32]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	334c      	adds	r3, #76	; 0x4c
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f000 fc57 	bl	800255c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cb8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cbc:	d108      	bne.n	8001cd0 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ccc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001cce:	e00f      	b.n	8001cf0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001cde:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ce0:	e006      	b.n	8001cf0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001cea:	e001      	b.n	8001cf0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40012400 	.word	0x40012400
 8001d00:	40012800 	.word	0x40012800
 8001d04:	08002051 	.word	0x08002051
 8001d08:	080020cd 	.word	0x080020cd
 8001d0c:	080020e9 	.word	0x080020e9

08001d10 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d101      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x20>
 8001d64:	2302      	movs	r3, #2
 8001d66:	e0dc      	b.n	8001f22 <HAL_ADC_ConfigChannel+0x1da>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b06      	cmp	r3, #6
 8001d76:	d81c      	bhi.n	8001db2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	3b05      	subs	r3, #5
 8001d8a:	221f      	movs	r2, #31
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	4019      	ands	r1, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	3b05      	subs	r3, #5
 8001da4:	fa00 f203 	lsl.w	r2, r0, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	635a      	str	r2, [r3, #52]	; 0x34
 8001db0:	e03c      	b.n	8001e2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d81c      	bhi.n	8001df4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	4413      	add	r3, r2
 8001dca:	3b23      	subs	r3, #35	; 0x23
 8001dcc:	221f      	movs	r2, #31
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	4019      	ands	r1, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	3b23      	subs	r3, #35	; 0x23
 8001de6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	631a      	str	r2, [r3, #48]	; 0x30
 8001df2:	e01b      	b.n	8001e2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	3b41      	subs	r3, #65	; 0x41
 8001e06:	221f      	movs	r2, #31
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	4019      	ands	r1, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b41      	subs	r3, #65	; 0x41
 8001e20:	fa00 f203 	lsl.w	r2, r0, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b09      	cmp	r3, #9
 8001e32:	d91c      	bls.n	8001e6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68d9      	ldr	r1, [r3, #12]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	3b1e      	subs	r3, #30
 8001e46:	2207      	movs	r2, #7
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	4019      	ands	r1, r3
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6898      	ldr	r0, [r3, #8]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b1e      	subs	r3, #30
 8001e60:	fa00 f203 	lsl.w	r2, r0, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	60da      	str	r2, [r3, #12]
 8001e6c:	e019      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6919      	ldr	r1, [r3, #16]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	2207      	movs	r2, #7
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	4019      	ands	r1, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	6898      	ldr	r0, [r3, #8]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	4613      	mov	r3, r2
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	fa00 f203 	lsl.w	r2, r0, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b10      	cmp	r3, #16
 8001ea8:	d003      	beq.n	8001eb2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eae:	2b11      	cmp	r3, #17
 8001eb0:	d132      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a1d      	ldr	r2, [pc, #116]	; (8001f2c <HAL_ADC_ConfigChannel+0x1e4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d125      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d126      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ed8:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b10      	cmp	r3, #16
 8001ee0:	d11a      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a13      	ldr	r2, [pc, #76]	; (8001f34 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eec:	0c9a      	lsrs	r2, r3, #18
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ef8:	e002      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3b01      	subs	r3, #1
 8001efe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f9      	bne.n	8001efa <HAL_ADC_ConfigChannel+0x1b2>
 8001f06:	e007      	b.n	8001f18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	f043 0220 	orr.w	r2, r3, #32
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	40012400 	.word	0x40012400
 8001f30:	20000000 	.word	0x20000000
 8001f34:	431bde83 	.word	0x431bde83

08001f38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d039      	beq.n	8001fca <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f66:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <ADC_Enable+0x9c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <ADC_Enable+0xa0>)
 8001f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f70:	0c9b      	lsrs	r3, r3, #18
 8001f72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f74:	e002      	b.n	8001f7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f9      	bne.n	8001f76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f82:	f7ff fccf 	bl	8001924 <HAL_GetTick>
 8001f86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f88:	e018      	b.n	8001fbc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f8a:	f7ff fccb 	bl	8001924 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d911      	bls.n	8001fbc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	f043 0210 	orr.w	r2, r3, #16
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	f043 0201 	orr.w	r2, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e007      	b.n	8001fcc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d1df      	bne.n	8001f8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	431bde83 	.word	0x431bde83

08001fdc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d127      	bne.n	8002046 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0201 	bic.w	r2, r2, #1
 8002004:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002006:	f7ff fc8d 	bl	8001924 <HAL_GetTick>
 800200a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800200c:	e014      	b.n	8002038 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800200e:	f7ff fc89 	bl	8001924 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d90d      	bls.n	8002038 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	f043 0210 	orr.w	r2, r3, #16
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202c:	f043 0201 	orr.w	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e007      	b.n	8002048 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b01      	cmp	r3, #1
 8002044:	d0e3      	beq.n	800200e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002066:	2b00      	cmp	r3, #0
 8002068:	d127      	bne.n	80020ba <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002080:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002084:	d115      	bne.n	80020b2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800208a:	2b00      	cmp	r3, #0
 800208c:	d111      	bne.n	80020b2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800209e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	f043 0201 	orr.w	r2, r3, #1
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f7ff fe2c 	bl	8001d10 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80020b8:	e004      	b.n	80020c4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f7ff fe21 	bl	8001d22 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	f043 0204 	orr.w	r2, r3, #4
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7ff fe10 	bl	8001d34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_ADCEx_Calibration_Start+0x1e>
 8002136:	2302      	movs	r3, #2
 8002138:	e086      	b.n	8002248 <HAL_ADCEx_Calibration_Start+0x12c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff ff4a 	bl	8001fdc <ADC_ConversionStop_Disable>
 8002148:	4603      	mov	r3, r0
 800214a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800214c:	7dfb      	ldrb	r3, [r7, #23]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d175      	bne.n	800223e <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800215a:	f023 0302 	bic.w	r3, r3, #2
 800215e:	f043 0202 	orr.w	r2, r3, #2
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002166:	4b3a      	ldr	r3, [pc, #232]	; (8002250 <HAL_ADCEx_Calibration_Start+0x134>)
 8002168:	681c      	ldr	r4, [r3, #0]
 800216a:	2002      	movs	r0, #2
 800216c:	f001 fc44 	bl	80039f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002170:	4603      	mov	r3, r0
 8002172:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002176:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002178:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800217a:	e002      	b.n	8002182 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3b01      	subs	r3, #1
 8002180:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f9      	bne.n	800217c <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff fed5 	bl	8001f38 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0208 	orr.w	r2, r2, #8
 800219c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800219e:	f7ff fbc1 	bl	8001924 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80021a4:	e014      	b.n	80021d0 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80021a6:	f7ff fbbd 	bl	8001924 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b0a      	cmp	r3, #10
 80021b2:	d90d      	bls.n	80021d0 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	f023 0312 	bic.w	r3, r3, #18
 80021bc:	f043 0210 	orr.w	r2, r3, #16
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e03b      	b.n	8002248 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1e3      	bne.n	80021a6 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f042 0204 	orr.w	r2, r2, #4
 80021ec:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80021ee:	f7ff fb99 	bl	8001924 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80021f4:	e014      	b.n	8002220 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80021f6:	f7ff fb95 	bl	8001924 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b0a      	cmp	r3, #10
 8002202:	d90d      	bls.n	8002220 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	f023 0312 	bic.w	r3, r3, #18
 800220c:	f043 0210 	orr.w	r2, r3, #16
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e013      	b.n	8002248 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1e3      	bne.n	80021f6 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	f023 0303 	bic.w	r3, r3, #3
 8002236:	f043 0201 	orr.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002246:	7dfb      	ldrb	r3, [r7, #23]
}
 8002248:	4618      	mov	r0, r3
 800224a:	371c      	adds	r7, #28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd90      	pop	{r4, r7, pc}
 8002250:	20000000 	.word	0x20000000

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	; (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db0b      	blt.n	80022e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4906      	ldr	r1, [pc, #24]	; (80022ec <__NVIC_EnableIRQ+0x34>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	e000e100 	.word	0xe000e100

080022f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	2b00      	cmp	r3, #0
 8002302:	db0a      	blt.n	800231a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	490c      	ldr	r1, [pc, #48]	; (800233c <__NVIC_SetPriority+0x4c>)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	0112      	lsls	r2, r2, #4
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	440b      	add	r3, r1
 8002314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002318:	e00a      	b.n	8002330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4908      	ldr	r1, [pc, #32]	; (8002340 <__NVIC_SetPriority+0x50>)
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	3b04      	subs	r3, #4
 8002328:	0112      	lsls	r2, r2, #4
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	440b      	add	r3, r1
 800232e:	761a      	strb	r2, [r3, #24]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000e100 	.word	0xe000e100
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f1c3 0307 	rsb	r3, r3, #7
 800235e:	2b04      	cmp	r3, #4
 8002360:	bf28      	it	cs
 8002362:	2304      	movcs	r3, #4
 8002364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	3304      	adds	r3, #4
 800236a:	2b06      	cmp	r3, #6
 800236c:	d902      	bls.n	8002374 <NVIC_EncodePriority+0x30>
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3b03      	subs	r3, #3
 8002372:	e000      	b.n	8002376 <NVIC_EncodePriority+0x32>
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	f04f 32ff 	mov.w	r2, #4294967295
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43da      	mvns	r2, r3
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	401a      	ands	r2, r3
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800238c:	f04f 31ff 	mov.w	r1, #4294967295
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa01 f303 	lsl.w	r3, r1, r3
 8002396:	43d9      	mvns	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	4313      	orrs	r3, r2
         );
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3724      	adds	r7, #36	; 0x24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b8:	d301      	bcc.n	80023be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00f      	b.n	80023de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <SysTick_Config+0x40>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c6:	210f      	movs	r1, #15
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f7ff ff90 	bl	80022f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <SysTick_Config+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SysTick_Config+0x40>)
 80023d8:	2207      	movs	r2, #7
 80023da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff2d 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002414:	f7ff ff42 	bl	800229c <__NVIC_GetPriorityGrouping>
 8002418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ff90 	bl	8002344 <NVIC_EncodePriority>
 8002424:	4602      	mov	r2, r0
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff5f 	bl	80022f0 <__NVIC_SetPriority>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff35 	bl	80022b8 <__NVIC_EnableIRQ>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ffa2 	bl	80023a8 <SysTick_Config>
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e059      	b.n	800253a <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	4b2d      	ldr	r3, [pc, #180]	; (8002544 <HAL_DMA_Init+0xd4>)
 800248e:	429a      	cmp	r2, r3
 8002490:	d80f      	bhi.n	80024b2 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_DMA_Init+0xd8>)
 800249a:	4413      	add	r3, r2
 800249c:	4a2b      	ldr	r2, [pc, #172]	; (800254c <HAL_DMA_Init+0xdc>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	009a      	lsls	r2, r3, #2
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a28      	ldr	r2, [pc, #160]	; (8002550 <HAL_DMA_Init+0xe0>)
 80024ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80024b0:	e00e      	b.n	80024d0 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_DMA_Init+0xe4>)
 80024ba:	4413      	add	r3, r2
 80024bc:	4a23      	ldr	r2, [pc, #140]	; (800254c <HAL_DMA_Init+0xdc>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	009a      	lsls	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a22      	ldr	r2, [pc, #136]	; (8002558 <HAL_DMA_Init+0xe8>)
 80024ce:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80024ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	40020407 	.word	0x40020407
 8002548:	bffdfff8 	.word	0xbffdfff8
 800254c:	cccccccd 	.word	0xcccccccd
 8002550:	40020000 	.word	0x40020000
 8002554:	bffdfbf8 	.word	0xbffdfbf8
 8002558:	40020400 	.word	0x40020400

0800255c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
 8002568:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_DMA_Start_IT+0x20>
 8002578:	2302      	movs	r3, #2
 800257a:	e04a      	b.n	8002612 <HAL_DMA_Start_IT+0xb6>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800258a:	2b01      	cmp	r3, #1
 800258c:	d13a      	bne.n	8002604 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2202      	movs	r2, #2
 8002592:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0201 	bic.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 fb76 	bl	8002ca4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 020e 	orr.w	r2, r2, #14
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e00f      	b.n	80025f2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0204 	bic.w	r2, r2, #4
 80025e0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 020a 	orr.w	r2, r2, #10
 80025f0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0201 	orr.w	r2, r2, #1
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	e005      	b.n	8002610 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800260c:	2302      	movs	r3, #2
 800260e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002610:	7dfb      	ldrb	r3, [r7, #23]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
	...

0800261c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800262e:	2b02      	cmp	r3, #2
 8002630:	d005      	beq.n	800263e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2204      	movs	r2, #4
 8002636:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
 800263c:	e0d6      	b.n	80027ec <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 020e 	bic.w	r2, r2, #14
 800264c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f022 0201 	bic.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	4b64      	ldr	r3, [pc, #400]	; (80027f8 <HAL_DMA_Abort_IT+0x1dc>)
 8002666:	429a      	cmp	r2, r3
 8002668:	d958      	bls.n	800271c <HAL_DMA_Abort_IT+0x100>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a63      	ldr	r2, [pc, #396]	; (80027fc <HAL_DMA_Abort_IT+0x1e0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d04f      	beq.n	8002714 <HAL_DMA_Abort_IT+0xf8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a61      	ldr	r2, [pc, #388]	; (8002800 <HAL_DMA_Abort_IT+0x1e4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d048      	beq.n	8002710 <HAL_DMA_Abort_IT+0xf4>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a60      	ldr	r2, [pc, #384]	; (8002804 <HAL_DMA_Abort_IT+0x1e8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d040      	beq.n	800270a <HAL_DMA_Abort_IT+0xee>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a5e      	ldr	r2, [pc, #376]	; (8002808 <HAL_DMA_Abort_IT+0x1ec>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d038      	beq.n	8002704 <HAL_DMA_Abort_IT+0xe8>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a5d      	ldr	r2, [pc, #372]	; (800280c <HAL_DMA_Abort_IT+0x1f0>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d030      	beq.n	80026fe <HAL_DMA_Abort_IT+0xe2>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a5b      	ldr	r2, [pc, #364]	; (8002810 <HAL_DMA_Abort_IT+0x1f4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d028      	beq.n	80026f8 <HAL_DMA_Abort_IT+0xdc>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a53      	ldr	r2, [pc, #332]	; (80027f8 <HAL_DMA_Abort_IT+0x1dc>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d020      	beq.n	80026f2 <HAL_DMA_Abort_IT+0xd6>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a57      	ldr	r2, [pc, #348]	; (8002814 <HAL_DMA_Abort_IT+0x1f8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_DMA_Abort_IT+0xd2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a56      	ldr	r2, [pc, #344]	; (8002818 <HAL_DMA_Abort_IT+0x1fc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d012      	beq.n	80026ea <HAL_DMA_Abort_IT+0xce>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a54      	ldr	r2, [pc, #336]	; (800281c <HAL_DMA_Abort_IT+0x200>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00a      	beq.n	80026e4 <HAL_DMA_Abort_IT+0xc8>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a53      	ldr	r2, [pc, #332]	; (8002820 <HAL_DMA_Abort_IT+0x204>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d102      	bne.n	80026de <HAL_DMA_Abort_IT+0xc2>
 80026d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026dc:	e01b      	b.n	8002716 <HAL_DMA_Abort_IT+0xfa>
 80026de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026e2:	e018      	b.n	8002716 <HAL_DMA_Abort_IT+0xfa>
 80026e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e8:	e015      	b.n	8002716 <HAL_DMA_Abort_IT+0xfa>
 80026ea:	2310      	movs	r3, #16
 80026ec:	e013      	b.n	8002716 <HAL_DMA_Abort_IT+0xfa>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e011      	b.n	8002716 <HAL_DMA_Abort_IT+0xfa>
 80026f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026f6:	e00e      	b.n	8002716 <HAL_DMA_Abort_IT+0xfa>
 80026f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026fc:	e00b      	b.n	8002716 <HAL_DMA_Abort_IT+0xfa>
 80026fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002702:	e008      	b.n	8002716 <HAL_DMA_Abort_IT+0xfa>
 8002704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002708:	e005      	b.n	8002716 <HAL_DMA_Abort_IT+0xfa>
 800270a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800270e:	e002      	b.n	8002716 <HAL_DMA_Abort_IT+0xfa>
 8002710:	2310      	movs	r3, #16
 8002712:	e000      	b.n	8002716 <HAL_DMA_Abort_IT+0xfa>
 8002714:	2301      	movs	r3, #1
 8002716:	4a43      	ldr	r2, [pc, #268]	; (8002824 <HAL_DMA_Abort_IT+0x208>)
 8002718:	6053      	str	r3, [r2, #4]
 800271a:	e057      	b.n	80027cc <HAL_DMA_Abort_IT+0x1b0>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a36      	ldr	r2, [pc, #216]	; (80027fc <HAL_DMA_Abort_IT+0x1e0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d04f      	beq.n	80027c6 <HAL_DMA_Abort_IT+0x1aa>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a35      	ldr	r2, [pc, #212]	; (8002800 <HAL_DMA_Abort_IT+0x1e4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d048      	beq.n	80027c2 <HAL_DMA_Abort_IT+0x1a6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a33      	ldr	r2, [pc, #204]	; (8002804 <HAL_DMA_Abort_IT+0x1e8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d040      	beq.n	80027bc <HAL_DMA_Abort_IT+0x1a0>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a32      	ldr	r2, [pc, #200]	; (8002808 <HAL_DMA_Abort_IT+0x1ec>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d038      	beq.n	80027b6 <HAL_DMA_Abort_IT+0x19a>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a30      	ldr	r2, [pc, #192]	; (800280c <HAL_DMA_Abort_IT+0x1f0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d030      	beq.n	80027b0 <HAL_DMA_Abort_IT+0x194>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a2f      	ldr	r2, [pc, #188]	; (8002810 <HAL_DMA_Abort_IT+0x1f4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d028      	beq.n	80027aa <HAL_DMA_Abort_IT+0x18e>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a26      	ldr	r2, [pc, #152]	; (80027f8 <HAL_DMA_Abort_IT+0x1dc>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d020      	beq.n	80027a4 <HAL_DMA_Abort_IT+0x188>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a2b      	ldr	r2, [pc, #172]	; (8002814 <HAL_DMA_Abort_IT+0x1f8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d019      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x184>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a29      	ldr	r2, [pc, #164]	; (8002818 <HAL_DMA_Abort_IT+0x1fc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d012      	beq.n	800279c <HAL_DMA_Abort_IT+0x180>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a28      	ldr	r2, [pc, #160]	; (800281c <HAL_DMA_Abort_IT+0x200>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00a      	beq.n	8002796 <HAL_DMA_Abort_IT+0x17a>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a26      	ldr	r2, [pc, #152]	; (8002820 <HAL_DMA_Abort_IT+0x204>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d102      	bne.n	8002790 <HAL_DMA_Abort_IT+0x174>
 800278a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800278e:	e01b      	b.n	80027c8 <HAL_DMA_Abort_IT+0x1ac>
 8002790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002794:	e018      	b.n	80027c8 <HAL_DMA_Abort_IT+0x1ac>
 8002796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800279a:	e015      	b.n	80027c8 <HAL_DMA_Abort_IT+0x1ac>
 800279c:	2310      	movs	r3, #16
 800279e:	e013      	b.n	80027c8 <HAL_DMA_Abort_IT+0x1ac>
 80027a0:	2301      	movs	r3, #1
 80027a2:	e011      	b.n	80027c8 <HAL_DMA_Abort_IT+0x1ac>
 80027a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027a8:	e00e      	b.n	80027c8 <HAL_DMA_Abort_IT+0x1ac>
 80027aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027ae:	e00b      	b.n	80027c8 <HAL_DMA_Abort_IT+0x1ac>
 80027b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b4:	e008      	b.n	80027c8 <HAL_DMA_Abort_IT+0x1ac>
 80027b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ba:	e005      	b.n	80027c8 <HAL_DMA_Abort_IT+0x1ac>
 80027bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027c0:	e002      	b.n	80027c8 <HAL_DMA_Abort_IT+0x1ac>
 80027c2:	2310      	movs	r3, #16
 80027c4:	e000      	b.n	80027c8 <HAL_DMA_Abort_IT+0x1ac>
 80027c6:	2301      	movs	r3, #1
 80027c8:	4a17      	ldr	r2, [pc, #92]	; (8002828 <HAL_DMA_Abort_IT+0x20c>)
 80027ca:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	4798      	blx	r3
    } 
  }
  return status;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40020080 	.word	0x40020080
 80027fc:	40020008 	.word	0x40020008
 8002800:	4002001c 	.word	0x4002001c
 8002804:	40020030 	.word	0x40020030
 8002808:	40020044 	.word	0x40020044
 800280c:	40020058 	.word	0x40020058
 8002810:	4002006c 	.word	0x4002006c
 8002814:	40020408 	.word	0x40020408
 8002818:	4002041c 	.word	0x4002041c
 800281c:	40020430 	.word	0x40020430
 8002820:	40020444 	.word	0x40020444
 8002824:	40020400 	.word	0x40020400
 8002828:	40020000 	.word	0x40020000

0800282c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	2204      	movs	r2, #4
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80d6 	beq.w	8002a02 <HAL_DMA_IRQHandler+0x1d6>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80d0 	beq.w	8002a02 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b00      	cmp	r3, #0
 800286e:	d107      	bne.n	8002880 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0204 	bic.w	r2, r2, #4
 800287e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4b9b      	ldr	r3, [pc, #620]	; (8002af4 <HAL_DMA_IRQHandler+0x2c8>)
 8002888:	429a      	cmp	r2, r3
 800288a:	d958      	bls.n	800293e <HAL_DMA_IRQHandler+0x112>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a99      	ldr	r2, [pc, #612]	; (8002af8 <HAL_DMA_IRQHandler+0x2cc>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d04f      	beq.n	8002936 <HAL_DMA_IRQHandler+0x10a>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a98      	ldr	r2, [pc, #608]	; (8002afc <HAL_DMA_IRQHandler+0x2d0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d048      	beq.n	8002932 <HAL_DMA_IRQHandler+0x106>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a96      	ldr	r2, [pc, #600]	; (8002b00 <HAL_DMA_IRQHandler+0x2d4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d040      	beq.n	800292c <HAL_DMA_IRQHandler+0x100>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a95      	ldr	r2, [pc, #596]	; (8002b04 <HAL_DMA_IRQHandler+0x2d8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d038      	beq.n	8002926 <HAL_DMA_IRQHandler+0xfa>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a93      	ldr	r2, [pc, #588]	; (8002b08 <HAL_DMA_IRQHandler+0x2dc>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d030      	beq.n	8002920 <HAL_DMA_IRQHandler+0xf4>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a92      	ldr	r2, [pc, #584]	; (8002b0c <HAL_DMA_IRQHandler+0x2e0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d028      	beq.n	800291a <HAL_DMA_IRQHandler+0xee>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a89      	ldr	r2, [pc, #548]	; (8002af4 <HAL_DMA_IRQHandler+0x2c8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d020      	beq.n	8002914 <HAL_DMA_IRQHandler+0xe8>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a8e      	ldr	r2, [pc, #568]	; (8002b10 <HAL_DMA_IRQHandler+0x2e4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d019      	beq.n	8002910 <HAL_DMA_IRQHandler+0xe4>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a8c      	ldr	r2, [pc, #560]	; (8002b14 <HAL_DMA_IRQHandler+0x2e8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d012      	beq.n	800290c <HAL_DMA_IRQHandler+0xe0>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a8b      	ldr	r2, [pc, #556]	; (8002b18 <HAL_DMA_IRQHandler+0x2ec>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00a      	beq.n	8002906 <HAL_DMA_IRQHandler+0xda>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a89      	ldr	r2, [pc, #548]	; (8002b1c <HAL_DMA_IRQHandler+0x2f0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d102      	bne.n	8002900 <HAL_DMA_IRQHandler+0xd4>
 80028fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80028fe:	e01b      	b.n	8002938 <HAL_DMA_IRQHandler+0x10c>
 8002900:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002904:	e018      	b.n	8002938 <HAL_DMA_IRQHandler+0x10c>
 8002906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800290a:	e015      	b.n	8002938 <HAL_DMA_IRQHandler+0x10c>
 800290c:	2340      	movs	r3, #64	; 0x40
 800290e:	e013      	b.n	8002938 <HAL_DMA_IRQHandler+0x10c>
 8002910:	2304      	movs	r3, #4
 8002912:	e011      	b.n	8002938 <HAL_DMA_IRQHandler+0x10c>
 8002914:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002918:	e00e      	b.n	8002938 <HAL_DMA_IRQHandler+0x10c>
 800291a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800291e:	e00b      	b.n	8002938 <HAL_DMA_IRQHandler+0x10c>
 8002920:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002924:	e008      	b.n	8002938 <HAL_DMA_IRQHandler+0x10c>
 8002926:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800292a:	e005      	b.n	8002938 <HAL_DMA_IRQHandler+0x10c>
 800292c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002930:	e002      	b.n	8002938 <HAL_DMA_IRQHandler+0x10c>
 8002932:	2340      	movs	r3, #64	; 0x40
 8002934:	e000      	b.n	8002938 <HAL_DMA_IRQHandler+0x10c>
 8002936:	2304      	movs	r3, #4
 8002938:	4a79      	ldr	r2, [pc, #484]	; (8002b20 <HAL_DMA_IRQHandler+0x2f4>)
 800293a:	6053      	str	r3, [r2, #4]
 800293c:	e057      	b.n	80029ee <HAL_DMA_IRQHandler+0x1c2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a6d      	ldr	r2, [pc, #436]	; (8002af8 <HAL_DMA_IRQHandler+0x2cc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d04f      	beq.n	80029e8 <HAL_DMA_IRQHandler+0x1bc>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a6b      	ldr	r2, [pc, #428]	; (8002afc <HAL_DMA_IRQHandler+0x2d0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d048      	beq.n	80029e4 <HAL_DMA_IRQHandler+0x1b8>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a6a      	ldr	r2, [pc, #424]	; (8002b00 <HAL_DMA_IRQHandler+0x2d4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d040      	beq.n	80029de <HAL_DMA_IRQHandler+0x1b2>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a68      	ldr	r2, [pc, #416]	; (8002b04 <HAL_DMA_IRQHandler+0x2d8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d038      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x1ac>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a67      	ldr	r2, [pc, #412]	; (8002b08 <HAL_DMA_IRQHandler+0x2dc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d030      	beq.n	80029d2 <HAL_DMA_IRQHandler+0x1a6>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a65      	ldr	r2, [pc, #404]	; (8002b0c <HAL_DMA_IRQHandler+0x2e0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d028      	beq.n	80029cc <HAL_DMA_IRQHandler+0x1a0>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a5d      	ldr	r2, [pc, #372]	; (8002af4 <HAL_DMA_IRQHandler+0x2c8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d020      	beq.n	80029c6 <HAL_DMA_IRQHandler+0x19a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a61      	ldr	r2, [pc, #388]	; (8002b10 <HAL_DMA_IRQHandler+0x2e4>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d019      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x196>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a60      	ldr	r2, [pc, #384]	; (8002b14 <HAL_DMA_IRQHandler+0x2e8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d012      	beq.n	80029be <HAL_DMA_IRQHandler+0x192>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a5e      	ldr	r2, [pc, #376]	; (8002b18 <HAL_DMA_IRQHandler+0x2ec>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00a      	beq.n	80029b8 <HAL_DMA_IRQHandler+0x18c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a5d      	ldr	r2, [pc, #372]	; (8002b1c <HAL_DMA_IRQHandler+0x2f0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d102      	bne.n	80029b2 <HAL_DMA_IRQHandler+0x186>
 80029ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029b0:	e01b      	b.n	80029ea <HAL_DMA_IRQHandler+0x1be>
 80029b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029b6:	e018      	b.n	80029ea <HAL_DMA_IRQHandler+0x1be>
 80029b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029bc:	e015      	b.n	80029ea <HAL_DMA_IRQHandler+0x1be>
 80029be:	2340      	movs	r3, #64	; 0x40
 80029c0:	e013      	b.n	80029ea <HAL_DMA_IRQHandler+0x1be>
 80029c2:	2304      	movs	r3, #4
 80029c4:	e011      	b.n	80029ea <HAL_DMA_IRQHandler+0x1be>
 80029c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029ca:	e00e      	b.n	80029ea <HAL_DMA_IRQHandler+0x1be>
 80029cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029d0:	e00b      	b.n	80029ea <HAL_DMA_IRQHandler+0x1be>
 80029d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029d6:	e008      	b.n	80029ea <HAL_DMA_IRQHandler+0x1be>
 80029d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029dc:	e005      	b.n	80029ea <HAL_DMA_IRQHandler+0x1be>
 80029de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029e2:	e002      	b.n	80029ea <HAL_DMA_IRQHandler+0x1be>
 80029e4:	2340      	movs	r3, #64	; 0x40
 80029e6:	e000      	b.n	80029ea <HAL_DMA_IRQHandler+0x1be>
 80029e8:	2304      	movs	r3, #4
 80029ea:	4a4e      	ldr	r2, [pc, #312]	; (8002b24 <HAL_DMA_IRQHandler+0x2f8>)
 80029ec:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8136 	beq.w	8002c64 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a00:	e130      	b.n	8002c64 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	2202      	movs	r2, #2
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80f8 	beq.w	8002c04 <HAL_DMA_IRQHandler+0x3d8>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 80f2 	beq.w	8002c04 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10b      	bne.n	8002a46 <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 020a 	bic.w	r2, r2, #10
 8002a3c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	4b29      	ldr	r3, [pc, #164]	; (8002af4 <HAL_DMA_IRQHandler+0x2c8>)
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d973      	bls.n	8002b3a <HAL_DMA_IRQHandler+0x30e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a28      	ldr	r2, [pc, #160]	; (8002af8 <HAL_DMA_IRQHandler+0x2cc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d06a      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x306>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a26      	ldr	r2, [pc, #152]	; (8002afc <HAL_DMA_IRQHandler+0x2d0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d063      	beq.n	8002b2e <HAL_DMA_IRQHandler+0x302>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a25      	ldr	r2, [pc, #148]	; (8002b00 <HAL_DMA_IRQHandler+0x2d4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d05b      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x2fc>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a23      	ldr	r2, [pc, #140]	; (8002b04 <HAL_DMA_IRQHandler+0x2d8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d038      	beq.n	8002aec <HAL_DMA_IRQHandler+0x2c0>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <HAL_DMA_IRQHandler+0x2dc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d030      	beq.n	8002ae6 <HAL_DMA_IRQHandler+0x2ba>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a20      	ldr	r2, [pc, #128]	; (8002b0c <HAL_DMA_IRQHandler+0x2e0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d028      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x2b4>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_DMA_IRQHandler+0x2c8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d020      	beq.n	8002ada <HAL_DMA_IRQHandler+0x2ae>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1c      	ldr	r2, [pc, #112]	; (8002b10 <HAL_DMA_IRQHandler+0x2e4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d019      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x2aa>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a1b      	ldr	r2, [pc, #108]	; (8002b14 <HAL_DMA_IRQHandler+0x2e8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d012      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x2a6>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a19      	ldr	r2, [pc, #100]	; (8002b18 <HAL_DMA_IRQHandler+0x2ec>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00a      	beq.n	8002acc <HAL_DMA_IRQHandler+0x2a0>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <HAL_DMA_IRQHandler+0x2f0>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d102      	bne.n	8002ac6 <HAL_DMA_IRQHandler+0x29a>
 8002ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ac4:	e036      	b.n	8002b34 <HAL_DMA_IRQHandler+0x308>
 8002ac6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aca:	e033      	b.n	8002b34 <HAL_DMA_IRQHandler+0x308>
 8002acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ad0:	e030      	b.n	8002b34 <HAL_DMA_IRQHandler+0x308>
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	e02e      	b.n	8002b34 <HAL_DMA_IRQHandler+0x308>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e02c      	b.n	8002b34 <HAL_DMA_IRQHandler+0x308>
 8002ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ade:	e029      	b.n	8002b34 <HAL_DMA_IRQHandler+0x308>
 8002ae0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ae4:	e026      	b.n	8002b34 <HAL_DMA_IRQHandler+0x308>
 8002ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002aea:	e023      	b.n	8002b34 <HAL_DMA_IRQHandler+0x308>
 8002aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002af0:	e020      	b.n	8002b34 <HAL_DMA_IRQHandler+0x308>
 8002af2:	bf00      	nop
 8002af4:	40020080 	.word	0x40020080
 8002af8:	40020008 	.word	0x40020008
 8002afc:	4002001c 	.word	0x4002001c
 8002b00:	40020030 	.word	0x40020030
 8002b04:	40020044 	.word	0x40020044
 8002b08:	40020058 	.word	0x40020058
 8002b0c:	4002006c 	.word	0x4002006c
 8002b10:	40020408 	.word	0x40020408
 8002b14:	4002041c 	.word	0x4002041c
 8002b18:	40020430 	.word	0x40020430
 8002b1c:	40020444 	.word	0x40020444
 8002b20:	40020400 	.word	0x40020400
 8002b24:	40020000 	.word	0x40020000
 8002b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b2c:	e002      	b.n	8002b34 <HAL_DMA_IRQHandler+0x308>
 8002b2e:	2320      	movs	r3, #32
 8002b30:	e000      	b.n	8002b34 <HAL_DMA_IRQHandler+0x308>
 8002b32:	2302      	movs	r3, #2
 8002b34:	4a4e      	ldr	r2, [pc, #312]	; (8002c70 <HAL_DMA_IRQHandler+0x444>)
 8002b36:	6053      	str	r3, [r2, #4]
 8002b38:	e057      	b.n	8002bea <HAL_DMA_IRQHandler+0x3be>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a4d      	ldr	r2, [pc, #308]	; (8002c74 <HAL_DMA_IRQHandler+0x448>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d04f      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x3b8>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a4b      	ldr	r2, [pc, #300]	; (8002c78 <HAL_DMA_IRQHandler+0x44c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d048      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x3b4>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a4a      	ldr	r2, [pc, #296]	; (8002c7c <HAL_DMA_IRQHandler+0x450>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d040      	beq.n	8002bda <HAL_DMA_IRQHandler+0x3ae>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a48      	ldr	r2, [pc, #288]	; (8002c80 <HAL_DMA_IRQHandler+0x454>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d038      	beq.n	8002bd4 <HAL_DMA_IRQHandler+0x3a8>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a47      	ldr	r2, [pc, #284]	; (8002c84 <HAL_DMA_IRQHandler+0x458>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d030      	beq.n	8002bce <HAL_DMA_IRQHandler+0x3a2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a45      	ldr	r2, [pc, #276]	; (8002c88 <HAL_DMA_IRQHandler+0x45c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d028      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x39c>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a44      	ldr	r2, [pc, #272]	; (8002c8c <HAL_DMA_IRQHandler+0x460>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d020      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x396>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a42      	ldr	r2, [pc, #264]	; (8002c90 <HAL_DMA_IRQHandler+0x464>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d019      	beq.n	8002bbe <HAL_DMA_IRQHandler+0x392>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a41      	ldr	r2, [pc, #260]	; (8002c94 <HAL_DMA_IRQHandler+0x468>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d012      	beq.n	8002bba <HAL_DMA_IRQHandler+0x38e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a3f      	ldr	r2, [pc, #252]	; (8002c98 <HAL_DMA_IRQHandler+0x46c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x388>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a3e      	ldr	r2, [pc, #248]	; (8002c9c <HAL_DMA_IRQHandler+0x470>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d102      	bne.n	8002bae <HAL_DMA_IRQHandler+0x382>
 8002ba8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bac:	e01b      	b.n	8002be6 <HAL_DMA_IRQHandler+0x3ba>
 8002bae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb2:	e018      	b.n	8002be6 <HAL_DMA_IRQHandler+0x3ba>
 8002bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bb8:	e015      	b.n	8002be6 <HAL_DMA_IRQHandler+0x3ba>
 8002bba:	2320      	movs	r3, #32
 8002bbc:	e013      	b.n	8002be6 <HAL_DMA_IRQHandler+0x3ba>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e011      	b.n	8002be6 <HAL_DMA_IRQHandler+0x3ba>
 8002bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bc6:	e00e      	b.n	8002be6 <HAL_DMA_IRQHandler+0x3ba>
 8002bc8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bcc:	e00b      	b.n	8002be6 <HAL_DMA_IRQHandler+0x3ba>
 8002bce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bd2:	e008      	b.n	8002be6 <HAL_DMA_IRQHandler+0x3ba>
 8002bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd8:	e005      	b.n	8002be6 <HAL_DMA_IRQHandler+0x3ba>
 8002bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bde:	e002      	b.n	8002be6 <HAL_DMA_IRQHandler+0x3ba>
 8002be0:	2320      	movs	r3, #32
 8002be2:	e000      	b.n	8002be6 <HAL_DMA_IRQHandler+0x3ba>
 8002be4:	2302      	movs	r3, #2
 8002be6:	4a2e      	ldr	r2, [pc, #184]	; (8002ca0 <HAL_DMA_IRQHandler+0x474>)
 8002be8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d034      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c02:	e02f      	b.n	8002c64 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	2208      	movs	r2, #8
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d028      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x43a>
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d023      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 020e 	bic.w	r2, r2, #14
 8002c2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c36:	2101      	movs	r1, #1
 8002c38:	fa01 f202 	lsl.w	r2, r1, r2
 8002c3c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d004      	beq.n	8002c66 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
    }
  }
  return;
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop
}
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40020400 	.word	0x40020400
 8002c74:	40020008 	.word	0x40020008
 8002c78:	4002001c 	.word	0x4002001c
 8002c7c:	40020030 	.word	0x40020030
 8002c80:	40020044 	.word	0x40020044
 8002c84:	40020058 	.word	0x40020058
 8002c88:	4002006c 	.word	0x4002006c
 8002c8c:	40020080 	.word	0x40020080
 8002c90:	40020408 	.word	0x40020408
 8002c94:	4002041c 	.word	0x4002041c
 8002c98:	40020430 	.word	0x40020430
 8002c9c:	40020444 	.word	0x40020444
 8002ca0:	40020000 	.word	0x40020000

08002ca4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	2101      	movs	r1, #1
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b10      	cmp	r3, #16
 8002cd0:	d108      	bne.n	8002ce4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ce2:	e007      	b.n	8002cf4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	60da      	str	r2, [r3, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b08b      	sub	sp, #44	; 0x2c
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d12:	e179      	b.n	8003008 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d14:	2201      	movs	r2, #1
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69fa      	ldr	r2, [r7, #28]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	f040 8168 	bne.w	8003002 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4aa0      	ldr	r2, [pc, #640]	; (8002fb8 <HAL_GPIO_Init+0x2b8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d05e      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d3c:	4a9e      	ldr	r2, [pc, #632]	; (8002fb8 <HAL_GPIO_Init+0x2b8>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d875      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d42:	4a9e      	ldr	r2, [pc, #632]	; (8002fbc <HAL_GPIO_Init+0x2bc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d058      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d48:	4a9c      	ldr	r2, [pc, #624]	; (8002fbc <HAL_GPIO_Init+0x2bc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d86f      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d4e:	4a9c      	ldr	r2, [pc, #624]	; (8002fc0 <HAL_GPIO_Init+0x2c0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d052      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d54:	4a9a      	ldr	r2, [pc, #616]	; (8002fc0 <HAL_GPIO_Init+0x2c0>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d869      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d5a:	4a9a      	ldr	r2, [pc, #616]	; (8002fc4 <HAL_GPIO_Init+0x2c4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d04c      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d60:	4a98      	ldr	r2, [pc, #608]	; (8002fc4 <HAL_GPIO_Init+0x2c4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d863      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d66:	4a98      	ldr	r2, [pc, #608]	; (8002fc8 <HAL_GPIO_Init+0x2c8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d046      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
 8002d6c:	4a96      	ldr	r2, [pc, #600]	; (8002fc8 <HAL_GPIO_Init+0x2c8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d85d      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d72:	2b12      	cmp	r3, #18
 8002d74:	d82a      	bhi.n	8002dcc <HAL_GPIO_Init+0xcc>
 8002d76:	2b12      	cmp	r3, #18
 8002d78:	d859      	bhi.n	8002e2e <HAL_GPIO_Init+0x12e>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_GPIO_Init+0x80>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002dfb 	.word	0x08002dfb
 8002d84:	08002dd5 	.word	0x08002dd5
 8002d88:	08002de7 	.word	0x08002de7
 8002d8c:	08002e29 	.word	0x08002e29
 8002d90:	08002e2f 	.word	0x08002e2f
 8002d94:	08002e2f 	.word	0x08002e2f
 8002d98:	08002e2f 	.word	0x08002e2f
 8002d9c:	08002e2f 	.word	0x08002e2f
 8002da0:	08002e2f 	.word	0x08002e2f
 8002da4:	08002e2f 	.word	0x08002e2f
 8002da8:	08002e2f 	.word	0x08002e2f
 8002dac:	08002e2f 	.word	0x08002e2f
 8002db0:	08002e2f 	.word	0x08002e2f
 8002db4:	08002e2f 	.word	0x08002e2f
 8002db8:	08002e2f 	.word	0x08002e2f
 8002dbc:	08002e2f 	.word	0x08002e2f
 8002dc0:	08002e2f 	.word	0x08002e2f
 8002dc4:	08002ddd 	.word	0x08002ddd
 8002dc8:	08002df1 	.word	0x08002df1
 8002dcc:	4a7f      	ldr	r2, [pc, #508]	; (8002fcc <HAL_GPIO_Init+0x2cc>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002dd2:	e02c      	b.n	8002e2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	623b      	str	r3, [r7, #32]
          break;
 8002dda:	e029      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	3304      	adds	r3, #4
 8002de2:	623b      	str	r3, [r7, #32]
          break;
 8002de4:	e024      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	3308      	adds	r3, #8
 8002dec:	623b      	str	r3, [r7, #32]
          break;
 8002dee:	e01f      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	330c      	adds	r3, #12
 8002df6:	623b      	str	r3, [r7, #32]
          break;
 8002df8:	e01a      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d102      	bne.n	8002e08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e02:	2304      	movs	r3, #4
 8002e04:	623b      	str	r3, [r7, #32]
          break;
 8002e06:	e013      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e10:	2308      	movs	r3, #8
 8002e12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	611a      	str	r2, [r3, #16]
          break;
 8002e1a:	e009      	b.n	8002e30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	615a      	str	r2, [r3, #20]
          break;
 8002e26:	e003      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
          break;
 8002e2c:	e000      	b.n	8002e30 <HAL_GPIO_Init+0x130>
          break;
 8002e2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	2bff      	cmp	r3, #255	; 0xff
 8002e34:	d801      	bhi.n	8002e3a <HAL_GPIO_Init+0x13a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	e001      	b.n	8002e3e <HAL_GPIO_Init+0x13e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2bff      	cmp	r3, #255	; 0xff
 8002e44:	d802      	bhi.n	8002e4c <HAL_GPIO_Init+0x14c>
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	e002      	b.n	8002e52 <HAL_GPIO_Init+0x152>
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	3b08      	subs	r3, #8
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	210f      	movs	r1, #15
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	401a      	ands	r2, r3
 8002e64:	6a39      	ldr	r1, [r7, #32]
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 80c1 	beq.w	8003002 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e80:	4b53      	ldr	r3, [pc, #332]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	4a52      	ldr	r2, [pc, #328]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6193      	str	r3, [r2, #24]
 8002e8c:	4b50      	ldr	r3, [pc, #320]	; (8002fd0 <HAL_GPIO_Init+0x2d0>)
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e98:	4a4e      	ldr	r2, [pc, #312]	; (8002fd4 <HAL_GPIO_Init+0x2d4>)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	220f      	movs	r2, #15
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a46      	ldr	r2, [pc, #280]	; (8002fd8 <HAL_GPIO_Init+0x2d8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d01f      	beq.n	8002f04 <HAL_GPIO_Init+0x204>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a45      	ldr	r2, [pc, #276]	; (8002fdc <HAL_GPIO_Init+0x2dc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d019      	beq.n	8002f00 <HAL_GPIO_Init+0x200>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a44      	ldr	r2, [pc, #272]	; (8002fe0 <HAL_GPIO_Init+0x2e0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d013      	beq.n	8002efc <HAL_GPIO_Init+0x1fc>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a43      	ldr	r2, [pc, #268]	; (8002fe4 <HAL_GPIO_Init+0x2e4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d00d      	beq.n	8002ef8 <HAL_GPIO_Init+0x1f8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a42      	ldr	r2, [pc, #264]	; (8002fe8 <HAL_GPIO_Init+0x2e8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d007      	beq.n	8002ef4 <HAL_GPIO_Init+0x1f4>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	4a41      	ldr	r2, [pc, #260]	; (8002fec <HAL_GPIO_Init+0x2ec>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d101      	bne.n	8002ef0 <HAL_GPIO_Init+0x1f0>
 8002eec:	2305      	movs	r3, #5
 8002eee:	e00a      	b.n	8002f06 <HAL_GPIO_Init+0x206>
 8002ef0:	2306      	movs	r3, #6
 8002ef2:	e008      	b.n	8002f06 <HAL_GPIO_Init+0x206>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	e006      	b.n	8002f06 <HAL_GPIO_Init+0x206>
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e004      	b.n	8002f06 <HAL_GPIO_Init+0x206>
 8002efc:	2302      	movs	r3, #2
 8002efe:	e002      	b.n	8002f06 <HAL_GPIO_Init+0x206>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <HAL_GPIO_Init+0x206>
 8002f04:	2300      	movs	r3, #0
 8002f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f08:	f002 0203 	and.w	r2, r2, #3
 8002f0c:	0092      	lsls	r2, r2, #2
 8002f0e:	4093      	lsls	r3, r2
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002f16:	492f      	ldr	r1, [pc, #188]	; (8002fd4 <HAL_GPIO_Init+0x2d4>)
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	3302      	adds	r3, #2
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d006      	beq.n	8002f3e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f30:	4b2f      	ldr	r3, [pc, #188]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	492e      	ldr	r1, [pc, #184]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f3e:	4b2c      	ldr	r3, [pc, #176]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	43db      	mvns	r3, r3
 8002f46:	492a      	ldr	r1, [pc, #168]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f58:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	4924      	ldr	r1, [pc, #144]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	604b      	str	r3, [r1, #4]
 8002f64:	e006      	b.n	8002f74 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f66:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	4920      	ldr	r1, [pc, #128]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d006      	beq.n	8002f8e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f80:	4b1b      	ldr	r3, [pc, #108]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	491a      	ldr	r1, [pc, #104]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	608b      	str	r3, [r1, #8]
 8002f8c:	e006      	b.n	8002f9c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f8e:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	4916      	ldr	r1, [pc, #88]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002f98:	4013      	ands	r3, r2
 8002f9a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d025      	beq.n	8002ff4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	4910      	ldr	r1, [pc, #64]	; (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60cb      	str	r3, [r1, #12]
 8002fb4:	e025      	b.n	8003002 <HAL_GPIO_Init+0x302>
 8002fb6:	bf00      	nop
 8002fb8:	10320000 	.word	0x10320000
 8002fbc:	10310000 	.word	0x10310000
 8002fc0:	10220000 	.word	0x10220000
 8002fc4:	10210000 	.word	0x10210000
 8002fc8:	10120000 	.word	0x10120000
 8002fcc:	10110000 	.word	0x10110000
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	40010000 	.word	0x40010000
 8002fd8:	40010800 	.word	0x40010800
 8002fdc:	40010c00 	.word	0x40010c00
 8002fe0:	40011000 	.word	0x40011000
 8002fe4:	40011400 	.word	0x40011400
 8002fe8:	40011800 	.word	0x40011800
 8002fec:	40011c00 	.word	0x40011c00
 8002ff0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <HAL_GPIO_Init+0x324>)
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	4909      	ldr	r1, [pc, #36]	; (8003024 <HAL_GPIO_Init+0x324>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	3301      	adds	r3, #1
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	fa22 f303 	lsr.w	r3, r2, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	f47f ae7e 	bne.w	8002d14 <HAL_GPIO_Init+0x14>
  }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	372c      	adds	r7, #44	; 0x2c
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr
 8003024:	40010400 	.word	0x40010400

08003028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	807b      	strh	r3, [r7, #2]
 8003034:	4613      	mov	r3, r2
 8003036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003038:	787b      	ldrb	r3, [r7, #1]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800303e:	887a      	ldrh	r2, [r7, #2]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003044:	e003      	b.n	800304e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003046:	887b      	ldrh	r3, [r7, #2]
 8003048:	041a      	lsls	r2, r3, #16
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	611a      	str	r2, [r3, #16]
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e26c      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 8087 	beq.w	8003186 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003078:	4b92      	ldr	r3, [pc, #584]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 030c 	and.w	r3, r3, #12
 8003080:	2b04      	cmp	r3, #4
 8003082:	d00c      	beq.n	800309e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003084:	4b8f      	ldr	r3, [pc, #572]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	2b08      	cmp	r3, #8
 800308e:	d112      	bne.n	80030b6 <HAL_RCC_OscConfig+0x5e>
 8003090:	4b8c      	ldr	r3, [pc, #560]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800309c:	d10b      	bne.n	80030b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309e:	4b89      	ldr	r3, [pc, #548]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d06c      	beq.n	8003184 <HAL_RCC_OscConfig+0x12c>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d168      	bne.n	8003184 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e246      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030be:	d106      	bne.n	80030ce <HAL_RCC_OscConfig+0x76>
 80030c0:	4b80      	ldr	r3, [pc, #512]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a7f      	ldr	r2, [pc, #508]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	e02e      	b.n	800312c <HAL_RCC_OscConfig+0xd4>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x98>
 80030d6:	4b7b      	ldr	r3, [pc, #492]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a7a      	ldr	r2, [pc, #488]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b78      	ldr	r3, [pc, #480]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a77      	ldr	r2, [pc, #476]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e01d      	b.n	800312c <HAL_RCC_OscConfig+0xd4>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030f8:	d10c      	bne.n	8003114 <HAL_RCC_OscConfig+0xbc>
 80030fa:	4b72      	ldr	r3, [pc, #456]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a71      	ldr	r2, [pc, #452]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a6e      	ldr	r2, [pc, #440]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e00b      	b.n	800312c <HAL_RCC_OscConfig+0xd4>
 8003114:	4b6b      	ldr	r3, [pc, #428]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a6a      	ldr	r2, [pc, #424]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 800311a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	4b68      	ldr	r3, [pc, #416]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a67      	ldr	r2, [pc, #412]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d013      	beq.n	800315c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fe fbf6 	bl	8001924 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	e008      	b.n	800314e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800313c:	f7fe fbf2 	bl	8001924 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	2b64      	cmp	r3, #100	; 0x64
 8003148:	d901      	bls.n	800314e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e1fa      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	4b5d      	ldr	r3, [pc, #372]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0f0      	beq.n	800313c <HAL_RCC_OscConfig+0xe4>
 800315a:	e014      	b.n	8003186 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe fbe2 	bl	8001924 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003164:	f7fe fbde 	bl	8001924 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e1e6      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003176:	4b53      	ldr	r3, [pc, #332]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x10c>
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d063      	beq.n	800325a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003192:	4b4c      	ldr	r3, [pc, #304]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 030c 	and.w	r3, r3, #12
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800319e:	4b49      	ldr	r3, [pc, #292]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d11c      	bne.n	80031e4 <HAL_RCC_OscConfig+0x18c>
 80031aa:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d116      	bne.n	80031e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_RCC_OscConfig+0x176>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d001      	beq.n	80031ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e1ba      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ce:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	4939      	ldr	r1, [pc, #228]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031e2:	e03a      	b.n	800325a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d020      	beq.n	800322e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ec:	4b36      	ldr	r3, [pc, #216]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7fe fb97 	bl	8001924 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031fa:	f7fe fb93 	bl	8001924 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e19b      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320c:	4b2d      	ldr	r3, [pc, #180]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003218:	4b2a      	ldr	r3, [pc, #168]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	4927      	ldr	r1, [pc, #156]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003228:	4313      	orrs	r3, r2
 800322a:	600b      	str	r3, [r1, #0]
 800322c:	e015      	b.n	800325a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800322e:	4b26      	ldr	r3, [pc, #152]	; (80032c8 <HAL_RCC_OscConfig+0x270>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fe fb76 	bl	8001924 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800323c:	f7fe fb72 	bl	8001924 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e17a      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324e:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d03a      	beq.n	80032dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d019      	beq.n	80032a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800326e:	4b17      	ldr	r3, [pc, #92]	; (80032cc <HAL_RCC_OscConfig+0x274>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003274:	f7fe fb56 	bl	8001924 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327c:	f7fe fb52 	bl	8001924 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e15a      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328e:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <HAL_RCC_OscConfig+0x26c>)
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800329a:	2001      	movs	r0, #1
 800329c:	f000 fad8 	bl	8003850 <RCC_Delay>
 80032a0:	e01c      	b.n	80032dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032a2:	4b0a      	ldr	r3, [pc, #40]	; (80032cc <HAL_RCC_OscConfig+0x274>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a8:	f7fe fb3c 	bl	8001924 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ae:	e00f      	b.n	80032d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b0:	f7fe fb38 	bl	8001924 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d908      	bls.n	80032d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e140      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
 80032c8:	42420000 	.word	0x42420000
 80032cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	4b9e      	ldr	r3, [pc, #632]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e9      	bne.n	80032b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80a6 	beq.w	8003436 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ea:	2300      	movs	r3, #0
 80032ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ee:	4b97      	ldr	r3, [pc, #604]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 80032f0:	69db      	ldr	r3, [r3, #28]
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10d      	bne.n	8003316 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032fa:	4b94      	ldr	r3, [pc, #592]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	4a93      	ldr	r2, [pc, #588]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 8003300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003304:	61d3      	str	r3, [r2, #28]
 8003306:	4b91      	ldr	r3, [pc, #580]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330e:	60bb      	str	r3, [r7, #8]
 8003310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003312:	2301      	movs	r3, #1
 8003314:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003316:	4b8e      	ldr	r3, [pc, #568]	; (8003550 <HAL_RCC_OscConfig+0x4f8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d118      	bne.n	8003354 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003322:	4b8b      	ldr	r3, [pc, #556]	; (8003550 <HAL_RCC_OscConfig+0x4f8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a8a      	ldr	r2, [pc, #552]	; (8003550 <HAL_RCC_OscConfig+0x4f8>)
 8003328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800332e:	f7fe faf9 	bl	8001924 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003336:	f7fe faf5 	bl	8001924 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b64      	cmp	r3, #100	; 0x64
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e0fd      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003348:	4b81      	ldr	r3, [pc, #516]	; (8003550 <HAL_RCC_OscConfig+0x4f8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f0      	beq.n	8003336 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x312>
 800335c:	4b7b      	ldr	r3, [pc, #492]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	4a7a      	ldr	r2, [pc, #488]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6213      	str	r3, [r2, #32]
 8003368:	e02d      	b.n	80033c6 <HAL_RCC_OscConfig+0x36e>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0x334>
 8003372:	4b76      	ldr	r3, [pc, #472]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	4a75      	ldr	r2, [pc, #468]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	6213      	str	r3, [r2, #32]
 800337e:	4b73      	ldr	r3, [pc, #460]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4a72      	ldr	r2, [pc, #456]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 8003384:	f023 0304 	bic.w	r3, r3, #4
 8003388:	6213      	str	r3, [r2, #32]
 800338a:	e01c      	b.n	80033c6 <HAL_RCC_OscConfig+0x36e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b05      	cmp	r3, #5
 8003392:	d10c      	bne.n	80033ae <HAL_RCC_OscConfig+0x356>
 8003394:	4b6d      	ldr	r3, [pc, #436]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4a6c      	ldr	r2, [pc, #432]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 800339a:	f043 0304 	orr.w	r3, r3, #4
 800339e:	6213      	str	r3, [r2, #32]
 80033a0:	4b6a      	ldr	r3, [pc, #424]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4a69      	ldr	r2, [pc, #420]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6213      	str	r3, [r2, #32]
 80033ac:	e00b      	b.n	80033c6 <HAL_RCC_OscConfig+0x36e>
 80033ae:	4b67      	ldr	r3, [pc, #412]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4a66      	ldr	r2, [pc, #408]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	6213      	str	r3, [r2, #32]
 80033ba:	4b64      	ldr	r3, [pc, #400]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4a63      	ldr	r2, [pc, #396]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	f023 0304 	bic.w	r3, r3, #4
 80033c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d015      	beq.n	80033fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ce:	f7fe faa9 	bl	8001924 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d6:	f7fe faa5 	bl	8001924 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e0ab      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ec:	4b57      	ldr	r3, [pc, #348]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0ee      	beq.n	80033d6 <HAL_RCC_OscConfig+0x37e>
 80033f8:	e014      	b.n	8003424 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fa:	f7fe fa93 	bl	8001924 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fe fa8f 	bl	8001924 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e095      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003418:	4b4c      	ldr	r3, [pc, #304]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1ee      	bne.n	8003402 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d105      	bne.n	8003436 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342a:	4b48      	ldr	r3, [pc, #288]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	4a47      	ldr	r2, [pc, #284]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 8003430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003434:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 8081 	beq.w	8003542 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003440:	4b42      	ldr	r3, [pc, #264]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	d061      	beq.n	8003510 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	2b02      	cmp	r3, #2
 8003452:	d146      	bne.n	80034e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003454:	4b3f      	ldr	r3, [pc, #252]	; (8003554 <HAL_RCC_OscConfig+0x4fc>)
 8003456:	2200      	movs	r2, #0
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345a:	f7fe fa63 	bl	8001924 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003462:	f7fe fa5f 	bl	8001924 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e067      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003474:	4b35      	ldr	r3, [pc, #212]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003488:	d108      	bne.n	800349c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800348a:	4b30      	ldr	r3, [pc, #192]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	492d      	ldr	r1, [pc, #180]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800349c:	4b2b      	ldr	r3, [pc, #172]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a19      	ldr	r1, [r3, #32]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	430b      	orrs	r3, r1
 80034ae:	4927      	ldr	r1, [pc, #156]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b4:	4b27      	ldr	r3, [pc, #156]	; (8003554 <HAL_RCC_OscConfig+0x4fc>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ba:	f7fe fa33 	bl	8001924 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c0:	e008      	b.n	80034d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c2:	f7fe fa2f 	bl	8001924 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e037      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034d4:	4b1d      	ldr	r3, [pc, #116]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d0f0      	beq.n	80034c2 <HAL_RCC_OscConfig+0x46a>
 80034e0:	e02f      	b.n	8003542 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e2:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <HAL_RCC_OscConfig+0x4fc>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fe fa1c 	bl	8001924 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f0:	f7fe fa18 	bl	8001924 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e020      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1f0      	bne.n	80034f0 <HAL_RCC_OscConfig+0x498>
 800350e:	e018      	b.n	8003542 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e013      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_RCC_OscConfig+0x4f4>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	429a      	cmp	r2, r3
 800352e:	d106      	bne.n	800353e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	40007000 	.word	0x40007000
 8003554:	42420060 	.word	0x42420060

08003558 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0d0      	b.n	800370e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800356c:	4b6a      	ldr	r3, [pc, #424]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d910      	bls.n	800359c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b67      	ldr	r3, [pc, #412]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 0207 	bic.w	r2, r3, #7
 8003582:	4965      	ldr	r1, [pc, #404]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800358a:	4b63      	ldr	r3, [pc, #396]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	683a      	ldr	r2, [r7, #0]
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0b8      	b.n	800370e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d020      	beq.n	80035ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d005      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035b4:	4b59      	ldr	r3, [pc, #356]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a58      	ldr	r2, [pc, #352]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d005      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035cc:	4b53      	ldr	r3, [pc, #332]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	4a52      	ldr	r2, [pc, #328]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80035d2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d8:	4b50      	ldr	r3, [pc, #320]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	494d      	ldr	r1, [pc, #308]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d040      	beq.n	8003678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	4b47      	ldr	r3, [pc, #284]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d115      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e07f      	b.n	800370e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003616:	4b41      	ldr	r3, [pc, #260]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e073      	b.n	800370e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003626:	4b3d      	ldr	r3, [pc, #244]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e06b      	b.n	800370e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003636:	4b39      	ldr	r3, [pc, #228]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f023 0203 	bic.w	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4936      	ldr	r1, [pc, #216]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003648:	f7fe f96c 	bl	8001924 <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	e00a      	b.n	8003666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003650:	f7fe f968 	bl	8001924 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	; 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e053      	b.n	800370e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	4b2d      	ldr	r3, [pc, #180]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 020c 	and.w	r2, r3, #12
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	429a      	cmp	r2, r3
 8003676:	d1eb      	bne.n	8003650 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003678:	4b27      	ldr	r3, [pc, #156]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d210      	bcs.n	80036a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b24      	ldr	r3, [pc, #144]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 0207 	bic.w	r2, r3, #7
 800368e:	4922      	ldr	r1, [pc, #136]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d001      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e032      	b.n	800370e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036b4:	4b19      	ldr	r3, [pc, #100]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	4916      	ldr	r1, [pc, #88]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	490e      	ldr	r1, [pc, #56]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036e6:	f000 f821 	bl	800372c <HAL_RCC_GetSysClockFreq>
 80036ea:	4602      	mov	r2, r0
 80036ec:	4b0b      	ldr	r3, [pc, #44]	; (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	490a      	ldr	r1, [pc, #40]	; (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80036f8:	5ccb      	ldrb	r3, [r1, r3]
 80036fa:	fa22 f303 	lsr.w	r3, r2, r3
 80036fe:	4a09      	ldr	r2, [pc, #36]	; (8003724 <HAL_RCC_ClockConfig+0x1cc>)
 8003700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_RCC_ClockConfig+0x1d0>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fe f8ca 	bl	80018a0 <HAL_InitTick>

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40022000 	.word	0x40022000
 800371c:	40021000 	.word	0x40021000
 8003720:	08006f50 	.word	0x08006f50
 8003724:	20000000 	.word	0x20000000
 8003728:	20000004 	.word	0x20000004

0800372c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800372c:	b490      	push	{r4, r7}
 800372e:	b08a      	sub	sp, #40	; 0x28
 8003730:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003732:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003734:	1d3c      	adds	r4, r7, #4
 8003736:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800373c:	f240 2301 	movw	r3, #513	; 0x201
 8003740:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	2300      	movs	r3, #0
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	2300      	movs	r3, #0
 800374c:	627b      	str	r3, [r7, #36]	; 0x24
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003756:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b04      	cmp	r3, #4
 8003764:	d002      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0x40>
 8003766:	2b08      	cmp	r3, #8
 8003768:	d003      	beq.n	8003772 <HAL_RCC_GetSysClockFreq+0x46>
 800376a:	e02d      	b.n	80037c8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800376e:	623b      	str	r3, [r7, #32]
      break;
 8003770:	e02d      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	0c9b      	lsrs	r3, r3, #18
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800377e:	4413      	add	r3, r2
 8003780:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003784:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d013      	beq.n	80037b8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003790:	4b13      	ldr	r3, [pc, #76]	; (80037e0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	0c5b      	lsrs	r3, r3, #17
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800379e:	4413      	add	r3, r2
 80037a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037a4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037aa:	fb02 f203 	mul.w	r2, r2, r3
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
 80037b6:	e004      	b.n	80037c2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	4a0b      	ldr	r2, [pc, #44]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037bc:	fb02 f303 	mul.w	r3, r2, r3
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	623b      	str	r3, [r7, #32]
      break;
 80037c6:	e002      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ca:	623b      	str	r3, [r7, #32]
      break;
 80037cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ce:	6a3b      	ldr	r3, [r7, #32]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3728      	adds	r7, #40	; 0x28
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc90      	pop	{r4, r7}
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	08006f30 	.word	0x08006f30
 80037e0:	40021000 	.word	0x40021000
 80037e4:	007a1200 	.word	0x007a1200
 80037e8:	003d0900 	.word	0x003d0900

080037ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037f0:	4b02      	ldr	r3, [pc, #8]	; (80037fc <HAL_RCC_GetHCLKFreq+0x10>)
 80037f2:	681b      	ldr	r3, [r3, #0]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr
 80037fc:	20000000 	.word	0x20000000

08003800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003804:	f7ff fff2 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003808:	4602      	mov	r2, r0
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	4903      	ldr	r1, [pc, #12]	; (8003824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003816:	5ccb      	ldrb	r3, [r1, r3]
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	08006f60 	.word	0x08006f60

08003828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800382c:	f7ff ffde 	bl	80037ec <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b05      	ldr	r3, [pc, #20]	; (8003848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	0adb      	lsrs	r3, r3, #11
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4903      	ldr	r1, [pc, #12]	; (800384c <HAL_RCC_GetPCLK2Freq+0x24>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	08006f60 	.word	0x08006f60

08003850 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <RCC_Delay+0x34>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <RCC_Delay+0x38>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	0a5b      	lsrs	r3, r3, #9
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800386c:	bf00      	nop
  }
  while (Delay --);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1e5a      	subs	r2, r3, #1
 8003872:	60fa      	str	r2, [r7, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1f9      	bne.n	800386c <RCC_Delay+0x1c>
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	20000000 	.word	0x20000000
 8003888:	10624dd3 	.word	0x10624dd3

0800388c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d07d      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80038a8:	2300      	movs	r3, #0
 80038aa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ac:	4b4f      	ldr	r3, [pc, #316]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10d      	bne.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b8:	4b4c      	ldr	r3, [pc, #304]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	4a4b      	ldr	r2, [pc, #300]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c2:	61d3      	str	r3, [r2, #28]
 80038c4:	4b49      	ldr	r3, [pc, #292]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038d0:	2301      	movs	r3, #1
 80038d2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d4:	4b46      	ldr	r3, [pc, #280]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d118      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038e0:	4b43      	ldr	r3, [pc, #268]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a42      	ldr	r2, [pc, #264]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ec:	f7fe f81a 	bl	8001924 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f2:	e008      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f4:	f7fe f816 	bl	8001924 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e06d      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003906:	4b3a      	ldr	r3, [pc, #232]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003912:	4b36      	ldr	r3, [pc, #216]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d02e      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	429a      	cmp	r2, r3
 800392e:	d027      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003930:	4b2e      	ldr	r3, [pc, #184]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003938:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800393a:	4b2e      	ldr	r3, [pc, #184]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800393c:	2201      	movs	r2, #1
 800393e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003940:	4b2c      	ldr	r3, [pc, #176]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003942:	2200      	movs	r2, #0
 8003944:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003946:	4a29      	ldr	r2, [pc, #164]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d014      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003956:	f7fd ffe5 	bl	8001924 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395c:	e00a      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fd ffe1 	bl	8001924 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d901      	bls.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e036      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003974:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0ee      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003980:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	4917      	ldr	r1, [pc, #92]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398e:	4313      	orrs	r3, r2
 8003990:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d105      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003998:	4b14      	ldr	r3, [pc, #80]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399a:	69db      	ldr	r3, [r3, #28]
 800399c:	4a13      	ldr	r2, [pc, #76]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800399e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039b0:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	490b      	ldr	r1, [pc, #44]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d008      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	4904      	ldr	r1, [pc, #16]	; (80039ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40007000 	.word	0x40007000
 80039f4:	42420440 	.word	0x42420440

080039f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b08d      	sub	sp, #52	; 0x34
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a00:	4b6b      	ldr	r3, [pc, #428]	; (8003bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8003a02:	f107 040c 	add.w	r4, r7, #12
 8003a06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a0c:	f240 2301 	movw	r3, #513	; 0x201
 8003a10:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
 8003a16:	2300      	movs	r3, #0
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	2300      	movs	r3, #0
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	2b0f      	cmp	r3, #15
 8003a2c:	f200 80b6 	bhi.w	8003b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8003a30:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003b1b 	.word	0x08003b1b
 8003a3c:	08003b81 	.word	0x08003b81
 8003a40:	08003b9d 	.word	0x08003b9d
 8003a44:	08003b0b 	.word	0x08003b0b
 8003a48:	08003b9d 	.word	0x08003b9d
 8003a4c:	08003b9d 	.word	0x08003b9d
 8003a50:	08003b9d 	.word	0x08003b9d
 8003a54:	08003b13 	.word	0x08003b13
 8003a58:	08003b9d 	.word	0x08003b9d
 8003a5c:	08003b9d 	.word	0x08003b9d
 8003a60:	08003b9d 	.word	0x08003b9d
 8003a64:	08003b9d 	.word	0x08003b9d
 8003a68:	08003b9d 	.word	0x08003b9d
 8003a6c:	08003b9d 	.word	0x08003b9d
 8003a70:	08003b9d 	.word	0x08003b9d
 8003a74:	08003a79 	.word	0x08003a79
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003a78:	4b4e      	ldr	r3, [pc, #312]	; (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003a7e:	4b4d      	ldr	r3, [pc, #308]	; (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 808a 	beq.w	8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	0c9b      	lsrs	r3, r3, #18
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003a98:	4413      	add	r3, r2
 8003a9a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a9e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d018      	beq.n	8003adc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003aaa:	4b42      	ldr	r3, [pc, #264]	; (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	0c5b      	lsrs	r3, r3, #17
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003ab8:	4413      	add	r3, r2
 8003aba:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003abe:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00d      	beq.n	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003aca:	4a3b      	ldr	r2, [pc, #236]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ada:	e004      	b.n	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	4a37      	ldr	r2, [pc, #220]	; (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003ae6:	4b33      	ldr	r3, [pc, #204]	; (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af2:	d102      	bne.n	8003afa <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8003af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8003af8:	e052      	b.n	8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	4a30      	ldr	r2, [pc, #192]	; (8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8003b00:	fba2 2303 	umull	r2, r3, r2, r3
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b08:	e04a      	b.n	8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003b0a:	f7ff fe0f 	bl	800372c <HAL_RCC_GetSysClockFreq>
 8003b0e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003b10:	e049      	b.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8003b12:	f7ff fe0b 	bl	800372c <HAL_RCC_GetSysClockFreq>
 8003b16:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8003b18:	e045      	b.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8003b1a:	4b26      	ldr	r3, [pc, #152]	; (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b2a:	d108      	bne.n	8003b3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8003b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3c:	e01f      	b.n	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b48:	d109      	bne.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8003b56:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5c:	e00f      	b.n	8003b7e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b68:	d11c      	bne.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003b6a:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d016      	beq.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8003b76:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003b7a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003b7c:	e012      	b.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003b7e:	e011      	b.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003b80:	f7ff fe52 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 8003b84:	4602      	mov	r2, r0
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	0b9b      	lsrs	r3, r3, #14
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	3301      	adds	r3, #1
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003b9a:	e004      	b.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8003b9c:	bf00      	nop
 8003b9e:	e002      	b.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8003ba0:	bf00      	nop
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8003ba4:	bf00      	nop
    }
  }
  return (frequency);
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3734      	adds	r7, #52	; 0x34
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd90      	pop	{r4, r7, pc}
 8003bb0:	08006f40 	.word	0x08006f40
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	007a1200 	.word	0x007a1200
 8003bbc:	003d0900 	.word	0x003d0900
 8003bc0:	aaaaaaab 	.word	0xaaaaaaab

08003bc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e03f      	b.n	8003c56 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fd fdc8 	bl	8001780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2224      	movs	r2, #36	; 0x24
 8003bf4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fb39 	bl	8004280 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b08a      	sub	sp, #40	; 0x28
 8003c62:	af02      	add	r7, sp, #8
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	603b      	str	r3, [r7, #0]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d17c      	bne.n	8003d78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d002      	beq.n	8003c8a <HAL_UART_Transmit+0x2c>
 8003c84:	88fb      	ldrh	r3, [r7, #6]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e075      	b.n	8003d7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_UART_Transmit+0x3e>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e06e      	b.n	8003d7a <HAL_UART_Transmit+0x11c>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2221      	movs	r2, #33	; 0x21
 8003cae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003cb2:	f7fd fe37 	bl	8001924 <HAL_GetTick>
 8003cb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	88fa      	ldrh	r2, [r7, #6]
 8003cbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	88fa      	ldrh	r2, [r7, #6]
 8003cc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ccc:	d108      	bne.n	8003ce0 <HAL_UART_Transmit+0x82>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d104      	bne.n	8003ce0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	e003      	b.n	8003ce8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003cf0:	e02a      	b.n	8003d48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	2180      	movs	r1, #128	; 0x80
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f95c 	bl	8003fba <UART_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e036      	b.n	8003d7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10b      	bne.n	8003d2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	3302      	adds	r3, #2
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	e007      	b.n	8003d3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	781a      	ldrb	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	3301      	adds	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1cf      	bne.n	8003cf2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2140      	movs	r1, #64	; 0x40
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f92c 	bl	8003fba <UART_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e006      	b.n	8003d7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	e000      	b.n	8003d7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d78:	2302      	movs	r3, #2
  }
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10d      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f003 0320 	and.w	r3, r3, #32
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d008      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x52>
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f9d5 	bl	800417e <UART_Receive_IT>
      return;
 8003dd4:	e0d0      	b.n	8003f78 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80b0 	beq.w	8003f3e <HAL_UART_IRQHandler+0x1ba>
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_UART_IRQHandler+0x70>
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80a5 	beq.w	8003f3e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_UART_IRQHandler+0x90>
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	f043 0201 	orr.w	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <HAL_UART_IRQHandler+0xb0>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	f043 0202 	orr.w	r2, r3, #2
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <HAL_UART_IRQHandler+0xd0>
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4c:	f043 0204 	orr.w	r2, r3, #4
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00f      	beq.n	8003e7e <HAL_UART_IRQHandler+0xfa>
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	f003 0320 	and.w	r3, r3, #32
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d104      	bne.n	8003e72 <HAL_UART_IRQHandler+0xee>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	f043 0208 	orr.w	r2, r3, #8
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d077      	beq.n	8003f76 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x11c>
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f003 0320 	and.w	r3, r3, #32
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f96f 	bl	800417e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	bf14      	ite	ne
 8003eae:	2301      	movne	r3, #1
 8003eb0:	2300      	moveq	r3, #0
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d102      	bne.n	8003ec8 <HAL_UART_IRQHandler+0x144>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d031      	beq.n	8003f2c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 f8c0 	bl	800404e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d023      	beq.n	8003f24 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eea:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d013      	beq.n	8003f1c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef8:	4a21      	ldr	r2, [pc, #132]	; (8003f80 <HAL_UART_IRQHandler+0x1fc>)
 8003efa:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fe fb8b 	bl	800261c <HAL_DMA_Abort_IT>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d016      	beq.n	8003f3a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f16:	4610      	mov	r0, r2
 8003f18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1a:	e00e      	b.n	8003f3a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f843 	bl	8003fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f22:	e00a      	b.n	8003f3a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f83f 	bl	8003fa8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2a:	e006      	b.n	8003f3a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f83b 	bl	8003fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003f38:	e01d      	b.n	8003f76 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3a:	bf00      	nop
    return;
 8003f3c:	e01b      	b.n	8003f76 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_UART_IRQHandler+0x1d6>
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f8ac 	bl	80040b0 <UART_Transmit_IT>
    return;
 8003f58:	e00e      	b.n	8003f78 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <HAL_UART_IRQHandler+0x1f4>
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f8ed 	bl	800414e <UART_EndTransmit_IT>
    return;
 8003f74:	e000      	b.n	8003f78 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003f76:	bf00      	nop
  }
}
 8003f78:	3720      	adds	r7, #32
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	08004089 	.word	0x08004089

08003f84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr

08003fba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fca:	e02c      	b.n	8004026 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d028      	beq.n	8004026 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0x30>
 8003fda:	f7fd fca3 	bl	8001924 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d21d      	bcs.n	8004026 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68da      	ldr	r2, [r3, #12]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ff8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e00f      	b.n	8004046 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4013      	ands	r3, r2
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	429a      	cmp	r2, r3
 8004034:	bf0c      	ite	eq
 8004036:	2301      	moveq	r3, #1
 8004038:	2300      	movne	r3, #0
 800403a:	b2db      	uxtb	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	79fb      	ldrb	r3, [r7, #7]
 8004040:	429a      	cmp	r2, r3
 8004042:	d0c3      	beq.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004064:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0201 	bic.w	r2, r2, #1
 8004074:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr

08004088 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f7ff ff80 	bl	8003fa8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b21      	cmp	r3, #33	; 0x21
 80040c2:	d13e      	bne.n	8004142 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040cc:	d114      	bne.n	80040f8 <UART_Transmit_IT+0x48>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d110      	bne.n	80040f8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	1c9a      	adds	r2, r3, #2
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	621a      	str	r2, [r3, #32]
 80040f6:	e008      	b.n	800410a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	1c59      	adds	r1, r3, #1
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6211      	str	r1, [r2, #32]
 8004102:	781a      	ldrb	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29b      	uxth	r3, r3
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	4619      	mov	r1, r3
 8004118:	84d1      	strh	r1, [r2, #38]	; 0x26
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10f      	bne.n	800413e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68da      	ldr	r2, [r3, #12]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800412c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800413c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800413e:	2300      	movs	r3, #0
 8004140:	e000      	b.n	8004144 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004142:	2302      	movs	r3, #2
  }
}
 8004144:	4618      	mov	r0, r3
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr

0800414e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b082      	sub	sp, #8
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004164:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff ff08 	bl	8003f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004174:	2300      	movs	r3, #0
}
 8004176:	4618      	mov	r0, r3
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b22      	cmp	r3, #34	; 0x22
 8004190:	d170      	bne.n	8004274 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800419a:	d117      	bne.n	80041cc <UART_Receive_IT+0x4e>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d113      	bne.n	80041cc <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	1c9a      	adds	r2, r3, #2
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	629a      	str	r2, [r3, #40]	; 0x28
 80041ca:	e026      	b.n	800421a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d0:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041de:	d007      	beq.n	80041f0 <UART_Receive_IT+0x72>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10a      	bne.n	80041fe <UART_Receive_IT+0x80>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d106      	bne.n	80041fe <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	701a      	strb	r2, [r3, #0]
 80041fc:	e008      	b.n	8004210 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800420a:	b2da      	uxtb	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29b      	uxth	r3, r3
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	4619      	mov	r1, r3
 8004228:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800422a:	2b00      	cmp	r3, #0
 800422c:	d120      	bne.n	8004270 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0220 	bic.w	r2, r2, #32
 800423c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800424c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0201 	bic.w	r2, r2, #1
 800425c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff fe95 	bl	8003f96 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800426c:	2300      	movs	r3, #0
 800426e:	e002      	b.n	8004276 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	e000      	b.n	8004276 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004274:	2302      	movs	r3, #2
  }
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68da      	ldr	r2, [r3, #12]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689a      	ldr	r2, [r3, #8]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80042ba:	f023 030c 	bic.w	r3, r3, #12
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	68b9      	ldr	r1, [r7, #8]
 80042c4:	430b      	orrs	r3, r1
 80042c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a2c      	ldr	r2, [pc, #176]	; (8004394 <UART_SetConfig+0x114>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d103      	bne.n	80042f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042e8:	f7ff fa9e 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	e002      	b.n	80042f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7ff fa86 	bl	8003800 <HAL_RCC_GetPCLK1Freq>
 80042f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009a      	lsls	r2, r3, #2
 8004300:	441a      	add	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	fbb2 f3f3 	udiv	r3, r2, r3
 800430c:	4a22      	ldr	r2, [pc, #136]	; (8004398 <UART_SetConfig+0x118>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	095b      	lsrs	r3, r3, #5
 8004314:	0119      	lsls	r1, r3, #4
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009a      	lsls	r2, r3, #2
 8004320:	441a      	add	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	fbb2 f2f3 	udiv	r2, r2, r3
 800432c:	4b1a      	ldr	r3, [pc, #104]	; (8004398 <UART_SetConfig+0x118>)
 800432e:	fba3 0302 	umull	r0, r3, r3, r2
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	2064      	movs	r0, #100	; 0x64
 8004336:	fb00 f303 	mul.w	r3, r0, r3
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	3332      	adds	r3, #50	; 0x32
 8004340:	4a15      	ldr	r2, [pc, #84]	; (8004398 <UART_SetConfig+0x118>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800434c:	4419      	add	r1, r3
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009a      	lsls	r2, r3, #2
 8004358:	441a      	add	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	fbb2 f2f3 	udiv	r2, r2, r3
 8004364:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <UART_SetConfig+0x118>)
 8004366:	fba3 0302 	umull	r0, r3, r3, r2
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2064      	movs	r0, #100	; 0x64
 800436e:	fb00 f303 	mul.w	r3, r0, r3
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	3332      	adds	r3, #50	; 0x32
 8004378:	4a07      	ldr	r2, [pc, #28]	; (8004398 <UART_SetConfig+0x118>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	f003 020f 	and.w	r2, r3, #15
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	440a      	add	r2, r1
 800438a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800438c:	bf00      	nop
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40013800 	.word	0x40013800
 8004398:	51eb851f 	.word	0x51eb851f

0800439c <__errno>:
 800439c:	4b01      	ldr	r3, [pc, #4]	; (80043a4 <__errno+0x8>)
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	2000000c 	.word	0x2000000c

080043a8 <__libc_init_array>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	2600      	movs	r6, #0
 80043ac:	4d0c      	ldr	r5, [pc, #48]	; (80043e0 <__libc_init_array+0x38>)
 80043ae:	4c0d      	ldr	r4, [pc, #52]	; (80043e4 <__libc_init_array+0x3c>)
 80043b0:	1b64      	subs	r4, r4, r5
 80043b2:	10a4      	asrs	r4, r4, #2
 80043b4:	42a6      	cmp	r6, r4
 80043b6:	d109      	bne.n	80043cc <__libc_init_array+0x24>
 80043b8:	f002 fd84 	bl	8006ec4 <_init>
 80043bc:	2600      	movs	r6, #0
 80043be:	4d0a      	ldr	r5, [pc, #40]	; (80043e8 <__libc_init_array+0x40>)
 80043c0:	4c0a      	ldr	r4, [pc, #40]	; (80043ec <__libc_init_array+0x44>)
 80043c2:	1b64      	subs	r4, r4, r5
 80043c4:	10a4      	asrs	r4, r4, #2
 80043c6:	42a6      	cmp	r6, r4
 80043c8:	d105      	bne.n	80043d6 <__libc_init_array+0x2e>
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d0:	4798      	blx	r3
 80043d2:	3601      	adds	r6, #1
 80043d4:	e7ee      	b.n	80043b4 <__libc_init_array+0xc>
 80043d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043da:	4798      	blx	r3
 80043dc:	3601      	adds	r6, #1
 80043de:	e7f2      	b.n	80043c6 <__libc_init_array+0x1e>
 80043e0:	0800734c 	.word	0x0800734c
 80043e4:	0800734c 	.word	0x0800734c
 80043e8:	0800734c 	.word	0x0800734c
 80043ec:	08007350 	.word	0x08007350

080043f0 <memset>:
 80043f0:	4603      	mov	r3, r0
 80043f2:	4402      	add	r2, r0
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d100      	bne.n	80043fa <memset+0xa>
 80043f8:	4770      	bx	lr
 80043fa:	f803 1b01 	strb.w	r1, [r3], #1
 80043fe:	e7f9      	b.n	80043f4 <memset+0x4>

08004400 <__cvt>:
 8004400:	2b00      	cmp	r3, #0
 8004402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004406:	461f      	mov	r7, r3
 8004408:	bfbb      	ittet	lt
 800440a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800440e:	461f      	movlt	r7, r3
 8004410:	2300      	movge	r3, #0
 8004412:	232d      	movlt	r3, #45	; 0x2d
 8004414:	b088      	sub	sp, #32
 8004416:	4614      	mov	r4, r2
 8004418:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800441a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800441c:	7013      	strb	r3, [r2, #0]
 800441e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004420:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004424:	f023 0820 	bic.w	r8, r3, #32
 8004428:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800442c:	d005      	beq.n	800443a <__cvt+0x3a>
 800442e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004432:	d100      	bne.n	8004436 <__cvt+0x36>
 8004434:	3501      	adds	r5, #1
 8004436:	2302      	movs	r3, #2
 8004438:	e000      	b.n	800443c <__cvt+0x3c>
 800443a:	2303      	movs	r3, #3
 800443c:	aa07      	add	r2, sp, #28
 800443e:	9204      	str	r2, [sp, #16]
 8004440:	aa06      	add	r2, sp, #24
 8004442:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004446:	e9cd 3500 	strd	r3, r5, [sp]
 800444a:	4622      	mov	r2, r4
 800444c:	463b      	mov	r3, r7
 800444e:	f000 fe13 	bl	8005078 <_dtoa_r>
 8004452:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004456:	4606      	mov	r6, r0
 8004458:	d102      	bne.n	8004460 <__cvt+0x60>
 800445a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800445c:	07db      	lsls	r3, r3, #31
 800445e:	d522      	bpl.n	80044a6 <__cvt+0xa6>
 8004460:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004464:	eb06 0905 	add.w	r9, r6, r5
 8004468:	d110      	bne.n	800448c <__cvt+0x8c>
 800446a:	7833      	ldrb	r3, [r6, #0]
 800446c:	2b30      	cmp	r3, #48	; 0x30
 800446e:	d10a      	bne.n	8004486 <__cvt+0x86>
 8004470:	2200      	movs	r2, #0
 8004472:	2300      	movs	r3, #0
 8004474:	4620      	mov	r0, r4
 8004476:	4639      	mov	r1, r7
 8004478:	f7fc fb02 	bl	8000a80 <__aeabi_dcmpeq>
 800447c:	b918      	cbnz	r0, 8004486 <__cvt+0x86>
 800447e:	f1c5 0501 	rsb	r5, r5, #1
 8004482:	f8ca 5000 	str.w	r5, [sl]
 8004486:	f8da 3000 	ldr.w	r3, [sl]
 800448a:	4499      	add	r9, r3
 800448c:	2200      	movs	r2, #0
 800448e:	2300      	movs	r3, #0
 8004490:	4620      	mov	r0, r4
 8004492:	4639      	mov	r1, r7
 8004494:	f7fc faf4 	bl	8000a80 <__aeabi_dcmpeq>
 8004498:	b108      	cbz	r0, 800449e <__cvt+0x9e>
 800449a:	f8cd 901c 	str.w	r9, [sp, #28]
 800449e:	2230      	movs	r2, #48	; 0x30
 80044a0:	9b07      	ldr	r3, [sp, #28]
 80044a2:	454b      	cmp	r3, r9
 80044a4:	d307      	bcc.n	80044b6 <__cvt+0xb6>
 80044a6:	4630      	mov	r0, r6
 80044a8:	9b07      	ldr	r3, [sp, #28]
 80044aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80044ac:	1b9b      	subs	r3, r3, r6
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	b008      	add	sp, #32
 80044b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b6:	1c59      	adds	r1, r3, #1
 80044b8:	9107      	str	r1, [sp, #28]
 80044ba:	701a      	strb	r2, [r3, #0]
 80044bc:	e7f0      	b.n	80044a0 <__cvt+0xa0>

080044be <__exponent>:
 80044be:	4603      	mov	r3, r0
 80044c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044c2:	2900      	cmp	r1, #0
 80044c4:	f803 2b02 	strb.w	r2, [r3], #2
 80044c8:	bfb6      	itet	lt
 80044ca:	222d      	movlt	r2, #45	; 0x2d
 80044cc:	222b      	movge	r2, #43	; 0x2b
 80044ce:	4249      	neglt	r1, r1
 80044d0:	2909      	cmp	r1, #9
 80044d2:	7042      	strb	r2, [r0, #1]
 80044d4:	dd2b      	ble.n	800452e <__exponent+0x70>
 80044d6:	f10d 0407 	add.w	r4, sp, #7
 80044da:	46a4      	mov	ip, r4
 80044dc:	270a      	movs	r7, #10
 80044de:	fb91 f6f7 	sdiv	r6, r1, r7
 80044e2:	460a      	mov	r2, r1
 80044e4:	46a6      	mov	lr, r4
 80044e6:	fb07 1516 	mls	r5, r7, r6, r1
 80044ea:	2a63      	cmp	r2, #99	; 0x63
 80044ec:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80044f0:	4631      	mov	r1, r6
 80044f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80044f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80044fa:	dcf0      	bgt.n	80044de <__exponent+0x20>
 80044fc:	3130      	adds	r1, #48	; 0x30
 80044fe:	f1ae 0502 	sub.w	r5, lr, #2
 8004502:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004506:	4629      	mov	r1, r5
 8004508:	1c44      	adds	r4, r0, #1
 800450a:	4561      	cmp	r1, ip
 800450c:	d30a      	bcc.n	8004524 <__exponent+0x66>
 800450e:	f10d 0209 	add.w	r2, sp, #9
 8004512:	eba2 020e 	sub.w	r2, r2, lr
 8004516:	4565      	cmp	r5, ip
 8004518:	bf88      	it	hi
 800451a:	2200      	movhi	r2, #0
 800451c:	4413      	add	r3, r2
 800451e:	1a18      	subs	r0, r3, r0
 8004520:	b003      	add	sp, #12
 8004522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004524:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004528:	f804 2f01 	strb.w	r2, [r4, #1]!
 800452c:	e7ed      	b.n	800450a <__exponent+0x4c>
 800452e:	2330      	movs	r3, #48	; 0x30
 8004530:	3130      	adds	r1, #48	; 0x30
 8004532:	7083      	strb	r3, [r0, #2]
 8004534:	70c1      	strb	r1, [r0, #3]
 8004536:	1d03      	adds	r3, r0, #4
 8004538:	e7f1      	b.n	800451e <__exponent+0x60>
	...

0800453c <_printf_float>:
 800453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004540:	b091      	sub	sp, #68	; 0x44
 8004542:	460c      	mov	r4, r1
 8004544:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004548:	4616      	mov	r6, r2
 800454a:	461f      	mov	r7, r3
 800454c:	4605      	mov	r5, r0
 800454e:	f001 fd39 	bl	8005fc4 <_localeconv_r>
 8004552:	6803      	ldr	r3, [r0, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	9309      	str	r3, [sp, #36]	; 0x24
 8004558:	f7fb fe66 	bl	8000228 <strlen>
 800455c:	2300      	movs	r3, #0
 800455e:	930e      	str	r3, [sp, #56]	; 0x38
 8004560:	f8d8 3000 	ldr.w	r3, [r8]
 8004564:	900a      	str	r0, [sp, #40]	; 0x28
 8004566:	3307      	adds	r3, #7
 8004568:	f023 0307 	bic.w	r3, r3, #7
 800456c:	f103 0208 	add.w	r2, r3, #8
 8004570:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004574:	f8d4 b000 	ldr.w	fp, [r4]
 8004578:	f8c8 2000 	str.w	r2, [r8]
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004584:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004588:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800458c:	930b      	str	r3, [sp, #44]	; 0x2c
 800458e:	f04f 32ff 	mov.w	r2, #4294967295
 8004592:	4640      	mov	r0, r8
 8004594:	4b9c      	ldr	r3, [pc, #624]	; (8004808 <_printf_float+0x2cc>)
 8004596:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004598:	f7fc faa4 	bl	8000ae4 <__aeabi_dcmpun>
 800459c:	bb70      	cbnz	r0, 80045fc <_printf_float+0xc0>
 800459e:	f04f 32ff 	mov.w	r2, #4294967295
 80045a2:	4640      	mov	r0, r8
 80045a4:	4b98      	ldr	r3, [pc, #608]	; (8004808 <_printf_float+0x2cc>)
 80045a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045a8:	f7fc fa7e 	bl	8000aa8 <__aeabi_dcmple>
 80045ac:	bb30      	cbnz	r0, 80045fc <_printf_float+0xc0>
 80045ae:	2200      	movs	r2, #0
 80045b0:	2300      	movs	r3, #0
 80045b2:	4640      	mov	r0, r8
 80045b4:	4651      	mov	r1, sl
 80045b6:	f7fc fa6d 	bl	8000a94 <__aeabi_dcmplt>
 80045ba:	b110      	cbz	r0, 80045c2 <_printf_float+0x86>
 80045bc:	232d      	movs	r3, #45	; 0x2d
 80045be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045c2:	4b92      	ldr	r3, [pc, #584]	; (800480c <_printf_float+0x2d0>)
 80045c4:	4892      	ldr	r0, [pc, #584]	; (8004810 <_printf_float+0x2d4>)
 80045c6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80045ca:	bf94      	ite	ls
 80045cc:	4698      	movls	r8, r3
 80045ce:	4680      	movhi	r8, r0
 80045d0:	2303      	movs	r3, #3
 80045d2:	f04f 0a00 	mov.w	sl, #0
 80045d6:	6123      	str	r3, [r4, #16]
 80045d8:	f02b 0304 	bic.w	r3, fp, #4
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	4633      	mov	r3, r6
 80045e0:	4621      	mov	r1, r4
 80045e2:	4628      	mov	r0, r5
 80045e4:	9700      	str	r7, [sp, #0]
 80045e6:	aa0f      	add	r2, sp, #60	; 0x3c
 80045e8:	f000 f9d4 	bl	8004994 <_printf_common>
 80045ec:	3001      	adds	r0, #1
 80045ee:	f040 8090 	bne.w	8004712 <_printf_float+0x1d6>
 80045f2:	f04f 30ff 	mov.w	r0, #4294967295
 80045f6:	b011      	add	sp, #68	; 0x44
 80045f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045fc:	4642      	mov	r2, r8
 80045fe:	4653      	mov	r3, sl
 8004600:	4640      	mov	r0, r8
 8004602:	4651      	mov	r1, sl
 8004604:	f7fc fa6e 	bl	8000ae4 <__aeabi_dcmpun>
 8004608:	b148      	cbz	r0, 800461e <_printf_float+0xe2>
 800460a:	f1ba 0f00 	cmp.w	sl, #0
 800460e:	bfb8      	it	lt
 8004610:	232d      	movlt	r3, #45	; 0x2d
 8004612:	4880      	ldr	r0, [pc, #512]	; (8004814 <_printf_float+0x2d8>)
 8004614:	bfb8      	it	lt
 8004616:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800461a:	4b7f      	ldr	r3, [pc, #508]	; (8004818 <_printf_float+0x2dc>)
 800461c:	e7d3      	b.n	80045c6 <_printf_float+0x8a>
 800461e:	6863      	ldr	r3, [r4, #4]
 8004620:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	d142      	bne.n	80046ae <_printf_float+0x172>
 8004628:	2306      	movs	r3, #6
 800462a:	6063      	str	r3, [r4, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	9206      	str	r2, [sp, #24]
 8004630:	aa0e      	add	r2, sp, #56	; 0x38
 8004632:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004636:	aa0d      	add	r2, sp, #52	; 0x34
 8004638:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800463c:	9203      	str	r2, [sp, #12]
 800463e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004642:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004646:	6023      	str	r3, [r4, #0]
 8004648:	6863      	ldr	r3, [r4, #4]
 800464a:	4642      	mov	r2, r8
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	4628      	mov	r0, r5
 8004650:	4653      	mov	r3, sl
 8004652:	910b      	str	r1, [sp, #44]	; 0x2c
 8004654:	f7ff fed4 	bl	8004400 <__cvt>
 8004658:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800465a:	4680      	mov	r8, r0
 800465c:	2947      	cmp	r1, #71	; 0x47
 800465e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004660:	d108      	bne.n	8004674 <_printf_float+0x138>
 8004662:	1cc8      	adds	r0, r1, #3
 8004664:	db02      	blt.n	800466c <_printf_float+0x130>
 8004666:	6863      	ldr	r3, [r4, #4]
 8004668:	4299      	cmp	r1, r3
 800466a:	dd40      	ble.n	80046ee <_printf_float+0x1b2>
 800466c:	f1a9 0902 	sub.w	r9, r9, #2
 8004670:	fa5f f989 	uxtb.w	r9, r9
 8004674:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004678:	d81f      	bhi.n	80046ba <_printf_float+0x17e>
 800467a:	464a      	mov	r2, r9
 800467c:	3901      	subs	r1, #1
 800467e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004682:	910d      	str	r1, [sp, #52]	; 0x34
 8004684:	f7ff ff1b 	bl	80044be <__exponent>
 8004688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800468a:	4682      	mov	sl, r0
 800468c:	1813      	adds	r3, r2, r0
 800468e:	2a01      	cmp	r2, #1
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	dc02      	bgt.n	800469a <_printf_float+0x15e>
 8004694:	6822      	ldr	r2, [r4, #0]
 8004696:	07d2      	lsls	r2, r2, #31
 8004698:	d501      	bpl.n	800469e <_printf_float+0x162>
 800469a:	3301      	adds	r3, #1
 800469c:	6123      	str	r3, [r4, #16]
 800469e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d09b      	beq.n	80045de <_printf_float+0xa2>
 80046a6:	232d      	movs	r3, #45	; 0x2d
 80046a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ac:	e797      	b.n	80045de <_printf_float+0xa2>
 80046ae:	2947      	cmp	r1, #71	; 0x47
 80046b0:	d1bc      	bne.n	800462c <_printf_float+0xf0>
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1ba      	bne.n	800462c <_printf_float+0xf0>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e7b7      	b.n	800462a <_printf_float+0xee>
 80046ba:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80046be:	d118      	bne.n	80046f2 <_printf_float+0x1b6>
 80046c0:	2900      	cmp	r1, #0
 80046c2:	6863      	ldr	r3, [r4, #4]
 80046c4:	dd0b      	ble.n	80046de <_printf_float+0x1a2>
 80046c6:	6121      	str	r1, [r4, #16]
 80046c8:	b913      	cbnz	r3, 80046d0 <_printf_float+0x194>
 80046ca:	6822      	ldr	r2, [r4, #0]
 80046cc:	07d0      	lsls	r0, r2, #31
 80046ce:	d502      	bpl.n	80046d6 <_printf_float+0x19a>
 80046d0:	3301      	adds	r3, #1
 80046d2:	440b      	add	r3, r1
 80046d4:	6123      	str	r3, [r4, #16]
 80046d6:	f04f 0a00 	mov.w	sl, #0
 80046da:	65a1      	str	r1, [r4, #88]	; 0x58
 80046dc:	e7df      	b.n	800469e <_printf_float+0x162>
 80046de:	b913      	cbnz	r3, 80046e6 <_printf_float+0x1aa>
 80046e0:	6822      	ldr	r2, [r4, #0]
 80046e2:	07d2      	lsls	r2, r2, #31
 80046e4:	d501      	bpl.n	80046ea <_printf_float+0x1ae>
 80046e6:	3302      	adds	r3, #2
 80046e8:	e7f4      	b.n	80046d4 <_printf_float+0x198>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e7f2      	b.n	80046d4 <_printf_float+0x198>
 80046ee:	f04f 0967 	mov.w	r9, #103	; 0x67
 80046f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046f4:	4299      	cmp	r1, r3
 80046f6:	db05      	blt.n	8004704 <_printf_float+0x1c8>
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	6121      	str	r1, [r4, #16]
 80046fc:	07d8      	lsls	r0, r3, #31
 80046fe:	d5ea      	bpl.n	80046d6 <_printf_float+0x19a>
 8004700:	1c4b      	adds	r3, r1, #1
 8004702:	e7e7      	b.n	80046d4 <_printf_float+0x198>
 8004704:	2900      	cmp	r1, #0
 8004706:	bfcc      	ite	gt
 8004708:	2201      	movgt	r2, #1
 800470a:	f1c1 0202 	rsble	r2, r1, #2
 800470e:	4413      	add	r3, r2
 8004710:	e7e0      	b.n	80046d4 <_printf_float+0x198>
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	055a      	lsls	r2, r3, #21
 8004716:	d407      	bmi.n	8004728 <_printf_float+0x1ec>
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	4642      	mov	r2, r8
 800471c:	4631      	mov	r1, r6
 800471e:	4628      	mov	r0, r5
 8004720:	47b8      	blx	r7
 8004722:	3001      	adds	r0, #1
 8004724:	d12b      	bne.n	800477e <_printf_float+0x242>
 8004726:	e764      	b.n	80045f2 <_printf_float+0xb6>
 8004728:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800472c:	f240 80dd 	bls.w	80048ea <_printf_float+0x3ae>
 8004730:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004734:	2200      	movs	r2, #0
 8004736:	2300      	movs	r3, #0
 8004738:	f7fc f9a2 	bl	8000a80 <__aeabi_dcmpeq>
 800473c:	2800      	cmp	r0, #0
 800473e:	d033      	beq.n	80047a8 <_printf_float+0x26c>
 8004740:	2301      	movs	r3, #1
 8004742:	4631      	mov	r1, r6
 8004744:	4628      	mov	r0, r5
 8004746:	4a35      	ldr	r2, [pc, #212]	; (800481c <_printf_float+0x2e0>)
 8004748:	47b8      	blx	r7
 800474a:	3001      	adds	r0, #1
 800474c:	f43f af51 	beq.w	80045f2 <_printf_float+0xb6>
 8004750:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004754:	429a      	cmp	r2, r3
 8004756:	db02      	blt.n	800475e <_printf_float+0x222>
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	07d8      	lsls	r0, r3, #31
 800475c:	d50f      	bpl.n	800477e <_printf_float+0x242>
 800475e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004762:	4631      	mov	r1, r6
 8004764:	4628      	mov	r0, r5
 8004766:	47b8      	blx	r7
 8004768:	3001      	adds	r0, #1
 800476a:	f43f af42 	beq.w	80045f2 <_printf_float+0xb6>
 800476e:	f04f 0800 	mov.w	r8, #0
 8004772:	f104 091a 	add.w	r9, r4, #26
 8004776:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004778:	3b01      	subs	r3, #1
 800477a:	4543      	cmp	r3, r8
 800477c:	dc09      	bgt.n	8004792 <_printf_float+0x256>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	079b      	lsls	r3, r3, #30
 8004782:	f100 8102 	bmi.w	800498a <_printf_float+0x44e>
 8004786:	68e0      	ldr	r0, [r4, #12]
 8004788:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800478a:	4298      	cmp	r0, r3
 800478c:	bfb8      	it	lt
 800478e:	4618      	movlt	r0, r3
 8004790:	e731      	b.n	80045f6 <_printf_float+0xba>
 8004792:	2301      	movs	r3, #1
 8004794:	464a      	mov	r2, r9
 8004796:	4631      	mov	r1, r6
 8004798:	4628      	mov	r0, r5
 800479a:	47b8      	blx	r7
 800479c:	3001      	adds	r0, #1
 800479e:	f43f af28 	beq.w	80045f2 <_printf_float+0xb6>
 80047a2:	f108 0801 	add.w	r8, r8, #1
 80047a6:	e7e6      	b.n	8004776 <_printf_float+0x23a>
 80047a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	dc38      	bgt.n	8004820 <_printf_float+0x2e4>
 80047ae:	2301      	movs	r3, #1
 80047b0:	4631      	mov	r1, r6
 80047b2:	4628      	mov	r0, r5
 80047b4:	4a19      	ldr	r2, [pc, #100]	; (800481c <_printf_float+0x2e0>)
 80047b6:	47b8      	blx	r7
 80047b8:	3001      	adds	r0, #1
 80047ba:	f43f af1a 	beq.w	80045f2 <_printf_float+0xb6>
 80047be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047c2:	4313      	orrs	r3, r2
 80047c4:	d102      	bne.n	80047cc <_printf_float+0x290>
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	07d9      	lsls	r1, r3, #31
 80047ca:	d5d8      	bpl.n	800477e <_printf_float+0x242>
 80047cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047d0:	4631      	mov	r1, r6
 80047d2:	4628      	mov	r0, r5
 80047d4:	47b8      	blx	r7
 80047d6:	3001      	adds	r0, #1
 80047d8:	f43f af0b 	beq.w	80045f2 <_printf_float+0xb6>
 80047dc:	f04f 0900 	mov.w	r9, #0
 80047e0:	f104 0a1a 	add.w	sl, r4, #26
 80047e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80047e6:	425b      	negs	r3, r3
 80047e8:	454b      	cmp	r3, r9
 80047ea:	dc01      	bgt.n	80047f0 <_printf_float+0x2b4>
 80047ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047ee:	e794      	b.n	800471a <_printf_float+0x1de>
 80047f0:	2301      	movs	r3, #1
 80047f2:	4652      	mov	r2, sl
 80047f4:	4631      	mov	r1, r6
 80047f6:	4628      	mov	r0, r5
 80047f8:	47b8      	blx	r7
 80047fa:	3001      	adds	r0, #1
 80047fc:	f43f aef9 	beq.w	80045f2 <_printf_float+0xb6>
 8004800:	f109 0901 	add.w	r9, r9, #1
 8004804:	e7ee      	b.n	80047e4 <_printf_float+0x2a8>
 8004806:	bf00      	nop
 8004808:	7fefffff 	.word	0x7fefffff
 800480c:	08006f6c 	.word	0x08006f6c
 8004810:	08006f70 	.word	0x08006f70
 8004814:	08006f78 	.word	0x08006f78
 8004818:	08006f74 	.word	0x08006f74
 800481c:	08006f7c 	.word	0x08006f7c
 8004820:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004822:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004824:	429a      	cmp	r2, r3
 8004826:	bfa8      	it	ge
 8004828:	461a      	movge	r2, r3
 800482a:	2a00      	cmp	r2, #0
 800482c:	4691      	mov	r9, r2
 800482e:	dc37      	bgt.n	80048a0 <_printf_float+0x364>
 8004830:	f04f 0b00 	mov.w	fp, #0
 8004834:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004838:	f104 021a 	add.w	r2, r4, #26
 800483c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004840:	ebaa 0309 	sub.w	r3, sl, r9
 8004844:	455b      	cmp	r3, fp
 8004846:	dc33      	bgt.n	80048b0 <_printf_float+0x374>
 8004848:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800484c:	429a      	cmp	r2, r3
 800484e:	db3b      	blt.n	80048c8 <_printf_float+0x38c>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	07da      	lsls	r2, r3, #31
 8004854:	d438      	bmi.n	80048c8 <_printf_float+0x38c>
 8004856:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004858:	990d      	ldr	r1, [sp, #52]	; 0x34
 800485a:	eba2 030a 	sub.w	r3, r2, sl
 800485e:	eba2 0901 	sub.w	r9, r2, r1
 8004862:	4599      	cmp	r9, r3
 8004864:	bfa8      	it	ge
 8004866:	4699      	movge	r9, r3
 8004868:	f1b9 0f00 	cmp.w	r9, #0
 800486c:	dc34      	bgt.n	80048d8 <_printf_float+0x39c>
 800486e:	f04f 0800 	mov.w	r8, #0
 8004872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004876:	f104 0a1a 	add.w	sl, r4, #26
 800487a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	eba3 0309 	sub.w	r3, r3, r9
 8004884:	4543      	cmp	r3, r8
 8004886:	f77f af7a 	ble.w	800477e <_printf_float+0x242>
 800488a:	2301      	movs	r3, #1
 800488c:	4652      	mov	r2, sl
 800488e:	4631      	mov	r1, r6
 8004890:	4628      	mov	r0, r5
 8004892:	47b8      	blx	r7
 8004894:	3001      	adds	r0, #1
 8004896:	f43f aeac 	beq.w	80045f2 <_printf_float+0xb6>
 800489a:	f108 0801 	add.w	r8, r8, #1
 800489e:	e7ec      	b.n	800487a <_printf_float+0x33e>
 80048a0:	4613      	mov	r3, r2
 80048a2:	4631      	mov	r1, r6
 80048a4:	4642      	mov	r2, r8
 80048a6:	4628      	mov	r0, r5
 80048a8:	47b8      	blx	r7
 80048aa:	3001      	adds	r0, #1
 80048ac:	d1c0      	bne.n	8004830 <_printf_float+0x2f4>
 80048ae:	e6a0      	b.n	80045f2 <_printf_float+0xb6>
 80048b0:	2301      	movs	r3, #1
 80048b2:	4631      	mov	r1, r6
 80048b4:	4628      	mov	r0, r5
 80048b6:	920b      	str	r2, [sp, #44]	; 0x2c
 80048b8:	47b8      	blx	r7
 80048ba:	3001      	adds	r0, #1
 80048bc:	f43f ae99 	beq.w	80045f2 <_printf_float+0xb6>
 80048c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80048c2:	f10b 0b01 	add.w	fp, fp, #1
 80048c6:	e7b9      	b.n	800483c <_printf_float+0x300>
 80048c8:	4631      	mov	r1, r6
 80048ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048ce:	4628      	mov	r0, r5
 80048d0:	47b8      	blx	r7
 80048d2:	3001      	adds	r0, #1
 80048d4:	d1bf      	bne.n	8004856 <_printf_float+0x31a>
 80048d6:	e68c      	b.n	80045f2 <_printf_float+0xb6>
 80048d8:	464b      	mov	r3, r9
 80048da:	4631      	mov	r1, r6
 80048dc:	4628      	mov	r0, r5
 80048de:	eb08 020a 	add.w	r2, r8, sl
 80048e2:	47b8      	blx	r7
 80048e4:	3001      	adds	r0, #1
 80048e6:	d1c2      	bne.n	800486e <_printf_float+0x332>
 80048e8:	e683      	b.n	80045f2 <_printf_float+0xb6>
 80048ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80048ec:	2a01      	cmp	r2, #1
 80048ee:	dc01      	bgt.n	80048f4 <_printf_float+0x3b8>
 80048f0:	07db      	lsls	r3, r3, #31
 80048f2:	d537      	bpl.n	8004964 <_printf_float+0x428>
 80048f4:	2301      	movs	r3, #1
 80048f6:	4642      	mov	r2, r8
 80048f8:	4631      	mov	r1, r6
 80048fa:	4628      	mov	r0, r5
 80048fc:	47b8      	blx	r7
 80048fe:	3001      	adds	r0, #1
 8004900:	f43f ae77 	beq.w	80045f2 <_printf_float+0xb6>
 8004904:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004908:	4631      	mov	r1, r6
 800490a:	4628      	mov	r0, r5
 800490c:	47b8      	blx	r7
 800490e:	3001      	adds	r0, #1
 8004910:	f43f ae6f 	beq.w	80045f2 <_printf_float+0xb6>
 8004914:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004918:	2200      	movs	r2, #0
 800491a:	2300      	movs	r3, #0
 800491c:	f7fc f8b0 	bl	8000a80 <__aeabi_dcmpeq>
 8004920:	b9d8      	cbnz	r0, 800495a <_printf_float+0x41e>
 8004922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004924:	f108 0201 	add.w	r2, r8, #1
 8004928:	3b01      	subs	r3, #1
 800492a:	4631      	mov	r1, r6
 800492c:	4628      	mov	r0, r5
 800492e:	47b8      	blx	r7
 8004930:	3001      	adds	r0, #1
 8004932:	d10e      	bne.n	8004952 <_printf_float+0x416>
 8004934:	e65d      	b.n	80045f2 <_printf_float+0xb6>
 8004936:	2301      	movs	r3, #1
 8004938:	464a      	mov	r2, r9
 800493a:	4631      	mov	r1, r6
 800493c:	4628      	mov	r0, r5
 800493e:	47b8      	blx	r7
 8004940:	3001      	adds	r0, #1
 8004942:	f43f ae56 	beq.w	80045f2 <_printf_float+0xb6>
 8004946:	f108 0801 	add.w	r8, r8, #1
 800494a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800494c:	3b01      	subs	r3, #1
 800494e:	4543      	cmp	r3, r8
 8004950:	dcf1      	bgt.n	8004936 <_printf_float+0x3fa>
 8004952:	4653      	mov	r3, sl
 8004954:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004958:	e6e0      	b.n	800471c <_printf_float+0x1e0>
 800495a:	f04f 0800 	mov.w	r8, #0
 800495e:	f104 091a 	add.w	r9, r4, #26
 8004962:	e7f2      	b.n	800494a <_printf_float+0x40e>
 8004964:	2301      	movs	r3, #1
 8004966:	4642      	mov	r2, r8
 8004968:	e7df      	b.n	800492a <_printf_float+0x3ee>
 800496a:	2301      	movs	r3, #1
 800496c:	464a      	mov	r2, r9
 800496e:	4631      	mov	r1, r6
 8004970:	4628      	mov	r0, r5
 8004972:	47b8      	blx	r7
 8004974:	3001      	adds	r0, #1
 8004976:	f43f ae3c 	beq.w	80045f2 <_printf_float+0xb6>
 800497a:	f108 0801 	add.w	r8, r8, #1
 800497e:	68e3      	ldr	r3, [r4, #12]
 8004980:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004982:	1a5b      	subs	r3, r3, r1
 8004984:	4543      	cmp	r3, r8
 8004986:	dcf0      	bgt.n	800496a <_printf_float+0x42e>
 8004988:	e6fd      	b.n	8004786 <_printf_float+0x24a>
 800498a:	f04f 0800 	mov.w	r8, #0
 800498e:	f104 0919 	add.w	r9, r4, #25
 8004992:	e7f4      	b.n	800497e <_printf_float+0x442>

08004994 <_printf_common>:
 8004994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	4616      	mov	r6, r2
 800499a:	4699      	mov	r9, r3
 800499c:	688a      	ldr	r2, [r1, #8]
 800499e:	690b      	ldr	r3, [r1, #16]
 80049a0:	4607      	mov	r7, r0
 80049a2:	4293      	cmp	r3, r2
 80049a4:	bfb8      	it	lt
 80049a6:	4613      	movlt	r3, r2
 80049a8:	6033      	str	r3, [r6, #0]
 80049aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049ae:	460c      	mov	r4, r1
 80049b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049b4:	b10a      	cbz	r2, 80049ba <_printf_common+0x26>
 80049b6:	3301      	adds	r3, #1
 80049b8:	6033      	str	r3, [r6, #0]
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	0699      	lsls	r1, r3, #26
 80049be:	bf42      	ittt	mi
 80049c0:	6833      	ldrmi	r3, [r6, #0]
 80049c2:	3302      	addmi	r3, #2
 80049c4:	6033      	strmi	r3, [r6, #0]
 80049c6:	6825      	ldr	r5, [r4, #0]
 80049c8:	f015 0506 	ands.w	r5, r5, #6
 80049cc:	d106      	bne.n	80049dc <_printf_common+0x48>
 80049ce:	f104 0a19 	add.w	sl, r4, #25
 80049d2:	68e3      	ldr	r3, [r4, #12]
 80049d4:	6832      	ldr	r2, [r6, #0]
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	42ab      	cmp	r3, r5
 80049da:	dc28      	bgt.n	8004a2e <_printf_common+0x9a>
 80049dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80049e0:	1e13      	subs	r3, r2, #0
 80049e2:	6822      	ldr	r2, [r4, #0]
 80049e4:	bf18      	it	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	0692      	lsls	r2, r2, #26
 80049ea:	d42d      	bmi.n	8004a48 <_printf_common+0xb4>
 80049ec:	4649      	mov	r1, r9
 80049ee:	4638      	mov	r0, r7
 80049f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049f4:	47c0      	blx	r8
 80049f6:	3001      	adds	r0, #1
 80049f8:	d020      	beq.n	8004a3c <_printf_common+0xa8>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	68e5      	ldr	r5, [r4, #12]
 80049fe:	f003 0306 	and.w	r3, r3, #6
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	bf18      	it	ne
 8004a06:	2500      	movne	r5, #0
 8004a08:	6832      	ldr	r2, [r6, #0]
 8004a0a:	f04f 0600 	mov.w	r6, #0
 8004a0e:	68a3      	ldr	r3, [r4, #8]
 8004a10:	bf08      	it	eq
 8004a12:	1aad      	subeq	r5, r5, r2
 8004a14:	6922      	ldr	r2, [r4, #16]
 8004a16:	bf08      	it	eq
 8004a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	bfc4      	itt	gt
 8004a20:	1a9b      	subgt	r3, r3, r2
 8004a22:	18ed      	addgt	r5, r5, r3
 8004a24:	341a      	adds	r4, #26
 8004a26:	42b5      	cmp	r5, r6
 8004a28:	d11a      	bne.n	8004a60 <_printf_common+0xcc>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e008      	b.n	8004a40 <_printf_common+0xac>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	4652      	mov	r2, sl
 8004a32:	4649      	mov	r1, r9
 8004a34:	4638      	mov	r0, r7
 8004a36:	47c0      	blx	r8
 8004a38:	3001      	adds	r0, #1
 8004a3a:	d103      	bne.n	8004a44 <_printf_common+0xb0>
 8004a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a44:	3501      	adds	r5, #1
 8004a46:	e7c4      	b.n	80049d2 <_printf_common+0x3e>
 8004a48:	2030      	movs	r0, #48	; 0x30
 8004a4a:	18e1      	adds	r1, r4, r3
 8004a4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a50:	1c5a      	adds	r2, r3, #1
 8004a52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a56:	4422      	add	r2, r4
 8004a58:	3302      	adds	r3, #2
 8004a5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a5e:	e7c5      	b.n	80049ec <_printf_common+0x58>
 8004a60:	2301      	movs	r3, #1
 8004a62:	4622      	mov	r2, r4
 8004a64:	4649      	mov	r1, r9
 8004a66:	4638      	mov	r0, r7
 8004a68:	47c0      	blx	r8
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	d0e6      	beq.n	8004a3c <_printf_common+0xa8>
 8004a6e:	3601      	adds	r6, #1
 8004a70:	e7d9      	b.n	8004a26 <_printf_common+0x92>
	...

08004a74 <_printf_i>:
 8004a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a78:	460c      	mov	r4, r1
 8004a7a:	7e27      	ldrb	r7, [r4, #24]
 8004a7c:	4691      	mov	r9, r2
 8004a7e:	2f78      	cmp	r7, #120	; 0x78
 8004a80:	4680      	mov	r8, r0
 8004a82:	469a      	mov	sl, r3
 8004a84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a8a:	d807      	bhi.n	8004a9c <_printf_i+0x28>
 8004a8c:	2f62      	cmp	r7, #98	; 0x62
 8004a8e:	d80a      	bhi.n	8004aa6 <_printf_i+0x32>
 8004a90:	2f00      	cmp	r7, #0
 8004a92:	f000 80d9 	beq.w	8004c48 <_printf_i+0x1d4>
 8004a96:	2f58      	cmp	r7, #88	; 0x58
 8004a98:	f000 80a4 	beq.w	8004be4 <_printf_i+0x170>
 8004a9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004aa4:	e03a      	b.n	8004b1c <_printf_i+0xa8>
 8004aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004aaa:	2b15      	cmp	r3, #21
 8004aac:	d8f6      	bhi.n	8004a9c <_printf_i+0x28>
 8004aae:	a001      	add	r0, pc, #4	; (adr r0, 8004ab4 <_printf_i+0x40>)
 8004ab0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004ab4:	08004b0d 	.word	0x08004b0d
 8004ab8:	08004b21 	.word	0x08004b21
 8004abc:	08004a9d 	.word	0x08004a9d
 8004ac0:	08004a9d 	.word	0x08004a9d
 8004ac4:	08004a9d 	.word	0x08004a9d
 8004ac8:	08004a9d 	.word	0x08004a9d
 8004acc:	08004b21 	.word	0x08004b21
 8004ad0:	08004a9d 	.word	0x08004a9d
 8004ad4:	08004a9d 	.word	0x08004a9d
 8004ad8:	08004a9d 	.word	0x08004a9d
 8004adc:	08004a9d 	.word	0x08004a9d
 8004ae0:	08004c2f 	.word	0x08004c2f
 8004ae4:	08004b51 	.word	0x08004b51
 8004ae8:	08004c11 	.word	0x08004c11
 8004aec:	08004a9d 	.word	0x08004a9d
 8004af0:	08004a9d 	.word	0x08004a9d
 8004af4:	08004c51 	.word	0x08004c51
 8004af8:	08004a9d 	.word	0x08004a9d
 8004afc:	08004b51 	.word	0x08004b51
 8004b00:	08004a9d 	.word	0x08004a9d
 8004b04:	08004a9d 	.word	0x08004a9d
 8004b08:	08004c19 	.word	0x08004c19
 8004b0c:	680b      	ldr	r3, [r1, #0]
 8004b0e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b12:	1d1a      	adds	r2, r3, #4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	600a      	str	r2, [r1, #0]
 8004b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0a4      	b.n	8004c6a <_printf_i+0x1f6>
 8004b20:	6825      	ldr	r5, [r4, #0]
 8004b22:	6808      	ldr	r0, [r1, #0]
 8004b24:	062e      	lsls	r6, r5, #24
 8004b26:	f100 0304 	add.w	r3, r0, #4
 8004b2a:	d50a      	bpl.n	8004b42 <_printf_i+0xce>
 8004b2c:	6805      	ldr	r5, [r0, #0]
 8004b2e:	600b      	str	r3, [r1, #0]
 8004b30:	2d00      	cmp	r5, #0
 8004b32:	da03      	bge.n	8004b3c <_printf_i+0xc8>
 8004b34:	232d      	movs	r3, #45	; 0x2d
 8004b36:	426d      	negs	r5, r5
 8004b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b3c:	230a      	movs	r3, #10
 8004b3e:	485e      	ldr	r0, [pc, #376]	; (8004cb8 <_printf_i+0x244>)
 8004b40:	e019      	b.n	8004b76 <_printf_i+0x102>
 8004b42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004b46:	6805      	ldr	r5, [r0, #0]
 8004b48:	600b      	str	r3, [r1, #0]
 8004b4a:	bf18      	it	ne
 8004b4c:	b22d      	sxthne	r5, r5
 8004b4e:	e7ef      	b.n	8004b30 <_printf_i+0xbc>
 8004b50:	680b      	ldr	r3, [r1, #0]
 8004b52:	6825      	ldr	r5, [r4, #0]
 8004b54:	1d18      	adds	r0, r3, #4
 8004b56:	6008      	str	r0, [r1, #0]
 8004b58:	0628      	lsls	r0, r5, #24
 8004b5a:	d501      	bpl.n	8004b60 <_printf_i+0xec>
 8004b5c:	681d      	ldr	r5, [r3, #0]
 8004b5e:	e002      	b.n	8004b66 <_printf_i+0xf2>
 8004b60:	0669      	lsls	r1, r5, #25
 8004b62:	d5fb      	bpl.n	8004b5c <_printf_i+0xe8>
 8004b64:	881d      	ldrh	r5, [r3, #0]
 8004b66:	2f6f      	cmp	r7, #111	; 0x6f
 8004b68:	bf0c      	ite	eq
 8004b6a:	2308      	moveq	r3, #8
 8004b6c:	230a      	movne	r3, #10
 8004b6e:	4852      	ldr	r0, [pc, #328]	; (8004cb8 <_printf_i+0x244>)
 8004b70:	2100      	movs	r1, #0
 8004b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b76:	6866      	ldr	r6, [r4, #4]
 8004b78:	2e00      	cmp	r6, #0
 8004b7a:	bfa8      	it	ge
 8004b7c:	6821      	ldrge	r1, [r4, #0]
 8004b7e:	60a6      	str	r6, [r4, #8]
 8004b80:	bfa4      	itt	ge
 8004b82:	f021 0104 	bicge.w	r1, r1, #4
 8004b86:	6021      	strge	r1, [r4, #0]
 8004b88:	b90d      	cbnz	r5, 8004b8e <_printf_i+0x11a>
 8004b8a:	2e00      	cmp	r6, #0
 8004b8c:	d04d      	beq.n	8004c2a <_printf_i+0x1b6>
 8004b8e:	4616      	mov	r6, r2
 8004b90:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b94:	fb03 5711 	mls	r7, r3, r1, r5
 8004b98:	5dc7      	ldrb	r7, [r0, r7]
 8004b9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b9e:	462f      	mov	r7, r5
 8004ba0:	42bb      	cmp	r3, r7
 8004ba2:	460d      	mov	r5, r1
 8004ba4:	d9f4      	bls.n	8004b90 <_printf_i+0x11c>
 8004ba6:	2b08      	cmp	r3, #8
 8004ba8:	d10b      	bne.n	8004bc2 <_printf_i+0x14e>
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	07df      	lsls	r7, r3, #31
 8004bae:	d508      	bpl.n	8004bc2 <_printf_i+0x14e>
 8004bb0:	6923      	ldr	r3, [r4, #16]
 8004bb2:	6861      	ldr	r1, [r4, #4]
 8004bb4:	4299      	cmp	r1, r3
 8004bb6:	bfde      	ittt	le
 8004bb8:	2330      	movle	r3, #48	; 0x30
 8004bba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004bbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bc2:	1b92      	subs	r2, r2, r6
 8004bc4:	6122      	str	r2, [r4, #16]
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	4621      	mov	r1, r4
 8004bca:	4640      	mov	r0, r8
 8004bcc:	f8cd a000 	str.w	sl, [sp]
 8004bd0:	aa03      	add	r2, sp, #12
 8004bd2:	f7ff fedf 	bl	8004994 <_printf_common>
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d14c      	bne.n	8004c74 <_printf_i+0x200>
 8004bda:	f04f 30ff 	mov.w	r0, #4294967295
 8004bde:	b004      	add	sp, #16
 8004be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be4:	4834      	ldr	r0, [pc, #208]	; (8004cb8 <_printf_i+0x244>)
 8004be6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004bea:	680e      	ldr	r6, [r1, #0]
 8004bec:	6823      	ldr	r3, [r4, #0]
 8004bee:	f856 5b04 	ldr.w	r5, [r6], #4
 8004bf2:	061f      	lsls	r7, r3, #24
 8004bf4:	600e      	str	r6, [r1, #0]
 8004bf6:	d514      	bpl.n	8004c22 <_printf_i+0x1ae>
 8004bf8:	07d9      	lsls	r1, r3, #31
 8004bfa:	bf44      	itt	mi
 8004bfc:	f043 0320 	orrmi.w	r3, r3, #32
 8004c00:	6023      	strmi	r3, [r4, #0]
 8004c02:	b91d      	cbnz	r5, 8004c0c <_printf_i+0x198>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	f023 0320 	bic.w	r3, r3, #32
 8004c0a:	6023      	str	r3, [r4, #0]
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	e7af      	b.n	8004b70 <_printf_i+0xfc>
 8004c10:	6823      	ldr	r3, [r4, #0]
 8004c12:	f043 0320 	orr.w	r3, r3, #32
 8004c16:	6023      	str	r3, [r4, #0]
 8004c18:	2378      	movs	r3, #120	; 0x78
 8004c1a:	4828      	ldr	r0, [pc, #160]	; (8004cbc <_printf_i+0x248>)
 8004c1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004c20:	e7e3      	b.n	8004bea <_printf_i+0x176>
 8004c22:	065e      	lsls	r6, r3, #25
 8004c24:	bf48      	it	mi
 8004c26:	b2ad      	uxthmi	r5, r5
 8004c28:	e7e6      	b.n	8004bf8 <_printf_i+0x184>
 8004c2a:	4616      	mov	r6, r2
 8004c2c:	e7bb      	b.n	8004ba6 <_printf_i+0x132>
 8004c2e:	680b      	ldr	r3, [r1, #0]
 8004c30:	6826      	ldr	r6, [r4, #0]
 8004c32:	1d1d      	adds	r5, r3, #4
 8004c34:	6960      	ldr	r0, [r4, #20]
 8004c36:	600d      	str	r5, [r1, #0]
 8004c38:	0635      	lsls	r5, r6, #24
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	d501      	bpl.n	8004c42 <_printf_i+0x1ce>
 8004c3e:	6018      	str	r0, [r3, #0]
 8004c40:	e002      	b.n	8004c48 <_printf_i+0x1d4>
 8004c42:	0671      	lsls	r1, r6, #25
 8004c44:	d5fb      	bpl.n	8004c3e <_printf_i+0x1ca>
 8004c46:	8018      	strh	r0, [r3, #0]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	4616      	mov	r6, r2
 8004c4c:	6123      	str	r3, [r4, #16]
 8004c4e:	e7ba      	b.n	8004bc6 <_printf_i+0x152>
 8004c50:	680b      	ldr	r3, [r1, #0]
 8004c52:	1d1a      	adds	r2, r3, #4
 8004c54:	600a      	str	r2, [r1, #0]
 8004c56:	681e      	ldr	r6, [r3, #0]
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	6862      	ldr	r2, [r4, #4]
 8004c5e:	f001 fa25 	bl	80060ac <memchr>
 8004c62:	b108      	cbz	r0, 8004c68 <_printf_i+0x1f4>
 8004c64:	1b80      	subs	r0, r0, r6
 8004c66:	6060      	str	r0, [r4, #4]
 8004c68:	6863      	ldr	r3, [r4, #4]
 8004c6a:	6123      	str	r3, [r4, #16]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c72:	e7a8      	b.n	8004bc6 <_printf_i+0x152>
 8004c74:	4632      	mov	r2, r6
 8004c76:	4649      	mov	r1, r9
 8004c78:	4640      	mov	r0, r8
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	47d0      	blx	sl
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d0ab      	beq.n	8004bda <_printf_i+0x166>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	079b      	lsls	r3, r3, #30
 8004c86:	d413      	bmi.n	8004cb0 <_printf_i+0x23c>
 8004c88:	68e0      	ldr	r0, [r4, #12]
 8004c8a:	9b03      	ldr	r3, [sp, #12]
 8004c8c:	4298      	cmp	r0, r3
 8004c8e:	bfb8      	it	lt
 8004c90:	4618      	movlt	r0, r3
 8004c92:	e7a4      	b.n	8004bde <_printf_i+0x16a>
 8004c94:	2301      	movs	r3, #1
 8004c96:	4632      	mov	r2, r6
 8004c98:	4649      	mov	r1, r9
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	47d0      	blx	sl
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d09b      	beq.n	8004bda <_printf_i+0x166>
 8004ca2:	3501      	adds	r5, #1
 8004ca4:	68e3      	ldr	r3, [r4, #12]
 8004ca6:	9903      	ldr	r1, [sp, #12]
 8004ca8:	1a5b      	subs	r3, r3, r1
 8004caa:	42ab      	cmp	r3, r5
 8004cac:	dcf2      	bgt.n	8004c94 <_printf_i+0x220>
 8004cae:	e7eb      	b.n	8004c88 <_printf_i+0x214>
 8004cb0:	2500      	movs	r5, #0
 8004cb2:	f104 0619 	add.w	r6, r4, #25
 8004cb6:	e7f5      	b.n	8004ca4 <_printf_i+0x230>
 8004cb8:	08006f7e 	.word	0x08006f7e
 8004cbc:	08006f8f 	.word	0x08006f8f

08004cc0 <iprintf>:
 8004cc0:	b40f      	push	{r0, r1, r2, r3}
 8004cc2:	4b0a      	ldr	r3, [pc, #40]	; (8004cec <iprintf+0x2c>)
 8004cc4:	b513      	push	{r0, r1, r4, lr}
 8004cc6:	681c      	ldr	r4, [r3, #0]
 8004cc8:	b124      	cbz	r4, 8004cd4 <iprintf+0x14>
 8004cca:	69a3      	ldr	r3, [r4, #24]
 8004ccc:	b913      	cbnz	r3, 8004cd4 <iprintf+0x14>
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f001 f8da 	bl	8005e88 <__sinit>
 8004cd4:	ab05      	add	r3, sp, #20
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	9a04      	ldr	r2, [sp, #16]
 8004cda:	68a1      	ldr	r1, [r4, #8]
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	f001 fe5f 	bl	80069a0 <_vfiprintf_r>
 8004ce2:	b002      	add	sp, #8
 8004ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ce8:	b004      	add	sp, #16
 8004cea:	4770      	bx	lr
 8004cec:	2000000c 	.word	0x2000000c

08004cf0 <_puts_r>:
 8004cf0:	b570      	push	{r4, r5, r6, lr}
 8004cf2:	460e      	mov	r6, r1
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	b118      	cbz	r0, 8004d00 <_puts_r+0x10>
 8004cf8:	6983      	ldr	r3, [r0, #24]
 8004cfa:	b90b      	cbnz	r3, 8004d00 <_puts_r+0x10>
 8004cfc:	f001 f8c4 	bl	8005e88 <__sinit>
 8004d00:	69ab      	ldr	r3, [r5, #24]
 8004d02:	68ac      	ldr	r4, [r5, #8]
 8004d04:	b913      	cbnz	r3, 8004d0c <_puts_r+0x1c>
 8004d06:	4628      	mov	r0, r5
 8004d08:	f001 f8be 	bl	8005e88 <__sinit>
 8004d0c:	4b2c      	ldr	r3, [pc, #176]	; (8004dc0 <_puts_r+0xd0>)
 8004d0e:	429c      	cmp	r4, r3
 8004d10:	d120      	bne.n	8004d54 <_puts_r+0x64>
 8004d12:	686c      	ldr	r4, [r5, #4]
 8004d14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d16:	07db      	lsls	r3, r3, #31
 8004d18:	d405      	bmi.n	8004d26 <_puts_r+0x36>
 8004d1a:	89a3      	ldrh	r3, [r4, #12]
 8004d1c:	0598      	lsls	r0, r3, #22
 8004d1e:	d402      	bmi.n	8004d26 <_puts_r+0x36>
 8004d20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d22:	f001 f954 	bl	8005fce <__retarget_lock_acquire_recursive>
 8004d26:	89a3      	ldrh	r3, [r4, #12]
 8004d28:	0719      	lsls	r1, r3, #28
 8004d2a:	d51d      	bpl.n	8004d68 <_puts_r+0x78>
 8004d2c:	6923      	ldr	r3, [r4, #16]
 8004d2e:	b1db      	cbz	r3, 8004d68 <_puts_r+0x78>
 8004d30:	3e01      	subs	r6, #1
 8004d32:	68a3      	ldr	r3, [r4, #8]
 8004d34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	60a3      	str	r3, [r4, #8]
 8004d3c:	bb39      	cbnz	r1, 8004d8e <_puts_r+0x9e>
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	da38      	bge.n	8004db4 <_puts_r+0xc4>
 8004d42:	4622      	mov	r2, r4
 8004d44:	210a      	movs	r1, #10
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 f848 	bl	8004ddc <__swbuf_r>
 8004d4c:	3001      	adds	r0, #1
 8004d4e:	d011      	beq.n	8004d74 <_puts_r+0x84>
 8004d50:	250a      	movs	r5, #10
 8004d52:	e011      	b.n	8004d78 <_puts_r+0x88>
 8004d54:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <_puts_r+0xd4>)
 8004d56:	429c      	cmp	r4, r3
 8004d58:	d101      	bne.n	8004d5e <_puts_r+0x6e>
 8004d5a:	68ac      	ldr	r4, [r5, #8]
 8004d5c:	e7da      	b.n	8004d14 <_puts_r+0x24>
 8004d5e:	4b1a      	ldr	r3, [pc, #104]	; (8004dc8 <_puts_r+0xd8>)
 8004d60:	429c      	cmp	r4, r3
 8004d62:	bf08      	it	eq
 8004d64:	68ec      	ldreq	r4, [r5, #12]
 8004d66:	e7d5      	b.n	8004d14 <_puts_r+0x24>
 8004d68:	4621      	mov	r1, r4
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	f000 f888 	bl	8004e80 <__swsetup_r>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d0dd      	beq.n	8004d30 <_puts_r+0x40>
 8004d74:	f04f 35ff 	mov.w	r5, #4294967295
 8004d78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d7a:	07da      	lsls	r2, r3, #31
 8004d7c:	d405      	bmi.n	8004d8a <_puts_r+0x9a>
 8004d7e:	89a3      	ldrh	r3, [r4, #12]
 8004d80:	059b      	lsls	r3, r3, #22
 8004d82:	d402      	bmi.n	8004d8a <_puts_r+0x9a>
 8004d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d86:	f001 f923 	bl	8005fd0 <__retarget_lock_release_recursive>
 8004d8a:	4628      	mov	r0, r5
 8004d8c:	bd70      	pop	{r4, r5, r6, pc}
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	da04      	bge.n	8004d9c <_puts_r+0xac>
 8004d92:	69a2      	ldr	r2, [r4, #24]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	dc06      	bgt.n	8004da6 <_puts_r+0xb6>
 8004d98:	290a      	cmp	r1, #10
 8004d9a:	d004      	beq.n	8004da6 <_puts_r+0xb6>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	6022      	str	r2, [r4, #0]
 8004da2:	7019      	strb	r1, [r3, #0]
 8004da4:	e7c5      	b.n	8004d32 <_puts_r+0x42>
 8004da6:	4622      	mov	r2, r4
 8004da8:	4628      	mov	r0, r5
 8004daa:	f000 f817 	bl	8004ddc <__swbuf_r>
 8004dae:	3001      	adds	r0, #1
 8004db0:	d1bf      	bne.n	8004d32 <_puts_r+0x42>
 8004db2:	e7df      	b.n	8004d74 <_puts_r+0x84>
 8004db4:	250a      	movs	r5, #10
 8004db6:	6823      	ldr	r3, [r4, #0]
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	6022      	str	r2, [r4, #0]
 8004dbc:	701d      	strb	r5, [r3, #0]
 8004dbe:	e7db      	b.n	8004d78 <_puts_r+0x88>
 8004dc0:	08007054 	.word	0x08007054
 8004dc4:	08007074 	.word	0x08007074
 8004dc8:	08007034 	.word	0x08007034

08004dcc <puts>:
 8004dcc:	4b02      	ldr	r3, [pc, #8]	; (8004dd8 <puts+0xc>)
 8004dce:	4601      	mov	r1, r0
 8004dd0:	6818      	ldr	r0, [r3, #0]
 8004dd2:	f7ff bf8d 	b.w	8004cf0 <_puts_r>
 8004dd6:	bf00      	nop
 8004dd8:	2000000c 	.word	0x2000000c

08004ddc <__swbuf_r>:
 8004ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dde:	460e      	mov	r6, r1
 8004de0:	4614      	mov	r4, r2
 8004de2:	4605      	mov	r5, r0
 8004de4:	b118      	cbz	r0, 8004dee <__swbuf_r+0x12>
 8004de6:	6983      	ldr	r3, [r0, #24]
 8004de8:	b90b      	cbnz	r3, 8004dee <__swbuf_r+0x12>
 8004dea:	f001 f84d 	bl	8005e88 <__sinit>
 8004dee:	4b21      	ldr	r3, [pc, #132]	; (8004e74 <__swbuf_r+0x98>)
 8004df0:	429c      	cmp	r4, r3
 8004df2:	d12b      	bne.n	8004e4c <__swbuf_r+0x70>
 8004df4:	686c      	ldr	r4, [r5, #4]
 8004df6:	69a3      	ldr	r3, [r4, #24]
 8004df8:	60a3      	str	r3, [r4, #8]
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	071a      	lsls	r2, r3, #28
 8004dfe:	d52f      	bpl.n	8004e60 <__swbuf_r+0x84>
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	b36b      	cbz	r3, 8004e60 <__swbuf_r+0x84>
 8004e04:	6923      	ldr	r3, [r4, #16]
 8004e06:	6820      	ldr	r0, [r4, #0]
 8004e08:	b2f6      	uxtb	r6, r6
 8004e0a:	1ac0      	subs	r0, r0, r3
 8004e0c:	6963      	ldr	r3, [r4, #20]
 8004e0e:	4637      	mov	r7, r6
 8004e10:	4283      	cmp	r3, r0
 8004e12:	dc04      	bgt.n	8004e1e <__swbuf_r+0x42>
 8004e14:	4621      	mov	r1, r4
 8004e16:	4628      	mov	r0, r5
 8004e18:	f000 ffa2 	bl	8005d60 <_fflush_r>
 8004e1c:	bb30      	cbnz	r0, 8004e6c <__swbuf_r+0x90>
 8004e1e:	68a3      	ldr	r3, [r4, #8]
 8004e20:	3001      	adds	r0, #1
 8004e22:	3b01      	subs	r3, #1
 8004e24:	60a3      	str	r3, [r4, #8]
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	6022      	str	r2, [r4, #0]
 8004e2c:	701e      	strb	r6, [r3, #0]
 8004e2e:	6963      	ldr	r3, [r4, #20]
 8004e30:	4283      	cmp	r3, r0
 8004e32:	d004      	beq.n	8004e3e <__swbuf_r+0x62>
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	07db      	lsls	r3, r3, #31
 8004e38:	d506      	bpl.n	8004e48 <__swbuf_r+0x6c>
 8004e3a:	2e0a      	cmp	r6, #10
 8004e3c:	d104      	bne.n	8004e48 <__swbuf_r+0x6c>
 8004e3e:	4621      	mov	r1, r4
 8004e40:	4628      	mov	r0, r5
 8004e42:	f000 ff8d 	bl	8005d60 <_fflush_r>
 8004e46:	b988      	cbnz	r0, 8004e6c <__swbuf_r+0x90>
 8004e48:	4638      	mov	r0, r7
 8004e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e4c:	4b0a      	ldr	r3, [pc, #40]	; (8004e78 <__swbuf_r+0x9c>)
 8004e4e:	429c      	cmp	r4, r3
 8004e50:	d101      	bne.n	8004e56 <__swbuf_r+0x7a>
 8004e52:	68ac      	ldr	r4, [r5, #8]
 8004e54:	e7cf      	b.n	8004df6 <__swbuf_r+0x1a>
 8004e56:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <__swbuf_r+0xa0>)
 8004e58:	429c      	cmp	r4, r3
 8004e5a:	bf08      	it	eq
 8004e5c:	68ec      	ldreq	r4, [r5, #12]
 8004e5e:	e7ca      	b.n	8004df6 <__swbuf_r+0x1a>
 8004e60:	4621      	mov	r1, r4
 8004e62:	4628      	mov	r0, r5
 8004e64:	f000 f80c 	bl	8004e80 <__swsetup_r>
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d0cb      	beq.n	8004e04 <__swbuf_r+0x28>
 8004e6c:	f04f 37ff 	mov.w	r7, #4294967295
 8004e70:	e7ea      	b.n	8004e48 <__swbuf_r+0x6c>
 8004e72:	bf00      	nop
 8004e74:	08007054 	.word	0x08007054
 8004e78:	08007074 	.word	0x08007074
 8004e7c:	08007034 	.word	0x08007034

08004e80 <__swsetup_r>:
 8004e80:	4b32      	ldr	r3, [pc, #200]	; (8004f4c <__swsetup_r+0xcc>)
 8004e82:	b570      	push	{r4, r5, r6, lr}
 8004e84:	681d      	ldr	r5, [r3, #0]
 8004e86:	4606      	mov	r6, r0
 8004e88:	460c      	mov	r4, r1
 8004e8a:	b125      	cbz	r5, 8004e96 <__swsetup_r+0x16>
 8004e8c:	69ab      	ldr	r3, [r5, #24]
 8004e8e:	b913      	cbnz	r3, 8004e96 <__swsetup_r+0x16>
 8004e90:	4628      	mov	r0, r5
 8004e92:	f000 fff9 	bl	8005e88 <__sinit>
 8004e96:	4b2e      	ldr	r3, [pc, #184]	; (8004f50 <__swsetup_r+0xd0>)
 8004e98:	429c      	cmp	r4, r3
 8004e9a:	d10f      	bne.n	8004ebc <__swsetup_r+0x3c>
 8004e9c:	686c      	ldr	r4, [r5, #4]
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ea4:	0719      	lsls	r1, r3, #28
 8004ea6:	d42c      	bmi.n	8004f02 <__swsetup_r+0x82>
 8004ea8:	06dd      	lsls	r5, r3, #27
 8004eaa:	d411      	bmi.n	8004ed0 <__swsetup_r+0x50>
 8004eac:	2309      	movs	r3, #9
 8004eae:	6033      	str	r3, [r6, #0]
 8004eb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	81a3      	strh	r3, [r4, #12]
 8004eba:	e03e      	b.n	8004f3a <__swsetup_r+0xba>
 8004ebc:	4b25      	ldr	r3, [pc, #148]	; (8004f54 <__swsetup_r+0xd4>)
 8004ebe:	429c      	cmp	r4, r3
 8004ec0:	d101      	bne.n	8004ec6 <__swsetup_r+0x46>
 8004ec2:	68ac      	ldr	r4, [r5, #8]
 8004ec4:	e7eb      	b.n	8004e9e <__swsetup_r+0x1e>
 8004ec6:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <__swsetup_r+0xd8>)
 8004ec8:	429c      	cmp	r4, r3
 8004eca:	bf08      	it	eq
 8004ecc:	68ec      	ldreq	r4, [r5, #12]
 8004ece:	e7e6      	b.n	8004e9e <__swsetup_r+0x1e>
 8004ed0:	0758      	lsls	r0, r3, #29
 8004ed2:	d512      	bpl.n	8004efa <__swsetup_r+0x7a>
 8004ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ed6:	b141      	cbz	r1, 8004eea <__swsetup_r+0x6a>
 8004ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004edc:	4299      	cmp	r1, r3
 8004ede:	d002      	beq.n	8004ee6 <__swsetup_r+0x66>
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f001 fc8f 	bl	8006804 <_free_r>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6363      	str	r3, [r4, #52]	; 0x34
 8004eea:	89a3      	ldrh	r3, [r4, #12]
 8004eec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ef0:	81a3      	strh	r3, [r4, #12]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	6063      	str	r3, [r4, #4]
 8004ef6:	6923      	ldr	r3, [r4, #16]
 8004ef8:	6023      	str	r3, [r4, #0]
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	f043 0308 	orr.w	r3, r3, #8
 8004f00:	81a3      	strh	r3, [r4, #12]
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	b94b      	cbnz	r3, 8004f1a <__swsetup_r+0x9a>
 8004f06:	89a3      	ldrh	r3, [r4, #12]
 8004f08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f10:	d003      	beq.n	8004f1a <__swsetup_r+0x9a>
 8004f12:	4621      	mov	r1, r4
 8004f14:	4630      	mov	r0, r6
 8004f16:	f001 f881 	bl	800601c <__smakebuf_r>
 8004f1a:	89a0      	ldrh	r0, [r4, #12]
 8004f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f20:	f010 0301 	ands.w	r3, r0, #1
 8004f24:	d00a      	beq.n	8004f3c <__swsetup_r+0xbc>
 8004f26:	2300      	movs	r3, #0
 8004f28:	60a3      	str	r3, [r4, #8]
 8004f2a:	6963      	ldr	r3, [r4, #20]
 8004f2c:	425b      	negs	r3, r3
 8004f2e:	61a3      	str	r3, [r4, #24]
 8004f30:	6923      	ldr	r3, [r4, #16]
 8004f32:	b943      	cbnz	r3, 8004f46 <__swsetup_r+0xc6>
 8004f34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f38:	d1ba      	bne.n	8004eb0 <__swsetup_r+0x30>
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}
 8004f3c:	0781      	lsls	r1, r0, #30
 8004f3e:	bf58      	it	pl
 8004f40:	6963      	ldrpl	r3, [r4, #20]
 8004f42:	60a3      	str	r3, [r4, #8]
 8004f44:	e7f4      	b.n	8004f30 <__swsetup_r+0xb0>
 8004f46:	2000      	movs	r0, #0
 8004f48:	e7f7      	b.n	8004f3a <__swsetup_r+0xba>
 8004f4a:	bf00      	nop
 8004f4c:	2000000c 	.word	0x2000000c
 8004f50:	08007054 	.word	0x08007054
 8004f54:	08007074 	.word	0x08007074
 8004f58:	08007034 	.word	0x08007034

08004f5c <quorem>:
 8004f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f60:	6903      	ldr	r3, [r0, #16]
 8004f62:	690c      	ldr	r4, [r1, #16]
 8004f64:	4607      	mov	r7, r0
 8004f66:	42a3      	cmp	r3, r4
 8004f68:	f2c0 8083 	blt.w	8005072 <quorem+0x116>
 8004f6c:	3c01      	subs	r4, #1
 8004f6e:	f100 0514 	add.w	r5, r0, #20
 8004f72:	f101 0814 	add.w	r8, r1, #20
 8004f76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f7a:	9301      	str	r3, [sp, #4]
 8004f7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f84:	3301      	adds	r3, #1
 8004f86:	429a      	cmp	r2, r3
 8004f88:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004f90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f94:	d332      	bcc.n	8004ffc <quorem+0xa0>
 8004f96:	f04f 0e00 	mov.w	lr, #0
 8004f9a:	4640      	mov	r0, r8
 8004f9c:	46ac      	mov	ip, r5
 8004f9e:	46f2      	mov	sl, lr
 8004fa0:	f850 2b04 	ldr.w	r2, [r0], #4
 8004fa4:	b293      	uxth	r3, r2
 8004fa6:	fb06 e303 	mla	r3, r6, r3, lr
 8004faa:	0c12      	lsrs	r2, r2, #16
 8004fac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004fb0:	fb06 e202 	mla	r2, r6, r2, lr
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	ebaa 0303 	sub.w	r3, sl, r3
 8004fba:	f8dc a000 	ldr.w	sl, [ip]
 8004fbe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004fc2:	fa1f fa8a 	uxth.w	sl, sl
 8004fc6:	4453      	add	r3, sl
 8004fc8:	fa1f fa82 	uxth.w	sl, r2
 8004fcc:	f8dc 2000 	ldr.w	r2, [ip]
 8004fd0:	4581      	cmp	r9, r0
 8004fd2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004fd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fe0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004fe4:	f84c 3b04 	str.w	r3, [ip], #4
 8004fe8:	d2da      	bcs.n	8004fa0 <quorem+0x44>
 8004fea:	f855 300b 	ldr.w	r3, [r5, fp]
 8004fee:	b92b      	cbnz	r3, 8004ffc <quorem+0xa0>
 8004ff0:	9b01      	ldr	r3, [sp, #4]
 8004ff2:	3b04      	subs	r3, #4
 8004ff4:	429d      	cmp	r5, r3
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	d32f      	bcc.n	800505a <quorem+0xfe>
 8004ffa:	613c      	str	r4, [r7, #16]
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	f001 faeb 	bl	80065d8 <__mcmp>
 8005002:	2800      	cmp	r0, #0
 8005004:	db25      	blt.n	8005052 <quorem+0xf6>
 8005006:	4628      	mov	r0, r5
 8005008:	f04f 0c00 	mov.w	ip, #0
 800500c:	3601      	adds	r6, #1
 800500e:	f858 1b04 	ldr.w	r1, [r8], #4
 8005012:	f8d0 e000 	ldr.w	lr, [r0]
 8005016:	b28b      	uxth	r3, r1
 8005018:	ebac 0303 	sub.w	r3, ip, r3
 800501c:	fa1f f28e 	uxth.w	r2, lr
 8005020:	4413      	add	r3, r2
 8005022:	0c0a      	lsrs	r2, r1, #16
 8005024:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005028:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800502c:	b29b      	uxth	r3, r3
 800502e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005032:	45c1      	cmp	r9, r8
 8005034:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005038:	f840 3b04 	str.w	r3, [r0], #4
 800503c:	d2e7      	bcs.n	800500e <quorem+0xb2>
 800503e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005046:	b922      	cbnz	r2, 8005052 <quorem+0xf6>
 8005048:	3b04      	subs	r3, #4
 800504a:	429d      	cmp	r5, r3
 800504c:	461a      	mov	r2, r3
 800504e:	d30a      	bcc.n	8005066 <quorem+0x10a>
 8005050:	613c      	str	r4, [r7, #16]
 8005052:	4630      	mov	r0, r6
 8005054:	b003      	add	sp, #12
 8005056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	3b04      	subs	r3, #4
 800505e:	2a00      	cmp	r2, #0
 8005060:	d1cb      	bne.n	8004ffa <quorem+0x9e>
 8005062:	3c01      	subs	r4, #1
 8005064:	e7c6      	b.n	8004ff4 <quorem+0x98>
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	3b04      	subs	r3, #4
 800506a:	2a00      	cmp	r2, #0
 800506c:	d1f0      	bne.n	8005050 <quorem+0xf4>
 800506e:	3c01      	subs	r4, #1
 8005070:	e7eb      	b.n	800504a <quorem+0xee>
 8005072:	2000      	movs	r0, #0
 8005074:	e7ee      	b.n	8005054 <quorem+0xf8>
	...

08005078 <_dtoa_r>:
 8005078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507c:	4616      	mov	r6, r2
 800507e:	461f      	mov	r7, r3
 8005080:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005082:	b099      	sub	sp, #100	; 0x64
 8005084:	4605      	mov	r5, r0
 8005086:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800508a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800508e:	b974      	cbnz	r4, 80050ae <_dtoa_r+0x36>
 8005090:	2010      	movs	r0, #16
 8005092:	f001 f803 	bl	800609c <malloc>
 8005096:	4602      	mov	r2, r0
 8005098:	6268      	str	r0, [r5, #36]	; 0x24
 800509a:	b920      	cbnz	r0, 80050a6 <_dtoa_r+0x2e>
 800509c:	21ea      	movs	r1, #234	; 0xea
 800509e:	4bae      	ldr	r3, [pc, #696]	; (8005358 <_dtoa_r+0x2e0>)
 80050a0:	48ae      	ldr	r0, [pc, #696]	; (800535c <_dtoa_r+0x2e4>)
 80050a2:	f001 fe13 	bl	8006ccc <__assert_func>
 80050a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050aa:	6004      	str	r4, [r0, #0]
 80050ac:	60c4      	str	r4, [r0, #12]
 80050ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050b0:	6819      	ldr	r1, [r3, #0]
 80050b2:	b151      	cbz	r1, 80050ca <_dtoa_r+0x52>
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	2301      	movs	r3, #1
 80050b8:	4093      	lsls	r3, r2
 80050ba:	604a      	str	r2, [r1, #4]
 80050bc:	608b      	str	r3, [r1, #8]
 80050be:	4628      	mov	r0, r5
 80050c0:	f001 f850 	bl	8006164 <_Bfree>
 80050c4:	2200      	movs	r2, #0
 80050c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	1e3b      	subs	r3, r7, #0
 80050cc:	bfaf      	iteee	ge
 80050ce:	2300      	movge	r3, #0
 80050d0:	2201      	movlt	r2, #1
 80050d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80050d6:	9305      	strlt	r3, [sp, #20]
 80050d8:	bfa8      	it	ge
 80050da:	f8c8 3000 	strge.w	r3, [r8]
 80050de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80050e2:	4b9f      	ldr	r3, [pc, #636]	; (8005360 <_dtoa_r+0x2e8>)
 80050e4:	bfb8      	it	lt
 80050e6:	f8c8 2000 	strlt.w	r2, [r8]
 80050ea:	ea33 0309 	bics.w	r3, r3, r9
 80050ee:	d119      	bne.n	8005124 <_dtoa_r+0xac>
 80050f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80050f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80050fc:	4333      	orrs	r3, r6
 80050fe:	f000 8580 	beq.w	8005c02 <_dtoa_r+0xb8a>
 8005102:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005104:	b953      	cbnz	r3, 800511c <_dtoa_r+0xa4>
 8005106:	4b97      	ldr	r3, [pc, #604]	; (8005364 <_dtoa_r+0x2ec>)
 8005108:	e022      	b.n	8005150 <_dtoa_r+0xd8>
 800510a:	4b97      	ldr	r3, [pc, #604]	; (8005368 <_dtoa_r+0x2f0>)
 800510c:	9308      	str	r3, [sp, #32]
 800510e:	3308      	adds	r3, #8
 8005110:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005112:	6013      	str	r3, [r2, #0]
 8005114:	9808      	ldr	r0, [sp, #32]
 8005116:	b019      	add	sp, #100	; 0x64
 8005118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800511c:	4b91      	ldr	r3, [pc, #580]	; (8005364 <_dtoa_r+0x2ec>)
 800511e:	9308      	str	r3, [sp, #32]
 8005120:	3303      	adds	r3, #3
 8005122:	e7f5      	b.n	8005110 <_dtoa_r+0x98>
 8005124:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005128:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800512c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005130:	2200      	movs	r2, #0
 8005132:	2300      	movs	r3, #0
 8005134:	f7fb fca4 	bl	8000a80 <__aeabi_dcmpeq>
 8005138:	4680      	mov	r8, r0
 800513a:	b158      	cbz	r0, 8005154 <_dtoa_r+0xdc>
 800513c:	2301      	movs	r3, #1
 800513e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005140:	6013      	str	r3, [r2, #0]
 8005142:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 8559 	beq.w	8005bfc <_dtoa_r+0xb84>
 800514a:	4888      	ldr	r0, [pc, #544]	; (800536c <_dtoa_r+0x2f4>)
 800514c:	6018      	str	r0, [r3, #0]
 800514e:	1e43      	subs	r3, r0, #1
 8005150:	9308      	str	r3, [sp, #32]
 8005152:	e7df      	b.n	8005114 <_dtoa_r+0x9c>
 8005154:	ab16      	add	r3, sp, #88	; 0x58
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	ab17      	add	r3, sp, #92	; 0x5c
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	4628      	mov	r0, r5
 800515e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005162:	f001 fae5 	bl	8006730 <__d2b>
 8005166:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800516a:	4682      	mov	sl, r0
 800516c:	2c00      	cmp	r4, #0
 800516e:	d07e      	beq.n	800526e <_dtoa_r+0x1f6>
 8005170:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005174:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005176:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800517a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800517e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005182:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005186:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800518a:	2200      	movs	r2, #0
 800518c:	4b78      	ldr	r3, [pc, #480]	; (8005370 <_dtoa_r+0x2f8>)
 800518e:	f7fb f857 	bl	8000240 <__aeabi_dsub>
 8005192:	a36b      	add	r3, pc, #428	; (adr r3, 8005340 <_dtoa_r+0x2c8>)
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	f7fb fa0a 	bl	80005b0 <__aeabi_dmul>
 800519c:	a36a      	add	r3, pc, #424	; (adr r3, 8005348 <_dtoa_r+0x2d0>)
 800519e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a2:	f7fb f84f 	bl	8000244 <__adddf3>
 80051a6:	4606      	mov	r6, r0
 80051a8:	4620      	mov	r0, r4
 80051aa:	460f      	mov	r7, r1
 80051ac:	f7fb f996 	bl	80004dc <__aeabi_i2d>
 80051b0:	a367      	add	r3, pc, #412	; (adr r3, 8005350 <_dtoa_r+0x2d8>)
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	f7fb f9fb 	bl	80005b0 <__aeabi_dmul>
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4630      	mov	r0, r6
 80051c0:	4639      	mov	r1, r7
 80051c2:	f7fb f83f 	bl	8000244 <__adddf3>
 80051c6:	4606      	mov	r6, r0
 80051c8:	460f      	mov	r7, r1
 80051ca:	f7fb fca1 	bl	8000b10 <__aeabi_d2iz>
 80051ce:	2200      	movs	r2, #0
 80051d0:	4681      	mov	r9, r0
 80051d2:	2300      	movs	r3, #0
 80051d4:	4630      	mov	r0, r6
 80051d6:	4639      	mov	r1, r7
 80051d8:	f7fb fc5c 	bl	8000a94 <__aeabi_dcmplt>
 80051dc:	b148      	cbz	r0, 80051f2 <_dtoa_r+0x17a>
 80051de:	4648      	mov	r0, r9
 80051e0:	f7fb f97c 	bl	80004dc <__aeabi_i2d>
 80051e4:	4632      	mov	r2, r6
 80051e6:	463b      	mov	r3, r7
 80051e8:	f7fb fc4a 	bl	8000a80 <__aeabi_dcmpeq>
 80051ec:	b908      	cbnz	r0, 80051f2 <_dtoa_r+0x17a>
 80051ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80051f2:	f1b9 0f16 	cmp.w	r9, #22
 80051f6:	d857      	bhi.n	80052a8 <_dtoa_r+0x230>
 80051f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051fc:	4b5d      	ldr	r3, [pc, #372]	; (8005374 <_dtoa_r+0x2fc>)
 80051fe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005206:	f7fb fc45 	bl	8000a94 <__aeabi_dcmplt>
 800520a:	2800      	cmp	r0, #0
 800520c:	d04e      	beq.n	80052ac <_dtoa_r+0x234>
 800520e:	2300      	movs	r3, #0
 8005210:	f109 39ff 	add.w	r9, r9, #4294967295
 8005214:	930f      	str	r3, [sp, #60]	; 0x3c
 8005216:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005218:	1b1c      	subs	r4, r3, r4
 800521a:	1e63      	subs	r3, r4, #1
 800521c:	9309      	str	r3, [sp, #36]	; 0x24
 800521e:	bf49      	itett	mi
 8005220:	f1c4 0301 	rsbmi	r3, r4, #1
 8005224:	2300      	movpl	r3, #0
 8005226:	9306      	strmi	r3, [sp, #24]
 8005228:	2300      	movmi	r3, #0
 800522a:	bf54      	ite	pl
 800522c:	9306      	strpl	r3, [sp, #24]
 800522e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005230:	f1b9 0f00 	cmp.w	r9, #0
 8005234:	db3c      	blt.n	80052b0 <_dtoa_r+0x238>
 8005236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005238:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800523c:	444b      	add	r3, r9
 800523e:	9309      	str	r3, [sp, #36]	; 0x24
 8005240:	2300      	movs	r3, #0
 8005242:	930a      	str	r3, [sp, #40]	; 0x28
 8005244:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005246:	2b09      	cmp	r3, #9
 8005248:	d86c      	bhi.n	8005324 <_dtoa_r+0x2ac>
 800524a:	2b05      	cmp	r3, #5
 800524c:	bfc4      	itt	gt
 800524e:	3b04      	subgt	r3, #4
 8005250:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005252:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005254:	bfc8      	it	gt
 8005256:	2400      	movgt	r4, #0
 8005258:	f1a3 0302 	sub.w	r3, r3, #2
 800525c:	bfd8      	it	le
 800525e:	2401      	movle	r4, #1
 8005260:	2b03      	cmp	r3, #3
 8005262:	f200 808b 	bhi.w	800537c <_dtoa_r+0x304>
 8005266:	e8df f003 	tbb	[pc, r3]
 800526a:	4f2d      	.short	0x4f2d
 800526c:	5b4d      	.short	0x5b4d
 800526e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005272:	441c      	add	r4, r3
 8005274:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005278:	2b20      	cmp	r3, #32
 800527a:	bfc3      	ittte	gt
 800527c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005280:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005284:	fa09 f303 	lslgt.w	r3, r9, r3
 8005288:	f1c3 0320 	rsble	r3, r3, #32
 800528c:	bfc6      	itte	gt
 800528e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005292:	4318      	orrgt	r0, r3
 8005294:	fa06 f003 	lslle.w	r0, r6, r3
 8005298:	f7fb f910 	bl	80004bc <__aeabi_ui2d>
 800529c:	2301      	movs	r3, #1
 800529e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80052a2:	3c01      	subs	r4, #1
 80052a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80052a6:	e770      	b.n	800518a <_dtoa_r+0x112>
 80052a8:	2301      	movs	r3, #1
 80052aa:	e7b3      	b.n	8005214 <_dtoa_r+0x19c>
 80052ac:	900f      	str	r0, [sp, #60]	; 0x3c
 80052ae:	e7b2      	b.n	8005216 <_dtoa_r+0x19e>
 80052b0:	9b06      	ldr	r3, [sp, #24]
 80052b2:	eba3 0309 	sub.w	r3, r3, r9
 80052b6:	9306      	str	r3, [sp, #24]
 80052b8:	f1c9 0300 	rsb	r3, r9, #0
 80052bc:	930a      	str	r3, [sp, #40]	; 0x28
 80052be:	2300      	movs	r3, #0
 80052c0:	930e      	str	r3, [sp, #56]	; 0x38
 80052c2:	e7bf      	b.n	8005244 <_dtoa_r+0x1cc>
 80052c4:	2300      	movs	r3, #0
 80052c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80052c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	dc59      	bgt.n	8005382 <_dtoa_r+0x30a>
 80052ce:	f04f 0b01 	mov.w	fp, #1
 80052d2:	465b      	mov	r3, fp
 80052d4:	f8cd b008 	str.w	fp, [sp, #8]
 80052d8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80052dc:	2200      	movs	r2, #0
 80052de:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80052e0:	6042      	str	r2, [r0, #4]
 80052e2:	2204      	movs	r2, #4
 80052e4:	f102 0614 	add.w	r6, r2, #20
 80052e8:	429e      	cmp	r6, r3
 80052ea:	6841      	ldr	r1, [r0, #4]
 80052ec:	d94f      	bls.n	800538e <_dtoa_r+0x316>
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 fef8 	bl	80060e4 <_Balloc>
 80052f4:	9008      	str	r0, [sp, #32]
 80052f6:	2800      	cmp	r0, #0
 80052f8:	d14d      	bne.n	8005396 <_dtoa_r+0x31e>
 80052fa:	4602      	mov	r2, r0
 80052fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005300:	4b1d      	ldr	r3, [pc, #116]	; (8005378 <_dtoa_r+0x300>)
 8005302:	e6cd      	b.n	80050a0 <_dtoa_r+0x28>
 8005304:	2301      	movs	r3, #1
 8005306:	e7de      	b.n	80052c6 <_dtoa_r+0x24e>
 8005308:	2300      	movs	r3, #0
 800530a:	930b      	str	r3, [sp, #44]	; 0x2c
 800530c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800530e:	eb09 0b03 	add.w	fp, r9, r3
 8005312:	f10b 0301 	add.w	r3, fp, #1
 8005316:	2b01      	cmp	r3, #1
 8005318:	9302      	str	r3, [sp, #8]
 800531a:	bfb8      	it	lt
 800531c:	2301      	movlt	r3, #1
 800531e:	e7dd      	b.n	80052dc <_dtoa_r+0x264>
 8005320:	2301      	movs	r3, #1
 8005322:	e7f2      	b.n	800530a <_dtoa_r+0x292>
 8005324:	2401      	movs	r4, #1
 8005326:	2300      	movs	r3, #0
 8005328:	940b      	str	r4, [sp, #44]	; 0x2c
 800532a:	9322      	str	r3, [sp, #136]	; 0x88
 800532c:	f04f 3bff 	mov.w	fp, #4294967295
 8005330:	2200      	movs	r2, #0
 8005332:	2312      	movs	r3, #18
 8005334:	f8cd b008 	str.w	fp, [sp, #8]
 8005338:	9223      	str	r2, [sp, #140]	; 0x8c
 800533a:	e7cf      	b.n	80052dc <_dtoa_r+0x264>
 800533c:	f3af 8000 	nop.w
 8005340:	636f4361 	.word	0x636f4361
 8005344:	3fd287a7 	.word	0x3fd287a7
 8005348:	8b60c8b3 	.word	0x8b60c8b3
 800534c:	3fc68a28 	.word	0x3fc68a28
 8005350:	509f79fb 	.word	0x509f79fb
 8005354:	3fd34413 	.word	0x3fd34413
 8005358:	08006fad 	.word	0x08006fad
 800535c:	08006fc4 	.word	0x08006fc4
 8005360:	7ff00000 	.word	0x7ff00000
 8005364:	08006fa9 	.word	0x08006fa9
 8005368:	08006fa0 	.word	0x08006fa0
 800536c:	08006f7d 	.word	0x08006f7d
 8005370:	3ff80000 	.word	0x3ff80000
 8005374:	08007120 	.word	0x08007120
 8005378:	08007023 	.word	0x08007023
 800537c:	2301      	movs	r3, #1
 800537e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005380:	e7d4      	b.n	800532c <_dtoa_r+0x2b4>
 8005382:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8005386:	465b      	mov	r3, fp
 8005388:	f8cd b008 	str.w	fp, [sp, #8]
 800538c:	e7a6      	b.n	80052dc <_dtoa_r+0x264>
 800538e:	3101      	adds	r1, #1
 8005390:	6041      	str	r1, [r0, #4]
 8005392:	0052      	lsls	r2, r2, #1
 8005394:	e7a6      	b.n	80052e4 <_dtoa_r+0x26c>
 8005396:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005398:	9a08      	ldr	r2, [sp, #32]
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	9b02      	ldr	r3, [sp, #8]
 800539e:	2b0e      	cmp	r3, #14
 80053a0:	f200 80a8 	bhi.w	80054f4 <_dtoa_r+0x47c>
 80053a4:	2c00      	cmp	r4, #0
 80053a6:	f000 80a5 	beq.w	80054f4 <_dtoa_r+0x47c>
 80053aa:	f1b9 0f00 	cmp.w	r9, #0
 80053ae:	dd34      	ble.n	800541a <_dtoa_r+0x3a2>
 80053b0:	4a9a      	ldr	r2, [pc, #616]	; (800561c <_dtoa_r+0x5a4>)
 80053b2:	f009 030f 	and.w	r3, r9, #15
 80053b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80053ba:	f419 7f80 	tst.w	r9, #256	; 0x100
 80053be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80053c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80053c6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80053ca:	d016      	beq.n	80053fa <_dtoa_r+0x382>
 80053cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053d0:	4b93      	ldr	r3, [pc, #588]	; (8005620 <_dtoa_r+0x5a8>)
 80053d2:	2703      	movs	r7, #3
 80053d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80053d8:	f7fb fa14 	bl	8000804 <__aeabi_ddiv>
 80053dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053e0:	f004 040f 	and.w	r4, r4, #15
 80053e4:	4e8e      	ldr	r6, [pc, #568]	; (8005620 <_dtoa_r+0x5a8>)
 80053e6:	b954      	cbnz	r4, 80053fe <_dtoa_r+0x386>
 80053e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053f0:	f7fb fa08 	bl	8000804 <__aeabi_ddiv>
 80053f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053f8:	e029      	b.n	800544e <_dtoa_r+0x3d6>
 80053fa:	2702      	movs	r7, #2
 80053fc:	e7f2      	b.n	80053e4 <_dtoa_r+0x36c>
 80053fe:	07e1      	lsls	r1, r4, #31
 8005400:	d508      	bpl.n	8005414 <_dtoa_r+0x39c>
 8005402:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005406:	e9d6 2300 	ldrd	r2, r3, [r6]
 800540a:	f7fb f8d1 	bl	80005b0 <__aeabi_dmul>
 800540e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005412:	3701      	adds	r7, #1
 8005414:	1064      	asrs	r4, r4, #1
 8005416:	3608      	adds	r6, #8
 8005418:	e7e5      	b.n	80053e6 <_dtoa_r+0x36e>
 800541a:	f000 80a5 	beq.w	8005568 <_dtoa_r+0x4f0>
 800541e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005422:	f1c9 0400 	rsb	r4, r9, #0
 8005426:	4b7d      	ldr	r3, [pc, #500]	; (800561c <_dtoa_r+0x5a4>)
 8005428:	f004 020f 	and.w	r2, r4, #15
 800542c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	f7fb f8bc 	bl	80005b0 <__aeabi_dmul>
 8005438:	2702      	movs	r7, #2
 800543a:	2300      	movs	r3, #0
 800543c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005440:	4e77      	ldr	r6, [pc, #476]	; (8005620 <_dtoa_r+0x5a8>)
 8005442:	1124      	asrs	r4, r4, #4
 8005444:	2c00      	cmp	r4, #0
 8005446:	f040 8084 	bne.w	8005552 <_dtoa_r+0x4da>
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1d2      	bne.n	80053f4 <_dtoa_r+0x37c>
 800544e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 808b 	beq.w	800556c <_dtoa_r+0x4f4>
 8005456:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800545a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800545e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005462:	2200      	movs	r2, #0
 8005464:	4b6f      	ldr	r3, [pc, #444]	; (8005624 <_dtoa_r+0x5ac>)
 8005466:	f7fb fb15 	bl	8000a94 <__aeabi_dcmplt>
 800546a:	2800      	cmp	r0, #0
 800546c:	d07e      	beq.n	800556c <_dtoa_r+0x4f4>
 800546e:	9b02      	ldr	r3, [sp, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d07b      	beq.n	800556c <_dtoa_r+0x4f4>
 8005474:	f1bb 0f00 	cmp.w	fp, #0
 8005478:	dd38      	ble.n	80054ec <_dtoa_r+0x474>
 800547a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800547e:	2200      	movs	r2, #0
 8005480:	4b69      	ldr	r3, [pc, #420]	; (8005628 <_dtoa_r+0x5b0>)
 8005482:	f7fb f895 	bl	80005b0 <__aeabi_dmul>
 8005486:	465c      	mov	r4, fp
 8005488:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800548c:	f109 38ff 	add.w	r8, r9, #4294967295
 8005490:	3701      	adds	r7, #1
 8005492:	4638      	mov	r0, r7
 8005494:	f7fb f822 	bl	80004dc <__aeabi_i2d>
 8005498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800549c:	f7fb f888 	bl	80005b0 <__aeabi_dmul>
 80054a0:	2200      	movs	r2, #0
 80054a2:	4b62      	ldr	r3, [pc, #392]	; (800562c <_dtoa_r+0x5b4>)
 80054a4:	f7fa fece 	bl	8000244 <__adddf3>
 80054a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80054ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054b0:	9611      	str	r6, [sp, #68]	; 0x44
 80054b2:	2c00      	cmp	r4, #0
 80054b4:	d15d      	bne.n	8005572 <_dtoa_r+0x4fa>
 80054b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ba:	2200      	movs	r2, #0
 80054bc:	4b5c      	ldr	r3, [pc, #368]	; (8005630 <_dtoa_r+0x5b8>)
 80054be:	f7fa febf 	bl	8000240 <__aeabi_dsub>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054ca:	4633      	mov	r3, r6
 80054cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80054ce:	f7fb faff 	bl	8000ad0 <__aeabi_dcmpgt>
 80054d2:	2800      	cmp	r0, #0
 80054d4:	f040 829e 	bne.w	8005a14 <_dtoa_r+0x99c>
 80054d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80054de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80054e2:	f7fb fad7 	bl	8000a94 <__aeabi_dcmplt>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	f040 8292 	bne.w	8005a10 <_dtoa_r+0x998>
 80054ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80054f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80054f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f2c0 8153 	blt.w	80057a2 <_dtoa_r+0x72a>
 80054fc:	f1b9 0f0e 	cmp.w	r9, #14
 8005500:	f300 814f 	bgt.w	80057a2 <_dtoa_r+0x72a>
 8005504:	4b45      	ldr	r3, [pc, #276]	; (800561c <_dtoa_r+0x5a4>)
 8005506:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800550a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800550e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005512:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005514:	2b00      	cmp	r3, #0
 8005516:	f280 80db 	bge.w	80056d0 <_dtoa_r+0x658>
 800551a:	9b02      	ldr	r3, [sp, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f300 80d7 	bgt.w	80056d0 <_dtoa_r+0x658>
 8005522:	f040 8274 	bne.w	8005a0e <_dtoa_r+0x996>
 8005526:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800552a:	2200      	movs	r2, #0
 800552c:	4b40      	ldr	r3, [pc, #256]	; (8005630 <_dtoa_r+0x5b8>)
 800552e:	f7fb f83f 	bl	80005b0 <__aeabi_dmul>
 8005532:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005536:	f7fb fac1 	bl	8000abc <__aeabi_dcmpge>
 800553a:	9c02      	ldr	r4, [sp, #8]
 800553c:	4626      	mov	r6, r4
 800553e:	2800      	cmp	r0, #0
 8005540:	f040 824a 	bne.w	80059d8 <_dtoa_r+0x960>
 8005544:	2331      	movs	r3, #49	; 0x31
 8005546:	9f08      	ldr	r7, [sp, #32]
 8005548:	f109 0901 	add.w	r9, r9, #1
 800554c:	f807 3b01 	strb.w	r3, [r7], #1
 8005550:	e246      	b.n	80059e0 <_dtoa_r+0x968>
 8005552:	07e2      	lsls	r2, r4, #31
 8005554:	d505      	bpl.n	8005562 <_dtoa_r+0x4ea>
 8005556:	e9d6 2300 	ldrd	r2, r3, [r6]
 800555a:	f7fb f829 	bl	80005b0 <__aeabi_dmul>
 800555e:	2301      	movs	r3, #1
 8005560:	3701      	adds	r7, #1
 8005562:	1064      	asrs	r4, r4, #1
 8005564:	3608      	adds	r6, #8
 8005566:	e76d      	b.n	8005444 <_dtoa_r+0x3cc>
 8005568:	2702      	movs	r7, #2
 800556a:	e770      	b.n	800544e <_dtoa_r+0x3d6>
 800556c:	46c8      	mov	r8, r9
 800556e:	9c02      	ldr	r4, [sp, #8]
 8005570:	e78f      	b.n	8005492 <_dtoa_r+0x41a>
 8005572:	9908      	ldr	r1, [sp, #32]
 8005574:	4b29      	ldr	r3, [pc, #164]	; (800561c <_dtoa_r+0x5a4>)
 8005576:	4421      	add	r1, r4
 8005578:	9112      	str	r1, [sp, #72]	; 0x48
 800557a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800557c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005580:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005584:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005588:	2900      	cmp	r1, #0
 800558a:	d055      	beq.n	8005638 <_dtoa_r+0x5c0>
 800558c:	2000      	movs	r0, #0
 800558e:	4929      	ldr	r1, [pc, #164]	; (8005634 <_dtoa_r+0x5bc>)
 8005590:	f7fb f938 	bl	8000804 <__aeabi_ddiv>
 8005594:	463b      	mov	r3, r7
 8005596:	4632      	mov	r2, r6
 8005598:	f7fa fe52 	bl	8000240 <__aeabi_dsub>
 800559c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055a0:	9f08      	ldr	r7, [sp, #32]
 80055a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055a6:	f7fb fab3 	bl	8000b10 <__aeabi_d2iz>
 80055aa:	4604      	mov	r4, r0
 80055ac:	f7fa ff96 	bl	80004dc <__aeabi_i2d>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055b8:	f7fa fe42 	bl	8000240 <__aeabi_dsub>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	3430      	adds	r4, #48	; 0x30
 80055c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055ca:	f807 4b01 	strb.w	r4, [r7], #1
 80055ce:	f7fb fa61 	bl	8000a94 <__aeabi_dcmplt>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d174      	bne.n	80056c0 <_dtoa_r+0x648>
 80055d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055da:	2000      	movs	r0, #0
 80055dc:	4911      	ldr	r1, [pc, #68]	; (8005624 <_dtoa_r+0x5ac>)
 80055de:	f7fa fe2f 	bl	8000240 <__aeabi_dsub>
 80055e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055e6:	f7fb fa55 	bl	8000a94 <__aeabi_dcmplt>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	f040 80b6 	bne.w	800575c <_dtoa_r+0x6e4>
 80055f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055f2:	429f      	cmp	r7, r3
 80055f4:	f43f af7a 	beq.w	80054ec <_dtoa_r+0x474>
 80055f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055fc:	2200      	movs	r2, #0
 80055fe:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <_dtoa_r+0x5b0>)
 8005600:	f7fa ffd6 	bl	80005b0 <__aeabi_dmul>
 8005604:	2200      	movs	r2, #0
 8005606:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800560a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800560e:	4b06      	ldr	r3, [pc, #24]	; (8005628 <_dtoa_r+0x5b0>)
 8005610:	f7fa ffce 	bl	80005b0 <__aeabi_dmul>
 8005614:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005618:	e7c3      	b.n	80055a2 <_dtoa_r+0x52a>
 800561a:	bf00      	nop
 800561c:	08007120 	.word	0x08007120
 8005620:	080070f8 	.word	0x080070f8
 8005624:	3ff00000 	.word	0x3ff00000
 8005628:	40240000 	.word	0x40240000
 800562c:	401c0000 	.word	0x401c0000
 8005630:	40140000 	.word	0x40140000
 8005634:	3fe00000 	.word	0x3fe00000
 8005638:	4630      	mov	r0, r6
 800563a:	4639      	mov	r1, r7
 800563c:	f7fa ffb8 	bl	80005b0 <__aeabi_dmul>
 8005640:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005642:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005646:	9c08      	ldr	r4, [sp, #32]
 8005648:	9314      	str	r3, [sp, #80]	; 0x50
 800564a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800564e:	f7fb fa5f 	bl	8000b10 <__aeabi_d2iz>
 8005652:	9015      	str	r0, [sp, #84]	; 0x54
 8005654:	f7fa ff42 	bl	80004dc <__aeabi_i2d>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005660:	f7fa fdee 	bl	8000240 <__aeabi_dsub>
 8005664:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005666:	4606      	mov	r6, r0
 8005668:	3330      	adds	r3, #48	; 0x30
 800566a:	f804 3b01 	strb.w	r3, [r4], #1
 800566e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005670:	460f      	mov	r7, r1
 8005672:	429c      	cmp	r4, r3
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	d124      	bne.n	80056c4 <_dtoa_r+0x64c>
 800567a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800567e:	4bb3      	ldr	r3, [pc, #716]	; (800594c <_dtoa_r+0x8d4>)
 8005680:	f7fa fde0 	bl	8000244 <__adddf3>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4630      	mov	r0, r6
 800568a:	4639      	mov	r1, r7
 800568c:	f7fb fa20 	bl	8000ad0 <__aeabi_dcmpgt>
 8005690:	2800      	cmp	r0, #0
 8005692:	d162      	bne.n	800575a <_dtoa_r+0x6e2>
 8005694:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005698:	2000      	movs	r0, #0
 800569a:	49ac      	ldr	r1, [pc, #688]	; (800594c <_dtoa_r+0x8d4>)
 800569c:	f7fa fdd0 	bl	8000240 <__aeabi_dsub>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4630      	mov	r0, r6
 80056a6:	4639      	mov	r1, r7
 80056a8:	f7fb f9f4 	bl	8000a94 <__aeabi_dcmplt>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	f43f af1d 	beq.w	80054ec <_dtoa_r+0x474>
 80056b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80056b4:	1e7b      	subs	r3, r7, #1
 80056b6:	9314      	str	r3, [sp, #80]	; 0x50
 80056b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80056bc:	2b30      	cmp	r3, #48	; 0x30
 80056be:	d0f8      	beq.n	80056b2 <_dtoa_r+0x63a>
 80056c0:	46c1      	mov	r9, r8
 80056c2:	e03a      	b.n	800573a <_dtoa_r+0x6c2>
 80056c4:	4ba2      	ldr	r3, [pc, #648]	; (8005950 <_dtoa_r+0x8d8>)
 80056c6:	f7fa ff73 	bl	80005b0 <__aeabi_dmul>
 80056ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056ce:	e7bc      	b.n	800564a <_dtoa_r+0x5d2>
 80056d0:	9f08      	ldr	r7, [sp, #32]
 80056d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056da:	f7fb f893 	bl	8000804 <__aeabi_ddiv>
 80056de:	f7fb fa17 	bl	8000b10 <__aeabi_d2iz>
 80056e2:	4604      	mov	r4, r0
 80056e4:	f7fa fefa 	bl	80004dc <__aeabi_i2d>
 80056e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056ec:	f7fa ff60 	bl	80005b0 <__aeabi_dmul>
 80056f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80056f4:	460b      	mov	r3, r1
 80056f6:	4602      	mov	r2, r0
 80056f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056fc:	f7fa fda0 	bl	8000240 <__aeabi_dsub>
 8005700:	f807 6b01 	strb.w	r6, [r7], #1
 8005704:	9e08      	ldr	r6, [sp, #32]
 8005706:	9b02      	ldr	r3, [sp, #8]
 8005708:	1bbe      	subs	r6, r7, r6
 800570a:	42b3      	cmp	r3, r6
 800570c:	d13a      	bne.n	8005784 <_dtoa_r+0x70c>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	f7fa fd97 	bl	8000244 <__adddf3>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800571e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005722:	f7fb f9d5 	bl	8000ad0 <__aeabi_dcmpgt>
 8005726:	bb58      	cbnz	r0, 8005780 <_dtoa_r+0x708>
 8005728:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800572c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005730:	f7fb f9a6 	bl	8000a80 <__aeabi_dcmpeq>
 8005734:	b108      	cbz	r0, 800573a <_dtoa_r+0x6c2>
 8005736:	07e1      	lsls	r1, r4, #31
 8005738:	d422      	bmi.n	8005780 <_dtoa_r+0x708>
 800573a:	4628      	mov	r0, r5
 800573c:	4651      	mov	r1, sl
 800573e:	f000 fd11 	bl	8006164 <_Bfree>
 8005742:	2300      	movs	r3, #0
 8005744:	703b      	strb	r3, [r7, #0]
 8005746:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005748:	f109 0001 	add.w	r0, r9, #1
 800574c:	6018      	str	r0, [r3, #0]
 800574e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005750:	2b00      	cmp	r3, #0
 8005752:	f43f acdf 	beq.w	8005114 <_dtoa_r+0x9c>
 8005756:	601f      	str	r7, [r3, #0]
 8005758:	e4dc      	b.n	8005114 <_dtoa_r+0x9c>
 800575a:	4627      	mov	r7, r4
 800575c:	463b      	mov	r3, r7
 800575e:	461f      	mov	r7, r3
 8005760:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005764:	2a39      	cmp	r2, #57	; 0x39
 8005766:	d107      	bne.n	8005778 <_dtoa_r+0x700>
 8005768:	9a08      	ldr	r2, [sp, #32]
 800576a:	429a      	cmp	r2, r3
 800576c:	d1f7      	bne.n	800575e <_dtoa_r+0x6e6>
 800576e:	2230      	movs	r2, #48	; 0x30
 8005770:	9908      	ldr	r1, [sp, #32]
 8005772:	f108 0801 	add.w	r8, r8, #1
 8005776:	700a      	strb	r2, [r1, #0]
 8005778:	781a      	ldrb	r2, [r3, #0]
 800577a:	3201      	adds	r2, #1
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e79f      	b.n	80056c0 <_dtoa_r+0x648>
 8005780:	46c8      	mov	r8, r9
 8005782:	e7eb      	b.n	800575c <_dtoa_r+0x6e4>
 8005784:	2200      	movs	r2, #0
 8005786:	4b72      	ldr	r3, [pc, #456]	; (8005950 <_dtoa_r+0x8d8>)
 8005788:	f7fa ff12 	bl	80005b0 <__aeabi_dmul>
 800578c:	4602      	mov	r2, r0
 800578e:	460b      	mov	r3, r1
 8005790:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005794:	2200      	movs	r2, #0
 8005796:	2300      	movs	r3, #0
 8005798:	f7fb f972 	bl	8000a80 <__aeabi_dcmpeq>
 800579c:	2800      	cmp	r0, #0
 800579e:	d098      	beq.n	80056d2 <_dtoa_r+0x65a>
 80057a0:	e7cb      	b.n	800573a <_dtoa_r+0x6c2>
 80057a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057a4:	2a00      	cmp	r2, #0
 80057a6:	f000 80cd 	beq.w	8005944 <_dtoa_r+0x8cc>
 80057aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80057ac:	2a01      	cmp	r2, #1
 80057ae:	f300 80af 	bgt.w	8005910 <_dtoa_r+0x898>
 80057b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057b4:	2a00      	cmp	r2, #0
 80057b6:	f000 80a7 	beq.w	8005908 <_dtoa_r+0x890>
 80057ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80057be:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80057c0:	9f06      	ldr	r7, [sp, #24]
 80057c2:	9a06      	ldr	r2, [sp, #24]
 80057c4:	2101      	movs	r1, #1
 80057c6:	441a      	add	r2, r3
 80057c8:	9206      	str	r2, [sp, #24]
 80057ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057cc:	4628      	mov	r0, r5
 80057ce:	441a      	add	r2, r3
 80057d0:	9209      	str	r2, [sp, #36]	; 0x24
 80057d2:	f000 fd81 	bl	80062d8 <__i2b>
 80057d6:	4606      	mov	r6, r0
 80057d8:	2f00      	cmp	r7, #0
 80057da:	dd0c      	ble.n	80057f6 <_dtoa_r+0x77e>
 80057dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057de:	2b00      	cmp	r3, #0
 80057e0:	dd09      	ble.n	80057f6 <_dtoa_r+0x77e>
 80057e2:	42bb      	cmp	r3, r7
 80057e4:	bfa8      	it	ge
 80057e6:	463b      	movge	r3, r7
 80057e8:	9a06      	ldr	r2, [sp, #24]
 80057ea:	1aff      	subs	r7, r7, r3
 80057ec:	1ad2      	subs	r2, r2, r3
 80057ee:	9206      	str	r2, [sp, #24]
 80057f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	9309      	str	r3, [sp, #36]	; 0x24
 80057f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f8:	b1f3      	cbz	r3, 8005838 <_dtoa_r+0x7c0>
 80057fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 80a9 	beq.w	8005954 <_dtoa_r+0x8dc>
 8005802:	2c00      	cmp	r4, #0
 8005804:	dd10      	ble.n	8005828 <_dtoa_r+0x7b0>
 8005806:	4631      	mov	r1, r6
 8005808:	4622      	mov	r2, r4
 800580a:	4628      	mov	r0, r5
 800580c:	f000 fe1e 	bl	800644c <__pow5mult>
 8005810:	4652      	mov	r2, sl
 8005812:	4601      	mov	r1, r0
 8005814:	4606      	mov	r6, r0
 8005816:	4628      	mov	r0, r5
 8005818:	f000 fd74 	bl	8006304 <__multiply>
 800581c:	4680      	mov	r8, r0
 800581e:	4651      	mov	r1, sl
 8005820:	4628      	mov	r0, r5
 8005822:	f000 fc9f 	bl	8006164 <_Bfree>
 8005826:	46c2      	mov	sl, r8
 8005828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800582a:	1b1a      	subs	r2, r3, r4
 800582c:	d004      	beq.n	8005838 <_dtoa_r+0x7c0>
 800582e:	4651      	mov	r1, sl
 8005830:	4628      	mov	r0, r5
 8005832:	f000 fe0b 	bl	800644c <__pow5mult>
 8005836:	4682      	mov	sl, r0
 8005838:	2101      	movs	r1, #1
 800583a:	4628      	mov	r0, r5
 800583c:	f000 fd4c 	bl	80062d8 <__i2b>
 8005840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005842:	4604      	mov	r4, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	f340 8087 	ble.w	8005958 <_dtoa_r+0x8e0>
 800584a:	461a      	mov	r2, r3
 800584c:	4601      	mov	r1, r0
 800584e:	4628      	mov	r0, r5
 8005850:	f000 fdfc 	bl	800644c <__pow5mult>
 8005854:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005856:	4604      	mov	r4, r0
 8005858:	2b01      	cmp	r3, #1
 800585a:	f340 8080 	ble.w	800595e <_dtoa_r+0x8e6>
 800585e:	f04f 0800 	mov.w	r8, #0
 8005862:	6923      	ldr	r3, [r4, #16]
 8005864:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005868:	6918      	ldr	r0, [r3, #16]
 800586a:	f000 fce7 	bl	800623c <__hi0bits>
 800586e:	f1c0 0020 	rsb	r0, r0, #32
 8005872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005874:	4418      	add	r0, r3
 8005876:	f010 001f 	ands.w	r0, r0, #31
 800587a:	f000 8092 	beq.w	80059a2 <_dtoa_r+0x92a>
 800587e:	f1c0 0320 	rsb	r3, r0, #32
 8005882:	2b04      	cmp	r3, #4
 8005884:	f340 808a 	ble.w	800599c <_dtoa_r+0x924>
 8005888:	f1c0 001c 	rsb	r0, r0, #28
 800588c:	9b06      	ldr	r3, [sp, #24]
 800588e:	4407      	add	r7, r0
 8005890:	4403      	add	r3, r0
 8005892:	9306      	str	r3, [sp, #24]
 8005894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005896:	4403      	add	r3, r0
 8005898:	9309      	str	r3, [sp, #36]	; 0x24
 800589a:	9b06      	ldr	r3, [sp, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	dd05      	ble.n	80058ac <_dtoa_r+0x834>
 80058a0:	4651      	mov	r1, sl
 80058a2:	461a      	mov	r2, r3
 80058a4:	4628      	mov	r0, r5
 80058a6:	f000 fe2b 	bl	8006500 <__lshift>
 80058aa:	4682      	mov	sl, r0
 80058ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	dd05      	ble.n	80058be <_dtoa_r+0x846>
 80058b2:	4621      	mov	r1, r4
 80058b4:	461a      	mov	r2, r3
 80058b6:	4628      	mov	r0, r5
 80058b8:	f000 fe22 	bl	8006500 <__lshift>
 80058bc:	4604      	mov	r4, r0
 80058be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d070      	beq.n	80059a6 <_dtoa_r+0x92e>
 80058c4:	4621      	mov	r1, r4
 80058c6:	4650      	mov	r0, sl
 80058c8:	f000 fe86 	bl	80065d8 <__mcmp>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	da6a      	bge.n	80059a6 <_dtoa_r+0x92e>
 80058d0:	2300      	movs	r3, #0
 80058d2:	4651      	mov	r1, sl
 80058d4:	220a      	movs	r2, #10
 80058d6:	4628      	mov	r0, r5
 80058d8:	f000 fc66 	bl	80061a8 <__multadd>
 80058dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058de:	4682      	mov	sl, r0
 80058e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8193 	beq.w	8005c10 <_dtoa_r+0xb98>
 80058ea:	4631      	mov	r1, r6
 80058ec:	2300      	movs	r3, #0
 80058ee:	220a      	movs	r2, #10
 80058f0:	4628      	mov	r0, r5
 80058f2:	f000 fc59 	bl	80061a8 <__multadd>
 80058f6:	f1bb 0f00 	cmp.w	fp, #0
 80058fa:	4606      	mov	r6, r0
 80058fc:	f300 8093 	bgt.w	8005a26 <_dtoa_r+0x9ae>
 8005900:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005902:	2b02      	cmp	r3, #2
 8005904:	dc57      	bgt.n	80059b6 <_dtoa_r+0x93e>
 8005906:	e08e      	b.n	8005a26 <_dtoa_r+0x9ae>
 8005908:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800590a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800590e:	e756      	b.n	80057be <_dtoa_r+0x746>
 8005910:	9b02      	ldr	r3, [sp, #8]
 8005912:	1e5c      	subs	r4, r3, #1
 8005914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005916:	42a3      	cmp	r3, r4
 8005918:	bfb7      	itett	lt
 800591a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800591c:	1b1c      	subge	r4, r3, r4
 800591e:	1ae2      	sublt	r2, r4, r3
 8005920:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005922:	bfbe      	ittt	lt
 8005924:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005926:	189b      	addlt	r3, r3, r2
 8005928:	930e      	strlt	r3, [sp, #56]	; 0x38
 800592a:	9b02      	ldr	r3, [sp, #8]
 800592c:	bfb8      	it	lt
 800592e:	2400      	movlt	r4, #0
 8005930:	2b00      	cmp	r3, #0
 8005932:	bfbb      	ittet	lt
 8005934:	9b06      	ldrlt	r3, [sp, #24]
 8005936:	9a02      	ldrlt	r2, [sp, #8]
 8005938:	9f06      	ldrge	r7, [sp, #24]
 800593a:	1a9f      	sublt	r7, r3, r2
 800593c:	bfac      	ite	ge
 800593e:	9b02      	ldrge	r3, [sp, #8]
 8005940:	2300      	movlt	r3, #0
 8005942:	e73e      	b.n	80057c2 <_dtoa_r+0x74a>
 8005944:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005946:	9f06      	ldr	r7, [sp, #24]
 8005948:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800594a:	e745      	b.n	80057d8 <_dtoa_r+0x760>
 800594c:	3fe00000 	.word	0x3fe00000
 8005950:	40240000 	.word	0x40240000
 8005954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005956:	e76a      	b.n	800582e <_dtoa_r+0x7b6>
 8005958:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800595a:	2b01      	cmp	r3, #1
 800595c:	dc19      	bgt.n	8005992 <_dtoa_r+0x91a>
 800595e:	9b04      	ldr	r3, [sp, #16]
 8005960:	b9bb      	cbnz	r3, 8005992 <_dtoa_r+0x91a>
 8005962:	9b05      	ldr	r3, [sp, #20]
 8005964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005968:	b99b      	cbnz	r3, 8005992 <_dtoa_r+0x91a>
 800596a:	9b05      	ldr	r3, [sp, #20]
 800596c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005970:	0d1b      	lsrs	r3, r3, #20
 8005972:	051b      	lsls	r3, r3, #20
 8005974:	b183      	cbz	r3, 8005998 <_dtoa_r+0x920>
 8005976:	f04f 0801 	mov.w	r8, #1
 800597a:	9b06      	ldr	r3, [sp, #24]
 800597c:	3301      	adds	r3, #1
 800597e:	9306      	str	r3, [sp, #24]
 8005980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005982:	3301      	adds	r3, #1
 8005984:	9309      	str	r3, [sp, #36]	; 0x24
 8005986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005988:	2b00      	cmp	r3, #0
 800598a:	f47f af6a 	bne.w	8005862 <_dtoa_r+0x7ea>
 800598e:	2001      	movs	r0, #1
 8005990:	e76f      	b.n	8005872 <_dtoa_r+0x7fa>
 8005992:	f04f 0800 	mov.w	r8, #0
 8005996:	e7f6      	b.n	8005986 <_dtoa_r+0x90e>
 8005998:	4698      	mov	r8, r3
 800599a:	e7f4      	b.n	8005986 <_dtoa_r+0x90e>
 800599c:	f43f af7d 	beq.w	800589a <_dtoa_r+0x822>
 80059a0:	4618      	mov	r0, r3
 80059a2:	301c      	adds	r0, #28
 80059a4:	e772      	b.n	800588c <_dtoa_r+0x814>
 80059a6:	9b02      	ldr	r3, [sp, #8]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	dc36      	bgt.n	8005a1a <_dtoa_r+0x9a2>
 80059ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	dd33      	ble.n	8005a1a <_dtoa_r+0x9a2>
 80059b2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80059b6:	f1bb 0f00 	cmp.w	fp, #0
 80059ba:	d10d      	bne.n	80059d8 <_dtoa_r+0x960>
 80059bc:	4621      	mov	r1, r4
 80059be:	465b      	mov	r3, fp
 80059c0:	2205      	movs	r2, #5
 80059c2:	4628      	mov	r0, r5
 80059c4:	f000 fbf0 	bl	80061a8 <__multadd>
 80059c8:	4601      	mov	r1, r0
 80059ca:	4604      	mov	r4, r0
 80059cc:	4650      	mov	r0, sl
 80059ce:	f000 fe03 	bl	80065d8 <__mcmp>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	f73f adb6 	bgt.w	8005544 <_dtoa_r+0x4cc>
 80059d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059da:	9f08      	ldr	r7, [sp, #32]
 80059dc:	ea6f 0903 	mvn.w	r9, r3
 80059e0:	f04f 0800 	mov.w	r8, #0
 80059e4:	4621      	mov	r1, r4
 80059e6:	4628      	mov	r0, r5
 80059e8:	f000 fbbc 	bl	8006164 <_Bfree>
 80059ec:	2e00      	cmp	r6, #0
 80059ee:	f43f aea4 	beq.w	800573a <_dtoa_r+0x6c2>
 80059f2:	f1b8 0f00 	cmp.w	r8, #0
 80059f6:	d005      	beq.n	8005a04 <_dtoa_r+0x98c>
 80059f8:	45b0      	cmp	r8, r6
 80059fa:	d003      	beq.n	8005a04 <_dtoa_r+0x98c>
 80059fc:	4641      	mov	r1, r8
 80059fe:	4628      	mov	r0, r5
 8005a00:	f000 fbb0 	bl	8006164 <_Bfree>
 8005a04:	4631      	mov	r1, r6
 8005a06:	4628      	mov	r0, r5
 8005a08:	f000 fbac 	bl	8006164 <_Bfree>
 8005a0c:	e695      	b.n	800573a <_dtoa_r+0x6c2>
 8005a0e:	2400      	movs	r4, #0
 8005a10:	4626      	mov	r6, r4
 8005a12:	e7e1      	b.n	80059d8 <_dtoa_r+0x960>
 8005a14:	46c1      	mov	r9, r8
 8005a16:	4626      	mov	r6, r4
 8005a18:	e594      	b.n	8005544 <_dtoa_r+0x4cc>
 8005a1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a1c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 80fc 	beq.w	8005c1e <_dtoa_r+0xba6>
 8005a26:	2f00      	cmp	r7, #0
 8005a28:	dd05      	ble.n	8005a36 <_dtoa_r+0x9be>
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	463a      	mov	r2, r7
 8005a2e:	4628      	mov	r0, r5
 8005a30:	f000 fd66 	bl	8006500 <__lshift>
 8005a34:	4606      	mov	r6, r0
 8005a36:	f1b8 0f00 	cmp.w	r8, #0
 8005a3a:	d05c      	beq.n	8005af6 <_dtoa_r+0xa7e>
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	6871      	ldr	r1, [r6, #4]
 8005a40:	f000 fb50 	bl	80060e4 <_Balloc>
 8005a44:	4607      	mov	r7, r0
 8005a46:	b928      	cbnz	r0, 8005a54 <_dtoa_r+0x9dc>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005a4e:	4b7e      	ldr	r3, [pc, #504]	; (8005c48 <_dtoa_r+0xbd0>)
 8005a50:	f7ff bb26 	b.w	80050a0 <_dtoa_r+0x28>
 8005a54:	6932      	ldr	r2, [r6, #16]
 8005a56:	f106 010c 	add.w	r1, r6, #12
 8005a5a:	3202      	adds	r2, #2
 8005a5c:	0092      	lsls	r2, r2, #2
 8005a5e:	300c      	adds	r0, #12
 8005a60:	f000 fb32 	bl	80060c8 <memcpy>
 8005a64:	2201      	movs	r2, #1
 8005a66:	4639      	mov	r1, r7
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f000 fd49 	bl	8006500 <__lshift>
 8005a6e:	46b0      	mov	r8, r6
 8005a70:	4606      	mov	r6, r0
 8005a72:	9b08      	ldr	r3, [sp, #32]
 8005a74:	3301      	adds	r3, #1
 8005a76:	9302      	str	r3, [sp, #8]
 8005a78:	9b08      	ldr	r3, [sp, #32]
 8005a7a:	445b      	add	r3, fp
 8005a7c:	930a      	str	r3, [sp, #40]	; 0x28
 8005a7e:	9b04      	ldr	r3, [sp, #16]
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	9309      	str	r3, [sp, #36]	; 0x24
 8005a86:	9b02      	ldr	r3, [sp, #8]
 8005a88:	4621      	mov	r1, r4
 8005a8a:	4650      	mov	r0, sl
 8005a8c:	f103 3bff 	add.w	fp, r3, #4294967295
 8005a90:	f7ff fa64 	bl	8004f5c <quorem>
 8005a94:	4603      	mov	r3, r0
 8005a96:	4641      	mov	r1, r8
 8005a98:	3330      	adds	r3, #48	; 0x30
 8005a9a:	9004      	str	r0, [sp, #16]
 8005a9c:	4650      	mov	r0, sl
 8005a9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005aa0:	f000 fd9a 	bl	80065d8 <__mcmp>
 8005aa4:	4632      	mov	r2, r6
 8005aa6:	9006      	str	r0, [sp, #24]
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f000 fdb0 	bl	8006610 <__mdiff>
 8005ab0:	68c2      	ldr	r2, [r0, #12]
 8005ab2:	4607      	mov	r7, r0
 8005ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ab6:	bb02      	cbnz	r2, 8005afa <_dtoa_r+0xa82>
 8005ab8:	4601      	mov	r1, r0
 8005aba:	4650      	mov	r0, sl
 8005abc:	f000 fd8c 	bl	80065d8 <__mcmp>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ac4:	4639      	mov	r1, r7
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005acc:	f000 fb4a 	bl	8006164 <_Bfree>
 8005ad0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ad2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ad4:	9f02      	ldr	r7, [sp, #8]
 8005ad6:	ea43 0102 	orr.w	r1, r3, r2
 8005ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005adc:	430b      	orrs	r3, r1
 8005ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ae0:	d10d      	bne.n	8005afe <_dtoa_r+0xa86>
 8005ae2:	2b39      	cmp	r3, #57	; 0x39
 8005ae4:	d027      	beq.n	8005b36 <_dtoa_r+0xabe>
 8005ae6:	9a06      	ldr	r2, [sp, #24]
 8005ae8:	2a00      	cmp	r2, #0
 8005aea:	dd01      	ble.n	8005af0 <_dtoa_r+0xa78>
 8005aec:	9b04      	ldr	r3, [sp, #16]
 8005aee:	3331      	adds	r3, #49	; 0x31
 8005af0:	f88b 3000 	strb.w	r3, [fp]
 8005af4:	e776      	b.n	80059e4 <_dtoa_r+0x96c>
 8005af6:	4630      	mov	r0, r6
 8005af8:	e7b9      	b.n	8005a6e <_dtoa_r+0x9f6>
 8005afa:	2201      	movs	r2, #1
 8005afc:	e7e2      	b.n	8005ac4 <_dtoa_r+0xa4c>
 8005afe:	9906      	ldr	r1, [sp, #24]
 8005b00:	2900      	cmp	r1, #0
 8005b02:	db04      	blt.n	8005b0e <_dtoa_r+0xa96>
 8005b04:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005b06:	4301      	orrs	r1, r0
 8005b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b0a:	4301      	orrs	r1, r0
 8005b0c:	d120      	bne.n	8005b50 <_dtoa_r+0xad8>
 8005b0e:	2a00      	cmp	r2, #0
 8005b10:	ddee      	ble.n	8005af0 <_dtoa_r+0xa78>
 8005b12:	4651      	mov	r1, sl
 8005b14:	2201      	movs	r2, #1
 8005b16:	4628      	mov	r0, r5
 8005b18:	9302      	str	r3, [sp, #8]
 8005b1a:	f000 fcf1 	bl	8006500 <__lshift>
 8005b1e:	4621      	mov	r1, r4
 8005b20:	4682      	mov	sl, r0
 8005b22:	f000 fd59 	bl	80065d8 <__mcmp>
 8005b26:	2800      	cmp	r0, #0
 8005b28:	9b02      	ldr	r3, [sp, #8]
 8005b2a:	dc02      	bgt.n	8005b32 <_dtoa_r+0xaba>
 8005b2c:	d1e0      	bne.n	8005af0 <_dtoa_r+0xa78>
 8005b2e:	07da      	lsls	r2, r3, #31
 8005b30:	d5de      	bpl.n	8005af0 <_dtoa_r+0xa78>
 8005b32:	2b39      	cmp	r3, #57	; 0x39
 8005b34:	d1da      	bne.n	8005aec <_dtoa_r+0xa74>
 8005b36:	2339      	movs	r3, #57	; 0x39
 8005b38:	f88b 3000 	strb.w	r3, [fp]
 8005b3c:	463b      	mov	r3, r7
 8005b3e:	461f      	mov	r7, r3
 8005b40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	2a39      	cmp	r2, #57	; 0x39
 8005b48:	d050      	beq.n	8005bec <_dtoa_r+0xb74>
 8005b4a:	3201      	adds	r2, #1
 8005b4c:	701a      	strb	r2, [r3, #0]
 8005b4e:	e749      	b.n	80059e4 <_dtoa_r+0x96c>
 8005b50:	2a00      	cmp	r2, #0
 8005b52:	dd03      	ble.n	8005b5c <_dtoa_r+0xae4>
 8005b54:	2b39      	cmp	r3, #57	; 0x39
 8005b56:	d0ee      	beq.n	8005b36 <_dtoa_r+0xabe>
 8005b58:	3301      	adds	r3, #1
 8005b5a:	e7c9      	b.n	8005af0 <_dtoa_r+0xa78>
 8005b5c:	9a02      	ldr	r2, [sp, #8]
 8005b5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005b60:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005b64:	428a      	cmp	r2, r1
 8005b66:	d02a      	beq.n	8005bbe <_dtoa_r+0xb46>
 8005b68:	4651      	mov	r1, sl
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	220a      	movs	r2, #10
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f000 fb1a 	bl	80061a8 <__multadd>
 8005b74:	45b0      	cmp	r8, r6
 8005b76:	4682      	mov	sl, r0
 8005b78:	f04f 0300 	mov.w	r3, #0
 8005b7c:	f04f 020a 	mov.w	r2, #10
 8005b80:	4641      	mov	r1, r8
 8005b82:	4628      	mov	r0, r5
 8005b84:	d107      	bne.n	8005b96 <_dtoa_r+0xb1e>
 8005b86:	f000 fb0f 	bl	80061a8 <__multadd>
 8005b8a:	4680      	mov	r8, r0
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	9b02      	ldr	r3, [sp, #8]
 8005b90:	3301      	adds	r3, #1
 8005b92:	9302      	str	r3, [sp, #8]
 8005b94:	e777      	b.n	8005a86 <_dtoa_r+0xa0e>
 8005b96:	f000 fb07 	bl	80061a8 <__multadd>
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4680      	mov	r8, r0
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	220a      	movs	r2, #10
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f000 fb00 	bl	80061a8 <__multadd>
 8005ba8:	4606      	mov	r6, r0
 8005baa:	e7f0      	b.n	8005b8e <_dtoa_r+0xb16>
 8005bac:	f1bb 0f00 	cmp.w	fp, #0
 8005bb0:	bfcc      	ite	gt
 8005bb2:	465f      	movgt	r7, fp
 8005bb4:	2701      	movle	r7, #1
 8005bb6:	f04f 0800 	mov.w	r8, #0
 8005bba:	9a08      	ldr	r2, [sp, #32]
 8005bbc:	4417      	add	r7, r2
 8005bbe:	4651      	mov	r1, sl
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	9302      	str	r3, [sp, #8]
 8005bc6:	f000 fc9b 	bl	8006500 <__lshift>
 8005bca:	4621      	mov	r1, r4
 8005bcc:	4682      	mov	sl, r0
 8005bce:	f000 fd03 	bl	80065d8 <__mcmp>
 8005bd2:	2800      	cmp	r0, #0
 8005bd4:	dcb2      	bgt.n	8005b3c <_dtoa_r+0xac4>
 8005bd6:	d102      	bne.n	8005bde <_dtoa_r+0xb66>
 8005bd8:	9b02      	ldr	r3, [sp, #8]
 8005bda:	07db      	lsls	r3, r3, #31
 8005bdc:	d4ae      	bmi.n	8005b3c <_dtoa_r+0xac4>
 8005bde:	463b      	mov	r3, r7
 8005be0:	461f      	mov	r7, r3
 8005be2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005be6:	2a30      	cmp	r2, #48	; 0x30
 8005be8:	d0fa      	beq.n	8005be0 <_dtoa_r+0xb68>
 8005bea:	e6fb      	b.n	80059e4 <_dtoa_r+0x96c>
 8005bec:	9a08      	ldr	r2, [sp, #32]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d1a5      	bne.n	8005b3e <_dtoa_r+0xac6>
 8005bf2:	2331      	movs	r3, #49	; 0x31
 8005bf4:	f109 0901 	add.w	r9, r9, #1
 8005bf8:	7013      	strb	r3, [r2, #0]
 8005bfa:	e6f3      	b.n	80059e4 <_dtoa_r+0x96c>
 8005bfc:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <_dtoa_r+0xbd4>)
 8005bfe:	f7ff baa7 	b.w	8005150 <_dtoa_r+0xd8>
 8005c02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f47f aa80 	bne.w	800510a <_dtoa_r+0x92>
 8005c0a:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <_dtoa_r+0xbd8>)
 8005c0c:	f7ff baa0 	b.w	8005150 <_dtoa_r+0xd8>
 8005c10:	f1bb 0f00 	cmp.w	fp, #0
 8005c14:	dc03      	bgt.n	8005c1e <_dtoa_r+0xba6>
 8005c16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	f73f aecc 	bgt.w	80059b6 <_dtoa_r+0x93e>
 8005c1e:	9f08      	ldr	r7, [sp, #32]
 8005c20:	4621      	mov	r1, r4
 8005c22:	4650      	mov	r0, sl
 8005c24:	f7ff f99a 	bl	8004f5c <quorem>
 8005c28:	9a08      	ldr	r2, [sp, #32]
 8005c2a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005c2e:	f807 3b01 	strb.w	r3, [r7], #1
 8005c32:	1aba      	subs	r2, r7, r2
 8005c34:	4593      	cmp	fp, r2
 8005c36:	ddb9      	ble.n	8005bac <_dtoa_r+0xb34>
 8005c38:	4651      	mov	r1, sl
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	220a      	movs	r2, #10
 8005c3e:	4628      	mov	r0, r5
 8005c40:	f000 fab2 	bl	80061a8 <__multadd>
 8005c44:	4682      	mov	sl, r0
 8005c46:	e7eb      	b.n	8005c20 <_dtoa_r+0xba8>
 8005c48:	08007023 	.word	0x08007023
 8005c4c:	08006f7c 	.word	0x08006f7c
 8005c50:	08006fa0 	.word	0x08006fa0

08005c54 <__sflush_r>:
 8005c54:	898a      	ldrh	r2, [r1, #12]
 8005c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	0710      	lsls	r0, r2, #28
 8005c5e:	460c      	mov	r4, r1
 8005c60:	d458      	bmi.n	8005d14 <__sflush_r+0xc0>
 8005c62:	684b      	ldr	r3, [r1, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	dc05      	bgt.n	8005c74 <__sflush_r+0x20>
 8005c68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	dc02      	bgt.n	8005c74 <__sflush_r+0x20>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c76:	2e00      	cmp	r6, #0
 8005c78:	d0f9      	beq.n	8005c6e <__sflush_r+0x1a>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c80:	682f      	ldr	r7, [r5, #0]
 8005c82:	602b      	str	r3, [r5, #0]
 8005c84:	d032      	beq.n	8005cec <__sflush_r+0x98>
 8005c86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	075a      	lsls	r2, r3, #29
 8005c8c:	d505      	bpl.n	8005c9a <__sflush_r+0x46>
 8005c8e:	6863      	ldr	r3, [r4, #4]
 8005c90:	1ac0      	subs	r0, r0, r3
 8005c92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c94:	b10b      	cbz	r3, 8005c9a <__sflush_r+0x46>
 8005c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c98:	1ac0      	subs	r0, r0, r3
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	6a21      	ldr	r1, [r4, #32]
 8005ca4:	47b0      	blx	r6
 8005ca6:	1c43      	adds	r3, r0, #1
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	d106      	bne.n	8005cba <__sflush_r+0x66>
 8005cac:	6829      	ldr	r1, [r5, #0]
 8005cae:	291d      	cmp	r1, #29
 8005cb0:	d82c      	bhi.n	8005d0c <__sflush_r+0xb8>
 8005cb2:	4a2a      	ldr	r2, [pc, #168]	; (8005d5c <__sflush_r+0x108>)
 8005cb4:	40ca      	lsrs	r2, r1
 8005cb6:	07d6      	lsls	r6, r2, #31
 8005cb8:	d528      	bpl.n	8005d0c <__sflush_r+0xb8>
 8005cba:	2200      	movs	r2, #0
 8005cbc:	6062      	str	r2, [r4, #4]
 8005cbe:	6922      	ldr	r2, [r4, #16]
 8005cc0:	04d9      	lsls	r1, r3, #19
 8005cc2:	6022      	str	r2, [r4, #0]
 8005cc4:	d504      	bpl.n	8005cd0 <__sflush_r+0x7c>
 8005cc6:	1c42      	adds	r2, r0, #1
 8005cc8:	d101      	bne.n	8005cce <__sflush_r+0x7a>
 8005cca:	682b      	ldr	r3, [r5, #0]
 8005ccc:	b903      	cbnz	r3, 8005cd0 <__sflush_r+0x7c>
 8005cce:	6560      	str	r0, [r4, #84]	; 0x54
 8005cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cd2:	602f      	str	r7, [r5, #0]
 8005cd4:	2900      	cmp	r1, #0
 8005cd6:	d0ca      	beq.n	8005c6e <__sflush_r+0x1a>
 8005cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cdc:	4299      	cmp	r1, r3
 8005cde:	d002      	beq.n	8005ce6 <__sflush_r+0x92>
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	f000 fd8f 	bl	8006804 <_free_r>
 8005ce6:	2000      	movs	r0, #0
 8005ce8:	6360      	str	r0, [r4, #52]	; 0x34
 8005cea:	e7c1      	b.n	8005c70 <__sflush_r+0x1c>
 8005cec:	6a21      	ldr	r1, [r4, #32]
 8005cee:	2301      	movs	r3, #1
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b0      	blx	r6
 8005cf4:	1c41      	adds	r1, r0, #1
 8005cf6:	d1c7      	bne.n	8005c88 <__sflush_r+0x34>
 8005cf8:	682b      	ldr	r3, [r5, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0c4      	beq.n	8005c88 <__sflush_r+0x34>
 8005cfe:	2b1d      	cmp	r3, #29
 8005d00:	d001      	beq.n	8005d06 <__sflush_r+0xb2>
 8005d02:	2b16      	cmp	r3, #22
 8005d04:	d101      	bne.n	8005d0a <__sflush_r+0xb6>
 8005d06:	602f      	str	r7, [r5, #0]
 8005d08:	e7b1      	b.n	8005c6e <__sflush_r+0x1a>
 8005d0a:	89a3      	ldrh	r3, [r4, #12]
 8005d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d10:	81a3      	strh	r3, [r4, #12]
 8005d12:	e7ad      	b.n	8005c70 <__sflush_r+0x1c>
 8005d14:	690f      	ldr	r7, [r1, #16]
 8005d16:	2f00      	cmp	r7, #0
 8005d18:	d0a9      	beq.n	8005c6e <__sflush_r+0x1a>
 8005d1a:	0793      	lsls	r3, r2, #30
 8005d1c:	bf18      	it	ne
 8005d1e:	2300      	movne	r3, #0
 8005d20:	680e      	ldr	r6, [r1, #0]
 8005d22:	bf08      	it	eq
 8005d24:	694b      	ldreq	r3, [r1, #20]
 8005d26:	eba6 0807 	sub.w	r8, r6, r7
 8005d2a:	600f      	str	r7, [r1, #0]
 8005d2c:	608b      	str	r3, [r1, #8]
 8005d2e:	f1b8 0f00 	cmp.w	r8, #0
 8005d32:	dd9c      	ble.n	8005c6e <__sflush_r+0x1a>
 8005d34:	4643      	mov	r3, r8
 8005d36:	463a      	mov	r2, r7
 8005d38:	4628      	mov	r0, r5
 8005d3a:	6a21      	ldr	r1, [r4, #32]
 8005d3c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d3e:	47b0      	blx	r6
 8005d40:	2800      	cmp	r0, #0
 8005d42:	dc06      	bgt.n	8005d52 <__sflush_r+0xfe>
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d4e:	81a3      	strh	r3, [r4, #12]
 8005d50:	e78e      	b.n	8005c70 <__sflush_r+0x1c>
 8005d52:	4407      	add	r7, r0
 8005d54:	eba8 0800 	sub.w	r8, r8, r0
 8005d58:	e7e9      	b.n	8005d2e <__sflush_r+0xda>
 8005d5a:	bf00      	nop
 8005d5c:	20400001 	.word	0x20400001

08005d60 <_fflush_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	690b      	ldr	r3, [r1, #16]
 8005d64:	4605      	mov	r5, r0
 8005d66:	460c      	mov	r4, r1
 8005d68:	b913      	cbnz	r3, 8005d70 <_fflush_r+0x10>
 8005d6a:	2500      	movs	r5, #0
 8005d6c:	4628      	mov	r0, r5
 8005d6e:	bd38      	pop	{r3, r4, r5, pc}
 8005d70:	b118      	cbz	r0, 8005d7a <_fflush_r+0x1a>
 8005d72:	6983      	ldr	r3, [r0, #24]
 8005d74:	b90b      	cbnz	r3, 8005d7a <_fflush_r+0x1a>
 8005d76:	f000 f887 	bl	8005e88 <__sinit>
 8005d7a:	4b14      	ldr	r3, [pc, #80]	; (8005dcc <_fflush_r+0x6c>)
 8005d7c:	429c      	cmp	r4, r3
 8005d7e:	d11b      	bne.n	8005db8 <_fflush_r+0x58>
 8005d80:	686c      	ldr	r4, [r5, #4]
 8005d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d0ef      	beq.n	8005d6a <_fflush_r+0xa>
 8005d8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d8c:	07d0      	lsls	r0, r2, #31
 8005d8e:	d404      	bmi.n	8005d9a <_fflush_r+0x3a>
 8005d90:	0599      	lsls	r1, r3, #22
 8005d92:	d402      	bmi.n	8005d9a <_fflush_r+0x3a>
 8005d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d96:	f000 f91a 	bl	8005fce <__retarget_lock_acquire_recursive>
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	f7ff ff59 	bl	8005c54 <__sflush_r>
 8005da2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005da4:	4605      	mov	r5, r0
 8005da6:	07da      	lsls	r2, r3, #31
 8005da8:	d4e0      	bmi.n	8005d6c <_fflush_r+0xc>
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	059b      	lsls	r3, r3, #22
 8005dae:	d4dd      	bmi.n	8005d6c <_fflush_r+0xc>
 8005db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005db2:	f000 f90d 	bl	8005fd0 <__retarget_lock_release_recursive>
 8005db6:	e7d9      	b.n	8005d6c <_fflush_r+0xc>
 8005db8:	4b05      	ldr	r3, [pc, #20]	; (8005dd0 <_fflush_r+0x70>)
 8005dba:	429c      	cmp	r4, r3
 8005dbc:	d101      	bne.n	8005dc2 <_fflush_r+0x62>
 8005dbe:	68ac      	ldr	r4, [r5, #8]
 8005dc0:	e7df      	b.n	8005d82 <_fflush_r+0x22>
 8005dc2:	4b04      	ldr	r3, [pc, #16]	; (8005dd4 <_fflush_r+0x74>)
 8005dc4:	429c      	cmp	r4, r3
 8005dc6:	bf08      	it	eq
 8005dc8:	68ec      	ldreq	r4, [r5, #12]
 8005dca:	e7da      	b.n	8005d82 <_fflush_r+0x22>
 8005dcc:	08007054 	.word	0x08007054
 8005dd0:	08007074 	.word	0x08007074
 8005dd4:	08007034 	.word	0x08007034

08005dd8 <std>:
 8005dd8:	2300      	movs	r3, #0
 8005dda:	b510      	push	{r4, lr}
 8005ddc:	4604      	mov	r4, r0
 8005dde:	e9c0 3300 	strd	r3, r3, [r0]
 8005de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005de6:	6083      	str	r3, [r0, #8]
 8005de8:	8181      	strh	r1, [r0, #12]
 8005dea:	6643      	str	r3, [r0, #100]	; 0x64
 8005dec:	81c2      	strh	r2, [r0, #14]
 8005dee:	6183      	str	r3, [r0, #24]
 8005df0:	4619      	mov	r1, r3
 8005df2:	2208      	movs	r2, #8
 8005df4:	305c      	adds	r0, #92	; 0x5c
 8005df6:	f7fe fafb 	bl	80043f0 <memset>
 8005dfa:	4b05      	ldr	r3, [pc, #20]	; (8005e10 <std+0x38>)
 8005dfc:	6224      	str	r4, [r4, #32]
 8005dfe:	6263      	str	r3, [r4, #36]	; 0x24
 8005e00:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <std+0x3c>)
 8005e02:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e04:	4b04      	ldr	r3, [pc, #16]	; (8005e18 <std+0x40>)
 8005e06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e08:	4b04      	ldr	r3, [pc, #16]	; (8005e1c <std+0x44>)
 8005e0a:	6323      	str	r3, [r4, #48]	; 0x30
 8005e0c:	bd10      	pop	{r4, pc}
 8005e0e:	bf00      	nop
 8005e10:	08006c21 	.word	0x08006c21
 8005e14:	08006c43 	.word	0x08006c43
 8005e18:	08006c7b 	.word	0x08006c7b
 8005e1c:	08006c9f 	.word	0x08006c9f

08005e20 <_cleanup_r>:
 8005e20:	4901      	ldr	r1, [pc, #4]	; (8005e28 <_cleanup_r+0x8>)
 8005e22:	f000 b8af 	b.w	8005f84 <_fwalk_reent>
 8005e26:	bf00      	nop
 8005e28:	08005d61 	.word	0x08005d61

08005e2c <__sfmoreglue>:
 8005e2c:	b570      	push	{r4, r5, r6, lr}
 8005e2e:	2568      	movs	r5, #104	; 0x68
 8005e30:	1e4a      	subs	r2, r1, #1
 8005e32:	4355      	muls	r5, r2
 8005e34:	460e      	mov	r6, r1
 8005e36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e3a:	f000 fd2f 	bl	800689c <_malloc_r>
 8005e3e:	4604      	mov	r4, r0
 8005e40:	b140      	cbz	r0, 8005e54 <__sfmoreglue+0x28>
 8005e42:	2100      	movs	r1, #0
 8005e44:	e9c0 1600 	strd	r1, r6, [r0]
 8005e48:	300c      	adds	r0, #12
 8005e4a:	60a0      	str	r0, [r4, #8]
 8005e4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e50:	f7fe face 	bl	80043f0 <memset>
 8005e54:	4620      	mov	r0, r4
 8005e56:	bd70      	pop	{r4, r5, r6, pc}

08005e58 <__sfp_lock_acquire>:
 8005e58:	4801      	ldr	r0, [pc, #4]	; (8005e60 <__sfp_lock_acquire+0x8>)
 8005e5a:	f000 b8b8 	b.w	8005fce <__retarget_lock_acquire_recursive>
 8005e5e:	bf00      	nop
 8005e60:	20000400 	.word	0x20000400

08005e64 <__sfp_lock_release>:
 8005e64:	4801      	ldr	r0, [pc, #4]	; (8005e6c <__sfp_lock_release+0x8>)
 8005e66:	f000 b8b3 	b.w	8005fd0 <__retarget_lock_release_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	20000400 	.word	0x20000400

08005e70 <__sinit_lock_acquire>:
 8005e70:	4801      	ldr	r0, [pc, #4]	; (8005e78 <__sinit_lock_acquire+0x8>)
 8005e72:	f000 b8ac 	b.w	8005fce <__retarget_lock_acquire_recursive>
 8005e76:	bf00      	nop
 8005e78:	200003fb 	.word	0x200003fb

08005e7c <__sinit_lock_release>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	; (8005e84 <__sinit_lock_release+0x8>)
 8005e7e:	f000 b8a7 	b.w	8005fd0 <__retarget_lock_release_recursive>
 8005e82:	bf00      	nop
 8005e84:	200003fb 	.word	0x200003fb

08005e88 <__sinit>:
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	f7ff fff0 	bl	8005e70 <__sinit_lock_acquire>
 8005e90:	69a3      	ldr	r3, [r4, #24]
 8005e92:	b11b      	cbz	r3, 8005e9c <__sinit+0x14>
 8005e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e98:	f7ff bff0 	b.w	8005e7c <__sinit_lock_release>
 8005e9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005ea0:	6523      	str	r3, [r4, #80]	; 0x50
 8005ea2:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <__sinit+0x68>)
 8005ea4:	4a13      	ldr	r2, [pc, #76]	; (8005ef4 <__sinit+0x6c>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005eaa:	42a3      	cmp	r3, r4
 8005eac:	bf08      	it	eq
 8005eae:	2301      	moveq	r3, #1
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	bf08      	it	eq
 8005eb4:	61a3      	streq	r3, [r4, #24]
 8005eb6:	f000 f81f 	bl	8005ef8 <__sfp>
 8005eba:	6060      	str	r0, [r4, #4]
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f000 f81b 	bl	8005ef8 <__sfp>
 8005ec2:	60a0      	str	r0, [r4, #8]
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	f000 f817 	bl	8005ef8 <__sfp>
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2104      	movs	r1, #4
 8005ece:	60e0      	str	r0, [r4, #12]
 8005ed0:	6860      	ldr	r0, [r4, #4]
 8005ed2:	f7ff ff81 	bl	8005dd8 <std>
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	2109      	movs	r1, #9
 8005eda:	68a0      	ldr	r0, [r4, #8]
 8005edc:	f7ff ff7c 	bl	8005dd8 <std>
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	2112      	movs	r1, #18
 8005ee4:	68e0      	ldr	r0, [r4, #12]
 8005ee6:	f7ff ff77 	bl	8005dd8 <std>
 8005eea:	2301      	movs	r3, #1
 8005eec:	61a3      	str	r3, [r4, #24]
 8005eee:	e7d1      	b.n	8005e94 <__sinit+0xc>
 8005ef0:	08006f68 	.word	0x08006f68
 8005ef4:	08005e21 	.word	0x08005e21

08005ef8 <__sfp>:
 8005ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efa:	4607      	mov	r7, r0
 8005efc:	f7ff ffac 	bl	8005e58 <__sfp_lock_acquire>
 8005f00:	4b1e      	ldr	r3, [pc, #120]	; (8005f7c <__sfp+0x84>)
 8005f02:	681e      	ldr	r6, [r3, #0]
 8005f04:	69b3      	ldr	r3, [r6, #24]
 8005f06:	b913      	cbnz	r3, 8005f0e <__sfp+0x16>
 8005f08:	4630      	mov	r0, r6
 8005f0a:	f7ff ffbd 	bl	8005e88 <__sinit>
 8005f0e:	3648      	adds	r6, #72	; 0x48
 8005f10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	d503      	bpl.n	8005f20 <__sfp+0x28>
 8005f18:	6833      	ldr	r3, [r6, #0]
 8005f1a:	b30b      	cbz	r3, 8005f60 <__sfp+0x68>
 8005f1c:	6836      	ldr	r6, [r6, #0]
 8005f1e:	e7f7      	b.n	8005f10 <__sfp+0x18>
 8005f20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f24:	b9d5      	cbnz	r5, 8005f5c <__sfp+0x64>
 8005f26:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <__sfp+0x88>)
 8005f28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f2c:	60e3      	str	r3, [r4, #12]
 8005f2e:	6665      	str	r5, [r4, #100]	; 0x64
 8005f30:	f000 f84c 	bl	8005fcc <__retarget_lock_init_recursive>
 8005f34:	f7ff ff96 	bl	8005e64 <__sfp_lock_release>
 8005f38:	2208      	movs	r2, #8
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f44:	6025      	str	r5, [r4, #0]
 8005f46:	61a5      	str	r5, [r4, #24]
 8005f48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f4c:	f7fe fa50 	bl	80043f0 <memset>
 8005f50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f58:	4620      	mov	r0, r4
 8005f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f5c:	3468      	adds	r4, #104	; 0x68
 8005f5e:	e7d9      	b.n	8005f14 <__sfp+0x1c>
 8005f60:	2104      	movs	r1, #4
 8005f62:	4638      	mov	r0, r7
 8005f64:	f7ff ff62 	bl	8005e2c <__sfmoreglue>
 8005f68:	4604      	mov	r4, r0
 8005f6a:	6030      	str	r0, [r6, #0]
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d1d5      	bne.n	8005f1c <__sfp+0x24>
 8005f70:	f7ff ff78 	bl	8005e64 <__sfp_lock_release>
 8005f74:	230c      	movs	r3, #12
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	e7ee      	b.n	8005f58 <__sfp+0x60>
 8005f7a:	bf00      	nop
 8005f7c:	08006f68 	.word	0x08006f68
 8005f80:	ffff0001 	.word	0xffff0001

08005f84 <_fwalk_reent>:
 8005f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f88:	4606      	mov	r6, r0
 8005f8a:	4688      	mov	r8, r1
 8005f8c:	2700      	movs	r7, #0
 8005f8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f96:	f1b9 0901 	subs.w	r9, r9, #1
 8005f9a:	d505      	bpl.n	8005fa8 <_fwalk_reent+0x24>
 8005f9c:	6824      	ldr	r4, [r4, #0]
 8005f9e:	2c00      	cmp	r4, #0
 8005fa0:	d1f7      	bne.n	8005f92 <_fwalk_reent+0xe>
 8005fa2:	4638      	mov	r0, r7
 8005fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fa8:	89ab      	ldrh	r3, [r5, #12]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d907      	bls.n	8005fbe <_fwalk_reent+0x3a>
 8005fae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	d003      	beq.n	8005fbe <_fwalk_reent+0x3a>
 8005fb6:	4629      	mov	r1, r5
 8005fb8:	4630      	mov	r0, r6
 8005fba:	47c0      	blx	r8
 8005fbc:	4307      	orrs	r7, r0
 8005fbe:	3568      	adds	r5, #104	; 0x68
 8005fc0:	e7e9      	b.n	8005f96 <_fwalk_reent+0x12>
	...

08005fc4 <_localeconv_r>:
 8005fc4:	4800      	ldr	r0, [pc, #0]	; (8005fc8 <_localeconv_r+0x4>)
 8005fc6:	4770      	bx	lr
 8005fc8:	20000160 	.word	0x20000160

08005fcc <__retarget_lock_init_recursive>:
 8005fcc:	4770      	bx	lr

08005fce <__retarget_lock_acquire_recursive>:
 8005fce:	4770      	bx	lr

08005fd0 <__retarget_lock_release_recursive>:
 8005fd0:	4770      	bx	lr

08005fd2 <__swhatbuf_r>:
 8005fd2:	b570      	push	{r4, r5, r6, lr}
 8005fd4:	460e      	mov	r6, r1
 8005fd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fda:	4614      	mov	r4, r2
 8005fdc:	2900      	cmp	r1, #0
 8005fde:	461d      	mov	r5, r3
 8005fe0:	b096      	sub	sp, #88	; 0x58
 8005fe2:	da07      	bge.n	8005ff4 <__swhatbuf_r+0x22>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	602b      	str	r3, [r5, #0]
 8005fe8:	89b3      	ldrh	r3, [r6, #12]
 8005fea:	061a      	lsls	r2, r3, #24
 8005fec:	d410      	bmi.n	8006010 <__swhatbuf_r+0x3e>
 8005fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ff2:	e00e      	b.n	8006012 <__swhatbuf_r+0x40>
 8005ff4:	466a      	mov	r2, sp
 8005ff6:	f000 fea9 	bl	8006d4c <_fstat_r>
 8005ffa:	2800      	cmp	r0, #0
 8005ffc:	dbf2      	blt.n	8005fe4 <__swhatbuf_r+0x12>
 8005ffe:	9a01      	ldr	r2, [sp, #4]
 8006000:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006004:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006008:	425a      	negs	r2, r3
 800600a:	415a      	adcs	r2, r3
 800600c:	602a      	str	r2, [r5, #0]
 800600e:	e7ee      	b.n	8005fee <__swhatbuf_r+0x1c>
 8006010:	2340      	movs	r3, #64	; 0x40
 8006012:	2000      	movs	r0, #0
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	b016      	add	sp, #88	; 0x58
 8006018:	bd70      	pop	{r4, r5, r6, pc}
	...

0800601c <__smakebuf_r>:
 800601c:	898b      	ldrh	r3, [r1, #12]
 800601e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006020:	079d      	lsls	r5, r3, #30
 8006022:	4606      	mov	r6, r0
 8006024:	460c      	mov	r4, r1
 8006026:	d507      	bpl.n	8006038 <__smakebuf_r+0x1c>
 8006028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	2301      	movs	r3, #1
 8006032:	6163      	str	r3, [r4, #20]
 8006034:	b002      	add	sp, #8
 8006036:	bd70      	pop	{r4, r5, r6, pc}
 8006038:	466a      	mov	r2, sp
 800603a:	ab01      	add	r3, sp, #4
 800603c:	f7ff ffc9 	bl	8005fd2 <__swhatbuf_r>
 8006040:	9900      	ldr	r1, [sp, #0]
 8006042:	4605      	mov	r5, r0
 8006044:	4630      	mov	r0, r6
 8006046:	f000 fc29 	bl	800689c <_malloc_r>
 800604a:	b948      	cbnz	r0, 8006060 <__smakebuf_r+0x44>
 800604c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006050:	059a      	lsls	r2, r3, #22
 8006052:	d4ef      	bmi.n	8006034 <__smakebuf_r+0x18>
 8006054:	f023 0303 	bic.w	r3, r3, #3
 8006058:	f043 0302 	orr.w	r3, r3, #2
 800605c:	81a3      	strh	r3, [r4, #12]
 800605e:	e7e3      	b.n	8006028 <__smakebuf_r+0xc>
 8006060:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <__smakebuf_r+0x7c>)
 8006062:	62b3      	str	r3, [r6, #40]	; 0x28
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	6020      	str	r0, [r4, #0]
 8006068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606c:	81a3      	strh	r3, [r4, #12]
 800606e:	9b00      	ldr	r3, [sp, #0]
 8006070:	6120      	str	r0, [r4, #16]
 8006072:	6163      	str	r3, [r4, #20]
 8006074:	9b01      	ldr	r3, [sp, #4]
 8006076:	b15b      	cbz	r3, 8006090 <__smakebuf_r+0x74>
 8006078:	4630      	mov	r0, r6
 800607a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800607e:	f000 fe77 	bl	8006d70 <_isatty_r>
 8006082:	b128      	cbz	r0, 8006090 <__smakebuf_r+0x74>
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	f023 0303 	bic.w	r3, r3, #3
 800608a:	f043 0301 	orr.w	r3, r3, #1
 800608e:	81a3      	strh	r3, [r4, #12]
 8006090:	89a0      	ldrh	r0, [r4, #12]
 8006092:	4305      	orrs	r5, r0
 8006094:	81a5      	strh	r5, [r4, #12]
 8006096:	e7cd      	b.n	8006034 <__smakebuf_r+0x18>
 8006098:	08005e21 	.word	0x08005e21

0800609c <malloc>:
 800609c:	4b02      	ldr	r3, [pc, #8]	; (80060a8 <malloc+0xc>)
 800609e:	4601      	mov	r1, r0
 80060a0:	6818      	ldr	r0, [r3, #0]
 80060a2:	f000 bbfb 	b.w	800689c <_malloc_r>
 80060a6:	bf00      	nop
 80060a8:	2000000c 	.word	0x2000000c

080060ac <memchr>:
 80060ac:	4603      	mov	r3, r0
 80060ae:	b510      	push	{r4, lr}
 80060b0:	b2c9      	uxtb	r1, r1
 80060b2:	4402      	add	r2, r0
 80060b4:	4293      	cmp	r3, r2
 80060b6:	4618      	mov	r0, r3
 80060b8:	d101      	bne.n	80060be <memchr+0x12>
 80060ba:	2000      	movs	r0, #0
 80060bc:	e003      	b.n	80060c6 <memchr+0x1a>
 80060be:	7804      	ldrb	r4, [r0, #0]
 80060c0:	3301      	adds	r3, #1
 80060c2:	428c      	cmp	r4, r1
 80060c4:	d1f6      	bne.n	80060b4 <memchr+0x8>
 80060c6:	bd10      	pop	{r4, pc}

080060c8 <memcpy>:
 80060c8:	440a      	add	r2, r1
 80060ca:	4291      	cmp	r1, r2
 80060cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80060d0:	d100      	bne.n	80060d4 <memcpy+0xc>
 80060d2:	4770      	bx	lr
 80060d4:	b510      	push	{r4, lr}
 80060d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060da:	4291      	cmp	r1, r2
 80060dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060e0:	d1f9      	bne.n	80060d6 <memcpy+0xe>
 80060e2:	bd10      	pop	{r4, pc}

080060e4 <_Balloc>:
 80060e4:	b570      	push	{r4, r5, r6, lr}
 80060e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80060e8:	4604      	mov	r4, r0
 80060ea:	460d      	mov	r5, r1
 80060ec:	b976      	cbnz	r6, 800610c <_Balloc+0x28>
 80060ee:	2010      	movs	r0, #16
 80060f0:	f7ff ffd4 	bl	800609c <malloc>
 80060f4:	4602      	mov	r2, r0
 80060f6:	6260      	str	r0, [r4, #36]	; 0x24
 80060f8:	b920      	cbnz	r0, 8006104 <_Balloc+0x20>
 80060fa:	2166      	movs	r1, #102	; 0x66
 80060fc:	4b17      	ldr	r3, [pc, #92]	; (800615c <_Balloc+0x78>)
 80060fe:	4818      	ldr	r0, [pc, #96]	; (8006160 <_Balloc+0x7c>)
 8006100:	f000 fde4 	bl	8006ccc <__assert_func>
 8006104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006108:	6006      	str	r6, [r0, #0]
 800610a:	60c6      	str	r6, [r0, #12]
 800610c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800610e:	68f3      	ldr	r3, [r6, #12]
 8006110:	b183      	cbz	r3, 8006134 <_Balloc+0x50>
 8006112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800611a:	b9b8      	cbnz	r0, 800614c <_Balloc+0x68>
 800611c:	2101      	movs	r1, #1
 800611e:	fa01 f605 	lsl.w	r6, r1, r5
 8006122:	1d72      	adds	r2, r6, #5
 8006124:	4620      	mov	r0, r4
 8006126:	0092      	lsls	r2, r2, #2
 8006128:	f000 fb5e 	bl	80067e8 <_calloc_r>
 800612c:	b160      	cbz	r0, 8006148 <_Balloc+0x64>
 800612e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006132:	e00e      	b.n	8006152 <_Balloc+0x6e>
 8006134:	2221      	movs	r2, #33	; 0x21
 8006136:	2104      	movs	r1, #4
 8006138:	4620      	mov	r0, r4
 800613a:	f000 fb55 	bl	80067e8 <_calloc_r>
 800613e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006140:	60f0      	str	r0, [r6, #12]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e4      	bne.n	8006112 <_Balloc+0x2e>
 8006148:	2000      	movs	r0, #0
 800614a:	bd70      	pop	{r4, r5, r6, pc}
 800614c:	6802      	ldr	r2, [r0, #0]
 800614e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006152:	2300      	movs	r3, #0
 8006154:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006158:	e7f7      	b.n	800614a <_Balloc+0x66>
 800615a:	bf00      	nop
 800615c:	08006fad 	.word	0x08006fad
 8006160:	08007094 	.word	0x08007094

08006164 <_Bfree>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006168:	4605      	mov	r5, r0
 800616a:	460c      	mov	r4, r1
 800616c:	b976      	cbnz	r6, 800618c <_Bfree+0x28>
 800616e:	2010      	movs	r0, #16
 8006170:	f7ff ff94 	bl	800609c <malloc>
 8006174:	4602      	mov	r2, r0
 8006176:	6268      	str	r0, [r5, #36]	; 0x24
 8006178:	b920      	cbnz	r0, 8006184 <_Bfree+0x20>
 800617a:	218a      	movs	r1, #138	; 0x8a
 800617c:	4b08      	ldr	r3, [pc, #32]	; (80061a0 <_Bfree+0x3c>)
 800617e:	4809      	ldr	r0, [pc, #36]	; (80061a4 <_Bfree+0x40>)
 8006180:	f000 fda4 	bl	8006ccc <__assert_func>
 8006184:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006188:	6006      	str	r6, [r0, #0]
 800618a:	60c6      	str	r6, [r0, #12]
 800618c:	b13c      	cbz	r4, 800619e <_Bfree+0x3a>
 800618e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006190:	6862      	ldr	r2, [r4, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006198:	6021      	str	r1, [r4, #0]
 800619a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	08006fad 	.word	0x08006fad
 80061a4:	08007094 	.word	0x08007094

080061a8 <__multadd>:
 80061a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ac:	4698      	mov	r8, r3
 80061ae:	460c      	mov	r4, r1
 80061b0:	2300      	movs	r3, #0
 80061b2:	690e      	ldr	r6, [r1, #16]
 80061b4:	4607      	mov	r7, r0
 80061b6:	f101 0014 	add.w	r0, r1, #20
 80061ba:	6805      	ldr	r5, [r0, #0]
 80061bc:	3301      	adds	r3, #1
 80061be:	b2a9      	uxth	r1, r5
 80061c0:	fb02 8101 	mla	r1, r2, r1, r8
 80061c4:	0c2d      	lsrs	r5, r5, #16
 80061c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80061ca:	fb02 c505 	mla	r5, r2, r5, ip
 80061ce:	b289      	uxth	r1, r1
 80061d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80061d4:	429e      	cmp	r6, r3
 80061d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80061da:	f840 1b04 	str.w	r1, [r0], #4
 80061de:	dcec      	bgt.n	80061ba <__multadd+0x12>
 80061e0:	f1b8 0f00 	cmp.w	r8, #0
 80061e4:	d022      	beq.n	800622c <__multadd+0x84>
 80061e6:	68a3      	ldr	r3, [r4, #8]
 80061e8:	42b3      	cmp	r3, r6
 80061ea:	dc19      	bgt.n	8006220 <__multadd+0x78>
 80061ec:	6861      	ldr	r1, [r4, #4]
 80061ee:	4638      	mov	r0, r7
 80061f0:	3101      	adds	r1, #1
 80061f2:	f7ff ff77 	bl	80060e4 <_Balloc>
 80061f6:	4605      	mov	r5, r0
 80061f8:	b928      	cbnz	r0, 8006206 <__multadd+0x5e>
 80061fa:	4602      	mov	r2, r0
 80061fc:	21b5      	movs	r1, #181	; 0xb5
 80061fe:	4b0d      	ldr	r3, [pc, #52]	; (8006234 <__multadd+0x8c>)
 8006200:	480d      	ldr	r0, [pc, #52]	; (8006238 <__multadd+0x90>)
 8006202:	f000 fd63 	bl	8006ccc <__assert_func>
 8006206:	6922      	ldr	r2, [r4, #16]
 8006208:	f104 010c 	add.w	r1, r4, #12
 800620c:	3202      	adds	r2, #2
 800620e:	0092      	lsls	r2, r2, #2
 8006210:	300c      	adds	r0, #12
 8006212:	f7ff ff59 	bl	80060c8 <memcpy>
 8006216:	4621      	mov	r1, r4
 8006218:	4638      	mov	r0, r7
 800621a:	f7ff ffa3 	bl	8006164 <_Bfree>
 800621e:	462c      	mov	r4, r5
 8006220:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006224:	3601      	adds	r6, #1
 8006226:	f8c3 8014 	str.w	r8, [r3, #20]
 800622a:	6126      	str	r6, [r4, #16]
 800622c:	4620      	mov	r0, r4
 800622e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006232:	bf00      	nop
 8006234:	08007023 	.word	0x08007023
 8006238:	08007094 	.word	0x08007094

0800623c <__hi0bits>:
 800623c:	0c02      	lsrs	r2, r0, #16
 800623e:	0412      	lsls	r2, r2, #16
 8006240:	4603      	mov	r3, r0
 8006242:	b9ca      	cbnz	r2, 8006278 <__hi0bits+0x3c>
 8006244:	0403      	lsls	r3, r0, #16
 8006246:	2010      	movs	r0, #16
 8006248:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800624c:	bf04      	itt	eq
 800624e:	021b      	lsleq	r3, r3, #8
 8006250:	3008      	addeq	r0, #8
 8006252:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006256:	bf04      	itt	eq
 8006258:	011b      	lsleq	r3, r3, #4
 800625a:	3004      	addeq	r0, #4
 800625c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006260:	bf04      	itt	eq
 8006262:	009b      	lsleq	r3, r3, #2
 8006264:	3002      	addeq	r0, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	db05      	blt.n	8006276 <__hi0bits+0x3a>
 800626a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800626e:	f100 0001 	add.w	r0, r0, #1
 8006272:	bf08      	it	eq
 8006274:	2020      	moveq	r0, #32
 8006276:	4770      	bx	lr
 8006278:	2000      	movs	r0, #0
 800627a:	e7e5      	b.n	8006248 <__hi0bits+0xc>

0800627c <__lo0bits>:
 800627c:	6803      	ldr	r3, [r0, #0]
 800627e:	4602      	mov	r2, r0
 8006280:	f013 0007 	ands.w	r0, r3, #7
 8006284:	d00b      	beq.n	800629e <__lo0bits+0x22>
 8006286:	07d9      	lsls	r1, r3, #31
 8006288:	d422      	bmi.n	80062d0 <__lo0bits+0x54>
 800628a:	0798      	lsls	r0, r3, #30
 800628c:	bf49      	itett	mi
 800628e:	085b      	lsrmi	r3, r3, #1
 8006290:	089b      	lsrpl	r3, r3, #2
 8006292:	2001      	movmi	r0, #1
 8006294:	6013      	strmi	r3, [r2, #0]
 8006296:	bf5c      	itt	pl
 8006298:	2002      	movpl	r0, #2
 800629a:	6013      	strpl	r3, [r2, #0]
 800629c:	4770      	bx	lr
 800629e:	b299      	uxth	r1, r3
 80062a0:	b909      	cbnz	r1, 80062a6 <__lo0bits+0x2a>
 80062a2:	2010      	movs	r0, #16
 80062a4:	0c1b      	lsrs	r3, r3, #16
 80062a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80062aa:	bf04      	itt	eq
 80062ac:	0a1b      	lsreq	r3, r3, #8
 80062ae:	3008      	addeq	r0, #8
 80062b0:	0719      	lsls	r1, r3, #28
 80062b2:	bf04      	itt	eq
 80062b4:	091b      	lsreq	r3, r3, #4
 80062b6:	3004      	addeq	r0, #4
 80062b8:	0799      	lsls	r1, r3, #30
 80062ba:	bf04      	itt	eq
 80062bc:	089b      	lsreq	r3, r3, #2
 80062be:	3002      	addeq	r0, #2
 80062c0:	07d9      	lsls	r1, r3, #31
 80062c2:	d403      	bmi.n	80062cc <__lo0bits+0x50>
 80062c4:	085b      	lsrs	r3, r3, #1
 80062c6:	f100 0001 	add.w	r0, r0, #1
 80062ca:	d003      	beq.n	80062d4 <__lo0bits+0x58>
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	4770      	bx	lr
 80062d0:	2000      	movs	r0, #0
 80062d2:	4770      	bx	lr
 80062d4:	2020      	movs	r0, #32
 80062d6:	4770      	bx	lr

080062d8 <__i2b>:
 80062d8:	b510      	push	{r4, lr}
 80062da:	460c      	mov	r4, r1
 80062dc:	2101      	movs	r1, #1
 80062de:	f7ff ff01 	bl	80060e4 <_Balloc>
 80062e2:	4602      	mov	r2, r0
 80062e4:	b928      	cbnz	r0, 80062f2 <__i2b+0x1a>
 80062e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80062ea:	4b04      	ldr	r3, [pc, #16]	; (80062fc <__i2b+0x24>)
 80062ec:	4804      	ldr	r0, [pc, #16]	; (8006300 <__i2b+0x28>)
 80062ee:	f000 fced 	bl	8006ccc <__assert_func>
 80062f2:	2301      	movs	r3, #1
 80062f4:	6144      	str	r4, [r0, #20]
 80062f6:	6103      	str	r3, [r0, #16]
 80062f8:	bd10      	pop	{r4, pc}
 80062fa:	bf00      	nop
 80062fc:	08007023 	.word	0x08007023
 8006300:	08007094 	.word	0x08007094

08006304 <__multiply>:
 8006304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006308:	4614      	mov	r4, r2
 800630a:	690a      	ldr	r2, [r1, #16]
 800630c:	6923      	ldr	r3, [r4, #16]
 800630e:	460d      	mov	r5, r1
 8006310:	429a      	cmp	r2, r3
 8006312:	bfbe      	ittt	lt
 8006314:	460b      	movlt	r3, r1
 8006316:	4625      	movlt	r5, r4
 8006318:	461c      	movlt	r4, r3
 800631a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800631e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006322:	68ab      	ldr	r3, [r5, #8]
 8006324:	6869      	ldr	r1, [r5, #4]
 8006326:	eb0a 0709 	add.w	r7, sl, r9
 800632a:	42bb      	cmp	r3, r7
 800632c:	b085      	sub	sp, #20
 800632e:	bfb8      	it	lt
 8006330:	3101      	addlt	r1, #1
 8006332:	f7ff fed7 	bl	80060e4 <_Balloc>
 8006336:	b930      	cbnz	r0, 8006346 <__multiply+0x42>
 8006338:	4602      	mov	r2, r0
 800633a:	f240 115d 	movw	r1, #349	; 0x15d
 800633e:	4b41      	ldr	r3, [pc, #260]	; (8006444 <__multiply+0x140>)
 8006340:	4841      	ldr	r0, [pc, #260]	; (8006448 <__multiply+0x144>)
 8006342:	f000 fcc3 	bl	8006ccc <__assert_func>
 8006346:	f100 0614 	add.w	r6, r0, #20
 800634a:	4633      	mov	r3, r6
 800634c:	2200      	movs	r2, #0
 800634e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006352:	4543      	cmp	r3, r8
 8006354:	d31e      	bcc.n	8006394 <__multiply+0x90>
 8006356:	f105 0c14 	add.w	ip, r5, #20
 800635a:	f104 0314 	add.w	r3, r4, #20
 800635e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006362:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006366:	9202      	str	r2, [sp, #8]
 8006368:	ebac 0205 	sub.w	r2, ip, r5
 800636c:	3a15      	subs	r2, #21
 800636e:	f022 0203 	bic.w	r2, r2, #3
 8006372:	3204      	adds	r2, #4
 8006374:	f105 0115 	add.w	r1, r5, #21
 8006378:	458c      	cmp	ip, r1
 800637a:	bf38      	it	cc
 800637c:	2204      	movcc	r2, #4
 800637e:	9201      	str	r2, [sp, #4]
 8006380:	9a02      	ldr	r2, [sp, #8]
 8006382:	9303      	str	r3, [sp, #12]
 8006384:	429a      	cmp	r2, r3
 8006386:	d808      	bhi.n	800639a <__multiply+0x96>
 8006388:	2f00      	cmp	r7, #0
 800638a:	dc55      	bgt.n	8006438 <__multiply+0x134>
 800638c:	6107      	str	r7, [r0, #16]
 800638e:	b005      	add	sp, #20
 8006390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006394:	f843 2b04 	str.w	r2, [r3], #4
 8006398:	e7db      	b.n	8006352 <__multiply+0x4e>
 800639a:	f8b3 a000 	ldrh.w	sl, [r3]
 800639e:	f1ba 0f00 	cmp.w	sl, #0
 80063a2:	d020      	beq.n	80063e6 <__multiply+0xe2>
 80063a4:	46b1      	mov	r9, r6
 80063a6:	2200      	movs	r2, #0
 80063a8:	f105 0e14 	add.w	lr, r5, #20
 80063ac:	f85e 4b04 	ldr.w	r4, [lr], #4
 80063b0:	f8d9 b000 	ldr.w	fp, [r9]
 80063b4:	b2a1      	uxth	r1, r4
 80063b6:	fa1f fb8b 	uxth.w	fp, fp
 80063ba:	fb0a b101 	mla	r1, sl, r1, fp
 80063be:	4411      	add	r1, r2
 80063c0:	f8d9 2000 	ldr.w	r2, [r9]
 80063c4:	0c24      	lsrs	r4, r4, #16
 80063c6:	0c12      	lsrs	r2, r2, #16
 80063c8:	fb0a 2404 	mla	r4, sl, r4, r2
 80063cc:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80063d0:	b289      	uxth	r1, r1
 80063d2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80063d6:	45f4      	cmp	ip, lr
 80063d8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80063dc:	f849 1b04 	str.w	r1, [r9], #4
 80063e0:	d8e4      	bhi.n	80063ac <__multiply+0xa8>
 80063e2:	9901      	ldr	r1, [sp, #4]
 80063e4:	5072      	str	r2, [r6, r1]
 80063e6:	9a03      	ldr	r2, [sp, #12]
 80063e8:	3304      	adds	r3, #4
 80063ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80063ee:	f1b9 0f00 	cmp.w	r9, #0
 80063f2:	d01f      	beq.n	8006434 <__multiply+0x130>
 80063f4:	46b6      	mov	lr, r6
 80063f6:	f04f 0a00 	mov.w	sl, #0
 80063fa:	6834      	ldr	r4, [r6, #0]
 80063fc:	f105 0114 	add.w	r1, r5, #20
 8006400:	880a      	ldrh	r2, [r1, #0]
 8006402:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006406:	b2a4      	uxth	r4, r4
 8006408:	fb09 b202 	mla	r2, r9, r2, fp
 800640c:	4492      	add	sl, r2
 800640e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006412:	f84e 4b04 	str.w	r4, [lr], #4
 8006416:	f851 4b04 	ldr.w	r4, [r1], #4
 800641a:	f8be 2000 	ldrh.w	r2, [lr]
 800641e:	0c24      	lsrs	r4, r4, #16
 8006420:	fb09 2404 	mla	r4, r9, r4, r2
 8006424:	458c      	cmp	ip, r1
 8006426:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800642a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800642e:	d8e7      	bhi.n	8006400 <__multiply+0xfc>
 8006430:	9a01      	ldr	r2, [sp, #4]
 8006432:	50b4      	str	r4, [r6, r2]
 8006434:	3604      	adds	r6, #4
 8006436:	e7a3      	b.n	8006380 <__multiply+0x7c>
 8006438:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1a5      	bne.n	800638c <__multiply+0x88>
 8006440:	3f01      	subs	r7, #1
 8006442:	e7a1      	b.n	8006388 <__multiply+0x84>
 8006444:	08007023 	.word	0x08007023
 8006448:	08007094 	.word	0x08007094

0800644c <__pow5mult>:
 800644c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006450:	4615      	mov	r5, r2
 8006452:	f012 0203 	ands.w	r2, r2, #3
 8006456:	4606      	mov	r6, r0
 8006458:	460f      	mov	r7, r1
 800645a:	d007      	beq.n	800646c <__pow5mult+0x20>
 800645c:	4c25      	ldr	r4, [pc, #148]	; (80064f4 <__pow5mult+0xa8>)
 800645e:	3a01      	subs	r2, #1
 8006460:	2300      	movs	r3, #0
 8006462:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006466:	f7ff fe9f 	bl	80061a8 <__multadd>
 800646a:	4607      	mov	r7, r0
 800646c:	10ad      	asrs	r5, r5, #2
 800646e:	d03d      	beq.n	80064ec <__pow5mult+0xa0>
 8006470:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006472:	b97c      	cbnz	r4, 8006494 <__pow5mult+0x48>
 8006474:	2010      	movs	r0, #16
 8006476:	f7ff fe11 	bl	800609c <malloc>
 800647a:	4602      	mov	r2, r0
 800647c:	6270      	str	r0, [r6, #36]	; 0x24
 800647e:	b928      	cbnz	r0, 800648c <__pow5mult+0x40>
 8006480:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006484:	4b1c      	ldr	r3, [pc, #112]	; (80064f8 <__pow5mult+0xac>)
 8006486:	481d      	ldr	r0, [pc, #116]	; (80064fc <__pow5mult+0xb0>)
 8006488:	f000 fc20 	bl	8006ccc <__assert_func>
 800648c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006490:	6004      	str	r4, [r0, #0]
 8006492:	60c4      	str	r4, [r0, #12]
 8006494:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006498:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800649c:	b94c      	cbnz	r4, 80064b2 <__pow5mult+0x66>
 800649e:	f240 2171 	movw	r1, #625	; 0x271
 80064a2:	4630      	mov	r0, r6
 80064a4:	f7ff ff18 	bl	80062d8 <__i2b>
 80064a8:	2300      	movs	r3, #0
 80064aa:	4604      	mov	r4, r0
 80064ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80064b0:	6003      	str	r3, [r0, #0]
 80064b2:	f04f 0900 	mov.w	r9, #0
 80064b6:	07eb      	lsls	r3, r5, #31
 80064b8:	d50a      	bpl.n	80064d0 <__pow5mult+0x84>
 80064ba:	4639      	mov	r1, r7
 80064bc:	4622      	mov	r2, r4
 80064be:	4630      	mov	r0, r6
 80064c0:	f7ff ff20 	bl	8006304 <__multiply>
 80064c4:	4680      	mov	r8, r0
 80064c6:	4639      	mov	r1, r7
 80064c8:	4630      	mov	r0, r6
 80064ca:	f7ff fe4b 	bl	8006164 <_Bfree>
 80064ce:	4647      	mov	r7, r8
 80064d0:	106d      	asrs	r5, r5, #1
 80064d2:	d00b      	beq.n	80064ec <__pow5mult+0xa0>
 80064d4:	6820      	ldr	r0, [r4, #0]
 80064d6:	b938      	cbnz	r0, 80064e8 <__pow5mult+0x9c>
 80064d8:	4622      	mov	r2, r4
 80064da:	4621      	mov	r1, r4
 80064dc:	4630      	mov	r0, r6
 80064de:	f7ff ff11 	bl	8006304 <__multiply>
 80064e2:	6020      	str	r0, [r4, #0]
 80064e4:	f8c0 9000 	str.w	r9, [r0]
 80064e8:	4604      	mov	r4, r0
 80064ea:	e7e4      	b.n	80064b6 <__pow5mult+0x6a>
 80064ec:	4638      	mov	r0, r7
 80064ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f2:	bf00      	nop
 80064f4:	080071e8 	.word	0x080071e8
 80064f8:	08006fad 	.word	0x08006fad
 80064fc:	08007094 	.word	0x08007094

08006500 <__lshift>:
 8006500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	460c      	mov	r4, r1
 8006506:	4607      	mov	r7, r0
 8006508:	4691      	mov	r9, r2
 800650a:	6923      	ldr	r3, [r4, #16]
 800650c:	6849      	ldr	r1, [r1, #4]
 800650e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006512:	68a3      	ldr	r3, [r4, #8]
 8006514:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006518:	f108 0601 	add.w	r6, r8, #1
 800651c:	42b3      	cmp	r3, r6
 800651e:	db0b      	blt.n	8006538 <__lshift+0x38>
 8006520:	4638      	mov	r0, r7
 8006522:	f7ff fddf 	bl	80060e4 <_Balloc>
 8006526:	4605      	mov	r5, r0
 8006528:	b948      	cbnz	r0, 800653e <__lshift+0x3e>
 800652a:	4602      	mov	r2, r0
 800652c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006530:	4b27      	ldr	r3, [pc, #156]	; (80065d0 <__lshift+0xd0>)
 8006532:	4828      	ldr	r0, [pc, #160]	; (80065d4 <__lshift+0xd4>)
 8006534:	f000 fbca 	bl	8006ccc <__assert_func>
 8006538:	3101      	adds	r1, #1
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	e7ee      	b.n	800651c <__lshift+0x1c>
 800653e:	2300      	movs	r3, #0
 8006540:	f100 0114 	add.w	r1, r0, #20
 8006544:	f100 0210 	add.w	r2, r0, #16
 8006548:	4618      	mov	r0, r3
 800654a:	4553      	cmp	r3, sl
 800654c:	db33      	blt.n	80065b6 <__lshift+0xb6>
 800654e:	6920      	ldr	r0, [r4, #16]
 8006550:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006554:	f104 0314 	add.w	r3, r4, #20
 8006558:	f019 091f 	ands.w	r9, r9, #31
 800655c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006560:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006564:	d02b      	beq.n	80065be <__lshift+0xbe>
 8006566:	468a      	mov	sl, r1
 8006568:	2200      	movs	r2, #0
 800656a:	f1c9 0e20 	rsb	lr, r9, #32
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	fa00 f009 	lsl.w	r0, r0, r9
 8006574:	4302      	orrs	r2, r0
 8006576:	f84a 2b04 	str.w	r2, [sl], #4
 800657a:	f853 2b04 	ldr.w	r2, [r3], #4
 800657e:	459c      	cmp	ip, r3
 8006580:	fa22 f20e 	lsr.w	r2, r2, lr
 8006584:	d8f3      	bhi.n	800656e <__lshift+0x6e>
 8006586:	ebac 0304 	sub.w	r3, ip, r4
 800658a:	3b15      	subs	r3, #21
 800658c:	f023 0303 	bic.w	r3, r3, #3
 8006590:	3304      	adds	r3, #4
 8006592:	f104 0015 	add.w	r0, r4, #21
 8006596:	4584      	cmp	ip, r0
 8006598:	bf38      	it	cc
 800659a:	2304      	movcc	r3, #4
 800659c:	50ca      	str	r2, [r1, r3]
 800659e:	b10a      	cbz	r2, 80065a4 <__lshift+0xa4>
 80065a0:	f108 0602 	add.w	r6, r8, #2
 80065a4:	3e01      	subs	r6, #1
 80065a6:	4638      	mov	r0, r7
 80065a8:	4621      	mov	r1, r4
 80065aa:	612e      	str	r6, [r5, #16]
 80065ac:	f7ff fdda 	bl	8006164 <_Bfree>
 80065b0:	4628      	mov	r0, r5
 80065b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80065ba:	3301      	adds	r3, #1
 80065bc:	e7c5      	b.n	800654a <__lshift+0x4a>
 80065be:	3904      	subs	r1, #4
 80065c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80065c4:	459c      	cmp	ip, r3
 80065c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80065ca:	d8f9      	bhi.n	80065c0 <__lshift+0xc0>
 80065cc:	e7ea      	b.n	80065a4 <__lshift+0xa4>
 80065ce:	bf00      	nop
 80065d0:	08007023 	.word	0x08007023
 80065d4:	08007094 	.word	0x08007094

080065d8 <__mcmp>:
 80065d8:	4603      	mov	r3, r0
 80065da:	690a      	ldr	r2, [r1, #16]
 80065dc:	6900      	ldr	r0, [r0, #16]
 80065de:	b530      	push	{r4, r5, lr}
 80065e0:	1a80      	subs	r0, r0, r2
 80065e2:	d10d      	bne.n	8006600 <__mcmp+0x28>
 80065e4:	3314      	adds	r3, #20
 80065e6:	3114      	adds	r1, #20
 80065e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80065ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80065f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80065f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80065f8:	4295      	cmp	r5, r2
 80065fa:	d002      	beq.n	8006602 <__mcmp+0x2a>
 80065fc:	d304      	bcc.n	8006608 <__mcmp+0x30>
 80065fe:	2001      	movs	r0, #1
 8006600:	bd30      	pop	{r4, r5, pc}
 8006602:	42a3      	cmp	r3, r4
 8006604:	d3f4      	bcc.n	80065f0 <__mcmp+0x18>
 8006606:	e7fb      	b.n	8006600 <__mcmp+0x28>
 8006608:	f04f 30ff 	mov.w	r0, #4294967295
 800660c:	e7f8      	b.n	8006600 <__mcmp+0x28>
	...

08006610 <__mdiff>:
 8006610:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006614:	460c      	mov	r4, r1
 8006616:	4606      	mov	r6, r0
 8006618:	4611      	mov	r1, r2
 800661a:	4620      	mov	r0, r4
 800661c:	4692      	mov	sl, r2
 800661e:	f7ff ffdb 	bl	80065d8 <__mcmp>
 8006622:	1e05      	subs	r5, r0, #0
 8006624:	d111      	bne.n	800664a <__mdiff+0x3a>
 8006626:	4629      	mov	r1, r5
 8006628:	4630      	mov	r0, r6
 800662a:	f7ff fd5b 	bl	80060e4 <_Balloc>
 800662e:	4602      	mov	r2, r0
 8006630:	b928      	cbnz	r0, 800663e <__mdiff+0x2e>
 8006632:	f240 2132 	movw	r1, #562	; 0x232
 8006636:	4b3c      	ldr	r3, [pc, #240]	; (8006728 <__mdiff+0x118>)
 8006638:	483c      	ldr	r0, [pc, #240]	; (800672c <__mdiff+0x11c>)
 800663a:	f000 fb47 	bl	8006ccc <__assert_func>
 800663e:	2301      	movs	r3, #1
 8006640:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006644:	4610      	mov	r0, r2
 8006646:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664a:	bfa4      	itt	ge
 800664c:	4653      	movge	r3, sl
 800664e:	46a2      	movge	sl, r4
 8006650:	4630      	mov	r0, r6
 8006652:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006656:	bfa6      	itte	ge
 8006658:	461c      	movge	r4, r3
 800665a:	2500      	movge	r5, #0
 800665c:	2501      	movlt	r5, #1
 800665e:	f7ff fd41 	bl	80060e4 <_Balloc>
 8006662:	4602      	mov	r2, r0
 8006664:	b918      	cbnz	r0, 800666e <__mdiff+0x5e>
 8006666:	f44f 7110 	mov.w	r1, #576	; 0x240
 800666a:	4b2f      	ldr	r3, [pc, #188]	; (8006728 <__mdiff+0x118>)
 800666c:	e7e4      	b.n	8006638 <__mdiff+0x28>
 800666e:	f100 0814 	add.w	r8, r0, #20
 8006672:	f8da 7010 	ldr.w	r7, [sl, #16]
 8006676:	60c5      	str	r5, [r0, #12]
 8006678:	f04f 0c00 	mov.w	ip, #0
 800667c:	f10a 0514 	add.w	r5, sl, #20
 8006680:	f10a 0010 	add.w	r0, sl, #16
 8006684:	46c2      	mov	sl, r8
 8006686:	6926      	ldr	r6, [r4, #16]
 8006688:	f104 0914 	add.w	r9, r4, #20
 800668c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8006690:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006694:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8006698:	f859 3b04 	ldr.w	r3, [r9], #4
 800669c:	fa1f f18b 	uxth.w	r1, fp
 80066a0:	4461      	add	r1, ip
 80066a2:	fa1f fc83 	uxth.w	ip, r3
 80066a6:	0c1b      	lsrs	r3, r3, #16
 80066a8:	eba1 010c 	sub.w	r1, r1, ip
 80066ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80066b0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80066b4:	b289      	uxth	r1, r1
 80066b6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80066ba:	454e      	cmp	r6, r9
 80066bc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80066c0:	f84a 3b04 	str.w	r3, [sl], #4
 80066c4:	d8e6      	bhi.n	8006694 <__mdiff+0x84>
 80066c6:	1b33      	subs	r3, r6, r4
 80066c8:	3b15      	subs	r3, #21
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	3415      	adds	r4, #21
 80066d0:	3304      	adds	r3, #4
 80066d2:	42a6      	cmp	r6, r4
 80066d4:	bf38      	it	cc
 80066d6:	2304      	movcc	r3, #4
 80066d8:	441d      	add	r5, r3
 80066da:	4443      	add	r3, r8
 80066dc:	461e      	mov	r6, r3
 80066de:	462c      	mov	r4, r5
 80066e0:	4574      	cmp	r4, lr
 80066e2:	d30e      	bcc.n	8006702 <__mdiff+0xf2>
 80066e4:	f10e 0103 	add.w	r1, lr, #3
 80066e8:	1b49      	subs	r1, r1, r5
 80066ea:	f021 0103 	bic.w	r1, r1, #3
 80066ee:	3d03      	subs	r5, #3
 80066f0:	45ae      	cmp	lr, r5
 80066f2:	bf38      	it	cc
 80066f4:	2100      	movcc	r1, #0
 80066f6:	4419      	add	r1, r3
 80066f8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80066fc:	b18b      	cbz	r3, 8006722 <__mdiff+0x112>
 80066fe:	6117      	str	r7, [r2, #16]
 8006700:	e7a0      	b.n	8006644 <__mdiff+0x34>
 8006702:	f854 8b04 	ldr.w	r8, [r4], #4
 8006706:	fa1f f188 	uxth.w	r1, r8
 800670a:	4461      	add	r1, ip
 800670c:	1408      	asrs	r0, r1, #16
 800670e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8006712:	b289      	uxth	r1, r1
 8006714:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006718:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800671c:	f846 1b04 	str.w	r1, [r6], #4
 8006720:	e7de      	b.n	80066e0 <__mdiff+0xd0>
 8006722:	3f01      	subs	r7, #1
 8006724:	e7e8      	b.n	80066f8 <__mdiff+0xe8>
 8006726:	bf00      	nop
 8006728:	08007023 	.word	0x08007023
 800672c:	08007094 	.word	0x08007094

08006730 <__d2b>:
 8006730:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006734:	2101      	movs	r1, #1
 8006736:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800673a:	4690      	mov	r8, r2
 800673c:	461d      	mov	r5, r3
 800673e:	f7ff fcd1 	bl	80060e4 <_Balloc>
 8006742:	4604      	mov	r4, r0
 8006744:	b930      	cbnz	r0, 8006754 <__d2b+0x24>
 8006746:	4602      	mov	r2, r0
 8006748:	f240 310a 	movw	r1, #778	; 0x30a
 800674c:	4b24      	ldr	r3, [pc, #144]	; (80067e0 <__d2b+0xb0>)
 800674e:	4825      	ldr	r0, [pc, #148]	; (80067e4 <__d2b+0xb4>)
 8006750:	f000 fabc 	bl	8006ccc <__assert_func>
 8006754:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006758:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800675c:	bb2d      	cbnz	r5, 80067aa <__d2b+0x7a>
 800675e:	9301      	str	r3, [sp, #4]
 8006760:	f1b8 0300 	subs.w	r3, r8, #0
 8006764:	d026      	beq.n	80067b4 <__d2b+0x84>
 8006766:	4668      	mov	r0, sp
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	f7ff fd87 	bl	800627c <__lo0bits>
 800676e:	9900      	ldr	r1, [sp, #0]
 8006770:	b1f0      	cbz	r0, 80067b0 <__d2b+0x80>
 8006772:	9a01      	ldr	r2, [sp, #4]
 8006774:	f1c0 0320 	rsb	r3, r0, #32
 8006778:	fa02 f303 	lsl.w	r3, r2, r3
 800677c:	430b      	orrs	r3, r1
 800677e:	40c2      	lsrs	r2, r0
 8006780:	6163      	str	r3, [r4, #20]
 8006782:	9201      	str	r2, [sp, #4]
 8006784:	9b01      	ldr	r3, [sp, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	bf14      	ite	ne
 800678a:	2102      	movne	r1, #2
 800678c:	2101      	moveq	r1, #1
 800678e:	61a3      	str	r3, [r4, #24]
 8006790:	6121      	str	r1, [r4, #16]
 8006792:	b1c5      	cbz	r5, 80067c6 <__d2b+0x96>
 8006794:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006798:	4405      	add	r5, r0
 800679a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800679e:	603d      	str	r5, [r7, #0]
 80067a0:	6030      	str	r0, [r6, #0]
 80067a2:	4620      	mov	r0, r4
 80067a4:	b002      	add	sp, #8
 80067a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067ae:	e7d6      	b.n	800675e <__d2b+0x2e>
 80067b0:	6161      	str	r1, [r4, #20]
 80067b2:	e7e7      	b.n	8006784 <__d2b+0x54>
 80067b4:	a801      	add	r0, sp, #4
 80067b6:	f7ff fd61 	bl	800627c <__lo0bits>
 80067ba:	2101      	movs	r1, #1
 80067bc:	9b01      	ldr	r3, [sp, #4]
 80067be:	6121      	str	r1, [r4, #16]
 80067c0:	6163      	str	r3, [r4, #20]
 80067c2:	3020      	adds	r0, #32
 80067c4:	e7e5      	b.n	8006792 <__d2b+0x62>
 80067c6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80067ca:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80067ce:	6038      	str	r0, [r7, #0]
 80067d0:	6918      	ldr	r0, [r3, #16]
 80067d2:	f7ff fd33 	bl	800623c <__hi0bits>
 80067d6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80067da:	6031      	str	r1, [r6, #0]
 80067dc:	e7e1      	b.n	80067a2 <__d2b+0x72>
 80067de:	bf00      	nop
 80067e0:	08007023 	.word	0x08007023
 80067e4:	08007094 	.word	0x08007094

080067e8 <_calloc_r>:
 80067e8:	b538      	push	{r3, r4, r5, lr}
 80067ea:	fb02 f501 	mul.w	r5, r2, r1
 80067ee:	4629      	mov	r1, r5
 80067f0:	f000 f854 	bl	800689c <_malloc_r>
 80067f4:	4604      	mov	r4, r0
 80067f6:	b118      	cbz	r0, 8006800 <_calloc_r+0x18>
 80067f8:	462a      	mov	r2, r5
 80067fa:	2100      	movs	r1, #0
 80067fc:	f7fd fdf8 	bl	80043f0 <memset>
 8006800:	4620      	mov	r0, r4
 8006802:	bd38      	pop	{r3, r4, r5, pc}

08006804 <_free_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4605      	mov	r5, r0
 8006808:	2900      	cmp	r1, #0
 800680a:	d043      	beq.n	8006894 <_free_r+0x90>
 800680c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006810:	1f0c      	subs	r4, r1, #4
 8006812:	2b00      	cmp	r3, #0
 8006814:	bfb8      	it	lt
 8006816:	18e4      	addlt	r4, r4, r3
 8006818:	f000 fade 	bl	8006dd8 <__malloc_lock>
 800681c:	4a1e      	ldr	r2, [pc, #120]	; (8006898 <_free_r+0x94>)
 800681e:	6813      	ldr	r3, [r2, #0]
 8006820:	4610      	mov	r0, r2
 8006822:	b933      	cbnz	r3, 8006832 <_free_r+0x2e>
 8006824:	6063      	str	r3, [r4, #4]
 8006826:	6014      	str	r4, [r2, #0]
 8006828:	4628      	mov	r0, r5
 800682a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800682e:	f000 bad9 	b.w	8006de4 <__malloc_unlock>
 8006832:	42a3      	cmp	r3, r4
 8006834:	d90a      	bls.n	800684c <_free_r+0x48>
 8006836:	6821      	ldr	r1, [r4, #0]
 8006838:	1862      	adds	r2, r4, r1
 800683a:	4293      	cmp	r3, r2
 800683c:	bf01      	itttt	eq
 800683e:	681a      	ldreq	r2, [r3, #0]
 8006840:	685b      	ldreq	r3, [r3, #4]
 8006842:	1852      	addeq	r2, r2, r1
 8006844:	6022      	streq	r2, [r4, #0]
 8006846:	6063      	str	r3, [r4, #4]
 8006848:	6004      	str	r4, [r0, #0]
 800684a:	e7ed      	b.n	8006828 <_free_r+0x24>
 800684c:	461a      	mov	r2, r3
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	b10b      	cbz	r3, 8006856 <_free_r+0x52>
 8006852:	42a3      	cmp	r3, r4
 8006854:	d9fa      	bls.n	800684c <_free_r+0x48>
 8006856:	6811      	ldr	r1, [r2, #0]
 8006858:	1850      	adds	r0, r2, r1
 800685a:	42a0      	cmp	r0, r4
 800685c:	d10b      	bne.n	8006876 <_free_r+0x72>
 800685e:	6820      	ldr	r0, [r4, #0]
 8006860:	4401      	add	r1, r0
 8006862:	1850      	adds	r0, r2, r1
 8006864:	4283      	cmp	r3, r0
 8006866:	6011      	str	r1, [r2, #0]
 8006868:	d1de      	bne.n	8006828 <_free_r+0x24>
 800686a:	6818      	ldr	r0, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	4401      	add	r1, r0
 8006870:	6011      	str	r1, [r2, #0]
 8006872:	6053      	str	r3, [r2, #4]
 8006874:	e7d8      	b.n	8006828 <_free_r+0x24>
 8006876:	d902      	bls.n	800687e <_free_r+0x7a>
 8006878:	230c      	movs	r3, #12
 800687a:	602b      	str	r3, [r5, #0]
 800687c:	e7d4      	b.n	8006828 <_free_r+0x24>
 800687e:	6820      	ldr	r0, [r4, #0]
 8006880:	1821      	adds	r1, r4, r0
 8006882:	428b      	cmp	r3, r1
 8006884:	bf01      	itttt	eq
 8006886:	6819      	ldreq	r1, [r3, #0]
 8006888:	685b      	ldreq	r3, [r3, #4]
 800688a:	1809      	addeq	r1, r1, r0
 800688c:	6021      	streq	r1, [r4, #0]
 800688e:	6063      	str	r3, [r4, #4]
 8006890:	6054      	str	r4, [r2, #4]
 8006892:	e7c9      	b.n	8006828 <_free_r+0x24>
 8006894:	bd38      	pop	{r3, r4, r5, pc}
 8006896:	bf00      	nop
 8006898:	20000204 	.word	0x20000204

0800689c <_malloc_r>:
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689e:	1ccd      	adds	r5, r1, #3
 80068a0:	f025 0503 	bic.w	r5, r5, #3
 80068a4:	3508      	adds	r5, #8
 80068a6:	2d0c      	cmp	r5, #12
 80068a8:	bf38      	it	cc
 80068aa:	250c      	movcc	r5, #12
 80068ac:	2d00      	cmp	r5, #0
 80068ae:	4606      	mov	r6, r0
 80068b0:	db01      	blt.n	80068b6 <_malloc_r+0x1a>
 80068b2:	42a9      	cmp	r1, r5
 80068b4:	d903      	bls.n	80068be <_malloc_r+0x22>
 80068b6:	230c      	movs	r3, #12
 80068b8:	6033      	str	r3, [r6, #0]
 80068ba:	2000      	movs	r0, #0
 80068bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068be:	f000 fa8b 	bl	8006dd8 <__malloc_lock>
 80068c2:	4921      	ldr	r1, [pc, #132]	; (8006948 <_malloc_r+0xac>)
 80068c4:	680a      	ldr	r2, [r1, #0]
 80068c6:	4614      	mov	r4, r2
 80068c8:	b99c      	cbnz	r4, 80068f2 <_malloc_r+0x56>
 80068ca:	4f20      	ldr	r7, [pc, #128]	; (800694c <_malloc_r+0xb0>)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	b923      	cbnz	r3, 80068da <_malloc_r+0x3e>
 80068d0:	4621      	mov	r1, r4
 80068d2:	4630      	mov	r0, r6
 80068d4:	f000 f994 	bl	8006c00 <_sbrk_r>
 80068d8:	6038      	str	r0, [r7, #0]
 80068da:	4629      	mov	r1, r5
 80068dc:	4630      	mov	r0, r6
 80068de:	f000 f98f 	bl	8006c00 <_sbrk_r>
 80068e2:	1c43      	adds	r3, r0, #1
 80068e4:	d123      	bne.n	800692e <_malloc_r+0x92>
 80068e6:	230c      	movs	r3, #12
 80068e8:	4630      	mov	r0, r6
 80068ea:	6033      	str	r3, [r6, #0]
 80068ec:	f000 fa7a 	bl	8006de4 <__malloc_unlock>
 80068f0:	e7e3      	b.n	80068ba <_malloc_r+0x1e>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	1b5b      	subs	r3, r3, r5
 80068f6:	d417      	bmi.n	8006928 <_malloc_r+0x8c>
 80068f8:	2b0b      	cmp	r3, #11
 80068fa:	d903      	bls.n	8006904 <_malloc_r+0x68>
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	441c      	add	r4, r3
 8006900:	6025      	str	r5, [r4, #0]
 8006902:	e004      	b.n	800690e <_malloc_r+0x72>
 8006904:	6863      	ldr	r3, [r4, #4]
 8006906:	42a2      	cmp	r2, r4
 8006908:	bf0c      	ite	eq
 800690a:	600b      	streq	r3, [r1, #0]
 800690c:	6053      	strne	r3, [r2, #4]
 800690e:	4630      	mov	r0, r6
 8006910:	f000 fa68 	bl	8006de4 <__malloc_unlock>
 8006914:	f104 000b 	add.w	r0, r4, #11
 8006918:	1d23      	adds	r3, r4, #4
 800691a:	f020 0007 	bic.w	r0, r0, #7
 800691e:	1ac2      	subs	r2, r0, r3
 8006920:	d0cc      	beq.n	80068bc <_malloc_r+0x20>
 8006922:	1a1b      	subs	r3, r3, r0
 8006924:	50a3      	str	r3, [r4, r2]
 8006926:	e7c9      	b.n	80068bc <_malloc_r+0x20>
 8006928:	4622      	mov	r2, r4
 800692a:	6864      	ldr	r4, [r4, #4]
 800692c:	e7cc      	b.n	80068c8 <_malloc_r+0x2c>
 800692e:	1cc4      	adds	r4, r0, #3
 8006930:	f024 0403 	bic.w	r4, r4, #3
 8006934:	42a0      	cmp	r0, r4
 8006936:	d0e3      	beq.n	8006900 <_malloc_r+0x64>
 8006938:	1a21      	subs	r1, r4, r0
 800693a:	4630      	mov	r0, r6
 800693c:	f000 f960 	bl	8006c00 <_sbrk_r>
 8006940:	3001      	adds	r0, #1
 8006942:	d1dd      	bne.n	8006900 <_malloc_r+0x64>
 8006944:	e7cf      	b.n	80068e6 <_malloc_r+0x4a>
 8006946:	bf00      	nop
 8006948:	20000204 	.word	0x20000204
 800694c:	20000208 	.word	0x20000208

08006950 <__sfputc_r>:
 8006950:	6893      	ldr	r3, [r2, #8]
 8006952:	b410      	push	{r4}
 8006954:	3b01      	subs	r3, #1
 8006956:	2b00      	cmp	r3, #0
 8006958:	6093      	str	r3, [r2, #8]
 800695a:	da07      	bge.n	800696c <__sfputc_r+0x1c>
 800695c:	6994      	ldr	r4, [r2, #24]
 800695e:	42a3      	cmp	r3, r4
 8006960:	db01      	blt.n	8006966 <__sfputc_r+0x16>
 8006962:	290a      	cmp	r1, #10
 8006964:	d102      	bne.n	800696c <__sfputc_r+0x1c>
 8006966:	bc10      	pop	{r4}
 8006968:	f7fe ba38 	b.w	8004ddc <__swbuf_r>
 800696c:	6813      	ldr	r3, [r2, #0]
 800696e:	1c58      	adds	r0, r3, #1
 8006970:	6010      	str	r0, [r2, #0]
 8006972:	7019      	strb	r1, [r3, #0]
 8006974:	4608      	mov	r0, r1
 8006976:	bc10      	pop	{r4}
 8006978:	4770      	bx	lr

0800697a <__sfputs_r>:
 800697a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697c:	4606      	mov	r6, r0
 800697e:	460f      	mov	r7, r1
 8006980:	4614      	mov	r4, r2
 8006982:	18d5      	adds	r5, r2, r3
 8006984:	42ac      	cmp	r4, r5
 8006986:	d101      	bne.n	800698c <__sfputs_r+0x12>
 8006988:	2000      	movs	r0, #0
 800698a:	e007      	b.n	800699c <__sfputs_r+0x22>
 800698c:	463a      	mov	r2, r7
 800698e:	4630      	mov	r0, r6
 8006990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006994:	f7ff ffdc 	bl	8006950 <__sfputc_r>
 8006998:	1c43      	adds	r3, r0, #1
 800699a:	d1f3      	bne.n	8006984 <__sfputs_r+0xa>
 800699c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069a0 <_vfiprintf_r>:
 80069a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a4:	460d      	mov	r5, r1
 80069a6:	4614      	mov	r4, r2
 80069a8:	4698      	mov	r8, r3
 80069aa:	4606      	mov	r6, r0
 80069ac:	b09d      	sub	sp, #116	; 0x74
 80069ae:	b118      	cbz	r0, 80069b8 <_vfiprintf_r+0x18>
 80069b0:	6983      	ldr	r3, [r0, #24]
 80069b2:	b90b      	cbnz	r3, 80069b8 <_vfiprintf_r+0x18>
 80069b4:	f7ff fa68 	bl	8005e88 <__sinit>
 80069b8:	4b89      	ldr	r3, [pc, #548]	; (8006be0 <_vfiprintf_r+0x240>)
 80069ba:	429d      	cmp	r5, r3
 80069bc:	d11b      	bne.n	80069f6 <_vfiprintf_r+0x56>
 80069be:	6875      	ldr	r5, [r6, #4]
 80069c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069c2:	07d9      	lsls	r1, r3, #31
 80069c4:	d405      	bmi.n	80069d2 <_vfiprintf_r+0x32>
 80069c6:	89ab      	ldrh	r3, [r5, #12]
 80069c8:	059a      	lsls	r2, r3, #22
 80069ca:	d402      	bmi.n	80069d2 <_vfiprintf_r+0x32>
 80069cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069ce:	f7ff fafe 	bl	8005fce <__retarget_lock_acquire_recursive>
 80069d2:	89ab      	ldrh	r3, [r5, #12]
 80069d4:	071b      	lsls	r3, r3, #28
 80069d6:	d501      	bpl.n	80069dc <_vfiprintf_r+0x3c>
 80069d8:	692b      	ldr	r3, [r5, #16]
 80069da:	b9eb      	cbnz	r3, 8006a18 <_vfiprintf_r+0x78>
 80069dc:	4629      	mov	r1, r5
 80069de:	4630      	mov	r0, r6
 80069e0:	f7fe fa4e 	bl	8004e80 <__swsetup_r>
 80069e4:	b1c0      	cbz	r0, 8006a18 <_vfiprintf_r+0x78>
 80069e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069e8:	07dc      	lsls	r4, r3, #31
 80069ea:	d50e      	bpl.n	8006a0a <_vfiprintf_r+0x6a>
 80069ec:	f04f 30ff 	mov.w	r0, #4294967295
 80069f0:	b01d      	add	sp, #116	; 0x74
 80069f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f6:	4b7b      	ldr	r3, [pc, #492]	; (8006be4 <_vfiprintf_r+0x244>)
 80069f8:	429d      	cmp	r5, r3
 80069fa:	d101      	bne.n	8006a00 <_vfiprintf_r+0x60>
 80069fc:	68b5      	ldr	r5, [r6, #8]
 80069fe:	e7df      	b.n	80069c0 <_vfiprintf_r+0x20>
 8006a00:	4b79      	ldr	r3, [pc, #484]	; (8006be8 <_vfiprintf_r+0x248>)
 8006a02:	429d      	cmp	r5, r3
 8006a04:	bf08      	it	eq
 8006a06:	68f5      	ldreq	r5, [r6, #12]
 8006a08:	e7da      	b.n	80069c0 <_vfiprintf_r+0x20>
 8006a0a:	89ab      	ldrh	r3, [r5, #12]
 8006a0c:	0598      	lsls	r0, r3, #22
 8006a0e:	d4ed      	bmi.n	80069ec <_vfiprintf_r+0x4c>
 8006a10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a12:	f7ff fadd 	bl	8005fd0 <__retarget_lock_release_recursive>
 8006a16:	e7e9      	b.n	80069ec <_vfiprintf_r+0x4c>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a1c:	2320      	movs	r3, #32
 8006a1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a22:	2330      	movs	r3, #48	; 0x30
 8006a24:	f04f 0901 	mov.w	r9, #1
 8006a28:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a2c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006bec <_vfiprintf_r+0x24c>
 8006a30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a34:	4623      	mov	r3, r4
 8006a36:	469a      	mov	sl, r3
 8006a38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a3c:	b10a      	cbz	r2, 8006a42 <_vfiprintf_r+0xa2>
 8006a3e:	2a25      	cmp	r2, #37	; 0x25
 8006a40:	d1f9      	bne.n	8006a36 <_vfiprintf_r+0x96>
 8006a42:	ebba 0b04 	subs.w	fp, sl, r4
 8006a46:	d00b      	beq.n	8006a60 <_vfiprintf_r+0xc0>
 8006a48:	465b      	mov	r3, fp
 8006a4a:	4622      	mov	r2, r4
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f7ff ff93 	bl	800697a <__sfputs_r>
 8006a54:	3001      	adds	r0, #1
 8006a56:	f000 80aa 	beq.w	8006bae <_vfiprintf_r+0x20e>
 8006a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a5c:	445a      	add	r2, fp
 8006a5e:	9209      	str	r2, [sp, #36]	; 0x24
 8006a60:	f89a 3000 	ldrb.w	r3, [sl]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 80a2 	beq.w	8006bae <_vfiprintf_r+0x20e>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a74:	f10a 0a01 	add.w	sl, sl, #1
 8006a78:	9304      	str	r3, [sp, #16]
 8006a7a:	9307      	str	r3, [sp, #28]
 8006a7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a80:	931a      	str	r3, [sp, #104]	; 0x68
 8006a82:	4654      	mov	r4, sl
 8006a84:	2205      	movs	r2, #5
 8006a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a8a:	4858      	ldr	r0, [pc, #352]	; (8006bec <_vfiprintf_r+0x24c>)
 8006a8c:	f7ff fb0e 	bl	80060ac <memchr>
 8006a90:	9a04      	ldr	r2, [sp, #16]
 8006a92:	b9d8      	cbnz	r0, 8006acc <_vfiprintf_r+0x12c>
 8006a94:	06d1      	lsls	r1, r2, #27
 8006a96:	bf44      	itt	mi
 8006a98:	2320      	movmi	r3, #32
 8006a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a9e:	0713      	lsls	r3, r2, #28
 8006aa0:	bf44      	itt	mi
 8006aa2:	232b      	movmi	r3, #43	; 0x2b
 8006aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8006aac:	2b2a      	cmp	r3, #42	; 0x2a
 8006aae:	d015      	beq.n	8006adc <_vfiprintf_r+0x13c>
 8006ab0:	4654      	mov	r4, sl
 8006ab2:	2000      	movs	r0, #0
 8006ab4:	f04f 0c0a 	mov.w	ip, #10
 8006ab8:	9a07      	ldr	r2, [sp, #28]
 8006aba:	4621      	mov	r1, r4
 8006abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ac0:	3b30      	subs	r3, #48	; 0x30
 8006ac2:	2b09      	cmp	r3, #9
 8006ac4:	d94e      	bls.n	8006b64 <_vfiprintf_r+0x1c4>
 8006ac6:	b1b0      	cbz	r0, 8006af6 <_vfiprintf_r+0x156>
 8006ac8:	9207      	str	r2, [sp, #28]
 8006aca:	e014      	b.n	8006af6 <_vfiprintf_r+0x156>
 8006acc:	eba0 0308 	sub.w	r3, r0, r8
 8006ad0:	fa09 f303 	lsl.w	r3, r9, r3
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	46a2      	mov	sl, r4
 8006ad8:	9304      	str	r3, [sp, #16]
 8006ada:	e7d2      	b.n	8006a82 <_vfiprintf_r+0xe2>
 8006adc:	9b03      	ldr	r3, [sp, #12]
 8006ade:	1d19      	adds	r1, r3, #4
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	9103      	str	r1, [sp, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	bfbb      	ittet	lt
 8006ae8:	425b      	neglt	r3, r3
 8006aea:	f042 0202 	orrlt.w	r2, r2, #2
 8006aee:	9307      	strge	r3, [sp, #28]
 8006af0:	9307      	strlt	r3, [sp, #28]
 8006af2:	bfb8      	it	lt
 8006af4:	9204      	strlt	r2, [sp, #16]
 8006af6:	7823      	ldrb	r3, [r4, #0]
 8006af8:	2b2e      	cmp	r3, #46	; 0x2e
 8006afa:	d10c      	bne.n	8006b16 <_vfiprintf_r+0x176>
 8006afc:	7863      	ldrb	r3, [r4, #1]
 8006afe:	2b2a      	cmp	r3, #42	; 0x2a
 8006b00:	d135      	bne.n	8006b6e <_vfiprintf_r+0x1ce>
 8006b02:	9b03      	ldr	r3, [sp, #12]
 8006b04:	3402      	adds	r4, #2
 8006b06:	1d1a      	adds	r2, r3, #4
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	9203      	str	r2, [sp, #12]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	bfb8      	it	lt
 8006b10:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b14:	9305      	str	r3, [sp, #20]
 8006b16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006bfc <_vfiprintf_r+0x25c>
 8006b1a:	2203      	movs	r2, #3
 8006b1c:	4650      	mov	r0, sl
 8006b1e:	7821      	ldrb	r1, [r4, #0]
 8006b20:	f7ff fac4 	bl	80060ac <memchr>
 8006b24:	b140      	cbz	r0, 8006b38 <_vfiprintf_r+0x198>
 8006b26:	2340      	movs	r3, #64	; 0x40
 8006b28:	eba0 000a 	sub.w	r0, r0, sl
 8006b2c:	fa03 f000 	lsl.w	r0, r3, r0
 8006b30:	9b04      	ldr	r3, [sp, #16]
 8006b32:	3401      	adds	r4, #1
 8006b34:	4303      	orrs	r3, r0
 8006b36:	9304      	str	r3, [sp, #16]
 8006b38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b3c:	2206      	movs	r2, #6
 8006b3e:	482c      	ldr	r0, [pc, #176]	; (8006bf0 <_vfiprintf_r+0x250>)
 8006b40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b44:	f7ff fab2 	bl	80060ac <memchr>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d03f      	beq.n	8006bcc <_vfiprintf_r+0x22c>
 8006b4c:	4b29      	ldr	r3, [pc, #164]	; (8006bf4 <_vfiprintf_r+0x254>)
 8006b4e:	bb1b      	cbnz	r3, 8006b98 <_vfiprintf_r+0x1f8>
 8006b50:	9b03      	ldr	r3, [sp, #12]
 8006b52:	3307      	adds	r3, #7
 8006b54:	f023 0307 	bic.w	r3, r3, #7
 8006b58:	3308      	adds	r3, #8
 8006b5a:	9303      	str	r3, [sp, #12]
 8006b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b5e:	443b      	add	r3, r7
 8006b60:	9309      	str	r3, [sp, #36]	; 0x24
 8006b62:	e767      	b.n	8006a34 <_vfiprintf_r+0x94>
 8006b64:	460c      	mov	r4, r1
 8006b66:	2001      	movs	r0, #1
 8006b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b6c:	e7a5      	b.n	8006aba <_vfiprintf_r+0x11a>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f04f 0c0a 	mov.w	ip, #10
 8006b74:	4619      	mov	r1, r3
 8006b76:	3401      	adds	r4, #1
 8006b78:	9305      	str	r3, [sp, #20]
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b80:	3a30      	subs	r2, #48	; 0x30
 8006b82:	2a09      	cmp	r2, #9
 8006b84:	d903      	bls.n	8006b8e <_vfiprintf_r+0x1ee>
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0c5      	beq.n	8006b16 <_vfiprintf_r+0x176>
 8006b8a:	9105      	str	r1, [sp, #20]
 8006b8c:	e7c3      	b.n	8006b16 <_vfiprintf_r+0x176>
 8006b8e:	4604      	mov	r4, r0
 8006b90:	2301      	movs	r3, #1
 8006b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b96:	e7f0      	b.n	8006b7a <_vfiprintf_r+0x1da>
 8006b98:	ab03      	add	r3, sp, #12
 8006b9a:	9300      	str	r3, [sp, #0]
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <_vfiprintf_r+0x258>)
 8006ba2:	a904      	add	r1, sp, #16
 8006ba4:	f7fd fcca 	bl	800453c <_printf_float>
 8006ba8:	4607      	mov	r7, r0
 8006baa:	1c78      	adds	r0, r7, #1
 8006bac:	d1d6      	bne.n	8006b5c <_vfiprintf_r+0x1bc>
 8006bae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bb0:	07d9      	lsls	r1, r3, #31
 8006bb2:	d405      	bmi.n	8006bc0 <_vfiprintf_r+0x220>
 8006bb4:	89ab      	ldrh	r3, [r5, #12]
 8006bb6:	059a      	lsls	r2, r3, #22
 8006bb8:	d402      	bmi.n	8006bc0 <_vfiprintf_r+0x220>
 8006bba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bbc:	f7ff fa08 	bl	8005fd0 <__retarget_lock_release_recursive>
 8006bc0:	89ab      	ldrh	r3, [r5, #12]
 8006bc2:	065b      	lsls	r3, r3, #25
 8006bc4:	f53f af12 	bmi.w	80069ec <_vfiprintf_r+0x4c>
 8006bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bca:	e711      	b.n	80069f0 <_vfiprintf_r+0x50>
 8006bcc:	ab03      	add	r3, sp, #12
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	462a      	mov	r2, r5
 8006bd2:	4630      	mov	r0, r6
 8006bd4:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <_vfiprintf_r+0x258>)
 8006bd6:	a904      	add	r1, sp, #16
 8006bd8:	f7fd ff4c 	bl	8004a74 <_printf_i>
 8006bdc:	e7e4      	b.n	8006ba8 <_vfiprintf_r+0x208>
 8006bde:	bf00      	nop
 8006be0:	08007054 	.word	0x08007054
 8006be4:	08007074 	.word	0x08007074
 8006be8:	08007034 	.word	0x08007034
 8006bec:	080071f4 	.word	0x080071f4
 8006bf0:	080071fe 	.word	0x080071fe
 8006bf4:	0800453d 	.word	0x0800453d
 8006bf8:	0800697b 	.word	0x0800697b
 8006bfc:	080071fa 	.word	0x080071fa

08006c00 <_sbrk_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	2300      	movs	r3, #0
 8006c04:	4d05      	ldr	r5, [pc, #20]	; (8006c1c <_sbrk_r+0x1c>)
 8006c06:	4604      	mov	r4, r0
 8006c08:	4608      	mov	r0, r1
 8006c0a:	602b      	str	r3, [r5, #0]
 8006c0c:	f7fa fd52 	bl	80016b4 <_sbrk>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d102      	bne.n	8006c1a <_sbrk_r+0x1a>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	b103      	cbz	r3, 8006c1a <_sbrk_r+0x1a>
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	20000404 	.word	0x20000404

08006c20 <__sread>:
 8006c20:	b510      	push	{r4, lr}
 8006c22:	460c      	mov	r4, r1
 8006c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c28:	f000 f8e2 	bl	8006df0 <_read_r>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	bfab      	itete	ge
 8006c30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c32:	89a3      	ldrhlt	r3, [r4, #12]
 8006c34:	181b      	addge	r3, r3, r0
 8006c36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c3a:	bfac      	ite	ge
 8006c3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c3e:	81a3      	strhlt	r3, [r4, #12]
 8006c40:	bd10      	pop	{r4, pc}

08006c42 <__swrite>:
 8006c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c46:	461f      	mov	r7, r3
 8006c48:	898b      	ldrh	r3, [r1, #12]
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	05db      	lsls	r3, r3, #23
 8006c4e:	460c      	mov	r4, r1
 8006c50:	4616      	mov	r6, r2
 8006c52:	d505      	bpl.n	8006c60 <__swrite+0x1e>
 8006c54:	2302      	movs	r3, #2
 8006c56:	2200      	movs	r2, #0
 8006c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c5c:	f000 f898 	bl	8006d90 <_lseek_r>
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	4632      	mov	r2, r6
 8006c64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c68:	81a3      	strh	r3, [r4, #12]
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	463b      	mov	r3, r7
 8006c6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c76:	f000 b817 	b.w	8006ca8 <_write_r>

08006c7a <__sseek>:
 8006c7a:	b510      	push	{r4, lr}
 8006c7c:	460c      	mov	r4, r1
 8006c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c82:	f000 f885 	bl	8006d90 <_lseek_r>
 8006c86:	1c43      	adds	r3, r0, #1
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	bf15      	itete	ne
 8006c8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c96:	81a3      	strheq	r3, [r4, #12]
 8006c98:	bf18      	it	ne
 8006c9a:	81a3      	strhne	r3, [r4, #12]
 8006c9c:	bd10      	pop	{r4, pc}

08006c9e <__sclose>:
 8006c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca2:	f000 b831 	b.w	8006d08 <_close_r>
	...

08006ca8 <_write_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	4604      	mov	r4, r0
 8006cac:	4608      	mov	r0, r1
 8006cae:	4611      	mov	r1, r2
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	4d05      	ldr	r5, [pc, #20]	; (8006cc8 <_write_r+0x20>)
 8006cb4:	602a      	str	r2, [r5, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f7fa fcb0 	bl	800161c <_write>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_write_r+0x1e>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_write_r+0x1e>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	20000404 	.word	0x20000404

08006ccc <__assert_func>:
 8006ccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cce:	4614      	mov	r4, r2
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <__assert_func+0x2c>)
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68d8      	ldr	r0, [r3, #12]
 8006cda:	b14c      	cbz	r4, 8006cf0 <__assert_func+0x24>
 8006cdc:	4b07      	ldr	r3, [pc, #28]	; (8006cfc <__assert_func+0x30>)
 8006cde:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ce2:	9100      	str	r1, [sp, #0]
 8006ce4:	462b      	mov	r3, r5
 8006ce6:	4906      	ldr	r1, [pc, #24]	; (8006d00 <__assert_func+0x34>)
 8006ce8:	f000 f81e 	bl	8006d28 <fiprintf>
 8006cec:	f000 f89f 	bl	8006e2e <abort>
 8006cf0:	4b04      	ldr	r3, [pc, #16]	; (8006d04 <__assert_func+0x38>)
 8006cf2:	461c      	mov	r4, r3
 8006cf4:	e7f3      	b.n	8006cde <__assert_func+0x12>
 8006cf6:	bf00      	nop
 8006cf8:	2000000c 	.word	0x2000000c
 8006cfc:	08007205 	.word	0x08007205
 8006d00:	08007212 	.word	0x08007212
 8006d04:	08007240 	.word	0x08007240

08006d08 <_close_r>:
 8006d08:	b538      	push	{r3, r4, r5, lr}
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	4d05      	ldr	r5, [pc, #20]	; (8006d24 <_close_r+0x1c>)
 8006d0e:	4604      	mov	r4, r0
 8006d10:	4608      	mov	r0, r1
 8006d12:	602b      	str	r3, [r5, #0]
 8006d14:	f7fa fc9e 	bl	8001654 <_close>
 8006d18:	1c43      	adds	r3, r0, #1
 8006d1a:	d102      	bne.n	8006d22 <_close_r+0x1a>
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	b103      	cbz	r3, 8006d22 <_close_r+0x1a>
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	bd38      	pop	{r3, r4, r5, pc}
 8006d24:	20000404 	.word	0x20000404

08006d28 <fiprintf>:
 8006d28:	b40e      	push	{r1, r2, r3}
 8006d2a:	b503      	push	{r0, r1, lr}
 8006d2c:	4601      	mov	r1, r0
 8006d2e:	ab03      	add	r3, sp, #12
 8006d30:	4805      	ldr	r0, [pc, #20]	; (8006d48 <fiprintf+0x20>)
 8006d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d36:	6800      	ldr	r0, [r0, #0]
 8006d38:	9301      	str	r3, [sp, #4]
 8006d3a:	f7ff fe31 	bl	80069a0 <_vfiprintf_r>
 8006d3e:	b002      	add	sp, #8
 8006d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d44:	b003      	add	sp, #12
 8006d46:	4770      	bx	lr
 8006d48:	2000000c 	.word	0x2000000c

08006d4c <_fstat_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	2300      	movs	r3, #0
 8006d50:	4d06      	ldr	r5, [pc, #24]	; (8006d6c <_fstat_r+0x20>)
 8006d52:	4604      	mov	r4, r0
 8006d54:	4608      	mov	r0, r1
 8006d56:	4611      	mov	r1, r2
 8006d58:	602b      	str	r3, [r5, #0]
 8006d5a:	f7fa fc86 	bl	800166a <_fstat>
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	d102      	bne.n	8006d68 <_fstat_r+0x1c>
 8006d62:	682b      	ldr	r3, [r5, #0]
 8006d64:	b103      	cbz	r3, 8006d68 <_fstat_r+0x1c>
 8006d66:	6023      	str	r3, [r4, #0]
 8006d68:	bd38      	pop	{r3, r4, r5, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000404 	.word	0x20000404

08006d70 <_isatty_r>:
 8006d70:	b538      	push	{r3, r4, r5, lr}
 8006d72:	2300      	movs	r3, #0
 8006d74:	4d05      	ldr	r5, [pc, #20]	; (8006d8c <_isatty_r+0x1c>)
 8006d76:	4604      	mov	r4, r0
 8006d78:	4608      	mov	r0, r1
 8006d7a:	602b      	str	r3, [r5, #0]
 8006d7c:	f7fa fc84 	bl	8001688 <_isatty>
 8006d80:	1c43      	adds	r3, r0, #1
 8006d82:	d102      	bne.n	8006d8a <_isatty_r+0x1a>
 8006d84:	682b      	ldr	r3, [r5, #0]
 8006d86:	b103      	cbz	r3, 8006d8a <_isatty_r+0x1a>
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	bd38      	pop	{r3, r4, r5, pc}
 8006d8c:	20000404 	.word	0x20000404

08006d90 <_lseek_r>:
 8006d90:	b538      	push	{r3, r4, r5, lr}
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	4611      	mov	r1, r2
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4d05      	ldr	r5, [pc, #20]	; (8006db0 <_lseek_r+0x20>)
 8006d9c:	602a      	str	r2, [r5, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f7fa fc7c 	bl	800169c <_lseek>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_lseek_r+0x1e>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_lseek_r+0x1e>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	20000404 	.word	0x20000404

08006db4 <__ascii_mbtowc>:
 8006db4:	b082      	sub	sp, #8
 8006db6:	b901      	cbnz	r1, 8006dba <__ascii_mbtowc+0x6>
 8006db8:	a901      	add	r1, sp, #4
 8006dba:	b142      	cbz	r2, 8006dce <__ascii_mbtowc+0x1a>
 8006dbc:	b14b      	cbz	r3, 8006dd2 <__ascii_mbtowc+0x1e>
 8006dbe:	7813      	ldrb	r3, [r2, #0]
 8006dc0:	600b      	str	r3, [r1, #0]
 8006dc2:	7812      	ldrb	r2, [r2, #0]
 8006dc4:	1e10      	subs	r0, r2, #0
 8006dc6:	bf18      	it	ne
 8006dc8:	2001      	movne	r0, #1
 8006dca:	b002      	add	sp, #8
 8006dcc:	4770      	bx	lr
 8006dce:	4610      	mov	r0, r2
 8006dd0:	e7fb      	b.n	8006dca <__ascii_mbtowc+0x16>
 8006dd2:	f06f 0001 	mvn.w	r0, #1
 8006dd6:	e7f8      	b.n	8006dca <__ascii_mbtowc+0x16>

08006dd8 <__malloc_lock>:
 8006dd8:	4801      	ldr	r0, [pc, #4]	; (8006de0 <__malloc_lock+0x8>)
 8006dda:	f7ff b8f8 	b.w	8005fce <__retarget_lock_acquire_recursive>
 8006dde:	bf00      	nop
 8006de0:	200003fc 	.word	0x200003fc

08006de4 <__malloc_unlock>:
 8006de4:	4801      	ldr	r0, [pc, #4]	; (8006dec <__malloc_unlock+0x8>)
 8006de6:	f7ff b8f3 	b.w	8005fd0 <__retarget_lock_release_recursive>
 8006dea:	bf00      	nop
 8006dec:	200003fc 	.word	0x200003fc

08006df0 <_read_r>:
 8006df0:	b538      	push	{r3, r4, r5, lr}
 8006df2:	4604      	mov	r4, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	4611      	mov	r1, r2
 8006df8:	2200      	movs	r2, #0
 8006dfa:	4d05      	ldr	r5, [pc, #20]	; (8006e10 <_read_r+0x20>)
 8006dfc:	602a      	str	r2, [r5, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f7fa fbef 	bl	80015e2 <_read>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d102      	bne.n	8006e0e <_read_r+0x1e>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	b103      	cbz	r3, 8006e0e <_read_r+0x1e>
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	bd38      	pop	{r3, r4, r5, pc}
 8006e10:	20000404 	.word	0x20000404

08006e14 <__ascii_wctomb>:
 8006e14:	4603      	mov	r3, r0
 8006e16:	4608      	mov	r0, r1
 8006e18:	b141      	cbz	r1, 8006e2c <__ascii_wctomb+0x18>
 8006e1a:	2aff      	cmp	r2, #255	; 0xff
 8006e1c:	d904      	bls.n	8006e28 <__ascii_wctomb+0x14>
 8006e1e:	228a      	movs	r2, #138	; 0x8a
 8006e20:	f04f 30ff 	mov.w	r0, #4294967295
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	4770      	bx	lr
 8006e28:	2001      	movs	r0, #1
 8006e2a:	700a      	strb	r2, [r1, #0]
 8006e2c:	4770      	bx	lr

08006e2e <abort>:
 8006e2e:	2006      	movs	r0, #6
 8006e30:	b508      	push	{r3, lr}
 8006e32:	f000 f82b 	bl	8006e8c <raise>
 8006e36:	2001      	movs	r0, #1
 8006e38:	f7fa fbc9 	bl	80015ce <_exit>

08006e3c <_raise_r>:
 8006e3c:	291f      	cmp	r1, #31
 8006e3e:	b538      	push	{r3, r4, r5, lr}
 8006e40:	4604      	mov	r4, r0
 8006e42:	460d      	mov	r5, r1
 8006e44:	d904      	bls.n	8006e50 <_raise_r+0x14>
 8006e46:	2316      	movs	r3, #22
 8006e48:	6003      	str	r3, [r0, #0]
 8006e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4e:	bd38      	pop	{r3, r4, r5, pc}
 8006e50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006e52:	b112      	cbz	r2, 8006e5a <_raise_r+0x1e>
 8006e54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e58:	b94b      	cbnz	r3, 8006e6e <_raise_r+0x32>
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f000 f830 	bl	8006ec0 <_getpid_r>
 8006e60:	462a      	mov	r2, r5
 8006e62:	4601      	mov	r1, r0
 8006e64:	4620      	mov	r0, r4
 8006e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e6a:	f000 b817 	b.w	8006e9c <_kill_r>
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d00a      	beq.n	8006e88 <_raise_r+0x4c>
 8006e72:	1c59      	adds	r1, r3, #1
 8006e74:	d103      	bne.n	8006e7e <_raise_r+0x42>
 8006e76:	2316      	movs	r3, #22
 8006e78:	6003      	str	r3, [r0, #0]
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	e7e7      	b.n	8006e4e <_raise_r+0x12>
 8006e7e:	2400      	movs	r4, #0
 8006e80:	4628      	mov	r0, r5
 8006e82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e86:	4798      	blx	r3
 8006e88:	2000      	movs	r0, #0
 8006e8a:	e7e0      	b.n	8006e4e <_raise_r+0x12>

08006e8c <raise>:
 8006e8c:	4b02      	ldr	r3, [pc, #8]	; (8006e98 <raise+0xc>)
 8006e8e:	4601      	mov	r1, r0
 8006e90:	6818      	ldr	r0, [r3, #0]
 8006e92:	f7ff bfd3 	b.w	8006e3c <_raise_r>
 8006e96:	bf00      	nop
 8006e98:	2000000c 	.word	0x2000000c

08006e9c <_kill_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	4d06      	ldr	r5, [pc, #24]	; (8006ebc <_kill_r+0x20>)
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	602b      	str	r3, [r5, #0]
 8006eaa:	f7fa fb80 	bl	80015ae <_kill>
 8006eae:	1c43      	adds	r3, r0, #1
 8006eb0:	d102      	bne.n	8006eb8 <_kill_r+0x1c>
 8006eb2:	682b      	ldr	r3, [r5, #0]
 8006eb4:	b103      	cbz	r3, 8006eb8 <_kill_r+0x1c>
 8006eb6:	6023      	str	r3, [r4, #0]
 8006eb8:	bd38      	pop	{r3, r4, r5, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000404 	.word	0x20000404

08006ec0 <_getpid_r>:
 8006ec0:	f7fa bb6e 	b.w	80015a0 <_getpid>

08006ec4 <_init>:
 8006ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ec6:	bf00      	nop
 8006ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eca:	bc08      	pop	{r3}
 8006ecc:	469e      	mov	lr, r3
 8006ece:	4770      	bx	lr

08006ed0 <_fini>:
 8006ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed2:	bf00      	nop
 8006ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ed6:	bc08      	pop	{r3}
 8006ed8:	469e      	mov	lr, r3
 8006eda:	4770      	bx	lr
