
14.TOUCH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6bc  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c7c  0800c8a8  0800c8a8  0001c8a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e524  0800e524  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e524  0800e524  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e524  0800e524  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e524  0800e524  0001e524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e528  0800e528  0001e528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e52c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001e0  0800e70c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  0800e70c  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001351e  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032a1  00000000  00000000  00033727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001010  00000000  00000000  000369c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  000379d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c80d  00000000  00000000  00038878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ce0  00000000  00000000  00055085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099c32  00000000  00000000  00069d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00103997  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000521c  00000000  00000000  001039ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	0800c88c 	.word	0x0800c88c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	0800c88c 	.word	0x0800c88c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__aeabi_f2iz>:
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001064:	d30f      	bcc.n	8001086 <__aeabi_f2iz+0x2a>
 8001066:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d90d      	bls.n	800108c <__aeabi_f2iz+0x30>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001078:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	bf18      	it	ne
 8001082:	4240      	negne	r0, r0
 8001084:	4770      	bx	lr
 8001086:	f04f 0000 	mov.w	r0, #0
 800108a:	4770      	bx	lr
 800108c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001090:	d101      	bne.n	8001096 <__aeabi_f2iz+0x3a>
 8001092:	0242      	lsls	r2, r0, #9
 8001094:	d105      	bne.n	80010a2 <__aeabi_f2iz+0x46>
 8001096:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800109a:	bf08      	it	eq
 800109c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010a0:	4770      	bx	lr
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	4770      	bx	lr

080010a8 <__aeabi_f2uiz>:
 80010a8:	0042      	lsls	r2, r0, #1
 80010aa:	d20e      	bcs.n	80010ca <__aeabi_f2uiz+0x22>
 80010ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010b0:	d30b      	bcc.n	80010ca <__aeabi_f2uiz+0x22>
 80010b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ba:	d409      	bmi.n	80010d0 <__aeabi_f2uiz+0x28>
 80010bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010c4:	fa23 f002 	lsr.w	r0, r3, r2
 80010c8:	4770      	bx	lr
 80010ca:	f04f 0000 	mov.w	r0, #0
 80010ce:	4770      	bx	lr
 80010d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d4:	d101      	bne.n	80010da <__aeabi_f2uiz+0x32>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	d102      	bne.n	80010e0 <__aeabi_f2uiz+0x38>
 80010da:	f04f 30ff 	mov.w	r0, #4294967295
 80010de:	4770      	bx	lr
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <AT24CXX_Init>:
//All rights reserved
//////////////////////////////////////////////////////////////////////////////////

//初始化IIC接口
void AT24CXX_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	IIC_Init();//IIC初始化
 80010ec:	f005 f972 	bl	80063d4 <IIC_Init>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08e      	sub	sp, #56	; 0x38
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	615a      	str	r2, [r3, #20]
 800111e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 8001120:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <MX_FSMC_Init+0xf0>)
 8001122:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001126:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001128:	4b2e      	ldr	r3, [pc, #184]	; (80011e4 <MX_FSMC_Init+0xf0>)
 800112a:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <MX_FSMC_Init+0xf4>)
 800112c:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <MX_FSMC_Init+0xf0>)
 8001130:	2206      	movs	r2, #6
 8001132:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001134:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <MX_FSMC_Init+0xf0>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800113a:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <MX_FSMC_Init+0xf0>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001140:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <MX_FSMC_Init+0xf0>)
 8001142:	2210      	movs	r2, #16
 8001144:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <MX_FSMC_Init+0xf0>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800114c:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <MX_FSMC_Init+0xf0>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  hsram4.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_FSMC_Init+0xf0>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001158:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <MX_FSMC_Init+0xf0>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_FSMC_Init+0xf0>)
 8001160:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001164:	629a      	str	r2, [r3, #40]	; 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <MX_FSMC_Init+0xf0>)
 8001168:	2200      	movs	r2, #0
 800116a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <MX_FSMC_Init+0xf0>)
 800116e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001172:	631a      	str	r2, [r3, #48]	; 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_FSMC_Init+0xf0>)
 8001176:	2200      	movs	r2, #0
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_FSMC_Init+0xf0>)
 800117c:	2200      	movs	r2, #0
 800117e:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001184:	230f      	movs	r3, #15
 8001186:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 3;
 8001188:	2303      	movs	r3, #3
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 800118c:	230f      	movs	r3, #15
 800118e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001190:	2310      	movs	r3, #16
 8001192:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001194:	2311      	movs	r3, #17
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001198:	2300      	movs	r3, #0
 800119a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 1;
 800119c:	2301      	movs	r3, #1
 800119e:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80011a0:	230f      	movs	r3, #15
 80011a2:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 5;
 80011a4:	2305      	movs	r3, #5
 80011a6:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 80011a8:	230f      	movs	r3, #15
 80011aa:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80011ac:	2310      	movs	r3, #16
 80011ae:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80011b0:	2311      	movs	r3, #17
 80011b2:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 80011b8:	463a      	mov	r2, r7
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	4619      	mov	r1, r3
 80011c0:	4808      	ldr	r0, [pc, #32]	; (80011e4 <MX_FSMC_Init+0xf0>)
 80011c2:	f008 fa13 	bl	80095ec <HAL_SRAM_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 80011cc:	f005 f8fc 	bl	80063c8 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_FSMC_Init+0xf8>)
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	4a05      	ldr	r2, [pc, #20]	; (80011ec <MX_FSMC_Init+0xf8>)
 80011d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011da:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80011dc:	bf00      	nop
 80011de:	3738      	adds	r7, #56	; 0x38
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000220 	.word	0x20000220
 80011e8:	a0000104 	.word	0xa0000104
 80011ec:	40010000 	.word	0x40010000

080011f0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <HAL_FSMC_MspInit+0x94>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d136      	bne.n	800127a <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 800120c:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <HAL_FSMC_MspInit+0x94>)
 800120e:	2201      	movs	r2, #1
 8001210:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <HAL_FSMC_MspInit+0x98>)
 8001214:	695b      	ldr	r3, [r3, #20]
 8001216:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <HAL_FSMC_MspInit+0x98>)
 8001218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121c:	6153      	str	r3, [r2, #20]
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_FSMC_MspInit+0x98>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 800122a:	f241 0301 	movw	r3, #4097	; 0x1001
 800122e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001238:	f107 0308 	add.w	r3, r7, #8
 800123c:	4619      	mov	r1, r3
 800123e:	4813      	ldr	r0, [pc, #76]	; (800128c <HAL_FSMC_MspInit+0x9c>)
 8001240:	f006 f942 	bl	80074c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001244:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001248:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	4619      	mov	r1, r3
 8001258:	480d      	ldr	r0, [pc, #52]	; (8001290 <HAL_FSMC_MspInit+0xa0>)
 800125a:	f006 f935 	bl	80074c8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800125e:	f24c 7333 	movw	r3, #50995	; 0xc733
 8001262:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001264:	2302      	movs	r3, #2
 8001266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	4619      	mov	r1, r3
 8001272:	4808      	ldr	r0, [pc, #32]	; (8001294 <HAL_FSMC_MspInit+0xa4>)
 8001274:	f006 f928 	bl	80074c8 <HAL_GPIO_Init>
 8001278:	e000      	b.n	800127c <HAL_FSMC_MspInit+0x8c>
    return;
 800127a:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200001fc 	.word	0x200001fc
 8001288:	40021000 	.word	0x40021000
 800128c:	40012000 	.word	0x40012000
 8001290:	40011800 	.word	0x40011800
 8001294:	40011400 	.word	0x40011400

08001298 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80012a0:	f7ff ffa6 	bl	80011f0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012c0:	4b4c      	ldr	r3, [pc, #304]	; (80013f4 <MX_GPIO_Init+0x148>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a4b      	ldr	r2, [pc, #300]	; (80013f4 <MX_GPIO_Init+0x148>)
 80012c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b49      	ldr	r3, [pc, #292]	; (80013f4 <MX_GPIO_Init+0x148>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b46      	ldr	r3, [pc, #280]	; (80013f4 <MX_GPIO_Init+0x148>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a45      	ldr	r2, [pc, #276]	; (80013f4 <MX_GPIO_Init+0x148>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b43      	ldr	r3, [pc, #268]	; (80013f4 <MX_GPIO_Init+0x148>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f0:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <MX_GPIO_Init+0x148>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a3f      	ldr	r2, [pc, #252]	; (80013f4 <MX_GPIO_Init+0x148>)
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b3d      	ldr	r3, [pc, #244]	; (80013f4 <MX_GPIO_Init+0x148>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001308:	4b3a      	ldr	r3, [pc, #232]	; (80013f4 <MX_GPIO_Init+0x148>)
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	4a39      	ldr	r2, [pc, #228]	; (80013f4 <MX_GPIO_Init+0x148>)
 800130e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001312:	6193      	str	r3, [r2, #24]
 8001314:	4b37      	ldr	r3, [pc, #220]	; (80013f4 <MX_GPIO_Init+0x148>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001320:	4b34      	ldr	r3, [pc, #208]	; (80013f4 <MX_GPIO_Init+0x148>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a33      	ldr	r2, [pc, #204]	; (80013f4 <MX_GPIO_Init+0x148>)
 8001326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <MX_GPIO_Init+0x148>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001338:	4b2e      	ldr	r3, [pc, #184]	; (80013f4 <MX_GPIO_Init+0x148>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a2d      	ldr	r2, [pc, #180]	; (80013f4 <MX_GPIO_Init+0x148>)
 800133e:	f043 0320 	orr.w	r3, r3, #32
 8001342:	6193      	str	r3, [r2, #24]
 8001344:	4b2b      	ldr	r3, [pc, #172]	; (80013f4 <MX_GPIO_Init+0x148>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	f003 0320 	and.w	r3, r3, #32
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001356:	4828      	ldr	r0, [pc, #160]	; (80013f8 <MX_GPIO_Init+0x14c>)
 8001358:	f006 fa4a 	bl	80077f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 800135c:	2201      	movs	r2, #1
 800135e:	2120      	movs	r1, #32
 8001360:	4826      	ldr	r0, [pc, #152]	; (80013fc <MX_GPIO_Init+0x150>)
 8001362:	f006 fa45 	bl	80077f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001374:	f107 0318 	add.w	r3, r7, #24
 8001378:	4619      	mov	r1, r3
 800137a:	481f      	ldr	r0, [pc, #124]	; (80013f8 <MX_GPIO_Init+0x14c>)
 800137c:	f006 f8a4 	bl	80074c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_UP_Pin;
 8001380:	2301      	movs	r3, #1
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001388:	2302      	movs	r3, #2
 800138a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KEY_UP_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 0318 	add.w	r3, r7, #24
 8001390:	4619      	mov	r1, r3
 8001392:	481b      	ldr	r0, [pc, #108]	; (8001400 <MX_GPIO_Init+0x154>)
 8001394:	f006 f898 	bl	80074c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001398:	2301      	movs	r3, #1
 800139a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	f107 0318 	add.w	r3, r7, #24
 80013a8:	4619      	mov	r1, r3
 80013aa:	4814      	ldr	r0, [pc, #80]	; (80013fc <MX_GPIO_Init+0x150>)
 80013ac:	f006 f88c 	bl	80074c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2302      	movs	r3, #2
 80013c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	4619      	mov	r1, r3
 80013c8:	480b      	ldr	r0, [pc, #44]	; (80013f8 <MX_GPIO_Init+0x14c>)
 80013ca:	f006 f87d 	bl	80074c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80013ce:	2320      	movs	r3, #32
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80013de:	f107 0318 	add.w	r3, r7, #24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_GPIO_Init+0x150>)
 80013e6:	f006 f86f 	bl	80074c8 <HAL_GPIO_Init>

}
 80013ea:	bf00      	nop
 80013ec:	3728      	adds	r7, #40	; 0x28
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40011c00 	.word	0x40011c00
 80013fc:	40010c00 	.word	0x40010c00
 8001400:	40010800 	.word	0x40010800

08001404 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_I2C1_Init+0x50>)
 800140a:	4a13      	ldr	r2, [pc, #76]	; (8001458 <MX_I2C1_Init+0x54>)
 800140c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_I2C1_Init+0x50>)
 8001410:	4a12      	ldr	r2, [pc, #72]	; (800145c <MX_I2C1_Init+0x58>)
 8001412:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_I2C1_Init+0x50>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_I2C1_Init+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_I2C1_Init+0x50>)
 8001422:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001426:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <MX_I2C1_Init+0x50>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_I2C1_Init+0x50>)
 800143c:	2200      	movs	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_I2C1_Init+0x50>)
 8001442:	f006 f9ed 	bl	8007820 <HAL_I2C_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800144c:	f004 ffbc 	bl	80063c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000268 	.word	0x20000268
 8001458:	40005400 	.word	0x40005400
 800145c:	000186a0 	.word	0x000186a0

08001460 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a15      	ldr	r2, [pc, #84]	; (80014d0 <HAL_I2C_MspInit+0x70>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d123      	bne.n	80014c8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 8001486:	f043 0308 	orr.w	r3, r3, #8
 800148a:	6193      	str	r3, [r2, #24]
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 800148e:	699b      	ldr	r3, [r3, #24]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001498:	23c0      	movs	r3, #192	; 0xc0
 800149a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149c:	2312      	movs	r3, #18
 800149e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	4619      	mov	r1, r3
 80014aa:	480b      	ldr	r0, [pc, #44]	; (80014d8 <HAL_I2C_MspInit+0x78>)
 80014ac:	f006 f80c 	bl	80074c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	4a07      	ldr	r2, [pc, #28]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 80014b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ba:	61d3      	str	r3, [r2, #28]
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <HAL_I2C_MspInit+0x74>)
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014c8:	bf00      	nop
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40005400 	.word	0x40005400
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010c00 	.word	0x40010c00

080014dc <delay_us>:

/**
 * @brief 微秒级延时，参考F103的库实现
 * @retval None
 */
void delay_us(uint32_t duration) {
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  //见stm32f1xx_hal_rcc.c -- static void RCC_Delay(uint32_t mdelay)
  __IO uint32_t Delay = duration * (SystemCoreClock / 8U / 1000000U);
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <delay_us+0x34>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <delay_us+0x38>)
 80014ea:	fba2 2303 	umull	r2, r3, r2, r3
 80014ee:	0d5b      	lsrs	r3, r3, #21
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	60fb      	str	r3, [r7, #12]
  do {
	__NOP();
 80014f8:	bf00      	nop
  } while (Delay--);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	1e5a      	subs	r2, r3, #1
 80014fe:	60fa      	str	r2, [r7, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1f9      	bne.n	80014f8 <delay_us+0x1c>
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	bc80      	pop	{r7}
 800150e:	4770      	bx	lr
 8001510:	20000004 	.word	0x20000004
 8001514:	431bde83 	.word	0x431bde83

08001518 <LCD_WR_REG>:

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(uint16_t regval)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=regval;//写入要写的寄存器序号
 8001522:	4a04      	ldr	r2, [pc, #16]	; (8001534 <LCD_WR_REG+0x1c>)
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	8013      	strh	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	6c0007fe 	.word	0x6c0007fe

08001538 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(uint16_t data)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001542:	4a04      	ldr	r2, [pc, #16]	; (8001554 <LCD_WR_DATA+0x1c>)
 8001544:	88fb      	ldrh	r3, [r7, #6]
 8001546:	8053      	strh	r3, [r2, #2]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	6c0007fe 	.word	0x6c0007fe

08001558 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
	uint16_t ram;			//防止被优化
	ram=LCD->LCD_RAM;
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <LCD_RD_DATA+0x18>)
 8001560:	885b      	ldrh	r3, [r3, #2]
 8001562:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001564:	88fb      	ldrh	r3, [r7, #6]
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr
 8001570:	6c0007fe 	.word	0x6c0007fe

08001574 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	460a      	mov	r2, r1
 800157e:	80fb      	strh	r3, [r7, #6]
 8001580:	4613      	mov	r3, r2
 8001582:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 8001584:	4a05      	ldr	r2, [pc, #20]	; (800159c <LCD_WriteReg+0x28>)
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//写入数据
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <LCD_WriteReg+0x28>)
 800158c:	88bb      	ldrh	r3, [r7, #4]
 800158e:	8053      	strh	r3, [r2, #2]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	6c0007fe 	.word	0x6c0007fe

080015a0 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器地址
//返回值:读到的数据
uint16_t LCD_ReadReg(uint16_t LCD_Reg)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);		//写入要读的寄存器序号
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ffb3 	bl	8001518 <LCD_WR_REG>
	delay_us(5);
 80015b2:	2005      	movs	r0, #5
 80015b4:	f7ff ff92 	bl	80014dc <delay_us>
	return LCD_RD_DATA();		//返回读到的值
 80015b8:	f7ff ffce 	bl	8001558 <LCD_RD_DATA>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
 	LCD->LCD_REG=lcddev.wramcmd;
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <LCD_WriteRAM_Prepare+0x14>)
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <LCD_WriteRAM_Prepare+0x18>)
 80015d0:	8912      	ldrh	r2, [r2, #8]
 80015d2:	801a      	strh	r2, [r3, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr
 80015dc:	6c0007fe 	.word	0x6c0007fe
 80015e0:	200002bc 	.word	0x200002bc

080015e4 <LCD_SetCursor>:
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	460a      	mov	r2, r1
 80015ee:	80fb      	strh	r3, [r7, #6]
 80015f0:	4613      	mov	r3, r2
 80015f2:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 80015f4:	4b92      	ldr	r3, [pc, #584]	; (8001840 <LCD_SetCursor+0x25c>)
 80015f6:	889b      	ldrh	r3, [r3, #4]
 80015f8:	f249 3241 	movw	r2, #37697	; 0x9341
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d005      	beq.n	800160c <LCD_SetCursor+0x28>
 8001600:	4b8f      	ldr	r3, [pc, #572]	; (8001840 <LCD_SetCursor+0x25c>)
 8001602:	889b      	ldrh	r3, [r3, #4]
 8001604:	f245 3210 	movw	r2, #21264	; 0x5310
 8001608:	4293      	cmp	r3, r2
 800160a:	d122      	bne.n	8001652 <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 800160c:	4b8c      	ldr	r3, [pc, #560]	; (8001840 <LCD_SetCursor+0x25c>)
 800160e:	895b      	ldrh	r3, [r3, #10]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff81 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	b29b      	uxth	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff8b 	bl	8001538 <LCD_WR_DATA>
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	b29b      	uxth	r3, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff85 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800162e:	4b84      	ldr	r3, [pc, #528]	; (8001840 <LCD_SetCursor+0x25c>)
 8001630:	899b      	ldrh	r3, [r3, #12]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff70 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8001638:	88bb      	ldrh	r3, [r7, #4]
 800163a:	0a1b      	lsrs	r3, r3, #8
 800163c:	b29b      	uxth	r3, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff7a 	bl	8001538 <LCD_WR_DATA>
 8001644:	88bb      	ldrh	r3, [r7, #4]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	b29b      	uxth	r3, r3
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff74 	bl	8001538 <LCD_WR_DATA>
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8001650:	e0f1      	b.n	8001836 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X6804)
 8001652:	4b7b      	ldr	r3, [pc, #492]	; (8001840 <LCD_SetCursor+0x25c>)
 8001654:	889b      	ldrh	r3, [r3, #4]
 8001656:	f646 0204 	movw	r2, #26628	; 0x6804
 800165a:	4293      	cmp	r3, r2
 800165c:	d12d      	bne.n	80016ba <LCD_SetCursor+0xd6>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏时处理
 800165e:	4b78      	ldr	r3, [pc, #480]	; (8001840 <LCD_SetCursor+0x25c>)
 8001660:	799b      	ldrb	r3, [r3, #6]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d106      	bne.n	8001674 <LCD_SetCursor+0x90>
 8001666:	4b76      	ldr	r3, [pc, #472]	; (8001840 <LCD_SetCursor+0x25c>)
 8001668:	881a      	ldrh	r2, [r3, #0]
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	b29b      	uxth	r3, r3
 8001670:	3b01      	subs	r3, #1
 8001672:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001674:	4b72      	ldr	r3, [pc, #456]	; (8001840 <LCD_SetCursor+0x25c>)
 8001676:	895b      	ldrh	r3, [r3, #10]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff4d 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	b29b      	uxth	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff57 	bl	8001538 <LCD_WR_DATA>
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	b2db      	uxtb	r3, r3
 800168e:	b29b      	uxth	r3, r3
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff51 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001696:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <LCD_SetCursor+0x25c>)
 8001698:	899b      	ldrh	r3, [r3, #12]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff3c 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 80016a0:	88bb      	ldrh	r3, [r7, #4]
 80016a2:	0a1b      	lsrs	r3, r3, #8
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff46 	bl	8001538 <LCD_WR_DATA>
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff40 	bl	8001538 <LCD_WR_DATA>
}
 80016b8:	e0bd      	b.n	8001836 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X1963)
 80016ba:	4b61      	ldr	r3, [pc, #388]	; (8001840 <LCD_SetCursor+0x25c>)
 80016bc:	889b      	ldrh	r3, [r3, #4]
 80016be:	f641 1263 	movw	r2, #6499	; 0x1963
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d167      	bne.n	8001796 <LCD_SetCursor+0x1b2>
		if(lcddev.dir==0)//x坐标需要变换
 80016c6:	4b5e      	ldr	r3, [pc, #376]	; (8001840 <LCD_SetCursor+0x25c>)
 80016c8:	799b      	ldrb	r3, [r3, #6]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d11e      	bne.n	800170c <LCD_SetCursor+0x128>
			Xpos=lcddev.width-1-Xpos;
 80016ce:	4b5c      	ldr	r3, [pc, #368]	; (8001840 <LCD_SetCursor+0x25c>)
 80016d0:	881a      	ldrh	r2, [r3, #0]
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	3b01      	subs	r3, #1
 80016da:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 80016dc:	4b58      	ldr	r3, [pc, #352]	; (8001840 <LCD_SetCursor+0x25c>)
 80016de:	895b      	ldrh	r3, [r3, #10]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff19 	bl	8001518 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff ff26 	bl	8001538 <LCD_WR_DATA>
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff ff23 	bl	8001538 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff1d 	bl	8001538 <LCD_WR_DATA>
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	b29b      	uxth	r3, r3
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff17 	bl	8001538 <LCD_WR_DATA>
 800170a:	e021      	b.n	8001750 <LCD_SetCursor+0x16c>
			LCD_WR_REG(lcddev.setxcmd);
 800170c:	4b4c      	ldr	r3, [pc, #304]	; (8001840 <LCD_SetCursor+0x25c>)
 800170e:	895b      	ldrh	r3, [r3, #10]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff01 	bl	8001518 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	b29b      	uxth	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff0b 	bl	8001538 <LCD_WR_DATA>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff05 	bl	8001538 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 800172e:	4b44      	ldr	r3, [pc, #272]	; (8001840 <LCD_SetCursor+0x25c>)
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	3b01      	subs	r3, #1
 8001734:	121b      	asrs	r3, r3, #8
 8001736:	b29b      	uxth	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fefd 	bl	8001538 <LCD_WR_DATA>
 800173e:	4b40      	ldr	r3, [pc, #256]	; (8001840 <LCD_SetCursor+0x25c>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	3b01      	subs	r3, #1
 8001744:	b29b      	uxth	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	b29b      	uxth	r3, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fef4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001750:	4b3b      	ldr	r3, [pc, #236]	; (8001840 <LCD_SetCursor+0x25c>)
 8001752:	899b      	ldrh	r3, [r3, #12]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fedf 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	b29b      	uxth	r3, r3
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fee9 	bl	8001538 <LCD_WR_DATA>
 8001766:	88bb      	ldrh	r3, [r7, #4]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	b29b      	uxth	r3, r3
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fee3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001772:	4b33      	ldr	r3, [pc, #204]	; (8001840 <LCD_SetCursor+0x25c>)
 8001774:	885b      	ldrh	r3, [r3, #2]
 8001776:	3b01      	subs	r3, #1
 8001778:	121b      	asrs	r3, r3, #8
 800177a:	b29b      	uxth	r3, r3
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fedb 	bl	8001538 <LCD_WR_DATA>
 8001782:	4b2f      	ldr	r3, [pc, #188]	; (8001840 <LCD_SetCursor+0x25c>)
 8001784:	885b      	ldrh	r3, [r3, #2]
 8001786:	3b01      	subs	r3, #1
 8001788:	b29b      	uxth	r3, r3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	b29b      	uxth	r3, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fed2 	bl	8001538 <LCD_WR_DATA>
}
 8001794:	e04f      	b.n	8001836 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X5510)
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <LCD_SetCursor+0x25c>)
 8001798:	889b      	ldrh	r3, [r3, #4]
 800179a:	f245 5210 	movw	r2, #21776	; 0x5510
 800179e:	4293      	cmp	r3, r2
 80017a0:	d130      	bne.n	8001804 <LCD_SetCursor+0x220>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <LCD_SetCursor+0x25c>)
 80017a4:	895b      	ldrh	r3, [r3, #10]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff feb6 	bl	8001518 <LCD_WR_REG>
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fec0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 80017b8:	4b21      	ldr	r3, [pc, #132]	; (8001840 <LCD_SetCursor+0x25c>)
 80017ba:	895b      	ldrh	r3, [r3, #10]
 80017bc:	3301      	adds	r3, #1
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fea9 	bl	8001518 <LCD_WR_REG>
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff feb3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 80017d2:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <LCD_SetCursor+0x25c>)
 80017d4:	899b      	ldrh	r3, [r3, #12]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fe9e 	bl	8001518 <LCD_WR_REG>
 80017dc:	88bb      	ldrh	r3, [r7, #4]
 80017de:	0a1b      	lsrs	r3, r3, #8
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fea8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 80017e8:	4b15      	ldr	r3, [pc, #84]	; (8001840 <LCD_SetCursor+0x25c>)
 80017ea:	899b      	ldrh	r3, [r3, #12]
 80017ec:	3301      	adds	r3, #1
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fe91 	bl	8001518 <LCD_WR_REG>
 80017f6:	88bb      	ldrh	r3, [r7, #4]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fe9b 	bl	8001538 <LCD_WR_DATA>
}
 8001802:	e018      	b.n	8001836 <LCD_SetCursor+0x252>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
 8001804:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <LCD_SetCursor+0x25c>)
 8001806:	799b      	ldrb	r3, [r3, #6]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d106      	bne.n	800181a <LCD_SetCursor+0x236>
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <LCD_SetCursor+0x25c>)
 800180e:	881a      	ldrh	r2, [r3, #0]
 8001810:	88fb      	ldrh	r3, [r7, #6]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b29b      	uxth	r3, r3
 8001816:	3b01      	subs	r3, #1
 8001818:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <LCD_SetCursor+0x25c>)
 800181c:	895b      	ldrh	r3, [r3, #10]
 800181e:	88fa      	ldrh	r2, [r7, #6]
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fea6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <LCD_SetCursor+0x25c>)
 800182a:	899b      	ldrh	r3, [r3, #12]
 800182c:	88ba      	ldrh	r2, [r7, #4]
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fe9f 	bl	8001574 <LCD_WriteReg>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200002bc 	.word	0x200002bc

08001844 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 800184e:	2300      	movs	r3, #0
 8001850:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 8001852:	2300      	movs	r3, #0
 8001854:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X6804&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8001856:	4b78      	ldr	r3, [pc, #480]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 8001858:	799b      	ldrb	r3, [r3, #6]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d10b      	bne.n	8001876 <LCD_Scan_Dir+0x32>
 800185e:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 8001860:	889b      	ldrh	r3, [r3, #4]
 8001862:	f646 0204 	movw	r2, #26628	; 0x6804
 8001866:	4293      	cmp	r3, r2
 8001868:	d005      	beq.n	8001876 <LCD_Scan_Dir+0x32>
 800186a:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 800186c:	889b      	ldrh	r3, [r3, #4]
 800186e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001872:	4293      	cmp	r3, r2
 8001874:	d109      	bne.n	800188a <LCD_Scan_Dir+0x46>
 8001876:	4b70      	ldr	r3, [pc, #448]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 8001878:	799b      	ldrb	r3, [r3, #6]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d134      	bne.n	80018e8 <LCD_Scan_Dir+0xa4>
 800187e:	4b6e      	ldr	r3, [pc, #440]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 8001880:	889b      	ldrh	r3, [r3, #4]
 8001882:	f641 1263 	movw	r2, #6499	; 0x1963
 8001886:	4293      	cmp	r3, r2
 8001888:	d12e      	bne.n	80018e8 <LCD_Scan_Dir+0xa4>
	{
		switch(dir)//方向转换
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2b07      	cmp	r3, #7
 800188e:	d82c      	bhi.n	80018ea <LCD_Scan_Dir+0xa6>
 8001890:	a201      	add	r2, pc, #4	; (adr r2, 8001898 <LCD_Scan_Dir+0x54>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	080018b9 	.word	0x080018b9
 800189c:	080018bf 	.word	0x080018bf
 80018a0:	080018c5 	.word	0x080018c5
 80018a4:	080018cb 	.word	0x080018cb
 80018a8:	080018d1 	.word	0x080018d1
 80018ac:	080018d7 	.word	0x080018d7
 80018b0:	080018dd 	.word	0x080018dd
 80018b4:	080018e3 	.word	0x080018e3
		{
			case 0:dir=6;break;
 80018b8:	2306      	movs	r3, #6
 80018ba:	71fb      	strb	r3, [r7, #7]
 80018bc:	e015      	b.n	80018ea <LCD_Scan_Dir+0xa6>
			case 1:dir=7;break;
 80018be:	2307      	movs	r3, #7
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	e012      	b.n	80018ea <LCD_Scan_Dir+0xa6>
			case 2:dir=4;break;
 80018c4:	2304      	movs	r3, #4
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	e00f      	b.n	80018ea <LCD_Scan_Dir+0xa6>
			case 3:dir=5;break;
 80018ca:	2305      	movs	r3, #5
 80018cc:	71fb      	strb	r3, [r7, #7]
 80018ce:	e00c      	b.n	80018ea <LCD_Scan_Dir+0xa6>
			case 4:dir=1;break;
 80018d0:	2301      	movs	r3, #1
 80018d2:	71fb      	strb	r3, [r7, #7]
 80018d4:	e009      	b.n	80018ea <LCD_Scan_Dir+0xa6>
			case 5:dir=0;break;
 80018d6:	2300      	movs	r3, #0
 80018d8:	71fb      	strb	r3, [r7, #7]
 80018da:	e006      	b.n	80018ea <LCD_Scan_Dir+0xa6>
			case 6:dir=3;break;
 80018dc:	2303      	movs	r3, #3
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	e003      	b.n	80018ea <LCD_Scan_Dir+0xa6>
			case 7:dir=2;break;
 80018e2:	2302      	movs	r3, #2
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	e000      	b.n	80018ea <LCD_Scan_Dir+0xa6>
		}
	}
 80018e8:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/6804/5310/5510/1963,特殊处理
 80018ea:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 80018ec:	889b      	ldrh	r3, [r3, #4]
 80018ee:	f249 3241 	movw	r2, #37697	; 0x9341
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d018      	beq.n	8001928 <LCD_Scan_Dir+0xe4>
 80018f6:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 80018f8:	889b      	ldrh	r3, [r3, #4]
 80018fa:	f646 0204 	movw	r2, #26628	; 0x6804
 80018fe:	4293      	cmp	r3, r2
 8001900:	d012      	beq.n	8001928 <LCD_Scan_Dir+0xe4>
 8001902:	4b4d      	ldr	r3, [pc, #308]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 8001904:	889b      	ldrh	r3, [r3, #4]
 8001906:	f245 3210 	movw	r2, #21264	; 0x5310
 800190a:	4293      	cmp	r3, r2
 800190c:	d00c      	beq.n	8001928 <LCD_Scan_Dir+0xe4>
 800190e:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 8001910:	889b      	ldrh	r3, [r3, #4]
 8001912:	f245 5210 	movw	r2, #21776	; 0x5510
 8001916:	4293      	cmp	r3, r2
 8001918:	d006      	beq.n	8001928 <LCD_Scan_Dir+0xe4>
 800191a:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 800191c:	889b      	ldrh	r3, [r3, #4]
 800191e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001922:	4293      	cmp	r3, r2
 8001924:	f040 813c 	bne.w	8001ba0 <LCD_Scan_Dir+0x35c>
	{
		switch(dir)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	2b07      	cmp	r3, #7
 800192c:	d835      	bhi.n	800199a <LCD_Scan_Dir+0x156>
 800192e:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <LCD_Scan_Dir+0xf0>)
 8001930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001934:	0800199b 	.word	0x0800199b
 8001938:	08001955 	.word	0x08001955
 800193c:	0800195f 	.word	0x0800195f
 8001940:	08001969 	.word	0x08001969
 8001944:	08001973 	.word	0x08001973
 8001948:	0800197d 	.word	0x0800197d
 800194c:	08001987 	.word	0x08001987
 8001950:	08001991 	.word	0x08001991
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8001954:	89fb      	ldrh	r3, [r7, #14]
 8001956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800195a:	81fb      	strh	r3, [r7, #14]
				break;
 800195c:	e01d      	b.n	800199a <LCD_Scan_Dir+0x156>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 800195e:	89fb      	ldrh	r3, [r7, #14]
 8001960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001964:	81fb      	strh	r3, [r7, #14]
				break;
 8001966:	e018      	b.n	800199a <LCD_Scan_Dir+0x156>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 8001968:	89fb      	ldrh	r3, [r7, #14]
 800196a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800196e:	81fb      	strh	r3, [r7, #14]
				break;
 8001970:	e013      	b.n	800199a <LCD_Scan_Dir+0x156>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 8001972:	89fb      	ldrh	r3, [r7, #14]
 8001974:	f043 0320 	orr.w	r3, r3, #32
 8001978:	81fb      	strh	r3, [r7, #14]
				break;
 800197a:	e00e      	b.n	800199a <LCD_Scan_Dir+0x156>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 800197c:	89fb      	ldrh	r3, [r7, #14]
 800197e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001982:	81fb      	strh	r3, [r7, #14]
				break;
 8001984:	e009      	b.n	800199a <LCD_Scan_Dir+0x156>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 8001986:	89fb      	ldrh	r3, [r7, #14]
 8001988:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800198c:	81fb      	strh	r3, [r7, #14]
				break;
 800198e:	e004      	b.n	800199a <LCD_Scan_Dir+0x156>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 8001990:	89fb      	ldrh	r3, [r7, #14]
 8001992:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001996:	81fb      	strh	r3, [r7, #14]
				break;
 8001998:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 800199a:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 800199c:	889b      	ldrh	r3, [r3, #4]
 800199e:	f245 5210 	movw	r2, #21776	; 0x5510
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d103      	bne.n	80019ae <LCD_Scan_Dir+0x16a>
 80019a6:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80019aa:	81bb      	strh	r3, [r7, #12]
 80019ac:	e001      	b.n	80019b2 <LCD_Scan_Dir+0x16e>
		else dirreg=0X36;
 80019ae:	2336      	movs	r3, #54	; 0x36
 80019b0:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 80019b2:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 80019b4:	889b      	ldrh	r3, [r3, #4]
 80019b6:	f245 3210 	movw	r2, #21264	; 0x5310
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00f      	beq.n	80019de <LCD_Scan_Dir+0x19a>
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 80019c0:	889b      	ldrh	r3, [r3, #4]
 80019c2:	f245 5210 	movw	r2, #21776	; 0x5510
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d009      	beq.n	80019de <LCD_Scan_Dir+0x19a>
 80019ca:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 80019cc:	889b      	ldrh	r3, [r3, #4]
 80019ce:	f641 1263 	movw	r2, #6499	; 0x1963
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d003      	beq.n	80019de <LCD_Scan_Dir+0x19a>
 80019d6:	89fb      	ldrh	r3, [r7, #14]
 80019d8:	f043 0308 	orr.w	r3, r3, #8
 80019dc:	81fb      	strh	r3, [r7, #14]
		if(lcddev.id==0X6804)regval|=0x02;//6804的BIT6和9341的反了
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 80019e0:	889b      	ldrh	r3, [r3, #4]
 80019e2:	f646 0204 	movw	r2, #26628	; 0x6804
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d103      	bne.n	80019f2 <LCD_Scan_Dir+0x1ae>
 80019ea:	89fb      	ldrh	r3, [r7, #14]
 80019ec:	f043 0302 	orr.w	r3, r3, #2
 80019f0:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 80019f2:	89fa      	ldrh	r2, [r7, #14]
 80019f4:	89bb      	ldrh	r3, [r7, #12]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fdbb 	bl	8001574 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 8001a00:	889b      	ldrh	r3, [r3, #4]
 8001a02:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d028      	beq.n	8001a5c <LCD_Scan_Dir+0x218>
		{
			if(regval&0X20)
 8001a0a:	89fb      	ldrh	r3, [r7, #14]
 8001a0c:	f003 0320 	and.w	r3, r3, #32
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d013      	beq.n	8001a3c <LCD_Scan_Dir+0x1f8>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 8001a16:	881a      	ldrh	r2, [r3, #0]
 8001a18:	4b07      	ldr	r3, [pc, #28]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 8001a1a:	885b      	ldrh	r3, [r3, #2]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d21d      	bcs.n	8001a5c <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 8001a28:	885a      	ldrh	r2, [r3, #2]
 8001a2a:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 8001a2c:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8001a2e:	4a02      	ldr	r2, [pc, #8]	; (8001a38 <LCD_Scan_Dir+0x1f4>)
 8001a30:	897b      	ldrh	r3, [r7, #10]
 8001a32:	8053      	strh	r3, [r2, #2]
 8001a34:	e012      	b.n	8001a5c <LCD_Scan_Dir+0x218>
 8001a36:	bf00      	nop
 8001a38:	200002bc 	.word	0x200002bc
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 8001a3c:	4b7d      	ldr	r3, [pc, #500]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001a3e:	881a      	ldrh	r2, [r3, #0]
 8001a40:	4b7c      	ldr	r3, [pc, #496]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001a42:	885b      	ldrh	r3, [r3, #2]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d909      	bls.n	8001a5c <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8001a48:	4b7a      	ldr	r3, [pc, #488]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8001a4e:	4b79      	ldr	r3, [pc, #484]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001a50:	885a      	ldrh	r2, [r3, #2]
 8001a52:	4b78      	ldr	r3, [pc, #480]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001a54:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8001a56:	4a77      	ldr	r2, [pc, #476]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001a58:	897b      	ldrh	r3, [r7, #10]
 8001a5a:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 8001a5c:	4b75      	ldr	r3, [pc, #468]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001a5e:	889b      	ldrh	r3, [r3, #4]
 8001a60:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d162      	bne.n	8001b2e <LCD_Scan_Dir+0x2ea>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 8001a68:	4b72      	ldr	r3, [pc, #456]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001a6a:	895b      	ldrh	r3, [r3, #10]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fd53 	bl	8001518 <LCD_WR_REG>
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fd60 	bl	8001538 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 8001a78:	4b6e      	ldr	r3, [pc, #440]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001a7a:	895b      	ldrh	r3, [r3, #10]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fd49 	bl	8001518 <LCD_WR_REG>
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7ff fd56 	bl	8001538 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 8001a8c:	4b69      	ldr	r3, [pc, #420]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001a8e:	895b      	ldrh	r3, [r3, #10]
 8001a90:	3302      	adds	r3, #2
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fd3f 	bl	8001518 <LCD_WR_REG>
 8001a9a:	4b66      	ldr	r3, [pc, #408]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	121b      	asrs	r3, r3, #8
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fd47 	bl	8001538 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001aaa:	4b62      	ldr	r3, [pc, #392]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001aac:	895b      	ldrh	r3, [r3, #10]
 8001aae:	3303      	adds	r3, #3
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fd30 	bl	8001518 <LCD_WR_REG>
 8001ab8:	4b5e      	ldr	r3, [pc, #376]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fd37 	bl	8001538 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 8001aca:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001acc:	899b      	ldrh	r3, [r3, #12]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fd22 	bl	8001518 <LCD_WR_REG>
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff fd2f 	bl	8001538 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 8001ada:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001adc:	899b      	ldrh	r3, [r3, #12]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fd18 	bl	8001518 <LCD_WR_REG>
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff fd25 	bl	8001538 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 8001aee:	4b51      	ldr	r3, [pc, #324]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001af0:	899b      	ldrh	r3, [r3, #12]
 8001af2:	3302      	adds	r3, #2
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fd0e 	bl	8001518 <LCD_WR_REG>
 8001afc:	4b4d      	ldr	r3, [pc, #308]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001afe:	885b      	ldrh	r3, [r3, #2]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	121b      	asrs	r3, r3, #8
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fd16 	bl	8001538 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001b0c:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001b0e:	899b      	ldrh	r3, [r3, #12]
 8001b10:	3303      	adds	r3, #3
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fcff 	bl	8001518 <LCD_WR_REG>
 8001b1a:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001b1c:	885b      	ldrh	r3, [r3, #2]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fd06 	bl	8001538 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8001b2c:	e07e      	b.n	8001c2c <LCD_Scan_Dir+0x3e8>
		}else
		{
			LCD_WR_REG(lcddev.setxcmd);
 8001b2e:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001b30:	895b      	ldrh	r3, [r3, #10]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff fcf0 	bl	8001518 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff fcfd 	bl	8001538 <LCD_WR_DATA>
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f7ff fcfa 	bl	8001538 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001b44:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	121b      	asrs	r3, r3, #8
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fcf2 	bl	8001538 <LCD_WR_DATA>
 8001b54:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fce9 	bl	8001538 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 8001b66:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001b68:	899b      	ldrh	r3, [r3, #12]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fcd4 	bl	8001518 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff fce1 	bl	8001538 <LCD_WR_DATA>
 8001b76:	2000      	movs	r0, #0
 8001b78:	f7ff fcde 	bl	8001538 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001b7e:	885b      	ldrh	r3, [r3, #2]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	121b      	asrs	r3, r3, #8
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fcd6 	bl	8001538 <LCD_WR_DATA>
 8001b8c:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <LCD_Scan_Dir+0x3f0>)
 8001b8e:	885b      	ldrh	r3, [r3, #2]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fccd 	bl	8001538 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8001b9e:	e045      	b.n	8001c2c <LCD_Scan_Dir+0x3e8>
		}
  	}else
	{
		switch(dir)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	2b07      	cmp	r3, #7
 8001ba4:	d835      	bhi.n	8001c12 <LCD_Scan_Dir+0x3ce>
 8001ba6:	a201      	add	r2, pc, #4	; (adr r2, 8001bac <LCD_Scan_Dir+0x368>)
 8001ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bac:	08001bcd 	.word	0x08001bcd
 8001bb0:	08001bd7 	.word	0x08001bd7
 8001bb4:	08001be1 	.word	0x08001be1
 8001bb8:	08001c13 	.word	0x08001c13
 8001bbc:	08001beb 	.word	0x08001beb
 8001bc0:	08001bf5 	.word	0x08001bf5
 8001bc4:	08001bff 	.word	0x08001bff
 8001bc8:	08001c09 	.word	0x08001c09
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(1<<5)|(1<<4)|(0<<3);
 8001bcc:	89fb      	ldrh	r3, [r7, #14]
 8001bce:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001bd2:	81fb      	strh	r3, [r7, #14]
				break;
 8001bd4:	e01d      	b.n	8001c12 <LCD_Scan_Dir+0x3ce>
			case L2R_D2U://从左到右,从下到上
				regval|=(0<<5)|(1<<4)|(0<<3);
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	f043 0310 	orr.w	r3, r3, #16
 8001bdc:	81fb      	strh	r3, [r7, #14]
				break;
 8001bde:	e018      	b.n	8001c12 <LCD_Scan_Dir+0x3ce>
			case R2L_U2D://从右到左,从上到下
				regval|=(1<<5)|(0<<4)|(0<<3);
 8001be0:	89fb      	ldrh	r3, [r7, #14]
 8001be2:	f043 0320 	orr.w	r3, r3, #32
 8001be6:	81fb      	strh	r3, [r7, #14]
				break;
 8001be8:	e013      	b.n	8001c12 <LCD_Scan_Dir+0x3ce>
			case R2L_D2U://从右到左,从下到上
				regval|=(0<<5)|(0<<4)|(0<<3);
				break;
			case U2D_L2R://从上到下,从左到右
				regval|=(1<<5)|(1<<4)|(1<<3);
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001bf0:	81fb      	strh	r3, [r7, #14]
				break;
 8001bf2:	e00e      	b.n	8001c12 <LCD_Scan_Dir+0x3ce>
			case U2D_R2L://从上到下,从右到左
				regval|=(1<<5)|(0<<4)|(1<<3);
 8001bf4:	89fb      	ldrh	r3, [r7, #14]
 8001bf6:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001bfa:	81fb      	strh	r3, [r7, #14]
				break;
 8001bfc:	e009      	b.n	8001c12 <LCD_Scan_Dir+0x3ce>
			case D2U_L2R://从下到上,从左到右
				regval|=(0<<5)|(1<<4)|(1<<3);
 8001bfe:	89fb      	ldrh	r3, [r7, #14]
 8001c00:	f043 0318 	orr.w	r3, r3, #24
 8001c04:	81fb      	strh	r3, [r7, #14]
				break;
 8001c06:	e004      	b.n	8001c12 <LCD_Scan_Dir+0x3ce>
			case D2U_R2L://从下到上,从右到左
				regval|=(0<<5)|(0<<4)|(1<<3);
 8001c08:	89fb      	ldrh	r3, [r7, #14]
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	81fb      	strh	r3, [r7, #14]
				break;
 8001c10:	bf00      	nop
		}
		dirreg=0X03;
 8001c12:	2303      	movs	r3, #3
 8001c14:	81bb      	strh	r3, [r7, #12]
		regval|=1<<12;
 8001c16:	89fb      	ldrh	r3, [r7, #14]
 8001c18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c1c:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8001c1e:	89fa      	ldrh	r2, [r7, #14]
 8001c20:	89bb      	ldrh	r3, [r7, #12]
 8001c22:	4611      	mov	r1, r2
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fca5 	bl	8001574 <LCD_WriteReg>
	}
}
 8001c2a:	bf00      	nop
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200002bc 	.word	0x200002bc

08001c38 <LCD_Fast_DrawPoint>:
}
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
 8001c42:	460b      	mov	r3, r1
 8001c44:	80bb      	strh	r3, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	807b      	strh	r3, [r7, #2]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001c4a:	4b85      	ldr	r3, [pc, #532]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001c4c:	889b      	ldrh	r3, [r3, #4]
 8001c4e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d005      	beq.n	8001c62 <LCD_Fast_DrawPoint+0x2a>
 8001c56:	4b82      	ldr	r3, [pc, #520]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001c58:	889b      	ldrh	r3, [r3, #4]
 8001c5a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d122      	bne.n	8001ca8 <LCD_Fast_DrawPoint+0x70>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8001c62:	4b7f      	ldr	r3, [pc, #508]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001c64:	895b      	ldrh	r3, [r3, #10]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fc56 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fc60 	bl	8001538 <LCD_WR_DATA>
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fc5a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001c84:	4b76      	ldr	r3, [pc, #472]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001c86:	899b      	ldrh	r3, [r3, #12]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fc45 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001c8e:	88bb      	ldrh	r3, [r7, #4]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fc4f 	bl	8001538 <LCD_WR_DATA>
 8001c9a:	88bb      	ldrh	r3, [r7, #4]
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fc49 	bl	8001538 <LCD_WR_DATA>
 8001ca6:	e0cf      	b.n	8001e48 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X5510)
 8001ca8:	4b6d      	ldr	r3, [pc, #436]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001caa:	889b      	ldrh	r3, [r3, #4]
 8001cac:	f245 5210 	movw	r2, #21776	; 0x5510
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d130      	bne.n	8001d16 <LCD_Fast_DrawPoint+0xde>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 8001cb4:	4b6a      	ldr	r3, [pc, #424]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001cb6:	895b      	ldrh	r3, [r3, #10]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fc2d 	bl	8001518 <LCD_WR_REG>
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	0a1b      	lsrs	r3, r3, #8
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fc37 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 8001cca:	4b65      	ldr	r3, [pc, #404]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001ccc:	895b      	ldrh	r3, [r3, #10]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fc20 	bl	8001518 <LCD_WR_REG>
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fc2a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8001ce4:	4b5e      	ldr	r3, [pc, #376]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001ce6:	899b      	ldrh	r3, [r3, #12]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fc15 	bl	8001518 <LCD_WR_REG>
 8001cee:	88bb      	ldrh	r3, [r7, #4]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fc1f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8001cfa:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001cfc:	899b      	ldrh	r3, [r3, #12]
 8001cfe:	3301      	adds	r3, #1
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fc08 	bl	8001518 <LCD_WR_REG>
 8001d08:	88bb      	ldrh	r3, [r7, #4]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fc12 	bl	8001538 <LCD_WR_DATA>
 8001d14:	e098      	b.n	8001e48 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X1963)
 8001d16:	4b52      	ldr	r3, [pc, #328]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001d18:	889b      	ldrh	r3, [r3, #4]
 8001d1a:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d145      	bne.n	8001dae <LCD_Fast_DrawPoint+0x176>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8001d22:	4b4f      	ldr	r3, [pc, #316]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001d24:	799b      	ldrb	r3, [r3, #6]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <LCD_Fast_DrawPoint+0x100>
 8001d2a:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001d2c:	881a      	ldrh	r2, [r3, #0]
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001d38:	4b49      	ldr	r3, [pc, #292]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001d3a:	895b      	ldrh	r3, [r3, #10]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fbeb 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	0a1b      	lsrs	r3, r3, #8
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fbf5 	bl	8001538 <LCD_WR_DATA>
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fbef 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fbe9 	bl	8001538 <LCD_WR_DATA>
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fbe3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001d72:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001d74:	899b      	ldrh	r3, [r3, #12]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fbce 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001d7c:	88bb      	ldrh	r3, [r7, #4]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fbd8 	bl	8001538 <LCD_WR_DATA>
 8001d88:	88bb      	ldrh	r3, [r7, #4]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fbd2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001d94:	88bb      	ldrh	r3, [r7, #4]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fbcc 	bl	8001538 <LCD_WR_DATA>
 8001da0:	88bb      	ldrh	r3, [r7, #4]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fbc6 	bl	8001538 <LCD_WR_DATA>
 8001dac:	e04c      	b.n	8001e48 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X6804)
 8001dae:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001db0:	889b      	ldrh	r3, [r3, #4]
 8001db2:	f646 0204 	movw	r2, #26628	; 0x6804
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d12d      	bne.n	8001e16 <LCD_Fast_DrawPoint+0x1de>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 8001dba:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001dbc:	799b      	ldrb	r3, [r3, #6]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d106      	bne.n	8001dd0 <LCD_Fast_DrawPoint+0x198>
 8001dc2:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001dc4:	881a      	ldrh	r2, [r3, #0]
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001dd0:	4b23      	ldr	r3, [pc, #140]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001dd2:	895b      	ldrh	r3, [r3, #10]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fb9f 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fba9 	bl	8001538 <LCD_WR_DATA>
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fba3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001df2:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001df4:	899b      	ldrh	r3, [r3, #12]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fb8e 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001dfc:	88bb      	ldrh	r3, [r7, #4]
 8001dfe:	0a1b      	lsrs	r3, r3, #8
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fb98 	bl	8001538 <LCD_WR_DATA>
 8001e08:	88bb      	ldrh	r3, [r7, #4]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fb92 	bl	8001538 <LCD_WR_DATA>
 8001e14:	e018      	b.n	8001e48 <LCD_Fast_DrawPoint+0x210>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001e18:	799b      	ldrb	r3, [r3, #6]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d106      	bne.n	8001e2c <LCD_Fast_DrawPoint+0x1f4>
 8001e1e:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001e20:	881a      	ldrh	r2, [r3, #0]
 8001e22:	88fb      	ldrh	r3, [r7, #6]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001e2e:	895b      	ldrh	r3, [r3, #10]
 8001e30:	88fa      	ldrh	r2, [r7, #6]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fb9d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001e3c:	899b      	ldrh	r3, [r3, #12]
 8001e3e:	88ba      	ldrh	r2, [r7, #4]
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff fb96 	bl	8001574 <LCD_WriteReg>
	}
	LCD->LCD_REG=lcddev.wramcmd;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <LCD_Fast_DrawPoint+0x22c>)
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <LCD_Fast_DrawPoint+0x228>)
 8001e4c:	8912      	ldrh	r2, [r2, #8]
 8001e4e:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM=color;
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <LCD_Fast_DrawPoint+0x22c>)
 8001e52:	887b      	ldrh	r3, [r7, #2]
 8001e54:	8053      	strh	r3, [r2, #2]
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200002bc 	.word	0x200002bc
 8001e64:	6c0007fe 	.word	0x6c0007fe

08001e68 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001e72:	20be      	movs	r0, #190	; 0xbe
 8001e74:	f7ff fb50 	bl	8001518 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001e78:	2005      	movs	r0, #5
 8001e7a:	f7ff fb5d 	bl	8001538 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb2b 	bl	80004dc <__aeabi_i2d>
 8001e86:	a310      	add	r3, pc, #64	; (adr r3, 8001ec8 <LCD_SSD_BackLightSet+0x60>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fb90 	bl	80005b0 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	f7fe fe62 	bl	8000b60 <__aeabi_d2uiz>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fb49 	bl	8001538 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	f7ff fb46 	bl	8001538 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 8001eac:	20ff      	movs	r0, #255	; 0xff
 8001eae:	f7ff fb43 	bl	8001538 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff fb40 	bl	8001538 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff fb3d 	bl	8001538 <LCD_WR_DATA>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	66666666 	.word	0x66666666
 8001ecc:	40046666 	.word	0x40046666

08001ed0 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
	if(dir==0)			//竖屏
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d177      	bne.n	8001fd0 <LCD_Display_Dir+0x100>
	{
		lcddev.dir=0;	//竖屏
 8001ee0:	4b80      	ldr	r3, [pc, #512]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	719a      	strb	r2, [r3, #6]
		lcddev.width=240;
 8001ee6:	4b7f      	ldr	r3, [pc, #508]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001ee8:	22f0      	movs	r2, #240	; 0xf0
 8001eea:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001eec:	4b7d      	ldr	r3, [pc, #500]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001eee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ef2:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310)
 8001ef4:	4b7b      	ldr	r3, [pc, #492]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001ef6:	889b      	ldrh	r3, [r3, #4]
 8001ef8:	f249 3241 	movw	r2, #37697	; 0x9341
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d00b      	beq.n	8001f18 <LCD_Display_Dir+0x48>
 8001f00:	4b78      	ldr	r3, [pc, #480]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f02:	889b      	ldrh	r3, [r3, #4]
 8001f04:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d005      	beq.n	8001f18 <LCD_Display_Dir+0x48>
 8001f0c:	4b75      	ldr	r3, [pc, #468]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f0e:	889b      	ldrh	r3, [r3, #4]
 8001f10:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d11e      	bne.n	8001f56 <LCD_Display_Dir+0x86>
		{
			lcddev.wramcmd=0X2C;
 8001f18:	4b72      	ldr	r3, [pc, #456]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f1a:	222c      	movs	r2, #44	; 0x2c
 8001f1c:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001f1e:	4b71      	ldr	r3, [pc, #452]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f20:	222a      	movs	r2, #42	; 0x2a
 8001f22:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001f24:	4b6f      	ldr	r3, [pc, #444]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f26:	222b      	movs	r2, #43	; 0x2b
 8001f28:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8001f2a:	4b6e      	ldr	r3, [pc, #440]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f2c:	889b      	ldrh	r3, [r3, #4]
 8001f2e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d006      	beq.n	8001f44 <LCD_Display_Dir+0x74>
 8001f36:	4b6b      	ldr	r3, [pc, #428]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f38:	889b      	ldrh	r3, [r3, #4]
 8001f3a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	f040 80c7 	bne.w	80020d2 <LCD_Display_Dir+0x202>
			{
				lcddev.width=320;
 8001f44:	4b67      	ldr	r3, [pc, #412]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f4a:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 8001f4c:	4b65      	ldr	r3, [pc, #404]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f4e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f52:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8001f54:	e0bd      	b.n	80020d2 <LCD_Display_Dir+0x202>
			}
		}else if(lcddev.id==0x5510)
 8001f56:	4b63      	ldr	r3, [pc, #396]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f58:	889b      	ldrh	r3, [r3, #4]
 8001f5a:	f245 5210 	movw	r2, #21776	; 0x5510
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d114      	bne.n	8001f8c <LCD_Display_Dir+0xbc>
		{
			lcddev.wramcmd=0X2C00;
 8001f62:	4b60      	ldr	r3, [pc, #384]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f64:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001f68:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001f6a:	4b5e      	ldr	r3, [pc, #376]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f6c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001f70:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001f72:	4b5c      	ldr	r3, [pc, #368]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f74:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001f78:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 8001f7a:	4b5a      	ldr	r3, [pc, #360]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f80:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8001f82:	4b58      	ldr	r3, [pc, #352]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f84:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001f88:	805a      	strh	r2, [r3, #2]
 8001f8a:	e0a3      	b.n	80020d4 <LCD_Display_Dir+0x204>
		}else if(lcddev.id==0X1963)
 8001f8c:	4b55      	ldr	r3, [pc, #340]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f8e:	889b      	ldrh	r3, [r3, #4]
 8001f90:	f641 1263 	movw	r2, #6499	; 0x1963
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d111      	bne.n	8001fbc <LCD_Display_Dir+0xec>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001f98:	4b52      	ldr	r3, [pc, #328]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001f9a:	222c      	movs	r2, #44	; 0x2c
 8001f9c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 8001f9e:	4b51      	ldr	r3, [pc, #324]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001fa0:	222b      	movs	r2, #43	; 0x2b
 8001fa2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 8001fa4:	4b4f      	ldr	r3, [pc, #316]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001fa6:	222a      	movs	r2, #42	; 0x2a
 8001fa8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 8001faa:	4b4e      	ldr	r3, [pc, #312]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001fac:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001fb0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 8001fb2:	4b4c      	ldr	r3, [pc, #304]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001fb4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001fb8:	805a      	strh	r2, [r3, #2]
 8001fba:	e08b      	b.n	80020d4 <LCD_Display_Dir+0x204>
		}else
		{
			lcddev.wramcmd=0X22;
 8001fbc:	4b49      	ldr	r3, [pc, #292]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001fbe:	2222      	movs	r2, #34	; 0x22
 8001fc0:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X20;
 8001fc2:	4b48      	ldr	r3, [pc, #288]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X21;
 8001fc8:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001fca:	2221      	movs	r2, #33	; 0x21
 8001fcc:	819a      	strh	r2, [r3, #12]
 8001fce:	e081      	b.n	80020d4 <LCD_Display_Dir+0x204>
		}
	}else 				//横屏
	{
		lcddev.dir=1;	//横屏
 8001fd0:	4b44      	ldr	r3, [pc, #272]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	719a      	strb	r2, [r3, #6]
		lcddev.width=320;
 8001fd6:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001fd8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001fdc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001fde:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001fe0:	22f0      	movs	r2, #240	; 0xf0
 8001fe2:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001fe4:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001fe6:	889b      	ldrh	r3, [r3, #4]
 8001fe8:	f249 3241 	movw	r2, #37697	; 0x9341
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d005      	beq.n	8001ffc <LCD_Display_Dir+0x12c>
 8001ff0:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001ff2:	889b      	ldrh	r3, [r3, #4]
 8001ff4:	f245 3210 	movw	r2, #21264	; 0x5310
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d109      	bne.n	8002010 <LCD_Display_Dir+0x140>
		{
			lcddev.wramcmd=0X2C;
 8001ffc:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <LCD_Display_Dir+0x214>)
 8001ffe:	222c      	movs	r2, #44	; 0x2c
 8002000:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <LCD_Display_Dir+0x214>)
 8002004:	222a      	movs	r2, #42	; 0x2a
 8002006:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8002008:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <LCD_Display_Dir+0x214>)
 800200a:	222b      	movs	r2, #43	; 0x2b
 800200c:	819a      	strh	r2, [r3, #12]
 800200e:	e04b      	b.n	80020a8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X6804)
 8002010:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <LCD_Display_Dir+0x214>)
 8002012:	889b      	ldrh	r3, [r3, #4]
 8002014:	f646 0204 	movw	r2, #26628	; 0x6804
 8002018:	4293      	cmp	r3, r2
 800201a:	d109      	bne.n	8002030 <LCD_Display_Dir+0x160>
		{
 			lcddev.wramcmd=0X2C;
 800201c:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <LCD_Display_Dir+0x214>)
 800201e:	222c      	movs	r2, #44	; 0x2c
 8002020:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2B;
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <LCD_Display_Dir+0x214>)
 8002024:	222b      	movs	r2, #43	; 0x2b
 8002026:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;
 8002028:	4b2e      	ldr	r3, [pc, #184]	; (80020e4 <LCD_Display_Dir+0x214>)
 800202a:	222a      	movs	r2, #42	; 0x2a
 800202c:	819a      	strh	r2, [r3, #12]
 800202e:	e03b      	b.n	80020a8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0x5510)
 8002030:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <LCD_Display_Dir+0x214>)
 8002032:	889b      	ldrh	r3, [r3, #4]
 8002034:	f245 5210 	movw	r2, #21776	; 0x5510
 8002038:	4293      	cmp	r3, r2
 800203a:	d114      	bne.n	8002066 <LCD_Display_Dir+0x196>
		{
			lcddev.wramcmd=0X2C00;
 800203c:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <LCD_Display_Dir+0x214>)
 800203e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002042:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8002044:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <LCD_Display_Dir+0x214>)
 8002046:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800204a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <LCD_Display_Dir+0x214>)
 800204e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002052:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8002054:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <LCD_Display_Dir+0x214>)
 8002056:	f44f 7248 	mov.w	r2, #800	; 0x320
 800205a:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <LCD_Display_Dir+0x214>)
 800205e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002062:	805a      	strh	r2, [r3, #2]
 8002064:	e020      	b.n	80020a8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X1963)
 8002066:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <LCD_Display_Dir+0x214>)
 8002068:	889b      	ldrh	r3, [r3, #4]
 800206a:	f641 1263 	movw	r2, #6499	; 0x1963
 800206e:	4293      	cmp	r3, r2
 8002070:	d111      	bne.n	8002096 <LCD_Display_Dir+0x1c6>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <LCD_Display_Dir+0x214>)
 8002074:	222c      	movs	r2, #44	; 0x2c
 8002076:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 8002078:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <LCD_Display_Dir+0x214>)
 800207a:	222a      	movs	r2, #42	; 0x2a
 800207c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <LCD_Display_Dir+0x214>)
 8002080:	222b      	movs	r2, #43	; 0x2b
 8002082:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 8002084:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <LCD_Display_Dir+0x214>)
 8002086:	f44f 7248 	mov.w	r2, #800	; 0x320
 800208a:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <LCD_Display_Dir+0x214>)
 800208e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002092:	805a      	strh	r2, [r3, #2]
 8002094:	e008      	b.n	80020a8 <LCD_Display_Dir+0x1d8>
		}else
		{
			lcddev.wramcmd=0X22;
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <LCD_Display_Dir+0x214>)
 8002098:	2222      	movs	r2, #34	; 0x22
 800209a:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X21;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <LCD_Display_Dir+0x214>)
 800209e:	2221      	movs	r2, #33	; 0x21
 80020a0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X20;
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <LCD_Display_Dir+0x214>)
 80020a4:	2220      	movs	r2, #32
 80020a6:	819a      	strh	r2, [r3, #12]
		}
		if(lcddev.id==0X6804||lcddev.id==0X5310)
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <LCD_Display_Dir+0x214>)
 80020aa:	889b      	ldrh	r3, [r3, #4]
 80020ac:	f646 0204 	movw	r2, #26628	; 0x6804
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d005      	beq.n	80020c0 <LCD_Display_Dir+0x1f0>
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <LCD_Display_Dir+0x214>)
 80020b6:	889b      	ldrh	r3, [r3, #4]
 80020b8:	f245 3210 	movw	r2, #21264	; 0x5310
 80020bc:	4293      	cmp	r3, r2
 80020be:	d109      	bne.n	80020d4 <LCD_Display_Dir+0x204>
		{
			lcddev.width=480;
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <LCD_Display_Dir+0x214>)
 80020c2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020c6:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <LCD_Display_Dir+0x214>)
 80020ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020ce:	805a      	strh	r2, [r3, #2]
 80020d0:	e000      	b.n	80020d4 <LCD_Display_Dir+0x204>
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 80020d2:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7ff fbb5 	bl	8001844 <LCD_Scan_Dir>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200002bc 	.word	0x200002bc

080020e8 <LCD_Set_Window>:
//设置窗口,并自动设置画点坐标到窗口左上角(sx,sy).
//sx,sy:窗口起始坐标(左上角)
//width,height:窗口宽度和高度,必须大于0!!
//窗体大小:width*height.
void LCD_Set_Window(uint16_t sx,uint16_t sy,uint16_t width,uint16_t height)
{
 80020e8:	b590      	push	{r4, r7, lr}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4604      	mov	r4, r0
 80020f0:	4608      	mov	r0, r1
 80020f2:	4611      	mov	r1, r2
 80020f4:	461a      	mov	r2, r3
 80020f6:	4623      	mov	r3, r4
 80020f8:	80fb      	strh	r3, [r7, #6]
 80020fa:	4603      	mov	r3, r0
 80020fc:	80bb      	strh	r3, [r7, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	807b      	strh	r3, [r7, #2]
 8002102:	4613      	mov	r3, r2
 8002104:	803b      	strh	r3, [r7, #0]
	uint8_t hsareg,heareg,vsareg,veareg;
	uint16_t hsaval,heaval,vsaval,veaval;
	uint16_t twidth,theight;
	twidth=sx+width-1;
 8002106:	88fa      	ldrh	r2, [r7, #6]
 8002108:	887b      	ldrh	r3, [r7, #2]
 800210a:	4413      	add	r3, r2
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	81fb      	strh	r3, [r7, #14]
	theight=sy+height-1;
 8002112:	88ba      	ldrh	r2, [r7, #4]
 8002114:	883b      	ldrh	r3, [r7, #0]
 8002116:	4413      	add	r3, r2
 8002118:	b29b      	uxth	r3, r3
 800211a:	3b01      	subs	r3, #1
 800211c:	81bb      	strh	r3, [r7, #12]
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X6804||(lcddev.dir==1&&lcddev.id==0X1963))
 800211e:	4b98      	ldr	r3, [pc, #608]	; (8002380 <LCD_Set_Window+0x298>)
 8002120:	889b      	ldrh	r3, [r3, #4]
 8002122:	f249 3241 	movw	r2, #37697	; 0x9341
 8002126:	4293      	cmp	r3, r2
 8002128:	d015      	beq.n	8002156 <LCD_Set_Window+0x6e>
 800212a:	4b95      	ldr	r3, [pc, #596]	; (8002380 <LCD_Set_Window+0x298>)
 800212c:	889b      	ldrh	r3, [r3, #4]
 800212e:	f245 3210 	movw	r2, #21264	; 0x5310
 8002132:	4293      	cmp	r3, r2
 8002134:	d00f      	beq.n	8002156 <LCD_Set_Window+0x6e>
 8002136:	4b92      	ldr	r3, [pc, #584]	; (8002380 <LCD_Set_Window+0x298>)
 8002138:	889b      	ldrh	r3, [r3, #4]
 800213a:	f646 0204 	movw	r2, #26628	; 0x6804
 800213e:	4293      	cmp	r3, r2
 8002140:	d009      	beq.n	8002156 <LCD_Set_Window+0x6e>
 8002142:	4b8f      	ldr	r3, [pc, #572]	; (8002380 <LCD_Set_Window+0x298>)
 8002144:	799b      	ldrb	r3, [r3, #6]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d140      	bne.n	80021cc <LCD_Set_Window+0xe4>
 800214a:	4b8d      	ldr	r3, [pc, #564]	; (8002380 <LCD_Set_Window+0x298>)
 800214c:	889b      	ldrh	r3, [r3, #4]
 800214e:	f641 1263 	movw	r2, #6499	; 0x1963
 8002152:	4293      	cmp	r3, r2
 8002154:	d13a      	bne.n	80021cc <LCD_Set_Window+0xe4>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8002156:	4b8a      	ldr	r3, [pc, #552]	; (8002380 <LCD_Set_Window+0x298>)
 8002158:	895b      	ldrh	r3, [r3, #10]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff f9dc 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(sx>>8);
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	0a1b      	lsrs	r3, r3, #8
 8002164:	b29b      	uxth	r3, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f9e6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(sx&0XFF);
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	b2db      	uxtb	r3, r3
 8002170:	b29b      	uxth	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f9e0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(twidth>>8);
 8002178:	89fb      	ldrh	r3, [r7, #14]
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	b29b      	uxth	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff f9da 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(twidth&0XFF);
 8002184:	89fb      	ldrh	r3, [r7, #14]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	b29b      	uxth	r3, r3
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f9d4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8002190:	4b7b      	ldr	r3, [pc, #492]	; (8002380 <LCD_Set_Window+0x298>)
 8002192:	899b      	ldrh	r3, [r3, #12]
 8002194:	4618      	mov	r0, r3
 8002196:	f7ff f9bf 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(sy>>8);
 800219a:	88bb      	ldrh	r3, [r7, #4]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	b29b      	uxth	r3, r3
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f9c9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(sy&0XFF);
 80021a6:	88bb      	ldrh	r3, [r7, #4]
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff f9c3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(theight>>8);
 80021b2:	89bb      	ldrh	r3, [r7, #12]
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff f9bd 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(theight&0XFF);
 80021be:	89bb      	ldrh	r3, [r7, #12]
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff f9b7 	bl	8001538 <LCD_WR_DATA>
		LCD_WriteReg(heareg,heaval);
		LCD_WriteReg(vsareg,vsaval);
		LCD_WriteReg(veareg,veaval);
		LCD_SetCursor(sx,sy);	//设置光标位置
	}
}
 80021ca:	e10d      	b.n	80023e8 <LCD_Set_Window+0x300>
	}else if(lcddev.id==0X1963)//1963竖屏特殊处理
 80021cc:	4b6c      	ldr	r3, [pc, #432]	; (8002380 <LCD_Set_Window+0x298>)
 80021ce:	889b      	ldrh	r3, [r3, #4]
 80021d0:	f641 1263 	movw	r2, #6499	; 0x1963
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d150      	bne.n	800227a <LCD_Set_Window+0x192>
		sx=lcddev.width-width-sx;
 80021d8:	4b69      	ldr	r3, [pc, #420]	; (8002380 <LCD_Set_Window+0x298>)
 80021da:	881a      	ldrh	r2, [r3, #0]
 80021dc:	887b      	ldrh	r3, [r7, #2]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	80fb      	strh	r3, [r7, #6]
		height=sy+height-1;
 80021e8:	88ba      	ldrh	r2, [r7, #4]
 80021ea:	883b      	ldrh	r3, [r7, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(lcddev.setxcmd);
 80021f4:	4b62      	ldr	r3, [pc, #392]	; (8002380 <LCD_Set_Window+0x298>)
 80021f6:	895b      	ldrh	r3, [r3, #10]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff f98d 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(sx>>8);
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	b29b      	uxth	r3, r3
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff f997 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(sx&0XFF);
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	b29b      	uxth	r3, r3
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff f991 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA((sx+width-1)>>8);
 8002216:	88fa      	ldrh	r2, [r7, #6]
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	4413      	add	r3, r2
 800221c:	3b01      	subs	r3, #1
 800221e:	121b      	asrs	r3, r3, #8
 8002220:	b29b      	uxth	r3, r3
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff f988 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA((sx+width-1)&0XFF);
 8002228:	88fa      	ldrh	r2, [r7, #6]
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	4413      	add	r3, r2
 800222e:	b29b      	uxth	r3, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	b29b      	uxth	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	b29b      	uxth	r3, r3
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff f97d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800223e:	4b50      	ldr	r3, [pc, #320]	; (8002380 <LCD_Set_Window+0x298>)
 8002240:	899b      	ldrh	r3, [r3, #12]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff f968 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(sy>>8);
 8002248:	88bb      	ldrh	r3, [r7, #4]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	b29b      	uxth	r3, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff f972 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(sy&0XFF);
 8002254:	88bb      	ldrh	r3, [r7, #4]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	b29b      	uxth	r3, r3
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f96c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(height>>8);
 8002260:	883b      	ldrh	r3, [r7, #0]
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	b29b      	uxth	r3, r3
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f966 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(height&0XFF);
 800226c:	883b      	ldrh	r3, [r7, #0]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	b29b      	uxth	r3, r3
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff f960 	bl	8001538 <LCD_WR_DATA>
}
 8002278:	e0b6      	b.n	80023e8 <LCD_Set_Window+0x300>
	}else if(lcddev.id==0X5510)
 800227a:	4b41      	ldr	r3, [pc, #260]	; (8002380 <LCD_Set_Window+0x298>)
 800227c:	889b      	ldrh	r3, [r3, #4]
 800227e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002282:	4293      	cmp	r3, r2
 8002284:	d164      	bne.n	8002350 <LCD_Set_Window+0x268>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(sx>>8);
 8002286:	4b3e      	ldr	r3, [pc, #248]	; (8002380 <LCD_Set_Window+0x298>)
 8002288:	895b      	ldrh	r3, [r3, #10]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f944 	bl	8001518 <LCD_WR_REG>
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	b29b      	uxth	r3, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff f94e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(sx&0XFF);
 800229c:	4b38      	ldr	r3, [pc, #224]	; (8002380 <LCD_Set_Window+0x298>)
 800229e:	895b      	ldrh	r3, [r3, #10]
 80022a0:	3301      	adds	r3, #1
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff f937 	bl	8001518 <LCD_WR_REG>
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff f941 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA(twidth>>8);
 80022b6:	4b32      	ldr	r3, [pc, #200]	; (8002380 <LCD_Set_Window+0x298>)
 80022b8:	895b      	ldrh	r3, [r3, #10]
 80022ba:	3302      	adds	r3, #2
 80022bc:	b29b      	uxth	r3, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f92a 	bl	8001518 <LCD_WR_REG>
 80022c4:	89fb      	ldrh	r3, [r7, #14]
 80022c6:	0a1b      	lsrs	r3, r3, #8
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff f934 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA(twidth&0XFF);
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <LCD_Set_Window+0x298>)
 80022d2:	895b      	ldrh	r3, [r3, #10]
 80022d4:	3303      	adds	r3, #3
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff f91d 	bl	8001518 <LCD_WR_REG>
 80022de:	89fb      	ldrh	r3, [r7, #14]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff f927 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(sy>>8);
 80022ea:	4b25      	ldr	r3, [pc, #148]	; (8002380 <LCD_Set_Window+0x298>)
 80022ec:	899b      	ldrh	r3, [r3, #12]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f912 	bl	8001518 <LCD_WR_REG>
 80022f4:	88bb      	ldrh	r3, [r7, #4]
 80022f6:	0a1b      	lsrs	r3, r3, #8
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff f91c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(sy&0XFF);
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <LCD_Set_Window+0x298>)
 8002302:	899b      	ldrh	r3, [r3, #12]
 8002304:	3301      	adds	r3, #1
 8002306:	b29b      	uxth	r3, r3
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f905 	bl	8001518 <LCD_WR_REG>
 800230e:	88bb      	ldrh	r3, [r7, #4]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	b29b      	uxth	r3, r3
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff f90f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA(theight>>8);
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <LCD_Set_Window+0x298>)
 800231c:	899b      	ldrh	r3, [r3, #12]
 800231e:	3302      	adds	r3, #2
 8002320:	b29b      	uxth	r3, r3
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff f8f8 	bl	8001518 <LCD_WR_REG>
 8002328:	89bb      	ldrh	r3, [r7, #12]
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	b29b      	uxth	r3, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f902 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA(theight&0XFF);
 8002334:	4b12      	ldr	r3, [pc, #72]	; (8002380 <LCD_Set_Window+0x298>)
 8002336:	899b      	ldrh	r3, [r3, #12]
 8002338:	3303      	adds	r3, #3
 800233a:	b29b      	uxth	r3, r3
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff f8eb 	bl	8001518 <LCD_WR_REG>
 8002342:	89bb      	ldrh	r3, [r7, #12]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	b29b      	uxth	r3, r3
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff f8f5 	bl	8001538 <LCD_WR_DATA>
}
 800234e:	e04b      	b.n	80023e8 <LCD_Set_Window+0x300>
		if(lcddev.dir==1)//横屏
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <LCD_Set_Window+0x298>)
 8002352:	799b      	ldrb	r3, [r3, #6]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d115      	bne.n	8002384 <LCD_Set_Window+0x29c>
			hsaval=sy;
 8002358:	88bb      	ldrh	r3, [r7, #4]
 800235a:	82fb      	strh	r3, [r7, #22]
			heaval=theight;
 800235c:	89bb      	ldrh	r3, [r7, #12]
 800235e:	82bb      	strh	r3, [r7, #20]
			vsaval=lcddev.width-twidth-1;
 8002360:	4b07      	ldr	r3, [pc, #28]	; (8002380 <LCD_Set_Window+0x298>)
 8002362:	881a      	ldrh	r2, [r3, #0]
 8002364:	89fb      	ldrh	r3, [r7, #14]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	b29b      	uxth	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	827b      	strh	r3, [r7, #18]
			veaval=lcddev.width-sx-1;
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <LCD_Set_Window+0x298>)
 8002370:	881a      	ldrh	r2, [r3, #0]
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	823b      	strh	r3, [r7, #16]
 800237c:	e00a      	b.n	8002394 <LCD_Set_Window+0x2ac>
 800237e:	bf00      	nop
 8002380:	200002bc 	.word	0x200002bc
			hsaval=sx;
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	82fb      	strh	r3, [r7, #22]
			heaval=twidth;
 8002388:	89fb      	ldrh	r3, [r7, #14]
 800238a:	82bb      	strh	r3, [r7, #20]
			vsaval=sy;
 800238c:	88bb      	ldrh	r3, [r7, #4]
 800238e:	827b      	strh	r3, [r7, #18]
			veaval=theight;
 8002390:	89bb      	ldrh	r3, [r7, #12]
 8002392:	823b      	strh	r3, [r7, #16]
		hsareg=0X50;heareg=0X51;//水平方向窗口寄存器
 8002394:	2350      	movs	r3, #80	; 0x50
 8002396:	72fb      	strb	r3, [r7, #11]
 8002398:	2351      	movs	r3, #81	; 0x51
 800239a:	72bb      	strb	r3, [r7, #10]
		vsareg=0X52;veareg=0X53;//垂直方向窗口寄存器
 800239c:	2352      	movs	r3, #82	; 0x52
 800239e:	727b      	strb	r3, [r7, #9]
 80023a0:	2353      	movs	r3, #83	; 0x53
 80023a2:	723b      	strb	r3, [r7, #8]
		LCD_WriteReg(hsareg,hsaval);
 80023a4:	7afb      	ldrb	r3, [r7, #11]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	8afa      	ldrh	r2, [r7, #22]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff f8e1 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(heareg,heaval);
 80023b2:	7abb      	ldrb	r3, [r7, #10]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	8aba      	ldrh	r2, [r7, #20]
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff f8da 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(vsareg,vsaval);
 80023c0:	7a7b      	ldrb	r3, [r7, #9]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	8a7a      	ldrh	r2, [r7, #18]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff f8d3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(veareg,veaval);
 80023ce:	7a3b      	ldrb	r3, [r7, #8]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	8a3a      	ldrh	r2, [r7, #16]
 80023d4:	4611      	mov	r1, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f8cc 	bl	8001574 <LCD_WriteReg>
		LCD_SetCursor(sx,sy);	//设置光标位置
 80023dc:	88ba      	ldrh	r2, [r7, #4]
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	4611      	mov	r1, r2
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff f8fe 	bl	80015e4 <LCD_SetCursor>
}
 80023e8:	bf00      	nop
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd90      	pop	{r4, r7, pc}

080023f0 <LCD_Init>:
//初始化lcd
//该初始化函数可以初始化各种ILI93XX液晶,但是其他函数是基于ILI9320的!!!
//在其他型号的驱动芯片上没有测试!
void LCD_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	RCC->AHBENR|=1<<8;     	 	//使能FSMC时钟
 80023f4:	4baa      	ldr	r3, [pc, #680]	; (80026a0 <LCD_Init+0x2b0>)
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	4aa9      	ldr	r2, [pc, #676]	; (80026a0 <LCD_Init+0x2b0>)
 80023fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fe:	6153      	str	r3, [r2, #20]
  	RCC->APB2ENR|=1<<3;     	//使能PORTB时钟
 8002400:	4ba7      	ldr	r3, [pc, #668]	; (80026a0 <LCD_Init+0x2b0>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4aa6      	ldr	r2, [pc, #664]	; (80026a0 <LCD_Init+0x2b0>)
 8002406:	f043 0308 	orr.w	r3, r3, #8
 800240a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<5;     	//使能PORTD时钟
 800240c:	4ba4      	ldr	r3, [pc, #656]	; (80026a0 <LCD_Init+0x2b0>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4aa3      	ldr	r2, [pc, #652]	; (80026a0 <LCD_Init+0x2b0>)
 8002412:	f043 0320 	orr.w	r3, r3, #32
 8002416:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<6;     	//使能PORTE时钟
 8002418:	4ba1      	ldr	r3, [pc, #644]	; (80026a0 <LCD_Init+0x2b0>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4aa0      	ldr	r2, [pc, #640]	; (80026a0 <LCD_Init+0x2b0>)
 800241e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002422:	6193      	str	r3, [r2, #24]
 	RCC->APB2ENR|=1<<8;      	//使能PORTG时钟
 8002424:	4b9e      	ldr	r3, [pc, #632]	; (80026a0 <LCD_Init+0x2b0>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	4a9d      	ldr	r2, [pc, #628]	; (80026a0 <LCD_Init+0x2b0>)
 800242a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242e:	6193      	str	r3, [r2, #24]
	GPIOB->CRL&=0XFFFFFFF0;		//PB0 推挽输出 背光
 8002430:	4b9c      	ldr	r3, [pc, #624]	; (80026a4 <LCD_Init+0x2b4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a9b      	ldr	r2, [pc, #620]	; (80026a4 <LCD_Init+0x2b4>)
 8002436:	f023 030f 	bic.w	r3, r3, #15
 800243a:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=0X00000003;
 800243c:	4b99      	ldr	r3, [pc, #612]	; (80026a4 <LCD_Init+0x2b4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a98      	ldr	r2, [pc, #608]	; (80026a4 <LCD_Init+0x2b4>)
 8002442:	f043 0303 	orr.w	r3, r3, #3
 8002446:	6013      	str	r3, [r2, #0]
	//PORTD复用推挽输出
	GPIOD->CRH&=0X00FFF000;
 8002448:	4b97      	ldr	r3, [pc, #604]	; (80026a8 <LCD_Init+0x2b8>)
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4996      	ldr	r1, [pc, #600]	; (80026a8 <LCD_Init+0x2b8>)
 800244e:	4b97      	ldr	r3, [pc, #604]	; (80026ac <LCD_Init+0x2bc>)
 8002450:	4013      	ands	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
	GPIOD->CRH|=0XBB000BBB;
 8002454:	4b94      	ldr	r3, [pc, #592]	; (80026a8 <LCD_Init+0x2b8>)
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	4993      	ldr	r1, [pc, #588]	; (80026a8 <LCD_Init+0x2b8>)
 800245a:	4b95      	ldr	r3, [pc, #596]	; (80026b0 <LCD_Init+0x2c0>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
	GPIOD->CRL&=0XFF00FF00;
 8002460:	4b91      	ldr	r3, [pc, #580]	; (80026a8 <LCD_Init+0x2b8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a90      	ldr	r2, [pc, #576]	; (80026a8 <LCD_Init+0x2b8>)
 8002466:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800246a:	6013      	str	r3, [r2, #0]
	GPIOD->CRL|=0X00BB00BB;
 800246c:	4b8e      	ldr	r3, [pc, #568]	; (80026a8 <LCD_Init+0x2b8>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a8d      	ldr	r2, [pc, #564]	; (80026a8 <LCD_Init+0x2b8>)
 8002472:	f043 13bb 	orr.w	r3, r3, #12255419	; 0xbb00bb
 8002476:	6013      	str	r3, [r2, #0]
	//PORTE复用推挽输出
	GPIOE->CRH&=0X00000000;
 8002478:	4b8e      	ldr	r3, [pc, #568]	; (80026b4 <LCD_Init+0x2c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4b8d      	ldr	r3, [pc, #564]	; (80026b4 <LCD_Init+0x2c4>)
 800247e:	2200      	movs	r2, #0
 8002480:	605a      	str	r2, [r3, #4]
	GPIOE->CRH|=0XBBBBBBBB;
 8002482:	4b8c      	ldr	r3, [pc, #560]	; (80026b4 <LCD_Init+0x2c4>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4a8b      	ldr	r2, [pc, #556]	; (80026b4 <LCD_Init+0x2c4>)
 8002488:	f043 33bb 	orr.w	r3, r3, #3149642683	; 0xbbbbbbbb
 800248c:	6053      	str	r3, [r2, #4]
	GPIOE->CRL&=0X0FFFFFFF;
 800248e:	4b89      	ldr	r3, [pc, #548]	; (80026b4 <LCD_Init+0x2c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a88      	ldr	r2, [pc, #544]	; (80026b4 <LCD_Init+0x2c4>)
 8002494:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002498:	6013      	str	r3, [r2, #0]
	GPIOE->CRL|=0XB0000000;
 800249a:	4b86      	ldr	r3, [pc, #536]	; (80026b4 <LCD_Init+0x2c4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a85      	ldr	r2, [pc, #532]	; (80026b4 <LCD_Init+0x2c4>)
 80024a0:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 80024a4:	6013      	str	r3, [r2, #0]
	//PORTG12复用推挽输出
	GPIOG->CRH&=0XFFF0FFFF;
 80024a6:	4b84      	ldr	r3, [pc, #528]	; (80026b8 <LCD_Init+0x2c8>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4a83      	ldr	r2, [pc, #524]	; (80026b8 <LCD_Init+0x2c8>)
 80024ac:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80024b0:	6053      	str	r3, [r2, #4]
	GPIOG->CRH|=0X000B0000;
 80024b2:	4b81      	ldr	r3, [pc, #516]	; (80026b8 <LCD_Init+0x2c8>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	4a80      	ldr	r2, [pc, #512]	; (80026b8 <LCD_Init+0x2c8>)
 80024b8:	f443 2330 	orr.w	r3, r3, #720896	; 0xb0000
 80024bc:	6053      	str	r3, [r2, #4]
	GPIOG->CRL&=0XFFFFFFF0;//PG0->RS
 80024be:	4b7e      	ldr	r3, [pc, #504]	; (80026b8 <LCD_Init+0x2c8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a7d      	ldr	r2, [pc, #500]	; (80026b8 <LCD_Init+0x2c8>)
 80024c4:	f023 030f 	bic.w	r3, r3, #15
 80024c8:	6013      	str	r3, [r2, #0]
	GPIOG->CRL|=0X0000000B;
 80024ca:	4b7b      	ldr	r3, [pc, #492]	; (80026b8 <LCD_Init+0x2c8>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a7a      	ldr	r2, [pc, #488]	; (80026b8 <LCD_Init+0x2c8>)
 80024d0:	f043 030b 	orr.w	r3, r3, #11
 80024d4:	6013      	str	r3, [r2, #0]

	//寄存器清零
	//bank1有NE1~4,每一个有一个BCR+TCR，所以总共八个寄存器。
	//这里我们使用NE4 ，也就对应BTCR[6],[7]。
	FSMC_Bank1->BTCR[6]=0X00000000;
 80024d6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80024da:	2200      	movs	r2, #0
 80024dc:	619a      	str	r2, [r3, #24]
	FSMC_Bank1->BTCR[7]=0X00000000;
 80024de:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
	FSMC_Bank1E->BWTR[6]=0X00000000;
 80024e6:	4b75      	ldr	r3, [pc, #468]	; (80026bc <LCD_Init+0x2cc>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
	//操作BCR寄存器	使用异步模式
	FSMC_Bank1->BTCR[6]|=1<<12;		//存储器写使能
 80024ec:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80024f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024fa:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<14;		//读写使用不同的时序
 80024fc:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800250a:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<4; 		//存储器数据宽度为16bit
 800250c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002516:	f043 0310 	orr.w	r3, r3, #16
 800251a:	6193      	str	r3, [r2, #24]
	//操作BTR寄存器
	//读时序控制寄存器
	FSMC_Bank1->BTCR[7]|=0<<28;		//模式A
 800251c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002520:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	61d3      	str	r3, [r2, #28]
	FSMC_Bank1->BTCR[7]|=1<<0; 		//地址建立时间（ADDSET）为2个HCLK 1/36M=27ns(实际>200ns)
 8002528:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	61d3      	str	r3, [r2, #28]
	//因为液晶驱动IC的读数据的时候，速度不能太快，尤其对1289这个IC。
	FSMC_Bank1->BTCR[7]|=0XF<<8;  	//数据保存时间为16个HCLK
 8002538:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002542:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8002546:	61d3      	str	r3, [r2, #28]
	//写时序控制寄存器
	FSMC_Bank1E->BWTR[6]|=0<<28; 	//模式A
 8002548:	4b5c      	ldr	r3, [pc, #368]	; (80026bc <LCD_Init+0x2cc>)
 800254a:	4a5c      	ldr	r2, [pc, #368]	; (80026bc <LCD_Init+0x2cc>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	6193      	str	r3, [r2, #24]
	FSMC_Bank1E->BWTR[6]|=0<<0;		//地址建立时间（ADDSET）为1个HCLK
 8002550:	4b5a      	ldr	r3, [pc, #360]	; (80026bc <LCD_Init+0x2cc>)
 8002552:	4a5a      	ldr	r2, [pc, #360]	; (80026bc <LCD_Init+0x2cc>)
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	6193      	str	r3, [r2, #24]
 	//4个HCLK（HCLK=72M）因为液晶驱动IC的写信号脉宽，最少也得50ns。72M/4=24M=55ns
	FSMC_Bank1E->BWTR[6]|=3<<8; 	//数据保存时间为4个HCLK
 8002558:	4b58      	ldr	r3, [pc, #352]	; (80026bc <LCD_Init+0x2cc>)
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	4a57      	ldr	r2, [pc, #348]	; (80026bc <LCD_Init+0x2cc>)
 800255e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002562:	6193      	str	r3, [r2, #24]
	//使能BANK1,区域4
	FSMC_Bank1->BTCR[6]|=1<<0;		//使能BANK1，区域4
 8002564:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800256e:	f043 0301 	orr.w	r3, r3, #1
 8002572:	6193      	str	r3, [r2, #24]
	HAL_Delay(50); 					// delay 50 ms
 8002574:	2032      	movs	r0, #50	; 0x32
 8002576:	f004 fd6d 	bl	8007054 <HAL_Delay>
  	lcddev.id=LCD_ReadReg(0x0000);	//读ID（9320/9325/9328/4531/4535等IC）
 800257a:	2000      	movs	r0, #0
 800257c:	f7ff f810 	bl	80015a0 <LCD_ReadReg>
 8002580:	4603      	mov	r3, r0
 8002582:	461a      	mov	r2, r3
 8002584:	4b4e      	ldr	r3, [pc, #312]	; (80026c0 <LCD_Init+0x2d0>)
 8002586:	809a      	strh	r2, [r3, #4]
  	if(lcddev.id<0XFF||lcddev.id==0XFFFF||lcddev.id==0X9300)//读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002588:	4b4d      	ldr	r3, [pc, #308]	; (80026c0 <LCD_Init+0x2d0>)
 800258a:	889b      	ldrh	r3, [r3, #4]
 800258c:	2bfe      	cmp	r3, #254	; 0xfe
 800258e:	d90b      	bls.n	80025a8 <LCD_Init+0x1b8>
 8002590:	4b4b      	ldr	r3, [pc, #300]	; (80026c0 <LCD_Init+0x2d0>)
 8002592:	889b      	ldrh	r3, [r3, #4]
 8002594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002598:	4293      	cmp	r3, r2
 800259a:	d005      	beq.n	80025a8 <LCD_Init+0x1b8>
 800259c:	4b48      	ldr	r3, [pc, #288]	; (80026c0 <LCD_Init+0x2d0>)
 800259e:	889b      	ldrh	r3, [r3, #4]
 80025a0:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 80025a4:	f040 80fc 	bne.w	80027a0 <LCD_Init+0x3b0>
	{
 		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 80025a8:	20d3      	movs	r0, #211	; 0xd3
 80025aa:	f7fe ffb5 	bl	8001518 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();	//dummy read
 80025ae:	f7fe ffd3 	bl	8001558 <LCD_RD_DATA>
 80025b2:	4603      	mov	r3, r0
 80025b4:	461a      	mov	r2, r3
 80025b6:	4b42      	ldr	r3, [pc, #264]	; (80026c0 <LCD_Init+0x2d0>)
 80025b8:	809a      	strh	r2, [r3, #4]
 		lcddev.id=LCD_RD_DATA();	//读到0X00
 80025ba:	f7fe ffcd 	bl	8001558 <LCD_RD_DATA>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b3f      	ldr	r3, [pc, #252]	; (80026c0 <LCD_Init+0x2d0>)
 80025c4:	809a      	strh	r2, [r3, #4]
  		lcddev.id=LCD_RD_DATA();   	//读取93
 80025c6:	f7fe ffc7 	bl	8001558 <LCD_RD_DATA>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b3c      	ldr	r3, [pc, #240]	; (80026c0 <LCD_Init+0x2d0>)
 80025d0:	809a      	strh	r2, [r3, #4]
 		lcddev.id<<=8;
 80025d2:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <LCD_Init+0x2d0>)
 80025d4:	889b      	ldrh	r3, [r3, #4]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	b29a      	uxth	r2, r3
 80025da:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <LCD_Init+0x2d0>)
 80025dc:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();  	//读取41
 80025de:	f7fe ffbb 	bl	8001558 <LCD_RD_DATA>
 80025e2:	4603      	mov	r3, r0
 80025e4:	461a      	mov	r2, r3
 80025e6:	4b36      	ldr	r3, [pc, #216]	; (80026c0 <LCD_Init+0x2d0>)
 80025e8:	889b      	ldrh	r3, [r3, #4]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b34      	ldr	r3, [pc, #208]	; (80026c0 <LCD_Init+0x2d0>)
 80025f0:	809a      	strh	r2, [r3, #4]
 		if(lcddev.id!=0X9341)		//非9341,尝试是不是6804
 80025f2:	4b33      	ldr	r3, [pc, #204]	; (80026c0 <LCD_Init+0x2d0>)
 80025f4:	889b      	ldrh	r3, [r3, #4]
 80025f6:	f249 3241 	movw	r2, #37697	; 0x9341
 80025fa:	4293      	cmp	r3, r2
 80025fc:	f000 80d0 	beq.w	80027a0 <LCD_Init+0x3b0>
		{
 			LCD_WR_REG(0XBF);
 8002600:	20bf      	movs	r0, #191	; 0xbf
 8002602:	f7fe ff89 	bl	8001518 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA(); 	//dummy read
 8002606:	f7fe ffa7 	bl	8001558 <LCD_RD_DATA>
 800260a:	4603      	mov	r3, r0
 800260c:	461a      	mov	r2, r3
 800260e:	4b2c      	ldr	r3, [pc, #176]	; (80026c0 <LCD_Init+0x2d0>)
 8002610:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA();   	//读回0X01
 8002612:	f7fe ffa1 	bl	8001558 <LCD_RD_DATA>
 8002616:	4603      	mov	r3, r0
 8002618:	461a      	mov	r2, r3
 800261a:	4b29      	ldr	r3, [pc, #164]	; (80026c0 <LCD_Init+0x2d0>)
 800261c:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA(); 	//读回0XD0
 800261e:	f7fe ff9b 	bl	8001558 <LCD_RD_DATA>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	4b26      	ldr	r3, [pc, #152]	; (80026c0 <LCD_Init+0x2d0>)
 8002628:	809a      	strh	r2, [r3, #4]
	  		lcddev.id=LCD_RD_DATA();	//这里读回0X68
 800262a:	f7fe ff95 	bl	8001558 <LCD_RD_DATA>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <LCD_Init+0x2d0>)
 8002634:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 8002636:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <LCD_Init+0x2d0>)
 8002638:	889b      	ldrh	r3, [r3, #4]
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	b29a      	uxth	r2, r3
 800263e:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <LCD_Init+0x2d0>)
 8002640:	809a      	strh	r2, [r3, #4]
	  		lcddev.id|=LCD_RD_DATA();	//这里读回0X04
 8002642:	f7fe ff89 	bl	8001558 <LCD_RD_DATA>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <LCD_Init+0x2d0>)
 800264c:	889b      	ldrh	r3, [r3, #4]
 800264e:	4313      	orrs	r3, r2
 8002650:	b29a      	uxth	r2, r3
 8002652:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <LCD_Init+0x2d0>)
 8002654:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X6804)		//也不是6804,尝试看看是不是NT35310
 8002656:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <LCD_Init+0x2d0>)
 8002658:	889b      	ldrh	r3, [r3, #4]
 800265a:	f646 0204 	movw	r2, #26628	; 0x6804
 800265e:	4293      	cmp	r3, r2
 8002660:	f000 809e 	beq.w	80027a0 <LCD_Init+0x3b0>
			{
				LCD_WR_REG(0XD4);
 8002664:	20d4      	movs	r0, #212	; 0xd4
 8002666:	f7fe ff57 	bl	8001518 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();//dummy read
 800266a:	f7fe ff75 	bl	8001558 <LCD_RD_DATA>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <LCD_Init+0x2d0>)
 8002674:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X01
 8002676:	f7fe ff6f 	bl	8001558 <LCD_RD_DATA>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	4b10      	ldr	r3, [pc, #64]	; (80026c0 <LCD_Init+0x2d0>)
 8002680:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X53
 8002682:	f7fe ff69 	bl	8001558 <LCD_RD_DATA>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <LCD_Init+0x2d0>)
 800268c:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <LCD_Init+0x2d0>)
 8002690:	889b      	ldrh	r3, [r3, #4]
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	b29a      	uxth	r2, r3
 8002696:	4b0a      	ldr	r3, [pc, #40]	; (80026c0 <LCD_Init+0x2d0>)
 8002698:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 800269a:	f7fe ff5d 	bl	8001558 <LCD_RD_DATA>
 800269e:	e011      	b.n	80026c4 <LCD_Init+0x2d4>
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40010c00 	.word	0x40010c00
 80026a8:	40011400 	.word	0x40011400
 80026ac:	00fff000 	.word	0x00fff000
 80026b0:	bb000bbb 	.word	0xbb000bbb
 80026b4:	40011800 	.word	0x40011800
 80026b8:	40012000 	.word	0x40012000
 80026bc:	a0000104 	.word	0xa0000104
 80026c0:	200002bc 	.word	0x200002bc
 80026c4:	4603      	mov	r3, r0
 80026c6:	461a      	mov	r2, r3
 80026c8:	4bc7      	ldr	r3, [pc, #796]	; (80029e8 <LCD_Init+0x5f8>)
 80026ca:	889b      	ldrh	r3, [r3, #4]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	4bc5      	ldr	r3, [pc, #788]	; (80029e8 <LCD_Init+0x5f8>)
 80026d2:	809a      	strh	r2, [r3, #4]
				if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 80026d4:	4bc4      	ldr	r3, [pc, #784]	; (80029e8 <LCD_Init+0x5f8>)
 80026d6:	889b      	ldrh	r3, [r3, #4]
 80026d8:	f245 3210 	movw	r2, #21264	; 0x5310
 80026dc:	4293      	cmp	r3, r2
 80026de:	d05f      	beq.n	80027a0 <LCD_Init+0x3b0>
				{
					LCD_WR_REG(0XDA00);
 80026e0:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80026e4:	f7fe ff18 	bl	8001518 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X00
 80026e8:	f7fe ff36 	bl	8001558 <LCD_RD_DATA>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	4bbd      	ldr	r3, [pc, #756]	; (80029e8 <LCD_Init+0x5f8>)
 80026f2:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDB00);
 80026f4:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 80026f8:	f7fe ff0e 	bl	8001518 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X80
 80026fc:	f7fe ff2c 	bl	8001558 <LCD_RD_DATA>
 8002700:	4603      	mov	r3, r0
 8002702:	461a      	mov	r2, r3
 8002704:	4bb8      	ldr	r3, [pc, #736]	; (80029e8 <LCD_Init+0x5f8>)
 8002706:	809a      	strh	r2, [r3, #4]
					lcddev.id<<=8;
 8002708:	4bb7      	ldr	r3, [pc, #732]	; (80029e8 <LCD_Init+0x5f8>)
 800270a:	889b      	ldrh	r3, [r3, #4]
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	b29a      	uxth	r2, r3
 8002710:	4bb5      	ldr	r3, [pc, #724]	; (80029e8 <LCD_Init+0x5f8>)
 8002712:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8002714:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002718:	f7fe fefe 	bl	8001518 <LCD_WR_REG>
					lcddev.id|=LCD_RD_DATA();		//读回0X00
 800271c:	f7fe ff1c 	bl	8001558 <LCD_RD_DATA>
 8002720:	4603      	mov	r3, r0
 8002722:	461a      	mov	r2, r3
 8002724:	4bb0      	ldr	r3, [pc, #704]	; (80029e8 <LCD_Init+0x5f8>)
 8002726:	889b      	ldrh	r3, [r3, #4]
 8002728:	4313      	orrs	r3, r2
 800272a:	b29a      	uxth	r2, r3
 800272c:	4bae      	ldr	r3, [pc, #696]	; (80029e8 <LCD_Init+0x5f8>)
 800272e:	809a      	strh	r2, [r3, #4]
					if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8002730:	4bad      	ldr	r3, [pc, #692]	; (80029e8 <LCD_Init+0x5f8>)
 8002732:	889b      	ldrh	r3, [r3, #4]
 8002734:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002738:	d103      	bne.n	8002742 <LCD_Init+0x352>
 800273a:	4bab      	ldr	r3, [pc, #684]	; (80029e8 <LCD_Init+0x5f8>)
 800273c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002740:	809a      	strh	r2, [r3, #4]
					if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8002742:	4ba9      	ldr	r3, [pc, #676]	; (80029e8 <LCD_Init+0x5f8>)
 8002744:	889b      	ldrh	r3, [r3, #4]
 8002746:	f245 5210 	movw	r2, #21776	; 0x5510
 800274a:	4293      	cmp	r3, r2
 800274c:	d028      	beq.n	80027a0 <LCD_Init+0x3b0>
					{
						LCD_WR_REG(0XA1);
 800274e:	20a1      	movs	r0, #161	; 0xa1
 8002750:	f7fe fee2 	bl	8001518 <LCD_WR_REG>
						lcddev.id=LCD_RD_DATA();
 8002754:	f7fe ff00 	bl	8001558 <LCD_RD_DATA>
 8002758:	4603      	mov	r3, r0
 800275a:	461a      	mov	r2, r3
 800275c:	4ba2      	ldr	r3, [pc, #648]	; (80029e8 <LCD_Init+0x5f8>)
 800275e:	809a      	strh	r2, [r3, #4]
						lcddev.id=LCD_RD_DATA();	//读回0X57
 8002760:	f7fe fefa 	bl	8001558 <LCD_RD_DATA>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	4b9f      	ldr	r3, [pc, #636]	; (80029e8 <LCD_Init+0x5f8>)
 800276a:	809a      	strh	r2, [r3, #4]
						lcddev.id<<=8;
 800276c:	4b9e      	ldr	r3, [pc, #632]	; (80029e8 <LCD_Init+0x5f8>)
 800276e:	889b      	ldrh	r3, [r3, #4]
 8002770:	021b      	lsls	r3, r3, #8
 8002772:	b29a      	uxth	r2, r3
 8002774:	4b9c      	ldr	r3, [pc, #624]	; (80029e8 <LCD_Init+0x5f8>)
 8002776:	809a      	strh	r2, [r3, #4]
						lcddev.id|=LCD_RD_DATA();	//读回0X61
 8002778:	f7fe feee 	bl	8001558 <LCD_RD_DATA>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	4b99      	ldr	r3, [pc, #612]	; (80029e8 <LCD_Init+0x5f8>)
 8002782:	889b      	ldrh	r3, [r3, #4]
 8002784:	4313      	orrs	r3, r2
 8002786:	b29a      	uxth	r2, r3
 8002788:	4b97      	ldr	r3, [pc, #604]	; (80029e8 <LCD_Init+0x5f8>)
 800278a:	809a      	strh	r2, [r3, #4]
						if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 800278c:	4b96      	ldr	r3, [pc, #600]	; (80029e8 <LCD_Init+0x5f8>)
 800278e:	889b      	ldrh	r3, [r3, #4]
 8002790:	f245 7261 	movw	r2, #22369	; 0x5761
 8002794:	4293      	cmp	r3, r2
 8002796:	d103      	bne.n	80027a0 <LCD_Init+0x3b0>
 8002798:	4b93      	ldr	r3, [pc, #588]	; (80029e8 <LCD_Init+0x5f8>)
 800279a:	f641 1263 	movw	r2, #6499	; 0x1963
 800279e:	809a      	strh	r2, [r3, #4]
					}
				}
			}
 		}
	}
 	printf("LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 80027a0:	4b91      	ldr	r3, [pc, #580]	; (80029e8 <LCD_Init+0x5f8>)
 80027a2:	889b      	ldrh	r3, [r3, #4]
 80027a4:	4619      	mov	r1, r3
 80027a6:	4891      	ldr	r0, [pc, #580]	; (80029ec <LCD_Init+0x5fc>)
 80027a8:	f007 ffe4 	bl	800a774 <iprintf>
	if(lcddev.id==0X9341)	//9341初始化
 80027ac:	4b8e      	ldr	r3, [pc, #568]	; (80029e8 <LCD_Init+0x5f8>)
 80027ae:	889b      	ldrh	r3, [r3, #4]
 80027b0:	f249 3241 	movw	r2, #37697	; 0x9341
 80027b4:	4293      	cmp	r3, r2
 80027b6:	f040 811b 	bne.w	80029f0 <LCD_Init+0x600>
	{
		LCD_WR_REG(0xCF);
 80027ba:	20cf      	movs	r0, #207	; 0xcf
 80027bc:	f7fe feac 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80027c0:	2000      	movs	r0, #0
 80027c2:	f7fe feb9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 80027c6:	20c1      	movs	r0, #193	; 0xc1
 80027c8:	f7fe feb6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 80027cc:	2030      	movs	r0, #48	; 0x30
 80027ce:	f7fe feb3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 80027d2:	20ed      	movs	r0, #237	; 0xed
 80027d4:	f7fe fea0 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 80027d8:	2064      	movs	r0, #100	; 0x64
 80027da:	f7fe fead 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80027de:	2003      	movs	r0, #3
 80027e0:	f7fe feaa 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 80027e4:	2012      	movs	r0, #18
 80027e6:	f7fe fea7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 80027ea:	2081      	movs	r0, #129	; 0x81
 80027ec:	f7fe fea4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 80027f0:	20e8      	movs	r0, #232	; 0xe8
 80027f2:	f7fe fe91 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 80027f6:	2085      	movs	r0, #133	; 0x85
 80027f8:	f7fe fe9e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 80027fc:	2010      	movs	r0, #16
 80027fe:	f7fe fe9b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8002802:	207a      	movs	r0, #122	; 0x7a
 8002804:	f7fe fe98 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 8002808:	20cb      	movs	r0, #203	; 0xcb
 800280a:	f7fe fe85 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 800280e:	2039      	movs	r0, #57	; 0x39
 8002810:	f7fe fe92 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002814:	202c      	movs	r0, #44	; 0x2c
 8002816:	f7fe fe8f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800281a:	2000      	movs	r0, #0
 800281c:	f7fe fe8c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8002820:	2034      	movs	r0, #52	; 0x34
 8002822:	f7fe fe89 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002826:	2002      	movs	r0, #2
 8002828:	f7fe fe86 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 800282c:	20f7      	movs	r0, #247	; 0xf7
 800282e:	f7fe fe73 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8002832:	2020      	movs	r0, #32
 8002834:	f7fe fe80 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8002838:	20ea      	movs	r0, #234	; 0xea
 800283a:	f7fe fe6d 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800283e:	2000      	movs	r0, #0
 8002840:	f7fe fe7a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002844:	2000      	movs	r0, #0
 8002846:	f7fe fe77 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 800284a:	20c0      	movs	r0, #192	; 0xc0
 800284c:	f7fe fe64 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002850:	201b      	movs	r0, #27
 8002852:	f7fe fe71 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 8002856:	20c1      	movs	r0, #193	; 0xc1
 8002858:	f7fe fe5e 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 800285c:	2001      	movs	r0, #1
 800285e:	f7fe fe6b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 8002862:	20c5      	movs	r0, #197	; 0xc5
 8002864:	f7fe fe58 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 8002868:	2030      	movs	r0, #48	; 0x30
 800286a:	f7fe fe65 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 800286e:	2030      	movs	r0, #48	; 0x30
 8002870:	f7fe fe62 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 8002874:	20c7      	movs	r0, #199	; 0xc7
 8002876:	f7fe fe4f 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 800287a:	20b7      	movs	r0, #183	; 0xb7
 800287c:	f7fe fe5c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 8002880:	2036      	movs	r0, #54	; 0x36
 8002882:	f7fe fe49 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 8002886:	2048      	movs	r0, #72	; 0x48
 8002888:	f7fe fe56 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 800288c:	203a      	movs	r0, #58	; 0x3a
 800288e:	f7fe fe43 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 8002892:	2055      	movs	r0, #85	; 0x55
 8002894:	f7fe fe50 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 8002898:	20b1      	movs	r0, #177	; 0xb1
 800289a:	f7fe fe3d 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800289e:	2000      	movs	r0, #0
 80028a0:	f7fe fe4a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 80028a4:	201a      	movs	r0, #26
 80028a6:	f7fe fe47 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 80028aa:	20b6      	movs	r0, #182	; 0xb6
 80028ac:	f7fe fe34 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 80028b0:	200a      	movs	r0, #10
 80028b2:	f7fe fe41 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80028b6:	20a2      	movs	r0, #162	; 0xa2
 80028b8:	f7fe fe3e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80028bc:	20f2      	movs	r0, #242	; 0xf2
 80028be:	f7fe fe2b 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7fe fe38 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 80028c8:	2026      	movs	r0, #38	; 0x26
 80028ca:	f7fe fe25 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80028ce:	2001      	movs	r0, #1
 80028d0:	f7fe fe32 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 80028d4:	20e0      	movs	r0, #224	; 0xe0
 80028d6:	f7fe fe1f 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 80028da:	200f      	movs	r0, #15
 80028dc:	f7fe fe2c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 80028e0:	202a      	movs	r0, #42	; 0x2a
 80028e2:	f7fe fe29 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 80028e6:	2028      	movs	r0, #40	; 0x28
 80028e8:	f7fe fe26 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 80028ec:	2008      	movs	r0, #8
 80028ee:	f7fe fe23 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 80028f2:	200e      	movs	r0, #14
 80028f4:	f7fe fe20 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 80028f8:	2008      	movs	r0, #8
 80028fa:	f7fe fe1d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 80028fe:	2054      	movs	r0, #84	; 0x54
 8002900:	f7fe fe1a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 8002904:	20a9      	movs	r0, #169	; 0xa9
 8002906:	f7fe fe17 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 800290a:	2043      	movs	r0, #67	; 0x43
 800290c:	f7fe fe14 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8002910:	200a      	movs	r0, #10
 8002912:	f7fe fe11 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8002916:	200f      	movs	r0, #15
 8002918:	f7fe fe0e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800291c:	2000      	movs	r0, #0
 800291e:	f7fe fe0b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002922:	2000      	movs	r0, #0
 8002924:	f7fe fe08 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002928:	2000      	movs	r0, #0
 800292a:	f7fe fe05 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800292e:	2000      	movs	r0, #0
 8002930:	f7fe fe02 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 8002934:	20e1      	movs	r0, #225	; 0xe1
 8002936:	f7fe fdef 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800293a:	2000      	movs	r0, #0
 800293c:	f7fe fdfc 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 8002940:	2015      	movs	r0, #21
 8002942:	f7fe fdf9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8002946:	2017      	movs	r0, #23
 8002948:	f7fe fdf6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 800294c:	2007      	movs	r0, #7
 800294e:	f7fe fdf3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8002952:	2011      	movs	r0, #17
 8002954:	f7fe fdf0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 8002958:	2006      	movs	r0, #6
 800295a:	f7fe fded 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 800295e:	202b      	movs	r0, #43	; 0x2b
 8002960:	f7fe fdea 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002964:	2056      	movs	r0, #86	; 0x56
 8002966:	f7fe fde7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 800296a:	203c      	movs	r0, #60	; 0x3c
 800296c:	f7fe fde4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8002970:	2005      	movs	r0, #5
 8002972:	f7fe fde1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8002976:	2010      	movs	r0, #16
 8002978:	f7fe fdde 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 800297c:	200f      	movs	r0, #15
 800297e:	f7fe fddb 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8002982:	203f      	movs	r0, #63	; 0x3f
 8002984:	f7fe fdd8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8002988:	203f      	movs	r0, #63	; 0x3f
 800298a:	f7fe fdd5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 800298e:	200f      	movs	r0, #15
 8002990:	f7fe fdd2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 8002994:	202b      	movs	r0, #43	; 0x2b
 8002996:	f7fe fdbf 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800299a:	2000      	movs	r0, #0
 800299c:	f7fe fdcc 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7fe fdc9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 80029a6:	2001      	movs	r0, #1
 80029a8:	f7fe fdc6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 80029ac:	203f      	movs	r0, #63	; 0x3f
 80029ae:	f7fe fdc3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 80029b2:	202a      	movs	r0, #42	; 0x2a
 80029b4:	f7fe fdb0 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7fe fdbd 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029be:	2000      	movs	r0, #0
 80029c0:	f7fe fdba 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029c4:	2000      	movs	r0, #0
 80029c6:	f7fe fdb7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 80029ca:	20ef      	movs	r0, #239	; 0xef
 80029cc:	f7fe fdb4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 80029d0:	2011      	movs	r0, #17
 80029d2:	f7fe fda1 	bl	8001518 <LCD_WR_REG>
		HAL_Delay(20);
 80029d6:	2014      	movs	r0, #20
 80029d8:	f004 fb3c 	bl	8007054 <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 80029dc:	2029      	movs	r0, #41	; 0x29
 80029de:	f7fe fd9b 	bl	8001518 <LCD_WR_REG>
 80029e2:	f003 b923 	b.w	8005c2c <LCD_Init+0x383c>
 80029e6:	bf00      	nop
 80029e8:	200002bc 	.word	0x200002bc
 80029ec:	0800c8a8 	.word	0x0800c8a8
	}else if(lcddev.id==0x6804) //6804初始化
 80029f0:	4b58      	ldr	r3, [pc, #352]	; (8002b54 <LCD_Init+0x764>)
 80029f2:	889b      	ldrh	r3, [r3, #4]
 80029f4:	f646 0204 	movw	r2, #26628	; 0x6804
 80029f8:	4293      	cmp	r3, r2
 80029fa:	f040 80ad 	bne.w	8002b58 <LCD_Init+0x768>
	{
		LCD_WR_REG(0X11);
 80029fe:	2011      	movs	r0, #17
 8002a00:	f7fe fd8a 	bl	8001518 <LCD_WR_REG>
		HAL_Delay(20);
 8002a04:	2014      	movs	r0, #20
 8002a06:	f004 fb25 	bl	8007054 <HAL_Delay>
		LCD_WR_REG(0XD0);//VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002a0a:	20d0      	movs	r0, #208	; 0xd0
 8002a0c:	f7fe fd84 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0X07);
 8002a10:	2007      	movs	r0, #7
 8002a12:	f7fe fd91 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X42);
 8002a16:	2042      	movs	r0, #66	; 0x42
 8002a18:	f7fe fd8e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X1D);
 8002a1c:	201d      	movs	r0, #29
 8002a1e:	f7fe fd8b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0XD1);//VCOMH VCOM_AC amplitude setting
 8002a22:	20d1      	movs	r0, #209	; 0xd1
 8002a24:	f7fe fd78 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7fe fd85 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X1a);
 8002a2e:	201a      	movs	r0, #26
 8002a30:	f7fe fd82 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X09);
 8002a34:	2009      	movs	r0, #9
 8002a36:	f7fe fd7f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0XD2);//Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002a3a:	20d2      	movs	r0, #210	; 0xd2
 8002a3c:	f7fe fd6c 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 8002a40:	2001      	movs	r0, #1
 8002a42:	f7fe fd79 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X22);
 8002a46:	2022      	movs	r0, #34	; 0x22
 8002a48:	f7fe fd76 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0XC0);//REV SM GS
 8002a4c:	20c0      	movs	r0, #192	; 0xc0
 8002a4e:	f7fe fd63 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0X10);
 8002a52:	2010      	movs	r0, #16
 8002a54:	f7fe fd70 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X3B);
 8002a58:	203b      	movs	r0, #59	; 0x3b
 8002a5a:	f7fe fd6d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f7fe fd6a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X02);
 8002a64:	2002      	movs	r0, #2
 8002a66:	f7fe fd67 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X11);
 8002a6a:	2011      	movs	r0, #17
 8002a6c:	f7fe fd64 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0XC5);// Frame rate setting = 72HZ  when setting 0x03
 8002a70:	20c5      	movs	r0, #197	; 0xc5
 8002a72:	f7fe fd51 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0X03);
 8002a76:	2003      	movs	r0, #3
 8002a78:	f7fe fd5e 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0XC8);//Gamma setting
 8002a7c:	20c8      	movs	r0, #200	; 0xc8
 8002a7e:	f7fe fd4b 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7fe fd58 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 8002a88:	2025      	movs	r0, #37	; 0x25
 8002a8a:	f7fe fd55 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X21);
 8002a8e:	2021      	movs	r0, #33	; 0x21
 8002a90:	f7fe fd52 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X05);
 8002a94:	2005      	movs	r0, #5
 8002a96:	f7fe fd4f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7fe fd4c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X0a);
 8002aa0:	200a      	movs	r0, #10
 8002aa2:	f7fe fd49 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X65);
 8002aa6:	2065      	movs	r0, #101	; 0x65
 8002aa8:	f7fe fd46 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 8002aac:	2025      	movs	r0, #37	; 0x25
 8002aae:	f7fe fd43 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X77);
 8002ab2:	2077      	movs	r0, #119	; 0x77
 8002ab4:	f7fe fd40 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X50);
 8002ab8:	2050      	movs	r0, #80	; 0x50
 8002aba:	f7fe fd3d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X0f);
 8002abe:	200f      	movs	r0, #15
 8002ac0:	f7fe fd3a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f7fe fd37 	bl	8001538 <LCD_WR_DATA>

   		LCD_WR_REG(0XF8);
 8002aca:	20f8      	movs	r0, #248	; 0xf8
 8002acc:	f7fe fd24 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	f7fe fd31 	bl	8001538 <LCD_WR_DATA>

 		LCD_WR_REG(0XFE);
 8002ad6:	20fe      	movs	r0, #254	; 0xfe
 8002ad8:	f7fe fd1e 	bl	8001518 <LCD_WR_REG>
 		LCD_WR_DATA(0X00);
 8002adc:	2000      	movs	r0, #0
 8002ade:	f7fe fd2b 	bl	8001538 <LCD_WR_DATA>
 		LCD_WR_DATA(0X02);
 8002ae2:	2002      	movs	r0, #2
 8002ae4:	f7fe fd28 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0X20);//Exit invert mode
 8002ae8:	2020      	movs	r0, #32
 8002aea:	f7fe fd15 	bl	8001518 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002aee:	2036      	movs	r0, #54	; 0x36
 8002af0:	f7fe fd12 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0X08);//原来是a
 8002af4:	2008      	movs	r0, #8
 8002af6:	f7fe fd1f 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0X3A);
 8002afa:	203a      	movs	r0, #58	; 0x3a
 8002afc:	f7fe fd0c 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0X55);//16位模式
 8002b00:	2055      	movs	r0, #85	; 0x55
 8002b02:	f7fe fd19 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0X2B);
 8002b06:	202b      	movs	r0, #43	; 0x2b
 8002b08:	f7fe fd06 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7fe fd13 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fe fd10 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f7fe fd0d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X3F);
 8002b1e:	203f      	movs	r0, #63	; 0x3f
 8002b20:	f7fe fd0a 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0X2A);
 8002b24:	202a      	movs	r0, #42	; 0x2a
 8002b26:	f7fe fcf7 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7fe fd04 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002b30:	2000      	movs	r0, #0
 8002b32:	f7fe fd01 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8002b36:	2001      	movs	r0, #1
 8002b38:	f7fe fcfe 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0XDF);
 8002b3c:	20df      	movs	r0, #223	; 0xdf
 8002b3e:	f7fe fcfb 	bl	8001538 <LCD_WR_DATA>
		HAL_Delay(120);
 8002b42:	2078      	movs	r0, #120	; 0x78
 8002b44:	f004 fa86 	bl	8007054 <HAL_Delay>
		LCD_WR_REG(0X29);
 8002b48:	2029      	movs	r0, #41	; 0x29
 8002b4a:	f7fe fce5 	bl	8001518 <LCD_WR_REG>
 8002b4e:	f003 b86d 	b.w	8005c2c <LCD_Init+0x383c>
 8002b52:	bf00      	nop
 8002b54:	200002bc 	.word	0x200002bc
 	}else if(lcddev.id==0x5310)
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <LCD_Init+0x778>)
 8002b5a:	889b      	ldrh	r3, [r3, #4]
 8002b5c:	f245 3210 	movw	r2, #21264	; 0x5310
 8002b60:	4293      	cmp	r3, r2
 8002b62:	f040 877c 	bne.w	8003a5e <LCD_Init+0x166e>
 8002b66:	e001      	b.n	8002b6c <LCD_Init+0x77c>
 8002b68:	200002bc 	.word	0x200002bc
	{
		LCD_WR_REG(0xED);
 8002b6c:	20ed      	movs	r0, #237	; 0xed
 8002b6e:	f7fe fcd3 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002b72:	2001      	movs	r0, #1
 8002b74:	f7fe fce0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 8002b78:	20fe      	movs	r0, #254	; 0xfe
 8002b7a:	f7fe fcdd 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 8002b7e:	20ee      	movs	r0, #238	; 0xee
 8002b80:	f7fe fcca 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 8002b84:	20de      	movs	r0, #222	; 0xde
 8002b86:	f7fe fcd7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002b8a:	2021      	movs	r0, #33	; 0x21
 8002b8c:	f7fe fcd4 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 8002b90:	20f1      	movs	r0, #241	; 0xf1
 8002b92:	f7fe fcc1 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002b96:	2001      	movs	r0, #1
 8002b98:	f7fe fcce 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 8002b9c:	20df      	movs	r0, #223	; 0xdf
 8002b9e:	f7fe fcbb 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 8002ba2:	2010      	movs	r0, #16
 8002ba4:	f7fe fcc8 	bl	8001538 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8002ba8:	20c4      	movs	r0, #196	; 0xc4
 8002baa:	f7fe fcb5 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 8002bae:	208f      	movs	r0, #143	; 0x8f
 8002bb0:	f7fe fcc2 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8002bb4:	20c6      	movs	r0, #198	; 0xc6
 8002bb6:	f7fe fcaf 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f7fe fcbc 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8002bc0:	20e2      	movs	r0, #226	; 0xe2
 8002bc2:	f7fe fcb9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8002bc6:	20e2      	movs	r0, #226	; 0xe2
 8002bc8:	f7fe fcb6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8002bcc:	20e2      	movs	r0, #226	; 0xe2
 8002bce:	f7fe fcb3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 8002bd2:	20bf      	movs	r0, #191	; 0xbf
 8002bd4:	f7fe fca0 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002bd8:	20aa      	movs	r0, #170	; 0xaa
 8002bda:	f7fe fcad 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 8002bde:	20b0      	movs	r0, #176	; 0xb0
 8002be0:	f7fe fc9a 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 8002be4:	200d      	movs	r0, #13
 8002be6:	f7fe fca7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bea:	2000      	movs	r0, #0
 8002bec:	f7fe fca4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8002bf0:	200d      	movs	r0, #13
 8002bf2:	f7fe fca1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f7fe fc9e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8002bfc:	2011      	movs	r0, #17
 8002bfe:	f7fe fc9b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c02:	2000      	movs	r0, #0
 8002c04:	f7fe fc98 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8002c08:	2019      	movs	r0, #25
 8002c0a:	f7fe fc95 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f7fe fc92 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002c14:	2021      	movs	r0, #33	; 0x21
 8002c16:	f7fe fc8f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f7fe fc8c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8002c20:	202d      	movs	r0, #45	; 0x2d
 8002c22:	f7fe fc89 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c26:	2000      	movs	r0, #0
 8002c28:	f7fe fc86 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8002c2c:	203d      	movs	r0, #61	; 0x3d
 8002c2e:	f7fe fc83 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7fe fc80 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002c38:	205d      	movs	r0, #93	; 0x5d
 8002c3a:	f7fe fc7d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f7fe fc7a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002c44:	205d      	movs	r0, #93	; 0x5d
 8002c46:	f7fe fc77 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7fe fc74 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8002c50:	20b1      	movs	r0, #177	; 0xb1
 8002c52:	f7fe fc61 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 8002c56:	2080      	movs	r0, #128	; 0x80
 8002c58:	f7fe fc6e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f7fe fc6b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8002c62:	208b      	movs	r0, #139	; 0x8b
 8002c64:	f7fe fc68 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f7fe fc65 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8002c6e:	2096      	movs	r0, #150	; 0x96
 8002c70:	f7fe fc62 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fe fc5f 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 8002c7a:	20b2      	movs	r0, #178	; 0xb2
 8002c7c:	f7fe fc4c 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fe fc59 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7fe fc56 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002c8c:	2002      	movs	r0, #2
 8002c8e:	f7fe fc53 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7fe fc50 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8002c98:	2003      	movs	r0, #3
 8002c9a:	f7fe fc4d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fe fc4a 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 8002ca4:	20b3      	movs	r0, #179	; 0xb3
 8002ca6:	f7fe fc37 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7fe fc44 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7fe fc41 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fe fc3e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f7fe fc3b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f7fe fc38 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f7fe fc35 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fe fc32 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	f7fe fc2f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7fe fc2c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f7fe fc29 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fe fc26 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cec:	2000      	movs	r0, #0
 8002cee:	f7fe fc23 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7fe fc20 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7fe fc1d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f7fe fc1a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7fe fc17 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7fe fc14 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7fe fc11 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7fe fc0e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f7fe fc0b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7fe fc08 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f7fe fc05 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f7fe fc02 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7fe fbff 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 8002d3a:	20b4      	movs	r0, #180	; 0xb4
 8002d3c:	f7fe fbec 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8002d40:	208b      	movs	r0, #139	; 0x8b
 8002d42:	f7fe fbf9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d46:	2000      	movs	r0, #0
 8002d48:	f7fe fbf6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8002d4c:	2096      	movs	r0, #150	; 0x96
 8002d4e:	f7fe fbf3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7fe fbf0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8002d58:	20a1      	movs	r0, #161	; 0xa1
 8002d5a:	f7fe fbed 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7fe fbea 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 8002d64:	20b5      	movs	r0, #181	; 0xb5
 8002d66:	f7fe fbd7 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 8002d6a:	2002      	movs	r0, #2
 8002d6c:	f7fe fbe4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fe fbe1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8002d76:	2003      	movs	r0, #3
 8002d78:	f7fe fbde 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fe fbdb 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8002d82:	2004      	movs	r0, #4
 8002d84:	f7fe fbd8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7fe fbd5 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 8002d8e:	20b6      	movs	r0, #182	; 0xb6
 8002d90:	f7fe fbc2 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fe fbcf 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f7fe fbcc 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 8002da0:	20b7      	movs	r0, #183	; 0xb7
 8002da2:	f7fe fbb9 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7fe fbc6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fe fbc3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8002db2:	203f      	movs	r0, #63	; 0x3f
 8002db4:	f7fe fbc0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7fe fbbd 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 8002dbe:	205e      	movs	r0, #94	; 0x5e
 8002dc0:	f7fe fbba 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7fe fbb7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002dca:	2064      	movs	r0, #100	; 0x64
 8002dcc:	f7fe fbb4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f7fe fbb1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 8002dd6:	208c      	movs	r0, #140	; 0x8c
 8002dd8:	f7fe fbae 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7fe fbab 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 8002de2:	20ac      	movs	r0, #172	; 0xac
 8002de4:	f7fe fba8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002de8:	2000      	movs	r0, #0
 8002dea:	f7fe fba5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002dee:	20dc      	movs	r0, #220	; 0xdc
 8002df0:	f7fe fba2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fe fb9f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8002dfa:	2070      	movs	r0, #112	; 0x70
 8002dfc:	f7fe fb9c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fe fb99 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 8002e06:	2090      	movs	r0, #144	; 0x90
 8002e08:	f7fe fb96 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7fe fb93 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 8002e12:	20eb      	movs	r0, #235	; 0xeb
 8002e14:	f7fe fb90 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7fe fb8d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002e1e:	20dc      	movs	r0, #220	; 0xdc
 8002e20:	f7fe fb8a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e24:	2000      	movs	r0, #0
 8002e26:	f7fe fb87 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8002e2a:	20b8      	movs	r0, #184	; 0xb8
 8002e2c:	f7fe fb74 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7fe fb81 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7fe fb7e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7fe fb7b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7fe fb78 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f7fe fb75 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7fe fb72 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7fe fb6f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7fe fb6c 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8002e60:	20ba      	movs	r0, #186	; 0xba
 8002e62:	f7fe fb59 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 8002e66:	2024      	movs	r0, #36	; 0x24
 8002e68:	f7fe fb66 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f7fe fb63 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fe fb60 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7fe fb5d 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 8002e7e:	20c1      	movs	r0, #193	; 0xc1
 8002e80:	f7fe fb4a 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8002e84:	2020      	movs	r0, #32
 8002e86:	f7fe fb57 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7fe fb54 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8002e90:	2054      	movs	r0, #84	; 0x54
 8002e92:	f7fe fb51 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7fe fb4e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8002e9c:	20ff      	movs	r0, #255	; 0xff
 8002e9e:	f7fe fb4b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fe fb48 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 8002ea8:	20c2      	movs	r0, #194	; 0xc2
 8002eaa:	f7fe fb35 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8002eae:	200a      	movs	r0, #10
 8002eb0:	f7fe fb42 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7fe fb3f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8002eba:	2004      	movs	r0, #4
 8002ebc:	f7fe fb3c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f7fe fb39 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 8002ec6:	20c3      	movs	r0, #195	; 0xc3
 8002ec8:	f7fe fb26 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8002ecc:	203c      	movs	r0, #60	; 0x3c
 8002ece:	f7fe fb33 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7fe fb30 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8002ed8:	203a      	movs	r0, #58	; 0x3a
 8002eda:	f7fe fb2d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7fe fb2a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 8002ee4:	2039      	movs	r0, #57	; 0x39
 8002ee6:	f7fe fb27 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eea:	2000      	movs	r0, #0
 8002eec:	f7fe fb24 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8002ef0:	2037      	movs	r0, #55	; 0x37
 8002ef2:	f7fe fb21 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7fe fb1e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002efc:	203c      	movs	r0, #60	; 0x3c
 8002efe:	f7fe fb1b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7fe fb18 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002f08:	2036      	movs	r0, #54	; 0x36
 8002f0a:	f7fe fb15 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f7fe fb12 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8002f14:	2032      	movs	r0, #50	; 0x32
 8002f16:	f7fe fb0f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f7fe fb0c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002f20:	202f      	movs	r0, #47	; 0x2f
 8002f22:	f7fe fb09 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f26:	2000      	movs	r0, #0
 8002f28:	f7fe fb06 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002f2c:	202c      	movs	r0, #44	; 0x2c
 8002f2e:	f7fe fb03 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f32:	2000      	movs	r0, #0
 8002f34:	f7fe fb00 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002f38:	2029      	movs	r0, #41	; 0x29
 8002f3a:	f7fe fafd 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f7fe fafa 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8002f44:	2026      	movs	r0, #38	; 0x26
 8002f46:	f7fe faf7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f7fe faf4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002f50:	2024      	movs	r0, #36	; 0x24
 8002f52:	f7fe faf1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f56:	2000      	movs	r0, #0
 8002f58:	f7fe faee 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002f5c:	2024      	movs	r0, #36	; 0x24
 8002f5e:	f7fe faeb 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f62:	2000      	movs	r0, #0
 8002f64:	f7fe fae8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002f68:	2023      	movs	r0, #35	; 0x23
 8002f6a:	f7fe fae5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f7fe fae2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002f74:	203c      	movs	r0, #60	; 0x3c
 8002f76:	f7fe fadf 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f7fe fadc 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002f80:	2036      	movs	r0, #54	; 0x36
 8002f82:	f7fe fad9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f86:	2000      	movs	r0, #0
 8002f88:	f7fe fad6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8002f8c:	2032      	movs	r0, #50	; 0x32
 8002f8e:	f7fe fad3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7fe fad0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002f98:	202f      	movs	r0, #47	; 0x2f
 8002f9a:	f7fe facd 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f7fe faca 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002fa4:	202c      	movs	r0, #44	; 0x2c
 8002fa6:	f7fe fac7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f7fe fac4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002fb0:	2029      	movs	r0, #41	; 0x29
 8002fb2:	f7fe fac1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f7fe fabe 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8002fbc:	2026      	movs	r0, #38	; 0x26
 8002fbe:	f7fe fabb 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7fe fab8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002fc8:	2024      	movs	r0, #36	; 0x24
 8002fca:	f7fe fab5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7fe fab2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002fd4:	2024      	movs	r0, #36	; 0x24
 8002fd6:	f7fe faaf 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f7fe faac 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002fe0:	2023      	movs	r0, #35	; 0x23
 8002fe2:	f7fe faa9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fe faa6 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8002fec:	20c4      	movs	r0, #196	; 0xc4
 8002fee:	f7fe fa93 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 8002ff2:	2062      	movs	r0, #98	; 0x62
 8002ff4:	f7fe faa0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f7fe fa9d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8002ffe:	2005      	movs	r0, #5
 8003000:	f7fe fa9a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003004:	2000      	movs	r0, #0
 8003006:	f7fe fa97 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 800300a:	2084      	movs	r0, #132	; 0x84
 800300c:	f7fe fa94 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003010:	2000      	movs	r0, #0
 8003012:	f7fe fa91 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8003016:	20f0      	movs	r0, #240	; 0xf0
 8003018:	f7fe fa8e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800301c:	2000      	movs	r0, #0
 800301e:	f7fe fa8b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8003022:	2018      	movs	r0, #24
 8003024:	f7fe fa88 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003028:	2000      	movs	r0, #0
 800302a:	f7fe fa85 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 800302e:	20a4      	movs	r0, #164	; 0xa4
 8003030:	f7fe fa82 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003034:	2000      	movs	r0, #0
 8003036:	f7fe fa7f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 800303a:	2018      	movs	r0, #24
 800303c:	f7fe fa7c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003040:	2000      	movs	r0, #0
 8003042:	f7fe fa79 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8003046:	2050      	movs	r0, #80	; 0x50
 8003048:	f7fe fa76 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800304c:	2000      	movs	r0, #0
 800304e:	f7fe fa73 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 8003052:	200c      	movs	r0, #12
 8003054:	f7fe fa70 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003058:	2000      	movs	r0, #0
 800305a:	f7fe fa6d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 800305e:	2017      	movs	r0, #23
 8003060:	f7fe fa6a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003064:	2000      	movs	r0, #0
 8003066:	f7fe fa67 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 800306a:	2095      	movs	r0, #149	; 0x95
 800306c:	f7fe fa64 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003070:	2000      	movs	r0, #0
 8003072:	f7fe fa61 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003076:	20f3      	movs	r0, #243	; 0xf3
 8003078:	f7fe fa5e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800307c:	2000      	movs	r0, #0
 800307e:	f7fe fa5b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 8003082:	20e6      	movs	r0, #230	; 0xe6
 8003084:	f7fe fa58 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003088:	2000      	movs	r0, #0
 800308a:	f7fe fa55 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 800308e:	20c5      	movs	r0, #197	; 0xc5
 8003090:	f7fe fa42 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8003094:	2032      	movs	r0, #50	; 0x32
 8003096:	f7fe fa4f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800309a:	2000      	movs	r0, #0
 800309c:	f7fe fa4c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80030a0:	2044      	movs	r0, #68	; 0x44
 80030a2:	f7fe fa49 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030a6:	2000      	movs	r0, #0
 80030a8:	f7fe fa46 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 80030ac:	2065      	movs	r0, #101	; 0x65
 80030ae:	f7fe fa43 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030b2:	2000      	movs	r0, #0
 80030b4:	f7fe fa40 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80030b8:	2076      	movs	r0, #118	; 0x76
 80030ba:	f7fe fa3d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030be:	2000      	movs	r0, #0
 80030c0:	f7fe fa3a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80030c4:	2088      	movs	r0, #136	; 0x88
 80030c6:	f7fe fa37 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030ca:	2000      	movs	r0, #0
 80030cc:	f7fe fa34 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 80030d0:	20c6      	movs	r0, #198	; 0xc6
 80030d2:	f7fe fa21 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 80030d6:	2020      	movs	r0, #32
 80030d8:	f7fe fa2e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030dc:	2000      	movs	r0, #0
 80030de:	f7fe fa2b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80030e2:	2017      	movs	r0, #23
 80030e4:	f7fe fa28 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7fe fa25 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 80030ee:	2001      	movs	r0, #1
 80030f0:	f7fe fa22 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7fe fa1f 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 80030fa:	20c7      	movs	r0, #199	; 0xc7
 80030fc:	f7fe fa0c 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003100:	2000      	movs	r0, #0
 8003102:	f7fe fa19 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003106:	2000      	movs	r0, #0
 8003108:	f7fe fa16 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800310c:	2000      	movs	r0, #0
 800310e:	f7fe fa13 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003112:	2000      	movs	r0, #0
 8003114:	f7fe fa10 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8003118:	20c8      	movs	r0, #200	; 0xc8
 800311a:	f7fe f9fd 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800311e:	2000      	movs	r0, #0
 8003120:	f7fe fa0a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003124:	2000      	movs	r0, #0
 8003126:	f7fe fa07 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800312a:	2000      	movs	r0, #0
 800312c:	f7fe fa04 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003130:	2000      	movs	r0, #0
 8003132:	f7fe fa01 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 8003136:	20c9      	movs	r0, #201	; 0xc9
 8003138:	f7fe f9ee 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800313c:	2000      	movs	r0, #0
 800313e:	f7fe f9fb 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003142:	2000      	movs	r0, #0
 8003144:	f7fe f9f8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003148:	2000      	movs	r0, #0
 800314a:	f7fe f9f5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800314e:	2000      	movs	r0, #0
 8003150:	f7fe f9f2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003154:	2000      	movs	r0, #0
 8003156:	f7fe f9ef 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800315a:	2000      	movs	r0, #0
 800315c:	f7fe f9ec 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003160:	2000      	movs	r0, #0
 8003162:	f7fe f9e9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003166:	2000      	movs	r0, #0
 8003168:	f7fe f9e6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800316c:	2000      	movs	r0, #0
 800316e:	f7fe f9e3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003172:	2000      	movs	r0, #0
 8003174:	f7fe f9e0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003178:	2000      	movs	r0, #0
 800317a:	f7fe f9dd 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800317e:	2000      	movs	r0, #0
 8003180:	f7fe f9da 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003184:	2000      	movs	r0, #0
 8003186:	f7fe f9d7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800318a:	2000      	movs	r0, #0
 800318c:	f7fe f9d4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003190:	2000      	movs	r0, #0
 8003192:	f7fe f9d1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003196:	2000      	movs	r0, #0
 8003198:	f7fe f9ce 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 800319c:	20e0      	movs	r0, #224	; 0xe0
 800319e:	f7fe f9bb 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80031a2:	2016      	movs	r0, #22
 80031a4:	f7fe f9c8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f7fe f9c5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80031ae:	201c      	movs	r0, #28
 80031b0:	f7fe f9c2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7fe f9bf 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80031ba:	2021      	movs	r0, #33	; 0x21
 80031bc:	f7fe f9bc 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7fe f9b9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80031c6:	2036      	movs	r0, #54	; 0x36
 80031c8:	f7fe f9b6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7fe f9b3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 80031d2:	2046      	movs	r0, #70	; 0x46
 80031d4:	f7fe f9b0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031d8:	2000      	movs	r0, #0
 80031da:	f7fe f9ad 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80031de:	2052      	movs	r0, #82	; 0x52
 80031e0:	f7fe f9aa 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7fe f9a7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80031ea:	2064      	movs	r0, #100	; 0x64
 80031ec:	f7fe f9a4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7fe f9a1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80031f6:	207a      	movs	r0, #122	; 0x7a
 80031f8:	f7fe f99e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031fc:	2000      	movs	r0, #0
 80031fe:	f7fe f99b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8003202:	208b      	movs	r0, #139	; 0x8b
 8003204:	f7fe f998 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003208:	2000      	movs	r0, #0
 800320a:	f7fe f995 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800320e:	2099      	movs	r0, #153	; 0x99
 8003210:	f7fe f992 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003214:	2000      	movs	r0, #0
 8003216:	f7fe f98f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 800321a:	20a8      	movs	r0, #168	; 0xa8
 800321c:	f7fe f98c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003220:	2000      	movs	r0, #0
 8003222:	f7fe f989 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8003226:	20b9      	movs	r0, #185	; 0xb9
 8003228:	f7fe f986 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800322c:	2000      	movs	r0, #0
 800322e:	f7fe f983 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8003232:	20c4      	movs	r0, #196	; 0xc4
 8003234:	f7fe f980 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003238:	2000      	movs	r0, #0
 800323a:	f7fe f97d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 800323e:	20ca      	movs	r0, #202	; 0xca
 8003240:	f7fe f97a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003244:	2000      	movs	r0, #0
 8003246:	f7fe f977 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 800324a:	20d2      	movs	r0, #210	; 0xd2
 800324c:	f7fe f974 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003250:	2000      	movs	r0, #0
 8003252:	f7fe f971 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 8003256:	20d9      	movs	r0, #217	; 0xd9
 8003258:	f7fe f96e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800325c:	2000      	movs	r0, #0
 800325e:	f7fe f96b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8003262:	20e0      	movs	r0, #224	; 0xe0
 8003264:	f7fe f968 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003268:	2000      	movs	r0, #0
 800326a:	f7fe f965 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800326e:	20f3      	movs	r0, #243	; 0xf3
 8003270:	f7fe f962 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003274:	2000      	movs	r0, #0
 8003276:	f7fe f95f 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 800327a:	20e1      	movs	r0, #225	; 0xe1
 800327c:	f7fe f94c 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8003280:	2016      	movs	r0, #22
 8003282:	f7fe f959 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003286:	2000      	movs	r0, #0
 8003288:	f7fe f956 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 800328c:	201c      	movs	r0, #28
 800328e:	f7fe f953 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003292:	2000      	movs	r0, #0
 8003294:	f7fe f950 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 8003298:	2022      	movs	r0, #34	; 0x22
 800329a:	f7fe f94d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800329e:	2000      	movs	r0, #0
 80032a0:	f7fe f94a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80032a4:	2036      	movs	r0, #54	; 0x36
 80032a6:	f7fe f947 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032aa:	2000      	movs	r0, #0
 80032ac:	f7fe f944 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80032b0:	2045      	movs	r0, #69	; 0x45
 80032b2:	f7fe f941 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032b6:	2000      	movs	r0, #0
 80032b8:	f7fe f93e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80032bc:	2052      	movs	r0, #82	; 0x52
 80032be:	f7fe f93b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032c2:	2000      	movs	r0, #0
 80032c4:	f7fe f938 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80032c8:	2064      	movs	r0, #100	; 0x64
 80032ca:	f7fe f935 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7fe f932 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80032d4:	207a      	movs	r0, #122	; 0x7a
 80032d6:	f7fe f92f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032da:	2000      	movs	r0, #0
 80032dc:	f7fe f92c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80032e0:	208b      	movs	r0, #139	; 0x8b
 80032e2:	f7fe f929 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f7fe f926 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80032ec:	2099      	movs	r0, #153	; 0x99
 80032ee:	f7fe f923 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032f2:	2000      	movs	r0, #0
 80032f4:	f7fe f920 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 80032f8:	20a8      	movs	r0, #168	; 0xa8
 80032fa:	f7fe f91d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032fe:	2000      	movs	r0, #0
 8003300:	f7fe f91a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8003304:	20b9      	movs	r0, #185	; 0xb9
 8003306:	f7fe f917 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800330a:	2000      	movs	r0, #0
 800330c:	f7fe f914 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8003310:	20c4      	movs	r0, #196	; 0xc4
 8003312:	f7fe f911 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003316:	2000      	movs	r0, #0
 8003318:	f7fe f90e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 800331c:	20ca      	movs	r0, #202	; 0xca
 800331e:	f7fe f90b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003322:	2000      	movs	r0, #0
 8003324:	f7fe f908 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8003328:	20d2      	movs	r0, #210	; 0xd2
 800332a:	f7fe f905 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800332e:	2000      	movs	r0, #0
 8003330:	f7fe f902 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 8003334:	20d8      	movs	r0, #216	; 0xd8
 8003336:	f7fe f8ff 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800333a:	2000      	movs	r0, #0
 800333c:	f7fe f8fc 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8003340:	20e0      	movs	r0, #224	; 0xe0
 8003342:	f7fe f8f9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003346:	2000      	movs	r0, #0
 8003348:	f7fe f8f6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800334c:	20f3      	movs	r0, #243	; 0xf3
 800334e:	f7fe f8f3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003352:	2000      	movs	r0, #0
 8003354:	f7fe f8f0 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8003358:	20e2      	movs	r0, #226	; 0xe2
 800335a:	f7fe f8dd 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 800335e:	2005      	movs	r0, #5
 8003360:	f7fe f8ea 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003364:	2000      	movs	r0, #0
 8003366:	f7fe f8e7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 800336a:	200b      	movs	r0, #11
 800336c:	f7fe f8e4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003370:	2000      	movs	r0, #0
 8003372:	f7fe f8e1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 8003376:	201b      	movs	r0, #27
 8003378:	f7fe f8de 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800337c:	2000      	movs	r0, #0
 800337e:	f7fe f8db 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8003382:	2034      	movs	r0, #52	; 0x34
 8003384:	f7fe f8d8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003388:	2000      	movs	r0, #0
 800338a:	f7fe f8d5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800338e:	2044      	movs	r0, #68	; 0x44
 8003390:	f7fe f8d2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003394:	2000      	movs	r0, #0
 8003396:	f7fe f8cf 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 800339a:	204f      	movs	r0, #79	; 0x4f
 800339c:	f7fe f8cc 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f7fe f8c9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 80033a6:	2061      	movs	r0, #97	; 0x61
 80033a8:	f7fe f8c6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7fe f8c3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 80033b2:	2079      	movs	r0, #121	; 0x79
 80033b4:	f7fe f8c0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033b8:	2000      	movs	r0, #0
 80033ba:	f7fe f8bd 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80033be:	2088      	movs	r0, #136	; 0x88
 80033c0:	f7fe f8ba 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fe f8b7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80033ca:	2097      	movs	r0, #151	; 0x97
 80033cc:	f7fe f8b4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033d0:	2000      	movs	r0, #0
 80033d2:	f7fe f8b1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80033d6:	20a6      	movs	r0, #166	; 0xa6
 80033d8:	f7fe f8ae 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033dc:	2000      	movs	r0, #0
 80033de:	f7fe f8ab 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80033e2:	20b7      	movs	r0, #183	; 0xb7
 80033e4:	f7fe f8a8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033e8:	2000      	movs	r0, #0
 80033ea:	f7fe f8a5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80033ee:	20c2      	movs	r0, #194	; 0xc2
 80033f0:	f7fe f8a2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033f4:	2000      	movs	r0, #0
 80033f6:	f7fe f89f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 80033fa:	20c7      	movs	r0, #199	; 0xc7
 80033fc:	f7fe f89c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003400:	2000      	movs	r0, #0
 8003402:	f7fe f899 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8003406:	20d1      	movs	r0, #209	; 0xd1
 8003408:	f7fe f896 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800340c:	2000      	movs	r0, #0
 800340e:	f7fe f893 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 8003412:	20d6      	movs	r0, #214	; 0xd6
 8003414:	f7fe f890 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003418:	2000      	movs	r0, #0
 800341a:	f7fe f88d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 800341e:	20dd      	movs	r0, #221	; 0xdd
 8003420:	f7fe f88a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003424:	2000      	movs	r0, #0
 8003426:	f7fe f887 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800342a:	20f3      	movs	r0, #243	; 0xf3
 800342c:	f7fe f884 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003430:	2000      	movs	r0, #0
 8003432:	f7fe f881 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 8003436:	20e3      	movs	r0, #227	; 0xe3
 8003438:	f7fe f86e 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 800343c:	2005      	movs	r0, #5
 800343e:	f7fe f87b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003442:	2000      	movs	r0, #0
 8003444:	f7fe f878 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8003448:	200a      	movs	r0, #10
 800344a:	f7fe f875 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800344e:	2000      	movs	r0, #0
 8003450:	f7fe f872 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8003454:	201c      	movs	r0, #28
 8003456:	f7fe f86f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800345a:	2000      	movs	r0, #0
 800345c:	f7fe f86c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8003460:	2033      	movs	r0, #51	; 0x33
 8003462:	f7fe f869 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003466:	2000      	movs	r0, #0
 8003468:	f7fe f866 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800346c:	2044      	movs	r0, #68	; 0x44
 800346e:	f7fe f863 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003472:	2000      	movs	r0, #0
 8003474:	f7fe f860 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8003478:	2050      	movs	r0, #80	; 0x50
 800347a:	f7fe f85d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800347e:	2000      	movs	r0, #0
 8003480:	f7fe f85a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 8003484:	2062      	movs	r0, #98	; 0x62
 8003486:	f7fe f857 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800348a:	2000      	movs	r0, #0
 800348c:	f7fe f854 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 8003490:	2078      	movs	r0, #120	; 0x78
 8003492:	f7fe f851 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003496:	2000      	movs	r0, #0
 8003498:	f7fe f84e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800349c:	2088      	movs	r0, #136	; 0x88
 800349e:	f7fe f84b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034a2:	2000      	movs	r0, #0
 80034a4:	f7fe f848 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80034a8:	2097      	movs	r0, #151	; 0x97
 80034aa:	f7fe f845 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034ae:	2000      	movs	r0, #0
 80034b0:	f7fe f842 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80034b4:	20a6      	movs	r0, #166	; 0xa6
 80034b6:	f7fe f83f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034ba:	2000      	movs	r0, #0
 80034bc:	f7fe f83c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80034c0:	20b7      	movs	r0, #183	; 0xb7
 80034c2:	f7fe f839 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034c6:	2000      	movs	r0, #0
 80034c8:	f7fe f836 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80034cc:	20c2      	movs	r0, #194	; 0xc2
 80034ce:	f7fe f833 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034d2:	2000      	movs	r0, #0
 80034d4:	f7fe f830 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 80034d8:	20c7      	movs	r0, #199	; 0xc7
 80034da:	f7fe f82d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034de:	2000      	movs	r0, #0
 80034e0:	f7fe f82a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 80034e4:	20d1      	movs	r0, #209	; 0xd1
 80034e6:	f7fe f827 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f7fe f824 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 80034f0:	20d5      	movs	r0, #213	; 0xd5
 80034f2:	f7fe f821 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7fe f81e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 80034fc:	20dd      	movs	r0, #221	; 0xdd
 80034fe:	f7fe f81b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003502:	2000      	movs	r0, #0
 8003504:	f7fe f818 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003508:	20f3      	movs	r0, #243	; 0xf3
 800350a:	f7fe f815 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800350e:	2000      	movs	r0, #0
 8003510:	f7fe f812 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8003514:	20e4      	movs	r0, #228	; 0xe4
 8003516:	f7fd ffff 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 800351a:	2001      	movs	r0, #1
 800351c:	f7fe f80c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003520:	2000      	movs	r0, #0
 8003522:	f7fe f809 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8003526:	2001      	movs	r0, #1
 8003528:	f7fe f806 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800352c:	2000      	movs	r0, #0
 800352e:	f7fe f803 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8003532:	2002      	movs	r0, #2
 8003534:	f7fe f800 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003538:	2000      	movs	r0, #0
 800353a:	f7fd fffd 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 800353e:	202a      	movs	r0, #42	; 0x2a
 8003540:	f7fd fffa 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003544:	2000      	movs	r0, #0
 8003546:	f7fd fff7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 800354a:	203c      	movs	r0, #60	; 0x3c
 800354c:	f7fd fff4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003550:	2000      	movs	r0, #0
 8003552:	f7fd fff1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8003556:	204b      	movs	r0, #75	; 0x4b
 8003558:	f7fd ffee 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800355c:	2000      	movs	r0, #0
 800355e:	f7fd ffeb 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8003562:	205d      	movs	r0, #93	; 0x5d
 8003564:	f7fd ffe8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003568:	2000      	movs	r0, #0
 800356a:	f7fd ffe5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 800356e:	2074      	movs	r0, #116	; 0x74
 8003570:	f7fd ffe2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003574:	2000      	movs	r0, #0
 8003576:	f7fd ffdf 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 800357a:	2084      	movs	r0, #132	; 0x84
 800357c:	f7fd ffdc 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003580:	2000      	movs	r0, #0
 8003582:	f7fd ffd9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8003586:	2093      	movs	r0, #147	; 0x93
 8003588:	f7fd ffd6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800358c:	2000      	movs	r0, #0
 800358e:	f7fd ffd3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8003592:	20a2      	movs	r0, #162	; 0xa2
 8003594:	f7fd ffd0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003598:	2000      	movs	r0, #0
 800359a:	f7fd ffcd 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 800359e:	20b3      	movs	r0, #179	; 0xb3
 80035a0:	f7fd ffca 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035a4:	2000      	movs	r0, #0
 80035a6:	f7fd ffc7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80035aa:	20be      	movs	r0, #190	; 0xbe
 80035ac:	f7fd ffc4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035b0:	2000      	movs	r0, #0
 80035b2:	f7fd ffc1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80035b6:	20c4      	movs	r0, #196	; 0xc4
 80035b8:	f7fd ffbe 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035bc:	2000      	movs	r0, #0
 80035be:	f7fd ffbb 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80035c2:	20cd      	movs	r0, #205	; 0xcd
 80035c4:	f7fd ffb8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035c8:	2000      	movs	r0, #0
 80035ca:	f7fd ffb5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80035ce:	20d3      	movs	r0, #211	; 0xd3
 80035d0:	f7fd ffb2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035d4:	2000      	movs	r0, #0
 80035d6:	f7fd ffaf 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 80035da:	20dd      	movs	r0, #221	; 0xdd
 80035dc:	f7fd ffac 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035e0:	2000      	movs	r0, #0
 80035e2:	f7fd ffa9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80035e6:	20f3      	movs	r0, #243	; 0xf3
 80035e8:	f7fd ffa6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035ec:	2000      	movs	r0, #0
 80035ee:	f7fd ffa3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 80035f2:	20e5      	movs	r0, #229	; 0xe5
 80035f4:	f7fd ff90 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80035f8:	2000      	movs	r0, #0
 80035fa:	f7fd ff9d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035fe:	2000      	movs	r0, #0
 8003600:	f7fd ff9a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003604:	2000      	movs	r0, #0
 8003606:	f7fd ff97 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800360a:	2000      	movs	r0, #0
 800360c:	f7fd ff94 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8003610:	2002      	movs	r0, #2
 8003612:	f7fd ff91 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003616:	2000      	movs	r0, #0
 8003618:	f7fd ff8e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 800361c:	2029      	movs	r0, #41	; 0x29
 800361e:	f7fd ff8b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003622:	2000      	movs	r0, #0
 8003624:	f7fd ff88 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8003628:	203c      	movs	r0, #60	; 0x3c
 800362a:	f7fd ff85 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800362e:	2000      	movs	r0, #0
 8003630:	f7fd ff82 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8003634:	204b      	movs	r0, #75	; 0x4b
 8003636:	f7fd ff7f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800363a:	2000      	movs	r0, #0
 800363c:	f7fd ff7c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8003640:	205d      	movs	r0, #93	; 0x5d
 8003642:	f7fd ff79 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003646:	2000      	movs	r0, #0
 8003648:	f7fd ff76 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 800364c:	2074      	movs	r0, #116	; 0x74
 800364e:	f7fd ff73 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003652:	2000      	movs	r0, #0
 8003654:	f7fd ff70 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8003658:	2084      	movs	r0, #132	; 0x84
 800365a:	f7fd ff6d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800365e:	2000      	movs	r0, #0
 8003660:	f7fd ff6a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8003664:	2093      	movs	r0, #147	; 0x93
 8003666:	f7fd ff67 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800366a:	2000      	movs	r0, #0
 800366c:	f7fd ff64 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8003670:	20a2      	movs	r0, #162	; 0xa2
 8003672:	f7fd ff61 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003676:	2000      	movs	r0, #0
 8003678:	f7fd ff5e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 800367c:	20b3      	movs	r0, #179	; 0xb3
 800367e:	f7fd ff5b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003682:	2000      	movs	r0, #0
 8003684:	f7fd ff58 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8003688:	20be      	movs	r0, #190	; 0xbe
 800368a:	f7fd ff55 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800368e:	2000      	movs	r0, #0
 8003690:	f7fd ff52 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8003694:	20c4      	movs	r0, #196	; 0xc4
 8003696:	f7fd ff4f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800369a:	2000      	movs	r0, #0
 800369c:	f7fd ff4c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80036a0:	20cd      	movs	r0, #205	; 0xcd
 80036a2:	f7fd ff49 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036a6:	2000      	movs	r0, #0
 80036a8:	f7fd ff46 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80036ac:	20d3      	movs	r0, #211	; 0xd3
 80036ae:	f7fd ff43 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036b2:	2000      	movs	r0, #0
 80036b4:	f7fd ff40 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 80036b8:	20dc      	movs	r0, #220	; 0xdc
 80036ba:	f7fd ff3d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036be:	2000      	movs	r0, #0
 80036c0:	f7fd ff3a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80036c4:	20f3      	movs	r0, #243	; 0xf3
 80036c6:	f7fd ff37 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036ca:	2000      	movs	r0, #0
 80036cc:	f7fd ff34 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 80036d0:	20e6      	movs	r0, #230	; 0xe6
 80036d2:	f7fd ff21 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 80036d6:	2011      	movs	r0, #17
 80036d8:	f7fd ff2e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036dc:	2000      	movs	r0, #0
 80036de:	f7fd ff2b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80036e2:	2034      	movs	r0, #52	; 0x34
 80036e4:	f7fd ff28 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036e8:	2000      	movs	r0, #0
 80036ea:	f7fd ff25 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 80036ee:	2056      	movs	r0, #86	; 0x56
 80036f0:	f7fd ff22 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036f4:	2000      	movs	r0, #0
 80036f6:	f7fd ff1f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80036fa:	2076      	movs	r0, #118	; 0x76
 80036fc:	f7fd ff1c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003700:	2000      	movs	r0, #0
 8003702:	f7fd ff19 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8003706:	2077      	movs	r0, #119	; 0x77
 8003708:	f7fd ff16 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800370c:	2000      	movs	r0, #0
 800370e:	f7fd ff13 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8003712:	2066      	movs	r0, #102	; 0x66
 8003714:	f7fd ff10 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003718:	2000      	movs	r0, #0
 800371a:	f7fd ff0d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800371e:	2088      	movs	r0, #136	; 0x88
 8003720:	f7fd ff0a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003724:	2000      	movs	r0, #0
 8003726:	f7fd ff07 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800372a:	2099      	movs	r0, #153	; 0x99
 800372c:	f7fd ff04 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003730:	2000      	movs	r0, #0
 8003732:	f7fd ff01 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8003736:	20bb      	movs	r0, #187	; 0xbb
 8003738:	f7fd fefe 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800373c:	2000      	movs	r0, #0
 800373e:	f7fd fefb 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003742:	2099      	movs	r0, #153	; 0x99
 8003744:	f7fd fef8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003748:	2000      	movs	r0, #0
 800374a:	f7fd fef5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800374e:	2066      	movs	r0, #102	; 0x66
 8003750:	f7fd fef2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003754:	2000      	movs	r0, #0
 8003756:	f7fd feef 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800375a:	2055      	movs	r0, #85	; 0x55
 800375c:	f7fd feec 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003760:	2000      	movs	r0, #0
 8003762:	f7fd fee9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8003766:	2055      	movs	r0, #85	; 0x55
 8003768:	f7fd fee6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800376c:	2000      	movs	r0, #0
 800376e:	f7fd fee3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8003772:	2045      	movs	r0, #69	; 0x45
 8003774:	f7fd fee0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003778:	2000      	movs	r0, #0
 800377a:	f7fd fedd 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 800377e:	2043      	movs	r0, #67	; 0x43
 8003780:	f7fd feda 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003784:	2000      	movs	r0, #0
 8003786:	f7fd fed7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800378a:	2044      	movs	r0, #68	; 0x44
 800378c:	f7fd fed4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003790:	2000      	movs	r0, #0
 8003792:	f7fd fed1 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 8003796:	20e7      	movs	r0, #231	; 0xe7
 8003798:	f7fd febe 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 800379c:	2032      	movs	r0, #50	; 0x32
 800379e:	f7fd fecb 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037a2:	2000      	movs	r0, #0
 80037a4:	f7fd fec8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80037a8:	2055      	movs	r0, #85	; 0x55
 80037aa:	f7fd fec5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037ae:	2000      	movs	r0, #0
 80037b0:	f7fd fec2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80037b4:	2076      	movs	r0, #118	; 0x76
 80037b6:	f7fd febf 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037ba:	2000      	movs	r0, #0
 80037bc:	f7fd febc 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80037c0:	2066      	movs	r0, #102	; 0x66
 80037c2:	f7fd feb9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037c6:	2000      	movs	r0, #0
 80037c8:	f7fd feb6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80037cc:	2067      	movs	r0, #103	; 0x67
 80037ce:	f7fd feb3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037d2:	2000      	movs	r0, #0
 80037d4:	f7fd feb0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80037d8:	2067      	movs	r0, #103	; 0x67
 80037da:	f7fd fead 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037de:	2000      	movs	r0, #0
 80037e0:	f7fd feaa 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 80037e4:	2087      	movs	r0, #135	; 0x87
 80037e6:	f7fd fea7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037ea:	2000      	movs	r0, #0
 80037ec:	f7fd fea4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80037f0:	2099      	movs	r0, #153	; 0x99
 80037f2:	f7fd fea1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037f6:	2000      	movs	r0, #0
 80037f8:	f7fd fe9e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80037fc:	20bb      	movs	r0, #187	; 0xbb
 80037fe:	f7fd fe9b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003802:	2000      	movs	r0, #0
 8003804:	f7fd fe98 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003808:	2099      	movs	r0, #153	; 0x99
 800380a:	f7fd fe95 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800380e:	2000      	movs	r0, #0
 8003810:	f7fd fe92 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8003814:	2077      	movs	r0, #119	; 0x77
 8003816:	f7fd fe8f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800381a:	2000      	movs	r0, #0
 800381c:	f7fd fe8c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003820:	2044      	movs	r0, #68	; 0x44
 8003822:	f7fd fe89 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003826:	2000      	movs	r0, #0
 8003828:	f7fd fe86 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 800382c:	2056      	movs	r0, #86	; 0x56
 800382e:	f7fd fe83 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003832:	2000      	movs	r0, #0
 8003834:	f7fd fe80 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8003838:	2023      	movs	r0, #35	; 0x23
 800383a:	f7fd fe7d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800383e:	2000      	movs	r0, #0
 8003840:	f7fd fe7a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8003844:	2033      	movs	r0, #51	; 0x33
 8003846:	f7fd fe77 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800384a:	2000      	movs	r0, #0
 800384c:	f7fd fe74 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8003850:	2045      	movs	r0, #69	; 0x45
 8003852:	f7fd fe71 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003856:	2000      	movs	r0, #0
 8003858:	f7fd fe6e 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 800385c:	20e8      	movs	r0, #232	; 0xe8
 800385e:	f7fd fe5b 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003862:	2000      	movs	r0, #0
 8003864:	f7fd fe68 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003868:	2000      	movs	r0, #0
 800386a:	f7fd fe65 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800386e:	2099      	movs	r0, #153	; 0x99
 8003870:	f7fd fe62 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003874:	2000      	movs	r0, #0
 8003876:	f7fd fe5f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 800387a:	2087      	movs	r0, #135	; 0x87
 800387c:	f7fd fe5c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003880:	2000      	movs	r0, #0
 8003882:	f7fd fe59 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003886:	2088      	movs	r0, #136	; 0x88
 8003888:	f7fd fe56 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800388c:	2000      	movs	r0, #0
 800388e:	f7fd fe53 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8003892:	2077      	movs	r0, #119	; 0x77
 8003894:	f7fd fe50 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003898:	2000      	movs	r0, #0
 800389a:	f7fd fe4d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800389e:	2066      	movs	r0, #102	; 0x66
 80038a0:	f7fd fe4a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038a4:	2000      	movs	r0, #0
 80038a6:	f7fd fe47 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80038aa:	2088      	movs	r0, #136	; 0x88
 80038ac:	f7fd fe44 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038b0:	2000      	movs	r0, #0
 80038b2:	f7fd fe41 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 80038b6:	20aa      	movs	r0, #170	; 0xaa
 80038b8:	f7fd fe3e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038bc:	2000      	movs	r0, #0
 80038be:	f7fd fe3b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80038c2:	20bb      	movs	r0, #187	; 0xbb
 80038c4:	f7fd fe38 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038c8:	2000      	movs	r0, #0
 80038ca:	f7fd fe35 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80038ce:	2099      	movs	r0, #153	; 0x99
 80038d0:	f7fd fe32 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038d4:	2000      	movs	r0, #0
 80038d6:	f7fd fe2f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80038da:	2066      	movs	r0, #102	; 0x66
 80038dc:	f7fd fe2c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038e0:	2000      	movs	r0, #0
 80038e2:	f7fd fe29 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80038e6:	2055      	movs	r0, #85	; 0x55
 80038e8:	f7fd fe26 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038ec:	2000      	movs	r0, #0
 80038ee:	f7fd fe23 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80038f2:	2055      	movs	r0, #85	; 0x55
 80038f4:	f7fd fe20 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038f8:	2000      	movs	r0, #0
 80038fa:	f7fd fe1d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80038fe:	2044      	movs	r0, #68	; 0x44
 8003900:	f7fd fe1a 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003904:	2000      	movs	r0, #0
 8003906:	f7fd fe17 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800390a:	2044      	movs	r0, #68	; 0x44
 800390c:	f7fd fe14 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003910:	2000      	movs	r0, #0
 8003912:	f7fd fe11 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8003916:	2055      	movs	r0, #85	; 0x55
 8003918:	f7fd fe0e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800391c:	2000      	movs	r0, #0
 800391e:	f7fd fe0b 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 8003922:	20e9      	movs	r0, #233	; 0xe9
 8003924:	f7fd fdf8 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8003928:	20aa      	movs	r0, #170	; 0xaa
 800392a:	f7fd fe05 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800392e:	2000      	movs	r0, #0
 8003930:	f7fd fe02 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003934:	2000      	movs	r0, #0
 8003936:	f7fd fdff 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800393a:	2000      	movs	r0, #0
 800393c:	f7fd fdfc 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8003940:	2000      	movs	r0, #0
 8003942:	f7fd fde9 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8003946:	20aa      	movs	r0, #170	; 0xaa
 8003948:	f7fd fdf6 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 800394c:	20cf      	movs	r0, #207	; 0xcf
 800394e:	f7fd fde3 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003952:	2000      	movs	r0, #0
 8003954:	f7fd fdf0 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003958:	2000      	movs	r0, #0
 800395a:	f7fd fded 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800395e:	2000      	movs	r0, #0
 8003960:	f7fd fdea 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003964:	2000      	movs	r0, #0
 8003966:	f7fd fde7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800396a:	2000      	movs	r0, #0
 800396c:	f7fd fde4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003970:	2000      	movs	r0, #0
 8003972:	f7fd fde1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003976:	2000      	movs	r0, #0
 8003978:	f7fd fdde 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800397c:	2000      	movs	r0, #0
 800397e:	f7fd fddb 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003982:	2000      	movs	r0, #0
 8003984:	f7fd fdd8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003988:	2000      	movs	r0, #0
 800398a:	f7fd fdd5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800398e:	2000      	movs	r0, #0
 8003990:	f7fd fdd2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003994:	2000      	movs	r0, #0
 8003996:	f7fd fdcf 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800399a:	2000      	movs	r0, #0
 800399c:	f7fd fdcc 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039a0:	2000      	movs	r0, #0
 80039a2:	f7fd fdc9 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039a6:	2000      	movs	r0, #0
 80039a8:	f7fd fdc6 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039ac:	2000      	movs	r0, #0
 80039ae:	f7fd fdc3 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039b2:	2000      	movs	r0, #0
 80039b4:	f7fd fdc0 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 80039b8:	20f0      	movs	r0, #240	; 0xf0
 80039ba:	f7fd fdad 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80039be:	2000      	movs	r0, #0
 80039c0:	f7fd fdba 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 80039c4:	2050      	movs	r0, #80	; 0x50
 80039c6:	f7fd fdb7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039ca:	2000      	movs	r0, #0
 80039cc:	f7fd fdb4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039d0:	2000      	movs	r0, #0
 80039d2:	f7fd fdb1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039d6:	2000      	movs	r0, #0
 80039d8:	f7fd fdae 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 80039dc:	20f3      	movs	r0, #243	; 0xf3
 80039de:	f7fd fd9b 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80039e2:	2000      	movs	r0, #0
 80039e4:	f7fd fda8 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 80039e8:	20f9      	movs	r0, #249	; 0xf9
 80039ea:	f7fd fd95 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 80039ee:	2006      	movs	r0, #6
 80039f0:	f7fd fda2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 80039f4:	2010      	movs	r0, #16
 80039f6:	f7fd fd9f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80039fa:	2029      	movs	r0, #41	; 0x29
 80039fc:	f7fd fd9c 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a00:	2000      	movs	r0, #0
 8003a02:	f7fd fd99 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 8003a06:	203a      	movs	r0, #58	; 0x3a
 8003a08:	f7fd fd86 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8003a0c:	2055      	movs	r0, #85	; 0x55
 8003a0e:	f7fd fd93 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 8003a12:	2011      	movs	r0, #17
 8003a14:	f7fd fd80 	bl	8001518 <LCD_WR_REG>
		HAL_Delay(100);
 8003a18:	2064      	movs	r0, #100	; 0x64
 8003a1a:	f003 fb1b 	bl	8007054 <HAL_Delay>
		LCD_WR_REG(0x29);
 8003a1e:	2029      	movs	r0, #41	; 0x29
 8003a20:	f7fd fd7a 	bl	8001518 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003a24:	2035      	movs	r0, #53	; 0x35
 8003a26:	f7fd fd77 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f7fd fd84 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8003a30:	2051      	movs	r0, #81	; 0x51
 8003a32:	f7fd fd71 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 8003a36:	20ff      	movs	r0, #255	; 0xff
 8003a38:	f7fd fd7e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8003a3c:	2053      	movs	r0, #83	; 0x53
 8003a3e:	f7fd fd6b 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 8003a42:	202c      	movs	r0, #44	; 0x2c
 8003a44:	f7fd fd78 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8003a48:	2055      	movs	r0, #85	; 0x55
 8003a4a:	f7fd fd65 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 8003a4e:	2082      	movs	r0, #130	; 0x82
 8003a50:	f7fd fd72 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8003a54:	202c      	movs	r0, #44	; 0x2c
 8003a56:	f7fd fd5f 	bl	8001518 <LCD_WR_REG>
 8003a5a:	f002 b8e7 	b.w	8005c2c <LCD_Init+0x383c>
	}else if(lcddev.id==0x5510)
 8003a5e:	4b04      	ldr	r3, [pc, #16]	; (8003a70 <LCD_Init+0x1680>)
 8003a60:	889b      	ldrh	r3, [r3, #4]
 8003a62:	f245 5210 	movw	r2, #21776	; 0x5510
 8003a66:	4293      	cmp	r3, r2
 8003a68:	f040 8782 	bne.w	8004970 <LCD_Init+0x2580>
 8003a6c:	e002      	b.n	8003a74 <LCD_Init+0x1684>
 8003a6e:	bf00      	nop
 8003a70:	200002bc 	.word	0x200002bc
	{
		LCD_WriteReg(0xF000,0x55);
 8003a74:	2155      	movs	r1, #85	; 0x55
 8003a76:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003a7a:	f7fd fd7b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8003a7e:	21aa      	movs	r1, #170	; 0xaa
 8003a80:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003a84:	f7fd fd76 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8003a88:	2152      	movs	r1, #82	; 0x52
 8003a8a:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003a8e:	f7fd fd71 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8003a92:	2108      	movs	r1, #8
 8003a94:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003a98:	f7fd fd6c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003aa2:	f7fd fd67 	bl	8001574 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 8003aa6:	210d      	movs	r1, #13
 8003aa8:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003aac:	f7fd fd62 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 8003ab0:	210d      	movs	r1, #13
 8003ab2:	f24b 0001 	movw	r0, #45057	; 0xb001
 8003ab6:	f7fd fd5d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 8003aba:	210d      	movs	r1, #13
 8003abc:	f24b 0002 	movw	r0, #45058	; 0xb002
 8003ac0:	f7fd fd58 	bl	8001574 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 8003ac4:	2134      	movs	r1, #52	; 0x34
 8003ac6:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003aca:	f7fd fd53 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 8003ace:	2134      	movs	r1, #52	; 0x34
 8003ad0:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003ad4:	f7fd fd4e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8003ad8:	2134      	movs	r1, #52	; 0x34
 8003ada:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003ade:	f7fd fd49 	bl	8001574 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 8003ae2:	210d      	movs	r1, #13
 8003ae4:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003ae8:	f7fd fd44 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8003aec:	210d      	movs	r1, #13
 8003aee:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003af2:	f7fd fd3f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 8003af6:	210d      	movs	r1, #13
 8003af8:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003afc:	f7fd fd3a 	bl	8001574 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 8003b00:	2134      	movs	r1, #52	; 0x34
 8003b02:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003b06:	f7fd fd35 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8003b0a:	2134      	movs	r1, #52	; 0x34
 8003b0c:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003b10:	f7fd fd30 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8003b14:	2134      	movs	r1, #52	; 0x34
 8003b16:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003b1a:	f7fd fd2b 	bl	8001574 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8003b1e:	2100      	movs	r1, #0
 8003b20:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003b24:	f7fd fd26 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8003b28:	2100      	movs	r1, #0
 8003b2a:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003b2e:	f7fd fd21 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 8003b32:	2100      	movs	r1, #0
 8003b34:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003b38:	f7fd fd1c 	bl	8001574 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8003b3c:	2124      	movs	r1, #36	; 0x24
 8003b3e:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003b42:	f7fd fd17 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 8003b46:	2124      	movs	r1, #36	; 0x24
 8003b48:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003b4c:	f7fd fd12 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8003b50:	2124      	movs	r1, #36	; 0x24
 8003b52:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003b56:	f7fd fd0d 	bl	8001574 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003b60:	f7fd fd08 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 8003b64:	210f      	movs	r1, #15
 8003b66:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8003b6a:	f7fd fd03 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 8003b6e:	210f      	movs	r1, #15
 8003b70:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003b74:	f7fd fcfe 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 8003b78:	210f      	movs	r1, #15
 8003b7a:	f24b 3002 	movw	r0, #45826	; 0xb302
 8003b7e:	f7fd fcf9 	bl	8001574 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 8003b82:	2134      	movs	r1, #52	; 0x34
 8003b84:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003b88:	f7fd fcf4 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 8003b8c:	2134      	movs	r1, #52	; 0x34
 8003b8e:	f64b 1001 	movw	r0, #47361	; 0xb901
 8003b92:	f7fd fcef 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 8003b96:	2134      	movs	r1, #52	; 0x34
 8003b98:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003b9c:	f7fd fcea 	bl	8001574 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 8003ba0:	2108      	movs	r1, #8
 8003ba2:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8003ba6:	f7fd fce5 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 8003baa:	2108      	movs	r1, #8
 8003bac:	f24b 5001 	movw	r0, #46337	; 0xb501
 8003bb0:	f7fd fce0 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 8003bb4:	2108      	movs	r1, #8
 8003bb6:	f24b 5002 	movw	r0, #46338	; 0xb502
 8003bba:	f7fd fcdb 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 8003bbe:	2103      	movs	r1, #3
 8003bc0:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003bc4:	f7fd fcd6 	bl	8001574 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8003bc8:	2124      	movs	r1, #36	; 0x24
 8003bca:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003bce:	f7fd fcd1 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 8003bd2:	2124      	movs	r1, #36	; 0x24
 8003bd4:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003bd8:	f7fd fccc 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8003bdc:	2124      	movs	r1, #36	; 0x24
 8003bde:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003be2:	f7fd fcc7 	bl	8001574 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 8003be6:	2100      	movs	r1, #0
 8003be8:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003bec:	f7fd fcc2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8003bf0:	2178      	movs	r1, #120	; 0x78
 8003bf2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003bf6:	f7fd fcbd 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003c00:	f7fd fcb8 	bl	8001574 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8003c04:	2100      	movs	r1, #0
 8003c06:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003c0a:	f7fd fcb3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8003c0e:	2178      	movs	r1, #120	; 0x78
 8003c10:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003c14:	f7fd fcae 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003c1e:	f7fd fca9 	bl	8001574 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 8003c22:	2100      	movs	r1, #0
 8003c24:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003c28:	f7fd fca4 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8003c2c:	2164      	movs	r1, #100	; 0x64
 8003c2e:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003c32:	f7fd fc9f 	bl	8001574 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 8003c36:	2100      	movs	r1, #0
 8003c38:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003c3c:	f7fd fc9a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8003c40:	2133      	movs	r1, #51	; 0x33
 8003c42:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003c46:	f7fd fc95 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003c50:	f7fd fc90 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 8003c54:	2134      	movs	r1, #52	; 0x34
 8003c56:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003c5a:	f7fd fc8b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8003c5e:	2100      	movs	r1, #0
 8003c60:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003c64:	f7fd fc86 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 8003c68:	213a      	movs	r1, #58	; 0x3a
 8003c6a:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003c6e:	f7fd fc81 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 8003c72:	2100      	movs	r1, #0
 8003c74:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003c78:	f7fd fc7c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 8003c7c:	214a      	movs	r1, #74	; 0x4a
 8003c7e:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003c82:	f7fd fc77 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 8003c86:	2100      	movs	r1, #0
 8003c88:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003c8c:	f7fd fc72 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 8003c90:	215c      	movs	r1, #92	; 0x5c
 8003c92:	f24d 1009 	movw	r0, #53513	; 0xd109
 8003c96:	f7fd fc6d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8003ca0:	f7fd fc68 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 8003ca4:	2181      	movs	r1, #129	; 0x81
 8003ca6:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8003caa:	f7fd fc63 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 8003cae:	2100      	movs	r1, #0
 8003cb0:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003cb4:	f7fd fc5e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 8003cb8:	21a6      	movs	r1, #166	; 0xa6
 8003cba:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8003cbe:	f7fd fc59 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003cc8:	f7fd fc54 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8003ccc:	21e5      	movs	r1, #229	; 0xe5
 8003cce:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8003cd2:	f7fd fc4f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003cdc:	f7fd fc4a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8003ce0:	2113      	movs	r1, #19
 8003ce2:	f24d 1011 	movw	r0, #53521	; 0xd111
 8003ce6:	f7fd fc45 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8003cea:	2101      	movs	r1, #1
 8003cec:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003cf0:	f7fd fc40 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8003cf4:	2154      	movs	r1, #84	; 0x54
 8003cf6:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003cfa:	f7fd fc3b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8003cfe:	2101      	movs	r1, #1
 8003d00:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003d04:	f7fd fc36 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8003d08:	2182      	movs	r1, #130	; 0x82
 8003d0a:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003d0e:	f7fd fc31 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 8003d12:	2101      	movs	r1, #1
 8003d14:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003d18:	f7fd fc2c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8003d1c:	21ca      	movs	r1, #202	; 0xca
 8003d1e:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003d22:	f7fd fc27 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 8003d26:	2102      	movs	r1, #2
 8003d28:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003d2c:	f7fd fc22 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8003d30:	2100      	movs	r1, #0
 8003d32:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003d36:	f7fd fc1d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003d40:	f7fd fc18 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 8003d44:	2101      	movs	r1, #1
 8003d46:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003d4a:	f7fd fc13 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8003d4e:	2102      	movs	r1, #2
 8003d50:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003d54:	f7fd fc0e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8003d58:	2134      	movs	r1, #52	; 0x34
 8003d5a:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003d5e:	f7fd fc09 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 8003d62:	2102      	movs	r1, #2
 8003d64:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8003d68:	f7fd fc04 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 8003d6c:	2167      	movs	r1, #103	; 0x67
 8003d6e:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003d72:	f7fd fbff 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 8003d76:	2102      	movs	r1, #2
 8003d78:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003d7c:	f7fd fbfa 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 8003d80:	2184      	movs	r1, #132	; 0x84
 8003d82:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003d86:	f7fd fbf5 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003d90:	f7fd fbf0 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 8003d94:	21a4      	movs	r1, #164	; 0xa4
 8003d96:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003d9a:	f7fd fbeb 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 8003d9e:	2102      	movs	r1, #2
 8003da0:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003da4:	f7fd fbe6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 8003da8:	21b7      	movs	r1, #183	; 0xb7
 8003daa:	f24d 1025 	movw	r0, #53541	; 0xd125
 8003dae:	f7fd fbe1 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 8003db2:	2102      	movs	r1, #2
 8003db4:	f24d 1026 	movw	r0, #53542	; 0xd126
 8003db8:	f7fd fbdc 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 8003dbc:	21cf      	movs	r1, #207	; 0xcf
 8003dbe:	f24d 1027 	movw	r0, #53543	; 0xd127
 8003dc2:	f7fd fbd7 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003dcc:	f7fd fbd2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8003dd0:	21de      	movs	r1, #222	; 0xde
 8003dd2:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003dd6:	f7fd fbcd 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8003dda:	2102      	movs	r1, #2
 8003ddc:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003de0:	f7fd fbc8 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8003de4:	21f2      	movs	r1, #242	; 0xf2
 8003de6:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003dea:	f7fd fbc3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8003dee:	2102      	movs	r1, #2
 8003df0:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003df4:	f7fd fbbe 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8003df8:	21fe      	movs	r1, #254	; 0xfe
 8003dfa:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003dfe:	f7fd fbb9 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 8003e02:	2103      	movs	r1, #3
 8003e04:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003e08:	f7fd fbb4 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8003e0c:	2110      	movs	r1, #16
 8003e0e:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003e12:	f7fd fbaf 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8003e16:	2103      	movs	r1, #3
 8003e18:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003e1c:	f7fd fbaa 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8003e20:	2133      	movs	r1, #51	; 0x33
 8003e22:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003e26:	f7fd fba5 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8003e2a:	2103      	movs	r1, #3
 8003e2c:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003e30:	f7fd fba0 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 8003e34:	216d      	movs	r1, #109	; 0x6d
 8003e36:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003e3a:	f7fd fb9b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8003e3e:	2100      	movs	r1, #0
 8003e40:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003e44:	f7fd fb96 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8003e48:	2133      	movs	r1, #51	; 0x33
 8003e4a:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003e4e:	f7fd fb91 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 8003e52:	2100      	movs	r1, #0
 8003e54:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003e58:	f7fd fb8c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8003e5c:	2134      	movs	r1, #52	; 0x34
 8003e5e:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003e62:	f7fd fb87 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 8003e66:	2100      	movs	r1, #0
 8003e68:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003e6c:	f7fd fb82 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 8003e70:	213a      	movs	r1, #58	; 0x3a
 8003e72:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003e76:	f7fd fb7d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003e80:	f7fd fb78 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 8003e84:	214a      	movs	r1, #74	; 0x4a
 8003e86:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003e8a:	f7fd fb73 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 8003e8e:	2100      	movs	r1, #0
 8003e90:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003e94:	f7fd fb6e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 8003e98:	215c      	movs	r1, #92	; 0x5c
 8003e9a:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003e9e:	f7fd fb69 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003ea8:	f7fd fb64 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 8003eac:	2181      	movs	r1, #129	; 0x81
 8003eae:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003eb2:	f7fd fb5f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003ebc:	f7fd fb5a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 8003ec0:	21a6      	movs	r1, #166	; 0xa6
 8003ec2:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003ec6:	f7fd fb55 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8003eca:	2100      	movs	r1, #0
 8003ecc:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003ed0:	f7fd fb50 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 8003ed4:	21e5      	movs	r1, #229	; 0xe5
 8003ed6:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003eda:	f7fd fb4b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 8003ede:	2101      	movs	r1, #1
 8003ee0:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003ee4:	f7fd fb46 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8003ee8:	2113      	movs	r1, #19
 8003eea:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003eee:	f7fd fb41 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003ef8:	f7fd fb3c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8003efc:	2154      	movs	r1, #84	; 0x54
 8003efe:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003f02:	f7fd fb37 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8003f06:	2101      	movs	r1, #1
 8003f08:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003f0c:	f7fd fb32 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8003f10:	2182      	movs	r1, #130	; 0x82
 8003f12:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003f16:	f7fd fb2d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003f20:	f7fd fb28 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 8003f24:	21ca      	movs	r1, #202	; 0xca
 8003f26:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003f2a:	f7fd fb23 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 8003f2e:	2102      	movs	r1, #2
 8003f30:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003f34:	f7fd fb1e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8003f38:	2100      	movs	r1, #0
 8003f3a:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003f3e:	f7fd fb19 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 8003f42:	2102      	movs	r1, #2
 8003f44:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003f48:	f7fd fb14 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8003f4c:	2101      	movs	r1, #1
 8003f4e:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003f52:	f7fd fb0f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 8003f56:	2102      	movs	r1, #2
 8003f58:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003f5c:	f7fd fb0a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8003f60:	2134      	movs	r1, #52	; 0x34
 8003f62:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003f66:	f7fd fb05 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003f70:	f7fd fb00 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 8003f74:	2167      	movs	r1, #103	; 0x67
 8003f76:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003f7a:	f7fd fafb 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 8003f7e:	2102      	movs	r1, #2
 8003f80:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003f84:	f7fd faf6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 8003f88:	2184      	movs	r1, #132	; 0x84
 8003f8a:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003f8e:	f7fd faf1 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 8003f92:	2102      	movs	r1, #2
 8003f94:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003f98:	f7fd faec 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 8003f9c:	21a4      	movs	r1, #164	; 0xa4
 8003f9e:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003fa2:	f7fd fae7 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003fac:	f7fd fae2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 8003fb0:	21b7      	movs	r1, #183	; 0xb7
 8003fb2:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003fb6:	f7fd fadd 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 8003fba:	2102      	movs	r1, #2
 8003fbc:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003fc0:	f7fd fad8 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 8003fc4:	21cf      	movs	r1, #207	; 0xcf
 8003fc6:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003fca:	f7fd fad3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 8003fce:	2102      	movs	r1, #2
 8003fd0:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003fd4:	f7fd face 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8003fd8:	21de      	movs	r1, #222	; 0xde
 8003fda:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003fde:	f7fd fac9 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003fe8:	f7fd fac4 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8003fec:	21f2      	movs	r1, #242	; 0xf2
 8003fee:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003ff2:	f7fd fabf 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8003ff6:	2102      	movs	r1, #2
 8003ff8:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003ffc:	f7fd faba 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8004000:	21fe      	movs	r1, #254	; 0xfe
 8004002:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8004006:	f7fd fab5 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 800400a:	2103      	movs	r1, #3
 800400c:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8004010:	f7fd fab0 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8004014:	2110      	movs	r1, #16
 8004016:	f24d 202f 	movw	r0, #53807	; 0xd22f
 800401a:	f7fd faab 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 800401e:	2103      	movs	r1, #3
 8004020:	f24d 2030 	movw	r0, #53808	; 0xd230
 8004024:	f7fd faa6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8004028:	2133      	movs	r1, #51	; 0x33
 800402a:	f24d 2031 	movw	r0, #53809	; 0xd231
 800402e:	f7fd faa1 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 8004032:	2103      	movs	r1, #3
 8004034:	f24d 2032 	movw	r0, #53810	; 0xd232
 8004038:	f7fd fa9c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 800403c:	216d      	movs	r1, #109	; 0x6d
 800403e:	f24d 2033 	movw	r0, #53811	; 0xd233
 8004042:	f7fd fa97 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 8004046:	2100      	movs	r1, #0
 8004048:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 800404c:	f7fd fa92 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8004050:	2133      	movs	r1, #51	; 0x33
 8004052:	f24d 3001 	movw	r0, #54017	; 0xd301
 8004056:	f7fd fa8d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 800405a:	2100      	movs	r1, #0
 800405c:	f24d 3002 	movw	r0, #54018	; 0xd302
 8004060:	f7fd fa88 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 8004064:	2134      	movs	r1, #52	; 0x34
 8004066:	f24d 3003 	movw	r0, #54019	; 0xd303
 800406a:	f7fd fa83 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 800406e:	2100      	movs	r1, #0
 8004070:	f24d 3004 	movw	r0, #54020	; 0xd304
 8004074:	f7fd fa7e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 8004078:	213a      	movs	r1, #58	; 0x3a
 800407a:	f24d 3005 	movw	r0, #54021	; 0xd305
 800407e:	f7fd fa79 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 8004082:	2100      	movs	r1, #0
 8004084:	f24d 3006 	movw	r0, #54022	; 0xd306
 8004088:	f7fd fa74 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 800408c:	214a      	movs	r1, #74	; 0x4a
 800408e:	f24d 3007 	movw	r0, #54023	; 0xd307
 8004092:	f7fd fa6f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 8004096:	2100      	movs	r1, #0
 8004098:	f24d 3008 	movw	r0, #54024	; 0xd308
 800409c:	f7fd fa6a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 80040a0:	215c      	movs	r1, #92	; 0x5c
 80040a2:	f24d 3009 	movw	r0, #54025	; 0xd309
 80040a6:	f7fd fa65 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 80040aa:	2100      	movs	r1, #0
 80040ac:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80040b0:	f7fd fa60 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 80040b4:	2181      	movs	r1, #129	; 0x81
 80040b6:	f24d 300b 	movw	r0, #54027	; 0xd30b
 80040ba:	f7fd fa5b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 80040be:	2100      	movs	r1, #0
 80040c0:	f24d 300c 	movw	r0, #54028	; 0xd30c
 80040c4:	f7fd fa56 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 80040c8:	21a6      	movs	r1, #166	; 0xa6
 80040ca:	f24d 300d 	movw	r0, #54029	; 0xd30d
 80040ce:	f7fd fa51 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 80040d2:	2100      	movs	r1, #0
 80040d4:	f24d 300e 	movw	r0, #54030	; 0xd30e
 80040d8:	f7fd fa4c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 80040dc:	21e5      	movs	r1, #229	; 0xe5
 80040de:	f24d 300f 	movw	r0, #54031	; 0xd30f
 80040e2:	f7fd fa47 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 80040e6:	2101      	movs	r1, #1
 80040e8:	f24d 3010 	movw	r0, #54032	; 0xd310
 80040ec:	f7fd fa42 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 80040f0:	2113      	movs	r1, #19
 80040f2:	f24d 3011 	movw	r0, #54033	; 0xd311
 80040f6:	f7fd fa3d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 80040fa:	2101      	movs	r1, #1
 80040fc:	f24d 3012 	movw	r0, #54034	; 0xd312
 8004100:	f7fd fa38 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8004104:	2154      	movs	r1, #84	; 0x54
 8004106:	f24d 3013 	movw	r0, #54035	; 0xd313
 800410a:	f7fd fa33 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 800410e:	2101      	movs	r1, #1
 8004110:	f24d 3014 	movw	r0, #54036	; 0xd314
 8004114:	f7fd fa2e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8004118:	2182      	movs	r1, #130	; 0x82
 800411a:	f24d 3015 	movw	r0, #54037	; 0xd315
 800411e:	f7fd fa29 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 8004122:	2101      	movs	r1, #1
 8004124:	f24d 3016 	movw	r0, #54038	; 0xd316
 8004128:	f7fd fa24 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 800412c:	21ca      	movs	r1, #202	; 0xca
 800412e:	f24d 3017 	movw	r0, #54039	; 0xd317
 8004132:	f7fd fa1f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 8004136:	2102      	movs	r1, #2
 8004138:	f24d 3018 	movw	r0, #54040	; 0xd318
 800413c:	f7fd fa1a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8004140:	2100      	movs	r1, #0
 8004142:	f24d 3019 	movw	r0, #54041	; 0xd319
 8004146:	f7fd fa15 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 800414a:	2102      	movs	r1, #2
 800414c:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8004150:	f7fd fa10 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 8004154:	2101      	movs	r1, #1
 8004156:	f24d 301b 	movw	r0, #54043	; 0xd31b
 800415a:	f7fd fa0b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 800415e:	2102      	movs	r1, #2
 8004160:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8004164:	f7fd fa06 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 8004168:	2134      	movs	r1, #52	; 0x34
 800416a:	f24d 301d 	movw	r0, #54045	; 0xd31d
 800416e:	f7fd fa01 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 8004172:	2102      	movs	r1, #2
 8004174:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8004178:	f7fd f9fc 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 800417c:	2167      	movs	r1, #103	; 0x67
 800417e:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8004182:	f7fd f9f7 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 8004186:	2102      	movs	r1, #2
 8004188:	f24d 3020 	movw	r0, #54048	; 0xd320
 800418c:	f7fd f9f2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 8004190:	2184      	movs	r1, #132	; 0x84
 8004192:	f24d 3021 	movw	r0, #54049	; 0xd321
 8004196:	f7fd f9ed 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 800419a:	2102      	movs	r1, #2
 800419c:	f24d 3022 	movw	r0, #54050	; 0xd322
 80041a0:	f7fd f9e8 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 80041a4:	21a4      	movs	r1, #164	; 0xa4
 80041a6:	f24d 3023 	movw	r0, #54051	; 0xd323
 80041aa:	f7fd f9e3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 80041ae:	2102      	movs	r1, #2
 80041b0:	f24d 3024 	movw	r0, #54052	; 0xd324
 80041b4:	f7fd f9de 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 80041b8:	21b7      	movs	r1, #183	; 0xb7
 80041ba:	f24d 3025 	movw	r0, #54053	; 0xd325
 80041be:	f7fd f9d9 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 80041c2:	2102      	movs	r1, #2
 80041c4:	f24d 3026 	movw	r0, #54054	; 0xd326
 80041c8:	f7fd f9d4 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 80041cc:	21cf      	movs	r1, #207	; 0xcf
 80041ce:	f24d 3027 	movw	r0, #54055	; 0xd327
 80041d2:	f7fd f9cf 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 80041d6:	2102      	movs	r1, #2
 80041d8:	f24d 3028 	movw	r0, #54056	; 0xd328
 80041dc:	f7fd f9ca 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 80041e0:	21de      	movs	r1, #222	; 0xde
 80041e2:	f24d 3029 	movw	r0, #54057	; 0xd329
 80041e6:	f7fd f9c5 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 80041ea:	2102      	movs	r1, #2
 80041ec:	f24d 302a 	movw	r0, #54058	; 0xd32a
 80041f0:	f7fd f9c0 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 80041f4:	21f2      	movs	r1, #242	; 0xf2
 80041f6:	f24d 302b 	movw	r0, #54059	; 0xd32b
 80041fa:	f7fd f9bb 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 80041fe:	2102      	movs	r1, #2
 8004200:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8004204:	f7fd f9b6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8004208:	21fe      	movs	r1, #254	; 0xfe
 800420a:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800420e:	f7fd f9b1 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 8004212:	2103      	movs	r1, #3
 8004214:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8004218:	f7fd f9ac 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 800421c:	2110      	movs	r1, #16
 800421e:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8004222:	f7fd f9a7 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 8004226:	2103      	movs	r1, #3
 8004228:	f24d 3030 	movw	r0, #54064	; 0xd330
 800422c:	f7fd f9a2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 8004230:	2133      	movs	r1, #51	; 0x33
 8004232:	f24d 3031 	movw	r0, #54065	; 0xd331
 8004236:	f7fd f99d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 800423a:	2103      	movs	r1, #3
 800423c:	f24d 3032 	movw	r0, #54066	; 0xd332
 8004240:	f7fd f998 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 8004244:	216d      	movs	r1, #109	; 0x6d
 8004246:	f24d 3033 	movw	r0, #54067	; 0xd333
 800424a:	f7fd f993 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 800424e:	2100      	movs	r1, #0
 8004250:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8004254:	f7fd f98e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8004258:	2133      	movs	r1, #51	; 0x33
 800425a:	f24d 4001 	movw	r0, #54273	; 0xd401
 800425e:	f7fd f989 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 8004262:	2100      	movs	r1, #0
 8004264:	f24d 4002 	movw	r0, #54274	; 0xd402
 8004268:	f7fd f984 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 800426c:	2134      	movs	r1, #52	; 0x34
 800426e:	f24d 4003 	movw	r0, #54275	; 0xd403
 8004272:	f7fd f97f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 8004276:	2100      	movs	r1, #0
 8004278:	f24d 4004 	movw	r0, #54276	; 0xd404
 800427c:	f7fd f97a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 8004280:	213a      	movs	r1, #58	; 0x3a
 8004282:	f24d 4005 	movw	r0, #54277	; 0xd405
 8004286:	f7fd f975 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 800428a:	2100      	movs	r1, #0
 800428c:	f24d 4006 	movw	r0, #54278	; 0xd406
 8004290:	f7fd f970 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 8004294:	214a      	movs	r1, #74	; 0x4a
 8004296:	f24d 4007 	movw	r0, #54279	; 0xd407
 800429a:	f7fd f96b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 800429e:	2100      	movs	r1, #0
 80042a0:	f24d 4008 	movw	r0, #54280	; 0xd408
 80042a4:	f7fd f966 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 80042a8:	215c      	movs	r1, #92	; 0x5c
 80042aa:	f24d 4009 	movw	r0, #54281	; 0xd409
 80042ae:	f7fd f961 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 80042b2:	2100      	movs	r1, #0
 80042b4:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80042b8:	f7fd f95c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 80042bc:	2181      	movs	r1, #129	; 0x81
 80042be:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80042c2:	f7fd f957 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 80042c6:	2100      	movs	r1, #0
 80042c8:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80042cc:	f7fd f952 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 80042d0:	21a6      	movs	r1, #166	; 0xa6
 80042d2:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80042d6:	f7fd f94d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 80042da:	2100      	movs	r1, #0
 80042dc:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80042e0:	f7fd f948 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 80042e4:	21e5      	movs	r1, #229	; 0xe5
 80042e6:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80042ea:	f7fd f943 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 80042ee:	2101      	movs	r1, #1
 80042f0:	f24d 4010 	movw	r0, #54288	; 0xd410
 80042f4:	f7fd f93e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 80042f8:	2113      	movs	r1, #19
 80042fa:	f24d 4011 	movw	r0, #54289	; 0xd411
 80042fe:	f7fd f939 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 8004302:	2101      	movs	r1, #1
 8004304:	f24d 4012 	movw	r0, #54290	; 0xd412
 8004308:	f7fd f934 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 800430c:	2154      	movs	r1, #84	; 0x54
 800430e:	f24d 4013 	movw	r0, #54291	; 0xd413
 8004312:	f7fd f92f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 8004316:	2101      	movs	r1, #1
 8004318:	f24d 4014 	movw	r0, #54292	; 0xd414
 800431c:	f7fd f92a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8004320:	2182      	movs	r1, #130	; 0x82
 8004322:	f24d 4015 	movw	r0, #54293	; 0xd415
 8004326:	f7fd f925 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 800432a:	2101      	movs	r1, #1
 800432c:	f24d 4016 	movw	r0, #54294	; 0xd416
 8004330:	f7fd f920 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 8004334:	21ca      	movs	r1, #202	; 0xca
 8004336:	f24d 4017 	movw	r0, #54295	; 0xd417
 800433a:	f7fd f91b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 800433e:	2102      	movs	r1, #2
 8004340:	f24d 4018 	movw	r0, #54296	; 0xd418
 8004344:	f7fd f916 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8004348:	2100      	movs	r1, #0
 800434a:	f24d 4019 	movw	r0, #54297	; 0xd419
 800434e:	f7fd f911 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 8004352:	2102      	movs	r1, #2
 8004354:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8004358:	f7fd f90c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 800435c:	2101      	movs	r1, #1
 800435e:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8004362:	f7fd f907 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 8004366:	2102      	movs	r1, #2
 8004368:	f24d 401c 	movw	r0, #54300	; 0xd41c
 800436c:	f7fd f902 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 8004370:	2134      	movs	r1, #52	; 0x34
 8004372:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8004376:	f7fd f8fd 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 800437a:	2102      	movs	r1, #2
 800437c:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8004380:	f7fd f8f8 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 8004384:	2167      	movs	r1, #103	; 0x67
 8004386:	f24d 401f 	movw	r0, #54303	; 0xd41f
 800438a:	f7fd f8f3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 800438e:	2102      	movs	r1, #2
 8004390:	f24d 4020 	movw	r0, #54304	; 0xd420
 8004394:	f7fd f8ee 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 8004398:	2184      	movs	r1, #132	; 0x84
 800439a:	f24d 4021 	movw	r0, #54305	; 0xd421
 800439e:	f7fd f8e9 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 80043a2:	2102      	movs	r1, #2
 80043a4:	f24d 4022 	movw	r0, #54306	; 0xd422
 80043a8:	f7fd f8e4 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 80043ac:	21a4      	movs	r1, #164	; 0xa4
 80043ae:	f24d 4023 	movw	r0, #54307	; 0xd423
 80043b2:	f7fd f8df 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 80043b6:	2102      	movs	r1, #2
 80043b8:	f24d 4024 	movw	r0, #54308	; 0xd424
 80043bc:	f7fd f8da 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 80043c0:	21b7      	movs	r1, #183	; 0xb7
 80043c2:	f24d 4025 	movw	r0, #54309	; 0xd425
 80043c6:	f7fd f8d5 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 80043ca:	2102      	movs	r1, #2
 80043cc:	f24d 4026 	movw	r0, #54310	; 0xd426
 80043d0:	f7fd f8d0 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 80043d4:	21cf      	movs	r1, #207	; 0xcf
 80043d6:	f24d 4027 	movw	r0, #54311	; 0xd427
 80043da:	f7fd f8cb 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 80043de:	2102      	movs	r1, #2
 80043e0:	f24d 4028 	movw	r0, #54312	; 0xd428
 80043e4:	f7fd f8c6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 80043e8:	21de      	movs	r1, #222	; 0xde
 80043ea:	f24d 4029 	movw	r0, #54313	; 0xd429
 80043ee:	f7fd f8c1 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 80043f2:	2102      	movs	r1, #2
 80043f4:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80043f8:	f7fd f8bc 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 80043fc:	21f2      	movs	r1, #242	; 0xf2
 80043fe:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8004402:	f7fd f8b7 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8004406:	2102      	movs	r1, #2
 8004408:	f24d 402c 	movw	r0, #54316	; 0xd42c
 800440c:	f7fd f8b2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8004410:	21fe      	movs	r1, #254	; 0xfe
 8004412:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8004416:	f7fd f8ad 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 800441a:	2103      	movs	r1, #3
 800441c:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8004420:	f7fd f8a8 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8004424:	2110      	movs	r1, #16
 8004426:	f24d 402f 	movw	r0, #54319	; 0xd42f
 800442a:	f7fd f8a3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 800442e:	2103      	movs	r1, #3
 8004430:	f24d 4030 	movw	r0, #54320	; 0xd430
 8004434:	f7fd f89e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8004438:	2133      	movs	r1, #51	; 0x33
 800443a:	f24d 4031 	movw	r0, #54321	; 0xd431
 800443e:	f7fd f899 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 8004442:	2103      	movs	r1, #3
 8004444:	f24d 4032 	movw	r0, #54322	; 0xd432
 8004448:	f7fd f894 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 800444c:	216d      	movs	r1, #109	; 0x6d
 800444e:	f24d 4033 	movw	r0, #54323	; 0xd433
 8004452:	f7fd f88f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 8004456:	2100      	movs	r1, #0
 8004458:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 800445c:	f7fd f88a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8004460:	2133      	movs	r1, #51	; 0x33
 8004462:	f24d 5001 	movw	r0, #54529	; 0xd501
 8004466:	f7fd f885 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 800446a:	2100      	movs	r1, #0
 800446c:	f24d 5002 	movw	r0, #54530	; 0xd502
 8004470:	f7fd f880 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 8004474:	2134      	movs	r1, #52	; 0x34
 8004476:	f24d 5003 	movw	r0, #54531	; 0xd503
 800447a:	f7fd f87b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 800447e:	2100      	movs	r1, #0
 8004480:	f24d 5004 	movw	r0, #54532	; 0xd504
 8004484:	f7fd f876 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 8004488:	213a      	movs	r1, #58	; 0x3a
 800448a:	f24d 5005 	movw	r0, #54533	; 0xd505
 800448e:	f7fd f871 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 8004492:	2100      	movs	r1, #0
 8004494:	f24d 5006 	movw	r0, #54534	; 0xd506
 8004498:	f7fd f86c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 800449c:	214a      	movs	r1, #74	; 0x4a
 800449e:	f24d 5007 	movw	r0, #54535	; 0xd507
 80044a2:	f7fd f867 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 80044a6:	2100      	movs	r1, #0
 80044a8:	f24d 5008 	movw	r0, #54536	; 0xd508
 80044ac:	f7fd f862 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 80044b0:	215c      	movs	r1, #92	; 0x5c
 80044b2:	f24d 5009 	movw	r0, #54537	; 0xd509
 80044b6:	f7fd f85d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 80044ba:	2100      	movs	r1, #0
 80044bc:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80044c0:	f7fd f858 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 80044c4:	2181      	movs	r1, #129	; 0x81
 80044c6:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80044ca:	f7fd f853 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 80044ce:	2100      	movs	r1, #0
 80044d0:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80044d4:	f7fd f84e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 80044d8:	21a6      	movs	r1, #166	; 0xa6
 80044da:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80044de:	f7fd f849 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 80044e2:	2100      	movs	r1, #0
 80044e4:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80044e8:	f7fd f844 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 80044ec:	21e5      	movs	r1, #229	; 0xe5
 80044ee:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80044f2:	f7fd f83f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 80044f6:	2101      	movs	r1, #1
 80044f8:	f24d 5010 	movw	r0, #54544	; 0xd510
 80044fc:	f7fd f83a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 8004500:	2113      	movs	r1, #19
 8004502:	f24d 5011 	movw	r0, #54545	; 0xd511
 8004506:	f7fd f835 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 800450a:	2101      	movs	r1, #1
 800450c:	f24d 5012 	movw	r0, #54546	; 0xd512
 8004510:	f7fd f830 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8004514:	2154      	movs	r1, #84	; 0x54
 8004516:	f24d 5013 	movw	r0, #54547	; 0xd513
 800451a:	f7fd f82b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 800451e:	2101      	movs	r1, #1
 8004520:	f24d 5014 	movw	r0, #54548	; 0xd514
 8004524:	f7fd f826 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8004528:	2182      	movs	r1, #130	; 0x82
 800452a:	f24d 5015 	movw	r0, #54549	; 0xd515
 800452e:	f7fd f821 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 8004532:	2101      	movs	r1, #1
 8004534:	f24d 5016 	movw	r0, #54550	; 0xd516
 8004538:	f7fd f81c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 800453c:	21ca      	movs	r1, #202	; 0xca
 800453e:	f24d 5017 	movw	r0, #54551	; 0xd517
 8004542:	f7fd f817 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 8004546:	2102      	movs	r1, #2
 8004548:	f24d 5018 	movw	r0, #54552	; 0xd518
 800454c:	f7fd f812 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 8004550:	2100      	movs	r1, #0
 8004552:	f24d 5019 	movw	r0, #54553	; 0xd519
 8004556:	f7fd f80d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 800455a:	2102      	movs	r1, #2
 800455c:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8004560:	f7fd f808 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 8004564:	2101      	movs	r1, #1
 8004566:	f24d 501b 	movw	r0, #54555	; 0xd51b
 800456a:	f7fd f803 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 800456e:	2102      	movs	r1, #2
 8004570:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8004574:	f7fc fffe 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 8004578:	2134      	movs	r1, #52	; 0x34
 800457a:	f24d 501d 	movw	r0, #54557	; 0xd51d
 800457e:	f7fc fff9 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 8004582:	2102      	movs	r1, #2
 8004584:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8004588:	f7fc fff4 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 800458c:	2167      	movs	r1, #103	; 0x67
 800458e:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8004592:	f7fc ffef 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 8004596:	2102      	movs	r1, #2
 8004598:	f24d 5020 	movw	r0, #54560	; 0xd520
 800459c:	f7fc ffea 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 80045a0:	2184      	movs	r1, #132	; 0x84
 80045a2:	f24d 5021 	movw	r0, #54561	; 0xd521
 80045a6:	f7fc ffe5 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 80045aa:	2102      	movs	r1, #2
 80045ac:	f24d 5022 	movw	r0, #54562	; 0xd522
 80045b0:	f7fc ffe0 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 80045b4:	21a4      	movs	r1, #164	; 0xa4
 80045b6:	f24d 5023 	movw	r0, #54563	; 0xd523
 80045ba:	f7fc ffdb 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 80045be:	2102      	movs	r1, #2
 80045c0:	f24d 5024 	movw	r0, #54564	; 0xd524
 80045c4:	f7fc ffd6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 80045c8:	21b7      	movs	r1, #183	; 0xb7
 80045ca:	f24d 5025 	movw	r0, #54565	; 0xd525
 80045ce:	f7fc ffd1 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 80045d2:	2102      	movs	r1, #2
 80045d4:	f24d 5026 	movw	r0, #54566	; 0xd526
 80045d8:	f7fc ffcc 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 80045dc:	21cf      	movs	r1, #207	; 0xcf
 80045de:	f24d 5027 	movw	r0, #54567	; 0xd527
 80045e2:	f7fc ffc7 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 80045e6:	2102      	movs	r1, #2
 80045e8:	f24d 5028 	movw	r0, #54568	; 0xd528
 80045ec:	f7fc ffc2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 80045f0:	21de      	movs	r1, #222	; 0xde
 80045f2:	f24d 5029 	movw	r0, #54569	; 0xd529
 80045f6:	f7fc ffbd 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 80045fa:	2102      	movs	r1, #2
 80045fc:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8004600:	f7fc ffb8 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8004604:	21f2      	movs	r1, #242	; 0xf2
 8004606:	f24d 502b 	movw	r0, #54571	; 0xd52b
 800460a:	f7fc ffb3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 800460e:	2102      	movs	r1, #2
 8004610:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004614:	f7fc ffae 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8004618:	21fe      	movs	r1, #254	; 0xfe
 800461a:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800461e:	f7fc ffa9 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 8004622:	2103      	movs	r1, #3
 8004624:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8004628:	f7fc ffa4 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 800462c:	2110      	movs	r1, #16
 800462e:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8004632:	f7fc ff9f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 8004636:	2103      	movs	r1, #3
 8004638:	f24d 5030 	movw	r0, #54576	; 0xd530
 800463c:	f7fc ff9a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 8004640:	2133      	movs	r1, #51	; 0x33
 8004642:	f24d 5031 	movw	r0, #54577	; 0xd531
 8004646:	f7fc ff95 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 800464a:	2103      	movs	r1, #3
 800464c:	f24d 5032 	movw	r0, #54578	; 0xd532
 8004650:	f7fc ff90 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 8004654:	216d      	movs	r1, #109	; 0x6d
 8004656:	f24d 5033 	movw	r0, #54579	; 0xd533
 800465a:	f7fc ff8b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 800465e:	2100      	movs	r1, #0
 8004660:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004664:	f7fc ff86 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 8004668:	2133      	movs	r1, #51	; 0x33
 800466a:	f24d 6001 	movw	r0, #54785	; 0xd601
 800466e:	f7fc ff81 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 8004672:	2100      	movs	r1, #0
 8004674:	f24d 6002 	movw	r0, #54786	; 0xd602
 8004678:	f7fc ff7c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 800467c:	2134      	movs	r1, #52	; 0x34
 800467e:	f24d 6003 	movw	r0, #54787	; 0xd603
 8004682:	f7fc ff77 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 8004686:	2100      	movs	r1, #0
 8004688:	f24d 6004 	movw	r0, #54788	; 0xd604
 800468c:	f7fc ff72 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 8004690:	213a      	movs	r1, #58	; 0x3a
 8004692:	f24d 6005 	movw	r0, #54789	; 0xd605
 8004696:	f7fc ff6d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 800469a:	2100      	movs	r1, #0
 800469c:	f24d 6006 	movw	r0, #54790	; 0xd606
 80046a0:	f7fc ff68 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 80046a4:	214a      	movs	r1, #74	; 0x4a
 80046a6:	f24d 6007 	movw	r0, #54791	; 0xd607
 80046aa:	f7fc ff63 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 80046ae:	2100      	movs	r1, #0
 80046b0:	f24d 6008 	movw	r0, #54792	; 0xd608
 80046b4:	f7fc ff5e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 80046b8:	215c      	movs	r1, #92	; 0x5c
 80046ba:	f24d 6009 	movw	r0, #54793	; 0xd609
 80046be:	f7fc ff59 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 80046c2:	2100      	movs	r1, #0
 80046c4:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80046c8:	f7fc ff54 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 80046cc:	2181      	movs	r1, #129	; 0x81
 80046ce:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80046d2:	f7fc ff4f 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 80046d6:	2100      	movs	r1, #0
 80046d8:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80046dc:	f7fc ff4a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 80046e0:	21a6      	movs	r1, #166	; 0xa6
 80046e2:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80046e6:	f7fc ff45 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 80046ea:	2100      	movs	r1, #0
 80046ec:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80046f0:	f7fc ff40 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 80046f4:	21e5      	movs	r1, #229	; 0xe5
 80046f6:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80046fa:	f7fc ff3b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 80046fe:	2101      	movs	r1, #1
 8004700:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004704:	f7fc ff36 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8004708:	2113      	movs	r1, #19
 800470a:	f24d 6011 	movw	r0, #54801	; 0xd611
 800470e:	f7fc ff31 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 8004712:	2101      	movs	r1, #1
 8004714:	f24d 6012 	movw	r0, #54802	; 0xd612
 8004718:	f7fc ff2c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 800471c:	2154      	movs	r1, #84	; 0x54
 800471e:	f24d 6013 	movw	r0, #54803	; 0xd613
 8004722:	f7fc ff27 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 8004726:	2101      	movs	r1, #1
 8004728:	f24d 6014 	movw	r0, #54804	; 0xd614
 800472c:	f7fc ff22 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 8004730:	2182      	movs	r1, #130	; 0x82
 8004732:	f24d 6015 	movw	r0, #54805	; 0xd615
 8004736:	f7fc ff1d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 800473a:	2101      	movs	r1, #1
 800473c:	f24d 6016 	movw	r0, #54806	; 0xd616
 8004740:	f7fc ff18 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 8004744:	21ca      	movs	r1, #202	; 0xca
 8004746:	f24d 6017 	movw	r0, #54807	; 0xd617
 800474a:	f7fc ff13 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 800474e:	2102      	movs	r1, #2
 8004750:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004754:	f7fc ff0e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 8004758:	2100      	movs	r1, #0
 800475a:	f24d 6019 	movw	r0, #54809	; 0xd619
 800475e:	f7fc ff09 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 8004762:	2102      	movs	r1, #2
 8004764:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8004768:	f7fc ff04 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 800476c:	2101      	movs	r1, #1
 800476e:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8004772:	f7fc feff 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 8004776:	2102      	movs	r1, #2
 8004778:	f24d 601c 	movw	r0, #54812	; 0xd61c
 800477c:	f7fc fefa 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 8004780:	2134      	movs	r1, #52	; 0x34
 8004782:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8004786:	f7fc fef5 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 800478a:	2102      	movs	r1, #2
 800478c:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8004790:	f7fc fef0 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 8004794:	2167      	movs	r1, #103	; 0x67
 8004796:	f24d 601f 	movw	r0, #54815	; 0xd61f
 800479a:	f7fc feeb 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 800479e:	2102      	movs	r1, #2
 80047a0:	f24d 6020 	movw	r0, #54816	; 0xd620
 80047a4:	f7fc fee6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 80047a8:	2184      	movs	r1, #132	; 0x84
 80047aa:	f24d 6021 	movw	r0, #54817	; 0xd621
 80047ae:	f7fc fee1 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 80047b2:	2102      	movs	r1, #2
 80047b4:	f24d 6022 	movw	r0, #54818	; 0xd622
 80047b8:	f7fc fedc 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 80047bc:	21a4      	movs	r1, #164	; 0xa4
 80047be:	f24d 6023 	movw	r0, #54819	; 0xd623
 80047c2:	f7fc fed7 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 80047c6:	2102      	movs	r1, #2
 80047c8:	f24d 6024 	movw	r0, #54820	; 0xd624
 80047cc:	f7fc fed2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 80047d0:	21b7      	movs	r1, #183	; 0xb7
 80047d2:	f24d 6025 	movw	r0, #54821	; 0xd625
 80047d6:	f7fc fecd 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 80047da:	2102      	movs	r1, #2
 80047dc:	f24d 6026 	movw	r0, #54822	; 0xd626
 80047e0:	f7fc fec8 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 80047e4:	21cf      	movs	r1, #207	; 0xcf
 80047e6:	f24d 6027 	movw	r0, #54823	; 0xd627
 80047ea:	f7fc fec3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 80047ee:	2102      	movs	r1, #2
 80047f0:	f24d 6028 	movw	r0, #54824	; 0xd628
 80047f4:	f7fc febe 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 80047f8:	21de      	movs	r1, #222	; 0xde
 80047fa:	f24d 6029 	movw	r0, #54825	; 0xd629
 80047fe:	f7fc feb9 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 8004802:	2102      	movs	r1, #2
 8004804:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8004808:	f7fc feb4 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 800480c:	21f2      	movs	r1, #242	; 0xf2
 800480e:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8004812:	f7fc feaf 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8004816:	2102      	movs	r1, #2
 8004818:	f24d 602c 	movw	r0, #54828	; 0xd62c
 800481c:	f7fc feaa 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 8004820:	21fe      	movs	r1, #254	; 0xfe
 8004822:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8004826:	f7fc fea5 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 800482a:	2103      	movs	r1, #3
 800482c:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8004830:	f7fc fea0 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 8004834:	2110      	movs	r1, #16
 8004836:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800483a:	f7fc fe9b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 800483e:	2103      	movs	r1, #3
 8004840:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004844:	f7fc fe96 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8004848:	2133      	movs	r1, #51	; 0x33
 800484a:	f24d 6031 	movw	r0, #54833	; 0xd631
 800484e:	f7fc fe91 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 8004852:	2103      	movs	r1, #3
 8004854:	f24d 6032 	movw	r0, #54834	; 0xd632
 8004858:	f7fc fe8c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 800485c:	216d      	movs	r1, #109	; 0x6d
 800485e:	f24d 6033 	movw	r0, #54835	; 0xd633
 8004862:	f7fc fe87 	bl	8001574 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 8004866:	2155      	movs	r1, #85	; 0x55
 8004868:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800486c:	f7fc fe82 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8004870:	21aa      	movs	r1, #170	; 0xaa
 8004872:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004876:	f7fc fe7d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 800487a:	2152      	movs	r1, #82	; 0x52
 800487c:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004880:	f7fc fe78 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8004884:	2108      	movs	r1, #8
 8004886:	f24f 0003 	movw	r0, #61443	; 0xf003
 800488a:	f7fc fe73 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 800488e:	2100      	movs	r1, #0
 8004890:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004894:	f7fc fe6e 	bl	8001574 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8004898:	21cc      	movs	r1, #204	; 0xcc
 800489a:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800489e:	f7fc fe69 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80048a2:	2100      	movs	r1, #0
 80048a4:	f24b 1001 	movw	r0, #45313	; 0xb101
 80048a8:	f7fc fe64 	bl	8001574 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 80048ac:	2105      	movs	r1, #5
 80048ae:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80048b2:	f7fc fe5f 	bl	8001574 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 80048b6:	2170      	movs	r1, #112	; 0x70
 80048b8:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80048bc:	f7fc fe5a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 80048c0:	2170      	movs	r1, #112	; 0x70
 80048c2:	f24b 7001 	movw	r0, #46849	; 0xb701
 80048c6:	f7fc fe55 	bl	8001574 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 80048ca:	2101      	movs	r1, #1
 80048cc:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80048d0:	f7fc fe50 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 80048d4:	2103      	movs	r1, #3
 80048d6:	f64b 0001 	movw	r0, #47105	; 0xb801
 80048da:	f7fc fe4b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 80048de:	2103      	movs	r1, #3
 80048e0:	f64b 0002 	movw	r0, #47106	; 0xb802
 80048e4:	f7fc fe46 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 80048e8:	2103      	movs	r1, #3
 80048ea:	f64b 0003 	movw	r0, #47107	; 0xb803
 80048ee:	f7fc fe41 	bl	8001574 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 80048f2:	2102      	movs	r1, #2
 80048f4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80048f8:	f7fc fe3c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 80048fc:	2100      	movs	r1, #0
 80048fe:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004902:	f7fc fe37 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8004906:	2100      	movs	r1, #0
 8004908:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800490c:	f7fc fe32 	bl	8001574 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8004910:	21d0      	movs	r1, #208	; 0xd0
 8004912:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8004916:	f7fc fe2d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 800491a:	2102      	movs	r1, #2
 800491c:	f64c 1001 	movw	r0, #51457	; 0xc901
 8004920:	f7fc fe28 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8004924:	2150      	movs	r1, #80	; 0x50
 8004926:	f64c 1002 	movw	r0, #51458	; 0xc902
 800492a:	f7fc fe23 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 800492e:	2150      	movs	r1, #80	; 0x50
 8004930:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004934:	f7fc fe1e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8004938:	2150      	movs	r1, #80	; 0x50
 800493a:	f64c 1004 	movw	r0, #51460	; 0xc904
 800493e:	f7fc fe19 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 8004942:	2100      	movs	r1, #0
 8004944:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8004948:	f7fc fe14 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 800494c:	2155      	movs	r1, #85	; 0x55
 800494e:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004952:	f7fc fe0f 	bl	8001574 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004956:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800495a:	f7fc fddd 	bl	8001518 <LCD_WR_REG>
		delay_us(120);
 800495e:	2078      	movs	r0, #120	; 0x78
 8004960:	f7fc fdbc 	bl	80014dc <delay_us>
		LCD_WR_REG(0x2900);
 8004964:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8004968:	f7fc fdd6 	bl	8001518 <LCD_WR_REG>
 800496c:	f001 b95e 	b.w	8005c2c <LCD_Init+0x383c>
	}else if(lcddev.id==0x9325)//9325
 8004970:	4bec      	ldr	r3, [pc, #944]	; (8004d24 <LCD_Init+0x2934>)
 8004972:	889b      	ldrh	r3, [r3, #4]
 8004974:	f249 3225 	movw	r2, #37669	; 0x9325
 8004978:	4293      	cmp	r3, r2
 800497a:	f040 80d7 	bne.w	8004b2c <LCD_Init+0x273c>
	{
		LCD_WriteReg(0x00E5,0x78F0);
 800497e:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8004982:	20e5      	movs	r0, #229	; 0xe5
 8004984:	f7fc fdf6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0001,0x0100);
 8004988:	f44f 7180 	mov.w	r1, #256	; 0x100
 800498c:	2001      	movs	r0, #1
 800498e:	f7fc fdf1 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 8004992:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004996:	2002      	movs	r0, #2
 8004998:	f7fc fdec 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0003,0x1030);
 800499c:	f241 0130 	movw	r1, #4144	; 0x1030
 80049a0:	2003      	movs	r0, #3
 80049a2:	f7fc fde7 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0004,0x0000);
 80049a6:	2100      	movs	r1, #0
 80049a8:	2004      	movs	r0, #4
 80049aa:	f7fc fde3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 80049ae:	f240 2102 	movw	r1, #514	; 0x202
 80049b2:	2008      	movs	r0, #8
 80049b4:	f7fc fdde 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0009,0x0000);
 80049b8:	2100      	movs	r1, #0
 80049ba:	2009      	movs	r0, #9
 80049bc:	f7fc fdda 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x000A,0x0000);
 80049c0:	2100      	movs	r1, #0
 80049c2:	200a      	movs	r0, #10
 80049c4:	f7fc fdd6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x000C,0x0000);
 80049c8:	2100      	movs	r1, #0
 80049ca:	200c      	movs	r0, #12
 80049cc:	f7fc fdd2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x000D,0x0000);
 80049d0:	2100      	movs	r1, #0
 80049d2:	200d      	movs	r0, #13
 80049d4:	f7fc fdce 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x000F,0x0000);
 80049d8:	2100      	movs	r1, #0
 80049da:	200f      	movs	r0, #15
 80049dc:	f7fc fdca 	bl	8001574 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010,0x0000);
 80049e0:	2100      	movs	r1, #0
 80049e2:	2010      	movs	r0, #16
 80049e4:	f7fc fdc6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 80049e8:	2107      	movs	r1, #7
 80049ea:	2011      	movs	r0, #17
 80049ec:	f7fc fdc2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 80049f0:	2100      	movs	r1, #0
 80049f2:	2012      	movs	r0, #18
 80049f4:	f7fc fdbe 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 80049f8:	2100      	movs	r1, #0
 80049fa:	2013      	movs	r0, #19
 80049fc:	f7fc fdba 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0000);
 8004a00:	2100      	movs	r1, #0
 8004a02:	2007      	movs	r0, #7
 8004a04:	f7fc fdb6 	bl	8001574 <LCD_WriteReg>
		//vgh
		LCD_WriteReg(0x0010,0x1690);
 8004a08:	f241 6190 	movw	r1, #5776	; 0x1690
 8004a0c:	2010      	movs	r0, #16
 8004a0e:	f7fc fdb1 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0227);
 8004a12:	f240 2127 	movw	r1, #551	; 0x227
 8004a16:	2011      	movs	r0, #17
 8004a18:	f7fc fdac 	bl	8001574 <LCD_WriteReg>
		//delayms(100);
		//vregiout
		LCD_WriteReg(0x0012,0x009D); //0x001b
 8004a1c:	219d      	movs	r1, #157	; 0x9d
 8004a1e:	2012      	movs	r0, #18
 8004a20:	f7fc fda8 	bl	8001574 <LCD_WriteReg>
		//delayms(100);
		//vom amplitude
		LCD_WriteReg(0x0013,0x1900);
 8004a24:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004a28:	2013      	movs	r0, #19
 8004a2a:	f7fc fda3 	bl	8001574 <LCD_WriteReg>
		//delayms(100);
		//vom H
		LCD_WriteReg(0x0029,0x0025);
 8004a2e:	2125      	movs	r1, #37	; 0x25
 8004a30:	2029      	movs	r0, #41	; 0x29
 8004a32:	f7fc fd9f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x002B,0x000D);
 8004a36:	210d      	movs	r1, #13
 8004a38:	202b      	movs	r0, #43	; 0x2b
 8004a3a:	f7fc fd9b 	bl	8001574 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030,0x0007);
 8004a3e:	2107      	movs	r1, #7
 8004a40:	2030      	movs	r0, #48	; 0x30
 8004a42:	f7fc fd97 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0303);
 8004a46:	f240 3103 	movw	r1, #771	; 0x303
 8004a4a:	2031      	movs	r0, #49	; 0x31
 8004a4c:	f7fc fd92 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0003);// 0006
 8004a50:	2103      	movs	r1, #3
 8004a52:	2032      	movs	r0, #50	; 0x32
 8004a54:	f7fc fd8e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0206);
 8004a58:	f240 2106 	movw	r1, #518	; 0x206
 8004a5c:	2035      	movs	r0, #53	; 0x35
 8004a5e:	f7fc fd89 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x0008);
 8004a62:	2108      	movs	r1, #8
 8004a64:	2036      	movs	r0, #54	; 0x36
 8004a66:	f7fc fd85 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0406);
 8004a6a:	f240 4106 	movw	r1, #1030	; 0x406
 8004a6e:	2037      	movs	r0, #55	; 0x37
 8004a70:	f7fc fd80 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0304);//0200
 8004a74:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004a78:	2038      	movs	r0, #56	; 0x38
 8004a7a:	f7fc fd7b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0007);
 8004a7e:	2107      	movs	r1, #7
 8004a80:	2039      	movs	r0, #57	; 0x39
 8004a82:	f7fc fd77 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x003C,0x0602);// 0504
 8004a86:	f240 6102 	movw	r1, #1538	; 0x602
 8004a8a:	203c      	movs	r0, #60	; 0x3c
 8004a8c:	f7fc fd72 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x003D,0x0008);
 8004a90:	2108      	movs	r1, #8
 8004a92:	203d      	movs	r0, #61	; 0x3d
 8004a94:	f7fc fd6e 	bl	8001574 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050,0x0000);
 8004a98:	2100      	movs	r1, #0
 8004a9a:	2050      	movs	r0, #80	; 0x50
 8004a9c:	f7fc fd6a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00EF);
 8004aa0:	21ef      	movs	r1, #239	; 0xef
 8004aa2:	2051      	movs	r0, #81	; 0x51
 8004aa4:	f7fc fd66 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	2052      	movs	r0, #82	; 0x52
 8004aac:	f7fc fd62 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013F);
 8004ab0:	f240 113f 	movw	r1, #319	; 0x13f
 8004ab4:	2053      	movs	r0, #83	; 0x53
 8004ab6:	f7fc fd5d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0xA700);
 8004aba:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004abe:	2060      	movs	r0, #96	; 0x60
 8004ac0:	f7fc fd58 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	2061      	movs	r0, #97	; 0x61
 8004ac8:	f7fc fd54 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x006A,0x0000);
 8004acc:	2100      	movs	r1, #0
 8004ace:	206a      	movs	r0, #106	; 0x6a
 8004ad0:	f7fc fd50 	bl	8001574 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080,0x0000);
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	2080      	movs	r0, #128	; 0x80
 8004ad8:	f7fc fd4c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0081,0x0000);
 8004adc:	2100      	movs	r1, #0
 8004ade:	2081      	movs	r0, #129	; 0x81
 8004ae0:	f7fc fd48 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0082,0x0000);
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	2082      	movs	r0, #130	; 0x82
 8004ae8:	f7fc fd44 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0083,0x0000);
 8004aec:	2100      	movs	r1, #0
 8004aee:	2083      	movs	r0, #131	; 0x83
 8004af0:	f7fc fd40 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0084,0x0000);
 8004af4:	2100      	movs	r1, #0
 8004af6:	2084      	movs	r0, #132	; 0x84
 8004af8:	f7fc fd3c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0085,0x0000);
 8004afc:	2100      	movs	r1, #0
 8004afe:	2085      	movs	r0, #133	; 0x85
 8004b00:	f7fc fd38 	bl	8001574 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090,0x0010);
 8004b04:	2110      	movs	r1, #16
 8004b06:	2090      	movs	r0, #144	; 0x90
 8004b08:	f7fc fd34 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8004b0c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b10:	2092      	movs	r0, #146	; 0x92
 8004b12:	f7fc fd2f 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0x0007,0x0133);
 8004b16:	f240 1133 	movw	r1, #307	; 0x133
 8004b1a:	2007      	movs	r0, #7
 8004b1c:	f7fc fd2a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x0022);//
 8004b20:	2122      	movs	r1, #34	; 0x22
 8004b22:	2000      	movs	r0, #0
 8004b24:	f7fc fd26 	bl	8001574 <LCD_WriteReg>
 8004b28:	f001 b880 	b.w	8005c2c <LCD_Init+0x383c>
	}else if(lcddev.id==0x9328)//ILI9328   OK
 8004b2c:	4b7d      	ldr	r3, [pc, #500]	; (8004d24 <LCD_Init+0x2934>)
 8004b2e:	889b      	ldrh	r3, [r3, #4]
 8004b30:	f249 3228 	movw	r2, #37672	; 0x9328
 8004b34:	4293      	cmp	r3, r2
 8004b36:	f040 80f7 	bne.w	8004d28 <LCD_Init+0x2938>
	{
  		LCD_WriteReg(0x00EC,0x108F);// internal timeing
 8004b3a:	f241 018f 	movw	r1, #4239	; 0x108f
 8004b3e:	20ec      	movs	r0, #236	; 0xec
 8004b40:	f7fc fd18 	bl	8001574 <LCD_WriteReg>
 		LCD_WriteReg(0x00EF,0x1234);// ADD
 8004b44:	f241 2134 	movw	r1, #4660	; 0x1234
 8004b48:	20ef      	movs	r0, #239	; 0xef
 8004b4a:	f7fc fd13 	bl	8001574 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);
        //LCD_WriteReg(0x0000,0x0001);//开启内部时钟
        LCD_WriteReg(0x0001,0x0100);
 8004b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b52:	2001      	movs	r0, #1
 8004b54:	f7fc fd0e 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);//电源开启
 8004b58:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004b5c:	2002      	movs	r0, #2
 8004b5e:	f7fc fd09 	bl	8001574 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(0<<3) );//65K
 8004b62:	f241 0130 	movw	r1, #4144	; 0x1030
 8004b66:	2003      	movs	r0, #3
 8004b68:	f7fc fd04 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	2004      	movs	r0, #4
 8004b70:	f7fc fd00 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x0202);
 8004b74:	f240 2102 	movw	r1, #514	; 0x202
 8004b78:	2008      	movs	r0, #8
 8004b7a:	f7fc fcfb 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0009,0x0000);
 8004b7e:	2100      	movs	r1, #0
 8004b80:	2009      	movs	r0, #9
 8004b82:	f7fc fcf7 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x000a,0x0000);//display setting
 8004b86:	2100      	movs	r1, #0
 8004b88:	200a      	movs	r0, #10
 8004b8a:	f7fc fcf3 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x000c,0x0001);//display setting
 8004b8e:	2101      	movs	r1, #1
 8004b90:	200c      	movs	r0, #12
 8004b92:	f7fc fcef 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x000d,0x0000);//0f3c
 8004b96:	2100      	movs	r1, #0
 8004b98:	200d      	movs	r0, #13
 8004b9a:	f7fc fceb 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x000f,0x0000);
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	200f      	movs	r0, #15
 8004ba2:	f7fc fce7 	bl	8001574 <LCD_WriteReg>
		//电源配置
        LCD_WriteReg(0x0010,0x0000);
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	2010      	movs	r0, #16
 8004baa:	f7fc fce3 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0007);
 8004bae:	2107      	movs	r1, #7
 8004bb0:	2011      	movs	r0, #17
 8004bb2:	f7fc fcdf 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x0000);
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	2012      	movs	r0, #18
 8004bba:	f7fc fcdb 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0000);
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	2013      	movs	r0, #19
 8004bc2:	f7fc fcd7 	bl	8001574 <LCD_WriteReg>
     	LCD_WriteReg(0x0007,0x0001);
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	2007      	movs	r0, #7
 8004bca:	f7fc fcd3 	bl	8001574 <LCD_WriteReg>
     	HAL_Delay(50);
 8004bce:	2032      	movs	r0, #50	; 0x32
 8004bd0:	f002 fa40 	bl	8007054 <HAL_Delay>
        LCD_WriteReg(0x0010,0x1490);
 8004bd4:	f241 4190 	movw	r1, #5264	; 0x1490
 8004bd8:	2010      	movs	r0, #16
 8004bda:	f7fc fccb 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0227);
 8004bde:	f240 2127 	movw	r1, #551	; 0x227
 8004be2:	2011      	movs	r0, #17
 8004be4:	f7fc fcc6 	bl	8001574 <LCD_WriteReg>
        HAL_Delay(50);
 8004be8:	2032      	movs	r0, #50	; 0x32
 8004bea:	f002 fa33 	bl	8007054 <HAL_Delay>
        LCD_WriteReg(0x0012,0x008A);
 8004bee:	218a      	movs	r1, #138	; 0x8a
 8004bf0:	2012      	movs	r0, #18
 8004bf2:	f7fc fcbf 	bl	8001574 <LCD_WriteReg>
        HAL_Delay(50);
 8004bf6:	2032      	movs	r0, #50	; 0x32
 8004bf8:	f002 fa2c 	bl	8007054 <HAL_Delay>
        LCD_WriteReg(0x0013,0x1a00);
 8004bfc:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8004c00:	2013      	movs	r0, #19
 8004c02:	f7fc fcb7 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x0006);
 8004c06:	2106      	movs	r1, #6
 8004c08:	2029      	movs	r0, #41	; 0x29
 8004c0a:	f7fc fcb3 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x002b,0x000d);
 8004c0e:	210d      	movs	r1, #13
 8004c10:	202b      	movs	r0, #43	; 0x2b
 8004c12:	f7fc fcaf 	bl	8001574 <LCD_WriteReg>
        HAL_Delay(50);
 8004c16:	2032      	movs	r0, #50	; 0x32
 8004c18:	f002 fa1c 	bl	8007054 <HAL_Delay>
        LCD_WriteReg(0x0020,0x0000);
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	2020      	movs	r0, #32
 8004c20:	f7fc fca8 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 8004c24:	2100      	movs	r1, #0
 8004c26:	2021      	movs	r0, #33	; 0x21
 8004c28:	f7fc fca4 	bl	8001574 <LCD_WriteReg>
        HAL_Delay(50);
 8004c2c:	2032      	movs	r0, #50	; 0x32
 8004c2e:	f002 fa11 	bl	8007054 <HAL_Delay>
		//伽马校正
        LCD_WriteReg(0x0030,0x0000);
 8004c32:	2100      	movs	r1, #0
 8004c34:	2030      	movs	r0, #48	; 0x30
 8004c36:	f7fc fc9d 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0604);
 8004c3a:	f240 6104 	movw	r1, #1540	; 0x604
 8004c3e:	2031      	movs	r0, #49	; 0x31
 8004c40:	f7fc fc98 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0305);
 8004c44:	f240 3105 	movw	r1, #773	; 0x305
 8004c48:	2032      	movs	r0, #50	; 0x32
 8004c4a:	f7fc fc93 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0000);
 8004c4e:	2100      	movs	r1, #0
 8004c50:	2035      	movs	r0, #53	; 0x35
 8004c52:	f7fc fc8f 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x0C09);
 8004c56:	f640 4109 	movw	r1, #3081	; 0xc09
 8004c5a:	2036      	movs	r0, #54	; 0x36
 8004c5c:	f7fc fc8a 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0204);
 8004c60:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004c64:	2037      	movs	r0, #55	; 0x37
 8004c66:	f7fc fc85 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0301);
 8004c6a:	f240 3101 	movw	r1, #769	; 0x301
 8004c6e:	2038      	movs	r0, #56	; 0x38
 8004c70:	f7fc fc80 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0707);
 8004c74:	f240 7107 	movw	r1, #1799	; 0x707
 8004c78:	2039      	movs	r0, #57	; 0x39
 8004c7a:	f7fc fc7b 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x003c,0x0000);
 8004c7e:	2100      	movs	r1, #0
 8004c80:	203c      	movs	r0, #60	; 0x3c
 8004c82:	f7fc fc77 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x003d,0x0a0a);
 8004c86:	f640 210a 	movw	r1, #2570	; 0xa0a
 8004c8a:	203d      	movs	r0, #61	; 0x3d
 8004c8c:	f7fc fc72 	bl	8001574 <LCD_WriteReg>
        HAL_Delay(50);
 8004c90:	2032      	movs	r0, #50	; 0x32
 8004c92:	f002 f9df 	bl	8007054 <HAL_Delay>
        LCD_WriteReg(0x0050,0x0000); //水平GRAM起始位置
 8004c96:	2100      	movs	r1, #0
 8004c98:	2050      	movs	r0, #80	; 0x50
 8004c9a:	f7fc fc6b 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00ef); //水平GRAM终止位置
 8004c9e:	21ef      	movs	r1, #239	; 0xef
 8004ca0:	2051      	movs	r0, #81	; 0x51
 8004ca2:	f7fc fc67 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000); //垂直GRAM起始位置
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	2052      	movs	r0, #82	; 0x52
 8004caa:	f7fc fc63 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013f); //垂直GRAM终止位置
 8004cae:	f240 113f 	movw	r1, #319	; 0x13f
 8004cb2:	2053      	movs	r0, #83	; 0x53
 8004cb4:	f7fc fc5e 	bl	8001574 <LCD_WriteReg>

         LCD_WriteReg(0x0060,0xa700);
 8004cb8:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004cbc:	2060      	movs	r0, #96	; 0x60
 8004cbe:	f7fc fc59 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	2061      	movs	r0, #97	; 0x61
 8004cc6:	f7fc fc55 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x006a,0x0000);
 8004cca:	2100      	movs	r1, #0
 8004ccc:	206a      	movs	r0, #106	; 0x6a
 8004cce:	f7fc fc51 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	2080      	movs	r0, #128	; 0x80
 8004cd6:	f7fc fc4d 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0081,0x0000);
 8004cda:	2100      	movs	r1, #0
 8004cdc:	2081      	movs	r0, #129	; 0x81
 8004cde:	f7fc fc49 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	2082      	movs	r0, #130	; 0x82
 8004ce6:	f7fc fc45 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8004cea:	2100      	movs	r1, #0
 8004cec:	2083      	movs	r0, #131	; 0x83
 8004cee:	f7fc fc41 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	2084      	movs	r0, #132	; 0x84
 8004cf6:	f7fc fc3d 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	2085      	movs	r0, #133	; 0x85
 8004cfe:	f7fc fc39 	bl	8001574 <LCD_WriteReg>

        LCD_WriteReg(0x0090,0x0010);
 8004d02:	2110      	movs	r1, #16
 8004d04:	2090      	movs	r0, #144	; 0x90
 8004d06:	f7fc fc35 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0600);
 8004d0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004d0e:	2092      	movs	r0, #146	; 0x92
 8004d10:	f7fc fc30 	bl	8001574 <LCD_WriteReg>
        //开启显示设置
        LCD_WriteReg(0x0007,0x0133);
 8004d14:	f240 1133 	movw	r1, #307	; 0x133
 8004d18:	2007      	movs	r0, #7
 8004d1a:	f7fc fc2b 	bl	8001574 <LCD_WriteReg>
 8004d1e:	f000 bf85 	b.w	8005c2c <LCD_Init+0x383c>
 8004d22:	bf00      	nop
 8004d24:	200002bc 	.word	0x200002bc
	}else if(lcddev.id==0x9320)//测试OK.
 8004d28:	4bce      	ldr	r3, [pc, #824]	; (8005064 <LCD_Init+0x2c74>)
 8004d2a:	889b      	ldrh	r3, [r3, #4]
 8004d2c:	f249 3220 	movw	r2, #37664	; 0x9320
 8004d30:	4293      	cmp	r3, r2
 8004d32:	f040 80ad 	bne.w	8004e90 <LCD_Init+0x2aa0>
	{
		LCD_WriteReg(0x00,0x0000);
 8004d36:	2100      	movs	r1, #0
 8004d38:	2000      	movs	r0, #0
 8004d3a:	f7fc fc1b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x01,0x0100);	//Driver Output Contral.
 8004d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d42:	2001      	movs	r0, #1
 8004d44:	f7fc fc16 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);	//LCD Driver Waveform Contral.
 8004d48:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004d4c:	2002      	movs	r0, #2
 8004d4e:	f7fc fc11 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode Set.
 8004d52:	f241 0130 	movw	r1, #4144	; 0x1030
 8004d56:	2003      	movs	r0, #3
 8004d58:	f7fc fc0c 	bl	8001574 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04,0x0000);	//Scalling Contral.
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	2004      	movs	r0, #4
 8004d60:	f7fc fc08 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0202);	//Display Contral 2.(0x0207)
 8004d64:	f240 2102 	movw	r1, #514	; 0x202
 8004d68:	2008      	movs	r0, #8
 8004d6a:	f7fc fc03 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000);	//Display Contral 3.(0x0000)
 8004d6e:	2100      	movs	r1, #0
 8004d70:	2009      	movs	r0, #9
 8004d72:	f7fc fbff 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
 8004d76:	2100      	movs	r1, #0
 8004d78:	200a      	movs	r0, #10
 8004d7a:	f7fc fbfb 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
 8004d7e:	2101      	movs	r1, #1
 8004d80:	200c      	movs	r0, #12
 8004d82:	f7fc fbf7 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0d,0x0000);	//Frame Maker Position.
 8004d86:	2100      	movs	r1, #0
 8004d88:	200d      	movs	r0, #13
 8004d8a:	f7fc fbf3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0f,0x0000);	//Extern Display Interface Contral 2.
 8004d8e:	2100      	movs	r1, #0
 8004d90:	200f      	movs	r0, #15
 8004d92:	f7fc fbef 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(50);
 8004d96:	2032      	movs	r0, #50	; 0x32
 8004d98:	f002 f95c 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0x07,0x0101);	//Display Contral.
 8004d9c:	f240 1101 	movw	r1, #257	; 0x101
 8004da0:	2007      	movs	r0, #7
 8004da2:	f7fc fbe7 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(50);
 8004da6:	2032      	movs	r0, #50	; 0x32
 8004da8:	f002 f954 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
 8004dac:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004db0:	2010      	movs	r0, #16
 8004db2:	f7fc fbdf 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0007);								//Power Control 2.(0x0001)
 8004db6:	2107      	movs	r1, #7
 8004db8:	2011      	movs	r0, #17
 8004dba:	f7fc fbdb 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));				//Power Control 3.(0x0138)
 8004dbe:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004dc2:	2012      	movs	r0, #18
 8004dc4:	f7fc fbd6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0b00);								//Power Control 4.
 8004dc8:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004dcc:	2013      	movs	r0, #19
 8004dce:	f7fc fbd1 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0000);								//Power Control 7.
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	2029      	movs	r0, #41	; 0x29
 8004dd6:	f7fc fbcd 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0x2b,(1<<14)|(1<<4));
 8004dda:	f244 0110 	movw	r1, #16400	; 0x4010
 8004dde:	202b      	movs	r0, #43	; 0x2b
 8004de0:	f7fc fbc8 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x50,0);	//Set X Star
 8004de4:	2100      	movs	r1, #0
 8004de6:	2050      	movs	r0, #80	; 0x50
 8004de8:	f7fc fbc4 	bl	8001574 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51,239);	//Set Y Star
 8004dec:	21ef      	movs	r1, #239	; 0xef
 8004dee:	2051      	movs	r0, #81	; 0x51
 8004df0:	f7fc fbc0 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x52,0);	//Set Y End.t.
 8004df4:	2100      	movs	r1, #0
 8004df6:	2052      	movs	r0, #82	; 0x52
 8004df8:	f7fc fbbc 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x53,319);	//
 8004dfc:	f240 113f 	movw	r1, #319	; 0x13f
 8004e00:	2053      	movs	r0, #83	; 0x53
 8004e02:	f7fc fbb7 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0x60,0x2700);	//Driver Output Control.
 8004e06:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004e0a:	2060      	movs	r0, #96	; 0x60
 8004e0c:	f7fc fbb2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x61,0x0001);	//Driver Output Control.
 8004e10:	2101      	movs	r1, #1
 8004e12:	2061      	movs	r0, #97	; 0x61
 8004e14:	f7fc fbae 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x6a,0x0000);	//Vertical Srcoll Control.
 8004e18:	2100      	movs	r1, #0
 8004e1a:	206a      	movs	r0, #106	; 0x6a
 8004e1c:	f7fc fbaa 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0x80,0x0000);	//Display Position? Partial Display 1.
 8004e20:	2100      	movs	r1, #0
 8004e22:	2080      	movs	r0, #128	; 0x80
 8004e24:	f7fc fba6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000);	//RAM Address Start? Partial Display 1.
 8004e28:	2100      	movs	r1, #0
 8004e2a:	2081      	movs	r0, #129	; 0x81
 8004e2c:	f7fc fba2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000);	//RAM Address End-Partial Display 1.
 8004e30:	2100      	movs	r1, #0
 8004e32:	2082      	movs	r0, #130	; 0x82
 8004e34:	f7fc fb9e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000);	//Displsy Position? Partial Display 2.
 8004e38:	2100      	movs	r1, #0
 8004e3a:	2083      	movs	r0, #131	; 0x83
 8004e3c:	f7fc fb9a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000);	//RAM Address Start? Partial Display 2.
 8004e40:	2100      	movs	r1, #0
 8004e42:	2084      	movs	r0, #132	; 0x84
 8004e44:	f7fc fb96 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000);	//RAM Address End? Partial Display 2.
 8004e48:	2100      	movs	r1, #0
 8004e4a:	2085      	movs	r0, #133	; 0x85
 8004e4c:	f7fc fb92 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
 8004e50:	2110      	movs	r1, #16
 8004e52:	2090      	movs	r0, #144	; 0x90
 8004e54:	f7fc fb8e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
 8004e58:	2100      	movs	r1, #0
 8004e5a:	2092      	movs	r0, #146	; 0x92
 8004e5c:	f7fc fb8a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0001);	//Panel Interface Contral 3.
 8004e60:	2101      	movs	r1, #1
 8004e62:	2093      	movs	r0, #147	; 0x93
 8004e64:	f7fc fb86 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
 8004e68:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004e6c:	2095      	movs	r0, #149	; 0x95
 8004e6e:	f7fc fb81 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x97,(0<<8));	//
 8004e72:	2100      	movs	r1, #0
 8004e74:	2097      	movs	r0, #151	; 0x97
 8004e76:	f7fc fb7d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x98,0x0000);	//Frame Cycle Contral.
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	2098      	movs	r0, #152	; 0x98
 8004e7e:	f7fc fb79 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);	//(0x0173)
 8004e82:	f240 1173 	movw	r1, #371	; 0x173
 8004e86:	2007      	movs	r0, #7
 8004e88:	f7fc fb74 	bl	8001574 <LCD_WriteReg>
 8004e8c:	f000 bece 	b.w	8005c2c <LCD_Init+0x383c>
	}else if(lcddev.id==0X9331)//OK |/|/|
 8004e90:	4b74      	ldr	r3, [pc, #464]	; (8005064 <LCD_Init+0x2c74>)
 8004e92:	889b      	ldrh	r3, [r3, #4]
 8004e94:	f249 3231 	movw	r2, #37681	; 0x9331
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	f040 80e5 	bne.w	8005068 <LCD_Init+0x2c78>
	{
		LCD_WriteReg(0x00E7, 0x1014);
 8004e9e:	f241 0114 	movw	r1, #4116	; 0x1014
 8004ea2:	20e7      	movs	r0, #231	; 0xe7
 8004ea4:	f7fc fb66 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004ea8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004eac:	2001      	movs	r0, #1
 8004eae:	f7fc fb61 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004eb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004eb6:	2002      	movs	r0, #2
 8004eb8:	f7fc fb5c 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(1<<3));//65K
 8004ebc:	f241 0138 	movw	r1, #4152	; 0x1038
 8004ec0:	2003      	movs	r0, #3
 8004ec2:	f7fc fb57 	bl	8001574 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004ec6:	f240 2102 	movw	r1, #514	; 0x202
 8004eca:	2008      	movs	r0, #8
 8004ecc:	f7fc fb52 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	2009      	movs	r0, #9
 8004ed4:	f7fc fb4e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004ed8:	2100      	movs	r1, #0
 8004eda:	200a      	movs	r0, #10
 8004edc:	f7fc fb4a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	200c      	movs	r0, #12
 8004ee4:	f7fc fb46 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004ee8:	2100      	movs	r1, #0
 8004eea:	200d      	movs	r0, #13
 8004eec:	f7fc fb42 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	200f      	movs	r0, #15
 8004ef4:	f7fc fb3e 	bl	8001574 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004ef8:	2100      	movs	r1, #0
 8004efa:	2010      	movs	r0, #16
 8004efc:	f7fc fb3a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004f00:	2107      	movs	r1, #7
 8004f02:	2011      	movs	r0, #17
 8004f04:	f7fc fb36 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004f08:	2100      	movs	r1, #0
 8004f0a:	2012      	movs	r0, #18
 8004f0c:	f7fc fb32 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004f10:	2100      	movs	r1, #0
 8004f12:	2013      	movs	r0, #19
 8004f14:	f7fc fb2e 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004f18:	20c8      	movs	r0, #200	; 0xc8
 8004f1a:	f002 f89b 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004f1e:	f241 6190 	movw	r1, #5776	; 0x1690
 8004f22:	2010      	movs	r0, #16
 8004f24:	f7fc fb26 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004f28:	f240 2127 	movw	r1, #551	; 0x227
 8004f2c:	2011      	movs	r0, #17
 8004f2e:	f7fc fb21 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004f32:	2032      	movs	r0, #50	; 0x32
 8004f34:	f002 f88e 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004f38:	210c      	movs	r1, #12
 8004f3a:	2012      	movs	r0, #18
 8004f3c:	f7fc fb1a 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004f40:	2032      	movs	r0, #50	; 0x32
 8004f42:	f002 f887 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004f46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f4a:	2013      	movs	r0, #19
 8004f4c:	f7fc fb12 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004f50:	2111      	movs	r1, #17
 8004f52:	2029      	movs	r0, #41	; 0x29
 8004f54:	f7fc fb0e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004f58:	210b      	movs	r1, #11
 8004f5a:	202b      	movs	r0, #43	; 0x2b
 8004f5c:	f7fc fb0a 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004f60:	2032      	movs	r0, #50	; 0x32
 8004f62:	f002 f877 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004f66:	2100      	movs	r1, #0
 8004f68:	2020      	movs	r0, #32
 8004f6a:	f7fc fb03 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004f6e:	f240 113f 	movw	r1, #319	; 0x13f
 8004f72:	2021      	movs	r0, #33	; 0x21
 8004f74:	f7fc fafe 	bl	8001574 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004f78:	2100      	movs	r1, #0
 8004f7a:	2030      	movs	r0, #48	; 0x30
 8004f7c:	f7fc fafa 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004f80:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004f84:	2031      	movs	r0, #49	; 0x31
 8004f86:	f7fc faf5 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	2032      	movs	r0, #50	; 0x32
 8004f8e:	f7fc faf1 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004f92:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004f96:	2035      	movs	r0, #53	; 0x35
 8004f98:	f7fc faec 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004f9c:	f241 610a 	movw	r1, #5642	; 0x160a
 8004fa0:	2036      	movs	r0, #54	; 0x36
 8004fa2:	f7fc fae7 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004fa6:	f240 7107 	movw	r1, #1799	; 0x707
 8004faa:	2037      	movs	r0, #55	; 0x37
 8004fac:	f7fc fae2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004fb0:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004fb4:	2038      	movs	r0, #56	; 0x38
 8004fb6:	f7fc fadd 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004fba:	f240 7107 	movw	r1, #1799	; 0x707
 8004fbe:	2039      	movs	r0, #57	; 0x39
 8004fc0:	f7fc fad8 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004fc4:	f240 4102 	movw	r1, #1026	; 0x402
 8004fc8:	203c      	movs	r0, #60	; 0x3c
 8004fca:	f7fc fad3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004fce:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004fd2:	203d      	movs	r0, #61	; 0x3d
 8004fd4:	f7fc face 	bl	8001574 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004fd8:	2100      	movs	r1, #0
 8004fda:	2050      	movs	r0, #80	; 0x50
 8004fdc:	f7fc faca 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004fe0:	21ef      	movs	r1, #239	; 0xef
 8004fe2:	2051      	movs	r0, #81	; 0x51
 8004fe4:	f7fc fac6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004fe8:	2100      	movs	r1, #0
 8004fea:	2052      	movs	r0, #82	; 0x52
 8004fec:	f7fc fac2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004ff0:	f240 113f 	movw	r1, #319	; 0x13f
 8004ff4:	2053      	movs	r0, #83	; 0x53
 8004ff6:	f7fc fabd 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004ffa:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004ffe:	2060      	movs	r0, #96	; 0x60
 8005000:	f7fc fab8 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
 8005004:	2101      	movs	r1, #1
 8005006:	2061      	movs	r0, #97	; 0x61
 8005008:	f7fc fab4 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 800500c:	2100      	movs	r1, #0
 800500e:	206a      	movs	r0, #106	; 0x6a
 8005010:	f7fc fab0 	bl	8001574 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8005014:	2100      	movs	r1, #0
 8005016:	2080      	movs	r0, #128	; 0x80
 8005018:	f7fc faac 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 800501c:	2100      	movs	r1, #0
 800501e:	2081      	movs	r0, #129	; 0x81
 8005020:	f7fc faa8 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005024:	2100      	movs	r1, #0
 8005026:	2082      	movs	r0, #130	; 0x82
 8005028:	f7fc faa4 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800502c:	2100      	movs	r1, #0
 800502e:	2083      	movs	r0, #131	; 0x83
 8005030:	f7fc faa0 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8005034:	2100      	movs	r1, #0
 8005036:	2084      	movs	r0, #132	; 0x84
 8005038:	f7fc fa9c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 800503c:	2100      	movs	r1, #0
 800503e:	2085      	movs	r0, #133	; 0x85
 8005040:	f7fc fa98 	bl	8001574 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8005044:	2110      	movs	r1, #16
 8005046:	2090      	movs	r0, #144	; 0x90
 8005048:	f7fc fa94 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 800504c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005050:	2092      	movs	r0, #146	; 0x92
 8005052:	f7fc fa8f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8005056:	f240 1133 	movw	r1, #307	; 0x133
 800505a:	2007      	movs	r0, #7
 800505c:	f7fc fa8a 	bl	8001574 <LCD_WriteReg>
 8005060:	f000 bde4 	b.w	8005c2c <LCD_Init+0x383c>
 8005064:	200002bc 	.word	0x200002bc
	}else if(lcddev.id==0x5408)
 8005068:	4be2      	ldr	r3, [pc, #904]	; (80053f4 <LCD_Init+0x3004>)
 800506a:	889b      	ldrh	r3, [r3, #4]
 800506c:	f245 4208 	movw	r2, #21512	; 0x5408
 8005070:	4293      	cmp	r3, r2
 8005072:	f040 80a3 	bne.w	80051bc <LCD_Init+0x2dcc>
	{
		LCD_WriteReg(0x01,0x0100);
 8005076:	f44f 7180 	mov.w	r1, #256	; 0x100
 800507a:	2001      	movs	r0, #1
 800507c:	f7fc fa7a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);//LCD Driving Waveform Contral
 8005080:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005084:	2002      	movs	r0, #2
 8005086:	f7fc fa75 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode设置
 800508a:	f241 0130 	movw	r1, #4144	; 0x1030
 800508e:	2003      	movs	r0, #3
 8005090:	f7fc fa70 	bl	8001574 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04,0x0000); //Scalling Control register
 8005094:	2100      	movs	r1, #0
 8005096:	2004      	movs	r0, #4
 8005098:	f7fc fa6c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0207); //Display Control 2
 800509c:	f240 2107 	movw	r1, #519	; 0x207
 80050a0:	2008      	movs	r0, #8
 80050a2:	f7fc fa67 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000); //Display Control 3
 80050a6:	2100      	movs	r1, #0
 80050a8:	2009      	movs	r0, #9
 80050aa:	f7fc fa63 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0A,0x0000); //Frame Cycle Control
 80050ae:	2100      	movs	r1, #0
 80050b0:	200a      	movs	r0, #10
 80050b2:	f7fc fa5f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0C,0x0000); //External Display Interface Control 1
 80050b6:	2100      	movs	r1, #0
 80050b8:	200c      	movs	r0, #12
 80050ba:	f7fc fa5b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0D,0x0000); //Frame Maker Position
 80050be:	2100      	movs	r1, #0
 80050c0:	200d      	movs	r0, #13
 80050c2:	f7fc fa57 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0F,0x0000); //External Display Interface Control 2
 80050c6:	2100      	movs	r1, #0
 80050c8:	200f      	movs	r0, #15
 80050ca:	f7fc fa53 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(20);
 80050ce:	2014      	movs	r0, #20
 80050d0:	f001 ffc0 	bl	8007054 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10,0x16B0); //0x14B0 //Power Control 1
 80050d4:	f241 61b0 	movw	r1, #5808	; 0x16b0
 80050d8:	2010      	movs	r0, #16
 80050da:	f7fc fa4b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0001); //0x0007 //Power Control 2
 80050de:	2101      	movs	r1, #1
 80050e0:	2011      	movs	r0, #17
 80050e2:	f7fc fa47 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x17,0x0001); //0x0000 //Power Control 3
 80050e6:	2101      	movs	r1, #1
 80050e8:	2017      	movs	r0, #23
 80050ea:	f7fc fa43 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x12,0x0138); //0x013B //Power Control 4
 80050ee:	f44f 719c 	mov.w	r1, #312	; 0x138
 80050f2:	2012      	movs	r0, #18
 80050f4:	f7fc fa3e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0800); //0x0800 //Power Control 5
 80050f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80050fc:	2013      	movs	r0, #19
 80050fe:	f7fc fa39 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0009); //NVM read data 2
 8005102:	2109      	movs	r1, #9
 8005104:	2029      	movs	r0, #41	; 0x29
 8005106:	f7fc fa35 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x2a,0x0009); //NVM read data 3
 800510a:	2109      	movs	r1, #9
 800510c:	202a      	movs	r0, #42	; 0x2a
 800510e:	f7fc fa31 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0xa4,0x0000);
 8005112:	2100      	movs	r1, #0
 8005114:	20a4      	movs	r0, #164	; 0xa4
 8005116:	f7fc fa2d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x50,0x0000); //设置操作窗口的X轴开始列
 800511a:	2100      	movs	r1, #0
 800511c:	2050      	movs	r0, #80	; 0x50
 800511e:	f7fc fa29 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x51,0x00EF); //设置操作窗口的X轴结束列
 8005122:	21ef      	movs	r1, #239	; 0xef
 8005124:	2051      	movs	r0, #81	; 0x51
 8005126:	f7fc fa25 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x52,0x0000); //设置操作窗口的Y轴开始行
 800512a:	2100      	movs	r1, #0
 800512c:	2052      	movs	r0, #82	; 0x52
 800512e:	f7fc fa21 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x53,0x013F); //设置操作窗口的Y轴结束行
 8005132:	f240 113f 	movw	r1, #319	; 0x13f
 8005136:	2053      	movs	r0, #83	; 0x53
 8005138:	f7fc fa1c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x60,0x2700); //Driver Output Control
 800513c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005140:	2060      	movs	r0, #96	; 0x60
 8005142:	f7fc fa17 	bl	8001574 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61,0x0001); //Driver Output Control
 8005146:	2101      	movs	r1, #1
 8005148:	2061      	movs	r0, #97	; 0x61
 800514a:	f7fc fa13 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x6A,0x0000); //Vertical Scroll Control
 800514e:	2100      	movs	r1, #0
 8005150:	206a      	movs	r0, #106	; 0x6a
 8005152:	f7fc fa0f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x80,0x0000); //Display Position – Partial Display 1
 8005156:	2100      	movs	r1, #0
 8005158:	2080      	movs	r0, #128	; 0x80
 800515a:	f7fc fa0b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000); //RAM Address Start – Partial Display 1
 800515e:	2100      	movs	r1, #0
 8005160:	2081      	movs	r0, #129	; 0x81
 8005162:	f7fc fa07 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000); //RAM address End - Partial Display 1
 8005166:	2100      	movs	r1, #0
 8005168:	2082      	movs	r0, #130	; 0x82
 800516a:	f7fc fa03 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000); //Display Position – Partial Display 2
 800516e:	2100      	movs	r1, #0
 8005170:	2083      	movs	r0, #131	; 0x83
 8005172:	f7fc f9ff 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000); //RAM Address Start – Partial Display 2
 8005176:	2100      	movs	r1, #0
 8005178:	2084      	movs	r0, #132	; 0x84
 800517a:	f7fc f9fb 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000); //RAM address End – Partail Display2
 800517e:	2100      	movs	r1, #0
 8005180:	2085      	movs	r0, #133	; 0x85
 8005182:	f7fc f9f7 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x90,0x0013); //Frame Cycle Control
 8005186:	2113      	movs	r1, #19
 8005188:	2090      	movs	r0, #144	; 0x90
 800518a:	f7fc f9f3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);  //Panel Interface Control 2
 800518e:	2100      	movs	r1, #0
 8005190:	2092      	movs	r0, #146	; 0x92
 8005192:	f7fc f9ef 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0003); //Panel Interface control 3
 8005196:	2103      	movs	r1, #3
 8005198:	2093      	movs	r0, #147	; 0x93
 800519a:	f7fc f9eb 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);  //Frame Cycle Control
 800519e:	f44f 7188 	mov.w	r1, #272	; 0x110
 80051a2:	2095      	movs	r0, #149	; 0x95
 80051a4:	f7fc f9e6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);
 80051a8:	f240 1173 	movw	r1, #371	; 0x173
 80051ac:	2007      	movs	r0, #7
 80051ae:	f7fc f9e1 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(50);
 80051b2:	2032      	movs	r0, #50	; 0x32
 80051b4:	f001 ff4e 	bl	8007054 <HAL_Delay>
 80051b8:	f000 bd38 	b.w	8005c2c <LCD_Init+0x383c>
	}
	else if(lcddev.id==0x1505)//OK
 80051bc:	4b8d      	ldr	r3, [pc, #564]	; (80053f4 <LCD_Init+0x3004>)
 80051be:	889b      	ldrh	r3, [r3, #4]
 80051c0:	f241 5205 	movw	r2, #5381	; 0x1505
 80051c4:	4293      	cmp	r3, r2
 80051c6:	f040 8117 	bne.w	80053f8 <LCD_Init+0x3008>
	{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
        LCD_WriteReg(0x0007,0x0000);
 80051ca:	2100      	movs	r1, #0
 80051cc:	2007      	movs	r0, #7
 80051ce:	f7fc f9d1 	bl	8001574 <LCD_WriteReg>
        HAL_Delay(50);
 80051d2:	2032      	movs	r0, #50	; 0x32
 80051d4:	f001 ff3e 	bl	8007054 <HAL_Delay>
        LCD_WriteReg(0x0012,0x011C);//0x011A   why need to set several times?
 80051d8:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80051dc:	2012      	movs	r0, #18
 80051de:	f7fc f9c9 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x00A4,0x0001);//NVM
 80051e2:	2101      	movs	r1, #1
 80051e4:	20a4      	movs	r0, #164	; 0xa4
 80051e6:	f7fc f9c5 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x000F);
 80051ea:	210f      	movs	r1, #15
 80051ec:	2008      	movs	r0, #8
 80051ee:	f7fc f9c1 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x000A,0x0008);
 80051f2:	2108      	movs	r1, #8
 80051f4:	200a      	movs	r0, #10
 80051f6:	f7fc f9bd 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x000D,0x0008);
 80051fa:	2108      	movs	r1, #8
 80051fc:	200d      	movs	r0, #13
 80051fe:	f7fc f9b9 	bl	8001574 <LCD_WriteReg>
  		//伽马校正
        LCD_WriteReg(0x0030,0x0707);
 8005202:	f240 7107 	movw	r1, #1799	; 0x707
 8005206:	2030      	movs	r0, #48	; 0x30
 8005208:	f7fc f9b4 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0007); //0x0707
 800520c:	2107      	movs	r1, #7
 800520e:	2031      	movs	r0, #49	; 0x31
 8005210:	f7fc f9b0 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0603);
 8005214:	f240 6103 	movw	r1, #1539	; 0x603
 8005218:	2032      	movs	r0, #50	; 0x32
 800521a:	f7fc f9ab 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0033,0x0700);
 800521e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005222:	2033      	movs	r0, #51	; 0x33
 8005224:	f7fc f9a6 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0034,0x0202);
 8005228:	f240 2102 	movw	r1, #514	; 0x202
 800522c:	2034      	movs	r0, #52	; 0x34
 800522e:	f7fc f9a1 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0002); //?0x0606
 8005232:	2102      	movs	r1, #2
 8005234:	2035      	movs	r0, #53	; 0x35
 8005236:	f7fc f99d 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x1F0F);
 800523a:	f641 710f 	movw	r1, #7951	; 0x1f0f
 800523e:	2036      	movs	r0, #54	; 0x36
 8005240:	f7fc f998 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0707); //0x0f0f  0x0105
 8005244:	f240 7107 	movw	r1, #1799	; 0x707
 8005248:	2037      	movs	r0, #55	; 0x37
 800524a:	f7fc f993 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0000);
 800524e:	2100      	movs	r1, #0
 8005250:	2038      	movs	r0, #56	; 0x38
 8005252:	f7fc f98f 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0000);
 8005256:	2100      	movs	r1, #0
 8005258:	2039      	movs	r0, #57	; 0x39
 800525a:	f7fc f98b 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x003A,0x0707);
 800525e:	f240 7107 	movw	r1, #1799	; 0x707
 8005262:	203a      	movs	r0, #58	; 0x3a
 8005264:	f7fc f986 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x003B,0x0000); //0x0303
 8005268:	2100      	movs	r1, #0
 800526a:	203b      	movs	r0, #59	; 0x3b
 800526c:	f7fc f982 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x003C,0x0007); //?0x0707
 8005270:	2107      	movs	r1, #7
 8005272:	203c      	movs	r0, #60	; 0x3c
 8005274:	f7fc f97e 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x003D,0x0000); //0x1313//0x1f08
 8005278:	2100      	movs	r1, #0
 800527a:	203d      	movs	r0, #61	; 0x3d
 800527c:	f7fc f97a 	bl	8001574 <LCD_WriteReg>
        HAL_Delay(50);
 8005280:	2032      	movs	r0, #50	; 0x32
 8005282:	f001 fee7 	bl	8007054 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0001);
 8005286:	2101      	movs	r1, #1
 8005288:	2007      	movs	r0, #7
 800528a:	f7fc f973 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0017,0x0001);//开启电源
 800528e:	2101      	movs	r1, #1
 8005290:	2017      	movs	r0, #23
 8005292:	f7fc f96f 	bl	8001574 <LCD_WriteReg>
        HAL_Delay(50);
 8005296:	2032      	movs	r0, #50	; 0x32
 8005298:	f001 fedc 	bl	8007054 <HAL_Delay>
  		//电源配置
        LCD_WriteReg(0x0010,0x17A0);
 800529c:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 80052a0:	2010      	movs	r0, #16
 80052a2:	f7fc f967 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0217);//reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 80052a6:	f240 2117 	movw	r1, #535	; 0x217
 80052aa:	2011      	movs	r0, #17
 80052ac:	f7fc f962 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x011E);//0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 80052b0:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80052b4:	2012      	movs	r0, #18
 80052b6:	f7fc f95d 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0F00);//VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 80052ba:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80052be:	2013      	movs	r0, #19
 80052c0:	f7fc f958 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x002A,0x0000);
 80052c4:	2100      	movs	r1, #0
 80052c6:	202a      	movs	r0, #42	; 0x2a
 80052c8:	f7fc f954 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x000A);//0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 80052cc:	210a      	movs	r1, #10
 80052ce:	2029      	movs	r0, #41	; 0x29
 80052d0:	f7fc f950 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x013E);// 0x013C  power supply on
 80052d4:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80052d8:	2012      	movs	r0, #18
 80052da:	f7fc f94b 	bl	8001574 <LCD_WriteReg>
        //Coordinates Control//
        LCD_WriteReg(0x0050,0x0000);//0x0e00
 80052de:	2100      	movs	r1, #0
 80052e0:	2050      	movs	r0, #80	; 0x50
 80052e2:	f7fc f947 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00EF);
 80052e6:	21ef      	movs	r1, #239	; 0xef
 80052e8:	2051      	movs	r0, #81	; 0x51
 80052ea:	f7fc f943 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000);
 80052ee:	2100      	movs	r1, #0
 80052f0:	2052      	movs	r0, #82	; 0x52
 80052f2:	f7fc f93f 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013F);
 80052f6:	f240 113f 	movw	r1, #319	; 0x13f
 80052fa:	2053      	movs	r0, #83	; 0x53
 80052fc:	f7fc f93a 	bl	8001574 <LCD_WriteReg>
    	//Pannel Image Control//
        LCD_WriteReg(0x0060,0x2700);
 8005300:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005304:	2060      	movs	r0, #96	; 0x60
 8005306:	f7fc f935 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 800530a:	2101      	movs	r1, #1
 800530c:	2061      	movs	r0, #97	; 0x61
 800530e:	f7fc f931 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x006A,0x0000);
 8005312:	2100      	movs	r1, #0
 8005314:	206a      	movs	r0, #106	; 0x6a
 8005316:	f7fc f92d 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 800531a:	2100      	movs	r1, #0
 800531c:	2080      	movs	r0, #128	; 0x80
 800531e:	f7fc f929 	bl	8001574 <LCD_WriteReg>
    	//Partial Image Control//
        LCD_WriteReg(0x0081,0x0000);
 8005322:	2100      	movs	r1, #0
 8005324:	2081      	movs	r0, #129	; 0x81
 8005326:	f7fc f925 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 800532a:	2100      	movs	r1, #0
 800532c:	2082      	movs	r0, #130	; 0x82
 800532e:	f7fc f921 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8005332:	2100      	movs	r1, #0
 8005334:	2083      	movs	r0, #131	; 0x83
 8005336:	f7fc f91d 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 800533a:	2100      	movs	r1, #0
 800533c:	2084      	movs	r0, #132	; 0x84
 800533e:	f7fc f919 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8005342:	2100      	movs	r1, #0
 8005344:	2085      	movs	r0, #133	; 0x85
 8005346:	f7fc f915 	bl	8001574 <LCD_WriteReg>
  		//Panel Interface Control//
        LCD_WriteReg(0x0090,0x0013);//0x0010 frenqucy
 800534a:	2113      	movs	r1, #19
 800534c:	2090      	movs	r0, #144	; 0x90
 800534e:	f7fc f911 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0300);
 8005352:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005356:	2092      	movs	r0, #146	; 0x92
 8005358:	f7fc f90c 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0093,0x0005);
 800535c:	2105      	movs	r1, #5
 800535e:	2093      	movs	r0, #147	; 0x93
 8005360:	f7fc f908 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0095,0x0000);
 8005364:	2100      	movs	r1, #0
 8005366:	2095      	movs	r0, #149	; 0x95
 8005368:	f7fc f904 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0097,0x0000);
 800536c:	2100      	movs	r1, #0
 800536e:	2097      	movs	r0, #151	; 0x97
 8005370:	f7fc f900 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0098,0x0000);
 8005374:	2100      	movs	r1, #0
 8005376:	2098      	movs	r0, #152	; 0x98
 8005378:	f7fc f8fc 	bl	8001574 <LCD_WriteReg>

        LCD_WriteReg(0x0001,0x0100);
 800537c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005380:	2001      	movs	r0, #1
 8005382:	f7fc f8f7 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);
 8005386:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800538a:	2002      	movs	r0, #2
 800538c:	f7fc f8f2 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 8005390:	f241 0138 	movw	r1, #4152	; 0x1038
 8005394:	2003      	movs	r0, #3
 8005396:	f7fc f8ed 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 800539a:	2100      	movs	r1, #0
 800539c:	2004      	movs	r0, #4
 800539e:	f7fc f8e9 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x000C,0x0000);
 80053a2:	2100      	movs	r1, #0
 80053a4:	200c      	movs	r0, #12
 80053a6:	f7fc f8e5 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x000F,0x0000);
 80053aa:	2100      	movs	r1, #0
 80053ac:	200f      	movs	r0, #15
 80053ae:	f7fc f8e1 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0020,0x0000);
 80053b2:	2100      	movs	r1, #0
 80053b4:	2020      	movs	r0, #32
 80053b6:	f7fc f8dd 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 80053ba:	2100      	movs	r1, #0
 80053bc:	2021      	movs	r0, #33	; 0x21
 80053be:	f7fc f8d9 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0007,0x0021);
 80053c2:	2121      	movs	r1, #33	; 0x21
 80053c4:	2007      	movs	r0, #7
 80053c6:	f7fc f8d5 	bl	8001574 <LCD_WriteReg>
        HAL_Delay(20);
 80053ca:	2014      	movs	r0, #20
 80053cc:	f001 fe42 	bl	8007054 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0061);
 80053d0:	2161      	movs	r1, #97	; 0x61
 80053d2:	2007      	movs	r0, #7
 80053d4:	f7fc f8ce 	bl	8001574 <LCD_WriteReg>
        HAL_Delay(20);
 80053d8:	2014      	movs	r0, #20
 80053da:	f001 fe3b 	bl	8007054 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0173);
 80053de:	f240 1173 	movw	r1, #371	; 0x173
 80053e2:	2007      	movs	r0, #7
 80053e4:	f7fc f8c6 	bl	8001574 <LCD_WriteReg>
        HAL_Delay(20);
 80053e8:	2014      	movs	r0, #20
 80053ea:	f001 fe33 	bl	8007054 <HAL_Delay>
 80053ee:	f000 bc1d 	b.w	8005c2c <LCD_Init+0x383c>
 80053f2:	bf00      	nop
 80053f4:	200002bc 	.word	0x200002bc
	}else if(lcddev.id==0xB505)
 80053f8:	4bef      	ldr	r3, [pc, #956]	; (80057b8 <LCD_Init+0x33c8>)
 80053fa:	889b      	ldrh	r3, [r3, #4]
 80053fc:	f24b 5205 	movw	r2, #46341	; 0xb505
 8005400:	4293      	cmp	r3, r2
 8005402:	f040 8102 	bne.w	800560a <LCD_Init+0x321a>
	{
		LCD_WriteReg(0x0000,0x0000);
 8005406:	2100      	movs	r1, #0
 8005408:	2000      	movs	r0, #0
 800540a:	f7fc f8b3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800540e:	2100      	movs	r1, #0
 8005410:	2000      	movs	r0, #0
 8005412:	f7fc f8af 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005416:	2100      	movs	r1, #0
 8005418:	2000      	movs	r0, #0
 800541a:	f7fc f8ab 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800541e:	2100      	movs	r1, #0
 8005420:	2000      	movs	r0, #0
 8005422:	f7fc f8a7 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0x00a4,0x0001);
 8005426:	2101      	movs	r1, #1
 8005428:	20a4      	movs	r0, #164	; 0xa4
 800542a:	f7fc f8a3 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(20);
 800542e:	2014      	movs	r0, #20
 8005430:	f001 fe10 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8005434:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005438:	2060      	movs	r0, #96	; 0x60
 800543a:	f7fc f89b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 800543e:	f240 2102 	movw	r1, #514	; 0x202
 8005442:	2008      	movs	r0, #8
 8005444:	f7fc f896 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0214);
 8005448:	f44f 7105 	mov.w	r1, #532	; 0x214
 800544c:	2030      	movs	r0, #48	; 0x30
 800544e:	f7fc f891 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x3715);
 8005452:	f243 7115 	movw	r1, #14101	; 0x3715
 8005456:	2031      	movs	r0, #49	; 0x31
 8005458:	f7fc f88c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0604);
 800545c:	f240 6104 	movw	r1, #1540	; 0x604
 8005460:	2032      	movs	r0, #50	; 0x32
 8005462:	f7fc f887 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0e16);
 8005466:	f640 6116 	movw	r1, #3606	; 0xe16
 800546a:	2033      	movs	r0, #51	; 0x33
 800546c:	f7fc f882 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x2211);
 8005470:	f242 2111 	movw	r1, #8721	; 0x2211
 8005474:	2034      	movs	r0, #52	; 0x34
 8005476:	f7fc f87d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x1500);
 800547a:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 800547e:	2035      	movs	r0, #53	; 0x35
 8005480:	f7fc f878 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x8507);
 8005484:	f248 5107 	movw	r1, #34055	; 0x8507
 8005488:	2036      	movs	r0, #54	; 0x36
 800548a:	f7fc f873 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x1407);
 800548e:	f241 4107 	movw	r1, #5127	; 0x1407
 8005492:	2037      	movs	r0, #55	; 0x37
 8005494:	f7fc f86e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x1403);
 8005498:	f241 4103 	movw	r1, #5123	; 0x1403
 800549c:	2038      	movs	r0, #56	; 0x38
 800549e:	f7fc f869 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0020);
 80054a2:	2120      	movs	r1, #32
 80054a4:	2039      	movs	r0, #57	; 0x39
 80054a6:	f7fc f865 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0x0090,0x001a);
 80054aa:	211a      	movs	r1, #26
 80054ac:	2090      	movs	r0, #144	; 0x90
 80054ae:	f7fc f861 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0010,0x0000);
 80054b2:	2100      	movs	r1, #0
 80054b4:	2010      	movs	r0, #16
 80054b6:	f7fc f85d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 80054ba:	2107      	movs	r1, #7
 80054bc:	2011      	movs	r0, #17
 80054be:	f7fc f859 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 80054c2:	2100      	movs	r1, #0
 80054c4:	2012      	movs	r0, #18
 80054c6:	f7fc f855 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 80054ca:	2100      	movs	r1, #0
 80054cc:	2013      	movs	r0, #19
 80054ce:	f7fc f851 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(20);
 80054d2:	2014      	movs	r0, #20
 80054d4:	f001 fdbe 	bl	8007054 <HAL_Delay>

		LCD_WriteReg(0x0010,0x0730);
 80054d8:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 80054dc:	2010      	movs	r0, #16
 80054de:	f7fc f849 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0137);
 80054e2:	f240 1137 	movw	r1, #311	; 0x137
 80054e6:	2011      	movs	r0, #17
 80054e8:	f7fc f844 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(20);
 80054ec:	2014      	movs	r0, #20
 80054ee:	f001 fdb1 	bl	8007054 <HAL_Delay>

		LCD_WriteReg(0x0012,0x01b8);
 80054f2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80054f6:	2012      	movs	r0, #18
 80054f8:	f7fc f83c 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(20);
 80054fc:	2014      	movs	r0, #20
 80054fe:	f001 fda9 	bl	8007054 <HAL_Delay>

		LCD_WriteReg(0x0013,0x0f00);
 8005502:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005506:	2013      	movs	r0, #19
 8005508:	f7fc f834 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x002a,0x0080);
 800550c:	2180      	movs	r1, #128	; 0x80
 800550e:	202a      	movs	r0, #42	; 0x2a
 8005510:	f7fc f830 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0029,0x0048);
 8005514:	2148      	movs	r1, #72	; 0x48
 8005516:	2029      	movs	r0, #41	; 0x29
 8005518:	f7fc f82c 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(20);
 800551c:	2014      	movs	r0, #20
 800551e:	f001 fd99 	bl	8007054 <HAL_Delay>

		LCD_WriteReg(0x0001,0x0100);
 8005522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005526:	2001      	movs	r0, #1
 8005528:	f7fc f824 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 800552c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005530:	2002      	movs	r0, #2
 8005532:	f7fc f81f 	bl	8001574 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 8005536:	f241 0138 	movw	r1, #4152	; 0x1038
 800553a:	2003      	movs	r0, #3
 800553c:	f7fc f81a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8005540:	f240 2102 	movw	r1, #514	; 0x202
 8005544:	2008      	movs	r0, #8
 8005546:	f7fc f815 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x000a,0x0000);
 800554a:	2100      	movs	r1, #0
 800554c:	200a      	movs	r0, #10
 800554e:	f7fc f811 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x000c,0x0000);
 8005552:	2100      	movs	r1, #0
 8005554:	200c      	movs	r0, #12
 8005556:	f7fc f80d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x000d,0x0000);
 800555a:	2100      	movs	r1, #0
 800555c:	200d      	movs	r0, #13
 800555e:	f7fc f809 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x000e,0x0030);
 8005562:	2130      	movs	r1, #48	; 0x30
 8005564:	200e      	movs	r0, #14
 8005566:	f7fc f805 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0050,0x0000);
 800556a:	2100      	movs	r1, #0
 800556c:	2050      	movs	r0, #80	; 0x50
 800556e:	f7fc f801 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00ef);
 8005572:	21ef      	movs	r1, #239	; 0xef
 8005574:	2051      	movs	r0, #81	; 0x51
 8005576:	f7fb fffd 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 800557a:	2100      	movs	r1, #0
 800557c:	2052      	movs	r0, #82	; 0x52
 800557e:	f7fb fff9 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013f);
 8005582:	f240 113f 	movw	r1, #319	; 0x13f
 8005586:	2053      	movs	r0, #83	; 0x53
 8005588:	f7fb fff4 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0x2700);
 800558c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005590:	2060      	movs	r0, #96	; 0x60
 8005592:	f7fb ffef 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 8005596:	2101      	movs	r1, #1
 8005598:	2061      	movs	r0, #97	; 0x61
 800559a:	f7fb ffeb 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x006a,0x0000);
 800559e:	2100      	movs	r1, #0
 80055a0:	206a      	movs	r0, #106	; 0x6a
 80055a2:	f7fb ffe7 	bl	8001574 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090,0X0011);
 80055a6:	2111      	movs	r1, #17
 80055a8:	2090      	movs	r0, #144	; 0x90
 80055aa:	f7fb ffe3 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 80055ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055b2:	2092      	movs	r0, #146	; 0x92
 80055b4:	f7fb ffde 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0093,0x0402);
 80055b8:	f240 4102 	movw	r1, #1026	; 0x402
 80055bc:	2093      	movs	r0, #147	; 0x93
 80055be:	f7fb ffd9 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0094,0x0002);
 80055c2:	2102      	movs	r1, #2
 80055c4:	2094      	movs	r0, #148	; 0x94
 80055c6:	f7fb ffd5 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(20);
 80055ca:	2014      	movs	r0, #20
 80055cc:	f001 fd42 	bl	8007054 <HAL_Delay>

		LCD_WriteReg(0x0007,0x0001);
 80055d0:	2101      	movs	r1, #1
 80055d2:	2007      	movs	r0, #7
 80055d4:	f7fb ffce 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(20);
 80055d8:	2014      	movs	r0, #20
 80055da:	f001 fd3b 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0x0007,0x0061);
 80055de:	2161      	movs	r1, #97	; 0x61
 80055e0:	2007      	movs	r0, #7
 80055e2:	f7fb ffc7 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0173);
 80055e6:	f240 1173 	movw	r1, #371	; 0x173
 80055ea:	2007      	movs	r0, #7
 80055ec:	f7fb ffc2 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0x0020,0x0000);
 80055f0:	2100      	movs	r1, #0
 80055f2:	2020      	movs	r0, #32
 80055f4:	f7fb ffbe 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0021,0x0000);
 80055f8:	2100      	movs	r1, #0
 80055fa:	2021      	movs	r0, #33	; 0x21
 80055fc:	f7fb ffba 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x22);
 8005600:	2122      	movs	r1, #34	; 0x22
 8005602:	2000      	movs	r0, #0
 8005604:	f7fb ffb6 	bl	8001574 <LCD_WriteReg>
 8005608:	e310      	b.n	8005c2c <LCD_Init+0x383c>
	}else if(lcddev.id==0xC505)
 800560a:	4b6b      	ldr	r3, [pc, #428]	; (80057b8 <LCD_Init+0x33c8>)
 800560c:	889b      	ldrh	r3, [r3, #4]
 800560e:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005612:	4293      	cmp	r3, r2
 8005614:	f040 80d2 	bne.w	80057bc <LCD_Init+0x33cc>
	{
		LCD_WriteReg(0x0000,0x0000);
 8005618:	2100      	movs	r1, #0
 800561a:	2000      	movs	r0, #0
 800561c:	f7fb ffaa 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005620:	2100      	movs	r1, #0
 8005622:	2000      	movs	r0, #0
 8005624:	f7fb ffa6 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(20);
 8005628:	2014      	movs	r0, #20
 800562a:	f001 fd13 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0x0000,0x0000);
 800562e:	2100      	movs	r1, #0
 8005630:	2000      	movs	r0, #0
 8005632:	f7fb ff9f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005636:	2100      	movs	r1, #0
 8005638:	2000      	movs	r0, #0
 800563a:	f7fb ff9b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800563e:	2100      	movs	r1, #0
 8005640:	2000      	movs	r0, #0
 8005642:	f7fb ff97 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005646:	2100      	movs	r1, #0
 8005648:	2000      	movs	r0, #0
 800564a:	f7fb ff93 	bl	8001574 <LCD_WriteReg>
 		LCD_WriteReg(0x00a4,0x0001);
 800564e:	2101      	movs	r1, #1
 8005650:	20a4      	movs	r0, #164	; 0xa4
 8005652:	f7fb ff8f 	bl	8001574 <LCD_WriteReg>
 		HAL_Delay(20);
 8005656:	2014      	movs	r0, #20
 8005658:	f001 fcfc 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 800565c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005660:	2060      	movs	r0, #96	; 0x60
 8005662:	f7fb ff87 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0806);
 8005666:	f640 0106 	movw	r1, #2054	; 0x806
 800566a:	2008      	movs	r0, #8
 800566c:	f7fb ff82 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0703);//gamma setting
 8005670:	f240 7103 	movw	r1, #1795	; 0x703
 8005674:	2030      	movs	r0, #48	; 0x30
 8005676:	f7fb ff7d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0001);
 800567a:	2101      	movs	r1, #1
 800567c:	2031      	movs	r0, #49	; 0x31
 800567e:	f7fb ff79 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0004);
 8005682:	2104      	movs	r1, #4
 8005684:	2032      	movs	r0, #50	; 0x32
 8005686:	f7fb ff75 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0102);
 800568a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800568e:	2033      	movs	r0, #51	; 0x33
 8005690:	f7fb ff70 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x0300);
 8005694:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005698:	2034      	movs	r0, #52	; 0x34
 800569a:	f7fb ff6b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0103);
 800569e:	f240 1103 	movw	r1, #259	; 0x103
 80056a2:	2035      	movs	r0, #53	; 0x35
 80056a4:	f7fb ff66 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x001F);
 80056a8:	211f      	movs	r1, #31
 80056aa:	2036      	movs	r0, #54	; 0x36
 80056ac:	f7fb ff62 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0703);
 80056b0:	f240 7103 	movw	r1, #1795	; 0x703
 80056b4:	2037      	movs	r0, #55	; 0x37
 80056b6:	f7fb ff5d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0001);
 80056ba:	2101      	movs	r1, #1
 80056bc:	2038      	movs	r0, #56	; 0x38
 80056be:	f7fb ff59 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0004);
 80056c2:	2104      	movs	r1, #4
 80056c4:	2039      	movs	r0, #57	; 0x39
 80056c6:	f7fb ff55 	bl	8001574 <LCD_WriteReg>



		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80056ca:	2115      	movs	r1, #21
 80056cc:	2090      	movs	r0, #144	; 0x90
 80056ce:	f7fb ff51 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80056d2:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80056d6:	2010      	movs	r0, #16
 80056d8:	f7fb ff4c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0247);	//DC1,DC0,VC
 80056dc:	f240 2147 	movw	r1, #583	; 0x247
 80056e0:	2011      	movs	r0, #17
 80056e2:	f7fb ff47 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80056e6:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80056ea:	2012      	movs	r0, #18
 80056ec:	f7fb ff42 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80056f0:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80056f4:	2013      	movs	r0, #19
 80056f6:	f7fb ff3d 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(120);
 80056fa:	2078      	movs	r0, #120	; 0x78
 80056fc:	f001 fcaa 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8005700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005704:	2001      	movs	r0, #1
 8005706:	f7fb ff35 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 800570a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800570e:	2002      	movs	r0, #2
 8005710:	f7fb ff30 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005714:	f241 0130 	movw	r1, #4144	; 0x1030
 8005718:	2003      	movs	r0, #3
 800571a:	f7fb ff2b 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800571e:	2108      	movs	r1, #8
 8005720:	200a      	movs	r0, #10
 8005722:	f7fb ff27 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005726:	2100      	movs	r1, #0
 8005728:	200c      	movs	r0, #12
 800572a:	f7fb ff23 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800572e:	2120      	movs	r1, #32
 8005730:	200e      	movs	r0, #14
 8005732:	f7fb ff1f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005736:	2100      	movs	r1, #0
 8005738:	200f      	movs	r0, #15
 800573a:	f7fb ff1b 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800573e:	2100      	movs	r1, #0
 8005740:	2020      	movs	r0, #32
 8005742:	f7fb ff17 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8005746:	2100      	movs	r1, #0
 8005748:	2021      	movs	r0, #33	; 0x21
 800574a:	f7fb ff13 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x002A,0x003D);	//vcom2
 800574e:	213d      	movs	r1, #61	; 0x3d
 8005750:	202a      	movs	r0, #42	; 0x2a
 8005752:	f7fb ff0f 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(20);
 8005756:	2014      	movs	r0, #20
 8005758:	f001 fc7c 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 800575c:	212d      	movs	r1, #45	; 0x2d
 800575e:	2029      	movs	r0, #41	; 0x29
 8005760:	f7fb ff08 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005764:	2100      	movs	r1, #0
 8005766:	2050      	movs	r0, #80	; 0x50
 8005768:	f7fb ff04 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 800576c:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8005770:	2051      	movs	r0, #81	; 0x51
 8005772:	f7fb feff 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005776:	2100      	movs	r1, #0
 8005778:	2052      	movs	r0, #82	; 0x52
 800577a:	f7fb fefb 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800577e:	f240 113f 	movw	r1, #319	; 0x13f
 8005782:	2053      	movs	r0, #83	; 0x53
 8005784:	f7fb fef6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005788:	2100      	movs	r1, #0
 800578a:	2061      	movs	r0, #97	; 0x61
 800578c:	f7fb fef2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005790:	2100      	movs	r1, #0
 8005792:	206a      	movs	r0, #106	; 0x6a
 8005794:	f7fb feee 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0300);
 8005798:	f44f 7140 	mov.w	r1, #768	; 0x300
 800579c:	2092      	movs	r0, #146	; 0x92
 800579e:	f7fb fee9 	bl	8001574 <LCD_WriteReg>

 		LCD_WriteReg(0x0093, 0x0005);
 80057a2:	2105      	movs	r1, #5
 80057a4:	2093      	movs	r0, #147	; 0x93
 80057a6:	f7fb fee5 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80057aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057ae:	2007      	movs	r0, #7
 80057b0:	f7fb fee0 	bl	8001574 <LCD_WriteReg>
 80057b4:	e23a      	b.n	8005c2c <LCD_Init+0x383c>
 80057b6:	bf00      	nop
 80057b8:	200002bc 	.word	0x200002bc
	}else if(lcddev.id==0x4531)//OK |/|/|
 80057bc:	4bbb      	ldr	r3, [pc, #748]	; (8005aac <LCD_Init+0x36bc>)
 80057be:	889b      	ldrh	r3, [r3, #4]
 80057c0:	f244 5231 	movw	r2, #17713	; 0x4531
 80057c4:	4293      	cmp	r3, r2
 80057c6:	f040 80ba 	bne.w	800593e <LCD_Init+0x354e>
	{
		LCD_WriteReg(0X00,0X0001);
 80057ca:	2101      	movs	r1, #1
 80057cc:	2000      	movs	r0, #0
 80057ce:	f7fb fed1 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(10);
 80057d2:	200a      	movs	r0, #10
 80057d4:	f001 fc3e 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0X10,0X1628);
 80057d8:	f241 6128 	movw	r1, #5672	; 0x1628
 80057dc:	2010      	movs	r0, #16
 80057de:	f7fb fec9 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X000e);//0x0006
 80057e2:	210e      	movs	r1, #14
 80057e4:	2012      	movs	r0, #18
 80057e6:	f7fb fec5 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X0A39);
 80057ea:	f640 2139 	movw	r1, #2617	; 0xa39
 80057ee:	2013      	movs	r0, #19
 80057f0:	f7fb fec0 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(10);
 80057f4:	200a      	movs	r0, #10
 80057f6:	f001 fc2d 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0X11,0X0040);
 80057fa:	2140      	movs	r1, #64	; 0x40
 80057fc:	2011      	movs	r0, #17
 80057fe:	f7fb feb9 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X15,0X0050);
 8005802:	2150      	movs	r1, #80	; 0x50
 8005804:	2015      	movs	r0, #21
 8005806:	f7fb feb5 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(10);
 800580a:	200a      	movs	r0, #10
 800580c:	f001 fc22 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0X12,0X001e);//16
 8005810:	211e      	movs	r1, #30
 8005812:	2012      	movs	r0, #18
 8005814:	f7fb feae 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(10);
 8005818:	200a      	movs	r0, #10
 800581a:	f001 fc1b 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0X10,0X1620);
 800581e:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005822:	2010      	movs	r0, #16
 8005824:	f7fb fea6 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X2A39);
 8005828:	f642 2139 	movw	r1, #10809	; 0x2a39
 800582c:	2013      	movs	r0, #19
 800582e:	f7fb fea1 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(10);
 8005832:	200a      	movs	r0, #10
 8005834:	f001 fc0e 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0X01,0X0100);
 8005838:	f44f 7180 	mov.w	r1, #256	; 0x100
 800583c:	2001      	movs	r0, #1
 800583e:	f7fb fe99 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8005842:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005846:	2002      	movs	r0, #2
 8005848:	f7fb fe94 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1038);//改变方向的
 800584c:	f241 0138 	movw	r1, #4152	; 0x1038
 8005850:	2003      	movs	r0, #3
 8005852:	f7fb fe8f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0202);
 8005856:	f240 2102 	movw	r1, #514	; 0x202
 800585a:	2008      	movs	r0, #8
 800585c:	f7fb fe8a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 8005860:	2108      	movs	r1, #8
 8005862:	200a      	movs	r0, #10
 8005864:	f7fb fe86 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X30,0X0000);
 8005868:	2100      	movs	r1, #0
 800586a:	2030      	movs	r0, #48	; 0x30
 800586c:	f7fb fe82 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 8005870:	f240 4102 	movw	r1, #1026	; 0x402
 8005874:	2031      	movs	r0, #49	; 0x31
 8005876:	f7fb fe7d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0106);
 800587a:	f44f 7183 	mov.w	r1, #262	; 0x106
 800587e:	2032      	movs	r0, #50	; 0x32
 8005880:	f7fb fe78 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0503);
 8005884:	f240 5103 	movw	r1, #1283	; 0x503
 8005888:	2033      	movs	r0, #51	; 0x33
 800588a:	f7fb fe73 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0104);
 800588e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005892:	2034      	movs	r0, #52	; 0x34
 8005894:	f7fb fe6e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0301);
 8005898:	f240 3101 	movw	r1, #769	; 0x301
 800589c:	2035      	movs	r0, #53	; 0x35
 800589e:	f7fb fe69 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 80058a2:	f240 7107 	movw	r1, #1799	; 0x707
 80058a6:	2036      	movs	r0, #54	; 0x36
 80058a8:	f7fb fe64 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 80058ac:	f240 3105 	movw	r1, #773	; 0x305
 80058b0:	2037      	movs	r0, #55	; 0x37
 80058b2:	f7fb fe5f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0208);
 80058b6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80058ba:	2038      	movs	r0, #56	; 0x38
 80058bc:	f7fb fe5a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0F0B);
 80058c0:	f640 710b 	movw	r1, #3851	; 0xf0b
 80058c4:	2039      	movs	r0, #57	; 0x39
 80058c6:	f7fb fe55 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X41,0X0002);
 80058ca:	2102      	movs	r1, #2
 80058cc:	2041      	movs	r0, #65	; 0x41
 80058ce:	f7fb fe51 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X60,0X2700);
 80058d2:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80058d6:	2060      	movs	r0, #96	; 0x60
 80058d8:	f7fb fe4c 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 80058dc:	2101      	movs	r1, #1
 80058de:	2061      	movs	r0, #97	; 0x61
 80058e0:	f7fb fe48 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X0210);
 80058e4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80058e8:	2090      	movs	r0, #144	; 0x90
 80058ea:	f7fb fe43 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X010A);
 80058ee:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80058f2:	2092      	movs	r0, #146	; 0x92
 80058f4:	f7fb fe3e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0004);
 80058f8:	2104      	movs	r1, #4
 80058fa:	2093      	movs	r0, #147	; 0x93
 80058fc:	f7fb fe3a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0100);
 8005900:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005904:	20a0      	movs	r0, #160	; 0xa0
 8005906:	f7fb fe35 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 800590a:	2101      	movs	r1, #1
 800590c:	2007      	movs	r0, #7
 800590e:	f7fb fe31 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 8005912:	2121      	movs	r1, #33	; 0x21
 8005914:	2007      	movs	r0, #7
 8005916:	f7fb fe2d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 800591a:	2123      	movs	r1, #35	; 0x23
 800591c:	2007      	movs	r0, #7
 800591e:	f7fb fe29 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 8005922:	2133      	movs	r1, #51	; 0x33
 8005924:	2007      	movs	r0, #7
 8005926:	f7fb fe25 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 800592a:	f240 1133 	movw	r1, #307	; 0x133
 800592e:	2007      	movs	r0, #7
 8005930:	f7fb fe20 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0000);
 8005934:	2100      	movs	r1, #0
 8005936:	20a0      	movs	r0, #160	; 0xa0
 8005938:	f7fb fe1c 	bl	8001574 <LCD_WriteReg>
 800593c:	e176      	b.n	8005c2c <LCD_Init+0x383c>
	}else if(lcddev.id==0x4535)
 800593e:	4b5b      	ldr	r3, [pc, #364]	; (8005aac <LCD_Init+0x36bc>)
 8005940:	889b      	ldrh	r3, [r3, #4]
 8005942:	f244 5235 	movw	r2, #17717	; 0x4535
 8005946:	4293      	cmp	r3, r2
 8005948:	f040 80b2 	bne.w	8005ab0 <LCD_Init+0x36c0>
	{
		LCD_WriteReg(0X15,0X0030);
 800594c:	2130      	movs	r1, #48	; 0x30
 800594e:	2015      	movs	r0, #21
 8005950:	f7fb fe10 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X9A,0X0010);
 8005954:	2110      	movs	r1, #16
 8005956:	209a      	movs	r0, #154	; 0x9a
 8005958:	f7fb fe0c 	bl	8001574 <LCD_WriteReg>
 		LCD_WriteReg(0X11,0X0020);
 800595c:	2120      	movs	r1, #32
 800595e:	2011      	movs	r0, #17
 8005960:	f7fb fe08 	bl	8001574 <LCD_WriteReg>
 		LCD_WriteReg(0X10,0X3428);
 8005964:	f243 4128 	movw	r1, #13352	; 0x3428
 8005968:	2010      	movs	r0, #16
 800596a:	f7fb fe03 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X0002);//16
 800596e:	2102      	movs	r1, #2
 8005970:	2012      	movs	r0, #18
 8005972:	f7fb fdff 	bl	8001574 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X1038);
 8005976:	f241 0138 	movw	r1, #4152	; 0x1038
 800597a:	2013      	movs	r0, #19
 800597c:	f7fb fdfa 	bl	8001574 <LCD_WriteReg>
 		HAL_Delay(40);
 8005980:	2028      	movs	r0, #40	; 0x28
 8005982:	f001 fb67 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0X12,0X0012);//16
 8005986:	2112      	movs	r1, #18
 8005988:	2012      	movs	r0, #18
 800598a:	f7fb fdf3 	bl	8001574 <LCD_WriteReg>
		HAL_Delay(40);
 800598e:	2028      	movs	r0, #40	; 0x28
 8005990:	f001 fb60 	bl	8007054 <HAL_Delay>
  		LCD_WriteReg(0X10,0X3420);
 8005994:	f243 4120 	movw	r1, #13344	; 0x3420
 8005998:	2010      	movs	r0, #16
 800599a:	f7fb fdeb 	bl	8001574 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X3038);
 800599e:	f243 0138 	movw	r1, #12344	; 0x3038
 80059a2:	2013      	movs	r0, #19
 80059a4:	f7fb fde6 	bl	8001574 <LCD_WriteReg>
 		HAL_Delay(70);
 80059a8:	2046      	movs	r0, #70	; 0x46
 80059aa:	f001 fb53 	bl	8007054 <HAL_Delay>
		LCD_WriteReg(0X30,0X0000);
 80059ae:	2100      	movs	r1, #0
 80059b0:	2030      	movs	r0, #48	; 0x30
 80059b2:	f7fb fddf 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 80059b6:	f240 4102 	movw	r1, #1026	; 0x402
 80059ba:	2031      	movs	r0, #49	; 0x31
 80059bc:	f7fb fdda 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0307);
 80059c0:	f240 3107 	movw	r1, #775	; 0x307
 80059c4:	2032      	movs	r0, #50	; 0x32
 80059c6:	f7fb fdd5 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0304);
 80059ca:	f44f 7141 	mov.w	r1, #772	; 0x304
 80059ce:	2033      	movs	r0, #51	; 0x33
 80059d0:	f7fb fdd0 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0004);
 80059d4:	2104      	movs	r1, #4
 80059d6:	2034      	movs	r0, #52	; 0x34
 80059d8:	f7fb fdcc 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0401);
 80059dc:	f240 4101 	movw	r1, #1025	; 0x401
 80059e0:	2035      	movs	r0, #53	; 0x35
 80059e2:	f7fb fdc7 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 80059e6:	f240 7107 	movw	r1, #1799	; 0x707
 80059ea:	2036      	movs	r0, #54	; 0x36
 80059ec:	f7fb fdc2 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 80059f0:	f240 3105 	movw	r1, #773	; 0x305
 80059f4:	2037      	movs	r0, #55	; 0x37
 80059f6:	f7fb fdbd 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0610);
 80059fa:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80059fe:	2038      	movs	r0, #56	; 0x38
 8005a00:	f7fb fdb8 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0610);
 8005a04:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005a08:	2039      	movs	r0, #57	; 0x39
 8005a0a:	f7fb fdb3 	bl	8001574 <LCD_WriteReg>

		LCD_WriteReg(0X01,0X0100);
 8005a0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a12:	2001      	movs	r0, #1
 8005a14:	f7fb fdae 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8005a18:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005a1c:	2002      	movs	r0, #2
 8005a1e:	f7fb fda9 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1030);//改变方向的
 8005a22:	f241 0130 	movw	r1, #4144	; 0x1030
 8005a26:	2003      	movs	r0, #3
 8005a28:	f7fb fda4 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0808);
 8005a2c:	f640 0108 	movw	r1, #2056	; 0x808
 8005a30:	2008      	movs	r0, #8
 8005a32:	f7fb fd9f 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 8005a36:	2108      	movs	r1, #8
 8005a38:	200a      	movs	r0, #10
 8005a3a:	f7fb fd9b 	bl	8001574 <LCD_WriteReg>
 		LCD_WriteReg(0X60,0X2700);
 8005a3e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005a42:	2060      	movs	r0, #96	; 0x60
 8005a44:	f7fb fd96 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8005a48:	2101      	movs	r1, #1
 8005a4a:	2061      	movs	r0, #97	; 0x61
 8005a4c:	f7fb fd92 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X013E);
 8005a50:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005a54:	2090      	movs	r0, #144	; 0x90
 8005a56:	f7fb fd8d 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X0100);
 8005a5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a5e:	2092      	movs	r0, #146	; 0x92
 8005a60:	f7fb fd88 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0100);
 8005a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a68:	2093      	movs	r0, #147	; 0x93
 8005a6a:	f7fb fd83 	bl	8001574 <LCD_WriteReg>
 		LCD_WriteReg(0XA0,0X3000);
 8005a6e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005a72:	20a0      	movs	r0, #160	; 0xa0
 8005a74:	f7fb fd7e 	bl	8001574 <LCD_WriteReg>
 		LCD_WriteReg(0XA3,0X0010);
 8005a78:	2110      	movs	r1, #16
 8005a7a:	20a3      	movs	r0, #163	; 0xa3
 8005a7c:	f7fb fd7a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 8005a80:	2101      	movs	r1, #1
 8005a82:	2007      	movs	r0, #7
 8005a84:	f7fb fd76 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 8005a88:	2121      	movs	r1, #33	; 0x21
 8005a8a:	2007      	movs	r0, #7
 8005a8c:	f7fb fd72 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 8005a90:	2123      	movs	r1, #35	; 0x23
 8005a92:	2007      	movs	r0, #7
 8005a94:	f7fb fd6e 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 8005a98:	2133      	movs	r1, #51	; 0x33
 8005a9a:	2007      	movs	r0, #7
 8005a9c:	f7fb fd6a 	bl	8001574 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 8005aa0:	f240 1133 	movw	r1, #307	; 0x133
 8005aa4:	2007      	movs	r0, #7
 8005aa6:	f7fb fd65 	bl	8001574 <LCD_WriteReg>
 8005aaa:	e0bf      	b.n	8005c2c <LCD_Init+0x383c>
 8005aac:	200002bc 	.word	0x200002bc
	}else if(lcddev.id==0X1963)
 8005ab0:	4b65      	ldr	r3, [pc, #404]	; (8005c48 <LCD_Init+0x3858>)
 8005ab2:	889b      	ldrh	r3, [r3, #4]
 8005ab4:	f641 1263 	movw	r2, #6499	; 0x1963
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	f040 80b7 	bne.w	8005c2c <LCD_Init+0x383c>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8005abe:	20e2      	movs	r0, #226	; 0xe2
 8005ac0:	f7fb fd2a 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 8005ac4:	201d      	movs	r0, #29
 8005ac6:	f7fb fd37 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005aca:	2002      	movs	r0, #2
 8005acc:	f7fb fd34 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 8005ad0:	2004      	movs	r0, #4
 8005ad2:	f7fb fd31 	bl	8001538 <LCD_WR_DATA>
		delay_us(100);
 8005ad6:	2064      	movs	r0, #100	; 0x64
 8005ad8:	f7fb fd00 	bl	80014dc <delay_us>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005adc:	20e0      	movs	r0, #224	; 0xe0
 8005ade:	f7fb fd1b 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005ae2:	2001      	movs	r0, #1
 8005ae4:	f7fb fd28 	bl	8001538 <LCD_WR_DATA>
		HAL_Delay(10);
 8005ae8:	200a      	movs	r0, #10
 8005aea:	f001 fab3 	bl	8007054 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8005aee:	20e0      	movs	r0, #224	; 0xe0
 8005af0:	f7fb fd12 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8005af4:	2003      	movs	r0, #3
 8005af6:	f7fb fd1f 	bl	8001538 <LCD_WR_DATA>
		HAL_Delay(12);
 8005afa:	200c      	movs	r0, #12
 8005afc:	f001 faaa 	bl	8007054 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005b00:	2001      	movs	r0, #1
 8005b02:	f7fb fd09 	bl	8001518 <LCD_WR_REG>
		HAL_Delay(10);
 8005b06:	200a      	movs	r0, #10
 8005b08:	f001 faa4 	bl	8007054 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005b0c:	20e6      	movs	r0, #230	; 0xe6
 8005b0e:	f7fb fd03 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005b12:	202f      	movs	r0, #47	; 0x2f
 8005b14:	f7fb fd10 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8005b18:	20ff      	movs	r0, #255	; 0xff
 8005b1a:	f7fb fd0d 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8005b1e:	20ff      	movs	r0, #255	; 0xff
 8005b20:	f7fb fd0a 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005b24:	20b0      	movs	r0, #176	; 0xb0
 8005b26:	f7fb fcf7 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005b2a:	2020      	movs	r0, #32
 8005b2c:	f7fb fd04 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8005b30:	2000      	movs	r0, #0
 8005b32:	f7fb fd01 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 8005b36:	2001      	movs	r0, #1
 8005b38:	f7fb fcfe 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005b3c:	f240 103f 	movw	r0, #319	; 0x13f
 8005b40:	f7fb fcfa 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 8005b44:	2000      	movs	r0, #0
 8005b46:	f7fb fcf7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005b4a:	20ef      	movs	r0, #239	; 0xef
 8005b4c:	f7fb fcf4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 8005b50:	2000      	movs	r0, #0
 8005b52:	f7fb fcf1 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005b56:	20b4      	movs	r0, #180	; 0xb4
 8005b58:	f7fb fcde 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005b5c:	2002      	movs	r0, #2
 8005b5e:	f7fb fceb 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 8005b62:	f240 203f 	movw	r0, #575	; 0x23f
 8005b66:	f7fb fce7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	f7fb fce4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 8005b70:	202e      	movs	r0, #46	; 0x2e
 8005b72:	f7fb fce1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005b76:	2000      	movs	r0, #0
 8005b78:	f7fb fcde 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	f7fb fcdb 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005b82:	2000      	movs	r0, #0
 8005b84:	f7fb fcd8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005b88:	2000      	movs	r0, #0
 8005b8a:	f7fb fcd5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 8005b8e:	20b6      	movs	r0, #182	; 0xb6
 8005b90:	f7fb fcc2 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005b94:	2001      	movs	r0, #1
 8005b96:	f7fb fccf 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 8005b9a:	f44f 708e 	mov.w	r0, #284	; 0x11c
 8005b9e:	f7fb fccb 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	f7fb fcc8 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 8005ba8:	2017      	movs	r0, #23
 8005baa:	f7fb fcc5 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8005bae:	2015      	movs	r0, #21
 8005bb0:	f7fb fcc2 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	f7fb fcbf 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005bba:	2000      	movs	r0, #0
 8005bbc:	f7fb fcbc 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 8005bc0:	20f0      	movs	r0, #240	; 0xf0
 8005bc2:	f7fb fca9 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8005bc6:	2003      	movs	r0, #3
 8005bc8:	f7fb fcb6 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 8005bcc:	2029      	movs	r0, #41	; 0x29
 8005bce:	f7fb fca3 	bl	8001518 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005bd2:	20d0      	movs	r0, #208	; 0xd0
 8005bd4:	f7fb fca0 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005bd8:	2000      	movs	r0, #0
 8005bda:	f7fb fcad 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005bde:	20be      	movs	r0, #190	; 0xbe
 8005be0:	f7fb fc9a 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005be4:	2005      	movs	r0, #5
 8005be6:	f7fb fca7 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005bea:	20fe      	movs	r0, #254	; 0xfe
 8005bec:	f7fb fca4 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f7fb fca1 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	f7fb fc9e 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	f7fb fc9b 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 8005c02:	2000      	movs	r0, #0
 8005c04:	f7fb fc98 	bl	8001538 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005c08:	20b8      	movs	r0, #184	; 0xb8
 8005c0a:	f7fb fc85 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005c0e:	2003      	movs	r0, #3
 8005c10:	f7fb fc92 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 8005c14:	2001      	movs	r0, #1
 8005c16:	f7fb fc8f 	bl	8001538 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8005c1a:	20ba      	movs	r0, #186	; 0xba
 8005c1c:	f7fb fc7c 	bl	8001518 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005c20:	2001      	movs	r0, #1
 8005c22:	f7fb fc89 	bl	8001538 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 8005c26:	2064      	movs	r0, #100	; 0x64
 8005c28:	f7fc f91e 	bl	8001e68 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		//默认为竖屏
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	f7fc f94f 	bl	8001ed0 <LCD_Display_Dir>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);				//点亮背光
 8005c32:	2201      	movs	r2, #1
 8005c34:	2101      	movs	r1, #1
 8005c36:	4805      	ldr	r0, [pc, #20]	; (8005c4c <LCD_Init+0x385c>)
 8005c38:	f001 fdda 	bl	80077f0 <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);
 8005c3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005c40:	f000 f806 	bl	8005c50 <LCD_Clear>
}
 8005c44:	bf00      	nop
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	200002bc 	.word	0x200002bc
 8005c4c:	40010c00 	.word	0x40010c00

08005c50 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint16_t color)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	4603      	mov	r3, r0
 8005c58:	80fb      	strh	r3, [r7, #6]
	uint32_t index=0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 8005c5e:	4b21      	ldr	r3, [pc, #132]	; (8005ce4 <LCD_Clear+0x94>)
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 8005c64:	4b1f      	ldr	r3, [pc, #124]	; (8005ce4 <LCD_Clear+0x94>)
 8005c66:	885b      	ldrh	r3, [r3, #2]
 8005c68:	461a      	mov	r2, r3
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	fb02 f303 	mul.w	r3, r2, r3
 8005c70:	60bb      	str	r3, [r7, #8]
	if((lcddev.id==0X6804)&&(lcddev.dir==1))//6804横屏的时候特殊处理
 8005c72:	4b1c      	ldr	r3, [pc, #112]	; (8005ce4 <LCD_Clear+0x94>)
 8005c74:	889b      	ldrh	r3, [r3, #4]
 8005c76:	f646 0204 	movw	r2, #26628	; 0x6804
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d11a      	bne.n	8005cb4 <LCD_Clear+0x64>
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <LCD_Clear+0x94>)
 8005c80:	799b      	ldrb	r3, [r3, #6]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d116      	bne.n	8005cb4 <LCD_Clear+0x64>
	{
 		lcddev.dir=0;
 8005c86:	4b17      	ldr	r3, [pc, #92]	; (8005ce4 <LCD_Clear+0x94>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 8005c8c:	4b15      	ldr	r3, [pc, #84]	; (8005ce4 <LCD_Clear+0x94>)
 8005c8e:	222a      	movs	r2, #42	; 0x2a
 8005c90:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 8005c92:	4b14      	ldr	r3, [pc, #80]	; (8005ce4 <LCD_Clear+0x94>)
 8005c94:	222b      	movs	r2, #43	; 0x2b
 8005c96:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00,0x0000);		//设置光标位置
 8005c98:	2100      	movs	r1, #0
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	f7fb fca2 	bl	80015e4 <LCD_SetCursor>
 		lcddev.dir=1;
 8005ca0:	4b10      	ldr	r3, [pc, #64]	; (8005ce4 <LCD_Clear+0x94>)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 8005ca6:	4b0f      	ldr	r3, [pc, #60]	; (8005ce4 <LCD_Clear+0x94>)
 8005ca8:	222b      	movs	r2, #43	; 0x2b
 8005caa:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 8005cac:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <LCD_Clear+0x94>)
 8005cae:	222a      	movs	r2, #42	; 0x2a
 8005cb0:	819a      	strh	r2, [r3, #12]
 8005cb2:	e003      	b.n	8005cbc <LCD_Clear+0x6c>
 	}else LCD_SetCursor(0x00,0x0000);	//设置光标位置
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	f7fb fc94 	bl	80015e4 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 8005cbc:	f7fb fc84 	bl	80015c8 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	e005      	b.n	8005cd2 <LCD_Clear+0x82>
	{
		LCD->LCD_RAM=color;
 8005cc6:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <LCD_Clear+0x98>)
 8005cc8:	88fb      	ldrh	r3, [r7, #6]
 8005cca:	8053      	strh	r3, [r2, #2]
	for(index=0;index<totalpoint;index++)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d3f5      	bcc.n	8005cc6 <LCD_Clear+0x76>
	}
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	200002bc 	.word	0x200002bc
 8005ce8:	6c0007fe 	.word	0x6c0007fe

08005cec <LCD_Fill>:
//在指定区域内填充单个颜色
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Fill(uint16_t sx,uint16_t sy,uint16_t ex,uint16_t ey,uint16_t color)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	4623      	mov	r3, r4
 8005cfc:	80fb      	strh	r3, [r7, #6]
 8005cfe:	4603      	mov	r3, r0
 8005d00:	80bb      	strh	r3, [r7, #4]
 8005d02:	460b      	mov	r3, r1
 8005d04:	807b      	strh	r3, [r7, #2]
 8005d06:	4613      	mov	r3, r2
 8005d08:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	uint16_t xlen=0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if((lcddev.id==0X6804)&&(lcddev.dir==1))	//6804横屏的时候特殊处理
 8005d0e:	4b32      	ldr	r3, [pc, #200]	; (8005dd8 <LCD_Fill+0xec>)
 8005d10:	889b      	ldrh	r3, [r3, #4]
 8005d12:	f646 0204 	movw	r2, #26628	; 0x6804
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d133      	bne.n	8005d82 <LCD_Fill+0x96>
 8005d1a:	4b2f      	ldr	r3, [pc, #188]	; (8005dd8 <LCD_Fill+0xec>)
 8005d1c:	799b      	ldrb	r3, [r3, #6]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d12f      	bne.n	8005d82 <LCD_Fill+0x96>
	{
		temp=sx;
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	813b      	strh	r3, [r7, #8]
		sx=sy;
 8005d26:	88bb      	ldrh	r3, [r7, #4]
 8005d28:	80fb      	strh	r3, [r7, #6]
		sy=lcddev.width-ex-1;
 8005d2a:	4b2b      	ldr	r3, [pc, #172]	; (8005dd8 <LCD_Fill+0xec>)
 8005d2c:	881a      	ldrh	r2, [r3, #0]
 8005d2e:	887b      	ldrh	r3, [r7, #2]
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	3b01      	subs	r3, #1
 8005d36:	80bb      	strh	r3, [r7, #4]
		ex=ey;
 8005d38:	883b      	ldrh	r3, [r7, #0]
 8005d3a:	807b      	strh	r3, [r7, #2]
		ey=lcddev.width-temp-1;
 8005d3c:	4b26      	ldr	r3, [pc, #152]	; (8005dd8 <LCD_Fill+0xec>)
 8005d3e:	881a      	ldrh	r2, [r3, #0]
 8005d40:	893b      	ldrh	r3, [r7, #8]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	803b      	strh	r3, [r7, #0]
 		lcddev.dir=0;
 8005d4a:	4b23      	ldr	r3, [pc, #140]	; (8005dd8 <LCD_Fill+0xec>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 8005d50:	4b21      	ldr	r3, [pc, #132]	; (8005dd8 <LCD_Fill+0xec>)
 8005d52:	222a      	movs	r2, #42	; 0x2a
 8005d54:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 8005d56:	4b20      	ldr	r3, [pc, #128]	; (8005dd8 <LCD_Fill+0xec>)
 8005d58:	222b      	movs	r2, #43	; 0x2b
 8005d5a:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx,sy,ex,ey,color);
 8005d5c:	883c      	ldrh	r4, [r7, #0]
 8005d5e:	887a      	ldrh	r2, [r7, #2]
 8005d60:	88b9      	ldrh	r1, [r7, #4]
 8005d62:	88f8      	ldrh	r0, [r7, #6]
 8005d64:	8c3b      	ldrh	r3, [r7, #32]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	4623      	mov	r3, r4
 8005d6a:	f7ff ffbf 	bl	8005cec <LCD_Fill>
 		lcddev.dir=1;
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	; (8005dd8 <LCD_Fill+0xec>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 8005d74:	4b18      	ldr	r3, [pc, #96]	; (8005dd8 <LCD_Fill+0xec>)
 8005d76:	222b      	movs	r2, #43	; 0x2b
 8005d78:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 8005d7a:	4b17      	ldr	r3, [pc, #92]	; (8005dd8 <LCD_Fill+0xec>)
 8005d7c:	222a      	movs	r2, #42	; 0x2a
 8005d7e:	819a      	strh	r2, [r3, #12]
 8005d80:	e025      	b.n	8005dce <LCD_Fill+0xe2>
 	}else
	{
		xlen=ex-sx+1;
 8005d82:	887a      	ldrh	r2, [r7, #2]
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	817b      	strh	r3, [r7, #10]
		for(i=sy;i<=ey;i++)
 8005d8e:	88bb      	ldrh	r3, [r7, #4]
 8005d90:	81fb      	strh	r3, [r7, #14]
 8005d92:	e017      	b.n	8005dc4 <LCD_Fill+0xd8>
		{
		 	LCD_SetCursor(sx,i);      				//设置光标位置
 8005d94:	89fa      	ldrh	r2, [r7, #14]
 8005d96:	88fb      	ldrh	r3, [r7, #6]
 8005d98:	4611      	mov	r1, r2
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fb fc22 	bl	80015e4 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM
 8005da0:	f7fb fc12 	bl	80015c8 <LCD_WriteRAM_Prepare>
			for(j=0;j<xlen;j++)LCD->LCD_RAM=color;	//显示颜色
 8005da4:	2300      	movs	r3, #0
 8005da6:	81bb      	strh	r3, [r7, #12]
 8005da8:	e005      	b.n	8005db6 <LCD_Fill+0xca>
 8005daa:	4a0c      	ldr	r2, [pc, #48]	; (8005ddc <LCD_Fill+0xf0>)
 8005dac:	8c3b      	ldrh	r3, [r7, #32]
 8005dae:	8053      	strh	r3, [r2, #2]
 8005db0:	89bb      	ldrh	r3, [r7, #12]
 8005db2:	3301      	adds	r3, #1
 8005db4:	81bb      	strh	r3, [r7, #12]
 8005db6:	89ba      	ldrh	r2, [r7, #12]
 8005db8:	897b      	ldrh	r3, [r7, #10]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d3f5      	bcc.n	8005daa <LCD_Fill+0xbe>
		for(i=sy;i<=ey;i++)
 8005dbe:	89fb      	ldrh	r3, [r7, #14]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	81fb      	strh	r3, [r7, #14]
 8005dc4:	89fa      	ldrh	r2, [r7, #14]
 8005dc6:	883b      	ldrh	r3, [r7, #0]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d9e3      	bls.n	8005d94 <LCD_Fill+0xa8>
		}
	}
}
 8005dcc:	bf00      	nop
 8005dce:	bf00      	nop
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd90      	pop	{r4, r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	200002bc 	.word	0x200002bc
 8005ddc:	6c0007fe 	.word	0x6c0007fe

08005de0 <LCD_RGBColor_Change>:
	LCD_WriteData(data);
}


uint32_t LCD_RGBColor_Change(uint16_t color)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	4603      	mov	r3, r0
 8005de8:	80fb      	strh	r3, [r7, #6]
	uint8_t r,g,b=0;
 8005dea:	2300      	movs	r3, #0
 8005dec:	73fb      	strb	r3, [r7, #15]

	r=(color>>11)&0x1f;
 8005dee:	88fb      	ldrh	r3, [r7, #6]
 8005df0:	0adb      	lsrs	r3, r3, #11
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	f003 031f 	and.w	r3, r3, #31
 8005dfa:	73bb      	strb	r3, [r7, #14]
	g=(color>>5)&0x3f;
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	095b      	lsrs	r3, r3, #5
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e08:	737b      	strb	r3, [r7, #13]
	b=color&0x1f;
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	f003 031f 	and.w	r3, r3, #31
 8005e12:	73fb      	strb	r3, [r7, #15]

	return ((r<<13)|(g<<6)|(b<<1));
 8005e14:	7bbb      	ldrb	r3, [r7, #14]
 8005e16:	035a      	lsls	r2, r3, #13
 8005e18:	7b7b      	ldrb	r3, [r7, #13]
 8005e1a:	019b      	lsls	r3, r3, #6
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	4313      	orrs	r3, r2
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bc80      	pop	{r7}
 8005e2c:	4770      	bx	lr
	...

08005e30 <LCD_WriteData_Color>:


void LCD_WriteData_Color(uint16_t color)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	80fb      	strh	r3, [r7, #6]
			uint32_t recolor=0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]
			recolor=LCD_RGBColor_Change(color);
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7ff ffcd 	bl	8005de0 <LCD_RGBColor_Change>
 8005e46:	60f8      	str	r0, [r7, #12]
			LCD->LCD_RAM=(recolor>>9);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	0a5a      	lsrs	r2, r3, #9
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <LCD_WriteData_Color+0x34>)
 8005e4e:	b292      	uxth	r2, r2
 8005e50:	805a      	strh	r2, [r3, #2]
			LCD->LCD_RAM=recolor;
 8005e52:	4b04      	ldr	r3, [pc, #16]	; (8005e64 <LCD_WriteData_Color+0x34>)
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	b292      	uxth	r2, r2
 8005e58:	805a      	strh	r2, [r3, #2]
}
 8005e5a:	bf00      	nop
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	6c0007fe 	.word	0x6c0007fe

08005e68 <LCD_DrowSign>:


void LCD_DrowSign(uint16_t x, uint16_t y, uint16_t color)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	4603      	mov	r3, r0
 8005e70:	80fb      	strh	r3, [r7, #6]
 8005e72:	460b      	mov	r3, r1
 8005e74:	80bb      	strh	r3, [r7, #4]
 8005e76:	4613      	mov	r3, r2
 8005e78:	807b      	strh	r3, [r7, #2]
    uint8_t i;

    /* 画点 */
    LCD_Set_Window(x-1, y-1, x+1, y+1);
 8005e7a:	88fb      	ldrh	r3, [r7, #6]
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b298      	uxth	r0, r3
 8005e80:	88bb      	ldrh	r3, [r7, #4]
 8005e82:	3b01      	subs	r3, #1
 8005e84:	b299      	uxth	r1, r3
 8005e86:	88fb      	ldrh	r3, [r7, #6]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	88bb      	ldrh	r3, [r7, #4]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f7fc f929 	bl	80020e8 <LCD_Set_Window>
    for(i=0; i<9; i++)
 8005e96:	2300      	movs	r3, #0
 8005e98:	73fb      	strb	r3, [r7, #15]
 8005e9a:	e006      	b.n	8005eaa <LCD_DrowSign+0x42>
    {
		LCD_WriteData_Color(color);
 8005e9c:	887b      	ldrh	r3, [r7, #2]
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff ffc6 	bl	8005e30 <LCD_WriteData_Color>
    for(i=0; i<9; i++)
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	73fb      	strb	r3, [r7, #15]
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d9f5      	bls.n	8005e9c <LCD_DrowSign+0x34>
    }

    /* 画竖 */
    LCD_Set_Window(x-4, y, x+4, y);
 8005eb0:	88fb      	ldrh	r3, [r7, #6]
 8005eb2:	3b04      	subs	r3, #4
 8005eb4:	b298      	uxth	r0, r3
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	88bb      	ldrh	r3, [r7, #4]
 8005ebe:	88b9      	ldrh	r1, [r7, #4]
 8005ec0:	f7fc f912 	bl	80020e8 <LCD_Set_Window>
    for(i=0; i<9; i++)
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	73fb      	strb	r3, [r7, #15]
 8005ec8:	e006      	b.n	8005ed8 <LCD_DrowSign+0x70>
    {
		LCD_WriteData_Color(color);
 8005eca:	887b      	ldrh	r3, [r7, #2]
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f7ff ffaf 	bl	8005e30 <LCD_WriteData_Color>
    for(i=0; i<9; i++)
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
 8005eda:	2b08      	cmp	r3, #8
 8005edc:	d9f5      	bls.n	8005eca <LCD_DrowSign+0x62>
    }

    /* 画横 */
    LCD_Set_Window(x, y-4, x, y+4);
 8005ede:	88bb      	ldrh	r3, [r7, #4]
 8005ee0:	3b04      	subs	r3, #4
 8005ee2:	b299      	uxth	r1, r3
 8005ee4:	88bb      	ldrh	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	88fa      	ldrh	r2, [r7, #6]
 8005eec:	88f8      	ldrh	r0, [r7, #6]
 8005eee:	f7fc f8fb 	bl	80020e8 <LCD_Set_Window>
    for(i=0; i<9; i++)
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	73fb      	strb	r3, [r7, #15]
 8005ef6:	e006      	b.n	8005f06 <LCD_DrowSign+0x9e>
    {
		LCD_WriteData_Color(color);
 8005ef8:	887b      	ldrh	r3, [r7, #2]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff ff98 	bl	8005e30 <LCD_WriteData_Color>
    for(i=0; i<9; i++)
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	3301      	adds	r3, #1
 8005f04:	73fb      	strb	r3, [r7, #15]
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d9f5      	bls.n	8005ef8 <LCD_DrowSign+0x90>
    }
}
 8005f0c:	bf00      	nop
 8005f0e:	bf00      	nop
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
	...

08005f18 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 8005f18:	b590      	push	{r4, r7, lr}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	4604      	mov	r4, r0
 8005f20:	4608      	mov	r0, r1
 8005f22:	4611      	mov	r1, r2
 8005f24:	461a      	mov	r2, r3
 8005f26:	4623      	mov	r3, r4
 8005f28:	80fb      	strh	r3, [r7, #6]
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	80bb      	strh	r3, [r7, #4]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	70fb      	strb	r3, [r7, #3]
 8005f32:	4613      	mov	r3, r2
 8005f34:	70bb      	strb	r3, [r7, #2]
	uint8_t temp,t1,t;
	uint16_t y0=y;
 8005f36:	88bb      	ldrh	r3, [r7, #4]
 8005f38:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 8005f3a:	78bb      	ldrb	r3, [r7, #2]
 8005f3c:	08db      	lsrs	r3, r3, #3
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	461a      	mov	r2, r3
 8005f42:	78bb      	ldrb	r3, [r7, #2]
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bf14      	ite	ne
 8005f4e:	2301      	movne	r3, #1
 8005f50:	2300      	moveq	r3, #0
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	4413      	add	r3, r2
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	78ba      	ldrb	r2, [r7, #2]
 8005f5a:	0852      	lsrs	r2, r2, #1
 8005f5c:	b2d2      	uxtb	r2, r2
 8005f5e:	fb02 f303 	mul.w	r3, r2, r3
 8005f62:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	3b20      	subs	r3, #32
 8005f68:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	737b      	strb	r3, [r7, #13]
 8005f6e:	e069      	b.n	8006044 <LCD_ShowChar+0x12c>
	{
		if(size==12)temp=ascii_1206[num][t]; 	 	//调用1206字体
 8005f70:	78bb      	ldrb	r3, [r7, #2]
 8005f72:	2b0c      	cmp	r3, #12
 8005f74:	d10b      	bne.n	8005f8e <LCD_ShowChar+0x76>
 8005f76:	78fa      	ldrb	r2, [r7, #3]
 8005f78:	7b79      	ldrb	r1, [r7, #13]
 8005f7a:	4838      	ldr	r0, [pc, #224]	; (800605c <LCD_ShowChar+0x144>)
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4403      	add	r3, r0
 8005f86:	440b      	add	r3, r1
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	73fb      	strb	r3, [r7, #15]
 8005f8c:	e019      	b.n	8005fc2 <LCD_ShowChar+0xaa>
		else if(size==16)temp=ascii_1608[num][t];	//调用1608字体
 8005f8e:	78bb      	ldrb	r3, [r7, #2]
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d108      	bne.n	8005fa6 <LCD_ShowChar+0x8e>
 8005f94:	78fa      	ldrb	r2, [r7, #3]
 8005f96:	7b7b      	ldrb	r3, [r7, #13]
 8005f98:	4931      	ldr	r1, [pc, #196]	; (8006060 <LCD_ShowChar+0x148>)
 8005f9a:	0112      	lsls	r2, r2, #4
 8005f9c:	440a      	add	r2, r1
 8005f9e:	4413      	add	r3, r2
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	73fb      	strb	r3, [r7, #15]
 8005fa4:	e00d      	b.n	8005fc2 <LCD_ShowChar+0xaa>
		else if(size==24)temp=ascii_2412[num][t];	//调用2412字体
 8005fa6:	78bb      	ldrb	r3, [r7, #2]
 8005fa8:	2b18      	cmp	r3, #24
 8005faa:	d150      	bne.n	800604e <LCD_ShowChar+0x136>
 8005fac:	78fa      	ldrb	r2, [r7, #3]
 8005fae:	7b79      	ldrb	r1, [r7, #13]
 8005fb0:	482c      	ldr	r0, [pc, #176]	; (8006064 <LCD_ShowChar+0x14c>)
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	4403      	add	r3, r0
 8005fbc:	440b      	add	r3, r1
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	73bb      	strb	r3, [r7, #14]
 8005fc6:	e035      	b.n	8006034 <LCD_ShowChar+0x11c>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 8005fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	da07      	bge.n	8005fe0 <LCD_ShowChar+0xc8>
 8005fd0:	4b25      	ldr	r3, [pc, #148]	; (8006068 <LCD_ShowChar+0x150>)
 8005fd2:	881a      	ldrh	r2, [r3, #0]
 8005fd4:	88b9      	ldrh	r1, [r7, #4]
 8005fd6:	88fb      	ldrh	r3, [r7, #6]
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fb fe2d 	bl	8001c38 <LCD_Fast_DrawPoint>
 8005fde:	e00a      	b.n	8005ff6 <LCD_ShowChar+0xde>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8005fe0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d106      	bne.n	8005ff6 <LCD_ShowChar+0xde>
 8005fe8:	4b20      	ldr	r3, [pc, #128]	; (800606c <LCD_ShowChar+0x154>)
 8005fea:	881a      	ldrh	r2, [r3, #0]
 8005fec:	88b9      	ldrh	r1, [r7, #4]
 8005fee:	88fb      	ldrh	r3, [r7, #6]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fb fe21 	bl	8001c38 <LCD_Fast_DrawPoint>
			temp<<=1;
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	73fb      	strb	r3, [r7, #15]
			y++;
 8005ffc:	88bb      	ldrh	r3, [r7, #4]
 8005ffe:	3301      	adds	r3, #1
 8006000:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 8006002:	4b1b      	ldr	r3, [pc, #108]	; (8006070 <LCD_ShowChar+0x158>)
 8006004:	885b      	ldrh	r3, [r3, #2]
 8006006:	88ba      	ldrh	r2, [r7, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d222      	bcs.n	8006052 <LCD_ShowChar+0x13a>
			if((y-y0)==size)
 800600c:	88ba      	ldrh	r2, [r7, #4]
 800600e:	897b      	ldrh	r3, [r7, #10]
 8006010:	1ad2      	subs	r2, r2, r3
 8006012:	78bb      	ldrb	r3, [r7, #2]
 8006014:	429a      	cmp	r2, r3
 8006016:	d10a      	bne.n	800602e <LCD_ShowChar+0x116>
			{
				y=y0;
 8006018:	897b      	ldrh	r3, [r7, #10]
 800601a:	80bb      	strh	r3, [r7, #4]
				x++;
 800601c:	88fb      	ldrh	r3, [r7, #6]
 800601e:	3301      	adds	r3, #1
 8006020:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 8006022:	4b13      	ldr	r3, [pc, #76]	; (8006070 <LCD_ShowChar+0x158>)
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	88fa      	ldrh	r2, [r7, #6]
 8006028:	429a      	cmp	r2, r3
 800602a:	d307      	bcc.n	800603c <LCD_ShowChar+0x124>
 800602c:	e012      	b.n	8006054 <LCD_ShowChar+0x13c>
		for(t1=0;t1<8;t1++)
 800602e:	7bbb      	ldrb	r3, [r7, #14]
 8006030:	3301      	adds	r3, #1
 8006032:	73bb      	strb	r3, [r7, #14]
 8006034:	7bbb      	ldrb	r3, [r7, #14]
 8006036:	2b07      	cmp	r3, #7
 8006038:	d9c6      	bls.n	8005fc8 <LCD_ShowChar+0xb0>
 800603a:	e000      	b.n	800603e <LCD_ShowChar+0x126>
				break;
 800603c:	bf00      	nop
	for(t=0;t<csize;t++)
 800603e:	7b7b      	ldrb	r3, [r7, #13]
 8006040:	3301      	adds	r3, #1
 8006042:	737b      	strb	r3, [r7, #13]
 8006044:	7b7a      	ldrb	r2, [r7, #13]
 8006046:	7a7b      	ldrb	r3, [r7, #9]
 8006048:	429a      	cmp	r2, r3
 800604a:	d391      	bcc.n	8005f70 <LCD_ShowChar+0x58>
 800604c:	e002      	b.n	8006054 <LCD_ShowChar+0x13c>
		else return;								//没有的字库
 800604e:	bf00      	nop
 8006050:	e000      	b.n	8006054 <LCD_ShowChar+0x13c>
			if(y>=lcddev.height)return;		//超区域了
 8006052:	bf00      	nop
			}
		}
	}
}
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	bd90      	pop	{r4, r7, pc}
 800605a:	bf00      	nop
 800605c:	0800c96c 	.word	0x0800c96c
 8006060:	0800cde0 	.word	0x0800cde0
 8006064:	0800d3d0 	.word	0x0800d3d0
 8006068:	20000200 	.word	0x20000200
 800606c:	20000000 	.word	0x20000000
 8006070:	200002bc 	.word	0x200002bc

08006074 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 8006074:	b590      	push	{r4, r7, lr}
 8006076:	b087      	sub	sp, #28
 8006078:	af02      	add	r7, sp, #8
 800607a:	4604      	mov	r4, r0
 800607c:	4608      	mov	r0, r1
 800607e:	4611      	mov	r1, r2
 8006080:	461a      	mov	r2, r3
 8006082:	4623      	mov	r3, r4
 8006084:	80fb      	strh	r3, [r7, #6]
 8006086:	4603      	mov	r3, r0
 8006088:	80bb      	strh	r3, [r7, #4]
 800608a:	460b      	mov	r3, r1
 800608c:	807b      	strh	r3, [r7, #2]
 800608e:	4613      	mov	r3, r2
 8006090:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8006096:	887a      	ldrh	r2, [r7, #2]
 8006098:	88fb      	ldrh	r3, [r7, #6]
 800609a:	4413      	add	r3, r2
 800609c:	807b      	strh	r3, [r7, #2]
	height+=y;
 800609e:	883a      	ldrh	r2, [r7, #0]
 80060a0:	88bb      	ldrh	r3, [r7, #4]
 80060a2:	4413      	add	r3, r2
 80060a4:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 80060a6:	e024      	b.n	80060f2 <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 80060a8:	88fa      	ldrh	r2, [r7, #6]
 80060aa:	887b      	ldrh	r3, [r7, #2]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d307      	bcc.n	80060c0 <LCD_ShowString+0x4c>
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	80fb      	strh	r3, [r7, #6]
 80060b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	88bb      	ldrh	r3, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 80060c0:	88ba      	ldrh	r2, [r7, #4]
 80060c2:	883b      	ldrh	r3, [r7, #0]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d21d      	bcs.n	8006104 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	781a      	ldrb	r2, [r3, #0]
 80060cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80060d0:	88b9      	ldrh	r1, [r7, #4]
 80060d2:	88f8      	ldrh	r0, [r7, #6]
 80060d4:	2400      	movs	r4, #0
 80060d6:	9400      	str	r4, [sp, #0]
 80060d8:	f7ff ff1e 	bl	8005f18 <LCD_ShowChar>
        x+=size/2;
 80060dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	4413      	add	r3, r2
 80060ea:	80fb      	strh	r3, [r7, #6]
        p++;
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	3301      	adds	r3, #1
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b7e      	cmp	r3, #126	; 0x7e
 80060f8:	d805      	bhi.n	8006106 <LCD_ShowString+0x92>
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b1f      	cmp	r3, #31
 8006100:	d8d2      	bhi.n	80060a8 <LCD_ShowString+0x34>
    }
}
 8006102:	e000      	b.n	8006106 <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8006104:	bf00      	nop
}
 8006106:	bf00      	nop
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	bd90      	pop	{r4, r7, pc}
	...

08006110 <kai_display>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void kai_display()  //������ʾ
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af02      	add	r7, sp, #8
	POINT_COLOR = BLACK;
 8006116:	4b15      	ldr	r3, [pc, #84]	; (800616c <kai_display+0x5c>)
 8006118:	2200      	movs	r2, #0
 800611a:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(10, 10, lcddev.width, lcddev.height, 16,
 800611c:	4b14      	ldr	r3, [pc, #80]	; (8006170 <kai_display+0x60>)
 800611e:	881a      	ldrh	r2, [r3, #0]
 8006120:	4b13      	ldr	r3, [pc, #76]	; (8006170 <kai_display+0x60>)
 8006122:	885b      	ldrh	r3, [r3, #2]
 8006124:	4913      	ldr	r1, [pc, #76]	; (8006174 <kai_display+0x64>)
 8006126:	9101      	str	r1, [sp, #4]
 8006128:	2110      	movs	r1, #16
 800612a:	9100      	str	r1, [sp, #0]
 800612c:	210a      	movs	r1, #10
 800612e:	200a      	movs	r0, #10
 8006130:	f7ff ffa0 	bl	8006074 <LCD_ShowString>
			(uint8_t*) "Touch Test");
	LCD_ShowString(10, 30, lcddev.width, lcddev.height, 16,
 8006134:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <kai_display+0x60>)
 8006136:	881a      	ldrh	r2, [r3, #0]
 8006138:	4b0d      	ldr	r3, [pc, #52]	; (8006170 <kai_display+0x60>)
 800613a:	885b      	ldrh	r3, [r3, #2]
 800613c:	490e      	ldr	r1, [pc, #56]	; (8006178 <kai_display+0x68>)
 800613e:	9101      	str	r1, [sp, #4]
 8006140:	2110      	movs	r1, #16
 8006142:	9100      	str	r1, [sp, #0]
 8006144:	211e      	movs	r1, #30
 8006146:	200a      	movs	r0, #10
 8006148:	f7ff ff94 	bl	8006074 <LCD_ShowString>
			(uint8_t*) "www.prechin.net");
	LCD_ShowString(10, 50, lcddev.width, lcddev.height, 16,
 800614c:	4b08      	ldr	r3, [pc, #32]	; (8006170 <kai_display+0x60>)
 800614e:	881a      	ldrh	r2, [r3, #0]
 8006150:	4b07      	ldr	r3, [pc, #28]	; (8006170 <kai_display+0x60>)
 8006152:	885b      	ldrh	r3, [r3, #2]
 8006154:	4909      	ldr	r1, [pc, #36]	; (800617c <kai_display+0x6c>)
 8006156:	9101      	str	r1, [sp, #4]
 8006158:	2110      	movs	r1, #16
 800615a:	9100      	str	r1, [sp, #0]
 800615c:	2132      	movs	r1, #50	; 0x32
 800615e:	200a      	movs	r0, #10
 8006160:	f7ff ff88 	bl	8006074 <LCD_ShowString>
			(uint8_t*) "K_UP:Adjust");
}
 8006164:	bf00      	nop
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000200 	.word	0x20000200
 8006170:	200002bc 	.word	0x200002bc
 8006174:	0800c8b4 	.word	0x0800c8b4
 8006178:	0800c8c0 	.word	0x0800c8c0
 800617c:	0800c8d0 	.word	0x0800c8d0

08006180 <display_init>:

void display_init()  //��ʼ����ʾ
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af02      	add	r7, sp, #8
	printf("初始化完成。。。。");
 8006186:	4833      	ldr	r0, [pc, #204]	; (8006254 <display_init+0xd4>)
 8006188:	f004 faf4 	bl	800a774 <iprintf>
	POINT_COLOR = RED;
 800618c:	4b32      	ldr	r3, [pc, #200]	; (8006258 <display_init+0xd8>)
 800618e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006192:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(lcddev.width - 8 * 4, 0, lcddev.width, lcddev.height, 16,
 8006194:	4b31      	ldr	r3, [pc, #196]	; (800625c <display_init+0xdc>)
 8006196:	881b      	ldrh	r3, [r3, #0]
 8006198:	3b20      	subs	r3, #32
 800619a:	b298      	uxth	r0, r3
 800619c:	4b2f      	ldr	r3, [pc, #188]	; (800625c <display_init+0xdc>)
 800619e:	881a      	ldrh	r2, [r3, #0]
 80061a0:	4b2e      	ldr	r3, [pc, #184]	; (800625c <display_init+0xdc>)
 80061a2:	885b      	ldrh	r3, [r3, #2]
 80061a4:	492e      	ldr	r1, [pc, #184]	; (8006260 <display_init+0xe0>)
 80061a6:	9101      	str	r1, [sp, #4]
 80061a8:	2110      	movs	r1, #16
 80061aa:	9100      	str	r1, [sp, #0]
 80061ac:	2100      	movs	r1, #0
 80061ae:	f7ff ff61 	bl	8006074 <LCD_ShowString>
			(uint8_t*) "RST");
	LCD_Fill(120, lcddev.height - 16, 139, lcddev.height, BLUE);
 80061b2:	4b2a      	ldr	r3, [pc, #168]	; (800625c <display_init+0xdc>)
 80061b4:	885b      	ldrh	r3, [r3, #2]
 80061b6:	3b10      	subs	r3, #16
 80061b8:	b299      	uxth	r1, r3
 80061ba:	4b28      	ldr	r3, [pc, #160]	; (800625c <display_init+0xdc>)
 80061bc:	885b      	ldrh	r3, [r3, #2]
 80061be:	221f      	movs	r2, #31
 80061c0:	9200      	str	r2, [sp, #0]
 80061c2:	228b      	movs	r2, #139	; 0x8b
 80061c4:	2078      	movs	r0, #120	; 0x78
 80061c6:	f7ff fd91 	bl	8005cec <LCD_Fill>
	LCD_Fill(140, lcddev.height - 16, 159, lcddev.height, RED);
 80061ca:	4b24      	ldr	r3, [pc, #144]	; (800625c <display_init+0xdc>)
 80061cc:	885b      	ldrh	r3, [r3, #2]
 80061ce:	3b10      	subs	r3, #16
 80061d0:	b299      	uxth	r1, r3
 80061d2:	4b22      	ldr	r3, [pc, #136]	; (800625c <display_init+0xdc>)
 80061d4:	885b      	ldrh	r3, [r3, #2]
 80061d6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80061da:	9200      	str	r2, [sp, #0]
 80061dc:	229f      	movs	r2, #159	; 0x9f
 80061de:	208c      	movs	r0, #140	; 0x8c
 80061e0:	f7ff fd84 	bl	8005cec <LCD_Fill>
	LCD_Fill(160, lcddev.height - 16, 179, lcddev.height, MAGENTA);
 80061e4:	4b1d      	ldr	r3, [pc, #116]	; (800625c <display_init+0xdc>)
 80061e6:	885b      	ldrh	r3, [r3, #2]
 80061e8:	3b10      	subs	r3, #16
 80061ea:	b299      	uxth	r1, r3
 80061ec:	4b1b      	ldr	r3, [pc, #108]	; (800625c <display_init+0xdc>)
 80061ee:	885b      	ldrh	r3, [r3, #2]
 80061f0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80061f4:	9200      	str	r2, [sp, #0]
 80061f6:	22b3      	movs	r2, #179	; 0xb3
 80061f8:	20a0      	movs	r0, #160	; 0xa0
 80061fa:	f7ff fd77 	bl	8005cec <LCD_Fill>
	LCD_Fill(180, lcddev.height - 16, 199, lcddev.height, GREEN);
 80061fe:	4b17      	ldr	r3, [pc, #92]	; (800625c <display_init+0xdc>)
 8006200:	885b      	ldrh	r3, [r3, #2]
 8006202:	3b10      	subs	r3, #16
 8006204:	b299      	uxth	r1, r3
 8006206:	4b15      	ldr	r3, [pc, #84]	; (800625c <display_init+0xdc>)
 8006208:	885b      	ldrh	r3, [r3, #2]
 800620a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800620e:	9200      	str	r2, [sp, #0]
 8006210:	22c7      	movs	r2, #199	; 0xc7
 8006212:	20b4      	movs	r0, #180	; 0xb4
 8006214:	f7ff fd6a 	bl	8005cec <LCD_Fill>
	LCD_Fill(200, lcddev.height - 16, 219, lcddev.height, CYAN);
 8006218:	4b10      	ldr	r3, [pc, #64]	; (800625c <display_init+0xdc>)
 800621a:	885b      	ldrh	r3, [r3, #2]
 800621c:	3b10      	subs	r3, #16
 800621e:	b299      	uxth	r1, r3
 8006220:	4b0e      	ldr	r3, [pc, #56]	; (800625c <display_init+0xdc>)
 8006222:	885b      	ldrh	r3, [r3, #2]
 8006224:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006228:	9200      	str	r2, [sp, #0]
 800622a:	22db      	movs	r2, #219	; 0xdb
 800622c:	20c8      	movs	r0, #200	; 0xc8
 800622e:	f7ff fd5d 	bl	8005cec <LCD_Fill>
	LCD_Fill(220, lcddev.height - 16, 239, lcddev.height, YELLOW);
 8006232:	4b0a      	ldr	r3, [pc, #40]	; (800625c <display_init+0xdc>)
 8006234:	885b      	ldrh	r3, [r3, #2]
 8006236:	3b10      	subs	r3, #16
 8006238:	b299      	uxth	r1, r3
 800623a:	4b08      	ldr	r3, [pc, #32]	; (800625c <display_init+0xdc>)
 800623c:	885b      	ldrh	r3, [r3, #2]
 800623e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8006242:	9200      	str	r2, [sp, #0]
 8006244:	22ef      	movs	r2, #239	; 0xef
 8006246:	20dc      	movs	r0, #220	; 0xdc
 8006248:	f7ff fd50 	bl	8005cec <LCD_Fill>
}
 800624c:	bf00      	nop
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	0800c8dc 	.word	0x0800c8dc
 8006258:	20000200 	.word	0x20000200
 800625c:	200002bc 	.word	0x200002bc
 8006260:	0800c8f8 	.word	0x0800c8f8

08006264 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800626a:	f000 fe91 	bl	8006f90 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800626e:	f000 f84d 	bl	800630c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006272:	f7fb f81b 	bl	80012ac <MX_GPIO_Init>
	MX_FSMC_Init();
 8006276:	f7fa ff3d 	bl	80010f4 <MX_FSMC_Init>
	MX_SPI1_Init();
 800627a:	f000 f8db 	bl	8006434 <MX_SPI1_Init>
	MX_USART1_UART_Init();
 800627e:	f000 fde3 	bl	8006e48 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8006282:	f7fb f8bf 	bl	8001404 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	LCD_Init();
 8006286:	f7fc f8b3 	bl	80023f0 <LCD_Init>
	AT24CXX_Init();
 800628a:	f7fa ff2d 	bl	80010e8 <AT24CXX_Init>
	kai_display();
 800628e:	f7ff ff3f 	bl	8006110 <kai_display>
	HAL_Delay(2000);
 8006292:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006296:	f000 fedd 	bl	8007054 <HAL_Delay>
	LCD_Clear(WHITE);
 800629a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800629e:	f7ff fcd7 	bl	8005c50 <LCD_Clear>
	TOUCH_Init();
 80062a2:	f000 fa71 	bl	8006788 <TOUCH_Init>
	display_init();
 80062a6:	f7ff ff6b 	bl	8006180 <display_init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		TOUCH_Scan();
 80062aa:	f000 fd61 	bl	8006d70 <TOUCH_Scan>

		if ((TouchData.lcdx > lcddev.width - 8 * 8) && (TouchData.lcdy < 16)) //215 = TFT_XMAX - 24
 80062ae:	4b14      	ldr	r3, [pc, #80]	; (8006300 <main+0x9c>)
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	3b3f      	subs	r3, #63	; 0x3f
 80062b4:	4a13      	ldr	r2, [pc, #76]	; (8006304 <main+0xa0>)
 80062b6:	8892      	ldrh	r2, [r2, #4]
 80062b8:	4293      	cmp	r3, r2
 80062ba:	dcf6      	bgt.n	80062aa <main+0x46>
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <main+0xa0>)
 80062be:	88db      	ldrh	r3, [r3, #6]
 80062c0:	2b0f      	cmp	r3, #15
 80062c2:	d8f2      	bhi.n	80062aa <main+0x46>
				{
			LCD_Fill(0, 0, lcddev.width, lcddev.height - 16,
 80062c4:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <main+0x9c>)
 80062c6:	881a      	ldrh	r2, [r3, #0]
 80062c8:	4b0d      	ldr	r3, [pc, #52]	; (8006300 <main+0x9c>)
 80062ca:	885b      	ldrh	r3, [r3, #2]
 80062cc:	3b10      	subs	r3, #16
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80062d4:	9100      	str	r1, [sp, #0]
 80062d6:	2100      	movs	r1, #0
 80062d8:	2000      	movs	r0, #0
 80062da:	f7ff fd07 	bl	8005cec <LCD_Fill>
			WHITE);
			LCD_ShowString(lcddev.width - 8 * 8, 0, lcddev.width, lcddev.height,
 80062de:	4b08      	ldr	r3, [pc, #32]	; (8006300 <main+0x9c>)
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	3b40      	subs	r3, #64	; 0x40
 80062e4:	b298      	uxth	r0, r3
 80062e6:	4b06      	ldr	r3, [pc, #24]	; (8006300 <main+0x9c>)
 80062e8:	881a      	ldrh	r2, [r3, #0]
 80062ea:	4b05      	ldr	r3, [pc, #20]	; (8006300 <main+0x9c>)
 80062ec:	885b      	ldrh	r3, [r3, #2]
 80062ee:	4906      	ldr	r1, [pc, #24]	; (8006308 <main+0xa4>)
 80062f0:	9101      	str	r1, [sp, #4]
 80062f2:	2110      	movs	r1, #16
 80062f4:	9100      	str	r1, [sp, #0]
 80062f6:	2100      	movs	r1, #0
 80062f8:	f7ff febc 	bl	8006074 <LCD_ShowString>
		TOUCH_Scan();
 80062fc:	e7d5      	b.n	80062aa <main+0x46>
 80062fe:	bf00      	nop
 8006300:	200002bc 	.word	0x200002bc
 8006304:	20000324 	.word	0x20000324
 8006308:	0800c8f8 	.word	0x0800c8f8

0800630c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b090      	sub	sp, #64	; 0x40
 8006310:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8006312:	f107 0318 	add.w	r3, r7, #24
 8006316:	2228      	movs	r2, #40	; 0x28
 8006318:	2100      	movs	r1, #0
 800631a:	4618      	mov	r0, r3
 800631c:	f003 fdc2 	bl	8009ea4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8006320:	1d3b      	adds	r3, r7, #4
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
 8006326:	605a      	str	r2, [r3, #4]
 8006328:	609a      	str	r2, [r3, #8]
 800632a:	60da      	str	r2, [r3, #12]
 800632c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800632e:	2301      	movs	r3, #1
 8006330:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006336:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006338:	2300      	movs	r3, #0
 800633a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800633c:	2301      	movs	r3, #1
 800633e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006340:	2302      	movs	r3, #2
 8006342:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006348:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800634a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800634e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006350:	f107 0318 	add.w	r3, r7, #24
 8006354:	4618      	mov	r0, r3
 8006356:	f002 fa63 	bl	8008820 <HAL_RCC_OscConfig>
 800635a:	4603      	mov	r3, r0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d001      	beq.n	8006364 <SystemClock_Config+0x58>
		Error_Handler();
 8006360:	f000 f832 	bl	80063c8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8006364:	230f      	movs	r3, #15
 8006366:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006368:	2302      	movs	r3, #2
 800636a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800636c:	2300      	movs	r3, #0
 800636e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006374:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800637a:	1d3b      	adds	r3, r7, #4
 800637c:	2102      	movs	r1, #2
 800637e:	4618      	mov	r0, r3
 8006380:	f002 fcce 	bl	8008d20 <HAL_RCC_ClockConfig>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <SystemClock_Config+0x82>
		Error_Handler();
 800638a:	f000 f81d 	bl	80063c8 <Error_Handler>
	}
}
 800638e:	bf00      	nop
 8006390:	3740      	adds	r7, #64	; 0x40
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 80063a0:	bf00      	nop
 80063a2:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <__io_putchar+0x2c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0f9      	beq.n	80063a2 <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <__io_putchar+0x2c>)
 80063b4:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

	return ch;
 80063b6:	687b      	ldr	r3, [r7, #4]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	bc80      	pop	{r7}
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40013800 	.word	0x40013800

080063c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80063cc:	b672      	cpsid	i
}
 80063ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80063d0:	e7fe      	b.n	80063d0 <Error_Handler+0x8>
	...

080063d4 <IIC_Init>:
//All rights reserved
//////////////////////////////////////////////////////////////////////////////////

//IIC初始化
void IIC_Init(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;

    __HAL_RCC_GPIOB_CLK_ENABLE();   //使能GPIOB时钟
 80063da:	4b12      	ldr	r3, [pc, #72]	; (8006424 <IIC_Init+0x50>)
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	4a11      	ldr	r2, [pc, #68]	; (8006424 <IIC_Init+0x50>)
 80063e0:	f043 0308 	orr.w	r3, r3, #8
 80063e4:	6193      	str	r3, [r2, #24]
 80063e6:	4b0f      	ldr	r3, [pc, #60]	; (8006424 <IIC_Init+0x50>)
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	607b      	str	r3, [r7, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]

    //PH4,5初始化设置
    GPIO_Initure.Pin=GPIO_PIN_6|GPIO_PIN_7;
 80063f2:	23c0      	movs	r3, #192	; 0xc0
 80063f4:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //推挽输出
 80063f6:	2301      	movs	r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉
 80063fa:	2301      	movs	r3, #1
 80063fc:	613b      	str	r3, [r7, #16]
    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;//高速
 80063fe:	2303      	movs	r3, #3
 8006400:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB,&GPIO_Initure);
 8006402:	f107 0308 	add.w	r3, r7, #8
 8006406:	4619      	mov	r1, r3
 8006408:	4807      	ldr	r0, [pc, #28]	; (8006428 <IIC_Init+0x54>)
 800640a:	f001 f85d 	bl	80074c8 <HAL_GPIO_Init>

    IIC_SDA=1;
 800640e:	4b07      	ldr	r3, [pc, #28]	; (800642c <IIC_Init+0x58>)
 8006410:	2201      	movs	r2, #1
 8006412:	601a      	str	r2, [r3, #0]
    IIC_SCL=1;
 8006414:	4b06      	ldr	r3, [pc, #24]	; (8006430 <IIC_Init+0x5c>)
 8006416:	2201      	movs	r2, #1
 8006418:	601a      	str	r2, [r3, #0]
}
 800641a:	bf00      	nop
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40021000 	.word	0x40021000
 8006428:	40010c00 	.word	0x40010c00
 800642c:	4221819c 	.word	0x4221819c
 8006430:	42218198 	.word	0x42218198

08006434 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8006438:	4b17      	ldr	r3, [pc, #92]	; (8006498 <MX_SPI1_Init+0x64>)
 800643a:	4a18      	ldr	r2, [pc, #96]	; (800649c <MX_SPI1_Init+0x68>)
 800643c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800643e:	4b16      	ldr	r3, [pc, #88]	; (8006498 <MX_SPI1_Init+0x64>)
 8006440:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006444:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006446:	4b14      	ldr	r3, [pc, #80]	; (8006498 <MX_SPI1_Init+0x64>)
 8006448:	2200      	movs	r2, #0
 800644a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800644c:	4b12      	ldr	r3, [pc, #72]	; (8006498 <MX_SPI1_Init+0x64>)
 800644e:	2200      	movs	r2, #0
 8006450:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006452:	4b11      	ldr	r3, [pc, #68]	; (8006498 <MX_SPI1_Init+0x64>)
 8006454:	2200      	movs	r2, #0
 8006456:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006458:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <MX_SPI1_Init+0x64>)
 800645a:	2200      	movs	r2, #0
 800645c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800645e:	4b0e      	ldr	r3, [pc, #56]	; (8006498 <MX_SPI1_Init+0x64>)
 8006460:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006464:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006466:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <MX_SPI1_Init+0x64>)
 8006468:	2218      	movs	r2, #24
 800646a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800646c:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <MX_SPI1_Init+0x64>)
 800646e:	2200      	movs	r2, #0
 8006470:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006472:	4b09      	ldr	r3, [pc, #36]	; (8006498 <MX_SPI1_Init+0x64>)
 8006474:	2200      	movs	r2, #0
 8006476:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006478:	4b07      	ldr	r3, [pc, #28]	; (8006498 <MX_SPI1_Init+0x64>)
 800647a:	2200      	movs	r2, #0
 800647c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800647e:	4b06      	ldr	r3, [pc, #24]	; (8006498 <MX_SPI1_Init+0x64>)
 8006480:	220a      	movs	r2, #10
 8006482:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006484:	4804      	ldr	r0, [pc, #16]	; (8006498 <MX_SPI1_Init+0x64>)
 8006486:	f002 fde5 	bl	8009054 <HAL_SPI_Init>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006490:	f7ff ff9a 	bl	80063c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006494:	bf00      	nop
 8006496:	bd80      	pop	{r7, pc}
 8006498:	200002cc 	.word	0x200002cc
 800649c:	40013000 	.word	0x40013000

080064a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b088      	sub	sp, #32
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064a8:	f107 0310 	add.w	r3, r7, #16
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	605a      	str	r2, [r3, #4]
 80064b2:	609a      	str	r2, [r3, #8]
 80064b4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a1b      	ldr	r2, [pc, #108]	; (8006528 <HAL_SPI_MspInit+0x88>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d12f      	bne.n	8006520 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80064c0:	4b1a      	ldr	r3, [pc, #104]	; (800652c <HAL_SPI_MspInit+0x8c>)
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	4a19      	ldr	r2, [pc, #100]	; (800652c <HAL_SPI_MspInit+0x8c>)
 80064c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064ca:	6193      	str	r3, [r2, #24]
 80064cc:	4b17      	ldr	r3, [pc, #92]	; (800652c <HAL_SPI_MspInit+0x8c>)
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064d8:	4b14      	ldr	r3, [pc, #80]	; (800652c <HAL_SPI_MspInit+0x8c>)
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	4a13      	ldr	r2, [pc, #76]	; (800652c <HAL_SPI_MspInit+0x8c>)
 80064de:	f043 0304 	orr.w	r3, r3, #4
 80064e2:	6193      	str	r3, [r2, #24]
 80064e4:	4b11      	ldr	r3, [pc, #68]	; (800652c <HAL_SPI_MspInit+0x8c>)
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	f003 0304 	and.w	r3, r3, #4
 80064ec:	60bb      	str	r3, [r7, #8]
 80064ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80064f0:	23a0      	movs	r3, #160	; 0xa0
 80064f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064f4:	2302      	movs	r3, #2
 80064f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80064f8:	2303      	movs	r3, #3
 80064fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064fc:	f107 0310 	add.w	r3, r7, #16
 8006500:	4619      	mov	r1, r3
 8006502:	480b      	ldr	r0, [pc, #44]	; (8006530 <HAL_SPI_MspInit+0x90>)
 8006504:	f000 ffe0 	bl	80074c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006508:	2340      	movs	r3, #64	; 0x40
 800650a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006510:	2300      	movs	r3, #0
 8006512:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006514:	f107 0310 	add.w	r3, r7, #16
 8006518:	4619      	mov	r1, r3
 800651a:	4805      	ldr	r0, [pc, #20]	; (8006530 <HAL_SPI_MspInit+0x90>)
 800651c:	f000 ffd4 	bl	80074c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8006520:	bf00      	nop
 8006522:	3720      	adds	r7, #32
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	40013000 	.word	0x40013000
 800652c:	40021000 	.word	0x40021000
 8006530:	40010800 	.word	0x40010800

08006534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800653a:	4b15      	ldr	r3, [pc, #84]	; (8006590 <HAL_MspInit+0x5c>)
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	4a14      	ldr	r2, [pc, #80]	; (8006590 <HAL_MspInit+0x5c>)
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	6193      	str	r3, [r2, #24]
 8006546:	4b12      	ldr	r3, [pc, #72]	; (8006590 <HAL_MspInit+0x5c>)
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	60bb      	str	r3, [r7, #8]
 8006550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006552:	4b0f      	ldr	r3, [pc, #60]	; (8006590 <HAL_MspInit+0x5c>)
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	4a0e      	ldr	r2, [pc, #56]	; (8006590 <HAL_MspInit+0x5c>)
 8006558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800655c:	61d3      	str	r3, [r2, #28]
 800655e:	4b0c      	ldr	r3, [pc, #48]	; (8006590 <HAL_MspInit+0x5c>)
 8006560:	69db      	ldr	r3, [r3, #28]
 8006562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800656a:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <HAL_MspInit+0x60>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	4a04      	ldr	r2, [pc, #16]	; (8006594 <HAL_MspInit+0x60>)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006586:	bf00      	nop
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	bc80      	pop	{r7}
 800658e:	4770      	bx	lr
 8006590:	40021000 	.word	0x40021000
 8006594:	40010000 	.word	0x40010000

08006598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006598:	b480      	push	{r7}
 800659a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800659c:	e7fe      	b.n	800659c <NMI_Handler+0x4>

0800659e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800659e:	b480      	push	{r7}
 80065a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80065a2:	e7fe      	b.n	80065a2 <HardFault_Handler+0x4>

080065a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065a8:	e7fe      	b.n	80065a8 <MemManage_Handler+0x4>

080065aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065aa:	b480      	push	{r7}
 80065ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065ae:	e7fe      	b.n	80065ae <BusFault_Handler+0x4>

080065b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065b4:	e7fe      	b.n	80065b4 <UsageFault_Handler+0x4>

080065b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80065b6:	b480      	push	{r7}
 80065b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80065ba:	bf00      	nop
 80065bc:	46bd      	mov	sp, r7
 80065be:	bc80      	pop	{r7}
 80065c0:	4770      	bx	lr

080065c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065c2:	b480      	push	{r7}
 80065c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065c6:	bf00      	nop
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr

080065ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80065ce:	b480      	push	{r7}
 80065d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80065d2:	bf00      	nop
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr

080065da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065de:	f000 fd1d 	bl	800701c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80065e2:	bf00      	nop
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80065ec:	4802      	ldr	r0, [pc, #8]	; (80065f8 <USART1_IRQHandler+0x10>)
 80065ee:	f003 f897 	bl	8009720 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80065f2:	bf00      	nop
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	2000032c 	.word	0x2000032c

080065fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
	return 1;
 8006600:	2301      	movs	r3, #1
}
 8006602:	4618      	mov	r0, r3
 8006604:	46bd      	mov	sp, r7
 8006606:	bc80      	pop	{r7}
 8006608:	4770      	bx	lr

0800660a <_kill>:

int _kill(int pid, int sig)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006614:	f003 fc1c 	bl	8009e50 <__errno>
 8006618:	4603      	mov	r3, r0
 800661a:	2216      	movs	r2, #22
 800661c:	601a      	str	r2, [r3, #0]
	return -1;
 800661e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006622:	4618      	mov	r0, r3
 8006624:	3708      	adds	r7, #8
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <_exit>:

void _exit (int status)
{
 800662a:	b580      	push	{r7, lr}
 800662c:	b082      	sub	sp, #8
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006632:	f04f 31ff 	mov.w	r1, #4294967295
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7ff ffe7 	bl	800660a <_kill>
	while (1) {}		/* Make sure we hang here */
 800663c:	e7fe      	b.n	800663c <_exit+0x12>

0800663e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b086      	sub	sp, #24
 8006642:	af00      	add	r7, sp, #0
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800664a:	2300      	movs	r3, #0
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	e00a      	b.n	8006666 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006650:	f3af 8000 	nop.w
 8006654:	4601      	mov	r1, r0
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	60ba      	str	r2, [r7, #8]
 800665c:	b2ca      	uxtb	r2, r1
 800665e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	3301      	adds	r3, #1
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	429a      	cmp	r2, r3
 800666c:	dbf0      	blt.n	8006650 <_read+0x12>
	}

return len;
 800666e:	687b      	ldr	r3, [r7, #4]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006684:	2300      	movs	r3, #0
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e009      	b.n	800669e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	60ba      	str	r2, [r7, #8]
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff fe80 	bl	8006398 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	3301      	adds	r3, #1
 800669c:	617b      	str	r3, [r7, #20]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	dbf1      	blt.n	800668a <_write+0x12>
	}
	return len;
 80066a6:	687b      	ldr	r3, [r7, #4]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <_close>:

int _close(int file)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	return -1;
 80066b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066bc:	4618      	mov	r0, r3
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr

080066c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066d6:	605a      	str	r2, [r3, #4]
	return 0;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	bc80      	pop	{r7}
 80066e2:	4770      	bx	lr

080066e4 <_isatty>:

int _isatty(int file)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
	return 1;
 80066ec:	2301      	movs	r3, #1
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bc80      	pop	{r7}
 80066f6:	4770      	bx	lr

080066f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
	return 0;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	bc80      	pop	{r7}
 800670e:	4770      	bx	lr

08006710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006718:	4a14      	ldr	r2, [pc, #80]	; (800676c <_sbrk+0x5c>)
 800671a:	4b15      	ldr	r3, [pc, #84]	; (8006770 <_sbrk+0x60>)
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006724:	4b13      	ldr	r3, [pc, #76]	; (8006774 <_sbrk+0x64>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d102      	bne.n	8006732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800672c:	4b11      	ldr	r3, [pc, #68]	; (8006774 <_sbrk+0x64>)
 800672e:	4a12      	ldr	r2, [pc, #72]	; (8006778 <_sbrk+0x68>)
 8006730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006732:	4b10      	ldr	r3, [pc, #64]	; (8006774 <_sbrk+0x64>)
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4413      	add	r3, r2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	429a      	cmp	r2, r3
 800673e:	d207      	bcs.n	8006750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006740:	f003 fb86 	bl	8009e50 <__errno>
 8006744:	4603      	mov	r3, r0
 8006746:	220c      	movs	r2, #12
 8006748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800674a:	f04f 33ff 	mov.w	r3, #4294967295
 800674e:	e009      	b.n	8006764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006750:	4b08      	ldr	r3, [pc, #32]	; (8006774 <_sbrk+0x64>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006756:	4b07      	ldr	r3, [pc, #28]	; (8006774 <_sbrk+0x64>)
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4413      	add	r3, r2
 800675e:	4a05      	ldr	r2, [pc, #20]	; (8006774 <_sbrk+0x64>)
 8006760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006762:	68fb      	ldr	r3, [r7, #12]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	20010000 	.word	0x20010000
 8006770:	00000400 	.word	0x00000400
 8006774:	20000204 	.word	0x20000204
 8006778:	20000380 	.word	0x20000380

0800677c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006780:	bf00      	nop
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr

08006788 <TOUCH_Init>:

TouchTypeDef TouchData;         //定义用来存储读取到的数据
static PosTypeDef TouchAdj;     //定义一阵数据用来保存校正因数

void TOUCH_Init(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af04      	add	r7, sp, #16
  /* 使用EEPROM来存储校正参数，所以注意之前要初始化 */
  /* 检测是否有校正参数 */
	HAL_I2C_Mem_Read(&hi2c1,ADDR_24CXX_READ,TOUCH_ADJ_ADDR,I2C_MEMADD_SIZE_8BIT,&TouchAdj.posState,sizeof(TouchAdj),0xff);
 800678e:	23ff      	movs	r3, #255	; 0xff
 8006790:	9302      	str	r3, [sp, #8]
 8006792:	2310      	movs	r3, #16
 8006794:	9301      	str	r3, [sp, #4]
 8006796:	4b08      	ldr	r3, [pc, #32]	; (80067b8 <TOUCH_Init+0x30>)
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	2301      	movs	r3, #1
 800679c:	22c8      	movs	r2, #200	; 0xc8
 800679e:	21a1      	movs	r1, #161	; 0xa1
 80067a0:	4806      	ldr	r0, [pc, #24]	; (80067bc <TOUCH_Init+0x34>)
 80067a2:	f001 fa7b 	bl	8007c9c <HAL_I2C_Mem_Read>
 	if(TouchAdj.posState != TOUCH_ADJ_OK)
 80067a6:	4b04      	ldr	r3, [pc, #16]	; (80067b8 <TOUCH_Init+0x30>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b59      	cmp	r3, #89	; 0x59
 80067ac:	d001      	beq.n	80067b2 <TOUCH_Init+0x2a>
  {
		TOUCH_Adjust(); //校正
 80067ae:	f000 f9af 	bl	8006b10 <TOUCH_Adjust>
  }
}
 80067b2:	bf00      	nop
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	20000208 	.word	0x20000208
 80067bc:	20000268 	.word	0x20000268

080067c0 <WR_Cmd>:

uint8_t WR_Cmd(uint8_t cmd)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af02      	add	r7, sp, #8
 80067c6:	4603      	mov	r3, r0
 80067c8:	71fb      	strb	r3, [r7, #7]
	uint8_t Tx_DATA = cmd;
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	73fb      	strb	r3, [r7, #15]
	uint8_t Rx_DATA = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_TransmitReceive(&hspi1,&Tx_DATA,&Rx_DATA,1,500);
 80067d2:	f107 020e 	add.w	r2, r7, #14
 80067d6:	f107 010f 	add.w	r1, r7, #15
 80067da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80067de:	9300      	str	r3, [sp, #0]
 80067e0:	2301      	movs	r3, #1
 80067e2:	4804      	ldr	r0, [pc, #16]	; (80067f4 <WR_Cmd+0x34>)
 80067e4:	f002 fcba 	bl	800915c <HAL_SPI_TransmitReceive>
	
	return Rx_DATA;
 80067e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	200002cc 	.word	0x200002cc

080067f8 <TOUCH_Read_AD>:

//读取X轴或y轴的ADC值
uint16_t TOUCH_Read_AD(uint8_t cmd)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b09a      	sub	sp, #104	; 0x68
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	71fb      	strb	r3, [r7, #7]
  uint8_t i, j;
	uint16_t NUMH,NUML;
	uint16_t NUM[TOUCH_READ_TIMES] = {0};
 8006802:	f107 0308 	add.w	r3, r7, #8
 8006806:	2250      	movs	r2, #80	; 0x50
 8006808:	2100      	movs	r1, #0
 800680a:	4618      	mov	r0, r3
 800680c:	f003 fb4a 	bl	8009ea4 <memset>
	uint16_t temp,value;
	uint32_t totalValue;
	
	/* 读取TOUCH_READ_TIMES次触摸值 */
	for(i=0; i<TOUCH_READ_TIMES; i++)
 8006810:	2300      	movs	r3, #0
 8006812:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006816:	e040      	b.n	800689a <TOUCH_Read_AD+0xa2>
	{
		TOUCH_CS_LOW();	/* 打开片选 */
 8006818:	2200      	movs	r2, #0
 800681a:	2140      	movs	r1, #64	; 0x40
 800681c:	4861      	ldr	r0, [pc, #388]	; (80069a4 <TOUCH_Read_AD+0x1ac>)
 800681e:	f000 ffe7 	bl	80077f0 <HAL_GPIO_WritePin>
		
		WR_Cmd(cmd);
 8006822:	79fb      	ldrb	r3, [r7, #7]
 8006824:	4618      	mov	r0, r3
 8006826:	f7ff ffcb 	bl	80067c0 <WR_Cmd>
		//HAL_Delay(1);	
		NUMH = WR_Cmd(0XFF);
 800682a:	20ff      	movs	r0, #255	; 0xff
 800682c:	f7ff ffc8 	bl	80067c0 <WR_Cmd>
 8006830:	4603      	mov	r3, r0
 8006832:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		NUML = WR_Cmd(0XFF);
 8006836:	20ff      	movs	r0, #255	; 0xff
 8006838:	f7ff ffc2 	bl	80067c0 <WR_Cmd>
 800683c:	4603      	mov	r3, r0
 800683e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		NUM[i] = (NUMH<<8)+ NUML;
 8006842:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	b299      	uxth	r1, r3
 800684a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800684e:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8006852:	440a      	add	r2, r1
 8006854:	b292      	uxth	r2, r2
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800685c:	440b      	add	r3, r1
 800685e:	f823 2c60 	strh.w	r2, [r3, #-96]
		NUM[i] >>= 3;		//高12位有效
 8006862:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800686c:	4413      	add	r3, r2
 800686e:	f833 2c60 	ldrh.w	r2, [r3, #-96]
 8006872:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006876:	08d2      	lsrs	r2, r2, #3
 8006878:	b292      	uxth	r2, r2
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8006880:	440b      	add	r3, r1
 8006882:	f823 2c60 	strh.w	r2, [r3, #-96]
		//printf("NUM[%d] = %d\r\n",i,NUM[i]); 
		TOUCH_CS_HIGH();	/*关闭片选 */
 8006886:	2201      	movs	r2, #1
 8006888:	2140      	movs	r1, #64	; 0x40
 800688a:	4846      	ldr	r0, [pc, #280]	; (80069a4 <TOUCH_Read_AD+0x1ac>)
 800688c:	f000 ffb0 	bl	80077f0 <HAL_GPIO_WritePin>
	for(i=0; i<TOUCH_READ_TIMES; i++)
 8006890:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006894:	3301      	adds	r3, #1
 8006896:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800689a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800689e:	2b27      	cmp	r3, #39	; 0x27
 80068a0:	d9ba      	bls.n	8006818 <TOUCH_Read_AD+0x20>
	}

    /* 滤波处理 */
    /* 首先从大到小排序 */
	for(i=0; i<(TOUCH_READ_TIMES - 1); i++)
 80068a2:	2300      	movs	r3, #0
 80068a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80068a8:	e04a      	b.n	8006940 <TOUCH_Read_AD+0x148>
  {
		for(j=i+1; j<TOUCH_READ_TIMES; j++)
 80068aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80068ae:	3301      	adds	r3, #1
 80068b0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80068b4:	e03b      	b.n	800692e <TOUCH_Read_AD+0x136>
    {
			/* 采样值从大到小排序排序 */
      if(NUM[i] < NUM[j])
 80068b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80068c0:	4413      	add	r3, r2
 80068c2:	f833 2c60 	ldrh.w	r2, [r3, #-96]
 80068c6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80068d0:	440b      	add	r3, r1
 80068d2:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d224      	bcs.n	8006924 <TOUCH_Read_AD+0x12c>
      {
        temp = NUM[i];
 80068da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80068e4:	4413      	add	r3, r2
 80068e6:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 80068ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				NUM[i] = NUM[j];
 80068ee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80068f2:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	f107 0168 	add.w	r1, r7, #104	; 0x68
 80068fc:	440b      	add	r3, r1
 80068fe:	f833 1c60 	ldrh.w	r1, [r3, #-96]
 8006902:	0053      	lsls	r3, r2, #1
 8006904:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8006908:	4413      	add	r3, r2
 800690a:	460a      	mov	r2, r1
 800690c:	f823 2c60 	strh.w	r2, [r3, #-96]
				NUM[j] = temp;
 8006910:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800691a:	4413      	add	r3, r2
 800691c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8006920:	f823 2c60 	strh.w	r2, [r3, #-96]
		for(j=i+1; j<TOUCH_READ_TIMES; j++)
 8006924:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006928:	3301      	adds	r3, #1
 800692a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800692e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006932:	2b27      	cmp	r3, #39	; 0x27
 8006934:	d9bf      	bls.n	80068b6 <TOUCH_Read_AD+0xbe>
	for(i=0; i<(TOUCH_READ_TIMES - 1); i++)
 8006936:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800693a:	3301      	adds	r3, #1
 800693c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006940:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006944:	2b26      	cmp	r3, #38	; 0x26
 8006946:	d9b0      	bls.n	80068aa <TOUCH_Read_AD+0xb2>
      }   
    }       
	}
   
  /* 去掉最大值，去掉最小值，求平均值 */
  j = TOUCH_READ_TIMES - 1;
 8006948:	2327      	movs	r3, #39	; 0x27
 800694a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  totalValue = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	663b      	str	r3, [r7, #96]	; 0x60
  for(i=1; i<j; i++){     //求y的全部值
 8006952:	2301      	movs	r3, #1
 8006954:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006958:	e010      	b.n	800697c <TOUCH_Read_AD+0x184>
    totalValue += NUM[i];
 800695a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8006964:	4413      	add	r3, r2
 8006966:	f833 3c60 	ldrh.w	r3, [r3, #-96]
 800696a:	461a      	mov	r2, r3
 800696c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800696e:	4413      	add	r3, r2
 8006970:	663b      	str	r3, [r7, #96]	; 0x60
  for(i=1; i<j; i++){     //求y的全部值
 8006972:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006976:	3301      	adds	r3, #1
 8006978:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800697c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8006980:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8006984:	429a      	cmp	r2, r3
 8006986:	d3e8      	bcc.n	800695a <TOUCH_Read_AD+0x162>
  }
	//printf("totalValue = %d\r\n",totalValue); 
  value = totalValue/(TOUCH_READ_TIMES - 2);
 8006988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800698a:	085b      	lsrs	r3, r3, #1
 800698c:	4a06      	ldr	r2, [pc, #24]	; (80069a8 <TOUCH_Read_AD+0x1b0>)
 800698e:	fba2 2303 	umull	r2, r3, r2, r3
 8006992:	08db      	lsrs	r3, r3, #3
 8006994:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
  //printf("value = %d\r\n",value);   
  return value;
 8006998:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
}
 800699c:	4618      	mov	r0, r3
 800699e:	3768      	adds	r7, #104	; 0x68
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	40011400 	.word	0x40011400
 80069a8:	6bca1af3 	.word	0x6bca1af3

080069ac <TOUCH_ReadXY>:


uint8_t TOUCH_ReadXY(uint16_t *xValue, uint16_t *yValue)
{   
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
    uint16_t xValue1, yValue1, xValue2, yValue2;

    xValue1 = TOUCH_Read_AD(TOUCH_X_CMD);
 80069b6:	20d0      	movs	r0, #208	; 0xd0
 80069b8:	f7ff ff1e 	bl	80067f8 <TOUCH_Read_AD>
 80069bc:	4603      	mov	r3, r0
 80069be:	81fb      	strh	r3, [r7, #14]
    yValue1 = TOUCH_Read_AD(TOUCH_Y_CMD);
 80069c0:	2090      	movs	r0, #144	; 0x90
 80069c2:	f7ff ff19 	bl	80067f8 <TOUCH_Read_AD>
 80069c6:	4603      	mov	r3, r0
 80069c8:	81bb      	strh	r3, [r7, #12]
    xValue2 = TOUCH_Read_AD(TOUCH_X_CMD);
 80069ca:	20d0      	movs	r0, #208	; 0xd0
 80069cc:	f7ff ff14 	bl	80067f8 <TOUCH_Read_AD>
 80069d0:	4603      	mov	r3, r0
 80069d2:	817b      	strh	r3, [r7, #10]
    yValue2 = TOUCH_Read_AD(TOUCH_Y_CMD);
 80069d4:	2090      	movs	r0, #144	; 0x90
 80069d6:	f7ff ff0f 	bl	80067f8 <TOUCH_Read_AD>
 80069da:	4603      	mov	r3, r0
 80069dc:	813b      	strh	r3, [r7, #8]
    
    /* 查看两个点之间的只采样值差距 */
    if(xValue1 > xValue2)
 80069de:	89fa      	ldrh	r2, [r7, #14]
 80069e0:	897b      	ldrh	r3, [r7, #10]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d906      	bls.n	80069f4 <TOUCH_ReadXY+0x48>
    {
        *xValue = xValue1 - xValue2;
 80069e6:	89fa      	ldrh	r2, [r7, #14]
 80069e8:	897b      	ldrh	r3, [r7, #10]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	801a      	strh	r2, [r3, #0]
 80069f2:	e005      	b.n	8006a00 <TOUCH_ReadXY+0x54>
    }
    else
    {
        *xValue = xValue2 - xValue1;
 80069f4:	897a      	ldrh	r2, [r7, #10]
 80069f6:	89fb      	ldrh	r3, [r7, #14]
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	801a      	strh	r2, [r3, #0]
    }

    if(yValue1 > yValue2)
 8006a00:	89ba      	ldrh	r2, [r7, #12]
 8006a02:	893b      	ldrh	r3, [r7, #8]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d906      	bls.n	8006a16 <TOUCH_ReadXY+0x6a>
    {
        *yValue = yValue1 - yValue2;
 8006a08:	89ba      	ldrh	r2, [r7, #12]
 8006a0a:	893b      	ldrh	r3, [r7, #8]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	801a      	strh	r2, [r3, #0]
 8006a14:	e005      	b.n	8006a22 <TOUCH_ReadXY+0x76>
    }
    else
    {
        *yValue = yValue2 - yValue1;
 8006a16:	893a      	ldrh	r2, [r7, #8]
 8006a18:	89bb      	ldrh	r3, [r7, #12]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	801a      	strh	r2, [r3, #0]
    }
	
    /* 判断采样差值是否在可控范围内 */
	if((*xValue > TOUCH_MAX+0) || (*yValue > TOUCH_MAX+0))  
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	2b14      	cmp	r3, #20
 8006a28:	d803      	bhi.n	8006a32 <TOUCH_ReadXY+0x86>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	2b14      	cmp	r3, #20
 8006a30:	d901      	bls.n	8006a36 <TOUCH_ReadXY+0x8a>
	{
		return 0xFF;
 8006a32:	23ff      	movs	r3, #255	; 0xff
 8006a34:	e026      	b.n	8006a84 <TOUCH_ReadXY+0xd8>
	}

    /* 求平均值 */
    *xValue = (xValue1 + xValue2) / 2;
 8006a36:	89fa      	ldrh	r2, [r7, #14]
 8006a38:	897b      	ldrh	r3, [r7, #10]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	0fda      	lsrs	r2, r3, #31
 8006a3e:	4413      	add	r3, r2
 8006a40:	105b      	asrs	r3, r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	801a      	strh	r2, [r3, #0]
    *yValue = (yValue1 + yValue2) / 2;
 8006a48:	89ba      	ldrh	r2, [r7, #12]
 8006a4a:	893b      	ldrh	r3, [r7, #8]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	0fda      	lsrs	r2, r3, #31
 8006a50:	4413      	add	r3, r2
 8006a52:	105b      	asrs	r3, r3, #1
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	801a      	strh	r2, [r3, #0]

    /* 判断得到的值，是否在取值范围之内 */
    if((*xValue > TOUCH_X_MAX+0) || (*xValue < TOUCH_X_MIN) 
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8006a62:	d80c      	bhi.n	8006a7e <TOUCH_ReadXY+0xd2>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	881b      	ldrh	r3, [r3, #0]
 8006a68:	2b63      	cmp	r3, #99	; 0x63
 8006a6a:	d908      	bls.n	8006a7e <TOUCH_ReadXY+0xd2>
       || (*yValue > TOUCH_Y_MAX+0) || (*yValue < TOUCH_Y_MIN))
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8006a74:	d803      	bhi.n	8006a7e <TOUCH_ReadXY+0xd2>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	881b      	ldrh	r3, [r3, #0]
 8006a7a:	2b63      	cmp	r3, #99	; 0x63
 8006a7c:	d801      	bhi.n	8006a82 <TOUCH_ReadXY+0xd6>
    {                   
        return 0xFF;
 8006a7e:	23ff      	movs	r3, #255	; 0xff
 8006a80:	e000      	b.n	8006a84 <TOUCH_ReadXY+0xd8>
    }
 
    return 0; 
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <TOUCH_ReadAdjust>:

uint8_t TOUCH_ReadAdjust(uint16_t x, uint16_t y, uint16_t *xValue, uint16_t *yValue)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60ba      	str	r2, [r7, #8]
 8006a94:	607b      	str	r3, [r7, #4]
 8006a96:	4603      	mov	r3, r0
 8006a98:	81fb      	strh	r3, [r7, #14]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	81bb      	strh	r3, [r7, #12]
    uint8_t i;
    uint32_t timeCont;

    /* 读取校正点的坐标 */
    LCD_Clear(BACK_COLOR);
 8006a9e:	4b1b      	ldr	r3, [pc, #108]	; (8006b0c <TOUCH_ReadAdjust+0x80>)
 8006aa0:	881b      	ldrh	r3, [r3, #0]
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff f8d4 	bl	8005c50 <LCD_Clear>
    LCD_DrowSign(x, y, RED);
 8006aa8:	89b9      	ldrh	r1, [r7, #12]
 8006aaa:	89fb      	ldrh	r3, [r7, #14]
 8006aac:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff f9d9 	bl	8005e68 <LCD_DrowSign>
    i = 0;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	75fb      	strb	r3, [r7, #23]
    while(1)
    {
        if(!TOUCH_ReadXY(xValue, yValue))
 8006aba:	6879      	ldr	r1, [r7, #4]
 8006abc:	68b8      	ldr	r0, [r7, #8]
 8006abe:	f7ff ff75 	bl	80069ac <TOUCH_ReadXY>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10e      	bne.n	8006ae6 <TOUCH_ReadAdjust+0x5a>
        {
            i++;
 8006ac8:	7dfb      	ldrb	r3, [r7, #23]
 8006aca:	3301      	adds	r3, #1
 8006acc:	75fb      	strb	r3, [r7, #23]
            if(i > 10)         //延时一下，以读取最佳值
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	2b0a      	cmp	r3, #10
 8006ad2:	d908      	bls.n	8006ae6 <TOUCH_ReadAdjust+0x5a>
            {
                LCD_DrowSign(x, y, BACK_COLOR);
 8006ad4:	4b0d      	ldr	r3, [pc, #52]	; (8006b0c <TOUCH_ReadAdjust+0x80>)
 8006ad6:	881a      	ldrh	r2, [r3, #0]
 8006ad8:	89b9      	ldrh	r1, [r7, #12]
 8006ada:	89fb      	ldrh	r3, [r7, #14]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff f9c3 	bl	8005e68 <LCD_DrowSign>
                return 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	e00e      	b.n	8006b04 <TOUCH_ReadAdjust+0x78>
            }
               
        }
		timeCont++;
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	613b      	str	r3, [r7, #16]
        /* 超时退出 */
        if(timeCont > 0xFFFFFFFE)
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af2:	d1e2      	bne.n	8006aba <TOUCH_ReadAdjust+0x2e>
        {   
                LCD_DrowSign(x, y, BACK_COLOR); 
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <TOUCH_ReadAdjust+0x80>)
 8006af6:	881a      	ldrh	r2, [r3, #0]
 8006af8:	89b9      	ldrh	r1, [r7, #12]
 8006afa:	89fb      	ldrh	r3, [r7, #14]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff f9b3 	bl	8005e68 <LCD_DrowSign>
                return 0xFF;
 8006b02:	23ff      	movs	r3, #255	; 0xff
        } 
    }       
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	20000000 	.word	0x20000000

08006b10 <TOUCH_Adjust>:

void TOUCH_Adjust(void)
{
 8006b10:	b590      	push	{r4, r7, lr}
 8006b12:	b08d      	sub	sp, #52	; 0x34
 8006b14:	af04      	add	r7, sp, #16
    uint16_t px[2], py[2], xPot[4], yPot[4];
    float xFactor, yFactor;

    /* 读取第一个点 */
    if(TOUCH_ReadAdjust(LCD_ADJX_MIN, LCD_ADJY_MIN, &xPot[0], &yPot[0]))
 8006b16:	463b      	mov	r3, r7
 8006b18:	f107 0208 	add.w	r2, r7, #8
 8006b1c:	210a      	movs	r1, #10
 8006b1e:	200a      	movs	r0, #10
 8006b20:	f7ff ffb4 	bl	8006a8c <TOUCH_ReadAdjust>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f040 810a 	bne.w	8006d40 <TOUCH_Adjust+0x230>
    {
        return;
    }   
    HAL_Delay(500);
 8006b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b30:	f000 fa90 	bl	8007054 <HAL_Delay>

    /* 读取第二个点 */
    if(TOUCH_ReadAdjust(LCD_ADJX_MIN, LCD_ADJY_MAX, &xPot[1], &yPot[1]))
 8006b34:	4b87      	ldr	r3, [pc, #540]	; (8006d54 <TOUCH_Adjust+0x244>)
 8006b36:	885b      	ldrh	r3, [r3, #2]
 8006b38:	3b0a      	subs	r3, #10
 8006b3a:	b299      	uxth	r1, r3
 8006b3c:	463b      	mov	r3, r7
 8006b3e:	1c98      	adds	r0, r3, #2
 8006b40:	f107 0308 	add.w	r3, r7, #8
 8006b44:	1c9a      	adds	r2, r3, #2
 8006b46:	4603      	mov	r3, r0
 8006b48:	200a      	movs	r0, #10
 8006b4a:	f7ff ff9f 	bl	8006a8c <TOUCH_ReadAdjust>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f040 80f7 	bne.w	8006d44 <TOUCH_Adjust+0x234>
    {
        return;
    }   
		HAL_Delay(500);
 8006b56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b5a:	f000 fa7b 	bl	8007054 <HAL_Delay>

    /* 读取第三个点 */
    if(TOUCH_ReadAdjust(LCD_ADJX_MAX, LCD_ADJY_MIN, &xPot[2], &yPot[2]))
 8006b5e:	4b7d      	ldr	r3, [pc, #500]	; (8006d54 <TOUCH_Adjust+0x244>)
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	3b0a      	subs	r3, #10
 8006b64:	b298      	uxth	r0, r3
 8006b66:	463b      	mov	r3, r7
 8006b68:	1d19      	adds	r1, r3, #4
 8006b6a:	f107 0308 	add.w	r3, r7, #8
 8006b6e:	1d1a      	adds	r2, r3, #4
 8006b70:	460b      	mov	r3, r1
 8006b72:	210a      	movs	r1, #10
 8006b74:	f7ff ff8a 	bl	8006a8c <TOUCH_ReadAdjust>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f040 80e4 	bne.w	8006d48 <TOUCH_Adjust+0x238>
    {
        return;
    }   
    HAL_Delay(500);
 8006b80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b84:	f000 fa66 	bl	8007054 <HAL_Delay>

    /* 读取第四个点 */
    if(TOUCH_ReadAdjust(LCD_ADJX_MAX, LCD_ADJY_MAX, &xPot[3], &yPot[3]))
 8006b88:	4b72      	ldr	r3, [pc, #456]	; (8006d54 <TOUCH_Adjust+0x244>)
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	3b0a      	subs	r3, #10
 8006b8e:	b298      	uxth	r0, r3
 8006b90:	4b70      	ldr	r3, [pc, #448]	; (8006d54 <TOUCH_Adjust+0x244>)
 8006b92:	885b      	ldrh	r3, [r3, #2]
 8006b94:	3b0a      	subs	r3, #10
 8006b96:	b299      	uxth	r1, r3
 8006b98:	463b      	mov	r3, r7
 8006b9a:	1d9c      	adds	r4, r3, #6
 8006b9c:	f107 0308 	add.w	r3, r7, #8
 8006ba0:	1d9a      	adds	r2, r3, #6
 8006ba2:	4623      	mov	r3, r4
 8006ba4:	f7ff ff72 	bl	8006a8c <TOUCH_ReadAdjust>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f040 80ce 	bne.w	8006d4c <TOUCH_Adjust+0x23c>
    {
        return;
    }   
    HAL_Delay(500);
 8006bb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006bb4:	f000 fa4e 	bl	8007054 <HAL_Delay>
    
    /* 处理读取到的四个点的数据，整合成对角的两个点 */
    px[0] = (xPot[0] + xPot[1]) / 2;
 8006bb8:	893b      	ldrh	r3, [r7, #8]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	897b      	ldrh	r3, [r7, #10]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	0fda      	lsrs	r2, r3, #31
 8006bc2:	4413      	add	r3, r2
 8006bc4:	105b      	asrs	r3, r3, #1
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	82bb      	strh	r3, [r7, #20]
    py[0] = (yPot[0] + yPot[2]) / 2;
 8006bca:	883b      	ldrh	r3, [r7, #0]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	88bb      	ldrh	r3, [r7, #4]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	0fda      	lsrs	r2, r3, #31
 8006bd4:	4413      	add	r3, r2
 8006bd6:	105b      	asrs	r3, r3, #1
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	823b      	strh	r3, [r7, #16]
    px[1] = (xPot[3] + xPot[2]) / 2;
 8006bdc:	89fb      	ldrh	r3, [r7, #14]
 8006bde:	461a      	mov	r2, r3
 8006be0:	89bb      	ldrh	r3, [r7, #12]
 8006be2:	4413      	add	r3, r2
 8006be4:	0fda      	lsrs	r2, r3, #31
 8006be6:	4413      	add	r3, r2
 8006be8:	105b      	asrs	r3, r3, #1
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	82fb      	strh	r3, [r7, #22]
    py[1] = (yPot[3] + yPot[1]) / 2;
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	461a      	mov	r2, r3
 8006bf2:	887b      	ldrh	r3, [r7, #2]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	0fda      	lsrs	r2, r3, #31
 8006bf8:	4413      	add	r3, r2
 8006bfa:	105b      	asrs	r3, r3, #1
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	827b      	strh	r3, [r7, #18]

    /* 求出比例因数 */
    xFactor = (float)LCD_ADJ_X / (px[1] - px[0]);
 8006c00:	4b54      	ldr	r3, [pc, #336]	; (8006d54 <TOUCH_Adjust+0x244>)
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	3b14      	subs	r3, #20
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fa f884 	bl	8000d14 <__aeabi_i2f>
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	8afb      	ldrh	r3, [r7, #22]
 8006c10:	461a      	mov	r2, r3
 8006c12:	8abb      	ldrh	r3, [r7, #20]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7fa f87c 	bl	8000d14 <__aeabi_i2f>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4620      	mov	r0, r4
 8006c22:	f7fa f97f 	bl	8000f24 <__aeabi_fdiv>
 8006c26:	4603      	mov	r3, r0
 8006c28:	61fb      	str	r3, [r7, #28]
    yFactor = (float)LCD_ADJ_Y / (py[1] - py[0]);  
 8006c2a:	4b4a      	ldr	r3, [pc, #296]	; (8006d54 <TOUCH_Adjust+0x244>)
 8006c2c:	885b      	ldrh	r3, [r3, #2]
 8006c2e:	3b14      	subs	r3, #20
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7fa f86f 	bl	8000d14 <__aeabi_i2f>
 8006c36:	4604      	mov	r4, r0
 8006c38:	8a7b      	ldrh	r3, [r7, #18]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	8a3b      	ldrh	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7fa f867 	bl	8000d14 <__aeabi_i2f>
 8006c46:	4603      	mov	r3, r0
 8006c48:	4619      	mov	r1, r3
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f7fa f96a 	bl	8000f24 <__aeabi_fdiv>
 8006c50:	4603      	mov	r3, r0
 8006c52:	61bb      	str	r3, [r7, #24]
    
    /* 求出偏移量 */
    TouchAdj.xOffset = (int16_t)LCD_ADJX_MAX - ((float)px[1] * xFactor);
 8006c54:	4b3f      	ldr	r3, [pc, #252]	; (8006d54 <TOUCH_Adjust+0x244>)
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	3b0a      	subs	r3, #10
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	b21b      	sxth	r3, r3
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fa f858 	bl	8000d14 <__aeabi_i2f>
 8006c64:	4604      	mov	r4, r0
 8006c66:	8afb      	ldrh	r3, [r7, #22]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7fa f84f 	bl	8000d0c <__aeabi_ui2f>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	69f9      	ldr	r1, [r7, #28]
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fa f8a2 	bl	8000dbc <__aeabi_fmul>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f7f9 ff93 	bl	8000ba8 <__aeabi_fsub>
 8006c82:	4603      	mov	r3, r0
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fa f9e9 	bl	800105c <__aeabi_f2iz>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	b21a      	sxth	r2, r3
 8006c8e:	4b32      	ldr	r3, [pc, #200]	; (8006d58 <TOUCH_Adjust+0x248>)
 8006c90:	805a      	strh	r2, [r3, #2]
    TouchAdj.yOffset = (int16_t)LCD_ADJY_MAX - ((float)py[1] * yFactor);
 8006c92:	4b30      	ldr	r3, [pc, #192]	; (8006d54 <TOUCH_Adjust+0x244>)
 8006c94:	885b      	ldrh	r3, [r3, #2]
 8006c96:	3b0a      	subs	r3, #10
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	b21b      	sxth	r3, r3
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fa f839 	bl	8000d14 <__aeabi_i2f>
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	8a7b      	ldrh	r3, [r7, #18]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fa f830 	bl	8000d0c <__aeabi_ui2f>
 8006cac:	4603      	mov	r3, r0
 8006cae:	69b9      	ldr	r1, [r7, #24]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fa f883 	bl	8000dbc <__aeabi_fmul>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f7f9 ff74 	bl	8000ba8 <__aeabi_fsub>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fa f9ca 	bl	800105c <__aeabi_f2iz>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	b21a      	sxth	r2, r3
 8006ccc:	4b22      	ldr	r3, [pc, #136]	; (8006d58 <TOUCH_Adjust+0x248>)
 8006cce:	809a      	strh	r2, [r3, #4]

    /* 将比例因数进行数据处理，然后保存 */
    TouchAdj.xFactor = xFactor ;
 8006cd0:	4a21      	ldr	r2, [pc, #132]	; (8006d58 <TOUCH_Adjust+0x248>)
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	6093      	str	r3, [r2, #8]
    TouchAdj.yFactor = yFactor ;
 8006cd6:	4a20      	ldr	r2, [pc, #128]	; (8006d58 <TOUCH_Adjust+0x248>)
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	60d3      	str	r3, [r2, #12]
    printf("TouchAdj.xOffset = %d\r\n",TouchAdj.xOffset);
 8006cdc:	4b1e      	ldr	r3, [pc, #120]	; (8006d58 <TOUCH_Adjust+0x248>)
 8006cde:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	481d      	ldr	r0, [pc, #116]	; (8006d5c <TOUCH_Adjust+0x24c>)
 8006ce6:	f003 fd45 	bl	800a774 <iprintf>
		printf("TouchAdj.yOffset = %d\r\n",TouchAdj.yOffset);
 8006cea:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <TOUCH_Adjust+0x248>)
 8006cec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	481b      	ldr	r0, [pc, #108]	; (8006d60 <TOUCH_Adjust+0x250>)
 8006cf4:	f003 fd3e 	bl	800a774 <iprintf>
		printf("TouchAdj.xFactor = %f\r\n",TouchAdj.xFactor);
 8006cf8:	4b17      	ldr	r3, [pc, #92]	; (8006d58 <TOUCH_Adjust+0x248>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7f9 fbff 	bl	8000500 <__aeabi_f2d>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	4817      	ldr	r0, [pc, #92]	; (8006d64 <TOUCH_Adjust+0x254>)
 8006d08:	f003 fd34 	bl	800a774 <iprintf>
		printf("TouchAdj.yFactor = %f\r\n",TouchAdj.yFactor);
 8006d0c:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <TOUCH_Adjust+0x248>)
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7f9 fbf5 	bl	8000500 <__aeabi_f2d>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4813      	ldr	r0, [pc, #76]	; (8006d68 <TOUCH_Adjust+0x258>)
 8006d1c:	f003 fd2a 	bl	800a774 <iprintf>
		
    TouchAdj.posState = TOUCH_ADJ_OK;
 8006d20:	4b0d      	ldr	r3, [pc, #52]	; (8006d58 <TOUCH_Adjust+0x248>)
 8006d22:	2259      	movs	r2, #89	; 0x59
 8006d24:	701a      	strb	r2, [r3, #0]
   	HAL_I2C_Mem_Write(&hi2c1,ADDR_24CXX_WRITE,TOUCH_ADJ_ADDR,I2C_MEMADD_SIZE_8BIT,&TouchAdj.posState,sizeof(TouchAdj),0xff);
 8006d26:	23ff      	movs	r3, #255	; 0xff
 8006d28:	9302      	str	r3, [sp, #8]
 8006d2a:	2310      	movs	r3, #16
 8006d2c:	9301      	str	r3, [sp, #4]
 8006d2e:	4b0a      	ldr	r3, [pc, #40]	; (8006d58 <TOUCH_Adjust+0x248>)
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	2301      	movs	r3, #1
 8006d34:	22c8      	movs	r2, #200	; 0xc8
 8006d36:	21a0      	movs	r1, #160	; 0xa0
 8006d38:	480c      	ldr	r0, [pc, #48]	; (8006d6c <TOUCH_Adjust+0x25c>)
 8006d3a:	f000 feb5 	bl	8007aa8 <HAL_I2C_Mem_Write>
 8006d3e:	e006      	b.n	8006d4e <TOUCH_Adjust+0x23e>
        return;
 8006d40:	bf00      	nop
 8006d42:	e004      	b.n	8006d4e <TOUCH_Adjust+0x23e>
        return;
 8006d44:	bf00      	nop
 8006d46:	e002      	b.n	8006d4e <TOUCH_Adjust+0x23e>
        return;
 8006d48:	bf00      	nop
 8006d4a:	e000      	b.n	8006d4e <TOUCH_Adjust+0x23e>
        return;
 8006d4c:	bf00      	nop
}
 8006d4e:	3724      	adds	r7, #36	; 0x24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd90      	pop	{r4, r7, pc}
 8006d54:	200002bc 	.word	0x200002bc
 8006d58:	20000208 	.word	0x20000208
 8006d5c:	0800c8fc 	.word	0x0800c8fc
 8006d60:	0800c914 	.word	0x0800c914
 8006d64:	0800c92c 	.word	0x0800c92c
 8006d68:	0800c944 	.word	0x0800c944
 8006d6c:	20000268 	.word	0x20000268

08006d70 <TOUCH_Scan>:


uint8_t TOUCH_Scan(void)
{
 8006d70:	b598      	push	{r3, r4, r7, lr}
 8006d72:	af00      	add	r7, sp, #0
    
    //if(TOUCH_PEN == 0)   //查看是否有触摸
    //{
        if(TOUCH_ReadXY(&TouchData.x, &TouchData.y)) //没有触摸
 8006d74:	4930      	ldr	r1, [pc, #192]	; (8006e38 <TOUCH_Scan+0xc8>)
 8006d76:	4831      	ldr	r0, [pc, #196]	; (8006e3c <TOUCH_Scan+0xcc>)
 8006d78:	f7ff fe18 	bl	80069ac <TOUCH_ReadXY>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <TOUCH_Scan+0x16>
        {
            return 0xFF;    
 8006d82:	23ff      	movs	r3, #255	; 0xff
 8006d84:	e056      	b.n	8006e34 <TOUCH_Scan+0xc4>
        }
        /* 根据物理坐标值，计算出彩屏坐标值 */
        TouchData.lcdx = TouchData.x * TouchAdj.xFactor + TouchAdj.xOffset;
 8006d86:	4b2d      	ldr	r3, [pc, #180]	; (8006e3c <TOUCH_Scan+0xcc>)
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7f9 ffc2 	bl	8000d14 <__aeabi_i2f>
 8006d90:	4602      	mov	r2, r0
 8006d92:	4b2b      	ldr	r3, [pc, #172]	; (8006e40 <TOUCH_Scan+0xd0>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	4619      	mov	r1, r3
 8006d98:	4610      	mov	r0, r2
 8006d9a:	f7fa f80f 	bl	8000dbc <__aeabi_fmul>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	461c      	mov	r4, r3
 8006da2:	4b27      	ldr	r3, [pc, #156]	; (8006e40 <TOUCH_Scan+0xd0>)
 8006da4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7f9 ffb3 	bl	8000d14 <__aeabi_i2f>
 8006dae:	4603      	mov	r3, r0
 8006db0:	4619      	mov	r1, r3
 8006db2:	4620      	mov	r0, r4
 8006db4:	f7f9 fefa 	bl	8000bac <__addsf3>
 8006db8:	4603      	mov	r3, r0
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7fa f974 	bl	80010a8 <__aeabi_f2uiz>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	b29a      	uxth	r2, r3
 8006dc4:	4b1d      	ldr	r3, [pc, #116]	; (8006e3c <TOUCH_Scan+0xcc>)
 8006dc6:	809a      	strh	r2, [r3, #4]
        TouchData.lcdy = TouchData.y * TouchAdj.yFactor + TouchAdj.yOffset;
 8006dc8:	4b1c      	ldr	r3, [pc, #112]	; (8006e3c <TOUCH_Scan+0xcc>)
 8006dca:	885b      	ldrh	r3, [r3, #2]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7f9 ffa1 	bl	8000d14 <__aeabi_i2f>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	4b1a      	ldr	r3, [pc, #104]	; (8006e40 <TOUCH_Scan+0xd0>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4610      	mov	r0, r2
 8006ddc:	f7f9 ffee 	bl	8000dbc <__aeabi_fmul>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461c      	mov	r4, r3
 8006de4:	4b16      	ldr	r3, [pc, #88]	; (8006e40 <TOUCH_Scan+0xd0>)
 8006de6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7f9 ff92 	bl	8000d14 <__aeabi_i2f>
 8006df0:	4603      	mov	r3, r0
 8006df2:	4619      	mov	r1, r3
 8006df4:	4620      	mov	r0, r4
 8006df6:	f7f9 fed9 	bl	8000bac <__addsf3>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fa f953 	bl	80010a8 <__aeabi_f2uiz>
 8006e02:	4603      	mov	r3, r0
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <TOUCH_Scan+0xcc>)
 8006e08:	80da      	strh	r2, [r3, #6]
        //printf("TouchData.lcdx = %d\r\n",TouchData.lcdx);
				//printf("TouchData.lcdy = %d\r\n",TouchData.lcdy);
        /* 查看彩屏坐标值是否超过彩屏大小 */
        if(TouchData.lcdx > lcddev.width)
 8006e0a:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <TOUCH_Scan+0xcc>)
 8006e0c:	889a      	ldrh	r2, [r3, #4]
 8006e0e:	4b0d      	ldr	r3, [pc, #52]	; (8006e44 <TOUCH_Scan+0xd4>)
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d903      	bls.n	8006e1e <TOUCH_Scan+0xae>
        {
            TouchData.lcdx = lcddev.width;
 8006e16:	4b0b      	ldr	r3, [pc, #44]	; (8006e44 <TOUCH_Scan+0xd4>)
 8006e18:	881a      	ldrh	r2, [r3, #0]
 8006e1a:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <TOUCH_Scan+0xcc>)
 8006e1c:	809a      	strh	r2, [r3, #4]
        }
        if(TouchData.lcdy > lcddev.height)
 8006e1e:	4b07      	ldr	r3, [pc, #28]	; (8006e3c <TOUCH_Scan+0xcc>)
 8006e20:	88da      	ldrh	r2, [r3, #6]
 8006e22:	4b08      	ldr	r3, [pc, #32]	; (8006e44 <TOUCH_Scan+0xd4>)
 8006e24:	885b      	ldrh	r3, [r3, #2]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d903      	bls.n	8006e32 <TOUCH_Scan+0xc2>
        {
            TouchData.lcdy = lcddev.height;
 8006e2a:	4b06      	ldr	r3, [pc, #24]	; (8006e44 <TOUCH_Scan+0xd4>)
 8006e2c:	885a      	ldrh	r2, [r3, #2]
 8006e2e:	4b03      	ldr	r3, [pc, #12]	; (8006e3c <TOUCH_Scan+0xcc>)
 8006e30:	80da      	strh	r2, [r3, #6]
        }
        return 0; 
 8006e32:	2300      	movs	r3, #0
    //}
		
		//return 0xFF;       
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	bd98      	pop	{r3, r4, r7, pc}
 8006e38:	20000326 	.word	0x20000326
 8006e3c:	20000324 	.word	0x20000324
 8006e40:	20000208 	.word	0x20000208
 8006e44:	200002bc 	.word	0x200002bc

08006e48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006e4c:	4b11      	ldr	r3, [pc, #68]	; (8006e94 <MX_USART1_UART_Init+0x4c>)
 8006e4e:	4a12      	ldr	r2, [pc, #72]	; (8006e98 <MX_USART1_UART_Init+0x50>)
 8006e50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006e52:	4b10      	ldr	r3, [pc, #64]	; (8006e94 <MX_USART1_UART_Init+0x4c>)
 8006e54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006e58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006e5a:	4b0e      	ldr	r3, [pc, #56]	; (8006e94 <MX_USART1_UART_Init+0x4c>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006e60:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <MX_USART1_UART_Init+0x4c>)
 8006e62:	2200      	movs	r2, #0
 8006e64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006e66:	4b0b      	ldr	r3, [pc, #44]	; (8006e94 <MX_USART1_UART_Init+0x4c>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006e6c:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <MX_USART1_UART_Init+0x4c>)
 8006e6e:	220c      	movs	r2, #12
 8006e70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e72:	4b08      	ldr	r3, [pc, #32]	; (8006e94 <MX_USART1_UART_Init+0x4c>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e78:	4b06      	ldr	r3, [pc, #24]	; (8006e94 <MX_USART1_UART_Init+0x4c>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006e7e:	4805      	ldr	r0, [pc, #20]	; (8006e94 <MX_USART1_UART_Init+0x4c>)
 8006e80:	f002 fc01 	bl	8009686 <HAL_UART_Init>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006e8a:	f7ff fa9d 	bl	80063c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	2000032c 	.word	0x2000032c
 8006e98:	40013800 	.word	0x40013800

08006e9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ea4:	f107 0310 	add.w	r3, r7, #16
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	605a      	str	r2, [r3, #4]
 8006eae:	609a      	str	r2, [r3, #8]
 8006eb0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a20      	ldr	r2, [pc, #128]	; (8006f38 <HAL_UART_MspInit+0x9c>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d139      	bne.n	8006f30 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006ebc:	4b1f      	ldr	r3, [pc, #124]	; (8006f3c <HAL_UART_MspInit+0xa0>)
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	4a1e      	ldr	r2, [pc, #120]	; (8006f3c <HAL_UART_MspInit+0xa0>)
 8006ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ec6:	6193      	str	r3, [r2, #24]
 8006ec8:	4b1c      	ldr	r3, [pc, #112]	; (8006f3c <HAL_UART_MspInit+0xa0>)
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ed0:	60fb      	str	r3, [r7, #12]
 8006ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ed4:	4b19      	ldr	r3, [pc, #100]	; (8006f3c <HAL_UART_MspInit+0xa0>)
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	4a18      	ldr	r2, [pc, #96]	; (8006f3c <HAL_UART_MspInit+0xa0>)
 8006eda:	f043 0304 	orr.w	r3, r3, #4
 8006ede:	6193      	str	r3, [r2, #24]
 8006ee0:	4b16      	ldr	r3, [pc, #88]	; (8006f3c <HAL_UART_MspInit+0xa0>)
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	60bb      	str	r3, [r7, #8]
 8006eea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ef0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006efa:	f107 0310 	add.w	r3, r7, #16
 8006efe:	4619      	mov	r1, r3
 8006f00:	480f      	ldr	r0, [pc, #60]	; (8006f40 <HAL_UART_MspInit+0xa4>)
 8006f02:	f000 fae1 	bl	80074c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f14:	f107 0310 	add.w	r3, r7, #16
 8006f18:	4619      	mov	r1, r3
 8006f1a:	4809      	ldr	r0, [pc, #36]	; (8006f40 <HAL_UART_MspInit+0xa4>)
 8006f1c:	f000 fad4 	bl	80074c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006f20:	2200      	movs	r2, #0
 8006f22:	2100      	movs	r1, #0
 8006f24:	2025      	movs	r0, #37	; 0x25
 8006f26:	f000 f990 	bl	800724a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006f2a:	2025      	movs	r0, #37	; 0x25
 8006f2c:	f000 f9a9 	bl	8007282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006f30:	bf00      	nop
 8006f32:	3720      	adds	r7, #32
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	40013800 	.word	0x40013800
 8006f3c:	40021000 	.word	0x40021000
 8006f40:	40010800 	.word	0x40010800

08006f44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006f44:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006f46:	e003      	b.n	8006f50 <LoopCopyDataInit>

08006f48 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006f48:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006f4a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006f4c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006f4e:	3104      	adds	r1, #4

08006f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006f50:	480a      	ldr	r0, [pc, #40]	; (8006f7c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006f52:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006f54:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006f56:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006f58:	d3f6      	bcc.n	8006f48 <CopyDataInit>
  ldr r2, =_sbss
 8006f5a:	4a0a      	ldr	r2, [pc, #40]	; (8006f84 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006f5c:	e002      	b.n	8006f64 <LoopFillZerobss>

08006f5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006f5e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006f60:	f842 3b04 	str.w	r3, [r2], #4

08006f64 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006f64:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006f66:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006f68:	d3f9      	bcc.n	8006f5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006f6a:	f7ff fc07 	bl	800677c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006f6e:	f002 ff75 	bl	8009e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006f72:	f7ff f977 	bl	8006264 <main>
  bx lr
 8006f76:	4770      	bx	lr
  ldr r3, =_sidata
 8006f78:	0800e52c 	.word	0x0800e52c
  ldr r0, =_sdata
 8006f7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006f80:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8006f84:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8006f88:	20000380 	.word	0x20000380

08006f8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006f8c:	e7fe      	b.n	8006f8c <ADC1_2_IRQHandler>
	...

08006f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f94:	4b08      	ldr	r3, [pc, #32]	; (8006fb8 <HAL_Init+0x28>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a07      	ldr	r2, [pc, #28]	; (8006fb8 <HAL_Init+0x28>)
 8006f9a:	f043 0310 	orr.w	r3, r3, #16
 8006f9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006fa0:	2003      	movs	r0, #3
 8006fa2:	f000 f947 	bl	8007234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	f000 f808 	bl	8006fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006fac:	f7ff fac2 	bl	8006534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40022000 	.word	0x40022000

08006fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006fc4:	4b12      	ldr	r3, [pc, #72]	; (8007010 <HAL_InitTick+0x54>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	4b12      	ldr	r3, [pc, #72]	; (8007014 <HAL_InitTick+0x58>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	4619      	mov	r1, r3
 8006fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 f95f 	bl	800729e <HAL_SYSTICK_Config>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e00e      	b.n	8007008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b0f      	cmp	r3, #15
 8006fee:	d80a      	bhi.n	8007006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff8:	f000 f927 	bl	800724a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ffc:	4a06      	ldr	r2, [pc, #24]	; (8007018 <HAL_InitTick+0x5c>)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	e000      	b.n	8007008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
}
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	20000004 	.word	0x20000004
 8007014:	2000000c 	.word	0x2000000c
 8007018:	20000008 	.word	0x20000008

0800701c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <HAL_IncTick+0x1c>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <HAL_IncTick+0x20>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4413      	add	r3, r2
 800702c:	4a03      	ldr	r2, [pc, #12]	; (800703c <HAL_IncTick+0x20>)
 800702e:	6013      	str	r3, [r2, #0]
}
 8007030:	bf00      	nop
 8007032:	46bd      	mov	sp, r7
 8007034:	bc80      	pop	{r7}
 8007036:	4770      	bx	lr
 8007038:	2000000c 	.word	0x2000000c
 800703c:	2000036c 	.word	0x2000036c

08007040 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007040:	b480      	push	{r7}
 8007042:	af00      	add	r7, sp, #0
  return uwTick;
 8007044:	4b02      	ldr	r3, [pc, #8]	; (8007050 <HAL_GetTick+0x10>)
 8007046:	681b      	ldr	r3, [r3, #0]
}
 8007048:	4618      	mov	r0, r3
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr
 8007050:	2000036c 	.word	0x2000036c

08007054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800705c:	f7ff fff0 	bl	8007040 <HAL_GetTick>
 8007060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706c:	d005      	beq.n	800707a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800706e:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <HAL_Delay+0x44>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	461a      	mov	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4413      	add	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800707a:	bf00      	nop
 800707c:	f7ff ffe0 	bl	8007040 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	429a      	cmp	r2, r3
 800708a:	d8f7      	bhi.n	800707c <HAL_Delay+0x28>
  {
  }
}
 800708c:	bf00      	nop
 800708e:	bf00      	nop
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	2000000c 	.word	0x2000000c

0800709c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070ac:	4b0c      	ldr	r3, [pc, #48]	; (80070e0 <__NVIC_SetPriorityGrouping+0x44>)
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070b8:	4013      	ands	r3, r2
 80070ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80070c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070ce:	4a04      	ldr	r2, [pc, #16]	; (80070e0 <__NVIC_SetPriorityGrouping+0x44>)
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	60d3      	str	r3, [r2, #12]
}
 80070d4:	bf00      	nop
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	bc80      	pop	{r7}
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	e000ed00 	.word	0xe000ed00

080070e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070e8:	4b04      	ldr	r3, [pc, #16]	; (80070fc <__NVIC_GetPriorityGrouping+0x18>)
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	0a1b      	lsrs	r3, r3, #8
 80070ee:	f003 0307 	and.w	r3, r3, #7
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	e000ed00 	.word	0xe000ed00

08007100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	4603      	mov	r3, r0
 8007108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800710a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800710e:	2b00      	cmp	r3, #0
 8007110:	db0b      	blt.n	800712a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	f003 021f 	and.w	r2, r3, #31
 8007118:	4906      	ldr	r1, [pc, #24]	; (8007134 <__NVIC_EnableIRQ+0x34>)
 800711a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800711e:	095b      	lsrs	r3, r3, #5
 8007120:	2001      	movs	r0, #1
 8007122:	fa00 f202 	lsl.w	r2, r0, r2
 8007126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	bc80      	pop	{r7}
 8007132:	4770      	bx	lr
 8007134:	e000e100 	.word	0xe000e100

08007138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	6039      	str	r1, [r7, #0]
 8007142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007148:	2b00      	cmp	r3, #0
 800714a:	db0a      	blt.n	8007162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	b2da      	uxtb	r2, r3
 8007150:	490c      	ldr	r1, [pc, #48]	; (8007184 <__NVIC_SetPriority+0x4c>)
 8007152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007156:	0112      	lsls	r2, r2, #4
 8007158:	b2d2      	uxtb	r2, r2
 800715a:	440b      	add	r3, r1
 800715c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007160:	e00a      	b.n	8007178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	b2da      	uxtb	r2, r3
 8007166:	4908      	ldr	r1, [pc, #32]	; (8007188 <__NVIC_SetPriority+0x50>)
 8007168:	79fb      	ldrb	r3, [r7, #7]
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	3b04      	subs	r3, #4
 8007170:	0112      	lsls	r2, r2, #4
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	440b      	add	r3, r1
 8007176:	761a      	strb	r2, [r3, #24]
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	bc80      	pop	{r7}
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	e000e100 	.word	0xe000e100
 8007188:	e000ed00 	.word	0xe000ed00

0800718c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800718c:	b480      	push	{r7}
 800718e:	b089      	sub	sp, #36	; 0x24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	f1c3 0307 	rsb	r3, r3, #7
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	bf28      	it	cs
 80071aa:	2304      	movcs	r3, #4
 80071ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	3304      	adds	r3, #4
 80071b2:	2b06      	cmp	r3, #6
 80071b4:	d902      	bls.n	80071bc <NVIC_EncodePriority+0x30>
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	3b03      	subs	r3, #3
 80071ba:	e000      	b.n	80071be <NVIC_EncodePriority+0x32>
 80071bc:	2300      	movs	r3, #0
 80071be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071c0:	f04f 32ff 	mov.w	r2, #4294967295
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	fa02 f303 	lsl.w	r3, r2, r3
 80071ca:	43da      	mvns	r2, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	401a      	ands	r2, r3
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071d4:	f04f 31ff 	mov.w	r1, #4294967295
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	fa01 f303 	lsl.w	r3, r1, r3
 80071de:	43d9      	mvns	r1, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071e4:	4313      	orrs	r3, r2
         );
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3724      	adds	r7, #36	; 0x24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bc80      	pop	{r7}
 80071ee:	4770      	bx	lr

080071f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007200:	d301      	bcc.n	8007206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007202:	2301      	movs	r3, #1
 8007204:	e00f      	b.n	8007226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007206:	4a0a      	ldr	r2, [pc, #40]	; (8007230 <SysTick_Config+0x40>)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	3b01      	subs	r3, #1
 800720c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800720e:	210f      	movs	r1, #15
 8007210:	f04f 30ff 	mov.w	r0, #4294967295
 8007214:	f7ff ff90 	bl	8007138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007218:	4b05      	ldr	r3, [pc, #20]	; (8007230 <SysTick_Config+0x40>)
 800721a:	2200      	movs	r2, #0
 800721c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800721e:	4b04      	ldr	r3, [pc, #16]	; (8007230 <SysTick_Config+0x40>)
 8007220:	2207      	movs	r2, #7
 8007222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	e000e010 	.word	0xe000e010

08007234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff ff2d 	bl	800709c <__NVIC_SetPriorityGrouping>
}
 8007242:	bf00      	nop
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800724a:	b580      	push	{r7, lr}
 800724c:	b086      	sub	sp, #24
 800724e:	af00      	add	r7, sp, #0
 8007250:	4603      	mov	r3, r0
 8007252:	60b9      	str	r1, [r7, #8]
 8007254:	607a      	str	r2, [r7, #4]
 8007256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007258:	2300      	movs	r3, #0
 800725a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800725c:	f7ff ff42 	bl	80070e4 <__NVIC_GetPriorityGrouping>
 8007260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	6978      	ldr	r0, [r7, #20]
 8007268:	f7ff ff90 	bl	800718c <NVIC_EncodePriority>
 800726c:	4602      	mov	r2, r0
 800726e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007272:	4611      	mov	r1, r2
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff ff5f 	bl	8007138 <__NVIC_SetPriority>
}
 800727a:	bf00      	nop
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b082      	sub	sp, #8
 8007286:	af00      	add	r7, sp, #0
 8007288:	4603      	mov	r3, r0
 800728a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800728c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff ff35 	bl	8007100 <__NVIC_EnableIRQ>
}
 8007296:	bf00      	nop
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7ff ffa2 	bl	80071f0 <SysTick_Config>
 80072ac:	4603      	mov	r3, r0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
	...

080072b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d005      	beq.n	80072da <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2204      	movs	r2, #4
 80072d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	73fb      	strb	r3, [r7, #15]
 80072d8:	e0d6      	b.n	8007488 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 020e 	bic.w	r2, r2, #14
 80072e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f022 0201 	bic.w	r2, r2, #1
 80072f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	461a      	mov	r2, r3
 8007300:	4b64      	ldr	r3, [pc, #400]	; (8007494 <HAL_DMA_Abort_IT+0x1dc>)
 8007302:	429a      	cmp	r2, r3
 8007304:	d958      	bls.n	80073b8 <HAL_DMA_Abort_IT+0x100>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a63      	ldr	r2, [pc, #396]	; (8007498 <HAL_DMA_Abort_IT+0x1e0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d04f      	beq.n	80073b0 <HAL_DMA_Abort_IT+0xf8>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a61      	ldr	r2, [pc, #388]	; (800749c <HAL_DMA_Abort_IT+0x1e4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d048      	beq.n	80073ac <HAL_DMA_Abort_IT+0xf4>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a60      	ldr	r2, [pc, #384]	; (80074a0 <HAL_DMA_Abort_IT+0x1e8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d040      	beq.n	80073a6 <HAL_DMA_Abort_IT+0xee>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a5e      	ldr	r2, [pc, #376]	; (80074a4 <HAL_DMA_Abort_IT+0x1ec>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d038      	beq.n	80073a0 <HAL_DMA_Abort_IT+0xe8>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a5d      	ldr	r2, [pc, #372]	; (80074a8 <HAL_DMA_Abort_IT+0x1f0>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d030      	beq.n	800739a <HAL_DMA_Abort_IT+0xe2>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a5b      	ldr	r2, [pc, #364]	; (80074ac <HAL_DMA_Abort_IT+0x1f4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d028      	beq.n	8007394 <HAL_DMA_Abort_IT+0xdc>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a53      	ldr	r2, [pc, #332]	; (8007494 <HAL_DMA_Abort_IT+0x1dc>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d020      	beq.n	800738e <HAL_DMA_Abort_IT+0xd6>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a57      	ldr	r2, [pc, #348]	; (80074b0 <HAL_DMA_Abort_IT+0x1f8>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d019      	beq.n	800738a <HAL_DMA_Abort_IT+0xd2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a56      	ldr	r2, [pc, #344]	; (80074b4 <HAL_DMA_Abort_IT+0x1fc>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d012      	beq.n	8007386 <HAL_DMA_Abort_IT+0xce>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a54      	ldr	r2, [pc, #336]	; (80074b8 <HAL_DMA_Abort_IT+0x200>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d00a      	beq.n	8007380 <HAL_DMA_Abort_IT+0xc8>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a53      	ldr	r2, [pc, #332]	; (80074bc <HAL_DMA_Abort_IT+0x204>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d102      	bne.n	800737a <HAL_DMA_Abort_IT+0xc2>
 8007374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007378:	e01b      	b.n	80073b2 <HAL_DMA_Abort_IT+0xfa>
 800737a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800737e:	e018      	b.n	80073b2 <HAL_DMA_Abort_IT+0xfa>
 8007380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007384:	e015      	b.n	80073b2 <HAL_DMA_Abort_IT+0xfa>
 8007386:	2310      	movs	r3, #16
 8007388:	e013      	b.n	80073b2 <HAL_DMA_Abort_IT+0xfa>
 800738a:	2301      	movs	r3, #1
 800738c:	e011      	b.n	80073b2 <HAL_DMA_Abort_IT+0xfa>
 800738e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007392:	e00e      	b.n	80073b2 <HAL_DMA_Abort_IT+0xfa>
 8007394:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007398:	e00b      	b.n	80073b2 <HAL_DMA_Abort_IT+0xfa>
 800739a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800739e:	e008      	b.n	80073b2 <HAL_DMA_Abort_IT+0xfa>
 80073a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073a4:	e005      	b.n	80073b2 <HAL_DMA_Abort_IT+0xfa>
 80073a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073aa:	e002      	b.n	80073b2 <HAL_DMA_Abort_IT+0xfa>
 80073ac:	2310      	movs	r3, #16
 80073ae:	e000      	b.n	80073b2 <HAL_DMA_Abort_IT+0xfa>
 80073b0:	2301      	movs	r3, #1
 80073b2:	4a43      	ldr	r2, [pc, #268]	; (80074c0 <HAL_DMA_Abort_IT+0x208>)
 80073b4:	6053      	str	r3, [r2, #4]
 80073b6:	e057      	b.n	8007468 <HAL_DMA_Abort_IT+0x1b0>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a36      	ldr	r2, [pc, #216]	; (8007498 <HAL_DMA_Abort_IT+0x1e0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d04f      	beq.n	8007462 <HAL_DMA_Abort_IT+0x1aa>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a35      	ldr	r2, [pc, #212]	; (800749c <HAL_DMA_Abort_IT+0x1e4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d048      	beq.n	800745e <HAL_DMA_Abort_IT+0x1a6>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a33      	ldr	r2, [pc, #204]	; (80074a0 <HAL_DMA_Abort_IT+0x1e8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d040      	beq.n	8007458 <HAL_DMA_Abort_IT+0x1a0>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a32      	ldr	r2, [pc, #200]	; (80074a4 <HAL_DMA_Abort_IT+0x1ec>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d038      	beq.n	8007452 <HAL_DMA_Abort_IT+0x19a>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a30      	ldr	r2, [pc, #192]	; (80074a8 <HAL_DMA_Abort_IT+0x1f0>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d030      	beq.n	800744c <HAL_DMA_Abort_IT+0x194>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a2f      	ldr	r2, [pc, #188]	; (80074ac <HAL_DMA_Abort_IT+0x1f4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d028      	beq.n	8007446 <HAL_DMA_Abort_IT+0x18e>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a26      	ldr	r2, [pc, #152]	; (8007494 <HAL_DMA_Abort_IT+0x1dc>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d020      	beq.n	8007440 <HAL_DMA_Abort_IT+0x188>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a2b      	ldr	r2, [pc, #172]	; (80074b0 <HAL_DMA_Abort_IT+0x1f8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d019      	beq.n	800743c <HAL_DMA_Abort_IT+0x184>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a29      	ldr	r2, [pc, #164]	; (80074b4 <HAL_DMA_Abort_IT+0x1fc>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d012      	beq.n	8007438 <HAL_DMA_Abort_IT+0x180>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a28      	ldr	r2, [pc, #160]	; (80074b8 <HAL_DMA_Abort_IT+0x200>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00a      	beq.n	8007432 <HAL_DMA_Abort_IT+0x17a>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a26      	ldr	r2, [pc, #152]	; (80074bc <HAL_DMA_Abort_IT+0x204>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d102      	bne.n	800742c <HAL_DMA_Abort_IT+0x174>
 8007426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800742a:	e01b      	b.n	8007464 <HAL_DMA_Abort_IT+0x1ac>
 800742c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007430:	e018      	b.n	8007464 <HAL_DMA_Abort_IT+0x1ac>
 8007432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007436:	e015      	b.n	8007464 <HAL_DMA_Abort_IT+0x1ac>
 8007438:	2310      	movs	r3, #16
 800743a:	e013      	b.n	8007464 <HAL_DMA_Abort_IT+0x1ac>
 800743c:	2301      	movs	r3, #1
 800743e:	e011      	b.n	8007464 <HAL_DMA_Abort_IT+0x1ac>
 8007440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007444:	e00e      	b.n	8007464 <HAL_DMA_Abort_IT+0x1ac>
 8007446:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800744a:	e00b      	b.n	8007464 <HAL_DMA_Abort_IT+0x1ac>
 800744c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007450:	e008      	b.n	8007464 <HAL_DMA_Abort_IT+0x1ac>
 8007452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007456:	e005      	b.n	8007464 <HAL_DMA_Abort_IT+0x1ac>
 8007458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800745c:	e002      	b.n	8007464 <HAL_DMA_Abort_IT+0x1ac>
 800745e:	2310      	movs	r3, #16
 8007460:	e000      	b.n	8007464 <HAL_DMA_Abort_IT+0x1ac>
 8007462:	2301      	movs	r3, #1
 8007464:	4a17      	ldr	r2, [pc, #92]	; (80074c4 <HAL_DMA_Abort_IT+0x20c>)
 8007466:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747c:	2b00      	cmp	r3, #0
 800747e:	d003      	beq.n	8007488 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	4798      	blx	r3
    } 
  }
  return status;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	40020080 	.word	0x40020080
 8007498:	40020008 	.word	0x40020008
 800749c:	4002001c 	.word	0x4002001c
 80074a0:	40020030 	.word	0x40020030
 80074a4:	40020044 	.word	0x40020044
 80074a8:	40020058 	.word	0x40020058
 80074ac:	4002006c 	.word	0x4002006c
 80074b0:	40020408 	.word	0x40020408
 80074b4:	4002041c 	.word	0x4002041c
 80074b8:	40020430 	.word	0x40020430
 80074bc:	40020444 	.word	0x40020444
 80074c0:	40020400 	.word	0x40020400
 80074c4:	40020000 	.word	0x40020000

080074c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b08b      	sub	sp, #44	; 0x2c
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80074d2:	2300      	movs	r3, #0
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80074d6:	2300      	movs	r3, #0
 80074d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80074da:	e179      	b.n	80077d0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80074dc:	2201      	movs	r2, #1
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	fa02 f303 	lsl.w	r3, r2, r3
 80074e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69fa      	ldr	r2, [r7, #28]
 80074ec:	4013      	ands	r3, r2
 80074ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	f040 8168 	bne.w	80077ca <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	4aa0      	ldr	r2, [pc, #640]	; (8007780 <HAL_GPIO_Init+0x2b8>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d05e      	beq.n	80075c2 <HAL_GPIO_Init+0xfa>
 8007504:	4a9e      	ldr	r2, [pc, #632]	; (8007780 <HAL_GPIO_Init+0x2b8>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d875      	bhi.n	80075f6 <HAL_GPIO_Init+0x12e>
 800750a:	4a9e      	ldr	r2, [pc, #632]	; (8007784 <HAL_GPIO_Init+0x2bc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d058      	beq.n	80075c2 <HAL_GPIO_Init+0xfa>
 8007510:	4a9c      	ldr	r2, [pc, #624]	; (8007784 <HAL_GPIO_Init+0x2bc>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d86f      	bhi.n	80075f6 <HAL_GPIO_Init+0x12e>
 8007516:	4a9c      	ldr	r2, [pc, #624]	; (8007788 <HAL_GPIO_Init+0x2c0>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d052      	beq.n	80075c2 <HAL_GPIO_Init+0xfa>
 800751c:	4a9a      	ldr	r2, [pc, #616]	; (8007788 <HAL_GPIO_Init+0x2c0>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d869      	bhi.n	80075f6 <HAL_GPIO_Init+0x12e>
 8007522:	4a9a      	ldr	r2, [pc, #616]	; (800778c <HAL_GPIO_Init+0x2c4>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d04c      	beq.n	80075c2 <HAL_GPIO_Init+0xfa>
 8007528:	4a98      	ldr	r2, [pc, #608]	; (800778c <HAL_GPIO_Init+0x2c4>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d863      	bhi.n	80075f6 <HAL_GPIO_Init+0x12e>
 800752e:	4a98      	ldr	r2, [pc, #608]	; (8007790 <HAL_GPIO_Init+0x2c8>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d046      	beq.n	80075c2 <HAL_GPIO_Init+0xfa>
 8007534:	4a96      	ldr	r2, [pc, #600]	; (8007790 <HAL_GPIO_Init+0x2c8>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d85d      	bhi.n	80075f6 <HAL_GPIO_Init+0x12e>
 800753a:	2b12      	cmp	r3, #18
 800753c:	d82a      	bhi.n	8007594 <HAL_GPIO_Init+0xcc>
 800753e:	2b12      	cmp	r3, #18
 8007540:	d859      	bhi.n	80075f6 <HAL_GPIO_Init+0x12e>
 8007542:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <HAL_GPIO_Init+0x80>)
 8007544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007548:	080075c3 	.word	0x080075c3
 800754c:	0800759d 	.word	0x0800759d
 8007550:	080075af 	.word	0x080075af
 8007554:	080075f1 	.word	0x080075f1
 8007558:	080075f7 	.word	0x080075f7
 800755c:	080075f7 	.word	0x080075f7
 8007560:	080075f7 	.word	0x080075f7
 8007564:	080075f7 	.word	0x080075f7
 8007568:	080075f7 	.word	0x080075f7
 800756c:	080075f7 	.word	0x080075f7
 8007570:	080075f7 	.word	0x080075f7
 8007574:	080075f7 	.word	0x080075f7
 8007578:	080075f7 	.word	0x080075f7
 800757c:	080075f7 	.word	0x080075f7
 8007580:	080075f7 	.word	0x080075f7
 8007584:	080075f7 	.word	0x080075f7
 8007588:	080075f7 	.word	0x080075f7
 800758c:	080075a5 	.word	0x080075a5
 8007590:	080075b9 	.word	0x080075b9
 8007594:	4a7f      	ldr	r2, [pc, #508]	; (8007794 <HAL_GPIO_Init+0x2cc>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d013      	beq.n	80075c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800759a:	e02c      	b.n	80075f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	623b      	str	r3, [r7, #32]
          break;
 80075a2:	e029      	b.n	80075f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	3304      	adds	r3, #4
 80075aa:	623b      	str	r3, [r7, #32]
          break;
 80075ac:	e024      	b.n	80075f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	3308      	adds	r3, #8
 80075b4:	623b      	str	r3, [r7, #32]
          break;
 80075b6:	e01f      	b.n	80075f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	330c      	adds	r3, #12
 80075be:	623b      	str	r3, [r7, #32]
          break;
 80075c0:	e01a      	b.n	80075f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80075ca:	2304      	movs	r3, #4
 80075cc:	623b      	str	r3, [r7, #32]
          break;
 80075ce:	e013      	b.n	80075f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d105      	bne.n	80075e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80075d8:	2308      	movs	r3, #8
 80075da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	611a      	str	r2, [r3, #16]
          break;
 80075e2:	e009      	b.n	80075f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80075e4:	2308      	movs	r3, #8
 80075e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	69fa      	ldr	r2, [r7, #28]
 80075ec:	615a      	str	r2, [r3, #20]
          break;
 80075ee:	e003      	b.n	80075f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80075f0:	2300      	movs	r3, #0
 80075f2:	623b      	str	r3, [r7, #32]
          break;
 80075f4:	e000      	b.n	80075f8 <HAL_GPIO_Init+0x130>
          break;
 80075f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	2bff      	cmp	r3, #255	; 0xff
 80075fc:	d801      	bhi.n	8007602 <HAL_GPIO_Init+0x13a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	e001      	b.n	8007606 <HAL_GPIO_Init+0x13e>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	3304      	adds	r3, #4
 8007606:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	2bff      	cmp	r3, #255	; 0xff
 800760c:	d802      	bhi.n	8007614 <HAL_GPIO_Init+0x14c>
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	e002      	b.n	800761a <HAL_GPIO_Init+0x152>
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	3b08      	subs	r3, #8
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	210f      	movs	r1, #15
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	fa01 f303 	lsl.w	r3, r1, r3
 8007628:	43db      	mvns	r3, r3
 800762a:	401a      	ands	r2, r3
 800762c:	6a39      	ldr	r1, [r7, #32]
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	fa01 f303 	lsl.w	r3, r1, r3
 8007634:	431a      	orrs	r2, r3
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007642:	2b00      	cmp	r3, #0
 8007644:	f000 80c1 	beq.w	80077ca <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007648:	4b53      	ldr	r3, [pc, #332]	; (8007798 <HAL_GPIO_Init+0x2d0>)
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	4a52      	ldr	r2, [pc, #328]	; (8007798 <HAL_GPIO_Init+0x2d0>)
 800764e:	f043 0301 	orr.w	r3, r3, #1
 8007652:	6193      	str	r3, [r2, #24]
 8007654:	4b50      	ldr	r3, [pc, #320]	; (8007798 <HAL_GPIO_Init+0x2d0>)
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	60bb      	str	r3, [r7, #8]
 800765e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007660:	4a4e      	ldr	r2, [pc, #312]	; (800779c <HAL_GPIO_Init+0x2d4>)
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	089b      	lsrs	r3, r3, #2
 8007666:	3302      	adds	r3, #2
 8007668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800766c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	f003 0303 	and.w	r3, r3, #3
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	220f      	movs	r2, #15
 8007678:	fa02 f303 	lsl.w	r3, r2, r3
 800767c:	43db      	mvns	r3, r3
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	4013      	ands	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a46      	ldr	r2, [pc, #280]	; (80077a0 <HAL_GPIO_Init+0x2d8>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d01f      	beq.n	80076cc <HAL_GPIO_Init+0x204>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	4a45      	ldr	r2, [pc, #276]	; (80077a4 <HAL_GPIO_Init+0x2dc>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d019      	beq.n	80076c8 <HAL_GPIO_Init+0x200>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a44      	ldr	r2, [pc, #272]	; (80077a8 <HAL_GPIO_Init+0x2e0>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d013      	beq.n	80076c4 <HAL_GPIO_Init+0x1fc>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a43      	ldr	r2, [pc, #268]	; (80077ac <HAL_GPIO_Init+0x2e4>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d00d      	beq.n	80076c0 <HAL_GPIO_Init+0x1f8>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a42      	ldr	r2, [pc, #264]	; (80077b0 <HAL_GPIO_Init+0x2e8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d007      	beq.n	80076bc <HAL_GPIO_Init+0x1f4>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	4a41      	ldr	r2, [pc, #260]	; (80077b4 <HAL_GPIO_Init+0x2ec>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d101      	bne.n	80076b8 <HAL_GPIO_Init+0x1f0>
 80076b4:	2305      	movs	r3, #5
 80076b6:	e00a      	b.n	80076ce <HAL_GPIO_Init+0x206>
 80076b8:	2306      	movs	r3, #6
 80076ba:	e008      	b.n	80076ce <HAL_GPIO_Init+0x206>
 80076bc:	2304      	movs	r3, #4
 80076be:	e006      	b.n	80076ce <HAL_GPIO_Init+0x206>
 80076c0:	2303      	movs	r3, #3
 80076c2:	e004      	b.n	80076ce <HAL_GPIO_Init+0x206>
 80076c4:	2302      	movs	r3, #2
 80076c6:	e002      	b.n	80076ce <HAL_GPIO_Init+0x206>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e000      	b.n	80076ce <HAL_GPIO_Init+0x206>
 80076cc:	2300      	movs	r3, #0
 80076ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d0:	f002 0203 	and.w	r2, r2, #3
 80076d4:	0092      	lsls	r2, r2, #2
 80076d6:	4093      	lsls	r3, r2
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80076de:	492f      	ldr	r1, [pc, #188]	; (800779c <HAL_GPIO_Init+0x2d4>)
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	089b      	lsrs	r3, r3, #2
 80076e4:	3302      	adds	r3, #2
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d006      	beq.n	8007706 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80076f8:	4b2f      	ldr	r3, [pc, #188]	; (80077b8 <HAL_GPIO_Init+0x2f0>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	492e      	ldr	r1, [pc, #184]	; (80077b8 <HAL_GPIO_Init+0x2f0>)
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	4313      	orrs	r3, r2
 8007702:	600b      	str	r3, [r1, #0]
 8007704:	e006      	b.n	8007714 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007706:	4b2c      	ldr	r3, [pc, #176]	; (80077b8 <HAL_GPIO_Init+0x2f0>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	43db      	mvns	r3, r3
 800770e:	492a      	ldr	r1, [pc, #168]	; (80077b8 <HAL_GPIO_Init+0x2f0>)
 8007710:	4013      	ands	r3, r2
 8007712:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d006      	beq.n	800772e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8007720:	4b25      	ldr	r3, [pc, #148]	; (80077b8 <HAL_GPIO_Init+0x2f0>)
 8007722:	685a      	ldr	r2, [r3, #4]
 8007724:	4924      	ldr	r1, [pc, #144]	; (80077b8 <HAL_GPIO_Init+0x2f0>)
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	4313      	orrs	r3, r2
 800772a:	604b      	str	r3, [r1, #4]
 800772c:	e006      	b.n	800773c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800772e:	4b22      	ldr	r3, [pc, #136]	; (80077b8 <HAL_GPIO_Init+0x2f0>)
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	43db      	mvns	r3, r3
 8007736:	4920      	ldr	r1, [pc, #128]	; (80077b8 <HAL_GPIO_Init+0x2f0>)
 8007738:	4013      	ands	r3, r2
 800773a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d006      	beq.n	8007756 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007748:	4b1b      	ldr	r3, [pc, #108]	; (80077b8 <HAL_GPIO_Init+0x2f0>)
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	491a      	ldr	r1, [pc, #104]	; (80077b8 <HAL_GPIO_Init+0x2f0>)
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	4313      	orrs	r3, r2
 8007752:	608b      	str	r3, [r1, #8]
 8007754:	e006      	b.n	8007764 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007756:	4b18      	ldr	r3, [pc, #96]	; (80077b8 <HAL_GPIO_Init+0x2f0>)
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	43db      	mvns	r3, r3
 800775e:	4916      	ldr	r1, [pc, #88]	; (80077b8 <HAL_GPIO_Init+0x2f0>)
 8007760:	4013      	ands	r3, r2
 8007762:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d025      	beq.n	80077bc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8007770:	4b11      	ldr	r3, [pc, #68]	; (80077b8 <HAL_GPIO_Init+0x2f0>)
 8007772:	68da      	ldr	r2, [r3, #12]
 8007774:	4910      	ldr	r1, [pc, #64]	; (80077b8 <HAL_GPIO_Init+0x2f0>)
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	4313      	orrs	r3, r2
 800777a:	60cb      	str	r3, [r1, #12]
 800777c:	e025      	b.n	80077ca <HAL_GPIO_Init+0x302>
 800777e:	bf00      	nop
 8007780:	10320000 	.word	0x10320000
 8007784:	10310000 	.word	0x10310000
 8007788:	10220000 	.word	0x10220000
 800778c:	10210000 	.word	0x10210000
 8007790:	10120000 	.word	0x10120000
 8007794:	10110000 	.word	0x10110000
 8007798:	40021000 	.word	0x40021000
 800779c:	40010000 	.word	0x40010000
 80077a0:	40010800 	.word	0x40010800
 80077a4:	40010c00 	.word	0x40010c00
 80077a8:	40011000 	.word	0x40011000
 80077ac:	40011400 	.word	0x40011400
 80077b0:	40011800 	.word	0x40011800
 80077b4:	40011c00 	.word	0x40011c00
 80077b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80077bc:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <HAL_GPIO_Init+0x324>)
 80077be:	68da      	ldr	r2, [r3, #12]
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	43db      	mvns	r3, r3
 80077c4:	4909      	ldr	r1, [pc, #36]	; (80077ec <HAL_GPIO_Init+0x324>)
 80077c6:	4013      	ands	r3, r2
 80077c8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	3301      	adds	r3, #1
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	fa22 f303 	lsr.w	r3, r2, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f47f ae7e 	bne.w	80074dc <HAL_GPIO_Init+0x14>
  }
}
 80077e0:	bf00      	nop
 80077e2:	bf00      	nop
 80077e4:	372c      	adds	r7, #44	; 0x2c
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bc80      	pop	{r7}
 80077ea:	4770      	bx	lr
 80077ec:	40010400 	.word	0x40010400

080077f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	460b      	mov	r3, r1
 80077fa:	807b      	strh	r3, [r7, #2]
 80077fc:	4613      	mov	r3, r2
 80077fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007800:	787b      	ldrb	r3, [r7, #1]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007806:	887a      	ldrh	r2, [r7, #2]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800780c:	e003      	b.n	8007816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800780e:	887b      	ldrh	r3, [r7, #2]
 8007810:	041a      	lsls	r2, r3, #16
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	611a      	str	r2, [r3, #16]
}
 8007816:	bf00      	nop
 8007818:	370c      	adds	r7, #12
 800781a:	46bd      	mov	sp, r7
 800781c:	bc80      	pop	{r7}
 800781e:	4770      	bx	lr

08007820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	e12b      	b.n	8007a8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b00      	cmp	r3, #0
 800783c:	d106      	bne.n	800784c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7f9 fe0a 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2224      	movs	r2, #36	; 0x24
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0201 	bic.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007872:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007882:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007884:	f001 fba0 	bl	8008fc8 <HAL_RCC_GetPCLK1Freq>
 8007888:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	4a81      	ldr	r2, [pc, #516]	; (8007a94 <HAL_I2C_Init+0x274>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d807      	bhi.n	80078a4 <HAL_I2C_Init+0x84>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4a80      	ldr	r2, [pc, #512]	; (8007a98 <HAL_I2C_Init+0x278>)
 8007898:	4293      	cmp	r3, r2
 800789a:	bf94      	ite	ls
 800789c:	2301      	movls	r3, #1
 800789e:	2300      	movhi	r3, #0
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	e006      	b.n	80078b2 <HAL_I2C_Init+0x92>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4a7d      	ldr	r2, [pc, #500]	; (8007a9c <HAL_I2C_Init+0x27c>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	bf94      	ite	ls
 80078ac:	2301      	movls	r3, #1
 80078ae:	2300      	movhi	r3, #0
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e0e7      	b.n	8007a8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	4a78      	ldr	r2, [pc, #480]	; (8007aa0 <HAL_I2C_Init+0x280>)
 80078be:	fba2 2303 	umull	r2, r3, r2, r3
 80078c2:	0c9b      	lsrs	r3, r3, #18
 80078c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	430a      	orrs	r2, r1
 80078d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6a1b      	ldr	r3, [r3, #32]
 80078e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	4a6a      	ldr	r2, [pc, #424]	; (8007a94 <HAL_I2C_Init+0x274>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d802      	bhi.n	80078f4 <HAL_I2C_Init+0xd4>
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	3301      	adds	r3, #1
 80078f2:	e009      	b.n	8007908 <HAL_I2C_Init+0xe8>
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80078fa:	fb02 f303 	mul.w	r3, r2, r3
 80078fe:	4a69      	ldr	r2, [pc, #420]	; (8007aa4 <HAL_I2C_Init+0x284>)
 8007900:	fba2 2303 	umull	r2, r3, r2, r3
 8007904:	099b      	lsrs	r3, r3, #6
 8007906:	3301      	adds	r3, #1
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	6812      	ldr	r2, [r2, #0]
 800790c:	430b      	orrs	r3, r1
 800790e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800791a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	495c      	ldr	r1, [pc, #368]	; (8007a94 <HAL_I2C_Init+0x274>)
 8007924:	428b      	cmp	r3, r1
 8007926:	d819      	bhi.n	800795c <HAL_I2C_Init+0x13c>
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	1e59      	subs	r1, r3, #1
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	fbb1 f3f3 	udiv	r3, r1, r3
 8007936:	1c59      	adds	r1, r3, #1
 8007938:	f640 73fc 	movw	r3, #4092	; 0xffc
 800793c:	400b      	ands	r3, r1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00a      	beq.n	8007958 <HAL_I2C_Init+0x138>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	1e59      	subs	r1, r3, #1
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007950:	3301      	adds	r3, #1
 8007952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007956:	e051      	b.n	80079fc <HAL_I2C_Init+0x1dc>
 8007958:	2304      	movs	r3, #4
 800795a:	e04f      	b.n	80079fc <HAL_I2C_Init+0x1dc>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d111      	bne.n	8007988 <HAL_I2C_Init+0x168>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	1e58      	subs	r0, r3, #1
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6859      	ldr	r1, [r3, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	005b      	lsls	r3, r3, #1
 8007970:	440b      	add	r3, r1
 8007972:	fbb0 f3f3 	udiv	r3, r0, r3
 8007976:	3301      	adds	r3, #1
 8007978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800797c:	2b00      	cmp	r3, #0
 800797e:	bf0c      	ite	eq
 8007980:	2301      	moveq	r3, #1
 8007982:	2300      	movne	r3, #0
 8007984:	b2db      	uxtb	r3, r3
 8007986:	e012      	b.n	80079ae <HAL_I2C_Init+0x18e>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	1e58      	subs	r0, r3, #1
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6859      	ldr	r1, [r3, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	440b      	add	r3, r1
 8007996:	0099      	lsls	r1, r3, #2
 8007998:	440b      	add	r3, r1
 800799a:	fbb0 f3f3 	udiv	r3, r0, r3
 800799e:	3301      	adds	r3, #1
 80079a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	bf0c      	ite	eq
 80079a8:	2301      	moveq	r3, #1
 80079aa:	2300      	movne	r3, #0
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <HAL_I2C_Init+0x196>
 80079b2:	2301      	movs	r3, #1
 80079b4:	e022      	b.n	80079fc <HAL_I2C_Init+0x1dc>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10e      	bne.n	80079dc <HAL_I2C_Init+0x1bc>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	1e58      	subs	r0, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6859      	ldr	r1, [r3, #4]
 80079c6:	460b      	mov	r3, r1
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	440b      	add	r3, r1
 80079cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80079d0:	3301      	adds	r3, #1
 80079d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079da:	e00f      	b.n	80079fc <HAL_I2C_Init+0x1dc>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	1e58      	subs	r0, r3, #1
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6859      	ldr	r1, [r3, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	440b      	add	r3, r1
 80079ea:	0099      	lsls	r1, r3, #2
 80079ec:	440b      	add	r3, r1
 80079ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80079f2:	3301      	adds	r3, #1
 80079f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079fc:	6879      	ldr	r1, [r7, #4]
 80079fe:	6809      	ldr	r1, [r1, #0]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69da      	ldr	r2, [r3, #28]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	431a      	orrs	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007a2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	6911      	ldr	r1, [r2, #16]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	68d2      	ldr	r2, [r2, #12]
 8007a36:	4311      	orrs	r1, r2
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6812      	ldr	r2, [r2, #0]
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	695a      	ldr	r2, [r3, #20]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	431a      	orrs	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f042 0201 	orr.w	r2, r2, #1
 8007a6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2220      	movs	r2, #32
 8007a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	000186a0 	.word	0x000186a0
 8007a98:	001e847f 	.word	0x001e847f
 8007a9c:	003d08ff 	.word	0x003d08ff
 8007aa0:	431bde83 	.word	0x431bde83
 8007aa4:	10624dd3 	.word	0x10624dd3

08007aa8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b088      	sub	sp, #32
 8007aac:	af02      	add	r7, sp, #8
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	4608      	mov	r0, r1
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	817b      	strh	r3, [r7, #10]
 8007aba:	460b      	mov	r3, r1
 8007abc:	813b      	strh	r3, [r7, #8]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ac2:	f7ff fabd 	bl	8007040 <HAL_GetTick>
 8007ac6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b20      	cmp	r3, #32
 8007ad2:	f040 80d9 	bne.w	8007c88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	2319      	movs	r3, #25
 8007adc:	2201      	movs	r2, #1
 8007ade:	496d      	ldr	r1, [pc, #436]	; (8007c94 <HAL_I2C_Mem_Write+0x1ec>)
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 fcc1 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007aec:	2302      	movs	r3, #2
 8007aee:	e0cc      	b.n	8007c8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_I2C_Mem_Write+0x56>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e0c5      	b.n	8007c8a <HAL_I2C_Mem_Write+0x1e2>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d007      	beq.n	8007b24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f042 0201 	orr.w	r2, r2, #1
 8007b22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2221      	movs	r2, #33	; 0x21
 8007b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2240      	movs	r2, #64	; 0x40
 8007b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6a3a      	ldr	r2, [r7, #32]
 8007b4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4a4d      	ldr	r2, [pc, #308]	; (8007c98 <HAL_I2C_Mem_Write+0x1f0>)
 8007b64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b66:	88f8      	ldrh	r0, [r7, #6]
 8007b68:	893a      	ldrh	r2, [r7, #8]
 8007b6a:	8979      	ldrh	r1, [r7, #10]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	4603      	mov	r3, r0
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f000 faf8 	bl	800816c <I2C_RequestMemoryWrite>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d052      	beq.n	8007c28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e081      	b.n	8007c8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f000 fd42 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00d      	beq.n	8007bb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	2b04      	cmp	r3, #4
 8007b9c:	d107      	bne.n	8007bae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e06b      	b.n	8007c8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	781a      	ldrb	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	f003 0304 	and.w	r3, r3, #4
 8007bec:	2b04      	cmp	r3, #4
 8007bee:	d11b      	bne.n	8007c28 <HAL_I2C_Mem_Write+0x180>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d017      	beq.n	8007c28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	781a      	ldrb	r2, [r3, #0]
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c12:	3b01      	subs	r3, #1
 8007c14:	b29a      	uxth	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	3b01      	subs	r3, #1
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1aa      	bne.n	8007b86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	f000 fd2e 	bl	8008696 <I2C_WaitOnBTFFlagUntilTimeout>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00d      	beq.n	8007c5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c44:	2b04      	cmp	r3, #4
 8007c46:	d107      	bne.n	8007c58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e016      	b.n	8007c8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2220      	movs	r2, #32
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007c84:	2300      	movs	r3, #0
 8007c86:	e000      	b.n	8007c8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007c88:	2302      	movs	r3, #2
  }
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3718      	adds	r7, #24
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	00100002 	.word	0x00100002
 8007c98:	ffff0000 	.word	0xffff0000

08007c9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b08c      	sub	sp, #48	; 0x30
 8007ca0:	af02      	add	r7, sp, #8
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	461a      	mov	r2, r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	817b      	strh	r3, [r7, #10]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	813b      	strh	r3, [r7, #8]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007cba:	f7ff f9c1 	bl	8007040 <HAL_GetTick>
 8007cbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b20      	cmp	r3, #32
 8007cca:	f040 8244 	bne.w	8008156 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	2319      	movs	r3, #25
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	4982      	ldr	r1, [pc, #520]	; (8007ee0 <HAL_I2C_Mem_Read+0x244>)
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 fbc5 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d001      	beq.n	8007ce8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e237      	b.n	8008158 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d101      	bne.n	8007cf6 <HAL_I2C_Mem_Read+0x5a>
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e230      	b.n	8008158 <HAL_I2C_Mem_Read+0x4bc>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0301 	and.w	r3, r3, #1
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d007      	beq.n	8007d1c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f042 0201 	orr.w	r2, r2, #1
 8007d1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2222      	movs	r2, #34	; 0x22
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2240      	movs	r2, #64	; 0x40
 8007d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007d4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4a62      	ldr	r2, [pc, #392]	; (8007ee4 <HAL_I2C_Mem_Read+0x248>)
 8007d5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d5e:	88f8      	ldrh	r0, [r7, #6]
 8007d60:	893a      	ldrh	r2, [r7, #8]
 8007d62:	8979      	ldrh	r1, [r7, #10]
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	9301      	str	r3, [sp, #4]
 8007d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f000 fa92 	bl	8008298 <I2C_RequestMemoryRead>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e1ec      	b.n	8008158 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d113      	bne.n	8007dae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d86:	2300      	movs	r3, #0
 8007d88:	61fb      	str	r3, [r7, #28]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	61fb      	str	r3, [r7, #28]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	61fb      	str	r3, [r7, #28]
 8007d9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	e1c0      	b.n	8008130 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d11e      	bne.n	8007df4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dc4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007dc6:	b672      	cpsid	i
}
 8007dc8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dca:	2300      	movs	r3, #0
 8007dcc:	61bb      	str	r3, [r7, #24]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	695b      	ldr	r3, [r3, #20]
 8007dd4:	61bb      	str	r3, [r7, #24]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	699b      	ldr	r3, [r3, #24]
 8007ddc:	61bb      	str	r3, [r7, #24]
 8007dde:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007df0:	b662      	cpsie	i
}
 8007df2:	e035      	b.n	8007e60 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d11e      	bne.n	8007e3a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e0c:	b672      	cpsid	i
}
 8007e0e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e10:	2300      	movs	r3, #0
 8007e12:	617b      	str	r3, [r7, #20]
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	617b      	str	r3, [r7, #20]
 8007e24:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e34:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007e36:	b662      	cpsie	i
}
 8007e38:	e012      	b.n	8007e60 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e48:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	613b      	str	r3, [r7, #16]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	695b      	ldr	r3, [r3, #20]
 8007e54:	613b      	str	r3, [r7, #16]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	613b      	str	r3, [r7, #16]
 8007e5e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8007e60:	e166      	b.n	8008130 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	f200 811f 	bhi.w	80080aa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d123      	bne.n	8007ebc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e76:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 fc4d 	bl	8008718 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e167      	b.n	8008158 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691a      	ldr	r2, [r3, #16]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	b2d2      	uxtb	r2, r2
 8007e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	1c5a      	adds	r2, r3, #1
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007eba:	e139      	b.n	8008130 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d152      	bne.n	8007f6a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	2200      	movs	r2, #0
 8007ecc:	4906      	ldr	r1, [pc, #24]	; (8007ee8 <HAL_I2C_Mem_Read+0x24c>)
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f000 faca 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d008      	beq.n	8007eec <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e13c      	b.n	8008158 <HAL_I2C_Mem_Read+0x4bc>
 8007ede:	bf00      	nop
 8007ee0:	00100002 	.word	0x00100002
 8007ee4:	ffff0000 	.word	0xffff0000
 8007ee8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007eec:	b672      	cpsid	i
}
 8007eee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007efe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	691a      	ldr	r2, [r3, #16]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	b2d2      	uxtb	r2, r2
 8007f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	1c5a      	adds	r2, r3, #1
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007f32:	b662      	cpsie	i
}
 8007f34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	691a      	ldr	r2, [r3, #16]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f40:	b2d2      	uxtb	r2, r2
 8007f42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	1c5a      	adds	r2, r3, #1
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f52:	3b01      	subs	r3, #1
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f68:	e0e2      	b.n	8008130 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f70:	2200      	movs	r2, #0
 8007f72:	497b      	ldr	r1, [pc, #492]	; (8008160 <HAL_I2C_Mem_Read+0x4c4>)
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f000 fa77 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e0e9      	b.n	8008158 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f92:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f94:	b672      	cpsid	i
}
 8007f96:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	691a      	ldr	r2, [r3, #16]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	b2d2      	uxtb	r2, r2
 8007fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	3b01      	subs	r3, #1
 8007fc4:	b29a      	uxth	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007fca:	4b66      	ldr	r3, [pc, #408]	; (8008164 <HAL_I2C_Mem_Read+0x4c8>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	08db      	lsrs	r3, r3, #3
 8007fd0:	4a65      	ldr	r2, [pc, #404]	; (8008168 <HAL_I2C_Mem_Read+0x4cc>)
 8007fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd6:	0a1a      	lsrs	r2, r3, #8
 8007fd8:	4613      	mov	r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	4413      	add	r3, r2
 8007fde:	00da      	lsls	r2, r3, #3
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8007fe4:	6a3b      	ldr	r3, [r7, #32]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d118      	bne.n	8008022 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2220      	movs	r2, #32
 8007ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800a:	f043 0220 	orr.w	r2, r3, #32
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008012:	b662      	cpsie	i
}
 8008014:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	e09a      	b.n	8008158 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	f003 0304 	and.w	r3, r3, #4
 800802c:	2b04      	cmp	r3, #4
 800802e:	d1d9      	bne.n	8007fe4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800803e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	691a      	ldr	r2, [r3, #16]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804a:	b2d2      	uxtb	r2, r2
 800804c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800805c:	3b01      	subs	r3, #1
 800805e:	b29a      	uxth	r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008068:	b29b      	uxth	r3, r3
 800806a:	3b01      	subs	r3, #1
 800806c:	b29a      	uxth	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008072:	b662      	cpsie	i
}
 8008074:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	691a      	ldr	r2, [r3, #16]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	b2d2      	uxtb	r2, r2
 8008082:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	1c5a      	adds	r2, r3, #1
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008092:	3b01      	subs	r3, #1
 8008094:	b29a      	uxth	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800809e:	b29b      	uxth	r3, r3
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080a8:	e042      	b.n	8008130 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 fb32 	bl	8008718 <I2C_WaitOnRXNEFlagUntilTimeout>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e04c      	b.n	8008158 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	691a      	ldr	r2, [r3, #16]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c8:	b2d2      	uxtb	r2, r2
 80080ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29a      	uxth	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	f003 0304 	and.w	r3, r3, #4
 80080fa:	2b04      	cmp	r3, #4
 80080fc:	d118      	bne.n	8008130 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	691a      	ldr	r2, [r3, #16]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008108:	b2d2      	uxtb	r2, r2
 800810a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008110:	1c5a      	adds	r2, r3, #1
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800811a:	3b01      	subs	r3, #1
 800811c:	b29a      	uxth	r2, r3
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008126:	b29b      	uxth	r3, r3
 8008128:	3b01      	subs	r3, #1
 800812a:	b29a      	uxth	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008134:	2b00      	cmp	r3, #0
 8008136:	f47f ae94 	bne.w	8007e62 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2220      	movs	r2, #32
 800813e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008152:	2300      	movs	r3, #0
 8008154:	e000      	b.n	8008158 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8008156:	2302      	movs	r3, #2
  }
}
 8008158:	4618      	mov	r0, r3
 800815a:	3728      	adds	r7, #40	; 0x28
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	00010004 	.word	0x00010004
 8008164:	20000004 	.word	0x20000004
 8008168:	14f8b589 	.word	0x14f8b589

0800816c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af02      	add	r7, sp, #8
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	4608      	mov	r0, r1
 8008176:	4611      	mov	r1, r2
 8008178:	461a      	mov	r2, r3
 800817a:	4603      	mov	r3, r0
 800817c:	817b      	strh	r3, [r7, #10]
 800817e:	460b      	mov	r3, r1
 8008180:	813b      	strh	r3, [r7, #8]
 8008182:	4613      	mov	r3, r2
 8008184:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008194:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	2200      	movs	r2, #0
 800819e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 f960 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00d      	beq.n	80081ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081bc:	d103      	bne.n	80081c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80081c6:	2303      	movs	r3, #3
 80081c8:	e05f      	b.n	800828a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081ca:	897b      	ldrh	r3, [r7, #10]
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	461a      	mov	r2, r3
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80081d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	6a3a      	ldr	r2, [r7, #32]
 80081de:	492d      	ldr	r1, [pc, #180]	; (8008294 <I2C_RequestMemoryWrite+0x128>)
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 f998 	bl	8008516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	e04c      	b.n	800828a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081f0:	2300      	movs	r3, #0
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008208:	6a39      	ldr	r1, [r7, #32]
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 fa02 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00d      	beq.n	8008232 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	2b04      	cmp	r3, #4
 800821c:	d107      	bne.n	800822e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800822c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e02b      	b.n	800828a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008232:	88fb      	ldrh	r3, [r7, #6]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d105      	bne.n	8008244 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008238:	893b      	ldrh	r3, [r7, #8]
 800823a:	b2da      	uxtb	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	611a      	str	r2, [r3, #16]
 8008242:	e021      	b.n	8008288 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008244:	893b      	ldrh	r3, [r7, #8]
 8008246:	0a1b      	lsrs	r3, r3, #8
 8008248:	b29b      	uxth	r3, r3
 800824a:	b2da      	uxtb	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008254:	6a39      	ldr	r1, [r7, #32]
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f000 f9dc 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00d      	beq.n	800827e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008266:	2b04      	cmp	r3, #4
 8008268:	d107      	bne.n	800827a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008278:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e005      	b.n	800828a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800827e:	893b      	ldrh	r3, [r7, #8]
 8008280:	b2da      	uxtb	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	00010002 	.word	0x00010002

08008298 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b088      	sub	sp, #32
 800829c:	af02      	add	r7, sp, #8
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	4608      	mov	r0, r1
 80082a2:	4611      	mov	r1, r2
 80082a4:	461a      	mov	r2, r3
 80082a6:	4603      	mov	r3, r0
 80082a8:	817b      	strh	r3, [r7, #10]
 80082aa:	460b      	mov	r3, r1
 80082ac:	813b      	strh	r3, [r7, #8]
 80082ae:	4613      	mov	r3, r2
 80082b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	2200      	movs	r2, #0
 80082da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f000 f8c2 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d00d      	beq.n	8008306 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082f8:	d103      	bne.n	8008302 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008300:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008302:	2303      	movs	r3, #3
 8008304:	e0aa      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008306:	897b      	ldrh	r3, [r7, #10]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	461a      	mov	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008314:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	6a3a      	ldr	r2, [r7, #32]
 800831a:	4952      	ldr	r1, [pc, #328]	; (8008464 <I2C_RequestMemoryRead+0x1cc>)
 800831c:	68f8      	ldr	r0, [r7, #12]
 800831e:	f000 f8fa 	bl	8008516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d001      	beq.n	800832c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e097      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800832c:	2300      	movs	r3, #0
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	617b      	str	r3, [r7, #20]
 8008340:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008344:	6a39      	ldr	r1, [r7, #32]
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f000 f964 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00d      	beq.n	800836e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008356:	2b04      	cmp	r3, #4
 8008358:	d107      	bne.n	800836a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008368:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e076      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800836e:	88fb      	ldrh	r3, [r7, #6]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d105      	bne.n	8008380 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008374:	893b      	ldrh	r3, [r7, #8]
 8008376:	b2da      	uxtb	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	611a      	str	r2, [r3, #16]
 800837e:	e021      	b.n	80083c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008380:	893b      	ldrh	r3, [r7, #8]
 8008382:	0a1b      	lsrs	r3, r3, #8
 8008384:	b29b      	uxth	r3, r3
 8008386:	b2da      	uxtb	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800838e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008390:	6a39      	ldr	r1, [r7, #32]
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f000 f93e 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00d      	beq.n	80083ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a2:	2b04      	cmp	r3, #4
 80083a4:	d107      	bne.n	80083b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e050      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80083ba:	893b      	ldrh	r3, [r7, #8]
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c6:	6a39      	ldr	r1, [r7, #32]
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 f923 	bl	8008614 <I2C_WaitOnTXEFlagUntilTimeout>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00d      	beq.n	80083f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d107      	bne.n	80083ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e035      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	2200      	movs	r2, #0
 8008408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800840c:	68f8      	ldr	r0, [r7, #12]
 800840e:	f000 f82b 	bl	8008468 <I2C_WaitOnFlagUntilTimeout>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d00d      	beq.n	8008434 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008426:	d103      	bne.n	8008430 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800842e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e013      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008434:	897b      	ldrh	r3, [r7, #10]
 8008436:	b2db      	uxtb	r3, r3
 8008438:	f043 0301 	orr.w	r3, r3, #1
 800843c:	b2da      	uxtb	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	6a3a      	ldr	r2, [r7, #32]
 8008448:	4906      	ldr	r1, [pc, #24]	; (8008464 <I2C_RequestMemoryRead+0x1cc>)
 800844a:	68f8      	ldr	r0, [r7, #12]
 800844c:	f000 f863 	bl	8008516 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e000      	b.n	800845c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	00010002 	.word	0x00010002

08008468 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	603b      	str	r3, [r7, #0]
 8008474:	4613      	mov	r3, r2
 8008476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008478:	e025      	b.n	80084c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008480:	d021      	beq.n	80084c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008482:	f7fe fddd 	bl	8007040 <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	429a      	cmp	r2, r3
 8008490:	d302      	bcc.n	8008498 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d116      	bne.n	80084c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2220      	movs	r2, #32
 80084a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	f043 0220 	orr.w	r2, r3, #32
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e023      	b.n	800850e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	0c1b      	lsrs	r3, r3, #16
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d10d      	bne.n	80084ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	43da      	mvns	r2, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	4013      	ands	r3, r2
 80084dc:	b29b      	uxth	r3, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	bf0c      	ite	eq
 80084e2:	2301      	moveq	r3, #1
 80084e4:	2300      	movne	r3, #0
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	461a      	mov	r2, r3
 80084ea:	e00c      	b.n	8008506 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	43da      	mvns	r2, r3
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	4013      	ands	r3, r2
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bf0c      	ite	eq
 80084fe:	2301      	moveq	r3, #1
 8008500:	2300      	movne	r3, #0
 8008502:	b2db      	uxtb	r3, r3
 8008504:	461a      	mov	r2, r3
 8008506:	79fb      	ldrb	r3, [r7, #7]
 8008508:	429a      	cmp	r2, r3
 800850a:	d0b6      	beq.n	800847a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	607a      	str	r2, [r7, #4]
 8008522:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008524:	e051      	b.n	80085ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008534:	d123      	bne.n	800857e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008544:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800854e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2220      	movs	r2, #32
 800855a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	f043 0204 	orr.w	r2, r3, #4
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e046      	b.n	800860c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008584:	d021      	beq.n	80085ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008586:	f7fe fd5b 	bl	8007040 <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	429a      	cmp	r2, r3
 8008594:	d302      	bcc.n	800859c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d116      	bne.n	80085ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2220      	movs	r2, #32
 80085a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	f043 0220 	orr.w	r2, r3, #32
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e020      	b.n	800860c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	0c1b      	lsrs	r3, r3, #16
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d10c      	bne.n	80085ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	43da      	mvns	r2, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	4013      	ands	r3, r2
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	bf14      	ite	ne
 80085e6:	2301      	movne	r3, #1
 80085e8:	2300      	moveq	r3, #0
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	e00b      	b.n	8008606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	43da      	mvns	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	4013      	ands	r3, r2
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	bf14      	ite	ne
 8008600:	2301      	movne	r3, #1
 8008602:	2300      	moveq	r3, #0
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d18d      	bne.n	8008526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008620:	e02d      	b.n	800867e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 f8ce 	bl	80087c4 <I2C_IsAcknowledgeFailed>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e02d      	b.n	800868e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008638:	d021      	beq.n	800867e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800863a:	f7fe fd01 	bl	8007040 <HAL_GetTick>
 800863e:	4602      	mov	r2, r0
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	429a      	cmp	r2, r3
 8008648:	d302      	bcc.n	8008650 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d116      	bne.n	800867e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2220      	movs	r2, #32
 800865a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866a:	f043 0220 	orr.w	r2, r3, #32
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e007      	b.n	800868e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008688:	2b80      	cmp	r3, #128	; 0x80
 800868a:	d1ca      	bne.n	8008622 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	60f8      	str	r0, [r7, #12]
 800869e:	60b9      	str	r1, [r7, #8]
 80086a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086a2:	e02d      	b.n	8008700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 f88d 	bl	80087c4 <I2C_IsAcknowledgeFailed>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e02d      	b.n	8008710 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ba:	d021      	beq.n	8008700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086bc:	f7fe fcc0 	bl	8007040 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d302      	bcc.n	80086d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d116      	bne.n	8008700 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2200      	movs	r2, #0
 80086d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2220      	movs	r2, #32
 80086dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ec:	f043 0220 	orr.w	r2, r3, #32
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086fc:	2301      	movs	r3, #1
 80086fe:	e007      	b.n	8008710 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	f003 0304 	and.w	r3, r3, #4
 800870a:	2b04      	cmp	r3, #4
 800870c:	d1ca      	bne.n	80086a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008724:	e042      	b.n	80087ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	f003 0310 	and.w	r3, r3, #16
 8008730:	2b10      	cmp	r3, #16
 8008732:	d119      	bne.n	8008768 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f06f 0210 	mvn.w	r2, #16
 800873c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2200      	movs	r2, #0
 8008742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2220      	movs	r2, #32
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e029      	b.n	80087bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008768:	f7fe fc6a 	bl	8007040 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	429a      	cmp	r2, r3
 8008776:	d302      	bcc.n	800877e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d116      	bne.n	80087ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2220      	movs	r2, #32
 8008788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008798:	f043 0220 	orr.w	r2, r3, #32
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e007      	b.n	80087bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	695b      	ldr	r3, [r3, #20]
 80087b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087b6:	2b40      	cmp	r3, #64	; 0x40
 80087b8:	d1b5      	bne.n	8008726 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3710      	adds	r7, #16
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087da:	d11b      	bne.n	8008814 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008800:	f043 0204 	orr.w	r2, r3, #4
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e000      	b.n	8008816 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	bc80      	pop	{r7}
 800881e:	4770      	bx	lr

08008820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e26c      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	f000 8087 	beq.w	800894e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008840:	4b92      	ldr	r3, [pc, #584]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	f003 030c 	and.w	r3, r3, #12
 8008848:	2b04      	cmp	r3, #4
 800884a:	d00c      	beq.n	8008866 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800884c:	4b8f      	ldr	r3, [pc, #572]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	f003 030c 	and.w	r3, r3, #12
 8008854:	2b08      	cmp	r3, #8
 8008856:	d112      	bne.n	800887e <HAL_RCC_OscConfig+0x5e>
 8008858:	4b8c      	ldr	r3, [pc, #560]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008864:	d10b      	bne.n	800887e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008866:	4b89      	ldr	r3, [pc, #548]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d06c      	beq.n	800894c <HAL_RCC_OscConfig+0x12c>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d168      	bne.n	800894c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e246      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008886:	d106      	bne.n	8008896 <HAL_RCC_OscConfig+0x76>
 8008888:	4b80      	ldr	r3, [pc, #512]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a7f      	ldr	r2, [pc, #508]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 800888e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	e02e      	b.n	80088f4 <HAL_RCC_OscConfig+0xd4>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10c      	bne.n	80088b8 <HAL_RCC_OscConfig+0x98>
 800889e:	4b7b      	ldr	r3, [pc, #492]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a7a      	ldr	r2, [pc, #488]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80088a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088a8:	6013      	str	r3, [r2, #0]
 80088aa:	4b78      	ldr	r3, [pc, #480]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a77      	ldr	r2, [pc, #476]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80088b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088b4:	6013      	str	r3, [r2, #0]
 80088b6:	e01d      	b.n	80088f4 <HAL_RCC_OscConfig+0xd4>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685b      	ldr	r3, [r3, #4]
 80088bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088c0:	d10c      	bne.n	80088dc <HAL_RCC_OscConfig+0xbc>
 80088c2:	4b72      	ldr	r3, [pc, #456]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a71      	ldr	r2, [pc, #452]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80088c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	4b6f      	ldr	r3, [pc, #444]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a6e      	ldr	r2, [pc, #440]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80088d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088d8:	6013      	str	r3, [r2, #0]
 80088da:	e00b      	b.n	80088f4 <HAL_RCC_OscConfig+0xd4>
 80088dc:	4b6b      	ldr	r3, [pc, #428]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a6a      	ldr	r2, [pc, #424]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80088e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	4b68      	ldr	r3, [pc, #416]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a67      	ldr	r2, [pc, #412]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80088ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d013      	beq.n	8008924 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088fc:	f7fe fba0 	bl	8007040 <HAL_GetTick>
 8008900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008902:	e008      	b.n	8008916 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008904:	f7fe fb9c 	bl	8007040 <HAL_GetTick>
 8008908:	4602      	mov	r2, r0
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	1ad3      	subs	r3, r2, r3
 800890e:	2b64      	cmp	r3, #100	; 0x64
 8008910:	d901      	bls.n	8008916 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008912:	2303      	movs	r3, #3
 8008914:	e1fa      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008916:	4b5d      	ldr	r3, [pc, #372]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0f0      	beq.n	8008904 <HAL_RCC_OscConfig+0xe4>
 8008922:	e014      	b.n	800894e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008924:	f7fe fb8c 	bl	8007040 <HAL_GetTick>
 8008928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800892a:	e008      	b.n	800893e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800892c:	f7fe fb88 	bl	8007040 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b64      	cmp	r3, #100	; 0x64
 8008938:	d901      	bls.n	800893e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800893a:	2303      	movs	r3, #3
 800893c:	e1e6      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800893e:	4b53      	ldr	r3, [pc, #332]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1f0      	bne.n	800892c <HAL_RCC_OscConfig+0x10c>
 800894a:	e000      	b.n	800894e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800894c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d063      	beq.n	8008a22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800895a:	4b4c      	ldr	r3, [pc, #304]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	f003 030c 	and.w	r3, r3, #12
 8008962:	2b00      	cmp	r3, #0
 8008964:	d00b      	beq.n	800897e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008966:	4b49      	ldr	r3, [pc, #292]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f003 030c 	and.w	r3, r3, #12
 800896e:	2b08      	cmp	r3, #8
 8008970:	d11c      	bne.n	80089ac <HAL_RCC_OscConfig+0x18c>
 8008972:	4b46      	ldr	r3, [pc, #280]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d116      	bne.n	80089ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800897e:	4b43      	ldr	r3, [pc, #268]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 0302 	and.w	r3, r3, #2
 8008986:	2b00      	cmp	r3, #0
 8008988:	d005      	beq.n	8008996 <HAL_RCC_OscConfig+0x176>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d001      	beq.n	8008996 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e1ba      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008996:	4b3d      	ldr	r3, [pc, #244]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	00db      	lsls	r3, r3, #3
 80089a4:	4939      	ldr	r1, [pc, #228]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80089a6:	4313      	orrs	r3, r2
 80089a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089aa:	e03a      	b.n	8008a22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d020      	beq.n	80089f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089b4:	4b36      	ldr	r3, [pc, #216]	; (8008a90 <HAL_RCC_OscConfig+0x270>)
 80089b6:	2201      	movs	r2, #1
 80089b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089ba:	f7fe fb41 	bl	8007040 <HAL_GetTick>
 80089be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089c0:	e008      	b.n	80089d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089c2:	f7fe fb3d 	bl	8007040 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d901      	bls.n	80089d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e19b      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089d4:	4b2d      	ldr	r3, [pc, #180]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 0302 	and.w	r3, r3, #2
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0f0      	beq.n	80089c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089e0:	4b2a      	ldr	r3, [pc, #168]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	00db      	lsls	r3, r3, #3
 80089ee:	4927      	ldr	r1, [pc, #156]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	600b      	str	r3, [r1, #0]
 80089f4:	e015      	b.n	8008a22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80089f6:	4b26      	ldr	r3, [pc, #152]	; (8008a90 <HAL_RCC_OscConfig+0x270>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089fc:	f7fe fb20 	bl	8007040 <HAL_GetTick>
 8008a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a02:	e008      	b.n	8008a16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a04:	f7fe fb1c 	bl	8007040 <HAL_GetTick>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d901      	bls.n	8008a16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008a12:	2303      	movs	r3, #3
 8008a14:	e17a      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a16:	4b1d      	ldr	r3, [pc, #116]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 0302 	and.w	r3, r3, #2
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1f0      	bne.n	8008a04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 0308 	and.w	r3, r3, #8
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d03a      	beq.n	8008aa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	699b      	ldr	r3, [r3, #24]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d019      	beq.n	8008a6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a36:	4b17      	ldr	r3, [pc, #92]	; (8008a94 <HAL_RCC_OscConfig+0x274>)
 8008a38:	2201      	movs	r2, #1
 8008a3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a3c:	f7fe fb00 	bl	8007040 <HAL_GetTick>
 8008a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a42:	e008      	b.n	8008a56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a44:	f7fe fafc 	bl	8007040 <HAL_GetTick>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e15a      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008a56:	4b0d      	ldr	r3, [pc, #52]	; (8008a8c <HAL_RCC_OscConfig+0x26c>)
 8008a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0f0      	beq.n	8008a44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008a62:	2001      	movs	r0, #1
 8008a64:	f000 fad8 	bl	8009018 <RCC_Delay>
 8008a68:	e01c      	b.n	8008aa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008a6a:	4b0a      	ldr	r3, [pc, #40]	; (8008a94 <HAL_RCC_OscConfig+0x274>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a70:	f7fe fae6 	bl	8007040 <HAL_GetTick>
 8008a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a76:	e00f      	b.n	8008a98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a78:	f7fe fae2 	bl	8007040 <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d908      	bls.n	8008a98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e140      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
 8008a8a:	bf00      	nop
 8008a8c:	40021000 	.word	0x40021000
 8008a90:	42420000 	.word	0x42420000
 8008a94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008a98:	4b9e      	ldr	r3, [pc, #632]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d1e9      	bne.n	8008a78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0304 	and.w	r3, r3, #4
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 80a6 	beq.w	8008bfe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ab6:	4b97      	ldr	r3, [pc, #604]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d10d      	bne.n	8008ade <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ac2:	4b94      	ldr	r3, [pc, #592]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008ac4:	69db      	ldr	r3, [r3, #28]
 8008ac6:	4a93      	ldr	r2, [pc, #588]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008acc:	61d3      	str	r3, [r2, #28]
 8008ace:	4b91      	ldr	r3, [pc, #580]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ad6:	60bb      	str	r3, [r7, #8]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008ada:	2301      	movs	r3, #1
 8008adc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ade:	4b8e      	ldr	r3, [pc, #568]	; (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d118      	bne.n	8008b1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008aea:	4b8b      	ldr	r3, [pc, #556]	; (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a8a      	ldr	r2, [pc, #552]	; (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008af4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008af6:	f7fe faa3 	bl	8007040 <HAL_GetTick>
 8008afa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008afc:	e008      	b.n	8008b10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008afe:	f7fe fa9f 	bl	8007040 <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b64      	cmp	r3, #100	; 0x64
 8008b0a:	d901      	bls.n	8008b10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e0fd      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008b10:	4b81      	ldr	r3, [pc, #516]	; (8008d18 <HAL_RCC_OscConfig+0x4f8>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d0f0      	beq.n	8008afe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d106      	bne.n	8008b32 <HAL_RCC_OscConfig+0x312>
 8008b24:	4b7b      	ldr	r3, [pc, #492]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008b26:	6a1b      	ldr	r3, [r3, #32]
 8008b28:	4a7a      	ldr	r2, [pc, #488]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008b2a:	f043 0301 	orr.w	r3, r3, #1
 8008b2e:	6213      	str	r3, [r2, #32]
 8008b30:	e02d      	b.n	8008b8e <HAL_RCC_OscConfig+0x36e>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10c      	bne.n	8008b54 <HAL_RCC_OscConfig+0x334>
 8008b3a:	4b76      	ldr	r3, [pc, #472]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	4a75      	ldr	r2, [pc, #468]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008b40:	f023 0301 	bic.w	r3, r3, #1
 8008b44:	6213      	str	r3, [r2, #32]
 8008b46:	4b73      	ldr	r3, [pc, #460]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	4a72      	ldr	r2, [pc, #456]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008b4c:	f023 0304 	bic.w	r3, r3, #4
 8008b50:	6213      	str	r3, [r2, #32]
 8008b52:	e01c      	b.n	8008b8e <HAL_RCC_OscConfig+0x36e>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	2b05      	cmp	r3, #5
 8008b5a:	d10c      	bne.n	8008b76 <HAL_RCC_OscConfig+0x356>
 8008b5c:	4b6d      	ldr	r3, [pc, #436]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	4a6c      	ldr	r2, [pc, #432]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008b62:	f043 0304 	orr.w	r3, r3, #4
 8008b66:	6213      	str	r3, [r2, #32]
 8008b68:	4b6a      	ldr	r3, [pc, #424]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	4a69      	ldr	r2, [pc, #420]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008b6e:	f043 0301 	orr.w	r3, r3, #1
 8008b72:	6213      	str	r3, [r2, #32]
 8008b74:	e00b      	b.n	8008b8e <HAL_RCC_OscConfig+0x36e>
 8008b76:	4b67      	ldr	r3, [pc, #412]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008b78:	6a1b      	ldr	r3, [r3, #32]
 8008b7a:	4a66      	ldr	r2, [pc, #408]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008b7c:	f023 0301 	bic.w	r3, r3, #1
 8008b80:	6213      	str	r3, [r2, #32]
 8008b82:	4b64      	ldr	r3, [pc, #400]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008b84:	6a1b      	ldr	r3, [r3, #32]
 8008b86:	4a63      	ldr	r2, [pc, #396]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008b88:	f023 0304 	bic.w	r3, r3, #4
 8008b8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d015      	beq.n	8008bc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b96:	f7fe fa53 	bl	8007040 <HAL_GetTick>
 8008b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b9c:	e00a      	b.n	8008bb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b9e:	f7fe fa4f 	bl	8007040 <HAL_GetTick>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d901      	bls.n	8008bb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e0ab      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008bb4:	4b57      	ldr	r3, [pc, #348]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0ee      	beq.n	8008b9e <HAL_RCC_OscConfig+0x37e>
 8008bc0:	e014      	b.n	8008bec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008bc2:	f7fe fa3d 	bl	8007040 <HAL_GetTick>
 8008bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008bc8:	e00a      	b.n	8008be0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008bca:	f7fe fa39 	bl	8007040 <HAL_GetTick>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d901      	bls.n	8008be0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e095      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008be0:	4b4c      	ldr	r3, [pc, #304]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	f003 0302 	and.w	r3, r3, #2
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1ee      	bne.n	8008bca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008bec:	7dfb      	ldrb	r3, [r7, #23]
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d105      	bne.n	8008bfe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008bf2:	4b48      	ldr	r3, [pc, #288]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	4a47      	ldr	r2, [pc, #284]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bfc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	69db      	ldr	r3, [r3, #28]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f000 8081 	beq.w	8008d0a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c08:	4b42      	ldr	r3, [pc, #264]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	f003 030c 	and.w	r3, r3, #12
 8008c10:	2b08      	cmp	r3, #8
 8008c12:	d061      	beq.n	8008cd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	69db      	ldr	r3, [r3, #28]
 8008c18:	2b02      	cmp	r3, #2
 8008c1a:	d146      	bne.n	8008caa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c1c:	4b3f      	ldr	r3, [pc, #252]	; (8008d1c <HAL_RCC_OscConfig+0x4fc>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c22:	f7fe fa0d 	bl	8007040 <HAL_GetTick>
 8008c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c28:	e008      	b.n	8008c3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c2a:	f7fe fa09 	bl	8007040 <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d901      	bls.n	8008c3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e067      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008c3c:	4b35      	ldr	r3, [pc, #212]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1f0      	bne.n	8008c2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a1b      	ldr	r3, [r3, #32]
 8008c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c50:	d108      	bne.n	8008c64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008c52:	4b30      	ldr	r3, [pc, #192]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	492d      	ldr	r1, [pc, #180]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c64:	4b2b      	ldr	r3, [pc, #172]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a19      	ldr	r1, [r3, #32]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	430b      	orrs	r3, r1
 8008c76:	4927      	ldr	r1, [pc, #156]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008c7c:	4b27      	ldr	r3, [pc, #156]	; (8008d1c <HAL_RCC_OscConfig+0x4fc>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c82:	f7fe f9dd 	bl	8007040 <HAL_GetTick>
 8008c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c88:	e008      	b.n	8008c9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c8a:	f7fe f9d9 	bl	8007040 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d901      	bls.n	8008c9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e037      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008c9c:	4b1d      	ldr	r3, [pc, #116]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d0f0      	beq.n	8008c8a <HAL_RCC_OscConfig+0x46a>
 8008ca8:	e02f      	b.n	8008d0a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008caa:	4b1c      	ldr	r3, [pc, #112]	; (8008d1c <HAL_RCC_OscConfig+0x4fc>)
 8008cac:	2200      	movs	r2, #0
 8008cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cb0:	f7fe f9c6 	bl	8007040 <HAL_GetTick>
 8008cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008cb6:	e008      	b.n	8008cca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cb8:	f7fe f9c2 	bl	8007040 <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d901      	bls.n	8008cca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e020      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008cca:	4b12      	ldr	r3, [pc, #72]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1f0      	bne.n	8008cb8 <HAL_RCC_OscConfig+0x498>
 8008cd6:	e018      	b.n	8008d0a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	69db      	ldr	r3, [r3, #28]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d101      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e013      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008ce4:	4b0b      	ldr	r3, [pc, #44]	; (8008d14 <HAL_RCC_OscConfig+0x4f4>)
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d106      	bne.n	8008d06 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d001      	beq.n	8008d0a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3718      	adds	r7, #24
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	40021000 	.word	0x40021000
 8008d18:	40007000 	.word	0x40007000
 8008d1c:	42420060 	.word	0x42420060

08008d20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d101      	bne.n	8008d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e0d0      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d34:	4b6a      	ldr	r3, [pc, #424]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f003 0307 	and.w	r3, r3, #7
 8008d3c:	683a      	ldr	r2, [r7, #0]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d910      	bls.n	8008d64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d42:	4b67      	ldr	r3, [pc, #412]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f023 0207 	bic.w	r2, r3, #7
 8008d4a:	4965      	ldr	r1, [pc, #404]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d52:	4b63      	ldr	r3, [pc, #396]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 0307 	and.w	r3, r3, #7
 8008d5a:	683a      	ldr	r2, [r7, #0]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d001      	beq.n	8008d64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e0b8      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0302 	and.w	r3, r3, #2
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d020      	beq.n	8008db2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d005      	beq.n	8008d88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008d7c:	4b59      	ldr	r3, [pc, #356]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	4a58      	ldr	r2, [pc, #352]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008d82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008d86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f003 0308 	and.w	r3, r3, #8
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d005      	beq.n	8008da0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008d94:	4b53      	ldr	r3, [pc, #332]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	4a52      	ldr	r2, [pc, #328]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008d9a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008d9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008da0:	4b50      	ldr	r3, [pc, #320]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	494d      	ldr	r1, [pc, #308]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d040      	beq.n	8008e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d107      	bne.n	8008dd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dc6:	4b47      	ldr	r3, [pc, #284]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d115      	bne.n	8008dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e07f      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d107      	bne.n	8008dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dde:	4b41      	ldr	r3, [pc, #260]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d109      	bne.n	8008dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e073      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008dee:	4b3d      	ldr	r3, [pc, #244]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e06b      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008dfe:	4b39      	ldr	r3, [pc, #228]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f023 0203 	bic.w	r2, r3, #3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	4936      	ldr	r1, [pc, #216]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e10:	f7fe f916 	bl	8007040 <HAL_GetTick>
 8008e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e16:	e00a      	b.n	8008e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e18:	f7fe f912 	bl	8007040 <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d901      	bls.n	8008e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e053      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e2e:	4b2d      	ldr	r3, [pc, #180]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	f003 020c 	and.w	r2, r3, #12
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	429a      	cmp	r2, r3
 8008e3e:	d1eb      	bne.n	8008e18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e40:	4b27      	ldr	r3, [pc, #156]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f003 0307 	and.w	r3, r3, #7
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d210      	bcs.n	8008e70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e4e:	4b24      	ldr	r3, [pc, #144]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f023 0207 	bic.w	r2, r3, #7
 8008e56:	4922      	ldr	r1, [pc, #136]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e5e:	4b20      	ldr	r3, [pc, #128]	; (8008ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d001      	beq.n	8008e70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e032      	b.n	8008ed6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f003 0304 	and.w	r3, r3, #4
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d008      	beq.n	8008e8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e7c:	4b19      	ldr	r3, [pc, #100]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	4916      	ldr	r1, [pc, #88]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d009      	beq.n	8008eae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008e9a:	4b12      	ldr	r3, [pc, #72]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	490e      	ldr	r1, [pc, #56]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008eae:	f000 f821 	bl	8008ef4 <HAL_RCC_GetSysClockFreq>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	091b      	lsrs	r3, r3, #4
 8008eba:	f003 030f 	and.w	r3, r3, #15
 8008ebe:	490a      	ldr	r1, [pc, #40]	; (8008ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8008ec0:	5ccb      	ldrb	r3, [r1, r3]
 8008ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ec6:	4a09      	ldr	r2, [pc, #36]	; (8008eec <HAL_RCC_ClockConfig+0x1cc>)
 8008ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008eca:	4b09      	ldr	r3, [pc, #36]	; (8008ef0 <HAL_RCC_ClockConfig+0x1d0>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe f874 	bl	8006fbc <HAL_InitTick>

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	40022000 	.word	0x40022000
 8008ee4:	40021000 	.word	0x40021000
 8008ee8:	0800e12c 	.word	0x0800e12c
 8008eec:	20000004 	.word	0x20000004
 8008ef0:	20000008 	.word	0x20000008

08008ef4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ef4:	b490      	push	{r4, r7}
 8008ef6:	b08a      	sub	sp, #40	; 0x28
 8008ef8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008efa:	4b2a      	ldr	r3, [pc, #168]	; (8008fa4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008efc:	1d3c      	adds	r4, r7, #4
 8008efe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008f04:	f240 2301 	movw	r3, #513	; 0x201
 8008f08:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	61fb      	str	r3, [r7, #28]
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61bb      	str	r3, [r7, #24]
 8008f12:	2300      	movs	r3, #0
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
 8008f16:	2300      	movs	r3, #0
 8008f18:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008f1e:	4b22      	ldr	r3, [pc, #136]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	f003 030c 	and.w	r3, r3, #12
 8008f2a:	2b04      	cmp	r3, #4
 8008f2c:	d002      	beq.n	8008f34 <HAL_RCC_GetSysClockFreq+0x40>
 8008f2e:	2b08      	cmp	r3, #8
 8008f30:	d003      	beq.n	8008f3a <HAL_RCC_GetSysClockFreq+0x46>
 8008f32:	e02d      	b.n	8008f90 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008f34:	4b1d      	ldr	r3, [pc, #116]	; (8008fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f36:	623b      	str	r3, [r7, #32]
      break;
 8008f38:	e02d      	b.n	8008f96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	0c9b      	lsrs	r3, r3, #18
 8008f3e:	f003 030f 	and.w	r3, r3, #15
 8008f42:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008f46:	4413      	add	r3, r2
 8008f48:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008f4c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d013      	beq.n	8008f80 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008f58:	4b13      	ldr	r3, [pc, #76]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	0c5b      	lsrs	r3, r3, #17
 8008f5e:	f003 0301 	and.w	r3, r3, #1
 8008f62:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008f66:	4413      	add	r3, r2
 8008f68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008f6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	4a0e      	ldr	r2, [pc, #56]	; (8008fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f72:	fb02 f203 	mul.w	r2, r2, r3
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008f7e:	e004      	b.n	8008f8a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	4a0b      	ldr	r2, [pc, #44]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008f84:	fb02 f303 	mul.w	r3, r2, r3
 8008f88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	623b      	str	r3, [r7, #32]
      break;
 8008f8e:	e002      	b.n	8008f96 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008f90:	4b06      	ldr	r3, [pc, #24]	; (8008fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8008f92:	623b      	str	r3, [r7, #32]
      break;
 8008f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f96:	6a3b      	ldr	r3, [r7, #32]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3728      	adds	r7, #40	; 0x28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bc90      	pop	{r4, r7}
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	0800c95c 	.word	0x0800c95c
 8008fa8:	40021000 	.word	0x40021000
 8008fac:	007a1200 	.word	0x007a1200
 8008fb0:	003d0900 	.word	0x003d0900

08008fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fb8:	4b02      	ldr	r3, [pc, #8]	; (8008fc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8008fba:	681b      	ldr	r3, [r3, #0]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bc80      	pop	{r7}
 8008fc2:	4770      	bx	lr
 8008fc4:	20000004 	.word	0x20000004

08008fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008fcc:	f7ff fff2 	bl	8008fb4 <HAL_RCC_GetHCLKFreq>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	4b05      	ldr	r3, [pc, #20]	; (8008fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	0a1b      	lsrs	r3, r3, #8
 8008fd8:	f003 0307 	and.w	r3, r3, #7
 8008fdc:	4903      	ldr	r1, [pc, #12]	; (8008fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fde:	5ccb      	ldrb	r3, [r1, r3]
 8008fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	40021000 	.word	0x40021000
 8008fec:	0800e13c 	.word	0x0800e13c

08008ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008ff4:	f7ff ffde 	bl	8008fb4 <HAL_RCC_GetHCLKFreq>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	4b05      	ldr	r3, [pc, #20]	; (8009010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	0adb      	lsrs	r3, r3, #11
 8009000:	f003 0307 	and.w	r3, r3, #7
 8009004:	4903      	ldr	r1, [pc, #12]	; (8009014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009006:	5ccb      	ldrb	r3, [r1, r3]
 8009008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800900c:	4618      	mov	r0, r3
 800900e:	bd80      	pop	{r7, pc}
 8009010:	40021000 	.word	0x40021000
 8009014:	0800e13c 	.word	0x0800e13c

08009018 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009020:	4b0a      	ldr	r3, [pc, #40]	; (800904c <RCC_Delay+0x34>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a0a      	ldr	r2, [pc, #40]	; (8009050 <RCC_Delay+0x38>)
 8009026:	fba2 2303 	umull	r2, r3, r2, r3
 800902a:	0a5b      	lsrs	r3, r3, #9
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	fb02 f303 	mul.w	r3, r2, r3
 8009032:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009034:	bf00      	nop
  }
  while (Delay --);
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	1e5a      	subs	r2, r3, #1
 800903a:	60fa      	str	r2, [r7, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d1f9      	bne.n	8009034 <RCC_Delay+0x1c>
}
 8009040:	bf00      	nop
 8009042:	bf00      	nop
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	bc80      	pop	{r7}
 800904a:	4770      	bx	lr
 800904c:	20000004 	.word	0x20000004
 8009050:	10624dd3 	.word	0x10624dd3

08009054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e076      	b.n	8009154 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	2b00      	cmp	r3, #0
 800906c:	d108      	bne.n	8009080 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009076:	d009      	beq.n	800908c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	61da      	str	r2, [r3, #28]
 800907e:	e005      	b.n	800908c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7fd f9fa 	bl	80064a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2202      	movs	r2, #2
 80090b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80090d4:	431a      	orrs	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090de:	431a      	orrs	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	431a      	orrs	r2, r3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	f003 0301 	and.w	r3, r3, #1
 80090f2:	431a      	orrs	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090fc:	431a      	orrs	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	69db      	ldr	r3, [r3, #28]
 8009102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009106:	431a      	orrs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009110:	ea42 0103 	orr.w	r1, r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009118:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	430a      	orrs	r2, r1
 8009122:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	0c1a      	lsrs	r2, r3, #16
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f002 0204 	and.w	r2, r2, #4
 8009132:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	69da      	ldr	r2, [r3, #28]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009142:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b08c      	sub	sp, #48	; 0x30
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	607a      	str	r2, [r7, #4]
 8009168:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800916a:	2301      	movs	r3, #1
 800916c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800917a:	2b01      	cmp	r3, #1
 800917c:	d101      	bne.n	8009182 <HAL_SPI_TransmitReceive+0x26>
 800917e:	2302      	movs	r3, #2
 8009180:	e18a      	b.n	8009498 <HAL_SPI_TransmitReceive+0x33c>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2201      	movs	r2, #1
 8009186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800918a:	f7fd ff59 	bl	8007040 <HAL_GetTick>
 800918e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80091a0:	887b      	ldrh	r3, [r7, #2]
 80091a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80091a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d00f      	beq.n	80091cc <HAL_SPI_TransmitReceive+0x70>
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80091b2:	d107      	bne.n	80091c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d103      	bne.n	80091c4 <HAL_SPI_TransmitReceive+0x68>
 80091bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091c0:	2b04      	cmp	r3, #4
 80091c2:	d003      	beq.n	80091cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80091c4:	2302      	movs	r3, #2
 80091c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80091ca:	e15b      	b.n	8009484 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d005      	beq.n	80091de <HAL_SPI_TransmitReceive+0x82>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <HAL_SPI_TransmitReceive+0x82>
 80091d8:	887b      	ldrh	r3, [r7, #2]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d103      	bne.n	80091e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80091e4:	e14e      	b.n	8009484 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b04      	cmp	r3, #4
 80091f0:	d003      	beq.n	80091fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2205      	movs	r2, #5
 80091f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2200      	movs	r2, #0
 80091fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	687a      	ldr	r2, [r7, #4]
 8009204:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	887a      	ldrh	r2, [r7, #2]
 800920a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	887a      	ldrh	r2, [r7, #2]
 8009210:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	887a      	ldrh	r2, [r7, #2]
 800921c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	887a      	ldrh	r2, [r7, #2]
 8009222:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923a:	2b40      	cmp	r3, #64	; 0x40
 800923c:	d007      	beq.n	800924e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800924c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009256:	d178      	bne.n	800934a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d002      	beq.n	8009266 <HAL_SPI_TransmitReceive+0x10a>
 8009260:	8b7b      	ldrh	r3, [r7, #26]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d166      	bne.n	8009334 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926a:	881a      	ldrh	r2, [r3, #0]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009276:	1c9a      	adds	r2, r3, #2
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009280:	b29b      	uxth	r3, r3
 8009282:	3b01      	subs	r3, #1
 8009284:	b29a      	uxth	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800928a:	e053      	b.n	8009334 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b02      	cmp	r3, #2
 8009298:	d11b      	bne.n	80092d2 <HAL_SPI_TransmitReceive+0x176>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800929e:	b29b      	uxth	r3, r3
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d016      	beq.n	80092d2 <HAL_SPI_TransmitReceive+0x176>
 80092a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d113      	bne.n	80092d2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ae:	881a      	ldrh	r2, [r3, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ba:	1c9a      	adds	r2, r3, #2
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	3b01      	subs	r3, #1
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80092ce:	2300      	movs	r3, #0
 80092d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f003 0301 	and.w	r3, r3, #1
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d119      	bne.n	8009314 <HAL_SPI_TransmitReceive+0x1b8>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d014      	beq.n	8009314 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68da      	ldr	r2, [r3, #12]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f4:	b292      	uxth	r2, r2
 80092f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fc:	1c9a      	adds	r2, r3, #2
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009306:	b29b      	uxth	r3, r3
 8009308:	3b01      	subs	r3, #1
 800930a:	b29a      	uxth	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009310:	2301      	movs	r3, #1
 8009312:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009314:	f7fd fe94 	bl	8007040 <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009320:	429a      	cmp	r2, r3
 8009322:	d807      	bhi.n	8009334 <HAL_SPI_TransmitReceive+0x1d8>
 8009324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932a:	d003      	beq.n	8009334 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009332:	e0a7      	b.n	8009484 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009338:	b29b      	uxth	r3, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1a6      	bne.n	800928c <HAL_SPI_TransmitReceive+0x130>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009342:	b29b      	uxth	r3, r3
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1a1      	bne.n	800928c <HAL_SPI_TransmitReceive+0x130>
 8009348:	e07c      	b.n	8009444 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <HAL_SPI_TransmitReceive+0x1fc>
 8009352:	8b7b      	ldrh	r3, [r7, #26]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d16b      	bne.n	8009430 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	330c      	adds	r3, #12
 8009362:	7812      	ldrb	r2, [r2, #0]
 8009364:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009374:	b29b      	uxth	r3, r3
 8009376:	3b01      	subs	r3, #1
 8009378:	b29a      	uxth	r2, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800937e:	e057      	b.n	8009430 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f003 0302 	and.w	r3, r3, #2
 800938a:	2b02      	cmp	r3, #2
 800938c:	d11c      	bne.n	80093c8 <HAL_SPI_TransmitReceive+0x26c>
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009392:	b29b      	uxth	r3, r3
 8009394:	2b00      	cmp	r3, #0
 8009396:	d017      	beq.n	80093c8 <HAL_SPI_TransmitReceive+0x26c>
 8009398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939a:	2b01      	cmp	r3, #1
 800939c:	d114      	bne.n	80093c8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	330c      	adds	r3, #12
 80093a8:	7812      	ldrb	r2, [r2, #0]
 80093aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	3b01      	subs	r3, #1
 80093be:	b29a      	uxth	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80093c4:	2300      	movs	r3, #0
 80093c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d119      	bne.n	800940a <HAL_SPI_TransmitReceive+0x2ae>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093da:	b29b      	uxth	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d014      	beq.n	800940a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f2:	1c5a      	adds	r2, r3, #1
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	3b01      	subs	r3, #1
 8009400:	b29a      	uxth	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009406:	2301      	movs	r3, #1
 8009408:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800940a:	f7fd fe19 	bl	8007040 <HAL_GetTick>
 800940e:	4602      	mov	r2, r0
 8009410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009416:	429a      	cmp	r2, r3
 8009418:	d803      	bhi.n	8009422 <HAL_SPI_TransmitReceive+0x2c6>
 800941a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800941c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009420:	d102      	bne.n	8009428 <HAL_SPI_TransmitReceive+0x2cc>
 8009422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009424:	2b00      	cmp	r3, #0
 8009426:	d103      	bne.n	8009430 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009428:	2303      	movs	r3, #3
 800942a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800942e:	e029      	b.n	8009484 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009434:	b29b      	uxth	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1a2      	bne.n	8009380 <HAL_SPI_TransmitReceive+0x224>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800943e:	b29b      	uxth	r3, r3
 8009440:	2b00      	cmp	r3, #0
 8009442:	d19d      	bne.n	8009380 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009446:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f000 f8b1 	bl	80095b0 <SPI_EndRxTxTransaction>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d006      	beq.n	8009462 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2220      	movs	r2, #32
 800945e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009460:	e010      	b.n	8009484 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10b      	bne.n	8009482 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800946a:	2300      	movs	r3, #0
 800946c:	617b      	str	r3, [r7, #20]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	617b      	str	r3, [r7, #20]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	617b      	str	r3, [r7, #20]
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	e000      	b.n	8009484 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009482:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2201      	movs	r2, #1
 8009488:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009494:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009498:	4618      	mov	r0, r3
 800949a:	3730      	adds	r7, #48	; 0x30
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	4613      	mov	r3, r2
 80094ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80094b0:	f7fd fdc6 	bl	8007040 <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b8:	1a9b      	subs	r3, r3, r2
 80094ba:	683a      	ldr	r2, [r7, #0]
 80094bc:	4413      	add	r3, r2
 80094be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80094c0:	f7fd fdbe 	bl	8007040 <HAL_GetTick>
 80094c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80094c6:	4b39      	ldr	r3, [pc, #228]	; (80095ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	015b      	lsls	r3, r3, #5
 80094cc:	0d1b      	lsrs	r3, r3, #20
 80094ce:	69fa      	ldr	r2, [r7, #28]
 80094d0:	fb02 f303 	mul.w	r3, r2, r3
 80094d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80094d6:	e054      	b.n	8009582 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094de:	d050      	beq.n	8009582 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094e0:	f7fd fdae 	bl	8007040 <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	69fa      	ldr	r2, [r7, #28]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d902      	bls.n	80094f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d13d      	bne.n	8009572 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009504:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800950e:	d111      	bne.n	8009534 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009518:	d004      	beq.n	8009524 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009522:	d107      	bne.n	8009534 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009532:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009538:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800953c:	d10f      	bne.n	800955e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800955c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e017      	b.n	80095a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009578:	2300      	movs	r3, #0
 800957a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	3b01      	subs	r3, #1
 8009580:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	689a      	ldr	r2, [r3, #8]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	4013      	ands	r3, r2
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	429a      	cmp	r2, r3
 8009590:	bf0c      	ite	eq
 8009592:	2301      	moveq	r3, #1
 8009594:	2300      	movne	r3, #0
 8009596:	b2db      	uxtb	r3, r3
 8009598:	461a      	mov	r2, r3
 800959a:	79fb      	ldrb	r3, [r7, #7]
 800959c:	429a      	cmp	r2, r3
 800959e:	d19b      	bne.n	80094d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3720      	adds	r7, #32
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	20000004 	.word	0x20000004

080095b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af02      	add	r7, sp, #8
 80095b6:	60f8      	str	r0, [r7, #12]
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	2200      	movs	r2, #0
 80095c4:	2180      	movs	r1, #128	; 0x80
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f7ff ff6a 	bl	80094a0 <SPI_WaitFlagStateUntilTimeout>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d007      	beq.n	80095e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d6:	f043 0220 	orr.w	r2, r3, #32
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e000      	b.n	80095e4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d004      	beq.n	8009608 <HAL_SRAM_Init+0x1c>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009606:	d101      	bne.n	800960c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8009608:	2301      	movs	r3, #1
 800960a:	e038      	b.n	800967e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	d106      	bne.n	8009626 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7f7 fe39 	bl	8001298 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	3308      	adds	r3, #8
 800962e:	4619      	mov	r1, r3
 8009630:	4610      	mov	r0, r2
 8009632:	f000 fb37 	bl	8009ca4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	461a      	mov	r2, r3
 8009640:	68b9      	ldr	r1, [r7, #8]
 8009642:	f000 fb99 	bl	8009d78 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6858      	ldr	r0, [r3, #4]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	689a      	ldr	r2, [r3, #8]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	f000 fbc4 	bl	8009de0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	6892      	ldr	r2, [r2, #8]
 8009660:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68fa      	ldr	r2, [r7, #12]
 800966a:	6892      	ldr	r2, [r2, #8]
 800966c:	f041 0101 	orr.w	r1, r1, #1
 8009670:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b082      	sub	sp, #8
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e03f      	b.n	8009718 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d106      	bne.n	80096b2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7fd fbf5 	bl	8006e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2224      	movs	r2, #36	; 0x24
 80096b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68da      	ldr	r2, [r3, #12]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096c8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa5c 	bl	8009b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	691a      	ldr	r2, [r3, #16]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096de:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	695a      	ldr	r2, [r3, #20]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096ee:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096fe:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2220      	movs	r2, #32
 800970a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2220      	movs	r2, #32
 8009712:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b088      	sub	sp, #32
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	68db      	ldr	r3, [r3, #12]
 8009736:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	695b      	ldr	r3, [r3, #20]
 800973e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009740:	2300      	movs	r3, #0
 8009742:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009744:	2300      	movs	r3, #0
 8009746:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	f003 030f 	and.w	r3, r3, #15
 800974e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10d      	bne.n	8009772 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	f003 0320 	and.w	r3, r3, #32
 800975c:	2b00      	cmp	r3, #0
 800975e:	d008      	beq.n	8009772 <HAL_UART_IRQHandler+0x52>
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	f003 0320 	and.w	r3, r3, #32
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f98b 	bl	8009a86 <UART_Receive_IT>
      return;
 8009770:	e0d0      	b.n	8009914 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 80b0 	beq.w	80098da <HAL_UART_IRQHandler+0x1ba>
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f003 0301 	and.w	r3, r3, #1
 8009780:	2b00      	cmp	r3, #0
 8009782:	d105      	bne.n	8009790 <HAL_UART_IRQHandler+0x70>
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800978a:	2b00      	cmp	r3, #0
 800978c:	f000 80a5 	beq.w	80098da <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00a      	beq.n	80097b0 <HAL_UART_IRQHandler+0x90>
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d005      	beq.n	80097b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a8:	f043 0201 	orr.w	r2, r3, #1
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	f003 0304 	and.w	r3, r3, #4
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00a      	beq.n	80097d0 <HAL_UART_IRQHandler+0xb0>
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d005      	beq.n	80097d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097c8:	f043 0202 	orr.w	r2, r3, #2
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	f003 0302 	and.w	r3, r3, #2
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00a      	beq.n	80097f0 <HAL_UART_IRQHandler+0xd0>
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d005      	beq.n	80097f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097e8:	f043 0204 	orr.w	r2, r3, #4
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80097f0:	69fb      	ldr	r3, [r7, #28]
 80097f2:	f003 0308 	and.w	r3, r3, #8
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00f      	beq.n	800981a <HAL_UART_IRQHandler+0xfa>
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	f003 0320 	and.w	r3, r3, #32
 8009800:	2b00      	cmp	r3, #0
 8009802:	d104      	bne.n	800980e <HAL_UART_IRQHandler+0xee>
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	d005      	beq.n	800981a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009812:	f043 0208 	orr.w	r2, r3, #8
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800981e:	2b00      	cmp	r3, #0
 8009820:	d077      	beq.n	8009912 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	f003 0320 	and.w	r3, r3, #32
 8009828:	2b00      	cmp	r3, #0
 800982a:	d007      	beq.n	800983c <HAL_UART_IRQHandler+0x11c>
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	f003 0320 	and.w	r3, r3, #32
 8009832:	2b00      	cmp	r3, #0
 8009834:	d002      	beq.n	800983c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f925 	bl	8009a86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	695b      	ldr	r3, [r3, #20]
 8009842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009846:	2b00      	cmp	r3, #0
 8009848:	bf14      	ite	ne
 800984a:	2301      	movne	r3, #1
 800984c:	2300      	moveq	r3, #0
 800984e:	b2db      	uxtb	r3, r3
 8009850:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009856:	f003 0308 	and.w	r3, r3, #8
 800985a:	2b00      	cmp	r3, #0
 800985c:	d102      	bne.n	8009864 <HAL_UART_IRQHandler+0x144>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d031      	beq.n	80098c8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f876 	bl	8009956 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	695b      	ldr	r3, [r3, #20]
 8009870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009874:	2b00      	cmp	r3, #0
 8009876:	d023      	beq.n	80098c0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	695a      	ldr	r2, [r3, #20]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009886:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988c:	2b00      	cmp	r3, #0
 800988e:	d013      	beq.n	80098b8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009894:	4a21      	ldr	r2, [pc, #132]	; (800991c <HAL_UART_IRQHandler+0x1fc>)
 8009896:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800989c:	4618      	mov	r0, r3
 800989e:	f7fd fd0b 	bl	80072b8 <HAL_DMA_Abort_IT>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d016      	beq.n	80098d6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80098b2:	4610      	mov	r0, r2
 80098b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b6:	e00e      	b.n	80098d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 f843 	bl	8009944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098be:	e00a      	b.n	80098d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f83f 	bl	8009944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c6:	e006      	b.n	80098d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f000 f83b 	bl	8009944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80098d4:	e01d      	b.n	8009912 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d6:	bf00      	nop
    return;
 80098d8:	e01b      	b.n	8009912 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d008      	beq.n	80098f6 <HAL_UART_IRQHandler+0x1d6>
 80098e4:	69bb      	ldr	r3, [r7, #24]
 80098e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f862 	bl	80099b8 <UART_Transmit_IT>
    return;
 80098f4:	e00e      	b.n	8009914 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d009      	beq.n	8009914 <HAL_UART_IRQHandler+0x1f4>
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009906:	2b00      	cmp	r3, #0
 8009908:	d004      	beq.n	8009914 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f8a3 	bl	8009a56 <UART_EndTransmit_IT>
    return;
 8009910:	e000      	b.n	8009914 <HAL_UART_IRQHandler+0x1f4>
    return;
 8009912:	bf00      	nop
  }
}
 8009914:	3720      	adds	r7, #32
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	08009991 	.word	0x08009991

08009920 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009928:	bf00      	nop
 800992a:	370c      	adds	r7, #12
 800992c:	46bd      	mov	sp, r7
 800992e:	bc80      	pop	{r7}
 8009930:	4770      	bx	lr

08009932 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009932:	b480      	push	{r7}
 8009934:	b083      	sub	sp, #12
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800993a:	bf00      	nop
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	bc80      	pop	{r7}
 8009942:	4770      	bx	lr

08009944 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800994c:	bf00      	nop
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	bc80      	pop	{r7}
 8009954:	4770      	bx	lr

08009956 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68da      	ldr	r2, [r3, #12]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800996c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	695a      	ldr	r2, [r3, #20]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f022 0201 	bic.w	r2, r2, #1
 800997c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2220      	movs	r2, #32
 8009982:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8009986:	bf00      	nop
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	bc80      	pop	{r7}
 800998e:	4770      	bx	lr

08009990 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2200      	movs	r2, #0
 80099a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f7ff ffca 	bl	8009944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099b0:	bf00      	nop
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	2b21      	cmp	r3, #33	; 0x21
 80099ca:	d13e      	bne.n	8009a4a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d4:	d114      	bne.n	8009a00 <UART_Transmit_IT+0x48>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d110      	bne.n	8009a00 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	881b      	ldrh	r3, [r3, #0]
 80099e8:	461a      	mov	r2, r3
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
 80099f8:	1c9a      	adds	r2, r3, #2
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	621a      	str	r2, [r3, #32]
 80099fe:	e008      	b.n	8009a12 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6a1b      	ldr	r3, [r3, #32]
 8009a04:	1c59      	adds	r1, r3, #1
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	6211      	str	r1, [r2, #32]
 8009a0a:	781a      	ldrb	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	4619      	mov	r1, r3
 8009a20:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10f      	bne.n	8009a46 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68da      	ldr	r2, [r3, #12]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	e000      	b.n	8009a4c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009a4a:	2302      	movs	r3, #2
  }
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bc80      	pop	{r7}
 8009a54:	4770      	bx	lr

08009a56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68da      	ldr	r2, [r3, #12]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2220      	movs	r2, #32
 8009a72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7ff ff52 	bl	8009920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	2b22      	cmp	r3, #34	; 0x22
 8009a98:	d170      	bne.n	8009b7c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aa2:	d117      	bne.n	8009ad4 <UART_Receive_IT+0x4e>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d113      	bne.n	8009ad4 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8009aac:	2300      	movs	r3, #0
 8009aae:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab4:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	685b      	ldr	r3, [r3, #4]
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009acc:	1c9a      	adds	r2, r3, #2
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8009ad2:	e026      	b.n	8009b22 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad8:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ae6:	d007      	beq.n	8009af8 <UART_Receive_IT+0x72>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d10a      	bne.n	8009b06 <UART_Receive_IT+0x80>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d106      	bne.n	8009b06 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	701a      	strb	r2, [r3, #0]
 8009b04:	e008      	b.n	8009b18 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1c:	1c5a      	adds	r2, r3, #1
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	3b01      	subs	r3, #1
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	4619      	mov	r1, r3
 8009b30:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d120      	bne.n	8009b78 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	68da      	ldr	r2, [r3, #12]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f022 0220 	bic.w	r2, r2, #32
 8009b44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	68da      	ldr	r2, [r3, #12]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	695a      	ldr	r2, [r3, #20]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 0201 	bic.w	r2, r2, #1
 8009b64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2220      	movs	r2, #32
 8009b6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7ff fedf 	bl	8009932 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	e002      	b.n	8009b7e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	e000      	b.n	8009b7e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8009b7c:	2302      	movs	r3, #2
  }
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	68da      	ldr	r2, [r3, #12]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	430a      	orrs	r2, r1
 8009ba4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	689a      	ldr	r2, [r3, #8]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	691b      	ldr	r3, [r3, #16]
 8009bae:	431a      	orrs	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	695b      	ldr	r3, [r3, #20]
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	68db      	ldr	r3, [r3, #12]
 8009bbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009bc2:	f023 030c 	bic.w	r3, r3, #12
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	6812      	ldr	r2, [r2, #0]
 8009bca:	68b9      	ldr	r1, [r7, #8]
 8009bcc:	430b      	orrs	r3, r1
 8009bce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	699a      	ldr	r2, [r3, #24]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	430a      	orrs	r2, r1
 8009be4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a2c      	ldr	r2, [pc, #176]	; (8009c9c <UART_SetConfig+0x114>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d103      	bne.n	8009bf8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009bf0:	f7ff f9fe 	bl	8008ff0 <HAL_RCC_GetPCLK2Freq>
 8009bf4:	60f8      	str	r0, [r7, #12]
 8009bf6:	e002      	b.n	8009bfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009bf8:	f7ff f9e6 	bl	8008fc8 <HAL_RCC_GetPCLK1Freq>
 8009bfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	4613      	mov	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4413      	add	r3, r2
 8009c06:	009a      	lsls	r2, r3, #2
 8009c08:	441a      	add	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c14:	4a22      	ldr	r2, [pc, #136]	; (8009ca0 <UART_SetConfig+0x118>)
 8009c16:	fba2 2303 	umull	r2, r3, r2, r3
 8009c1a:	095b      	lsrs	r3, r3, #5
 8009c1c:	0119      	lsls	r1, r3, #4
 8009c1e:	68fa      	ldr	r2, [r7, #12]
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009a      	lsls	r2, r3, #2
 8009c28:	441a      	add	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	685b      	ldr	r3, [r3, #4]
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c34:	4b1a      	ldr	r3, [pc, #104]	; (8009ca0 <UART_SetConfig+0x118>)
 8009c36:	fba3 0302 	umull	r0, r3, r3, r2
 8009c3a:	095b      	lsrs	r3, r3, #5
 8009c3c:	2064      	movs	r0, #100	; 0x64
 8009c3e:	fb00 f303 	mul.w	r3, r0, r3
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	011b      	lsls	r3, r3, #4
 8009c46:	3332      	adds	r3, #50	; 0x32
 8009c48:	4a15      	ldr	r2, [pc, #84]	; (8009ca0 <UART_SetConfig+0x118>)
 8009c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c4e:	095b      	lsrs	r3, r3, #5
 8009c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c54:	4419      	add	r1, r3
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	4613      	mov	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4413      	add	r3, r2
 8009c5e:	009a      	lsls	r2, r3, #2
 8009c60:	441a      	add	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c6c:	4b0c      	ldr	r3, [pc, #48]	; (8009ca0 <UART_SetConfig+0x118>)
 8009c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8009c72:	095b      	lsrs	r3, r3, #5
 8009c74:	2064      	movs	r0, #100	; 0x64
 8009c76:	fb00 f303 	mul.w	r3, r0, r3
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	011b      	lsls	r3, r3, #4
 8009c7e:	3332      	adds	r3, #50	; 0x32
 8009c80:	4a07      	ldr	r2, [pc, #28]	; (8009ca0 <UART_SetConfig+0x118>)
 8009c82:	fba2 2303 	umull	r2, r3, r2, r3
 8009c86:	095b      	lsrs	r3, r3, #5
 8009c88:	f003 020f 	and.w	r2, r3, #15
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	440a      	add	r2, r1
 8009c92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009c94:	bf00      	nop
 8009c96:	3710      	adds	r7, #16
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	40013800 	.word	0x40013800
 8009ca0:	51eb851f 	.word	0x51eb851f

08009ca4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b087      	sub	sp, #28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	6812      	ldr	r2, [r2, #0]
 8009cbc:	f023 0101 	bic.w	r1, r3, #1
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	689b      	ldr	r3, [r3, #8]
 8009cca:	2b08      	cmp	r3, #8
 8009ccc:	d102      	bne.n	8009cd4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009cce:	2340      	movs	r3, #64	; 0x40
 8009cd0:	617b      	str	r3, [r7, #20]
 8009cd2:	e001      	b.n	8009cd8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009ce4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009cea:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009cf0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009cf6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8009cfc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8009d02:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8009d08:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8009d0e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8009d14:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	4313      	orrs	r3, r2
 8009d26:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d2c:	693a      	ldr	r2, [r7, #16]
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8009d32:	4b10      	ldr	r3, [pc, #64]	; (8009d74 <FSMC_NORSRAM_Init+0xd0>)
 8009d34:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d3c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009d44:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	43db      	mvns	r3, r3
 8009d54:	ea02 0103 	and.w	r1, r2, r3
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	4319      	orrs	r1, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	371c      	adds	r7, #28
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bc80      	pop	{r7}
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	0008fb7f 	.word	0x0008fb7f

08009d78 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b085      	sub	sp, #20
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	1c5a      	adds	r2, r3, #1
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d8e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	011b      	lsls	r3, r3, #4
 8009d9c:	431a      	orrs	r2, r3
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	021b      	lsls	r3, r3, #8
 8009da4:	431a      	orrs	r2, r3
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	041b      	lsls	r3, r3, #16
 8009dac:	431a      	orrs	r2, r3
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	3b01      	subs	r3, #1
 8009db4:	051b      	lsls	r3, r3, #20
 8009db6:	431a      	orrs	r2, r3
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	3b02      	subs	r3, #2
 8009dbe:	061b      	lsls	r3, r3, #24
 8009dc0:	431a      	orrs	r2, r3
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	3201      	adds	r2, #1
 8009dcc:	4319      	orrs	r1, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3714      	adds	r7, #20
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bc80      	pop	{r7}
 8009dde:	4770      	bx	lr

08009de0 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
 8009dec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009df4:	d11d      	bne.n	8009e32 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009dfe:	4b13      	ldr	r3, [pc, #76]	; (8009e4c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009e00:	4013      	ands	r3, r2
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	6811      	ldr	r1, [r2, #0]
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	6852      	ldr	r2, [r2, #4]
 8009e0a:	0112      	lsls	r2, r2, #4
 8009e0c:	4311      	orrs	r1, r2
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	6892      	ldr	r2, [r2, #8]
 8009e12:	0212      	lsls	r2, r2, #8
 8009e14:	4311      	orrs	r1, r2
 8009e16:	68ba      	ldr	r2, [r7, #8]
 8009e18:	6992      	ldr	r2, [r2, #24]
 8009e1a:	4311      	orrs	r1, r2
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	68d2      	ldr	r2, [r2, #12]
 8009e20:	0412      	lsls	r2, r2, #16
 8009e22:	430a      	orrs	r2, r1
 8009e24:	ea43 0102 	orr.w	r1, r3, r2
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009e30:	e005      	b.n	8009e3e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bc80      	pop	{r7}
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	cff00000 	.word	0xcff00000

08009e50 <__errno>:
 8009e50:	4b01      	ldr	r3, [pc, #4]	; (8009e58 <__errno+0x8>)
 8009e52:	6818      	ldr	r0, [r3, #0]
 8009e54:	4770      	bx	lr
 8009e56:	bf00      	nop
 8009e58:	20000010 	.word	0x20000010

08009e5c <__libc_init_array>:
 8009e5c:	b570      	push	{r4, r5, r6, lr}
 8009e5e:	2600      	movs	r6, #0
 8009e60:	4d0c      	ldr	r5, [pc, #48]	; (8009e94 <__libc_init_array+0x38>)
 8009e62:	4c0d      	ldr	r4, [pc, #52]	; (8009e98 <__libc_init_array+0x3c>)
 8009e64:	1b64      	subs	r4, r4, r5
 8009e66:	10a4      	asrs	r4, r4, #2
 8009e68:	42a6      	cmp	r6, r4
 8009e6a:	d109      	bne.n	8009e80 <__libc_init_array+0x24>
 8009e6c:	f002 fd0e 	bl	800c88c <_init>
 8009e70:	2600      	movs	r6, #0
 8009e72:	4d0a      	ldr	r5, [pc, #40]	; (8009e9c <__libc_init_array+0x40>)
 8009e74:	4c0a      	ldr	r4, [pc, #40]	; (8009ea0 <__libc_init_array+0x44>)
 8009e76:	1b64      	subs	r4, r4, r5
 8009e78:	10a4      	asrs	r4, r4, #2
 8009e7a:	42a6      	cmp	r6, r4
 8009e7c:	d105      	bne.n	8009e8a <__libc_init_array+0x2e>
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
 8009e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e84:	4798      	blx	r3
 8009e86:	3601      	adds	r6, #1
 8009e88:	e7ee      	b.n	8009e68 <__libc_init_array+0xc>
 8009e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e8e:	4798      	blx	r3
 8009e90:	3601      	adds	r6, #1
 8009e92:	e7f2      	b.n	8009e7a <__libc_init_array+0x1e>
 8009e94:	0800e524 	.word	0x0800e524
 8009e98:	0800e524 	.word	0x0800e524
 8009e9c:	0800e524 	.word	0x0800e524
 8009ea0:	0800e528 	.word	0x0800e528

08009ea4 <memset>:
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	4402      	add	r2, r0
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d100      	bne.n	8009eae <memset+0xa>
 8009eac:	4770      	bx	lr
 8009eae:	f803 1b01 	strb.w	r1, [r3], #1
 8009eb2:	e7f9      	b.n	8009ea8 <memset+0x4>

08009eb4 <__cvt>:
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009eba:	461f      	mov	r7, r3
 8009ebc:	bfbb      	ittet	lt
 8009ebe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009ec2:	461f      	movlt	r7, r3
 8009ec4:	2300      	movge	r3, #0
 8009ec6:	232d      	movlt	r3, #45	; 0x2d
 8009ec8:	b088      	sub	sp, #32
 8009eca:	4614      	mov	r4, r2
 8009ecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ece:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009ed0:	7013      	strb	r3, [r2, #0]
 8009ed2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ed4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009ed8:	f023 0820 	bic.w	r8, r3, #32
 8009edc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ee0:	d005      	beq.n	8009eee <__cvt+0x3a>
 8009ee2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009ee6:	d100      	bne.n	8009eea <__cvt+0x36>
 8009ee8:	3501      	adds	r5, #1
 8009eea:	2302      	movs	r3, #2
 8009eec:	e000      	b.n	8009ef0 <__cvt+0x3c>
 8009eee:	2303      	movs	r3, #3
 8009ef0:	aa07      	add	r2, sp, #28
 8009ef2:	9204      	str	r2, [sp, #16]
 8009ef4:	aa06      	add	r2, sp, #24
 8009ef6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8009efa:	e9cd 3500 	strd	r3, r5, [sp]
 8009efe:	4622      	mov	r2, r4
 8009f00:	463b      	mov	r3, r7
 8009f02:	f000 fcdd 	bl	800a8c0 <_dtoa_r>
 8009f06:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	d102      	bne.n	8009f14 <__cvt+0x60>
 8009f0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f10:	07db      	lsls	r3, r3, #31
 8009f12:	d522      	bpl.n	8009f5a <__cvt+0xa6>
 8009f14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f18:	eb06 0905 	add.w	r9, r6, r5
 8009f1c:	d110      	bne.n	8009f40 <__cvt+0x8c>
 8009f1e:	7833      	ldrb	r3, [r6, #0]
 8009f20:	2b30      	cmp	r3, #48	; 0x30
 8009f22:	d10a      	bne.n	8009f3a <__cvt+0x86>
 8009f24:	2200      	movs	r2, #0
 8009f26:	2300      	movs	r3, #0
 8009f28:	4620      	mov	r0, r4
 8009f2a:	4639      	mov	r1, r7
 8009f2c:	f7f6 fda8 	bl	8000a80 <__aeabi_dcmpeq>
 8009f30:	b918      	cbnz	r0, 8009f3a <__cvt+0x86>
 8009f32:	f1c5 0501 	rsb	r5, r5, #1
 8009f36:	f8ca 5000 	str.w	r5, [sl]
 8009f3a:	f8da 3000 	ldr.w	r3, [sl]
 8009f3e:	4499      	add	r9, r3
 8009f40:	2200      	movs	r2, #0
 8009f42:	2300      	movs	r3, #0
 8009f44:	4620      	mov	r0, r4
 8009f46:	4639      	mov	r1, r7
 8009f48:	f7f6 fd9a 	bl	8000a80 <__aeabi_dcmpeq>
 8009f4c:	b108      	cbz	r0, 8009f52 <__cvt+0x9e>
 8009f4e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009f52:	2230      	movs	r2, #48	; 0x30
 8009f54:	9b07      	ldr	r3, [sp, #28]
 8009f56:	454b      	cmp	r3, r9
 8009f58:	d307      	bcc.n	8009f6a <__cvt+0xb6>
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	9b07      	ldr	r3, [sp, #28]
 8009f5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f60:	1b9b      	subs	r3, r3, r6
 8009f62:	6013      	str	r3, [r2, #0]
 8009f64:	b008      	add	sp, #32
 8009f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f6a:	1c59      	adds	r1, r3, #1
 8009f6c:	9107      	str	r1, [sp, #28]
 8009f6e:	701a      	strb	r2, [r3, #0]
 8009f70:	e7f0      	b.n	8009f54 <__cvt+0xa0>

08009f72 <__exponent>:
 8009f72:	4603      	mov	r3, r0
 8009f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f76:	2900      	cmp	r1, #0
 8009f78:	f803 2b02 	strb.w	r2, [r3], #2
 8009f7c:	bfb6      	itet	lt
 8009f7e:	222d      	movlt	r2, #45	; 0x2d
 8009f80:	222b      	movge	r2, #43	; 0x2b
 8009f82:	4249      	neglt	r1, r1
 8009f84:	2909      	cmp	r1, #9
 8009f86:	7042      	strb	r2, [r0, #1]
 8009f88:	dd2b      	ble.n	8009fe2 <__exponent+0x70>
 8009f8a:	f10d 0407 	add.w	r4, sp, #7
 8009f8e:	46a4      	mov	ip, r4
 8009f90:	270a      	movs	r7, #10
 8009f92:	fb91 f6f7 	sdiv	r6, r1, r7
 8009f96:	460a      	mov	r2, r1
 8009f98:	46a6      	mov	lr, r4
 8009f9a:	fb07 1516 	mls	r5, r7, r6, r1
 8009f9e:	2a63      	cmp	r2, #99	; 0x63
 8009fa0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	f104 34ff 	add.w	r4, r4, #4294967295
 8009faa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009fae:	dcf0      	bgt.n	8009f92 <__exponent+0x20>
 8009fb0:	3130      	adds	r1, #48	; 0x30
 8009fb2:	f1ae 0502 	sub.w	r5, lr, #2
 8009fb6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009fba:	4629      	mov	r1, r5
 8009fbc:	1c44      	adds	r4, r0, #1
 8009fbe:	4561      	cmp	r1, ip
 8009fc0:	d30a      	bcc.n	8009fd8 <__exponent+0x66>
 8009fc2:	f10d 0209 	add.w	r2, sp, #9
 8009fc6:	eba2 020e 	sub.w	r2, r2, lr
 8009fca:	4565      	cmp	r5, ip
 8009fcc:	bf88      	it	hi
 8009fce:	2200      	movhi	r2, #0
 8009fd0:	4413      	add	r3, r2
 8009fd2:	1a18      	subs	r0, r3, r0
 8009fd4:	b003      	add	sp, #12
 8009fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fdc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009fe0:	e7ed      	b.n	8009fbe <__exponent+0x4c>
 8009fe2:	2330      	movs	r3, #48	; 0x30
 8009fe4:	3130      	adds	r1, #48	; 0x30
 8009fe6:	7083      	strb	r3, [r0, #2]
 8009fe8:	70c1      	strb	r1, [r0, #3]
 8009fea:	1d03      	adds	r3, r0, #4
 8009fec:	e7f1      	b.n	8009fd2 <__exponent+0x60>
	...

08009ff0 <_printf_float>:
 8009ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff4:	b091      	sub	sp, #68	; 0x44
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009ffc:	4616      	mov	r6, r2
 8009ffe:	461f      	mov	r7, r3
 800a000:	4605      	mov	r5, r0
 800a002:	f001 fb41 	bl	800b688 <_localeconv_r>
 800a006:	6803      	ldr	r3, [r0, #0]
 800a008:	4618      	mov	r0, r3
 800a00a:	9309      	str	r3, [sp, #36]	; 0x24
 800a00c:	f7f6 f90c 	bl	8000228 <strlen>
 800a010:	2300      	movs	r3, #0
 800a012:	930e      	str	r3, [sp, #56]	; 0x38
 800a014:	f8d8 3000 	ldr.w	r3, [r8]
 800a018:	900a      	str	r0, [sp, #40]	; 0x28
 800a01a:	3307      	adds	r3, #7
 800a01c:	f023 0307 	bic.w	r3, r3, #7
 800a020:	f103 0208 	add.w	r2, r3, #8
 800a024:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a028:	f8d4 b000 	ldr.w	fp, [r4]
 800a02c:	f8c8 2000 	str.w	r2, [r8]
 800a030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a034:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a038:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800a03c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a040:	930b      	str	r3, [sp, #44]	; 0x2c
 800a042:	f04f 32ff 	mov.w	r2, #4294967295
 800a046:	4640      	mov	r0, r8
 800a048:	4b9c      	ldr	r3, [pc, #624]	; (800a2bc <_printf_float+0x2cc>)
 800a04a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a04c:	f7f6 fd4a 	bl	8000ae4 <__aeabi_dcmpun>
 800a050:	bb70      	cbnz	r0, 800a0b0 <_printf_float+0xc0>
 800a052:	f04f 32ff 	mov.w	r2, #4294967295
 800a056:	4640      	mov	r0, r8
 800a058:	4b98      	ldr	r3, [pc, #608]	; (800a2bc <_printf_float+0x2cc>)
 800a05a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a05c:	f7f6 fd24 	bl	8000aa8 <__aeabi_dcmple>
 800a060:	bb30      	cbnz	r0, 800a0b0 <_printf_float+0xc0>
 800a062:	2200      	movs	r2, #0
 800a064:	2300      	movs	r3, #0
 800a066:	4640      	mov	r0, r8
 800a068:	4651      	mov	r1, sl
 800a06a:	f7f6 fd13 	bl	8000a94 <__aeabi_dcmplt>
 800a06e:	b110      	cbz	r0, 800a076 <_printf_float+0x86>
 800a070:	232d      	movs	r3, #45	; 0x2d
 800a072:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a076:	4b92      	ldr	r3, [pc, #584]	; (800a2c0 <_printf_float+0x2d0>)
 800a078:	4892      	ldr	r0, [pc, #584]	; (800a2c4 <_printf_float+0x2d4>)
 800a07a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a07e:	bf94      	ite	ls
 800a080:	4698      	movls	r8, r3
 800a082:	4680      	movhi	r8, r0
 800a084:	2303      	movs	r3, #3
 800a086:	f04f 0a00 	mov.w	sl, #0
 800a08a:	6123      	str	r3, [r4, #16]
 800a08c:	f02b 0304 	bic.w	r3, fp, #4
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	4633      	mov	r3, r6
 800a094:	4621      	mov	r1, r4
 800a096:	4628      	mov	r0, r5
 800a098:	9700      	str	r7, [sp, #0]
 800a09a:	aa0f      	add	r2, sp, #60	; 0x3c
 800a09c:	f000 f9d4 	bl	800a448 <_printf_common>
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	f040 8090 	bne.w	800a1c6 <_printf_float+0x1d6>
 800a0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0aa:	b011      	add	sp, #68	; 0x44
 800a0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b0:	4642      	mov	r2, r8
 800a0b2:	4653      	mov	r3, sl
 800a0b4:	4640      	mov	r0, r8
 800a0b6:	4651      	mov	r1, sl
 800a0b8:	f7f6 fd14 	bl	8000ae4 <__aeabi_dcmpun>
 800a0bc:	b148      	cbz	r0, 800a0d2 <_printf_float+0xe2>
 800a0be:	f1ba 0f00 	cmp.w	sl, #0
 800a0c2:	bfb8      	it	lt
 800a0c4:	232d      	movlt	r3, #45	; 0x2d
 800a0c6:	4880      	ldr	r0, [pc, #512]	; (800a2c8 <_printf_float+0x2d8>)
 800a0c8:	bfb8      	it	lt
 800a0ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a0ce:	4b7f      	ldr	r3, [pc, #508]	; (800a2cc <_printf_float+0x2dc>)
 800a0d0:	e7d3      	b.n	800a07a <_printf_float+0x8a>
 800a0d2:	6863      	ldr	r3, [r4, #4]
 800a0d4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a0d8:	1c5a      	adds	r2, r3, #1
 800a0da:	d142      	bne.n	800a162 <_printf_float+0x172>
 800a0dc:	2306      	movs	r3, #6
 800a0de:	6063      	str	r3, [r4, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	9206      	str	r2, [sp, #24]
 800a0e4:	aa0e      	add	r2, sp, #56	; 0x38
 800a0e6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a0ea:	aa0d      	add	r2, sp, #52	; 0x34
 800a0ec:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a0f0:	9203      	str	r2, [sp, #12]
 800a0f2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a0f6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a0fa:	6023      	str	r3, [r4, #0]
 800a0fc:	6863      	ldr	r3, [r4, #4]
 800a0fe:	4642      	mov	r2, r8
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	4628      	mov	r0, r5
 800a104:	4653      	mov	r3, sl
 800a106:	910b      	str	r1, [sp, #44]	; 0x2c
 800a108:	f7ff fed4 	bl	8009eb4 <__cvt>
 800a10c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a10e:	4680      	mov	r8, r0
 800a110:	2947      	cmp	r1, #71	; 0x47
 800a112:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a114:	d108      	bne.n	800a128 <_printf_float+0x138>
 800a116:	1cc8      	adds	r0, r1, #3
 800a118:	db02      	blt.n	800a120 <_printf_float+0x130>
 800a11a:	6863      	ldr	r3, [r4, #4]
 800a11c:	4299      	cmp	r1, r3
 800a11e:	dd40      	ble.n	800a1a2 <_printf_float+0x1b2>
 800a120:	f1a9 0902 	sub.w	r9, r9, #2
 800a124:	fa5f f989 	uxtb.w	r9, r9
 800a128:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a12c:	d81f      	bhi.n	800a16e <_printf_float+0x17e>
 800a12e:	464a      	mov	r2, r9
 800a130:	3901      	subs	r1, #1
 800a132:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a136:	910d      	str	r1, [sp, #52]	; 0x34
 800a138:	f7ff ff1b 	bl	8009f72 <__exponent>
 800a13c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a13e:	4682      	mov	sl, r0
 800a140:	1813      	adds	r3, r2, r0
 800a142:	2a01      	cmp	r2, #1
 800a144:	6123      	str	r3, [r4, #16]
 800a146:	dc02      	bgt.n	800a14e <_printf_float+0x15e>
 800a148:	6822      	ldr	r2, [r4, #0]
 800a14a:	07d2      	lsls	r2, r2, #31
 800a14c:	d501      	bpl.n	800a152 <_printf_float+0x162>
 800a14e:	3301      	adds	r3, #1
 800a150:	6123      	str	r3, [r4, #16]
 800a152:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a156:	2b00      	cmp	r3, #0
 800a158:	d09b      	beq.n	800a092 <_printf_float+0xa2>
 800a15a:	232d      	movs	r3, #45	; 0x2d
 800a15c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a160:	e797      	b.n	800a092 <_printf_float+0xa2>
 800a162:	2947      	cmp	r1, #71	; 0x47
 800a164:	d1bc      	bne.n	800a0e0 <_printf_float+0xf0>
 800a166:	2b00      	cmp	r3, #0
 800a168:	d1ba      	bne.n	800a0e0 <_printf_float+0xf0>
 800a16a:	2301      	movs	r3, #1
 800a16c:	e7b7      	b.n	800a0de <_printf_float+0xee>
 800a16e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a172:	d118      	bne.n	800a1a6 <_printf_float+0x1b6>
 800a174:	2900      	cmp	r1, #0
 800a176:	6863      	ldr	r3, [r4, #4]
 800a178:	dd0b      	ble.n	800a192 <_printf_float+0x1a2>
 800a17a:	6121      	str	r1, [r4, #16]
 800a17c:	b913      	cbnz	r3, 800a184 <_printf_float+0x194>
 800a17e:	6822      	ldr	r2, [r4, #0]
 800a180:	07d0      	lsls	r0, r2, #31
 800a182:	d502      	bpl.n	800a18a <_printf_float+0x19a>
 800a184:	3301      	adds	r3, #1
 800a186:	440b      	add	r3, r1
 800a188:	6123      	str	r3, [r4, #16]
 800a18a:	f04f 0a00 	mov.w	sl, #0
 800a18e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a190:	e7df      	b.n	800a152 <_printf_float+0x162>
 800a192:	b913      	cbnz	r3, 800a19a <_printf_float+0x1aa>
 800a194:	6822      	ldr	r2, [r4, #0]
 800a196:	07d2      	lsls	r2, r2, #31
 800a198:	d501      	bpl.n	800a19e <_printf_float+0x1ae>
 800a19a:	3302      	adds	r3, #2
 800a19c:	e7f4      	b.n	800a188 <_printf_float+0x198>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e7f2      	b.n	800a188 <_printf_float+0x198>
 800a1a2:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a1a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1a8:	4299      	cmp	r1, r3
 800a1aa:	db05      	blt.n	800a1b8 <_printf_float+0x1c8>
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	6121      	str	r1, [r4, #16]
 800a1b0:	07d8      	lsls	r0, r3, #31
 800a1b2:	d5ea      	bpl.n	800a18a <_printf_float+0x19a>
 800a1b4:	1c4b      	adds	r3, r1, #1
 800a1b6:	e7e7      	b.n	800a188 <_printf_float+0x198>
 800a1b8:	2900      	cmp	r1, #0
 800a1ba:	bfcc      	ite	gt
 800a1bc:	2201      	movgt	r2, #1
 800a1be:	f1c1 0202 	rsble	r2, r1, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	e7e0      	b.n	800a188 <_printf_float+0x198>
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	055a      	lsls	r2, r3, #21
 800a1ca:	d407      	bmi.n	800a1dc <_printf_float+0x1ec>
 800a1cc:	6923      	ldr	r3, [r4, #16]
 800a1ce:	4642      	mov	r2, r8
 800a1d0:	4631      	mov	r1, r6
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	47b8      	blx	r7
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d12b      	bne.n	800a232 <_printf_float+0x242>
 800a1da:	e764      	b.n	800a0a6 <_printf_float+0xb6>
 800a1dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a1e0:	f240 80dd 	bls.w	800a39e <_printf_float+0x3ae>
 800a1e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f7f6 fc48 	bl	8000a80 <__aeabi_dcmpeq>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d033      	beq.n	800a25c <_printf_float+0x26c>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	4a35      	ldr	r2, [pc, #212]	; (800a2d0 <_printf_float+0x2e0>)
 800a1fc:	47b8      	blx	r7
 800a1fe:	3001      	adds	r0, #1
 800a200:	f43f af51 	beq.w	800a0a6 <_printf_float+0xb6>
 800a204:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a208:	429a      	cmp	r2, r3
 800a20a:	db02      	blt.n	800a212 <_printf_float+0x222>
 800a20c:	6823      	ldr	r3, [r4, #0]
 800a20e:	07d8      	lsls	r0, r3, #31
 800a210:	d50f      	bpl.n	800a232 <_printf_float+0x242>
 800a212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a216:	4631      	mov	r1, r6
 800a218:	4628      	mov	r0, r5
 800a21a:	47b8      	blx	r7
 800a21c:	3001      	adds	r0, #1
 800a21e:	f43f af42 	beq.w	800a0a6 <_printf_float+0xb6>
 800a222:	f04f 0800 	mov.w	r8, #0
 800a226:	f104 091a 	add.w	r9, r4, #26
 800a22a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a22c:	3b01      	subs	r3, #1
 800a22e:	4543      	cmp	r3, r8
 800a230:	dc09      	bgt.n	800a246 <_printf_float+0x256>
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	079b      	lsls	r3, r3, #30
 800a236:	f100 8102 	bmi.w	800a43e <_printf_float+0x44e>
 800a23a:	68e0      	ldr	r0, [r4, #12]
 800a23c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a23e:	4298      	cmp	r0, r3
 800a240:	bfb8      	it	lt
 800a242:	4618      	movlt	r0, r3
 800a244:	e731      	b.n	800a0aa <_printf_float+0xba>
 800a246:	2301      	movs	r3, #1
 800a248:	464a      	mov	r2, r9
 800a24a:	4631      	mov	r1, r6
 800a24c:	4628      	mov	r0, r5
 800a24e:	47b8      	blx	r7
 800a250:	3001      	adds	r0, #1
 800a252:	f43f af28 	beq.w	800a0a6 <_printf_float+0xb6>
 800a256:	f108 0801 	add.w	r8, r8, #1
 800a25a:	e7e6      	b.n	800a22a <_printf_float+0x23a>
 800a25c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a25e:	2b00      	cmp	r3, #0
 800a260:	dc38      	bgt.n	800a2d4 <_printf_float+0x2e4>
 800a262:	2301      	movs	r3, #1
 800a264:	4631      	mov	r1, r6
 800a266:	4628      	mov	r0, r5
 800a268:	4a19      	ldr	r2, [pc, #100]	; (800a2d0 <_printf_float+0x2e0>)
 800a26a:	47b8      	blx	r7
 800a26c:	3001      	adds	r0, #1
 800a26e:	f43f af1a 	beq.w	800a0a6 <_printf_float+0xb6>
 800a272:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a276:	4313      	orrs	r3, r2
 800a278:	d102      	bne.n	800a280 <_printf_float+0x290>
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	07d9      	lsls	r1, r3, #31
 800a27e:	d5d8      	bpl.n	800a232 <_printf_float+0x242>
 800a280:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a284:	4631      	mov	r1, r6
 800a286:	4628      	mov	r0, r5
 800a288:	47b8      	blx	r7
 800a28a:	3001      	adds	r0, #1
 800a28c:	f43f af0b 	beq.w	800a0a6 <_printf_float+0xb6>
 800a290:	f04f 0900 	mov.w	r9, #0
 800a294:	f104 0a1a 	add.w	sl, r4, #26
 800a298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a29a:	425b      	negs	r3, r3
 800a29c:	454b      	cmp	r3, r9
 800a29e:	dc01      	bgt.n	800a2a4 <_printf_float+0x2b4>
 800a2a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2a2:	e794      	b.n	800a1ce <_printf_float+0x1de>
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	4652      	mov	r2, sl
 800a2a8:	4631      	mov	r1, r6
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	47b8      	blx	r7
 800a2ae:	3001      	adds	r0, #1
 800a2b0:	f43f aef9 	beq.w	800a0a6 <_printf_float+0xb6>
 800a2b4:	f109 0901 	add.w	r9, r9, #1
 800a2b8:	e7ee      	b.n	800a298 <_printf_float+0x2a8>
 800a2ba:	bf00      	nop
 800a2bc:	7fefffff 	.word	0x7fefffff
 800a2c0:	0800e148 	.word	0x0800e148
 800a2c4:	0800e14c 	.word	0x0800e14c
 800a2c8:	0800e154 	.word	0x0800e154
 800a2cc:	0800e150 	.word	0x0800e150
 800a2d0:	0800e158 	.word	0x0800e158
 800a2d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a2d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	bfa8      	it	ge
 800a2dc:	461a      	movge	r2, r3
 800a2de:	2a00      	cmp	r2, #0
 800a2e0:	4691      	mov	r9, r2
 800a2e2:	dc37      	bgt.n	800a354 <_printf_float+0x364>
 800a2e4:	f04f 0b00 	mov.w	fp, #0
 800a2e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2ec:	f104 021a 	add.w	r2, r4, #26
 800a2f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a2f4:	ebaa 0309 	sub.w	r3, sl, r9
 800a2f8:	455b      	cmp	r3, fp
 800a2fa:	dc33      	bgt.n	800a364 <_printf_float+0x374>
 800a2fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a300:	429a      	cmp	r2, r3
 800a302:	db3b      	blt.n	800a37c <_printf_float+0x38c>
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	07da      	lsls	r2, r3, #31
 800a308:	d438      	bmi.n	800a37c <_printf_float+0x38c>
 800a30a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a30c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a30e:	eba2 030a 	sub.w	r3, r2, sl
 800a312:	eba2 0901 	sub.w	r9, r2, r1
 800a316:	4599      	cmp	r9, r3
 800a318:	bfa8      	it	ge
 800a31a:	4699      	movge	r9, r3
 800a31c:	f1b9 0f00 	cmp.w	r9, #0
 800a320:	dc34      	bgt.n	800a38c <_printf_float+0x39c>
 800a322:	f04f 0800 	mov.w	r8, #0
 800a326:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a32a:	f104 0a1a 	add.w	sl, r4, #26
 800a32e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a332:	1a9b      	subs	r3, r3, r2
 800a334:	eba3 0309 	sub.w	r3, r3, r9
 800a338:	4543      	cmp	r3, r8
 800a33a:	f77f af7a 	ble.w	800a232 <_printf_float+0x242>
 800a33e:	2301      	movs	r3, #1
 800a340:	4652      	mov	r2, sl
 800a342:	4631      	mov	r1, r6
 800a344:	4628      	mov	r0, r5
 800a346:	47b8      	blx	r7
 800a348:	3001      	adds	r0, #1
 800a34a:	f43f aeac 	beq.w	800a0a6 <_printf_float+0xb6>
 800a34e:	f108 0801 	add.w	r8, r8, #1
 800a352:	e7ec      	b.n	800a32e <_printf_float+0x33e>
 800a354:	4613      	mov	r3, r2
 800a356:	4631      	mov	r1, r6
 800a358:	4642      	mov	r2, r8
 800a35a:	4628      	mov	r0, r5
 800a35c:	47b8      	blx	r7
 800a35e:	3001      	adds	r0, #1
 800a360:	d1c0      	bne.n	800a2e4 <_printf_float+0x2f4>
 800a362:	e6a0      	b.n	800a0a6 <_printf_float+0xb6>
 800a364:	2301      	movs	r3, #1
 800a366:	4631      	mov	r1, r6
 800a368:	4628      	mov	r0, r5
 800a36a:	920b      	str	r2, [sp, #44]	; 0x2c
 800a36c:	47b8      	blx	r7
 800a36e:	3001      	adds	r0, #1
 800a370:	f43f ae99 	beq.w	800a0a6 <_printf_float+0xb6>
 800a374:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a376:	f10b 0b01 	add.w	fp, fp, #1
 800a37a:	e7b9      	b.n	800a2f0 <_printf_float+0x300>
 800a37c:	4631      	mov	r1, r6
 800a37e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a382:	4628      	mov	r0, r5
 800a384:	47b8      	blx	r7
 800a386:	3001      	adds	r0, #1
 800a388:	d1bf      	bne.n	800a30a <_printf_float+0x31a>
 800a38a:	e68c      	b.n	800a0a6 <_printf_float+0xb6>
 800a38c:	464b      	mov	r3, r9
 800a38e:	4631      	mov	r1, r6
 800a390:	4628      	mov	r0, r5
 800a392:	eb08 020a 	add.w	r2, r8, sl
 800a396:	47b8      	blx	r7
 800a398:	3001      	adds	r0, #1
 800a39a:	d1c2      	bne.n	800a322 <_printf_float+0x332>
 800a39c:	e683      	b.n	800a0a6 <_printf_float+0xb6>
 800a39e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3a0:	2a01      	cmp	r2, #1
 800a3a2:	dc01      	bgt.n	800a3a8 <_printf_float+0x3b8>
 800a3a4:	07db      	lsls	r3, r3, #31
 800a3a6:	d537      	bpl.n	800a418 <_printf_float+0x428>
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	4642      	mov	r2, r8
 800a3ac:	4631      	mov	r1, r6
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	47b8      	blx	r7
 800a3b2:	3001      	adds	r0, #1
 800a3b4:	f43f ae77 	beq.w	800a0a6 <_printf_float+0xb6>
 800a3b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3bc:	4631      	mov	r1, r6
 800a3be:	4628      	mov	r0, r5
 800a3c0:	47b8      	blx	r7
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	f43f ae6f 	beq.w	800a0a6 <_printf_float+0xb6>
 800a3c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f7f6 fb56 	bl	8000a80 <__aeabi_dcmpeq>
 800a3d4:	b9d8      	cbnz	r0, 800a40e <_printf_float+0x41e>
 800a3d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3d8:	f108 0201 	add.w	r2, r8, #1
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	4631      	mov	r1, r6
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	47b8      	blx	r7
 800a3e4:	3001      	adds	r0, #1
 800a3e6:	d10e      	bne.n	800a406 <_printf_float+0x416>
 800a3e8:	e65d      	b.n	800a0a6 <_printf_float+0xb6>
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	464a      	mov	r2, r9
 800a3ee:	4631      	mov	r1, r6
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	47b8      	blx	r7
 800a3f4:	3001      	adds	r0, #1
 800a3f6:	f43f ae56 	beq.w	800a0a6 <_printf_float+0xb6>
 800a3fa:	f108 0801 	add.w	r8, r8, #1
 800a3fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a400:	3b01      	subs	r3, #1
 800a402:	4543      	cmp	r3, r8
 800a404:	dcf1      	bgt.n	800a3ea <_printf_float+0x3fa>
 800a406:	4653      	mov	r3, sl
 800a408:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a40c:	e6e0      	b.n	800a1d0 <_printf_float+0x1e0>
 800a40e:	f04f 0800 	mov.w	r8, #0
 800a412:	f104 091a 	add.w	r9, r4, #26
 800a416:	e7f2      	b.n	800a3fe <_printf_float+0x40e>
 800a418:	2301      	movs	r3, #1
 800a41a:	4642      	mov	r2, r8
 800a41c:	e7df      	b.n	800a3de <_printf_float+0x3ee>
 800a41e:	2301      	movs	r3, #1
 800a420:	464a      	mov	r2, r9
 800a422:	4631      	mov	r1, r6
 800a424:	4628      	mov	r0, r5
 800a426:	47b8      	blx	r7
 800a428:	3001      	adds	r0, #1
 800a42a:	f43f ae3c 	beq.w	800a0a6 <_printf_float+0xb6>
 800a42e:	f108 0801 	add.w	r8, r8, #1
 800a432:	68e3      	ldr	r3, [r4, #12]
 800a434:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a436:	1a5b      	subs	r3, r3, r1
 800a438:	4543      	cmp	r3, r8
 800a43a:	dcf0      	bgt.n	800a41e <_printf_float+0x42e>
 800a43c:	e6fd      	b.n	800a23a <_printf_float+0x24a>
 800a43e:	f04f 0800 	mov.w	r8, #0
 800a442:	f104 0919 	add.w	r9, r4, #25
 800a446:	e7f4      	b.n	800a432 <_printf_float+0x442>

0800a448 <_printf_common>:
 800a448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a44c:	4616      	mov	r6, r2
 800a44e:	4699      	mov	r9, r3
 800a450:	688a      	ldr	r2, [r1, #8]
 800a452:	690b      	ldr	r3, [r1, #16]
 800a454:	4607      	mov	r7, r0
 800a456:	4293      	cmp	r3, r2
 800a458:	bfb8      	it	lt
 800a45a:	4613      	movlt	r3, r2
 800a45c:	6033      	str	r3, [r6, #0]
 800a45e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a462:	460c      	mov	r4, r1
 800a464:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a468:	b10a      	cbz	r2, 800a46e <_printf_common+0x26>
 800a46a:	3301      	adds	r3, #1
 800a46c:	6033      	str	r3, [r6, #0]
 800a46e:	6823      	ldr	r3, [r4, #0]
 800a470:	0699      	lsls	r1, r3, #26
 800a472:	bf42      	ittt	mi
 800a474:	6833      	ldrmi	r3, [r6, #0]
 800a476:	3302      	addmi	r3, #2
 800a478:	6033      	strmi	r3, [r6, #0]
 800a47a:	6825      	ldr	r5, [r4, #0]
 800a47c:	f015 0506 	ands.w	r5, r5, #6
 800a480:	d106      	bne.n	800a490 <_printf_common+0x48>
 800a482:	f104 0a19 	add.w	sl, r4, #25
 800a486:	68e3      	ldr	r3, [r4, #12]
 800a488:	6832      	ldr	r2, [r6, #0]
 800a48a:	1a9b      	subs	r3, r3, r2
 800a48c:	42ab      	cmp	r3, r5
 800a48e:	dc28      	bgt.n	800a4e2 <_printf_common+0x9a>
 800a490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a494:	1e13      	subs	r3, r2, #0
 800a496:	6822      	ldr	r2, [r4, #0]
 800a498:	bf18      	it	ne
 800a49a:	2301      	movne	r3, #1
 800a49c:	0692      	lsls	r2, r2, #26
 800a49e:	d42d      	bmi.n	800a4fc <_printf_common+0xb4>
 800a4a0:	4649      	mov	r1, r9
 800a4a2:	4638      	mov	r0, r7
 800a4a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4a8:	47c0      	blx	r8
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	d020      	beq.n	800a4f0 <_printf_common+0xa8>
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	68e5      	ldr	r5, [r4, #12]
 800a4b2:	f003 0306 	and.w	r3, r3, #6
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	bf18      	it	ne
 800a4ba:	2500      	movne	r5, #0
 800a4bc:	6832      	ldr	r2, [r6, #0]
 800a4be:	f04f 0600 	mov.w	r6, #0
 800a4c2:	68a3      	ldr	r3, [r4, #8]
 800a4c4:	bf08      	it	eq
 800a4c6:	1aad      	subeq	r5, r5, r2
 800a4c8:	6922      	ldr	r2, [r4, #16]
 800a4ca:	bf08      	it	eq
 800a4cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	bfc4      	itt	gt
 800a4d4:	1a9b      	subgt	r3, r3, r2
 800a4d6:	18ed      	addgt	r5, r5, r3
 800a4d8:	341a      	adds	r4, #26
 800a4da:	42b5      	cmp	r5, r6
 800a4dc:	d11a      	bne.n	800a514 <_printf_common+0xcc>
 800a4de:	2000      	movs	r0, #0
 800a4e0:	e008      	b.n	800a4f4 <_printf_common+0xac>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	4652      	mov	r2, sl
 800a4e6:	4649      	mov	r1, r9
 800a4e8:	4638      	mov	r0, r7
 800a4ea:	47c0      	blx	r8
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d103      	bne.n	800a4f8 <_printf_common+0xb0>
 800a4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4f8:	3501      	adds	r5, #1
 800a4fa:	e7c4      	b.n	800a486 <_printf_common+0x3e>
 800a4fc:	2030      	movs	r0, #48	; 0x30
 800a4fe:	18e1      	adds	r1, r4, r3
 800a500:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a504:	1c5a      	adds	r2, r3, #1
 800a506:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a50a:	4422      	add	r2, r4
 800a50c:	3302      	adds	r3, #2
 800a50e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a512:	e7c5      	b.n	800a4a0 <_printf_common+0x58>
 800a514:	2301      	movs	r3, #1
 800a516:	4622      	mov	r2, r4
 800a518:	4649      	mov	r1, r9
 800a51a:	4638      	mov	r0, r7
 800a51c:	47c0      	blx	r8
 800a51e:	3001      	adds	r0, #1
 800a520:	d0e6      	beq.n	800a4f0 <_printf_common+0xa8>
 800a522:	3601      	adds	r6, #1
 800a524:	e7d9      	b.n	800a4da <_printf_common+0x92>
	...

0800a528 <_printf_i>:
 800a528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a52c:	460c      	mov	r4, r1
 800a52e:	7e27      	ldrb	r7, [r4, #24]
 800a530:	4691      	mov	r9, r2
 800a532:	2f78      	cmp	r7, #120	; 0x78
 800a534:	4680      	mov	r8, r0
 800a536:	469a      	mov	sl, r3
 800a538:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a53a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a53e:	d807      	bhi.n	800a550 <_printf_i+0x28>
 800a540:	2f62      	cmp	r7, #98	; 0x62
 800a542:	d80a      	bhi.n	800a55a <_printf_i+0x32>
 800a544:	2f00      	cmp	r7, #0
 800a546:	f000 80d9 	beq.w	800a6fc <_printf_i+0x1d4>
 800a54a:	2f58      	cmp	r7, #88	; 0x58
 800a54c:	f000 80a4 	beq.w	800a698 <_printf_i+0x170>
 800a550:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a558:	e03a      	b.n	800a5d0 <_printf_i+0xa8>
 800a55a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a55e:	2b15      	cmp	r3, #21
 800a560:	d8f6      	bhi.n	800a550 <_printf_i+0x28>
 800a562:	a001      	add	r0, pc, #4	; (adr r0, 800a568 <_printf_i+0x40>)
 800a564:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a568:	0800a5c1 	.word	0x0800a5c1
 800a56c:	0800a5d5 	.word	0x0800a5d5
 800a570:	0800a551 	.word	0x0800a551
 800a574:	0800a551 	.word	0x0800a551
 800a578:	0800a551 	.word	0x0800a551
 800a57c:	0800a551 	.word	0x0800a551
 800a580:	0800a5d5 	.word	0x0800a5d5
 800a584:	0800a551 	.word	0x0800a551
 800a588:	0800a551 	.word	0x0800a551
 800a58c:	0800a551 	.word	0x0800a551
 800a590:	0800a551 	.word	0x0800a551
 800a594:	0800a6e3 	.word	0x0800a6e3
 800a598:	0800a605 	.word	0x0800a605
 800a59c:	0800a6c5 	.word	0x0800a6c5
 800a5a0:	0800a551 	.word	0x0800a551
 800a5a4:	0800a551 	.word	0x0800a551
 800a5a8:	0800a705 	.word	0x0800a705
 800a5ac:	0800a551 	.word	0x0800a551
 800a5b0:	0800a605 	.word	0x0800a605
 800a5b4:	0800a551 	.word	0x0800a551
 800a5b8:	0800a551 	.word	0x0800a551
 800a5bc:	0800a6cd 	.word	0x0800a6cd
 800a5c0:	680b      	ldr	r3, [r1, #0]
 800a5c2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a5c6:	1d1a      	adds	r2, r3, #4
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	600a      	str	r2, [r1, #0]
 800a5cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e0a4      	b.n	800a71e <_printf_i+0x1f6>
 800a5d4:	6825      	ldr	r5, [r4, #0]
 800a5d6:	6808      	ldr	r0, [r1, #0]
 800a5d8:	062e      	lsls	r6, r5, #24
 800a5da:	f100 0304 	add.w	r3, r0, #4
 800a5de:	d50a      	bpl.n	800a5f6 <_printf_i+0xce>
 800a5e0:	6805      	ldr	r5, [r0, #0]
 800a5e2:	600b      	str	r3, [r1, #0]
 800a5e4:	2d00      	cmp	r5, #0
 800a5e6:	da03      	bge.n	800a5f0 <_printf_i+0xc8>
 800a5e8:	232d      	movs	r3, #45	; 0x2d
 800a5ea:	426d      	negs	r5, r5
 800a5ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5f0:	230a      	movs	r3, #10
 800a5f2:	485e      	ldr	r0, [pc, #376]	; (800a76c <_printf_i+0x244>)
 800a5f4:	e019      	b.n	800a62a <_printf_i+0x102>
 800a5f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a5fa:	6805      	ldr	r5, [r0, #0]
 800a5fc:	600b      	str	r3, [r1, #0]
 800a5fe:	bf18      	it	ne
 800a600:	b22d      	sxthne	r5, r5
 800a602:	e7ef      	b.n	800a5e4 <_printf_i+0xbc>
 800a604:	680b      	ldr	r3, [r1, #0]
 800a606:	6825      	ldr	r5, [r4, #0]
 800a608:	1d18      	adds	r0, r3, #4
 800a60a:	6008      	str	r0, [r1, #0]
 800a60c:	0628      	lsls	r0, r5, #24
 800a60e:	d501      	bpl.n	800a614 <_printf_i+0xec>
 800a610:	681d      	ldr	r5, [r3, #0]
 800a612:	e002      	b.n	800a61a <_printf_i+0xf2>
 800a614:	0669      	lsls	r1, r5, #25
 800a616:	d5fb      	bpl.n	800a610 <_printf_i+0xe8>
 800a618:	881d      	ldrh	r5, [r3, #0]
 800a61a:	2f6f      	cmp	r7, #111	; 0x6f
 800a61c:	bf0c      	ite	eq
 800a61e:	2308      	moveq	r3, #8
 800a620:	230a      	movne	r3, #10
 800a622:	4852      	ldr	r0, [pc, #328]	; (800a76c <_printf_i+0x244>)
 800a624:	2100      	movs	r1, #0
 800a626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a62a:	6866      	ldr	r6, [r4, #4]
 800a62c:	2e00      	cmp	r6, #0
 800a62e:	bfa8      	it	ge
 800a630:	6821      	ldrge	r1, [r4, #0]
 800a632:	60a6      	str	r6, [r4, #8]
 800a634:	bfa4      	itt	ge
 800a636:	f021 0104 	bicge.w	r1, r1, #4
 800a63a:	6021      	strge	r1, [r4, #0]
 800a63c:	b90d      	cbnz	r5, 800a642 <_printf_i+0x11a>
 800a63e:	2e00      	cmp	r6, #0
 800a640:	d04d      	beq.n	800a6de <_printf_i+0x1b6>
 800a642:	4616      	mov	r6, r2
 800a644:	fbb5 f1f3 	udiv	r1, r5, r3
 800a648:	fb03 5711 	mls	r7, r3, r1, r5
 800a64c:	5dc7      	ldrb	r7, [r0, r7]
 800a64e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a652:	462f      	mov	r7, r5
 800a654:	42bb      	cmp	r3, r7
 800a656:	460d      	mov	r5, r1
 800a658:	d9f4      	bls.n	800a644 <_printf_i+0x11c>
 800a65a:	2b08      	cmp	r3, #8
 800a65c:	d10b      	bne.n	800a676 <_printf_i+0x14e>
 800a65e:	6823      	ldr	r3, [r4, #0]
 800a660:	07df      	lsls	r7, r3, #31
 800a662:	d508      	bpl.n	800a676 <_printf_i+0x14e>
 800a664:	6923      	ldr	r3, [r4, #16]
 800a666:	6861      	ldr	r1, [r4, #4]
 800a668:	4299      	cmp	r1, r3
 800a66a:	bfde      	ittt	le
 800a66c:	2330      	movle	r3, #48	; 0x30
 800a66e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a672:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a676:	1b92      	subs	r2, r2, r6
 800a678:	6122      	str	r2, [r4, #16]
 800a67a:	464b      	mov	r3, r9
 800a67c:	4621      	mov	r1, r4
 800a67e:	4640      	mov	r0, r8
 800a680:	f8cd a000 	str.w	sl, [sp]
 800a684:	aa03      	add	r2, sp, #12
 800a686:	f7ff fedf 	bl	800a448 <_printf_common>
 800a68a:	3001      	adds	r0, #1
 800a68c:	d14c      	bne.n	800a728 <_printf_i+0x200>
 800a68e:	f04f 30ff 	mov.w	r0, #4294967295
 800a692:	b004      	add	sp, #16
 800a694:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a698:	4834      	ldr	r0, [pc, #208]	; (800a76c <_printf_i+0x244>)
 800a69a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a69e:	680e      	ldr	r6, [r1, #0]
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a6a6:	061f      	lsls	r7, r3, #24
 800a6a8:	600e      	str	r6, [r1, #0]
 800a6aa:	d514      	bpl.n	800a6d6 <_printf_i+0x1ae>
 800a6ac:	07d9      	lsls	r1, r3, #31
 800a6ae:	bf44      	itt	mi
 800a6b0:	f043 0320 	orrmi.w	r3, r3, #32
 800a6b4:	6023      	strmi	r3, [r4, #0]
 800a6b6:	b91d      	cbnz	r5, 800a6c0 <_printf_i+0x198>
 800a6b8:	6823      	ldr	r3, [r4, #0]
 800a6ba:	f023 0320 	bic.w	r3, r3, #32
 800a6be:	6023      	str	r3, [r4, #0]
 800a6c0:	2310      	movs	r3, #16
 800a6c2:	e7af      	b.n	800a624 <_printf_i+0xfc>
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	f043 0320 	orr.w	r3, r3, #32
 800a6ca:	6023      	str	r3, [r4, #0]
 800a6cc:	2378      	movs	r3, #120	; 0x78
 800a6ce:	4828      	ldr	r0, [pc, #160]	; (800a770 <_printf_i+0x248>)
 800a6d0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6d4:	e7e3      	b.n	800a69e <_printf_i+0x176>
 800a6d6:	065e      	lsls	r6, r3, #25
 800a6d8:	bf48      	it	mi
 800a6da:	b2ad      	uxthmi	r5, r5
 800a6dc:	e7e6      	b.n	800a6ac <_printf_i+0x184>
 800a6de:	4616      	mov	r6, r2
 800a6e0:	e7bb      	b.n	800a65a <_printf_i+0x132>
 800a6e2:	680b      	ldr	r3, [r1, #0]
 800a6e4:	6826      	ldr	r6, [r4, #0]
 800a6e6:	1d1d      	adds	r5, r3, #4
 800a6e8:	6960      	ldr	r0, [r4, #20]
 800a6ea:	600d      	str	r5, [r1, #0]
 800a6ec:	0635      	lsls	r5, r6, #24
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	d501      	bpl.n	800a6f6 <_printf_i+0x1ce>
 800a6f2:	6018      	str	r0, [r3, #0]
 800a6f4:	e002      	b.n	800a6fc <_printf_i+0x1d4>
 800a6f6:	0671      	lsls	r1, r6, #25
 800a6f8:	d5fb      	bpl.n	800a6f2 <_printf_i+0x1ca>
 800a6fa:	8018      	strh	r0, [r3, #0]
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4616      	mov	r6, r2
 800a700:	6123      	str	r3, [r4, #16]
 800a702:	e7ba      	b.n	800a67a <_printf_i+0x152>
 800a704:	680b      	ldr	r3, [r1, #0]
 800a706:	1d1a      	adds	r2, r3, #4
 800a708:	600a      	str	r2, [r1, #0]
 800a70a:	681e      	ldr	r6, [r3, #0]
 800a70c:	2100      	movs	r1, #0
 800a70e:	4630      	mov	r0, r6
 800a710:	6862      	ldr	r2, [r4, #4]
 800a712:	f000 ffc9 	bl	800b6a8 <memchr>
 800a716:	b108      	cbz	r0, 800a71c <_printf_i+0x1f4>
 800a718:	1b80      	subs	r0, r0, r6
 800a71a:	6060      	str	r0, [r4, #4]
 800a71c:	6863      	ldr	r3, [r4, #4]
 800a71e:	6123      	str	r3, [r4, #16]
 800a720:	2300      	movs	r3, #0
 800a722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a726:	e7a8      	b.n	800a67a <_printf_i+0x152>
 800a728:	4632      	mov	r2, r6
 800a72a:	4649      	mov	r1, r9
 800a72c:	4640      	mov	r0, r8
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	47d0      	blx	sl
 800a732:	3001      	adds	r0, #1
 800a734:	d0ab      	beq.n	800a68e <_printf_i+0x166>
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	079b      	lsls	r3, r3, #30
 800a73a:	d413      	bmi.n	800a764 <_printf_i+0x23c>
 800a73c:	68e0      	ldr	r0, [r4, #12]
 800a73e:	9b03      	ldr	r3, [sp, #12]
 800a740:	4298      	cmp	r0, r3
 800a742:	bfb8      	it	lt
 800a744:	4618      	movlt	r0, r3
 800a746:	e7a4      	b.n	800a692 <_printf_i+0x16a>
 800a748:	2301      	movs	r3, #1
 800a74a:	4632      	mov	r2, r6
 800a74c:	4649      	mov	r1, r9
 800a74e:	4640      	mov	r0, r8
 800a750:	47d0      	blx	sl
 800a752:	3001      	adds	r0, #1
 800a754:	d09b      	beq.n	800a68e <_printf_i+0x166>
 800a756:	3501      	adds	r5, #1
 800a758:	68e3      	ldr	r3, [r4, #12]
 800a75a:	9903      	ldr	r1, [sp, #12]
 800a75c:	1a5b      	subs	r3, r3, r1
 800a75e:	42ab      	cmp	r3, r5
 800a760:	dcf2      	bgt.n	800a748 <_printf_i+0x220>
 800a762:	e7eb      	b.n	800a73c <_printf_i+0x214>
 800a764:	2500      	movs	r5, #0
 800a766:	f104 0619 	add.w	r6, r4, #25
 800a76a:	e7f5      	b.n	800a758 <_printf_i+0x230>
 800a76c:	0800e15a 	.word	0x0800e15a
 800a770:	0800e16b 	.word	0x0800e16b

0800a774 <iprintf>:
 800a774:	b40f      	push	{r0, r1, r2, r3}
 800a776:	4b0a      	ldr	r3, [pc, #40]	; (800a7a0 <iprintf+0x2c>)
 800a778:	b513      	push	{r0, r1, r4, lr}
 800a77a:	681c      	ldr	r4, [r3, #0]
 800a77c:	b124      	cbz	r4, 800a788 <iprintf+0x14>
 800a77e:	69a3      	ldr	r3, [r4, #24]
 800a780:	b913      	cbnz	r3, 800a788 <iprintf+0x14>
 800a782:	4620      	mov	r0, r4
 800a784:	f000 fee2 	bl	800b54c <__sinit>
 800a788:	ab05      	add	r3, sp, #20
 800a78a:	4620      	mov	r0, r4
 800a78c:	9a04      	ldr	r2, [sp, #16]
 800a78e:	68a1      	ldr	r1, [r4, #8]
 800a790:	9301      	str	r3, [sp, #4]
 800a792:	f001 fc03 	bl	800bf9c <_vfiprintf_r>
 800a796:	b002      	add	sp, #8
 800a798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a79c:	b004      	add	sp, #16
 800a79e:	4770      	bx	lr
 800a7a0:	20000010 	.word	0x20000010

0800a7a4 <quorem>:
 800a7a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a8:	6903      	ldr	r3, [r0, #16]
 800a7aa:	690c      	ldr	r4, [r1, #16]
 800a7ac:	4607      	mov	r7, r0
 800a7ae:	42a3      	cmp	r3, r4
 800a7b0:	f2c0 8083 	blt.w	800a8ba <quorem+0x116>
 800a7b4:	3c01      	subs	r4, #1
 800a7b6:	f100 0514 	add.w	r5, r0, #20
 800a7ba:	f101 0814 	add.w	r8, r1, #20
 800a7be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7c2:	9301      	str	r3, [sp, #4]
 800a7c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a7c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a7d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a7d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a7dc:	d332      	bcc.n	800a844 <quorem+0xa0>
 800a7de:	f04f 0e00 	mov.w	lr, #0
 800a7e2:	4640      	mov	r0, r8
 800a7e4:	46ac      	mov	ip, r5
 800a7e6:	46f2      	mov	sl, lr
 800a7e8:	f850 2b04 	ldr.w	r2, [r0], #4
 800a7ec:	b293      	uxth	r3, r2
 800a7ee:	fb06 e303 	mla	r3, r6, r3, lr
 800a7f2:	0c12      	lsrs	r2, r2, #16
 800a7f4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a7f8:	fb06 e202 	mla	r2, r6, r2, lr
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	ebaa 0303 	sub.w	r3, sl, r3
 800a802:	f8dc a000 	ldr.w	sl, [ip]
 800a806:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a80a:	fa1f fa8a 	uxth.w	sl, sl
 800a80e:	4453      	add	r3, sl
 800a810:	fa1f fa82 	uxth.w	sl, r2
 800a814:	f8dc 2000 	ldr.w	r2, [ip]
 800a818:	4581      	cmp	r9, r0
 800a81a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a81e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a822:	b29b      	uxth	r3, r3
 800a824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a828:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a82c:	f84c 3b04 	str.w	r3, [ip], #4
 800a830:	d2da      	bcs.n	800a7e8 <quorem+0x44>
 800a832:	f855 300b 	ldr.w	r3, [r5, fp]
 800a836:	b92b      	cbnz	r3, 800a844 <quorem+0xa0>
 800a838:	9b01      	ldr	r3, [sp, #4]
 800a83a:	3b04      	subs	r3, #4
 800a83c:	429d      	cmp	r5, r3
 800a83e:	461a      	mov	r2, r3
 800a840:	d32f      	bcc.n	800a8a2 <quorem+0xfe>
 800a842:	613c      	str	r4, [r7, #16]
 800a844:	4638      	mov	r0, r7
 800a846:	f001 f9c5 	bl	800bbd4 <__mcmp>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	db25      	blt.n	800a89a <quorem+0xf6>
 800a84e:	4628      	mov	r0, r5
 800a850:	f04f 0c00 	mov.w	ip, #0
 800a854:	3601      	adds	r6, #1
 800a856:	f858 1b04 	ldr.w	r1, [r8], #4
 800a85a:	f8d0 e000 	ldr.w	lr, [r0]
 800a85e:	b28b      	uxth	r3, r1
 800a860:	ebac 0303 	sub.w	r3, ip, r3
 800a864:	fa1f f28e 	uxth.w	r2, lr
 800a868:	4413      	add	r3, r2
 800a86a:	0c0a      	lsrs	r2, r1, #16
 800a86c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a874:	b29b      	uxth	r3, r3
 800a876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a87a:	45c1      	cmp	r9, r8
 800a87c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a880:	f840 3b04 	str.w	r3, [r0], #4
 800a884:	d2e7      	bcs.n	800a856 <quorem+0xb2>
 800a886:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a88a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a88e:	b922      	cbnz	r2, 800a89a <quorem+0xf6>
 800a890:	3b04      	subs	r3, #4
 800a892:	429d      	cmp	r5, r3
 800a894:	461a      	mov	r2, r3
 800a896:	d30a      	bcc.n	800a8ae <quorem+0x10a>
 800a898:	613c      	str	r4, [r7, #16]
 800a89a:	4630      	mov	r0, r6
 800a89c:	b003      	add	sp, #12
 800a89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a2:	6812      	ldr	r2, [r2, #0]
 800a8a4:	3b04      	subs	r3, #4
 800a8a6:	2a00      	cmp	r2, #0
 800a8a8:	d1cb      	bne.n	800a842 <quorem+0x9e>
 800a8aa:	3c01      	subs	r4, #1
 800a8ac:	e7c6      	b.n	800a83c <quorem+0x98>
 800a8ae:	6812      	ldr	r2, [r2, #0]
 800a8b0:	3b04      	subs	r3, #4
 800a8b2:	2a00      	cmp	r2, #0
 800a8b4:	d1f0      	bne.n	800a898 <quorem+0xf4>
 800a8b6:	3c01      	subs	r4, #1
 800a8b8:	e7eb      	b.n	800a892 <quorem+0xee>
 800a8ba:	2000      	movs	r0, #0
 800a8bc:	e7ee      	b.n	800a89c <quorem+0xf8>
	...

0800a8c0 <_dtoa_r>:
 800a8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	4616      	mov	r6, r2
 800a8c6:	461f      	mov	r7, r3
 800a8c8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a8ca:	b099      	sub	sp, #100	; 0x64
 800a8cc:	4605      	mov	r5, r0
 800a8ce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a8d2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800a8d6:	b974      	cbnz	r4, 800a8f6 <_dtoa_r+0x36>
 800a8d8:	2010      	movs	r0, #16
 800a8da:	f000 fedd 	bl	800b698 <malloc>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	6268      	str	r0, [r5, #36]	; 0x24
 800a8e2:	b920      	cbnz	r0, 800a8ee <_dtoa_r+0x2e>
 800a8e4:	21ea      	movs	r1, #234	; 0xea
 800a8e6:	4bae      	ldr	r3, [pc, #696]	; (800aba0 <_dtoa_r+0x2e0>)
 800a8e8:	48ae      	ldr	r0, [pc, #696]	; (800aba4 <_dtoa_r+0x2e4>)
 800a8ea:	f001 fdad 	bl	800c448 <__assert_func>
 800a8ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8f2:	6004      	str	r4, [r0, #0]
 800a8f4:	60c4      	str	r4, [r0, #12]
 800a8f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a8f8:	6819      	ldr	r1, [r3, #0]
 800a8fa:	b151      	cbz	r1, 800a912 <_dtoa_r+0x52>
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	2301      	movs	r3, #1
 800a900:	4093      	lsls	r3, r2
 800a902:	604a      	str	r2, [r1, #4]
 800a904:	608b      	str	r3, [r1, #8]
 800a906:	4628      	mov	r0, r5
 800a908:	f000 ff2a 	bl	800b760 <_Bfree>
 800a90c:	2200      	movs	r2, #0
 800a90e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a910:	601a      	str	r2, [r3, #0]
 800a912:	1e3b      	subs	r3, r7, #0
 800a914:	bfaf      	iteee	ge
 800a916:	2300      	movge	r3, #0
 800a918:	2201      	movlt	r2, #1
 800a91a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a91e:	9305      	strlt	r3, [sp, #20]
 800a920:	bfa8      	it	ge
 800a922:	f8c8 3000 	strge.w	r3, [r8]
 800a926:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a92a:	4b9f      	ldr	r3, [pc, #636]	; (800aba8 <_dtoa_r+0x2e8>)
 800a92c:	bfb8      	it	lt
 800a92e:	f8c8 2000 	strlt.w	r2, [r8]
 800a932:	ea33 0309 	bics.w	r3, r3, r9
 800a936:	d119      	bne.n	800a96c <_dtoa_r+0xac>
 800a938:	f242 730f 	movw	r3, #9999	; 0x270f
 800a93c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a93e:	6013      	str	r3, [r2, #0]
 800a940:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a944:	4333      	orrs	r3, r6
 800a946:	f000 8580 	beq.w	800b44a <_dtoa_r+0xb8a>
 800a94a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a94c:	b953      	cbnz	r3, 800a964 <_dtoa_r+0xa4>
 800a94e:	4b97      	ldr	r3, [pc, #604]	; (800abac <_dtoa_r+0x2ec>)
 800a950:	e022      	b.n	800a998 <_dtoa_r+0xd8>
 800a952:	4b97      	ldr	r3, [pc, #604]	; (800abb0 <_dtoa_r+0x2f0>)
 800a954:	9308      	str	r3, [sp, #32]
 800a956:	3308      	adds	r3, #8
 800a958:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a95a:	6013      	str	r3, [r2, #0]
 800a95c:	9808      	ldr	r0, [sp, #32]
 800a95e:	b019      	add	sp, #100	; 0x64
 800a960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a964:	4b91      	ldr	r3, [pc, #580]	; (800abac <_dtoa_r+0x2ec>)
 800a966:	9308      	str	r3, [sp, #32]
 800a968:	3303      	adds	r3, #3
 800a96a:	e7f5      	b.n	800a958 <_dtoa_r+0x98>
 800a96c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a970:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a974:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a978:	2200      	movs	r2, #0
 800a97a:	2300      	movs	r3, #0
 800a97c:	f7f6 f880 	bl	8000a80 <__aeabi_dcmpeq>
 800a980:	4680      	mov	r8, r0
 800a982:	b158      	cbz	r0, 800a99c <_dtoa_r+0xdc>
 800a984:	2301      	movs	r3, #1
 800a986:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a988:	6013      	str	r3, [r2, #0]
 800a98a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 8559 	beq.w	800b444 <_dtoa_r+0xb84>
 800a992:	4888      	ldr	r0, [pc, #544]	; (800abb4 <_dtoa_r+0x2f4>)
 800a994:	6018      	str	r0, [r3, #0]
 800a996:	1e43      	subs	r3, r0, #1
 800a998:	9308      	str	r3, [sp, #32]
 800a99a:	e7df      	b.n	800a95c <_dtoa_r+0x9c>
 800a99c:	ab16      	add	r3, sp, #88	; 0x58
 800a99e:	9301      	str	r3, [sp, #4]
 800a9a0:	ab17      	add	r3, sp, #92	; 0x5c
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a9aa:	f001 f9bf 	bl	800bd2c <__d2b>
 800a9ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a9b2:	4682      	mov	sl, r0
 800a9b4:	2c00      	cmp	r4, #0
 800a9b6:	d07e      	beq.n	800aab6 <_dtoa_r+0x1f6>
 800a9b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a9bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9be:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a9c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9c6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800a9ca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a9ce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	4b78      	ldr	r3, [pc, #480]	; (800abb8 <_dtoa_r+0x2f8>)
 800a9d6:	f7f5 fc33 	bl	8000240 <__aeabi_dsub>
 800a9da:	a36b      	add	r3, pc, #428	; (adr r3, 800ab88 <_dtoa_r+0x2c8>)
 800a9dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e0:	f7f5 fde6 	bl	80005b0 <__aeabi_dmul>
 800a9e4:	a36a      	add	r3, pc, #424	; (adr r3, 800ab90 <_dtoa_r+0x2d0>)
 800a9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ea:	f7f5 fc2b 	bl	8000244 <__adddf3>
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	460f      	mov	r7, r1
 800a9f4:	f7f5 fd72 	bl	80004dc <__aeabi_i2d>
 800a9f8:	a367      	add	r3, pc, #412	; (adr r3, 800ab98 <_dtoa_r+0x2d8>)
 800a9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9fe:	f7f5 fdd7 	bl	80005b0 <__aeabi_dmul>
 800aa02:	4602      	mov	r2, r0
 800aa04:	460b      	mov	r3, r1
 800aa06:	4630      	mov	r0, r6
 800aa08:	4639      	mov	r1, r7
 800aa0a:	f7f5 fc1b 	bl	8000244 <__adddf3>
 800aa0e:	4606      	mov	r6, r0
 800aa10:	460f      	mov	r7, r1
 800aa12:	f7f6 f87d 	bl	8000b10 <__aeabi_d2iz>
 800aa16:	2200      	movs	r2, #0
 800aa18:	4681      	mov	r9, r0
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	4639      	mov	r1, r7
 800aa20:	f7f6 f838 	bl	8000a94 <__aeabi_dcmplt>
 800aa24:	b148      	cbz	r0, 800aa3a <_dtoa_r+0x17a>
 800aa26:	4648      	mov	r0, r9
 800aa28:	f7f5 fd58 	bl	80004dc <__aeabi_i2d>
 800aa2c:	4632      	mov	r2, r6
 800aa2e:	463b      	mov	r3, r7
 800aa30:	f7f6 f826 	bl	8000a80 <__aeabi_dcmpeq>
 800aa34:	b908      	cbnz	r0, 800aa3a <_dtoa_r+0x17a>
 800aa36:	f109 39ff 	add.w	r9, r9, #4294967295
 800aa3a:	f1b9 0f16 	cmp.w	r9, #22
 800aa3e:	d857      	bhi.n	800aaf0 <_dtoa_r+0x230>
 800aa40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800aa44:	4b5d      	ldr	r3, [pc, #372]	; (800abbc <_dtoa_r+0x2fc>)
 800aa46:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800aa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4e:	f7f6 f821 	bl	8000a94 <__aeabi_dcmplt>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d04e      	beq.n	800aaf4 <_dtoa_r+0x234>
 800aa56:	2300      	movs	r3, #0
 800aa58:	f109 39ff 	add.w	r9, r9, #4294967295
 800aa5c:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800aa60:	1b1c      	subs	r4, r3, r4
 800aa62:	1e63      	subs	r3, r4, #1
 800aa64:	9309      	str	r3, [sp, #36]	; 0x24
 800aa66:	bf49      	itett	mi
 800aa68:	f1c4 0301 	rsbmi	r3, r4, #1
 800aa6c:	2300      	movpl	r3, #0
 800aa6e:	9306      	strmi	r3, [sp, #24]
 800aa70:	2300      	movmi	r3, #0
 800aa72:	bf54      	ite	pl
 800aa74:	9306      	strpl	r3, [sp, #24]
 800aa76:	9309      	strmi	r3, [sp, #36]	; 0x24
 800aa78:	f1b9 0f00 	cmp.w	r9, #0
 800aa7c:	db3c      	blt.n	800aaf8 <_dtoa_r+0x238>
 800aa7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa80:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800aa84:	444b      	add	r3, r9
 800aa86:	9309      	str	r3, [sp, #36]	; 0x24
 800aa88:	2300      	movs	r3, #0
 800aa8a:	930a      	str	r3, [sp, #40]	; 0x28
 800aa8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa8e:	2b09      	cmp	r3, #9
 800aa90:	d86c      	bhi.n	800ab6c <_dtoa_r+0x2ac>
 800aa92:	2b05      	cmp	r3, #5
 800aa94:	bfc4      	itt	gt
 800aa96:	3b04      	subgt	r3, #4
 800aa98:	9322      	strgt	r3, [sp, #136]	; 0x88
 800aa9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa9c:	bfc8      	it	gt
 800aa9e:	2400      	movgt	r4, #0
 800aaa0:	f1a3 0302 	sub.w	r3, r3, #2
 800aaa4:	bfd8      	it	le
 800aaa6:	2401      	movle	r4, #1
 800aaa8:	2b03      	cmp	r3, #3
 800aaaa:	f200 808b 	bhi.w	800abc4 <_dtoa_r+0x304>
 800aaae:	e8df f003 	tbb	[pc, r3]
 800aab2:	4f2d      	.short	0x4f2d
 800aab4:	5b4d      	.short	0x5b4d
 800aab6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800aaba:	441c      	add	r4, r3
 800aabc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800aac0:	2b20      	cmp	r3, #32
 800aac2:	bfc3      	ittte	gt
 800aac4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aac8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800aacc:	fa09 f303 	lslgt.w	r3, r9, r3
 800aad0:	f1c3 0320 	rsble	r3, r3, #32
 800aad4:	bfc6      	itte	gt
 800aad6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aada:	4318      	orrgt	r0, r3
 800aadc:	fa06 f003 	lslle.w	r0, r6, r3
 800aae0:	f7f5 fcec 	bl	80004bc <__aeabi_ui2d>
 800aae4:	2301      	movs	r3, #1
 800aae6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800aaea:	3c01      	subs	r4, #1
 800aaec:	9313      	str	r3, [sp, #76]	; 0x4c
 800aaee:	e770      	b.n	800a9d2 <_dtoa_r+0x112>
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	e7b3      	b.n	800aa5c <_dtoa_r+0x19c>
 800aaf4:	900f      	str	r0, [sp, #60]	; 0x3c
 800aaf6:	e7b2      	b.n	800aa5e <_dtoa_r+0x19e>
 800aaf8:	9b06      	ldr	r3, [sp, #24]
 800aafa:	eba3 0309 	sub.w	r3, r3, r9
 800aafe:	9306      	str	r3, [sp, #24]
 800ab00:	f1c9 0300 	rsb	r3, r9, #0
 800ab04:	930a      	str	r3, [sp, #40]	; 0x28
 800ab06:	2300      	movs	r3, #0
 800ab08:	930e      	str	r3, [sp, #56]	; 0x38
 800ab0a:	e7bf      	b.n	800aa8c <_dtoa_r+0x1cc>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab10:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	dc59      	bgt.n	800abca <_dtoa_r+0x30a>
 800ab16:	f04f 0b01 	mov.w	fp, #1
 800ab1a:	465b      	mov	r3, fp
 800ab1c:	f8cd b008 	str.w	fp, [sp, #8]
 800ab20:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800ab24:	2200      	movs	r2, #0
 800ab26:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ab28:	6042      	str	r2, [r0, #4]
 800ab2a:	2204      	movs	r2, #4
 800ab2c:	f102 0614 	add.w	r6, r2, #20
 800ab30:	429e      	cmp	r6, r3
 800ab32:	6841      	ldr	r1, [r0, #4]
 800ab34:	d94f      	bls.n	800abd6 <_dtoa_r+0x316>
 800ab36:	4628      	mov	r0, r5
 800ab38:	f000 fdd2 	bl	800b6e0 <_Balloc>
 800ab3c:	9008      	str	r0, [sp, #32]
 800ab3e:	2800      	cmp	r0, #0
 800ab40:	d14d      	bne.n	800abde <_dtoa_r+0x31e>
 800ab42:	4602      	mov	r2, r0
 800ab44:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ab48:	4b1d      	ldr	r3, [pc, #116]	; (800abc0 <_dtoa_r+0x300>)
 800ab4a:	e6cd      	b.n	800a8e8 <_dtoa_r+0x28>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e7de      	b.n	800ab0e <_dtoa_r+0x24e>
 800ab50:	2300      	movs	r3, #0
 800ab52:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ab56:	eb09 0b03 	add.w	fp, r9, r3
 800ab5a:	f10b 0301 	add.w	r3, fp, #1
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	9302      	str	r3, [sp, #8]
 800ab62:	bfb8      	it	lt
 800ab64:	2301      	movlt	r3, #1
 800ab66:	e7dd      	b.n	800ab24 <_dtoa_r+0x264>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e7f2      	b.n	800ab52 <_dtoa_r+0x292>
 800ab6c:	2401      	movs	r4, #1
 800ab6e:	2300      	movs	r3, #0
 800ab70:	940b      	str	r4, [sp, #44]	; 0x2c
 800ab72:	9322      	str	r3, [sp, #136]	; 0x88
 800ab74:	f04f 3bff 	mov.w	fp, #4294967295
 800ab78:	2200      	movs	r2, #0
 800ab7a:	2312      	movs	r3, #18
 800ab7c:	f8cd b008 	str.w	fp, [sp, #8]
 800ab80:	9223      	str	r2, [sp, #140]	; 0x8c
 800ab82:	e7cf      	b.n	800ab24 <_dtoa_r+0x264>
 800ab84:	f3af 8000 	nop.w
 800ab88:	636f4361 	.word	0x636f4361
 800ab8c:	3fd287a7 	.word	0x3fd287a7
 800ab90:	8b60c8b3 	.word	0x8b60c8b3
 800ab94:	3fc68a28 	.word	0x3fc68a28
 800ab98:	509f79fb 	.word	0x509f79fb
 800ab9c:	3fd34413 	.word	0x3fd34413
 800aba0:	0800e189 	.word	0x0800e189
 800aba4:	0800e1a0 	.word	0x0800e1a0
 800aba8:	7ff00000 	.word	0x7ff00000
 800abac:	0800e185 	.word	0x0800e185
 800abb0:	0800e17c 	.word	0x0800e17c
 800abb4:	0800e159 	.word	0x0800e159
 800abb8:	3ff80000 	.word	0x3ff80000
 800abbc:	0800e2f8 	.word	0x0800e2f8
 800abc0:	0800e1ff 	.word	0x0800e1ff
 800abc4:	2301      	movs	r3, #1
 800abc6:	930b      	str	r3, [sp, #44]	; 0x2c
 800abc8:	e7d4      	b.n	800ab74 <_dtoa_r+0x2b4>
 800abca:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800abce:	465b      	mov	r3, fp
 800abd0:	f8cd b008 	str.w	fp, [sp, #8]
 800abd4:	e7a6      	b.n	800ab24 <_dtoa_r+0x264>
 800abd6:	3101      	adds	r1, #1
 800abd8:	6041      	str	r1, [r0, #4]
 800abda:	0052      	lsls	r2, r2, #1
 800abdc:	e7a6      	b.n	800ab2c <_dtoa_r+0x26c>
 800abde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abe0:	9a08      	ldr	r2, [sp, #32]
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	9b02      	ldr	r3, [sp, #8]
 800abe6:	2b0e      	cmp	r3, #14
 800abe8:	f200 80a8 	bhi.w	800ad3c <_dtoa_r+0x47c>
 800abec:	2c00      	cmp	r4, #0
 800abee:	f000 80a5 	beq.w	800ad3c <_dtoa_r+0x47c>
 800abf2:	f1b9 0f00 	cmp.w	r9, #0
 800abf6:	dd34      	ble.n	800ac62 <_dtoa_r+0x3a2>
 800abf8:	4a9a      	ldr	r2, [pc, #616]	; (800ae64 <_dtoa_r+0x5a4>)
 800abfa:	f009 030f 	and.w	r3, r9, #15
 800abfe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ac02:	f419 7f80 	tst.w	r9, #256	; 0x100
 800ac06:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ac0e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800ac12:	d016      	beq.n	800ac42 <_dtoa_r+0x382>
 800ac14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac18:	4b93      	ldr	r3, [pc, #588]	; (800ae68 <_dtoa_r+0x5a8>)
 800ac1a:	2703      	movs	r7, #3
 800ac1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ac20:	f7f5 fdf0 	bl	8000804 <__aeabi_ddiv>
 800ac24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac28:	f004 040f 	and.w	r4, r4, #15
 800ac2c:	4e8e      	ldr	r6, [pc, #568]	; (800ae68 <_dtoa_r+0x5a8>)
 800ac2e:	b954      	cbnz	r4, 800ac46 <_dtoa_r+0x386>
 800ac30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac38:	f7f5 fde4 	bl	8000804 <__aeabi_ddiv>
 800ac3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac40:	e029      	b.n	800ac96 <_dtoa_r+0x3d6>
 800ac42:	2702      	movs	r7, #2
 800ac44:	e7f2      	b.n	800ac2c <_dtoa_r+0x36c>
 800ac46:	07e1      	lsls	r1, r4, #31
 800ac48:	d508      	bpl.n	800ac5c <_dtoa_r+0x39c>
 800ac4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ac4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ac52:	f7f5 fcad 	bl	80005b0 <__aeabi_dmul>
 800ac56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ac5a:	3701      	adds	r7, #1
 800ac5c:	1064      	asrs	r4, r4, #1
 800ac5e:	3608      	adds	r6, #8
 800ac60:	e7e5      	b.n	800ac2e <_dtoa_r+0x36e>
 800ac62:	f000 80a5 	beq.w	800adb0 <_dtoa_r+0x4f0>
 800ac66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac6a:	f1c9 0400 	rsb	r4, r9, #0
 800ac6e:	4b7d      	ldr	r3, [pc, #500]	; (800ae64 <_dtoa_r+0x5a4>)
 800ac70:	f004 020f 	and.w	r2, r4, #15
 800ac74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	f7f5 fc98 	bl	80005b0 <__aeabi_dmul>
 800ac80:	2702      	movs	r7, #2
 800ac82:	2300      	movs	r3, #0
 800ac84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac88:	4e77      	ldr	r6, [pc, #476]	; (800ae68 <_dtoa_r+0x5a8>)
 800ac8a:	1124      	asrs	r4, r4, #4
 800ac8c:	2c00      	cmp	r4, #0
 800ac8e:	f040 8084 	bne.w	800ad9a <_dtoa_r+0x4da>
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d1d2      	bne.n	800ac3c <_dtoa_r+0x37c>
 800ac96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 808b 	beq.w	800adb4 <_dtoa_r+0x4f4>
 800ac9e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800aca2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800aca6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800acaa:	2200      	movs	r2, #0
 800acac:	4b6f      	ldr	r3, [pc, #444]	; (800ae6c <_dtoa_r+0x5ac>)
 800acae:	f7f5 fef1 	bl	8000a94 <__aeabi_dcmplt>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	d07e      	beq.n	800adb4 <_dtoa_r+0x4f4>
 800acb6:	9b02      	ldr	r3, [sp, #8]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d07b      	beq.n	800adb4 <_dtoa_r+0x4f4>
 800acbc:	f1bb 0f00 	cmp.w	fp, #0
 800acc0:	dd38      	ble.n	800ad34 <_dtoa_r+0x474>
 800acc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800acc6:	2200      	movs	r2, #0
 800acc8:	4b69      	ldr	r3, [pc, #420]	; (800ae70 <_dtoa_r+0x5b0>)
 800acca:	f7f5 fc71 	bl	80005b0 <__aeabi_dmul>
 800acce:	465c      	mov	r4, fp
 800acd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800acd4:	f109 38ff 	add.w	r8, r9, #4294967295
 800acd8:	3701      	adds	r7, #1
 800acda:	4638      	mov	r0, r7
 800acdc:	f7f5 fbfe 	bl	80004dc <__aeabi_i2d>
 800ace0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ace4:	f7f5 fc64 	bl	80005b0 <__aeabi_dmul>
 800ace8:	2200      	movs	r2, #0
 800acea:	4b62      	ldr	r3, [pc, #392]	; (800ae74 <_dtoa_r+0x5b4>)
 800acec:	f7f5 faaa 	bl	8000244 <__adddf3>
 800acf0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800acf4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800acf8:	9611      	str	r6, [sp, #68]	; 0x44
 800acfa:	2c00      	cmp	r4, #0
 800acfc:	d15d      	bne.n	800adba <_dtoa_r+0x4fa>
 800acfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad02:	2200      	movs	r2, #0
 800ad04:	4b5c      	ldr	r3, [pc, #368]	; (800ae78 <_dtoa_r+0x5b8>)
 800ad06:	f7f5 fa9b 	bl	8000240 <__aeabi_dsub>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad12:	4633      	mov	r3, r6
 800ad14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad16:	f7f5 fedb 	bl	8000ad0 <__aeabi_dcmpgt>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	f040 829e 	bne.w	800b25c <_dtoa_r+0x99c>
 800ad20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ad26:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ad2a:	f7f5 feb3 	bl	8000a94 <__aeabi_dcmplt>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	f040 8292 	bne.w	800b258 <_dtoa_r+0x998>
 800ad34:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800ad38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ad3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	f2c0 8153 	blt.w	800afea <_dtoa_r+0x72a>
 800ad44:	f1b9 0f0e 	cmp.w	r9, #14
 800ad48:	f300 814f 	bgt.w	800afea <_dtoa_r+0x72a>
 800ad4c:	4b45      	ldr	r3, [pc, #276]	; (800ae64 <_dtoa_r+0x5a4>)
 800ad4e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ad52:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ad56:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ad5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f280 80db 	bge.w	800af18 <_dtoa_r+0x658>
 800ad62:	9b02      	ldr	r3, [sp, #8]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f300 80d7 	bgt.w	800af18 <_dtoa_r+0x658>
 800ad6a:	f040 8274 	bne.w	800b256 <_dtoa_r+0x996>
 800ad6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ad72:	2200      	movs	r2, #0
 800ad74:	4b40      	ldr	r3, [pc, #256]	; (800ae78 <_dtoa_r+0x5b8>)
 800ad76:	f7f5 fc1b 	bl	80005b0 <__aeabi_dmul>
 800ad7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad7e:	f7f5 fe9d 	bl	8000abc <__aeabi_dcmpge>
 800ad82:	9c02      	ldr	r4, [sp, #8]
 800ad84:	4626      	mov	r6, r4
 800ad86:	2800      	cmp	r0, #0
 800ad88:	f040 824a 	bne.w	800b220 <_dtoa_r+0x960>
 800ad8c:	2331      	movs	r3, #49	; 0x31
 800ad8e:	9f08      	ldr	r7, [sp, #32]
 800ad90:	f109 0901 	add.w	r9, r9, #1
 800ad94:	f807 3b01 	strb.w	r3, [r7], #1
 800ad98:	e246      	b.n	800b228 <_dtoa_r+0x968>
 800ad9a:	07e2      	lsls	r2, r4, #31
 800ad9c:	d505      	bpl.n	800adaa <_dtoa_r+0x4ea>
 800ad9e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ada2:	f7f5 fc05 	bl	80005b0 <__aeabi_dmul>
 800ada6:	2301      	movs	r3, #1
 800ada8:	3701      	adds	r7, #1
 800adaa:	1064      	asrs	r4, r4, #1
 800adac:	3608      	adds	r6, #8
 800adae:	e76d      	b.n	800ac8c <_dtoa_r+0x3cc>
 800adb0:	2702      	movs	r7, #2
 800adb2:	e770      	b.n	800ac96 <_dtoa_r+0x3d6>
 800adb4:	46c8      	mov	r8, r9
 800adb6:	9c02      	ldr	r4, [sp, #8]
 800adb8:	e78f      	b.n	800acda <_dtoa_r+0x41a>
 800adba:	9908      	ldr	r1, [sp, #32]
 800adbc:	4b29      	ldr	r3, [pc, #164]	; (800ae64 <_dtoa_r+0x5a4>)
 800adbe:	4421      	add	r1, r4
 800adc0:	9112      	str	r1, [sp, #72]	; 0x48
 800adc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800adc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800adc8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800adcc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800add0:	2900      	cmp	r1, #0
 800add2:	d055      	beq.n	800ae80 <_dtoa_r+0x5c0>
 800add4:	2000      	movs	r0, #0
 800add6:	4929      	ldr	r1, [pc, #164]	; (800ae7c <_dtoa_r+0x5bc>)
 800add8:	f7f5 fd14 	bl	8000804 <__aeabi_ddiv>
 800addc:	463b      	mov	r3, r7
 800adde:	4632      	mov	r2, r6
 800ade0:	f7f5 fa2e 	bl	8000240 <__aeabi_dsub>
 800ade4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ade8:	9f08      	ldr	r7, [sp, #32]
 800adea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adee:	f7f5 fe8f 	bl	8000b10 <__aeabi_d2iz>
 800adf2:	4604      	mov	r4, r0
 800adf4:	f7f5 fb72 	bl	80004dc <__aeabi_i2d>
 800adf8:	4602      	mov	r2, r0
 800adfa:	460b      	mov	r3, r1
 800adfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae00:	f7f5 fa1e 	bl	8000240 <__aeabi_dsub>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	3430      	adds	r4, #48	; 0x30
 800ae0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae12:	f807 4b01 	strb.w	r4, [r7], #1
 800ae16:	f7f5 fe3d 	bl	8000a94 <__aeabi_dcmplt>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d174      	bne.n	800af08 <_dtoa_r+0x648>
 800ae1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae22:	2000      	movs	r0, #0
 800ae24:	4911      	ldr	r1, [pc, #68]	; (800ae6c <_dtoa_r+0x5ac>)
 800ae26:	f7f5 fa0b 	bl	8000240 <__aeabi_dsub>
 800ae2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ae2e:	f7f5 fe31 	bl	8000a94 <__aeabi_dcmplt>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	f040 80b6 	bne.w	800afa4 <_dtoa_r+0x6e4>
 800ae38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae3a:	429f      	cmp	r7, r3
 800ae3c:	f43f af7a 	beq.w	800ad34 <_dtoa_r+0x474>
 800ae40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ae44:	2200      	movs	r2, #0
 800ae46:	4b0a      	ldr	r3, [pc, #40]	; (800ae70 <_dtoa_r+0x5b0>)
 800ae48:	f7f5 fbb2 	bl	80005b0 <__aeabi_dmul>
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ae52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae56:	4b06      	ldr	r3, [pc, #24]	; (800ae70 <_dtoa_r+0x5b0>)
 800ae58:	f7f5 fbaa 	bl	80005b0 <__aeabi_dmul>
 800ae5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae60:	e7c3      	b.n	800adea <_dtoa_r+0x52a>
 800ae62:	bf00      	nop
 800ae64:	0800e2f8 	.word	0x0800e2f8
 800ae68:	0800e2d0 	.word	0x0800e2d0
 800ae6c:	3ff00000 	.word	0x3ff00000
 800ae70:	40240000 	.word	0x40240000
 800ae74:	401c0000 	.word	0x401c0000
 800ae78:	40140000 	.word	0x40140000
 800ae7c:	3fe00000 	.word	0x3fe00000
 800ae80:	4630      	mov	r0, r6
 800ae82:	4639      	mov	r1, r7
 800ae84:	f7f5 fb94 	bl	80005b0 <__aeabi_dmul>
 800ae88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ae8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ae8e:	9c08      	ldr	r4, [sp, #32]
 800ae90:	9314      	str	r3, [sp, #80]	; 0x50
 800ae92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae96:	f7f5 fe3b 	bl	8000b10 <__aeabi_d2iz>
 800ae9a:	9015      	str	r0, [sp, #84]	; 0x54
 800ae9c:	f7f5 fb1e 	bl	80004dc <__aeabi_i2d>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aea8:	f7f5 f9ca 	bl	8000240 <__aeabi_dsub>
 800aeac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aeae:	4606      	mov	r6, r0
 800aeb0:	3330      	adds	r3, #48	; 0x30
 800aeb2:	f804 3b01 	strb.w	r3, [r4], #1
 800aeb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aeb8:	460f      	mov	r7, r1
 800aeba:	429c      	cmp	r4, r3
 800aebc:	f04f 0200 	mov.w	r2, #0
 800aec0:	d124      	bne.n	800af0c <_dtoa_r+0x64c>
 800aec2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800aec6:	4bb3      	ldr	r3, [pc, #716]	; (800b194 <_dtoa_r+0x8d4>)
 800aec8:	f7f5 f9bc 	bl	8000244 <__adddf3>
 800aecc:	4602      	mov	r2, r0
 800aece:	460b      	mov	r3, r1
 800aed0:	4630      	mov	r0, r6
 800aed2:	4639      	mov	r1, r7
 800aed4:	f7f5 fdfc 	bl	8000ad0 <__aeabi_dcmpgt>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	d162      	bne.n	800afa2 <_dtoa_r+0x6e2>
 800aedc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aee0:	2000      	movs	r0, #0
 800aee2:	49ac      	ldr	r1, [pc, #688]	; (800b194 <_dtoa_r+0x8d4>)
 800aee4:	f7f5 f9ac 	bl	8000240 <__aeabi_dsub>
 800aee8:	4602      	mov	r2, r0
 800aeea:	460b      	mov	r3, r1
 800aeec:	4630      	mov	r0, r6
 800aeee:	4639      	mov	r1, r7
 800aef0:	f7f5 fdd0 	bl	8000a94 <__aeabi_dcmplt>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	f43f af1d 	beq.w	800ad34 <_dtoa_r+0x474>
 800aefa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800aefc:	1e7b      	subs	r3, r7, #1
 800aefe:	9314      	str	r3, [sp, #80]	; 0x50
 800af00:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800af04:	2b30      	cmp	r3, #48	; 0x30
 800af06:	d0f8      	beq.n	800aefa <_dtoa_r+0x63a>
 800af08:	46c1      	mov	r9, r8
 800af0a:	e03a      	b.n	800af82 <_dtoa_r+0x6c2>
 800af0c:	4ba2      	ldr	r3, [pc, #648]	; (800b198 <_dtoa_r+0x8d8>)
 800af0e:	f7f5 fb4f 	bl	80005b0 <__aeabi_dmul>
 800af12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af16:	e7bc      	b.n	800ae92 <_dtoa_r+0x5d2>
 800af18:	9f08      	ldr	r7, [sp, #32]
 800af1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af22:	f7f5 fc6f 	bl	8000804 <__aeabi_ddiv>
 800af26:	f7f5 fdf3 	bl	8000b10 <__aeabi_d2iz>
 800af2a:	4604      	mov	r4, r0
 800af2c:	f7f5 fad6 	bl	80004dc <__aeabi_i2d>
 800af30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af34:	f7f5 fb3c 	bl	80005b0 <__aeabi_dmul>
 800af38:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800af3c:	460b      	mov	r3, r1
 800af3e:	4602      	mov	r2, r0
 800af40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af44:	f7f5 f97c 	bl	8000240 <__aeabi_dsub>
 800af48:	f807 6b01 	strb.w	r6, [r7], #1
 800af4c:	9e08      	ldr	r6, [sp, #32]
 800af4e:	9b02      	ldr	r3, [sp, #8]
 800af50:	1bbe      	subs	r6, r7, r6
 800af52:	42b3      	cmp	r3, r6
 800af54:	d13a      	bne.n	800afcc <_dtoa_r+0x70c>
 800af56:	4602      	mov	r2, r0
 800af58:	460b      	mov	r3, r1
 800af5a:	f7f5 f973 	bl	8000244 <__adddf3>
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af6a:	f7f5 fdb1 	bl	8000ad0 <__aeabi_dcmpgt>
 800af6e:	bb58      	cbnz	r0, 800afc8 <_dtoa_r+0x708>
 800af70:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800af74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af78:	f7f5 fd82 	bl	8000a80 <__aeabi_dcmpeq>
 800af7c:	b108      	cbz	r0, 800af82 <_dtoa_r+0x6c2>
 800af7e:	07e1      	lsls	r1, r4, #31
 800af80:	d422      	bmi.n	800afc8 <_dtoa_r+0x708>
 800af82:	4628      	mov	r0, r5
 800af84:	4651      	mov	r1, sl
 800af86:	f000 fbeb 	bl	800b760 <_Bfree>
 800af8a:	2300      	movs	r3, #0
 800af8c:	703b      	strb	r3, [r7, #0]
 800af8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800af90:	f109 0001 	add.w	r0, r9, #1
 800af94:	6018      	str	r0, [r3, #0]
 800af96:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f43f acdf 	beq.w	800a95c <_dtoa_r+0x9c>
 800af9e:	601f      	str	r7, [r3, #0]
 800afa0:	e4dc      	b.n	800a95c <_dtoa_r+0x9c>
 800afa2:	4627      	mov	r7, r4
 800afa4:	463b      	mov	r3, r7
 800afa6:	461f      	mov	r7, r3
 800afa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afac:	2a39      	cmp	r2, #57	; 0x39
 800afae:	d107      	bne.n	800afc0 <_dtoa_r+0x700>
 800afb0:	9a08      	ldr	r2, [sp, #32]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d1f7      	bne.n	800afa6 <_dtoa_r+0x6e6>
 800afb6:	2230      	movs	r2, #48	; 0x30
 800afb8:	9908      	ldr	r1, [sp, #32]
 800afba:	f108 0801 	add.w	r8, r8, #1
 800afbe:	700a      	strb	r2, [r1, #0]
 800afc0:	781a      	ldrb	r2, [r3, #0]
 800afc2:	3201      	adds	r2, #1
 800afc4:	701a      	strb	r2, [r3, #0]
 800afc6:	e79f      	b.n	800af08 <_dtoa_r+0x648>
 800afc8:	46c8      	mov	r8, r9
 800afca:	e7eb      	b.n	800afa4 <_dtoa_r+0x6e4>
 800afcc:	2200      	movs	r2, #0
 800afce:	4b72      	ldr	r3, [pc, #456]	; (800b198 <_dtoa_r+0x8d8>)
 800afd0:	f7f5 faee 	bl	80005b0 <__aeabi_dmul>
 800afd4:	4602      	mov	r2, r0
 800afd6:	460b      	mov	r3, r1
 800afd8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afdc:	2200      	movs	r2, #0
 800afde:	2300      	movs	r3, #0
 800afe0:	f7f5 fd4e 	bl	8000a80 <__aeabi_dcmpeq>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d098      	beq.n	800af1a <_dtoa_r+0x65a>
 800afe8:	e7cb      	b.n	800af82 <_dtoa_r+0x6c2>
 800afea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800afec:	2a00      	cmp	r2, #0
 800afee:	f000 80cd 	beq.w	800b18c <_dtoa_r+0x8cc>
 800aff2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800aff4:	2a01      	cmp	r2, #1
 800aff6:	f300 80af 	bgt.w	800b158 <_dtoa_r+0x898>
 800affa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800affc:	2a00      	cmp	r2, #0
 800affe:	f000 80a7 	beq.w	800b150 <_dtoa_r+0x890>
 800b002:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b006:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b008:	9f06      	ldr	r7, [sp, #24]
 800b00a:	9a06      	ldr	r2, [sp, #24]
 800b00c:	2101      	movs	r1, #1
 800b00e:	441a      	add	r2, r3
 800b010:	9206      	str	r2, [sp, #24]
 800b012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b014:	4628      	mov	r0, r5
 800b016:	441a      	add	r2, r3
 800b018:	9209      	str	r2, [sp, #36]	; 0x24
 800b01a:	f000 fc5b 	bl	800b8d4 <__i2b>
 800b01e:	4606      	mov	r6, r0
 800b020:	2f00      	cmp	r7, #0
 800b022:	dd0c      	ble.n	800b03e <_dtoa_r+0x77e>
 800b024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b026:	2b00      	cmp	r3, #0
 800b028:	dd09      	ble.n	800b03e <_dtoa_r+0x77e>
 800b02a:	42bb      	cmp	r3, r7
 800b02c:	bfa8      	it	ge
 800b02e:	463b      	movge	r3, r7
 800b030:	9a06      	ldr	r2, [sp, #24]
 800b032:	1aff      	subs	r7, r7, r3
 800b034:	1ad2      	subs	r2, r2, r3
 800b036:	9206      	str	r2, [sp, #24]
 800b038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	9309      	str	r3, [sp, #36]	; 0x24
 800b03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b040:	b1f3      	cbz	r3, 800b080 <_dtoa_r+0x7c0>
 800b042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b044:	2b00      	cmp	r3, #0
 800b046:	f000 80a9 	beq.w	800b19c <_dtoa_r+0x8dc>
 800b04a:	2c00      	cmp	r4, #0
 800b04c:	dd10      	ble.n	800b070 <_dtoa_r+0x7b0>
 800b04e:	4631      	mov	r1, r6
 800b050:	4622      	mov	r2, r4
 800b052:	4628      	mov	r0, r5
 800b054:	f000 fcf8 	bl	800ba48 <__pow5mult>
 800b058:	4652      	mov	r2, sl
 800b05a:	4601      	mov	r1, r0
 800b05c:	4606      	mov	r6, r0
 800b05e:	4628      	mov	r0, r5
 800b060:	f000 fc4e 	bl	800b900 <__multiply>
 800b064:	4680      	mov	r8, r0
 800b066:	4651      	mov	r1, sl
 800b068:	4628      	mov	r0, r5
 800b06a:	f000 fb79 	bl	800b760 <_Bfree>
 800b06e:	46c2      	mov	sl, r8
 800b070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b072:	1b1a      	subs	r2, r3, r4
 800b074:	d004      	beq.n	800b080 <_dtoa_r+0x7c0>
 800b076:	4651      	mov	r1, sl
 800b078:	4628      	mov	r0, r5
 800b07a:	f000 fce5 	bl	800ba48 <__pow5mult>
 800b07e:	4682      	mov	sl, r0
 800b080:	2101      	movs	r1, #1
 800b082:	4628      	mov	r0, r5
 800b084:	f000 fc26 	bl	800b8d4 <__i2b>
 800b088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b08a:	4604      	mov	r4, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f340 8087 	ble.w	800b1a0 <_dtoa_r+0x8e0>
 800b092:	461a      	mov	r2, r3
 800b094:	4601      	mov	r1, r0
 800b096:	4628      	mov	r0, r5
 800b098:	f000 fcd6 	bl	800ba48 <__pow5mult>
 800b09c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b09e:	4604      	mov	r4, r0
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	f340 8080 	ble.w	800b1a6 <_dtoa_r+0x8e6>
 800b0a6:	f04f 0800 	mov.w	r8, #0
 800b0aa:	6923      	ldr	r3, [r4, #16]
 800b0ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b0b0:	6918      	ldr	r0, [r3, #16]
 800b0b2:	f000 fbc1 	bl	800b838 <__hi0bits>
 800b0b6:	f1c0 0020 	rsb	r0, r0, #32
 800b0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0bc:	4418      	add	r0, r3
 800b0be:	f010 001f 	ands.w	r0, r0, #31
 800b0c2:	f000 8092 	beq.w	800b1ea <_dtoa_r+0x92a>
 800b0c6:	f1c0 0320 	rsb	r3, r0, #32
 800b0ca:	2b04      	cmp	r3, #4
 800b0cc:	f340 808a 	ble.w	800b1e4 <_dtoa_r+0x924>
 800b0d0:	f1c0 001c 	rsb	r0, r0, #28
 800b0d4:	9b06      	ldr	r3, [sp, #24]
 800b0d6:	4407      	add	r7, r0
 800b0d8:	4403      	add	r3, r0
 800b0da:	9306      	str	r3, [sp, #24]
 800b0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0de:	4403      	add	r3, r0
 800b0e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0e2:	9b06      	ldr	r3, [sp, #24]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	dd05      	ble.n	800b0f4 <_dtoa_r+0x834>
 800b0e8:	4651      	mov	r1, sl
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	f000 fd05 	bl	800bafc <__lshift>
 800b0f2:	4682      	mov	sl, r0
 800b0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	dd05      	ble.n	800b106 <_dtoa_r+0x846>
 800b0fa:	4621      	mov	r1, r4
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	4628      	mov	r0, r5
 800b100:	f000 fcfc 	bl	800bafc <__lshift>
 800b104:	4604      	mov	r4, r0
 800b106:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d070      	beq.n	800b1ee <_dtoa_r+0x92e>
 800b10c:	4621      	mov	r1, r4
 800b10e:	4650      	mov	r0, sl
 800b110:	f000 fd60 	bl	800bbd4 <__mcmp>
 800b114:	2800      	cmp	r0, #0
 800b116:	da6a      	bge.n	800b1ee <_dtoa_r+0x92e>
 800b118:	2300      	movs	r3, #0
 800b11a:	4651      	mov	r1, sl
 800b11c:	220a      	movs	r2, #10
 800b11e:	4628      	mov	r0, r5
 800b120:	f000 fb40 	bl	800b7a4 <__multadd>
 800b124:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b126:	4682      	mov	sl, r0
 800b128:	f109 39ff 	add.w	r9, r9, #4294967295
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	f000 8193 	beq.w	800b458 <_dtoa_r+0xb98>
 800b132:	4631      	mov	r1, r6
 800b134:	2300      	movs	r3, #0
 800b136:	220a      	movs	r2, #10
 800b138:	4628      	mov	r0, r5
 800b13a:	f000 fb33 	bl	800b7a4 <__multadd>
 800b13e:	f1bb 0f00 	cmp.w	fp, #0
 800b142:	4606      	mov	r6, r0
 800b144:	f300 8093 	bgt.w	800b26e <_dtoa_r+0x9ae>
 800b148:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	dc57      	bgt.n	800b1fe <_dtoa_r+0x93e>
 800b14e:	e08e      	b.n	800b26e <_dtoa_r+0x9ae>
 800b150:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b152:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b156:	e756      	b.n	800b006 <_dtoa_r+0x746>
 800b158:	9b02      	ldr	r3, [sp, #8]
 800b15a:	1e5c      	subs	r4, r3, #1
 800b15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b15e:	42a3      	cmp	r3, r4
 800b160:	bfb7      	itett	lt
 800b162:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b164:	1b1c      	subge	r4, r3, r4
 800b166:	1ae2      	sublt	r2, r4, r3
 800b168:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b16a:	bfbe      	ittt	lt
 800b16c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b16e:	189b      	addlt	r3, r3, r2
 800b170:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b172:	9b02      	ldr	r3, [sp, #8]
 800b174:	bfb8      	it	lt
 800b176:	2400      	movlt	r4, #0
 800b178:	2b00      	cmp	r3, #0
 800b17a:	bfbb      	ittet	lt
 800b17c:	9b06      	ldrlt	r3, [sp, #24]
 800b17e:	9a02      	ldrlt	r2, [sp, #8]
 800b180:	9f06      	ldrge	r7, [sp, #24]
 800b182:	1a9f      	sublt	r7, r3, r2
 800b184:	bfac      	ite	ge
 800b186:	9b02      	ldrge	r3, [sp, #8]
 800b188:	2300      	movlt	r3, #0
 800b18a:	e73e      	b.n	800b00a <_dtoa_r+0x74a>
 800b18c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b18e:	9f06      	ldr	r7, [sp, #24]
 800b190:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b192:	e745      	b.n	800b020 <_dtoa_r+0x760>
 800b194:	3fe00000 	.word	0x3fe00000
 800b198:	40240000 	.word	0x40240000
 800b19c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b19e:	e76a      	b.n	800b076 <_dtoa_r+0x7b6>
 800b1a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	dc19      	bgt.n	800b1da <_dtoa_r+0x91a>
 800b1a6:	9b04      	ldr	r3, [sp, #16]
 800b1a8:	b9bb      	cbnz	r3, 800b1da <_dtoa_r+0x91a>
 800b1aa:	9b05      	ldr	r3, [sp, #20]
 800b1ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1b0:	b99b      	cbnz	r3, 800b1da <_dtoa_r+0x91a>
 800b1b2:	9b05      	ldr	r3, [sp, #20]
 800b1b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1b8:	0d1b      	lsrs	r3, r3, #20
 800b1ba:	051b      	lsls	r3, r3, #20
 800b1bc:	b183      	cbz	r3, 800b1e0 <_dtoa_r+0x920>
 800b1be:	f04f 0801 	mov.w	r8, #1
 800b1c2:	9b06      	ldr	r3, [sp, #24]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	9306      	str	r3, [sp, #24]
 800b1c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f47f af6a 	bne.w	800b0aa <_dtoa_r+0x7ea>
 800b1d6:	2001      	movs	r0, #1
 800b1d8:	e76f      	b.n	800b0ba <_dtoa_r+0x7fa>
 800b1da:	f04f 0800 	mov.w	r8, #0
 800b1de:	e7f6      	b.n	800b1ce <_dtoa_r+0x90e>
 800b1e0:	4698      	mov	r8, r3
 800b1e2:	e7f4      	b.n	800b1ce <_dtoa_r+0x90e>
 800b1e4:	f43f af7d 	beq.w	800b0e2 <_dtoa_r+0x822>
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	301c      	adds	r0, #28
 800b1ec:	e772      	b.n	800b0d4 <_dtoa_r+0x814>
 800b1ee:	9b02      	ldr	r3, [sp, #8]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	dc36      	bgt.n	800b262 <_dtoa_r+0x9a2>
 800b1f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	dd33      	ble.n	800b262 <_dtoa_r+0x9a2>
 800b1fa:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b1fe:	f1bb 0f00 	cmp.w	fp, #0
 800b202:	d10d      	bne.n	800b220 <_dtoa_r+0x960>
 800b204:	4621      	mov	r1, r4
 800b206:	465b      	mov	r3, fp
 800b208:	2205      	movs	r2, #5
 800b20a:	4628      	mov	r0, r5
 800b20c:	f000 faca 	bl	800b7a4 <__multadd>
 800b210:	4601      	mov	r1, r0
 800b212:	4604      	mov	r4, r0
 800b214:	4650      	mov	r0, sl
 800b216:	f000 fcdd 	bl	800bbd4 <__mcmp>
 800b21a:	2800      	cmp	r0, #0
 800b21c:	f73f adb6 	bgt.w	800ad8c <_dtoa_r+0x4cc>
 800b220:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b222:	9f08      	ldr	r7, [sp, #32]
 800b224:	ea6f 0903 	mvn.w	r9, r3
 800b228:	f04f 0800 	mov.w	r8, #0
 800b22c:	4621      	mov	r1, r4
 800b22e:	4628      	mov	r0, r5
 800b230:	f000 fa96 	bl	800b760 <_Bfree>
 800b234:	2e00      	cmp	r6, #0
 800b236:	f43f aea4 	beq.w	800af82 <_dtoa_r+0x6c2>
 800b23a:	f1b8 0f00 	cmp.w	r8, #0
 800b23e:	d005      	beq.n	800b24c <_dtoa_r+0x98c>
 800b240:	45b0      	cmp	r8, r6
 800b242:	d003      	beq.n	800b24c <_dtoa_r+0x98c>
 800b244:	4641      	mov	r1, r8
 800b246:	4628      	mov	r0, r5
 800b248:	f000 fa8a 	bl	800b760 <_Bfree>
 800b24c:	4631      	mov	r1, r6
 800b24e:	4628      	mov	r0, r5
 800b250:	f000 fa86 	bl	800b760 <_Bfree>
 800b254:	e695      	b.n	800af82 <_dtoa_r+0x6c2>
 800b256:	2400      	movs	r4, #0
 800b258:	4626      	mov	r6, r4
 800b25a:	e7e1      	b.n	800b220 <_dtoa_r+0x960>
 800b25c:	46c1      	mov	r9, r8
 800b25e:	4626      	mov	r6, r4
 800b260:	e594      	b.n	800ad8c <_dtoa_r+0x4cc>
 800b262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b264:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f000 80fc 	beq.w	800b466 <_dtoa_r+0xba6>
 800b26e:	2f00      	cmp	r7, #0
 800b270:	dd05      	ble.n	800b27e <_dtoa_r+0x9be>
 800b272:	4631      	mov	r1, r6
 800b274:	463a      	mov	r2, r7
 800b276:	4628      	mov	r0, r5
 800b278:	f000 fc40 	bl	800bafc <__lshift>
 800b27c:	4606      	mov	r6, r0
 800b27e:	f1b8 0f00 	cmp.w	r8, #0
 800b282:	d05c      	beq.n	800b33e <_dtoa_r+0xa7e>
 800b284:	4628      	mov	r0, r5
 800b286:	6871      	ldr	r1, [r6, #4]
 800b288:	f000 fa2a 	bl	800b6e0 <_Balloc>
 800b28c:	4607      	mov	r7, r0
 800b28e:	b928      	cbnz	r0, 800b29c <_dtoa_r+0x9dc>
 800b290:	4602      	mov	r2, r0
 800b292:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b296:	4b7e      	ldr	r3, [pc, #504]	; (800b490 <_dtoa_r+0xbd0>)
 800b298:	f7ff bb26 	b.w	800a8e8 <_dtoa_r+0x28>
 800b29c:	6932      	ldr	r2, [r6, #16]
 800b29e:	f106 010c 	add.w	r1, r6, #12
 800b2a2:	3202      	adds	r2, #2
 800b2a4:	0092      	lsls	r2, r2, #2
 800b2a6:	300c      	adds	r0, #12
 800b2a8:	f000 fa0c 	bl	800b6c4 <memcpy>
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	4639      	mov	r1, r7
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	f000 fc23 	bl	800bafc <__lshift>
 800b2b6:	46b0      	mov	r8, r6
 800b2b8:	4606      	mov	r6, r0
 800b2ba:	9b08      	ldr	r3, [sp, #32]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	9302      	str	r3, [sp, #8]
 800b2c0:	9b08      	ldr	r3, [sp, #32]
 800b2c2:	445b      	add	r3, fp
 800b2c4:	930a      	str	r3, [sp, #40]	; 0x28
 800b2c6:	9b04      	ldr	r3, [sp, #16]
 800b2c8:	f003 0301 	and.w	r3, r3, #1
 800b2cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ce:	9b02      	ldr	r3, [sp, #8]
 800b2d0:	4621      	mov	r1, r4
 800b2d2:	4650      	mov	r0, sl
 800b2d4:	f103 3bff 	add.w	fp, r3, #4294967295
 800b2d8:	f7ff fa64 	bl	800a7a4 <quorem>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	4641      	mov	r1, r8
 800b2e0:	3330      	adds	r3, #48	; 0x30
 800b2e2:	9004      	str	r0, [sp, #16]
 800b2e4:	4650      	mov	r0, sl
 800b2e6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2e8:	f000 fc74 	bl	800bbd4 <__mcmp>
 800b2ec:	4632      	mov	r2, r6
 800b2ee:	9006      	str	r0, [sp, #24]
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	f000 fc8a 	bl	800bc0c <__mdiff>
 800b2f8:	68c2      	ldr	r2, [r0, #12]
 800b2fa:	4607      	mov	r7, r0
 800b2fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2fe:	bb02      	cbnz	r2, 800b342 <_dtoa_r+0xa82>
 800b300:	4601      	mov	r1, r0
 800b302:	4650      	mov	r0, sl
 800b304:	f000 fc66 	bl	800bbd4 <__mcmp>
 800b308:	4602      	mov	r2, r0
 800b30a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b30c:	4639      	mov	r1, r7
 800b30e:	4628      	mov	r0, r5
 800b310:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800b314:	f000 fa24 	bl	800b760 <_Bfree>
 800b318:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b31a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b31c:	9f02      	ldr	r7, [sp, #8]
 800b31e:	ea43 0102 	orr.w	r1, r3, r2
 800b322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b324:	430b      	orrs	r3, r1
 800b326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b328:	d10d      	bne.n	800b346 <_dtoa_r+0xa86>
 800b32a:	2b39      	cmp	r3, #57	; 0x39
 800b32c:	d027      	beq.n	800b37e <_dtoa_r+0xabe>
 800b32e:	9a06      	ldr	r2, [sp, #24]
 800b330:	2a00      	cmp	r2, #0
 800b332:	dd01      	ble.n	800b338 <_dtoa_r+0xa78>
 800b334:	9b04      	ldr	r3, [sp, #16]
 800b336:	3331      	adds	r3, #49	; 0x31
 800b338:	f88b 3000 	strb.w	r3, [fp]
 800b33c:	e776      	b.n	800b22c <_dtoa_r+0x96c>
 800b33e:	4630      	mov	r0, r6
 800b340:	e7b9      	b.n	800b2b6 <_dtoa_r+0x9f6>
 800b342:	2201      	movs	r2, #1
 800b344:	e7e2      	b.n	800b30c <_dtoa_r+0xa4c>
 800b346:	9906      	ldr	r1, [sp, #24]
 800b348:	2900      	cmp	r1, #0
 800b34a:	db04      	blt.n	800b356 <_dtoa_r+0xa96>
 800b34c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800b34e:	4301      	orrs	r1, r0
 800b350:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b352:	4301      	orrs	r1, r0
 800b354:	d120      	bne.n	800b398 <_dtoa_r+0xad8>
 800b356:	2a00      	cmp	r2, #0
 800b358:	ddee      	ble.n	800b338 <_dtoa_r+0xa78>
 800b35a:	4651      	mov	r1, sl
 800b35c:	2201      	movs	r2, #1
 800b35e:	4628      	mov	r0, r5
 800b360:	9302      	str	r3, [sp, #8]
 800b362:	f000 fbcb 	bl	800bafc <__lshift>
 800b366:	4621      	mov	r1, r4
 800b368:	4682      	mov	sl, r0
 800b36a:	f000 fc33 	bl	800bbd4 <__mcmp>
 800b36e:	2800      	cmp	r0, #0
 800b370:	9b02      	ldr	r3, [sp, #8]
 800b372:	dc02      	bgt.n	800b37a <_dtoa_r+0xaba>
 800b374:	d1e0      	bne.n	800b338 <_dtoa_r+0xa78>
 800b376:	07da      	lsls	r2, r3, #31
 800b378:	d5de      	bpl.n	800b338 <_dtoa_r+0xa78>
 800b37a:	2b39      	cmp	r3, #57	; 0x39
 800b37c:	d1da      	bne.n	800b334 <_dtoa_r+0xa74>
 800b37e:	2339      	movs	r3, #57	; 0x39
 800b380:	f88b 3000 	strb.w	r3, [fp]
 800b384:	463b      	mov	r3, r7
 800b386:	461f      	mov	r7, r3
 800b388:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800b38c:	3b01      	subs	r3, #1
 800b38e:	2a39      	cmp	r2, #57	; 0x39
 800b390:	d050      	beq.n	800b434 <_dtoa_r+0xb74>
 800b392:	3201      	adds	r2, #1
 800b394:	701a      	strb	r2, [r3, #0]
 800b396:	e749      	b.n	800b22c <_dtoa_r+0x96c>
 800b398:	2a00      	cmp	r2, #0
 800b39a:	dd03      	ble.n	800b3a4 <_dtoa_r+0xae4>
 800b39c:	2b39      	cmp	r3, #57	; 0x39
 800b39e:	d0ee      	beq.n	800b37e <_dtoa_r+0xabe>
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	e7c9      	b.n	800b338 <_dtoa_r+0xa78>
 800b3a4:	9a02      	ldr	r2, [sp, #8]
 800b3a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b3a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b3ac:	428a      	cmp	r2, r1
 800b3ae:	d02a      	beq.n	800b406 <_dtoa_r+0xb46>
 800b3b0:	4651      	mov	r1, sl
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	220a      	movs	r2, #10
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	f000 f9f4 	bl	800b7a4 <__multadd>
 800b3bc:	45b0      	cmp	r8, r6
 800b3be:	4682      	mov	sl, r0
 800b3c0:	f04f 0300 	mov.w	r3, #0
 800b3c4:	f04f 020a 	mov.w	r2, #10
 800b3c8:	4641      	mov	r1, r8
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	d107      	bne.n	800b3de <_dtoa_r+0xb1e>
 800b3ce:	f000 f9e9 	bl	800b7a4 <__multadd>
 800b3d2:	4680      	mov	r8, r0
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	9b02      	ldr	r3, [sp, #8]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	9302      	str	r3, [sp, #8]
 800b3dc:	e777      	b.n	800b2ce <_dtoa_r+0xa0e>
 800b3de:	f000 f9e1 	bl	800b7a4 <__multadd>
 800b3e2:	4631      	mov	r1, r6
 800b3e4:	4680      	mov	r8, r0
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	220a      	movs	r2, #10
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	f000 f9da 	bl	800b7a4 <__multadd>
 800b3f0:	4606      	mov	r6, r0
 800b3f2:	e7f0      	b.n	800b3d6 <_dtoa_r+0xb16>
 800b3f4:	f1bb 0f00 	cmp.w	fp, #0
 800b3f8:	bfcc      	ite	gt
 800b3fa:	465f      	movgt	r7, fp
 800b3fc:	2701      	movle	r7, #1
 800b3fe:	f04f 0800 	mov.w	r8, #0
 800b402:	9a08      	ldr	r2, [sp, #32]
 800b404:	4417      	add	r7, r2
 800b406:	4651      	mov	r1, sl
 800b408:	2201      	movs	r2, #1
 800b40a:	4628      	mov	r0, r5
 800b40c:	9302      	str	r3, [sp, #8]
 800b40e:	f000 fb75 	bl	800bafc <__lshift>
 800b412:	4621      	mov	r1, r4
 800b414:	4682      	mov	sl, r0
 800b416:	f000 fbdd 	bl	800bbd4 <__mcmp>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	dcb2      	bgt.n	800b384 <_dtoa_r+0xac4>
 800b41e:	d102      	bne.n	800b426 <_dtoa_r+0xb66>
 800b420:	9b02      	ldr	r3, [sp, #8]
 800b422:	07db      	lsls	r3, r3, #31
 800b424:	d4ae      	bmi.n	800b384 <_dtoa_r+0xac4>
 800b426:	463b      	mov	r3, r7
 800b428:	461f      	mov	r7, r3
 800b42a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b42e:	2a30      	cmp	r2, #48	; 0x30
 800b430:	d0fa      	beq.n	800b428 <_dtoa_r+0xb68>
 800b432:	e6fb      	b.n	800b22c <_dtoa_r+0x96c>
 800b434:	9a08      	ldr	r2, [sp, #32]
 800b436:	429a      	cmp	r2, r3
 800b438:	d1a5      	bne.n	800b386 <_dtoa_r+0xac6>
 800b43a:	2331      	movs	r3, #49	; 0x31
 800b43c:	f109 0901 	add.w	r9, r9, #1
 800b440:	7013      	strb	r3, [r2, #0]
 800b442:	e6f3      	b.n	800b22c <_dtoa_r+0x96c>
 800b444:	4b13      	ldr	r3, [pc, #76]	; (800b494 <_dtoa_r+0xbd4>)
 800b446:	f7ff baa7 	b.w	800a998 <_dtoa_r+0xd8>
 800b44a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f47f aa80 	bne.w	800a952 <_dtoa_r+0x92>
 800b452:	4b11      	ldr	r3, [pc, #68]	; (800b498 <_dtoa_r+0xbd8>)
 800b454:	f7ff baa0 	b.w	800a998 <_dtoa_r+0xd8>
 800b458:	f1bb 0f00 	cmp.w	fp, #0
 800b45c:	dc03      	bgt.n	800b466 <_dtoa_r+0xba6>
 800b45e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b460:	2b02      	cmp	r3, #2
 800b462:	f73f aecc 	bgt.w	800b1fe <_dtoa_r+0x93e>
 800b466:	9f08      	ldr	r7, [sp, #32]
 800b468:	4621      	mov	r1, r4
 800b46a:	4650      	mov	r0, sl
 800b46c:	f7ff f99a 	bl	800a7a4 <quorem>
 800b470:	9a08      	ldr	r2, [sp, #32]
 800b472:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b476:	f807 3b01 	strb.w	r3, [r7], #1
 800b47a:	1aba      	subs	r2, r7, r2
 800b47c:	4593      	cmp	fp, r2
 800b47e:	ddb9      	ble.n	800b3f4 <_dtoa_r+0xb34>
 800b480:	4651      	mov	r1, sl
 800b482:	2300      	movs	r3, #0
 800b484:	220a      	movs	r2, #10
 800b486:	4628      	mov	r0, r5
 800b488:	f000 f98c 	bl	800b7a4 <__multadd>
 800b48c:	4682      	mov	sl, r0
 800b48e:	e7eb      	b.n	800b468 <_dtoa_r+0xba8>
 800b490:	0800e1ff 	.word	0x0800e1ff
 800b494:	0800e158 	.word	0x0800e158
 800b498:	0800e17c 	.word	0x0800e17c

0800b49c <std>:
 800b49c:	2300      	movs	r3, #0
 800b49e:	b510      	push	{r4, lr}
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	e9c0 3300 	strd	r3, r3, [r0]
 800b4a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b4aa:	6083      	str	r3, [r0, #8]
 800b4ac:	8181      	strh	r1, [r0, #12]
 800b4ae:	6643      	str	r3, [r0, #100]	; 0x64
 800b4b0:	81c2      	strh	r2, [r0, #14]
 800b4b2:	6183      	str	r3, [r0, #24]
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	2208      	movs	r2, #8
 800b4b8:	305c      	adds	r0, #92	; 0x5c
 800b4ba:	f7fe fcf3 	bl	8009ea4 <memset>
 800b4be:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <std+0x38>)
 800b4c0:	6224      	str	r4, [r4, #32]
 800b4c2:	6263      	str	r3, [r4, #36]	; 0x24
 800b4c4:	4b04      	ldr	r3, [pc, #16]	; (800b4d8 <std+0x3c>)
 800b4c6:	62a3      	str	r3, [r4, #40]	; 0x28
 800b4c8:	4b04      	ldr	r3, [pc, #16]	; (800b4dc <std+0x40>)
 800b4ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b4cc:	4b04      	ldr	r3, [pc, #16]	; (800b4e0 <std+0x44>)
 800b4ce:	6323      	str	r3, [r4, #48]	; 0x30
 800b4d0:	bd10      	pop	{r4, pc}
 800b4d2:	bf00      	nop
 800b4d4:	0800c21d 	.word	0x0800c21d
 800b4d8:	0800c23f 	.word	0x0800c23f
 800b4dc:	0800c277 	.word	0x0800c277
 800b4e0:	0800c29b 	.word	0x0800c29b

0800b4e4 <_cleanup_r>:
 800b4e4:	4901      	ldr	r1, [pc, #4]	; (800b4ec <_cleanup_r+0x8>)
 800b4e6:	f000 b8af 	b.w	800b648 <_fwalk_reent>
 800b4ea:	bf00      	nop
 800b4ec:	0800c5b1 	.word	0x0800c5b1

0800b4f0 <__sfmoreglue>:
 800b4f0:	b570      	push	{r4, r5, r6, lr}
 800b4f2:	2568      	movs	r5, #104	; 0x68
 800b4f4:	1e4a      	subs	r2, r1, #1
 800b4f6:	4355      	muls	r5, r2
 800b4f8:	460e      	mov	r6, r1
 800b4fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b4fe:	f000 fccb 	bl	800be98 <_malloc_r>
 800b502:	4604      	mov	r4, r0
 800b504:	b140      	cbz	r0, 800b518 <__sfmoreglue+0x28>
 800b506:	2100      	movs	r1, #0
 800b508:	e9c0 1600 	strd	r1, r6, [r0]
 800b50c:	300c      	adds	r0, #12
 800b50e:	60a0      	str	r0, [r4, #8]
 800b510:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b514:	f7fe fcc6 	bl	8009ea4 <memset>
 800b518:	4620      	mov	r0, r4
 800b51a:	bd70      	pop	{r4, r5, r6, pc}

0800b51c <__sfp_lock_acquire>:
 800b51c:	4801      	ldr	r0, [pc, #4]	; (800b524 <__sfp_lock_acquire+0x8>)
 800b51e:	f000 b8b8 	b.w	800b692 <__retarget_lock_acquire_recursive>
 800b522:	bf00      	nop
 800b524:	20000378 	.word	0x20000378

0800b528 <__sfp_lock_release>:
 800b528:	4801      	ldr	r0, [pc, #4]	; (800b530 <__sfp_lock_release+0x8>)
 800b52a:	f000 b8b3 	b.w	800b694 <__retarget_lock_release_recursive>
 800b52e:	bf00      	nop
 800b530:	20000378 	.word	0x20000378

0800b534 <__sinit_lock_acquire>:
 800b534:	4801      	ldr	r0, [pc, #4]	; (800b53c <__sinit_lock_acquire+0x8>)
 800b536:	f000 b8ac 	b.w	800b692 <__retarget_lock_acquire_recursive>
 800b53a:	bf00      	nop
 800b53c:	20000373 	.word	0x20000373

0800b540 <__sinit_lock_release>:
 800b540:	4801      	ldr	r0, [pc, #4]	; (800b548 <__sinit_lock_release+0x8>)
 800b542:	f000 b8a7 	b.w	800b694 <__retarget_lock_release_recursive>
 800b546:	bf00      	nop
 800b548:	20000373 	.word	0x20000373

0800b54c <__sinit>:
 800b54c:	b510      	push	{r4, lr}
 800b54e:	4604      	mov	r4, r0
 800b550:	f7ff fff0 	bl	800b534 <__sinit_lock_acquire>
 800b554:	69a3      	ldr	r3, [r4, #24]
 800b556:	b11b      	cbz	r3, 800b560 <__sinit+0x14>
 800b558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b55c:	f7ff bff0 	b.w	800b540 <__sinit_lock_release>
 800b560:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b564:	6523      	str	r3, [r4, #80]	; 0x50
 800b566:	4b13      	ldr	r3, [pc, #76]	; (800b5b4 <__sinit+0x68>)
 800b568:	4a13      	ldr	r2, [pc, #76]	; (800b5b8 <__sinit+0x6c>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	62a2      	str	r2, [r4, #40]	; 0x28
 800b56e:	42a3      	cmp	r3, r4
 800b570:	bf08      	it	eq
 800b572:	2301      	moveq	r3, #1
 800b574:	4620      	mov	r0, r4
 800b576:	bf08      	it	eq
 800b578:	61a3      	streq	r3, [r4, #24]
 800b57a:	f000 f81f 	bl	800b5bc <__sfp>
 800b57e:	6060      	str	r0, [r4, #4]
 800b580:	4620      	mov	r0, r4
 800b582:	f000 f81b 	bl	800b5bc <__sfp>
 800b586:	60a0      	str	r0, [r4, #8]
 800b588:	4620      	mov	r0, r4
 800b58a:	f000 f817 	bl	800b5bc <__sfp>
 800b58e:	2200      	movs	r2, #0
 800b590:	2104      	movs	r1, #4
 800b592:	60e0      	str	r0, [r4, #12]
 800b594:	6860      	ldr	r0, [r4, #4]
 800b596:	f7ff ff81 	bl	800b49c <std>
 800b59a:	2201      	movs	r2, #1
 800b59c:	2109      	movs	r1, #9
 800b59e:	68a0      	ldr	r0, [r4, #8]
 800b5a0:	f7ff ff7c 	bl	800b49c <std>
 800b5a4:	2202      	movs	r2, #2
 800b5a6:	2112      	movs	r1, #18
 800b5a8:	68e0      	ldr	r0, [r4, #12]
 800b5aa:	f7ff ff77 	bl	800b49c <std>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	61a3      	str	r3, [r4, #24]
 800b5b2:	e7d1      	b.n	800b558 <__sinit+0xc>
 800b5b4:	0800e144 	.word	0x0800e144
 800b5b8:	0800b4e5 	.word	0x0800b4e5

0800b5bc <__sfp>:
 800b5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5be:	4607      	mov	r7, r0
 800b5c0:	f7ff ffac 	bl	800b51c <__sfp_lock_acquire>
 800b5c4:	4b1e      	ldr	r3, [pc, #120]	; (800b640 <__sfp+0x84>)
 800b5c6:	681e      	ldr	r6, [r3, #0]
 800b5c8:	69b3      	ldr	r3, [r6, #24]
 800b5ca:	b913      	cbnz	r3, 800b5d2 <__sfp+0x16>
 800b5cc:	4630      	mov	r0, r6
 800b5ce:	f7ff ffbd 	bl	800b54c <__sinit>
 800b5d2:	3648      	adds	r6, #72	; 0x48
 800b5d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b5d8:	3b01      	subs	r3, #1
 800b5da:	d503      	bpl.n	800b5e4 <__sfp+0x28>
 800b5dc:	6833      	ldr	r3, [r6, #0]
 800b5de:	b30b      	cbz	r3, 800b624 <__sfp+0x68>
 800b5e0:	6836      	ldr	r6, [r6, #0]
 800b5e2:	e7f7      	b.n	800b5d4 <__sfp+0x18>
 800b5e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b5e8:	b9d5      	cbnz	r5, 800b620 <__sfp+0x64>
 800b5ea:	4b16      	ldr	r3, [pc, #88]	; (800b644 <__sfp+0x88>)
 800b5ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5f0:	60e3      	str	r3, [r4, #12]
 800b5f2:	6665      	str	r5, [r4, #100]	; 0x64
 800b5f4:	f000 f84c 	bl	800b690 <__retarget_lock_init_recursive>
 800b5f8:	f7ff ff96 	bl	800b528 <__sfp_lock_release>
 800b5fc:	2208      	movs	r2, #8
 800b5fe:	4629      	mov	r1, r5
 800b600:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b604:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b608:	6025      	str	r5, [r4, #0]
 800b60a:	61a5      	str	r5, [r4, #24]
 800b60c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b610:	f7fe fc48 	bl	8009ea4 <memset>
 800b614:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b618:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b61c:	4620      	mov	r0, r4
 800b61e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b620:	3468      	adds	r4, #104	; 0x68
 800b622:	e7d9      	b.n	800b5d8 <__sfp+0x1c>
 800b624:	2104      	movs	r1, #4
 800b626:	4638      	mov	r0, r7
 800b628:	f7ff ff62 	bl	800b4f0 <__sfmoreglue>
 800b62c:	4604      	mov	r4, r0
 800b62e:	6030      	str	r0, [r6, #0]
 800b630:	2800      	cmp	r0, #0
 800b632:	d1d5      	bne.n	800b5e0 <__sfp+0x24>
 800b634:	f7ff ff78 	bl	800b528 <__sfp_lock_release>
 800b638:	230c      	movs	r3, #12
 800b63a:	603b      	str	r3, [r7, #0]
 800b63c:	e7ee      	b.n	800b61c <__sfp+0x60>
 800b63e:	bf00      	nop
 800b640:	0800e144 	.word	0x0800e144
 800b644:	ffff0001 	.word	0xffff0001

0800b648 <_fwalk_reent>:
 800b648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b64c:	4606      	mov	r6, r0
 800b64e:	4688      	mov	r8, r1
 800b650:	2700      	movs	r7, #0
 800b652:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b656:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b65a:	f1b9 0901 	subs.w	r9, r9, #1
 800b65e:	d505      	bpl.n	800b66c <_fwalk_reent+0x24>
 800b660:	6824      	ldr	r4, [r4, #0]
 800b662:	2c00      	cmp	r4, #0
 800b664:	d1f7      	bne.n	800b656 <_fwalk_reent+0xe>
 800b666:	4638      	mov	r0, r7
 800b668:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b66c:	89ab      	ldrh	r3, [r5, #12]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d907      	bls.n	800b682 <_fwalk_reent+0x3a>
 800b672:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b676:	3301      	adds	r3, #1
 800b678:	d003      	beq.n	800b682 <_fwalk_reent+0x3a>
 800b67a:	4629      	mov	r1, r5
 800b67c:	4630      	mov	r0, r6
 800b67e:	47c0      	blx	r8
 800b680:	4307      	orrs	r7, r0
 800b682:	3568      	adds	r5, #104	; 0x68
 800b684:	e7e9      	b.n	800b65a <_fwalk_reent+0x12>
	...

0800b688 <_localeconv_r>:
 800b688:	4800      	ldr	r0, [pc, #0]	; (800b68c <_localeconv_r+0x4>)
 800b68a:	4770      	bx	lr
 800b68c:	20000164 	.word	0x20000164

0800b690 <__retarget_lock_init_recursive>:
 800b690:	4770      	bx	lr

0800b692 <__retarget_lock_acquire_recursive>:
 800b692:	4770      	bx	lr

0800b694 <__retarget_lock_release_recursive>:
 800b694:	4770      	bx	lr
	...

0800b698 <malloc>:
 800b698:	4b02      	ldr	r3, [pc, #8]	; (800b6a4 <malloc+0xc>)
 800b69a:	4601      	mov	r1, r0
 800b69c:	6818      	ldr	r0, [r3, #0]
 800b69e:	f000 bbfb 	b.w	800be98 <_malloc_r>
 800b6a2:	bf00      	nop
 800b6a4:	20000010 	.word	0x20000010

0800b6a8 <memchr>:
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	b510      	push	{r4, lr}
 800b6ac:	b2c9      	uxtb	r1, r1
 800b6ae:	4402      	add	r2, r0
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	d101      	bne.n	800b6ba <memchr+0x12>
 800b6b6:	2000      	movs	r0, #0
 800b6b8:	e003      	b.n	800b6c2 <memchr+0x1a>
 800b6ba:	7804      	ldrb	r4, [r0, #0]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	428c      	cmp	r4, r1
 800b6c0:	d1f6      	bne.n	800b6b0 <memchr+0x8>
 800b6c2:	bd10      	pop	{r4, pc}

0800b6c4 <memcpy>:
 800b6c4:	440a      	add	r2, r1
 800b6c6:	4291      	cmp	r1, r2
 800b6c8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6cc:	d100      	bne.n	800b6d0 <memcpy+0xc>
 800b6ce:	4770      	bx	lr
 800b6d0:	b510      	push	{r4, lr}
 800b6d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6d6:	4291      	cmp	r1, r2
 800b6d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6dc:	d1f9      	bne.n	800b6d2 <memcpy+0xe>
 800b6de:	bd10      	pop	{r4, pc}

0800b6e0 <_Balloc>:
 800b6e0:	b570      	push	{r4, r5, r6, lr}
 800b6e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	460d      	mov	r5, r1
 800b6e8:	b976      	cbnz	r6, 800b708 <_Balloc+0x28>
 800b6ea:	2010      	movs	r0, #16
 800b6ec:	f7ff ffd4 	bl	800b698 <malloc>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	6260      	str	r0, [r4, #36]	; 0x24
 800b6f4:	b920      	cbnz	r0, 800b700 <_Balloc+0x20>
 800b6f6:	2166      	movs	r1, #102	; 0x66
 800b6f8:	4b17      	ldr	r3, [pc, #92]	; (800b758 <_Balloc+0x78>)
 800b6fa:	4818      	ldr	r0, [pc, #96]	; (800b75c <_Balloc+0x7c>)
 800b6fc:	f000 fea4 	bl	800c448 <__assert_func>
 800b700:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b704:	6006      	str	r6, [r0, #0]
 800b706:	60c6      	str	r6, [r0, #12]
 800b708:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b70a:	68f3      	ldr	r3, [r6, #12]
 800b70c:	b183      	cbz	r3, 800b730 <_Balloc+0x50>
 800b70e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b716:	b9b8      	cbnz	r0, 800b748 <_Balloc+0x68>
 800b718:	2101      	movs	r1, #1
 800b71a:	fa01 f605 	lsl.w	r6, r1, r5
 800b71e:	1d72      	adds	r2, r6, #5
 800b720:	4620      	mov	r0, r4
 800b722:	0092      	lsls	r2, r2, #2
 800b724:	f000 fb5e 	bl	800bde4 <_calloc_r>
 800b728:	b160      	cbz	r0, 800b744 <_Balloc+0x64>
 800b72a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b72e:	e00e      	b.n	800b74e <_Balloc+0x6e>
 800b730:	2221      	movs	r2, #33	; 0x21
 800b732:	2104      	movs	r1, #4
 800b734:	4620      	mov	r0, r4
 800b736:	f000 fb55 	bl	800bde4 <_calloc_r>
 800b73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b73c:	60f0      	str	r0, [r6, #12]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d1e4      	bne.n	800b70e <_Balloc+0x2e>
 800b744:	2000      	movs	r0, #0
 800b746:	bd70      	pop	{r4, r5, r6, pc}
 800b748:	6802      	ldr	r2, [r0, #0]
 800b74a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b74e:	2300      	movs	r3, #0
 800b750:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b754:	e7f7      	b.n	800b746 <_Balloc+0x66>
 800b756:	bf00      	nop
 800b758:	0800e189 	.word	0x0800e189
 800b75c:	0800e270 	.word	0x0800e270

0800b760 <_Bfree>:
 800b760:	b570      	push	{r4, r5, r6, lr}
 800b762:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b764:	4605      	mov	r5, r0
 800b766:	460c      	mov	r4, r1
 800b768:	b976      	cbnz	r6, 800b788 <_Bfree+0x28>
 800b76a:	2010      	movs	r0, #16
 800b76c:	f7ff ff94 	bl	800b698 <malloc>
 800b770:	4602      	mov	r2, r0
 800b772:	6268      	str	r0, [r5, #36]	; 0x24
 800b774:	b920      	cbnz	r0, 800b780 <_Bfree+0x20>
 800b776:	218a      	movs	r1, #138	; 0x8a
 800b778:	4b08      	ldr	r3, [pc, #32]	; (800b79c <_Bfree+0x3c>)
 800b77a:	4809      	ldr	r0, [pc, #36]	; (800b7a0 <_Bfree+0x40>)
 800b77c:	f000 fe64 	bl	800c448 <__assert_func>
 800b780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b784:	6006      	str	r6, [r0, #0]
 800b786:	60c6      	str	r6, [r0, #12]
 800b788:	b13c      	cbz	r4, 800b79a <_Bfree+0x3a>
 800b78a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b78c:	6862      	ldr	r2, [r4, #4]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b794:	6021      	str	r1, [r4, #0]
 800b796:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b79a:	bd70      	pop	{r4, r5, r6, pc}
 800b79c:	0800e189 	.word	0x0800e189
 800b7a0:	0800e270 	.word	0x0800e270

0800b7a4 <__multadd>:
 800b7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7a8:	4698      	mov	r8, r3
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	690e      	ldr	r6, [r1, #16]
 800b7b0:	4607      	mov	r7, r0
 800b7b2:	f101 0014 	add.w	r0, r1, #20
 800b7b6:	6805      	ldr	r5, [r0, #0]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	b2a9      	uxth	r1, r5
 800b7bc:	fb02 8101 	mla	r1, r2, r1, r8
 800b7c0:	0c2d      	lsrs	r5, r5, #16
 800b7c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b7c6:	fb02 c505 	mla	r5, r2, r5, ip
 800b7ca:	b289      	uxth	r1, r1
 800b7cc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b7d0:	429e      	cmp	r6, r3
 800b7d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b7d6:	f840 1b04 	str.w	r1, [r0], #4
 800b7da:	dcec      	bgt.n	800b7b6 <__multadd+0x12>
 800b7dc:	f1b8 0f00 	cmp.w	r8, #0
 800b7e0:	d022      	beq.n	800b828 <__multadd+0x84>
 800b7e2:	68a3      	ldr	r3, [r4, #8]
 800b7e4:	42b3      	cmp	r3, r6
 800b7e6:	dc19      	bgt.n	800b81c <__multadd+0x78>
 800b7e8:	6861      	ldr	r1, [r4, #4]
 800b7ea:	4638      	mov	r0, r7
 800b7ec:	3101      	adds	r1, #1
 800b7ee:	f7ff ff77 	bl	800b6e0 <_Balloc>
 800b7f2:	4605      	mov	r5, r0
 800b7f4:	b928      	cbnz	r0, 800b802 <__multadd+0x5e>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	21b5      	movs	r1, #181	; 0xb5
 800b7fa:	4b0d      	ldr	r3, [pc, #52]	; (800b830 <__multadd+0x8c>)
 800b7fc:	480d      	ldr	r0, [pc, #52]	; (800b834 <__multadd+0x90>)
 800b7fe:	f000 fe23 	bl	800c448 <__assert_func>
 800b802:	6922      	ldr	r2, [r4, #16]
 800b804:	f104 010c 	add.w	r1, r4, #12
 800b808:	3202      	adds	r2, #2
 800b80a:	0092      	lsls	r2, r2, #2
 800b80c:	300c      	adds	r0, #12
 800b80e:	f7ff ff59 	bl	800b6c4 <memcpy>
 800b812:	4621      	mov	r1, r4
 800b814:	4638      	mov	r0, r7
 800b816:	f7ff ffa3 	bl	800b760 <_Bfree>
 800b81a:	462c      	mov	r4, r5
 800b81c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b820:	3601      	adds	r6, #1
 800b822:	f8c3 8014 	str.w	r8, [r3, #20]
 800b826:	6126      	str	r6, [r4, #16]
 800b828:	4620      	mov	r0, r4
 800b82a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b82e:	bf00      	nop
 800b830:	0800e1ff 	.word	0x0800e1ff
 800b834:	0800e270 	.word	0x0800e270

0800b838 <__hi0bits>:
 800b838:	0c02      	lsrs	r2, r0, #16
 800b83a:	0412      	lsls	r2, r2, #16
 800b83c:	4603      	mov	r3, r0
 800b83e:	b9ca      	cbnz	r2, 800b874 <__hi0bits+0x3c>
 800b840:	0403      	lsls	r3, r0, #16
 800b842:	2010      	movs	r0, #16
 800b844:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b848:	bf04      	itt	eq
 800b84a:	021b      	lsleq	r3, r3, #8
 800b84c:	3008      	addeq	r0, #8
 800b84e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b852:	bf04      	itt	eq
 800b854:	011b      	lsleq	r3, r3, #4
 800b856:	3004      	addeq	r0, #4
 800b858:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b85c:	bf04      	itt	eq
 800b85e:	009b      	lsleq	r3, r3, #2
 800b860:	3002      	addeq	r0, #2
 800b862:	2b00      	cmp	r3, #0
 800b864:	db05      	blt.n	800b872 <__hi0bits+0x3a>
 800b866:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b86a:	f100 0001 	add.w	r0, r0, #1
 800b86e:	bf08      	it	eq
 800b870:	2020      	moveq	r0, #32
 800b872:	4770      	bx	lr
 800b874:	2000      	movs	r0, #0
 800b876:	e7e5      	b.n	800b844 <__hi0bits+0xc>

0800b878 <__lo0bits>:
 800b878:	6803      	ldr	r3, [r0, #0]
 800b87a:	4602      	mov	r2, r0
 800b87c:	f013 0007 	ands.w	r0, r3, #7
 800b880:	d00b      	beq.n	800b89a <__lo0bits+0x22>
 800b882:	07d9      	lsls	r1, r3, #31
 800b884:	d422      	bmi.n	800b8cc <__lo0bits+0x54>
 800b886:	0798      	lsls	r0, r3, #30
 800b888:	bf49      	itett	mi
 800b88a:	085b      	lsrmi	r3, r3, #1
 800b88c:	089b      	lsrpl	r3, r3, #2
 800b88e:	2001      	movmi	r0, #1
 800b890:	6013      	strmi	r3, [r2, #0]
 800b892:	bf5c      	itt	pl
 800b894:	2002      	movpl	r0, #2
 800b896:	6013      	strpl	r3, [r2, #0]
 800b898:	4770      	bx	lr
 800b89a:	b299      	uxth	r1, r3
 800b89c:	b909      	cbnz	r1, 800b8a2 <__lo0bits+0x2a>
 800b89e:	2010      	movs	r0, #16
 800b8a0:	0c1b      	lsrs	r3, r3, #16
 800b8a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b8a6:	bf04      	itt	eq
 800b8a8:	0a1b      	lsreq	r3, r3, #8
 800b8aa:	3008      	addeq	r0, #8
 800b8ac:	0719      	lsls	r1, r3, #28
 800b8ae:	bf04      	itt	eq
 800b8b0:	091b      	lsreq	r3, r3, #4
 800b8b2:	3004      	addeq	r0, #4
 800b8b4:	0799      	lsls	r1, r3, #30
 800b8b6:	bf04      	itt	eq
 800b8b8:	089b      	lsreq	r3, r3, #2
 800b8ba:	3002      	addeq	r0, #2
 800b8bc:	07d9      	lsls	r1, r3, #31
 800b8be:	d403      	bmi.n	800b8c8 <__lo0bits+0x50>
 800b8c0:	085b      	lsrs	r3, r3, #1
 800b8c2:	f100 0001 	add.w	r0, r0, #1
 800b8c6:	d003      	beq.n	800b8d0 <__lo0bits+0x58>
 800b8c8:	6013      	str	r3, [r2, #0]
 800b8ca:	4770      	bx	lr
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	4770      	bx	lr
 800b8d0:	2020      	movs	r0, #32
 800b8d2:	4770      	bx	lr

0800b8d4 <__i2b>:
 800b8d4:	b510      	push	{r4, lr}
 800b8d6:	460c      	mov	r4, r1
 800b8d8:	2101      	movs	r1, #1
 800b8da:	f7ff ff01 	bl	800b6e0 <_Balloc>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	b928      	cbnz	r0, 800b8ee <__i2b+0x1a>
 800b8e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b8e6:	4b04      	ldr	r3, [pc, #16]	; (800b8f8 <__i2b+0x24>)
 800b8e8:	4804      	ldr	r0, [pc, #16]	; (800b8fc <__i2b+0x28>)
 800b8ea:	f000 fdad 	bl	800c448 <__assert_func>
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	6144      	str	r4, [r0, #20]
 800b8f2:	6103      	str	r3, [r0, #16]
 800b8f4:	bd10      	pop	{r4, pc}
 800b8f6:	bf00      	nop
 800b8f8:	0800e1ff 	.word	0x0800e1ff
 800b8fc:	0800e270 	.word	0x0800e270

0800b900 <__multiply>:
 800b900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b904:	4614      	mov	r4, r2
 800b906:	690a      	ldr	r2, [r1, #16]
 800b908:	6923      	ldr	r3, [r4, #16]
 800b90a:	460d      	mov	r5, r1
 800b90c:	429a      	cmp	r2, r3
 800b90e:	bfbe      	ittt	lt
 800b910:	460b      	movlt	r3, r1
 800b912:	4625      	movlt	r5, r4
 800b914:	461c      	movlt	r4, r3
 800b916:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b91a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b91e:	68ab      	ldr	r3, [r5, #8]
 800b920:	6869      	ldr	r1, [r5, #4]
 800b922:	eb0a 0709 	add.w	r7, sl, r9
 800b926:	42bb      	cmp	r3, r7
 800b928:	b085      	sub	sp, #20
 800b92a:	bfb8      	it	lt
 800b92c:	3101      	addlt	r1, #1
 800b92e:	f7ff fed7 	bl	800b6e0 <_Balloc>
 800b932:	b930      	cbnz	r0, 800b942 <__multiply+0x42>
 800b934:	4602      	mov	r2, r0
 800b936:	f240 115d 	movw	r1, #349	; 0x15d
 800b93a:	4b41      	ldr	r3, [pc, #260]	; (800ba40 <__multiply+0x140>)
 800b93c:	4841      	ldr	r0, [pc, #260]	; (800ba44 <__multiply+0x144>)
 800b93e:	f000 fd83 	bl	800c448 <__assert_func>
 800b942:	f100 0614 	add.w	r6, r0, #20
 800b946:	4633      	mov	r3, r6
 800b948:	2200      	movs	r2, #0
 800b94a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b94e:	4543      	cmp	r3, r8
 800b950:	d31e      	bcc.n	800b990 <__multiply+0x90>
 800b952:	f105 0c14 	add.w	ip, r5, #20
 800b956:	f104 0314 	add.w	r3, r4, #20
 800b95a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b95e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b962:	9202      	str	r2, [sp, #8]
 800b964:	ebac 0205 	sub.w	r2, ip, r5
 800b968:	3a15      	subs	r2, #21
 800b96a:	f022 0203 	bic.w	r2, r2, #3
 800b96e:	3204      	adds	r2, #4
 800b970:	f105 0115 	add.w	r1, r5, #21
 800b974:	458c      	cmp	ip, r1
 800b976:	bf38      	it	cc
 800b978:	2204      	movcc	r2, #4
 800b97a:	9201      	str	r2, [sp, #4]
 800b97c:	9a02      	ldr	r2, [sp, #8]
 800b97e:	9303      	str	r3, [sp, #12]
 800b980:	429a      	cmp	r2, r3
 800b982:	d808      	bhi.n	800b996 <__multiply+0x96>
 800b984:	2f00      	cmp	r7, #0
 800b986:	dc55      	bgt.n	800ba34 <__multiply+0x134>
 800b988:	6107      	str	r7, [r0, #16]
 800b98a:	b005      	add	sp, #20
 800b98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b990:	f843 2b04 	str.w	r2, [r3], #4
 800b994:	e7db      	b.n	800b94e <__multiply+0x4e>
 800b996:	f8b3 a000 	ldrh.w	sl, [r3]
 800b99a:	f1ba 0f00 	cmp.w	sl, #0
 800b99e:	d020      	beq.n	800b9e2 <__multiply+0xe2>
 800b9a0:	46b1      	mov	r9, r6
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	f105 0e14 	add.w	lr, r5, #20
 800b9a8:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b9ac:	f8d9 b000 	ldr.w	fp, [r9]
 800b9b0:	b2a1      	uxth	r1, r4
 800b9b2:	fa1f fb8b 	uxth.w	fp, fp
 800b9b6:	fb0a b101 	mla	r1, sl, r1, fp
 800b9ba:	4411      	add	r1, r2
 800b9bc:	f8d9 2000 	ldr.w	r2, [r9]
 800b9c0:	0c24      	lsrs	r4, r4, #16
 800b9c2:	0c12      	lsrs	r2, r2, #16
 800b9c4:	fb0a 2404 	mla	r4, sl, r4, r2
 800b9c8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b9cc:	b289      	uxth	r1, r1
 800b9ce:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b9d2:	45f4      	cmp	ip, lr
 800b9d4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b9d8:	f849 1b04 	str.w	r1, [r9], #4
 800b9dc:	d8e4      	bhi.n	800b9a8 <__multiply+0xa8>
 800b9de:	9901      	ldr	r1, [sp, #4]
 800b9e0:	5072      	str	r2, [r6, r1]
 800b9e2:	9a03      	ldr	r2, [sp, #12]
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b9ea:	f1b9 0f00 	cmp.w	r9, #0
 800b9ee:	d01f      	beq.n	800ba30 <__multiply+0x130>
 800b9f0:	46b6      	mov	lr, r6
 800b9f2:	f04f 0a00 	mov.w	sl, #0
 800b9f6:	6834      	ldr	r4, [r6, #0]
 800b9f8:	f105 0114 	add.w	r1, r5, #20
 800b9fc:	880a      	ldrh	r2, [r1, #0]
 800b9fe:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ba02:	b2a4      	uxth	r4, r4
 800ba04:	fb09 b202 	mla	r2, r9, r2, fp
 800ba08:	4492      	add	sl, r2
 800ba0a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ba0e:	f84e 4b04 	str.w	r4, [lr], #4
 800ba12:	f851 4b04 	ldr.w	r4, [r1], #4
 800ba16:	f8be 2000 	ldrh.w	r2, [lr]
 800ba1a:	0c24      	lsrs	r4, r4, #16
 800ba1c:	fb09 2404 	mla	r4, r9, r4, r2
 800ba20:	458c      	cmp	ip, r1
 800ba22:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ba26:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ba2a:	d8e7      	bhi.n	800b9fc <__multiply+0xfc>
 800ba2c:	9a01      	ldr	r2, [sp, #4]
 800ba2e:	50b4      	str	r4, [r6, r2]
 800ba30:	3604      	adds	r6, #4
 800ba32:	e7a3      	b.n	800b97c <__multiply+0x7c>
 800ba34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d1a5      	bne.n	800b988 <__multiply+0x88>
 800ba3c:	3f01      	subs	r7, #1
 800ba3e:	e7a1      	b.n	800b984 <__multiply+0x84>
 800ba40:	0800e1ff 	.word	0x0800e1ff
 800ba44:	0800e270 	.word	0x0800e270

0800ba48 <__pow5mult>:
 800ba48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba4c:	4615      	mov	r5, r2
 800ba4e:	f012 0203 	ands.w	r2, r2, #3
 800ba52:	4606      	mov	r6, r0
 800ba54:	460f      	mov	r7, r1
 800ba56:	d007      	beq.n	800ba68 <__pow5mult+0x20>
 800ba58:	4c25      	ldr	r4, [pc, #148]	; (800baf0 <__pow5mult+0xa8>)
 800ba5a:	3a01      	subs	r2, #1
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba62:	f7ff fe9f 	bl	800b7a4 <__multadd>
 800ba66:	4607      	mov	r7, r0
 800ba68:	10ad      	asrs	r5, r5, #2
 800ba6a:	d03d      	beq.n	800bae8 <__pow5mult+0xa0>
 800ba6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba6e:	b97c      	cbnz	r4, 800ba90 <__pow5mult+0x48>
 800ba70:	2010      	movs	r0, #16
 800ba72:	f7ff fe11 	bl	800b698 <malloc>
 800ba76:	4602      	mov	r2, r0
 800ba78:	6270      	str	r0, [r6, #36]	; 0x24
 800ba7a:	b928      	cbnz	r0, 800ba88 <__pow5mult+0x40>
 800ba7c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ba80:	4b1c      	ldr	r3, [pc, #112]	; (800baf4 <__pow5mult+0xac>)
 800ba82:	481d      	ldr	r0, [pc, #116]	; (800baf8 <__pow5mult+0xb0>)
 800ba84:	f000 fce0 	bl	800c448 <__assert_func>
 800ba88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba8c:	6004      	str	r4, [r0, #0]
 800ba8e:	60c4      	str	r4, [r0, #12]
 800ba90:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba98:	b94c      	cbnz	r4, 800baae <__pow5mult+0x66>
 800ba9a:	f240 2171 	movw	r1, #625	; 0x271
 800ba9e:	4630      	mov	r0, r6
 800baa0:	f7ff ff18 	bl	800b8d4 <__i2b>
 800baa4:	2300      	movs	r3, #0
 800baa6:	4604      	mov	r4, r0
 800baa8:	f8c8 0008 	str.w	r0, [r8, #8]
 800baac:	6003      	str	r3, [r0, #0]
 800baae:	f04f 0900 	mov.w	r9, #0
 800bab2:	07eb      	lsls	r3, r5, #31
 800bab4:	d50a      	bpl.n	800bacc <__pow5mult+0x84>
 800bab6:	4639      	mov	r1, r7
 800bab8:	4622      	mov	r2, r4
 800baba:	4630      	mov	r0, r6
 800babc:	f7ff ff20 	bl	800b900 <__multiply>
 800bac0:	4680      	mov	r8, r0
 800bac2:	4639      	mov	r1, r7
 800bac4:	4630      	mov	r0, r6
 800bac6:	f7ff fe4b 	bl	800b760 <_Bfree>
 800baca:	4647      	mov	r7, r8
 800bacc:	106d      	asrs	r5, r5, #1
 800bace:	d00b      	beq.n	800bae8 <__pow5mult+0xa0>
 800bad0:	6820      	ldr	r0, [r4, #0]
 800bad2:	b938      	cbnz	r0, 800bae4 <__pow5mult+0x9c>
 800bad4:	4622      	mov	r2, r4
 800bad6:	4621      	mov	r1, r4
 800bad8:	4630      	mov	r0, r6
 800bada:	f7ff ff11 	bl	800b900 <__multiply>
 800bade:	6020      	str	r0, [r4, #0]
 800bae0:	f8c0 9000 	str.w	r9, [r0]
 800bae4:	4604      	mov	r4, r0
 800bae6:	e7e4      	b.n	800bab2 <__pow5mult+0x6a>
 800bae8:	4638      	mov	r0, r7
 800baea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baee:	bf00      	nop
 800baf0:	0800e3c0 	.word	0x0800e3c0
 800baf4:	0800e189 	.word	0x0800e189
 800baf8:	0800e270 	.word	0x0800e270

0800bafc <__lshift>:
 800bafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb00:	460c      	mov	r4, r1
 800bb02:	4607      	mov	r7, r0
 800bb04:	4691      	mov	r9, r2
 800bb06:	6923      	ldr	r3, [r4, #16]
 800bb08:	6849      	ldr	r1, [r1, #4]
 800bb0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb0e:	68a3      	ldr	r3, [r4, #8]
 800bb10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb14:	f108 0601 	add.w	r6, r8, #1
 800bb18:	42b3      	cmp	r3, r6
 800bb1a:	db0b      	blt.n	800bb34 <__lshift+0x38>
 800bb1c:	4638      	mov	r0, r7
 800bb1e:	f7ff fddf 	bl	800b6e0 <_Balloc>
 800bb22:	4605      	mov	r5, r0
 800bb24:	b948      	cbnz	r0, 800bb3a <__lshift+0x3e>
 800bb26:	4602      	mov	r2, r0
 800bb28:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bb2c:	4b27      	ldr	r3, [pc, #156]	; (800bbcc <__lshift+0xd0>)
 800bb2e:	4828      	ldr	r0, [pc, #160]	; (800bbd0 <__lshift+0xd4>)
 800bb30:	f000 fc8a 	bl	800c448 <__assert_func>
 800bb34:	3101      	adds	r1, #1
 800bb36:	005b      	lsls	r3, r3, #1
 800bb38:	e7ee      	b.n	800bb18 <__lshift+0x1c>
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	f100 0114 	add.w	r1, r0, #20
 800bb40:	f100 0210 	add.w	r2, r0, #16
 800bb44:	4618      	mov	r0, r3
 800bb46:	4553      	cmp	r3, sl
 800bb48:	db33      	blt.n	800bbb2 <__lshift+0xb6>
 800bb4a:	6920      	ldr	r0, [r4, #16]
 800bb4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb50:	f104 0314 	add.w	r3, r4, #20
 800bb54:	f019 091f 	ands.w	r9, r9, #31
 800bb58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb60:	d02b      	beq.n	800bbba <__lshift+0xbe>
 800bb62:	468a      	mov	sl, r1
 800bb64:	2200      	movs	r2, #0
 800bb66:	f1c9 0e20 	rsb	lr, r9, #32
 800bb6a:	6818      	ldr	r0, [r3, #0]
 800bb6c:	fa00 f009 	lsl.w	r0, r0, r9
 800bb70:	4302      	orrs	r2, r0
 800bb72:	f84a 2b04 	str.w	r2, [sl], #4
 800bb76:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb7a:	459c      	cmp	ip, r3
 800bb7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb80:	d8f3      	bhi.n	800bb6a <__lshift+0x6e>
 800bb82:	ebac 0304 	sub.w	r3, ip, r4
 800bb86:	3b15      	subs	r3, #21
 800bb88:	f023 0303 	bic.w	r3, r3, #3
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	f104 0015 	add.w	r0, r4, #21
 800bb92:	4584      	cmp	ip, r0
 800bb94:	bf38      	it	cc
 800bb96:	2304      	movcc	r3, #4
 800bb98:	50ca      	str	r2, [r1, r3]
 800bb9a:	b10a      	cbz	r2, 800bba0 <__lshift+0xa4>
 800bb9c:	f108 0602 	add.w	r6, r8, #2
 800bba0:	3e01      	subs	r6, #1
 800bba2:	4638      	mov	r0, r7
 800bba4:	4621      	mov	r1, r4
 800bba6:	612e      	str	r6, [r5, #16]
 800bba8:	f7ff fdda 	bl	800b760 <_Bfree>
 800bbac:	4628      	mov	r0, r5
 800bbae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	e7c5      	b.n	800bb46 <__lshift+0x4a>
 800bbba:	3904      	subs	r1, #4
 800bbbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbc0:	459c      	cmp	ip, r3
 800bbc2:	f841 2f04 	str.w	r2, [r1, #4]!
 800bbc6:	d8f9      	bhi.n	800bbbc <__lshift+0xc0>
 800bbc8:	e7ea      	b.n	800bba0 <__lshift+0xa4>
 800bbca:	bf00      	nop
 800bbcc:	0800e1ff 	.word	0x0800e1ff
 800bbd0:	0800e270 	.word	0x0800e270

0800bbd4 <__mcmp>:
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	690a      	ldr	r2, [r1, #16]
 800bbd8:	6900      	ldr	r0, [r0, #16]
 800bbda:	b530      	push	{r4, r5, lr}
 800bbdc:	1a80      	subs	r0, r0, r2
 800bbde:	d10d      	bne.n	800bbfc <__mcmp+0x28>
 800bbe0:	3314      	adds	r3, #20
 800bbe2:	3114      	adds	r1, #20
 800bbe4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bbe8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bbec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bbf0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bbf4:	4295      	cmp	r5, r2
 800bbf6:	d002      	beq.n	800bbfe <__mcmp+0x2a>
 800bbf8:	d304      	bcc.n	800bc04 <__mcmp+0x30>
 800bbfa:	2001      	movs	r0, #1
 800bbfc:	bd30      	pop	{r4, r5, pc}
 800bbfe:	42a3      	cmp	r3, r4
 800bc00:	d3f4      	bcc.n	800bbec <__mcmp+0x18>
 800bc02:	e7fb      	b.n	800bbfc <__mcmp+0x28>
 800bc04:	f04f 30ff 	mov.w	r0, #4294967295
 800bc08:	e7f8      	b.n	800bbfc <__mcmp+0x28>
	...

0800bc0c <__mdiff>:
 800bc0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc10:	460c      	mov	r4, r1
 800bc12:	4606      	mov	r6, r0
 800bc14:	4611      	mov	r1, r2
 800bc16:	4620      	mov	r0, r4
 800bc18:	4692      	mov	sl, r2
 800bc1a:	f7ff ffdb 	bl	800bbd4 <__mcmp>
 800bc1e:	1e05      	subs	r5, r0, #0
 800bc20:	d111      	bne.n	800bc46 <__mdiff+0x3a>
 800bc22:	4629      	mov	r1, r5
 800bc24:	4630      	mov	r0, r6
 800bc26:	f7ff fd5b 	bl	800b6e0 <_Balloc>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	b928      	cbnz	r0, 800bc3a <__mdiff+0x2e>
 800bc2e:	f240 2132 	movw	r1, #562	; 0x232
 800bc32:	4b3c      	ldr	r3, [pc, #240]	; (800bd24 <__mdiff+0x118>)
 800bc34:	483c      	ldr	r0, [pc, #240]	; (800bd28 <__mdiff+0x11c>)
 800bc36:	f000 fc07 	bl	800c448 <__assert_func>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc40:	4610      	mov	r0, r2
 800bc42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc46:	bfa4      	itt	ge
 800bc48:	4653      	movge	r3, sl
 800bc4a:	46a2      	movge	sl, r4
 800bc4c:	4630      	mov	r0, r6
 800bc4e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bc52:	bfa6      	itte	ge
 800bc54:	461c      	movge	r4, r3
 800bc56:	2500      	movge	r5, #0
 800bc58:	2501      	movlt	r5, #1
 800bc5a:	f7ff fd41 	bl	800b6e0 <_Balloc>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	b918      	cbnz	r0, 800bc6a <__mdiff+0x5e>
 800bc62:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bc66:	4b2f      	ldr	r3, [pc, #188]	; (800bd24 <__mdiff+0x118>)
 800bc68:	e7e4      	b.n	800bc34 <__mdiff+0x28>
 800bc6a:	f100 0814 	add.w	r8, r0, #20
 800bc6e:	f8da 7010 	ldr.w	r7, [sl, #16]
 800bc72:	60c5      	str	r5, [r0, #12]
 800bc74:	f04f 0c00 	mov.w	ip, #0
 800bc78:	f10a 0514 	add.w	r5, sl, #20
 800bc7c:	f10a 0010 	add.w	r0, sl, #16
 800bc80:	46c2      	mov	sl, r8
 800bc82:	6926      	ldr	r6, [r4, #16]
 800bc84:	f104 0914 	add.w	r9, r4, #20
 800bc88:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bc8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc90:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800bc94:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc98:	fa1f f18b 	uxth.w	r1, fp
 800bc9c:	4461      	add	r1, ip
 800bc9e:	fa1f fc83 	uxth.w	ip, r3
 800bca2:	0c1b      	lsrs	r3, r3, #16
 800bca4:	eba1 010c 	sub.w	r1, r1, ip
 800bca8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bcac:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bcb0:	b289      	uxth	r1, r1
 800bcb2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bcb6:	454e      	cmp	r6, r9
 800bcb8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bcbc:	f84a 3b04 	str.w	r3, [sl], #4
 800bcc0:	d8e6      	bhi.n	800bc90 <__mdiff+0x84>
 800bcc2:	1b33      	subs	r3, r6, r4
 800bcc4:	3b15      	subs	r3, #21
 800bcc6:	f023 0303 	bic.w	r3, r3, #3
 800bcca:	3415      	adds	r4, #21
 800bccc:	3304      	adds	r3, #4
 800bcce:	42a6      	cmp	r6, r4
 800bcd0:	bf38      	it	cc
 800bcd2:	2304      	movcc	r3, #4
 800bcd4:	441d      	add	r5, r3
 800bcd6:	4443      	add	r3, r8
 800bcd8:	461e      	mov	r6, r3
 800bcda:	462c      	mov	r4, r5
 800bcdc:	4574      	cmp	r4, lr
 800bcde:	d30e      	bcc.n	800bcfe <__mdiff+0xf2>
 800bce0:	f10e 0103 	add.w	r1, lr, #3
 800bce4:	1b49      	subs	r1, r1, r5
 800bce6:	f021 0103 	bic.w	r1, r1, #3
 800bcea:	3d03      	subs	r5, #3
 800bcec:	45ae      	cmp	lr, r5
 800bcee:	bf38      	it	cc
 800bcf0:	2100      	movcc	r1, #0
 800bcf2:	4419      	add	r1, r3
 800bcf4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bcf8:	b18b      	cbz	r3, 800bd1e <__mdiff+0x112>
 800bcfa:	6117      	str	r7, [r2, #16]
 800bcfc:	e7a0      	b.n	800bc40 <__mdiff+0x34>
 800bcfe:	f854 8b04 	ldr.w	r8, [r4], #4
 800bd02:	fa1f f188 	uxth.w	r1, r8
 800bd06:	4461      	add	r1, ip
 800bd08:	1408      	asrs	r0, r1, #16
 800bd0a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800bd0e:	b289      	uxth	r1, r1
 800bd10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bd14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd18:	f846 1b04 	str.w	r1, [r6], #4
 800bd1c:	e7de      	b.n	800bcdc <__mdiff+0xd0>
 800bd1e:	3f01      	subs	r7, #1
 800bd20:	e7e8      	b.n	800bcf4 <__mdiff+0xe8>
 800bd22:	bf00      	nop
 800bd24:	0800e1ff 	.word	0x0800e1ff
 800bd28:	0800e270 	.word	0x0800e270

0800bd2c <__d2b>:
 800bd2c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bd30:	2101      	movs	r1, #1
 800bd32:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800bd36:	4690      	mov	r8, r2
 800bd38:	461d      	mov	r5, r3
 800bd3a:	f7ff fcd1 	bl	800b6e0 <_Balloc>
 800bd3e:	4604      	mov	r4, r0
 800bd40:	b930      	cbnz	r0, 800bd50 <__d2b+0x24>
 800bd42:	4602      	mov	r2, r0
 800bd44:	f240 310a 	movw	r1, #778	; 0x30a
 800bd48:	4b24      	ldr	r3, [pc, #144]	; (800bddc <__d2b+0xb0>)
 800bd4a:	4825      	ldr	r0, [pc, #148]	; (800bde0 <__d2b+0xb4>)
 800bd4c:	f000 fb7c 	bl	800c448 <__assert_func>
 800bd50:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bd54:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800bd58:	bb2d      	cbnz	r5, 800bda6 <__d2b+0x7a>
 800bd5a:	9301      	str	r3, [sp, #4]
 800bd5c:	f1b8 0300 	subs.w	r3, r8, #0
 800bd60:	d026      	beq.n	800bdb0 <__d2b+0x84>
 800bd62:	4668      	mov	r0, sp
 800bd64:	9300      	str	r3, [sp, #0]
 800bd66:	f7ff fd87 	bl	800b878 <__lo0bits>
 800bd6a:	9900      	ldr	r1, [sp, #0]
 800bd6c:	b1f0      	cbz	r0, 800bdac <__d2b+0x80>
 800bd6e:	9a01      	ldr	r2, [sp, #4]
 800bd70:	f1c0 0320 	rsb	r3, r0, #32
 800bd74:	fa02 f303 	lsl.w	r3, r2, r3
 800bd78:	430b      	orrs	r3, r1
 800bd7a:	40c2      	lsrs	r2, r0
 800bd7c:	6163      	str	r3, [r4, #20]
 800bd7e:	9201      	str	r2, [sp, #4]
 800bd80:	9b01      	ldr	r3, [sp, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	bf14      	ite	ne
 800bd86:	2102      	movne	r1, #2
 800bd88:	2101      	moveq	r1, #1
 800bd8a:	61a3      	str	r3, [r4, #24]
 800bd8c:	6121      	str	r1, [r4, #16]
 800bd8e:	b1c5      	cbz	r5, 800bdc2 <__d2b+0x96>
 800bd90:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bd94:	4405      	add	r5, r0
 800bd96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd9a:	603d      	str	r5, [r7, #0]
 800bd9c:	6030      	str	r0, [r6, #0]
 800bd9e:	4620      	mov	r0, r4
 800bda0:	b002      	add	sp, #8
 800bda2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdaa:	e7d6      	b.n	800bd5a <__d2b+0x2e>
 800bdac:	6161      	str	r1, [r4, #20]
 800bdae:	e7e7      	b.n	800bd80 <__d2b+0x54>
 800bdb0:	a801      	add	r0, sp, #4
 800bdb2:	f7ff fd61 	bl	800b878 <__lo0bits>
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	9b01      	ldr	r3, [sp, #4]
 800bdba:	6121      	str	r1, [r4, #16]
 800bdbc:	6163      	str	r3, [r4, #20]
 800bdbe:	3020      	adds	r0, #32
 800bdc0:	e7e5      	b.n	800bd8e <__d2b+0x62>
 800bdc2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800bdc6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bdca:	6038      	str	r0, [r7, #0]
 800bdcc:	6918      	ldr	r0, [r3, #16]
 800bdce:	f7ff fd33 	bl	800b838 <__hi0bits>
 800bdd2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800bdd6:	6031      	str	r1, [r6, #0]
 800bdd8:	e7e1      	b.n	800bd9e <__d2b+0x72>
 800bdda:	bf00      	nop
 800bddc:	0800e1ff 	.word	0x0800e1ff
 800bde0:	0800e270 	.word	0x0800e270

0800bde4 <_calloc_r>:
 800bde4:	b538      	push	{r3, r4, r5, lr}
 800bde6:	fb02 f501 	mul.w	r5, r2, r1
 800bdea:	4629      	mov	r1, r5
 800bdec:	f000 f854 	bl	800be98 <_malloc_r>
 800bdf0:	4604      	mov	r4, r0
 800bdf2:	b118      	cbz	r0, 800bdfc <_calloc_r+0x18>
 800bdf4:	462a      	mov	r2, r5
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	f7fe f854 	bl	8009ea4 <memset>
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	bd38      	pop	{r3, r4, r5, pc}

0800be00 <_free_r>:
 800be00:	b538      	push	{r3, r4, r5, lr}
 800be02:	4605      	mov	r5, r0
 800be04:	2900      	cmp	r1, #0
 800be06:	d043      	beq.n	800be90 <_free_r+0x90>
 800be08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be0c:	1f0c      	subs	r4, r1, #4
 800be0e:	2b00      	cmp	r3, #0
 800be10:	bfb8      	it	lt
 800be12:	18e4      	addlt	r4, r4, r3
 800be14:	f000 fca2 	bl	800c75c <__malloc_lock>
 800be18:	4a1e      	ldr	r2, [pc, #120]	; (800be94 <_free_r+0x94>)
 800be1a:	6813      	ldr	r3, [r2, #0]
 800be1c:	4610      	mov	r0, r2
 800be1e:	b933      	cbnz	r3, 800be2e <_free_r+0x2e>
 800be20:	6063      	str	r3, [r4, #4]
 800be22:	6014      	str	r4, [r2, #0]
 800be24:	4628      	mov	r0, r5
 800be26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be2a:	f000 bc9d 	b.w	800c768 <__malloc_unlock>
 800be2e:	42a3      	cmp	r3, r4
 800be30:	d90a      	bls.n	800be48 <_free_r+0x48>
 800be32:	6821      	ldr	r1, [r4, #0]
 800be34:	1862      	adds	r2, r4, r1
 800be36:	4293      	cmp	r3, r2
 800be38:	bf01      	itttt	eq
 800be3a:	681a      	ldreq	r2, [r3, #0]
 800be3c:	685b      	ldreq	r3, [r3, #4]
 800be3e:	1852      	addeq	r2, r2, r1
 800be40:	6022      	streq	r2, [r4, #0]
 800be42:	6063      	str	r3, [r4, #4]
 800be44:	6004      	str	r4, [r0, #0]
 800be46:	e7ed      	b.n	800be24 <_free_r+0x24>
 800be48:	461a      	mov	r2, r3
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	b10b      	cbz	r3, 800be52 <_free_r+0x52>
 800be4e:	42a3      	cmp	r3, r4
 800be50:	d9fa      	bls.n	800be48 <_free_r+0x48>
 800be52:	6811      	ldr	r1, [r2, #0]
 800be54:	1850      	adds	r0, r2, r1
 800be56:	42a0      	cmp	r0, r4
 800be58:	d10b      	bne.n	800be72 <_free_r+0x72>
 800be5a:	6820      	ldr	r0, [r4, #0]
 800be5c:	4401      	add	r1, r0
 800be5e:	1850      	adds	r0, r2, r1
 800be60:	4283      	cmp	r3, r0
 800be62:	6011      	str	r1, [r2, #0]
 800be64:	d1de      	bne.n	800be24 <_free_r+0x24>
 800be66:	6818      	ldr	r0, [r3, #0]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	4401      	add	r1, r0
 800be6c:	6011      	str	r1, [r2, #0]
 800be6e:	6053      	str	r3, [r2, #4]
 800be70:	e7d8      	b.n	800be24 <_free_r+0x24>
 800be72:	d902      	bls.n	800be7a <_free_r+0x7a>
 800be74:	230c      	movs	r3, #12
 800be76:	602b      	str	r3, [r5, #0]
 800be78:	e7d4      	b.n	800be24 <_free_r+0x24>
 800be7a:	6820      	ldr	r0, [r4, #0]
 800be7c:	1821      	adds	r1, r4, r0
 800be7e:	428b      	cmp	r3, r1
 800be80:	bf01      	itttt	eq
 800be82:	6819      	ldreq	r1, [r3, #0]
 800be84:	685b      	ldreq	r3, [r3, #4]
 800be86:	1809      	addeq	r1, r1, r0
 800be88:	6021      	streq	r1, [r4, #0]
 800be8a:	6063      	str	r3, [r4, #4]
 800be8c:	6054      	str	r4, [r2, #4]
 800be8e:	e7c9      	b.n	800be24 <_free_r+0x24>
 800be90:	bd38      	pop	{r3, r4, r5, pc}
 800be92:	bf00      	nop
 800be94:	20000218 	.word	0x20000218

0800be98 <_malloc_r>:
 800be98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9a:	1ccd      	adds	r5, r1, #3
 800be9c:	f025 0503 	bic.w	r5, r5, #3
 800bea0:	3508      	adds	r5, #8
 800bea2:	2d0c      	cmp	r5, #12
 800bea4:	bf38      	it	cc
 800bea6:	250c      	movcc	r5, #12
 800bea8:	2d00      	cmp	r5, #0
 800beaa:	4606      	mov	r6, r0
 800beac:	db01      	blt.n	800beb2 <_malloc_r+0x1a>
 800beae:	42a9      	cmp	r1, r5
 800beb0:	d903      	bls.n	800beba <_malloc_r+0x22>
 800beb2:	230c      	movs	r3, #12
 800beb4:	6033      	str	r3, [r6, #0]
 800beb6:	2000      	movs	r0, #0
 800beb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beba:	f000 fc4f 	bl	800c75c <__malloc_lock>
 800bebe:	4921      	ldr	r1, [pc, #132]	; (800bf44 <_malloc_r+0xac>)
 800bec0:	680a      	ldr	r2, [r1, #0]
 800bec2:	4614      	mov	r4, r2
 800bec4:	b99c      	cbnz	r4, 800beee <_malloc_r+0x56>
 800bec6:	4f20      	ldr	r7, [pc, #128]	; (800bf48 <_malloc_r+0xb0>)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	b923      	cbnz	r3, 800bed6 <_malloc_r+0x3e>
 800becc:	4621      	mov	r1, r4
 800bece:	4630      	mov	r0, r6
 800bed0:	f000 f994 	bl	800c1fc <_sbrk_r>
 800bed4:	6038      	str	r0, [r7, #0]
 800bed6:	4629      	mov	r1, r5
 800bed8:	4630      	mov	r0, r6
 800beda:	f000 f98f 	bl	800c1fc <_sbrk_r>
 800bede:	1c43      	adds	r3, r0, #1
 800bee0:	d123      	bne.n	800bf2a <_malloc_r+0x92>
 800bee2:	230c      	movs	r3, #12
 800bee4:	4630      	mov	r0, r6
 800bee6:	6033      	str	r3, [r6, #0]
 800bee8:	f000 fc3e 	bl	800c768 <__malloc_unlock>
 800beec:	e7e3      	b.n	800beb6 <_malloc_r+0x1e>
 800beee:	6823      	ldr	r3, [r4, #0]
 800bef0:	1b5b      	subs	r3, r3, r5
 800bef2:	d417      	bmi.n	800bf24 <_malloc_r+0x8c>
 800bef4:	2b0b      	cmp	r3, #11
 800bef6:	d903      	bls.n	800bf00 <_malloc_r+0x68>
 800bef8:	6023      	str	r3, [r4, #0]
 800befa:	441c      	add	r4, r3
 800befc:	6025      	str	r5, [r4, #0]
 800befe:	e004      	b.n	800bf0a <_malloc_r+0x72>
 800bf00:	6863      	ldr	r3, [r4, #4]
 800bf02:	42a2      	cmp	r2, r4
 800bf04:	bf0c      	ite	eq
 800bf06:	600b      	streq	r3, [r1, #0]
 800bf08:	6053      	strne	r3, [r2, #4]
 800bf0a:	4630      	mov	r0, r6
 800bf0c:	f000 fc2c 	bl	800c768 <__malloc_unlock>
 800bf10:	f104 000b 	add.w	r0, r4, #11
 800bf14:	1d23      	adds	r3, r4, #4
 800bf16:	f020 0007 	bic.w	r0, r0, #7
 800bf1a:	1ac2      	subs	r2, r0, r3
 800bf1c:	d0cc      	beq.n	800beb8 <_malloc_r+0x20>
 800bf1e:	1a1b      	subs	r3, r3, r0
 800bf20:	50a3      	str	r3, [r4, r2]
 800bf22:	e7c9      	b.n	800beb8 <_malloc_r+0x20>
 800bf24:	4622      	mov	r2, r4
 800bf26:	6864      	ldr	r4, [r4, #4]
 800bf28:	e7cc      	b.n	800bec4 <_malloc_r+0x2c>
 800bf2a:	1cc4      	adds	r4, r0, #3
 800bf2c:	f024 0403 	bic.w	r4, r4, #3
 800bf30:	42a0      	cmp	r0, r4
 800bf32:	d0e3      	beq.n	800befc <_malloc_r+0x64>
 800bf34:	1a21      	subs	r1, r4, r0
 800bf36:	4630      	mov	r0, r6
 800bf38:	f000 f960 	bl	800c1fc <_sbrk_r>
 800bf3c:	3001      	adds	r0, #1
 800bf3e:	d1dd      	bne.n	800befc <_malloc_r+0x64>
 800bf40:	e7cf      	b.n	800bee2 <_malloc_r+0x4a>
 800bf42:	bf00      	nop
 800bf44:	20000218 	.word	0x20000218
 800bf48:	2000021c 	.word	0x2000021c

0800bf4c <__sfputc_r>:
 800bf4c:	6893      	ldr	r3, [r2, #8]
 800bf4e:	b410      	push	{r4}
 800bf50:	3b01      	subs	r3, #1
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	6093      	str	r3, [r2, #8]
 800bf56:	da07      	bge.n	800bf68 <__sfputc_r+0x1c>
 800bf58:	6994      	ldr	r4, [r2, #24]
 800bf5a:	42a3      	cmp	r3, r4
 800bf5c:	db01      	blt.n	800bf62 <__sfputc_r+0x16>
 800bf5e:	290a      	cmp	r1, #10
 800bf60:	d102      	bne.n	800bf68 <__sfputc_r+0x1c>
 800bf62:	bc10      	pop	{r4}
 800bf64:	f000 b99e 	b.w	800c2a4 <__swbuf_r>
 800bf68:	6813      	ldr	r3, [r2, #0]
 800bf6a:	1c58      	adds	r0, r3, #1
 800bf6c:	6010      	str	r0, [r2, #0]
 800bf6e:	7019      	strb	r1, [r3, #0]
 800bf70:	4608      	mov	r0, r1
 800bf72:	bc10      	pop	{r4}
 800bf74:	4770      	bx	lr

0800bf76 <__sfputs_r>:
 800bf76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf78:	4606      	mov	r6, r0
 800bf7a:	460f      	mov	r7, r1
 800bf7c:	4614      	mov	r4, r2
 800bf7e:	18d5      	adds	r5, r2, r3
 800bf80:	42ac      	cmp	r4, r5
 800bf82:	d101      	bne.n	800bf88 <__sfputs_r+0x12>
 800bf84:	2000      	movs	r0, #0
 800bf86:	e007      	b.n	800bf98 <__sfputs_r+0x22>
 800bf88:	463a      	mov	r2, r7
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf90:	f7ff ffdc 	bl	800bf4c <__sfputc_r>
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	d1f3      	bne.n	800bf80 <__sfputs_r+0xa>
 800bf98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf9c <_vfiprintf_r>:
 800bf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa0:	460d      	mov	r5, r1
 800bfa2:	4614      	mov	r4, r2
 800bfa4:	4698      	mov	r8, r3
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	b09d      	sub	sp, #116	; 0x74
 800bfaa:	b118      	cbz	r0, 800bfb4 <_vfiprintf_r+0x18>
 800bfac:	6983      	ldr	r3, [r0, #24]
 800bfae:	b90b      	cbnz	r3, 800bfb4 <_vfiprintf_r+0x18>
 800bfb0:	f7ff facc 	bl	800b54c <__sinit>
 800bfb4:	4b89      	ldr	r3, [pc, #548]	; (800c1dc <_vfiprintf_r+0x240>)
 800bfb6:	429d      	cmp	r5, r3
 800bfb8:	d11b      	bne.n	800bff2 <_vfiprintf_r+0x56>
 800bfba:	6875      	ldr	r5, [r6, #4]
 800bfbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfbe:	07d9      	lsls	r1, r3, #31
 800bfc0:	d405      	bmi.n	800bfce <_vfiprintf_r+0x32>
 800bfc2:	89ab      	ldrh	r3, [r5, #12]
 800bfc4:	059a      	lsls	r2, r3, #22
 800bfc6:	d402      	bmi.n	800bfce <_vfiprintf_r+0x32>
 800bfc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfca:	f7ff fb62 	bl	800b692 <__retarget_lock_acquire_recursive>
 800bfce:	89ab      	ldrh	r3, [r5, #12]
 800bfd0:	071b      	lsls	r3, r3, #28
 800bfd2:	d501      	bpl.n	800bfd8 <_vfiprintf_r+0x3c>
 800bfd4:	692b      	ldr	r3, [r5, #16]
 800bfd6:	b9eb      	cbnz	r3, 800c014 <_vfiprintf_r+0x78>
 800bfd8:	4629      	mov	r1, r5
 800bfda:	4630      	mov	r0, r6
 800bfdc:	f000 f9c6 	bl	800c36c <__swsetup_r>
 800bfe0:	b1c0      	cbz	r0, 800c014 <_vfiprintf_r+0x78>
 800bfe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bfe4:	07dc      	lsls	r4, r3, #31
 800bfe6:	d50e      	bpl.n	800c006 <_vfiprintf_r+0x6a>
 800bfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfec:	b01d      	add	sp, #116	; 0x74
 800bfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff2:	4b7b      	ldr	r3, [pc, #492]	; (800c1e0 <_vfiprintf_r+0x244>)
 800bff4:	429d      	cmp	r5, r3
 800bff6:	d101      	bne.n	800bffc <_vfiprintf_r+0x60>
 800bff8:	68b5      	ldr	r5, [r6, #8]
 800bffa:	e7df      	b.n	800bfbc <_vfiprintf_r+0x20>
 800bffc:	4b79      	ldr	r3, [pc, #484]	; (800c1e4 <_vfiprintf_r+0x248>)
 800bffe:	429d      	cmp	r5, r3
 800c000:	bf08      	it	eq
 800c002:	68f5      	ldreq	r5, [r6, #12]
 800c004:	e7da      	b.n	800bfbc <_vfiprintf_r+0x20>
 800c006:	89ab      	ldrh	r3, [r5, #12]
 800c008:	0598      	lsls	r0, r3, #22
 800c00a:	d4ed      	bmi.n	800bfe8 <_vfiprintf_r+0x4c>
 800c00c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c00e:	f7ff fb41 	bl	800b694 <__retarget_lock_release_recursive>
 800c012:	e7e9      	b.n	800bfe8 <_vfiprintf_r+0x4c>
 800c014:	2300      	movs	r3, #0
 800c016:	9309      	str	r3, [sp, #36]	; 0x24
 800c018:	2320      	movs	r3, #32
 800c01a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c01e:	2330      	movs	r3, #48	; 0x30
 800c020:	f04f 0901 	mov.w	r9, #1
 800c024:	f8cd 800c 	str.w	r8, [sp, #12]
 800c028:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800c1e8 <_vfiprintf_r+0x24c>
 800c02c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c030:	4623      	mov	r3, r4
 800c032:	469a      	mov	sl, r3
 800c034:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c038:	b10a      	cbz	r2, 800c03e <_vfiprintf_r+0xa2>
 800c03a:	2a25      	cmp	r2, #37	; 0x25
 800c03c:	d1f9      	bne.n	800c032 <_vfiprintf_r+0x96>
 800c03e:	ebba 0b04 	subs.w	fp, sl, r4
 800c042:	d00b      	beq.n	800c05c <_vfiprintf_r+0xc0>
 800c044:	465b      	mov	r3, fp
 800c046:	4622      	mov	r2, r4
 800c048:	4629      	mov	r1, r5
 800c04a:	4630      	mov	r0, r6
 800c04c:	f7ff ff93 	bl	800bf76 <__sfputs_r>
 800c050:	3001      	adds	r0, #1
 800c052:	f000 80aa 	beq.w	800c1aa <_vfiprintf_r+0x20e>
 800c056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c058:	445a      	add	r2, fp
 800c05a:	9209      	str	r2, [sp, #36]	; 0x24
 800c05c:	f89a 3000 	ldrb.w	r3, [sl]
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 80a2 	beq.w	800c1aa <_vfiprintf_r+0x20e>
 800c066:	2300      	movs	r3, #0
 800c068:	f04f 32ff 	mov.w	r2, #4294967295
 800c06c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c070:	f10a 0a01 	add.w	sl, sl, #1
 800c074:	9304      	str	r3, [sp, #16]
 800c076:	9307      	str	r3, [sp, #28]
 800c078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c07c:	931a      	str	r3, [sp, #104]	; 0x68
 800c07e:	4654      	mov	r4, sl
 800c080:	2205      	movs	r2, #5
 800c082:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c086:	4858      	ldr	r0, [pc, #352]	; (800c1e8 <_vfiprintf_r+0x24c>)
 800c088:	f7ff fb0e 	bl	800b6a8 <memchr>
 800c08c:	9a04      	ldr	r2, [sp, #16]
 800c08e:	b9d8      	cbnz	r0, 800c0c8 <_vfiprintf_r+0x12c>
 800c090:	06d1      	lsls	r1, r2, #27
 800c092:	bf44      	itt	mi
 800c094:	2320      	movmi	r3, #32
 800c096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c09a:	0713      	lsls	r3, r2, #28
 800c09c:	bf44      	itt	mi
 800c09e:	232b      	movmi	r3, #43	; 0x2b
 800c0a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c0a4:	f89a 3000 	ldrb.w	r3, [sl]
 800c0a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c0aa:	d015      	beq.n	800c0d8 <_vfiprintf_r+0x13c>
 800c0ac:	4654      	mov	r4, sl
 800c0ae:	2000      	movs	r0, #0
 800c0b0:	f04f 0c0a 	mov.w	ip, #10
 800c0b4:	9a07      	ldr	r2, [sp, #28]
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c0bc:	3b30      	subs	r3, #48	; 0x30
 800c0be:	2b09      	cmp	r3, #9
 800c0c0:	d94e      	bls.n	800c160 <_vfiprintf_r+0x1c4>
 800c0c2:	b1b0      	cbz	r0, 800c0f2 <_vfiprintf_r+0x156>
 800c0c4:	9207      	str	r2, [sp, #28]
 800c0c6:	e014      	b.n	800c0f2 <_vfiprintf_r+0x156>
 800c0c8:	eba0 0308 	sub.w	r3, r0, r8
 800c0cc:	fa09 f303 	lsl.w	r3, r9, r3
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	46a2      	mov	sl, r4
 800c0d4:	9304      	str	r3, [sp, #16]
 800c0d6:	e7d2      	b.n	800c07e <_vfiprintf_r+0xe2>
 800c0d8:	9b03      	ldr	r3, [sp, #12]
 800c0da:	1d19      	adds	r1, r3, #4
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	9103      	str	r1, [sp, #12]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	bfbb      	ittet	lt
 800c0e4:	425b      	neglt	r3, r3
 800c0e6:	f042 0202 	orrlt.w	r2, r2, #2
 800c0ea:	9307      	strge	r3, [sp, #28]
 800c0ec:	9307      	strlt	r3, [sp, #28]
 800c0ee:	bfb8      	it	lt
 800c0f0:	9204      	strlt	r2, [sp, #16]
 800c0f2:	7823      	ldrb	r3, [r4, #0]
 800c0f4:	2b2e      	cmp	r3, #46	; 0x2e
 800c0f6:	d10c      	bne.n	800c112 <_vfiprintf_r+0x176>
 800c0f8:	7863      	ldrb	r3, [r4, #1]
 800c0fa:	2b2a      	cmp	r3, #42	; 0x2a
 800c0fc:	d135      	bne.n	800c16a <_vfiprintf_r+0x1ce>
 800c0fe:	9b03      	ldr	r3, [sp, #12]
 800c100:	3402      	adds	r4, #2
 800c102:	1d1a      	adds	r2, r3, #4
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	9203      	str	r2, [sp, #12]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	bfb8      	it	lt
 800c10c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c110:	9305      	str	r3, [sp, #20]
 800c112:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c1f8 <_vfiprintf_r+0x25c>
 800c116:	2203      	movs	r2, #3
 800c118:	4650      	mov	r0, sl
 800c11a:	7821      	ldrb	r1, [r4, #0]
 800c11c:	f7ff fac4 	bl	800b6a8 <memchr>
 800c120:	b140      	cbz	r0, 800c134 <_vfiprintf_r+0x198>
 800c122:	2340      	movs	r3, #64	; 0x40
 800c124:	eba0 000a 	sub.w	r0, r0, sl
 800c128:	fa03 f000 	lsl.w	r0, r3, r0
 800c12c:	9b04      	ldr	r3, [sp, #16]
 800c12e:	3401      	adds	r4, #1
 800c130:	4303      	orrs	r3, r0
 800c132:	9304      	str	r3, [sp, #16]
 800c134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c138:	2206      	movs	r2, #6
 800c13a:	482c      	ldr	r0, [pc, #176]	; (800c1ec <_vfiprintf_r+0x250>)
 800c13c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c140:	f7ff fab2 	bl	800b6a8 <memchr>
 800c144:	2800      	cmp	r0, #0
 800c146:	d03f      	beq.n	800c1c8 <_vfiprintf_r+0x22c>
 800c148:	4b29      	ldr	r3, [pc, #164]	; (800c1f0 <_vfiprintf_r+0x254>)
 800c14a:	bb1b      	cbnz	r3, 800c194 <_vfiprintf_r+0x1f8>
 800c14c:	9b03      	ldr	r3, [sp, #12]
 800c14e:	3307      	adds	r3, #7
 800c150:	f023 0307 	bic.w	r3, r3, #7
 800c154:	3308      	adds	r3, #8
 800c156:	9303      	str	r3, [sp, #12]
 800c158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c15a:	443b      	add	r3, r7
 800c15c:	9309      	str	r3, [sp, #36]	; 0x24
 800c15e:	e767      	b.n	800c030 <_vfiprintf_r+0x94>
 800c160:	460c      	mov	r4, r1
 800c162:	2001      	movs	r0, #1
 800c164:	fb0c 3202 	mla	r2, ip, r2, r3
 800c168:	e7a5      	b.n	800c0b6 <_vfiprintf_r+0x11a>
 800c16a:	2300      	movs	r3, #0
 800c16c:	f04f 0c0a 	mov.w	ip, #10
 800c170:	4619      	mov	r1, r3
 800c172:	3401      	adds	r4, #1
 800c174:	9305      	str	r3, [sp, #20]
 800c176:	4620      	mov	r0, r4
 800c178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c17c:	3a30      	subs	r2, #48	; 0x30
 800c17e:	2a09      	cmp	r2, #9
 800c180:	d903      	bls.n	800c18a <_vfiprintf_r+0x1ee>
 800c182:	2b00      	cmp	r3, #0
 800c184:	d0c5      	beq.n	800c112 <_vfiprintf_r+0x176>
 800c186:	9105      	str	r1, [sp, #20]
 800c188:	e7c3      	b.n	800c112 <_vfiprintf_r+0x176>
 800c18a:	4604      	mov	r4, r0
 800c18c:	2301      	movs	r3, #1
 800c18e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c192:	e7f0      	b.n	800c176 <_vfiprintf_r+0x1da>
 800c194:	ab03      	add	r3, sp, #12
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	462a      	mov	r2, r5
 800c19a:	4630      	mov	r0, r6
 800c19c:	4b15      	ldr	r3, [pc, #84]	; (800c1f4 <_vfiprintf_r+0x258>)
 800c19e:	a904      	add	r1, sp, #16
 800c1a0:	f7fd ff26 	bl	8009ff0 <_printf_float>
 800c1a4:	4607      	mov	r7, r0
 800c1a6:	1c78      	adds	r0, r7, #1
 800c1a8:	d1d6      	bne.n	800c158 <_vfiprintf_r+0x1bc>
 800c1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c1ac:	07d9      	lsls	r1, r3, #31
 800c1ae:	d405      	bmi.n	800c1bc <_vfiprintf_r+0x220>
 800c1b0:	89ab      	ldrh	r3, [r5, #12]
 800c1b2:	059a      	lsls	r2, r3, #22
 800c1b4:	d402      	bmi.n	800c1bc <_vfiprintf_r+0x220>
 800c1b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c1b8:	f7ff fa6c 	bl	800b694 <__retarget_lock_release_recursive>
 800c1bc:	89ab      	ldrh	r3, [r5, #12]
 800c1be:	065b      	lsls	r3, r3, #25
 800c1c0:	f53f af12 	bmi.w	800bfe8 <_vfiprintf_r+0x4c>
 800c1c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c1c6:	e711      	b.n	800bfec <_vfiprintf_r+0x50>
 800c1c8:	ab03      	add	r3, sp, #12
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	462a      	mov	r2, r5
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	4b08      	ldr	r3, [pc, #32]	; (800c1f4 <_vfiprintf_r+0x258>)
 800c1d2:	a904      	add	r1, sp, #16
 800c1d4:	f7fe f9a8 	bl	800a528 <_printf_i>
 800c1d8:	e7e4      	b.n	800c1a4 <_vfiprintf_r+0x208>
 800c1da:	bf00      	nop
 800c1dc:	0800e230 	.word	0x0800e230
 800c1e0:	0800e250 	.word	0x0800e250
 800c1e4:	0800e210 	.word	0x0800e210
 800c1e8:	0800e3cc 	.word	0x0800e3cc
 800c1ec:	0800e3d6 	.word	0x0800e3d6
 800c1f0:	08009ff1 	.word	0x08009ff1
 800c1f4:	0800bf77 	.word	0x0800bf77
 800c1f8:	0800e3d2 	.word	0x0800e3d2

0800c1fc <_sbrk_r>:
 800c1fc:	b538      	push	{r3, r4, r5, lr}
 800c1fe:	2300      	movs	r3, #0
 800c200:	4d05      	ldr	r5, [pc, #20]	; (800c218 <_sbrk_r+0x1c>)
 800c202:	4604      	mov	r4, r0
 800c204:	4608      	mov	r0, r1
 800c206:	602b      	str	r3, [r5, #0]
 800c208:	f7fa fa82 	bl	8006710 <_sbrk>
 800c20c:	1c43      	adds	r3, r0, #1
 800c20e:	d102      	bne.n	800c216 <_sbrk_r+0x1a>
 800c210:	682b      	ldr	r3, [r5, #0]
 800c212:	b103      	cbz	r3, 800c216 <_sbrk_r+0x1a>
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	bd38      	pop	{r3, r4, r5, pc}
 800c218:	2000037c 	.word	0x2000037c

0800c21c <__sread>:
 800c21c:	b510      	push	{r4, lr}
 800c21e:	460c      	mov	r4, r1
 800c220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c224:	f000 faa6 	bl	800c774 <_read_r>
 800c228:	2800      	cmp	r0, #0
 800c22a:	bfab      	itete	ge
 800c22c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c22e:	89a3      	ldrhlt	r3, [r4, #12]
 800c230:	181b      	addge	r3, r3, r0
 800c232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c236:	bfac      	ite	ge
 800c238:	6563      	strge	r3, [r4, #84]	; 0x54
 800c23a:	81a3      	strhlt	r3, [r4, #12]
 800c23c:	bd10      	pop	{r4, pc}

0800c23e <__swrite>:
 800c23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c242:	461f      	mov	r7, r3
 800c244:	898b      	ldrh	r3, [r1, #12]
 800c246:	4605      	mov	r5, r0
 800c248:	05db      	lsls	r3, r3, #23
 800c24a:	460c      	mov	r4, r1
 800c24c:	4616      	mov	r6, r2
 800c24e:	d505      	bpl.n	800c25c <__swrite+0x1e>
 800c250:	2302      	movs	r3, #2
 800c252:	2200      	movs	r2, #0
 800c254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c258:	f000 f9f8 	bl	800c64c <_lseek_r>
 800c25c:	89a3      	ldrh	r3, [r4, #12]
 800c25e:	4632      	mov	r2, r6
 800c260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c264:	81a3      	strh	r3, [r4, #12]
 800c266:	4628      	mov	r0, r5
 800c268:	463b      	mov	r3, r7
 800c26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c272:	f000 b869 	b.w	800c348 <_write_r>

0800c276 <__sseek>:
 800c276:	b510      	push	{r4, lr}
 800c278:	460c      	mov	r4, r1
 800c27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c27e:	f000 f9e5 	bl	800c64c <_lseek_r>
 800c282:	1c43      	adds	r3, r0, #1
 800c284:	89a3      	ldrh	r3, [r4, #12]
 800c286:	bf15      	itete	ne
 800c288:	6560      	strne	r0, [r4, #84]	; 0x54
 800c28a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c28e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c292:	81a3      	strheq	r3, [r4, #12]
 800c294:	bf18      	it	ne
 800c296:	81a3      	strhne	r3, [r4, #12]
 800c298:	bd10      	pop	{r4, pc}

0800c29a <__sclose>:
 800c29a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c29e:	f000 b8f1 	b.w	800c484 <_close_r>
	...

0800c2a4 <__swbuf_r>:
 800c2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a6:	460e      	mov	r6, r1
 800c2a8:	4614      	mov	r4, r2
 800c2aa:	4605      	mov	r5, r0
 800c2ac:	b118      	cbz	r0, 800c2b6 <__swbuf_r+0x12>
 800c2ae:	6983      	ldr	r3, [r0, #24]
 800c2b0:	b90b      	cbnz	r3, 800c2b6 <__swbuf_r+0x12>
 800c2b2:	f7ff f94b 	bl	800b54c <__sinit>
 800c2b6:	4b21      	ldr	r3, [pc, #132]	; (800c33c <__swbuf_r+0x98>)
 800c2b8:	429c      	cmp	r4, r3
 800c2ba:	d12b      	bne.n	800c314 <__swbuf_r+0x70>
 800c2bc:	686c      	ldr	r4, [r5, #4]
 800c2be:	69a3      	ldr	r3, [r4, #24]
 800c2c0:	60a3      	str	r3, [r4, #8]
 800c2c2:	89a3      	ldrh	r3, [r4, #12]
 800c2c4:	071a      	lsls	r2, r3, #28
 800c2c6:	d52f      	bpl.n	800c328 <__swbuf_r+0x84>
 800c2c8:	6923      	ldr	r3, [r4, #16]
 800c2ca:	b36b      	cbz	r3, 800c328 <__swbuf_r+0x84>
 800c2cc:	6923      	ldr	r3, [r4, #16]
 800c2ce:	6820      	ldr	r0, [r4, #0]
 800c2d0:	b2f6      	uxtb	r6, r6
 800c2d2:	1ac0      	subs	r0, r0, r3
 800c2d4:	6963      	ldr	r3, [r4, #20]
 800c2d6:	4637      	mov	r7, r6
 800c2d8:	4283      	cmp	r3, r0
 800c2da:	dc04      	bgt.n	800c2e6 <__swbuf_r+0x42>
 800c2dc:	4621      	mov	r1, r4
 800c2de:	4628      	mov	r0, r5
 800c2e0:	f000 f966 	bl	800c5b0 <_fflush_r>
 800c2e4:	bb30      	cbnz	r0, 800c334 <__swbuf_r+0x90>
 800c2e6:	68a3      	ldr	r3, [r4, #8]
 800c2e8:	3001      	adds	r0, #1
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	60a3      	str	r3, [r4, #8]
 800c2ee:	6823      	ldr	r3, [r4, #0]
 800c2f0:	1c5a      	adds	r2, r3, #1
 800c2f2:	6022      	str	r2, [r4, #0]
 800c2f4:	701e      	strb	r6, [r3, #0]
 800c2f6:	6963      	ldr	r3, [r4, #20]
 800c2f8:	4283      	cmp	r3, r0
 800c2fa:	d004      	beq.n	800c306 <__swbuf_r+0x62>
 800c2fc:	89a3      	ldrh	r3, [r4, #12]
 800c2fe:	07db      	lsls	r3, r3, #31
 800c300:	d506      	bpl.n	800c310 <__swbuf_r+0x6c>
 800c302:	2e0a      	cmp	r6, #10
 800c304:	d104      	bne.n	800c310 <__swbuf_r+0x6c>
 800c306:	4621      	mov	r1, r4
 800c308:	4628      	mov	r0, r5
 800c30a:	f000 f951 	bl	800c5b0 <_fflush_r>
 800c30e:	b988      	cbnz	r0, 800c334 <__swbuf_r+0x90>
 800c310:	4638      	mov	r0, r7
 800c312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c314:	4b0a      	ldr	r3, [pc, #40]	; (800c340 <__swbuf_r+0x9c>)
 800c316:	429c      	cmp	r4, r3
 800c318:	d101      	bne.n	800c31e <__swbuf_r+0x7a>
 800c31a:	68ac      	ldr	r4, [r5, #8]
 800c31c:	e7cf      	b.n	800c2be <__swbuf_r+0x1a>
 800c31e:	4b09      	ldr	r3, [pc, #36]	; (800c344 <__swbuf_r+0xa0>)
 800c320:	429c      	cmp	r4, r3
 800c322:	bf08      	it	eq
 800c324:	68ec      	ldreq	r4, [r5, #12]
 800c326:	e7ca      	b.n	800c2be <__swbuf_r+0x1a>
 800c328:	4621      	mov	r1, r4
 800c32a:	4628      	mov	r0, r5
 800c32c:	f000 f81e 	bl	800c36c <__swsetup_r>
 800c330:	2800      	cmp	r0, #0
 800c332:	d0cb      	beq.n	800c2cc <__swbuf_r+0x28>
 800c334:	f04f 37ff 	mov.w	r7, #4294967295
 800c338:	e7ea      	b.n	800c310 <__swbuf_r+0x6c>
 800c33a:	bf00      	nop
 800c33c:	0800e230 	.word	0x0800e230
 800c340:	0800e250 	.word	0x0800e250
 800c344:	0800e210 	.word	0x0800e210

0800c348 <_write_r>:
 800c348:	b538      	push	{r3, r4, r5, lr}
 800c34a:	4604      	mov	r4, r0
 800c34c:	4608      	mov	r0, r1
 800c34e:	4611      	mov	r1, r2
 800c350:	2200      	movs	r2, #0
 800c352:	4d05      	ldr	r5, [pc, #20]	; (800c368 <_write_r+0x20>)
 800c354:	602a      	str	r2, [r5, #0]
 800c356:	461a      	mov	r2, r3
 800c358:	f7fa f98e 	bl	8006678 <_write>
 800c35c:	1c43      	adds	r3, r0, #1
 800c35e:	d102      	bne.n	800c366 <_write_r+0x1e>
 800c360:	682b      	ldr	r3, [r5, #0]
 800c362:	b103      	cbz	r3, 800c366 <_write_r+0x1e>
 800c364:	6023      	str	r3, [r4, #0]
 800c366:	bd38      	pop	{r3, r4, r5, pc}
 800c368:	2000037c 	.word	0x2000037c

0800c36c <__swsetup_r>:
 800c36c:	4b32      	ldr	r3, [pc, #200]	; (800c438 <__swsetup_r+0xcc>)
 800c36e:	b570      	push	{r4, r5, r6, lr}
 800c370:	681d      	ldr	r5, [r3, #0]
 800c372:	4606      	mov	r6, r0
 800c374:	460c      	mov	r4, r1
 800c376:	b125      	cbz	r5, 800c382 <__swsetup_r+0x16>
 800c378:	69ab      	ldr	r3, [r5, #24]
 800c37a:	b913      	cbnz	r3, 800c382 <__swsetup_r+0x16>
 800c37c:	4628      	mov	r0, r5
 800c37e:	f7ff f8e5 	bl	800b54c <__sinit>
 800c382:	4b2e      	ldr	r3, [pc, #184]	; (800c43c <__swsetup_r+0xd0>)
 800c384:	429c      	cmp	r4, r3
 800c386:	d10f      	bne.n	800c3a8 <__swsetup_r+0x3c>
 800c388:	686c      	ldr	r4, [r5, #4]
 800c38a:	89a3      	ldrh	r3, [r4, #12]
 800c38c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c390:	0719      	lsls	r1, r3, #28
 800c392:	d42c      	bmi.n	800c3ee <__swsetup_r+0x82>
 800c394:	06dd      	lsls	r5, r3, #27
 800c396:	d411      	bmi.n	800c3bc <__swsetup_r+0x50>
 800c398:	2309      	movs	r3, #9
 800c39a:	6033      	str	r3, [r6, #0]
 800c39c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a4:	81a3      	strh	r3, [r4, #12]
 800c3a6:	e03e      	b.n	800c426 <__swsetup_r+0xba>
 800c3a8:	4b25      	ldr	r3, [pc, #148]	; (800c440 <__swsetup_r+0xd4>)
 800c3aa:	429c      	cmp	r4, r3
 800c3ac:	d101      	bne.n	800c3b2 <__swsetup_r+0x46>
 800c3ae:	68ac      	ldr	r4, [r5, #8]
 800c3b0:	e7eb      	b.n	800c38a <__swsetup_r+0x1e>
 800c3b2:	4b24      	ldr	r3, [pc, #144]	; (800c444 <__swsetup_r+0xd8>)
 800c3b4:	429c      	cmp	r4, r3
 800c3b6:	bf08      	it	eq
 800c3b8:	68ec      	ldreq	r4, [r5, #12]
 800c3ba:	e7e6      	b.n	800c38a <__swsetup_r+0x1e>
 800c3bc:	0758      	lsls	r0, r3, #29
 800c3be:	d512      	bpl.n	800c3e6 <__swsetup_r+0x7a>
 800c3c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3c2:	b141      	cbz	r1, 800c3d6 <__swsetup_r+0x6a>
 800c3c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3c8:	4299      	cmp	r1, r3
 800c3ca:	d002      	beq.n	800c3d2 <__swsetup_r+0x66>
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	f7ff fd17 	bl	800be00 <_free_r>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	6363      	str	r3, [r4, #52]	; 0x34
 800c3d6:	89a3      	ldrh	r3, [r4, #12]
 800c3d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c3dc:	81a3      	strh	r3, [r4, #12]
 800c3de:	2300      	movs	r3, #0
 800c3e0:	6063      	str	r3, [r4, #4]
 800c3e2:	6923      	ldr	r3, [r4, #16]
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	f043 0308 	orr.w	r3, r3, #8
 800c3ec:	81a3      	strh	r3, [r4, #12]
 800c3ee:	6923      	ldr	r3, [r4, #16]
 800c3f0:	b94b      	cbnz	r3, 800c406 <__swsetup_r+0x9a>
 800c3f2:	89a3      	ldrh	r3, [r4, #12]
 800c3f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3fc:	d003      	beq.n	800c406 <__swsetup_r+0x9a>
 800c3fe:	4621      	mov	r1, r4
 800c400:	4630      	mov	r0, r6
 800c402:	f000 f959 	bl	800c6b8 <__smakebuf_r>
 800c406:	89a0      	ldrh	r0, [r4, #12]
 800c408:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c40c:	f010 0301 	ands.w	r3, r0, #1
 800c410:	d00a      	beq.n	800c428 <__swsetup_r+0xbc>
 800c412:	2300      	movs	r3, #0
 800c414:	60a3      	str	r3, [r4, #8]
 800c416:	6963      	ldr	r3, [r4, #20]
 800c418:	425b      	negs	r3, r3
 800c41a:	61a3      	str	r3, [r4, #24]
 800c41c:	6923      	ldr	r3, [r4, #16]
 800c41e:	b943      	cbnz	r3, 800c432 <__swsetup_r+0xc6>
 800c420:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c424:	d1ba      	bne.n	800c39c <__swsetup_r+0x30>
 800c426:	bd70      	pop	{r4, r5, r6, pc}
 800c428:	0781      	lsls	r1, r0, #30
 800c42a:	bf58      	it	pl
 800c42c:	6963      	ldrpl	r3, [r4, #20]
 800c42e:	60a3      	str	r3, [r4, #8]
 800c430:	e7f4      	b.n	800c41c <__swsetup_r+0xb0>
 800c432:	2000      	movs	r0, #0
 800c434:	e7f7      	b.n	800c426 <__swsetup_r+0xba>
 800c436:	bf00      	nop
 800c438:	20000010 	.word	0x20000010
 800c43c:	0800e230 	.word	0x0800e230
 800c440:	0800e250 	.word	0x0800e250
 800c444:	0800e210 	.word	0x0800e210

0800c448 <__assert_func>:
 800c448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c44a:	4614      	mov	r4, r2
 800c44c:	461a      	mov	r2, r3
 800c44e:	4b09      	ldr	r3, [pc, #36]	; (800c474 <__assert_func+0x2c>)
 800c450:	4605      	mov	r5, r0
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	68d8      	ldr	r0, [r3, #12]
 800c456:	b14c      	cbz	r4, 800c46c <__assert_func+0x24>
 800c458:	4b07      	ldr	r3, [pc, #28]	; (800c478 <__assert_func+0x30>)
 800c45a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c45e:	9100      	str	r1, [sp, #0]
 800c460:	462b      	mov	r3, r5
 800c462:	4906      	ldr	r1, [pc, #24]	; (800c47c <__assert_func+0x34>)
 800c464:	f000 f8e0 	bl	800c628 <fiprintf>
 800c468:	f000 f9a3 	bl	800c7b2 <abort>
 800c46c:	4b04      	ldr	r3, [pc, #16]	; (800c480 <__assert_func+0x38>)
 800c46e:	461c      	mov	r4, r3
 800c470:	e7f3      	b.n	800c45a <__assert_func+0x12>
 800c472:	bf00      	nop
 800c474:	20000010 	.word	0x20000010
 800c478:	0800e3dd 	.word	0x0800e3dd
 800c47c:	0800e3ea 	.word	0x0800e3ea
 800c480:	0800e418 	.word	0x0800e418

0800c484 <_close_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	2300      	movs	r3, #0
 800c488:	4d05      	ldr	r5, [pc, #20]	; (800c4a0 <_close_r+0x1c>)
 800c48a:	4604      	mov	r4, r0
 800c48c:	4608      	mov	r0, r1
 800c48e:	602b      	str	r3, [r5, #0]
 800c490:	f7fa f90e 	bl	80066b0 <_close>
 800c494:	1c43      	adds	r3, r0, #1
 800c496:	d102      	bne.n	800c49e <_close_r+0x1a>
 800c498:	682b      	ldr	r3, [r5, #0]
 800c49a:	b103      	cbz	r3, 800c49e <_close_r+0x1a>
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	bd38      	pop	{r3, r4, r5, pc}
 800c4a0:	2000037c 	.word	0x2000037c

0800c4a4 <__sflush_r>:
 800c4a4:	898a      	ldrh	r2, [r1, #12]
 800c4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4aa:	4605      	mov	r5, r0
 800c4ac:	0710      	lsls	r0, r2, #28
 800c4ae:	460c      	mov	r4, r1
 800c4b0:	d458      	bmi.n	800c564 <__sflush_r+0xc0>
 800c4b2:	684b      	ldr	r3, [r1, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	dc05      	bgt.n	800c4c4 <__sflush_r+0x20>
 800c4b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	dc02      	bgt.n	800c4c4 <__sflush_r+0x20>
 800c4be:	2000      	movs	r0, #0
 800c4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4c6:	2e00      	cmp	r6, #0
 800c4c8:	d0f9      	beq.n	800c4be <__sflush_r+0x1a>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c4d0:	682f      	ldr	r7, [r5, #0]
 800c4d2:	602b      	str	r3, [r5, #0]
 800c4d4:	d032      	beq.n	800c53c <__sflush_r+0x98>
 800c4d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c4d8:	89a3      	ldrh	r3, [r4, #12]
 800c4da:	075a      	lsls	r2, r3, #29
 800c4dc:	d505      	bpl.n	800c4ea <__sflush_r+0x46>
 800c4de:	6863      	ldr	r3, [r4, #4]
 800c4e0:	1ac0      	subs	r0, r0, r3
 800c4e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4e4:	b10b      	cbz	r3, 800c4ea <__sflush_r+0x46>
 800c4e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4e8:	1ac0      	subs	r0, r0, r3
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	6a21      	ldr	r1, [r4, #32]
 800c4f4:	47b0      	blx	r6
 800c4f6:	1c43      	adds	r3, r0, #1
 800c4f8:	89a3      	ldrh	r3, [r4, #12]
 800c4fa:	d106      	bne.n	800c50a <__sflush_r+0x66>
 800c4fc:	6829      	ldr	r1, [r5, #0]
 800c4fe:	291d      	cmp	r1, #29
 800c500:	d82c      	bhi.n	800c55c <__sflush_r+0xb8>
 800c502:	4a2a      	ldr	r2, [pc, #168]	; (800c5ac <__sflush_r+0x108>)
 800c504:	40ca      	lsrs	r2, r1
 800c506:	07d6      	lsls	r6, r2, #31
 800c508:	d528      	bpl.n	800c55c <__sflush_r+0xb8>
 800c50a:	2200      	movs	r2, #0
 800c50c:	6062      	str	r2, [r4, #4]
 800c50e:	6922      	ldr	r2, [r4, #16]
 800c510:	04d9      	lsls	r1, r3, #19
 800c512:	6022      	str	r2, [r4, #0]
 800c514:	d504      	bpl.n	800c520 <__sflush_r+0x7c>
 800c516:	1c42      	adds	r2, r0, #1
 800c518:	d101      	bne.n	800c51e <__sflush_r+0x7a>
 800c51a:	682b      	ldr	r3, [r5, #0]
 800c51c:	b903      	cbnz	r3, 800c520 <__sflush_r+0x7c>
 800c51e:	6560      	str	r0, [r4, #84]	; 0x54
 800c520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c522:	602f      	str	r7, [r5, #0]
 800c524:	2900      	cmp	r1, #0
 800c526:	d0ca      	beq.n	800c4be <__sflush_r+0x1a>
 800c528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c52c:	4299      	cmp	r1, r3
 800c52e:	d002      	beq.n	800c536 <__sflush_r+0x92>
 800c530:	4628      	mov	r0, r5
 800c532:	f7ff fc65 	bl	800be00 <_free_r>
 800c536:	2000      	movs	r0, #0
 800c538:	6360      	str	r0, [r4, #52]	; 0x34
 800c53a:	e7c1      	b.n	800c4c0 <__sflush_r+0x1c>
 800c53c:	6a21      	ldr	r1, [r4, #32]
 800c53e:	2301      	movs	r3, #1
 800c540:	4628      	mov	r0, r5
 800c542:	47b0      	blx	r6
 800c544:	1c41      	adds	r1, r0, #1
 800c546:	d1c7      	bne.n	800c4d8 <__sflush_r+0x34>
 800c548:	682b      	ldr	r3, [r5, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d0c4      	beq.n	800c4d8 <__sflush_r+0x34>
 800c54e:	2b1d      	cmp	r3, #29
 800c550:	d001      	beq.n	800c556 <__sflush_r+0xb2>
 800c552:	2b16      	cmp	r3, #22
 800c554:	d101      	bne.n	800c55a <__sflush_r+0xb6>
 800c556:	602f      	str	r7, [r5, #0]
 800c558:	e7b1      	b.n	800c4be <__sflush_r+0x1a>
 800c55a:	89a3      	ldrh	r3, [r4, #12]
 800c55c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c560:	81a3      	strh	r3, [r4, #12]
 800c562:	e7ad      	b.n	800c4c0 <__sflush_r+0x1c>
 800c564:	690f      	ldr	r7, [r1, #16]
 800c566:	2f00      	cmp	r7, #0
 800c568:	d0a9      	beq.n	800c4be <__sflush_r+0x1a>
 800c56a:	0793      	lsls	r3, r2, #30
 800c56c:	bf18      	it	ne
 800c56e:	2300      	movne	r3, #0
 800c570:	680e      	ldr	r6, [r1, #0]
 800c572:	bf08      	it	eq
 800c574:	694b      	ldreq	r3, [r1, #20]
 800c576:	eba6 0807 	sub.w	r8, r6, r7
 800c57a:	600f      	str	r7, [r1, #0]
 800c57c:	608b      	str	r3, [r1, #8]
 800c57e:	f1b8 0f00 	cmp.w	r8, #0
 800c582:	dd9c      	ble.n	800c4be <__sflush_r+0x1a>
 800c584:	4643      	mov	r3, r8
 800c586:	463a      	mov	r2, r7
 800c588:	4628      	mov	r0, r5
 800c58a:	6a21      	ldr	r1, [r4, #32]
 800c58c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c58e:	47b0      	blx	r6
 800c590:	2800      	cmp	r0, #0
 800c592:	dc06      	bgt.n	800c5a2 <__sflush_r+0xfe>
 800c594:	89a3      	ldrh	r3, [r4, #12]
 800c596:	f04f 30ff 	mov.w	r0, #4294967295
 800c59a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c59e:	81a3      	strh	r3, [r4, #12]
 800c5a0:	e78e      	b.n	800c4c0 <__sflush_r+0x1c>
 800c5a2:	4407      	add	r7, r0
 800c5a4:	eba8 0800 	sub.w	r8, r8, r0
 800c5a8:	e7e9      	b.n	800c57e <__sflush_r+0xda>
 800c5aa:	bf00      	nop
 800c5ac:	20400001 	.word	0x20400001

0800c5b0 <_fflush_r>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	690b      	ldr	r3, [r1, #16]
 800c5b4:	4605      	mov	r5, r0
 800c5b6:	460c      	mov	r4, r1
 800c5b8:	b913      	cbnz	r3, 800c5c0 <_fflush_r+0x10>
 800c5ba:	2500      	movs	r5, #0
 800c5bc:	4628      	mov	r0, r5
 800c5be:	bd38      	pop	{r3, r4, r5, pc}
 800c5c0:	b118      	cbz	r0, 800c5ca <_fflush_r+0x1a>
 800c5c2:	6983      	ldr	r3, [r0, #24]
 800c5c4:	b90b      	cbnz	r3, 800c5ca <_fflush_r+0x1a>
 800c5c6:	f7fe ffc1 	bl	800b54c <__sinit>
 800c5ca:	4b14      	ldr	r3, [pc, #80]	; (800c61c <_fflush_r+0x6c>)
 800c5cc:	429c      	cmp	r4, r3
 800c5ce:	d11b      	bne.n	800c608 <_fflush_r+0x58>
 800c5d0:	686c      	ldr	r4, [r5, #4]
 800c5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d0ef      	beq.n	800c5ba <_fflush_r+0xa>
 800c5da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c5dc:	07d0      	lsls	r0, r2, #31
 800c5de:	d404      	bmi.n	800c5ea <_fflush_r+0x3a>
 800c5e0:	0599      	lsls	r1, r3, #22
 800c5e2:	d402      	bmi.n	800c5ea <_fflush_r+0x3a>
 800c5e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5e6:	f7ff f854 	bl	800b692 <__retarget_lock_acquire_recursive>
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	f7ff ff59 	bl	800c4a4 <__sflush_r>
 800c5f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5f4:	4605      	mov	r5, r0
 800c5f6:	07da      	lsls	r2, r3, #31
 800c5f8:	d4e0      	bmi.n	800c5bc <_fflush_r+0xc>
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	059b      	lsls	r3, r3, #22
 800c5fe:	d4dd      	bmi.n	800c5bc <_fflush_r+0xc>
 800c600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c602:	f7ff f847 	bl	800b694 <__retarget_lock_release_recursive>
 800c606:	e7d9      	b.n	800c5bc <_fflush_r+0xc>
 800c608:	4b05      	ldr	r3, [pc, #20]	; (800c620 <_fflush_r+0x70>)
 800c60a:	429c      	cmp	r4, r3
 800c60c:	d101      	bne.n	800c612 <_fflush_r+0x62>
 800c60e:	68ac      	ldr	r4, [r5, #8]
 800c610:	e7df      	b.n	800c5d2 <_fflush_r+0x22>
 800c612:	4b04      	ldr	r3, [pc, #16]	; (800c624 <_fflush_r+0x74>)
 800c614:	429c      	cmp	r4, r3
 800c616:	bf08      	it	eq
 800c618:	68ec      	ldreq	r4, [r5, #12]
 800c61a:	e7da      	b.n	800c5d2 <_fflush_r+0x22>
 800c61c:	0800e230 	.word	0x0800e230
 800c620:	0800e250 	.word	0x0800e250
 800c624:	0800e210 	.word	0x0800e210

0800c628 <fiprintf>:
 800c628:	b40e      	push	{r1, r2, r3}
 800c62a:	b503      	push	{r0, r1, lr}
 800c62c:	4601      	mov	r1, r0
 800c62e:	ab03      	add	r3, sp, #12
 800c630:	4805      	ldr	r0, [pc, #20]	; (800c648 <fiprintf+0x20>)
 800c632:	f853 2b04 	ldr.w	r2, [r3], #4
 800c636:	6800      	ldr	r0, [r0, #0]
 800c638:	9301      	str	r3, [sp, #4]
 800c63a:	f7ff fcaf 	bl	800bf9c <_vfiprintf_r>
 800c63e:	b002      	add	sp, #8
 800c640:	f85d eb04 	ldr.w	lr, [sp], #4
 800c644:	b003      	add	sp, #12
 800c646:	4770      	bx	lr
 800c648:	20000010 	.word	0x20000010

0800c64c <_lseek_r>:
 800c64c:	b538      	push	{r3, r4, r5, lr}
 800c64e:	4604      	mov	r4, r0
 800c650:	4608      	mov	r0, r1
 800c652:	4611      	mov	r1, r2
 800c654:	2200      	movs	r2, #0
 800c656:	4d05      	ldr	r5, [pc, #20]	; (800c66c <_lseek_r+0x20>)
 800c658:	602a      	str	r2, [r5, #0]
 800c65a:	461a      	mov	r2, r3
 800c65c:	f7fa f84c 	bl	80066f8 <_lseek>
 800c660:	1c43      	adds	r3, r0, #1
 800c662:	d102      	bne.n	800c66a <_lseek_r+0x1e>
 800c664:	682b      	ldr	r3, [r5, #0]
 800c666:	b103      	cbz	r3, 800c66a <_lseek_r+0x1e>
 800c668:	6023      	str	r3, [r4, #0]
 800c66a:	bd38      	pop	{r3, r4, r5, pc}
 800c66c:	2000037c 	.word	0x2000037c

0800c670 <__swhatbuf_r>:
 800c670:	b570      	push	{r4, r5, r6, lr}
 800c672:	460e      	mov	r6, r1
 800c674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c678:	4614      	mov	r4, r2
 800c67a:	2900      	cmp	r1, #0
 800c67c:	461d      	mov	r5, r3
 800c67e:	b096      	sub	sp, #88	; 0x58
 800c680:	da07      	bge.n	800c692 <__swhatbuf_r+0x22>
 800c682:	2300      	movs	r3, #0
 800c684:	602b      	str	r3, [r5, #0]
 800c686:	89b3      	ldrh	r3, [r6, #12]
 800c688:	061a      	lsls	r2, r3, #24
 800c68a:	d410      	bmi.n	800c6ae <__swhatbuf_r+0x3e>
 800c68c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c690:	e00e      	b.n	800c6b0 <__swhatbuf_r+0x40>
 800c692:	466a      	mov	r2, sp
 800c694:	f000 f894 	bl	800c7c0 <_fstat_r>
 800c698:	2800      	cmp	r0, #0
 800c69a:	dbf2      	blt.n	800c682 <__swhatbuf_r+0x12>
 800c69c:	9a01      	ldr	r2, [sp, #4]
 800c69e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c6a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c6a6:	425a      	negs	r2, r3
 800c6a8:	415a      	adcs	r2, r3
 800c6aa:	602a      	str	r2, [r5, #0]
 800c6ac:	e7ee      	b.n	800c68c <__swhatbuf_r+0x1c>
 800c6ae:	2340      	movs	r3, #64	; 0x40
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	6023      	str	r3, [r4, #0]
 800c6b4:	b016      	add	sp, #88	; 0x58
 800c6b6:	bd70      	pop	{r4, r5, r6, pc}

0800c6b8 <__smakebuf_r>:
 800c6b8:	898b      	ldrh	r3, [r1, #12]
 800c6ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6bc:	079d      	lsls	r5, r3, #30
 800c6be:	4606      	mov	r6, r0
 800c6c0:	460c      	mov	r4, r1
 800c6c2:	d507      	bpl.n	800c6d4 <__smakebuf_r+0x1c>
 800c6c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6c8:	6023      	str	r3, [r4, #0]
 800c6ca:	6123      	str	r3, [r4, #16]
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	6163      	str	r3, [r4, #20]
 800c6d0:	b002      	add	sp, #8
 800c6d2:	bd70      	pop	{r4, r5, r6, pc}
 800c6d4:	466a      	mov	r2, sp
 800c6d6:	ab01      	add	r3, sp, #4
 800c6d8:	f7ff ffca 	bl	800c670 <__swhatbuf_r>
 800c6dc:	9900      	ldr	r1, [sp, #0]
 800c6de:	4605      	mov	r5, r0
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	f7ff fbd9 	bl	800be98 <_malloc_r>
 800c6e6:	b948      	cbnz	r0, 800c6fc <__smakebuf_r+0x44>
 800c6e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6ec:	059a      	lsls	r2, r3, #22
 800c6ee:	d4ef      	bmi.n	800c6d0 <__smakebuf_r+0x18>
 800c6f0:	f023 0303 	bic.w	r3, r3, #3
 800c6f4:	f043 0302 	orr.w	r3, r3, #2
 800c6f8:	81a3      	strh	r3, [r4, #12]
 800c6fa:	e7e3      	b.n	800c6c4 <__smakebuf_r+0xc>
 800c6fc:	4b0d      	ldr	r3, [pc, #52]	; (800c734 <__smakebuf_r+0x7c>)
 800c6fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800c700:	89a3      	ldrh	r3, [r4, #12]
 800c702:	6020      	str	r0, [r4, #0]
 800c704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c708:	81a3      	strh	r3, [r4, #12]
 800c70a:	9b00      	ldr	r3, [sp, #0]
 800c70c:	6120      	str	r0, [r4, #16]
 800c70e:	6163      	str	r3, [r4, #20]
 800c710:	9b01      	ldr	r3, [sp, #4]
 800c712:	b15b      	cbz	r3, 800c72c <__smakebuf_r+0x74>
 800c714:	4630      	mov	r0, r6
 800c716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c71a:	f000 f863 	bl	800c7e4 <_isatty_r>
 800c71e:	b128      	cbz	r0, 800c72c <__smakebuf_r+0x74>
 800c720:	89a3      	ldrh	r3, [r4, #12]
 800c722:	f023 0303 	bic.w	r3, r3, #3
 800c726:	f043 0301 	orr.w	r3, r3, #1
 800c72a:	81a3      	strh	r3, [r4, #12]
 800c72c:	89a0      	ldrh	r0, [r4, #12]
 800c72e:	4305      	orrs	r5, r0
 800c730:	81a5      	strh	r5, [r4, #12]
 800c732:	e7cd      	b.n	800c6d0 <__smakebuf_r+0x18>
 800c734:	0800b4e5 	.word	0x0800b4e5

0800c738 <__ascii_mbtowc>:
 800c738:	b082      	sub	sp, #8
 800c73a:	b901      	cbnz	r1, 800c73e <__ascii_mbtowc+0x6>
 800c73c:	a901      	add	r1, sp, #4
 800c73e:	b142      	cbz	r2, 800c752 <__ascii_mbtowc+0x1a>
 800c740:	b14b      	cbz	r3, 800c756 <__ascii_mbtowc+0x1e>
 800c742:	7813      	ldrb	r3, [r2, #0]
 800c744:	600b      	str	r3, [r1, #0]
 800c746:	7812      	ldrb	r2, [r2, #0]
 800c748:	1e10      	subs	r0, r2, #0
 800c74a:	bf18      	it	ne
 800c74c:	2001      	movne	r0, #1
 800c74e:	b002      	add	sp, #8
 800c750:	4770      	bx	lr
 800c752:	4610      	mov	r0, r2
 800c754:	e7fb      	b.n	800c74e <__ascii_mbtowc+0x16>
 800c756:	f06f 0001 	mvn.w	r0, #1
 800c75a:	e7f8      	b.n	800c74e <__ascii_mbtowc+0x16>

0800c75c <__malloc_lock>:
 800c75c:	4801      	ldr	r0, [pc, #4]	; (800c764 <__malloc_lock+0x8>)
 800c75e:	f7fe bf98 	b.w	800b692 <__retarget_lock_acquire_recursive>
 800c762:	bf00      	nop
 800c764:	20000374 	.word	0x20000374

0800c768 <__malloc_unlock>:
 800c768:	4801      	ldr	r0, [pc, #4]	; (800c770 <__malloc_unlock+0x8>)
 800c76a:	f7fe bf93 	b.w	800b694 <__retarget_lock_release_recursive>
 800c76e:	bf00      	nop
 800c770:	20000374 	.word	0x20000374

0800c774 <_read_r>:
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	4604      	mov	r4, r0
 800c778:	4608      	mov	r0, r1
 800c77a:	4611      	mov	r1, r2
 800c77c:	2200      	movs	r2, #0
 800c77e:	4d05      	ldr	r5, [pc, #20]	; (800c794 <_read_r+0x20>)
 800c780:	602a      	str	r2, [r5, #0]
 800c782:	461a      	mov	r2, r3
 800c784:	f7f9 ff5b 	bl	800663e <_read>
 800c788:	1c43      	adds	r3, r0, #1
 800c78a:	d102      	bne.n	800c792 <_read_r+0x1e>
 800c78c:	682b      	ldr	r3, [r5, #0]
 800c78e:	b103      	cbz	r3, 800c792 <_read_r+0x1e>
 800c790:	6023      	str	r3, [r4, #0]
 800c792:	bd38      	pop	{r3, r4, r5, pc}
 800c794:	2000037c 	.word	0x2000037c

0800c798 <__ascii_wctomb>:
 800c798:	4603      	mov	r3, r0
 800c79a:	4608      	mov	r0, r1
 800c79c:	b141      	cbz	r1, 800c7b0 <__ascii_wctomb+0x18>
 800c79e:	2aff      	cmp	r2, #255	; 0xff
 800c7a0:	d904      	bls.n	800c7ac <__ascii_wctomb+0x14>
 800c7a2:	228a      	movs	r2, #138	; 0x8a
 800c7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a8:	601a      	str	r2, [r3, #0]
 800c7aa:	4770      	bx	lr
 800c7ac:	2001      	movs	r0, #1
 800c7ae:	700a      	strb	r2, [r1, #0]
 800c7b0:	4770      	bx	lr

0800c7b2 <abort>:
 800c7b2:	2006      	movs	r0, #6
 800c7b4:	b508      	push	{r3, lr}
 800c7b6:	f000 f84d 	bl	800c854 <raise>
 800c7ba:	2001      	movs	r0, #1
 800c7bc:	f7f9 ff35 	bl	800662a <_exit>

0800c7c0 <_fstat_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	4d06      	ldr	r5, [pc, #24]	; (800c7e0 <_fstat_r+0x20>)
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	4608      	mov	r0, r1
 800c7ca:	4611      	mov	r1, r2
 800c7cc:	602b      	str	r3, [r5, #0]
 800c7ce:	f7f9 ff7a 	bl	80066c6 <_fstat>
 800c7d2:	1c43      	adds	r3, r0, #1
 800c7d4:	d102      	bne.n	800c7dc <_fstat_r+0x1c>
 800c7d6:	682b      	ldr	r3, [r5, #0]
 800c7d8:	b103      	cbz	r3, 800c7dc <_fstat_r+0x1c>
 800c7da:	6023      	str	r3, [r4, #0]
 800c7dc:	bd38      	pop	{r3, r4, r5, pc}
 800c7de:	bf00      	nop
 800c7e0:	2000037c 	.word	0x2000037c

0800c7e4 <_isatty_r>:
 800c7e4:	b538      	push	{r3, r4, r5, lr}
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	4d05      	ldr	r5, [pc, #20]	; (800c800 <_isatty_r+0x1c>)
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	4608      	mov	r0, r1
 800c7ee:	602b      	str	r3, [r5, #0]
 800c7f0:	f7f9 ff78 	bl	80066e4 <_isatty>
 800c7f4:	1c43      	adds	r3, r0, #1
 800c7f6:	d102      	bne.n	800c7fe <_isatty_r+0x1a>
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	b103      	cbz	r3, 800c7fe <_isatty_r+0x1a>
 800c7fc:	6023      	str	r3, [r4, #0]
 800c7fe:	bd38      	pop	{r3, r4, r5, pc}
 800c800:	2000037c 	.word	0x2000037c

0800c804 <_raise_r>:
 800c804:	291f      	cmp	r1, #31
 800c806:	b538      	push	{r3, r4, r5, lr}
 800c808:	4604      	mov	r4, r0
 800c80a:	460d      	mov	r5, r1
 800c80c:	d904      	bls.n	800c818 <_raise_r+0x14>
 800c80e:	2316      	movs	r3, #22
 800c810:	6003      	str	r3, [r0, #0]
 800c812:	f04f 30ff 	mov.w	r0, #4294967295
 800c816:	bd38      	pop	{r3, r4, r5, pc}
 800c818:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c81a:	b112      	cbz	r2, 800c822 <_raise_r+0x1e>
 800c81c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c820:	b94b      	cbnz	r3, 800c836 <_raise_r+0x32>
 800c822:	4620      	mov	r0, r4
 800c824:	f000 f830 	bl	800c888 <_getpid_r>
 800c828:	462a      	mov	r2, r5
 800c82a:	4601      	mov	r1, r0
 800c82c:	4620      	mov	r0, r4
 800c82e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c832:	f000 b817 	b.w	800c864 <_kill_r>
 800c836:	2b01      	cmp	r3, #1
 800c838:	d00a      	beq.n	800c850 <_raise_r+0x4c>
 800c83a:	1c59      	adds	r1, r3, #1
 800c83c:	d103      	bne.n	800c846 <_raise_r+0x42>
 800c83e:	2316      	movs	r3, #22
 800c840:	6003      	str	r3, [r0, #0]
 800c842:	2001      	movs	r0, #1
 800c844:	e7e7      	b.n	800c816 <_raise_r+0x12>
 800c846:	2400      	movs	r4, #0
 800c848:	4628      	mov	r0, r5
 800c84a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c84e:	4798      	blx	r3
 800c850:	2000      	movs	r0, #0
 800c852:	e7e0      	b.n	800c816 <_raise_r+0x12>

0800c854 <raise>:
 800c854:	4b02      	ldr	r3, [pc, #8]	; (800c860 <raise+0xc>)
 800c856:	4601      	mov	r1, r0
 800c858:	6818      	ldr	r0, [r3, #0]
 800c85a:	f7ff bfd3 	b.w	800c804 <_raise_r>
 800c85e:	bf00      	nop
 800c860:	20000010 	.word	0x20000010

0800c864 <_kill_r>:
 800c864:	b538      	push	{r3, r4, r5, lr}
 800c866:	2300      	movs	r3, #0
 800c868:	4d06      	ldr	r5, [pc, #24]	; (800c884 <_kill_r+0x20>)
 800c86a:	4604      	mov	r4, r0
 800c86c:	4608      	mov	r0, r1
 800c86e:	4611      	mov	r1, r2
 800c870:	602b      	str	r3, [r5, #0]
 800c872:	f7f9 feca 	bl	800660a <_kill>
 800c876:	1c43      	adds	r3, r0, #1
 800c878:	d102      	bne.n	800c880 <_kill_r+0x1c>
 800c87a:	682b      	ldr	r3, [r5, #0]
 800c87c:	b103      	cbz	r3, 800c880 <_kill_r+0x1c>
 800c87e:	6023      	str	r3, [r4, #0]
 800c880:	bd38      	pop	{r3, r4, r5, pc}
 800c882:	bf00      	nop
 800c884:	2000037c 	.word	0x2000037c

0800c888 <_getpid_r>:
 800c888:	f7f9 beb8 	b.w	80065fc <_getpid>

0800c88c <_init>:
 800c88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88e:	bf00      	nop
 800c890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c892:	bc08      	pop	{r3}
 800c894:	469e      	mov	lr, r3
 800c896:	4770      	bx	lr

0800c898 <_fini>:
 800c898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89a:	bf00      	nop
 800c89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c89e:	bc08      	pop	{r3}
 800c8a0:	469e      	mov	lr, r3
 800c8a2:	4770      	bx	lr
