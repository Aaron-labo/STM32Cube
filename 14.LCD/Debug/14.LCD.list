
14.LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091d4  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008d0c  080093c0  080093c0  000193c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080120cc  080120cc  000301e0  2**0
                  CONTENTS
  4 .ARM          00000000  080120cc  080120cc  000301e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080120cc  080120cc  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080120cc  080120cc  000220cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080120d0  080120d0  000220d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080120d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  200001e0  080122b4  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  080122b4  0003027c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b668  00000000  00000000  00030209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203a  00000000  00000000  0003b871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0003d8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  0003e018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa8e  00000000  00000000  0003e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009e92  00000000  00000000  00059116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000929ab  00000000  00000000  00062fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5953  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c64  00000000  00000000  000f59a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001e0 	.word	0x200001e0
 8000204:	00000000 	.word	0x00000000
 8000208:	080093a4 	.word	0x080093a4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e4 	.word	0x200001e4
 8000224:	080093a4 	.word	0x080093a4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
 8000bb6:	615a      	str	r2, [r3, #20]
 8000bb8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000bba:	463b      	mov	r3, r7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
 8000bc8:	615a      	str	r2, [r3, #20]
 8000bca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000bce:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000bd2:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000bd4:	4b2e      	ldr	r3, [pc, #184]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000bd6:	4a2f      	ldr	r2, [pc, #188]	; (8000c94 <MX_FSMC_Init+0xf4>)
 8000bd8:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000bdc:	2206      	movs	r2, #6
 8000bde:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000be0:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000be6:	4b2a      	ldr	r3, [pc, #168]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000bee:	2210      	movs	r2, #16
 8000bf0:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000bf2:	4b27      	ldr	r3, [pc, #156]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000bf8:	4b25      	ldr	r3, [pc, #148]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  hsram4.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000bfe:	4b24      	ldr	r3, [pc, #144]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000c04:	4b22      	ldr	r3, [pc, #136]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000c12:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000c20:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000c26:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000c30:	230f      	movs	r3, #15
 8000c32:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 8000c34:	230f      	movs	r3, #15
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8000c38:	230f      	movs	r3, #15
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000c40:	2311      	movs	r3, #17
 8000c42:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000c44:	2300      	movs	r3, #0
 8000c46:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 8000c50:	2303      	movs	r3, #3
 8000c52:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8000c54:	230f      	movs	r3, #15
 8000c56:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000c5c:	2311      	movs	r3, #17
 8000c5e:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 8000c64:	463a      	mov	r2, r7
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4808      	ldr	r0, [pc, #32]	; (8000c90 <MX_FSMC_Init+0xf0>)
 8000c6e:	f005 fd57 	bl	8006720 <HAL_SRAM_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 8000c78:	f004 fd09 	bl	800568e <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_FSMC_Init+0xf8>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <MX_FSMC_Init+0xf8>)
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c86:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000c88:	bf00      	nop
 8000c8a:	3738      	adds	r7, #56	; 0x38
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000210 	.word	0x20000210
 8000c94:	a0000104 	.word	0xa0000104
 8000c98:	40010000 	.word	0x40010000

08000c9c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <HAL_FSMC_MspInit+0x94>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d136      	bne.n	8000d26 <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <HAL_FSMC_MspInit+0x94>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_FSMC_MspInit+0x98>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	; (8000d34 <HAL_FSMC_MspInit+0x98>)
 8000cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc8:	6153      	str	r3, [r2, #20]
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <HAL_FSMC_MspInit+0x98>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8000cd6:	f241 0301 	movw	r3, #4097	; 0x1001
 8000cda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4813      	ldr	r0, [pc, #76]	; (8000d38 <HAL_FSMC_MspInit+0x9c>)
 8000cec:	f004 ff84 	bl	8005bf8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000cf0:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000cf4:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	4619      	mov	r1, r3
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <HAL_FSMC_MspInit+0xa0>)
 8000d06:	f004 ff77 	bl	8005bf8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000d0a:	f24c 7333 	movw	r3, #50995	; 0xc733
 8000d0e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4808      	ldr	r0, [pc, #32]	; (8000d40 <HAL_FSMC_MspInit+0xa4>)
 8000d20:	f004 ff6a 	bl	8005bf8 <HAL_GPIO_Init>
 8000d24:	e000      	b.n	8000d28 <HAL_FSMC_MspInit+0x8c>
    return;
 8000d26:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200001fc 	.word	0x200001fc
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40012000 	.word	0x40012000
 8000d3c:	40011800 	.word	0x40011800
 8000d40:	40011400 	.word	0x40011400

08000d44 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000d4c:	f7ff ffa6 	bl	8000c9c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5e:	f107 0318 	add.w	r3, r7, #24
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6c:	4b29      	ldr	r3, [pc, #164]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	4a28      	ldr	r2, [pc, #160]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000d72:	f043 0308 	orr.w	r3, r3, #8
 8000d76:	6193      	str	r3, [r2, #24]
 8000d78:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000d7a:	699b      	ldr	r3, [r3, #24]
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d84:	4b23      	ldr	r3, [pc, #140]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a22      	ldr	r2, [pc, #136]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db4:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000dba:	f043 0320 	orr.w	r3, r3, #32
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0320 	and.w	r3, r3, #32
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_GPIO_Init+0xbc>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2101      	movs	r1, #1
 8000de8:	480b      	ldr	r0, [pc, #44]	; (8000e18 <MX_GPIO_Init+0xc0>)
 8000dea:	f005 f899 	bl	8005f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df2:	2301      	movs	r3, #1
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	4619      	mov	r1, r3
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_GPIO_Init+0xc0>)
 8000e06:	f004 fef7 	bl	8005bf8 <HAL_GPIO_Init>

}
 8000e0a:	bf00      	nop
 8000e0c:	3728      	adds	r7, #40	; 0x28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010c00 	.word	0x40010c00

08000e1c <delay_us>:

/**
 * @brief 微秒级延时，参考F103的库实现
 * @retval None
 */
void delay_us(uint32_t duration) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  //见stm32f1xx_hal_rcc.c -- static void RCC_Delay(uint32_t mdelay)
  __IO uint32_t Delay = duration * (SystemCoreClock / 8U / 1000000U);
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <delay_us+0x34>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <delay_us+0x38>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	0d5b      	lsrs	r3, r3, #21
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	fb02 f303 	mul.w	r3, r2, r3
 8000e36:	60fb      	str	r3, [r7, #12]
  do {
	__NOP();
 8000e38:	bf00      	nop
  } while (Delay--);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	1e5a      	subs	r2, r3, #1
 8000e3e:	60fa      	str	r2, [r7, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f9      	bne.n	8000e38 <delay_us+0x1c>
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	20000004 	.word	0x20000004
 8000e54:	431bde83 	.word	0x431bde83

08000e58 <LCD_WR_REG>:

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(uint16_t regval)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=regval;//写入要写的寄存器序号
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <LCD_WR_REG+0x1c>)
 8000e64:	88fb      	ldrh	r3, [r7, #6]
 8000e66:	8013      	strh	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	6c0007fe 	.word	0x6c0007fe

08000e78 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(uint16_t data)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <LCD_WR_DATA+0x1c>)
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	8053      	strh	r3, [r2, #2]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	6c0007fe 	.word	0x6c0007fe

08000e98 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
	uint16_t ram;			//防止被优化
	ram=LCD->LCD_RAM;
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <LCD_RD_DATA+0x18>)
 8000ea0:	885b      	ldrh	r3, [r3, #2]
 8000ea2:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000ea4:	88fb      	ldrh	r3, [r7, #6]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	6c0007fe 	.word	0x6c0007fe

08000eb4 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	80fb      	strh	r3, [r7, #6]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <LCD_WriteReg+0x28>)
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//写入数据
 8000eca:	4a04      	ldr	r2, [pc, #16]	; (8000edc <LCD_WriteReg+0x28>)
 8000ecc:	88bb      	ldrh	r3, [r7, #4]
 8000ece:	8053      	strh	r3, [r2, #2]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	6c0007fe 	.word	0x6c0007fe

08000ee0 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器地址
//返回值:读到的数据
uint16_t LCD_ReadReg(uint16_t LCD_Reg)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);		//写入要读的寄存器序号
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ffb3 	bl	8000e58 <LCD_WR_REG>
	delay_us(5);
 8000ef2:	2005      	movs	r0, #5
 8000ef4:	f7ff ff92 	bl	8000e1c <delay_us>
	return LCD_RD_DATA();		//返回读到的值
 8000ef8:	f7ff ffce 	bl	8000e98 <LCD_RD_DATA>
 8000efc:	4603      	mov	r3, r0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
 	LCD->LCD_REG=lcddev.wramcmd;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <LCD_WriteRAM_Prepare+0x14>)
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <LCD_WriteRAM_Prepare+0x18>)
 8000f10:	8912      	ldrh	r2, [r2, #8]
 8000f12:	801a      	strh	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	6c0007fe 	.word	0x6c0007fe
 8000f20:	20000258 	.word	0x20000258

08000f24 <LCD_SetCursor>:
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	460a      	mov	r2, r1
 8000f2e:	80fb      	strh	r3, [r7, #6]
 8000f30:	4613      	mov	r3, r2
 8000f32:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8000f34:	4b92      	ldr	r3, [pc, #584]	; (8001180 <LCD_SetCursor+0x25c>)
 8000f36:	889b      	ldrh	r3, [r3, #4]
 8000f38:	f249 3241 	movw	r2, #37697	; 0x9341
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d005      	beq.n	8000f4c <LCD_SetCursor+0x28>
 8000f40:	4b8f      	ldr	r3, [pc, #572]	; (8001180 <LCD_SetCursor+0x25c>)
 8000f42:	889b      	ldrh	r3, [r3, #4]
 8000f44:	f245 3210 	movw	r2, #21264	; 0x5310
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d122      	bne.n	8000f92 <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8000f4c:	4b8c      	ldr	r3, [pc, #560]	; (8001180 <LCD_SetCursor+0x25c>)
 8000f4e:	895b      	ldrh	r3, [r3, #10]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff81 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8000f56:	88fb      	ldrh	r3, [r7, #6]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff8b 	bl	8000e78 <LCD_WR_DATA>
 8000f62:	88fb      	ldrh	r3, [r7, #6]
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff85 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8000f6e:	4b84      	ldr	r3, [pc, #528]	; (8001180 <LCD_SetCursor+0x25c>)
 8000f70:	899b      	ldrh	r3, [r3, #12]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff70 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff7a 	bl	8000e78 <LCD_WR_DATA>
 8000f84:	88bb      	ldrh	r3, [r7, #4]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff74 	bl	8000e78 <LCD_WR_DATA>
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8000f90:	e0f1      	b.n	8001176 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X6804)
 8000f92:	4b7b      	ldr	r3, [pc, #492]	; (8001180 <LCD_SetCursor+0x25c>)
 8000f94:	889b      	ldrh	r3, [r3, #4]
 8000f96:	f646 0204 	movw	r2, #26628	; 0x6804
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d12d      	bne.n	8000ffa <LCD_SetCursor+0xd6>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏时处理
 8000f9e:	4b78      	ldr	r3, [pc, #480]	; (8001180 <LCD_SetCursor+0x25c>)
 8000fa0:	799b      	ldrb	r3, [r3, #6]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d106      	bne.n	8000fb4 <LCD_SetCursor+0x90>
 8000fa6:	4b76      	ldr	r3, [pc, #472]	; (8001180 <LCD_SetCursor+0x25c>)
 8000fa8:	881a      	ldrh	r2, [r3, #0]
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8000fb4:	4b72      	ldr	r3, [pc, #456]	; (8001180 <LCD_SetCursor+0x25c>)
 8000fb6:	895b      	ldrh	r3, [r3, #10]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff4d 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff57 	bl	8000e78 <LCD_WR_DATA>
 8000fca:	88fb      	ldrh	r3, [r7, #6]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff51 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8000fd6:	4b6a      	ldr	r3, [pc, #424]	; (8001180 <LCD_SetCursor+0x25c>)
 8000fd8:	899b      	ldrh	r3, [r3, #12]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff3c 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8000fe0:	88bb      	ldrh	r3, [r7, #4]
 8000fe2:	0a1b      	lsrs	r3, r3, #8
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff46 	bl	8000e78 <LCD_WR_DATA>
 8000fec:	88bb      	ldrh	r3, [r7, #4]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff ff40 	bl	8000e78 <LCD_WR_DATA>
}
 8000ff8:	e0bd      	b.n	8001176 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X1963)
 8000ffa:	4b61      	ldr	r3, [pc, #388]	; (8001180 <LCD_SetCursor+0x25c>)
 8000ffc:	889b      	ldrh	r3, [r3, #4]
 8000ffe:	f641 1263 	movw	r2, #6499	; 0x1963
 8001002:	4293      	cmp	r3, r2
 8001004:	d167      	bne.n	80010d6 <LCD_SetCursor+0x1b2>
		if(lcddev.dir==0)//x坐标需要变换
 8001006:	4b5e      	ldr	r3, [pc, #376]	; (8001180 <LCD_SetCursor+0x25c>)
 8001008:	799b      	ldrb	r3, [r3, #6]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d11e      	bne.n	800104c <LCD_SetCursor+0x128>
			Xpos=lcddev.width-1-Xpos;
 800100e:	4b5c      	ldr	r3, [pc, #368]	; (8001180 <LCD_SetCursor+0x25c>)
 8001010:	881a      	ldrh	r2, [r3, #0]
 8001012:	88fb      	ldrh	r3, [r7, #6]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	b29b      	uxth	r3, r3
 8001018:	3b01      	subs	r3, #1
 800101a:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 800101c:	4b58      	ldr	r3, [pc, #352]	; (8001180 <LCD_SetCursor+0x25c>)
 800101e:	895b      	ldrh	r3, [r3, #10]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff19 	bl	8000e58 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff ff26 	bl	8000e78 <LCD_WR_DATA>
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff ff23 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	0a1b      	lsrs	r3, r3, #8
 8001036:	b29b      	uxth	r3, r3
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff1d 	bl	8000e78 <LCD_WR_DATA>
 800103e:	88fb      	ldrh	r3, [r7, #6]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	b29b      	uxth	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff17 	bl	8000e78 <LCD_WR_DATA>
 800104a:	e021      	b.n	8001090 <LCD_SetCursor+0x16c>
			LCD_WR_REG(lcddev.setxcmd);
 800104c:	4b4c      	ldr	r3, [pc, #304]	; (8001180 <LCD_SetCursor+0x25c>)
 800104e:	895b      	ldrh	r3, [r3, #10]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff01 	bl	8000e58 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	b29b      	uxth	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff0b 	bl	8000e78 <LCD_WR_DATA>
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	b29b      	uxth	r3, r3
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff05 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 800106e:	4b44      	ldr	r3, [pc, #272]	; (8001180 <LCD_SetCursor+0x25c>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	3b01      	subs	r3, #1
 8001074:	121b      	asrs	r3, r3, #8
 8001076:	b29b      	uxth	r3, r3
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fefd 	bl	8000e78 <LCD_WR_DATA>
 800107e:	4b40      	ldr	r3, [pc, #256]	; (8001180 <LCD_SetCursor+0x25c>)
 8001080:	881b      	ldrh	r3, [r3, #0]
 8001082:	3b01      	subs	r3, #1
 8001084:	b29b      	uxth	r3, r3
 8001086:	b2db      	uxtb	r3, r3
 8001088:	b29b      	uxth	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fef4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001090:	4b3b      	ldr	r3, [pc, #236]	; (8001180 <LCD_SetCursor+0x25c>)
 8001092:	899b      	ldrh	r3, [r3, #12]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fedf 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 800109a:	88bb      	ldrh	r3, [r7, #4]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fee9 	bl	8000e78 <LCD_WR_DATA>
 80010a6:	88bb      	ldrh	r3, [r7, #4]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fee3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80010b2:	4b33      	ldr	r3, [pc, #204]	; (8001180 <LCD_SetCursor+0x25c>)
 80010b4:	885b      	ldrh	r3, [r3, #2]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	121b      	asrs	r3, r3, #8
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fedb 	bl	8000e78 <LCD_WR_DATA>
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <LCD_SetCursor+0x25c>)
 80010c4:	885b      	ldrh	r3, [r3, #2]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fed2 	bl	8000e78 <LCD_WR_DATA>
}
 80010d4:	e04f      	b.n	8001176 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X5510)
 80010d6:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <LCD_SetCursor+0x25c>)
 80010d8:	889b      	ldrh	r3, [r3, #4]
 80010da:	f245 5210 	movw	r2, #21776	; 0x5510
 80010de:	4293      	cmp	r3, r2
 80010e0:	d130      	bne.n	8001144 <LCD_SetCursor+0x220>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 80010e2:	4b27      	ldr	r3, [pc, #156]	; (8001180 <LCD_SetCursor+0x25c>)
 80010e4:	895b      	ldrh	r3, [r3, #10]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff feb6 	bl	8000e58 <LCD_WR_REG>
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fec0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <LCD_SetCursor+0x25c>)
 80010fa:	895b      	ldrh	r3, [r3, #10]
 80010fc:	3301      	adds	r3, #1
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fea9 	bl	8000e58 <LCD_WR_REG>
 8001106:	88fb      	ldrh	r3, [r7, #6]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	b29b      	uxth	r3, r3
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff feb3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <LCD_SetCursor+0x25c>)
 8001114:	899b      	ldrh	r3, [r3, #12]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fe9e 	bl	8000e58 <LCD_WR_REG>
 800111c:	88bb      	ldrh	r3, [r7, #4]
 800111e:	0a1b      	lsrs	r3, r3, #8
 8001120:	b29b      	uxth	r3, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fea8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <LCD_SetCursor+0x25c>)
 800112a:	899b      	ldrh	r3, [r3, #12]
 800112c:	3301      	adds	r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fe91 	bl	8000e58 <LCD_WR_REG>
 8001136:	88bb      	ldrh	r3, [r7, #4]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	b29b      	uxth	r3, r3
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fe9b 	bl	8000e78 <LCD_WR_DATA>
}
 8001142:	e018      	b.n	8001176 <LCD_SetCursor+0x252>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
 8001144:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <LCD_SetCursor+0x25c>)
 8001146:	799b      	ldrb	r3, [r3, #6]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d106      	bne.n	800115a <LCD_SetCursor+0x236>
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <LCD_SetCursor+0x25c>)
 800114e:	881a      	ldrh	r2, [r3, #0]
 8001150:	88fb      	ldrh	r3, [r7, #6]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	b29b      	uxth	r3, r3
 8001156:	3b01      	subs	r3, #1
 8001158:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <LCD_SetCursor+0x25c>)
 800115c:	895b      	ldrh	r3, [r3, #10]
 800115e:	88fa      	ldrh	r2, [r7, #6]
 8001160:	4611      	mov	r1, r2
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fea6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <LCD_SetCursor+0x25c>)
 800116a:	899b      	ldrh	r3, [r3, #12]
 800116c:	88ba      	ldrh	r2, [r7, #4]
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff fe9f 	bl	8000eb4 <LCD_WriteReg>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000258 	.word	0x20000258

08001184 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 800118e:	2300      	movs	r3, #0
 8001190:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 8001192:	2300      	movs	r3, #0
 8001194:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X6804&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8001196:	4b78      	ldr	r3, [pc, #480]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001198:	799b      	ldrb	r3, [r3, #6]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d10b      	bne.n	80011b6 <LCD_Scan_Dir+0x32>
 800119e:	4b76      	ldr	r3, [pc, #472]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 80011a0:	889b      	ldrh	r3, [r3, #4]
 80011a2:	f646 0204 	movw	r2, #26628	; 0x6804
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d005      	beq.n	80011b6 <LCD_Scan_Dir+0x32>
 80011aa:	4b73      	ldr	r3, [pc, #460]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 80011ac:	889b      	ldrh	r3, [r3, #4]
 80011ae:	f641 1263 	movw	r2, #6499	; 0x1963
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d109      	bne.n	80011ca <LCD_Scan_Dir+0x46>
 80011b6:	4b70      	ldr	r3, [pc, #448]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 80011b8:	799b      	ldrb	r3, [r3, #6]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d134      	bne.n	8001228 <LCD_Scan_Dir+0xa4>
 80011be:	4b6e      	ldr	r3, [pc, #440]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 80011c0:	889b      	ldrh	r3, [r3, #4]
 80011c2:	f641 1263 	movw	r2, #6499	; 0x1963
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d12e      	bne.n	8001228 <LCD_Scan_Dir+0xa4>
	{
		switch(dir)//方向转换
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b07      	cmp	r3, #7
 80011ce:	d82c      	bhi.n	800122a <LCD_Scan_Dir+0xa6>
 80011d0:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <LCD_Scan_Dir+0x54>)
 80011d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d6:	bf00      	nop
 80011d8:	080011f9 	.word	0x080011f9
 80011dc:	080011ff 	.word	0x080011ff
 80011e0:	08001205 	.word	0x08001205
 80011e4:	0800120b 	.word	0x0800120b
 80011e8:	08001211 	.word	0x08001211
 80011ec:	08001217 	.word	0x08001217
 80011f0:	0800121d 	.word	0x0800121d
 80011f4:	08001223 	.word	0x08001223
		{
			case 0:dir=6;break;
 80011f8:	2306      	movs	r3, #6
 80011fa:	71fb      	strb	r3, [r7, #7]
 80011fc:	e015      	b.n	800122a <LCD_Scan_Dir+0xa6>
			case 1:dir=7;break;
 80011fe:	2307      	movs	r3, #7
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	e012      	b.n	800122a <LCD_Scan_Dir+0xa6>
			case 2:dir=4;break;
 8001204:	2304      	movs	r3, #4
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	e00f      	b.n	800122a <LCD_Scan_Dir+0xa6>
			case 3:dir=5;break;
 800120a:	2305      	movs	r3, #5
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	e00c      	b.n	800122a <LCD_Scan_Dir+0xa6>
			case 4:dir=1;break;
 8001210:	2301      	movs	r3, #1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	e009      	b.n	800122a <LCD_Scan_Dir+0xa6>
			case 5:dir=0;break;
 8001216:	2300      	movs	r3, #0
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	e006      	b.n	800122a <LCD_Scan_Dir+0xa6>
			case 6:dir=3;break;
 800121c:	2303      	movs	r3, #3
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	e003      	b.n	800122a <LCD_Scan_Dir+0xa6>
			case 7:dir=2;break;
 8001222:	2302      	movs	r3, #2
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	e000      	b.n	800122a <LCD_Scan_Dir+0xa6>
		}
	}
 8001228:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/6804/5310/5510/1963,特殊处理
 800122a:	4b53      	ldr	r3, [pc, #332]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 800122c:	889b      	ldrh	r3, [r3, #4]
 800122e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001232:	4293      	cmp	r3, r2
 8001234:	d018      	beq.n	8001268 <LCD_Scan_Dir+0xe4>
 8001236:	4b50      	ldr	r3, [pc, #320]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001238:	889b      	ldrh	r3, [r3, #4]
 800123a:	f646 0204 	movw	r2, #26628	; 0x6804
 800123e:	4293      	cmp	r3, r2
 8001240:	d012      	beq.n	8001268 <LCD_Scan_Dir+0xe4>
 8001242:	4b4d      	ldr	r3, [pc, #308]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001244:	889b      	ldrh	r3, [r3, #4]
 8001246:	f245 3210 	movw	r2, #21264	; 0x5310
 800124a:	4293      	cmp	r3, r2
 800124c:	d00c      	beq.n	8001268 <LCD_Scan_Dir+0xe4>
 800124e:	4b4a      	ldr	r3, [pc, #296]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001250:	889b      	ldrh	r3, [r3, #4]
 8001252:	f245 5210 	movw	r2, #21776	; 0x5510
 8001256:	4293      	cmp	r3, r2
 8001258:	d006      	beq.n	8001268 <LCD_Scan_Dir+0xe4>
 800125a:	4b47      	ldr	r3, [pc, #284]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 800125c:	889b      	ldrh	r3, [r3, #4]
 800125e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001262:	4293      	cmp	r3, r2
 8001264:	f040 813c 	bne.w	80014e0 <LCD_Scan_Dir+0x35c>
	{
		switch(dir)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	2b07      	cmp	r3, #7
 800126c:	d835      	bhi.n	80012da <LCD_Scan_Dir+0x156>
 800126e:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <LCD_Scan_Dir+0xf0>)
 8001270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001274:	080012db 	.word	0x080012db
 8001278:	08001295 	.word	0x08001295
 800127c:	0800129f 	.word	0x0800129f
 8001280:	080012a9 	.word	0x080012a9
 8001284:	080012b3 	.word	0x080012b3
 8001288:	080012bd 	.word	0x080012bd
 800128c:	080012c7 	.word	0x080012c7
 8001290:	080012d1 	.word	0x080012d1
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800129a:	81fb      	strh	r3, [r7, #14]
				break;
 800129c:	e01d      	b.n	80012da <LCD_Scan_Dir+0x156>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 800129e:	89fb      	ldrh	r3, [r7, #14]
 80012a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012a4:	81fb      	strh	r3, [r7, #14]
				break;
 80012a6:	e018      	b.n	80012da <LCD_Scan_Dir+0x156>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 80012a8:	89fb      	ldrh	r3, [r7, #14]
 80012aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80012ae:	81fb      	strh	r3, [r7, #14]
				break;
 80012b0:	e013      	b.n	80012da <LCD_Scan_Dir+0x156>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 80012b2:	89fb      	ldrh	r3, [r7, #14]
 80012b4:	f043 0320 	orr.w	r3, r3, #32
 80012b8:	81fb      	strh	r3, [r7, #14]
				break;
 80012ba:	e00e      	b.n	80012da <LCD_Scan_Dir+0x156>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 80012bc:	89fb      	ldrh	r3, [r7, #14]
 80012be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012c2:	81fb      	strh	r3, [r7, #14]
				break;
 80012c4:	e009      	b.n	80012da <LCD_Scan_Dir+0x156>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80012cc:	81fb      	strh	r3, [r7, #14]
				break;
 80012ce:	e004      	b.n	80012da <LCD_Scan_Dir+0x156>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 80012d0:	89fb      	ldrh	r3, [r7, #14]
 80012d2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80012d6:	81fb      	strh	r3, [r7, #14]
				break;
 80012d8:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 80012da:	4b27      	ldr	r3, [pc, #156]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 80012dc:	889b      	ldrh	r3, [r3, #4]
 80012de:	f245 5210 	movw	r2, #21776	; 0x5510
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d103      	bne.n	80012ee <LCD_Scan_Dir+0x16a>
 80012e6:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80012ea:	81bb      	strh	r3, [r7, #12]
 80012ec:	e001      	b.n	80012f2 <LCD_Scan_Dir+0x16e>
		else dirreg=0X36;
 80012ee:	2336      	movs	r3, #54	; 0x36
 80012f0:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 80012f2:	4b21      	ldr	r3, [pc, #132]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	f245 3210 	movw	r2, #21264	; 0x5310
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00f      	beq.n	800131e <LCD_Scan_Dir+0x19a>
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001300:	889b      	ldrh	r3, [r3, #4]
 8001302:	f245 5210 	movw	r2, #21776	; 0x5510
 8001306:	4293      	cmp	r3, r2
 8001308:	d009      	beq.n	800131e <LCD_Scan_Dir+0x19a>
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 800130c:	889b      	ldrh	r3, [r3, #4]
 800130e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001312:	4293      	cmp	r3, r2
 8001314:	d003      	beq.n	800131e <LCD_Scan_Dir+0x19a>
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	81fb      	strh	r3, [r7, #14]
		if(lcddev.id==0X6804)regval|=0x02;//6804的BIT6和9341的反了
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001320:	889b      	ldrh	r3, [r3, #4]
 8001322:	f646 0204 	movw	r2, #26628	; 0x6804
 8001326:	4293      	cmp	r3, r2
 8001328:	d103      	bne.n	8001332 <LCD_Scan_Dir+0x1ae>
 800132a:	89fb      	ldrh	r3, [r7, #14]
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8001332:	89fa      	ldrh	r2, [r7, #14]
 8001334:	89bb      	ldrh	r3, [r7, #12]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fdbb 	bl	8000eb4 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001340:	889b      	ldrh	r3, [r3, #4]
 8001342:	f641 1263 	movw	r2, #6499	; 0x1963
 8001346:	4293      	cmp	r3, r2
 8001348:	d028      	beq.n	800139c <LCD_Scan_Dir+0x218>
		{
			if(regval&0X20)
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	f003 0320 	and.w	r3, r3, #32
 8001350:	2b00      	cmp	r3, #0
 8001352:	d013      	beq.n	800137c <LCD_Scan_Dir+0x1f8>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001356:	881a      	ldrh	r2, [r3, #0]
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 800135a:	885b      	ldrh	r3, [r3, #2]
 800135c:	429a      	cmp	r2, r3
 800135e:	d21d      	bcs.n	800139c <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001368:	885a      	ldrh	r2, [r3, #2]
 800136a:	4b03      	ldr	r3, [pc, #12]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 800136c:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 800136e:	4a02      	ldr	r2, [pc, #8]	; (8001378 <LCD_Scan_Dir+0x1f4>)
 8001370:	897b      	ldrh	r3, [r7, #10]
 8001372:	8053      	strh	r3, [r2, #2]
 8001374:	e012      	b.n	800139c <LCD_Scan_Dir+0x218>
 8001376:	bf00      	nop
 8001378:	20000258 	.word	0x20000258
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 800137c:	4b7d      	ldr	r3, [pc, #500]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800137e:	881a      	ldrh	r2, [r3, #0]
 8001380:	4b7c      	ldr	r3, [pc, #496]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001382:	885b      	ldrh	r3, [r3, #2]
 8001384:	429a      	cmp	r2, r3
 8001386:	d909      	bls.n	800139c <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8001388:	4b7a      	ldr	r3, [pc, #488]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 800138e:	4b79      	ldr	r3, [pc, #484]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001390:	885a      	ldrh	r2, [r3, #2]
 8001392:	4b78      	ldr	r3, [pc, #480]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001394:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8001396:	4a77      	ldr	r2, [pc, #476]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001398:	897b      	ldrh	r3, [r7, #10]
 800139a:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 800139c:	4b75      	ldr	r3, [pc, #468]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800139e:	889b      	ldrh	r3, [r3, #4]
 80013a0:	f245 5210 	movw	r2, #21776	; 0x5510
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d162      	bne.n	800146e <LCD_Scan_Dir+0x2ea>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 80013a8:	4b72      	ldr	r3, [pc, #456]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80013aa:	895b      	ldrh	r3, [r3, #10]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fd53 	bl	8000e58 <LCD_WR_REG>
 80013b2:	2000      	movs	r0, #0
 80013b4:	f7ff fd60 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 80013b8:	4b6e      	ldr	r3, [pc, #440]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80013ba:	895b      	ldrh	r3, [r3, #10]
 80013bc:	3301      	adds	r3, #1
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fd49 	bl	8000e58 <LCD_WR_REG>
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff fd56 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 80013cc:	4b69      	ldr	r3, [pc, #420]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80013ce:	895b      	ldrh	r3, [r3, #10]
 80013d0:	3302      	adds	r3, #2
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fd3f 	bl	8000e58 <LCD_WR_REG>
 80013da:	4b66      	ldr	r3, [pc, #408]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	3b01      	subs	r3, #1
 80013e0:	121b      	asrs	r3, r3, #8
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fd47 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 80013ea:	4b62      	ldr	r3, [pc, #392]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80013ec:	895b      	ldrh	r3, [r3, #10]
 80013ee:	3303      	adds	r3, #3
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fd30 	bl	8000e58 <LCD_WR_REG>
 80013f8:	4b5e      	ldr	r3, [pc, #376]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b29b      	uxth	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	b29b      	uxth	r3, r3
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fd37 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 800140a:	4b5a      	ldr	r3, [pc, #360]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800140c:	899b      	ldrh	r3, [r3, #12]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fd22 	bl	8000e58 <LCD_WR_REG>
 8001414:	2000      	movs	r0, #0
 8001416:	f7ff fd2f 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 800141a:	4b56      	ldr	r3, [pc, #344]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800141c:	899b      	ldrh	r3, [r3, #12]
 800141e:	3301      	adds	r3, #1
 8001420:	b29b      	uxth	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fd18 	bl	8000e58 <LCD_WR_REG>
 8001428:	2000      	movs	r0, #0
 800142a:	f7ff fd25 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 800142e:	4b51      	ldr	r3, [pc, #324]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001430:	899b      	ldrh	r3, [r3, #12]
 8001432:	3302      	adds	r3, #2
 8001434:	b29b      	uxth	r3, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff fd0e 	bl	8000e58 <LCD_WR_REG>
 800143c:	4b4d      	ldr	r3, [pc, #308]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800143e:	885b      	ldrh	r3, [r3, #2]
 8001440:	3b01      	subs	r3, #1
 8001442:	121b      	asrs	r3, r3, #8
 8001444:	b29b      	uxth	r3, r3
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff fd16 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 800144c:	4b49      	ldr	r3, [pc, #292]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800144e:	899b      	ldrh	r3, [r3, #12]
 8001450:	3303      	adds	r3, #3
 8001452:	b29b      	uxth	r3, r3
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fcff 	bl	8000e58 <LCD_WR_REG>
 800145a:	4b46      	ldr	r3, [pc, #280]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 800145c:	885b      	ldrh	r3, [r3, #2]
 800145e:	3b01      	subs	r3, #1
 8001460:	b29b      	uxth	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	b29b      	uxth	r3, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fd06 	bl	8000e78 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 800146c:	e07e      	b.n	800156c <LCD_Scan_Dir+0x3e8>
		}else
		{
			LCD_WR_REG(lcddev.setxcmd);
 800146e:	4b41      	ldr	r3, [pc, #260]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001470:	895b      	ldrh	r3, [r3, #10]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fcf0 	bl	8000e58 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff fcfd 	bl	8000e78 <LCD_WR_DATA>
 800147e:	2000      	movs	r0, #0
 8001480:	f7ff fcfa 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001484:	4b3b      	ldr	r3, [pc, #236]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	3b01      	subs	r3, #1
 800148a:	121b      	asrs	r3, r3, #8
 800148c:	b29b      	uxth	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fcf2 	bl	8000e78 <LCD_WR_DATA>
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	b29b      	uxth	r3, r3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	b29b      	uxth	r3, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fce9 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80014a8:	899b      	ldrh	r3, [r3, #12]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fcd4 	bl	8000e58 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80014b0:	2000      	movs	r0, #0
 80014b2:	f7ff fce1 	bl	8000e78 <LCD_WR_DATA>
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff fcde 	bl	8000e78 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80014be:	885b      	ldrh	r3, [r3, #2]
 80014c0:	3b01      	subs	r3, #1
 80014c2:	121b      	asrs	r3, r3, #8
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fcd6 	bl	8000e78 <LCD_WR_DATA>
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <LCD_Scan_Dir+0x3f0>)
 80014ce:	885b      	ldrh	r3, [r3, #2]
 80014d0:	3b01      	subs	r3, #1
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fccd 	bl	8000e78 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 80014de:	e045      	b.n	800156c <LCD_Scan_Dir+0x3e8>
		}
  	}else
	{
		switch(dir)
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b07      	cmp	r3, #7
 80014e4:	d835      	bhi.n	8001552 <LCD_Scan_Dir+0x3ce>
 80014e6:	a201      	add	r2, pc, #4	; (adr r2, 80014ec <LCD_Scan_Dir+0x368>)
 80014e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ec:	0800150d 	.word	0x0800150d
 80014f0:	08001517 	.word	0x08001517
 80014f4:	08001521 	.word	0x08001521
 80014f8:	08001553 	.word	0x08001553
 80014fc:	0800152b 	.word	0x0800152b
 8001500:	08001535 	.word	0x08001535
 8001504:	0800153f 	.word	0x0800153f
 8001508:	08001549 	.word	0x08001549
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(1<<5)|(1<<4)|(0<<3);
 800150c:	89fb      	ldrh	r3, [r7, #14]
 800150e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001512:	81fb      	strh	r3, [r7, #14]
				break;
 8001514:	e01d      	b.n	8001552 <LCD_Scan_Dir+0x3ce>
			case L2R_D2U://从左到右,从下到上
				regval|=(0<<5)|(1<<4)|(0<<3);
 8001516:	89fb      	ldrh	r3, [r7, #14]
 8001518:	f043 0310 	orr.w	r3, r3, #16
 800151c:	81fb      	strh	r3, [r7, #14]
				break;
 800151e:	e018      	b.n	8001552 <LCD_Scan_Dir+0x3ce>
			case R2L_U2D://从右到左,从上到下
				regval|=(1<<5)|(0<<4)|(0<<3);
 8001520:	89fb      	ldrh	r3, [r7, #14]
 8001522:	f043 0320 	orr.w	r3, r3, #32
 8001526:	81fb      	strh	r3, [r7, #14]
				break;
 8001528:	e013      	b.n	8001552 <LCD_Scan_Dir+0x3ce>
			case R2L_D2U://从右到左,从下到上
				regval|=(0<<5)|(0<<4)|(0<<3);
				break;
			case U2D_L2R://从上到下,从左到右
				regval|=(1<<5)|(1<<4)|(1<<3);
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001530:	81fb      	strh	r3, [r7, #14]
				break;
 8001532:	e00e      	b.n	8001552 <LCD_Scan_Dir+0x3ce>
			case U2D_R2L://从上到下,从右到左
				regval|=(1<<5)|(0<<4)|(1<<3);
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800153a:	81fb      	strh	r3, [r7, #14]
				break;
 800153c:	e009      	b.n	8001552 <LCD_Scan_Dir+0x3ce>
			case D2U_L2R://从下到上,从左到右
				regval|=(0<<5)|(1<<4)|(1<<3);
 800153e:	89fb      	ldrh	r3, [r7, #14]
 8001540:	f043 0318 	orr.w	r3, r3, #24
 8001544:	81fb      	strh	r3, [r7, #14]
				break;
 8001546:	e004      	b.n	8001552 <LCD_Scan_Dir+0x3ce>
			case D2U_R2L://从下到上,从右到左
				regval|=(0<<5)|(0<<4)|(1<<3);
 8001548:	89fb      	ldrh	r3, [r7, #14]
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	81fb      	strh	r3, [r7, #14]
				break;
 8001550:	bf00      	nop
		}
		dirreg=0X03;
 8001552:	2303      	movs	r3, #3
 8001554:	81bb      	strh	r3, [r7, #12]
		regval|=1<<12;
 8001556:	89fb      	ldrh	r3, [r7, #14]
 8001558:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800155c:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 800155e:	89fa      	ldrh	r2, [r7, #14]
 8001560:	89bb      	ldrh	r3, [r7, #12]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fca5 	bl	8000eb4 <LCD_WriteReg>
	}
}
 800156a:	bf00      	nop
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000258 	.word	0x20000258

08001578 <LCD_Fast_DrawPoint>:
}
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
 8001582:	460b      	mov	r3, r1
 8001584:	80bb      	strh	r3, [r7, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	807b      	strh	r3, [r7, #2]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 800158a:	4b85      	ldr	r3, [pc, #532]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800158c:	889b      	ldrh	r3, [r3, #4]
 800158e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001592:	4293      	cmp	r3, r2
 8001594:	d005      	beq.n	80015a2 <LCD_Fast_DrawPoint+0x2a>
 8001596:	4b82      	ldr	r3, [pc, #520]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001598:	889b      	ldrh	r3, [r3, #4]
 800159a:	f245 3210 	movw	r2, #21264	; 0x5310
 800159e:	4293      	cmp	r3, r2
 80015a0:	d122      	bne.n	80015e8 <LCD_Fast_DrawPoint+0x70>
	{
		LCD_WR_REG(lcddev.setxcmd);
 80015a2:	4b7f      	ldr	r3, [pc, #508]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 80015a4:	895b      	ldrh	r3, [r3, #10]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fc56 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fc60 	bl	8000e78 <LCD_WR_DATA>
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	b29b      	uxth	r3, r3
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fc5a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80015c4:	4b76      	ldr	r3, [pc, #472]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 80015c6:	899b      	ldrh	r3, [r3, #12]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fc45 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80015ce:	88bb      	ldrh	r3, [r7, #4]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fc4f 	bl	8000e78 <LCD_WR_DATA>
 80015da:	88bb      	ldrh	r3, [r7, #4]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	b29b      	uxth	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fc49 	bl	8000e78 <LCD_WR_DATA>
 80015e6:	e0cf      	b.n	8001788 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X5510)
 80015e8:	4b6d      	ldr	r3, [pc, #436]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 80015ea:	889b      	ldrh	r3, [r3, #4]
 80015ec:	f245 5210 	movw	r2, #21776	; 0x5510
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d130      	bne.n	8001656 <LCD_Fast_DrawPoint+0xde>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 80015f4:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 80015f6:	895b      	ldrh	r3, [r3, #10]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fc2d 	bl	8000e58 <LCD_WR_REG>
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	b29b      	uxth	r3, r3
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fc37 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 800160a:	4b65      	ldr	r3, [pc, #404]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800160c:	895b      	ldrh	r3, [r3, #10]
 800160e:	3301      	adds	r3, #1
 8001610:	b29b      	uxth	r3, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fc20 	bl	8000e58 <LCD_WR_REG>
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fc2a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8001624:	4b5e      	ldr	r3, [pc, #376]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001626:	899b      	ldrh	r3, [r3, #12]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fc15 	bl	8000e58 <LCD_WR_REG>
 800162e:	88bb      	ldrh	r3, [r7, #4]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	b29b      	uxth	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fc1f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 800163a:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800163c:	899b      	ldrh	r3, [r3, #12]
 800163e:	3301      	adds	r3, #1
 8001640:	b29b      	uxth	r3, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fc08 	bl	8000e58 <LCD_WR_REG>
 8001648:	88bb      	ldrh	r3, [r7, #4]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	b29b      	uxth	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fc12 	bl	8000e78 <LCD_WR_DATA>
 8001654:	e098      	b.n	8001788 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X1963)
 8001656:	4b52      	ldr	r3, [pc, #328]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001658:	889b      	ldrh	r3, [r3, #4]
 800165a:	f641 1263 	movw	r2, #6499	; 0x1963
 800165e:	4293      	cmp	r3, r2
 8001660:	d145      	bne.n	80016ee <LCD_Fast_DrawPoint+0x176>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8001662:	4b4f      	ldr	r3, [pc, #316]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001664:	799b      	ldrb	r3, [r3, #6]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d106      	bne.n	8001678 <LCD_Fast_DrawPoint+0x100>
 800166a:	4b4d      	ldr	r3, [pc, #308]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800166c:	881a      	ldrh	r2, [r3, #0]
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	3b01      	subs	r3, #1
 8001676:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001678:	4b49      	ldr	r3, [pc, #292]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800167a:	895b      	ldrh	r3, [r3, #10]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fbeb 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	b29b      	uxth	r3, r3
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fbf5 	bl	8000e78 <LCD_WR_DATA>
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	b29b      	uxth	r3, r3
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fbef 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fbe9 	bl	8000e78 <LCD_WR_DATA>
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fbe3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80016b2:	4b3b      	ldr	r3, [pc, #236]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 80016b4:	899b      	ldrh	r3, [r3, #12]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fbce 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80016bc:	88bb      	ldrh	r3, [r7, #4]
 80016be:	0a1b      	lsrs	r3, r3, #8
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fbd8 	bl	8000e78 <LCD_WR_DATA>
 80016c8:	88bb      	ldrh	r3, [r7, #4]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fbd2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80016d4:	88bb      	ldrh	r3, [r7, #4]
 80016d6:	0a1b      	lsrs	r3, r3, #8
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fbcc 	bl	8000e78 <LCD_WR_DATA>
 80016e0:	88bb      	ldrh	r3, [r7, #4]
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff fbc6 	bl	8000e78 <LCD_WR_DATA>
 80016ec:	e04c      	b.n	8001788 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X6804)
 80016ee:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 80016f0:	889b      	ldrh	r3, [r3, #4]
 80016f2:	f646 0204 	movw	r2, #26628	; 0x6804
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d12d      	bne.n	8001756 <LCD_Fast_DrawPoint+0x1de>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 80016fa:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 80016fc:	799b      	ldrb	r3, [r3, #6]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d106      	bne.n	8001710 <LCD_Fast_DrawPoint+0x198>
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001704:	881a      	ldrh	r2, [r3, #0]
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	b29b      	uxth	r3, r3
 800170c:	3b01      	subs	r3, #1
 800170e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001710:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001712:	895b      	ldrh	r3, [r3, #10]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fb9f 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	b29b      	uxth	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fba9 	bl	8000e78 <LCD_WR_DATA>
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	b29b      	uxth	r3, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fba3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001732:	4b1b      	ldr	r3, [pc, #108]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001734:	899b      	ldrh	r3, [r3, #12]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fb8e 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 800173c:	88bb      	ldrh	r3, [r7, #4]
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	b29b      	uxth	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fb98 	bl	8000e78 <LCD_WR_DATA>
 8001748:	88bb      	ldrh	r3, [r7, #4]
 800174a:	b2db      	uxtb	r3, r3
 800174c:	b29b      	uxth	r3, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fb92 	bl	8000e78 <LCD_WR_DATA>
 8001754:	e018      	b.n	8001788 <LCD_Fast_DrawPoint+0x210>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001758:	799b      	ldrb	r3, [r3, #6]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d106      	bne.n	800176c <LCD_Fast_DrawPoint+0x1f4>
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 8001760:	881a      	ldrh	r2, [r3, #0]
 8001762:	88fb      	ldrh	r3, [r7, #6]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	b29b      	uxth	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 800176c:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800176e:	895b      	ldrh	r3, [r3, #10]
 8001770:	88fa      	ldrh	r2, [r7, #6]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fb9d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800177c:	899b      	ldrh	r3, [r3, #12]
 800177e:	88ba      	ldrh	r2, [r7, #4]
 8001780:	4611      	mov	r1, r2
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fb96 	bl	8000eb4 <LCD_WriteReg>
	}
	LCD->LCD_REG=lcddev.wramcmd;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <LCD_Fast_DrawPoint+0x22c>)
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <LCD_Fast_DrawPoint+0x228>)
 800178c:	8912      	ldrh	r2, [r2, #8]
 800178e:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM=color;
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <LCD_Fast_DrawPoint+0x22c>)
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	8053      	strh	r3, [r2, #2]
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000258 	.word	0x20000258
 80017a4:	6c0007fe 	.word	0x6c0007fe

080017a8 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80017b2:	20be      	movs	r0, #190	; 0xbe
 80017b4:	f7ff fb50 	bl	8000e58 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80017b8:	2005      	movs	r0, #5
 80017ba:	f7ff fb5d 	bl	8000e78 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fe8b 	bl	80004dc <__aeabi_i2d>
 80017c6:	a310      	add	r3, pc, #64	; (adr r3, 8001808 <LCD_SSD_BackLightSet+0x60>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe fef0 	bl	80005b0 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f9c2 	bl	8000b60 <__aeabi_d2uiz>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fb49 	bl	8000e78 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 80017e6:	2001      	movs	r0, #1
 80017e8:	f7ff fb46 	bl	8000e78 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 80017ec:	20ff      	movs	r0, #255	; 0xff
 80017ee:	f7ff fb43 	bl	8000e78 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fb40 	bl	8000e78 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff fb3d 	bl	8000e78 <LCD_WR_DATA>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	66666666 	.word	0x66666666
 800180c:	40046666 	.word	0x40046666

08001810 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	if(dir==0)			//竖屏
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d177      	bne.n	8001910 <LCD_Display_Dir+0x100>
	{
		lcddev.dir=0;	//竖屏
 8001820:	4b80      	ldr	r3, [pc, #512]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001822:	2200      	movs	r2, #0
 8001824:	719a      	strb	r2, [r3, #6]
		lcddev.width=240;
 8001826:	4b7f      	ldr	r3, [pc, #508]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001828:	22f0      	movs	r2, #240	; 0xf0
 800182a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800182c:	4b7d      	ldr	r3, [pc, #500]	; (8001a24 <LCD_Display_Dir+0x214>)
 800182e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001832:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310)
 8001834:	4b7b      	ldr	r3, [pc, #492]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001836:	889b      	ldrh	r3, [r3, #4]
 8001838:	f249 3241 	movw	r2, #37697	; 0x9341
 800183c:	4293      	cmp	r3, r2
 800183e:	d00b      	beq.n	8001858 <LCD_Display_Dir+0x48>
 8001840:	4b78      	ldr	r3, [pc, #480]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001842:	889b      	ldrh	r3, [r3, #4]
 8001844:	f646 0204 	movw	r2, #26628	; 0x6804
 8001848:	4293      	cmp	r3, r2
 800184a:	d005      	beq.n	8001858 <LCD_Display_Dir+0x48>
 800184c:	4b75      	ldr	r3, [pc, #468]	; (8001a24 <LCD_Display_Dir+0x214>)
 800184e:	889b      	ldrh	r3, [r3, #4]
 8001850:	f245 3210 	movw	r2, #21264	; 0x5310
 8001854:	4293      	cmp	r3, r2
 8001856:	d11e      	bne.n	8001896 <LCD_Display_Dir+0x86>
		{
			lcddev.wramcmd=0X2C;
 8001858:	4b72      	ldr	r3, [pc, #456]	; (8001a24 <LCD_Display_Dir+0x214>)
 800185a:	222c      	movs	r2, #44	; 0x2c
 800185c:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 800185e:	4b71      	ldr	r3, [pc, #452]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001860:	222a      	movs	r2, #42	; 0x2a
 8001862:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001864:	4b6f      	ldr	r3, [pc, #444]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001866:	222b      	movs	r2, #43	; 0x2b
 8001868:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 800186a:	4b6e      	ldr	r3, [pc, #440]	; (8001a24 <LCD_Display_Dir+0x214>)
 800186c:	889b      	ldrh	r3, [r3, #4]
 800186e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001872:	4293      	cmp	r3, r2
 8001874:	d006      	beq.n	8001884 <LCD_Display_Dir+0x74>
 8001876:	4b6b      	ldr	r3, [pc, #428]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001878:	889b      	ldrh	r3, [r3, #4]
 800187a:	f245 3210 	movw	r2, #21264	; 0x5310
 800187e:	4293      	cmp	r3, r2
 8001880:	f040 80c7 	bne.w	8001a12 <LCD_Display_Dir+0x202>
			{
				lcddev.width=320;
 8001884:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001886:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800188a:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 800188c:	4b65      	ldr	r3, [pc, #404]	; (8001a24 <LCD_Display_Dir+0x214>)
 800188e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001892:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8001894:	e0bd      	b.n	8001a12 <LCD_Display_Dir+0x202>
			}
		}else if(lcddev.id==0x5510)
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001898:	889b      	ldrh	r3, [r3, #4]
 800189a:	f245 5210 	movw	r2, #21776	; 0x5510
 800189e:	4293      	cmp	r3, r2
 80018a0:	d114      	bne.n	80018cc <LCD_Display_Dir+0xbc>
		{
			lcddev.wramcmd=0X2C00;
 80018a2:	4b60      	ldr	r3, [pc, #384]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018a4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80018a8:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 80018aa:	4b5e      	ldr	r3, [pc, #376]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018ac:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80018b0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 80018b2:	4b5c      	ldr	r3, [pc, #368]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018b4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80018b8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 80018ba:	4b5a      	ldr	r3, [pc, #360]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018c0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 80018c2:	4b58      	ldr	r3, [pc, #352]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80018c8:	805a      	strh	r2, [r3, #2]
 80018ca:	e0a3      	b.n	8001a14 <LCD_Display_Dir+0x204>
		}else if(lcddev.id==0X1963)
 80018cc:	4b55      	ldr	r3, [pc, #340]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018ce:	889b      	ldrh	r3, [r3, #4]
 80018d0:	f641 1263 	movw	r2, #6499	; 0x1963
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d111      	bne.n	80018fc <LCD_Display_Dir+0xec>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 80018d8:	4b52      	ldr	r3, [pc, #328]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018da:	222c      	movs	r2, #44	; 0x2c
 80018dc:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 80018de:	4b51      	ldr	r3, [pc, #324]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018e0:	222b      	movs	r2, #43	; 0x2b
 80018e2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 80018e4:	4b4f      	ldr	r3, [pc, #316]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018e6:	222a      	movs	r2, #42	; 0x2a
 80018e8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 80018ea:	4b4e      	ldr	r3, [pc, #312]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018f0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 80018f2:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80018f8:	805a      	strh	r2, [r3, #2]
 80018fa:	e08b      	b.n	8001a14 <LCD_Display_Dir+0x204>
		}else
		{
			lcddev.wramcmd=0X22;
 80018fc:	4b49      	ldr	r3, [pc, #292]	; (8001a24 <LCD_Display_Dir+0x214>)
 80018fe:	2222      	movs	r2, #34	; 0x22
 8001900:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X20;
 8001902:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001904:	2220      	movs	r2, #32
 8001906:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X21;
 8001908:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <LCD_Display_Dir+0x214>)
 800190a:	2221      	movs	r2, #33	; 0x21
 800190c:	819a      	strh	r2, [r3, #12]
 800190e:	e081      	b.n	8001a14 <LCD_Display_Dir+0x204>
		}
	}else 				//横屏
	{
		lcddev.dir=1;	//横屏
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001912:	2201      	movs	r2, #1
 8001914:	719a      	strb	r2, [r3, #6]
		lcddev.width=320;
 8001916:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001918:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800191c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001920:	22f0      	movs	r2, #240	; 0xf0
 8001922:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001924:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001926:	889b      	ldrh	r3, [r3, #4]
 8001928:	f249 3241 	movw	r2, #37697	; 0x9341
 800192c:	4293      	cmp	r3, r2
 800192e:	d005      	beq.n	800193c <LCD_Display_Dir+0x12c>
 8001930:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001932:	889b      	ldrh	r3, [r3, #4]
 8001934:	f245 3210 	movw	r2, #21264	; 0x5310
 8001938:	4293      	cmp	r3, r2
 800193a:	d109      	bne.n	8001950 <LCD_Display_Dir+0x140>
		{
			lcddev.wramcmd=0X2C;
 800193c:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <LCD_Display_Dir+0x214>)
 800193e:	222c      	movs	r2, #44	; 0x2c
 8001940:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001942:	4b38      	ldr	r3, [pc, #224]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001944:	222a      	movs	r2, #42	; 0x2a
 8001946:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001948:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <LCD_Display_Dir+0x214>)
 800194a:	222b      	movs	r2, #43	; 0x2b
 800194c:	819a      	strh	r2, [r3, #12]
 800194e:	e04b      	b.n	80019e8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X6804)
 8001950:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001952:	889b      	ldrh	r3, [r3, #4]
 8001954:	f646 0204 	movw	r2, #26628	; 0x6804
 8001958:	4293      	cmp	r3, r2
 800195a:	d109      	bne.n	8001970 <LCD_Display_Dir+0x160>
		{
 			lcddev.wramcmd=0X2C;
 800195c:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <LCD_Display_Dir+0x214>)
 800195e:	222c      	movs	r2, #44	; 0x2c
 8001960:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2B;
 8001962:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001964:	222b      	movs	r2, #43	; 0x2b
 8001966:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;
 8001968:	4b2e      	ldr	r3, [pc, #184]	; (8001a24 <LCD_Display_Dir+0x214>)
 800196a:	222a      	movs	r2, #42	; 0x2a
 800196c:	819a      	strh	r2, [r3, #12]
 800196e:	e03b      	b.n	80019e8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0x5510)
 8001970:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001972:	889b      	ldrh	r3, [r3, #4]
 8001974:	f245 5210 	movw	r2, #21776	; 0x5510
 8001978:	4293      	cmp	r3, r2
 800197a:	d114      	bne.n	80019a6 <LCD_Display_Dir+0x196>
		{
			lcddev.wramcmd=0X2C00;
 800197c:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <LCD_Display_Dir+0x214>)
 800197e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001982:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001986:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800198a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 800198c:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <LCD_Display_Dir+0x214>)
 800198e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001992:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8001994:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001996:	f44f 7248 	mov.w	r2, #800	; 0x320
 800199a:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <LCD_Display_Dir+0x214>)
 800199e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019a2:	805a      	strh	r2, [r3, #2]
 80019a4:	e020      	b.n	80019e8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X1963)
 80019a6:	4b1f      	ldr	r3, [pc, #124]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019a8:	889b      	ldrh	r3, [r3, #4]
 80019aa:	f641 1263 	movw	r2, #6499	; 0x1963
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d111      	bne.n	80019d6 <LCD_Display_Dir+0x1c6>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019b4:	222c      	movs	r2, #44	; 0x2c
 80019b6:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019ba:	222a      	movs	r2, #42	; 0x2a
 80019bc:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019c0:	222b      	movs	r2, #43	; 0x2b
 80019c2:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019c6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019ca:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80019d2:	805a      	strh	r2, [r3, #2]
 80019d4:	e008      	b.n	80019e8 <LCD_Display_Dir+0x1d8>
		}else
		{
			lcddev.wramcmd=0X22;
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019d8:	2222      	movs	r2, #34	; 0x22
 80019da:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X21;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019de:	2221      	movs	r2, #33	; 0x21
 80019e0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X20;
 80019e2:	4b10      	ldr	r3, [pc, #64]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019e4:	2220      	movs	r2, #32
 80019e6:	819a      	strh	r2, [r3, #12]
		}
		if(lcddev.id==0X6804||lcddev.id==0X5310)
 80019e8:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019ea:	889b      	ldrh	r3, [r3, #4]
 80019ec:	f646 0204 	movw	r2, #26628	; 0x6804
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d005      	beq.n	8001a00 <LCD_Display_Dir+0x1f0>
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <LCD_Display_Dir+0x214>)
 80019f6:	889b      	ldrh	r3, [r3, #4]
 80019f8:	f245 3210 	movw	r2, #21264	; 0x5310
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d109      	bne.n	8001a14 <LCD_Display_Dir+0x204>
		{
			lcddev.width=480;
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001a02:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001a06:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <LCD_Display_Dir+0x214>)
 8001a0a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a0e:	805a      	strh	r2, [r3, #2]
 8001a10:	e000      	b.n	8001a14 <LCD_Display_Dir+0x204>
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8001a12:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001a14:	2000      	movs	r0, #0
 8001a16:	f7ff fbb5 	bl	8001184 <LCD_Scan_Dir>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000258 	.word	0x20000258

08001a28 <LCD_Init>:
}
//初始化lcd
//该初始化函数可以初始化各种ILI93XX液晶,但是其他函数是基于ILI9320的!!!
//在其他型号的驱动芯片上没有测试!
void LCD_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af02      	add	r7, sp, #8
	RCC->AHBENR|=1<<8;     	 	//使能FSMC时钟
 8001a2e:	4bab      	ldr	r3, [pc, #684]	; (8001cdc <LCD_Init+0x2b4>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	4aaa      	ldr	r2, [pc, #680]	; (8001cdc <LCD_Init+0x2b4>)
 8001a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a38:	6153      	str	r3, [r2, #20]
  	RCC->APB2ENR|=1<<3;     	//使能PORTB时钟
 8001a3a:	4ba8      	ldr	r3, [pc, #672]	; (8001cdc <LCD_Init+0x2b4>)
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	4aa7      	ldr	r2, [pc, #668]	; (8001cdc <LCD_Init+0x2b4>)
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<5;     	//使能PORTD时钟
 8001a46:	4ba5      	ldr	r3, [pc, #660]	; (8001cdc <LCD_Init+0x2b4>)
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	4aa4      	ldr	r2, [pc, #656]	; (8001cdc <LCD_Init+0x2b4>)
 8001a4c:	f043 0320 	orr.w	r3, r3, #32
 8001a50:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<6;     	//使能PORTE时钟
 8001a52:	4ba2      	ldr	r3, [pc, #648]	; (8001cdc <LCD_Init+0x2b4>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	4aa1      	ldr	r2, [pc, #644]	; (8001cdc <LCD_Init+0x2b4>)
 8001a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a5c:	6193      	str	r3, [r2, #24]
 	RCC->APB2ENR|=1<<8;      	//使能PORTG时钟
 8001a5e:	4b9f      	ldr	r3, [pc, #636]	; (8001cdc <LCD_Init+0x2b4>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	4a9e      	ldr	r2, [pc, #632]	; (8001cdc <LCD_Init+0x2b4>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a68:	6193      	str	r3, [r2, #24]
	GPIOB->CRL&=0XFFFFFFF0;		//PB0 推挽输出 背光
 8001a6a:	4b9d      	ldr	r3, [pc, #628]	; (8001ce0 <LCD_Init+0x2b8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a9c      	ldr	r2, [pc, #624]	; (8001ce0 <LCD_Init+0x2b8>)
 8001a70:	f023 030f 	bic.w	r3, r3, #15
 8001a74:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=0X00000003;
 8001a76:	4b9a      	ldr	r3, [pc, #616]	; (8001ce0 <LCD_Init+0x2b8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a99      	ldr	r2, [pc, #612]	; (8001ce0 <LCD_Init+0x2b8>)
 8001a7c:	f043 0303 	orr.w	r3, r3, #3
 8001a80:	6013      	str	r3, [r2, #0]
	//PORTD复用推挽输出
	GPIOD->CRH&=0X00FFF000;
 8001a82:	4b98      	ldr	r3, [pc, #608]	; (8001ce4 <LCD_Init+0x2bc>)
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	4997      	ldr	r1, [pc, #604]	; (8001ce4 <LCD_Init+0x2bc>)
 8001a88:	4b97      	ldr	r3, [pc, #604]	; (8001ce8 <LCD_Init+0x2c0>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
	GPIOD->CRH|=0XBB000BBB;
 8001a8e:	4b95      	ldr	r3, [pc, #596]	; (8001ce4 <LCD_Init+0x2bc>)
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4994      	ldr	r1, [pc, #592]	; (8001ce4 <LCD_Init+0x2bc>)
 8001a94:	4b95      	ldr	r3, [pc, #596]	; (8001cec <LCD_Init+0x2c4>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
	GPIOD->CRL&=0XFF00FF00;
 8001a9a:	4b92      	ldr	r3, [pc, #584]	; (8001ce4 <LCD_Init+0x2bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a91      	ldr	r2, [pc, #580]	; (8001ce4 <LCD_Init+0x2bc>)
 8001aa0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001aa4:	6013      	str	r3, [r2, #0]
	GPIOD->CRL|=0X00BB00BB;
 8001aa6:	4b8f      	ldr	r3, [pc, #572]	; (8001ce4 <LCD_Init+0x2bc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a8e      	ldr	r2, [pc, #568]	; (8001ce4 <LCD_Init+0x2bc>)
 8001aac:	f043 13bb 	orr.w	r3, r3, #12255419	; 0xbb00bb
 8001ab0:	6013      	str	r3, [r2, #0]
	//PORTE复用推挽输出
	GPIOE->CRH&=0X00000000;
 8001ab2:	4b8f      	ldr	r3, [pc, #572]	; (8001cf0 <LCD_Init+0x2c8>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4b8e      	ldr	r3, [pc, #568]	; (8001cf0 <LCD_Init+0x2c8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	605a      	str	r2, [r3, #4]
	GPIOE->CRH|=0XBBBBBBBB;
 8001abc:	4b8c      	ldr	r3, [pc, #560]	; (8001cf0 <LCD_Init+0x2c8>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	4a8b      	ldr	r2, [pc, #556]	; (8001cf0 <LCD_Init+0x2c8>)
 8001ac2:	f043 33bb 	orr.w	r3, r3, #3149642683	; 0xbbbbbbbb
 8001ac6:	6053      	str	r3, [r2, #4]
	GPIOE->CRL&=0X0FFFFFFF;
 8001ac8:	4b89      	ldr	r3, [pc, #548]	; (8001cf0 <LCD_Init+0x2c8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a88      	ldr	r2, [pc, #544]	; (8001cf0 <LCD_Init+0x2c8>)
 8001ace:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001ad2:	6013      	str	r3, [r2, #0]
	GPIOE->CRL|=0XB0000000;
 8001ad4:	4b86      	ldr	r3, [pc, #536]	; (8001cf0 <LCD_Init+0x2c8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a85      	ldr	r2, [pc, #532]	; (8001cf0 <LCD_Init+0x2c8>)
 8001ada:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8001ade:	6013      	str	r3, [r2, #0]
	//PORTG12复用推挽输出
	GPIOG->CRH&=0XFFF0FFFF;
 8001ae0:	4b84      	ldr	r3, [pc, #528]	; (8001cf4 <LCD_Init+0x2cc>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4a83      	ldr	r2, [pc, #524]	; (8001cf4 <LCD_Init+0x2cc>)
 8001ae6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8001aea:	6053      	str	r3, [r2, #4]
	GPIOG->CRH|=0X000B0000;
 8001aec:	4b81      	ldr	r3, [pc, #516]	; (8001cf4 <LCD_Init+0x2cc>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a80      	ldr	r2, [pc, #512]	; (8001cf4 <LCD_Init+0x2cc>)
 8001af2:	f443 2330 	orr.w	r3, r3, #720896	; 0xb0000
 8001af6:	6053      	str	r3, [r2, #4]
	GPIOG->CRL&=0XFFFFFFF0;//PG0->RS
 8001af8:	4b7e      	ldr	r3, [pc, #504]	; (8001cf4 <LCD_Init+0x2cc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a7d      	ldr	r2, [pc, #500]	; (8001cf4 <LCD_Init+0x2cc>)
 8001afe:	f023 030f 	bic.w	r3, r3, #15
 8001b02:	6013      	str	r3, [r2, #0]
	GPIOG->CRL|=0X0000000B;
 8001b04:	4b7b      	ldr	r3, [pc, #492]	; (8001cf4 <LCD_Init+0x2cc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a7a      	ldr	r2, [pc, #488]	; (8001cf4 <LCD_Init+0x2cc>)
 8001b0a:	f043 030b 	orr.w	r3, r3, #11
 8001b0e:	6013      	str	r3, [r2, #0]

	//寄存器清零
	//bank1有NE1~4,每一个有一个BCR+TCR，所以总共八个寄存器。
	//这里我们使用NE4 ，也就对应BTCR[6],[7]。
	FSMC_Bank1->BTCR[6]=0X00000000;
 8001b10:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
	FSMC_Bank1->BTCR[7]=0X00000000;
 8001b18:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	61da      	str	r2, [r3, #28]
	FSMC_Bank1E->BWTR[6]=0X00000000;
 8001b20:	4b75      	ldr	r3, [pc, #468]	; (8001cf8 <LCD_Init+0x2d0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
	//操作BCR寄存器	使用异步模式
	FSMC_Bank1->BTCR[6]|=1<<12;		//存储器写使能
 8001b26:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b34:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<14;		//读写使用不同的时序
 8001b36:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b44:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<4; 		//存储器数据宽度为16bit
 8001b46:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b50:	f043 0310 	orr.w	r3, r3, #16
 8001b54:	6193      	str	r3, [r2, #24]
	//操作BTR寄存器
	//读时序控制寄存器
	FSMC_Bank1->BTCR[7]|=0<<28;		//模式A
 8001b56:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b5a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	61d3      	str	r3, [r2, #28]
	FSMC_Bank1->BTCR[7]|=1<<0; 		//地址建立时间（ADDSET）为2个HCLK 1/36M=27ns(实际>200ns)
 8001b62:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	61d3      	str	r3, [r2, #28]
	//因为液晶驱动IC的读数据的时候，速度不能太快，尤其对1289这个IC。
	FSMC_Bank1->BTCR[7]|=0XF<<8;  	//数据保存时间为16个HCLK
 8001b72:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001b7c:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8001b80:	61d3      	str	r3, [r2, #28]
	//写时序控制寄存器
	FSMC_Bank1E->BWTR[6]|=0<<28; 	//模式A
 8001b82:	4b5d      	ldr	r3, [pc, #372]	; (8001cf8 <LCD_Init+0x2d0>)
 8001b84:	4a5c      	ldr	r2, [pc, #368]	; (8001cf8 <LCD_Init+0x2d0>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	6193      	str	r3, [r2, #24]
	FSMC_Bank1E->BWTR[6]|=0<<0;		//地址建立时间（ADDSET）为1个HCLK
 8001b8a:	4b5b      	ldr	r3, [pc, #364]	; (8001cf8 <LCD_Init+0x2d0>)
 8001b8c:	4a5a      	ldr	r2, [pc, #360]	; (8001cf8 <LCD_Init+0x2d0>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	6193      	str	r3, [r2, #24]
 	//4个HCLK（HCLK=72M）因为液晶驱动IC的写信号脉宽，最少也得50ns。72M/4=24M=55ns
	FSMC_Bank1E->BWTR[6]|=3<<8; 	//数据保存时间为4个HCLK
 8001b92:	4b59      	ldr	r3, [pc, #356]	; (8001cf8 <LCD_Init+0x2d0>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <LCD_Init+0x2d0>)
 8001b98:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001b9c:	6193      	str	r3, [r2, #24]
	//使能BANK1,区域4
	FSMC_Bank1->BTCR[6]|=1<<0;		//使能BANK1，区域4
 8001b9e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6193      	str	r3, [r2, #24]
	HAL_Delay(50); 					// delay 50 ms
 8001bae:	2032      	movs	r0, #50	; 0x32
 8001bb0:	f003 ff1a 	bl	80059e8 <HAL_Delay>
  	lcddev.id=LCD_ReadReg(0x0000);	//读ID（9320/9325/9328/4531/4535等IC）
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff f993 	bl	8000ee0 <LCD_ReadReg>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b4f      	ldr	r3, [pc, #316]	; (8001cfc <LCD_Init+0x2d4>)
 8001bc0:	809a      	strh	r2, [r3, #4]
  	if(lcddev.id<0XFF||lcddev.id==0XFFFF||lcddev.id==0X9300)//读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8001bc2:	4b4e      	ldr	r3, [pc, #312]	; (8001cfc <LCD_Init+0x2d4>)
 8001bc4:	889b      	ldrh	r3, [r3, #4]
 8001bc6:	2bfe      	cmp	r3, #254	; 0xfe
 8001bc8:	d90b      	bls.n	8001be2 <LCD_Init+0x1ba>
 8001bca:	4b4c      	ldr	r3, [pc, #304]	; (8001cfc <LCD_Init+0x2d4>)
 8001bcc:	889b      	ldrh	r3, [r3, #4]
 8001bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d005      	beq.n	8001be2 <LCD_Init+0x1ba>
 8001bd6:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <LCD_Init+0x2d4>)
 8001bd8:	889b      	ldrh	r3, [r3, #4]
 8001bda:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8001bde:	f040 80fd 	bne.w	8001ddc <LCD_Init+0x3b4>
	{
 		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8001be2:	20d3      	movs	r0, #211	; 0xd3
 8001be4:	f7ff f938 	bl	8000e58 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();	//dummy read
 8001be8:	f7ff f956 	bl	8000e98 <LCD_RD_DATA>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <LCD_Init+0x2d4>)
 8001bf2:	809a      	strh	r2, [r3, #4]
 		lcddev.id=LCD_RD_DATA();	//读到0X00
 8001bf4:	f7ff f950 	bl	8000e98 <LCD_RD_DATA>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b3f      	ldr	r3, [pc, #252]	; (8001cfc <LCD_Init+0x2d4>)
 8001bfe:	809a      	strh	r2, [r3, #4]
  		lcddev.id=LCD_RD_DATA();   	//读取93
 8001c00:	f7ff f94a 	bl	8000e98 <LCD_RD_DATA>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <LCD_Init+0x2d4>)
 8001c0a:	809a      	strh	r2, [r3, #4]
 		lcddev.id<<=8;
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <LCD_Init+0x2d4>)
 8001c0e:	889b      	ldrh	r3, [r3, #4]
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <LCD_Init+0x2d4>)
 8001c16:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();  	//读取41
 8001c18:	f7ff f93e 	bl	8000e98 <LCD_RD_DATA>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b36      	ldr	r3, [pc, #216]	; (8001cfc <LCD_Init+0x2d4>)
 8001c22:	889b      	ldrh	r3, [r3, #4]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <LCD_Init+0x2d4>)
 8001c2a:	809a      	strh	r2, [r3, #4]
 		if(lcddev.id!=0X9341)		//非9341,尝试是不是6804
 8001c2c:	4b33      	ldr	r3, [pc, #204]	; (8001cfc <LCD_Init+0x2d4>)
 8001c2e:	889b      	ldrh	r3, [r3, #4]
 8001c30:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c34:	4293      	cmp	r3, r2
 8001c36:	f000 80d1 	beq.w	8001ddc <LCD_Init+0x3b4>
		{
 			LCD_WR_REG(0XBF);
 8001c3a:	20bf      	movs	r0, #191	; 0xbf
 8001c3c:	f7ff f90c 	bl	8000e58 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA(); 	//dummy read
 8001c40:	f7ff f92a 	bl	8000e98 <LCD_RD_DATA>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <LCD_Init+0x2d4>)
 8001c4a:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA();   	//读回0X01
 8001c4c:	f7ff f924 	bl	8000e98 <LCD_RD_DATA>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <LCD_Init+0x2d4>)
 8001c56:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA(); 	//读回0XD0
 8001c58:	f7ff f91e 	bl	8000e98 <LCD_RD_DATA>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4b26      	ldr	r3, [pc, #152]	; (8001cfc <LCD_Init+0x2d4>)
 8001c62:	809a      	strh	r2, [r3, #4]
	  		lcddev.id=LCD_RD_DATA();	//这里读回0X68
 8001c64:	f7ff f918 	bl	8000e98 <LCD_RD_DATA>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <LCD_Init+0x2d4>)
 8001c6e:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <LCD_Init+0x2d4>)
 8001c72:	889b      	ldrh	r3, [r3, #4]
 8001c74:	021b      	lsls	r3, r3, #8
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	4b20      	ldr	r3, [pc, #128]	; (8001cfc <LCD_Init+0x2d4>)
 8001c7a:	809a      	strh	r2, [r3, #4]
	  		lcddev.id|=LCD_RD_DATA();	//这里读回0X04
 8001c7c:	f7ff f90c 	bl	8000e98 <LCD_RD_DATA>
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <LCD_Init+0x2d4>)
 8001c86:	889b      	ldrh	r3, [r3, #4]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <LCD_Init+0x2d4>)
 8001c8e:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X6804)		//也不是6804,尝试看看是不是NT35310
 8001c90:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <LCD_Init+0x2d4>)
 8001c92:	889b      	ldrh	r3, [r3, #4]
 8001c94:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	f000 809f 	beq.w	8001ddc <LCD_Init+0x3b4>
			{
				LCD_WR_REG(0XD4);
 8001c9e:	20d4      	movs	r0, #212	; 0xd4
 8001ca0:	f7ff f8da 	bl	8000e58 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();//dummy read
 8001ca4:	f7ff f8f8 	bl	8000e98 <LCD_RD_DATA>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <LCD_Init+0x2d4>)
 8001cae:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X01
 8001cb0:	f7ff f8f2 	bl	8000e98 <LCD_RD_DATA>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <LCD_Init+0x2d4>)
 8001cba:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X53
 8001cbc:	f7ff f8ec 	bl	8000e98 <LCD_RD_DATA>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <LCD_Init+0x2d4>)
 8001cc6:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <LCD_Init+0x2d4>)
 8001cca:	889b      	ldrh	r3, [r3, #4]
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <LCD_Init+0x2d4>)
 8001cd2:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 8001cd4:	f7ff f8e0 	bl	8000e98 <LCD_RD_DATA>
 8001cd8:	e012      	b.n	8001d00 <LCD_Init+0x2d8>
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010c00 	.word	0x40010c00
 8001ce4:	40011400 	.word	0x40011400
 8001ce8:	00fff000 	.word	0x00fff000
 8001cec:	bb000bbb 	.word	0xbb000bbb
 8001cf0:	40011800 	.word	0x40011800
 8001cf4:	40012000 	.word	0x40012000
 8001cf8:	a0000104 	.word	0xa0000104
 8001cfc:	20000258 	.word	0x20000258
 8001d00:	4603      	mov	r3, r0
 8001d02:	461a      	mov	r2, r3
 8001d04:	4bc9      	ldr	r3, [pc, #804]	; (800202c <LCD_Init+0x604>)
 8001d06:	889b      	ldrh	r3, [r3, #4]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	4bc7      	ldr	r3, [pc, #796]	; (800202c <LCD_Init+0x604>)
 8001d0e:	809a      	strh	r2, [r3, #4]
				if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001d10:	4bc6      	ldr	r3, [pc, #792]	; (800202c <LCD_Init+0x604>)
 8001d12:	889b      	ldrh	r3, [r3, #4]
 8001d14:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d05f      	beq.n	8001ddc <LCD_Init+0x3b4>
				{
					LCD_WR_REG(0XDA00);
 8001d1c:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8001d20:	f7ff f89a 	bl	8000e58 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X00
 8001d24:	f7ff f8b8 	bl	8000e98 <LCD_RD_DATA>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4bbf      	ldr	r3, [pc, #764]	; (800202c <LCD_Init+0x604>)
 8001d2e:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDB00);
 8001d30:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001d34:	f7ff f890 	bl	8000e58 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X80
 8001d38:	f7ff f8ae 	bl	8000e98 <LCD_RD_DATA>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4bba      	ldr	r3, [pc, #744]	; (800202c <LCD_Init+0x604>)
 8001d42:	809a      	strh	r2, [r3, #4]
					lcddev.id<<=8;
 8001d44:	4bb9      	ldr	r3, [pc, #740]	; (800202c <LCD_Init+0x604>)
 8001d46:	889b      	ldrh	r3, [r3, #4]
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	4bb7      	ldr	r3, [pc, #732]	; (800202c <LCD_Init+0x604>)
 8001d4e:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8001d50:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001d54:	f7ff f880 	bl	8000e58 <LCD_WR_REG>
					lcddev.id|=LCD_RD_DATA();		//读回0X00
 8001d58:	f7ff f89e 	bl	8000e98 <LCD_RD_DATA>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4bb2      	ldr	r3, [pc, #712]	; (800202c <LCD_Init+0x604>)
 8001d62:	889b      	ldrh	r3, [r3, #4]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	4bb0      	ldr	r3, [pc, #704]	; (800202c <LCD_Init+0x604>)
 8001d6a:	809a      	strh	r2, [r3, #4]
					if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8001d6c:	4baf      	ldr	r3, [pc, #700]	; (800202c <LCD_Init+0x604>)
 8001d6e:	889b      	ldrh	r3, [r3, #4]
 8001d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d74:	d103      	bne.n	8001d7e <LCD_Init+0x356>
 8001d76:	4bad      	ldr	r3, [pc, #692]	; (800202c <LCD_Init+0x604>)
 8001d78:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d7c:	809a      	strh	r2, [r3, #4]
					if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001d7e:	4bab      	ldr	r3, [pc, #684]	; (800202c <LCD_Init+0x604>)
 8001d80:	889b      	ldrh	r3, [r3, #4]
 8001d82:	f245 5210 	movw	r2, #21776	; 0x5510
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d028      	beq.n	8001ddc <LCD_Init+0x3b4>
					{
						LCD_WR_REG(0XA1);
 8001d8a:	20a1      	movs	r0, #161	; 0xa1
 8001d8c:	f7ff f864 	bl	8000e58 <LCD_WR_REG>
						lcddev.id=LCD_RD_DATA();
 8001d90:	f7ff f882 	bl	8000e98 <LCD_RD_DATA>
 8001d94:	4603      	mov	r3, r0
 8001d96:	461a      	mov	r2, r3
 8001d98:	4ba4      	ldr	r3, [pc, #656]	; (800202c <LCD_Init+0x604>)
 8001d9a:	809a      	strh	r2, [r3, #4]
						lcddev.id=LCD_RD_DATA();	//读回0X57
 8001d9c:	f7ff f87c 	bl	8000e98 <LCD_RD_DATA>
 8001da0:	4603      	mov	r3, r0
 8001da2:	461a      	mov	r2, r3
 8001da4:	4ba1      	ldr	r3, [pc, #644]	; (800202c <LCD_Init+0x604>)
 8001da6:	809a      	strh	r2, [r3, #4]
						lcddev.id<<=8;
 8001da8:	4ba0      	ldr	r3, [pc, #640]	; (800202c <LCD_Init+0x604>)
 8001daa:	889b      	ldrh	r3, [r3, #4]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	4b9e      	ldr	r3, [pc, #632]	; (800202c <LCD_Init+0x604>)
 8001db2:	809a      	strh	r2, [r3, #4]
						lcddev.id|=LCD_RD_DATA();	//读回0X61
 8001db4:	f7ff f870 	bl	8000e98 <LCD_RD_DATA>
 8001db8:	4603      	mov	r3, r0
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4b9b      	ldr	r3, [pc, #620]	; (800202c <LCD_Init+0x604>)
 8001dbe:	889b      	ldrh	r3, [r3, #4]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b99      	ldr	r3, [pc, #612]	; (800202c <LCD_Init+0x604>)
 8001dc6:	809a      	strh	r2, [r3, #4]
						if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001dc8:	4b98      	ldr	r3, [pc, #608]	; (800202c <LCD_Init+0x604>)
 8001dca:	889b      	ldrh	r3, [r3, #4]
 8001dcc:	f245 7261 	movw	r2, #22369	; 0x5761
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d103      	bne.n	8001ddc <LCD_Init+0x3b4>
 8001dd4:	4b95      	ldr	r3, [pc, #596]	; (800202c <LCD_Init+0x604>)
 8001dd6:	f641 1263 	movw	r2, #6499	; 0x1963
 8001dda:	809a      	strh	r2, [r3, #4]
					}
				}
			}
 		}
	}
 	print(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 8001ddc:	4b93      	ldr	r3, [pc, #588]	; (800202c <LCD_Init+0x604>)
 8001dde:	889b      	ldrh	r3, [r3, #4]
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	4b93      	ldr	r3, [pc, #588]	; (8002030 <LCD_Init+0x608>)
 8001de4:	4a93      	ldr	r2, [pc, #588]	; (8002034 <LCD_Init+0x60c>)
 8001de6:	f240 2183 	movw	r1, #643	; 0x283
 8001dea:	4893      	ldr	r0, [pc, #588]	; (8002038 <LCD_Init+0x610>)
 8001dec:	f005 fa4e 	bl	800728c <iprintf>
	if(lcddev.id==0X9341)	//9341初始化
 8001df0:	4b8e      	ldr	r3, [pc, #568]	; (800202c <LCD_Init+0x604>)
 8001df2:	889b      	ldrh	r3, [r3, #4]
 8001df4:	f249 3241 	movw	r2, #37697	; 0x9341
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	f040 811f 	bne.w	800203c <LCD_Init+0x614>
	{
		LCD_WR_REG(0xCF);
 8001dfe:	20cf      	movs	r0, #207	; 0xcf
 8001e00:	f7ff f82a 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff f837 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 8001e0a:	20c1      	movs	r0, #193	; 0xc1
 8001e0c:	f7ff f834 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8001e10:	2030      	movs	r0, #48	; 0x30
 8001e12:	f7ff f831 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 8001e16:	20ed      	movs	r0, #237	; 0xed
 8001e18:	f7ff f81e 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 8001e1c:	2064      	movs	r0, #100	; 0x64
 8001e1e:	f7ff f82b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001e22:	2003      	movs	r0, #3
 8001e24:	f7ff f828 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 8001e28:	2012      	movs	r0, #18
 8001e2a:	f7ff f825 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 8001e2e:	2081      	movs	r0, #129	; 0x81
 8001e30:	f7ff f822 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8001e34:	20e8      	movs	r0, #232	; 0xe8
 8001e36:	f7ff f80f 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 8001e3a:	2085      	movs	r0, #133	; 0x85
 8001e3c:	f7ff f81c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001e40:	2010      	movs	r0, #16
 8001e42:	f7ff f819 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8001e46:	207a      	movs	r0, #122	; 0x7a
 8001e48:	f7ff f816 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 8001e4c:	20cb      	movs	r0, #203	; 0xcb
 8001e4e:	f7ff f803 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8001e52:	2039      	movs	r0, #57	; 0x39
 8001e54:	f7ff f810 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8001e58:	202c      	movs	r0, #44	; 0x2c
 8001e5a:	f7ff f80d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff f80a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8001e64:	2034      	movs	r0, #52	; 0x34
 8001e66:	f7ff f807 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	f7ff f804 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8001e70:	20f7      	movs	r0, #247	; 0xf7
 8001e72:	f7fe fff1 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8001e76:	2020      	movs	r0, #32
 8001e78:	f7fe fffe 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8001e7c:	20ea      	movs	r0, #234	; 0xea
 8001e7e:	f7fe ffeb 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7fe fff8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7fe fff5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 8001e8e:	20c0      	movs	r0, #192	; 0xc0
 8001e90:	f7fe ffe2 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001e94:	201b      	movs	r0, #27
 8001e96:	f7fe ffef 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 8001e9a:	20c1      	movs	r0, #193	; 0xc1
 8001e9c:	f7fe ffdc 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7fe ffe9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 8001ea6:	20c5      	movs	r0, #197	; 0xc5
 8001ea8:	f7fe ffd6 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 8001eac:	2030      	movs	r0, #48	; 0x30
 8001eae:	f7fe ffe3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 8001eb2:	2030      	movs	r0, #48	; 0x30
 8001eb4:	f7fe ffe0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 8001eb8:	20c7      	movs	r0, #199	; 0xc7
 8001eba:	f7fe ffcd 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 8001ebe:	20b7      	movs	r0, #183	; 0xb7
 8001ec0:	f7fe ffda 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 8001ec4:	2036      	movs	r0, #54	; 0x36
 8001ec6:	f7fe ffc7 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 8001eca:	2048      	movs	r0, #72	; 0x48
 8001ecc:	f7fe ffd4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 8001ed0:	203a      	movs	r0, #58	; 0x3a
 8001ed2:	f7fe ffc1 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 8001ed6:	2055      	movs	r0, #85	; 0x55
 8001ed8:	f7fe ffce 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 8001edc:	20b1      	movs	r0, #177	; 0xb1
 8001ede:	f7fe ffbb 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	f7fe ffc8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 8001ee8:	201a      	movs	r0, #26
 8001eea:	f7fe ffc5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 8001eee:	20b6      	movs	r0, #182	; 0xb6
 8001ef0:	f7fe ffb2 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8001ef4:	200a      	movs	r0, #10
 8001ef6:	f7fe ffbf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8001efa:	20a2      	movs	r0, #162	; 0xa2
 8001efc:	f7fe ffbc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001f00:	20f2      	movs	r0, #242	; 0xf2
 8001f02:	f7fe ffa9 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7fe ffb6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 8001f0c:	2026      	movs	r0, #38	; 0x26
 8001f0e:	f7fe ffa3 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f7fe ffb0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 8001f18:	20e0      	movs	r0, #224	; 0xe0
 8001f1a:	f7fe ff9d 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 8001f1e:	200f      	movs	r0, #15
 8001f20:	f7fe ffaa 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8001f24:	202a      	movs	r0, #42	; 0x2a
 8001f26:	f7fe ffa7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 8001f2a:	2028      	movs	r0, #40	; 0x28
 8001f2c:	f7fe ffa4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8001f30:	2008      	movs	r0, #8
 8001f32:	f7fe ffa1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 8001f36:	200e      	movs	r0, #14
 8001f38:	f7fe ff9e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8001f3c:	2008      	movs	r0, #8
 8001f3e:	f7fe ff9b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8001f42:	2054      	movs	r0, #84	; 0x54
 8001f44:	f7fe ff98 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 8001f48:	20a9      	movs	r0, #169	; 0xa9
 8001f4a:	f7fe ff95 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8001f4e:	2043      	movs	r0, #67	; 0x43
 8001f50:	f7fe ff92 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8001f54:	200a      	movs	r0, #10
 8001f56:	f7fe ff8f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001f5a:	200f      	movs	r0, #15
 8001f5c:	f7fe ff8c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f7fe ff89 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7fe ff86 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7fe ff83 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7fe ff80 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 8001f78:	20e1      	movs	r0, #225	; 0xe1
 8001f7a:	f7fe ff6d 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7fe ff7a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 8001f84:	2015      	movs	r0, #21
 8001f86:	f7fe ff77 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8001f8a:	2017      	movs	r0, #23
 8001f8c:	f7fe ff74 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 8001f90:	2007      	movs	r0, #7
 8001f92:	f7fe ff71 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8001f96:	2011      	movs	r0, #17
 8001f98:	f7fe ff6e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 8001f9c:	2006      	movs	r0, #6
 8001f9e:	f7fe ff6b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 8001fa2:	202b      	movs	r0, #43	; 0x2b
 8001fa4:	f7fe ff68 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8001fa8:	2056      	movs	r0, #86	; 0x56
 8001faa:	f7fe ff65 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8001fae:	203c      	movs	r0, #60	; 0x3c
 8001fb0:	f7fe ff62 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8001fb4:	2005      	movs	r0, #5
 8001fb6:	f7fe ff5f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001fba:	2010      	movs	r0, #16
 8001fbc:	f7fe ff5c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001fc0:	200f      	movs	r0, #15
 8001fc2:	f7fe ff59 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001fc6:	203f      	movs	r0, #63	; 0x3f
 8001fc8:	f7fe ff56 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001fcc:	203f      	movs	r0, #63	; 0x3f
 8001fce:	f7fe ff53 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001fd2:	200f      	movs	r0, #15
 8001fd4:	f7fe ff50 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 8001fd8:	202b      	movs	r0, #43	; 0x2b
 8001fda:	f7fe ff3d 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7fe ff4a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7fe ff47 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8001fea:	2001      	movs	r0, #1
 8001fec:	f7fe ff44 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 8001ff0:	203f      	movs	r0, #63	; 0x3f
 8001ff2:	f7fe ff41 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 8001ff6:	202a      	movs	r0, #42	; 0x2a
 8001ff8:	f7fe ff2e 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7fe ff3b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002002:	2000      	movs	r0, #0
 8002004:	f7fe ff38 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002008:	2000      	movs	r0, #0
 800200a:	f7fe ff35 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 800200e:	20ef      	movs	r0, #239	; 0xef
 8002010:	f7fe ff32 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 8002014:	2011      	movs	r0, #17
 8002016:	f7fe ff1f 	bl	8000e58 <LCD_WR_REG>
		HAL_Delay(20);
 800201a:	2014      	movs	r0, #20
 800201c:	f003 fce4 	bl	80059e8 <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 8002020:	2029      	movs	r0, #41	; 0x29
 8002022:	f7fe ff19 	bl	8000e58 <LCD_WR_REG>
 8002026:	f003 b928 	b.w	800527a <LCD_Init+0x3852>
 800202a:	bf00      	nop
 800202c:	20000258 	.word	0x20000258
 8002030:	08011cd0 	.word	0x08011cd0
 8002034:	080093c0 	.word	0x080093c0
 8002038:	080093d4 	.word	0x080093d4
	}else if(lcddev.id==0x6804) //6804初始化
 800203c:	4b58      	ldr	r3, [pc, #352]	; (80021a0 <LCD_Init+0x778>)
 800203e:	889b      	ldrh	r3, [r3, #4]
 8002040:	f646 0204 	movw	r2, #26628	; 0x6804
 8002044:	4293      	cmp	r3, r2
 8002046:	f040 80ad 	bne.w	80021a4 <LCD_Init+0x77c>
	{
		LCD_WR_REG(0X11);
 800204a:	2011      	movs	r0, #17
 800204c:	f7fe ff04 	bl	8000e58 <LCD_WR_REG>
		HAL_Delay(20);
 8002050:	2014      	movs	r0, #20
 8002052:	f003 fcc9 	bl	80059e8 <HAL_Delay>
		LCD_WR_REG(0XD0);//VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002056:	20d0      	movs	r0, #208	; 0xd0
 8002058:	f7fe fefe 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X07);
 800205c:	2007      	movs	r0, #7
 800205e:	f7fe ff0b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X42);
 8002062:	2042      	movs	r0, #66	; 0x42
 8002064:	f7fe ff08 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X1D);
 8002068:	201d      	movs	r0, #29
 800206a:	f7fe ff05 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0XD1);//VCOMH VCOM_AC amplitude setting
 800206e:	20d1      	movs	r0, #209	; 0xd1
 8002070:	f7fe fef2 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002074:	2000      	movs	r0, #0
 8002076:	f7fe feff 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X1a);
 800207a:	201a      	movs	r0, #26
 800207c:	f7fe fefc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X09);
 8002080:	2009      	movs	r0, #9
 8002082:	f7fe fef9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0XD2);//Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002086:	20d2      	movs	r0, #210	; 0xd2
 8002088:	f7fe fee6 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 800208c:	2001      	movs	r0, #1
 800208e:	f7fe fef3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X22);
 8002092:	2022      	movs	r0, #34	; 0x22
 8002094:	f7fe fef0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0XC0);//REV SM GS
 8002098:	20c0      	movs	r0, #192	; 0xc0
 800209a:	f7fe fedd 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X10);
 800209e:	2010      	movs	r0, #16
 80020a0:	f7fe feea 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X3B);
 80020a4:	203b      	movs	r0, #59	; 0x3b
 80020a6:	f7fe fee7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7fe fee4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X02);
 80020b0:	2002      	movs	r0, #2
 80020b2:	f7fe fee1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X11);
 80020b6:	2011      	movs	r0, #17
 80020b8:	f7fe fede 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0XC5);// Frame rate setting = 72HZ  when setting 0x03
 80020bc:	20c5      	movs	r0, #197	; 0xc5
 80020be:	f7fe fecb 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X03);
 80020c2:	2003      	movs	r0, #3
 80020c4:	f7fe fed8 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0XC8);//Gamma setting
 80020c8:	20c8      	movs	r0, #200	; 0xc8
 80020ca:	f7fe fec5 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7fe fed2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 80020d4:	2025      	movs	r0, #37	; 0x25
 80020d6:	f7fe fecf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X21);
 80020da:	2021      	movs	r0, #33	; 0x21
 80020dc:	f7fe fecc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X05);
 80020e0:	2005      	movs	r0, #5
 80020e2:	f7fe fec9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80020e6:	2000      	movs	r0, #0
 80020e8:	f7fe fec6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X0a);
 80020ec:	200a      	movs	r0, #10
 80020ee:	f7fe fec3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X65);
 80020f2:	2065      	movs	r0, #101	; 0x65
 80020f4:	f7fe fec0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 80020f8:	2025      	movs	r0, #37	; 0x25
 80020fa:	f7fe febd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X77);
 80020fe:	2077      	movs	r0, #119	; 0x77
 8002100:	f7fe feba 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X50);
 8002104:	2050      	movs	r0, #80	; 0x50
 8002106:	f7fe feb7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X0f);
 800210a:	200f      	movs	r0, #15
 800210c:	f7fe feb4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002110:	2000      	movs	r0, #0
 8002112:	f7fe feb1 	bl	8000e78 <LCD_WR_DATA>

   		LCD_WR_REG(0XF8);
 8002116:	20f8      	movs	r0, #248	; 0xf8
 8002118:	f7fe fe9e 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 800211c:	2001      	movs	r0, #1
 800211e:	f7fe feab 	bl	8000e78 <LCD_WR_DATA>

 		LCD_WR_REG(0XFE);
 8002122:	20fe      	movs	r0, #254	; 0xfe
 8002124:	f7fe fe98 	bl	8000e58 <LCD_WR_REG>
 		LCD_WR_DATA(0X00);
 8002128:	2000      	movs	r0, #0
 800212a:	f7fe fea5 	bl	8000e78 <LCD_WR_DATA>
 		LCD_WR_DATA(0X02);
 800212e:	2002      	movs	r0, #2
 8002130:	f7fe fea2 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0X20);//Exit invert mode
 8002134:	2020      	movs	r0, #32
 8002136:	f7fe fe8f 	bl	8000e58 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 800213a:	2036      	movs	r0, #54	; 0x36
 800213c:	f7fe fe8c 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X08);//原来是a
 8002140:	2008      	movs	r0, #8
 8002142:	f7fe fe99 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0X3A);
 8002146:	203a      	movs	r0, #58	; 0x3a
 8002148:	f7fe fe86 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X55);//16位模式
 800214c:	2055      	movs	r0, #85	; 0x55
 800214e:	f7fe fe93 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0X2B);
 8002152:	202b      	movs	r0, #43	; 0x2b
 8002154:	f7fe fe80 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002158:	2000      	movs	r0, #0
 800215a:	f7fe fe8d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 800215e:	2000      	movs	r0, #0
 8002160:	f7fe fe8a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8002164:	2001      	movs	r0, #1
 8002166:	f7fe fe87 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X3F);
 800216a:	203f      	movs	r0, #63	; 0x3f
 800216c:	f7fe fe84 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0X2A);
 8002170:	202a      	movs	r0, #42	; 0x2a
 8002172:	f7fe fe71 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002176:	2000      	movs	r0, #0
 8002178:	f7fe fe7e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 800217c:	2000      	movs	r0, #0
 800217e:	f7fe fe7b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8002182:	2001      	movs	r0, #1
 8002184:	f7fe fe78 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0XDF);
 8002188:	20df      	movs	r0, #223	; 0xdf
 800218a:	f7fe fe75 	bl	8000e78 <LCD_WR_DATA>
		HAL_Delay(120);
 800218e:	2078      	movs	r0, #120	; 0x78
 8002190:	f003 fc2a 	bl	80059e8 <HAL_Delay>
		LCD_WR_REG(0X29);
 8002194:	2029      	movs	r0, #41	; 0x29
 8002196:	f7fe fe5f 	bl	8000e58 <LCD_WR_REG>
 800219a:	f003 b86e 	b.w	800527a <LCD_Init+0x3852>
 800219e:	bf00      	nop
 80021a0:	20000258 	.word	0x20000258
 	}else if(lcddev.id==0x5310)
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <LCD_Init+0x78c>)
 80021a6:	889b      	ldrh	r3, [r3, #4]
 80021a8:	f245 3210 	movw	r2, #21264	; 0x5310
 80021ac:	4293      	cmp	r3, r2
 80021ae:	f040 877c 	bne.w	80030aa <LCD_Init+0x1682>
 80021b2:	e001      	b.n	80021b8 <LCD_Init+0x790>
 80021b4:	20000258 	.word	0x20000258
	{
		LCD_WR_REG(0xED);
 80021b8:	20ed      	movs	r0, #237	; 0xed
 80021ba:	f7fe fe4d 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80021be:	2001      	movs	r0, #1
 80021c0:	f7fe fe5a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 80021c4:	20fe      	movs	r0, #254	; 0xfe
 80021c6:	f7fe fe57 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 80021ca:	20ee      	movs	r0, #238	; 0xee
 80021cc:	f7fe fe44 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 80021d0:	20de      	movs	r0, #222	; 0xde
 80021d2:	f7fe fe51 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80021d6:	2021      	movs	r0, #33	; 0x21
 80021d8:	f7fe fe4e 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 80021dc:	20f1      	movs	r0, #241	; 0xf1
 80021de:	f7fe fe3b 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80021e2:	2001      	movs	r0, #1
 80021e4:	f7fe fe48 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 80021e8:	20df      	movs	r0, #223	; 0xdf
 80021ea:	f7fe fe35 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 80021ee:	2010      	movs	r0, #16
 80021f0:	f7fe fe42 	bl	8000e78 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80021f4:	20c4      	movs	r0, #196	; 0xc4
 80021f6:	f7fe fe2f 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 80021fa:	208f      	movs	r0, #143	; 0x8f
 80021fc:	f7fe fe3c 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8002200:	20c6      	movs	r0, #198	; 0xc6
 8002202:	f7fe fe29 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002206:	2000      	movs	r0, #0
 8002208:	f7fe fe36 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 800220c:	20e2      	movs	r0, #226	; 0xe2
 800220e:	f7fe fe33 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8002212:	20e2      	movs	r0, #226	; 0xe2
 8002214:	f7fe fe30 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8002218:	20e2      	movs	r0, #226	; 0xe2
 800221a:	f7fe fe2d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 800221e:	20bf      	movs	r0, #191	; 0xbf
 8002220:	f7fe fe1a 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002224:	20aa      	movs	r0, #170	; 0xaa
 8002226:	f7fe fe27 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 800222a:	20b0      	movs	r0, #176	; 0xb0
 800222c:	f7fe fe14 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 8002230:	200d      	movs	r0, #13
 8002232:	f7fe fe21 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002236:	2000      	movs	r0, #0
 8002238:	f7fe fe1e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 800223c:	200d      	movs	r0, #13
 800223e:	f7fe fe1b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002242:	2000      	movs	r0, #0
 8002244:	f7fe fe18 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8002248:	2011      	movs	r0, #17
 800224a:	f7fe fe15 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800224e:	2000      	movs	r0, #0
 8002250:	f7fe fe12 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8002254:	2019      	movs	r0, #25
 8002256:	f7fe fe0f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800225a:	2000      	movs	r0, #0
 800225c:	f7fe fe0c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002260:	2021      	movs	r0, #33	; 0x21
 8002262:	f7fe fe09 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002266:	2000      	movs	r0, #0
 8002268:	f7fe fe06 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 800226c:	202d      	movs	r0, #45	; 0x2d
 800226e:	f7fe fe03 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002272:	2000      	movs	r0, #0
 8002274:	f7fe fe00 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8002278:	203d      	movs	r0, #61	; 0x3d
 800227a:	f7fe fdfd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800227e:	2000      	movs	r0, #0
 8002280:	f7fe fdfa 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002284:	205d      	movs	r0, #93	; 0x5d
 8002286:	f7fe fdf7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800228a:	2000      	movs	r0, #0
 800228c:	f7fe fdf4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002290:	205d      	movs	r0, #93	; 0x5d
 8002292:	f7fe fdf1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002296:	2000      	movs	r0, #0
 8002298:	f7fe fdee 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 800229c:	20b1      	movs	r0, #177	; 0xb1
 800229e:	f7fe fddb 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 80022a2:	2080      	movs	r0, #128	; 0x80
 80022a4:	f7fe fde8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7fe fde5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80022ae:	208b      	movs	r0, #139	; 0x8b
 80022b0:	f7fe fde2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7fe fddf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 80022ba:	2096      	movs	r0, #150	; 0x96
 80022bc:	f7fe fddc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7fe fdd9 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 80022c6:	20b2      	movs	r0, #178	; 0xb2
 80022c8:	f7fe fdc6 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7fe fdd3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7fe fdd0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 80022d8:	2002      	movs	r0, #2
 80022da:	f7fe fdcd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022de:	2000      	movs	r0, #0
 80022e0:	f7fe fdca 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80022e4:	2003      	movs	r0, #3
 80022e6:	f7fe fdc7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7fe fdc4 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 80022f0:	20b3      	movs	r0, #179	; 0xb3
 80022f2:	f7fe fdb1 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f7fe fdbe 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7fe fdbb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002302:	2000      	movs	r0, #0
 8002304:	f7fe fdb8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002308:	2000      	movs	r0, #0
 800230a:	f7fe fdb5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800230e:	2000      	movs	r0, #0
 8002310:	f7fe fdb2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002314:	2000      	movs	r0, #0
 8002316:	f7fe fdaf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800231a:	2000      	movs	r0, #0
 800231c:	f7fe fdac 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002320:	2000      	movs	r0, #0
 8002322:	f7fe fda9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002326:	2000      	movs	r0, #0
 8002328:	f7fe fda6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe fda3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002332:	2000      	movs	r0, #0
 8002334:	f7fe fda0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002338:	2000      	movs	r0, #0
 800233a:	f7fe fd9d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800233e:	2000      	movs	r0, #0
 8002340:	f7fe fd9a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002344:	2000      	movs	r0, #0
 8002346:	f7fe fd97 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800234a:	2000      	movs	r0, #0
 800234c:	f7fe fd94 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002350:	2000      	movs	r0, #0
 8002352:	f7fe fd91 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002356:	2000      	movs	r0, #0
 8002358:	f7fe fd8e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800235c:	2000      	movs	r0, #0
 800235e:	f7fe fd8b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002362:	2000      	movs	r0, #0
 8002364:	f7fe fd88 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002368:	2000      	movs	r0, #0
 800236a:	f7fe fd85 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800236e:	2000      	movs	r0, #0
 8002370:	f7fe fd82 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002374:	2000      	movs	r0, #0
 8002376:	f7fe fd7f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800237a:	2000      	movs	r0, #0
 800237c:	f7fe fd7c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002380:	2000      	movs	r0, #0
 8002382:	f7fe fd79 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 8002386:	20b4      	movs	r0, #180	; 0xb4
 8002388:	f7fe fd66 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 800238c:	208b      	movs	r0, #139	; 0x8b
 800238e:	f7fe fd73 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002392:	2000      	movs	r0, #0
 8002394:	f7fe fd70 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8002398:	2096      	movs	r0, #150	; 0x96
 800239a:	f7fe fd6d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800239e:	2000      	movs	r0, #0
 80023a0:	f7fe fd6a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 80023a4:	20a1      	movs	r0, #161	; 0xa1
 80023a6:	f7fe fd67 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7fe fd64 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 80023b0:	20b5      	movs	r0, #181	; 0xb5
 80023b2:	f7fe fd51 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 80023b6:	2002      	movs	r0, #2
 80023b8:	f7fe fd5e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023bc:	2000      	movs	r0, #0
 80023be:	f7fe fd5b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80023c2:	2003      	movs	r0, #3
 80023c4:	f7fe fd58 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7fe fd55 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80023ce:	2004      	movs	r0, #4
 80023d0:	f7fe fd52 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7fe fd4f 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 80023da:	20b6      	movs	r0, #182	; 0xb6
 80023dc:	f7fe fd3c 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7fe fd49 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023e6:	2000      	movs	r0, #0
 80023e8:	f7fe fd46 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 80023ec:	20b7      	movs	r0, #183	; 0xb7
 80023ee:	f7fe fd33 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80023f2:	2000      	movs	r0, #0
 80023f4:	f7fe fd40 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023f8:	2000      	movs	r0, #0
 80023fa:	f7fe fd3d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80023fe:	203f      	movs	r0, #63	; 0x3f
 8002400:	f7fe fd3a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002404:	2000      	movs	r0, #0
 8002406:	f7fe fd37 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 800240a:	205e      	movs	r0, #94	; 0x5e
 800240c:	f7fe fd34 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002410:	2000      	movs	r0, #0
 8002412:	f7fe fd31 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002416:	2064      	movs	r0, #100	; 0x64
 8002418:	f7fe fd2e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800241c:	2000      	movs	r0, #0
 800241e:	f7fe fd2b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 8002422:	208c      	movs	r0, #140	; 0x8c
 8002424:	f7fe fd28 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002428:	2000      	movs	r0, #0
 800242a:	f7fe fd25 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 800242e:	20ac      	movs	r0, #172	; 0xac
 8002430:	f7fe fd22 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002434:	2000      	movs	r0, #0
 8002436:	f7fe fd1f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 800243a:	20dc      	movs	r0, #220	; 0xdc
 800243c:	f7fe fd1c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002440:	2000      	movs	r0, #0
 8002442:	f7fe fd19 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8002446:	2070      	movs	r0, #112	; 0x70
 8002448:	f7fe fd16 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800244c:	2000      	movs	r0, #0
 800244e:	f7fe fd13 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 8002452:	2090      	movs	r0, #144	; 0x90
 8002454:	f7fe fd10 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002458:	2000      	movs	r0, #0
 800245a:	f7fe fd0d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 800245e:	20eb      	movs	r0, #235	; 0xeb
 8002460:	f7fe fd0a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002464:	2000      	movs	r0, #0
 8002466:	f7fe fd07 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 800246a:	20dc      	movs	r0, #220	; 0xdc
 800246c:	f7fe fd04 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002470:	2000      	movs	r0, #0
 8002472:	f7fe fd01 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8002476:	20b8      	movs	r0, #184	; 0xb8
 8002478:	f7fe fcee 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800247c:	2000      	movs	r0, #0
 800247e:	f7fe fcfb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002482:	2000      	movs	r0, #0
 8002484:	f7fe fcf8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002488:	2000      	movs	r0, #0
 800248a:	f7fe fcf5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800248e:	2000      	movs	r0, #0
 8002490:	f7fe fcf2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002494:	2000      	movs	r0, #0
 8002496:	f7fe fcef 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800249a:	2000      	movs	r0, #0
 800249c:	f7fe fcec 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7fe fce9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7fe fce6 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 80024ac:	20ba      	movs	r0, #186	; 0xba
 80024ae:	f7fe fcd3 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 80024b2:	2024      	movs	r0, #36	; 0x24
 80024b4:	f7fe fce0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7fe fcdd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024be:	2000      	movs	r0, #0
 80024c0:	f7fe fcda 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7fe fcd7 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 80024ca:	20c1      	movs	r0, #193	; 0xc1
 80024cc:	f7fe fcc4 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 80024d0:	2020      	movs	r0, #32
 80024d2:	f7fe fcd1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f7fe fcce 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 80024dc:	2054      	movs	r0, #84	; 0x54
 80024de:	f7fe fccb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7fe fcc8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 80024e8:	20ff      	movs	r0, #255	; 0xff
 80024ea:	f7fe fcc5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ee:	2000      	movs	r0, #0
 80024f0:	f7fe fcc2 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 80024f4:	20c2      	movs	r0, #194	; 0xc2
 80024f6:	f7fe fcaf 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 80024fa:	200a      	movs	r0, #10
 80024fc:	f7fe fcbc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002500:	2000      	movs	r0, #0
 8002502:	f7fe fcb9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8002506:	2004      	movs	r0, #4
 8002508:	f7fe fcb6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800250c:	2000      	movs	r0, #0
 800250e:	f7fe fcb3 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 8002512:	20c3      	movs	r0, #195	; 0xc3
 8002514:	f7fe fca0 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8002518:	203c      	movs	r0, #60	; 0x3c
 800251a:	f7fe fcad 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800251e:	2000      	movs	r0, #0
 8002520:	f7fe fcaa 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8002524:	203a      	movs	r0, #58	; 0x3a
 8002526:	f7fe fca7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800252a:	2000      	movs	r0, #0
 800252c:	f7fe fca4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 8002530:	2039      	movs	r0, #57	; 0x39
 8002532:	f7fe fca1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002536:	2000      	movs	r0, #0
 8002538:	f7fe fc9e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 800253c:	2037      	movs	r0, #55	; 0x37
 800253e:	f7fe fc9b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002542:	2000      	movs	r0, #0
 8002544:	f7fe fc98 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002548:	203c      	movs	r0, #60	; 0x3c
 800254a:	f7fe fc95 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800254e:	2000      	movs	r0, #0
 8002550:	f7fe fc92 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002554:	2036      	movs	r0, #54	; 0x36
 8002556:	f7fe fc8f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800255a:	2000      	movs	r0, #0
 800255c:	f7fe fc8c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8002560:	2032      	movs	r0, #50	; 0x32
 8002562:	f7fe fc89 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002566:	2000      	movs	r0, #0
 8002568:	f7fe fc86 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 800256c:	202f      	movs	r0, #47	; 0x2f
 800256e:	f7fe fc83 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002572:	2000      	movs	r0, #0
 8002574:	f7fe fc80 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002578:	202c      	movs	r0, #44	; 0x2c
 800257a:	f7fe fc7d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800257e:	2000      	movs	r0, #0
 8002580:	f7fe fc7a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002584:	2029      	movs	r0, #41	; 0x29
 8002586:	f7fe fc77 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800258a:	2000      	movs	r0, #0
 800258c:	f7fe fc74 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8002590:	2026      	movs	r0, #38	; 0x26
 8002592:	f7fe fc71 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002596:	2000      	movs	r0, #0
 8002598:	f7fe fc6e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 800259c:	2024      	movs	r0, #36	; 0x24
 800259e:	f7fe fc6b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7fe fc68 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 80025a8:	2024      	movs	r0, #36	; 0x24
 80025aa:	f7fe fc65 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7fe fc62 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 80025b4:	2023      	movs	r0, #35	; 0x23
 80025b6:	f7fe fc5f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe fc5c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80025c0:	203c      	movs	r0, #60	; 0x3c
 80025c2:	f7fe fc59 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7fe fc56 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80025cc:	2036      	movs	r0, #54	; 0x36
 80025ce:	f7fe fc53 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025d2:	2000      	movs	r0, #0
 80025d4:	f7fe fc50 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 80025d8:	2032      	movs	r0, #50	; 0x32
 80025da:	f7fe fc4d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025de:	2000      	movs	r0, #0
 80025e0:	f7fe fc4a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 80025e4:	202f      	movs	r0, #47	; 0x2f
 80025e6:	f7fe fc47 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ea:	2000      	movs	r0, #0
 80025ec:	f7fe fc44 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 80025f0:	202c      	movs	r0, #44	; 0x2c
 80025f2:	f7fe fc41 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7fe fc3e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80025fc:	2029      	movs	r0, #41	; 0x29
 80025fe:	f7fe fc3b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002602:	2000      	movs	r0, #0
 8002604:	f7fe fc38 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8002608:	2026      	movs	r0, #38	; 0x26
 800260a:	f7fe fc35 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800260e:	2000      	movs	r0, #0
 8002610:	f7fe fc32 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002614:	2024      	movs	r0, #36	; 0x24
 8002616:	f7fe fc2f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe fc2c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002620:	2024      	movs	r0, #36	; 0x24
 8002622:	f7fe fc29 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002626:	2000      	movs	r0, #0
 8002628:	f7fe fc26 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 800262c:	2023      	movs	r0, #35	; 0x23
 800262e:	f7fe fc23 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002632:	2000      	movs	r0, #0
 8002634:	f7fe fc20 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8002638:	20c4      	movs	r0, #196	; 0xc4
 800263a:	f7fe fc0d 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 800263e:	2062      	movs	r0, #98	; 0x62
 8002640:	f7fe fc1a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002644:	2000      	movs	r0, #0
 8002646:	f7fe fc17 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 800264a:	2005      	movs	r0, #5
 800264c:	f7fe fc14 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002650:	2000      	movs	r0, #0
 8002652:	f7fe fc11 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002656:	2084      	movs	r0, #132	; 0x84
 8002658:	f7fe fc0e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe fc0b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8002662:	20f0      	movs	r0, #240	; 0xf0
 8002664:	f7fe fc08 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe fc05 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 800266e:	2018      	movs	r0, #24
 8002670:	f7fe fc02 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002674:	2000      	movs	r0, #0
 8002676:	f7fe fbff 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 800267a:	20a4      	movs	r0, #164	; 0xa4
 800267c:	f7fe fbfc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002680:	2000      	movs	r0, #0
 8002682:	f7fe fbf9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002686:	2018      	movs	r0, #24
 8002688:	f7fe fbf6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800268c:	2000      	movs	r0, #0
 800268e:	f7fe fbf3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002692:	2050      	movs	r0, #80	; 0x50
 8002694:	f7fe fbf0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002698:	2000      	movs	r0, #0
 800269a:	f7fe fbed 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 800269e:	200c      	movs	r0, #12
 80026a0:	f7fe fbea 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7fe fbe7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80026aa:	2017      	movs	r0, #23
 80026ac:	f7fe fbe4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026b0:	2000      	movs	r0, #0
 80026b2:	f7fe fbe1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 80026b6:	2095      	movs	r0, #149	; 0x95
 80026b8:	f7fe fbde 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7fe fbdb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80026c2:	20f3      	movs	r0, #243	; 0xf3
 80026c4:	f7fe fbd8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7fe fbd5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 80026ce:	20e6      	movs	r0, #230	; 0xe6
 80026d0:	f7fe fbd2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7fe fbcf 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 80026da:	20c5      	movs	r0, #197	; 0xc5
 80026dc:	f7fe fbbc 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 80026e0:	2032      	movs	r0, #50	; 0x32
 80026e2:	f7fe fbc9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7fe fbc6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80026ec:	2044      	movs	r0, #68	; 0x44
 80026ee:	f7fe fbc3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7fe fbc0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 80026f8:	2065      	movs	r0, #101	; 0x65
 80026fa:	f7fe fbbd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026fe:	2000      	movs	r0, #0
 8002700:	f7fe fbba 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002704:	2076      	movs	r0, #118	; 0x76
 8002706:	f7fe fbb7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800270a:	2000      	movs	r0, #0
 800270c:	f7fe fbb4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002710:	2088      	movs	r0, #136	; 0x88
 8002712:	f7fe fbb1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002716:	2000      	movs	r0, #0
 8002718:	f7fe fbae 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 800271c:	20c6      	movs	r0, #198	; 0xc6
 800271e:	f7fe fb9b 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8002722:	2020      	movs	r0, #32
 8002724:	f7fe fba8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002728:	2000      	movs	r0, #0
 800272a:	f7fe fba5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 800272e:	2017      	movs	r0, #23
 8002730:	f7fe fba2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002734:	2000      	movs	r0, #0
 8002736:	f7fe fb9f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 800273a:	2001      	movs	r0, #1
 800273c:	f7fe fb9c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002740:	2000      	movs	r0, #0
 8002742:	f7fe fb99 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8002746:	20c7      	movs	r0, #199	; 0xc7
 8002748:	f7fe fb86 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800274c:	2000      	movs	r0, #0
 800274e:	f7fe fb93 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002752:	2000      	movs	r0, #0
 8002754:	f7fe fb90 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002758:	2000      	movs	r0, #0
 800275a:	f7fe fb8d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800275e:	2000      	movs	r0, #0
 8002760:	f7fe fb8a 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8002764:	20c8      	movs	r0, #200	; 0xc8
 8002766:	f7fe fb77 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800276a:	2000      	movs	r0, #0
 800276c:	f7fe fb84 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002770:	2000      	movs	r0, #0
 8002772:	f7fe fb81 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002776:	2000      	movs	r0, #0
 8002778:	f7fe fb7e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800277c:	2000      	movs	r0, #0
 800277e:	f7fe fb7b 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 8002782:	20c9      	movs	r0, #201	; 0xc9
 8002784:	f7fe fb68 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002788:	2000      	movs	r0, #0
 800278a:	f7fe fb75 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800278e:	2000      	movs	r0, #0
 8002790:	f7fe fb72 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002794:	2000      	movs	r0, #0
 8002796:	f7fe fb6f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800279a:	2000      	movs	r0, #0
 800279c:	f7fe fb6c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7fe fb69 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fe fb66 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ac:	2000      	movs	r0, #0
 80027ae:	f7fe fb63 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe fb60 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7fe fb5d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027be:	2000      	movs	r0, #0
 80027c0:	f7fe fb5a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7fe fb57 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7fe fb54 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7fe fb51 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7fe fb4e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027dc:	2000      	movs	r0, #0
 80027de:	f7fe fb4b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027e2:	2000      	movs	r0, #0
 80027e4:	f7fe fb48 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 80027e8:	20e0      	movs	r0, #224	; 0xe0
 80027ea:	f7fe fb35 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80027ee:	2016      	movs	r0, #22
 80027f0:	f7fe fb42 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7fe fb3f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80027fa:	201c      	movs	r0, #28
 80027fc:	f7fe fb3c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe fb39 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002806:	2021      	movs	r0, #33	; 0x21
 8002808:	f7fe fb36 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800280c:	2000      	movs	r0, #0
 800280e:	f7fe fb33 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002812:	2036      	movs	r0, #54	; 0x36
 8002814:	f7fe fb30 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002818:	2000      	movs	r0, #0
 800281a:	f7fe fb2d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 800281e:	2046      	movs	r0, #70	; 0x46
 8002820:	f7fe fb2a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002824:	2000      	movs	r0, #0
 8002826:	f7fe fb27 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 800282a:	2052      	movs	r0, #82	; 0x52
 800282c:	f7fe fb24 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002830:	2000      	movs	r0, #0
 8002832:	f7fe fb21 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002836:	2064      	movs	r0, #100	; 0x64
 8002838:	f7fe fb1e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f7fe fb1b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8002842:	207a      	movs	r0, #122	; 0x7a
 8002844:	f7fe fb18 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe fb15 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800284e:	208b      	movs	r0, #139	; 0x8b
 8002850:	f7fe fb12 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002854:	2000      	movs	r0, #0
 8002856:	f7fe fb0f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800285a:	2099      	movs	r0, #153	; 0x99
 800285c:	f7fe fb0c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002860:	2000      	movs	r0, #0
 8002862:	f7fe fb09 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002866:	20a8      	movs	r0, #168	; 0xa8
 8002868:	f7fe fb06 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800286c:	2000      	movs	r0, #0
 800286e:	f7fe fb03 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8002872:	20b9      	movs	r0, #185	; 0xb9
 8002874:	f7fe fb00 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002878:	2000      	movs	r0, #0
 800287a:	f7fe fafd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800287e:	20c4      	movs	r0, #196	; 0xc4
 8002880:	f7fe fafa 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002884:	2000      	movs	r0, #0
 8002886:	f7fe faf7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 800288a:	20ca      	movs	r0, #202	; 0xca
 800288c:	f7fe faf4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002890:	2000      	movs	r0, #0
 8002892:	f7fe faf1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002896:	20d2      	movs	r0, #210	; 0xd2
 8002898:	f7fe faee 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800289c:	2000      	movs	r0, #0
 800289e:	f7fe faeb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 80028a2:	20d9      	movs	r0, #217	; 0xd9
 80028a4:	f7fe fae8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7fe fae5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 80028ae:	20e0      	movs	r0, #224	; 0xe0
 80028b0:	f7fe fae2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7fe fadf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80028ba:	20f3      	movs	r0, #243	; 0xf3
 80028bc:	f7fe fadc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7fe fad9 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 80028c6:	20e1      	movs	r0, #225	; 0xe1
 80028c8:	f7fe fac6 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80028cc:	2016      	movs	r0, #22
 80028ce:	f7fe fad3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7fe fad0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80028d8:	201c      	movs	r0, #28
 80028da:	f7fe facd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f7fe faca 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 80028e4:	2022      	movs	r0, #34	; 0x22
 80028e6:	f7fe fac7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7fe fac4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80028f0:	2036      	movs	r0, #54	; 0x36
 80028f2:	f7fe fac1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe fabe 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80028fc:	2045      	movs	r0, #69	; 0x45
 80028fe:	f7fe fabb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe fab8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8002908:	2052      	movs	r0, #82	; 0x52
 800290a:	f7fe fab5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe fab2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002914:	2064      	movs	r0, #100	; 0x64
 8002916:	f7fe faaf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800291a:	2000      	movs	r0, #0
 800291c:	f7fe faac 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8002920:	207a      	movs	r0, #122	; 0x7a
 8002922:	f7fe faa9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002926:	2000      	movs	r0, #0
 8002928:	f7fe faa6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800292c:	208b      	movs	r0, #139	; 0x8b
 800292e:	f7fe faa3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe faa0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002938:	2099      	movs	r0, #153	; 0x99
 800293a:	f7fe fa9d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800293e:	2000      	movs	r0, #0
 8002940:	f7fe fa9a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002944:	20a8      	movs	r0, #168	; 0xa8
 8002946:	f7fe fa97 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800294a:	2000      	movs	r0, #0
 800294c:	f7fe fa94 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8002950:	20b9      	movs	r0, #185	; 0xb9
 8002952:	f7fe fa91 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002956:	2000      	movs	r0, #0
 8002958:	f7fe fa8e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800295c:	20c4      	movs	r0, #196	; 0xc4
 800295e:	f7fe fa8b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002962:	2000      	movs	r0, #0
 8002964:	f7fe fa88 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002968:	20ca      	movs	r0, #202	; 0xca
 800296a:	f7fe fa85 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800296e:	2000      	movs	r0, #0
 8002970:	f7fe fa82 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002974:	20d2      	movs	r0, #210	; 0xd2
 8002976:	f7fe fa7f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800297a:	2000      	movs	r0, #0
 800297c:	f7fe fa7c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 8002980:	20d8      	movs	r0, #216	; 0xd8
 8002982:	f7fe fa79 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002986:	2000      	movs	r0, #0
 8002988:	f7fe fa76 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 800298c:	20e0      	movs	r0, #224	; 0xe0
 800298e:	f7fe fa73 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002992:	2000      	movs	r0, #0
 8002994:	f7fe fa70 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002998:	20f3      	movs	r0, #243	; 0xf3
 800299a:	f7fe fa6d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800299e:	2000      	movs	r0, #0
 80029a0:	f7fe fa6a 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 80029a4:	20e2      	movs	r0, #226	; 0xe2
 80029a6:	f7fe fa57 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 80029aa:	2005      	movs	r0, #5
 80029ac:	f7fe fa64 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7fe fa61 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 80029b6:	200b      	movs	r0, #11
 80029b8:	f7fe fa5e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7fe fa5b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 80029c2:	201b      	movs	r0, #27
 80029c4:	f7fe fa58 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fe fa55 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80029ce:	2034      	movs	r0, #52	; 0x34
 80029d0:	f7fe fa52 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fe fa4f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80029da:	2044      	movs	r0, #68	; 0x44
 80029dc:	f7fe fa4c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7fe fa49 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 80029e6:	204f      	movs	r0, #79	; 0x4f
 80029e8:	f7fe fa46 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7fe fa43 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 80029f2:	2061      	movs	r0, #97	; 0x61
 80029f4:	f7fe fa40 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7fe fa3d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 80029fe:	2079      	movs	r0, #121	; 0x79
 8002a00:	f7fe fa3a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fe fa37 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002a0a:	2088      	movs	r0, #136	; 0x88
 8002a0c:	f7fe fa34 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fe fa31 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8002a16:	2097      	movs	r0, #151	; 0x97
 8002a18:	f7fe fa2e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7fe fa2b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8002a22:	20a6      	movs	r0, #166	; 0xa6
 8002a24:	f7fe fa28 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7fe fa25 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8002a2e:	20b7      	movs	r0, #183	; 0xb7
 8002a30:	f7fe fa22 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7fe fa1f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8002a3a:	20c2      	movs	r0, #194	; 0xc2
 8002a3c:	f7fe fa1c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7fe fa19 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8002a46:	20c7      	movs	r0, #199	; 0xc7
 8002a48:	f7fe fa16 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7fe fa13 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8002a52:	20d1      	movs	r0, #209	; 0xd1
 8002a54:	f7fe fa10 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7fe fa0d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 8002a5e:	20d6      	movs	r0, #214	; 0xd6
 8002a60:	f7fe fa0a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe fa07 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002a6a:	20dd      	movs	r0, #221	; 0xdd
 8002a6c:	f7fe fa04 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7fe fa01 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002a76:	20f3      	movs	r0, #243	; 0xf3
 8002a78:	f7fe f9fe 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7fe f9fb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 8002a82:	20e3      	movs	r0, #227	; 0xe3
 8002a84:	f7fe f9e8 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002a88:	2005      	movs	r0, #5
 8002a8a:	f7fe f9f5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7fe f9f2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8002a94:	200a      	movs	r0, #10
 8002a96:	f7fe f9ef 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7fe f9ec 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002aa0:	201c      	movs	r0, #28
 8002aa2:	f7fe f9e9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fe f9e6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002aac:	2033      	movs	r0, #51	; 0x33
 8002aae:	f7fe f9e3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7fe f9e0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002ab8:	2044      	movs	r0, #68	; 0x44
 8002aba:	f7fe f9dd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fe f9da 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002ac4:	2050      	movs	r0, #80	; 0x50
 8002ac6:	f7fe f9d7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fe f9d4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 8002ad0:	2062      	movs	r0, #98	; 0x62
 8002ad2:	f7fe f9d1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fe f9ce 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 8002adc:	2078      	movs	r0, #120	; 0x78
 8002ade:	f7fe f9cb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f7fe f9c8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ae8:	2088      	movs	r0, #136	; 0x88
 8002aea:	f7fe f9c5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7fe f9c2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8002af4:	2097      	movs	r0, #151	; 0x97
 8002af6:	f7fe f9bf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7fe f9bc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8002b00:	20a6      	movs	r0, #166	; 0xa6
 8002b02:	f7fe f9b9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7fe f9b6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8002b0c:	20b7      	movs	r0, #183	; 0xb7
 8002b0e:	f7fe f9b3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fe f9b0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8002b18:	20c2      	movs	r0, #194	; 0xc2
 8002b1a:	f7fe f9ad 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7fe f9aa 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8002b24:	20c7      	movs	r0, #199	; 0xc7
 8002b26:	f7fe f9a7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7fe f9a4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8002b30:	20d1      	movs	r0, #209	; 0xd1
 8002b32:	f7fe f9a1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7fe f99e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 8002b3c:	20d5      	movs	r0, #213	; 0xd5
 8002b3e:	f7fe f99b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7fe f998 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002b48:	20dd      	movs	r0, #221	; 0xdd
 8002b4a:	f7fe f995 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7fe f992 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002b54:	20f3      	movs	r0, #243	; 0xf3
 8002b56:	f7fe f98f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f7fe f98c 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8002b60:	20e4      	movs	r0, #228	; 0xe4
 8002b62:	f7fe f979 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002b66:	2001      	movs	r0, #1
 8002b68:	f7fe f986 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fe f983 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002b72:	2001      	movs	r0, #1
 8002b74:	f7fe f980 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fe f97d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002b7e:	2002      	movs	r0, #2
 8002b80:	f7fe f97a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fe f977 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8002b8a:	202a      	movs	r0, #42	; 0x2a
 8002b8c:	f7fe f974 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fe f971 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002b96:	203c      	movs	r0, #60	; 0x3c
 8002b98:	f7fe f96e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fe f96b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8002ba2:	204b      	movs	r0, #75	; 0x4b
 8002ba4:	f7fe f968 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fe f965 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002bae:	205d      	movs	r0, #93	; 0x5d
 8002bb0:	f7fe f962 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fe f95f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002bba:	2074      	movs	r0, #116	; 0x74
 8002bbc:	f7fe f95c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7fe f959 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002bc6:	2084      	movs	r0, #132	; 0x84
 8002bc8:	f7fe f956 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f7fe f953 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8002bd2:	2093      	movs	r0, #147	; 0x93
 8002bd4:	f7fe f950 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fe f94d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002bde:	20a2      	movs	r0, #162	; 0xa2
 8002be0:	f7fe f94a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fe f947 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002bea:	20b3      	movs	r0, #179	; 0xb3
 8002bec:	f7fe f944 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7fe f941 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8002bf6:	20be      	movs	r0, #190	; 0xbe
 8002bf8:	f7fe f93e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f7fe f93b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002c02:	20c4      	movs	r0, #196	; 0xc4
 8002c04:	f7fe f938 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7fe f935 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8002c0e:	20cd      	movs	r0, #205	; 0xcd
 8002c10:	f7fe f932 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fe f92f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8002c1a:	20d3      	movs	r0, #211	; 0xd3
 8002c1c:	f7fe f92c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7fe f929 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002c26:	20dd      	movs	r0, #221	; 0xdd
 8002c28:	f7fe f926 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7fe f923 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002c32:	20f3      	movs	r0, #243	; 0xf3
 8002c34:	f7fe f920 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f7fe f91d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 8002c3e:	20e5      	movs	r0, #229	; 0xe5
 8002c40:	f7fe f90a 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002c44:	2000      	movs	r0, #0
 8002c46:	f7fe f917 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7fe f914 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c50:	2000      	movs	r0, #0
 8002c52:	f7fe f911 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f7fe f90e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	f7fe f90b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c62:	2000      	movs	r0, #0
 8002c64:	f7fe f908 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002c68:	2029      	movs	r0, #41	; 0x29
 8002c6a:	f7fe f905 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f7fe f902 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002c74:	203c      	movs	r0, #60	; 0x3c
 8002c76:	f7fe f8ff 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f7fe f8fc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8002c80:	204b      	movs	r0, #75	; 0x4b
 8002c82:	f7fe f8f9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7fe f8f6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002c8c:	205d      	movs	r0, #93	; 0x5d
 8002c8e:	f7fe f8f3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7fe f8f0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002c98:	2074      	movs	r0, #116	; 0x74
 8002c9a:	f7fe f8ed 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fe f8ea 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002ca4:	2084      	movs	r0, #132	; 0x84
 8002ca6:	f7fe f8e7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7fe f8e4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8002cb0:	2093      	movs	r0, #147	; 0x93
 8002cb2:	f7fe f8e1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fe f8de 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002cbc:	20a2      	movs	r0, #162	; 0xa2
 8002cbe:	f7fe f8db 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f7fe f8d8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002cc8:	20b3      	movs	r0, #179	; 0xb3
 8002cca:	f7fe f8d5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fe f8d2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8002cd4:	20be      	movs	r0, #190	; 0xbe
 8002cd6:	f7fe f8cf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7fe f8cc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002ce0:	20c4      	movs	r0, #196	; 0xc4
 8002ce2:	f7fe f8c9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fe f8c6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8002cec:	20cd      	movs	r0, #205	; 0xcd
 8002cee:	f7fe f8c3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7fe f8c0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8002cf8:	20d3      	movs	r0, #211	; 0xd3
 8002cfa:	f7fe f8bd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f7fe f8ba 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002d04:	20dc      	movs	r0, #220	; 0xdc
 8002d06:	f7fe f8b7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7fe f8b4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002d10:	20f3      	movs	r0, #243	; 0xf3
 8002d12:	f7fe f8b1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7fe f8ae 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 8002d1c:	20e6      	movs	r0, #230	; 0xe6
 8002d1e:	f7fe f89b 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 8002d22:	2011      	movs	r0, #17
 8002d24:	f7fe f8a8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f7fe f8a5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8002d2e:	2034      	movs	r0, #52	; 0x34
 8002d30:	f7fe f8a2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7fe f89f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002d3a:	2056      	movs	r0, #86	; 0x56
 8002d3c:	f7fe f89c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d40:	2000      	movs	r0, #0
 8002d42:	f7fe f899 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002d46:	2076      	movs	r0, #118	; 0x76
 8002d48:	f7fe f896 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7fe f893 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002d52:	2077      	movs	r0, #119	; 0x77
 8002d54:	f7fe f890 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fe f88d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002d5e:	2066      	movs	r0, #102	; 0x66
 8002d60:	f7fe f88a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7fe f887 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002d6a:	2088      	movs	r0, #136	; 0x88
 8002d6c:	f7fe f884 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fe f881 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002d76:	2099      	movs	r0, #153	; 0x99
 8002d78:	f7fe f87e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fe f87b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002d82:	20bb      	movs	r0, #187	; 0xbb
 8002d84:	f7fe f878 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7fe f875 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002d8e:	2099      	movs	r0, #153	; 0x99
 8002d90:	f7fe f872 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fe f86f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002d9a:	2066      	movs	r0, #102	; 0x66
 8002d9c:	f7fe f86c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f7fe f869 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002da6:	2055      	movs	r0, #85	; 0x55
 8002da8:	f7fe f866 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fe f863 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002db2:	2055      	movs	r0, #85	; 0x55
 8002db4:	f7fe f860 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7fe f85d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002dbe:	2045      	movs	r0, #69	; 0x45
 8002dc0:	f7fe f85a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7fe f857 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8002dca:	2043      	movs	r0, #67	; 0x43
 8002dcc:	f7fe f854 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f7fe f851 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002dd6:	2044      	movs	r0, #68	; 0x44
 8002dd8:	f7fe f84e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7fe f84b 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 8002de2:	20e7      	movs	r0, #231	; 0xe7
 8002de4:	f7fe f838 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8002de8:	2032      	movs	r0, #50	; 0x32
 8002dea:	f7fe f845 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dee:	2000      	movs	r0, #0
 8002df0:	f7fe f842 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002df4:	2055      	movs	r0, #85	; 0x55
 8002df6:	f7fe f83f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f7fe f83c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002e00:	2076      	movs	r0, #118	; 0x76
 8002e02:	f7fe f839 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e06:	2000      	movs	r0, #0
 8002e08:	f7fe f836 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002e0c:	2066      	movs	r0, #102	; 0x66
 8002e0e:	f7fe f833 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7fe f830 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8002e18:	2067      	movs	r0, #103	; 0x67
 8002e1a:	f7fe f82d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f7fe f82a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8002e24:	2067      	movs	r0, #103	; 0x67
 8002e26:	f7fe f827 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fe f824 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002e30:	2087      	movs	r0, #135	; 0x87
 8002e32:	f7fe f821 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7fe f81e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002e3c:	2099      	movs	r0, #153	; 0x99
 8002e3e:	f7fe f81b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7fe f818 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002e48:	20bb      	movs	r0, #187	; 0xbb
 8002e4a:	f7fe f815 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7fe f812 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002e54:	2099      	movs	r0, #153	; 0x99
 8002e56:	f7fe f80f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7fe f80c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002e60:	2077      	movs	r0, #119	; 0x77
 8002e62:	f7fe f809 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7fe f806 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002e6c:	2044      	movs	r0, #68	; 0x44
 8002e6e:	f7fe f803 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fe f800 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002e78:	2056      	movs	r0, #86	; 0x56
 8002e7a:	f7fd fffd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7fd fffa 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002e84:	2023      	movs	r0, #35	; 0x23
 8002e86:	f7fd fff7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7fd fff4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002e90:	2033      	movs	r0, #51	; 0x33
 8002e92:	f7fd fff1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7fd ffee 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002e9c:	2045      	movs	r0, #69	; 0x45
 8002e9e:	f7fd ffeb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fd ffe8 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8002ea8:	20e8      	movs	r0, #232	; 0xe8
 8002eaa:	f7fd ffd5 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f7fd ffe2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f7fd ffdf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002eba:	2099      	movs	r0, #153	; 0x99
 8002ebc:	f7fd ffdc 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f7fd ffd9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002ec6:	2087      	movs	r0, #135	; 0x87
 8002ec8:	f7fd ffd6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ecc:	2000      	movs	r0, #0
 8002ece:	f7fd ffd3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ed2:	2088      	movs	r0, #136	; 0x88
 8002ed4:	f7fd ffd0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f7fd ffcd 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002ede:	2077      	movs	r0, #119	; 0x77
 8002ee0:	f7fd ffca 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f7fd ffc7 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002eea:	2066      	movs	r0, #102	; 0x66
 8002eec:	f7fd ffc4 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f7fd ffc1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ef6:	2088      	movs	r0, #136	; 0x88
 8002ef8:	f7fd ffbe 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7fd ffbb 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 8002f02:	20aa      	movs	r0, #170	; 0xaa
 8002f04:	f7fd ffb8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f7fd ffb5 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002f0e:	20bb      	movs	r0, #187	; 0xbb
 8002f10:	f7fd ffb2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7fd ffaf 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002f1a:	2099      	movs	r0, #153	; 0x99
 8002f1c:	f7fd ffac 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7fd ffa9 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002f26:	2066      	movs	r0, #102	; 0x66
 8002f28:	f7fd ffa6 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7fd ffa3 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002f32:	2055      	movs	r0, #85	; 0x55
 8002f34:	f7fd ffa0 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7fd ff9d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002f3e:	2055      	movs	r0, #85	; 0x55
 8002f40:	f7fd ff9a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f7fd ff97 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002f4a:	2044      	movs	r0, #68	; 0x44
 8002f4c:	f7fd ff94 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7fd ff91 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002f56:	2044      	movs	r0, #68	; 0x44
 8002f58:	f7fd ff8e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fd ff8b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002f62:	2055      	movs	r0, #85	; 0x55
 8002f64:	f7fd ff88 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fd ff85 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 8002f6e:	20e9      	movs	r0, #233	; 0xe9
 8002f70:	f7fd ff72 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002f74:	20aa      	movs	r0, #170	; 0xaa
 8002f76:	f7fd ff7f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f7fd ff7c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fd ff79 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f86:	2000      	movs	r0, #0
 8002f88:	f7fd ff76 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7fd ff63 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002f92:	20aa      	movs	r0, #170	; 0xaa
 8002f94:	f7fd ff70 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8002f98:	20cf      	movs	r0, #207	; 0xcf
 8002f9a:	f7fd ff5d 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f7fd ff6a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7fd ff67 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002faa:	2000      	movs	r0, #0
 8002fac:	f7fd ff64 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7fd ff61 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	f7fd ff5e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7fd ff5b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	f7fd ff58 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f7fd ff55 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7fd ff52 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7fd ff4f 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f7fd ff4c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7fd ff49 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fd ff46 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fec:	2000      	movs	r0, #0
 8002fee:	f7fd ff43 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7fd ff40 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f7fd ff3d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ffe:	2000      	movs	r0, #0
 8003000:	f7fd ff3a 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 8003004:	20f0      	movs	r0, #240	; 0xf0
 8003006:	f7fd ff27 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800300a:	2000      	movs	r0, #0
 800300c:	f7fd ff34 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8003010:	2050      	movs	r0, #80	; 0x50
 8003012:	f7fd ff31 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003016:	2000      	movs	r0, #0
 8003018:	f7fd ff2e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800301c:	2000      	movs	r0, #0
 800301e:	f7fd ff2b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003022:	2000      	movs	r0, #0
 8003024:	f7fd ff28 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8003028:	20f3      	movs	r0, #243	; 0xf3
 800302a:	f7fd ff15 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800302e:	2000      	movs	r0, #0
 8003030:	f7fd ff22 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 8003034:	20f9      	movs	r0, #249	; 0xf9
 8003036:	f7fd ff0f 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 800303a:	2006      	movs	r0, #6
 800303c:	f7fd ff1c 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8003040:	2010      	movs	r0, #16
 8003042:	f7fd ff19 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003046:	2029      	movs	r0, #41	; 0x29
 8003048:	f7fd ff16 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800304c:	2000      	movs	r0, #0
 800304e:	f7fd ff13 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 8003052:	203a      	movs	r0, #58	; 0x3a
 8003054:	f7fd ff00 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8003058:	2055      	movs	r0, #85	; 0x55
 800305a:	f7fd ff0d 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 800305e:	2011      	movs	r0, #17
 8003060:	f7fd fefa 	bl	8000e58 <LCD_WR_REG>
		HAL_Delay(100);
 8003064:	2064      	movs	r0, #100	; 0x64
 8003066:	f002 fcbf 	bl	80059e8 <HAL_Delay>
		LCD_WR_REG(0x29);
 800306a:	2029      	movs	r0, #41	; 0x29
 800306c:	f7fd fef4 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003070:	2035      	movs	r0, #53	; 0x35
 8003072:	f7fd fef1 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003076:	2000      	movs	r0, #0
 8003078:	f7fd fefe 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 800307c:	2051      	movs	r0, #81	; 0x51
 800307e:	f7fd feeb 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 8003082:	20ff      	movs	r0, #255	; 0xff
 8003084:	f7fd fef8 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8003088:	2053      	movs	r0, #83	; 0x53
 800308a:	f7fd fee5 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 800308e:	202c      	movs	r0, #44	; 0x2c
 8003090:	f7fd fef2 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8003094:	2055      	movs	r0, #85	; 0x55
 8003096:	f7fd fedf 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 800309a:	2082      	movs	r0, #130	; 0x82
 800309c:	f7fd feec 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80030a0:	202c      	movs	r0, #44	; 0x2c
 80030a2:	f7fd fed9 	bl	8000e58 <LCD_WR_REG>
 80030a6:	f002 b8e8 	b.w	800527a <LCD_Init+0x3852>
	}else if(lcddev.id==0x5510)
 80030aa:	4b04      	ldr	r3, [pc, #16]	; (80030bc <LCD_Init+0x1694>)
 80030ac:	889b      	ldrh	r3, [r3, #4]
 80030ae:	f245 5210 	movw	r2, #21776	; 0x5510
 80030b2:	4293      	cmp	r3, r2
 80030b4:	f040 8782 	bne.w	8003fbc <LCD_Init+0x2594>
 80030b8:	e002      	b.n	80030c0 <LCD_Init+0x1698>
 80030ba:	bf00      	nop
 80030bc:	20000258 	.word	0x20000258
	{
		LCD_WriteReg(0xF000,0x55);
 80030c0:	2155      	movs	r1, #85	; 0x55
 80030c2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80030c6:	f7fd fef5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 80030ca:	21aa      	movs	r1, #170	; 0xaa
 80030cc:	f24f 0001 	movw	r0, #61441	; 0xf001
 80030d0:	f7fd fef0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 80030d4:	2152      	movs	r1, #82	; 0x52
 80030d6:	f24f 0002 	movw	r0, #61442	; 0xf002
 80030da:	f7fd feeb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 80030de:	2108      	movs	r1, #8
 80030e0:	f24f 0003 	movw	r0, #61443	; 0xf003
 80030e4:	f7fd fee6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 80030e8:	2101      	movs	r1, #1
 80030ea:	f24f 0004 	movw	r0, #61444	; 0xf004
 80030ee:	f7fd fee1 	bl	8000eb4 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 80030f2:	210d      	movs	r1, #13
 80030f4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80030f8:	f7fd fedc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 80030fc:	210d      	movs	r1, #13
 80030fe:	f24b 0001 	movw	r0, #45057	; 0xb001
 8003102:	f7fd fed7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 8003106:	210d      	movs	r1, #13
 8003108:	f24b 0002 	movw	r0, #45058	; 0xb002
 800310c:	f7fd fed2 	bl	8000eb4 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 8003110:	2134      	movs	r1, #52	; 0x34
 8003112:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003116:	f7fd fecd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 800311a:	2134      	movs	r1, #52	; 0x34
 800311c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003120:	f7fd fec8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8003124:	2134      	movs	r1, #52	; 0x34
 8003126:	f24b 6002 	movw	r0, #46594	; 0xb602
 800312a:	f7fd fec3 	bl	8000eb4 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 800312e:	210d      	movs	r1, #13
 8003130:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003134:	f7fd febe 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8003138:	210d      	movs	r1, #13
 800313a:	f24b 1001 	movw	r0, #45313	; 0xb101
 800313e:	f7fd feb9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 8003142:	210d      	movs	r1, #13
 8003144:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003148:	f7fd feb4 	bl	8000eb4 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 800314c:	2134      	movs	r1, #52	; 0x34
 800314e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003152:	f7fd feaf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8003156:	2134      	movs	r1, #52	; 0x34
 8003158:	f24b 7001 	movw	r0, #46849	; 0xb701
 800315c:	f7fd feaa 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8003160:	2134      	movs	r1, #52	; 0x34
 8003162:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003166:	f7fd fea5 	bl	8000eb4 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 800316a:	2100      	movs	r1, #0
 800316c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003170:	f7fd fea0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8003174:	2100      	movs	r1, #0
 8003176:	f24b 2001 	movw	r0, #45569	; 0xb201
 800317a:	f7fd fe9b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 800317e:	2100      	movs	r1, #0
 8003180:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003184:	f7fd fe96 	bl	8000eb4 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8003188:	2124      	movs	r1, #36	; 0x24
 800318a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800318e:	f7fd fe91 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 8003192:	2124      	movs	r1, #36	; 0x24
 8003194:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003198:	f7fd fe8c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 800319c:	2124      	movs	r1, #36	; 0x24
 800319e:	f64b 0002 	movw	r0, #47106	; 0xb802
 80031a2:	f7fd fe87 	bl	8000eb4 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 80031a6:	2101      	movs	r1, #1
 80031a8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80031ac:	f7fd fe82 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 80031b0:	210f      	movs	r1, #15
 80031b2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80031b6:	f7fd fe7d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 80031ba:	210f      	movs	r1, #15
 80031bc:	f24b 3001 	movw	r0, #45825	; 0xb301
 80031c0:	f7fd fe78 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 80031c4:	210f      	movs	r1, #15
 80031c6:	f24b 3002 	movw	r0, #45826	; 0xb302
 80031ca:	f7fd fe73 	bl	8000eb4 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 80031ce:	2134      	movs	r1, #52	; 0x34
 80031d0:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80031d4:	f7fd fe6e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 80031d8:	2134      	movs	r1, #52	; 0x34
 80031da:	f64b 1001 	movw	r0, #47361	; 0xb901
 80031de:	f7fd fe69 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 80031e2:	2134      	movs	r1, #52	; 0x34
 80031e4:	f64b 1002 	movw	r0, #47362	; 0xb902
 80031e8:	f7fd fe64 	bl	8000eb4 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 80031ec:	2108      	movs	r1, #8
 80031ee:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80031f2:	f7fd fe5f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 80031f6:	2108      	movs	r1, #8
 80031f8:	f24b 5001 	movw	r0, #46337	; 0xb501
 80031fc:	f7fd fe5a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 8003200:	2108      	movs	r1, #8
 8003202:	f24b 5002 	movw	r0, #46338	; 0xb502
 8003206:	f7fd fe55 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 800320a:	2103      	movs	r1, #3
 800320c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003210:	f7fd fe50 	bl	8000eb4 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8003214:	2124      	movs	r1, #36	; 0x24
 8003216:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800321a:	f7fd fe4b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 800321e:	2124      	movs	r1, #36	; 0x24
 8003220:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003224:	f7fd fe46 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8003228:	2124      	movs	r1, #36	; 0x24
 800322a:	f64b 2002 	movw	r0, #47618	; 0xba02
 800322e:	f7fd fe41 	bl	8000eb4 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 8003232:	2100      	movs	r1, #0
 8003234:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003238:	f7fd fe3c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 800323c:	2178      	movs	r1, #120	; 0x78
 800323e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003242:	f7fd fe37 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003246:	2100      	movs	r1, #0
 8003248:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800324c:	f7fd fe32 	bl	8000eb4 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8003250:	2100      	movs	r1, #0
 8003252:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003256:	f7fd fe2d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 800325a:	2178      	movs	r1, #120	; 0x78
 800325c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003260:	f7fd fe28 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8003264:	2100      	movs	r1, #0
 8003266:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800326a:	f7fd fe23 	bl	8000eb4 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 800326e:	2100      	movs	r1, #0
 8003270:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003274:	f7fd fe1e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8003278:	2164      	movs	r1, #100	; 0x64
 800327a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800327e:	f7fd fe19 	bl	8000eb4 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 8003282:	2100      	movs	r1, #0
 8003284:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003288:	f7fd fe14 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 800328c:	2133      	movs	r1, #51	; 0x33
 800328e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003292:	f7fd fe0f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8003296:	2100      	movs	r1, #0
 8003298:	f24d 1002 	movw	r0, #53506	; 0xd102
 800329c:	f7fd fe0a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 80032a0:	2134      	movs	r1, #52	; 0x34
 80032a2:	f24d 1003 	movw	r0, #53507	; 0xd103
 80032a6:	f7fd fe05 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 80032aa:	2100      	movs	r1, #0
 80032ac:	f24d 1004 	movw	r0, #53508	; 0xd104
 80032b0:	f7fd fe00 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 80032b4:	213a      	movs	r1, #58	; 0x3a
 80032b6:	f24d 1005 	movw	r0, #53509	; 0xd105
 80032ba:	f7fd fdfb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 80032be:	2100      	movs	r1, #0
 80032c0:	f24d 1006 	movw	r0, #53510	; 0xd106
 80032c4:	f7fd fdf6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 80032c8:	214a      	movs	r1, #74	; 0x4a
 80032ca:	f24d 1007 	movw	r0, #53511	; 0xd107
 80032ce:	f7fd fdf1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 80032d2:	2100      	movs	r1, #0
 80032d4:	f24d 1008 	movw	r0, #53512	; 0xd108
 80032d8:	f7fd fdec 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 80032dc:	215c      	movs	r1, #92	; 0x5c
 80032de:	f24d 1009 	movw	r0, #53513	; 0xd109
 80032e2:	f7fd fde7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 80032e6:	2100      	movs	r1, #0
 80032e8:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80032ec:	f7fd fde2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 80032f0:	2181      	movs	r1, #129	; 0x81
 80032f2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80032f6:	f7fd fddd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 80032fa:	2100      	movs	r1, #0
 80032fc:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003300:	f7fd fdd8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 8003304:	21a6      	movs	r1, #166	; 0xa6
 8003306:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800330a:	f7fd fdd3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 800330e:	2100      	movs	r1, #0
 8003310:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003314:	f7fd fdce 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8003318:	21e5      	movs	r1, #229	; 0xe5
 800331a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800331e:	f7fd fdc9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 8003322:	2101      	movs	r1, #1
 8003324:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003328:	f7fd fdc4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 800332c:	2113      	movs	r1, #19
 800332e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8003332:	f7fd fdbf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8003336:	2101      	movs	r1, #1
 8003338:	f24d 1012 	movw	r0, #53522	; 0xd112
 800333c:	f7fd fdba 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8003340:	2154      	movs	r1, #84	; 0x54
 8003342:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003346:	f7fd fdb5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 800334a:	2101      	movs	r1, #1
 800334c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003350:	f7fd fdb0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8003354:	2182      	movs	r1, #130	; 0x82
 8003356:	f24d 1015 	movw	r0, #53525	; 0xd115
 800335a:	f7fd fdab 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 800335e:	2101      	movs	r1, #1
 8003360:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003364:	f7fd fda6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8003368:	21ca      	movs	r1, #202	; 0xca
 800336a:	f24d 1017 	movw	r0, #53527	; 0xd117
 800336e:	f7fd fda1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 8003372:	2102      	movs	r1, #2
 8003374:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003378:	f7fd fd9c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 800337c:	2100      	movs	r1, #0
 800337e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003382:	f7fd fd97 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8003386:	2102      	movs	r1, #2
 8003388:	f24d 101a 	movw	r0, #53530	; 0xd11a
 800338c:	f7fd fd92 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 8003390:	2101      	movs	r1, #1
 8003392:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003396:	f7fd fd8d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 800339a:	2102      	movs	r1, #2
 800339c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80033a0:	f7fd fd88 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 80033a4:	2134      	movs	r1, #52	; 0x34
 80033a6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80033aa:	f7fd fd83 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 80033ae:	2102      	movs	r1, #2
 80033b0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80033b4:	f7fd fd7e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 80033b8:	2167      	movs	r1, #103	; 0x67
 80033ba:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80033be:	f7fd fd79 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 80033c2:	2102      	movs	r1, #2
 80033c4:	f24d 1020 	movw	r0, #53536	; 0xd120
 80033c8:	f7fd fd74 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 80033cc:	2184      	movs	r1, #132	; 0x84
 80033ce:	f24d 1021 	movw	r0, #53537	; 0xd121
 80033d2:	f7fd fd6f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 80033d6:	2102      	movs	r1, #2
 80033d8:	f24d 1022 	movw	r0, #53538	; 0xd122
 80033dc:	f7fd fd6a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 80033e0:	21a4      	movs	r1, #164	; 0xa4
 80033e2:	f24d 1023 	movw	r0, #53539	; 0xd123
 80033e6:	f7fd fd65 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 80033ea:	2102      	movs	r1, #2
 80033ec:	f24d 1024 	movw	r0, #53540	; 0xd124
 80033f0:	f7fd fd60 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 80033f4:	21b7      	movs	r1, #183	; 0xb7
 80033f6:	f24d 1025 	movw	r0, #53541	; 0xd125
 80033fa:	f7fd fd5b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 80033fe:	2102      	movs	r1, #2
 8003400:	f24d 1026 	movw	r0, #53542	; 0xd126
 8003404:	f7fd fd56 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 8003408:	21cf      	movs	r1, #207	; 0xcf
 800340a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800340e:	f7fd fd51 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 8003412:	2102      	movs	r1, #2
 8003414:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003418:	f7fd fd4c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 800341c:	21de      	movs	r1, #222	; 0xde
 800341e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003422:	f7fd fd47 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8003426:	2102      	movs	r1, #2
 8003428:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800342c:	f7fd fd42 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8003430:	21f2      	movs	r1, #242	; 0xf2
 8003432:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003436:	f7fd fd3d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 800343a:	2102      	movs	r1, #2
 800343c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003440:	f7fd fd38 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8003444:	21fe      	movs	r1, #254	; 0xfe
 8003446:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800344a:	f7fd fd33 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 800344e:	2103      	movs	r1, #3
 8003450:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003454:	f7fd fd2e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8003458:	2110      	movs	r1, #16
 800345a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800345e:	f7fd fd29 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8003462:	2103      	movs	r1, #3
 8003464:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003468:	f7fd fd24 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 800346c:	2133      	movs	r1, #51	; 0x33
 800346e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003472:	f7fd fd1f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8003476:	2103      	movs	r1, #3
 8003478:	f24d 1032 	movw	r0, #53554	; 0xd132
 800347c:	f7fd fd1a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 8003480:	216d      	movs	r1, #109	; 0x6d
 8003482:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003486:	f7fd fd15 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 800348a:	2100      	movs	r1, #0
 800348c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003490:	f7fd fd10 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8003494:	2133      	movs	r1, #51	; 0x33
 8003496:	f24d 2001 	movw	r0, #53761	; 0xd201
 800349a:	f7fd fd0b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 800349e:	2100      	movs	r1, #0
 80034a0:	f24d 2002 	movw	r0, #53762	; 0xd202
 80034a4:	f7fd fd06 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 80034a8:	2134      	movs	r1, #52	; 0x34
 80034aa:	f24d 2003 	movw	r0, #53763	; 0xd203
 80034ae:	f7fd fd01 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 80034b2:	2100      	movs	r1, #0
 80034b4:	f24d 2004 	movw	r0, #53764	; 0xd204
 80034b8:	f7fd fcfc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 80034bc:	213a      	movs	r1, #58	; 0x3a
 80034be:	f24d 2005 	movw	r0, #53765	; 0xd205
 80034c2:	f7fd fcf7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 80034c6:	2100      	movs	r1, #0
 80034c8:	f24d 2006 	movw	r0, #53766	; 0xd206
 80034cc:	f7fd fcf2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 80034d0:	214a      	movs	r1, #74	; 0x4a
 80034d2:	f24d 2007 	movw	r0, #53767	; 0xd207
 80034d6:	f7fd fced 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 80034da:	2100      	movs	r1, #0
 80034dc:	f24d 2008 	movw	r0, #53768	; 0xd208
 80034e0:	f7fd fce8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 80034e4:	215c      	movs	r1, #92	; 0x5c
 80034e6:	f24d 2009 	movw	r0, #53769	; 0xd209
 80034ea:	f7fd fce3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 80034ee:	2100      	movs	r1, #0
 80034f0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80034f4:	f7fd fcde 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 80034f8:	2181      	movs	r1, #129	; 0x81
 80034fa:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80034fe:	f7fd fcd9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 8003502:	2100      	movs	r1, #0
 8003504:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003508:	f7fd fcd4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 800350c:	21a6      	movs	r1, #166	; 0xa6
 800350e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003512:	f7fd fccf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8003516:	2100      	movs	r1, #0
 8003518:	f24d 200e 	movw	r0, #53774	; 0xd20e
 800351c:	f7fd fcca 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 8003520:	21e5      	movs	r1, #229	; 0xe5
 8003522:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003526:	f7fd fcc5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 800352a:	2101      	movs	r1, #1
 800352c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003530:	f7fd fcc0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8003534:	2113      	movs	r1, #19
 8003536:	f24d 2011 	movw	r0, #53777	; 0xd211
 800353a:	f7fd fcbb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 800353e:	2101      	movs	r1, #1
 8003540:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003544:	f7fd fcb6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8003548:	2154      	movs	r1, #84	; 0x54
 800354a:	f24d 2013 	movw	r0, #53779	; 0xd213
 800354e:	f7fd fcb1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8003552:	2101      	movs	r1, #1
 8003554:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003558:	f7fd fcac 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 800355c:	2182      	movs	r1, #130	; 0x82
 800355e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003562:	f7fd fca7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8003566:	2101      	movs	r1, #1
 8003568:	f24d 2016 	movw	r0, #53782	; 0xd216
 800356c:	f7fd fca2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 8003570:	21ca      	movs	r1, #202	; 0xca
 8003572:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003576:	f7fd fc9d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 800357a:	2102      	movs	r1, #2
 800357c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003580:	f7fd fc98 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8003584:	2100      	movs	r1, #0
 8003586:	f24d 2019 	movw	r0, #53785	; 0xd219
 800358a:	f7fd fc93 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 800358e:	2102      	movs	r1, #2
 8003590:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003594:	f7fd fc8e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8003598:	2101      	movs	r1, #1
 800359a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800359e:	f7fd fc89 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 80035a2:	2102      	movs	r1, #2
 80035a4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80035a8:	f7fd fc84 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 80035ac:	2134      	movs	r1, #52	; 0x34
 80035ae:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80035b2:	f7fd fc7f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 80035b6:	2102      	movs	r1, #2
 80035b8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80035bc:	f7fd fc7a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 80035c0:	2167      	movs	r1, #103	; 0x67
 80035c2:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80035c6:	f7fd fc75 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 80035ca:	2102      	movs	r1, #2
 80035cc:	f24d 2020 	movw	r0, #53792	; 0xd220
 80035d0:	f7fd fc70 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 80035d4:	2184      	movs	r1, #132	; 0x84
 80035d6:	f24d 2021 	movw	r0, #53793	; 0xd221
 80035da:	f7fd fc6b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 80035de:	2102      	movs	r1, #2
 80035e0:	f24d 2022 	movw	r0, #53794	; 0xd222
 80035e4:	f7fd fc66 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 80035e8:	21a4      	movs	r1, #164	; 0xa4
 80035ea:	f24d 2023 	movw	r0, #53795	; 0xd223
 80035ee:	f7fd fc61 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 80035f2:	2102      	movs	r1, #2
 80035f4:	f24d 2024 	movw	r0, #53796	; 0xd224
 80035f8:	f7fd fc5c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 80035fc:	21b7      	movs	r1, #183	; 0xb7
 80035fe:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003602:	f7fd fc57 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 8003606:	2102      	movs	r1, #2
 8003608:	f24d 2026 	movw	r0, #53798	; 0xd226
 800360c:	f7fd fc52 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 8003610:	21cf      	movs	r1, #207	; 0xcf
 8003612:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003616:	f7fd fc4d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 800361a:	2102      	movs	r1, #2
 800361c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003620:	f7fd fc48 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8003624:	21de      	movs	r1, #222	; 0xde
 8003626:	f24d 2029 	movw	r0, #53801	; 0xd229
 800362a:	f7fd fc43 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 800362e:	2102      	movs	r1, #2
 8003630:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003634:	f7fd fc3e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8003638:	21f2      	movs	r1, #242	; 0xf2
 800363a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800363e:	f7fd fc39 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8003642:	2102      	movs	r1, #2
 8003644:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003648:	f7fd fc34 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 800364c:	21fe      	movs	r1, #254	; 0xfe
 800364e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003652:	f7fd fc2f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8003656:	2103      	movs	r1, #3
 8003658:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800365c:	f7fd fc2a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8003660:	2110      	movs	r1, #16
 8003662:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003666:	f7fd fc25 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 800366a:	2103      	movs	r1, #3
 800366c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003670:	f7fd fc20 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8003674:	2133      	movs	r1, #51	; 0x33
 8003676:	f24d 2031 	movw	r0, #53809	; 0xd231
 800367a:	f7fd fc1b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 800367e:	2103      	movs	r1, #3
 8003680:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003684:	f7fd fc16 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8003688:	216d      	movs	r1, #109	; 0x6d
 800368a:	f24d 2033 	movw	r0, #53811	; 0xd233
 800368e:	f7fd fc11 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 8003692:	2100      	movs	r1, #0
 8003694:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003698:	f7fd fc0c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 800369c:	2133      	movs	r1, #51	; 0x33
 800369e:	f24d 3001 	movw	r0, #54017	; 0xd301
 80036a2:	f7fd fc07 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 80036a6:	2100      	movs	r1, #0
 80036a8:	f24d 3002 	movw	r0, #54018	; 0xd302
 80036ac:	f7fd fc02 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 80036b0:	2134      	movs	r1, #52	; 0x34
 80036b2:	f24d 3003 	movw	r0, #54019	; 0xd303
 80036b6:	f7fd fbfd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 80036ba:	2100      	movs	r1, #0
 80036bc:	f24d 3004 	movw	r0, #54020	; 0xd304
 80036c0:	f7fd fbf8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 80036c4:	213a      	movs	r1, #58	; 0x3a
 80036c6:	f24d 3005 	movw	r0, #54021	; 0xd305
 80036ca:	f7fd fbf3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 80036ce:	2100      	movs	r1, #0
 80036d0:	f24d 3006 	movw	r0, #54022	; 0xd306
 80036d4:	f7fd fbee 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 80036d8:	214a      	movs	r1, #74	; 0x4a
 80036da:	f24d 3007 	movw	r0, #54023	; 0xd307
 80036de:	f7fd fbe9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 80036e2:	2100      	movs	r1, #0
 80036e4:	f24d 3008 	movw	r0, #54024	; 0xd308
 80036e8:	f7fd fbe4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 80036ec:	215c      	movs	r1, #92	; 0x5c
 80036ee:	f24d 3009 	movw	r0, #54025	; 0xd309
 80036f2:	f7fd fbdf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 80036f6:	2100      	movs	r1, #0
 80036f8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80036fc:	f7fd fbda 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 8003700:	2181      	movs	r1, #129	; 0x81
 8003702:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003706:	f7fd fbd5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 800370a:	2100      	movs	r1, #0
 800370c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003710:	f7fd fbd0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8003714:	21a6      	movs	r1, #166	; 0xa6
 8003716:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800371a:	f7fd fbcb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 800371e:	2100      	movs	r1, #0
 8003720:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003724:	f7fd fbc6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8003728:	21e5      	movs	r1, #229	; 0xe5
 800372a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800372e:	f7fd fbc1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 8003732:	2101      	movs	r1, #1
 8003734:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003738:	f7fd fbbc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 800373c:	2113      	movs	r1, #19
 800373e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003742:	f7fd fbb7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8003746:	2101      	movs	r1, #1
 8003748:	f24d 3012 	movw	r0, #54034	; 0xd312
 800374c:	f7fd fbb2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8003750:	2154      	movs	r1, #84	; 0x54
 8003752:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003756:	f7fd fbad 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 800375a:	2101      	movs	r1, #1
 800375c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003760:	f7fd fba8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8003764:	2182      	movs	r1, #130	; 0x82
 8003766:	f24d 3015 	movw	r0, #54037	; 0xd315
 800376a:	f7fd fba3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 800376e:	2101      	movs	r1, #1
 8003770:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003774:	f7fd fb9e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8003778:	21ca      	movs	r1, #202	; 0xca
 800377a:	f24d 3017 	movw	r0, #54039	; 0xd317
 800377e:	f7fd fb99 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 8003782:	2102      	movs	r1, #2
 8003784:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003788:	f7fd fb94 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 800378c:	2100      	movs	r1, #0
 800378e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003792:	f7fd fb8f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8003796:	2102      	movs	r1, #2
 8003798:	f24d 301a 	movw	r0, #54042	; 0xd31a
 800379c:	f7fd fb8a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 80037a0:	2101      	movs	r1, #1
 80037a2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80037a6:	f7fd fb85 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 80037aa:	2102      	movs	r1, #2
 80037ac:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80037b0:	f7fd fb80 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 80037b4:	2134      	movs	r1, #52	; 0x34
 80037b6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80037ba:	f7fd fb7b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 80037be:	2102      	movs	r1, #2
 80037c0:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80037c4:	f7fd fb76 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 80037c8:	2167      	movs	r1, #103	; 0x67
 80037ca:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80037ce:	f7fd fb71 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 80037d2:	2102      	movs	r1, #2
 80037d4:	f24d 3020 	movw	r0, #54048	; 0xd320
 80037d8:	f7fd fb6c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 80037dc:	2184      	movs	r1, #132	; 0x84
 80037de:	f24d 3021 	movw	r0, #54049	; 0xd321
 80037e2:	f7fd fb67 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 80037e6:	2102      	movs	r1, #2
 80037e8:	f24d 3022 	movw	r0, #54050	; 0xd322
 80037ec:	f7fd fb62 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 80037f0:	21a4      	movs	r1, #164	; 0xa4
 80037f2:	f24d 3023 	movw	r0, #54051	; 0xd323
 80037f6:	f7fd fb5d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 80037fa:	2102      	movs	r1, #2
 80037fc:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003800:	f7fd fb58 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 8003804:	21b7      	movs	r1, #183	; 0xb7
 8003806:	f24d 3025 	movw	r0, #54053	; 0xd325
 800380a:	f7fd fb53 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 800380e:	2102      	movs	r1, #2
 8003810:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003814:	f7fd fb4e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 8003818:	21cf      	movs	r1, #207	; 0xcf
 800381a:	f24d 3027 	movw	r0, #54055	; 0xd327
 800381e:	f7fd fb49 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 8003822:	2102      	movs	r1, #2
 8003824:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003828:	f7fd fb44 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 800382c:	21de      	movs	r1, #222	; 0xde
 800382e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003832:	f7fd fb3f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8003836:	2102      	movs	r1, #2
 8003838:	f24d 302a 	movw	r0, #54058	; 0xd32a
 800383c:	f7fd fb3a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 8003840:	21f2      	movs	r1, #242	; 0xf2
 8003842:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003846:	f7fd fb35 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 800384a:	2102      	movs	r1, #2
 800384c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003850:	f7fd fb30 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8003854:	21fe      	movs	r1, #254	; 0xfe
 8003856:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800385a:	f7fd fb2b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 800385e:	2103      	movs	r1, #3
 8003860:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003864:	f7fd fb26 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8003868:	2110      	movs	r1, #16
 800386a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800386e:	f7fd fb21 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 8003872:	2103      	movs	r1, #3
 8003874:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003878:	f7fd fb1c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 800387c:	2133      	movs	r1, #51	; 0x33
 800387e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003882:	f7fd fb17 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 8003886:	2103      	movs	r1, #3
 8003888:	f24d 3032 	movw	r0, #54066	; 0xd332
 800388c:	f7fd fb12 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 8003890:	216d      	movs	r1, #109	; 0x6d
 8003892:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003896:	f7fd fb0d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 800389a:	2100      	movs	r1, #0
 800389c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80038a0:	f7fd fb08 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 80038a4:	2133      	movs	r1, #51	; 0x33
 80038a6:	f24d 4001 	movw	r0, #54273	; 0xd401
 80038aa:	f7fd fb03 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 80038ae:	2100      	movs	r1, #0
 80038b0:	f24d 4002 	movw	r0, #54274	; 0xd402
 80038b4:	f7fd fafe 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 80038b8:	2134      	movs	r1, #52	; 0x34
 80038ba:	f24d 4003 	movw	r0, #54275	; 0xd403
 80038be:	f7fd faf9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 80038c2:	2100      	movs	r1, #0
 80038c4:	f24d 4004 	movw	r0, #54276	; 0xd404
 80038c8:	f7fd faf4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 80038cc:	213a      	movs	r1, #58	; 0x3a
 80038ce:	f24d 4005 	movw	r0, #54277	; 0xd405
 80038d2:	f7fd faef 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 80038d6:	2100      	movs	r1, #0
 80038d8:	f24d 4006 	movw	r0, #54278	; 0xd406
 80038dc:	f7fd faea 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 80038e0:	214a      	movs	r1, #74	; 0x4a
 80038e2:	f24d 4007 	movw	r0, #54279	; 0xd407
 80038e6:	f7fd fae5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 80038ea:	2100      	movs	r1, #0
 80038ec:	f24d 4008 	movw	r0, #54280	; 0xd408
 80038f0:	f7fd fae0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 80038f4:	215c      	movs	r1, #92	; 0x5c
 80038f6:	f24d 4009 	movw	r0, #54281	; 0xd409
 80038fa:	f7fd fadb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 80038fe:	2100      	movs	r1, #0
 8003900:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003904:	f7fd fad6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 8003908:	2181      	movs	r1, #129	; 0x81
 800390a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 800390e:	f7fd fad1 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 8003912:	2100      	movs	r1, #0
 8003914:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003918:	f7fd facc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 800391c:	21a6      	movs	r1, #166	; 0xa6
 800391e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003922:	f7fd fac7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 8003926:	2100      	movs	r1, #0
 8003928:	f24d 400e 	movw	r0, #54286	; 0xd40e
 800392c:	f7fd fac2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 8003930:	21e5      	movs	r1, #229	; 0xe5
 8003932:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003936:	f7fd fabd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 800393a:	2101      	movs	r1, #1
 800393c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003940:	f7fd fab8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8003944:	2113      	movs	r1, #19
 8003946:	f24d 4011 	movw	r0, #54289	; 0xd411
 800394a:	f7fd fab3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 800394e:	2101      	movs	r1, #1
 8003950:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003954:	f7fd faae 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8003958:	2154      	movs	r1, #84	; 0x54
 800395a:	f24d 4013 	movw	r0, #54291	; 0xd413
 800395e:	f7fd faa9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 8003962:	2101      	movs	r1, #1
 8003964:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003968:	f7fd faa4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 800396c:	2182      	movs	r1, #130	; 0x82
 800396e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003972:	f7fd fa9f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8003976:	2101      	movs	r1, #1
 8003978:	f24d 4016 	movw	r0, #54294	; 0xd416
 800397c:	f7fd fa9a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 8003980:	21ca      	movs	r1, #202	; 0xca
 8003982:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003986:	f7fd fa95 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 800398a:	2102      	movs	r1, #2
 800398c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003990:	f7fd fa90 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8003994:	2100      	movs	r1, #0
 8003996:	f24d 4019 	movw	r0, #54297	; 0xd419
 800399a:	f7fd fa8b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 800399e:	2102      	movs	r1, #2
 80039a0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 80039a4:	f7fd fa86 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 80039a8:	2101      	movs	r1, #1
 80039aa:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80039ae:	f7fd fa81 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 80039b2:	2102      	movs	r1, #2
 80039b4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80039b8:	f7fd fa7c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 80039bc:	2134      	movs	r1, #52	; 0x34
 80039be:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80039c2:	f7fd fa77 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 80039c6:	2102      	movs	r1, #2
 80039c8:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80039cc:	f7fd fa72 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 80039d0:	2167      	movs	r1, #103	; 0x67
 80039d2:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80039d6:	f7fd fa6d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 80039da:	2102      	movs	r1, #2
 80039dc:	f24d 4020 	movw	r0, #54304	; 0xd420
 80039e0:	f7fd fa68 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 80039e4:	2184      	movs	r1, #132	; 0x84
 80039e6:	f24d 4021 	movw	r0, #54305	; 0xd421
 80039ea:	f7fd fa63 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 80039ee:	2102      	movs	r1, #2
 80039f0:	f24d 4022 	movw	r0, #54306	; 0xd422
 80039f4:	f7fd fa5e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 80039f8:	21a4      	movs	r1, #164	; 0xa4
 80039fa:	f24d 4023 	movw	r0, #54307	; 0xd423
 80039fe:	f7fd fa59 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 8003a02:	2102      	movs	r1, #2
 8003a04:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003a08:	f7fd fa54 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 8003a0c:	21b7      	movs	r1, #183	; 0xb7
 8003a0e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003a12:	f7fd fa4f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 8003a16:	2102      	movs	r1, #2
 8003a18:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003a1c:	f7fd fa4a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 8003a20:	21cf      	movs	r1, #207	; 0xcf
 8003a22:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003a26:	f7fd fa45 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003a30:	f7fd fa40 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 8003a34:	21de      	movs	r1, #222	; 0xde
 8003a36:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003a3a:	f7fd fa3b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 8003a3e:	2102      	movs	r1, #2
 8003a40:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003a44:	f7fd fa36 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 8003a48:	21f2      	movs	r1, #242	; 0xf2
 8003a4a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003a4e:	f7fd fa31 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8003a52:	2102      	movs	r1, #2
 8003a54:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003a58:	f7fd fa2c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8003a5c:	21fe      	movs	r1, #254	; 0xfe
 8003a5e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003a62:	f7fd fa27 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8003a66:	2103      	movs	r1, #3
 8003a68:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003a6c:	f7fd fa22 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8003a70:	2110      	movs	r1, #16
 8003a72:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003a76:	f7fd fa1d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 8003a7a:	2103      	movs	r1, #3
 8003a7c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003a80:	f7fd fa18 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8003a84:	2133      	movs	r1, #51	; 0x33
 8003a86:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003a8a:	f7fd fa13 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 8003a8e:	2103      	movs	r1, #3
 8003a90:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003a94:	f7fd fa0e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8003a98:	216d      	movs	r1, #109	; 0x6d
 8003a9a:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003a9e:	f7fd fa09 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003aa8:	f7fd fa04 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8003aac:	2133      	movs	r1, #51	; 0x33
 8003aae:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003ab2:	f7fd f9ff 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003abc:	f7fd f9fa 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 8003ac0:	2134      	movs	r1, #52	; 0x34
 8003ac2:	f24d 5003 	movw	r0, #54531	; 0xd503
 8003ac6:	f7fd f9f5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 8003aca:	2100      	movs	r1, #0
 8003acc:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003ad0:	f7fd f9f0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 8003ad4:	213a      	movs	r1, #58	; 0x3a
 8003ad6:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003ada:	f7fd f9eb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 8003ade:	2100      	movs	r1, #0
 8003ae0:	f24d 5006 	movw	r0, #54534	; 0xd506
 8003ae4:	f7fd f9e6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 8003ae8:	214a      	movs	r1, #74	; 0x4a
 8003aea:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003aee:	f7fd f9e1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 8003af2:	2100      	movs	r1, #0
 8003af4:	f24d 5008 	movw	r0, #54536	; 0xd508
 8003af8:	f7fd f9dc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 8003afc:	215c      	movs	r1, #92	; 0x5c
 8003afe:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003b02:	f7fd f9d7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 8003b06:	2100      	movs	r1, #0
 8003b08:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8003b0c:	f7fd f9d2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 8003b10:	2181      	movs	r1, #129	; 0x81
 8003b12:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003b16:	f7fd f9cd 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003b20:	f7fd f9c8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 8003b24:	21a6      	movs	r1, #166	; 0xa6
 8003b26:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8003b2a:	f7fd f9c3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 8003b2e:	2100      	movs	r1, #0
 8003b30:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003b34:	f7fd f9be 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 8003b38:	21e5      	movs	r1, #229	; 0xe5
 8003b3a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8003b3e:	f7fd f9b9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 8003b42:	2101      	movs	r1, #1
 8003b44:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003b48:	f7fd f9b4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 8003b4c:	2113      	movs	r1, #19
 8003b4e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003b52:	f7fd f9af 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8003b56:	2101      	movs	r1, #1
 8003b58:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003b5c:	f7fd f9aa 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8003b60:	2154      	movs	r1, #84	; 0x54
 8003b62:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003b66:	f7fd f9a5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003b70:	f7fd f9a0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8003b74:	2182      	movs	r1, #130	; 0x82
 8003b76:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003b7a:	f7fd f99b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 8003b7e:	2101      	movs	r1, #1
 8003b80:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003b84:	f7fd f996 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8003b88:	21ca      	movs	r1, #202	; 0xca
 8003b8a:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003b8e:	f7fd f991 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 8003b92:	2102      	movs	r1, #2
 8003b94:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003b98:	f7fd f98c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8003ba2:	f7fd f987 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003bac:	f7fd f982 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8003bb6:	f7fd f97d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 8003bba:	2102      	movs	r1, #2
 8003bbc:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003bc0:	f7fd f978 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 8003bc4:	2134      	movs	r1, #52	; 0x34
 8003bc6:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003bca:	f7fd f973 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 8003bce:	2102      	movs	r1, #2
 8003bd0:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8003bd4:	f7fd f96e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 8003bd8:	2167      	movs	r1, #103	; 0x67
 8003bda:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003bde:	f7fd f969 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 8003be2:	2102      	movs	r1, #2
 8003be4:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003be8:	f7fd f964 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 8003bec:	2184      	movs	r1, #132	; 0x84
 8003bee:	f24d 5021 	movw	r0, #54561	; 0xd521
 8003bf2:	f7fd f95f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 8003bf6:	2102      	movs	r1, #2
 8003bf8:	f24d 5022 	movw	r0, #54562	; 0xd522
 8003bfc:	f7fd f95a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 8003c00:	21a4      	movs	r1, #164	; 0xa4
 8003c02:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003c06:	f7fd f955 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 8003c0a:	2102      	movs	r1, #2
 8003c0c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003c10:	f7fd f950 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 8003c14:	21b7      	movs	r1, #183	; 0xb7
 8003c16:	f24d 5025 	movw	r0, #54565	; 0xd525
 8003c1a:	f7fd f94b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 8003c1e:	2102      	movs	r1, #2
 8003c20:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003c24:	f7fd f946 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 8003c28:	21cf      	movs	r1, #207	; 0xcf
 8003c2a:	f24d 5027 	movw	r0, #54567	; 0xd527
 8003c2e:	f7fd f941 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 8003c32:	2102      	movs	r1, #2
 8003c34:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003c38:	f7fd f93c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 8003c3c:	21de      	movs	r1, #222	; 0xde
 8003c3e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003c42:	f7fd f937 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8003c46:	2102      	movs	r1, #2
 8003c48:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8003c4c:	f7fd f932 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8003c50:	21f2      	movs	r1, #242	; 0xf2
 8003c52:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003c56:	f7fd f92d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 8003c5a:	2102      	movs	r1, #2
 8003c5c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003c60:	f7fd f928 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8003c64:	21fe      	movs	r1, #254	; 0xfe
 8003c66:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003c6a:	f7fd f923 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 8003c6e:	2103      	movs	r1, #3
 8003c70:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003c74:	f7fd f91e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8003c78:	2110      	movs	r1, #16
 8003c7a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003c7e:	f7fd f919 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 8003c82:	2103      	movs	r1, #3
 8003c84:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003c88:	f7fd f914 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 8003c8c:	2133      	movs	r1, #51	; 0x33
 8003c8e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003c92:	f7fd f90f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 8003c96:	2103      	movs	r1, #3
 8003c98:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003c9c:	f7fd f90a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 8003ca0:	216d      	movs	r1, #109	; 0x6d
 8003ca2:	f24d 5033 	movw	r0, #54579	; 0xd533
 8003ca6:	f7fd f905 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 8003caa:	2100      	movs	r1, #0
 8003cac:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003cb0:	f7fd f900 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 8003cb4:	2133      	movs	r1, #51	; 0x33
 8003cb6:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003cba:	f7fd f8fb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	f24d 6002 	movw	r0, #54786	; 0xd602
 8003cc4:	f7fd f8f6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 8003cc8:	2134      	movs	r1, #52	; 0x34
 8003cca:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003cce:	f7fd f8f1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003cd8:	f7fd f8ec 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 8003cdc:	213a      	movs	r1, #58	; 0x3a
 8003cde:	f24d 6005 	movw	r0, #54789	; 0xd605
 8003ce2:	f7fd f8e7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003cec:	f7fd f8e2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 8003cf0:	214a      	movs	r1, #74	; 0x4a
 8003cf2:	f24d 6007 	movw	r0, #54791	; 0xd607
 8003cf6:	f7fd f8dd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003d00:	f7fd f8d8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 8003d04:	215c      	movs	r1, #92	; 0x5c
 8003d06:	f24d 6009 	movw	r0, #54793	; 0xd609
 8003d0a:	f7fd f8d3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 8003d0e:	2100      	movs	r1, #0
 8003d10:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003d14:	f7fd f8ce 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 8003d18:	2181      	movs	r1, #129	; 0x81
 8003d1a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8003d1e:	f7fd f8c9 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 8003d22:	2100      	movs	r1, #0
 8003d24:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003d28:	f7fd f8c4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 8003d2c:	21a6      	movs	r1, #166	; 0xa6
 8003d2e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003d32:	f7fd f8bf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8003d36:	2100      	movs	r1, #0
 8003d38:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8003d3c:	f7fd f8ba 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 8003d40:	21e5      	movs	r1, #229	; 0xe5
 8003d42:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003d46:	f7fd f8b5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003d50:	f7fd f8b0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8003d54:	2113      	movs	r1, #19
 8003d56:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003d5a:	f7fd f8ab 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 8003d5e:	2101      	movs	r1, #1
 8003d60:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003d64:	f7fd f8a6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8003d68:	2154      	movs	r1, #84	; 0x54
 8003d6a:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003d6e:	f7fd f8a1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 8003d72:	2101      	movs	r1, #1
 8003d74:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003d78:	f7fd f89c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 8003d7c:	2182      	movs	r1, #130	; 0x82
 8003d7e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003d82:	f7fd f897 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 8003d86:	2101      	movs	r1, #1
 8003d88:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003d8c:	f7fd f892 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 8003d90:	21ca      	movs	r1, #202	; 0xca
 8003d92:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003d96:	f7fd f88d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003da0:	f7fd f888 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 8003da4:	2100      	movs	r1, #0
 8003da6:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003daa:	f7fd f883 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 8003dae:	2102      	movs	r1, #2
 8003db0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8003db4:	f7fd f87e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 8003db8:	2101      	movs	r1, #1
 8003dba:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003dbe:	f7fd f879 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003dc8:	f7fd f874 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 8003dcc:	2134      	movs	r1, #52	; 0x34
 8003dce:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8003dd2:	f7fd f86f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 8003dd6:	2102      	movs	r1, #2
 8003dd8:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003ddc:	f7fd f86a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 8003de0:	2167      	movs	r1, #103	; 0x67
 8003de2:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8003de6:	f7fd f865 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 8003dea:	2102      	movs	r1, #2
 8003dec:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003df0:	f7fd f860 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 8003df4:	2184      	movs	r1, #132	; 0x84
 8003df6:	f24d 6021 	movw	r0, #54817	; 0xd621
 8003dfa:	f7fd f85b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 8003dfe:	2102      	movs	r1, #2
 8003e00:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003e04:	f7fd f856 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 8003e08:	21a4      	movs	r1, #164	; 0xa4
 8003e0a:	f24d 6023 	movw	r0, #54819	; 0xd623
 8003e0e:	f7fd f851 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 8003e12:	2102      	movs	r1, #2
 8003e14:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003e18:	f7fd f84c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 8003e1c:	21b7      	movs	r1, #183	; 0xb7
 8003e1e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003e22:	f7fd f847 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 8003e26:	2102      	movs	r1, #2
 8003e28:	f24d 6026 	movw	r0, #54822	; 0xd626
 8003e2c:	f7fd f842 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 8003e30:	21cf      	movs	r1, #207	; 0xcf
 8003e32:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003e36:	f7fd f83d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003e40:	f7fd f838 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8003e44:	21de      	movs	r1, #222	; 0xde
 8003e46:	f24d 6029 	movw	r0, #54825	; 0xd629
 8003e4a:	f7fd f833 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 8003e4e:	2102      	movs	r1, #2
 8003e50:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003e54:	f7fd f82e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8003e58:	21f2      	movs	r1, #242	; 0xf2
 8003e5a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003e5e:	f7fd f829 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8003e62:	2102      	movs	r1, #2
 8003e64:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003e68:	f7fd f824 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 8003e6c:	21fe      	movs	r1, #254	; 0xfe
 8003e6e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003e72:	f7fd f81f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8003e76:	2103      	movs	r1, #3
 8003e78:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003e7c:	f7fd f81a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 8003e80:	2110      	movs	r1, #16
 8003e82:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003e86:	f7fd f815 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 8003e8a:	2103      	movs	r1, #3
 8003e8c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003e90:	f7fd f810 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8003e94:	2133      	movs	r1, #51	; 0x33
 8003e96:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003e9a:	f7fd f80b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 8003e9e:	2103      	movs	r1, #3
 8003ea0:	f24d 6032 	movw	r0, #54834	; 0xd632
 8003ea4:	f7fd f806 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8003ea8:	216d      	movs	r1, #109	; 0x6d
 8003eaa:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003eae:	f7fd f801 	bl	8000eb4 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 8003eb2:	2155      	movs	r1, #85	; 0x55
 8003eb4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003eb8:	f7fc fffc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8003ebc:	21aa      	movs	r1, #170	; 0xaa
 8003ebe:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003ec2:	f7fc fff7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8003ec6:	2152      	movs	r1, #82	; 0x52
 8003ec8:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003ecc:	f7fc fff2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8003ed0:	2108      	movs	r1, #8
 8003ed2:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003ed6:	f7fc ffed 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 8003eda:	2100      	movs	r1, #0
 8003edc:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003ee0:	f7fc ffe8 	bl	8000eb4 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8003ee4:	21cc      	movs	r1, #204	; 0xcc
 8003ee6:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003eea:	f7fc ffe3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003eee:	2100      	movs	r1, #0
 8003ef0:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003ef4:	f7fc ffde 	bl	8000eb4 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 8003ef8:	2105      	movs	r1, #5
 8003efa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003efe:	f7fc ffd9 	bl	8000eb4 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 8003f02:	2170      	movs	r1, #112	; 0x70
 8003f04:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003f08:	f7fc ffd4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 8003f0c:	2170      	movs	r1, #112	; 0x70
 8003f0e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003f12:	f7fc ffcf 	bl	8000eb4 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 8003f16:	2101      	movs	r1, #1
 8003f18:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003f1c:	f7fc ffca 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 8003f20:	2103      	movs	r1, #3
 8003f22:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003f26:	f7fc ffc5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 8003f2a:	2103      	movs	r1, #3
 8003f2c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003f30:	f7fc ffc0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8003f34:	2103      	movs	r1, #3
 8003f36:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003f3a:	f7fc ffbb 	bl	8000eb4 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 8003f3e:	2102      	movs	r1, #2
 8003f40:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003f44:	f7fc ffb6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8003f48:	2100      	movs	r1, #0
 8003f4a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003f4e:	f7fc ffb1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003f52:	2100      	movs	r1, #0
 8003f54:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003f58:	f7fc ffac 	bl	8000eb4 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8003f5c:	21d0      	movs	r1, #208	; 0xd0
 8003f5e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003f62:	f7fc ffa7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8003f66:	2102      	movs	r1, #2
 8003f68:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003f6c:	f7fc ffa2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8003f70:	2150      	movs	r1, #80	; 0x50
 8003f72:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003f76:	f7fc ff9d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8003f7a:	2150      	movs	r1, #80	; 0x50
 8003f7c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003f80:	f7fc ff98 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8003f84:	2150      	movs	r1, #80	; 0x50
 8003f86:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003f8a:	f7fc ff93 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 8003f8e:	2100      	movs	r1, #0
 8003f90:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003f94:	f7fc ff8e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8003f98:	2155      	movs	r1, #85	; 0x55
 8003f9a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003f9e:	f7fc ff89 	bl	8000eb4 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003fa2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003fa6:	f7fc ff57 	bl	8000e58 <LCD_WR_REG>
		delay_us(120);
 8003faa:	2078      	movs	r0, #120	; 0x78
 8003fac:	f7fc ff36 	bl	8000e1c <delay_us>
		LCD_WR_REG(0x2900);
 8003fb0:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003fb4:	f7fc ff50 	bl	8000e58 <LCD_WR_REG>
 8003fb8:	f001 b95f 	b.w	800527a <LCD_Init+0x3852>
	}else if(lcddev.id==0x9325)//9325
 8003fbc:	4bec      	ldr	r3, [pc, #944]	; (8004370 <LCD_Init+0x2948>)
 8003fbe:	889b      	ldrh	r3, [r3, #4]
 8003fc0:	f249 3225 	movw	r2, #37669	; 0x9325
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	f040 80d7 	bne.w	8004178 <LCD_Init+0x2750>
	{
		LCD_WriteReg(0x00E5,0x78F0);
 8003fca:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8003fce:	20e5      	movs	r0, #229	; 0xe5
 8003fd0:	f7fc ff70 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0001,0x0100);
 8003fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fd8:	2001      	movs	r0, #1
 8003fda:	f7fc ff6b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 8003fde:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8003fe2:	2002      	movs	r0, #2
 8003fe4:	f7fc ff66 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0003,0x1030);
 8003fe8:	f241 0130 	movw	r1, #4144	; 0x1030
 8003fec:	2003      	movs	r0, #3
 8003fee:	f7fc ff61 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0004,0x0000);
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	2004      	movs	r0, #4
 8003ff6:	f7fc ff5d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8003ffa:	f240 2102 	movw	r1, #514	; 0x202
 8003ffe:	2008      	movs	r0, #8
 8004000:	f7fc ff58 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0009,0x0000);
 8004004:	2100      	movs	r1, #0
 8004006:	2009      	movs	r0, #9
 8004008:	f7fc ff54 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000A,0x0000);
 800400c:	2100      	movs	r1, #0
 800400e:	200a      	movs	r0, #10
 8004010:	f7fc ff50 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000C,0x0000);
 8004014:	2100      	movs	r1, #0
 8004016:	200c      	movs	r0, #12
 8004018:	f7fc ff4c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000D,0x0000);
 800401c:	2100      	movs	r1, #0
 800401e:	200d      	movs	r0, #13
 8004020:	f7fc ff48 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000F,0x0000);
 8004024:	2100      	movs	r1, #0
 8004026:	200f      	movs	r0, #15
 8004028:	f7fc ff44 	bl	8000eb4 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010,0x0000);
 800402c:	2100      	movs	r1, #0
 800402e:	2010      	movs	r0, #16
 8004030:	f7fc ff40 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 8004034:	2107      	movs	r1, #7
 8004036:	2011      	movs	r0, #17
 8004038:	f7fc ff3c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 800403c:	2100      	movs	r1, #0
 800403e:	2012      	movs	r0, #18
 8004040:	f7fc ff38 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 8004044:	2100      	movs	r1, #0
 8004046:	2013      	movs	r0, #19
 8004048:	f7fc ff34 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0000);
 800404c:	2100      	movs	r1, #0
 800404e:	2007      	movs	r0, #7
 8004050:	f7fc ff30 	bl	8000eb4 <LCD_WriteReg>
		//vgh
		LCD_WriteReg(0x0010,0x1690);
 8004054:	f241 6190 	movw	r1, #5776	; 0x1690
 8004058:	2010      	movs	r0, #16
 800405a:	f7fc ff2b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0227);
 800405e:	f240 2127 	movw	r1, #551	; 0x227
 8004062:	2011      	movs	r0, #17
 8004064:	f7fc ff26 	bl	8000eb4 <LCD_WriteReg>
		//delayms(100);
		//vregiout
		LCD_WriteReg(0x0012,0x009D); //0x001b
 8004068:	219d      	movs	r1, #157	; 0x9d
 800406a:	2012      	movs	r0, #18
 800406c:	f7fc ff22 	bl	8000eb4 <LCD_WriteReg>
		//delayms(100);
		//vom amplitude
		LCD_WriteReg(0x0013,0x1900);
 8004070:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004074:	2013      	movs	r0, #19
 8004076:	f7fc ff1d 	bl	8000eb4 <LCD_WriteReg>
		//delayms(100);
		//vom H
		LCD_WriteReg(0x0029,0x0025);
 800407a:	2125      	movs	r1, #37	; 0x25
 800407c:	2029      	movs	r0, #41	; 0x29
 800407e:	f7fc ff19 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x002B,0x000D);
 8004082:	210d      	movs	r1, #13
 8004084:	202b      	movs	r0, #43	; 0x2b
 8004086:	f7fc ff15 	bl	8000eb4 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030,0x0007);
 800408a:	2107      	movs	r1, #7
 800408c:	2030      	movs	r0, #48	; 0x30
 800408e:	f7fc ff11 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0303);
 8004092:	f240 3103 	movw	r1, #771	; 0x303
 8004096:	2031      	movs	r0, #49	; 0x31
 8004098:	f7fc ff0c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0003);// 0006
 800409c:	2103      	movs	r1, #3
 800409e:	2032      	movs	r0, #50	; 0x32
 80040a0:	f7fc ff08 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0206);
 80040a4:	f240 2106 	movw	r1, #518	; 0x206
 80040a8:	2035      	movs	r0, #53	; 0x35
 80040aa:	f7fc ff03 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x0008);
 80040ae:	2108      	movs	r1, #8
 80040b0:	2036      	movs	r0, #54	; 0x36
 80040b2:	f7fc feff 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0406);
 80040b6:	f240 4106 	movw	r1, #1030	; 0x406
 80040ba:	2037      	movs	r0, #55	; 0x37
 80040bc:	f7fc fefa 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0304);//0200
 80040c0:	f44f 7141 	mov.w	r1, #772	; 0x304
 80040c4:	2038      	movs	r0, #56	; 0x38
 80040c6:	f7fc fef5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0007);
 80040ca:	2107      	movs	r1, #7
 80040cc:	2039      	movs	r0, #57	; 0x39
 80040ce:	f7fc fef1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x003C,0x0602);// 0504
 80040d2:	f240 6102 	movw	r1, #1538	; 0x602
 80040d6:	203c      	movs	r0, #60	; 0x3c
 80040d8:	f7fc feec 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x003D,0x0008);
 80040dc:	2108      	movs	r1, #8
 80040de:	203d      	movs	r0, #61	; 0x3d
 80040e0:	f7fc fee8 	bl	8000eb4 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050,0x0000);
 80040e4:	2100      	movs	r1, #0
 80040e6:	2050      	movs	r0, #80	; 0x50
 80040e8:	f7fc fee4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00EF);
 80040ec:	21ef      	movs	r1, #239	; 0xef
 80040ee:	2051      	movs	r0, #81	; 0x51
 80040f0:	f7fc fee0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 80040f4:	2100      	movs	r1, #0
 80040f6:	2052      	movs	r0, #82	; 0x52
 80040f8:	f7fc fedc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013F);
 80040fc:	f240 113f 	movw	r1, #319	; 0x13f
 8004100:	2053      	movs	r0, #83	; 0x53
 8004102:	f7fc fed7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0xA700);
 8004106:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800410a:	2060      	movs	r0, #96	; 0x60
 800410c:	f7fc fed2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 8004110:	2101      	movs	r1, #1
 8004112:	2061      	movs	r0, #97	; 0x61
 8004114:	f7fc fece 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x006A,0x0000);
 8004118:	2100      	movs	r1, #0
 800411a:	206a      	movs	r0, #106	; 0x6a
 800411c:	f7fc feca 	bl	8000eb4 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080,0x0000);
 8004120:	2100      	movs	r1, #0
 8004122:	2080      	movs	r0, #128	; 0x80
 8004124:	f7fc fec6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0081,0x0000);
 8004128:	2100      	movs	r1, #0
 800412a:	2081      	movs	r0, #129	; 0x81
 800412c:	f7fc fec2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0082,0x0000);
 8004130:	2100      	movs	r1, #0
 8004132:	2082      	movs	r0, #130	; 0x82
 8004134:	f7fc febe 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0083,0x0000);
 8004138:	2100      	movs	r1, #0
 800413a:	2083      	movs	r0, #131	; 0x83
 800413c:	f7fc feba 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0084,0x0000);
 8004140:	2100      	movs	r1, #0
 8004142:	2084      	movs	r0, #132	; 0x84
 8004144:	f7fc feb6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0085,0x0000);
 8004148:	2100      	movs	r1, #0
 800414a:	2085      	movs	r0, #133	; 0x85
 800414c:	f7fc feb2 	bl	8000eb4 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090,0x0010);
 8004150:	2110      	movs	r1, #16
 8004152:	2090      	movs	r0, #144	; 0x90
 8004154:	f7fc feae 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8004158:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800415c:	2092      	movs	r0, #146	; 0x92
 800415e:	f7fc fea9 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x0007,0x0133);
 8004162:	f240 1133 	movw	r1, #307	; 0x133
 8004166:	2007      	movs	r0, #7
 8004168:	f7fc fea4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x0022);//
 800416c:	2122      	movs	r1, #34	; 0x22
 800416e:	2000      	movs	r0, #0
 8004170:	f7fc fea0 	bl	8000eb4 <LCD_WriteReg>
 8004174:	f001 b881 	b.w	800527a <LCD_Init+0x3852>
	}else if(lcddev.id==0x9328)//ILI9328   OK
 8004178:	4b7d      	ldr	r3, [pc, #500]	; (8004370 <LCD_Init+0x2948>)
 800417a:	889b      	ldrh	r3, [r3, #4]
 800417c:	f249 3228 	movw	r2, #37672	; 0x9328
 8004180:	4293      	cmp	r3, r2
 8004182:	f040 80f7 	bne.w	8004374 <LCD_Init+0x294c>
	{
  		LCD_WriteReg(0x00EC,0x108F);// internal timeing
 8004186:	f241 018f 	movw	r1, #4239	; 0x108f
 800418a:	20ec      	movs	r0, #236	; 0xec
 800418c:	f7fc fe92 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0x00EF,0x1234);// ADD
 8004190:	f241 2134 	movw	r1, #4660	; 0x1234
 8004194:	20ef      	movs	r0, #239	; 0xef
 8004196:	f7fc fe8d 	bl	8000eb4 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);
        //LCD_WriteReg(0x0000,0x0001);//开启内部时钟
        LCD_WriteReg(0x0001,0x0100);
 800419a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800419e:	2001      	movs	r0, #1
 80041a0:	f7fc fe88 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);//电源开启
 80041a4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80041a8:	2002      	movs	r0, #2
 80041aa:	f7fc fe83 	bl	8000eb4 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(0<<3) );//65K
 80041ae:	f241 0130 	movw	r1, #4144	; 0x1030
 80041b2:	2003      	movs	r0, #3
 80041b4:	f7fc fe7e 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 80041b8:	2100      	movs	r1, #0
 80041ba:	2004      	movs	r0, #4
 80041bc:	f7fc fe7a 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x0202);
 80041c0:	f240 2102 	movw	r1, #514	; 0x202
 80041c4:	2008      	movs	r0, #8
 80041c6:	f7fc fe75 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0009,0x0000);
 80041ca:	2100      	movs	r1, #0
 80041cc:	2009      	movs	r0, #9
 80041ce:	f7fc fe71 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000a,0x0000);//display setting
 80041d2:	2100      	movs	r1, #0
 80041d4:	200a      	movs	r0, #10
 80041d6:	f7fc fe6d 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000c,0x0001);//display setting
 80041da:	2101      	movs	r1, #1
 80041dc:	200c      	movs	r0, #12
 80041de:	f7fc fe69 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000d,0x0000);//0f3c
 80041e2:	2100      	movs	r1, #0
 80041e4:	200d      	movs	r0, #13
 80041e6:	f7fc fe65 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000f,0x0000);
 80041ea:	2100      	movs	r1, #0
 80041ec:	200f      	movs	r0, #15
 80041ee:	f7fc fe61 	bl	8000eb4 <LCD_WriteReg>
		//电源配置
        LCD_WriteReg(0x0010,0x0000);
 80041f2:	2100      	movs	r1, #0
 80041f4:	2010      	movs	r0, #16
 80041f6:	f7fc fe5d 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0007);
 80041fa:	2107      	movs	r1, #7
 80041fc:	2011      	movs	r0, #17
 80041fe:	f7fc fe59 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x0000);
 8004202:	2100      	movs	r1, #0
 8004204:	2012      	movs	r0, #18
 8004206:	f7fc fe55 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0000);
 800420a:	2100      	movs	r1, #0
 800420c:	2013      	movs	r0, #19
 800420e:	f7fc fe51 	bl	8000eb4 <LCD_WriteReg>
     	LCD_WriteReg(0x0007,0x0001);
 8004212:	2101      	movs	r1, #1
 8004214:	2007      	movs	r0, #7
 8004216:	f7fc fe4d 	bl	8000eb4 <LCD_WriteReg>
     	HAL_Delay(50);
 800421a:	2032      	movs	r0, #50	; 0x32
 800421c:	f001 fbe4 	bl	80059e8 <HAL_Delay>
        LCD_WriteReg(0x0010,0x1490);
 8004220:	f241 4190 	movw	r1, #5264	; 0x1490
 8004224:	2010      	movs	r0, #16
 8004226:	f7fc fe45 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0227);
 800422a:	f240 2127 	movw	r1, #551	; 0x227
 800422e:	2011      	movs	r0, #17
 8004230:	f7fc fe40 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 8004234:	2032      	movs	r0, #50	; 0x32
 8004236:	f001 fbd7 	bl	80059e8 <HAL_Delay>
        LCD_WriteReg(0x0012,0x008A);
 800423a:	218a      	movs	r1, #138	; 0x8a
 800423c:	2012      	movs	r0, #18
 800423e:	f7fc fe39 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 8004242:	2032      	movs	r0, #50	; 0x32
 8004244:	f001 fbd0 	bl	80059e8 <HAL_Delay>
        LCD_WriteReg(0x0013,0x1a00);
 8004248:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800424c:	2013      	movs	r0, #19
 800424e:	f7fc fe31 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x0006);
 8004252:	2106      	movs	r1, #6
 8004254:	2029      	movs	r0, #41	; 0x29
 8004256:	f7fc fe2d 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x002b,0x000d);
 800425a:	210d      	movs	r1, #13
 800425c:	202b      	movs	r0, #43	; 0x2b
 800425e:	f7fc fe29 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 8004262:	2032      	movs	r0, #50	; 0x32
 8004264:	f001 fbc0 	bl	80059e8 <HAL_Delay>
        LCD_WriteReg(0x0020,0x0000);
 8004268:	2100      	movs	r1, #0
 800426a:	2020      	movs	r0, #32
 800426c:	f7fc fe22 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 8004270:	2100      	movs	r1, #0
 8004272:	2021      	movs	r0, #33	; 0x21
 8004274:	f7fc fe1e 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 8004278:	2032      	movs	r0, #50	; 0x32
 800427a:	f001 fbb5 	bl	80059e8 <HAL_Delay>
		//伽马校正
        LCD_WriteReg(0x0030,0x0000);
 800427e:	2100      	movs	r1, #0
 8004280:	2030      	movs	r0, #48	; 0x30
 8004282:	f7fc fe17 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0604);
 8004286:	f240 6104 	movw	r1, #1540	; 0x604
 800428a:	2031      	movs	r0, #49	; 0x31
 800428c:	f7fc fe12 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0305);
 8004290:	f240 3105 	movw	r1, #773	; 0x305
 8004294:	2032      	movs	r0, #50	; 0x32
 8004296:	f7fc fe0d 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0000);
 800429a:	2100      	movs	r1, #0
 800429c:	2035      	movs	r0, #53	; 0x35
 800429e:	f7fc fe09 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x0C09);
 80042a2:	f640 4109 	movw	r1, #3081	; 0xc09
 80042a6:	2036      	movs	r0, #54	; 0x36
 80042a8:	f7fc fe04 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0204);
 80042ac:	f44f 7101 	mov.w	r1, #516	; 0x204
 80042b0:	2037      	movs	r0, #55	; 0x37
 80042b2:	f7fc fdff 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0301);
 80042b6:	f240 3101 	movw	r1, #769	; 0x301
 80042ba:	2038      	movs	r0, #56	; 0x38
 80042bc:	f7fc fdfa 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0707);
 80042c0:	f240 7107 	movw	r1, #1799	; 0x707
 80042c4:	2039      	movs	r0, #57	; 0x39
 80042c6:	f7fc fdf5 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x003c,0x0000);
 80042ca:	2100      	movs	r1, #0
 80042cc:	203c      	movs	r0, #60	; 0x3c
 80042ce:	f7fc fdf1 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x003d,0x0a0a);
 80042d2:	f640 210a 	movw	r1, #2570	; 0xa0a
 80042d6:	203d      	movs	r0, #61	; 0x3d
 80042d8:	f7fc fdec 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 80042dc:	2032      	movs	r0, #50	; 0x32
 80042de:	f001 fb83 	bl	80059e8 <HAL_Delay>
        LCD_WriteReg(0x0050,0x0000); //水平GRAM起始位置
 80042e2:	2100      	movs	r1, #0
 80042e4:	2050      	movs	r0, #80	; 0x50
 80042e6:	f7fc fde5 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00ef); //水平GRAM终止位置
 80042ea:	21ef      	movs	r1, #239	; 0xef
 80042ec:	2051      	movs	r0, #81	; 0x51
 80042ee:	f7fc fde1 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000); //垂直GRAM起始位置
 80042f2:	2100      	movs	r1, #0
 80042f4:	2052      	movs	r0, #82	; 0x52
 80042f6:	f7fc fddd 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013f); //垂直GRAM终止位置
 80042fa:	f240 113f 	movw	r1, #319	; 0x13f
 80042fe:	2053      	movs	r0, #83	; 0x53
 8004300:	f7fc fdd8 	bl	8000eb4 <LCD_WriteReg>

         LCD_WriteReg(0x0060,0xa700);
 8004304:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004308:	2060      	movs	r0, #96	; 0x60
 800430a:	f7fc fdd3 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 800430e:	2101      	movs	r1, #1
 8004310:	2061      	movs	r0, #97	; 0x61
 8004312:	f7fc fdcf 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x006a,0x0000);
 8004316:	2100      	movs	r1, #0
 8004318:	206a      	movs	r0, #106	; 0x6a
 800431a:	f7fc fdcb 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 800431e:	2100      	movs	r1, #0
 8004320:	2080      	movs	r0, #128	; 0x80
 8004322:	f7fc fdc7 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0081,0x0000);
 8004326:	2100      	movs	r1, #0
 8004328:	2081      	movs	r0, #129	; 0x81
 800432a:	f7fc fdc3 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 800432e:	2100      	movs	r1, #0
 8004330:	2082      	movs	r0, #130	; 0x82
 8004332:	f7fc fdbf 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8004336:	2100      	movs	r1, #0
 8004338:	2083      	movs	r0, #131	; 0x83
 800433a:	f7fc fdbb 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 800433e:	2100      	movs	r1, #0
 8004340:	2084      	movs	r0, #132	; 0x84
 8004342:	f7fc fdb7 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8004346:	2100      	movs	r1, #0
 8004348:	2085      	movs	r0, #133	; 0x85
 800434a:	f7fc fdb3 	bl	8000eb4 <LCD_WriteReg>

        LCD_WriteReg(0x0090,0x0010);
 800434e:	2110      	movs	r1, #16
 8004350:	2090      	movs	r0, #144	; 0x90
 8004352:	f7fc fdaf 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0600);
 8004356:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800435a:	2092      	movs	r0, #146	; 0x92
 800435c:	f7fc fdaa 	bl	8000eb4 <LCD_WriteReg>
        //开启显示设置
        LCD_WriteReg(0x0007,0x0133);
 8004360:	f240 1133 	movw	r1, #307	; 0x133
 8004364:	2007      	movs	r0, #7
 8004366:	f7fc fda5 	bl	8000eb4 <LCD_WriteReg>
 800436a:	f000 bf86 	b.w	800527a <LCD_Init+0x3852>
 800436e:	bf00      	nop
 8004370:	20000258 	.word	0x20000258
	}else if(lcddev.id==0x9320)//测试OK.
 8004374:	4bce      	ldr	r3, [pc, #824]	; (80046b0 <LCD_Init+0x2c88>)
 8004376:	889b      	ldrh	r3, [r3, #4]
 8004378:	f249 3220 	movw	r2, #37664	; 0x9320
 800437c:	4293      	cmp	r3, r2
 800437e:	f040 80ad 	bne.w	80044dc <LCD_Init+0x2ab4>
	{
		LCD_WriteReg(0x00,0x0000);
 8004382:	2100      	movs	r1, #0
 8004384:	2000      	movs	r0, #0
 8004386:	f7fc fd95 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x01,0x0100);	//Driver Output Contral.
 800438a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800438e:	2001      	movs	r0, #1
 8004390:	f7fc fd90 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);	//LCD Driver Waveform Contral.
 8004394:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004398:	2002      	movs	r0, #2
 800439a:	f7fc fd8b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode Set.
 800439e:	f241 0130 	movw	r1, #4144	; 0x1030
 80043a2:	2003      	movs	r0, #3
 80043a4:	f7fc fd86 	bl	8000eb4 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04,0x0000);	//Scalling Contral.
 80043a8:	2100      	movs	r1, #0
 80043aa:	2004      	movs	r0, #4
 80043ac:	f7fc fd82 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0202);	//Display Contral 2.(0x0207)
 80043b0:	f240 2102 	movw	r1, #514	; 0x202
 80043b4:	2008      	movs	r0, #8
 80043b6:	f7fc fd7d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000);	//Display Contral 3.(0x0000)
 80043ba:	2100      	movs	r1, #0
 80043bc:	2009      	movs	r0, #9
 80043be:	f7fc fd79 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
 80043c2:	2100      	movs	r1, #0
 80043c4:	200a      	movs	r0, #10
 80043c6:	f7fc fd75 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
 80043ca:	2101      	movs	r1, #1
 80043cc:	200c      	movs	r0, #12
 80043ce:	f7fc fd71 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0d,0x0000);	//Frame Maker Position.
 80043d2:	2100      	movs	r1, #0
 80043d4:	200d      	movs	r0, #13
 80043d6:	f7fc fd6d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0f,0x0000);	//Extern Display Interface Contral 2.
 80043da:	2100      	movs	r1, #0
 80043dc:	200f      	movs	r0, #15
 80043de:	f7fc fd69 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(50);
 80043e2:	2032      	movs	r0, #50	; 0x32
 80043e4:	f001 fb00 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0x07,0x0101);	//Display Contral.
 80043e8:	f240 1101 	movw	r1, #257	; 0x101
 80043ec:	2007      	movs	r0, #7
 80043ee:	f7fc fd61 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(50);
 80043f2:	2032      	movs	r0, #50	; 0x32
 80043f4:	f001 faf8 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
 80043f8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80043fc:	2010      	movs	r0, #16
 80043fe:	f7fc fd59 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0007);								//Power Control 2.(0x0001)
 8004402:	2107      	movs	r1, #7
 8004404:	2011      	movs	r0, #17
 8004406:	f7fc fd55 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));				//Power Control 3.(0x0138)
 800440a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800440e:	2012      	movs	r0, #18
 8004410:	f7fc fd50 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0b00);								//Power Control 4.
 8004414:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004418:	2013      	movs	r0, #19
 800441a:	f7fc fd4b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0000);								//Power Control 7.
 800441e:	2100      	movs	r1, #0
 8004420:	2029      	movs	r0, #41	; 0x29
 8004422:	f7fc fd47 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x2b,(1<<14)|(1<<4));
 8004426:	f244 0110 	movw	r1, #16400	; 0x4010
 800442a:	202b      	movs	r0, #43	; 0x2b
 800442c:	f7fc fd42 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x50,0);	//Set X Star
 8004430:	2100      	movs	r1, #0
 8004432:	2050      	movs	r0, #80	; 0x50
 8004434:	f7fc fd3e 	bl	8000eb4 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51,239);	//Set Y Star
 8004438:	21ef      	movs	r1, #239	; 0xef
 800443a:	2051      	movs	r0, #81	; 0x51
 800443c:	f7fc fd3a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x52,0);	//Set Y End.t.
 8004440:	2100      	movs	r1, #0
 8004442:	2052      	movs	r0, #82	; 0x52
 8004444:	f7fc fd36 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x53,319);	//
 8004448:	f240 113f 	movw	r1, #319	; 0x13f
 800444c:	2053      	movs	r0, #83	; 0x53
 800444e:	f7fc fd31 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x60,0x2700);	//Driver Output Control.
 8004452:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004456:	2060      	movs	r0, #96	; 0x60
 8004458:	f7fc fd2c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x61,0x0001);	//Driver Output Control.
 800445c:	2101      	movs	r1, #1
 800445e:	2061      	movs	r0, #97	; 0x61
 8004460:	f7fc fd28 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x6a,0x0000);	//Vertical Srcoll Control.
 8004464:	2100      	movs	r1, #0
 8004466:	206a      	movs	r0, #106	; 0x6a
 8004468:	f7fc fd24 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x80,0x0000);	//Display Position? Partial Display 1.
 800446c:	2100      	movs	r1, #0
 800446e:	2080      	movs	r0, #128	; 0x80
 8004470:	f7fc fd20 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000);	//RAM Address Start? Partial Display 1.
 8004474:	2100      	movs	r1, #0
 8004476:	2081      	movs	r0, #129	; 0x81
 8004478:	f7fc fd1c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000);	//RAM Address End-Partial Display 1.
 800447c:	2100      	movs	r1, #0
 800447e:	2082      	movs	r0, #130	; 0x82
 8004480:	f7fc fd18 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000);	//Displsy Position? Partial Display 2.
 8004484:	2100      	movs	r1, #0
 8004486:	2083      	movs	r0, #131	; 0x83
 8004488:	f7fc fd14 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000);	//RAM Address Start? Partial Display 2.
 800448c:	2100      	movs	r1, #0
 800448e:	2084      	movs	r0, #132	; 0x84
 8004490:	f7fc fd10 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000);	//RAM Address End? Partial Display 2.
 8004494:	2100      	movs	r1, #0
 8004496:	2085      	movs	r0, #133	; 0x85
 8004498:	f7fc fd0c 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
 800449c:	2110      	movs	r1, #16
 800449e:	2090      	movs	r0, #144	; 0x90
 80044a0:	f7fc fd08 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
 80044a4:	2100      	movs	r1, #0
 80044a6:	2092      	movs	r0, #146	; 0x92
 80044a8:	f7fc fd04 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0001);	//Panel Interface Contral 3.
 80044ac:	2101      	movs	r1, #1
 80044ae:	2093      	movs	r0, #147	; 0x93
 80044b0:	f7fc fd00 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
 80044b4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80044b8:	2095      	movs	r0, #149	; 0x95
 80044ba:	f7fc fcfb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x97,(0<<8));	//
 80044be:	2100      	movs	r1, #0
 80044c0:	2097      	movs	r0, #151	; 0x97
 80044c2:	f7fc fcf7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x98,0x0000);	//Frame Cycle Contral.
 80044c6:	2100      	movs	r1, #0
 80044c8:	2098      	movs	r0, #152	; 0x98
 80044ca:	f7fc fcf3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);	//(0x0173)
 80044ce:	f240 1173 	movw	r1, #371	; 0x173
 80044d2:	2007      	movs	r0, #7
 80044d4:	f7fc fcee 	bl	8000eb4 <LCD_WriteReg>
 80044d8:	f000 becf 	b.w	800527a <LCD_Init+0x3852>
	}else if(lcddev.id==0X9331)//OK |/|/|
 80044dc:	4b74      	ldr	r3, [pc, #464]	; (80046b0 <LCD_Init+0x2c88>)
 80044de:	889b      	ldrh	r3, [r3, #4]
 80044e0:	f249 3231 	movw	r2, #37681	; 0x9331
 80044e4:	4293      	cmp	r3, r2
 80044e6:	f040 80e5 	bne.w	80046b4 <LCD_Init+0x2c8c>
	{
		LCD_WriteReg(0x00E7, 0x1014);
 80044ea:	f241 0114 	movw	r1, #4116	; 0x1014
 80044ee:	20e7      	movs	r0, #231	; 0xe7
 80044f0:	f7fc fce0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80044f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80044f8:	2001      	movs	r0, #1
 80044fa:	f7fc fcdb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80044fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004502:	2002      	movs	r0, #2
 8004504:	f7fc fcd6 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(1<<3));//65K
 8004508:	f241 0138 	movw	r1, #4152	; 0x1038
 800450c:	2003      	movs	r0, #3
 800450e:	f7fc fcd1 	bl	8000eb4 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004512:	f240 2102 	movw	r1, #514	; 0x202
 8004516:	2008      	movs	r0, #8
 8004518:	f7fc fccc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 800451c:	2100      	movs	r1, #0
 800451e:	2009      	movs	r0, #9
 8004520:	f7fc fcc8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004524:	2100      	movs	r1, #0
 8004526:	200a      	movs	r0, #10
 8004528:	f7fc fcc4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 800452c:	2100      	movs	r1, #0
 800452e:	200c      	movs	r0, #12
 8004530:	f7fc fcc0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004534:	2100      	movs	r1, #0
 8004536:	200d      	movs	r0, #13
 8004538:	f7fc fcbc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 800453c:	2100      	movs	r1, #0
 800453e:	200f      	movs	r0, #15
 8004540:	f7fc fcb8 	bl	8000eb4 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004544:	2100      	movs	r1, #0
 8004546:	2010      	movs	r0, #16
 8004548:	f7fc fcb4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 800454c:	2107      	movs	r1, #7
 800454e:	2011      	movs	r0, #17
 8004550:	f7fc fcb0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004554:	2100      	movs	r1, #0
 8004556:	2012      	movs	r0, #18
 8004558:	f7fc fcac 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 800455c:	2100      	movs	r1, #0
 800455e:	2013      	movs	r0, #19
 8004560:	f7fc fca8 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004564:	20c8      	movs	r0, #200	; 0xc8
 8004566:	f001 fa3f 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800456a:	f241 6190 	movw	r1, #5776	; 0x1690
 800456e:	2010      	movs	r0, #16
 8004570:	f7fc fca0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004574:	f240 2127 	movw	r1, #551	; 0x227
 8004578:	2011      	movs	r0, #17
 800457a:	f7fc fc9b 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800457e:	2032      	movs	r0, #50	; 0x32
 8004580:	f001 fa32 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004584:	210c      	movs	r1, #12
 8004586:	2012      	movs	r0, #18
 8004588:	f7fc fc94 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 800458c:	2032      	movs	r0, #50	; 0x32
 800458e:	f001 fa2b 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004592:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004596:	2013      	movs	r0, #19
 8004598:	f7fc fc8c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 800459c:	2111      	movs	r1, #17
 800459e:	2029      	movs	r0, #41	; 0x29
 80045a0:	f7fc fc88 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 80045a4:	210b      	movs	r1, #11
 80045a6:	202b      	movs	r0, #43	; 0x2b
 80045a8:	f7fc fc84 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80045ac:	2032      	movs	r0, #50	; 0x32
 80045ae:	f001 fa1b 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80045b2:	2100      	movs	r1, #0
 80045b4:	2020      	movs	r0, #32
 80045b6:	f7fc fc7d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80045ba:	f240 113f 	movw	r1, #319	; 0x13f
 80045be:	2021      	movs	r0, #33	; 0x21
 80045c0:	f7fc fc78 	bl	8000eb4 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 80045c4:	2100      	movs	r1, #0
 80045c6:	2030      	movs	r0, #48	; 0x30
 80045c8:	f7fc fc74 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 80045cc:	f44f 7183 	mov.w	r1, #262	; 0x106
 80045d0:	2031      	movs	r0, #49	; 0x31
 80045d2:	f7fc fc6f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 80045d6:	2100      	movs	r1, #0
 80045d8:	2032      	movs	r0, #50	; 0x32
 80045da:	f7fc fc6b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 80045de:	f44f 7101 	mov.w	r1, #516	; 0x204
 80045e2:	2035      	movs	r0, #53	; 0x35
 80045e4:	f7fc fc66 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 80045e8:	f241 610a 	movw	r1, #5642	; 0x160a
 80045ec:	2036      	movs	r0, #54	; 0x36
 80045ee:	f7fc fc61 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 80045f2:	f240 7107 	movw	r1, #1799	; 0x707
 80045f6:	2037      	movs	r0, #55	; 0x37
 80045f8:	f7fc fc5c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 80045fc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004600:	2038      	movs	r0, #56	; 0x38
 8004602:	f7fc fc57 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004606:	f240 7107 	movw	r1, #1799	; 0x707
 800460a:	2039      	movs	r0, #57	; 0x39
 800460c:	f7fc fc52 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004610:	f240 4102 	movw	r1, #1026	; 0x402
 8004614:	203c      	movs	r0, #60	; 0x3c
 8004616:	f7fc fc4d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 800461a:	f640 410f 	movw	r1, #3087	; 0xc0f
 800461e:	203d      	movs	r0, #61	; 0x3d
 8004620:	f7fc fc48 	bl	8000eb4 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004624:	2100      	movs	r1, #0
 8004626:	2050      	movs	r0, #80	; 0x50
 8004628:	f7fc fc44 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 800462c:	21ef      	movs	r1, #239	; 0xef
 800462e:	2051      	movs	r0, #81	; 0x51
 8004630:	f7fc fc40 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004634:	2100      	movs	r1, #0
 8004636:	2052      	movs	r0, #82	; 0x52
 8004638:	f7fc fc3c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 800463c:	f240 113f 	movw	r1, #319	; 0x13f
 8004640:	2053      	movs	r0, #83	; 0x53
 8004642:	f7fc fc37 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004646:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800464a:	2060      	movs	r0, #96	; 0x60
 800464c:	f7fc fc32 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
 8004650:	2101      	movs	r1, #1
 8004652:	2061      	movs	r0, #97	; 0x61
 8004654:	f7fc fc2e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004658:	2100      	movs	r1, #0
 800465a:	206a      	movs	r0, #106	; 0x6a
 800465c:	f7fc fc2a 	bl	8000eb4 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004660:	2100      	movs	r1, #0
 8004662:	2080      	movs	r0, #128	; 0x80
 8004664:	f7fc fc26 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004668:	2100      	movs	r1, #0
 800466a:	2081      	movs	r0, #129	; 0x81
 800466c:	f7fc fc22 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004670:	2100      	movs	r1, #0
 8004672:	2082      	movs	r0, #130	; 0x82
 8004674:	f7fc fc1e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004678:	2100      	movs	r1, #0
 800467a:	2083      	movs	r0, #131	; 0x83
 800467c:	f7fc fc1a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004680:	2100      	movs	r1, #0
 8004682:	2084      	movs	r0, #132	; 0x84
 8004684:	f7fc fc16 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004688:	2100      	movs	r1, #0
 800468a:	2085      	movs	r0, #133	; 0x85
 800468c:	f7fc fc12 	bl	8000eb4 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004690:	2110      	movs	r1, #16
 8004692:	2090      	movs	r0, #144	; 0x90
 8004694:	f7fc fc0e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004698:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800469c:	2092      	movs	r0, #146	; 0x92
 800469e:	f7fc fc09 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 80046a2:	f240 1133 	movw	r1, #307	; 0x133
 80046a6:	2007      	movs	r0, #7
 80046a8:	f7fc fc04 	bl	8000eb4 <LCD_WriteReg>
 80046ac:	f000 bde5 	b.w	800527a <LCD_Init+0x3852>
 80046b0:	20000258 	.word	0x20000258
	}else if(lcddev.id==0x5408)
 80046b4:	4be2      	ldr	r3, [pc, #904]	; (8004a40 <LCD_Init+0x3018>)
 80046b6:	889b      	ldrh	r3, [r3, #4]
 80046b8:	f245 4208 	movw	r2, #21512	; 0x5408
 80046bc:	4293      	cmp	r3, r2
 80046be:	f040 80a3 	bne.w	8004808 <LCD_Init+0x2de0>
	{
		LCD_WriteReg(0x01,0x0100);
 80046c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046c6:	2001      	movs	r0, #1
 80046c8:	f7fc fbf4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);//LCD Driving Waveform Contral
 80046cc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80046d0:	2002      	movs	r0, #2
 80046d2:	f7fc fbef 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode设置
 80046d6:	f241 0130 	movw	r1, #4144	; 0x1030
 80046da:	2003      	movs	r0, #3
 80046dc:	f7fc fbea 	bl	8000eb4 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04,0x0000); //Scalling Control register
 80046e0:	2100      	movs	r1, #0
 80046e2:	2004      	movs	r0, #4
 80046e4:	f7fc fbe6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0207); //Display Control 2
 80046e8:	f240 2107 	movw	r1, #519	; 0x207
 80046ec:	2008      	movs	r0, #8
 80046ee:	f7fc fbe1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000); //Display Control 3
 80046f2:	2100      	movs	r1, #0
 80046f4:	2009      	movs	r0, #9
 80046f6:	f7fc fbdd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0A,0x0000); //Frame Cycle Control
 80046fa:	2100      	movs	r1, #0
 80046fc:	200a      	movs	r0, #10
 80046fe:	f7fc fbd9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0C,0x0000); //External Display Interface Control 1
 8004702:	2100      	movs	r1, #0
 8004704:	200c      	movs	r0, #12
 8004706:	f7fc fbd5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0D,0x0000); //Frame Maker Position
 800470a:	2100      	movs	r1, #0
 800470c:	200d      	movs	r0, #13
 800470e:	f7fc fbd1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0F,0x0000); //External Display Interface Control 2
 8004712:	2100      	movs	r1, #0
 8004714:	200f      	movs	r0, #15
 8004716:	f7fc fbcd 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 800471a:	2014      	movs	r0, #20
 800471c:	f001 f964 	bl	80059e8 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10,0x16B0); //0x14B0 //Power Control 1
 8004720:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004724:	2010      	movs	r0, #16
 8004726:	f7fc fbc5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0001); //0x0007 //Power Control 2
 800472a:	2101      	movs	r1, #1
 800472c:	2011      	movs	r0, #17
 800472e:	f7fc fbc1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x17,0x0001); //0x0000 //Power Control 3
 8004732:	2101      	movs	r1, #1
 8004734:	2017      	movs	r0, #23
 8004736:	f7fc fbbd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x12,0x0138); //0x013B //Power Control 4
 800473a:	f44f 719c 	mov.w	r1, #312	; 0x138
 800473e:	2012      	movs	r0, #18
 8004740:	f7fc fbb8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0800); //0x0800 //Power Control 5
 8004744:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004748:	2013      	movs	r0, #19
 800474a:	f7fc fbb3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0009); //NVM read data 2
 800474e:	2109      	movs	r1, #9
 8004750:	2029      	movs	r0, #41	; 0x29
 8004752:	f7fc fbaf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x2a,0x0009); //NVM read data 3
 8004756:	2109      	movs	r1, #9
 8004758:	202a      	movs	r0, #42	; 0x2a
 800475a:	f7fc fbab 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0xa4,0x0000);
 800475e:	2100      	movs	r1, #0
 8004760:	20a4      	movs	r0, #164	; 0xa4
 8004762:	f7fc fba7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x50,0x0000); //设置操作窗口的X轴开始列
 8004766:	2100      	movs	r1, #0
 8004768:	2050      	movs	r0, #80	; 0x50
 800476a:	f7fc fba3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x51,0x00EF); //设置操作窗口的X轴结束列
 800476e:	21ef      	movs	r1, #239	; 0xef
 8004770:	2051      	movs	r0, #81	; 0x51
 8004772:	f7fc fb9f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x52,0x0000); //设置操作窗口的Y轴开始行
 8004776:	2100      	movs	r1, #0
 8004778:	2052      	movs	r0, #82	; 0x52
 800477a:	f7fc fb9b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x53,0x013F); //设置操作窗口的Y轴结束行
 800477e:	f240 113f 	movw	r1, #319	; 0x13f
 8004782:	2053      	movs	r0, #83	; 0x53
 8004784:	f7fc fb96 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x60,0x2700); //Driver Output Control
 8004788:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800478c:	2060      	movs	r0, #96	; 0x60
 800478e:	f7fc fb91 	bl	8000eb4 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61,0x0001); //Driver Output Control
 8004792:	2101      	movs	r1, #1
 8004794:	2061      	movs	r0, #97	; 0x61
 8004796:	f7fc fb8d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x6A,0x0000); //Vertical Scroll Control
 800479a:	2100      	movs	r1, #0
 800479c:	206a      	movs	r0, #106	; 0x6a
 800479e:	f7fc fb89 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x80,0x0000); //Display Position – Partial Display 1
 80047a2:	2100      	movs	r1, #0
 80047a4:	2080      	movs	r0, #128	; 0x80
 80047a6:	f7fc fb85 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000); //RAM Address Start – Partial Display 1
 80047aa:	2100      	movs	r1, #0
 80047ac:	2081      	movs	r0, #129	; 0x81
 80047ae:	f7fc fb81 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000); //RAM address End - Partial Display 1
 80047b2:	2100      	movs	r1, #0
 80047b4:	2082      	movs	r0, #130	; 0x82
 80047b6:	f7fc fb7d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000); //Display Position – Partial Display 2
 80047ba:	2100      	movs	r1, #0
 80047bc:	2083      	movs	r0, #131	; 0x83
 80047be:	f7fc fb79 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000); //RAM Address Start – Partial Display 2
 80047c2:	2100      	movs	r1, #0
 80047c4:	2084      	movs	r0, #132	; 0x84
 80047c6:	f7fc fb75 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000); //RAM address End – Partail Display2
 80047ca:	2100      	movs	r1, #0
 80047cc:	2085      	movs	r0, #133	; 0x85
 80047ce:	f7fc fb71 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x90,0x0013); //Frame Cycle Control
 80047d2:	2113      	movs	r1, #19
 80047d4:	2090      	movs	r0, #144	; 0x90
 80047d6:	f7fc fb6d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);  //Panel Interface Control 2
 80047da:	2100      	movs	r1, #0
 80047dc:	2092      	movs	r0, #146	; 0x92
 80047de:	f7fc fb69 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0003); //Panel Interface control 3
 80047e2:	2103      	movs	r1, #3
 80047e4:	2093      	movs	r0, #147	; 0x93
 80047e6:	f7fc fb65 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);  //Frame Cycle Control
 80047ea:	f44f 7188 	mov.w	r1, #272	; 0x110
 80047ee:	2095      	movs	r0, #149	; 0x95
 80047f0:	f7fc fb60 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);
 80047f4:	f240 1173 	movw	r1, #371	; 0x173
 80047f8:	2007      	movs	r0, #7
 80047fa:	f7fc fb5b 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(50);
 80047fe:	2032      	movs	r0, #50	; 0x32
 8004800:	f001 f8f2 	bl	80059e8 <HAL_Delay>
 8004804:	f000 bd39 	b.w	800527a <LCD_Init+0x3852>
	}
	else if(lcddev.id==0x1505)//OK
 8004808:	4b8d      	ldr	r3, [pc, #564]	; (8004a40 <LCD_Init+0x3018>)
 800480a:	889b      	ldrh	r3, [r3, #4]
 800480c:	f241 5205 	movw	r2, #5381	; 0x1505
 8004810:	4293      	cmp	r3, r2
 8004812:	f040 8117 	bne.w	8004a44 <LCD_Init+0x301c>
	{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
        LCD_WriteReg(0x0007,0x0000);
 8004816:	2100      	movs	r1, #0
 8004818:	2007      	movs	r0, #7
 800481a:	f7fc fb4b 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 800481e:	2032      	movs	r0, #50	; 0x32
 8004820:	f001 f8e2 	bl	80059e8 <HAL_Delay>
        LCD_WriteReg(0x0012,0x011C);//0x011A   why need to set several times?
 8004824:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004828:	2012      	movs	r0, #18
 800482a:	f7fc fb43 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x00A4,0x0001);//NVM
 800482e:	2101      	movs	r1, #1
 8004830:	20a4      	movs	r0, #164	; 0xa4
 8004832:	f7fc fb3f 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x000F);
 8004836:	210f      	movs	r1, #15
 8004838:	2008      	movs	r0, #8
 800483a:	f7fc fb3b 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000A,0x0008);
 800483e:	2108      	movs	r1, #8
 8004840:	200a      	movs	r0, #10
 8004842:	f7fc fb37 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000D,0x0008);
 8004846:	2108      	movs	r1, #8
 8004848:	200d      	movs	r0, #13
 800484a:	f7fc fb33 	bl	8000eb4 <LCD_WriteReg>
  		//伽马校正
        LCD_WriteReg(0x0030,0x0707);
 800484e:	f240 7107 	movw	r1, #1799	; 0x707
 8004852:	2030      	movs	r0, #48	; 0x30
 8004854:	f7fc fb2e 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0007); //0x0707
 8004858:	2107      	movs	r1, #7
 800485a:	2031      	movs	r0, #49	; 0x31
 800485c:	f7fc fb2a 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0603);
 8004860:	f240 6103 	movw	r1, #1539	; 0x603
 8004864:	2032      	movs	r0, #50	; 0x32
 8004866:	f7fc fb25 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0033,0x0700);
 800486a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800486e:	2033      	movs	r0, #51	; 0x33
 8004870:	f7fc fb20 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0034,0x0202);
 8004874:	f240 2102 	movw	r1, #514	; 0x202
 8004878:	2034      	movs	r0, #52	; 0x34
 800487a:	f7fc fb1b 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0002); //?0x0606
 800487e:	2102      	movs	r1, #2
 8004880:	2035      	movs	r0, #53	; 0x35
 8004882:	f7fc fb17 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x1F0F);
 8004886:	f641 710f 	movw	r1, #7951	; 0x1f0f
 800488a:	2036      	movs	r0, #54	; 0x36
 800488c:	f7fc fb12 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0707); //0x0f0f  0x0105
 8004890:	f240 7107 	movw	r1, #1799	; 0x707
 8004894:	2037      	movs	r0, #55	; 0x37
 8004896:	f7fc fb0d 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0000);
 800489a:	2100      	movs	r1, #0
 800489c:	2038      	movs	r0, #56	; 0x38
 800489e:	f7fc fb09 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0000);
 80048a2:	2100      	movs	r1, #0
 80048a4:	2039      	movs	r0, #57	; 0x39
 80048a6:	f7fc fb05 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x003A,0x0707);
 80048aa:	f240 7107 	movw	r1, #1799	; 0x707
 80048ae:	203a      	movs	r0, #58	; 0x3a
 80048b0:	f7fc fb00 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x003B,0x0000); //0x0303
 80048b4:	2100      	movs	r1, #0
 80048b6:	203b      	movs	r0, #59	; 0x3b
 80048b8:	f7fc fafc 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x003C,0x0007); //?0x0707
 80048bc:	2107      	movs	r1, #7
 80048be:	203c      	movs	r0, #60	; 0x3c
 80048c0:	f7fc faf8 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x003D,0x0000); //0x1313//0x1f08
 80048c4:	2100      	movs	r1, #0
 80048c6:	203d      	movs	r0, #61	; 0x3d
 80048c8:	f7fc faf4 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 80048cc:	2032      	movs	r0, #50	; 0x32
 80048ce:	f001 f88b 	bl	80059e8 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0001);
 80048d2:	2101      	movs	r1, #1
 80048d4:	2007      	movs	r0, #7
 80048d6:	f7fc faed 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0017,0x0001);//开启电源
 80048da:	2101      	movs	r1, #1
 80048dc:	2017      	movs	r0, #23
 80048de:	f7fc fae9 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(50);
 80048e2:	2032      	movs	r0, #50	; 0x32
 80048e4:	f001 f880 	bl	80059e8 <HAL_Delay>
  		//电源配置
        LCD_WriteReg(0x0010,0x17A0);
 80048e8:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 80048ec:	2010      	movs	r0, #16
 80048ee:	f7fc fae1 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0217);//reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 80048f2:	f240 2117 	movw	r1, #535	; 0x217
 80048f6:	2011      	movs	r0, #17
 80048f8:	f7fc fadc 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x011E);//0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 80048fc:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004900:	2012      	movs	r0, #18
 8004902:	f7fc fad7 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0F00);//VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004906:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800490a:	2013      	movs	r0, #19
 800490c:	f7fc fad2 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x002A,0x0000);
 8004910:	2100      	movs	r1, #0
 8004912:	202a      	movs	r0, #42	; 0x2a
 8004914:	f7fc face 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x000A);//0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004918:	210a      	movs	r1, #10
 800491a:	2029      	movs	r0, #41	; 0x29
 800491c:	f7fc faca 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x013E);// 0x013C  power supply on
 8004920:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004924:	2012      	movs	r0, #18
 8004926:	f7fc fac5 	bl	8000eb4 <LCD_WriteReg>
        //Coordinates Control//
        LCD_WriteReg(0x0050,0x0000);//0x0e00
 800492a:	2100      	movs	r1, #0
 800492c:	2050      	movs	r0, #80	; 0x50
 800492e:	f7fc fac1 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00EF);
 8004932:	21ef      	movs	r1, #239	; 0xef
 8004934:	2051      	movs	r0, #81	; 0x51
 8004936:	f7fc fabd 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000);
 800493a:	2100      	movs	r1, #0
 800493c:	2052      	movs	r0, #82	; 0x52
 800493e:	f7fc fab9 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013F);
 8004942:	f240 113f 	movw	r1, #319	; 0x13f
 8004946:	2053      	movs	r0, #83	; 0x53
 8004948:	f7fc fab4 	bl	8000eb4 <LCD_WriteReg>
    	//Pannel Image Control//
        LCD_WriteReg(0x0060,0x2700);
 800494c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004950:	2060      	movs	r0, #96	; 0x60
 8004952:	f7fc faaf 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8004956:	2101      	movs	r1, #1
 8004958:	2061      	movs	r0, #97	; 0x61
 800495a:	f7fc faab 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x006A,0x0000);
 800495e:	2100      	movs	r1, #0
 8004960:	206a      	movs	r0, #106	; 0x6a
 8004962:	f7fc faa7 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8004966:	2100      	movs	r1, #0
 8004968:	2080      	movs	r0, #128	; 0x80
 800496a:	f7fc faa3 	bl	8000eb4 <LCD_WriteReg>
    	//Partial Image Control//
        LCD_WriteReg(0x0081,0x0000);
 800496e:	2100      	movs	r1, #0
 8004970:	2081      	movs	r0, #129	; 0x81
 8004972:	f7fc fa9f 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8004976:	2100      	movs	r1, #0
 8004978:	2082      	movs	r0, #130	; 0x82
 800497a:	f7fc fa9b 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 800497e:	2100      	movs	r1, #0
 8004980:	2083      	movs	r0, #131	; 0x83
 8004982:	f7fc fa97 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8004986:	2100      	movs	r1, #0
 8004988:	2084      	movs	r0, #132	; 0x84
 800498a:	f7fc fa93 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 800498e:	2100      	movs	r1, #0
 8004990:	2085      	movs	r0, #133	; 0x85
 8004992:	f7fc fa8f 	bl	8000eb4 <LCD_WriteReg>
  		//Panel Interface Control//
        LCD_WriteReg(0x0090,0x0013);//0x0010 frenqucy
 8004996:	2113      	movs	r1, #19
 8004998:	2090      	movs	r0, #144	; 0x90
 800499a:	f7fc fa8b 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0300);
 800499e:	f44f 7140 	mov.w	r1, #768	; 0x300
 80049a2:	2092      	movs	r0, #146	; 0x92
 80049a4:	f7fc fa86 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0093,0x0005);
 80049a8:	2105      	movs	r1, #5
 80049aa:	2093      	movs	r0, #147	; 0x93
 80049ac:	f7fc fa82 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0095,0x0000);
 80049b0:	2100      	movs	r1, #0
 80049b2:	2095      	movs	r0, #149	; 0x95
 80049b4:	f7fc fa7e 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0097,0x0000);
 80049b8:	2100      	movs	r1, #0
 80049ba:	2097      	movs	r0, #151	; 0x97
 80049bc:	f7fc fa7a 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0098,0x0000);
 80049c0:	2100      	movs	r1, #0
 80049c2:	2098      	movs	r0, #152	; 0x98
 80049c4:	f7fc fa76 	bl	8000eb4 <LCD_WriteReg>

        LCD_WriteReg(0x0001,0x0100);
 80049c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049cc:	2001      	movs	r0, #1
 80049ce:	f7fc fa71 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);
 80049d2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80049d6:	2002      	movs	r0, #2
 80049d8:	f7fc fa6c 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 80049dc:	f241 0138 	movw	r1, #4152	; 0x1038
 80049e0:	2003      	movs	r0, #3
 80049e2:	f7fc fa67 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 80049e6:	2100      	movs	r1, #0
 80049e8:	2004      	movs	r0, #4
 80049ea:	f7fc fa63 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000C,0x0000);
 80049ee:	2100      	movs	r1, #0
 80049f0:	200c      	movs	r0, #12
 80049f2:	f7fc fa5f 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x000F,0x0000);
 80049f6:	2100      	movs	r1, #0
 80049f8:	200f      	movs	r0, #15
 80049fa:	f7fc fa5b 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0020,0x0000);
 80049fe:	2100      	movs	r1, #0
 8004a00:	2020      	movs	r0, #32
 8004a02:	f7fc fa57 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 8004a06:	2100      	movs	r1, #0
 8004a08:	2021      	movs	r0, #33	; 0x21
 8004a0a:	f7fc fa53 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0007,0x0021);
 8004a0e:	2121      	movs	r1, #33	; 0x21
 8004a10:	2007      	movs	r0, #7
 8004a12:	f7fc fa4f 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(20);
 8004a16:	2014      	movs	r0, #20
 8004a18:	f000 ffe6 	bl	80059e8 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0061);
 8004a1c:	2161      	movs	r1, #97	; 0x61
 8004a1e:	2007      	movs	r0, #7
 8004a20:	f7fc fa48 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(20);
 8004a24:	2014      	movs	r0, #20
 8004a26:	f000 ffdf 	bl	80059e8 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0173);
 8004a2a:	f240 1173 	movw	r1, #371	; 0x173
 8004a2e:	2007      	movs	r0, #7
 8004a30:	f7fc fa40 	bl	8000eb4 <LCD_WriteReg>
        HAL_Delay(20);
 8004a34:	2014      	movs	r0, #20
 8004a36:	f000 ffd7 	bl	80059e8 <HAL_Delay>
 8004a3a:	f000 bc1e 	b.w	800527a <LCD_Init+0x3852>
 8004a3e:	bf00      	nop
 8004a40:	20000258 	.word	0x20000258
	}else if(lcddev.id==0xB505)
 8004a44:	4bef      	ldr	r3, [pc, #956]	; (8004e04 <LCD_Init+0x33dc>)
 8004a46:	889b      	ldrh	r3, [r3, #4]
 8004a48:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	f040 8102 	bne.w	8004c56 <LCD_Init+0x322e>
	{
		LCD_WriteReg(0x0000,0x0000);
 8004a52:	2100      	movs	r1, #0
 8004a54:	2000      	movs	r0, #0
 8004a56:	f7fc fa2d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f7fc fa29 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004a62:	2100      	movs	r1, #0
 8004a64:	2000      	movs	r0, #0
 8004a66:	f7fc fa25 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	2000      	movs	r0, #0
 8004a6e:	f7fc fa21 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x00a4,0x0001);
 8004a72:	2101      	movs	r1, #1
 8004a74:	20a4      	movs	r0, #164	; 0xa4
 8004a76:	f7fc fa1d 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004a7a:	2014      	movs	r0, #20
 8004a7c:	f000 ffb4 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8004a80:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a84:	2060      	movs	r0, #96	; 0x60
 8004a86:	f7fc fa15 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8004a8a:	f240 2102 	movw	r1, #514	; 0x202
 8004a8e:	2008      	movs	r0, #8
 8004a90:	f7fc fa10 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0214);
 8004a94:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004a98:	2030      	movs	r0, #48	; 0x30
 8004a9a:	f7fc fa0b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x3715);
 8004a9e:	f243 7115 	movw	r1, #14101	; 0x3715
 8004aa2:	2031      	movs	r0, #49	; 0x31
 8004aa4:	f7fc fa06 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0604);
 8004aa8:	f240 6104 	movw	r1, #1540	; 0x604
 8004aac:	2032      	movs	r0, #50	; 0x32
 8004aae:	f7fc fa01 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0e16);
 8004ab2:	f640 6116 	movw	r1, #3606	; 0xe16
 8004ab6:	2033      	movs	r0, #51	; 0x33
 8004ab8:	f7fc f9fc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x2211);
 8004abc:	f242 2111 	movw	r1, #8721	; 0x2211
 8004ac0:	2034      	movs	r0, #52	; 0x34
 8004ac2:	f7fc f9f7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x1500);
 8004ac6:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8004aca:	2035      	movs	r0, #53	; 0x35
 8004acc:	f7fc f9f2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x8507);
 8004ad0:	f248 5107 	movw	r1, #34055	; 0x8507
 8004ad4:	2036      	movs	r0, #54	; 0x36
 8004ad6:	f7fc f9ed 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x1407);
 8004ada:	f241 4107 	movw	r1, #5127	; 0x1407
 8004ade:	2037      	movs	r0, #55	; 0x37
 8004ae0:	f7fc f9e8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x1403);
 8004ae4:	f241 4103 	movw	r1, #5123	; 0x1403
 8004ae8:	2038      	movs	r0, #56	; 0x38
 8004aea:	f7fc f9e3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0020);
 8004aee:	2120      	movs	r1, #32
 8004af0:	2039      	movs	r0, #57	; 0x39
 8004af2:	f7fc f9df 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x0090,0x001a);
 8004af6:	211a      	movs	r1, #26
 8004af8:	2090      	movs	r0, #144	; 0x90
 8004afa:	f7fc f9db 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0010,0x0000);
 8004afe:	2100      	movs	r1, #0
 8004b00:	2010      	movs	r0, #16
 8004b02:	f7fc f9d7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 8004b06:	2107      	movs	r1, #7
 8004b08:	2011      	movs	r0, #17
 8004b0a:	f7fc f9d3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 8004b0e:	2100      	movs	r1, #0
 8004b10:	2012      	movs	r0, #18
 8004b12:	f7fc f9cf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 8004b16:	2100      	movs	r1, #0
 8004b18:	2013      	movs	r0, #19
 8004b1a:	f7fc f9cb 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004b1e:	2014      	movs	r0, #20
 8004b20:	f000 ff62 	bl	80059e8 <HAL_Delay>

		LCD_WriteReg(0x0010,0x0730);
 8004b24:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8004b28:	2010      	movs	r0, #16
 8004b2a:	f7fc f9c3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0137);
 8004b2e:	f240 1137 	movw	r1, #311	; 0x137
 8004b32:	2011      	movs	r0, #17
 8004b34:	f7fc f9be 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004b38:	2014      	movs	r0, #20
 8004b3a:	f000 ff55 	bl	80059e8 <HAL_Delay>

		LCD_WriteReg(0x0012,0x01b8);
 8004b3e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8004b42:	2012      	movs	r0, #18
 8004b44:	f7fc f9b6 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004b48:	2014      	movs	r0, #20
 8004b4a:	f000 ff4d 	bl	80059e8 <HAL_Delay>

		LCD_WriteReg(0x0013,0x0f00);
 8004b4e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004b52:	2013      	movs	r0, #19
 8004b54:	f7fc f9ae 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x002a,0x0080);
 8004b58:	2180      	movs	r1, #128	; 0x80
 8004b5a:	202a      	movs	r0, #42	; 0x2a
 8004b5c:	f7fc f9aa 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0029,0x0048);
 8004b60:	2148      	movs	r1, #72	; 0x48
 8004b62:	2029      	movs	r0, #41	; 0x29
 8004b64:	f7fc f9a6 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004b68:	2014      	movs	r0, #20
 8004b6a:	f000 ff3d 	bl	80059e8 <HAL_Delay>

		LCD_WriteReg(0x0001,0x0100);
 8004b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b72:	2001      	movs	r0, #1
 8004b74:	f7fc f99e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 8004b78:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004b7c:	2002      	movs	r0, #2
 8004b7e:	f7fc f999 	bl	8000eb4 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 8004b82:	f241 0138 	movw	r1, #4152	; 0x1038
 8004b86:	2003      	movs	r0, #3
 8004b88:	f7fc f994 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8004b8c:	f240 2102 	movw	r1, #514	; 0x202
 8004b90:	2008      	movs	r0, #8
 8004b92:	f7fc f98f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000a,0x0000);
 8004b96:	2100      	movs	r1, #0
 8004b98:	200a      	movs	r0, #10
 8004b9a:	f7fc f98b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000c,0x0000);
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	200c      	movs	r0, #12
 8004ba2:	f7fc f987 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000d,0x0000);
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	200d      	movs	r0, #13
 8004baa:	f7fc f983 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000e,0x0030);
 8004bae:	2130      	movs	r1, #48	; 0x30
 8004bb0:	200e      	movs	r0, #14
 8004bb2:	f7fc f97f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0050,0x0000);
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	2050      	movs	r0, #80	; 0x50
 8004bba:	f7fc f97b 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00ef);
 8004bbe:	21ef      	movs	r1, #239	; 0xef
 8004bc0:	2051      	movs	r0, #81	; 0x51
 8004bc2:	f7fc f977 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	2052      	movs	r0, #82	; 0x52
 8004bca:	f7fc f973 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013f);
 8004bce:	f240 113f 	movw	r1, #319	; 0x13f
 8004bd2:	2053      	movs	r0, #83	; 0x53
 8004bd4:	f7fc f96e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0x2700);
 8004bd8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004bdc:	2060      	movs	r0, #96	; 0x60
 8004bde:	f7fc f969 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 8004be2:	2101      	movs	r1, #1
 8004be4:	2061      	movs	r0, #97	; 0x61
 8004be6:	f7fc f965 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x006a,0x0000);
 8004bea:	2100      	movs	r1, #0
 8004bec:	206a      	movs	r0, #106	; 0x6a
 8004bee:	f7fc f961 	bl	8000eb4 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090,0X0011);
 8004bf2:	2111      	movs	r1, #17
 8004bf4:	2090      	movs	r0, #144	; 0x90
 8004bf6:	f7fc f95d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8004bfa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004bfe:	2092      	movs	r0, #146	; 0x92
 8004c00:	f7fc f958 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0093,0x0402);
 8004c04:	f240 4102 	movw	r1, #1026	; 0x402
 8004c08:	2093      	movs	r0, #147	; 0x93
 8004c0a:	f7fc f953 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0094,0x0002);
 8004c0e:	2102      	movs	r1, #2
 8004c10:	2094      	movs	r0, #148	; 0x94
 8004c12:	f7fc f94f 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004c16:	2014      	movs	r0, #20
 8004c18:	f000 fee6 	bl	80059e8 <HAL_Delay>

		LCD_WriteReg(0x0007,0x0001);
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	2007      	movs	r0, #7
 8004c20:	f7fc f948 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004c24:	2014      	movs	r0, #20
 8004c26:	f000 fedf 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0x0007,0x0061);
 8004c2a:	2161      	movs	r1, #97	; 0x61
 8004c2c:	2007      	movs	r0, #7
 8004c2e:	f7fc f941 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0173);
 8004c32:	f240 1173 	movw	r1, #371	; 0x173
 8004c36:	2007      	movs	r0, #7
 8004c38:	f7fc f93c 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x0020,0x0000);
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	2020      	movs	r0, #32
 8004c40:	f7fc f938 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0021,0x0000);
 8004c44:	2100      	movs	r1, #0
 8004c46:	2021      	movs	r0, #33	; 0x21
 8004c48:	f7fc f934 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x22);
 8004c4c:	2122      	movs	r1, #34	; 0x22
 8004c4e:	2000      	movs	r0, #0
 8004c50:	f7fc f930 	bl	8000eb4 <LCD_WriteReg>
 8004c54:	e311      	b.n	800527a <LCD_Init+0x3852>
	}else if(lcddev.id==0xC505)
 8004c56:	4b6b      	ldr	r3, [pc, #428]	; (8004e04 <LCD_Init+0x33dc>)
 8004c58:	889b      	ldrh	r3, [r3, #4]
 8004c5a:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	f040 80d2 	bne.w	8004e08 <LCD_Init+0x33e0>
	{
		LCD_WriteReg(0x0000,0x0000);
 8004c64:	2100      	movs	r1, #0
 8004c66:	2000      	movs	r0, #0
 8004c68:	f7fc f924 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	2000      	movs	r0, #0
 8004c70:	f7fc f920 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004c74:	2014      	movs	r0, #20
 8004c76:	f000 feb7 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0x0000,0x0000);
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f7fc f919 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004c82:	2100      	movs	r1, #0
 8004c84:	2000      	movs	r0, #0
 8004c86:	f7fc f915 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f7fc f911 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004c92:	2100      	movs	r1, #0
 8004c94:	2000      	movs	r0, #0
 8004c96:	f7fc f90d 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0x00a4,0x0001);
 8004c9a:	2101      	movs	r1, #1
 8004c9c:	20a4      	movs	r0, #164	; 0xa4
 8004c9e:	f7fc f909 	bl	8000eb4 <LCD_WriteReg>
 		HAL_Delay(20);
 8004ca2:	2014      	movs	r0, #20
 8004ca4:	f000 fea0 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8004ca8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004cac:	2060      	movs	r0, #96	; 0x60
 8004cae:	f7fc f901 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0806);
 8004cb2:	f640 0106 	movw	r1, #2054	; 0x806
 8004cb6:	2008      	movs	r0, #8
 8004cb8:	f7fc f8fc 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0703);//gamma setting
 8004cbc:	f240 7103 	movw	r1, #1795	; 0x703
 8004cc0:	2030      	movs	r0, #48	; 0x30
 8004cc2:	f7fc f8f7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0001);
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	2031      	movs	r0, #49	; 0x31
 8004cca:	f7fc f8f3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0004);
 8004cce:	2104      	movs	r1, #4
 8004cd0:	2032      	movs	r0, #50	; 0x32
 8004cd2:	f7fc f8ef 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0102);
 8004cd6:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004cda:	2033      	movs	r0, #51	; 0x33
 8004cdc:	f7fc f8ea 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x0300);
 8004ce0:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004ce4:	2034      	movs	r0, #52	; 0x34
 8004ce6:	f7fc f8e5 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0103);
 8004cea:	f240 1103 	movw	r1, #259	; 0x103
 8004cee:	2035      	movs	r0, #53	; 0x35
 8004cf0:	f7fc f8e0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x001F);
 8004cf4:	211f      	movs	r1, #31
 8004cf6:	2036      	movs	r0, #54	; 0x36
 8004cf8:	f7fc f8dc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0703);
 8004cfc:	f240 7103 	movw	r1, #1795	; 0x703
 8004d00:	2037      	movs	r0, #55	; 0x37
 8004d02:	f7fc f8d7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0001);
 8004d06:	2101      	movs	r1, #1
 8004d08:	2038      	movs	r0, #56	; 0x38
 8004d0a:	f7fc f8d3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0004);
 8004d0e:	2104      	movs	r1, #4
 8004d10:	2039      	movs	r0, #57	; 0x39
 8004d12:	f7fc f8cf 	bl	8000eb4 <LCD_WriteReg>



		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8004d16:	2115      	movs	r1, #21
 8004d18:	2090      	movs	r0, #144	; 0x90
 8004d1a:	f7fc f8cb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8004d1e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8004d22:	2010      	movs	r0, #16
 8004d24:	f7fc f8c6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0247);	//DC1,DC0,VC
 8004d28:	f240 2147 	movw	r1, #583	; 0x247
 8004d2c:	2011      	movs	r0, #17
 8004d2e:	f7fc f8c1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8004d32:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8004d36:	2012      	movs	r0, #18
 8004d38:	f7fc f8bc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8004d3c:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8004d40:	2013      	movs	r0, #19
 8004d42:	f7fc f8b7 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(120);
 8004d46:	2078      	movs	r0, #120	; 0x78
 8004d48:	f000 fe4e 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8004d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d50:	2001      	movs	r0, #1
 8004d52:	f7fc f8af 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8004d56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d5a:	2002      	movs	r0, #2
 8004d5c:	f7fc f8aa 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8004d60:	f241 0130 	movw	r1, #4144	; 0x1030
 8004d64:	2003      	movs	r0, #3
 8004d66:	f7fc f8a5 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8004d6a:	2108      	movs	r1, #8
 8004d6c:	200a      	movs	r0, #10
 8004d6e:	f7fc f8a1 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8004d72:	2100      	movs	r1, #0
 8004d74:	200c      	movs	r0, #12
 8004d76:	f7fc f89d 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8004d7a:	2120      	movs	r1, #32
 8004d7c:	200e      	movs	r0, #14
 8004d7e:	f7fc f899 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8004d82:	2100      	movs	r1, #0
 8004d84:	200f      	movs	r0, #15
 8004d86:	f7fc f895 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	2020      	movs	r0, #32
 8004d8e:	f7fc f891 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8004d92:	2100      	movs	r1, #0
 8004d94:	2021      	movs	r0, #33	; 0x21
 8004d96:	f7fc f88d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x002A,0x003D);	//vcom2
 8004d9a:	213d      	movs	r1, #61	; 0x3d
 8004d9c:	202a      	movs	r0, #42	; 0x2a
 8004d9e:	f7fc f889 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(20);
 8004da2:	2014      	movs	r0, #20
 8004da4:	f000 fe20 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8004da8:	212d      	movs	r1, #45	; 0x2d
 8004daa:	2029      	movs	r0, #41	; 0x29
 8004dac:	f7fc f882 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8004db0:	2100      	movs	r1, #0
 8004db2:	2050      	movs	r0, #80	; 0x50
 8004db4:	f7fc f87e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8004db8:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8004dbc:	2051      	movs	r0, #81	; 0x51
 8004dbe:	f7fc f879 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	2052      	movs	r0, #82	; 0x52
 8004dc6:	f7fc f875 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8004dca:	f240 113f 	movw	r1, #319	; 0x13f
 8004dce:	2053      	movs	r0, #83	; 0x53
 8004dd0:	f7fc f870 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	2061      	movs	r0, #97	; 0x61
 8004dd8:	f7fc f86c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8004ddc:	2100      	movs	r1, #0
 8004dde:	206a      	movs	r0, #106	; 0x6a
 8004de0:	f7fc f868 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0300);
 8004de4:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004de8:	2092      	movs	r0, #146	; 0x92
 8004dea:	f7fc f863 	bl	8000eb4 <LCD_WriteReg>

 		LCD_WriteReg(0x0093, 0x0005);
 8004dee:	2105      	movs	r1, #5
 8004df0:	2093      	movs	r0, #147	; 0x93
 8004df2:	f7fc f85f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8004df6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dfa:	2007      	movs	r0, #7
 8004dfc:	f7fc f85a 	bl	8000eb4 <LCD_WriteReg>
 8004e00:	e23b      	b.n	800527a <LCD_Init+0x3852>
 8004e02:	bf00      	nop
 8004e04:	20000258 	.word	0x20000258
	}else if(lcddev.id==0x4531)//OK |/|/|
 8004e08:	4bbb      	ldr	r3, [pc, #748]	; (80050f8 <LCD_Init+0x36d0>)
 8004e0a:	889b      	ldrh	r3, [r3, #4]
 8004e0c:	f244 5231 	movw	r2, #17713	; 0x4531
 8004e10:	4293      	cmp	r3, r2
 8004e12:	f040 80ba 	bne.w	8004f8a <LCD_Init+0x3562>
	{
		LCD_WriteReg(0X00,0X0001);
 8004e16:	2101      	movs	r1, #1
 8004e18:	2000      	movs	r0, #0
 8004e1a:	f7fc f84b 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(10);
 8004e1e:	200a      	movs	r0, #10
 8004e20:	f000 fde2 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0X10,0X1628);
 8004e24:	f241 6128 	movw	r1, #5672	; 0x1628
 8004e28:	2010      	movs	r0, #16
 8004e2a:	f7fc f843 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X000e);//0x0006
 8004e2e:	210e      	movs	r1, #14
 8004e30:	2012      	movs	r0, #18
 8004e32:	f7fc f83f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X0A39);
 8004e36:	f640 2139 	movw	r1, #2617	; 0xa39
 8004e3a:	2013      	movs	r0, #19
 8004e3c:	f7fc f83a 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(10);
 8004e40:	200a      	movs	r0, #10
 8004e42:	f000 fdd1 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0X11,0X0040);
 8004e46:	2140      	movs	r1, #64	; 0x40
 8004e48:	2011      	movs	r0, #17
 8004e4a:	f7fc f833 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X15,0X0050);
 8004e4e:	2150      	movs	r1, #80	; 0x50
 8004e50:	2015      	movs	r0, #21
 8004e52:	f7fc f82f 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(10);
 8004e56:	200a      	movs	r0, #10
 8004e58:	f000 fdc6 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0X12,0X001e);//16
 8004e5c:	211e      	movs	r1, #30
 8004e5e:	2012      	movs	r0, #18
 8004e60:	f7fc f828 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(10);
 8004e64:	200a      	movs	r0, #10
 8004e66:	f000 fdbf 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0X10,0X1620);
 8004e6a:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8004e6e:	2010      	movs	r0, #16
 8004e70:	f7fc f820 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X2A39);
 8004e74:	f642 2139 	movw	r1, #10809	; 0x2a39
 8004e78:	2013      	movs	r0, #19
 8004e7a:	f7fc f81b 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(10);
 8004e7e:	200a      	movs	r0, #10
 8004e80:	f000 fdb2 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0X01,0X0100);
 8004e84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e88:	2001      	movs	r0, #1
 8004e8a:	f7fc f813 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8004e8e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004e92:	2002      	movs	r0, #2
 8004e94:	f7fc f80e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1038);//改变方向的
 8004e98:	f241 0138 	movw	r1, #4152	; 0x1038
 8004e9c:	2003      	movs	r0, #3
 8004e9e:	f7fc f809 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0202);
 8004ea2:	f240 2102 	movw	r1, #514	; 0x202
 8004ea6:	2008      	movs	r0, #8
 8004ea8:	f7fc f804 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 8004eac:	2108      	movs	r1, #8
 8004eae:	200a      	movs	r0, #10
 8004eb0:	f7fc f800 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X30,0X0000);
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	2030      	movs	r0, #48	; 0x30
 8004eb8:	f7fb fffc 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 8004ebc:	f240 4102 	movw	r1, #1026	; 0x402
 8004ec0:	2031      	movs	r0, #49	; 0x31
 8004ec2:	f7fb fff7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0106);
 8004ec6:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004eca:	2032      	movs	r0, #50	; 0x32
 8004ecc:	f7fb fff2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0503);
 8004ed0:	f240 5103 	movw	r1, #1283	; 0x503
 8004ed4:	2033      	movs	r0, #51	; 0x33
 8004ed6:	f7fb ffed 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0104);
 8004eda:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004ede:	2034      	movs	r0, #52	; 0x34
 8004ee0:	f7fb ffe8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0301);
 8004ee4:	f240 3101 	movw	r1, #769	; 0x301
 8004ee8:	2035      	movs	r0, #53	; 0x35
 8004eea:	f7fb ffe3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 8004eee:	f240 7107 	movw	r1, #1799	; 0x707
 8004ef2:	2036      	movs	r0, #54	; 0x36
 8004ef4:	f7fb ffde 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 8004ef8:	f240 3105 	movw	r1, #773	; 0x305
 8004efc:	2037      	movs	r0, #55	; 0x37
 8004efe:	f7fb ffd9 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0208);
 8004f02:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004f06:	2038      	movs	r0, #56	; 0x38
 8004f08:	f7fb ffd4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0F0B);
 8004f0c:	f640 710b 	movw	r1, #3851	; 0xf0b
 8004f10:	2039      	movs	r0, #57	; 0x39
 8004f12:	f7fb ffcf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X41,0X0002);
 8004f16:	2102      	movs	r1, #2
 8004f18:	2041      	movs	r0, #65	; 0x41
 8004f1a:	f7fb ffcb 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X60,0X2700);
 8004f1e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f22:	2060      	movs	r0, #96	; 0x60
 8004f24:	f7fb ffc6 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8004f28:	2101      	movs	r1, #1
 8004f2a:	2061      	movs	r0, #97	; 0x61
 8004f2c:	f7fb ffc2 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X0210);
 8004f30:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004f34:	2090      	movs	r0, #144	; 0x90
 8004f36:	f7fb ffbd 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X010A);
 8004f3a:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004f3e:	2092      	movs	r0, #146	; 0x92
 8004f40:	f7fb ffb8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0004);
 8004f44:	2104      	movs	r1, #4
 8004f46:	2093      	movs	r0, #147	; 0x93
 8004f48:	f7fb ffb4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0100);
 8004f4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f50:	20a0      	movs	r0, #160	; 0xa0
 8004f52:	f7fb ffaf 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 8004f56:	2101      	movs	r1, #1
 8004f58:	2007      	movs	r0, #7
 8004f5a:	f7fb ffab 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 8004f5e:	2121      	movs	r1, #33	; 0x21
 8004f60:	2007      	movs	r0, #7
 8004f62:	f7fb ffa7 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 8004f66:	2123      	movs	r1, #35	; 0x23
 8004f68:	2007      	movs	r0, #7
 8004f6a:	f7fb ffa3 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 8004f6e:	2133      	movs	r1, #51	; 0x33
 8004f70:	2007      	movs	r0, #7
 8004f72:	f7fb ff9f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 8004f76:	f240 1133 	movw	r1, #307	; 0x133
 8004f7a:	2007      	movs	r0, #7
 8004f7c:	f7fb ff9a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0000);
 8004f80:	2100      	movs	r1, #0
 8004f82:	20a0      	movs	r0, #160	; 0xa0
 8004f84:	f7fb ff96 	bl	8000eb4 <LCD_WriteReg>
 8004f88:	e177      	b.n	800527a <LCD_Init+0x3852>
	}else if(lcddev.id==0x4535)
 8004f8a:	4b5b      	ldr	r3, [pc, #364]	; (80050f8 <LCD_Init+0x36d0>)
 8004f8c:	889b      	ldrh	r3, [r3, #4]
 8004f8e:	f244 5235 	movw	r2, #17717	; 0x4535
 8004f92:	4293      	cmp	r3, r2
 8004f94:	f040 80b2 	bne.w	80050fc <LCD_Init+0x36d4>
	{
		LCD_WriteReg(0X15,0X0030);
 8004f98:	2130      	movs	r1, #48	; 0x30
 8004f9a:	2015      	movs	r0, #21
 8004f9c:	f7fb ff8a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X9A,0X0010);
 8004fa0:	2110      	movs	r1, #16
 8004fa2:	209a      	movs	r0, #154	; 0x9a
 8004fa4:	f7fb ff86 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0X11,0X0020);
 8004fa8:	2120      	movs	r1, #32
 8004faa:	2011      	movs	r0, #17
 8004fac:	f7fb ff82 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0X10,0X3428);
 8004fb0:	f243 4128 	movw	r1, #13352	; 0x3428
 8004fb4:	2010      	movs	r0, #16
 8004fb6:	f7fb ff7d 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X0002);//16
 8004fba:	2102      	movs	r1, #2
 8004fbc:	2012      	movs	r0, #18
 8004fbe:	f7fb ff79 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X1038);
 8004fc2:	f241 0138 	movw	r1, #4152	; 0x1038
 8004fc6:	2013      	movs	r0, #19
 8004fc8:	f7fb ff74 	bl	8000eb4 <LCD_WriteReg>
 		HAL_Delay(40);
 8004fcc:	2028      	movs	r0, #40	; 0x28
 8004fce:	f000 fd0b 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0X12,0X0012);//16
 8004fd2:	2112      	movs	r1, #18
 8004fd4:	2012      	movs	r0, #18
 8004fd6:	f7fb ff6d 	bl	8000eb4 <LCD_WriteReg>
		HAL_Delay(40);
 8004fda:	2028      	movs	r0, #40	; 0x28
 8004fdc:	f000 fd04 	bl	80059e8 <HAL_Delay>
  		LCD_WriteReg(0X10,0X3420);
 8004fe0:	f243 4120 	movw	r1, #13344	; 0x3420
 8004fe4:	2010      	movs	r0, #16
 8004fe6:	f7fb ff65 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X3038);
 8004fea:	f243 0138 	movw	r1, #12344	; 0x3038
 8004fee:	2013      	movs	r0, #19
 8004ff0:	f7fb ff60 	bl	8000eb4 <LCD_WriteReg>
 		HAL_Delay(70);
 8004ff4:	2046      	movs	r0, #70	; 0x46
 8004ff6:	f000 fcf7 	bl	80059e8 <HAL_Delay>
		LCD_WriteReg(0X30,0X0000);
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	2030      	movs	r0, #48	; 0x30
 8004ffe:	f7fb ff59 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 8005002:	f240 4102 	movw	r1, #1026	; 0x402
 8005006:	2031      	movs	r0, #49	; 0x31
 8005008:	f7fb ff54 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0307);
 800500c:	f240 3107 	movw	r1, #775	; 0x307
 8005010:	2032      	movs	r0, #50	; 0x32
 8005012:	f7fb ff4f 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0304);
 8005016:	f44f 7141 	mov.w	r1, #772	; 0x304
 800501a:	2033      	movs	r0, #51	; 0x33
 800501c:	f7fb ff4a 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0004);
 8005020:	2104      	movs	r1, #4
 8005022:	2034      	movs	r0, #52	; 0x34
 8005024:	f7fb ff46 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0401);
 8005028:	f240 4101 	movw	r1, #1025	; 0x401
 800502c:	2035      	movs	r0, #53	; 0x35
 800502e:	f7fb ff41 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 8005032:	f240 7107 	movw	r1, #1799	; 0x707
 8005036:	2036      	movs	r0, #54	; 0x36
 8005038:	f7fb ff3c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 800503c:	f240 3105 	movw	r1, #773	; 0x305
 8005040:	2037      	movs	r0, #55	; 0x37
 8005042:	f7fb ff37 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0610);
 8005046:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800504a:	2038      	movs	r0, #56	; 0x38
 800504c:	f7fb ff32 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0610);
 8005050:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005054:	2039      	movs	r0, #57	; 0x39
 8005056:	f7fb ff2d 	bl	8000eb4 <LCD_WriteReg>

		LCD_WriteReg(0X01,0X0100);
 800505a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800505e:	2001      	movs	r0, #1
 8005060:	f7fb ff28 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8005064:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005068:	2002      	movs	r0, #2
 800506a:	f7fb ff23 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1030);//改变方向的
 800506e:	f241 0130 	movw	r1, #4144	; 0x1030
 8005072:	2003      	movs	r0, #3
 8005074:	f7fb ff1e 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0808);
 8005078:	f640 0108 	movw	r1, #2056	; 0x808
 800507c:	2008      	movs	r0, #8
 800507e:	f7fb ff19 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 8005082:	2108      	movs	r1, #8
 8005084:	200a      	movs	r0, #10
 8005086:	f7fb ff15 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0X60,0X2700);
 800508a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800508e:	2060      	movs	r0, #96	; 0x60
 8005090:	f7fb ff10 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8005094:	2101      	movs	r1, #1
 8005096:	2061      	movs	r0, #97	; 0x61
 8005098:	f7fb ff0c 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X013E);
 800509c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80050a0:	2090      	movs	r0, #144	; 0x90
 80050a2:	f7fb ff07 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X0100);
 80050a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050aa:	2092      	movs	r0, #146	; 0x92
 80050ac:	f7fb ff02 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0100);
 80050b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050b4:	2093      	movs	r0, #147	; 0x93
 80050b6:	f7fb fefd 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0XA0,0X3000);
 80050ba:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80050be:	20a0      	movs	r0, #160	; 0xa0
 80050c0:	f7fb fef8 	bl	8000eb4 <LCD_WriteReg>
 		LCD_WriteReg(0XA3,0X0010);
 80050c4:	2110      	movs	r1, #16
 80050c6:	20a3      	movs	r0, #163	; 0xa3
 80050c8:	f7fb fef4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 80050cc:	2101      	movs	r1, #1
 80050ce:	2007      	movs	r0, #7
 80050d0:	f7fb fef0 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 80050d4:	2121      	movs	r1, #33	; 0x21
 80050d6:	2007      	movs	r0, #7
 80050d8:	f7fb feec 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 80050dc:	2123      	movs	r1, #35	; 0x23
 80050de:	2007      	movs	r0, #7
 80050e0:	f7fb fee8 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 80050e4:	2133      	movs	r1, #51	; 0x33
 80050e6:	2007      	movs	r0, #7
 80050e8:	f7fb fee4 	bl	8000eb4 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 80050ec:	f240 1133 	movw	r1, #307	; 0x133
 80050f0:	2007      	movs	r0, #7
 80050f2:	f7fb fedf 	bl	8000eb4 <LCD_WriteReg>
 80050f6:	e0c0      	b.n	800527a <LCD_Init+0x3852>
 80050f8:	20000258 	.word	0x20000258
	}else if(lcddev.id==0X1963)
 80050fc:	4b66      	ldr	r3, [pc, #408]	; (8005298 <LCD_Init+0x3870>)
 80050fe:	889b      	ldrh	r3, [r3, #4]
 8005100:	f641 1263 	movw	r2, #6499	; 0x1963
 8005104:	4293      	cmp	r3, r2
 8005106:	f040 80b8 	bne.w	800527a <LCD_Init+0x3852>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800510a:	20e2      	movs	r0, #226	; 0xe2
 800510c:	f7fb fea4 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 8005110:	201d      	movs	r0, #29
 8005112:	f7fb feb1 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005116:	2002      	movs	r0, #2
 8005118:	f7fb feae 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 800511c:	2004      	movs	r0, #4
 800511e:	f7fb feab 	bl	8000e78 <LCD_WR_DATA>
		delay_us(100);
 8005122:	2064      	movs	r0, #100	; 0x64
 8005124:	f7fb fe7a 	bl	8000e1c <delay_us>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005128:	20e0      	movs	r0, #224	; 0xe0
 800512a:	f7fb fe95 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800512e:	2001      	movs	r0, #1
 8005130:	f7fb fea2 	bl	8000e78 <LCD_WR_DATA>
		HAL_Delay(10);
 8005134:	200a      	movs	r0, #10
 8005136:	f000 fc57 	bl	80059e8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800513a:	20e0      	movs	r0, #224	; 0xe0
 800513c:	f7fb fe8c 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8005140:	2003      	movs	r0, #3
 8005142:	f7fb fe99 	bl	8000e78 <LCD_WR_DATA>
		HAL_Delay(12);
 8005146:	200c      	movs	r0, #12
 8005148:	f000 fc4e 	bl	80059e8 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 800514c:	2001      	movs	r0, #1
 800514e:	f7fb fe83 	bl	8000e58 <LCD_WR_REG>
		HAL_Delay(10);
 8005152:	200a      	movs	r0, #10
 8005154:	f000 fc48 	bl	80059e8 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005158:	20e6      	movs	r0, #230	; 0xe6
 800515a:	f7fb fe7d 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800515e:	202f      	movs	r0, #47	; 0x2f
 8005160:	f7fb fe8a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8005164:	20ff      	movs	r0, #255	; 0xff
 8005166:	f7fb fe87 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 800516a:	20ff      	movs	r0, #255	; 0xff
 800516c:	f7fb fe84 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005170:	20b0      	movs	r0, #176	; 0xb0
 8005172:	f7fb fe71 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005176:	2020      	movs	r0, #32
 8005178:	f7fb fe7e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 800517c:	2000      	movs	r0, #0
 800517e:	f7fb fe7b 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 8005182:	2001      	movs	r0, #1
 8005184:	f7fb fe78 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005188:	f240 10df 	movw	r0, #479	; 0x1df
 800518c:	f7fb fe74 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 8005190:	2003      	movs	r0, #3
 8005192:	f7fb fe71 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005196:	f240 301f 	movw	r0, #799	; 0x31f
 800519a:	f7fb fe6d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 800519e:	2000      	movs	r0, #0
 80051a0:	f7fb fe6a 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 80051a4:	20b4      	movs	r0, #180	; 0xb4
 80051a6:	f7fb fe57 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 80051aa:	2002      	movs	r0, #2
 80051ac:	f7fb fe64 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 80051b0:	f240 20df 	movw	r0, #735	; 0x2df
 80051b4:	f7fb fe60 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 80051b8:	2000      	movs	r0, #0
 80051ba:	f7fb fe5d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 80051be:	202e      	movs	r0, #46	; 0x2e
 80051c0:	f7fb fe5a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 80051c4:	2000      	movs	r0, #0
 80051c6:	f7fb fe57 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051ca:	2000      	movs	r0, #0
 80051cc:	f7fb fe54 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051d0:	2000      	movs	r0, #0
 80051d2:	f7fb fe51 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051d6:	2000      	movs	r0, #0
 80051d8:	f7fb fe4e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 80051dc:	20b6      	movs	r0, #182	; 0xb6
 80051de:	f7fb fe3b 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 80051e2:	2003      	movs	r0, #3
 80051e4:	f7fb fe48 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 80051e8:	f44f 7053 	mov.w	r0, #844	; 0x34c
 80051ec:	f7fb fe44 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 80051f0:	2000      	movs	r0, #0
 80051f2:	f7fb fe41 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 80051f6:	2017      	movs	r0, #23
 80051f8:	f7fb fe3e 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80051fc:	2015      	movs	r0, #21
 80051fe:	f7fb fe3b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005202:	2000      	movs	r0, #0
 8005204:	f7fb fe38 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005208:	2000      	movs	r0, #0
 800520a:	f7fb fe35 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 800520e:	20f0      	movs	r0, #240	; 0xf0
 8005210:	f7fb fe22 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8005214:	2003      	movs	r0, #3
 8005216:	f7fb fe2f 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 800521a:	2029      	movs	r0, #41	; 0x29
 800521c:	f7fb fe1c 	bl	8000e58 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005220:	20d0      	movs	r0, #208	; 0xd0
 8005222:	f7fb fe19 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005226:	2000      	movs	r0, #0
 8005228:	f7fb fe26 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 800522c:	20be      	movs	r0, #190	; 0xbe
 800522e:	f7fb fe13 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005232:	2005      	movs	r0, #5
 8005234:	f7fb fe20 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005238:	20fe      	movs	r0, #254	; 0xfe
 800523a:	f7fb fe1d 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 800523e:	2001      	movs	r0, #1
 8005240:	f7fb fe1a 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 8005244:	2000      	movs	r0, #0
 8005246:	f7fb fe17 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 800524a:	2000      	movs	r0, #0
 800524c:	f7fb fe14 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 8005250:	2000      	movs	r0, #0
 8005252:	f7fb fe11 	bl	8000e78 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005256:	20b8      	movs	r0, #184	; 0xb8
 8005258:	f7fb fdfe 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 800525c:	2003      	movs	r0, #3
 800525e:	f7fb fe0b 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 8005262:	2001      	movs	r0, #1
 8005264:	f7fb fe08 	bl	8000e78 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8005268:	20ba      	movs	r0, #186	; 0xba
 800526a:	f7fb fdf5 	bl	8000e58 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 800526e:	2001      	movs	r0, #1
 8005270:	f7fb fe02 	bl	8000e78 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 8005274:	2064      	movs	r0, #100	; 0x64
 8005276:	f7fc fa97 	bl	80017a8 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		//默认为竖屏
 800527a:	2000      	movs	r0, #0
 800527c:	f7fc fac8 	bl	8001810 <LCD_Display_Dir>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);				//点亮背光
 8005280:	2201      	movs	r2, #1
 8005282:	2101      	movs	r1, #1
 8005284:	4805      	ldr	r0, [pc, #20]	; (800529c <LCD_Init+0x3874>)
 8005286:	f000 fe4b 	bl	8005f20 <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);
 800528a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800528e:	f000 f807 	bl	80052a0 <LCD_Clear>
}
 8005292:	bf00      	nop
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20000258 	.word	0x20000258
 800529c:	40010c00 	.word	0x40010c00

080052a0 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint16_t color)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	80fb      	strh	r3, [r7, #6]
	uint32_t index=0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 80052ae:	4b21      	ldr	r3, [pc, #132]	; (8005334 <LCD_Clear+0x94>)
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 80052b4:	4b1f      	ldr	r3, [pc, #124]	; (8005334 <LCD_Clear+0x94>)
 80052b6:	885b      	ldrh	r3, [r3, #2]
 80052b8:	461a      	mov	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	fb02 f303 	mul.w	r3, r2, r3
 80052c0:	60bb      	str	r3, [r7, #8]
	if((lcddev.id==0X6804)&&(lcddev.dir==1))//6804横屏的时候特殊处理
 80052c2:	4b1c      	ldr	r3, [pc, #112]	; (8005334 <LCD_Clear+0x94>)
 80052c4:	889b      	ldrh	r3, [r3, #4]
 80052c6:	f646 0204 	movw	r2, #26628	; 0x6804
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d11a      	bne.n	8005304 <LCD_Clear+0x64>
 80052ce:	4b19      	ldr	r3, [pc, #100]	; (8005334 <LCD_Clear+0x94>)
 80052d0:	799b      	ldrb	r3, [r3, #6]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d116      	bne.n	8005304 <LCD_Clear+0x64>
	{
 		lcddev.dir=0;
 80052d6:	4b17      	ldr	r3, [pc, #92]	; (8005334 <LCD_Clear+0x94>)
 80052d8:	2200      	movs	r2, #0
 80052da:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 80052dc:	4b15      	ldr	r3, [pc, #84]	; (8005334 <LCD_Clear+0x94>)
 80052de:	222a      	movs	r2, #42	; 0x2a
 80052e0:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 80052e2:	4b14      	ldr	r3, [pc, #80]	; (8005334 <LCD_Clear+0x94>)
 80052e4:	222b      	movs	r2, #43	; 0x2b
 80052e6:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00,0x0000);		//设置光标位置
 80052e8:	2100      	movs	r1, #0
 80052ea:	2000      	movs	r0, #0
 80052ec:	f7fb fe1a 	bl	8000f24 <LCD_SetCursor>
 		lcddev.dir=1;
 80052f0:	4b10      	ldr	r3, [pc, #64]	; (8005334 <LCD_Clear+0x94>)
 80052f2:	2201      	movs	r2, #1
 80052f4:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 80052f6:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <LCD_Clear+0x94>)
 80052f8:	222b      	movs	r2, #43	; 0x2b
 80052fa:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 80052fc:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <LCD_Clear+0x94>)
 80052fe:	222a      	movs	r2, #42	; 0x2a
 8005300:	819a      	strh	r2, [r3, #12]
 8005302:	e003      	b.n	800530c <LCD_Clear+0x6c>
 	}else LCD_SetCursor(0x00,0x0000);	//设置光标位置
 8005304:	2100      	movs	r1, #0
 8005306:	2000      	movs	r0, #0
 8005308:	f7fb fe0c 	bl	8000f24 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 800530c:	f7fb fdfc 	bl	8000f08 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 8005310:	2300      	movs	r3, #0
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	e005      	b.n	8005322 <LCD_Clear+0x82>
	{
		LCD->LCD_RAM=color;
 8005316:	4a08      	ldr	r2, [pc, #32]	; (8005338 <LCD_Clear+0x98>)
 8005318:	88fb      	ldrh	r3, [r7, #6]
 800531a:	8053      	strh	r3, [r2, #2]
	for(index=0;index<totalpoint;index++)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3301      	adds	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	429a      	cmp	r2, r3
 8005328:	d3f5      	bcc.n	8005316 <LCD_Clear+0x76>
	}
}
 800532a:	bf00      	nop
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}
 8005334:	20000258 	.word	0x20000258
 8005338:	6c0007fe 	.word	0x6c0007fe

0800533c <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 800533c:	b590      	push	{r4, r7, lr}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	4604      	mov	r4, r0
 8005344:	4608      	mov	r0, r1
 8005346:	4611      	mov	r1, r2
 8005348:	461a      	mov	r2, r3
 800534a:	4623      	mov	r3, r4
 800534c:	80fb      	strh	r3, [r7, #6]
 800534e:	4603      	mov	r3, r0
 8005350:	80bb      	strh	r3, [r7, #4]
 8005352:	460b      	mov	r3, r1
 8005354:	70fb      	strb	r3, [r7, #3]
 8005356:	4613      	mov	r3, r2
 8005358:	70bb      	strb	r3, [r7, #2]
	uint8_t temp,t1,t;
	uint16_t y0=y;
 800535a:	88bb      	ldrh	r3, [r7, #4]
 800535c:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 800535e:	78bb      	ldrb	r3, [r7, #2]
 8005360:	08db      	lsrs	r3, r3, #3
 8005362:	b2db      	uxtb	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	78bb      	ldrb	r3, [r7, #2]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	bf14      	ite	ne
 8005372:	2301      	movne	r3, #1
 8005374:	2300      	moveq	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	4413      	add	r3, r2
 800537a:	b2db      	uxtb	r3, r3
 800537c:	78ba      	ldrb	r2, [r7, #2]
 800537e:	0852      	lsrs	r2, r2, #1
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	3b20      	subs	r3, #32
 800538c:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 800538e:	2300      	movs	r3, #0
 8005390:	737b      	strb	r3, [r7, #13]
 8005392:	e084      	b.n	800549e <LCD_ShowChar+0x162>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 8005394:	78bb      	ldrb	r3, [r7, #2]
 8005396:	2b0c      	cmp	r3, #12
 8005398:	d10b      	bne.n	80053b2 <LCD_ShowChar+0x76>
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	7b79      	ldrb	r1, [r7, #13]
 800539e:	4846      	ldr	r0, [pc, #280]	; (80054b8 <LCD_ShowChar+0x17c>)
 80053a0:	4613      	mov	r3, r2
 80053a2:	005b      	lsls	r3, r3, #1
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4403      	add	r3, r0
 80053aa:	440b      	add	r3, r1
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	73fb      	strb	r3, [r7, #15]
 80053b0:	e034      	b.n	800541c <LCD_ShowChar+0xe0>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 80053b2:	78bb      	ldrb	r3, [r7, #2]
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	d108      	bne.n	80053ca <LCD_ShowChar+0x8e>
 80053b8:	78fa      	ldrb	r2, [r7, #3]
 80053ba:	7b7b      	ldrb	r3, [r7, #13]
 80053bc:	493f      	ldr	r1, [pc, #252]	; (80054bc <LCD_ShowChar+0x180>)
 80053be:	0112      	lsls	r2, r2, #4
 80053c0:	440a      	add	r2, r1
 80053c2:	4413      	add	r3, r2
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	73fb      	strb	r3, [r7, #15]
 80053c8:	e028      	b.n	800541c <LCD_ShowChar+0xe0>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 80053ca:	78bb      	ldrb	r3, [r7, #2]
 80053cc:	2b18      	cmp	r3, #24
 80053ce:	d10b      	bne.n	80053e8 <LCD_ShowChar+0xac>
 80053d0:	78fa      	ldrb	r2, [r7, #3]
 80053d2:	7b79      	ldrb	r1, [r7, #13]
 80053d4:	483a      	ldr	r0, [pc, #232]	; (80054c0 <LCD_ShowChar+0x184>)
 80053d6:	4613      	mov	r3, r2
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4403      	add	r3, r0
 80053e0:	440b      	add	r3, r1
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	73fb      	strb	r3, [r7, #15]
 80053e6:	e019      	b.n	800541c <LCD_ShowChar+0xe0>
		else if(size==32)temp=asc2_3216[num][t];    //调用3216字体
 80053e8:	78bb      	ldrb	r3, [r7, #2]
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d108      	bne.n	8005400 <LCD_ShowChar+0xc4>
 80053ee:	78fa      	ldrb	r2, [r7, #3]
 80053f0:	7b7b      	ldrb	r3, [r7, #13]
 80053f2:	4934      	ldr	r1, [pc, #208]	; (80054c4 <LCD_ShowChar+0x188>)
 80053f4:	0192      	lsls	r2, r2, #6
 80053f6:	440a      	add	r2, r1
 80053f8:	4413      	add	r3, r2
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	73fb      	strb	r3, [r7, #15]
 80053fe:	e00d      	b.n	800541c <LCD_ShowChar+0xe0>
		else if(size==60)temp=asc2_6030[num][t];    //调用6030字体
 8005400:	78bb      	ldrb	r3, [r7, #2]
 8005402:	2b3c      	cmp	r3, #60	; 0x3c
 8005404:	d151      	bne.n	80054aa <LCD_ShowChar+0x16e>
 8005406:	78fa      	ldrb	r2, [r7, #3]
 8005408:	7b79      	ldrb	r1, [r7, #13]
 800540a:	482f      	ldr	r0, [pc, #188]	; (80054c8 <LCD_ShowChar+0x18c>)
 800540c:	4613      	mov	r3, r2
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	4403      	add	r3, r0
 8005416:	440b      	add	r3, r1
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 800541c:	2300      	movs	r3, #0
 800541e:	73bb      	strb	r3, [r7, #14]
 8005420:	e035      	b.n	800548e <LCD_ShowChar+0x152>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 8005422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005426:	2b00      	cmp	r3, #0
 8005428:	da07      	bge.n	800543a <LCD_ShowChar+0xfe>
 800542a:	4b28      	ldr	r3, [pc, #160]	; (80054cc <LCD_ShowChar+0x190>)
 800542c:	881a      	ldrh	r2, [r3, #0]
 800542e:	88b9      	ldrh	r1, [r7, #4]
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	4618      	mov	r0, r3
 8005434:	f7fc f8a0 	bl	8001578 <LCD_Fast_DrawPoint>
 8005438:	e00a      	b.n	8005450 <LCD_ShowChar+0x114>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 800543a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <LCD_ShowChar+0x114>
 8005442:	4b23      	ldr	r3, [pc, #140]	; (80054d0 <LCD_ShowChar+0x194>)
 8005444:	881a      	ldrh	r2, [r3, #0]
 8005446:	88b9      	ldrh	r1, [r7, #4]
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	4618      	mov	r0, r3
 800544c:	f7fc f894 	bl	8001578 <LCD_Fast_DrawPoint>
			temp<<=1;
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	73fb      	strb	r3, [r7, #15]
			y++;
 8005456:	88bb      	ldrh	r3, [r7, #4]
 8005458:	3301      	adds	r3, #1
 800545a:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 800545c:	4b1d      	ldr	r3, [pc, #116]	; (80054d4 <LCD_ShowChar+0x198>)
 800545e:	885b      	ldrh	r3, [r3, #2]
 8005460:	88ba      	ldrh	r2, [r7, #4]
 8005462:	429a      	cmp	r2, r3
 8005464:	d223      	bcs.n	80054ae <LCD_ShowChar+0x172>
			if((y-y0)==size)
 8005466:	88ba      	ldrh	r2, [r7, #4]
 8005468:	897b      	ldrh	r3, [r7, #10]
 800546a:	1ad2      	subs	r2, r2, r3
 800546c:	78bb      	ldrb	r3, [r7, #2]
 800546e:	429a      	cmp	r2, r3
 8005470:	d10a      	bne.n	8005488 <LCD_ShowChar+0x14c>
			{
				y=y0;
 8005472:	897b      	ldrh	r3, [r7, #10]
 8005474:	80bb      	strh	r3, [r7, #4]
				x++;
 8005476:	88fb      	ldrh	r3, [r7, #6]
 8005478:	3301      	adds	r3, #1
 800547a:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 800547c:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <LCD_ShowChar+0x198>)
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	88fa      	ldrh	r2, [r7, #6]
 8005482:	429a      	cmp	r2, r3
 8005484:	d307      	bcc.n	8005496 <LCD_ShowChar+0x15a>
 8005486:	e013      	b.n	80054b0 <LCD_ShowChar+0x174>
		for(t1=0;t1<8;t1++)
 8005488:	7bbb      	ldrb	r3, [r7, #14]
 800548a:	3301      	adds	r3, #1
 800548c:	73bb      	strb	r3, [r7, #14]
 800548e:	7bbb      	ldrb	r3, [r7, #14]
 8005490:	2b07      	cmp	r3, #7
 8005492:	d9c6      	bls.n	8005422 <LCD_ShowChar+0xe6>
 8005494:	e000      	b.n	8005498 <LCD_ShowChar+0x15c>
				break;
 8005496:	bf00      	nop
	for(t=0;t<csize;t++)
 8005498:	7b7b      	ldrb	r3, [r7, #13]
 800549a:	3301      	adds	r3, #1
 800549c:	737b      	strb	r3, [r7, #13]
 800549e:	7b7a      	ldrb	r2, [r7, #13]
 80054a0:	7a7b      	ldrb	r3, [r7, #9]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	f4ff af76 	bcc.w	8005394 <LCD_ShowChar+0x58>
 80054a8:	e002      	b.n	80054b0 <LCD_ShowChar+0x174>
		else return;								//没有的字库
 80054aa:	bf00      	nop
 80054ac:	e000      	b.n	80054b0 <LCD_ShowChar+0x174>
			if(y>=lcddev.height)return;		//超区域了
 80054ae:	bf00      	nop
			}
		}
	}
}
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd90      	pop	{r4, r7, pc}
 80054b6:	bf00      	nop
 80054b8:	08009440 	.word	0x08009440
 80054bc:	080098b4 	.word	0x080098b4
 80054c0:	08009ea4 	.word	0x08009ea4
 80054c4:	0800ac00 	.word	0x0800ac00
 80054c8:	0800c3c0 	.word	0x0800c3c0
 80054cc:	20000200 	.word	0x20000200
 80054d0:	20000000 	.word	0x20000000
 80054d4:	20000258 	.word	0x20000258

080054d8 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 80054d8:	b590      	push	{r4, r7, lr}
 80054da:	b087      	sub	sp, #28
 80054dc:	af02      	add	r7, sp, #8
 80054de:	4604      	mov	r4, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	4611      	mov	r1, r2
 80054e4:	461a      	mov	r2, r3
 80054e6:	4623      	mov	r3, r4
 80054e8:	80fb      	strh	r3, [r7, #6]
 80054ea:	4603      	mov	r3, r0
 80054ec:	80bb      	strh	r3, [r7, #4]
 80054ee:	460b      	mov	r3, r1
 80054f0:	807b      	strh	r3, [r7, #2]
 80054f2:	4613      	mov	r3, r2
 80054f4:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	73fb      	strb	r3, [r7, #15]
	width+=x;
 80054fa:	887a      	ldrh	r2, [r7, #2]
 80054fc:	88fb      	ldrh	r3, [r7, #6]
 80054fe:	4413      	add	r3, r2
 8005500:	807b      	strh	r3, [r7, #2]
	height+=y;
 8005502:	883a      	ldrh	r2, [r7, #0]
 8005504:	88bb      	ldrh	r3, [r7, #4]
 8005506:	4413      	add	r3, r2
 8005508:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 800550a:	e024      	b.n	8005556 <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 800550c:	88fa      	ldrh	r2, [r7, #6]
 800550e:	887b      	ldrh	r3, [r7, #2]
 8005510:	429a      	cmp	r2, r3
 8005512:	d307      	bcc.n	8005524 <LCD_ShowString+0x4c>
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	80fb      	strh	r3, [r7, #6]
 8005518:	f897 3020 	ldrb.w	r3, [r7, #32]
 800551c:	b29a      	uxth	r2, r3
 800551e:	88bb      	ldrh	r3, [r7, #4]
 8005520:	4413      	add	r3, r2
 8005522:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 8005524:	88ba      	ldrh	r2, [r7, #4]
 8005526:	883b      	ldrh	r3, [r7, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	d21d      	bcs.n	8005568 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	781a      	ldrb	r2, [r3, #0]
 8005530:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005534:	88b9      	ldrh	r1, [r7, #4]
 8005536:	88f8      	ldrh	r0, [r7, #6]
 8005538:	2400      	movs	r4, #0
 800553a:	9400      	str	r4, [sp, #0]
 800553c:	f7ff fefe 	bl	800533c <LCD_ShowChar>
        x+=size/2;
 8005540:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	b2db      	uxtb	r3, r3
 8005548:	b29a      	uxth	r2, r3
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	4413      	add	r3, r2
 800554e:	80fb      	strh	r3, [r7, #6]
        p++;
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	3301      	adds	r3, #1
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b7e      	cmp	r3, #126	; 0x7e
 800555c:	d805      	bhi.n	800556a <LCD_ShowString+0x92>
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b1f      	cmp	r3, #31
 8005564:	d8d2      	bhi.n	800550c <LCD_ShowString+0x34>
    }
}
 8005566:	e000      	b.n	800556a <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8005568:	bf00      	nop
}
 800556a:	bf00      	nop
 800556c:	3714      	adds	r7, #20
 800556e:	46bd      	mov	sp, r7
 8005570:	bd90      	pop	{r4, r7, pc}
	...

08005574 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800557a:	f000 f9d3 	bl	8005924 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800557e:	f000 f841 	bl	8005604 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005582:	f7fb fbe9 	bl	8000d58 <MX_GPIO_Init>
	MX_FSMC_Init();
 8005586:	f7fb fb0b 	bl	8000ba0 <MX_FSMC_Init>
	/* USER CODE BEGIN 2 */
	LCD_Init();
 800558a:	f7fc fa4d 	bl	8001a28 <LCD_Init>
	LCD_Clear(WHITE);
 800558e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005592:	f7ff fe85 	bl	80052a0 <LCD_Clear>
	POINT_COLOR = RED;
 8005596:	4b16      	ldr	r3, [pc, #88]	; (80055f0 <main+0x7c>)
 8005598:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800559c:	801a      	strh	r2, [r3, #0]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		LCD_ShowString(10, 30, 240, 60, 60, "STM32F103ZET6");
 800559e:	4b15      	ldr	r3, [pc, #84]	; (80055f4 <main+0x80>)
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	233c      	movs	r3, #60	; 0x3c
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	233c      	movs	r3, #60	; 0x3c
 80055a8:	22f0      	movs	r2, #240	; 0xf0
 80055aa:	211e      	movs	r1, #30
 80055ac:	200a      	movs	r0, #10
 80055ae:	f7ff ff93 	bl	80054d8 <LCD_ShowString>
		LCD_ShowString(30, 80, 200, 16, 16, "This is a test");
 80055b2:	4b11      	ldr	r3, [pc, #68]	; (80055f8 <main+0x84>)
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	2310      	movs	r3, #16
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	2310      	movs	r3, #16
 80055bc:	22c8      	movs	r2, #200	; 0xc8
 80055be:	2150      	movs	r1, #80	; 0x50
 80055c0:	201e      	movs	r0, #30
 80055c2:	f7ff ff89 	bl	80054d8 <LCD_ShowString>
		LCD_ShowString(30, 110, 200, 16, 16, "Auth:Aaron");
 80055c6:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <main+0x88>)
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	2310      	movs	r3, #16
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	2310      	movs	r3, #16
 80055d0:	22c8      	movs	r2, #200	; 0xc8
 80055d2:	216e      	movs	r1, #110	; 0x6e
 80055d4:	201e      	movs	r0, #30
 80055d6:	f7ff ff7f 	bl	80054d8 <LCD_ShowString>
		LCD_ShowString(54, 140, 200, 16, 16, "2021/05/04");
 80055da:	4b09      	ldr	r3, [pc, #36]	; (8005600 <main+0x8c>)
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	2310      	movs	r3, #16
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	2310      	movs	r3, #16
 80055e4:	22c8      	movs	r2, #200	; 0xc8
 80055e6:	218c      	movs	r1, #140	; 0x8c
 80055e8:	2036      	movs	r0, #54	; 0x36
 80055ea:	f7ff ff75 	bl	80054d8 <LCD_ShowString>
		LCD_ShowString(10, 30, 240, 60, 60, "STM32F103ZET6");
 80055ee:	e7d6      	b.n	800559e <main+0x2a>
 80055f0:	20000200 	.word	0x20000200
 80055f4:	080093f8 	.word	0x080093f8
 80055f8:	08009408 	.word	0x08009408
 80055fc:	08009418 	.word	0x08009418
 8005600:	08009424 	.word	0x08009424

08005604 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005604:	b580      	push	{r7, lr}
 8005606:	b090      	sub	sp, #64	; 0x40
 8005608:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800560a:	f107 0318 	add.w	r3, r7, #24
 800560e:	2228      	movs	r2, #40	; 0x28
 8005610:	2100      	movs	r1, #0
 8005612:	4618      	mov	r0, r3
 8005614:	f001 f9d2 	bl	80069bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005618:	1d3b      	adds	r3, r7, #4
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	605a      	str	r2, [r3, #4]
 8005620:	609a      	str	r2, [r3, #8]
 8005622:	60da      	str	r2, [r3, #12]
 8005624:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005626:	2301      	movs	r3, #1
 8005628:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800562a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800562e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005630:	2300      	movs	r3, #0
 8005632:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005634:	2301      	movs	r3, #1
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005638:	2302      	movs	r3, #2
 800563a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800563c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005640:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005642:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005646:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005648:	f107 0318 	add.w	r3, r7, #24
 800564c:	4618      	mov	r0, r3
 800564e:	f000 fc7f 	bl	8005f50 <HAL_RCC_OscConfig>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <SystemClock_Config+0x58>
		Error_Handler();
 8005658:	f000 f819 	bl	800568e <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800565c:	230f      	movs	r3, #15
 800565e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005660:	2302      	movs	r3, #2
 8005662:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005664:	2300      	movs	r3, #0
 8005666:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800566c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8005672:	1d3b      	adds	r3, r7, #4
 8005674:	2102      	movs	r1, #2
 8005676:	4618      	mov	r0, r3
 8005678:	f000 feea 	bl	8006450 <HAL_RCC_ClockConfig>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <SystemClock_Config+0x82>
		Error_Handler();
 8005682:	f000 f804 	bl	800568e <Error_Handler>
	}
}
 8005686:	bf00      	nop
 8005688:	3740      	adds	r7, #64	; 0x40
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800568e:	b480      	push	{r7}
 8005690:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005692:	b672      	cpsid	i
}
 8005694:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005696:	e7fe      	b.n	8005696 <Error_Handler+0x8>

08005698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <HAL_MspInit+0x5c>)
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	4a14      	ldr	r2, [pc, #80]	; (80056f4 <HAL_MspInit+0x5c>)
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	6193      	str	r3, [r2, #24]
 80056aa:	4b12      	ldr	r3, [pc, #72]	; (80056f4 <HAL_MspInit+0x5c>)
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	60bb      	str	r3, [r7, #8]
 80056b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80056b6:	4b0f      	ldr	r3, [pc, #60]	; (80056f4 <HAL_MspInit+0x5c>)
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	4a0e      	ldr	r2, [pc, #56]	; (80056f4 <HAL_MspInit+0x5c>)
 80056bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c0:	61d3      	str	r3, [r2, #28]
 80056c2:	4b0c      	ldr	r3, [pc, #48]	; (80056f4 <HAL_MspInit+0x5c>)
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ca:	607b      	str	r3, [r7, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80056ce:	4b0a      	ldr	r3, [pc, #40]	; (80056f8 <HAL_MspInit+0x60>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80056da:	60fb      	str	r3, [r7, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	4a04      	ldr	r2, [pc, #16]	; (80056f8 <HAL_MspInit+0x60>)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bc80      	pop	{r7}
 80056f2:	4770      	bx	lr
 80056f4:	40021000 	.word	0x40021000
 80056f8:	40010000 	.word	0x40010000

080056fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005700:	e7fe      	b.n	8005700 <NMI_Handler+0x4>

08005702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005702:	b480      	push	{r7}
 8005704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005706:	e7fe      	b.n	8005706 <HardFault_Handler+0x4>

08005708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800570c:	e7fe      	b.n	800570c <MemManage_Handler+0x4>

0800570e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800570e:	b480      	push	{r7}
 8005710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005712:	e7fe      	b.n	8005712 <BusFault_Handler+0x4>

08005714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005718:	e7fe      	b.n	8005718 <UsageFault_Handler+0x4>

0800571a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800571a:	b480      	push	{r7}
 800571c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800571e:	bf00      	nop
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr

08005726 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005726:	b480      	push	{r7}
 8005728:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800572a:	bf00      	nop
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr

08005732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005732:	b480      	push	{r7}
 8005734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005736:	bf00      	nop
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr

0800573e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005742:	f000 f935 	bl	80059b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005746:	bf00      	nop
 8005748:	bd80      	pop	{r7, pc}

0800574a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800574a:	b480      	push	{r7}
 800574c:	af00      	add	r7, sp, #0
	return 1;
 800574e:	2301      	movs	r3, #1
}
 8005750:	4618      	mov	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr

08005758 <_kill>:

int _kill(int pid, int sig)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005762:	f001 f901 	bl	8006968 <__errno>
 8005766:	4603      	mov	r3, r0
 8005768:	2216      	movs	r2, #22
 800576a:	601a      	str	r2, [r3, #0]
	return -1;
 800576c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <_exit>:

void _exit (int status)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005780:	f04f 31ff 	mov.w	r1, #4294967295
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f7ff ffe7 	bl	8005758 <_kill>
	while (1) {}		/* Make sure we hang here */
 800578a:	e7fe      	b.n	800578a <_exit+0x12>

0800578c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005798:	2300      	movs	r3, #0
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e00a      	b.n	80057b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800579e:	f3af 8000 	nop.w
 80057a2:	4601      	mov	r1, r0
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	1c5a      	adds	r2, r3, #1
 80057a8:	60ba      	str	r2, [r7, #8]
 80057aa:	b2ca      	uxtb	r2, r1
 80057ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	3301      	adds	r3, #1
 80057b2:	617b      	str	r3, [r7, #20]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	dbf0      	blt.n	800579e <_read+0x12>
	}

return len;
 80057bc:	687b      	ldr	r3, [r7, #4]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b086      	sub	sp, #24
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057d2:	2300      	movs	r3, #0
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	e009      	b.n	80057ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	60ba      	str	r2, [r7, #8]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	3301      	adds	r3, #1
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	dbf1      	blt.n	80057d8 <_write+0x12>
	}
	return len;
 80057f4:	687b      	ldr	r3, [r7, #4]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <_close>:

int _close(int file)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
	return -1;
 8005806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005824:	605a      	str	r2, [r3, #4]
	return 0;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	bc80      	pop	{r7}
 8005830:	4770      	bx	lr

08005832 <_isatty>:

int _isatty(int file)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
	return 1;
 800583a:	2301      	movs	r3, #1
}
 800583c:	4618      	mov	r0, r3
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr

08005846 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005846:	b480      	push	{r7}
 8005848:	b085      	sub	sp, #20
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
	return 0;
 8005852:	2300      	movs	r3, #0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr
	...

08005860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b086      	sub	sp, #24
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005868:	4a14      	ldr	r2, [pc, #80]	; (80058bc <_sbrk+0x5c>)
 800586a:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <_sbrk+0x60>)
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005874:	4b13      	ldr	r3, [pc, #76]	; (80058c4 <_sbrk+0x64>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d102      	bne.n	8005882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800587c:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <_sbrk+0x64>)
 800587e:	4a12      	ldr	r2, [pc, #72]	; (80058c8 <_sbrk+0x68>)
 8005880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005882:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <_sbrk+0x64>)
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4413      	add	r3, r2
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	429a      	cmp	r2, r3
 800588e:	d207      	bcs.n	80058a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005890:	f001 f86a 	bl	8006968 <__errno>
 8005894:	4603      	mov	r3, r0
 8005896:	220c      	movs	r2, #12
 8005898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800589a:	f04f 33ff 	mov.w	r3, #4294967295
 800589e:	e009      	b.n	80058b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058a0:	4b08      	ldr	r3, [pc, #32]	; (80058c4 <_sbrk+0x64>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058a6:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <_sbrk+0x64>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4413      	add	r3, r2
 80058ae:	4a05      	ldr	r2, [pc, #20]	; (80058c4 <_sbrk+0x64>)
 80058b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058b2:	68fb      	ldr	r3, [r7, #12]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20010000 	.word	0x20010000
 80058c0:	00000400 	.word	0x00000400
 80058c4:	20000204 	.word	0x20000204
 80058c8:	20000280 	.word	0x20000280

080058cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80058cc:	b480      	push	{r7}
 80058ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80058d0:	bf00      	nop
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80058d8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80058da:	e003      	b.n	80058e4 <LoopCopyDataInit>

080058dc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80058dc:	4b0b      	ldr	r3, [pc, #44]	; (800590c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80058de:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80058e0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80058e2:	3104      	adds	r1, #4

080058e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80058e4:	480a      	ldr	r0, [pc, #40]	; (8005910 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80058e6:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80058e8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80058ea:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80058ec:	d3f6      	bcc.n	80058dc <CopyDataInit>
  ldr r2, =_sbss
 80058ee:	4a0a      	ldr	r2, [pc, #40]	; (8005918 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80058f0:	e002      	b.n	80058f8 <LoopFillZerobss>

080058f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80058f2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80058f4:	f842 3b04 	str.w	r3, [r2], #4

080058f8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80058f8:	4b08      	ldr	r3, [pc, #32]	; (800591c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80058fa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80058fc:	d3f9      	bcc.n	80058f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80058fe:	f7ff ffe5 	bl	80058cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005902:	f001 f837 	bl	8006974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005906:	f7ff fe35 	bl	8005574 <main>
  bx lr
 800590a:	4770      	bx	lr
  ldr r3, =_sidata
 800590c:	080120d4 	.word	0x080120d4
  ldr r0, =_sdata
 8005910:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005914:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8005918:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 800591c:	2000027c 	.word	0x2000027c

08005920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005920:	e7fe      	b.n	8005920 <ADC1_2_IRQHandler>
	...

08005924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005928:	4b08      	ldr	r3, [pc, #32]	; (800594c <HAL_Init+0x28>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a07      	ldr	r2, [pc, #28]	; (800594c <HAL_Init+0x28>)
 800592e:	f043 0310 	orr.w	r3, r3, #16
 8005932:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005934:	2003      	movs	r0, #3
 8005936:	f000 f92b 	bl	8005b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800593a:	2000      	movs	r0, #0
 800593c:	f000 f808 	bl	8005950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005940:	f7ff feaa 	bl	8005698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40022000 	.word	0x40022000

08005950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005958:	4b12      	ldr	r3, [pc, #72]	; (80059a4 <HAL_InitTick+0x54>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	4b12      	ldr	r3, [pc, #72]	; (80059a8 <HAL_InitTick+0x58>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	4619      	mov	r1, r3
 8005962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005966:	fbb3 f3f1 	udiv	r3, r3, r1
 800596a:	fbb2 f3f3 	udiv	r3, r2, r3
 800596e:	4618      	mov	r0, r3
 8005970:	f000 f935 	bl	8005bde <HAL_SYSTICK_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e00e      	b.n	800599c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b0f      	cmp	r3, #15
 8005982:	d80a      	bhi.n	800599a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005984:	2200      	movs	r2, #0
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	f04f 30ff 	mov.w	r0, #4294967295
 800598c:	f000 f90b 	bl	8005ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005990:	4a06      	ldr	r2, [pc, #24]	; (80059ac <HAL_InitTick+0x5c>)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	e000      	b.n	800599c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	20000004 	.word	0x20000004
 80059a8:	2000000c 	.word	0x2000000c
 80059ac:	20000008 	.word	0x20000008

080059b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <HAL_IncTick+0x1c>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <HAL_IncTick+0x20>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4413      	add	r3, r2
 80059c0:	4a03      	ldr	r2, [pc, #12]	; (80059d0 <HAL_IncTick+0x20>)
 80059c2:	6013      	str	r3, [r2, #0]
}
 80059c4:	bf00      	nop
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bc80      	pop	{r7}
 80059ca:	4770      	bx	lr
 80059cc:	2000000c 	.word	0x2000000c
 80059d0:	20000268 	.word	0x20000268

080059d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  return uwTick;
 80059d8:	4b02      	ldr	r3, [pc, #8]	; (80059e4 <HAL_GetTick+0x10>)
 80059da:	681b      	ldr	r3, [r3, #0]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	46bd      	mov	sp, r7
 80059e0:	bc80      	pop	{r7}
 80059e2:	4770      	bx	lr
 80059e4:	20000268 	.word	0x20000268

080059e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059f0:	f7ff fff0 	bl	80059d4 <HAL_GetTick>
 80059f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d005      	beq.n	8005a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a02:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <HAL_Delay+0x44>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a0e:	bf00      	nop
 8005a10:	f7ff ffe0 	bl	80059d4 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d8f7      	bhi.n	8005a10 <HAL_Delay+0x28>
  {
  }
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	2000000c 	.word	0x2000000c

08005a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a40:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <__NVIC_SetPriorityGrouping+0x44>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a62:	4a04      	ldr	r2, [pc, #16]	; (8005a74 <__NVIC_SetPriorityGrouping+0x44>)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	60d3      	str	r3, [r2, #12]
}
 8005a68:	bf00      	nop
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bc80      	pop	{r7}
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	e000ed00 	.word	0xe000ed00

08005a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a7c:	4b04      	ldr	r3, [pc, #16]	; (8005a90 <__NVIC_GetPriorityGrouping+0x18>)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	0a1b      	lsrs	r3, r3, #8
 8005a82:	f003 0307 	and.w	r3, r3, #7
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bc80      	pop	{r7}
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	e000ed00 	.word	0xe000ed00

08005a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	6039      	str	r1, [r7, #0]
 8005a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	db0a      	blt.n	8005abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	490c      	ldr	r1, [pc, #48]	; (8005ae0 <__NVIC_SetPriority+0x4c>)
 8005aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab2:	0112      	lsls	r2, r2, #4
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005abc:	e00a      	b.n	8005ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	4908      	ldr	r1, [pc, #32]	; (8005ae4 <__NVIC_SetPriority+0x50>)
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	3b04      	subs	r3, #4
 8005acc:	0112      	lsls	r2, r2, #4
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	761a      	strb	r2, [r3, #24]
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bc80      	pop	{r7}
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	e000e100 	.word	0xe000e100
 8005ae4:	e000ed00 	.word	0xe000ed00

08005ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b089      	sub	sp, #36	; 0x24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	f1c3 0307 	rsb	r3, r3, #7
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	bf28      	it	cs
 8005b06:	2304      	movcs	r3, #4
 8005b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	2b06      	cmp	r3, #6
 8005b10:	d902      	bls.n	8005b18 <NVIC_EncodePriority+0x30>
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	3b03      	subs	r3, #3
 8005b16:	e000      	b.n	8005b1a <NVIC_EncodePriority+0x32>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	43da      	mvns	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	401a      	ands	r2, r3
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b30:	f04f 31ff 	mov.w	r1, #4294967295
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3a:	43d9      	mvns	r1, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b40:	4313      	orrs	r3, r2
         );
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3724      	adds	r7, #36	; 0x24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bc80      	pop	{r7}
 8005b4a:	4770      	bx	lr

08005b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b5c:	d301      	bcc.n	8005b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e00f      	b.n	8005b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b62:	4a0a      	ldr	r2, [pc, #40]	; (8005b8c <SysTick_Config+0x40>)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b6a:	210f      	movs	r1, #15
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b70:	f7ff ff90 	bl	8005a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b74:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <SysTick_Config+0x40>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b7a:	4b04      	ldr	r3, [pc, #16]	; (8005b8c <SysTick_Config+0x40>)
 8005b7c:	2207      	movs	r2, #7
 8005b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	e000e010 	.word	0xe000e010

08005b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff ff49 	bl	8005a30 <__NVIC_SetPriorityGrouping>
}
 8005b9e:	bf00      	nop
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ba6:	b580      	push	{r7, lr}
 8005ba8:	b086      	sub	sp, #24
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	4603      	mov	r3, r0
 8005bae:	60b9      	str	r1, [r7, #8]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bb8:	f7ff ff5e 	bl	8005a78 <__NVIC_GetPriorityGrouping>
 8005bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	68b9      	ldr	r1, [r7, #8]
 8005bc2:	6978      	ldr	r0, [r7, #20]
 8005bc4:	f7ff ff90 	bl	8005ae8 <NVIC_EncodePriority>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bce:	4611      	mov	r1, r2
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7ff ff5f 	bl	8005a94 <__NVIC_SetPriority>
}
 8005bd6:	bf00      	nop
 8005bd8:	3718      	adds	r7, #24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f7ff ffb0 	bl	8005b4c <SysTick_Config>
 8005bec:	4603      	mov	r3, r0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b08b      	sub	sp, #44	; 0x2c
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c02:	2300      	movs	r3, #0
 8005c04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005c06:	2300      	movs	r3, #0
 8005c08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c0a:	e179      	b.n	8005f00 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	f040 8168 	bne.w	8005efa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	4aa0      	ldr	r2, [pc, #640]	; (8005eb0 <HAL_GPIO_Init+0x2b8>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d05e      	beq.n	8005cf2 <HAL_GPIO_Init+0xfa>
 8005c34:	4a9e      	ldr	r2, [pc, #632]	; (8005eb0 <HAL_GPIO_Init+0x2b8>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d875      	bhi.n	8005d26 <HAL_GPIO_Init+0x12e>
 8005c3a:	4a9e      	ldr	r2, [pc, #632]	; (8005eb4 <HAL_GPIO_Init+0x2bc>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d058      	beq.n	8005cf2 <HAL_GPIO_Init+0xfa>
 8005c40:	4a9c      	ldr	r2, [pc, #624]	; (8005eb4 <HAL_GPIO_Init+0x2bc>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d86f      	bhi.n	8005d26 <HAL_GPIO_Init+0x12e>
 8005c46:	4a9c      	ldr	r2, [pc, #624]	; (8005eb8 <HAL_GPIO_Init+0x2c0>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d052      	beq.n	8005cf2 <HAL_GPIO_Init+0xfa>
 8005c4c:	4a9a      	ldr	r2, [pc, #616]	; (8005eb8 <HAL_GPIO_Init+0x2c0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d869      	bhi.n	8005d26 <HAL_GPIO_Init+0x12e>
 8005c52:	4a9a      	ldr	r2, [pc, #616]	; (8005ebc <HAL_GPIO_Init+0x2c4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d04c      	beq.n	8005cf2 <HAL_GPIO_Init+0xfa>
 8005c58:	4a98      	ldr	r2, [pc, #608]	; (8005ebc <HAL_GPIO_Init+0x2c4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d863      	bhi.n	8005d26 <HAL_GPIO_Init+0x12e>
 8005c5e:	4a98      	ldr	r2, [pc, #608]	; (8005ec0 <HAL_GPIO_Init+0x2c8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d046      	beq.n	8005cf2 <HAL_GPIO_Init+0xfa>
 8005c64:	4a96      	ldr	r2, [pc, #600]	; (8005ec0 <HAL_GPIO_Init+0x2c8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d85d      	bhi.n	8005d26 <HAL_GPIO_Init+0x12e>
 8005c6a:	2b12      	cmp	r3, #18
 8005c6c:	d82a      	bhi.n	8005cc4 <HAL_GPIO_Init+0xcc>
 8005c6e:	2b12      	cmp	r3, #18
 8005c70:	d859      	bhi.n	8005d26 <HAL_GPIO_Init+0x12e>
 8005c72:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <HAL_GPIO_Init+0x80>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005cf3 	.word	0x08005cf3
 8005c7c:	08005ccd 	.word	0x08005ccd
 8005c80:	08005cdf 	.word	0x08005cdf
 8005c84:	08005d21 	.word	0x08005d21
 8005c88:	08005d27 	.word	0x08005d27
 8005c8c:	08005d27 	.word	0x08005d27
 8005c90:	08005d27 	.word	0x08005d27
 8005c94:	08005d27 	.word	0x08005d27
 8005c98:	08005d27 	.word	0x08005d27
 8005c9c:	08005d27 	.word	0x08005d27
 8005ca0:	08005d27 	.word	0x08005d27
 8005ca4:	08005d27 	.word	0x08005d27
 8005ca8:	08005d27 	.word	0x08005d27
 8005cac:	08005d27 	.word	0x08005d27
 8005cb0:	08005d27 	.word	0x08005d27
 8005cb4:	08005d27 	.word	0x08005d27
 8005cb8:	08005d27 	.word	0x08005d27
 8005cbc:	08005cd5 	.word	0x08005cd5
 8005cc0:	08005ce9 	.word	0x08005ce9
 8005cc4:	4a7f      	ldr	r2, [pc, #508]	; (8005ec4 <HAL_GPIO_Init+0x2cc>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d013      	beq.n	8005cf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005cca:	e02c      	b.n	8005d26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	623b      	str	r3, [r7, #32]
          break;
 8005cd2:	e029      	b.n	8005d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	3304      	adds	r3, #4
 8005cda:	623b      	str	r3, [r7, #32]
          break;
 8005cdc:	e024      	b.n	8005d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	623b      	str	r3, [r7, #32]
          break;
 8005ce6:	e01f      	b.n	8005d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	330c      	adds	r3, #12
 8005cee:	623b      	str	r3, [r7, #32]
          break;
 8005cf0:	e01a      	b.n	8005d28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d102      	bne.n	8005d00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005cfa:	2304      	movs	r3, #4
 8005cfc:	623b      	str	r3, [r7, #32]
          break;
 8005cfe:	e013      	b.n	8005d28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d105      	bne.n	8005d14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005d08:	2308      	movs	r3, #8
 8005d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	611a      	str	r2, [r3, #16]
          break;
 8005d12:	e009      	b.n	8005d28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005d14:	2308      	movs	r3, #8
 8005d16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	615a      	str	r2, [r3, #20]
          break;
 8005d1e:	e003      	b.n	8005d28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005d20:	2300      	movs	r3, #0
 8005d22:	623b      	str	r3, [r7, #32]
          break;
 8005d24:	e000      	b.n	8005d28 <HAL_GPIO_Init+0x130>
          break;
 8005d26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	2bff      	cmp	r3, #255	; 0xff
 8005d2c:	d801      	bhi.n	8005d32 <HAL_GPIO_Init+0x13a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	e001      	b.n	8005d36 <HAL_GPIO_Init+0x13e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3304      	adds	r3, #4
 8005d36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2bff      	cmp	r3, #255	; 0xff
 8005d3c:	d802      	bhi.n	8005d44 <HAL_GPIO_Init+0x14c>
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	e002      	b.n	8005d4a <HAL_GPIO_Init+0x152>
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	3b08      	subs	r3, #8
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	210f      	movs	r1, #15
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	fa01 f303 	lsl.w	r3, r1, r3
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	401a      	ands	r2, r3
 8005d5c:	6a39      	ldr	r1, [r7, #32]
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	fa01 f303 	lsl.w	r3, r1, r3
 8005d64:	431a      	orrs	r2, r3
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 80c1 	beq.w	8005efa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005d78:	4b53      	ldr	r3, [pc, #332]	; (8005ec8 <HAL_GPIO_Init+0x2d0>)
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	4a52      	ldr	r2, [pc, #328]	; (8005ec8 <HAL_GPIO_Init+0x2d0>)
 8005d7e:	f043 0301 	orr.w	r3, r3, #1
 8005d82:	6193      	str	r3, [r2, #24]
 8005d84:	4b50      	ldr	r3, [pc, #320]	; (8005ec8 <HAL_GPIO_Init+0x2d0>)
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	60bb      	str	r3, [r7, #8]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005d90:	4a4e      	ldr	r2, [pc, #312]	; (8005ecc <HAL_GPIO_Init+0x2d4>)
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	089b      	lsrs	r3, r3, #2
 8005d96:	3302      	adds	r3, #2
 8005d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	f003 0303 	and.w	r3, r3, #3
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	220f      	movs	r2, #15
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	43db      	mvns	r3, r3
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4013      	ands	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a46      	ldr	r2, [pc, #280]	; (8005ed0 <HAL_GPIO_Init+0x2d8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d01f      	beq.n	8005dfc <HAL_GPIO_Init+0x204>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a45      	ldr	r2, [pc, #276]	; (8005ed4 <HAL_GPIO_Init+0x2dc>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d019      	beq.n	8005df8 <HAL_GPIO_Init+0x200>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a44      	ldr	r2, [pc, #272]	; (8005ed8 <HAL_GPIO_Init+0x2e0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d013      	beq.n	8005df4 <HAL_GPIO_Init+0x1fc>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a43      	ldr	r2, [pc, #268]	; (8005edc <HAL_GPIO_Init+0x2e4>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d00d      	beq.n	8005df0 <HAL_GPIO_Init+0x1f8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a42      	ldr	r2, [pc, #264]	; (8005ee0 <HAL_GPIO_Init+0x2e8>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d007      	beq.n	8005dec <HAL_GPIO_Init+0x1f4>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a41      	ldr	r2, [pc, #260]	; (8005ee4 <HAL_GPIO_Init+0x2ec>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d101      	bne.n	8005de8 <HAL_GPIO_Init+0x1f0>
 8005de4:	2305      	movs	r3, #5
 8005de6:	e00a      	b.n	8005dfe <HAL_GPIO_Init+0x206>
 8005de8:	2306      	movs	r3, #6
 8005dea:	e008      	b.n	8005dfe <HAL_GPIO_Init+0x206>
 8005dec:	2304      	movs	r3, #4
 8005dee:	e006      	b.n	8005dfe <HAL_GPIO_Init+0x206>
 8005df0:	2303      	movs	r3, #3
 8005df2:	e004      	b.n	8005dfe <HAL_GPIO_Init+0x206>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e002      	b.n	8005dfe <HAL_GPIO_Init+0x206>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e000      	b.n	8005dfe <HAL_GPIO_Init+0x206>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e00:	f002 0203 	and.w	r2, r2, #3
 8005e04:	0092      	lsls	r2, r2, #2
 8005e06:	4093      	lsls	r3, r2
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005e0e:	492f      	ldr	r1, [pc, #188]	; (8005ecc <HAL_GPIO_Init+0x2d4>)
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	089b      	lsrs	r3, r3, #2
 8005e14:	3302      	adds	r3, #2
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d006      	beq.n	8005e36 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005e28:	4b2f      	ldr	r3, [pc, #188]	; (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	492e      	ldr	r1, [pc, #184]	; (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	600b      	str	r3, [r1, #0]
 8005e34:	e006      	b.n	8005e44 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005e36:	4b2c      	ldr	r3, [pc, #176]	; (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	492a      	ldr	r1, [pc, #168]	; (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d006      	beq.n	8005e5e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005e50:	4b25      	ldr	r3, [pc, #148]	; (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	4924      	ldr	r1, [pc, #144]	; (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	604b      	str	r3, [r1, #4]
 8005e5c:	e006      	b.n	8005e6c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005e5e:	4b22      	ldr	r3, [pc, #136]	; (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	43db      	mvns	r3, r3
 8005e66:	4920      	ldr	r1, [pc, #128]	; (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005e68:	4013      	ands	r3, r2
 8005e6a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d006      	beq.n	8005e86 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005e78:	4b1b      	ldr	r3, [pc, #108]	; (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	491a      	ldr	r1, [pc, #104]	; (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	608b      	str	r3, [r1, #8]
 8005e84:	e006      	b.n	8005e94 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005e86:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	4916      	ldr	r1, [pc, #88]	; (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d025      	beq.n	8005eec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005ea0:	4b11      	ldr	r3, [pc, #68]	; (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	4910      	ldr	r1, [pc, #64]	; (8005ee8 <HAL_GPIO_Init+0x2f0>)
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60cb      	str	r3, [r1, #12]
 8005eac:	e025      	b.n	8005efa <HAL_GPIO_Init+0x302>
 8005eae:	bf00      	nop
 8005eb0:	10320000 	.word	0x10320000
 8005eb4:	10310000 	.word	0x10310000
 8005eb8:	10220000 	.word	0x10220000
 8005ebc:	10210000 	.word	0x10210000
 8005ec0:	10120000 	.word	0x10120000
 8005ec4:	10110000 	.word	0x10110000
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	40010000 	.word	0x40010000
 8005ed0:	40010800 	.word	0x40010800
 8005ed4:	40010c00 	.word	0x40010c00
 8005ed8:	40011000 	.word	0x40011000
 8005edc:	40011400 	.word	0x40011400
 8005ee0:	40011800 	.word	0x40011800
 8005ee4:	40011c00 	.word	0x40011c00
 8005ee8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005eec:	4b0b      	ldr	r3, [pc, #44]	; (8005f1c <HAL_GPIO_Init+0x324>)
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	43db      	mvns	r3, r3
 8005ef4:	4909      	ldr	r1, [pc, #36]	; (8005f1c <HAL_GPIO_Init+0x324>)
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	3301      	adds	r3, #1
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f47f ae7e 	bne.w	8005c0c <HAL_GPIO_Init+0x14>
  }
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	372c      	adds	r7, #44	; 0x2c
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr
 8005f1c:	40010400 	.word	0x40010400

08005f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	807b      	strh	r3, [r7, #2]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f30:	787b      	ldrb	r3, [r7, #1]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f36:	887a      	ldrh	r2, [r7, #2]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005f3c:	e003      	b.n	8005f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005f3e:	887b      	ldrh	r3, [r7, #2]
 8005f40:	041a      	lsls	r2, r3, #16
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	611a      	str	r2, [r3, #16]
}
 8005f46:	bf00      	nop
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e26c      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f000 8087 	beq.w	800607e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f70:	4b92      	ldr	r3, [pc, #584]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f003 030c 	and.w	r3, r3, #12
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d00c      	beq.n	8005f96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f7c:	4b8f      	ldr	r3, [pc, #572]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f003 030c 	and.w	r3, r3, #12
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d112      	bne.n	8005fae <HAL_RCC_OscConfig+0x5e>
 8005f88:	4b8c      	ldr	r3, [pc, #560]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f94:	d10b      	bne.n	8005fae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f96:	4b89      	ldr	r3, [pc, #548]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d06c      	beq.n	800607c <HAL_RCC_OscConfig+0x12c>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d168      	bne.n	800607c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e246      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fb6:	d106      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x76>
 8005fb8:	4b80      	ldr	r3, [pc, #512]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a7f      	ldr	r2, [pc, #508]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8005fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	e02e      	b.n	8006024 <HAL_RCC_OscConfig+0xd4>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10c      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x98>
 8005fce:	4b7b      	ldr	r3, [pc, #492]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a7a      	ldr	r2, [pc, #488]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8005fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	4b78      	ldr	r3, [pc, #480]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a77      	ldr	r2, [pc, #476]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8005fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fe4:	6013      	str	r3, [r2, #0]
 8005fe6:	e01d      	b.n	8006024 <HAL_RCC_OscConfig+0xd4>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ff0:	d10c      	bne.n	800600c <HAL_RCC_OscConfig+0xbc>
 8005ff2:	4b72      	ldr	r3, [pc, #456]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a71      	ldr	r2, [pc, #452]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8005ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	4b6f      	ldr	r3, [pc, #444]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a6e      	ldr	r2, [pc, #440]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8006004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	e00b      	b.n	8006024 <HAL_RCC_OscConfig+0xd4>
 800600c:	4b6b      	ldr	r3, [pc, #428]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a6a      	ldr	r2, [pc, #424]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8006012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	4b68      	ldr	r3, [pc, #416]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a67      	ldr	r2, [pc, #412]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 800601e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006022:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d013      	beq.n	8006054 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800602c:	f7ff fcd2 	bl	80059d4 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006032:	e008      	b.n	8006046 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006034:	f7ff fcce 	bl	80059d4 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b64      	cmp	r3, #100	; 0x64
 8006040:	d901      	bls.n	8006046 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e1fa      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006046:	4b5d      	ldr	r3, [pc, #372]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0f0      	beq.n	8006034 <HAL_RCC_OscConfig+0xe4>
 8006052:	e014      	b.n	800607e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006054:	f7ff fcbe 	bl	80059d4 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800605c:	f7ff fcba 	bl	80059d4 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b64      	cmp	r3, #100	; 0x64
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e1e6      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800606e:	4b53      	ldr	r3, [pc, #332]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f0      	bne.n	800605c <HAL_RCC_OscConfig+0x10c>
 800607a:	e000      	b.n	800607e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800607c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d063      	beq.n	8006152 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800608a:	4b4c      	ldr	r3, [pc, #304]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f003 030c 	and.w	r3, r3, #12
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00b      	beq.n	80060ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006096:	4b49      	ldr	r3, [pc, #292]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f003 030c 	and.w	r3, r3, #12
 800609e:	2b08      	cmp	r3, #8
 80060a0:	d11c      	bne.n	80060dc <HAL_RCC_OscConfig+0x18c>
 80060a2:	4b46      	ldr	r3, [pc, #280]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d116      	bne.n	80060dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ae:	4b43      	ldr	r3, [pc, #268]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <HAL_RCC_OscConfig+0x176>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d001      	beq.n	80060c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e1ba      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060c6:	4b3d      	ldr	r3, [pc, #244]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	4939      	ldr	r1, [pc, #228]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060da:	e03a      	b.n	8006152 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d020      	beq.n	8006126 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060e4:	4b36      	ldr	r3, [pc, #216]	; (80061c0 <HAL_RCC_OscConfig+0x270>)
 80060e6:	2201      	movs	r2, #1
 80060e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ea:	f7ff fc73 	bl	80059d4 <HAL_GetTick>
 80060ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060f0:	e008      	b.n	8006104 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060f2:	f7ff fc6f 	bl	80059d4 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d901      	bls.n	8006104 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e19b      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006104:	4b2d      	ldr	r3, [pc, #180]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0302 	and.w	r3, r3, #2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d0f0      	beq.n	80060f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006110:	4b2a      	ldr	r3, [pc, #168]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	4927      	ldr	r1, [pc, #156]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8006120:	4313      	orrs	r3, r2
 8006122:	600b      	str	r3, [r1, #0]
 8006124:	e015      	b.n	8006152 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006126:	4b26      	ldr	r3, [pc, #152]	; (80061c0 <HAL_RCC_OscConfig+0x270>)
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612c:	f7ff fc52 	bl	80059d4 <HAL_GetTick>
 8006130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006134:	f7ff fc4e 	bl	80059d4 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e17a      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006146:	4b1d      	ldr	r3, [pc, #116]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0308 	and.w	r3, r3, #8
 800615a:	2b00      	cmp	r3, #0
 800615c:	d03a      	beq.n	80061d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d019      	beq.n	800619a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006166:	4b17      	ldr	r3, [pc, #92]	; (80061c4 <HAL_RCC_OscConfig+0x274>)
 8006168:	2201      	movs	r2, #1
 800616a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800616c:	f7ff fc32 	bl	80059d4 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006174:	f7ff fc2e 	bl	80059d4 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e15a      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006186:	4b0d      	ldr	r3, [pc, #52]	; (80061bc <HAL_RCC_OscConfig+0x26c>)
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0f0      	beq.n	8006174 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006192:	2001      	movs	r0, #1
 8006194:	f000 faa6 	bl	80066e4 <RCC_Delay>
 8006198:	e01c      	b.n	80061d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <HAL_RCC_OscConfig+0x274>)
 800619c:	2200      	movs	r2, #0
 800619e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061a0:	f7ff fc18 	bl	80059d4 <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061a6:	e00f      	b.n	80061c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061a8:	f7ff fc14 	bl	80059d4 <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d908      	bls.n	80061c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e140      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
 80061ba:	bf00      	nop
 80061bc:	40021000 	.word	0x40021000
 80061c0:	42420000 	.word	0x42420000
 80061c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061c8:	4b9e      	ldr	r3, [pc, #632]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e9      	bne.n	80061a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 80a6 	beq.w	800632e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061e2:	2300      	movs	r3, #0
 80061e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061e6:	4b97      	ldr	r3, [pc, #604]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10d      	bne.n	800620e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061f2:	4b94      	ldr	r3, [pc, #592]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 80061f4:	69db      	ldr	r3, [r3, #28]
 80061f6:	4a93      	ldr	r2, [pc, #588]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 80061f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061fc:	61d3      	str	r3, [r2, #28]
 80061fe:	4b91      	ldr	r3, [pc, #580]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 8006200:	69db      	ldr	r3, [r3, #28]
 8006202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006206:	60bb      	str	r3, [r7, #8]
 8006208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800620a:	2301      	movs	r3, #1
 800620c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620e:	4b8e      	ldr	r3, [pc, #568]	; (8006448 <HAL_RCC_OscConfig+0x4f8>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006216:	2b00      	cmp	r3, #0
 8006218:	d118      	bne.n	800624c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800621a:	4b8b      	ldr	r3, [pc, #556]	; (8006448 <HAL_RCC_OscConfig+0x4f8>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a8a      	ldr	r2, [pc, #552]	; (8006448 <HAL_RCC_OscConfig+0x4f8>)
 8006220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006226:	f7ff fbd5 	bl	80059d4 <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800622c:	e008      	b.n	8006240 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800622e:	f7ff fbd1 	bl	80059d4 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b64      	cmp	r3, #100	; 0x64
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e0fd      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006240:	4b81      	ldr	r3, [pc, #516]	; (8006448 <HAL_RCC_OscConfig+0x4f8>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0f0      	beq.n	800622e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d106      	bne.n	8006262 <HAL_RCC_OscConfig+0x312>
 8006254:	4b7b      	ldr	r3, [pc, #492]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	4a7a      	ldr	r2, [pc, #488]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 800625a:	f043 0301 	orr.w	r3, r3, #1
 800625e:	6213      	str	r3, [r2, #32]
 8006260:	e02d      	b.n	80062be <HAL_RCC_OscConfig+0x36e>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10c      	bne.n	8006284 <HAL_RCC_OscConfig+0x334>
 800626a:	4b76      	ldr	r3, [pc, #472]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	4a75      	ldr	r2, [pc, #468]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 8006270:	f023 0301 	bic.w	r3, r3, #1
 8006274:	6213      	str	r3, [r2, #32]
 8006276:	4b73      	ldr	r3, [pc, #460]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	4a72      	ldr	r2, [pc, #456]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 800627c:	f023 0304 	bic.w	r3, r3, #4
 8006280:	6213      	str	r3, [r2, #32]
 8006282:	e01c      	b.n	80062be <HAL_RCC_OscConfig+0x36e>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	2b05      	cmp	r3, #5
 800628a:	d10c      	bne.n	80062a6 <HAL_RCC_OscConfig+0x356>
 800628c:	4b6d      	ldr	r3, [pc, #436]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	4a6c      	ldr	r2, [pc, #432]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 8006292:	f043 0304 	orr.w	r3, r3, #4
 8006296:	6213      	str	r3, [r2, #32]
 8006298:	4b6a      	ldr	r3, [pc, #424]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	4a69      	ldr	r2, [pc, #420]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 800629e:	f043 0301 	orr.w	r3, r3, #1
 80062a2:	6213      	str	r3, [r2, #32]
 80062a4:	e00b      	b.n	80062be <HAL_RCC_OscConfig+0x36e>
 80062a6:	4b67      	ldr	r3, [pc, #412]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	4a66      	ldr	r2, [pc, #408]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 80062ac:	f023 0301 	bic.w	r3, r3, #1
 80062b0:	6213      	str	r3, [r2, #32]
 80062b2:	4b64      	ldr	r3, [pc, #400]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	4a63      	ldr	r2, [pc, #396]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 80062b8:	f023 0304 	bic.w	r3, r3, #4
 80062bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d015      	beq.n	80062f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062c6:	f7ff fb85 	bl	80059d4 <HAL_GetTick>
 80062ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062cc:	e00a      	b.n	80062e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062ce:	f7ff fb81 	bl	80059d4 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062dc:	4293      	cmp	r3, r2
 80062de:	d901      	bls.n	80062e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e0ab      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e4:	4b57      	ldr	r3, [pc, #348]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	f003 0302 	and.w	r3, r3, #2
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0ee      	beq.n	80062ce <HAL_RCC_OscConfig+0x37e>
 80062f0:	e014      	b.n	800631c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062f2:	f7ff fb6f 	bl	80059d4 <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062f8:	e00a      	b.n	8006310 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062fa:	f7ff fb6b 	bl	80059d4 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	f241 3288 	movw	r2, #5000	; 0x1388
 8006308:	4293      	cmp	r3, r2
 800630a:	d901      	bls.n	8006310 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e095      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006310:	4b4c      	ldr	r3, [pc, #304]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1ee      	bne.n	80062fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800631c:	7dfb      	ldrb	r3, [r7, #23]
 800631e:	2b01      	cmp	r3, #1
 8006320:	d105      	bne.n	800632e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006322:	4b48      	ldr	r3, [pc, #288]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	4a47      	ldr	r2, [pc, #284]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 8006328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800632c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8081 	beq.w	800643a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006338:	4b42      	ldr	r3, [pc, #264]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f003 030c 	and.w	r3, r3, #12
 8006340:	2b08      	cmp	r3, #8
 8006342:	d061      	beq.n	8006408 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	2b02      	cmp	r3, #2
 800634a:	d146      	bne.n	80063da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800634c:	4b3f      	ldr	r3, [pc, #252]	; (800644c <HAL_RCC_OscConfig+0x4fc>)
 800634e:	2200      	movs	r2, #0
 8006350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006352:	f7ff fb3f 	bl	80059d4 <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006358:	e008      	b.n	800636c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800635a:	f7ff fb3b 	bl	80059d4 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	2b02      	cmp	r3, #2
 8006366:	d901      	bls.n	800636c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e067      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800636c:	4b35      	ldr	r3, [pc, #212]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1f0      	bne.n	800635a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006380:	d108      	bne.n	8006394 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006382:	4b30      	ldr	r3, [pc, #192]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	492d      	ldr	r1, [pc, #180]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 8006390:	4313      	orrs	r3, r2
 8006392:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006394:	4b2b      	ldr	r3, [pc, #172]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a19      	ldr	r1, [r3, #32]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a4:	430b      	orrs	r3, r1
 80063a6:	4927      	ldr	r1, [pc, #156]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063ac:	4b27      	ldr	r3, [pc, #156]	; (800644c <HAL_RCC_OscConfig+0x4fc>)
 80063ae:	2201      	movs	r2, #1
 80063b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b2:	f7ff fb0f 	bl	80059d4 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ba:	f7ff fb0b 	bl	80059d4 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e037      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063cc:	4b1d      	ldr	r3, [pc, #116]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d0f0      	beq.n	80063ba <HAL_RCC_OscConfig+0x46a>
 80063d8:	e02f      	b.n	800643a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063da:	4b1c      	ldr	r3, [pc, #112]	; (800644c <HAL_RCC_OscConfig+0x4fc>)
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e0:	f7ff faf8 	bl	80059d4 <HAL_GetTick>
 80063e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063e6:	e008      	b.n	80063fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063e8:	f7ff faf4 	bl	80059d4 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e020      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063fa:	4b12      	ldr	r3, [pc, #72]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1f0      	bne.n	80063e8 <HAL_RCC_OscConfig+0x498>
 8006406:	e018      	b.n	800643a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e013      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006414:	4b0b      	ldr	r3, [pc, #44]	; (8006444 <HAL_RCC_OscConfig+0x4f4>)
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	429a      	cmp	r2, r3
 8006426:	d106      	bne.n	8006436 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006432:	429a      	cmp	r2, r3
 8006434:	d001      	beq.n	800643a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40021000 	.word	0x40021000
 8006448:	40007000 	.word	0x40007000
 800644c:	42420060 	.word	0x42420060

08006450 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e0d0      	b.n	8006606 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006464:	4b6a      	ldr	r3, [pc, #424]	; (8006610 <HAL_RCC_ClockConfig+0x1c0>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d910      	bls.n	8006494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006472:	4b67      	ldr	r3, [pc, #412]	; (8006610 <HAL_RCC_ClockConfig+0x1c0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f023 0207 	bic.w	r2, r3, #7
 800647a:	4965      	ldr	r1, [pc, #404]	; (8006610 <HAL_RCC_ClockConfig+0x1c0>)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	4313      	orrs	r3, r2
 8006480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006482:	4b63      	ldr	r3, [pc, #396]	; (8006610 <HAL_RCC_ClockConfig+0x1c0>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d001      	beq.n	8006494 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0b8      	b.n	8006606 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0302 	and.w	r3, r3, #2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d020      	beq.n	80064e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064ac:	4b59      	ldr	r3, [pc, #356]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	4a58      	ldr	r2, [pc, #352]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 80064b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80064b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064c4:	4b53      	ldr	r3, [pc, #332]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4a52      	ldr	r2, [pc, #328]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 80064ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80064ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064d0:	4b50      	ldr	r3, [pc, #320]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	494d      	ldr	r1, [pc, #308]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d040      	beq.n	8006570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d107      	bne.n	8006506 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064f6:	4b47      	ldr	r3, [pc, #284]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d115      	bne.n	800652e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e07f      	b.n	8006606 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b02      	cmp	r3, #2
 800650c:	d107      	bne.n	800651e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800650e:	4b41      	ldr	r3, [pc, #260]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d109      	bne.n	800652e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e073      	b.n	8006606 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651e:	4b3d      	ldr	r3, [pc, #244]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e06b      	b.n	8006606 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800652e:	4b39      	ldr	r3, [pc, #228]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f023 0203 	bic.w	r2, r3, #3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	4936      	ldr	r1, [pc, #216]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 800653c:	4313      	orrs	r3, r2
 800653e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006540:	f7ff fa48 	bl	80059d4 <HAL_GetTick>
 8006544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006546:	e00a      	b.n	800655e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006548:	f7ff fa44 	bl	80059d4 <HAL_GetTick>
 800654c:	4602      	mov	r2, r0
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	f241 3288 	movw	r2, #5000	; 0x1388
 8006556:	4293      	cmp	r3, r2
 8006558:	d901      	bls.n	800655e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e053      	b.n	8006606 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655e:	4b2d      	ldr	r3, [pc, #180]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f003 020c 	and.w	r2, r3, #12
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	429a      	cmp	r2, r3
 800656e:	d1eb      	bne.n	8006548 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006570:	4b27      	ldr	r3, [pc, #156]	; (8006610 <HAL_RCC_ClockConfig+0x1c0>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d210      	bcs.n	80065a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657e:	4b24      	ldr	r3, [pc, #144]	; (8006610 <HAL_RCC_ClockConfig+0x1c0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f023 0207 	bic.w	r2, r3, #7
 8006586:	4922      	ldr	r1, [pc, #136]	; (8006610 <HAL_RCC_ClockConfig+0x1c0>)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	4313      	orrs	r3, r2
 800658c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800658e:	4b20      	ldr	r3, [pc, #128]	; (8006610 <HAL_RCC_ClockConfig+0x1c0>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	683a      	ldr	r2, [r7, #0]
 8006598:	429a      	cmp	r2, r3
 800659a:	d001      	beq.n	80065a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e032      	b.n	8006606 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d008      	beq.n	80065be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065ac:	4b19      	ldr	r3, [pc, #100]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	4916      	ldr	r1, [pc, #88]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d009      	beq.n	80065de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80065ca:	4b12      	ldr	r3, [pc, #72]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	00db      	lsls	r3, r3, #3
 80065d8:	490e      	ldr	r1, [pc, #56]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065de:	f000 f821 	bl	8006624 <HAL_RCC_GetSysClockFreq>
 80065e2:	4602      	mov	r2, r0
 80065e4:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <HAL_RCC_ClockConfig+0x1c4>)
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	091b      	lsrs	r3, r3, #4
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	490a      	ldr	r1, [pc, #40]	; (8006618 <HAL_RCC_ClockConfig+0x1c8>)
 80065f0:	5ccb      	ldrb	r3, [r1, r3]
 80065f2:	fa22 f303 	lsr.w	r3, r2, r3
 80065f6:	4a09      	ldr	r2, [pc, #36]	; (800661c <HAL_RCC_ClockConfig+0x1cc>)
 80065f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80065fa:	4b09      	ldr	r3, [pc, #36]	; (8006620 <HAL_RCC_ClockConfig+0x1d0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f7ff f9a6 	bl	8005950 <HAL_InitTick>

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	40022000 	.word	0x40022000
 8006614:	40021000 	.word	0x40021000
 8006618:	08011cdc 	.word	0x08011cdc
 800661c:	20000004 	.word	0x20000004
 8006620:	20000008 	.word	0x20000008

08006624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006624:	b490      	push	{r4, r7}
 8006626:	b08a      	sub	sp, #40	; 0x28
 8006628:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800662a:	4b2a      	ldr	r3, [pc, #168]	; (80066d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800662c:	1d3c      	adds	r4, r7, #4
 800662e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006634:	f240 2301 	movw	r3, #513	; 0x201
 8006638:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	61fb      	str	r3, [r7, #28]
 800663e:	2300      	movs	r3, #0
 8006640:	61bb      	str	r3, [r7, #24]
 8006642:	2300      	movs	r3, #0
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
 8006646:	2300      	movs	r3, #0
 8006648:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800664e:	4b22      	ldr	r3, [pc, #136]	; (80066d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f003 030c 	and.w	r3, r3, #12
 800665a:	2b04      	cmp	r3, #4
 800665c:	d002      	beq.n	8006664 <HAL_RCC_GetSysClockFreq+0x40>
 800665e:	2b08      	cmp	r3, #8
 8006660:	d003      	beq.n	800666a <HAL_RCC_GetSysClockFreq+0x46>
 8006662:	e02d      	b.n	80066c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006664:	4b1d      	ldr	r3, [pc, #116]	; (80066dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006666:	623b      	str	r3, [r7, #32]
      break;
 8006668:	e02d      	b.n	80066c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	0c9b      	lsrs	r3, r3, #18
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006676:	4413      	add	r3, r2
 8006678:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800667c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d013      	beq.n	80066b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006688:	4b13      	ldr	r3, [pc, #76]	; (80066d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	0c5b      	lsrs	r3, r3, #17
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006696:	4413      	add	r3, r2
 8006698:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800669c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4a0e      	ldr	r2, [pc, #56]	; (80066dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80066a2:	fb02 f203 	mul.w	r2, r2, r3
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ac:	627b      	str	r3, [r7, #36]	; 0x24
 80066ae:	e004      	b.n	80066ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	4a0b      	ldr	r2, [pc, #44]	; (80066e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066b4:	fb02 f303 	mul.w	r3, r2, r3
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	623b      	str	r3, [r7, #32]
      break;
 80066be:	e002      	b.n	80066c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80066c0:	4b06      	ldr	r3, [pc, #24]	; (80066dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80066c2:	623b      	str	r3, [r7, #32]
      break;
 80066c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066c6:	6a3b      	ldr	r3, [r7, #32]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3728      	adds	r7, #40	; 0x28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc90      	pop	{r4, r7}
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	08009430 	.word	0x08009430
 80066d8:	40021000 	.word	0x40021000
 80066dc:	007a1200 	.word	0x007a1200
 80066e0:	003d0900 	.word	0x003d0900

080066e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80066ec:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <RCC_Delay+0x34>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a0a      	ldr	r2, [pc, #40]	; (800671c <RCC_Delay+0x38>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	0a5b      	lsrs	r3, r3, #9
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	fb02 f303 	mul.w	r3, r2, r3
 80066fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006700:	bf00      	nop
  }
  while (Delay --);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	1e5a      	subs	r2, r3, #1
 8006706:	60fa      	str	r2, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1f9      	bne.n	8006700 <RCC_Delay+0x1c>
}
 800670c:	bf00      	nop
 800670e:	bf00      	nop
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr
 8006718:	20000004 	.word	0x20000004
 800671c:	10624dd3 	.word	0x10624dd3

08006720 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d004      	beq.n	800673c <HAL_SRAM_Init+0x1c>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800673a:	d101      	bne.n	8006740 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e038      	b.n	80067b2 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7fa faf5 	bl	8000d44 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3308      	adds	r3, #8
 8006762:	4619      	mov	r1, r3
 8006764:	4610      	mov	r0, r2
 8006766:	f000 f829 	bl	80067bc <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	461a      	mov	r2, r3
 8006774:	68b9      	ldr	r1, [r7, #8]
 8006776:	f000 f88b 	bl	8006890 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6858      	ldr	r0, [r3, #4]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	f000 f8b6 	bl	80068f8 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	6892      	ldr	r2, [r2, #8]
 8006794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	6892      	ldr	r2, [r2, #8]
 80067a0:	f041 0101 	orr.w	r1, r1, #1
 80067a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
	...

080067bc <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	6812      	ldr	r2, [r2, #0]
 80067d4:	f023 0101 	bic.w	r1, r3, #1
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b08      	cmp	r3, #8
 80067e4:	d102      	bne.n	80067ec <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80067e6:	2340      	movs	r3, #64	; 0x40
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	e001      	b.n	80067f0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80067fc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006802:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8006808:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800680e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006814:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800681a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8006820:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8006826:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800682c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	4313      	orrs	r3, r2
 800683e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800684a:	4b10      	ldr	r3, [pc, #64]	; (800688c <FSMC_NORSRAM_Init+0xd0>)
 800684c:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006854:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800685c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	43db      	mvns	r3, r3
 800686c:	ea02 0103 	and.w	r1, r2, r3
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	4319      	orrs	r1, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	371c      	adds	r7, #28
 8006884:	46bd      	mov	sp, r7
 8006886:	bc80      	pop	{r7}
 8006888:	4770      	bx	lr
 800688a:	bf00      	nop
 800688c:	0008fb7f 	.word	0x0008fb7f

08006890 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	431a      	orrs	r2, r3
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	021b      	lsls	r3, r3, #8
 80068bc:	431a      	orrs	r2, r3
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	041b      	lsls	r3, r3, #16
 80068c4:	431a      	orrs	r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	051b      	lsls	r3, r3, #20
 80068ce:	431a      	orrs	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	3b02      	subs	r3, #2
 80068d6:	061b      	lsls	r3, r3, #24
 80068d8:	431a      	orrs	r2, r3
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	4313      	orrs	r3, r2
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	3201      	adds	r2, #1
 80068e4:	4319      	orrs	r1, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bc80      	pop	{r7}
 80068f6:	4770      	bx	lr

080068f8 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800690c:	d11d      	bne.n	800694a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006916:	4b13      	ldr	r3, [pc, #76]	; (8006964 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006918:	4013      	ands	r3, r2
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	6811      	ldr	r1, [r2, #0]
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	6852      	ldr	r2, [r2, #4]
 8006922:	0112      	lsls	r2, r2, #4
 8006924:	4311      	orrs	r1, r2
 8006926:	68ba      	ldr	r2, [r7, #8]
 8006928:	6892      	ldr	r2, [r2, #8]
 800692a:	0212      	lsls	r2, r2, #8
 800692c:	4311      	orrs	r1, r2
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	6992      	ldr	r2, [r2, #24]
 8006932:	4311      	orrs	r1, r2
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	68d2      	ldr	r2, [r2, #12]
 8006938:	0412      	lsls	r2, r2, #16
 800693a:	430a      	orrs	r2, r1
 800693c:	ea43 0102 	orr.w	r1, r3, r2
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006948:	e005      	b.n	8006956 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006952:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	bc80      	pop	{r7}
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	cff00000 	.word	0xcff00000

08006968 <__errno>:
 8006968:	4b01      	ldr	r3, [pc, #4]	; (8006970 <__errno+0x8>)
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	20000010 	.word	0x20000010

08006974 <__libc_init_array>:
 8006974:	b570      	push	{r4, r5, r6, lr}
 8006976:	2600      	movs	r6, #0
 8006978:	4d0c      	ldr	r5, [pc, #48]	; (80069ac <__libc_init_array+0x38>)
 800697a:	4c0d      	ldr	r4, [pc, #52]	; (80069b0 <__libc_init_array+0x3c>)
 800697c:	1b64      	subs	r4, r4, r5
 800697e:	10a4      	asrs	r4, r4, #2
 8006980:	42a6      	cmp	r6, r4
 8006982:	d109      	bne.n	8006998 <__libc_init_array+0x24>
 8006984:	f002 fd0e 	bl	80093a4 <_init>
 8006988:	2600      	movs	r6, #0
 800698a:	4d0a      	ldr	r5, [pc, #40]	; (80069b4 <__libc_init_array+0x40>)
 800698c:	4c0a      	ldr	r4, [pc, #40]	; (80069b8 <__libc_init_array+0x44>)
 800698e:	1b64      	subs	r4, r4, r5
 8006990:	10a4      	asrs	r4, r4, #2
 8006992:	42a6      	cmp	r6, r4
 8006994:	d105      	bne.n	80069a2 <__libc_init_array+0x2e>
 8006996:	bd70      	pop	{r4, r5, r6, pc}
 8006998:	f855 3b04 	ldr.w	r3, [r5], #4
 800699c:	4798      	blx	r3
 800699e:	3601      	adds	r6, #1
 80069a0:	e7ee      	b.n	8006980 <__libc_init_array+0xc>
 80069a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a6:	4798      	blx	r3
 80069a8:	3601      	adds	r6, #1
 80069aa:	e7f2      	b.n	8006992 <__libc_init_array+0x1e>
 80069ac:	080120cc 	.word	0x080120cc
 80069b0:	080120cc 	.word	0x080120cc
 80069b4:	080120cc 	.word	0x080120cc
 80069b8:	080120d0 	.word	0x080120d0

080069bc <memset>:
 80069bc:	4603      	mov	r3, r0
 80069be:	4402      	add	r2, r0
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d100      	bne.n	80069c6 <memset+0xa>
 80069c4:	4770      	bx	lr
 80069c6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ca:	e7f9      	b.n	80069c0 <memset+0x4>

080069cc <__cvt>:
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069d2:	461f      	mov	r7, r3
 80069d4:	bfbb      	ittet	lt
 80069d6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80069da:	461f      	movlt	r7, r3
 80069dc:	2300      	movge	r3, #0
 80069de:	232d      	movlt	r3, #45	; 0x2d
 80069e0:	b088      	sub	sp, #32
 80069e2:	4614      	mov	r4, r2
 80069e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80069e8:	7013      	strb	r3, [r2, #0]
 80069ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80069f0:	f023 0820 	bic.w	r8, r3, #32
 80069f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80069f8:	d005      	beq.n	8006a06 <__cvt+0x3a>
 80069fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80069fe:	d100      	bne.n	8006a02 <__cvt+0x36>
 8006a00:	3501      	adds	r5, #1
 8006a02:	2302      	movs	r3, #2
 8006a04:	e000      	b.n	8006a08 <__cvt+0x3c>
 8006a06:	2303      	movs	r3, #3
 8006a08:	aa07      	add	r2, sp, #28
 8006a0a:	9204      	str	r2, [sp, #16]
 8006a0c:	aa06      	add	r2, sp, #24
 8006a0e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006a12:	e9cd 3500 	strd	r3, r5, [sp]
 8006a16:	4622      	mov	r2, r4
 8006a18:	463b      	mov	r3, r7
 8006a1a:	f000 fcdd 	bl	80073d8 <_dtoa_r>
 8006a1e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006a22:	4606      	mov	r6, r0
 8006a24:	d102      	bne.n	8006a2c <__cvt+0x60>
 8006a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a28:	07db      	lsls	r3, r3, #31
 8006a2a:	d522      	bpl.n	8006a72 <__cvt+0xa6>
 8006a2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a30:	eb06 0905 	add.w	r9, r6, r5
 8006a34:	d110      	bne.n	8006a58 <__cvt+0x8c>
 8006a36:	7833      	ldrb	r3, [r6, #0]
 8006a38:	2b30      	cmp	r3, #48	; 0x30
 8006a3a:	d10a      	bne.n	8006a52 <__cvt+0x86>
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2300      	movs	r3, #0
 8006a40:	4620      	mov	r0, r4
 8006a42:	4639      	mov	r1, r7
 8006a44:	f7fa f81c 	bl	8000a80 <__aeabi_dcmpeq>
 8006a48:	b918      	cbnz	r0, 8006a52 <__cvt+0x86>
 8006a4a:	f1c5 0501 	rsb	r5, r5, #1
 8006a4e:	f8ca 5000 	str.w	r5, [sl]
 8006a52:	f8da 3000 	ldr.w	r3, [sl]
 8006a56:	4499      	add	r9, r3
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	4620      	mov	r0, r4
 8006a5e:	4639      	mov	r1, r7
 8006a60:	f7fa f80e 	bl	8000a80 <__aeabi_dcmpeq>
 8006a64:	b108      	cbz	r0, 8006a6a <__cvt+0x9e>
 8006a66:	f8cd 901c 	str.w	r9, [sp, #28]
 8006a6a:	2230      	movs	r2, #48	; 0x30
 8006a6c:	9b07      	ldr	r3, [sp, #28]
 8006a6e:	454b      	cmp	r3, r9
 8006a70:	d307      	bcc.n	8006a82 <__cvt+0xb6>
 8006a72:	4630      	mov	r0, r6
 8006a74:	9b07      	ldr	r3, [sp, #28]
 8006a76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a78:	1b9b      	subs	r3, r3, r6
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	b008      	add	sp, #32
 8006a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a82:	1c59      	adds	r1, r3, #1
 8006a84:	9107      	str	r1, [sp, #28]
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	e7f0      	b.n	8006a6c <__cvt+0xa0>

08006a8a <__exponent>:
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a8e:	2900      	cmp	r1, #0
 8006a90:	f803 2b02 	strb.w	r2, [r3], #2
 8006a94:	bfb6      	itet	lt
 8006a96:	222d      	movlt	r2, #45	; 0x2d
 8006a98:	222b      	movge	r2, #43	; 0x2b
 8006a9a:	4249      	neglt	r1, r1
 8006a9c:	2909      	cmp	r1, #9
 8006a9e:	7042      	strb	r2, [r0, #1]
 8006aa0:	dd2b      	ble.n	8006afa <__exponent+0x70>
 8006aa2:	f10d 0407 	add.w	r4, sp, #7
 8006aa6:	46a4      	mov	ip, r4
 8006aa8:	270a      	movs	r7, #10
 8006aaa:	fb91 f6f7 	sdiv	r6, r1, r7
 8006aae:	460a      	mov	r2, r1
 8006ab0:	46a6      	mov	lr, r4
 8006ab2:	fb07 1516 	mls	r5, r7, r6, r1
 8006ab6:	2a63      	cmp	r2, #99	; 0x63
 8006ab8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006abc:	4631      	mov	r1, r6
 8006abe:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ac2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ac6:	dcf0      	bgt.n	8006aaa <__exponent+0x20>
 8006ac8:	3130      	adds	r1, #48	; 0x30
 8006aca:	f1ae 0502 	sub.w	r5, lr, #2
 8006ace:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	1c44      	adds	r4, r0, #1
 8006ad6:	4561      	cmp	r1, ip
 8006ad8:	d30a      	bcc.n	8006af0 <__exponent+0x66>
 8006ada:	f10d 0209 	add.w	r2, sp, #9
 8006ade:	eba2 020e 	sub.w	r2, r2, lr
 8006ae2:	4565      	cmp	r5, ip
 8006ae4:	bf88      	it	hi
 8006ae6:	2200      	movhi	r2, #0
 8006ae8:	4413      	add	r3, r2
 8006aea:	1a18      	subs	r0, r3, r0
 8006aec:	b003      	add	sp, #12
 8006aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006af0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006af4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006af8:	e7ed      	b.n	8006ad6 <__exponent+0x4c>
 8006afa:	2330      	movs	r3, #48	; 0x30
 8006afc:	3130      	adds	r1, #48	; 0x30
 8006afe:	7083      	strb	r3, [r0, #2]
 8006b00:	70c1      	strb	r1, [r0, #3]
 8006b02:	1d03      	adds	r3, r0, #4
 8006b04:	e7f1      	b.n	8006aea <__exponent+0x60>
	...

08006b08 <_printf_float>:
 8006b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	b091      	sub	sp, #68	; 0x44
 8006b0e:	460c      	mov	r4, r1
 8006b10:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006b14:	4616      	mov	r6, r2
 8006b16:	461f      	mov	r7, r3
 8006b18:	4605      	mov	r5, r0
 8006b1a:	f001 fb41 	bl	80081a0 <_localeconv_r>
 8006b1e:	6803      	ldr	r3, [r0, #0]
 8006b20:	4618      	mov	r0, r3
 8006b22:	9309      	str	r3, [sp, #36]	; 0x24
 8006b24:	f7f9 fb80 	bl	8000228 <strlen>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	930e      	str	r3, [sp, #56]	; 0x38
 8006b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8006b30:	900a      	str	r0, [sp, #40]	; 0x28
 8006b32:	3307      	adds	r3, #7
 8006b34:	f023 0307 	bic.w	r3, r3, #7
 8006b38:	f103 0208 	add.w	r2, r3, #8
 8006b3c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006b40:	f8d4 b000 	ldr.w	fp, [r4]
 8006b44:	f8c8 2000 	str.w	r2, [r8]
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b50:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006b54:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006b58:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5e:	4640      	mov	r0, r8
 8006b60:	4b9c      	ldr	r3, [pc, #624]	; (8006dd4 <_printf_float+0x2cc>)
 8006b62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b64:	f7f9 ffbe 	bl	8000ae4 <__aeabi_dcmpun>
 8006b68:	bb70      	cbnz	r0, 8006bc8 <_printf_float+0xc0>
 8006b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8006b6e:	4640      	mov	r0, r8
 8006b70:	4b98      	ldr	r3, [pc, #608]	; (8006dd4 <_printf_float+0x2cc>)
 8006b72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006b74:	f7f9 ff98 	bl	8000aa8 <__aeabi_dcmple>
 8006b78:	bb30      	cbnz	r0, 8006bc8 <_printf_float+0xc0>
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	4640      	mov	r0, r8
 8006b80:	4651      	mov	r1, sl
 8006b82:	f7f9 ff87 	bl	8000a94 <__aeabi_dcmplt>
 8006b86:	b110      	cbz	r0, 8006b8e <_printf_float+0x86>
 8006b88:	232d      	movs	r3, #45	; 0x2d
 8006b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b8e:	4b92      	ldr	r3, [pc, #584]	; (8006dd8 <_printf_float+0x2d0>)
 8006b90:	4892      	ldr	r0, [pc, #584]	; (8006ddc <_printf_float+0x2d4>)
 8006b92:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006b96:	bf94      	ite	ls
 8006b98:	4698      	movls	r8, r3
 8006b9a:	4680      	movhi	r8, r0
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	f04f 0a00 	mov.w	sl, #0
 8006ba2:	6123      	str	r3, [r4, #16]
 8006ba4:	f02b 0304 	bic.w	r3, fp, #4
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	4633      	mov	r3, r6
 8006bac:	4621      	mov	r1, r4
 8006bae:	4628      	mov	r0, r5
 8006bb0:	9700      	str	r7, [sp, #0]
 8006bb2:	aa0f      	add	r2, sp, #60	; 0x3c
 8006bb4:	f000 f9d4 	bl	8006f60 <_printf_common>
 8006bb8:	3001      	adds	r0, #1
 8006bba:	f040 8090 	bne.w	8006cde <_printf_float+0x1d6>
 8006bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc2:	b011      	add	sp, #68	; 0x44
 8006bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc8:	4642      	mov	r2, r8
 8006bca:	4653      	mov	r3, sl
 8006bcc:	4640      	mov	r0, r8
 8006bce:	4651      	mov	r1, sl
 8006bd0:	f7f9 ff88 	bl	8000ae4 <__aeabi_dcmpun>
 8006bd4:	b148      	cbz	r0, 8006bea <_printf_float+0xe2>
 8006bd6:	f1ba 0f00 	cmp.w	sl, #0
 8006bda:	bfb8      	it	lt
 8006bdc:	232d      	movlt	r3, #45	; 0x2d
 8006bde:	4880      	ldr	r0, [pc, #512]	; (8006de0 <_printf_float+0x2d8>)
 8006be0:	bfb8      	it	lt
 8006be2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006be6:	4b7f      	ldr	r3, [pc, #508]	; (8006de4 <_printf_float+0x2dc>)
 8006be8:	e7d3      	b.n	8006b92 <_printf_float+0x8a>
 8006bea:	6863      	ldr	r3, [r4, #4]
 8006bec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	d142      	bne.n	8006c7a <_printf_float+0x172>
 8006bf4:	2306      	movs	r3, #6
 8006bf6:	6063      	str	r3, [r4, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	9206      	str	r2, [sp, #24]
 8006bfc:	aa0e      	add	r2, sp, #56	; 0x38
 8006bfe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006c02:	aa0d      	add	r2, sp, #52	; 0x34
 8006c04:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006c08:	9203      	str	r2, [sp, #12]
 8006c0a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006c0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006c12:	6023      	str	r3, [r4, #0]
 8006c14:	6863      	ldr	r3, [r4, #4]
 8006c16:	4642      	mov	r2, r8
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	4653      	mov	r3, sl
 8006c1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006c20:	f7ff fed4 	bl	80069cc <__cvt>
 8006c24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c26:	4680      	mov	r8, r0
 8006c28:	2947      	cmp	r1, #71	; 0x47
 8006c2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006c2c:	d108      	bne.n	8006c40 <_printf_float+0x138>
 8006c2e:	1cc8      	adds	r0, r1, #3
 8006c30:	db02      	blt.n	8006c38 <_printf_float+0x130>
 8006c32:	6863      	ldr	r3, [r4, #4]
 8006c34:	4299      	cmp	r1, r3
 8006c36:	dd40      	ble.n	8006cba <_printf_float+0x1b2>
 8006c38:	f1a9 0902 	sub.w	r9, r9, #2
 8006c3c:	fa5f f989 	uxtb.w	r9, r9
 8006c40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006c44:	d81f      	bhi.n	8006c86 <_printf_float+0x17e>
 8006c46:	464a      	mov	r2, r9
 8006c48:	3901      	subs	r1, #1
 8006c4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c4e:	910d      	str	r1, [sp, #52]	; 0x34
 8006c50:	f7ff ff1b 	bl	8006a8a <__exponent>
 8006c54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c56:	4682      	mov	sl, r0
 8006c58:	1813      	adds	r3, r2, r0
 8006c5a:	2a01      	cmp	r2, #1
 8006c5c:	6123      	str	r3, [r4, #16]
 8006c5e:	dc02      	bgt.n	8006c66 <_printf_float+0x15e>
 8006c60:	6822      	ldr	r2, [r4, #0]
 8006c62:	07d2      	lsls	r2, r2, #31
 8006c64:	d501      	bpl.n	8006c6a <_printf_float+0x162>
 8006c66:	3301      	adds	r3, #1
 8006c68:	6123      	str	r3, [r4, #16]
 8006c6a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d09b      	beq.n	8006baa <_printf_float+0xa2>
 8006c72:	232d      	movs	r3, #45	; 0x2d
 8006c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c78:	e797      	b.n	8006baa <_printf_float+0xa2>
 8006c7a:	2947      	cmp	r1, #71	; 0x47
 8006c7c:	d1bc      	bne.n	8006bf8 <_printf_float+0xf0>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1ba      	bne.n	8006bf8 <_printf_float+0xf0>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e7b7      	b.n	8006bf6 <_printf_float+0xee>
 8006c86:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006c8a:	d118      	bne.n	8006cbe <_printf_float+0x1b6>
 8006c8c:	2900      	cmp	r1, #0
 8006c8e:	6863      	ldr	r3, [r4, #4]
 8006c90:	dd0b      	ble.n	8006caa <_printf_float+0x1a2>
 8006c92:	6121      	str	r1, [r4, #16]
 8006c94:	b913      	cbnz	r3, 8006c9c <_printf_float+0x194>
 8006c96:	6822      	ldr	r2, [r4, #0]
 8006c98:	07d0      	lsls	r0, r2, #31
 8006c9a:	d502      	bpl.n	8006ca2 <_printf_float+0x19a>
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	440b      	add	r3, r1
 8006ca0:	6123      	str	r3, [r4, #16]
 8006ca2:	f04f 0a00 	mov.w	sl, #0
 8006ca6:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ca8:	e7df      	b.n	8006c6a <_printf_float+0x162>
 8006caa:	b913      	cbnz	r3, 8006cb2 <_printf_float+0x1aa>
 8006cac:	6822      	ldr	r2, [r4, #0]
 8006cae:	07d2      	lsls	r2, r2, #31
 8006cb0:	d501      	bpl.n	8006cb6 <_printf_float+0x1ae>
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	e7f4      	b.n	8006ca0 <_printf_float+0x198>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e7f2      	b.n	8006ca0 <_printf_float+0x198>
 8006cba:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006cbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	db05      	blt.n	8006cd0 <_printf_float+0x1c8>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	6121      	str	r1, [r4, #16]
 8006cc8:	07d8      	lsls	r0, r3, #31
 8006cca:	d5ea      	bpl.n	8006ca2 <_printf_float+0x19a>
 8006ccc:	1c4b      	adds	r3, r1, #1
 8006cce:	e7e7      	b.n	8006ca0 <_printf_float+0x198>
 8006cd0:	2900      	cmp	r1, #0
 8006cd2:	bfcc      	ite	gt
 8006cd4:	2201      	movgt	r2, #1
 8006cd6:	f1c1 0202 	rsble	r2, r1, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	e7e0      	b.n	8006ca0 <_printf_float+0x198>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	055a      	lsls	r2, r3, #21
 8006ce2:	d407      	bmi.n	8006cf4 <_printf_float+0x1ec>
 8006ce4:	6923      	ldr	r3, [r4, #16]
 8006ce6:	4642      	mov	r2, r8
 8006ce8:	4631      	mov	r1, r6
 8006cea:	4628      	mov	r0, r5
 8006cec:	47b8      	blx	r7
 8006cee:	3001      	adds	r0, #1
 8006cf0:	d12b      	bne.n	8006d4a <_printf_float+0x242>
 8006cf2:	e764      	b.n	8006bbe <_printf_float+0xb6>
 8006cf4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006cf8:	f240 80dd 	bls.w	8006eb6 <_printf_float+0x3ae>
 8006cfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d00:	2200      	movs	r2, #0
 8006d02:	2300      	movs	r3, #0
 8006d04:	f7f9 febc 	bl	8000a80 <__aeabi_dcmpeq>
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	d033      	beq.n	8006d74 <_printf_float+0x26c>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	4631      	mov	r1, r6
 8006d10:	4628      	mov	r0, r5
 8006d12:	4a35      	ldr	r2, [pc, #212]	; (8006de8 <_printf_float+0x2e0>)
 8006d14:	47b8      	blx	r7
 8006d16:	3001      	adds	r0, #1
 8006d18:	f43f af51 	beq.w	8006bbe <_printf_float+0xb6>
 8006d1c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d20:	429a      	cmp	r2, r3
 8006d22:	db02      	blt.n	8006d2a <_printf_float+0x222>
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	07d8      	lsls	r0, r3, #31
 8006d28:	d50f      	bpl.n	8006d4a <_printf_float+0x242>
 8006d2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	47b8      	blx	r7
 8006d34:	3001      	adds	r0, #1
 8006d36:	f43f af42 	beq.w	8006bbe <_printf_float+0xb6>
 8006d3a:	f04f 0800 	mov.w	r8, #0
 8006d3e:	f104 091a 	add.w	r9, r4, #26
 8006d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d44:	3b01      	subs	r3, #1
 8006d46:	4543      	cmp	r3, r8
 8006d48:	dc09      	bgt.n	8006d5e <_printf_float+0x256>
 8006d4a:	6823      	ldr	r3, [r4, #0]
 8006d4c:	079b      	lsls	r3, r3, #30
 8006d4e:	f100 8102 	bmi.w	8006f56 <_printf_float+0x44e>
 8006d52:	68e0      	ldr	r0, [r4, #12]
 8006d54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d56:	4298      	cmp	r0, r3
 8006d58:	bfb8      	it	lt
 8006d5a:	4618      	movlt	r0, r3
 8006d5c:	e731      	b.n	8006bc2 <_printf_float+0xba>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	464a      	mov	r2, r9
 8006d62:	4631      	mov	r1, r6
 8006d64:	4628      	mov	r0, r5
 8006d66:	47b8      	blx	r7
 8006d68:	3001      	adds	r0, #1
 8006d6a:	f43f af28 	beq.w	8006bbe <_printf_float+0xb6>
 8006d6e:	f108 0801 	add.w	r8, r8, #1
 8006d72:	e7e6      	b.n	8006d42 <_printf_float+0x23a>
 8006d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dc38      	bgt.n	8006dec <_printf_float+0x2e4>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4628      	mov	r0, r5
 8006d80:	4a19      	ldr	r2, [pc, #100]	; (8006de8 <_printf_float+0x2e0>)
 8006d82:	47b8      	blx	r7
 8006d84:	3001      	adds	r0, #1
 8006d86:	f43f af1a 	beq.w	8006bbe <_printf_float+0xb6>
 8006d8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	d102      	bne.n	8006d98 <_printf_float+0x290>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	07d9      	lsls	r1, r3, #31
 8006d96:	d5d8      	bpl.n	8006d4a <_printf_float+0x242>
 8006d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006d9c:	4631      	mov	r1, r6
 8006d9e:	4628      	mov	r0, r5
 8006da0:	47b8      	blx	r7
 8006da2:	3001      	adds	r0, #1
 8006da4:	f43f af0b 	beq.w	8006bbe <_printf_float+0xb6>
 8006da8:	f04f 0900 	mov.w	r9, #0
 8006dac:	f104 0a1a 	add.w	sl, r4, #26
 8006db0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006db2:	425b      	negs	r3, r3
 8006db4:	454b      	cmp	r3, r9
 8006db6:	dc01      	bgt.n	8006dbc <_printf_float+0x2b4>
 8006db8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006dba:	e794      	b.n	8006ce6 <_printf_float+0x1de>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	4652      	mov	r2, sl
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	47b8      	blx	r7
 8006dc6:	3001      	adds	r0, #1
 8006dc8:	f43f aef9 	beq.w	8006bbe <_printf_float+0xb6>
 8006dcc:	f109 0901 	add.w	r9, r9, #1
 8006dd0:	e7ee      	b.n	8006db0 <_printf_float+0x2a8>
 8006dd2:	bf00      	nop
 8006dd4:	7fefffff 	.word	0x7fefffff
 8006dd8:	08011cf0 	.word	0x08011cf0
 8006ddc:	08011cf4 	.word	0x08011cf4
 8006de0:	08011cfc 	.word	0x08011cfc
 8006de4:	08011cf8 	.word	0x08011cf8
 8006de8:	08011d00 	.word	0x08011d00
 8006dec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006df0:	429a      	cmp	r2, r3
 8006df2:	bfa8      	it	ge
 8006df4:	461a      	movge	r2, r3
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	4691      	mov	r9, r2
 8006dfa:	dc37      	bgt.n	8006e6c <_printf_float+0x364>
 8006dfc:	f04f 0b00 	mov.w	fp, #0
 8006e00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e04:	f104 021a 	add.w	r2, r4, #26
 8006e08:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006e0c:	ebaa 0309 	sub.w	r3, sl, r9
 8006e10:	455b      	cmp	r3, fp
 8006e12:	dc33      	bgt.n	8006e7c <_printf_float+0x374>
 8006e14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	db3b      	blt.n	8006e94 <_printf_float+0x38c>
 8006e1c:	6823      	ldr	r3, [r4, #0]
 8006e1e:	07da      	lsls	r2, r3, #31
 8006e20:	d438      	bmi.n	8006e94 <_printf_float+0x38c>
 8006e22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e24:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006e26:	eba2 030a 	sub.w	r3, r2, sl
 8006e2a:	eba2 0901 	sub.w	r9, r2, r1
 8006e2e:	4599      	cmp	r9, r3
 8006e30:	bfa8      	it	ge
 8006e32:	4699      	movge	r9, r3
 8006e34:	f1b9 0f00 	cmp.w	r9, #0
 8006e38:	dc34      	bgt.n	8006ea4 <_printf_float+0x39c>
 8006e3a:	f04f 0800 	mov.w	r8, #0
 8006e3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e42:	f104 0a1a 	add.w	sl, r4, #26
 8006e46:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006e4a:	1a9b      	subs	r3, r3, r2
 8006e4c:	eba3 0309 	sub.w	r3, r3, r9
 8006e50:	4543      	cmp	r3, r8
 8006e52:	f77f af7a 	ble.w	8006d4a <_printf_float+0x242>
 8006e56:	2301      	movs	r3, #1
 8006e58:	4652      	mov	r2, sl
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	47b8      	blx	r7
 8006e60:	3001      	adds	r0, #1
 8006e62:	f43f aeac 	beq.w	8006bbe <_printf_float+0xb6>
 8006e66:	f108 0801 	add.w	r8, r8, #1
 8006e6a:	e7ec      	b.n	8006e46 <_printf_float+0x33e>
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4642      	mov	r2, r8
 8006e72:	4628      	mov	r0, r5
 8006e74:	47b8      	blx	r7
 8006e76:	3001      	adds	r0, #1
 8006e78:	d1c0      	bne.n	8006dfc <_printf_float+0x2f4>
 8006e7a:	e6a0      	b.n	8006bbe <_printf_float+0xb6>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	4631      	mov	r1, r6
 8006e80:	4628      	mov	r0, r5
 8006e82:	920b      	str	r2, [sp, #44]	; 0x2c
 8006e84:	47b8      	blx	r7
 8006e86:	3001      	adds	r0, #1
 8006e88:	f43f ae99 	beq.w	8006bbe <_printf_float+0xb6>
 8006e8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006e8e:	f10b 0b01 	add.w	fp, fp, #1
 8006e92:	e7b9      	b.n	8006e08 <_printf_float+0x300>
 8006e94:	4631      	mov	r1, r6
 8006e96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	47b8      	blx	r7
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d1bf      	bne.n	8006e22 <_printf_float+0x31a>
 8006ea2:	e68c      	b.n	8006bbe <_printf_float+0xb6>
 8006ea4:	464b      	mov	r3, r9
 8006ea6:	4631      	mov	r1, r6
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	eb08 020a 	add.w	r2, r8, sl
 8006eae:	47b8      	blx	r7
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d1c2      	bne.n	8006e3a <_printf_float+0x332>
 8006eb4:	e683      	b.n	8006bbe <_printf_float+0xb6>
 8006eb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006eb8:	2a01      	cmp	r2, #1
 8006eba:	dc01      	bgt.n	8006ec0 <_printf_float+0x3b8>
 8006ebc:	07db      	lsls	r3, r3, #31
 8006ebe:	d537      	bpl.n	8006f30 <_printf_float+0x428>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	4642      	mov	r2, r8
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	47b8      	blx	r7
 8006eca:	3001      	adds	r0, #1
 8006ecc:	f43f ae77 	beq.w	8006bbe <_printf_float+0xb6>
 8006ed0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	47b8      	blx	r7
 8006eda:	3001      	adds	r0, #1
 8006edc:	f43f ae6f 	beq.w	8006bbe <_printf_float+0xb6>
 8006ee0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f7f9 fdca 	bl	8000a80 <__aeabi_dcmpeq>
 8006eec:	b9d8      	cbnz	r0, 8006f26 <_printf_float+0x41e>
 8006eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ef0:	f108 0201 	add.w	r2, r8, #1
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	4628      	mov	r0, r5
 8006efa:	47b8      	blx	r7
 8006efc:	3001      	adds	r0, #1
 8006efe:	d10e      	bne.n	8006f1e <_printf_float+0x416>
 8006f00:	e65d      	b.n	8006bbe <_printf_float+0xb6>
 8006f02:	2301      	movs	r3, #1
 8006f04:	464a      	mov	r2, r9
 8006f06:	4631      	mov	r1, r6
 8006f08:	4628      	mov	r0, r5
 8006f0a:	47b8      	blx	r7
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	f43f ae56 	beq.w	8006bbe <_printf_float+0xb6>
 8006f12:	f108 0801 	add.w	r8, r8, #1
 8006f16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	4543      	cmp	r3, r8
 8006f1c:	dcf1      	bgt.n	8006f02 <_printf_float+0x3fa>
 8006f1e:	4653      	mov	r3, sl
 8006f20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006f24:	e6e0      	b.n	8006ce8 <_printf_float+0x1e0>
 8006f26:	f04f 0800 	mov.w	r8, #0
 8006f2a:	f104 091a 	add.w	r9, r4, #26
 8006f2e:	e7f2      	b.n	8006f16 <_printf_float+0x40e>
 8006f30:	2301      	movs	r3, #1
 8006f32:	4642      	mov	r2, r8
 8006f34:	e7df      	b.n	8006ef6 <_printf_float+0x3ee>
 8006f36:	2301      	movs	r3, #1
 8006f38:	464a      	mov	r2, r9
 8006f3a:	4631      	mov	r1, r6
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	47b8      	blx	r7
 8006f40:	3001      	adds	r0, #1
 8006f42:	f43f ae3c 	beq.w	8006bbe <_printf_float+0xb6>
 8006f46:	f108 0801 	add.w	r8, r8, #1
 8006f4a:	68e3      	ldr	r3, [r4, #12]
 8006f4c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006f4e:	1a5b      	subs	r3, r3, r1
 8006f50:	4543      	cmp	r3, r8
 8006f52:	dcf0      	bgt.n	8006f36 <_printf_float+0x42e>
 8006f54:	e6fd      	b.n	8006d52 <_printf_float+0x24a>
 8006f56:	f04f 0800 	mov.w	r8, #0
 8006f5a:	f104 0919 	add.w	r9, r4, #25
 8006f5e:	e7f4      	b.n	8006f4a <_printf_float+0x442>

08006f60 <_printf_common>:
 8006f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f64:	4616      	mov	r6, r2
 8006f66:	4699      	mov	r9, r3
 8006f68:	688a      	ldr	r2, [r1, #8]
 8006f6a:	690b      	ldr	r3, [r1, #16]
 8006f6c:	4607      	mov	r7, r0
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	bfb8      	it	lt
 8006f72:	4613      	movlt	r3, r2
 8006f74:	6033      	str	r3, [r6, #0]
 8006f76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f7a:	460c      	mov	r4, r1
 8006f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f80:	b10a      	cbz	r2, 8006f86 <_printf_common+0x26>
 8006f82:	3301      	adds	r3, #1
 8006f84:	6033      	str	r3, [r6, #0]
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	0699      	lsls	r1, r3, #26
 8006f8a:	bf42      	ittt	mi
 8006f8c:	6833      	ldrmi	r3, [r6, #0]
 8006f8e:	3302      	addmi	r3, #2
 8006f90:	6033      	strmi	r3, [r6, #0]
 8006f92:	6825      	ldr	r5, [r4, #0]
 8006f94:	f015 0506 	ands.w	r5, r5, #6
 8006f98:	d106      	bne.n	8006fa8 <_printf_common+0x48>
 8006f9a:	f104 0a19 	add.w	sl, r4, #25
 8006f9e:	68e3      	ldr	r3, [r4, #12]
 8006fa0:	6832      	ldr	r2, [r6, #0]
 8006fa2:	1a9b      	subs	r3, r3, r2
 8006fa4:	42ab      	cmp	r3, r5
 8006fa6:	dc28      	bgt.n	8006ffa <_printf_common+0x9a>
 8006fa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fac:	1e13      	subs	r3, r2, #0
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	bf18      	it	ne
 8006fb2:	2301      	movne	r3, #1
 8006fb4:	0692      	lsls	r2, r2, #26
 8006fb6:	d42d      	bmi.n	8007014 <_printf_common+0xb4>
 8006fb8:	4649      	mov	r1, r9
 8006fba:	4638      	mov	r0, r7
 8006fbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fc0:	47c0      	blx	r8
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	d020      	beq.n	8007008 <_printf_common+0xa8>
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	68e5      	ldr	r5, [r4, #12]
 8006fca:	f003 0306 	and.w	r3, r3, #6
 8006fce:	2b04      	cmp	r3, #4
 8006fd0:	bf18      	it	ne
 8006fd2:	2500      	movne	r5, #0
 8006fd4:	6832      	ldr	r2, [r6, #0]
 8006fd6:	f04f 0600 	mov.w	r6, #0
 8006fda:	68a3      	ldr	r3, [r4, #8]
 8006fdc:	bf08      	it	eq
 8006fde:	1aad      	subeq	r5, r5, r2
 8006fe0:	6922      	ldr	r2, [r4, #16]
 8006fe2:	bf08      	it	eq
 8006fe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	bfc4      	itt	gt
 8006fec:	1a9b      	subgt	r3, r3, r2
 8006fee:	18ed      	addgt	r5, r5, r3
 8006ff0:	341a      	adds	r4, #26
 8006ff2:	42b5      	cmp	r5, r6
 8006ff4:	d11a      	bne.n	800702c <_printf_common+0xcc>
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	e008      	b.n	800700c <_printf_common+0xac>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	4652      	mov	r2, sl
 8006ffe:	4649      	mov	r1, r9
 8007000:	4638      	mov	r0, r7
 8007002:	47c0      	blx	r8
 8007004:	3001      	adds	r0, #1
 8007006:	d103      	bne.n	8007010 <_printf_common+0xb0>
 8007008:	f04f 30ff 	mov.w	r0, #4294967295
 800700c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007010:	3501      	adds	r5, #1
 8007012:	e7c4      	b.n	8006f9e <_printf_common+0x3e>
 8007014:	2030      	movs	r0, #48	; 0x30
 8007016:	18e1      	adds	r1, r4, r3
 8007018:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007022:	4422      	add	r2, r4
 8007024:	3302      	adds	r3, #2
 8007026:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800702a:	e7c5      	b.n	8006fb8 <_printf_common+0x58>
 800702c:	2301      	movs	r3, #1
 800702e:	4622      	mov	r2, r4
 8007030:	4649      	mov	r1, r9
 8007032:	4638      	mov	r0, r7
 8007034:	47c0      	blx	r8
 8007036:	3001      	adds	r0, #1
 8007038:	d0e6      	beq.n	8007008 <_printf_common+0xa8>
 800703a:	3601      	adds	r6, #1
 800703c:	e7d9      	b.n	8006ff2 <_printf_common+0x92>
	...

08007040 <_printf_i>:
 8007040:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007044:	460c      	mov	r4, r1
 8007046:	7e27      	ldrb	r7, [r4, #24]
 8007048:	4691      	mov	r9, r2
 800704a:	2f78      	cmp	r7, #120	; 0x78
 800704c:	4680      	mov	r8, r0
 800704e:	469a      	mov	sl, r3
 8007050:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007052:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007056:	d807      	bhi.n	8007068 <_printf_i+0x28>
 8007058:	2f62      	cmp	r7, #98	; 0x62
 800705a:	d80a      	bhi.n	8007072 <_printf_i+0x32>
 800705c:	2f00      	cmp	r7, #0
 800705e:	f000 80d9 	beq.w	8007214 <_printf_i+0x1d4>
 8007062:	2f58      	cmp	r7, #88	; 0x58
 8007064:	f000 80a4 	beq.w	80071b0 <_printf_i+0x170>
 8007068:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800706c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007070:	e03a      	b.n	80070e8 <_printf_i+0xa8>
 8007072:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007076:	2b15      	cmp	r3, #21
 8007078:	d8f6      	bhi.n	8007068 <_printf_i+0x28>
 800707a:	a001      	add	r0, pc, #4	; (adr r0, 8007080 <_printf_i+0x40>)
 800707c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007080:	080070d9 	.word	0x080070d9
 8007084:	080070ed 	.word	0x080070ed
 8007088:	08007069 	.word	0x08007069
 800708c:	08007069 	.word	0x08007069
 8007090:	08007069 	.word	0x08007069
 8007094:	08007069 	.word	0x08007069
 8007098:	080070ed 	.word	0x080070ed
 800709c:	08007069 	.word	0x08007069
 80070a0:	08007069 	.word	0x08007069
 80070a4:	08007069 	.word	0x08007069
 80070a8:	08007069 	.word	0x08007069
 80070ac:	080071fb 	.word	0x080071fb
 80070b0:	0800711d 	.word	0x0800711d
 80070b4:	080071dd 	.word	0x080071dd
 80070b8:	08007069 	.word	0x08007069
 80070bc:	08007069 	.word	0x08007069
 80070c0:	0800721d 	.word	0x0800721d
 80070c4:	08007069 	.word	0x08007069
 80070c8:	0800711d 	.word	0x0800711d
 80070cc:	08007069 	.word	0x08007069
 80070d0:	08007069 	.word	0x08007069
 80070d4:	080071e5 	.word	0x080071e5
 80070d8:	680b      	ldr	r3, [r1, #0]
 80070da:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80070de:	1d1a      	adds	r2, r3, #4
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	600a      	str	r2, [r1, #0]
 80070e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070e8:	2301      	movs	r3, #1
 80070ea:	e0a4      	b.n	8007236 <_printf_i+0x1f6>
 80070ec:	6825      	ldr	r5, [r4, #0]
 80070ee:	6808      	ldr	r0, [r1, #0]
 80070f0:	062e      	lsls	r6, r5, #24
 80070f2:	f100 0304 	add.w	r3, r0, #4
 80070f6:	d50a      	bpl.n	800710e <_printf_i+0xce>
 80070f8:	6805      	ldr	r5, [r0, #0]
 80070fa:	600b      	str	r3, [r1, #0]
 80070fc:	2d00      	cmp	r5, #0
 80070fe:	da03      	bge.n	8007108 <_printf_i+0xc8>
 8007100:	232d      	movs	r3, #45	; 0x2d
 8007102:	426d      	negs	r5, r5
 8007104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007108:	230a      	movs	r3, #10
 800710a:	485e      	ldr	r0, [pc, #376]	; (8007284 <_printf_i+0x244>)
 800710c:	e019      	b.n	8007142 <_printf_i+0x102>
 800710e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007112:	6805      	ldr	r5, [r0, #0]
 8007114:	600b      	str	r3, [r1, #0]
 8007116:	bf18      	it	ne
 8007118:	b22d      	sxthne	r5, r5
 800711a:	e7ef      	b.n	80070fc <_printf_i+0xbc>
 800711c:	680b      	ldr	r3, [r1, #0]
 800711e:	6825      	ldr	r5, [r4, #0]
 8007120:	1d18      	adds	r0, r3, #4
 8007122:	6008      	str	r0, [r1, #0]
 8007124:	0628      	lsls	r0, r5, #24
 8007126:	d501      	bpl.n	800712c <_printf_i+0xec>
 8007128:	681d      	ldr	r5, [r3, #0]
 800712a:	e002      	b.n	8007132 <_printf_i+0xf2>
 800712c:	0669      	lsls	r1, r5, #25
 800712e:	d5fb      	bpl.n	8007128 <_printf_i+0xe8>
 8007130:	881d      	ldrh	r5, [r3, #0]
 8007132:	2f6f      	cmp	r7, #111	; 0x6f
 8007134:	bf0c      	ite	eq
 8007136:	2308      	moveq	r3, #8
 8007138:	230a      	movne	r3, #10
 800713a:	4852      	ldr	r0, [pc, #328]	; (8007284 <_printf_i+0x244>)
 800713c:	2100      	movs	r1, #0
 800713e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007142:	6866      	ldr	r6, [r4, #4]
 8007144:	2e00      	cmp	r6, #0
 8007146:	bfa8      	it	ge
 8007148:	6821      	ldrge	r1, [r4, #0]
 800714a:	60a6      	str	r6, [r4, #8]
 800714c:	bfa4      	itt	ge
 800714e:	f021 0104 	bicge.w	r1, r1, #4
 8007152:	6021      	strge	r1, [r4, #0]
 8007154:	b90d      	cbnz	r5, 800715a <_printf_i+0x11a>
 8007156:	2e00      	cmp	r6, #0
 8007158:	d04d      	beq.n	80071f6 <_printf_i+0x1b6>
 800715a:	4616      	mov	r6, r2
 800715c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007160:	fb03 5711 	mls	r7, r3, r1, r5
 8007164:	5dc7      	ldrb	r7, [r0, r7]
 8007166:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800716a:	462f      	mov	r7, r5
 800716c:	42bb      	cmp	r3, r7
 800716e:	460d      	mov	r5, r1
 8007170:	d9f4      	bls.n	800715c <_printf_i+0x11c>
 8007172:	2b08      	cmp	r3, #8
 8007174:	d10b      	bne.n	800718e <_printf_i+0x14e>
 8007176:	6823      	ldr	r3, [r4, #0]
 8007178:	07df      	lsls	r7, r3, #31
 800717a:	d508      	bpl.n	800718e <_printf_i+0x14e>
 800717c:	6923      	ldr	r3, [r4, #16]
 800717e:	6861      	ldr	r1, [r4, #4]
 8007180:	4299      	cmp	r1, r3
 8007182:	bfde      	ittt	le
 8007184:	2330      	movle	r3, #48	; 0x30
 8007186:	f806 3c01 	strble.w	r3, [r6, #-1]
 800718a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800718e:	1b92      	subs	r2, r2, r6
 8007190:	6122      	str	r2, [r4, #16]
 8007192:	464b      	mov	r3, r9
 8007194:	4621      	mov	r1, r4
 8007196:	4640      	mov	r0, r8
 8007198:	f8cd a000 	str.w	sl, [sp]
 800719c:	aa03      	add	r2, sp, #12
 800719e:	f7ff fedf 	bl	8006f60 <_printf_common>
 80071a2:	3001      	adds	r0, #1
 80071a4:	d14c      	bne.n	8007240 <_printf_i+0x200>
 80071a6:	f04f 30ff 	mov.w	r0, #4294967295
 80071aa:	b004      	add	sp, #16
 80071ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b0:	4834      	ldr	r0, [pc, #208]	; (8007284 <_printf_i+0x244>)
 80071b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071b6:	680e      	ldr	r6, [r1, #0]
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80071be:	061f      	lsls	r7, r3, #24
 80071c0:	600e      	str	r6, [r1, #0]
 80071c2:	d514      	bpl.n	80071ee <_printf_i+0x1ae>
 80071c4:	07d9      	lsls	r1, r3, #31
 80071c6:	bf44      	itt	mi
 80071c8:	f043 0320 	orrmi.w	r3, r3, #32
 80071cc:	6023      	strmi	r3, [r4, #0]
 80071ce:	b91d      	cbnz	r5, 80071d8 <_printf_i+0x198>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	f023 0320 	bic.w	r3, r3, #32
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	2310      	movs	r3, #16
 80071da:	e7af      	b.n	800713c <_printf_i+0xfc>
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	f043 0320 	orr.w	r3, r3, #32
 80071e2:	6023      	str	r3, [r4, #0]
 80071e4:	2378      	movs	r3, #120	; 0x78
 80071e6:	4828      	ldr	r0, [pc, #160]	; (8007288 <_printf_i+0x248>)
 80071e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071ec:	e7e3      	b.n	80071b6 <_printf_i+0x176>
 80071ee:	065e      	lsls	r6, r3, #25
 80071f0:	bf48      	it	mi
 80071f2:	b2ad      	uxthmi	r5, r5
 80071f4:	e7e6      	b.n	80071c4 <_printf_i+0x184>
 80071f6:	4616      	mov	r6, r2
 80071f8:	e7bb      	b.n	8007172 <_printf_i+0x132>
 80071fa:	680b      	ldr	r3, [r1, #0]
 80071fc:	6826      	ldr	r6, [r4, #0]
 80071fe:	1d1d      	adds	r5, r3, #4
 8007200:	6960      	ldr	r0, [r4, #20]
 8007202:	600d      	str	r5, [r1, #0]
 8007204:	0635      	lsls	r5, r6, #24
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	d501      	bpl.n	800720e <_printf_i+0x1ce>
 800720a:	6018      	str	r0, [r3, #0]
 800720c:	e002      	b.n	8007214 <_printf_i+0x1d4>
 800720e:	0671      	lsls	r1, r6, #25
 8007210:	d5fb      	bpl.n	800720a <_printf_i+0x1ca>
 8007212:	8018      	strh	r0, [r3, #0]
 8007214:	2300      	movs	r3, #0
 8007216:	4616      	mov	r6, r2
 8007218:	6123      	str	r3, [r4, #16]
 800721a:	e7ba      	b.n	8007192 <_printf_i+0x152>
 800721c:	680b      	ldr	r3, [r1, #0]
 800721e:	1d1a      	adds	r2, r3, #4
 8007220:	600a      	str	r2, [r1, #0]
 8007222:	681e      	ldr	r6, [r3, #0]
 8007224:	2100      	movs	r1, #0
 8007226:	4630      	mov	r0, r6
 8007228:	6862      	ldr	r2, [r4, #4]
 800722a:	f000 ffc9 	bl	80081c0 <memchr>
 800722e:	b108      	cbz	r0, 8007234 <_printf_i+0x1f4>
 8007230:	1b80      	subs	r0, r0, r6
 8007232:	6060      	str	r0, [r4, #4]
 8007234:	6863      	ldr	r3, [r4, #4]
 8007236:	6123      	str	r3, [r4, #16]
 8007238:	2300      	movs	r3, #0
 800723a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800723e:	e7a8      	b.n	8007192 <_printf_i+0x152>
 8007240:	4632      	mov	r2, r6
 8007242:	4649      	mov	r1, r9
 8007244:	4640      	mov	r0, r8
 8007246:	6923      	ldr	r3, [r4, #16]
 8007248:	47d0      	blx	sl
 800724a:	3001      	adds	r0, #1
 800724c:	d0ab      	beq.n	80071a6 <_printf_i+0x166>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	079b      	lsls	r3, r3, #30
 8007252:	d413      	bmi.n	800727c <_printf_i+0x23c>
 8007254:	68e0      	ldr	r0, [r4, #12]
 8007256:	9b03      	ldr	r3, [sp, #12]
 8007258:	4298      	cmp	r0, r3
 800725a:	bfb8      	it	lt
 800725c:	4618      	movlt	r0, r3
 800725e:	e7a4      	b.n	80071aa <_printf_i+0x16a>
 8007260:	2301      	movs	r3, #1
 8007262:	4632      	mov	r2, r6
 8007264:	4649      	mov	r1, r9
 8007266:	4640      	mov	r0, r8
 8007268:	47d0      	blx	sl
 800726a:	3001      	adds	r0, #1
 800726c:	d09b      	beq.n	80071a6 <_printf_i+0x166>
 800726e:	3501      	adds	r5, #1
 8007270:	68e3      	ldr	r3, [r4, #12]
 8007272:	9903      	ldr	r1, [sp, #12]
 8007274:	1a5b      	subs	r3, r3, r1
 8007276:	42ab      	cmp	r3, r5
 8007278:	dcf2      	bgt.n	8007260 <_printf_i+0x220>
 800727a:	e7eb      	b.n	8007254 <_printf_i+0x214>
 800727c:	2500      	movs	r5, #0
 800727e:	f104 0619 	add.w	r6, r4, #25
 8007282:	e7f5      	b.n	8007270 <_printf_i+0x230>
 8007284:	08011d02 	.word	0x08011d02
 8007288:	08011d13 	.word	0x08011d13

0800728c <iprintf>:
 800728c:	b40f      	push	{r0, r1, r2, r3}
 800728e:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <iprintf+0x2c>)
 8007290:	b513      	push	{r0, r1, r4, lr}
 8007292:	681c      	ldr	r4, [r3, #0]
 8007294:	b124      	cbz	r4, 80072a0 <iprintf+0x14>
 8007296:	69a3      	ldr	r3, [r4, #24]
 8007298:	b913      	cbnz	r3, 80072a0 <iprintf+0x14>
 800729a:	4620      	mov	r0, r4
 800729c:	f000 fee2 	bl	8008064 <__sinit>
 80072a0:	ab05      	add	r3, sp, #20
 80072a2:	4620      	mov	r0, r4
 80072a4:	9a04      	ldr	r2, [sp, #16]
 80072a6:	68a1      	ldr	r1, [r4, #8]
 80072a8:	9301      	str	r3, [sp, #4]
 80072aa:	f001 fc03 	bl	8008ab4 <_vfiprintf_r>
 80072ae:	b002      	add	sp, #8
 80072b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072b4:	b004      	add	sp, #16
 80072b6:	4770      	bx	lr
 80072b8:	20000010 	.word	0x20000010

080072bc <quorem>:
 80072bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c0:	6903      	ldr	r3, [r0, #16]
 80072c2:	690c      	ldr	r4, [r1, #16]
 80072c4:	4607      	mov	r7, r0
 80072c6:	42a3      	cmp	r3, r4
 80072c8:	f2c0 8083 	blt.w	80073d2 <quorem+0x116>
 80072cc:	3c01      	subs	r4, #1
 80072ce:	f100 0514 	add.w	r5, r0, #20
 80072d2:	f101 0814 	add.w	r8, r1, #20
 80072d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072da:	9301      	str	r3, [sp, #4]
 80072dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072e4:	3301      	adds	r3, #1
 80072e6:	429a      	cmp	r2, r3
 80072e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80072ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80072f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072f4:	d332      	bcc.n	800735c <quorem+0xa0>
 80072f6:	f04f 0e00 	mov.w	lr, #0
 80072fa:	4640      	mov	r0, r8
 80072fc:	46ac      	mov	ip, r5
 80072fe:	46f2      	mov	sl, lr
 8007300:	f850 2b04 	ldr.w	r2, [r0], #4
 8007304:	b293      	uxth	r3, r2
 8007306:	fb06 e303 	mla	r3, r6, r3, lr
 800730a:	0c12      	lsrs	r2, r2, #16
 800730c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007310:	fb06 e202 	mla	r2, r6, r2, lr
 8007314:	b29b      	uxth	r3, r3
 8007316:	ebaa 0303 	sub.w	r3, sl, r3
 800731a:	f8dc a000 	ldr.w	sl, [ip]
 800731e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007322:	fa1f fa8a 	uxth.w	sl, sl
 8007326:	4453      	add	r3, sl
 8007328:	fa1f fa82 	uxth.w	sl, r2
 800732c:	f8dc 2000 	ldr.w	r2, [ip]
 8007330:	4581      	cmp	r9, r0
 8007332:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007336:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800733a:	b29b      	uxth	r3, r3
 800733c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007340:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007344:	f84c 3b04 	str.w	r3, [ip], #4
 8007348:	d2da      	bcs.n	8007300 <quorem+0x44>
 800734a:	f855 300b 	ldr.w	r3, [r5, fp]
 800734e:	b92b      	cbnz	r3, 800735c <quorem+0xa0>
 8007350:	9b01      	ldr	r3, [sp, #4]
 8007352:	3b04      	subs	r3, #4
 8007354:	429d      	cmp	r5, r3
 8007356:	461a      	mov	r2, r3
 8007358:	d32f      	bcc.n	80073ba <quorem+0xfe>
 800735a:	613c      	str	r4, [r7, #16]
 800735c:	4638      	mov	r0, r7
 800735e:	f001 f9c5 	bl	80086ec <__mcmp>
 8007362:	2800      	cmp	r0, #0
 8007364:	db25      	blt.n	80073b2 <quorem+0xf6>
 8007366:	4628      	mov	r0, r5
 8007368:	f04f 0c00 	mov.w	ip, #0
 800736c:	3601      	adds	r6, #1
 800736e:	f858 1b04 	ldr.w	r1, [r8], #4
 8007372:	f8d0 e000 	ldr.w	lr, [r0]
 8007376:	b28b      	uxth	r3, r1
 8007378:	ebac 0303 	sub.w	r3, ip, r3
 800737c:	fa1f f28e 	uxth.w	r2, lr
 8007380:	4413      	add	r3, r2
 8007382:	0c0a      	lsrs	r2, r1, #16
 8007384:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007388:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800738c:	b29b      	uxth	r3, r3
 800738e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007392:	45c1      	cmp	r9, r8
 8007394:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007398:	f840 3b04 	str.w	r3, [r0], #4
 800739c:	d2e7      	bcs.n	800736e <quorem+0xb2>
 800739e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073a6:	b922      	cbnz	r2, 80073b2 <quorem+0xf6>
 80073a8:	3b04      	subs	r3, #4
 80073aa:	429d      	cmp	r5, r3
 80073ac:	461a      	mov	r2, r3
 80073ae:	d30a      	bcc.n	80073c6 <quorem+0x10a>
 80073b0:	613c      	str	r4, [r7, #16]
 80073b2:	4630      	mov	r0, r6
 80073b4:	b003      	add	sp, #12
 80073b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ba:	6812      	ldr	r2, [r2, #0]
 80073bc:	3b04      	subs	r3, #4
 80073be:	2a00      	cmp	r2, #0
 80073c0:	d1cb      	bne.n	800735a <quorem+0x9e>
 80073c2:	3c01      	subs	r4, #1
 80073c4:	e7c6      	b.n	8007354 <quorem+0x98>
 80073c6:	6812      	ldr	r2, [r2, #0]
 80073c8:	3b04      	subs	r3, #4
 80073ca:	2a00      	cmp	r2, #0
 80073cc:	d1f0      	bne.n	80073b0 <quorem+0xf4>
 80073ce:	3c01      	subs	r4, #1
 80073d0:	e7eb      	b.n	80073aa <quorem+0xee>
 80073d2:	2000      	movs	r0, #0
 80073d4:	e7ee      	b.n	80073b4 <quorem+0xf8>
	...

080073d8 <_dtoa_r>:
 80073d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	4616      	mov	r6, r2
 80073de:	461f      	mov	r7, r3
 80073e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80073e2:	b099      	sub	sp, #100	; 0x64
 80073e4:	4605      	mov	r5, r0
 80073e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80073ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80073ee:	b974      	cbnz	r4, 800740e <_dtoa_r+0x36>
 80073f0:	2010      	movs	r0, #16
 80073f2:	f000 fedd 	bl	80081b0 <malloc>
 80073f6:	4602      	mov	r2, r0
 80073f8:	6268      	str	r0, [r5, #36]	; 0x24
 80073fa:	b920      	cbnz	r0, 8007406 <_dtoa_r+0x2e>
 80073fc:	21ea      	movs	r1, #234	; 0xea
 80073fe:	4bae      	ldr	r3, [pc, #696]	; (80076b8 <_dtoa_r+0x2e0>)
 8007400:	48ae      	ldr	r0, [pc, #696]	; (80076bc <_dtoa_r+0x2e4>)
 8007402:	f001 fdad 	bl	8008f60 <__assert_func>
 8007406:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800740a:	6004      	str	r4, [r0, #0]
 800740c:	60c4      	str	r4, [r0, #12]
 800740e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007410:	6819      	ldr	r1, [r3, #0]
 8007412:	b151      	cbz	r1, 800742a <_dtoa_r+0x52>
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	2301      	movs	r3, #1
 8007418:	4093      	lsls	r3, r2
 800741a:	604a      	str	r2, [r1, #4]
 800741c:	608b      	str	r3, [r1, #8]
 800741e:	4628      	mov	r0, r5
 8007420:	f000 ff2a 	bl	8008278 <_Bfree>
 8007424:	2200      	movs	r2, #0
 8007426:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	1e3b      	subs	r3, r7, #0
 800742c:	bfaf      	iteee	ge
 800742e:	2300      	movge	r3, #0
 8007430:	2201      	movlt	r2, #1
 8007432:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007436:	9305      	strlt	r3, [sp, #20]
 8007438:	bfa8      	it	ge
 800743a:	f8c8 3000 	strge.w	r3, [r8]
 800743e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007442:	4b9f      	ldr	r3, [pc, #636]	; (80076c0 <_dtoa_r+0x2e8>)
 8007444:	bfb8      	it	lt
 8007446:	f8c8 2000 	strlt.w	r2, [r8]
 800744a:	ea33 0309 	bics.w	r3, r3, r9
 800744e:	d119      	bne.n	8007484 <_dtoa_r+0xac>
 8007450:	f242 730f 	movw	r3, #9999	; 0x270f
 8007454:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800745c:	4333      	orrs	r3, r6
 800745e:	f000 8580 	beq.w	8007f62 <_dtoa_r+0xb8a>
 8007462:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007464:	b953      	cbnz	r3, 800747c <_dtoa_r+0xa4>
 8007466:	4b97      	ldr	r3, [pc, #604]	; (80076c4 <_dtoa_r+0x2ec>)
 8007468:	e022      	b.n	80074b0 <_dtoa_r+0xd8>
 800746a:	4b97      	ldr	r3, [pc, #604]	; (80076c8 <_dtoa_r+0x2f0>)
 800746c:	9308      	str	r3, [sp, #32]
 800746e:	3308      	adds	r3, #8
 8007470:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007472:	6013      	str	r3, [r2, #0]
 8007474:	9808      	ldr	r0, [sp, #32]
 8007476:	b019      	add	sp, #100	; 0x64
 8007478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800747c:	4b91      	ldr	r3, [pc, #580]	; (80076c4 <_dtoa_r+0x2ec>)
 800747e:	9308      	str	r3, [sp, #32]
 8007480:	3303      	adds	r3, #3
 8007482:	e7f5      	b.n	8007470 <_dtoa_r+0x98>
 8007484:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007488:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800748c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007490:	2200      	movs	r2, #0
 8007492:	2300      	movs	r3, #0
 8007494:	f7f9 faf4 	bl	8000a80 <__aeabi_dcmpeq>
 8007498:	4680      	mov	r8, r0
 800749a:	b158      	cbz	r0, 80074b4 <_dtoa_r+0xdc>
 800749c:	2301      	movs	r3, #1
 800749e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 8559 	beq.w	8007f5c <_dtoa_r+0xb84>
 80074aa:	4888      	ldr	r0, [pc, #544]	; (80076cc <_dtoa_r+0x2f4>)
 80074ac:	6018      	str	r0, [r3, #0]
 80074ae:	1e43      	subs	r3, r0, #1
 80074b0:	9308      	str	r3, [sp, #32]
 80074b2:	e7df      	b.n	8007474 <_dtoa_r+0x9c>
 80074b4:	ab16      	add	r3, sp, #88	; 0x58
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	ab17      	add	r3, sp, #92	; 0x5c
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	4628      	mov	r0, r5
 80074be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80074c2:	f001 f9bf 	bl	8008844 <__d2b>
 80074c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80074ca:	4682      	mov	sl, r0
 80074cc:	2c00      	cmp	r4, #0
 80074ce:	d07e      	beq.n	80075ce <_dtoa_r+0x1f6>
 80074d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80074da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80074e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80074e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80074ea:	2200      	movs	r2, #0
 80074ec:	4b78      	ldr	r3, [pc, #480]	; (80076d0 <_dtoa_r+0x2f8>)
 80074ee:	f7f8 fea7 	bl	8000240 <__aeabi_dsub>
 80074f2:	a36b      	add	r3, pc, #428	; (adr r3, 80076a0 <_dtoa_r+0x2c8>)
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	f7f9 f85a 	bl	80005b0 <__aeabi_dmul>
 80074fc:	a36a      	add	r3, pc, #424	; (adr r3, 80076a8 <_dtoa_r+0x2d0>)
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	f7f8 fe9f 	bl	8000244 <__adddf3>
 8007506:	4606      	mov	r6, r0
 8007508:	4620      	mov	r0, r4
 800750a:	460f      	mov	r7, r1
 800750c:	f7f8 ffe6 	bl	80004dc <__aeabi_i2d>
 8007510:	a367      	add	r3, pc, #412	; (adr r3, 80076b0 <_dtoa_r+0x2d8>)
 8007512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007516:	f7f9 f84b 	bl	80005b0 <__aeabi_dmul>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4630      	mov	r0, r6
 8007520:	4639      	mov	r1, r7
 8007522:	f7f8 fe8f 	bl	8000244 <__adddf3>
 8007526:	4606      	mov	r6, r0
 8007528:	460f      	mov	r7, r1
 800752a:	f7f9 faf1 	bl	8000b10 <__aeabi_d2iz>
 800752e:	2200      	movs	r2, #0
 8007530:	4681      	mov	r9, r0
 8007532:	2300      	movs	r3, #0
 8007534:	4630      	mov	r0, r6
 8007536:	4639      	mov	r1, r7
 8007538:	f7f9 faac 	bl	8000a94 <__aeabi_dcmplt>
 800753c:	b148      	cbz	r0, 8007552 <_dtoa_r+0x17a>
 800753e:	4648      	mov	r0, r9
 8007540:	f7f8 ffcc 	bl	80004dc <__aeabi_i2d>
 8007544:	4632      	mov	r2, r6
 8007546:	463b      	mov	r3, r7
 8007548:	f7f9 fa9a 	bl	8000a80 <__aeabi_dcmpeq>
 800754c:	b908      	cbnz	r0, 8007552 <_dtoa_r+0x17a>
 800754e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007552:	f1b9 0f16 	cmp.w	r9, #22
 8007556:	d857      	bhi.n	8007608 <_dtoa_r+0x230>
 8007558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800755c:	4b5d      	ldr	r3, [pc, #372]	; (80076d4 <_dtoa_r+0x2fc>)
 800755e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	f7f9 fa95 	bl	8000a94 <__aeabi_dcmplt>
 800756a:	2800      	cmp	r0, #0
 800756c:	d04e      	beq.n	800760c <_dtoa_r+0x234>
 800756e:	2300      	movs	r3, #0
 8007570:	f109 39ff 	add.w	r9, r9, #4294967295
 8007574:	930f      	str	r3, [sp, #60]	; 0x3c
 8007576:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007578:	1b1c      	subs	r4, r3, r4
 800757a:	1e63      	subs	r3, r4, #1
 800757c:	9309      	str	r3, [sp, #36]	; 0x24
 800757e:	bf49      	itett	mi
 8007580:	f1c4 0301 	rsbmi	r3, r4, #1
 8007584:	2300      	movpl	r3, #0
 8007586:	9306      	strmi	r3, [sp, #24]
 8007588:	2300      	movmi	r3, #0
 800758a:	bf54      	ite	pl
 800758c:	9306      	strpl	r3, [sp, #24]
 800758e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007590:	f1b9 0f00 	cmp.w	r9, #0
 8007594:	db3c      	blt.n	8007610 <_dtoa_r+0x238>
 8007596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007598:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800759c:	444b      	add	r3, r9
 800759e:	9309      	str	r3, [sp, #36]	; 0x24
 80075a0:	2300      	movs	r3, #0
 80075a2:	930a      	str	r3, [sp, #40]	; 0x28
 80075a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075a6:	2b09      	cmp	r3, #9
 80075a8:	d86c      	bhi.n	8007684 <_dtoa_r+0x2ac>
 80075aa:	2b05      	cmp	r3, #5
 80075ac:	bfc4      	itt	gt
 80075ae:	3b04      	subgt	r3, #4
 80075b0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80075b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075b4:	bfc8      	it	gt
 80075b6:	2400      	movgt	r4, #0
 80075b8:	f1a3 0302 	sub.w	r3, r3, #2
 80075bc:	bfd8      	it	le
 80075be:	2401      	movle	r4, #1
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	f200 808b 	bhi.w	80076dc <_dtoa_r+0x304>
 80075c6:	e8df f003 	tbb	[pc, r3]
 80075ca:	4f2d      	.short	0x4f2d
 80075cc:	5b4d      	.short	0x5b4d
 80075ce:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80075d2:	441c      	add	r4, r3
 80075d4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80075d8:	2b20      	cmp	r3, #32
 80075da:	bfc3      	ittte	gt
 80075dc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80075e0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80075e4:	fa09 f303 	lslgt.w	r3, r9, r3
 80075e8:	f1c3 0320 	rsble	r3, r3, #32
 80075ec:	bfc6      	itte	gt
 80075ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80075f2:	4318      	orrgt	r0, r3
 80075f4:	fa06 f003 	lslle.w	r0, r6, r3
 80075f8:	f7f8 ff60 	bl	80004bc <__aeabi_ui2d>
 80075fc:	2301      	movs	r3, #1
 80075fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007602:	3c01      	subs	r4, #1
 8007604:	9313      	str	r3, [sp, #76]	; 0x4c
 8007606:	e770      	b.n	80074ea <_dtoa_r+0x112>
 8007608:	2301      	movs	r3, #1
 800760a:	e7b3      	b.n	8007574 <_dtoa_r+0x19c>
 800760c:	900f      	str	r0, [sp, #60]	; 0x3c
 800760e:	e7b2      	b.n	8007576 <_dtoa_r+0x19e>
 8007610:	9b06      	ldr	r3, [sp, #24]
 8007612:	eba3 0309 	sub.w	r3, r3, r9
 8007616:	9306      	str	r3, [sp, #24]
 8007618:	f1c9 0300 	rsb	r3, r9, #0
 800761c:	930a      	str	r3, [sp, #40]	; 0x28
 800761e:	2300      	movs	r3, #0
 8007620:	930e      	str	r3, [sp, #56]	; 0x38
 8007622:	e7bf      	b.n	80075a4 <_dtoa_r+0x1cc>
 8007624:	2300      	movs	r3, #0
 8007626:	930b      	str	r3, [sp, #44]	; 0x2c
 8007628:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800762a:	2b00      	cmp	r3, #0
 800762c:	dc59      	bgt.n	80076e2 <_dtoa_r+0x30a>
 800762e:	f04f 0b01 	mov.w	fp, #1
 8007632:	465b      	mov	r3, fp
 8007634:	f8cd b008 	str.w	fp, [sp, #8]
 8007638:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800763c:	2200      	movs	r2, #0
 800763e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007640:	6042      	str	r2, [r0, #4]
 8007642:	2204      	movs	r2, #4
 8007644:	f102 0614 	add.w	r6, r2, #20
 8007648:	429e      	cmp	r6, r3
 800764a:	6841      	ldr	r1, [r0, #4]
 800764c:	d94f      	bls.n	80076ee <_dtoa_r+0x316>
 800764e:	4628      	mov	r0, r5
 8007650:	f000 fdd2 	bl	80081f8 <_Balloc>
 8007654:	9008      	str	r0, [sp, #32]
 8007656:	2800      	cmp	r0, #0
 8007658:	d14d      	bne.n	80076f6 <_dtoa_r+0x31e>
 800765a:	4602      	mov	r2, r0
 800765c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007660:	4b1d      	ldr	r3, [pc, #116]	; (80076d8 <_dtoa_r+0x300>)
 8007662:	e6cd      	b.n	8007400 <_dtoa_r+0x28>
 8007664:	2301      	movs	r3, #1
 8007666:	e7de      	b.n	8007626 <_dtoa_r+0x24e>
 8007668:	2300      	movs	r3, #0
 800766a:	930b      	str	r3, [sp, #44]	; 0x2c
 800766c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800766e:	eb09 0b03 	add.w	fp, r9, r3
 8007672:	f10b 0301 	add.w	r3, fp, #1
 8007676:	2b01      	cmp	r3, #1
 8007678:	9302      	str	r3, [sp, #8]
 800767a:	bfb8      	it	lt
 800767c:	2301      	movlt	r3, #1
 800767e:	e7dd      	b.n	800763c <_dtoa_r+0x264>
 8007680:	2301      	movs	r3, #1
 8007682:	e7f2      	b.n	800766a <_dtoa_r+0x292>
 8007684:	2401      	movs	r4, #1
 8007686:	2300      	movs	r3, #0
 8007688:	940b      	str	r4, [sp, #44]	; 0x2c
 800768a:	9322      	str	r3, [sp, #136]	; 0x88
 800768c:	f04f 3bff 	mov.w	fp, #4294967295
 8007690:	2200      	movs	r2, #0
 8007692:	2312      	movs	r3, #18
 8007694:	f8cd b008 	str.w	fp, [sp, #8]
 8007698:	9223      	str	r2, [sp, #140]	; 0x8c
 800769a:	e7cf      	b.n	800763c <_dtoa_r+0x264>
 800769c:	f3af 8000 	nop.w
 80076a0:	636f4361 	.word	0x636f4361
 80076a4:	3fd287a7 	.word	0x3fd287a7
 80076a8:	8b60c8b3 	.word	0x8b60c8b3
 80076ac:	3fc68a28 	.word	0x3fc68a28
 80076b0:	509f79fb 	.word	0x509f79fb
 80076b4:	3fd34413 	.word	0x3fd34413
 80076b8:	08011d31 	.word	0x08011d31
 80076bc:	08011d48 	.word	0x08011d48
 80076c0:	7ff00000 	.word	0x7ff00000
 80076c4:	08011d2d 	.word	0x08011d2d
 80076c8:	08011d24 	.word	0x08011d24
 80076cc:	08011d01 	.word	0x08011d01
 80076d0:	3ff80000 	.word	0x3ff80000
 80076d4:	08011ea0 	.word	0x08011ea0
 80076d8:	08011da7 	.word	0x08011da7
 80076dc:	2301      	movs	r3, #1
 80076de:	930b      	str	r3, [sp, #44]	; 0x2c
 80076e0:	e7d4      	b.n	800768c <_dtoa_r+0x2b4>
 80076e2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80076e6:	465b      	mov	r3, fp
 80076e8:	f8cd b008 	str.w	fp, [sp, #8]
 80076ec:	e7a6      	b.n	800763c <_dtoa_r+0x264>
 80076ee:	3101      	adds	r1, #1
 80076f0:	6041      	str	r1, [r0, #4]
 80076f2:	0052      	lsls	r2, r2, #1
 80076f4:	e7a6      	b.n	8007644 <_dtoa_r+0x26c>
 80076f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076f8:	9a08      	ldr	r2, [sp, #32]
 80076fa:	601a      	str	r2, [r3, #0]
 80076fc:	9b02      	ldr	r3, [sp, #8]
 80076fe:	2b0e      	cmp	r3, #14
 8007700:	f200 80a8 	bhi.w	8007854 <_dtoa_r+0x47c>
 8007704:	2c00      	cmp	r4, #0
 8007706:	f000 80a5 	beq.w	8007854 <_dtoa_r+0x47c>
 800770a:	f1b9 0f00 	cmp.w	r9, #0
 800770e:	dd34      	ble.n	800777a <_dtoa_r+0x3a2>
 8007710:	4a9a      	ldr	r2, [pc, #616]	; (800797c <_dtoa_r+0x5a4>)
 8007712:	f009 030f 	and.w	r3, r9, #15
 8007716:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800771a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800771e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007722:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007726:	ea4f 1429 	mov.w	r4, r9, asr #4
 800772a:	d016      	beq.n	800775a <_dtoa_r+0x382>
 800772c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007730:	4b93      	ldr	r3, [pc, #588]	; (8007980 <_dtoa_r+0x5a8>)
 8007732:	2703      	movs	r7, #3
 8007734:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007738:	f7f9 f864 	bl	8000804 <__aeabi_ddiv>
 800773c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007740:	f004 040f 	and.w	r4, r4, #15
 8007744:	4e8e      	ldr	r6, [pc, #568]	; (8007980 <_dtoa_r+0x5a8>)
 8007746:	b954      	cbnz	r4, 800775e <_dtoa_r+0x386>
 8007748:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800774c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007750:	f7f9 f858 	bl	8000804 <__aeabi_ddiv>
 8007754:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007758:	e029      	b.n	80077ae <_dtoa_r+0x3d6>
 800775a:	2702      	movs	r7, #2
 800775c:	e7f2      	b.n	8007744 <_dtoa_r+0x36c>
 800775e:	07e1      	lsls	r1, r4, #31
 8007760:	d508      	bpl.n	8007774 <_dtoa_r+0x39c>
 8007762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007766:	e9d6 2300 	ldrd	r2, r3, [r6]
 800776a:	f7f8 ff21 	bl	80005b0 <__aeabi_dmul>
 800776e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007772:	3701      	adds	r7, #1
 8007774:	1064      	asrs	r4, r4, #1
 8007776:	3608      	adds	r6, #8
 8007778:	e7e5      	b.n	8007746 <_dtoa_r+0x36e>
 800777a:	f000 80a5 	beq.w	80078c8 <_dtoa_r+0x4f0>
 800777e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007782:	f1c9 0400 	rsb	r4, r9, #0
 8007786:	4b7d      	ldr	r3, [pc, #500]	; (800797c <_dtoa_r+0x5a4>)
 8007788:	f004 020f 	and.w	r2, r4, #15
 800778c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	f7f8 ff0c 	bl	80005b0 <__aeabi_dmul>
 8007798:	2702      	movs	r7, #2
 800779a:	2300      	movs	r3, #0
 800779c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077a0:	4e77      	ldr	r6, [pc, #476]	; (8007980 <_dtoa_r+0x5a8>)
 80077a2:	1124      	asrs	r4, r4, #4
 80077a4:	2c00      	cmp	r4, #0
 80077a6:	f040 8084 	bne.w	80078b2 <_dtoa_r+0x4da>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1d2      	bne.n	8007754 <_dtoa_r+0x37c>
 80077ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 808b 	beq.w	80078cc <_dtoa_r+0x4f4>
 80077b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80077ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80077be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077c2:	2200      	movs	r2, #0
 80077c4:	4b6f      	ldr	r3, [pc, #444]	; (8007984 <_dtoa_r+0x5ac>)
 80077c6:	f7f9 f965 	bl	8000a94 <__aeabi_dcmplt>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	d07e      	beq.n	80078cc <_dtoa_r+0x4f4>
 80077ce:	9b02      	ldr	r3, [sp, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d07b      	beq.n	80078cc <_dtoa_r+0x4f4>
 80077d4:	f1bb 0f00 	cmp.w	fp, #0
 80077d8:	dd38      	ble.n	800784c <_dtoa_r+0x474>
 80077da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80077de:	2200      	movs	r2, #0
 80077e0:	4b69      	ldr	r3, [pc, #420]	; (8007988 <_dtoa_r+0x5b0>)
 80077e2:	f7f8 fee5 	bl	80005b0 <__aeabi_dmul>
 80077e6:	465c      	mov	r4, fp
 80077e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077ec:	f109 38ff 	add.w	r8, r9, #4294967295
 80077f0:	3701      	adds	r7, #1
 80077f2:	4638      	mov	r0, r7
 80077f4:	f7f8 fe72 	bl	80004dc <__aeabi_i2d>
 80077f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077fc:	f7f8 fed8 	bl	80005b0 <__aeabi_dmul>
 8007800:	2200      	movs	r2, #0
 8007802:	4b62      	ldr	r3, [pc, #392]	; (800798c <_dtoa_r+0x5b4>)
 8007804:	f7f8 fd1e 	bl	8000244 <__adddf3>
 8007808:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800780c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007810:	9611      	str	r6, [sp, #68]	; 0x44
 8007812:	2c00      	cmp	r4, #0
 8007814:	d15d      	bne.n	80078d2 <_dtoa_r+0x4fa>
 8007816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800781a:	2200      	movs	r2, #0
 800781c:	4b5c      	ldr	r3, [pc, #368]	; (8007990 <_dtoa_r+0x5b8>)
 800781e:	f7f8 fd0f 	bl	8000240 <__aeabi_dsub>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800782a:	4633      	mov	r3, r6
 800782c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800782e:	f7f9 f94f 	bl	8000ad0 <__aeabi_dcmpgt>
 8007832:	2800      	cmp	r0, #0
 8007834:	f040 829e 	bne.w	8007d74 <_dtoa_r+0x99c>
 8007838:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800783c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800783e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007842:	f7f9 f927 	bl	8000a94 <__aeabi_dcmplt>
 8007846:	2800      	cmp	r0, #0
 8007848:	f040 8292 	bne.w	8007d70 <_dtoa_r+0x998>
 800784c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007850:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007854:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007856:	2b00      	cmp	r3, #0
 8007858:	f2c0 8153 	blt.w	8007b02 <_dtoa_r+0x72a>
 800785c:	f1b9 0f0e 	cmp.w	r9, #14
 8007860:	f300 814f 	bgt.w	8007b02 <_dtoa_r+0x72a>
 8007864:	4b45      	ldr	r3, [pc, #276]	; (800797c <_dtoa_r+0x5a4>)
 8007866:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800786a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800786e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007872:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007874:	2b00      	cmp	r3, #0
 8007876:	f280 80db 	bge.w	8007a30 <_dtoa_r+0x658>
 800787a:	9b02      	ldr	r3, [sp, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	f300 80d7 	bgt.w	8007a30 <_dtoa_r+0x658>
 8007882:	f040 8274 	bne.w	8007d6e <_dtoa_r+0x996>
 8007886:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800788a:	2200      	movs	r2, #0
 800788c:	4b40      	ldr	r3, [pc, #256]	; (8007990 <_dtoa_r+0x5b8>)
 800788e:	f7f8 fe8f 	bl	80005b0 <__aeabi_dmul>
 8007892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007896:	f7f9 f911 	bl	8000abc <__aeabi_dcmpge>
 800789a:	9c02      	ldr	r4, [sp, #8]
 800789c:	4626      	mov	r6, r4
 800789e:	2800      	cmp	r0, #0
 80078a0:	f040 824a 	bne.w	8007d38 <_dtoa_r+0x960>
 80078a4:	2331      	movs	r3, #49	; 0x31
 80078a6:	9f08      	ldr	r7, [sp, #32]
 80078a8:	f109 0901 	add.w	r9, r9, #1
 80078ac:	f807 3b01 	strb.w	r3, [r7], #1
 80078b0:	e246      	b.n	8007d40 <_dtoa_r+0x968>
 80078b2:	07e2      	lsls	r2, r4, #31
 80078b4:	d505      	bpl.n	80078c2 <_dtoa_r+0x4ea>
 80078b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078ba:	f7f8 fe79 	bl	80005b0 <__aeabi_dmul>
 80078be:	2301      	movs	r3, #1
 80078c0:	3701      	adds	r7, #1
 80078c2:	1064      	asrs	r4, r4, #1
 80078c4:	3608      	adds	r6, #8
 80078c6:	e76d      	b.n	80077a4 <_dtoa_r+0x3cc>
 80078c8:	2702      	movs	r7, #2
 80078ca:	e770      	b.n	80077ae <_dtoa_r+0x3d6>
 80078cc:	46c8      	mov	r8, r9
 80078ce:	9c02      	ldr	r4, [sp, #8]
 80078d0:	e78f      	b.n	80077f2 <_dtoa_r+0x41a>
 80078d2:	9908      	ldr	r1, [sp, #32]
 80078d4:	4b29      	ldr	r3, [pc, #164]	; (800797c <_dtoa_r+0x5a4>)
 80078d6:	4421      	add	r1, r4
 80078d8:	9112      	str	r1, [sp, #72]	; 0x48
 80078da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80078dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80078e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80078e8:	2900      	cmp	r1, #0
 80078ea:	d055      	beq.n	8007998 <_dtoa_r+0x5c0>
 80078ec:	2000      	movs	r0, #0
 80078ee:	4929      	ldr	r1, [pc, #164]	; (8007994 <_dtoa_r+0x5bc>)
 80078f0:	f7f8 ff88 	bl	8000804 <__aeabi_ddiv>
 80078f4:	463b      	mov	r3, r7
 80078f6:	4632      	mov	r2, r6
 80078f8:	f7f8 fca2 	bl	8000240 <__aeabi_dsub>
 80078fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007900:	9f08      	ldr	r7, [sp, #32]
 8007902:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007906:	f7f9 f903 	bl	8000b10 <__aeabi_d2iz>
 800790a:	4604      	mov	r4, r0
 800790c:	f7f8 fde6 	bl	80004dc <__aeabi_i2d>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007918:	f7f8 fc92 	bl	8000240 <__aeabi_dsub>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	3430      	adds	r4, #48	; 0x30
 8007922:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007926:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800792a:	f807 4b01 	strb.w	r4, [r7], #1
 800792e:	f7f9 f8b1 	bl	8000a94 <__aeabi_dcmplt>
 8007932:	2800      	cmp	r0, #0
 8007934:	d174      	bne.n	8007a20 <_dtoa_r+0x648>
 8007936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800793a:	2000      	movs	r0, #0
 800793c:	4911      	ldr	r1, [pc, #68]	; (8007984 <_dtoa_r+0x5ac>)
 800793e:	f7f8 fc7f 	bl	8000240 <__aeabi_dsub>
 8007942:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007946:	f7f9 f8a5 	bl	8000a94 <__aeabi_dcmplt>
 800794a:	2800      	cmp	r0, #0
 800794c:	f040 80b6 	bne.w	8007abc <_dtoa_r+0x6e4>
 8007950:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007952:	429f      	cmp	r7, r3
 8007954:	f43f af7a 	beq.w	800784c <_dtoa_r+0x474>
 8007958:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800795c:	2200      	movs	r2, #0
 800795e:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <_dtoa_r+0x5b0>)
 8007960:	f7f8 fe26 	bl	80005b0 <__aeabi_dmul>
 8007964:	2200      	movs	r2, #0
 8007966:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800796a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800796e:	4b06      	ldr	r3, [pc, #24]	; (8007988 <_dtoa_r+0x5b0>)
 8007970:	f7f8 fe1e 	bl	80005b0 <__aeabi_dmul>
 8007974:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007978:	e7c3      	b.n	8007902 <_dtoa_r+0x52a>
 800797a:	bf00      	nop
 800797c:	08011ea0 	.word	0x08011ea0
 8007980:	08011e78 	.word	0x08011e78
 8007984:	3ff00000 	.word	0x3ff00000
 8007988:	40240000 	.word	0x40240000
 800798c:	401c0000 	.word	0x401c0000
 8007990:	40140000 	.word	0x40140000
 8007994:	3fe00000 	.word	0x3fe00000
 8007998:	4630      	mov	r0, r6
 800799a:	4639      	mov	r1, r7
 800799c:	f7f8 fe08 	bl	80005b0 <__aeabi_dmul>
 80079a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079a6:	9c08      	ldr	r4, [sp, #32]
 80079a8:	9314      	str	r3, [sp, #80]	; 0x50
 80079aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079ae:	f7f9 f8af 	bl	8000b10 <__aeabi_d2iz>
 80079b2:	9015      	str	r0, [sp, #84]	; 0x54
 80079b4:	f7f8 fd92 	bl	80004dc <__aeabi_i2d>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80079c0:	f7f8 fc3e 	bl	8000240 <__aeabi_dsub>
 80079c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079c6:	4606      	mov	r6, r0
 80079c8:	3330      	adds	r3, #48	; 0x30
 80079ca:	f804 3b01 	strb.w	r3, [r4], #1
 80079ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079d0:	460f      	mov	r7, r1
 80079d2:	429c      	cmp	r4, r3
 80079d4:	f04f 0200 	mov.w	r2, #0
 80079d8:	d124      	bne.n	8007a24 <_dtoa_r+0x64c>
 80079da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079de:	4bb3      	ldr	r3, [pc, #716]	; (8007cac <_dtoa_r+0x8d4>)
 80079e0:	f7f8 fc30 	bl	8000244 <__adddf3>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4630      	mov	r0, r6
 80079ea:	4639      	mov	r1, r7
 80079ec:	f7f9 f870 	bl	8000ad0 <__aeabi_dcmpgt>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d162      	bne.n	8007aba <_dtoa_r+0x6e2>
 80079f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079f8:	2000      	movs	r0, #0
 80079fa:	49ac      	ldr	r1, [pc, #688]	; (8007cac <_dtoa_r+0x8d4>)
 80079fc:	f7f8 fc20 	bl	8000240 <__aeabi_dsub>
 8007a00:	4602      	mov	r2, r0
 8007a02:	460b      	mov	r3, r1
 8007a04:	4630      	mov	r0, r6
 8007a06:	4639      	mov	r1, r7
 8007a08:	f7f9 f844 	bl	8000a94 <__aeabi_dcmplt>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	f43f af1d 	beq.w	800784c <_dtoa_r+0x474>
 8007a12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007a14:	1e7b      	subs	r3, r7, #1
 8007a16:	9314      	str	r3, [sp, #80]	; 0x50
 8007a18:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8007a1c:	2b30      	cmp	r3, #48	; 0x30
 8007a1e:	d0f8      	beq.n	8007a12 <_dtoa_r+0x63a>
 8007a20:	46c1      	mov	r9, r8
 8007a22:	e03a      	b.n	8007a9a <_dtoa_r+0x6c2>
 8007a24:	4ba2      	ldr	r3, [pc, #648]	; (8007cb0 <_dtoa_r+0x8d8>)
 8007a26:	f7f8 fdc3 	bl	80005b0 <__aeabi_dmul>
 8007a2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a2e:	e7bc      	b.n	80079aa <_dtoa_r+0x5d2>
 8007a30:	9f08      	ldr	r7, [sp, #32]
 8007a32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a3a:	f7f8 fee3 	bl	8000804 <__aeabi_ddiv>
 8007a3e:	f7f9 f867 	bl	8000b10 <__aeabi_d2iz>
 8007a42:	4604      	mov	r4, r0
 8007a44:	f7f8 fd4a 	bl	80004dc <__aeabi_i2d>
 8007a48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a4c:	f7f8 fdb0 	bl	80005b0 <__aeabi_dmul>
 8007a50:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007a54:	460b      	mov	r3, r1
 8007a56:	4602      	mov	r2, r0
 8007a58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a5c:	f7f8 fbf0 	bl	8000240 <__aeabi_dsub>
 8007a60:	f807 6b01 	strb.w	r6, [r7], #1
 8007a64:	9e08      	ldr	r6, [sp, #32]
 8007a66:	9b02      	ldr	r3, [sp, #8]
 8007a68:	1bbe      	subs	r6, r7, r6
 8007a6a:	42b3      	cmp	r3, r6
 8007a6c:	d13a      	bne.n	8007ae4 <_dtoa_r+0x70c>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	f7f8 fbe7 	bl	8000244 <__adddf3>
 8007a76:	4602      	mov	r2, r0
 8007a78:	460b      	mov	r3, r1
 8007a7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a82:	f7f9 f825 	bl	8000ad0 <__aeabi_dcmpgt>
 8007a86:	bb58      	cbnz	r0, 8007ae0 <_dtoa_r+0x708>
 8007a88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a90:	f7f8 fff6 	bl	8000a80 <__aeabi_dcmpeq>
 8007a94:	b108      	cbz	r0, 8007a9a <_dtoa_r+0x6c2>
 8007a96:	07e1      	lsls	r1, r4, #31
 8007a98:	d422      	bmi.n	8007ae0 <_dtoa_r+0x708>
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	4651      	mov	r1, sl
 8007a9e:	f000 fbeb 	bl	8008278 <_Bfree>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	703b      	strb	r3, [r7, #0]
 8007aa6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007aa8:	f109 0001 	add.w	r0, r9, #1
 8007aac:	6018      	str	r0, [r3, #0]
 8007aae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f43f acdf 	beq.w	8007474 <_dtoa_r+0x9c>
 8007ab6:	601f      	str	r7, [r3, #0]
 8007ab8:	e4dc      	b.n	8007474 <_dtoa_r+0x9c>
 8007aba:	4627      	mov	r7, r4
 8007abc:	463b      	mov	r3, r7
 8007abe:	461f      	mov	r7, r3
 8007ac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ac4:	2a39      	cmp	r2, #57	; 0x39
 8007ac6:	d107      	bne.n	8007ad8 <_dtoa_r+0x700>
 8007ac8:	9a08      	ldr	r2, [sp, #32]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d1f7      	bne.n	8007abe <_dtoa_r+0x6e6>
 8007ace:	2230      	movs	r2, #48	; 0x30
 8007ad0:	9908      	ldr	r1, [sp, #32]
 8007ad2:	f108 0801 	add.w	r8, r8, #1
 8007ad6:	700a      	strb	r2, [r1, #0]
 8007ad8:	781a      	ldrb	r2, [r3, #0]
 8007ada:	3201      	adds	r2, #1
 8007adc:	701a      	strb	r2, [r3, #0]
 8007ade:	e79f      	b.n	8007a20 <_dtoa_r+0x648>
 8007ae0:	46c8      	mov	r8, r9
 8007ae2:	e7eb      	b.n	8007abc <_dtoa_r+0x6e4>
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	4b72      	ldr	r3, [pc, #456]	; (8007cb0 <_dtoa_r+0x8d8>)
 8007ae8:	f7f8 fd62 	bl	80005b0 <__aeabi_dmul>
 8007aec:	4602      	mov	r2, r0
 8007aee:	460b      	mov	r3, r1
 8007af0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007af4:	2200      	movs	r2, #0
 8007af6:	2300      	movs	r3, #0
 8007af8:	f7f8 ffc2 	bl	8000a80 <__aeabi_dcmpeq>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d098      	beq.n	8007a32 <_dtoa_r+0x65a>
 8007b00:	e7cb      	b.n	8007a9a <_dtoa_r+0x6c2>
 8007b02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b04:	2a00      	cmp	r2, #0
 8007b06:	f000 80cd 	beq.w	8007ca4 <_dtoa_r+0x8cc>
 8007b0a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007b0c:	2a01      	cmp	r2, #1
 8007b0e:	f300 80af 	bgt.w	8007c70 <_dtoa_r+0x898>
 8007b12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b14:	2a00      	cmp	r2, #0
 8007b16:	f000 80a7 	beq.w	8007c68 <_dtoa_r+0x890>
 8007b1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b20:	9f06      	ldr	r7, [sp, #24]
 8007b22:	9a06      	ldr	r2, [sp, #24]
 8007b24:	2101      	movs	r1, #1
 8007b26:	441a      	add	r2, r3
 8007b28:	9206      	str	r2, [sp, #24]
 8007b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	441a      	add	r2, r3
 8007b30:	9209      	str	r2, [sp, #36]	; 0x24
 8007b32:	f000 fc5b 	bl	80083ec <__i2b>
 8007b36:	4606      	mov	r6, r0
 8007b38:	2f00      	cmp	r7, #0
 8007b3a:	dd0c      	ble.n	8007b56 <_dtoa_r+0x77e>
 8007b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	dd09      	ble.n	8007b56 <_dtoa_r+0x77e>
 8007b42:	42bb      	cmp	r3, r7
 8007b44:	bfa8      	it	ge
 8007b46:	463b      	movge	r3, r7
 8007b48:	9a06      	ldr	r2, [sp, #24]
 8007b4a:	1aff      	subs	r7, r7, r3
 8007b4c:	1ad2      	subs	r2, r2, r3
 8007b4e:	9206      	str	r2, [sp, #24]
 8007b50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	9309      	str	r3, [sp, #36]	; 0x24
 8007b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b58:	b1f3      	cbz	r3, 8007b98 <_dtoa_r+0x7c0>
 8007b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 80a9 	beq.w	8007cb4 <_dtoa_r+0x8dc>
 8007b62:	2c00      	cmp	r4, #0
 8007b64:	dd10      	ble.n	8007b88 <_dtoa_r+0x7b0>
 8007b66:	4631      	mov	r1, r6
 8007b68:	4622      	mov	r2, r4
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f000 fcf8 	bl	8008560 <__pow5mult>
 8007b70:	4652      	mov	r2, sl
 8007b72:	4601      	mov	r1, r0
 8007b74:	4606      	mov	r6, r0
 8007b76:	4628      	mov	r0, r5
 8007b78:	f000 fc4e 	bl	8008418 <__multiply>
 8007b7c:	4680      	mov	r8, r0
 8007b7e:	4651      	mov	r1, sl
 8007b80:	4628      	mov	r0, r5
 8007b82:	f000 fb79 	bl	8008278 <_Bfree>
 8007b86:	46c2      	mov	sl, r8
 8007b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b8a:	1b1a      	subs	r2, r3, r4
 8007b8c:	d004      	beq.n	8007b98 <_dtoa_r+0x7c0>
 8007b8e:	4651      	mov	r1, sl
 8007b90:	4628      	mov	r0, r5
 8007b92:	f000 fce5 	bl	8008560 <__pow5mult>
 8007b96:	4682      	mov	sl, r0
 8007b98:	2101      	movs	r1, #1
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	f000 fc26 	bl	80083ec <__i2b>
 8007ba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f340 8087 	ble.w	8007cb8 <_dtoa_r+0x8e0>
 8007baa:	461a      	mov	r2, r3
 8007bac:	4601      	mov	r1, r0
 8007bae:	4628      	mov	r0, r5
 8007bb0:	f000 fcd6 	bl	8008560 <__pow5mult>
 8007bb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	f340 8080 	ble.w	8007cbe <_dtoa_r+0x8e6>
 8007bbe:	f04f 0800 	mov.w	r8, #0
 8007bc2:	6923      	ldr	r3, [r4, #16]
 8007bc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bc8:	6918      	ldr	r0, [r3, #16]
 8007bca:	f000 fbc1 	bl	8008350 <__hi0bits>
 8007bce:	f1c0 0020 	rsb	r0, r0, #32
 8007bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bd4:	4418      	add	r0, r3
 8007bd6:	f010 001f 	ands.w	r0, r0, #31
 8007bda:	f000 8092 	beq.w	8007d02 <_dtoa_r+0x92a>
 8007bde:	f1c0 0320 	rsb	r3, r0, #32
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	f340 808a 	ble.w	8007cfc <_dtoa_r+0x924>
 8007be8:	f1c0 001c 	rsb	r0, r0, #28
 8007bec:	9b06      	ldr	r3, [sp, #24]
 8007bee:	4407      	add	r7, r0
 8007bf0:	4403      	add	r3, r0
 8007bf2:	9306      	str	r3, [sp, #24]
 8007bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf6:	4403      	add	r3, r0
 8007bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfa:	9b06      	ldr	r3, [sp, #24]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	dd05      	ble.n	8007c0c <_dtoa_r+0x834>
 8007c00:	4651      	mov	r1, sl
 8007c02:	461a      	mov	r2, r3
 8007c04:	4628      	mov	r0, r5
 8007c06:	f000 fd05 	bl	8008614 <__lshift>
 8007c0a:	4682      	mov	sl, r0
 8007c0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	dd05      	ble.n	8007c1e <_dtoa_r+0x846>
 8007c12:	4621      	mov	r1, r4
 8007c14:	461a      	mov	r2, r3
 8007c16:	4628      	mov	r0, r5
 8007c18:	f000 fcfc 	bl	8008614 <__lshift>
 8007c1c:	4604      	mov	r4, r0
 8007c1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d070      	beq.n	8007d06 <_dtoa_r+0x92e>
 8007c24:	4621      	mov	r1, r4
 8007c26:	4650      	mov	r0, sl
 8007c28:	f000 fd60 	bl	80086ec <__mcmp>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	da6a      	bge.n	8007d06 <_dtoa_r+0x92e>
 8007c30:	2300      	movs	r3, #0
 8007c32:	4651      	mov	r1, sl
 8007c34:	220a      	movs	r2, #10
 8007c36:	4628      	mov	r0, r5
 8007c38:	f000 fb40 	bl	80082bc <__multadd>
 8007c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c3e:	4682      	mov	sl, r0
 8007c40:	f109 39ff 	add.w	r9, r9, #4294967295
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	f000 8193 	beq.w	8007f70 <_dtoa_r+0xb98>
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	220a      	movs	r2, #10
 8007c50:	4628      	mov	r0, r5
 8007c52:	f000 fb33 	bl	80082bc <__multadd>
 8007c56:	f1bb 0f00 	cmp.w	fp, #0
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	f300 8093 	bgt.w	8007d86 <_dtoa_r+0x9ae>
 8007c60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	dc57      	bgt.n	8007d16 <_dtoa_r+0x93e>
 8007c66:	e08e      	b.n	8007d86 <_dtoa_r+0x9ae>
 8007c68:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007c6a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007c6e:	e756      	b.n	8007b1e <_dtoa_r+0x746>
 8007c70:	9b02      	ldr	r3, [sp, #8]
 8007c72:	1e5c      	subs	r4, r3, #1
 8007c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c76:	42a3      	cmp	r3, r4
 8007c78:	bfb7      	itett	lt
 8007c7a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007c7c:	1b1c      	subge	r4, r3, r4
 8007c7e:	1ae2      	sublt	r2, r4, r3
 8007c80:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007c82:	bfbe      	ittt	lt
 8007c84:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007c86:	189b      	addlt	r3, r3, r2
 8007c88:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007c8a:	9b02      	ldr	r3, [sp, #8]
 8007c8c:	bfb8      	it	lt
 8007c8e:	2400      	movlt	r4, #0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bfbb      	ittet	lt
 8007c94:	9b06      	ldrlt	r3, [sp, #24]
 8007c96:	9a02      	ldrlt	r2, [sp, #8]
 8007c98:	9f06      	ldrge	r7, [sp, #24]
 8007c9a:	1a9f      	sublt	r7, r3, r2
 8007c9c:	bfac      	ite	ge
 8007c9e:	9b02      	ldrge	r3, [sp, #8]
 8007ca0:	2300      	movlt	r3, #0
 8007ca2:	e73e      	b.n	8007b22 <_dtoa_r+0x74a>
 8007ca4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ca6:	9f06      	ldr	r7, [sp, #24]
 8007ca8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007caa:	e745      	b.n	8007b38 <_dtoa_r+0x760>
 8007cac:	3fe00000 	.word	0x3fe00000
 8007cb0:	40240000 	.word	0x40240000
 8007cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cb6:	e76a      	b.n	8007b8e <_dtoa_r+0x7b6>
 8007cb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	dc19      	bgt.n	8007cf2 <_dtoa_r+0x91a>
 8007cbe:	9b04      	ldr	r3, [sp, #16]
 8007cc0:	b9bb      	cbnz	r3, 8007cf2 <_dtoa_r+0x91a>
 8007cc2:	9b05      	ldr	r3, [sp, #20]
 8007cc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cc8:	b99b      	cbnz	r3, 8007cf2 <_dtoa_r+0x91a>
 8007cca:	9b05      	ldr	r3, [sp, #20]
 8007ccc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007cd0:	0d1b      	lsrs	r3, r3, #20
 8007cd2:	051b      	lsls	r3, r3, #20
 8007cd4:	b183      	cbz	r3, 8007cf8 <_dtoa_r+0x920>
 8007cd6:	f04f 0801 	mov.w	r8, #1
 8007cda:	9b06      	ldr	r3, [sp, #24]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	9306      	str	r3, [sp, #24]
 8007ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ce6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f47f af6a 	bne.w	8007bc2 <_dtoa_r+0x7ea>
 8007cee:	2001      	movs	r0, #1
 8007cf0:	e76f      	b.n	8007bd2 <_dtoa_r+0x7fa>
 8007cf2:	f04f 0800 	mov.w	r8, #0
 8007cf6:	e7f6      	b.n	8007ce6 <_dtoa_r+0x90e>
 8007cf8:	4698      	mov	r8, r3
 8007cfa:	e7f4      	b.n	8007ce6 <_dtoa_r+0x90e>
 8007cfc:	f43f af7d 	beq.w	8007bfa <_dtoa_r+0x822>
 8007d00:	4618      	mov	r0, r3
 8007d02:	301c      	adds	r0, #28
 8007d04:	e772      	b.n	8007bec <_dtoa_r+0x814>
 8007d06:	9b02      	ldr	r3, [sp, #8]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	dc36      	bgt.n	8007d7a <_dtoa_r+0x9a2>
 8007d0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	dd33      	ble.n	8007d7a <_dtoa_r+0x9a2>
 8007d12:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007d16:	f1bb 0f00 	cmp.w	fp, #0
 8007d1a:	d10d      	bne.n	8007d38 <_dtoa_r+0x960>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	465b      	mov	r3, fp
 8007d20:	2205      	movs	r2, #5
 8007d22:	4628      	mov	r0, r5
 8007d24:	f000 faca 	bl	80082bc <__multadd>
 8007d28:	4601      	mov	r1, r0
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	4650      	mov	r0, sl
 8007d2e:	f000 fcdd 	bl	80086ec <__mcmp>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	f73f adb6 	bgt.w	80078a4 <_dtoa_r+0x4cc>
 8007d38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d3a:	9f08      	ldr	r7, [sp, #32]
 8007d3c:	ea6f 0903 	mvn.w	r9, r3
 8007d40:	f04f 0800 	mov.w	r8, #0
 8007d44:	4621      	mov	r1, r4
 8007d46:	4628      	mov	r0, r5
 8007d48:	f000 fa96 	bl	8008278 <_Bfree>
 8007d4c:	2e00      	cmp	r6, #0
 8007d4e:	f43f aea4 	beq.w	8007a9a <_dtoa_r+0x6c2>
 8007d52:	f1b8 0f00 	cmp.w	r8, #0
 8007d56:	d005      	beq.n	8007d64 <_dtoa_r+0x98c>
 8007d58:	45b0      	cmp	r8, r6
 8007d5a:	d003      	beq.n	8007d64 <_dtoa_r+0x98c>
 8007d5c:	4641      	mov	r1, r8
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f000 fa8a 	bl	8008278 <_Bfree>
 8007d64:	4631      	mov	r1, r6
 8007d66:	4628      	mov	r0, r5
 8007d68:	f000 fa86 	bl	8008278 <_Bfree>
 8007d6c:	e695      	b.n	8007a9a <_dtoa_r+0x6c2>
 8007d6e:	2400      	movs	r4, #0
 8007d70:	4626      	mov	r6, r4
 8007d72:	e7e1      	b.n	8007d38 <_dtoa_r+0x960>
 8007d74:	46c1      	mov	r9, r8
 8007d76:	4626      	mov	r6, r4
 8007d78:	e594      	b.n	80078a4 <_dtoa_r+0x4cc>
 8007d7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d7c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 80fc 	beq.w	8007f7e <_dtoa_r+0xba6>
 8007d86:	2f00      	cmp	r7, #0
 8007d88:	dd05      	ble.n	8007d96 <_dtoa_r+0x9be>
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	463a      	mov	r2, r7
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f000 fc40 	bl	8008614 <__lshift>
 8007d94:	4606      	mov	r6, r0
 8007d96:	f1b8 0f00 	cmp.w	r8, #0
 8007d9a:	d05c      	beq.n	8007e56 <_dtoa_r+0xa7e>
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	6871      	ldr	r1, [r6, #4]
 8007da0:	f000 fa2a 	bl	80081f8 <_Balloc>
 8007da4:	4607      	mov	r7, r0
 8007da6:	b928      	cbnz	r0, 8007db4 <_dtoa_r+0x9dc>
 8007da8:	4602      	mov	r2, r0
 8007daa:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007dae:	4b7e      	ldr	r3, [pc, #504]	; (8007fa8 <_dtoa_r+0xbd0>)
 8007db0:	f7ff bb26 	b.w	8007400 <_dtoa_r+0x28>
 8007db4:	6932      	ldr	r2, [r6, #16]
 8007db6:	f106 010c 	add.w	r1, r6, #12
 8007dba:	3202      	adds	r2, #2
 8007dbc:	0092      	lsls	r2, r2, #2
 8007dbe:	300c      	adds	r0, #12
 8007dc0:	f000 fa0c 	bl	80081dc <memcpy>
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	4628      	mov	r0, r5
 8007dca:	f000 fc23 	bl	8008614 <__lshift>
 8007dce:	46b0      	mov	r8, r6
 8007dd0:	4606      	mov	r6, r0
 8007dd2:	9b08      	ldr	r3, [sp, #32]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	9302      	str	r3, [sp, #8]
 8007dd8:	9b08      	ldr	r3, [sp, #32]
 8007dda:	445b      	add	r3, fp
 8007ddc:	930a      	str	r3, [sp, #40]	; 0x28
 8007dde:	9b04      	ldr	r3, [sp, #16]
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	9309      	str	r3, [sp, #36]	; 0x24
 8007de6:	9b02      	ldr	r3, [sp, #8]
 8007de8:	4621      	mov	r1, r4
 8007dea:	4650      	mov	r0, sl
 8007dec:	f103 3bff 	add.w	fp, r3, #4294967295
 8007df0:	f7ff fa64 	bl	80072bc <quorem>
 8007df4:	4603      	mov	r3, r0
 8007df6:	4641      	mov	r1, r8
 8007df8:	3330      	adds	r3, #48	; 0x30
 8007dfa:	9004      	str	r0, [sp, #16]
 8007dfc:	4650      	mov	r0, sl
 8007dfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e00:	f000 fc74 	bl	80086ec <__mcmp>
 8007e04:	4632      	mov	r2, r6
 8007e06:	9006      	str	r0, [sp, #24]
 8007e08:	4621      	mov	r1, r4
 8007e0a:	4628      	mov	r0, r5
 8007e0c:	f000 fc8a 	bl	8008724 <__mdiff>
 8007e10:	68c2      	ldr	r2, [r0, #12]
 8007e12:	4607      	mov	r7, r0
 8007e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e16:	bb02      	cbnz	r2, 8007e5a <_dtoa_r+0xa82>
 8007e18:	4601      	mov	r1, r0
 8007e1a:	4650      	mov	r0, sl
 8007e1c:	f000 fc66 	bl	80086ec <__mcmp>
 8007e20:	4602      	mov	r2, r0
 8007e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e24:	4639      	mov	r1, r7
 8007e26:	4628      	mov	r0, r5
 8007e28:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007e2c:	f000 fa24 	bl	8008278 <_Bfree>
 8007e30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e34:	9f02      	ldr	r7, [sp, #8]
 8007e36:	ea43 0102 	orr.w	r1, r3, r2
 8007e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3c:	430b      	orrs	r3, r1
 8007e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e40:	d10d      	bne.n	8007e5e <_dtoa_r+0xa86>
 8007e42:	2b39      	cmp	r3, #57	; 0x39
 8007e44:	d027      	beq.n	8007e96 <_dtoa_r+0xabe>
 8007e46:	9a06      	ldr	r2, [sp, #24]
 8007e48:	2a00      	cmp	r2, #0
 8007e4a:	dd01      	ble.n	8007e50 <_dtoa_r+0xa78>
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	3331      	adds	r3, #49	; 0x31
 8007e50:	f88b 3000 	strb.w	r3, [fp]
 8007e54:	e776      	b.n	8007d44 <_dtoa_r+0x96c>
 8007e56:	4630      	mov	r0, r6
 8007e58:	e7b9      	b.n	8007dce <_dtoa_r+0x9f6>
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	e7e2      	b.n	8007e24 <_dtoa_r+0xa4c>
 8007e5e:	9906      	ldr	r1, [sp, #24]
 8007e60:	2900      	cmp	r1, #0
 8007e62:	db04      	blt.n	8007e6e <_dtoa_r+0xa96>
 8007e64:	9822      	ldr	r0, [sp, #136]	; 0x88
 8007e66:	4301      	orrs	r1, r0
 8007e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e6a:	4301      	orrs	r1, r0
 8007e6c:	d120      	bne.n	8007eb0 <_dtoa_r+0xad8>
 8007e6e:	2a00      	cmp	r2, #0
 8007e70:	ddee      	ble.n	8007e50 <_dtoa_r+0xa78>
 8007e72:	4651      	mov	r1, sl
 8007e74:	2201      	movs	r2, #1
 8007e76:	4628      	mov	r0, r5
 8007e78:	9302      	str	r3, [sp, #8]
 8007e7a:	f000 fbcb 	bl	8008614 <__lshift>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4682      	mov	sl, r0
 8007e82:	f000 fc33 	bl	80086ec <__mcmp>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	9b02      	ldr	r3, [sp, #8]
 8007e8a:	dc02      	bgt.n	8007e92 <_dtoa_r+0xaba>
 8007e8c:	d1e0      	bne.n	8007e50 <_dtoa_r+0xa78>
 8007e8e:	07da      	lsls	r2, r3, #31
 8007e90:	d5de      	bpl.n	8007e50 <_dtoa_r+0xa78>
 8007e92:	2b39      	cmp	r3, #57	; 0x39
 8007e94:	d1da      	bne.n	8007e4c <_dtoa_r+0xa74>
 8007e96:	2339      	movs	r3, #57	; 0x39
 8007e98:	f88b 3000 	strb.w	r3, [fp]
 8007e9c:	463b      	mov	r3, r7
 8007e9e:	461f      	mov	r7, r3
 8007ea0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	2a39      	cmp	r2, #57	; 0x39
 8007ea8:	d050      	beq.n	8007f4c <_dtoa_r+0xb74>
 8007eaa:	3201      	adds	r2, #1
 8007eac:	701a      	strb	r2, [r3, #0]
 8007eae:	e749      	b.n	8007d44 <_dtoa_r+0x96c>
 8007eb0:	2a00      	cmp	r2, #0
 8007eb2:	dd03      	ble.n	8007ebc <_dtoa_r+0xae4>
 8007eb4:	2b39      	cmp	r3, #57	; 0x39
 8007eb6:	d0ee      	beq.n	8007e96 <_dtoa_r+0xabe>
 8007eb8:	3301      	adds	r3, #1
 8007eba:	e7c9      	b.n	8007e50 <_dtoa_r+0xa78>
 8007ebc:	9a02      	ldr	r2, [sp, #8]
 8007ebe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007ec0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ec4:	428a      	cmp	r2, r1
 8007ec6:	d02a      	beq.n	8007f1e <_dtoa_r+0xb46>
 8007ec8:	4651      	mov	r1, sl
 8007eca:	2300      	movs	r3, #0
 8007ecc:	220a      	movs	r2, #10
 8007ece:	4628      	mov	r0, r5
 8007ed0:	f000 f9f4 	bl	80082bc <__multadd>
 8007ed4:	45b0      	cmp	r8, r6
 8007ed6:	4682      	mov	sl, r0
 8007ed8:	f04f 0300 	mov.w	r3, #0
 8007edc:	f04f 020a 	mov.w	r2, #10
 8007ee0:	4641      	mov	r1, r8
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	d107      	bne.n	8007ef6 <_dtoa_r+0xb1e>
 8007ee6:	f000 f9e9 	bl	80082bc <__multadd>
 8007eea:	4680      	mov	r8, r0
 8007eec:	4606      	mov	r6, r0
 8007eee:	9b02      	ldr	r3, [sp, #8]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	9302      	str	r3, [sp, #8]
 8007ef4:	e777      	b.n	8007de6 <_dtoa_r+0xa0e>
 8007ef6:	f000 f9e1 	bl	80082bc <__multadd>
 8007efa:	4631      	mov	r1, r6
 8007efc:	4680      	mov	r8, r0
 8007efe:	2300      	movs	r3, #0
 8007f00:	220a      	movs	r2, #10
 8007f02:	4628      	mov	r0, r5
 8007f04:	f000 f9da 	bl	80082bc <__multadd>
 8007f08:	4606      	mov	r6, r0
 8007f0a:	e7f0      	b.n	8007eee <_dtoa_r+0xb16>
 8007f0c:	f1bb 0f00 	cmp.w	fp, #0
 8007f10:	bfcc      	ite	gt
 8007f12:	465f      	movgt	r7, fp
 8007f14:	2701      	movle	r7, #1
 8007f16:	f04f 0800 	mov.w	r8, #0
 8007f1a:	9a08      	ldr	r2, [sp, #32]
 8007f1c:	4417      	add	r7, r2
 8007f1e:	4651      	mov	r1, sl
 8007f20:	2201      	movs	r2, #1
 8007f22:	4628      	mov	r0, r5
 8007f24:	9302      	str	r3, [sp, #8]
 8007f26:	f000 fb75 	bl	8008614 <__lshift>
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	4682      	mov	sl, r0
 8007f2e:	f000 fbdd 	bl	80086ec <__mcmp>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	dcb2      	bgt.n	8007e9c <_dtoa_r+0xac4>
 8007f36:	d102      	bne.n	8007f3e <_dtoa_r+0xb66>
 8007f38:	9b02      	ldr	r3, [sp, #8]
 8007f3a:	07db      	lsls	r3, r3, #31
 8007f3c:	d4ae      	bmi.n	8007e9c <_dtoa_r+0xac4>
 8007f3e:	463b      	mov	r3, r7
 8007f40:	461f      	mov	r7, r3
 8007f42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f46:	2a30      	cmp	r2, #48	; 0x30
 8007f48:	d0fa      	beq.n	8007f40 <_dtoa_r+0xb68>
 8007f4a:	e6fb      	b.n	8007d44 <_dtoa_r+0x96c>
 8007f4c:	9a08      	ldr	r2, [sp, #32]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d1a5      	bne.n	8007e9e <_dtoa_r+0xac6>
 8007f52:	2331      	movs	r3, #49	; 0x31
 8007f54:	f109 0901 	add.w	r9, r9, #1
 8007f58:	7013      	strb	r3, [r2, #0]
 8007f5a:	e6f3      	b.n	8007d44 <_dtoa_r+0x96c>
 8007f5c:	4b13      	ldr	r3, [pc, #76]	; (8007fac <_dtoa_r+0xbd4>)
 8007f5e:	f7ff baa7 	b.w	80074b0 <_dtoa_r+0xd8>
 8007f62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f47f aa80 	bne.w	800746a <_dtoa_r+0x92>
 8007f6a:	4b11      	ldr	r3, [pc, #68]	; (8007fb0 <_dtoa_r+0xbd8>)
 8007f6c:	f7ff baa0 	b.w	80074b0 <_dtoa_r+0xd8>
 8007f70:	f1bb 0f00 	cmp.w	fp, #0
 8007f74:	dc03      	bgt.n	8007f7e <_dtoa_r+0xba6>
 8007f76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	f73f aecc 	bgt.w	8007d16 <_dtoa_r+0x93e>
 8007f7e:	9f08      	ldr	r7, [sp, #32]
 8007f80:	4621      	mov	r1, r4
 8007f82:	4650      	mov	r0, sl
 8007f84:	f7ff f99a 	bl	80072bc <quorem>
 8007f88:	9a08      	ldr	r2, [sp, #32]
 8007f8a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007f8e:	f807 3b01 	strb.w	r3, [r7], #1
 8007f92:	1aba      	subs	r2, r7, r2
 8007f94:	4593      	cmp	fp, r2
 8007f96:	ddb9      	ble.n	8007f0c <_dtoa_r+0xb34>
 8007f98:	4651      	mov	r1, sl
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	220a      	movs	r2, #10
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 f98c 	bl	80082bc <__multadd>
 8007fa4:	4682      	mov	sl, r0
 8007fa6:	e7eb      	b.n	8007f80 <_dtoa_r+0xba8>
 8007fa8:	08011da7 	.word	0x08011da7
 8007fac:	08011d00 	.word	0x08011d00
 8007fb0:	08011d24 	.word	0x08011d24

08007fb4 <std>:
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	b510      	push	{r4, lr}
 8007fb8:	4604      	mov	r4, r0
 8007fba:	e9c0 3300 	strd	r3, r3, [r0]
 8007fbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fc2:	6083      	str	r3, [r0, #8]
 8007fc4:	8181      	strh	r1, [r0, #12]
 8007fc6:	6643      	str	r3, [r0, #100]	; 0x64
 8007fc8:	81c2      	strh	r2, [r0, #14]
 8007fca:	6183      	str	r3, [r0, #24]
 8007fcc:	4619      	mov	r1, r3
 8007fce:	2208      	movs	r2, #8
 8007fd0:	305c      	adds	r0, #92	; 0x5c
 8007fd2:	f7fe fcf3 	bl	80069bc <memset>
 8007fd6:	4b05      	ldr	r3, [pc, #20]	; (8007fec <std+0x38>)
 8007fd8:	6224      	str	r4, [r4, #32]
 8007fda:	6263      	str	r3, [r4, #36]	; 0x24
 8007fdc:	4b04      	ldr	r3, [pc, #16]	; (8007ff0 <std+0x3c>)
 8007fde:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fe0:	4b04      	ldr	r3, [pc, #16]	; (8007ff4 <std+0x40>)
 8007fe2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fe4:	4b04      	ldr	r3, [pc, #16]	; (8007ff8 <std+0x44>)
 8007fe6:	6323      	str	r3, [r4, #48]	; 0x30
 8007fe8:	bd10      	pop	{r4, pc}
 8007fea:	bf00      	nop
 8007fec:	08008d35 	.word	0x08008d35
 8007ff0:	08008d57 	.word	0x08008d57
 8007ff4:	08008d8f 	.word	0x08008d8f
 8007ff8:	08008db3 	.word	0x08008db3

08007ffc <_cleanup_r>:
 8007ffc:	4901      	ldr	r1, [pc, #4]	; (8008004 <_cleanup_r+0x8>)
 8007ffe:	f000 b8af 	b.w	8008160 <_fwalk_reent>
 8008002:	bf00      	nop
 8008004:	080090c9 	.word	0x080090c9

08008008 <__sfmoreglue>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	2568      	movs	r5, #104	; 0x68
 800800c:	1e4a      	subs	r2, r1, #1
 800800e:	4355      	muls	r5, r2
 8008010:	460e      	mov	r6, r1
 8008012:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008016:	f000 fccb 	bl	80089b0 <_malloc_r>
 800801a:	4604      	mov	r4, r0
 800801c:	b140      	cbz	r0, 8008030 <__sfmoreglue+0x28>
 800801e:	2100      	movs	r1, #0
 8008020:	e9c0 1600 	strd	r1, r6, [r0]
 8008024:	300c      	adds	r0, #12
 8008026:	60a0      	str	r0, [r4, #8]
 8008028:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800802c:	f7fe fcc6 	bl	80069bc <memset>
 8008030:	4620      	mov	r0, r4
 8008032:	bd70      	pop	{r4, r5, r6, pc}

08008034 <__sfp_lock_acquire>:
 8008034:	4801      	ldr	r0, [pc, #4]	; (800803c <__sfp_lock_acquire+0x8>)
 8008036:	f000 b8b8 	b.w	80081aa <__retarget_lock_acquire_recursive>
 800803a:	bf00      	nop
 800803c:	20000274 	.word	0x20000274

08008040 <__sfp_lock_release>:
 8008040:	4801      	ldr	r0, [pc, #4]	; (8008048 <__sfp_lock_release+0x8>)
 8008042:	f000 b8b3 	b.w	80081ac <__retarget_lock_release_recursive>
 8008046:	bf00      	nop
 8008048:	20000274 	.word	0x20000274

0800804c <__sinit_lock_acquire>:
 800804c:	4801      	ldr	r0, [pc, #4]	; (8008054 <__sinit_lock_acquire+0x8>)
 800804e:	f000 b8ac 	b.w	80081aa <__retarget_lock_acquire_recursive>
 8008052:	bf00      	nop
 8008054:	2000026f 	.word	0x2000026f

08008058 <__sinit_lock_release>:
 8008058:	4801      	ldr	r0, [pc, #4]	; (8008060 <__sinit_lock_release+0x8>)
 800805a:	f000 b8a7 	b.w	80081ac <__retarget_lock_release_recursive>
 800805e:	bf00      	nop
 8008060:	2000026f 	.word	0x2000026f

08008064 <__sinit>:
 8008064:	b510      	push	{r4, lr}
 8008066:	4604      	mov	r4, r0
 8008068:	f7ff fff0 	bl	800804c <__sinit_lock_acquire>
 800806c:	69a3      	ldr	r3, [r4, #24]
 800806e:	b11b      	cbz	r3, 8008078 <__sinit+0x14>
 8008070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008074:	f7ff bff0 	b.w	8008058 <__sinit_lock_release>
 8008078:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800807c:	6523      	str	r3, [r4, #80]	; 0x50
 800807e:	4b13      	ldr	r3, [pc, #76]	; (80080cc <__sinit+0x68>)
 8008080:	4a13      	ldr	r2, [pc, #76]	; (80080d0 <__sinit+0x6c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	62a2      	str	r2, [r4, #40]	; 0x28
 8008086:	42a3      	cmp	r3, r4
 8008088:	bf08      	it	eq
 800808a:	2301      	moveq	r3, #1
 800808c:	4620      	mov	r0, r4
 800808e:	bf08      	it	eq
 8008090:	61a3      	streq	r3, [r4, #24]
 8008092:	f000 f81f 	bl	80080d4 <__sfp>
 8008096:	6060      	str	r0, [r4, #4]
 8008098:	4620      	mov	r0, r4
 800809a:	f000 f81b 	bl	80080d4 <__sfp>
 800809e:	60a0      	str	r0, [r4, #8]
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 f817 	bl	80080d4 <__sfp>
 80080a6:	2200      	movs	r2, #0
 80080a8:	2104      	movs	r1, #4
 80080aa:	60e0      	str	r0, [r4, #12]
 80080ac:	6860      	ldr	r0, [r4, #4]
 80080ae:	f7ff ff81 	bl	8007fb4 <std>
 80080b2:	2201      	movs	r2, #1
 80080b4:	2109      	movs	r1, #9
 80080b6:	68a0      	ldr	r0, [r4, #8]
 80080b8:	f7ff ff7c 	bl	8007fb4 <std>
 80080bc:	2202      	movs	r2, #2
 80080be:	2112      	movs	r1, #18
 80080c0:	68e0      	ldr	r0, [r4, #12]
 80080c2:	f7ff ff77 	bl	8007fb4 <std>
 80080c6:	2301      	movs	r3, #1
 80080c8:	61a3      	str	r3, [r4, #24]
 80080ca:	e7d1      	b.n	8008070 <__sinit+0xc>
 80080cc:	08011cec 	.word	0x08011cec
 80080d0:	08007ffd 	.word	0x08007ffd

080080d4 <__sfp>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	4607      	mov	r7, r0
 80080d8:	f7ff ffac 	bl	8008034 <__sfp_lock_acquire>
 80080dc:	4b1e      	ldr	r3, [pc, #120]	; (8008158 <__sfp+0x84>)
 80080de:	681e      	ldr	r6, [r3, #0]
 80080e0:	69b3      	ldr	r3, [r6, #24]
 80080e2:	b913      	cbnz	r3, 80080ea <__sfp+0x16>
 80080e4:	4630      	mov	r0, r6
 80080e6:	f7ff ffbd 	bl	8008064 <__sinit>
 80080ea:	3648      	adds	r6, #72	; 0x48
 80080ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	d503      	bpl.n	80080fc <__sfp+0x28>
 80080f4:	6833      	ldr	r3, [r6, #0]
 80080f6:	b30b      	cbz	r3, 800813c <__sfp+0x68>
 80080f8:	6836      	ldr	r6, [r6, #0]
 80080fa:	e7f7      	b.n	80080ec <__sfp+0x18>
 80080fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008100:	b9d5      	cbnz	r5, 8008138 <__sfp+0x64>
 8008102:	4b16      	ldr	r3, [pc, #88]	; (800815c <__sfp+0x88>)
 8008104:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008108:	60e3      	str	r3, [r4, #12]
 800810a:	6665      	str	r5, [r4, #100]	; 0x64
 800810c:	f000 f84c 	bl	80081a8 <__retarget_lock_init_recursive>
 8008110:	f7ff ff96 	bl	8008040 <__sfp_lock_release>
 8008114:	2208      	movs	r2, #8
 8008116:	4629      	mov	r1, r5
 8008118:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800811c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008120:	6025      	str	r5, [r4, #0]
 8008122:	61a5      	str	r5, [r4, #24]
 8008124:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008128:	f7fe fc48 	bl	80069bc <memset>
 800812c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008130:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008134:	4620      	mov	r0, r4
 8008136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008138:	3468      	adds	r4, #104	; 0x68
 800813a:	e7d9      	b.n	80080f0 <__sfp+0x1c>
 800813c:	2104      	movs	r1, #4
 800813e:	4638      	mov	r0, r7
 8008140:	f7ff ff62 	bl	8008008 <__sfmoreglue>
 8008144:	4604      	mov	r4, r0
 8008146:	6030      	str	r0, [r6, #0]
 8008148:	2800      	cmp	r0, #0
 800814a:	d1d5      	bne.n	80080f8 <__sfp+0x24>
 800814c:	f7ff ff78 	bl	8008040 <__sfp_lock_release>
 8008150:	230c      	movs	r3, #12
 8008152:	603b      	str	r3, [r7, #0]
 8008154:	e7ee      	b.n	8008134 <__sfp+0x60>
 8008156:	bf00      	nop
 8008158:	08011cec 	.word	0x08011cec
 800815c:	ffff0001 	.word	0xffff0001

08008160 <_fwalk_reent>:
 8008160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008164:	4606      	mov	r6, r0
 8008166:	4688      	mov	r8, r1
 8008168:	2700      	movs	r7, #0
 800816a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800816e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008172:	f1b9 0901 	subs.w	r9, r9, #1
 8008176:	d505      	bpl.n	8008184 <_fwalk_reent+0x24>
 8008178:	6824      	ldr	r4, [r4, #0]
 800817a:	2c00      	cmp	r4, #0
 800817c:	d1f7      	bne.n	800816e <_fwalk_reent+0xe>
 800817e:	4638      	mov	r0, r7
 8008180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008184:	89ab      	ldrh	r3, [r5, #12]
 8008186:	2b01      	cmp	r3, #1
 8008188:	d907      	bls.n	800819a <_fwalk_reent+0x3a>
 800818a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800818e:	3301      	adds	r3, #1
 8008190:	d003      	beq.n	800819a <_fwalk_reent+0x3a>
 8008192:	4629      	mov	r1, r5
 8008194:	4630      	mov	r0, r6
 8008196:	47c0      	blx	r8
 8008198:	4307      	orrs	r7, r0
 800819a:	3568      	adds	r5, #104	; 0x68
 800819c:	e7e9      	b.n	8008172 <_fwalk_reent+0x12>
	...

080081a0 <_localeconv_r>:
 80081a0:	4800      	ldr	r0, [pc, #0]	; (80081a4 <_localeconv_r+0x4>)
 80081a2:	4770      	bx	lr
 80081a4:	20000164 	.word	0x20000164

080081a8 <__retarget_lock_init_recursive>:
 80081a8:	4770      	bx	lr

080081aa <__retarget_lock_acquire_recursive>:
 80081aa:	4770      	bx	lr

080081ac <__retarget_lock_release_recursive>:
 80081ac:	4770      	bx	lr
	...

080081b0 <malloc>:
 80081b0:	4b02      	ldr	r3, [pc, #8]	; (80081bc <malloc+0xc>)
 80081b2:	4601      	mov	r1, r0
 80081b4:	6818      	ldr	r0, [r3, #0]
 80081b6:	f000 bbfb 	b.w	80089b0 <_malloc_r>
 80081ba:	bf00      	nop
 80081bc:	20000010 	.word	0x20000010

080081c0 <memchr>:
 80081c0:	4603      	mov	r3, r0
 80081c2:	b510      	push	{r4, lr}
 80081c4:	b2c9      	uxtb	r1, r1
 80081c6:	4402      	add	r2, r0
 80081c8:	4293      	cmp	r3, r2
 80081ca:	4618      	mov	r0, r3
 80081cc:	d101      	bne.n	80081d2 <memchr+0x12>
 80081ce:	2000      	movs	r0, #0
 80081d0:	e003      	b.n	80081da <memchr+0x1a>
 80081d2:	7804      	ldrb	r4, [r0, #0]
 80081d4:	3301      	adds	r3, #1
 80081d6:	428c      	cmp	r4, r1
 80081d8:	d1f6      	bne.n	80081c8 <memchr+0x8>
 80081da:	bd10      	pop	{r4, pc}

080081dc <memcpy>:
 80081dc:	440a      	add	r2, r1
 80081de:	4291      	cmp	r1, r2
 80081e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80081e4:	d100      	bne.n	80081e8 <memcpy+0xc>
 80081e6:	4770      	bx	lr
 80081e8:	b510      	push	{r4, lr}
 80081ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ee:	4291      	cmp	r1, r2
 80081f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081f4:	d1f9      	bne.n	80081ea <memcpy+0xe>
 80081f6:	bd10      	pop	{r4, pc}

080081f8 <_Balloc>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081fc:	4604      	mov	r4, r0
 80081fe:	460d      	mov	r5, r1
 8008200:	b976      	cbnz	r6, 8008220 <_Balloc+0x28>
 8008202:	2010      	movs	r0, #16
 8008204:	f7ff ffd4 	bl	80081b0 <malloc>
 8008208:	4602      	mov	r2, r0
 800820a:	6260      	str	r0, [r4, #36]	; 0x24
 800820c:	b920      	cbnz	r0, 8008218 <_Balloc+0x20>
 800820e:	2166      	movs	r1, #102	; 0x66
 8008210:	4b17      	ldr	r3, [pc, #92]	; (8008270 <_Balloc+0x78>)
 8008212:	4818      	ldr	r0, [pc, #96]	; (8008274 <_Balloc+0x7c>)
 8008214:	f000 fea4 	bl	8008f60 <__assert_func>
 8008218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800821c:	6006      	str	r6, [r0, #0]
 800821e:	60c6      	str	r6, [r0, #12]
 8008220:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008222:	68f3      	ldr	r3, [r6, #12]
 8008224:	b183      	cbz	r3, 8008248 <_Balloc+0x50>
 8008226:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800822e:	b9b8      	cbnz	r0, 8008260 <_Balloc+0x68>
 8008230:	2101      	movs	r1, #1
 8008232:	fa01 f605 	lsl.w	r6, r1, r5
 8008236:	1d72      	adds	r2, r6, #5
 8008238:	4620      	mov	r0, r4
 800823a:	0092      	lsls	r2, r2, #2
 800823c:	f000 fb5e 	bl	80088fc <_calloc_r>
 8008240:	b160      	cbz	r0, 800825c <_Balloc+0x64>
 8008242:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008246:	e00e      	b.n	8008266 <_Balloc+0x6e>
 8008248:	2221      	movs	r2, #33	; 0x21
 800824a:	2104      	movs	r1, #4
 800824c:	4620      	mov	r0, r4
 800824e:	f000 fb55 	bl	80088fc <_calloc_r>
 8008252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008254:	60f0      	str	r0, [r6, #12]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1e4      	bne.n	8008226 <_Balloc+0x2e>
 800825c:	2000      	movs	r0, #0
 800825e:	bd70      	pop	{r4, r5, r6, pc}
 8008260:	6802      	ldr	r2, [r0, #0]
 8008262:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008266:	2300      	movs	r3, #0
 8008268:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800826c:	e7f7      	b.n	800825e <_Balloc+0x66>
 800826e:	bf00      	nop
 8008270:	08011d31 	.word	0x08011d31
 8008274:	08011e18 	.word	0x08011e18

08008278 <_Bfree>:
 8008278:	b570      	push	{r4, r5, r6, lr}
 800827a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800827c:	4605      	mov	r5, r0
 800827e:	460c      	mov	r4, r1
 8008280:	b976      	cbnz	r6, 80082a0 <_Bfree+0x28>
 8008282:	2010      	movs	r0, #16
 8008284:	f7ff ff94 	bl	80081b0 <malloc>
 8008288:	4602      	mov	r2, r0
 800828a:	6268      	str	r0, [r5, #36]	; 0x24
 800828c:	b920      	cbnz	r0, 8008298 <_Bfree+0x20>
 800828e:	218a      	movs	r1, #138	; 0x8a
 8008290:	4b08      	ldr	r3, [pc, #32]	; (80082b4 <_Bfree+0x3c>)
 8008292:	4809      	ldr	r0, [pc, #36]	; (80082b8 <_Bfree+0x40>)
 8008294:	f000 fe64 	bl	8008f60 <__assert_func>
 8008298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800829c:	6006      	str	r6, [r0, #0]
 800829e:	60c6      	str	r6, [r0, #12]
 80082a0:	b13c      	cbz	r4, 80082b2 <_Bfree+0x3a>
 80082a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082a4:	6862      	ldr	r2, [r4, #4]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082ac:	6021      	str	r1, [r4, #0]
 80082ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082b2:	bd70      	pop	{r4, r5, r6, pc}
 80082b4:	08011d31 	.word	0x08011d31
 80082b8:	08011e18 	.word	0x08011e18

080082bc <__multadd>:
 80082bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c0:	4698      	mov	r8, r3
 80082c2:	460c      	mov	r4, r1
 80082c4:	2300      	movs	r3, #0
 80082c6:	690e      	ldr	r6, [r1, #16]
 80082c8:	4607      	mov	r7, r0
 80082ca:	f101 0014 	add.w	r0, r1, #20
 80082ce:	6805      	ldr	r5, [r0, #0]
 80082d0:	3301      	adds	r3, #1
 80082d2:	b2a9      	uxth	r1, r5
 80082d4:	fb02 8101 	mla	r1, r2, r1, r8
 80082d8:	0c2d      	lsrs	r5, r5, #16
 80082da:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80082de:	fb02 c505 	mla	r5, r2, r5, ip
 80082e2:	b289      	uxth	r1, r1
 80082e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80082e8:	429e      	cmp	r6, r3
 80082ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80082ee:	f840 1b04 	str.w	r1, [r0], #4
 80082f2:	dcec      	bgt.n	80082ce <__multadd+0x12>
 80082f4:	f1b8 0f00 	cmp.w	r8, #0
 80082f8:	d022      	beq.n	8008340 <__multadd+0x84>
 80082fa:	68a3      	ldr	r3, [r4, #8]
 80082fc:	42b3      	cmp	r3, r6
 80082fe:	dc19      	bgt.n	8008334 <__multadd+0x78>
 8008300:	6861      	ldr	r1, [r4, #4]
 8008302:	4638      	mov	r0, r7
 8008304:	3101      	adds	r1, #1
 8008306:	f7ff ff77 	bl	80081f8 <_Balloc>
 800830a:	4605      	mov	r5, r0
 800830c:	b928      	cbnz	r0, 800831a <__multadd+0x5e>
 800830e:	4602      	mov	r2, r0
 8008310:	21b5      	movs	r1, #181	; 0xb5
 8008312:	4b0d      	ldr	r3, [pc, #52]	; (8008348 <__multadd+0x8c>)
 8008314:	480d      	ldr	r0, [pc, #52]	; (800834c <__multadd+0x90>)
 8008316:	f000 fe23 	bl	8008f60 <__assert_func>
 800831a:	6922      	ldr	r2, [r4, #16]
 800831c:	f104 010c 	add.w	r1, r4, #12
 8008320:	3202      	adds	r2, #2
 8008322:	0092      	lsls	r2, r2, #2
 8008324:	300c      	adds	r0, #12
 8008326:	f7ff ff59 	bl	80081dc <memcpy>
 800832a:	4621      	mov	r1, r4
 800832c:	4638      	mov	r0, r7
 800832e:	f7ff ffa3 	bl	8008278 <_Bfree>
 8008332:	462c      	mov	r4, r5
 8008334:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008338:	3601      	adds	r6, #1
 800833a:	f8c3 8014 	str.w	r8, [r3, #20]
 800833e:	6126      	str	r6, [r4, #16]
 8008340:	4620      	mov	r0, r4
 8008342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008346:	bf00      	nop
 8008348:	08011da7 	.word	0x08011da7
 800834c:	08011e18 	.word	0x08011e18

08008350 <__hi0bits>:
 8008350:	0c02      	lsrs	r2, r0, #16
 8008352:	0412      	lsls	r2, r2, #16
 8008354:	4603      	mov	r3, r0
 8008356:	b9ca      	cbnz	r2, 800838c <__hi0bits+0x3c>
 8008358:	0403      	lsls	r3, r0, #16
 800835a:	2010      	movs	r0, #16
 800835c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008360:	bf04      	itt	eq
 8008362:	021b      	lsleq	r3, r3, #8
 8008364:	3008      	addeq	r0, #8
 8008366:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800836a:	bf04      	itt	eq
 800836c:	011b      	lsleq	r3, r3, #4
 800836e:	3004      	addeq	r0, #4
 8008370:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008374:	bf04      	itt	eq
 8008376:	009b      	lsleq	r3, r3, #2
 8008378:	3002      	addeq	r0, #2
 800837a:	2b00      	cmp	r3, #0
 800837c:	db05      	blt.n	800838a <__hi0bits+0x3a>
 800837e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008382:	f100 0001 	add.w	r0, r0, #1
 8008386:	bf08      	it	eq
 8008388:	2020      	moveq	r0, #32
 800838a:	4770      	bx	lr
 800838c:	2000      	movs	r0, #0
 800838e:	e7e5      	b.n	800835c <__hi0bits+0xc>

08008390 <__lo0bits>:
 8008390:	6803      	ldr	r3, [r0, #0]
 8008392:	4602      	mov	r2, r0
 8008394:	f013 0007 	ands.w	r0, r3, #7
 8008398:	d00b      	beq.n	80083b2 <__lo0bits+0x22>
 800839a:	07d9      	lsls	r1, r3, #31
 800839c:	d422      	bmi.n	80083e4 <__lo0bits+0x54>
 800839e:	0798      	lsls	r0, r3, #30
 80083a0:	bf49      	itett	mi
 80083a2:	085b      	lsrmi	r3, r3, #1
 80083a4:	089b      	lsrpl	r3, r3, #2
 80083a6:	2001      	movmi	r0, #1
 80083a8:	6013      	strmi	r3, [r2, #0]
 80083aa:	bf5c      	itt	pl
 80083ac:	2002      	movpl	r0, #2
 80083ae:	6013      	strpl	r3, [r2, #0]
 80083b0:	4770      	bx	lr
 80083b2:	b299      	uxth	r1, r3
 80083b4:	b909      	cbnz	r1, 80083ba <__lo0bits+0x2a>
 80083b6:	2010      	movs	r0, #16
 80083b8:	0c1b      	lsrs	r3, r3, #16
 80083ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80083be:	bf04      	itt	eq
 80083c0:	0a1b      	lsreq	r3, r3, #8
 80083c2:	3008      	addeq	r0, #8
 80083c4:	0719      	lsls	r1, r3, #28
 80083c6:	bf04      	itt	eq
 80083c8:	091b      	lsreq	r3, r3, #4
 80083ca:	3004      	addeq	r0, #4
 80083cc:	0799      	lsls	r1, r3, #30
 80083ce:	bf04      	itt	eq
 80083d0:	089b      	lsreq	r3, r3, #2
 80083d2:	3002      	addeq	r0, #2
 80083d4:	07d9      	lsls	r1, r3, #31
 80083d6:	d403      	bmi.n	80083e0 <__lo0bits+0x50>
 80083d8:	085b      	lsrs	r3, r3, #1
 80083da:	f100 0001 	add.w	r0, r0, #1
 80083de:	d003      	beq.n	80083e8 <__lo0bits+0x58>
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	4770      	bx	lr
 80083e4:	2000      	movs	r0, #0
 80083e6:	4770      	bx	lr
 80083e8:	2020      	movs	r0, #32
 80083ea:	4770      	bx	lr

080083ec <__i2b>:
 80083ec:	b510      	push	{r4, lr}
 80083ee:	460c      	mov	r4, r1
 80083f0:	2101      	movs	r1, #1
 80083f2:	f7ff ff01 	bl	80081f8 <_Balloc>
 80083f6:	4602      	mov	r2, r0
 80083f8:	b928      	cbnz	r0, 8008406 <__i2b+0x1a>
 80083fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80083fe:	4b04      	ldr	r3, [pc, #16]	; (8008410 <__i2b+0x24>)
 8008400:	4804      	ldr	r0, [pc, #16]	; (8008414 <__i2b+0x28>)
 8008402:	f000 fdad 	bl	8008f60 <__assert_func>
 8008406:	2301      	movs	r3, #1
 8008408:	6144      	str	r4, [r0, #20]
 800840a:	6103      	str	r3, [r0, #16]
 800840c:	bd10      	pop	{r4, pc}
 800840e:	bf00      	nop
 8008410:	08011da7 	.word	0x08011da7
 8008414:	08011e18 	.word	0x08011e18

08008418 <__multiply>:
 8008418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841c:	4614      	mov	r4, r2
 800841e:	690a      	ldr	r2, [r1, #16]
 8008420:	6923      	ldr	r3, [r4, #16]
 8008422:	460d      	mov	r5, r1
 8008424:	429a      	cmp	r2, r3
 8008426:	bfbe      	ittt	lt
 8008428:	460b      	movlt	r3, r1
 800842a:	4625      	movlt	r5, r4
 800842c:	461c      	movlt	r4, r3
 800842e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008432:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008436:	68ab      	ldr	r3, [r5, #8]
 8008438:	6869      	ldr	r1, [r5, #4]
 800843a:	eb0a 0709 	add.w	r7, sl, r9
 800843e:	42bb      	cmp	r3, r7
 8008440:	b085      	sub	sp, #20
 8008442:	bfb8      	it	lt
 8008444:	3101      	addlt	r1, #1
 8008446:	f7ff fed7 	bl	80081f8 <_Balloc>
 800844a:	b930      	cbnz	r0, 800845a <__multiply+0x42>
 800844c:	4602      	mov	r2, r0
 800844e:	f240 115d 	movw	r1, #349	; 0x15d
 8008452:	4b41      	ldr	r3, [pc, #260]	; (8008558 <__multiply+0x140>)
 8008454:	4841      	ldr	r0, [pc, #260]	; (800855c <__multiply+0x144>)
 8008456:	f000 fd83 	bl	8008f60 <__assert_func>
 800845a:	f100 0614 	add.w	r6, r0, #20
 800845e:	4633      	mov	r3, r6
 8008460:	2200      	movs	r2, #0
 8008462:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008466:	4543      	cmp	r3, r8
 8008468:	d31e      	bcc.n	80084a8 <__multiply+0x90>
 800846a:	f105 0c14 	add.w	ip, r5, #20
 800846e:	f104 0314 	add.w	r3, r4, #20
 8008472:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008476:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800847a:	9202      	str	r2, [sp, #8]
 800847c:	ebac 0205 	sub.w	r2, ip, r5
 8008480:	3a15      	subs	r2, #21
 8008482:	f022 0203 	bic.w	r2, r2, #3
 8008486:	3204      	adds	r2, #4
 8008488:	f105 0115 	add.w	r1, r5, #21
 800848c:	458c      	cmp	ip, r1
 800848e:	bf38      	it	cc
 8008490:	2204      	movcc	r2, #4
 8008492:	9201      	str	r2, [sp, #4]
 8008494:	9a02      	ldr	r2, [sp, #8]
 8008496:	9303      	str	r3, [sp, #12]
 8008498:	429a      	cmp	r2, r3
 800849a:	d808      	bhi.n	80084ae <__multiply+0x96>
 800849c:	2f00      	cmp	r7, #0
 800849e:	dc55      	bgt.n	800854c <__multiply+0x134>
 80084a0:	6107      	str	r7, [r0, #16]
 80084a2:	b005      	add	sp, #20
 80084a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084a8:	f843 2b04 	str.w	r2, [r3], #4
 80084ac:	e7db      	b.n	8008466 <__multiply+0x4e>
 80084ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80084b2:	f1ba 0f00 	cmp.w	sl, #0
 80084b6:	d020      	beq.n	80084fa <__multiply+0xe2>
 80084b8:	46b1      	mov	r9, r6
 80084ba:	2200      	movs	r2, #0
 80084bc:	f105 0e14 	add.w	lr, r5, #20
 80084c0:	f85e 4b04 	ldr.w	r4, [lr], #4
 80084c4:	f8d9 b000 	ldr.w	fp, [r9]
 80084c8:	b2a1      	uxth	r1, r4
 80084ca:	fa1f fb8b 	uxth.w	fp, fp
 80084ce:	fb0a b101 	mla	r1, sl, r1, fp
 80084d2:	4411      	add	r1, r2
 80084d4:	f8d9 2000 	ldr.w	r2, [r9]
 80084d8:	0c24      	lsrs	r4, r4, #16
 80084da:	0c12      	lsrs	r2, r2, #16
 80084dc:	fb0a 2404 	mla	r4, sl, r4, r2
 80084e0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80084e4:	b289      	uxth	r1, r1
 80084e6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80084ea:	45f4      	cmp	ip, lr
 80084ec:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80084f0:	f849 1b04 	str.w	r1, [r9], #4
 80084f4:	d8e4      	bhi.n	80084c0 <__multiply+0xa8>
 80084f6:	9901      	ldr	r1, [sp, #4]
 80084f8:	5072      	str	r2, [r6, r1]
 80084fa:	9a03      	ldr	r2, [sp, #12]
 80084fc:	3304      	adds	r3, #4
 80084fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008502:	f1b9 0f00 	cmp.w	r9, #0
 8008506:	d01f      	beq.n	8008548 <__multiply+0x130>
 8008508:	46b6      	mov	lr, r6
 800850a:	f04f 0a00 	mov.w	sl, #0
 800850e:	6834      	ldr	r4, [r6, #0]
 8008510:	f105 0114 	add.w	r1, r5, #20
 8008514:	880a      	ldrh	r2, [r1, #0]
 8008516:	f8be b002 	ldrh.w	fp, [lr, #2]
 800851a:	b2a4      	uxth	r4, r4
 800851c:	fb09 b202 	mla	r2, r9, r2, fp
 8008520:	4492      	add	sl, r2
 8008522:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008526:	f84e 4b04 	str.w	r4, [lr], #4
 800852a:	f851 4b04 	ldr.w	r4, [r1], #4
 800852e:	f8be 2000 	ldrh.w	r2, [lr]
 8008532:	0c24      	lsrs	r4, r4, #16
 8008534:	fb09 2404 	mla	r4, r9, r4, r2
 8008538:	458c      	cmp	ip, r1
 800853a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800853e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008542:	d8e7      	bhi.n	8008514 <__multiply+0xfc>
 8008544:	9a01      	ldr	r2, [sp, #4]
 8008546:	50b4      	str	r4, [r6, r2]
 8008548:	3604      	adds	r6, #4
 800854a:	e7a3      	b.n	8008494 <__multiply+0x7c>
 800854c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1a5      	bne.n	80084a0 <__multiply+0x88>
 8008554:	3f01      	subs	r7, #1
 8008556:	e7a1      	b.n	800849c <__multiply+0x84>
 8008558:	08011da7 	.word	0x08011da7
 800855c:	08011e18 	.word	0x08011e18

08008560 <__pow5mult>:
 8008560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008564:	4615      	mov	r5, r2
 8008566:	f012 0203 	ands.w	r2, r2, #3
 800856a:	4606      	mov	r6, r0
 800856c:	460f      	mov	r7, r1
 800856e:	d007      	beq.n	8008580 <__pow5mult+0x20>
 8008570:	4c25      	ldr	r4, [pc, #148]	; (8008608 <__pow5mult+0xa8>)
 8008572:	3a01      	subs	r2, #1
 8008574:	2300      	movs	r3, #0
 8008576:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800857a:	f7ff fe9f 	bl	80082bc <__multadd>
 800857e:	4607      	mov	r7, r0
 8008580:	10ad      	asrs	r5, r5, #2
 8008582:	d03d      	beq.n	8008600 <__pow5mult+0xa0>
 8008584:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008586:	b97c      	cbnz	r4, 80085a8 <__pow5mult+0x48>
 8008588:	2010      	movs	r0, #16
 800858a:	f7ff fe11 	bl	80081b0 <malloc>
 800858e:	4602      	mov	r2, r0
 8008590:	6270      	str	r0, [r6, #36]	; 0x24
 8008592:	b928      	cbnz	r0, 80085a0 <__pow5mult+0x40>
 8008594:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008598:	4b1c      	ldr	r3, [pc, #112]	; (800860c <__pow5mult+0xac>)
 800859a:	481d      	ldr	r0, [pc, #116]	; (8008610 <__pow5mult+0xb0>)
 800859c:	f000 fce0 	bl	8008f60 <__assert_func>
 80085a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085a4:	6004      	str	r4, [r0, #0]
 80085a6:	60c4      	str	r4, [r0, #12]
 80085a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80085ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085b0:	b94c      	cbnz	r4, 80085c6 <__pow5mult+0x66>
 80085b2:	f240 2171 	movw	r1, #625	; 0x271
 80085b6:	4630      	mov	r0, r6
 80085b8:	f7ff ff18 	bl	80083ec <__i2b>
 80085bc:	2300      	movs	r3, #0
 80085be:	4604      	mov	r4, r0
 80085c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80085c4:	6003      	str	r3, [r0, #0]
 80085c6:	f04f 0900 	mov.w	r9, #0
 80085ca:	07eb      	lsls	r3, r5, #31
 80085cc:	d50a      	bpl.n	80085e4 <__pow5mult+0x84>
 80085ce:	4639      	mov	r1, r7
 80085d0:	4622      	mov	r2, r4
 80085d2:	4630      	mov	r0, r6
 80085d4:	f7ff ff20 	bl	8008418 <__multiply>
 80085d8:	4680      	mov	r8, r0
 80085da:	4639      	mov	r1, r7
 80085dc:	4630      	mov	r0, r6
 80085de:	f7ff fe4b 	bl	8008278 <_Bfree>
 80085e2:	4647      	mov	r7, r8
 80085e4:	106d      	asrs	r5, r5, #1
 80085e6:	d00b      	beq.n	8008600 <__pow5mult+0xa0>
 80085e8:	6820      	ldr	r0, [r4, #0]
 80085ea:	b938      	cbnz	r0, 80085fc <__pow5mult+0x9c>
 80085ec:	4622      	mov	r2, r4
 80085ee:	4621      	mov	r1, r4
 80085f0:	4630      	mov	r0, r6
 80085f2:	f7ff ff11 	bl	8008418 <__multiply>
 80085f6:	6020      	str	r0, [r4, #0]
 80085f8:	f8c0 9000 	str.w	r9, [r0]
 80085fc:	4604      	mov	r4, r0
 80085fe:	e7e4      	b.n	80085ca <__pow5mult+0x6a>
 8008600:	4638      	mov	r0, r7
 8008602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008606:	bf00      	nop
 8008608:	08011f68 	.word	0x08011f68
 800860c:	08011d31 	.word	0x08011d31
 8008610:	08011e18 	.word	0x08011e18

08008614 <__lshift>:
 8008614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008618:	460c      	mov	r4, r1
 800861a:	4607      	mov	r7, r0
 800861c:	4691      	mov	r9, r2
 800861e:	6923      	ldr	r3, [r4, #16]
 8008620:	6849      	ldr	r1, [r1, #4]
 8008622:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008626:	68a3      	ldr	r3, [r4, #8]
 8008628:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800862c:	f108 0601 	add.w	r6, r8, #1
 8008630:	42b3      	cmp	r3, r6
 8008632:	db0b      	blt.n	800864c <__lshift+0x38>
 8008634:	4638      	mov	r0, r7
 8008636:	f7ff fddf 	bl	80081f8 <_Balloc>
 800863a:	4605      	mov	r5, r0
 800863c:	b948      	cbnz	r0, 8008652 <__lshift+0x3e>
 800863e:	4602      	mov	r2, r0
 8008640:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008644:	4b27      	ldr	r3, [pc, #156]	; (80086e4 <__lshift+0xd0>)
 8008646:	4828      	ldr	r0, [pc, #160]	; (80086e8 <__lshift+0xd4>)
 8008648:	f000 fc8a 	bl	8008f60 <__assert_func>
 800864c:	3101      	adds	r1, #1
 800864e:	005b      	lsls	r3, r3, #1
 8008650:	e7ee      	b.n	8008630 <__lshift+0x1c>
 8008652:	2300      	movs	r3, #0
 8008654:	f100 0114 	add.w	r1, r0, #20
 8008658:	f100 0210 	add.w	r2, r0, #16
 800865c:	4618      	mov	r0, r3
 800865e:	4553      	cmp	r3, sl
 8008660:	db33      	blt.n	80086ca <__lshift+0xb6>
 8008662:	6920      	ldr	r0, [r4, #16]
 8008664:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008668:	f104 0314 	add.w	r3, r4, #20
 800866c:	f019 091f 	ands.w	r9, r9, #31
 8008670:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008674:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008678:	d02b      	beq.n	80086d2 <__lshift+0xbe>
 800867a:	468a      	mov	sl, r1
 800867c:	2200      	movs	r2, #0
 800867e:	f1c9 0e20 	rsb	lr, r9, #32
 8008682:	6818      	ldr	r0, [r3, #0]
 8008684:	fa00 f009 	lsl.w	r0, r0, r9
 8008688:	4302      	orrs	r2, r0
 800868a:	f84a 2b04 	str.w	r2, [sl], #4
 800868e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008692:	459c      	cmp	ip, r3
 8008694:	fa22 f20e 	lsr.w	r2, r2, lr
 8008698:	d8f3      	bhi.n	8008682 <__lshift+0x6e>
 800869a:	ebac 0304 	sub.w	r3, ip, r4
 800869e:	3b15      	subs	r3, #21
 80086a0:	f023 0303 	bic.w	r3, r3, #3
 80086a4:	3304      	adds	r3, #4
 80086a6:	f104 0015 	add.w	r0, r4, #21
 80086aa:	4584      	cmp	ip, r0
 80086ac:	bf38      	it	cc
 80086ae:	2304      	movcc	r3, #4
 80086b0:	50ca      	str	r2, [r1, r3]
 80086b2:	b10a      	cbz	r2, 80086b8 <__lshift+0xa4>
 80086b4:	f108 0602 	add.w	r6, r8, #2
 80086b8:	3e01      	subs	r6, #1
 80086ba:	4638      	mov	r0, r7
 80086bc:	4621      	mov	r1, r4
 80086be:	612e      	str	r6, [r5, #16]
 80086c0:	f7ff fdda 	bl	8008278 <_Bfree>
 80086c4:	4628      	mov	r0, r5
 80086c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80086ce:	3301      	adds	r3, #1
 80086d0:	e7c5      	b.n	800865e <__lshift+0x4a>
 80086d2:	3904      	subs	r1, #4
 80086d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d8:	459c      	cmp	ip, r3
 80086da:	f841 2f04 	str.w	r2, [r1, #4]!
 80086de:	d8f9      	bhi.n	80086d4 <__lshift+0xc0>
 80086e0:	e7ea      	b.n	80086b8 <__lshift+0xa4>
 80086e2:	bf00      	nop
 80086e4:	08011da7 	.word	0x08011da7
 80086e8:	08011e18 	.word	0x08011e18

080086ec <__mcmp>:
 80086ec:	4603      	mov	r3, r0
 80086ee:	690a      	ldr	r2, [r1, #16]
 80086f0:	6900      	ldr	r0, [r0, #16]
 80086f2:	b530      	push	{r4, r5, lr}
 80086f4:	1a80      	subs	r0, r0, r2
 80086f6:	d10d      	bne.n	8008714 <__mcmp+0x28>
 80086f8:	3314      	adds	r3, #20
 80086fa:	3114      	adds	r1, #20
 80086fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008700:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008704:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008708:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800870c:	4295      	cmp	r5, r2
 800870e:	d002      	beq.n	8008716 <__mcmp+0x2a>
 8008710:	d304      	bcc.n	800871c <__mcmp+0x30>
 8008712:	2001      	movs	r0, #1
 8008714:	bd30      	pop	{r4, r5, pc}
 8008716:	42a3      	cmp	r3, r4
 8008718:	d3f4      	bcc.n	8008704 <__mcmp+0x18>
 800871a:	e7fb      	b.n	8008714 <__mcmp+0x28>
 800871c:	f04f 30ff 	mov.w	r0, #4294967295
 8008720:	e7f8      	b.n	8008714 <__mcmp+0x28>
	...

08008724 <__mdiff>:
 8008724:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008728:	460c      	mov	r4, r1
 800872a:	4606      	mov	r6, r0
 800872c:	4611      	mov	r1, r2
 800872e:	4620      	mov	r0, r4
 8008730:	4692      	mov	sl, r2
 8008732:	f7ff ffdb 	bl	80086ec <__mcmp>
 8008736:	1e05      	subs	r5, r0, #0
 8008738:	d111      	bne.n	800875e <__mdiff+0x3a>
 800873a:	4629      	mov	r1, r5
 800873c:	4630      	mov	r0, r6
 800873e:	f7ff fd5b 	bl	80081f8 <_Balloc>
 8008742:	4602      	mov	r2, r0
 8008744:	b928      	cbnz	r0, 8008752 <__mdiff+0x2e>
 8008746:	f240 2132 	movw	r1, #562	; 0x232
 800874a:	4b3c      	ldr	r3, [pc, #240]	; (800883c <__mdiff+0x118>)
 800874c:	483c      	ldr	r0, [pc, #240]	; (8008840 <__mdiff+0x11c>)
 800874e:	f000 fc07 	bl	8008f60 <__assert_func>
 8008752:	2301      	movs	r3, #1
 8008754:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008758:	4610      	mov	r0, r2
 800875a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800875e:	bfa4      	itt	ge
 8008760:	4653      	movge	r3, sl
 8008762:	46a2      	movge	sl, r4
 8008764:	4630      	mov	r0, r6
 8008766:	f8da 1004 	ldr.w	r1, [sl, #4]
 800876a:	bfa6      	itte	ge
 800876c:	461c      	movge	r4, r3
 800876e:	2500      	movge	r5, #0
 8008770:	2501      	movlt	r5, #1
 8008772:	f7ff fd41 	bl	80081f8 <_Balloc>
 8008776:	4602      	mov	r2, r0
 8008778:	b918      	cbnz	r0, 8008782 <__mdiff+0x5e>
 800877a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800877e:	4b2f      	ldr	r3, [pc, #188]	; (800883c <__mdiff+0x118>)
 8008780:	e7e4      	b.n	800874c <__mdiff+0x28>
 8008782:	f100 0814 	add.w	r8, r0, #20
 8008786:	f8da 7010 	ldr.w	r7, [sl, #16]
 800878a:	60c5      	str	r5, [r0, #12]
 800878c:	f04f 0c00 	mov.w	ip, #0
 8008790:	f10a 0514 	add.w	r5, sl, #20
 8008794:	f10a 0010 	add.w	r0, sl, #16
 8008798:	46c2      	mov	sl, r8
 800879a:	6926      	ldr	r6, [r4, #16]
 800879c:	f104 0914 	add.w	r9, r4, #20
 80087a0:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80087a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80087a8:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80087ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80087b0:	fa1f f18b 	uxth.w	r1, fp
 80087b4:	4461      	add	r1, ip
 80087b6:	fa1f fc83 	uxth.w	ip, r3
 80087ba:	0c1b      	lsrs	r3, r3, #16
 80087bc:	eba1 010c 	sub.w	r1, r1, ip
 80087c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80087c4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80087c8:	b289      	uxth	r1, r1
 80087ca:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80087ce:	454e      	cmp	r6, r9
 80087d0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80087d4:	f84a 3b04 	str.w	r3, [sl], #4
 80087d8:	d8e6      	bhi.n	80087a8 <__mdiff+0x84>
 80087da:	1b33      	subs	r3, r6, r4
 80087dc:	3b15      	subs	r3, #21
 80087de:	f023 0303 	bic.w	r3, r3, #3
 80087e2:	3415      	adds	r4, #21
 80087e4:	3304      	adds	r3, #4
 80087e6:	42a6      	cmp	r6, r4
 80087e8:	bf38      	it	cc
 80087ea:	2304      	movcc	r3, #4
 80087ec:	441d      	add	r5, r3
 80087ee:	4443      	add	r3, r8
 80087f0:	461e      	mov	r6, r3
 80087f2:	462c      	mov	r4, r5
 80087f4:	4574      	cmp	r4, lr
 80087f6:	d30e      	bcc.n	8008816 <__mdiff+0xf2>
 80087f8:	f10e 0103 	add.w	r1, lr, #3
 80087fc:	1b49      	subs	r1, r1, r5
 80087fe:	f021 0103 	bic.w	r1, r1, #3
 8008802:	3d03      	subs	r5, #3
 8008804:	45ae      	cmp	lr, r5
 8008806:	bf38      	it	cc
 8008808:	2100      	movcc	r1, #0
 800880a:	4419      	add	r1, r3
 800880c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008810:	b18b      	cbz	r3, 8008836 <__mdiff+0x112>
 8008812:	6117      	str	r7, [r2, #16]
 8008814:	e7a0      	b.n	8008758 <__mdiff+0x34>
 8008816:	f854 8b04 	ldr.w	r8, [r4], #4
 800881a:	fa1f f188 	uxth.w	r1, r8
 800881e:	4461      	add	r1, ip
 8008820:	1408      	asrs	r0, r1, #16
 8008822:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008826:	b289      	uxth	r1, r1
 8008828:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800882c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008830:	f846 1b04 	str.w	r1, [r6], #4
 8008834:	e7de      	b.n	80087f4 <__mdiff+0xd0>
 8008836:	3f01      	subs	r7, #1
 8008838:	e7e8      	b.n	800880c <__mdiff+0xe8>
 800883a:	bf00      	nop
 800883c:	08011da7 	.word	0x08011da7
 8008840:	08011e18 	.word	0x08011e18

08008844 <__d2b>:
 8008844:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008848:	2101      	movs	r1, #1
 800884a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800884e:	4690      	mov	r8, r2
 8008850:	461d      	mov	r5, r3
 8008852:	f7ff fcd1 	bl	80081f8 <_Balloc>
 8008856:	4604      	mov	r4, r0
 8008858:	b930      	cbnz	r0, 8008868 <__d2b+0x24>
 800885a:	4602      	mov	r2, r0
 800885c:	f240 310a 	movw	r1, #778	; 0x30a
 8008860:	4b24      	ldr	r3, [pc, #144]	; (80088f4 <__d2b+0xb0>)
 8008862:	4825      	ldr	r0, [pc, #148]	; (80088f8 <__d2b+0xb4>)
 8008864:	f000 fb7c 	bl	8008f60 <__assert_func>
 8008868:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800886c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8008870:	bb2d      	cbnz	r5, 80088be <__d2b+0x7a>
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	f1b8 0300 	subs.w	r3, r8, #0
 8008878:	d026      	beq.n	80088c8 <__d2b+0x84>
 800887a:	4668      	mov	r0, sp
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	f7ff fd87 	bl	8008390 <__lo0bits>
 8008882:	9900      	ldr	r1, [sp, #0]
 8008884:	b1f0      	cbz	r0, 80088c4 <__d2b+0x80>
 8008886:	9a01      	ldr	r2, [sp, #4]
 8008888:	f1c0 0320 	rsb	r3, r0, #32
 800888c:	fa02 f303 	lsl.w	r3, r2, r3
 8008890:	430b      	orrs	r3, r1
 8008892:	40c2      	lsrs	r2, r0
 8008894:	6163      	str	r3, [r4, #20]
 8008896:	9201      	str	r2, [sp, #4]
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	bf14      	ite	ne
 800889e:	2102      	movne	r1, #2
 80088a0:	2101      	moveq	r1, #1
 80088a2:	61a3      	str	r3, [r4, #24]
 80088a4:	6121      	str	r1, [r4, #16]
 80088a6:	b1c5      	cbz	r5, 80088da <__d2b+0x96>
 80088a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088ac:	4405      	add	r5, r0
 80088ae:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088b2:	603d      	str	r5, [r7, #0]
 80088b4:	6030      	str	r0, [r6, #0]
 80088b6:	4620      	mov	r0, r4
 80088b8:	b002      	add	sp, #8
 80088ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088c2:	e7d6      	b.n	8008872 <__d2b+0x2e>
 80088c4:	6161      	str	r1, [r4, #20]
 80088c6:	e7e7      	b.n	8008898 <__d2b+0x54>
 80088c8:	a801      	add	r0, sp, #4
 80088ca:	f7ff fd61 	bl	8008390 <__lo0bits>
 80088ce:	2101      	movs	r1, #1
 80088d0:	9b01      	ldr	r3, [sp, #4]
 80088d2:	6121      	str	r1, [r4, #16]
 80088d4:	6163      	str	r3, [r4, #20]
 80088d6:	3020      	adds	r0, #32
 80088d8:	e7e5      	b.n	80088a6 <__d2b+0x62>
 80088da:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80088de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80088e2:	6038      	str	r0, [r7, #0]
 80088e4:	6918      	ldr	r0, [r3, #16]
 80088e6:	f7ff fd33 	bl	8008350 <__hi0bits>
 80088ea:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80088ee:	6031      	str	r1, [r6, #0]
 80088f0:	e7e1      	b.n	80088b6 <__d2b+0x72>
 80088f2:	bf00      	nop
 80088f4:	08011da7 	.word	0x08011da7
 80088f8:	08011e18 	.word	0x08011e18

080088fc <_calloc_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	fb02 f501 	mul.w	r5, r2, r1
 8008902:	4629      	mov	r1, r5
 8008904:	f000 f854 	bl	80089b0 <_malloc_r>
 8008908:	4604      	mov	r4, r0
 800890a:	b118      	cbz	r0, 8008914 <_calloc_r+0x18>
 800890c:	462a      	mov	r2, r5
 800890e:	2100      	movs	r1, #0
 8008910:	f7fe f854 	bl	80069bc <memset>
 8008914:	4620      	mov	r0, r4
 8008916:	bd38      	pop	{r3, r4, r5, pc}

08008918 <_free_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4605      	mov	r5, r0
 800891c:	2900      	cmp	r1, #0
 800891e:	d043      	beq.n	80089a8 <_free_r+0x90>
 8008920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008924:	1f0c      	subs	r4, r1, #4
 8008926:	2b00      	cmp	r3, #0
 8008928:	bfb8      	it	lt
 800892a:	18e4      	addlt	r4, r4, r3
 800892c:	f000 fca2 	bl	8009274 <__malloc_lock>
 8008930:	4a1e      	ldr	r2, [pc, #120]	; (80089ac <_free_r+0x94>)
 8008932:	6813      	ldr	r3, [r2, #0]
 8008934:	4610      	mov	r0, r2
 8008936:	b933      	cbnz	r3, 8008946 <_free_r+0x2e>
 8008938:	6063      	str	r3, [r4, #4]
 800893a:	6014      	str	r4, [r2, #0]
 800893c:	4628      	mov	r0, r5
 800893e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008942:	f000 bc9d 	b.w	8009280 <__malloc_unlock>
 8008946:	42a3      	cmp	r3, r4
 8008948:	d90a      	bls.n	8008960 <_free_r+0x48>
 800894a:	6821      	ldr	r1, [r4, #0]
 800894c:	1862      	adds	r2, r4, r1
 800894e:	4293      	cmp	r3, r2
 8008950:	bf01      	itttt	eq
 8008952:	681a      	ldreq	r2, [r3, #0]
 8008954:	685b      	ldreq	r3, [r3, #4]
 8008956:	1852      	addeq	r2, r2, r1
 8008958:	6022      	streq	r2, [r4, #0]
 800895a:	6063      	str	r3, [r4, #4]
 800895c:	6004      	str	r4, [r0, #0]
 800895e:	e7ed      	b.n	800893c <_free_r+0x24>
 8008960:	461a      	mov	r2, r3
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	b10b      	cbz	r3, 800896a <_free_r+0x52>
 8008966:	42a3      	cmp	r3, r4
 8008968:	d9fa      	bls.n	8008960 <_free_r+0x48>
 800896a:	6811      	ldr	r1, [r2, #0]
 800896c:	1850      	adds	r0, r2, r1
 800896e:	42a0      	cmp	r0, r4
 8008970:	d10b      	bne.n	800898a <_free_r+0x72>
 8008972:	6820      	ldr	r0, [r4, #0]
 8008974:	4401      	add	r1, r0
 8008976:	1850      	adds	r0, r2, r1
 8008978:	4283      	cmp	r3, r0
 800897a:	6011      	str	r1, [r2, #0]
 800897c:	d1de      	bne.n	800893c <_free_r+0x24>
 800897e:	6818      	ldr	r0, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	4401      	add	r1, r0
 8008984:	6011      	str	r1, [r2, #0]
 8008986:	6053      	str	r3, [r2, #4]
 8008988:	e7d8      	b.n	800893c <_free_r+0x24>
 800898a:	d902      	bls.n	8008992 <_free_r+0x7a>
 800898c:	230c      	movs	r3, #12
 800898e:	602b      	str	r3, [r5, #0]
 8008990:	e7d4      	b.n	800893c <_free_r+0x24>
 8008992:	6820      	ldr	r0, [r4, #0]
 8008994:	1821      	adds	r1, r4, r0
 8008996:	428b      	cmp	r3, r1
 8008998:	bf01      	itttt	eq
 800899a:	6819      	ldreq	r1, [r3, #0]
 800899c:	685b      	ldreq	r3, [r3, #4]
 800899e:	1809      	addeq	r1, r1, r0
 80089a0:	6021      	streq	r1, [r4, #0]
 80089a2:	6063      	str	r3, [r4, #4]
 80089a4:	6054      	str	r4, [r2, #4]
 80089a6:	e7c9      	b.n	800893c <_free_r+0x24>
 80089a8:	bd38      	pop	{r3, r4, r5, pc}
 80089aa:	bf00      	nop
 80089ac:	20000208 	.word	0x20000208

080089b0 <_malloc_r>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	1ccd      	adds	r5, r1, #3
 80089b4:	f025 0503 	bic.w	r5, r5, #3
 80089b8:	3508      	adds	r5, #8
 80089ba:	2d0c      	cmp	r5, #12
 80089bc:	bf38      	it	cc
 80089be:	250c      	movcc	r5, #12
 80089c0:	2d00      	cmp	r5, #0
 80089c2:	4606      	mov	r6, r0
 80089c4:	db01      	blt.n	80089ca <_malloc_r+0x1a>
 80089c6:	42a9      	cmp	r1, r5
 80089c8:	d903      	bls.n	80089d2 <_malloc_r+0x22>
 80089ca:	230c      	movs	r3, #12
 80089cc:	6033      	str	r3, [r6, #0]
 80089ce:	2000      	movs	r0, #0
 80089d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d2:	f000 fc4f 	bl	8009274 <__malloc_lock>
 80089d6:	4921      	ldr	r1, [pc, #132]	; (8008a5c <_malloc_r+0xac>)
 80089d8:	680a      	ldr	r2, [r1, #0]
 80089da:	4614      	mov	r4, r2
 80089dc:	b99c      	cbnz	r4, 8008a06 <_malloc_r+0x56>
 80089de:	4f20      	ldr	r7, [pc, #128]	; (8008a60 <_malloc_r+0xb0>)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	b923      	cbnz	r3, 80089ee <_malloc_r+0x3e>
 80089e4:	4621      	mov	r1, r4
 80089e6:	4630      	mov	r0, r6
 80089e8:	f000 f994 	bl	8008d14 <_sbrk_r>
 80089ec:	6038      	str	r0, [r7, #0]
 80089ee:	4629      	mov	r1, r5
 80089f0:	4630      	mov	r0, r6
 80089f2:	f000 f98f 	bl	8008d14 <_sbrk_r>
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	d123      	bne.n	8008a42 <_malloc_r+0x92>
 80089fa:	230c      	movs	r3, #12
 80089fc:	4630      	mov	r0, r6
 80089fe:	6033      	str	r3, [r6, #0]
 8008a00:	f000 fc3e 	bl	8009280 <__malloc_unlock>
 8008a04:	e7e3      	b.n	80089ce <_malloc_r+0x1e>
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	1b5b      	subs	r3, r3, r5
 8008a0a:	d417      	bmi.n	8008a3c <_malloc_r+0x8c>
 8008a0c:	2b0b      	cmp	r3, #11
 8008a0e:	d903      	bls.n	8008a18 <_malloc_r+0x68>
 8008a10:	6023      	str	r3, [r4, #0]
 8008a12:	441c      	add	r4, r3
 8008a14:	6025      	str	r5, [r4, #0]
 8008a16:	e004      	b.n	8008a22 <_malloc_r+0x72>
 8008a18:	6863      	ldr	r3, [r4, #4]
 8008a1a:	42a2      	cmp	r2, r4
 8008a1c:	bf0c      	ite	eq
 8008a1e:	600b      	streq	r3, [r1, #0]
 8008a20:	6053      	strne	r3, [r2, #4]
 8008a22:	4630      	mov	r0, r6
 8008a24:	f000 fc2c 	bl	8009280 <__malloc_unlock>
 8008a28:	f104 000b 	add.w	r0, r4, #11
 8008a2c:	1d23      	adds	r3, r4, #4
 8008a2e:	f020 0007 	bic.w	r0, r0, #7
 8008a32:	1ac2      	subs	r2, r0, r3
 8008a34:	d0cc      	beq.n	80089d0 <_malloc_r+0x20>
 8008a36:	1a1b      	subs	r3, r3, r0
 8008a38:	50a3      	str	r3, [r4, r2]
 8008a3a:	e7c9      	b.n	80089d0 <_malloc_r+0x20>
 8008a3c:	4622      	mov	r2, r4
 8008a3e:	6864      	ldr	r4, [r4, #4]
 8008a40:	e7cc      	b.n	80089dc <_malloc_r+0x2c>
 8008a42:	1cc4      	adds	r4, r0, #3
 8008a44:	f024 0403 	bic.w	r4, r4, #3
 8008a48:	42a0      	cmp	r0, r4
 8008a4a:	d0e3      	beq.n	8008a14 <_malloc_r+0x64>
 8008a4c:	1a21      	subs	r1, r4, r0
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f000 f960 	bl	8008d14 <_sbrk_r>
 8008a54:	3001      	adds	r0, #1
 8008a56:	d1dd      	bne.n	8008a14 <_malloc_r+0x64>
 8008a58:	e7cf      	b.n	80089fa <_malloc_r+0x4a>
 8008a5a:	bf00      	nop
 8008a5c:	20000208 	.word	0x20000208
 8008a60:	2000020c 	.word	0x2000020c

08008a64 <__sfputc_r>:
 8008a64:	6893      	ldr	r3, [r2, #8]
 8008a66:	b410      	push	{r4}
 8008a68:	3b01      	subs	r3, #1
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	6093      	str	r3, [r2, #8]
 8008a6e:	da07      	bge.n	8008a80 <__sfputc_r+0x1c>
 8008a70:	6994      	ldr	r4, [r2, #24]
 8008a72:	42a3      	cmp	r3, r4
 8008a74:	db01      	blt.n	8008a7a <__sfputc_r+0x16>
 8008a76:	290a      	cmp	r1, #10
 8008a78:	d102      	bne.n	8008a80 <__sfputc_r+0x1c>
 8008a7a:	bc10      	pop	{r4}
 8008a7c:	f000 b99e 	b.w	8008dbc <__swbuf_r>
 8008a80:	6813      	ldr	r3, [r2, #0]
 8008a82:	1c58      	adds	r0, r3, #1
 8008a84:	6010      	str	r0, [r2, #0]
 8008a86:	7019      	strb	r1, [r3, #0]
 8008a88:	4608      	mov	r0, r1
 8008a8a:	bc10      	pop	{r4}
 8008a8c:	4770      	bx	lr

08008a8e <__sfputs_r>:
 8008a8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a90:	4606      	mov	r6, r0
 8008a92:	460f      	mov	r7, r1
 8008a94:	4614      	mov	r4, r2
 8008a96:	18d5      	adds	r5, r2, r3
 8008a98:	42ac      	cmp	r4, r5
 8008a9a:	d101      	bne.n	8008aa0 <__sfputs_r+0x12>
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	e007      	b.n	8008ab0 <__sfputs_r+0x22>
 8008aa0:	463a      	mov	r2, r7
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa8:	f7ff ffdc 	bl	8008a64 <__sfputc_r>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d1f3      	bne.n	8008a98 <__sfputs_r+0xa>
 8008ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ab4 <_vfiprintf_r>:
 8008ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab8:	460d      	mov	r5, r1
 8008aba:	4614      	mov	r4, r2
 8008abc:	4698      	mov	r8, r3
 8008abe:	4606      	mov	r6, r0
 8008ac0:	b09d      	sub	sp, #116	; 0x74
 8008ac2:	b118      	cbz	r0, 8008acc <_vfiprintf_r+0x18>
 8008ac4:	6983      	ldr	r3, [r0, #24]
 8008ac6:	b90b      	cbnz	r3, 8008acc <_vfiprintf_r+0x18>
 8008ac8:	f7ff facc 	bl	8008064 <__sinit>
 8008acc:	4b89      	ldr	r3, [pc, #548]	; (8008cf4 <_vfiprintf_r+0x240>)
 8008ace:	429d      	cmp	r5, r3
 8008ad0:	d11b      	bne.n	8008b0a <_vfiprintf_r+0x56>
 8008ad2:	6875      	ldr	r5, [r6, #4]
 8008ad4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ad6:	07d9      	lsls	r1, r3, #31
 8008ad8:	d405      	bmi.n	8008ae6 <_vfiprintf_r+0x32>
 8008ada:	89ab      	ldrh	r3, [r5, #12]
 8008adc:	059a      	lsls	r2, r3, #22
 8008ade:	d402      	bmi.n	8008ae6 <_vfiprintf_r+0x32>
 8008ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ae2:	f7ff fb62 	bl	80081aa <__retarget_lock_acquire_recursive>
 8008ae6:	89ab      	ldrh	r3, [r5, #12]
 8008ae8:	071b      	lsls	r3, r3, #28
 8008aea:	d501      	bpl.n	8008af0 <_vfiprintf_r+0x3c>
 8008aec:	692b      	ldr	r3, [r5, #16]
 8008aee:	b9eb      	cbnz	r3, 8008b2c <_vfiprintf_r+0x78>
 8008af0:	4629      	mov	r1, r5
 8008af2:	4630      	mov	r0, r6
 8008af4:	f000 f9c6 	bl	8008e84 <__swsetup_r>
 8008af8:	b1c0      	cbz	r0, 8008b2c <_vfiprintf_r+0x78>
 8008afa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008afc:	07dc      	lsls	r4, r3, #31
 8008afe:	d50e      	bpl.n	8008b1e <_vfiprintf_r+0x6a>
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295
 8008b04:	b01d      	add	sp, #116	; 0x74
 8008b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0a:	4b7b      	ldr	r3, [pc, #492]	; (8008cf8 <_vfiprintf_r+0x244>)
 8008b0c:	429d      	cmp	r5, r3
 8008b0e:	d101      	bne.n	8008b14 <_vfiprintf_r+0x60>
 8008b10:	68b5      	ldr	r5, [r6, #8]
 8008b12:	e7df      	b.n	8008ad4 <_vfiprintf_r+0x20>
 8008b14:	4b79      	ldr	r3, [pc, #484]	; (8008cfc <_vfiprintf_r+0x248>)
 8008b16:	429d      	cmp	r5, r3
 8008b18:	bf08      	it	eq
 8008b1a:	68f5      	ldreq	r5, [r6, #12]
 8008b1c:	e7da      	b.n	8008ad4 <_vfiprintf_r+0x20>
 8008b1e:	89ab      	ldrh	r3, [r5, #12]
 8008b20:	0598      	lsls	r0, r3, #22
 8008b22:	d4ed      	bmi.n	8008b00 <_vfiprintf_r+0x4c>
 8008b24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b26:	f7ff fb41 	bl	80081ac <__retarget_lock_release_recursive>
 8008b2a:	e7e9      	b.n	8008b00 <_vfiprintf_r+0x4c>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b30:	2320      	movs	r3, #32
 8008b32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b36:	2330      	movs	r3, #48	; 0x30
 8008b38:	f04f 0901 	mov.w	r9, #1
 8008b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b40:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008d00 <_vfiprintf_r+0x24c>
 8008b44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b48:	4623      	mov	r3, r4
 8008b4a:	469a      	mov	sl, r3
 8008b4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b50:	b10a      	cbz	r2, 8008b56 <_vfiprintf_r+0xa2>
 8008b52:	2a25      	cmp	r2, #37	; 0x25
 8008b54:	d1f9      	bne.n	8008b4a <_vfiprintf_r+0x96>
 8008b56:	ebba 0b04 	subs.w	fp, sl, r4
 8008b5a:	d00b      	beq.n	8008b74 <_vfiprintf_r+0xc0>
 8008b5c:	465b      	mov	r3, fp
 8008b5e:	4622      	mov	r2, r4
 8008b60:	4629      	mov	r1, r5
 8008b62:	4630      	mov	r0, r6
 8008b64:	f7ff ff93 	bl	8008a8e <__sfputs_r>
 8008b68:	3001      	adds	r0, #1
 8008b6a:	f000 80aa 	beq.w	8008cc2 <_vfiprintf_r+0x20e>
 8008b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b70:	445a      	add	r2, fp
 8008b72:	9209      	str	r2, [sp, #36]	; 0x24
 8008b74:	f89a 3000 	ldrb.w	r3, [sl]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 80a2 	beq.w	8008cc2 <_vfiprintf_r+0x20e>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f04f 32ff 	mov.w	r2, #4294967295
 8008b84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b88:	f10a 0a01 	add.w	sl, sl, #1
 8008b8c:	9304      	str	r3, [sp, #16]
 8008b8e:	9307      	str	r3, [sp, #28]
 8008b90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b94:	931a      	str	r3, [sp, #104]	; 0x68
 8008b96:	4654      	mov	r4, sl
 8008b98:	2205      	movs	r2, #5
 8008b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b9e:	4858      	ldr	r0, [pc, #352]	; (8008d00 <_vfiprintf_r+0x24c>)
 8008ba0:	f7ff fb0e 	bl	80081c0 <memchr>
 8008ba4:	9a04      	ldr	r2, [sp, #16]
 8008ba6:	b9d8      	cbnz	r0, 8008be0 <_vfiprintf_r+0x12c>
 8008ba8:	06d1      	lsls	r1, r2, #27
 8008baa:	bf44      	itt	mi
 8008bac:	2320      	movmi	r3, #32
 8008bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bb2:	0713      	lsls	r3, r2, #28
 8008bb4:	bf44      	itt	mi
 8008bb6:	232b      	movmi	r3, #43	; 0x2b
 8008bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8008bc2:	d015      	beq.n	8008bf0 <_vfiprintf_r+0x13c>
 8008bc4:	4654      	mov	r4, sl
 8008bc6:	2000      	movs	r0, #0
 8008bc8:	f04f 0c0a 	mov.w	ip, #10
 8008bcc:	9a07      	ldr	r2, [sp, #28]
 8008bce:	4621      	mov	r1, r4
 8008bd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bd4:	3b30      	subs	r3, #48	; 0x30
 8008bd6:	2b09      	cmp	r3, #9
 8008bd8:	d94e      	bls.n	8008c78 <_vfiprintf_r+0x1c4>
 8008bda:	b1b0      	cbz	r0, 8008c0a <_vfiprintf_r+0x156>
 8008bdc:	9207      	str	r2, [sp, #28]
 8008bde:	e014      	b.n	8008c0a <_vfiprintf_r+0x156>
 8008be0:	eba0 0308 	sub.w	r3, r0, r8
 8008be4:	fa09 f303 	lsl.w	r3, r9, r3
 8008be8:	4313      	orrs	r3, r2
 8008bea:	46a2      	mov	sl, r4
 8008bec:	9304      	str	r3, [sp, #16]
 8008bee:	e7d2      	b.n	8008b96 <_vfiprintf_r+0xe2>
 8008bf0:	9b03      	ldr	r3, [sp, #12]
 8008bf2:	1d19      	adds	r1, r3, #4
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	9103      	str	r1, [sp, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	bfbb      	ittet	lt
 8008bfc:	425b      	neglt	r3, r3
 8008bfe:	f042 0202 	orrlt.w	r2, r2, #2
 8008c02:	9307      	strge	r3, [sp, #28]
 8008c04:	9307      	strlt	r3, [sp, #28]
 8008c06:	bfb8      	it	lt
 8008c08:	9204      	strlt	r2, [sp, #16]
 8008c0a:	7823      	ldrb	r3, [r4, #0]
 8008c0c:	2b2e      	cmp	r3, #46	; 0x2e
 8008c0e:	d10c      	bne.n	8008c2a <_vfiprintf_r+0x176>
 8008c10:	7863      	ldrb	r3, [r4, #1]
 8008c12:	2b2a      	cmp	r3, #42	; 0x2a
 8008c14:	d135      	bne.n	8008c82 <_vfiprintf_r+0x1ce>
 8008c16:	9b03      	ldr	r3, [sp, #12]
 8008c18:	3402      	adds	r4, #2
 8008c1a:	1d1a      	adds	r2, r3, #4
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	9203      	str	r2, [sp, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	bfb8      	it	lt
 8008c24:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c28:	9305      	str	r3, [sp, #20]
 8008c2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008d10 <_vfiprintf_r+0x25c>
 8008c2e:	2203      	movs	r2, #3
 8008c30:	4650      	mov	r0, sl
 8008c32:	7821      	ldrb	r1, [r4, #0]
 8008c34:	f7ff fac4 	bl	80081c0 <memchr>
 8008c38:	b140      	cbz	r0, 8008c4c <_vfiprintf_r+0x198>
 8008c3a:	2340      	movs	r3, #64	; 0x40
 8008c3c:	eba0 000a 	sub.w	r0, r0, sl
 8008c40:	fa03 f000 	lsl.w	r0, r3, r0
 8008c44:	9b04      	ldr	r3, [sp, #16]
 8008c46:	3401      	adds	r4, #1
 8008c48:	4303      	orrs	r3, r0
 8008c4a:	9304      	str	r3, [sp, #16]
 8008c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c50:	2206      	movs	r2, #6
 8008c52:	482c      	ldr	r0, [pc, #176]	; (8008d04 <_vfiprintf_r+0x250>)
 8008c54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c58:	f7ff fab2 	bl	80081c0 <memchr>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	d03f      	beq.n	8008ce0 <_vfiprintf_r+0x22c>
 8008c60:	4b29      	ldr	r3, [pc, #164]	; (8008d08 <_vfiprintf_r+0x254>)
 8008c62:	bb1b      	cbnz	r3, 8008cac <_vfiprintf_r+0x1f8>
 8008c64:	9b03      	ldr	r3, [sp, #12]
 8008c66:	3307      	adds	r3, #7
 8008c68:	f023 0307 	bic.w	r3, r3, #7
 8008c6c:	3308      	adds	r3, #8
 8008c6e:	9303      	str	r3, [sp, #12]
 8008c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c72:	443b      	add	r3, r7
 8008c74:	9309      	str	r3, [sp, #36]	; 0x24
 8008c76:	e767      	b.n	8008b48 <_vfiprintf_r+0x94>
 8008c78:	460c      	mov	r4, r1
 8008c7a:	2001      	movs	r0, #1
 8008c7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c80:	e7a5      	b.n	8008bce <_vfiprintf_r+0x11a>
 8008c82:	2300      	movs	r3, #0
 8008c84:	f04f 0c0a 	mov.w	ip, #10
 8008c88:	4619      	mov	r1, r3
 8008c8a:	3401      	adds	r4, #1
 8008c8c:	9305      	str	r3, [sp, #20]
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c94:	3a30      	subs	r2, #48	; 0x30
 8008c96:	2a09      	cmp	r2, #9
 8008c98:	d903      	bls.n	8008ca2 <_vfiprintf_r+0x1ee>
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0c5      	beq.n	8008c2a <_vfiprintf_r+0x176>
 8008c9e:	9105      	str	r1, [sp, #20]
 8008ca0:	e7c3      	b.n	8008c2a <_vfiprintf_r+0x176>
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008caa:	e7f0      	b.n	8008c8e <_vfiprintf_r+0x1da>
 8008cac:	ab03      	add	r3, sp, #12
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	462a      	mov	r2, r5
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	4b15      	ldr	r3, [pc, #84]	; (8008d0c <_vfiprintf_r+0x258>)
 8008cb6:	a904      	add	r1, sp, #16
 8008cb8:	f7fd ff26 	bl	8006b08 <_printf_float>
 8008cbc:	4607      	mov	r7, r0
 8008cbe:	1c78      	adds	r0, r7, #1
 8008cc0:	d1d6      	bne.n	8008c70 <_vfiprintf_r+0x1bc>
 8008cc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cc4:	07d9      	lsls	r1, r3, #31
 8008cc6:	d405      	bmi.n	8008cd4 <_vfiprintf_r+0x220>
 8008cc8:	89ab      	ldrh	r3, [r5, #12]
 8008cca:	059a      	lsls	r2, r3, #22
 8008ccc:	d402      	bmi.n	8008cd4 <_vfiprintf_r+0x220>
 8008cce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cd0:	f7ff fa6c 	bl	80081ac <__retarget_lock_release_recursive>
 8008cd4:	89ab      	ldrh	r3, [r5, #12]
 8008cd6:	065b      	lsls	r3, r3, #25
 8008cd8:	f53f af12 	bmi.w	8008b00 <_vfiprintf_r+0x4c>
 8008cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cde:	e711      	b.n	8008b04 <_vfiprintf_r+0x50>
 8008ce0:	ab03      	add	r3, sp, #12
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	462a      	mov	r2, r5
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	4b08      	ldr	r3, [pc, #32]	; (8008d0c <_vfiprintf_r+0x258>)
 8008cea:	a904      	add	r1, sp, #16
 8008cec:	f7fe f9a8 	bl	8007040 <_printf_i>
 8008cf0:	e7e4      	b.n	8008cbc <_vfiprintf_r+0x208>
 8008cf2:	bf00      	nop
 8008cf4:	08011dd8 	.word	0x08011dd8
 8008cf8:	08011df8 	.word	0x08011df8
 8008cfc:	08011db8 	.word	0x08011db8
 8008d00:	08011f74 	.word	0x08011f74
 8008d04:	08011f7e 	.word	0x08011f7e
 8008d08:	08006b09 	.word	0x08006b09
 8008d0c:	08008a8f 	.word	0x08008a8f
 8008d10:	08011f7a 	.word	0x08011f7a

08008d14 <_sbrk_r>:
 8008d14:	b538      	push	{r3, r4, r5, lr}
 8008d16:	2300      	movs	r3, #0
 8008d18:	4d05      	ldr	r5, [pc, #20]	; (8008d30 <_sbrk_r+0x1c>)
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	4608      	mov	r0, r1
 8008d1e:	602b      	str	r3, [r5, #0]
 8008d20:	f7fc fd9e 	bl	8005860 <_sbrk>
 8008d24:	1c43      	adds	r3, r0, #1
 8008d26:	d102      	bne.n	8008d2e <_sbrk_r+0x1a>
 8008d28:	682b      	ldr	r3, [r5, #0]
 8008d2a:	b103      	cbz	r3, 8008d2e <_sbrk_r+0x1a>
 8008d2c:	6023      	str	r3, [r4, #0]
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	20000278 	.word	0x20000278

08008d34 <__sread>:
 8008d34:	b510      	push	{r4, lr}
 8008d36:	460c      	mov	r4, r1
 8008d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3c:	f000 faa6 	bl	800928c <_read_r>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	bfab      	itete	ge
 8008d44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d46:	89a3      	ldrhlt	r3, [r4, #12]
 8008d48:	181b      	addge	r3, r3, r0
 8008d4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d4e:	bfac      	ite	ge
 8008d50:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d52:	81a3      	strhlt	r3, [r4, #12]
 8008d54:	bd10      	pop	{r4, pc}

08008d56 <__swrite>:
 8008d56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d5a:	461f      	mov	r7, r3
 8008d5c:	898b      	ldrh	r3, [r1, #12]
 8008d5e:	4605      	mov	r5, r0
 8008d60:	05db      	lsls	r3, r3, #23
 8008d62:	460c      	mov	r4, r1
 8008d64:	4616      	mov	r6, r2
 8008d66:	d505      	bpl.n	8008d74 <__swrite+0x1e>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d70:	f000 f9f8 	bl	8009164 <_lseek_r>
 8008d74:	89a3      	ldrh	r3, [r4, #12]
 8008d76:	4632      	mov	r2, r6
 8008d78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d7c:	81a3      	strh	r3, [r4, #12]
 8008d7e:	4628      	mov	r0, r5
 8008d80:	463b      	mov	r3, r7
 8008d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d8a:	f000 b869 	b.w	8008e60 <_write_r>

08008d8e <__sseek>:
 8008d8e:	b510      	push	{r4, lr}
 8008d90:	460c      	mov	r4, r1
 8008d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d96:	f000 f9e5 	bl	8009164 <_lseek_r>
 8008d9a:	1c43      	adds	r3, r0, #1
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	bf15      	itete	ne
 8008da0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008da2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008da6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008daa:	81a3      	strheq	r3, [r4, #12]
 8008dac:	bf18      	it	ne
 8008dae:	81a3      	strhne	r3, [r4, #12]
 8008db0:	bd10      	pop	{r4, pc}

08008db2 <__sclose>:
 8008db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db6:	f000 b8f1 	b.w	8008f9c <_close_r>
	...

08008dbc <__swbuf_r>:
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	460e      	mov	r6, r1
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	b118      	cbz	r0, 8008dce <__swbuf_r+0x12>
 8008dc6:	6983      	ldr	r3, [r0, #24]
 8008dc8:	b90b      	cbnz	r3, 8008dce <__swbuf_r+0x12>
 8008dca:	f7ff f94b 	bl	8008064 <__sinit>
 8008dce:	4b21      	ldr	r3, [pc, #132]	; (8008e54 <__swbuf_r+0x98>)
 8008dd0:	429c      	cmp	r4, r3
 8008dd2:	d12b      	bne.n	8008e2c <__swbuf_r+0x70>
 8008dd4:	686c      	ldr	r4, [r5, #4]
 8008dd6:	69a3      	ldr	r3, [r4, #24]
 8008dd8:	60a3      	str	r3, [r4, #8]
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	071a      	lsls	r2, r3, #28
 8008dde:	d52f      	bpl.n	8008e40 <__swbuf_r+0x84>
 8008de0:	6923      	ldr	r3, [r4, #16]
 8008de2:	b36b      	cbz	r3, 8008e40 <__swbuf_r+0x84>
 8008de4:	6923      	ldr	r3, [r4, #16]
 8008de6:	6820      	ldr	r0, [r4, #0]
 8008de8:	b2f6      	uxtb	r6, r6
 8008dea:	1ac0      	subs	r0, r0, r3
 8008dec:	6963      	ldr	r3, [r4, #20]
 8008dee:	4637      	mov	r7, r6
 8008df0:	4283      	cmp	r3, r0
 8008df2:	dc04      	bgt.n	8008dfe <__swbuf_r+0x42>
 8008df4:	4621      	mov	r1, r4
 8008df6:	4628      	mov	r0, r5
 8008df8:	f000 f966 	bl	80090c8 <_fflush_r>
 8008dfc:	bb30      	cbnz	r0, 8008e4c <__swbuf_r+0x90>
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	3001      	adds	r0, #1
 8008e02:	3b01      	subs	r3, #1
 8008e04:	60a3      	str	r3, [r4, #8]
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	1c5a      	adds	r2, r3, #1
 8008e0a:	6022      	str	r2, [r4, #0]
 8008e0c:	701e      	strb	r6, [r3, #0]
 8008e0e:	6963      	ldr	r3, [r4, #20]
 8008e10:	4283      	cmp	r3, r0
 8008e12:	d004      	beq.n	8008e1e <__swbuf_r+0x62>
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	07db      	lsls	r3, r3, #31
 8008e18:	d506      	bpl.n	8008e28 <__swbuf_r+0x6c>
 8008e1a:	2e0a      	cmp	r6, #10
 8008e1c:	d104      	bne.n	8008e28 <__swbuf_r+0x6c>
 8008e1e:	4621      	mov	r1, r4
 8008e20:	4628      	mov	r0, r5
 8008e22:	f000 f951 	bl	80090c8 <_fflush_r>
 8008e26:	b988      	cbnz	r0, 8008e4c <__swbuf_r+0x90>
 8008e28:	4638      	mov	r0, r7
 8008e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <__swbuf_r+0x9c>)
 8008e2e:	429c      	cmp	r4, r3
 8008e30:	d101      	bne.n	8008e36 <__swbuf_r+0x7a>
 8008e32:	68ac      	ldr	r4, [r5, #8]
 8008e34:	e7cf      	b.n	8008dd6 <__swbuf_r+0x1a>
 8008e36:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <__swbuf_r+0xa0>)
 8008e38:	429c      	cmp	r4, r3
 8008e3a:	bf08      	it	eq
 8008e3c:	68ec      	ldreq	r4, [r5, #12]
 8008e3e:	e7ca      	b.n	8008dd6 <__swbuf_r+0x1a>
 8008e40:	4621      	mov	r1, r4
 8008e42:	4628      	mov	r0, r5
 8008e44:	f000 f81e 	bl	8008e84 <__swsetup_r>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d0cb      	beq.n	8008de4 <__swbuf_r+0x28>
 8008e4c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e50:	e7ea      	b.n	8008e28 <__swbuf_r+0x6c>
 8008e52:	bf00      	nop
 8008e54:	08011dd8 	.word	0x08011dd8
 8008e58:	08011df8 	.word	0x08011df8
 8008e5c:	08011db8 	.word	0x08011db8

08008e60 <_write_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4604      	mov	r4, r0
 8008e64:	4608      	mov	r0, r1
 8008e66:	4611      	mov	r1, r2
 8008e68:	2200      	movs	r2, #0
 8008e6a:	4d05      	ldr	r5, [pc, #20]	; (8008e80 <_write_r+0x20>)
 8008e6c:	602a      	str	r2, [r5, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f7fc fca9 	bl	80057c6 <_write>
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	d102      	bne.n	8008e7e <_write_r+0x1e>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	b103      	cbz	r3, 8008e7e <_write_r+0x1e>
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	20000278 	.word	0x20000278

08008e84 <__swsetup_r>:
 8008e84:	4b32      	ldr	r3, [pc, #200]	; (8008f50 <__swsetup_r+0xcc>)
 8008e86:	b570      	push	{r4, r5, r6, lr}
 8008e88:	681d      	ldr	r5, [r3, #0]
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	b125      	cbz	r5, 8008e9a <__swsetup_r+0x16>
 8008e90:	69ab      	ldr	r3, [r5, #24]
 8008e92:	b913      	cbnz	r3, 8008e9a <__swsetup_r+0x16>
 8008e94:	4628      	mov	r0, r5
 8008e96:	f7ff f8e5 	bl	8008064 <__sinit>
 8008e9a:	4b2e      	ldr	r3, [pc, #184]	; (8008f54 <__swsetup_r+0xd0>)
 8008e9c:	429c      	cmp	r4, r3
 8008e9e:	d10f      	bne.n	8008ec0 <__swsetup_r+0x3c>
 8008ea0:	686c      	ldr	r4, [r5, #4]
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ea8:	0719      	lsls	r1, r3, #28
 8008eaa:	d42c      	bmi.n	8008f06 <__swsetup_r+0x82>
 8008eac:	06dd      	lsls	r5, r3, #27
 8008eae:	d411      	bmi.n	8008ed4 <__swsetup_r+0x50>
 8008eb0:	2309      	movs	r3, #9
 8008eb2:	6033      	str	r3, [r6, #0]
 8008eb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebc:	81a3      	strh	r3, [r4, #12]
 8008ebe:	e03e      	b.n	8008f3e <__swsetup_r+0xba>
 8008ec0:	4b25      	ldr	r3, [pc, #148]	; (8008f58 <__swsetup_r+0xd4>)
 8008ec2:	429c      	cmp	r4, r3
 8008ec4:	d101      	bne.n	8008eca <__swsetup_r+0x46>
 8008ec6:	68ac      	ldr	r4, [r5, #8]
 8008ec8:	e7eb      	b.n	8008ea2 <__swsetup_r+0x1e>
 8008eca:	4b24      	ldr	r3, [pc, #144]	; (8008f5c <__swsetup_r+0xd8>)
 8008ecc:	429c      	cmp	r4, r3
 8008ece:	bf08      	it	eq
 8008ed0:	68ec      	ldreq	r4, [r5, #12]
 8008ed2:	e7e6      	b.n	8008ea2 <__swsetup_r+0x1e>
 8008ed4:	0758      	lsls	r0, r3, #29
 8008ed6:	d512      	bpl.n	8008efe <__swsetup_r+0x7a>
 8008ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eda:	b141      	cbz	r1, 8008eee <__swsetup_r+0x6a>
 8008edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ee0:	4299      	cmp	r1, r3
 8008ee2:	d002      	beq.n	8008eea <__swsetup_r+0x66>
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7ff fd17 	bl	8008918 <_free_r>
 8008eea:	2300      	movs	r3, #0
 8008eec:	6363      	str	r3, [r4, #52]	; 0x34
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ef4:	81a3      	strh	r3, [r4, #12]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	6063      	str	r3, [r4, #4]
 8008efa:	6923      	ldr	r3, [r4, #16]
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	89a3      	ldrh	r3, [r4, #12]
 8008f00:	f043 0308 	orr.w	r3, r3, #8
 8008f04:	81a3      	strh	r3, [r4, #12]
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	b94b      	cbnz	r3, 8008f1e <__swsetup_r+0x9a>
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f14:	d003      	beq.n	8008f1e <__swsetup_r+0x9a>
 8008f16:	4621      	mov	r1, r4
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f000 f959 	bl	80091d0 <__smakebuf_r>
 8008f1e:	89a0      	ldrh	r0, [r4, #12]
 8008f20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f24:	f010 0301 	ands.w	r3, r0, #1
 8008f28:	d00a      	beq.n	8008f40 <__swsetup_r+0xbc>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60a3      	str	r3, [r4, #8]
 8008f2e:	6963      	ldr	r3, [r4, #20]
 8008f30:	425b      	negs	r3, r3
 8008f32:	61a3      	str	r3, [r4, #24]
 8008f34:	6923      	ldr	r3, [r4, #16]
 8008f36:	b943      	cbnz	r3, 8008f4a <__swsetup_r+0xc6>
 8008f38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f3c:	d1ba      	bne.n	8008eb4 <__swsetup_r+0x30>
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	0781      	lsls	r1, r0, #30
 8008f42:	bf58      	it	pl
 8008f44:	6963      	ldrpl	r3, [r4, #20]
 8008f46:	60a3      	str	r3, [r4, #8]
 8008f48:	e7f4      	b.n	8008f34 <__swsetup_r+0xb0>
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	e7f7      	b.n	8008f3e <__swsetup_r+0xba>
 8008f4e:	bf00      	nop
 8008f50:	20000010 	.word	0x20000010
 8008f54:	08011dd8 	.word	0x08011dd8
 8008f58:	08011df8 	.word	0x08011df8
 8008f5c:	08011db8 	.word	0x08011db8

08008f60 <__assert_func>:
 8008f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f62:	4614      	mov	r4, r2
 8008f64:	461a      	mov	r2, r3
 8008f66:	4b09      	ldr	r3, [pc, #36]	; (8008f8c <__assert_func+0x2c>)
 8008f68:	4605      	mov	r5, r0
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68d8      	ldr	r0, [r3, #12]
 8008f6e:	b14c      	cbz	r4, 8008f84 <__assert_func+0x24>
 8008f70:	4b07      	ldr	r3, [pc, #28]	; (8008f90 <__assert_func+0x30>)
 8008f72:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f76:	9100      	str	r1, [sp, #0]
 8008f78:	462b      	mov	r3, r5
 8008f7a:	4906      	ldr	r1, [pc, #24]	; (8008f94 <__assert_func+0x34>)
 8008f7c:	f000 f8e0 	bl	8009140 <fiprintf>
 8008f80:	f000 f9a3 	bl	80092ca <abort>
 8008f84:	4b04      	ldr	r3, [pc, #16]	; (8008f98 <__assert_func+0x38>)
 8008f86:	461c      	mov	r4, r3
 8008f88:	e7f3      	b.n	8008f72 <__assert_func+0x12>
 8008f8a:	bf00      	nop
 8008f8c:	20000010 	.word	0x20000010
 8008f90:	08011f85 	.word	0x08011f85
 8008f94:	08011f92 	.word	0x08011f92
 8008f98:	08011fc0 	.word	0x08011fc0

08008f9c <_close_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	4d05      	ldr	r5, [pc, #20]	; (8008fb8 <_close_r+0x1c>)
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	4608      	mov	r0, r1
 8008fa6:	602b      	str	r3, [r5, #0]
 8008fa8:	f7fc fc29 	bl	80057fe <_close>
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d102      	bne.n	8008fb6 <_close_r+0x1a>
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	b103      	cbz	r3, 8008fb6 <_close_r+0x1a>
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	20000278 	.word	0x20000278

08008fbc <__sflush_r>:
 8008fbc:	898a      	ldrh	r2, [r1, #12]
 8008fbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc2:	4605      	mov	r5, r0
 8008fc4:	0710      	lsls	r0, r2, #28
 8008fc6:	460c      	mov	r4, r1
 8008fc8:	d458      	bmi.n	800907c <__sflush_r+0xc0>
 8008fca:	684b      	ldr	r3, [r1, #4]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	dc05      	bgt.n	8008fdc <__sflush_r+0x20>
 8008fd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	dc02      	bgt.n	8008fdc <__sflush_r+0x20>
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fde:	2e00      	cmp	r6, #0
 8008fe0:	d0f9      	beq.n	8008fd6 <__sflush_r+0x1a>
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fe8:	682f      	ldr	r7, [r5, #0]
 8008fea:	602b      	str	r3, [r5, #0]
 8008fec:	d032      	beq.n	8009054 <__sflush_r+0x98>
 8008fee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	075a      	lsls	r2, r3, #29
 8008ff4:	d505      	bpl.n	8009002 <__sflush_r+0x46>
 8008ff6:	6863      	ldr	r3, [r4, #4]
 8008ff8:	1ac0      	subs	r0, r0, r3
 8008ffa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ffc:	b10b      	cbz	r3, 8009002 <__sflush_r+0x46>
 8008ffe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009000:	1ac0      	subs	r0, r0, r3
 8009002:	2300      	movs	r3, #0
 8009004:	4602      	mov	r2, r0
 8009006:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009008:	4628      	mov	r0, r5
 800900a:	6a21      	ldr	r1, [r4, #32]
 800900c:	47b0      	blx	r6
 800900e:	1c43      	adds	r3, r0, #1
 8009010:	89a3      	ldrh	r3, [r4, #12]
 8009012:	d106      	bne.n	8009022 <__sflush_r+0x66>
 8009014:	6829      	ldr	r1, [r5, #0]
 8009016:	291d      	cmp	r1, #29
 8009018:	d82c      	bhi.n	8009074 <__sflush_r+0xb8>
 800901a:	4a2a      	ldr	r2, [pc, #168]	; (80090c4 <__sflush_r+0x108>)
 800901c:	40ca      	lsrs	r2, r1
 800901e:	07d6      	lsls	r6, r2, #31
 8009020:	d528      	bpl.n	8009074 <__sflush_r+0xb8>
 8009022:	2200      	movs	r2, #0
 8009024:	6062      	str	r2, [r4, #4]
 8009026:	6922      	ldr	r2, [r4, #16]
 8009028:	04d9      	lsls	r1, r3, #19
 800902a:	6022      	str	r2, [r4, #0]
 800902c:	d504      	bpl.n	8009038 <__sflush_r+0x7c>
 800902e:	1c42      	adds	r2, r0, #1
 8009030:	d101      	bne.n	8009036 <__sflush_r+0x7a>
 8009032:	682b      	ldr	r3, [r5, #0]
 8009034:	b903      	cbnz	r3, 8009038 <__sflush_r+0x7c>
 8009036:	6560      	str	r0, [r4, #84]	; 0x54
 8009038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800903a:	602f      	str	r7, [r5, #0]
 800903c:	2900      	cmp	r1, #0
 800903e:	d0ca      	beq.n	8008fd6 <__sflush_r+0x1a>
 8009040:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009044:	4299      	cmp	r1, r3
 8009046:	d002      	beq.n	800904e <__sflush_r+0x92>
 8009048:	4628      	mov	r0, r5
 800904a:	f7ff fc65 	bl	8008918 <_free_r>
 800904e:	2000      	movs	r0, #0
 8009050:	6360      	str	r0, [r4, #52]	; 0x34
 8009052:	e7c1      	b.n	8008fd8 <__sflush_r+0x1c>
 8009054:	6a21      	ldr	r1, [r4, #32]
 8009056:	2301      	movs	r3, #1
 8009058:	4628      	mov	r0, r5
 800905a:	47b0      	blx	r6
 800905c:	1c41      	adds	r1, r0, #1
 800905e:	d1c7      	bne.n	8008ff0 <__sflush_r+0x34>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d0c4      	beq.n	8008ff0 <__sflush_r+0x34>
 8009066:	2b1d      	cmp	r3, #29
 8009068:	d001      	beq.n	800906e <__sflush_r+0xb2>
 800906a:	2b16      	cmp	r3, #22
 800906c:	d101      	bne.n	8009072 <__sflush_r+0xb6>
 800906e:	602f      	str	r7, [r5, #0]
 8009070:	e7b1      	b.n	8008fd6 <__sflush_r+0x1a>
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009078:	81a3      	strh	r3, [r4, #12]
 800907a:	e7ad      	b.n	8008fd8 <__sflush_r+0x1c>
 800907c:	690f      	ldr	r7, [r1, #16]
 800907e:	2f00      	cmp	r7, #0
 8009080:	d0a9      	beq.n	8008fd6 <__sflush_r+0x1a>
 8009082:	0793      	lsls	r3, r2, #30
 8009084:	bf18      	it	ne
 8009086:	2300      	movne	r3, #0
 8009088:	680e      	ldr	r6, [r1, #0]
 800908a:	bf08      	it	eq
 800908c:	694b      	ldreq	r3, [r1, #20]
 800908e:	eba6 0807 	sub.w	r8, r6, r7
 8009092:	600f      	str	r7, [r1, #0]
 8009094:	608b      	str	r3, [r1, #8]
 8009096:	f1b8 0f00 	cmp.w	r8, #0
 800909a:	dd9c      	ble.n	8008fd6 <__sflush_r+0x1a>
 800909c:	4643      	mov	r3, r8
 800909e:	463a      	mov	r2, r7
 80090a0:	4628      	mov	r0, r5
 80090a2:	6a21      	ldr	r1, [r4, #32]
 80090a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80090a6:	47b0      	blx	r6
 80090a8:	2800      	cmp	r0, #0
 80090aa:	dc06      	bgt.n	80090ba <__sflush_r+0xfe>
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	f04f 30ff 	mov.w	r0, #4294967295
 80090b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090b6:	81a3      	strh	r3, [r4, #12]
 80090b8:	e78e      	b.n	8008fd8 <__sflush_r+0x1c>
 80090ba:	4407      	add	r7, r0
 80090bc:	eba8 0800 	sub.w	r8, r8, r0
 80090c0:	e7e9      	b.n	8009096 <__sflush_r+0xda>
 80090c2:	bf00      	nop
 80090c4:	20400001 	.word	0x20400001

080090c8 <_fflush_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	690b      	ldr	r3, [r1, #16]
 80090cc:	4605      	mov	r5, r0
 80090ce:	460c      	mov	r4, r1
 80090d0:	b913      	cbnz	r3, 80090d8 <_fflush_r+0x10>
 80090d2:	2500      	movs	r5, #0
 80090d4:	4628      	mov	r0, r5
 80090d6:	bd38      	pop	{r3, r4, r5, pc}
 80090d8:	b118      	cbz	r0, 80090e2 <_fflush_r+0x1a>
 80090da:	6983      	ldr	r3, [r0, #24]
 80090dc:	b90b      	cbnz	r3, 80090e2 <_fflush_r+0x1a>
 80090de:	f7fe ffc1 	bl	8008064 <__sinit>
 80090e2:	4b14      	ldr	r3, [pc, #80]	; (8009134 <_fflush_r+0x6c>)
 80090e4:	429c      	cmp	r4, r3
 80090e6:	d11b      	bne.n	8009120 <_fflush_r+0x58>
 80090e8:	686c      	ldr	r4, [r5, #4]
 80090ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0ef      	beq.n	80090d2 <_fflush_r+0xa>
 80090f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090f4:	07d0      	lsls	r0, r2, #31
 80090f6:	d404      	bmi.n	8009102 <_fflush_r+0x3a>
 80090f8:	0599      	lsls	r1, r3, #22
 80090fa:	d402      	bmi.n	8009102 <_fflush_r+0x3a>
 80090fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090fe:	f7ff f854 	bl	80081aa <__retarget_lock_acquire_recursive>
 8009102:	4628      	mov	r0, r5
 8009104:	4621      	mov	r1, r4
 8009106:	f7ff ff59 	bl	8008fbc <__sflush_r>
 800910a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800910c:	4605      	mov	r5, r0
 800910e:	07da      	lsls	r2, r3, #31
 8009110:	d4e0      	bmi.n	80090d4 <_fflush_r+0xc>
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	059b      	lsls	r3, r3, #22
 8009116:	d4dd      	bmi.n	80090d4 <_fflush_r+0xc>
 8009118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800911a:	f7ff f847 	bl	80081ac <__retarget_lock_release_recursive>
 800911e:	e7d9      	b.n	80090d4 <_fflush_r+0xc>
 8009120:	4b05      	ldr	r3, [pc, #20]	; (8009138 <_fflush_r+0x70>)
 8009122:	429c      	cmp	r4, r3
 8009124:	d101      	bne.n	800912a <_fflush_r+0x62>
 8009126:	68ac      	ldr	r4, [r5, #8]
 8009128:	e7df      	b.n	80090ea <_fflush_r+0x22>
 800912a:	4b04      	ldr	r3, [pc, #16]	; (800913c <_fflush_r+0x74>)
 800912c:	429c      	cmp	r4, r3
 800912e:	bf08      	it	eq
 8009130:	68ec      	ldreq	r4, [r5, #12]
 8009132:	e7da      	b.n	80090ea <_fflush_r+0x22>
 8009134:	08011dd8 	.word	0x08011dd8
 8009138:	08011df8 	.word	0x08011df8
 800913c:	08011db8 	.word	0x08011db8

08009140 <fiprintf>:
 8009140:	b40e      	push	{r1, r2, r3}
 8009142:	b503      	push	{r0, r1, lr}
 8009144:	4601      	mov	r1, r0
 8009146:	ab03      	add	r3, sp, #12
 8009148:	4805      	ldr	r0, [pc, #20]	; (8009160 <fiprintf+0x20>)
 800914a:	f853 2b04 	ldr.w	r2, [r3], #4
 800914e:	6800      	ldr	r0, [r0, #0]
 8009150:	9301      	str	r3, [sp, #4]
 8009152:	f7ff fcaf 	bl	8008ab4 <_vfiprintf_r>
 8009156:	b002      	add	sp, #8
 8009158:	f85d eb04 	ldr.w	lr, [sp], #4
 800915c:	b003      	add	sp, #12
 800915e:	4770      	bx	lr
 8009160:	20000010 	.word	0x20000010

08009164 <_lseek_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	4604      	mov	r4, r0
 8009168:	4608      	mov	r0, r1
 800916a:	4611      	mov	r1, r2
 800916c:	2200      	movs	r2, #0
 800916e:	4d05      	ldr	r5, [pc, #20]	; (8009184 <_lseek_r+0x20>)
 8009170:	602a      	str	r2, [r5, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	f7fc fb67 	bl	8005846 <_lseek>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_lseek_r+0x1e>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	b103      	cbz	r3, 8009182 <_lseek_r+0x1e>
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	20000278 	.word	0x20000278

08009188 <__swhatbuf_r>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	460e      	mov	r6, r1
 800918c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009190:	4614      	mov	r4, r2
 8009192:	2900      	cmp	r1, #0
 8009194:	461d      	mov	r5, r3
 8009196:	b096      	sub	sp, #88	; 0x58
 8009198:	da07      	bge.n	80091aa <__swhatbuf_r+0x22>
 800919a:	2300      	movs	r3, #0
 800919c:	602b      	str	r3, [r5, #0]
 800919e:	89b3      	ldrh	r3, [r6, #12]
 80091a0:	061a      	lsls	r2, r3, #24
 80091a2:	d410      	bmi.n	80091c6 <__swhatbuf_r+0x3e>
 80091a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091a8:	e00e      	b.n	80091c8 <__swhatbuf_r+0x40>
 80091aa:	466a      	mov	r2, sp
 80091ac:	f000 f894 	bl	80092d8 <_fstat_r>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	dbf2      	blt.n	800919a <__swhatbuf_r+0x12>
 80091b4:	9a01      	ldr	r2, [sp, #4]
 80091b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80091ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80091be:	425a      	negs	r2, r3
 80091c0:	415a      	adcs	r2, r3
 80091c2:	602a      	str	r2, [r5, #0]
 80091c4:	e7ee      	b.n	80091a4 <__swhatbuf_r+0x1c>
 80091c6:	2340      	movs	r3, #64	; 0x40
 80091c8:	2000      	movs	r0, #0
 80091ca:	6023      	str	r3, [r4, #0]
 80091cc:	b016      	add	sp, #88	; 0x58
 80091ce:	bd70      	pop	{r4, r5, r6, pc}

080091d0 <__smakebuf_r>:
 80091d0:	898b      	ldrh	r3, [r1, #12]
 80091d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091d4:	079d      	lsls	r5, r3, #30
 80091d6:	4606      	mov	r6, r0
 80091d8:	460c      	mov	r4, r1
 80091da:	d507      	bpl.n	80091ec <__smakebuf_r+0x1c>
 80091dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091e0:	6023      	str	r3, [r4, #0]
 80091e2:	6123      	str	r3, [r4, #16]
 80091e4:	2301      	movs	r3, #1
 80091e6:	6163      	str	r3, [r4, #20]
 80091e8:	b002      	add	sp, #8
 80091ea:	bd70      	pop	{r4, r5, r6, pc}
 80091ec:	466a      	mov	r2, sp
 80091ee:	ab01      	add	r3, sp, #4
 80091f0:	f7ff ffca 	bl	8009188 <__swhatbuf_r>
 80091f4:	9900      	ldr	r1, [sp, #0]
 80091f6:	4605      	mov	r5, r0
 80091f8:	4630      	mov	r0, r6
 80091fa:	f7ff fbd9 	bl	80089b0 <_malloc_r>
 80091fe:	b948      	cbnz	r0, 8009214 <__smakebuf_r+0x44>
 8009200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009204:	059a      	lsls	r2, r3, #22
 8009206:	d4ef      	bmi.n	80091e8 <__smakebuf_r+0x18>
 8009208:	f023 0303 	bic.w	r3, r3, #3
 800920c:	f043 0302 	orr.w	r3, r3, #2
 8009210:	81a3      	strh	r3, [r4, #12]
 8009212:	e7e3      	b.n	80091dc <__smakebuf_r+0xc>
 8009214:	4b0d      	ldr	r3, [pc, #52]	; (800924c <__smakebuf_r+0x7c>)
 8009216:	62b3      	str	r3, [r6, #40]	; 0x28
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	6020      	str	r0, [r4, #0]
 800921c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009220:	81a3      	strh	r3, [r4, #12]
 8009222:	9b00      	ldr	r3, [sp, #0]
 8009224:	6120      	str	r0, [r4, #16]
 8009226:	6163      	str	r3, [r4, #20]
 8009228:	9b01      	ldr	r3, [sp, #4]
 800922a:	b15b      	cbz	r3, 8009244 <__smakebuf_r+0x74>
 800922c:	4630      	mov	r0, r6
 800922e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009232:	f000 f863 	bl	80092fc <_isatty_r>
 8009236:	b128      	cbz	r0, 8009244 <__smakebuf_r+0x74>
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	f023 0303 	bic.w	r3, r3, #3
 800923e:	f043 0301 	orr.w	r3, r3, #1
 8009242:	81a3      	strh	r3, [r4, #12]
 8009244:	89a0      	ldrh	r0, [r4, #12]
 8009246:	4305      	orrs	r5, r0
 8009248:	81a5      	strh	r5, [r4, #12]
 800924a:	e7cd      	b.n	80091e8 <__smakebuf_r+0x18>
 800924c:	08007ffd 	.word	0x08007ffd

08009250 <__ascii_mbtowc>:
 8009250:	b082      	sub	sp, #8
 8009252:	b901      	cbnz	r1, 8009256 <__ascii_mbtowc+0x6>
 8009254:	a901      	add	r1, sp, #4
 8009256:	b142      	cbz	r2, 800926a <__ascii_mbtowc+0x1a>
 8009258:	b14b      	cbz	r3, 800926e <__ascii_mbtowc+0x1e>
 800925a:	7813      	ldrb	r3, [r2, #0]
 800925c:	600b      	str	r3, [r1, #0]
 800925e:	7812      	ldrb	r2, [r2, #0]
 8009260:	1e10      	subs	r0, r2, #0
 8009262:	bf18      	it	ne
 8009264:	2001      	movne	r0, #1
 8009266:	b002      	add	sp, #8
 8009268:	4770      	bx	lr
 800926a:	4610      	mov	r0, r2
 800926c:	e7fb      	b.n	8009266 <__ascii_mbtowc+0x16>
 800926e:	f06f 0001 	mvn.w	r0, #1
 8009272:	e7f8      	b.n	8009266 <__ascii_mbtowc+0x16>

08009274 <__malloc_lock>:
 8009274:	4801      	ldr	r0, [pc, #4]	; (800927c <__malloc_lock+0x8>)
 8009276:	f7fe bf98 	b.w	80081aa <__retarget_lock_acquire_recursive>
 800927a:	bf00      	nop
 800927c:	20000270 	.word	0x20000270

08009280 <__malloc_unlock>:
 8009280:	4801      	ldr	r0, [pc, #4]	; (8009288 <__malloc_unlock+0x8>)
 8009282:	f7fe bf93 	b.w	80081ac <__retarget_lock_release_recursive>
 8009286:	bf00      	nop
 8009288:	20000270 	.word	0x20000270

0800928c <_read_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4604      	mov	r4, r0
 8009290:	4608      	mov	r0, r1
 8009292:	4611      	mov	r1, r2
 8009294:	2200      	movs	r2, #0
 8009296:	4d05      	ldr	r5, [pc, #20]	; (80092ac <_read_r+0x20>)
 8009298:	602a      	str	r2, [r5, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	f7fc fa76 	bl	800578c <_read>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_read_r+0x1e>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_read_r+0x1e>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	20000278 	.word	0x20000278

080092b0 <__ascii_wctomb>:
 80092b0:	4603      	mov	r3, r0
 80092b2:	4608      	mov	r0, r1
 80092b4:	b141      	cbz	r1, 80092c8 <__ascii_wctomb+0x18>
 80092b6:	2aff      	cmp	r2, #255	; 0xff
 80092b8:	d904      	bls.n	80092c4 <__ascii_wctomb+0x14>
 80092ba:	228a      	movs	r2, #138	; 0x8a
 80092bc:	f04f 30ff 	mov.w	r0, #4294967295
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	4770      	bx	lr
 80092c4:	2001      	movs	r0, #1
 80092c6:	700a      	strb	r2, [r1, #0]
 80092c8:	4770      	bx	lr

080092ca <abort>:
 80092ca:	2006      	movs	r0, #6
 80092cc:	b508      	push	{r3, lr}
 80092ce:	f000 f84d 	bl	800936c <raise>
 80092d2:	2001      	movs	r0, #1
 80092d4:	f7fc fa50 	bl	8005778 <_exit>

080092d8 <_fstat_r>:
 80092d8:	b538      	push	{r3, r4, r5, lr}
 80092da:	2300      	movs	r3, #0
 80092dc:	4d06      	ldr	r5, [pc, #24]	; (80092f8 <_fstat_r+0x20>)
 80092de:	4604      	mov	r4, r0
 80092e0:	4608      	mov	r0, r1
 80092e2:	4611      	mov	r1, r2
 80092e4:	602b      	str	r3, [r5, #0]
 80092e6:	f7fc fa95 	bl	8005814 <_fstat>
 80092ea:	1c43      	adds	r3, r0, #1
 80092ec:	d102      	bne.n	80092f4 <_fstat_r+0x1c>
 80092ee:	682b      	ldr	r3, [r5, #0]
 80092f0:	b103      	cbz	r3, 80092f4 <_fstat_r+0x1c>
 80092f2:	6023      	str	r3, [r4, #0]
 80092f4:	bd38      	pop	{r3, r4, r5, pc}
 80092f6:	bf00      	nop
 80092f8:	20000278 	.word	0x20000278

080092fc <_isatty_r>:
 80092fc:	b538      	push	{r3, r4, r5, lr}
 80092fe:	2300      	movs	r3, #0
 8009300:	4d05      	ldr	r5, [pc, #20]	; (8009318 <_isatty_r+0x1c>)
 8009302:	4604      	mov	r4, r0
 8009304:	4608      	mov	r0, r1
 8009306:	602b      	str	r3, [r5, #0]
 8009308:	f7fc fa93 	bl	8005832 <_isatty>
 800930c:	1c43      	adds	r3, r0, #1
 800930e:	d102      	bne.n	8009316 <_isatty_r+0x1a>
 8009310:	682b      	ldr	r3, [r5, #0]
 8009312:	b103      	cbz	r3, 8009316 <_isatty_r+0x1a>
 8009314:	6023      	str	r3, [r4, #0]
 8009316:	bd38      	pop	{r3, r4, r5, pc}
 8009318:	20000278 	.word	0x20000278

0800931c <_raise_r>:
 800931c:	291f      	cmp	r1, #31
 800931e:	b538      	push	{r3, r4, r5, lr}
 8009320:	4604      	mov	r4, r0
 8009322:	460d      	mov	r5, r1
 8009324:	d904      	bls.n	8009330 <_raise_r+0x14>
 8009326:	2316      	movs	r3, #22
 8009328:	6003      	str	r3, [r0, #0]
 800932a:	f04f 30ff 	mov.w	r0, #4294967295
 800932e:	bd38      	pop	{r3, r4, r5, pc}
 8009330:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009332:	b112      	cbz	r2, 800933a <_raise_r+0x1e>
 8009334:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009338:	b94b      	cbnz	r3, 800934e <_raise_r+0x32>
 800933a:	4620      	mov	r0, r4
 800933c:	f000 f830 	bl	80093a0 <_getpid_r>
 8009340:	462a      	mov	r2, r5
 8009342:	4601      	mov	r1, r0
 8009344:	4620      	mov	r0, r4
 8009346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800934a:	f000 b817 	b.w	800937c <_kill_r>
 800934e:	2b01      	cmp	r3, #1
 8009350:	d00a      	beq.n	8009368 <_raise_r+0x4c>
 8009352:	1c59      	adds	r1, r3, #1
 8009354:	d103      	bne.n	800935e <_raise_r+0x42>
 8009356:	2316      	movs	r3, #22
 8009358:	6003      	str	r3, [r0, #0]
 800935a:	2001      	movs	r0, #1
 800935c:	e7e7      	b.n	800932e <_raise_r+0x12>
 800935e:	2400      	movs	r4, #0
 8009360:	4628      	mov	r0, r5
 8009362:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009366:	4798      	blx	r3
 8009368:	2000      	movs	r0, #0
 800936a:	e7e0      	b.n	800932e <_raise_r+0x12>

0800936c <raise>:
 800936c:	4b02      	ldr	r3, [pc, #8]	; (8009378 <raise+0xc>)
 800936e:	4601      	mov	r1, r0
 8009370:	6818      	ldr	r0, [r3, #0]
 8009372:	f7ff bfd3 	b.w	800931c <_raise_r>
 8009376:	bf00      	nop
 8009378:	20000010 	.word	0x20000010

0800937c <_kill_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	2300      	movs	r3, #0
 8009380:	4d06      	ldr	r5, [pc, #24]	; (800939c <_kill_r+0x20>)
 8009382:	4604      	mov	r4, r0
 8009384:	4608      	mov	r0, r1
 8009386:	4611      	mov	r1, r2
 8009388:	602b      	str	r3, [r5, #0]
 800938a:	f7fc f9e5 	bl	8005758 <_kill>
 800938e:	1c43      	adds	r3, r0, #1
 8009390:	d102      	bne.n	8009398 <_kill_r+0x1c>
 8009392:	682b      	ldr	r3, [r5, #0]
 8009394:	b103      	cbz	r3, 8009398 <_kill_r+0x1c>
 8009396:	6023      	str	r3, [r4, #0]
 8009398:	bd38      	pop	{r3, r4, r5, pc}
 800939a:	bf00      	nop
 800939c:	20000278 	.word	0x20000278

080093a0 <_getpid_r>:
 80093a0:	f7fc b9d3 	b.w	800574a <_getpid>

080093a4 <_init>:
 80093a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a6:	bf00      	nop
 80093a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093aa:	bc08      	pop	{r3}
 80093ac:	469e      	mov	lr, r3
 80093ae:	4770      	bx	lr

080093b0 <_fini>:
 80093b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b2:	bf00      	nop
 80093b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093b6:	bc08      	pop	{r3}
 80093b8:	469e      	mov	lr, r3
 80093ba:	4770      	bx	lr
