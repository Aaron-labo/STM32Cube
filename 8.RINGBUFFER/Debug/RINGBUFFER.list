
RINGBUFFER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b3c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08002d20  08002d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e28  08002e28  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002e28  08002e28  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e28  08002e28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e28  08002e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e2c  08002e2c  00012e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000070  08002ea0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08002ea0  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2c3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002061  00000000  00000000  0002b35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b0  00000000  00000000  0002d3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  0002db70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7a7  00000000  00000000  0002e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009acd  00000000  00000000  000489cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091a4d  00000000  00000000  0005249c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e3ee9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b4  00000000  00000000  000e3f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002d08 	.word	0x08002d08

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002d08 	.word	0x08002d08

08000224 <rb_init>:
 * 		写入的范围:tail~head
 * 		head == tail 表示缓冲区空
 * 		head == tail+1 表示缓冲区满
 * 返回：读取是否正常
 ***********************************************/
uint8_t rb_init(rb_t *rb, uint8_t *pbuff, uint32_t size) {
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
	rb->size = size;
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	601a      	str	r2, [r3, #0]
	rb->buff = pbuff;
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	68ba      	ldr	r2, [r7, #8]
 800023a:	60da      	str	r2, [r3, #12]
	rb->tail = pbuff;
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	68ba      	ldr	r2, [r7, #8]
 8000240:	609a      	str	r2, [r3, #8]
	rb->head = pbuff;
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	68ba      	ldr	r2, [r7, #8]
 8000246:	605a      	str	r2, [r3, #4]

	return RET_RB_OK;
 8000248:	2300      	movs	r3, #0
}
 800024a:	4618      	mov	r0, r3
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr

08000254 <rb_readable>:
/************************************************
 * 该函数用于输出循环缓冲器中的可读数量
 * 参数：rb为被操作的结构体指针
 * 返回：RingBuffer中现存的可读数
 ***********************************************/
uint32_t rb_readable(rb_t *rb) {
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	if (rb->head <= rb->tail) {
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	685a      	ldr	r2, [r3, #4]
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	429a      	cmp	r2, r3
 8000266:	d805      	bhi.n	8000274 <rb_readable+0x20>
		return (rb->tail - rb->head);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	689a      	ldr	r2, [r3, #8]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	1ad3      	subs	r3, r2, r3
 8000272:	e007      	b.n	8000284 <rb_readable+0x30>
	} else {
		return (rb->size - (rb->head - rb->tail));
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	687a      	ldr	r2, [r7, #4]
 800027a:	6851      	ldr	r1, [r2, #4]
 800027c:	687a      	ldr	r2, [r7, #4]
 800027e:	6892      	ldr	r2, [r2, #8]
 8000280:	1a8a      	subs	r2, r1, r2
 8000282:	1a9b      	subs	r3, r3, r2
	}
}
 8000284:	4618      	mov	r0, r3
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr

0800028e <rb_writeable>:
/************************************************
 * 该函数用于输出循环缓冲器中的可写数量
 * rb - 被操作的结构体指针
 * 返回：RingBuffer中现存的可写数
 ***********************************************/
uint32_t rb_writeable(rb_t *rb) {
 800028e:	b590      	push	{r4, r7, lr}
 8000290:	b083      	sub	sp, #12
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
	//buffer中总有一个字节不用
	return rb->size - rb_readable(rb) - 1;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	681c      	ldr	r4, [r3, #0]
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f7ff ffda 	bl	8000254 <rb_readable>
 80002a0:	4603      	mov	r3, r0
 80002a2:	1ae3      	subs	r3, r4, r3
 80002a4:	3b01      	subs	r3, #1
}
 80002a6:	4618      	mov	r0, r3
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd90      	pop	{r4, r7, pc}
	...

080002b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <MX_GPIO_Init+0x28>)
 80002b8:	699b      	ldr	r3, [r3, #24]
 80002ba:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <MX_GPIO_Init+0x28>)
 80002bc:	f043 0304 	orr.w	r3, r3, #4
 80002c0:	6193      	str	r3, [r2, #24]
 80002c2:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <MX_GPIO_Init+0x28>)
 80002c4:	699b      	ldr	r3, [r3, #24]
 80002c6:	f003 0304 	and.w	r3, r3, #4
 80002ca:	607b      	str	r3, [r7, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]

}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	40021000 	.word	0x40021000

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08e      	sub	sp, #56	; 0x38
 80002e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e2:	f000 fa49 	bl	8000778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f837 	bl	8000358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f7ff ffe1 	bl	80002b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002ee:	f000 f987 	bl	8000600 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t buf_tmp[8];
  uint8_t read_buf[8];
  uint8_t write_buf[8];

  uint32_t readable = 0, writeable = 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	637b      	str	r3, [r7, #52]	; 0x34
 80002f6:	2300      	movs	r3, #0
 80002f8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t addr = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  rb_t rb_tmp;

  memset(buf_tmp, 0, sizeof(buf_tmp)/sizeof(uint8_t));
 80002fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000302:	2208      	movs	r2, #8
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f001 fd96 	bl	8001e38 <memset>
  memset(read_buf, 0, sizeof(read_buf)/sizeof(uint8_t));
 800030c:	f107 031c 	add.w	r3, r7, #28
 8000310:	2208      	movs	r2, #8
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f001 fd8f 	bl	8001e38 <memset>

  rb_init(&rb_tmp, buf_tmp, sizeof(buf_tmp)/sizeof(uint8_t));
 800031a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2208      	movs	r2, #8
 8000322:	4618      	mov	r0, r3
 8000324:	f7ff ff7e 	bl	8000224 <rb_init>
  readable = rb_readable(&rb_tmp);
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ff92 	bl	8000254 <rb_readable>
 8000330:	6378      	str	r0, [r7, #52]	; 0x34
  writeable = rb_writeable(&rb_tmp);
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f7ff ffaa 	bl	800028e <rb_writeable>
 800033a:	6338      	str	r0, [r7, #48]	; 0x30

  print("readable, writeable");
 800033c:	4b03      	ldr	r3, [pc, #12]	; (800034c <main+0x70>)
 800033e:	4a04      	ldr	r2, [pc, #16]	; (8000350 <main+0x74>)
 8000340:	216b      	movs	r1, #107	; 0x6b
 8000342:	4804      	ldr	r0, [pc, #16]	; (8000354 <main+0x78>)
 8000344:	f001 fd80 	bl	8001e48 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000348:	e7fe      	b.n	8000348 <main+0x6c>
 800034a:	bf00      	nop
 800034c:	08002d70 	.word	0x08002d70
 8000350:	08002d20 	.word	0x08002d20
 8000354:	08002d34 	.word	0x08002d34

08000358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b090      	sub	sp, #64	; 0x40
 800035c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0318 	add.w	r3, r7, #24
 8000362:	2228      	movs	r2, #40	; 0x28
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fd66 	bl	8001e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]
 8000376:	60da      	str	r2, [r3, #12]
 8000378:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800037a:	2301      	movs	r3, #1
 800037c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800037e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000382:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000384:	2300      	movs	r3, #0
 8000386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000388:	2301      	movs	r3, #1
 800038a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038c:	2302      	movs	r3, #2
 800038e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000394:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000396:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800039a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	f107 0318 	add.w	r3, r7, #24
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fdf5 	bl	8000f90 <HAL_RCC_OscConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003ac:	f000 f819 	bl	80003e2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b0:	230f      	movs	r3, #15
 80003b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003b4:	2302      	movs	r3, #2
 80003b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	2102      	movs	r1, #2
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 f860 	bl	8001490 <HAL_RCC_ClockConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003d6:	f000 f804 	bl	80003e2 <Error_Handler>
  }
}
 80003da:	bf00      	nop
 80003dc:	3740      	adds	r7, #64	; 0x40
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e6:	b672      	cpsid	i
}
 80003e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ea:	e7fe      	b.n	80003ea <Error_Handler+0x8>

080003ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b085      	sub	sp, #20
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <HAL_MspInit+0x5c>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	4a14      	ldr	r2, [pc, #80]	; (8000448 <HAL_MspInit+0x5c>)
 80003f8:	f043 0301 	orr.w	r3, r3, #1
 80003fc:	6193      	str	r3, [r2, #24]
 80003fe:	4b12      	ldr	r3, [pc, #72]	; (8000448 <HAL_MspInit+0x5c>)
 8000400:	699b      	ldr	r3, [r3, #24]
 8000402:	f003 0301 	and.w	r3, r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
 8000408:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040a:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <HAL_MspInit+0x5c>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	4a0e      	ldr	r2, [pc, #56]	; (8000448 <HAL_MspInit+0x5c>)
 8000410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000414:	61d3      	str	r3, [r2, #28]
 8000416:	4b0c      	ldr	r3, [pc, #48]	; (8000448 <HAL_MspInit+0x5c>)
 8000418:	69db      	ldr	r3, [r3, #28]
 800041a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <HAL_MspInit+0x60>)
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	60fb      	str	r3, [r7, #12]
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <HAL_MspInit+0x60>)
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800043e:	bf00      	nop
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	40021000 	.word	0x40021000
 800044c:	40010000 	.word	0x40010000

08000450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <NMI_Handler+0x4>

08000456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045a:	e7fe      	b.n	800045a <HardFault_Handler+0x4>

0800045c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <MemManage_Handler+0x4>

08000462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000466:	e7fe      	b.n	8000466 <BusFault_Handler+0x4>

08000468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800046c:	e7fe      	b.n	800046c <UsageFault_Handler+0x4>

0800046e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800046e:	b480      	push	{r7}
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr

0800047a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047a:	b480      	push	{r7}
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800047e:	bf00      	nop
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr

08000486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000486:	b480      	push	{r7}
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr

08000492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000496:	f000 f9b5 	bl	8000804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
	...

080004a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004a4:	4802      	ldr	r0, [pc, #8]	; (80004b0 <USART1_IRQHandler+0x10>)
 80004a6:	f001 f9db 	bl	8001860 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	20000098 	.word	0x20000098

080004b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b086      	sub	sp, #24
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c0:	2300      	movs	r3, #0
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	e00a      	b.n	80004dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004c6:	f3af 8000 	nop.w
 80004ca:	4601      	mov	r1, r0
 80004cc:	68bb      	ldr	r3, [r7, #8]
 80004ce:	1c5a      	adds	r2, r3, #1
 80004d0:	60ba      	str	r2, [r7, #8]
 80004d2:	b2ca      	uxtb	r2, r1
 80004d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	3301      	adds	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	697a      	ldr	r2, [r7, #20]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dbf0      	blt.n	80004c6 <_read+0x12>
	}

return len;
 80004e4:	687b      	ldr	r3, [r7, #4]
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3718      	adds	r7, #24
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}

080004ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b086      	sub	sp, #24
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	60f8      	str	r0, [r7, #12]
 80004f6:	60b9      	str	r1, [r7, #8]
 80004f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	e009      	b.n	8000514 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	60ba      	str	r2, [r7, #8]
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4618      	mov	r0, r3
 800050a:	f000 f8f7 	bl	80006fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3301      	adds	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697a      	ldr	r2, [r7, #20]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	429a      	cmp	r2, r3
 800051a:	dbf1      	blt.n	8000500 <_write+0x12>
	}
	return len;
 800051c:	687b      	ldr	r3, [r7, #4]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <_close>:

int _close(int file)
{
 8000526:	b480      	push	{r7}
 8000528:	b083      	sub	sp, #12
 800052a:	af00      	add	r7, sp, #0
 800052c:	6078      	str	r0, [r7, #4]
	return -1;
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000532:	4618      	mov	r0, r3
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800054c:	605a      	str	r2, [r3, #4]
	return 0;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <_isatty>:

int _isatty(int file)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
	return 1;
 8000562:	2301      	movs	r3, #1
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr

0800056e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800056e:	b480      	push	{r7}
 8000570:	b085      	sub	sp, #20
 8000572:	af00      	add	r7, sp, #0
 8000574:	60f8      	str	r0, [r7, #12]
 8000576:	60b9      	str	r1, [r7, #8]
 8000578:	607a      	str	r2, [r7, #4]
	return 0;
 800057a:	2300      	movs	r3, #0
}
 800057c:	4618      	mov	r0, r3
 800057e:	3714      	adds	r7, #20
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
	...

08000588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <_sbrk+0x5c>)
 8000592:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <_sbrk+0x60>)
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <_sbrk+0x64>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d102      	bne.n	80005aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a4:	4b11      	ldr	r3, [pc, #68]	; (80005ec <_sbrk+0x64>)
 80005a6:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <_sbrk+0x68>)
 80005a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <_sbrk+0x64>)
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4413      	add	r3, r2
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d207      	bcs.n	80005c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005b8:	f001 fc14 	bl	8001de4 <__errno>
 80005bc:	4603      	mov	r3, r0
 80005be:	220c      	movs	r2, #12
 80005c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005c2:	f04f 33ff 	mov.w	r3, #4294967295
 80005c6:	e009      	b.n	80005dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <_sbrk+0x64>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <_sbrk+0x64>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	4a05      	ldr	r2, [pc, #20]	; (80005ec <_sbrk+0x64>)
 80005d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005da:	68fb      	ldr	r3, [r7, #12]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3718      	adds	r7, #24
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20010000 	.word	0x20010000
 80005e8:	00000400 	.word	0x00000400
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	20000158 	.word	0x20000158

080005f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_USART1_UART_Init+0x50>)
 8000608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_USART1_UART_Init+0x4c>)
 800060c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_USART1_UART_Init+0x4c>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_USART1_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_USART1_UART_Init+0x4c>)
 8000638:	f001 f8c4 	bl	80017c4 <HAL_UART_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000642:	f7ff fece 	bl	80003e2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098
 8000650:	40013800 	.word	0x40013800

08000654 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <HAL_UART_MspInit+0x9c>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d139      	bne.n	80006e8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000674:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <HAL_UART_MspInit+0xa0>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <HAL_UART_MspInit+0xa0>)
 800067a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <HAL_UART_MspInit+0xa0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <HAL_UART_MspInit+0xa0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <HAL_UART_MspInit+0xa0>)
 8000692:	f043 0304 	orr.w	r3, r3, #4
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <HAL_UART_MspInit+0xa0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0304 	and.w	r3, r3, #4
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ae:	2303      	movs	r3, #3
 80006b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 0310 	add.w	r3, r7, #16
 80006b6:	4619      	mov	r1, r3
 80006b8:	480f      	ldr	r0, [pc, #60]	; (80006f8 <HAL_UART_MspInit+0xa4>)
 80006ba:	f000 fad5 	bl	8000c68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0310 	add.w	r3, r7, #16
 80006d0:	4619      	mov	r1, r3
 80006d2:	4809      	ldr	r0, [pc, #36]	; (80006f8 <HAL_UART_MspInit+0xa4>)
 80006d4:	f000 fac8 	bl	8000c68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	2025      	movs	r0, #37	; 0x25
 80006de:	f000 f984 	bl	80009ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006e2:	2025      	movs	r0, #37	; 0x25
 80006e4:	f000 f99d 	bl	8000a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40013800 	.word	0x40013800
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40010800 	.word	0x40010800

080006fc <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
  x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  // 具体哪个串口可以更改huart2为其它串口
  // HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
  while ((USART1->SR & 0X40) == 0) {
 8000704:	bf00      	nop
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <__io_putchar+0x2c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0f9      	beq.n	8000706 <__io_putchar+0xa>
  }; //循环发送,直到发送完毕
  USART1->DR = (uint8_t) ch;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <__io_putchar+0x2c>)
 8000718:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

  return ch;
 800071a:	687b      	ldr	r3, [r7, #4]
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40013800 	.word	0x40013800

0800072c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800072c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800072e:	e003      	b.n	8000738 <LoopCopyDataInit>

08000730 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000732:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000734:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000736:	3104      	adds	r1, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000738:	480a      	ldr	r0, [pc, #40]	; (8000764 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800073c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800073e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000740:	d3f6      	bcc.n	8000730 <CopyDataInit>
  ldr r2, =_sbss
 8000742:	4a0a      	ldr	r2, [pc, #40]	; (800076c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000744:	e002      	b.n	800074c <LoopFillZerobss>

08000746 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000748:	f842 3b04 	str.w	r3, [r2], #4

0800074c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800074e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000750:	d3f9      	bcc.n	8000746 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000752:	f7ff ff4f 	bl	80005f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000756:	f001 fb4b 	bl	8001df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075a:	f7ff fdbf 	bl	80002dc <main>
  bx lr
 800075e:	4770      	bx	lr
  ldr r3, =_sidata
 8000760:	08002e30 	.word	0x08002e30
  ldr r0, =_sdata
 8000764:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000768:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800076c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000770:	20000154 	.word	0x20000154

08000774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC1_2_IRQHandler>
	...

08000778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_Init+0x28>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_Init+0x28>)
 8000782:	f043 0310 	orr.w	r3, r3, #16
 8000786:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f923 	bl	80009d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078e:	2000      	movs	r0, #0
 8000790:	f000 f808 	bl	80007a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000794:	f7ff fe2a 	bl	80003ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40022000 	.word	0x40022000

080007a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <HAL_InitTick+0x54>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_InitTick+0x58>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80007be:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f93b 	bl	8000a3e <HAL_SYSTICK_Config>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00e      	b.n	80007f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d80a      	bhi.n	80007ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d8:	2200      	movs	r2, #0
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	f000 f903 	bl	80009ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e4:	4a06      	ldr	r2, [pc, #24]	; (8000800 <HAL_InitTick+0x5c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000004 	.word	0x20000004

08000804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_IncTick+0x1c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_IncTick+0x20>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4413      	add	r3, r2
 8000814:	4a03      	ldr	r2, [pc, #12]	; (8000824 <HAL_IncTick+0x20>)
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000008 	.word	0x20000008
 8000824:	20000140 	.word	0x20000140

08000828 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b02      	ldr	r3, [pc, #8]	; (8000838 <HAL_GetTick+0x10>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	20000140 	.word	0x20000140

0800083c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000858:	4013      	ands	r3, r2
 800085a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000864:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800086c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086e:	4a04      	ldr	r2, [pc, #16]	; (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	60d3      	str	r3, [r2, #12]
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <__NVIC_GetPriorityGrouping+0x18>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	f003 0307 	and.w	r3, r3, #7
}
 8000892:	4618      	mov	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	db0b      	blt.n	80008ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	f003 021f 	and.w	r2, r3, #31
 80008b8:	4906      	ldr	r1, [pc, #24]	; (80008d4 <__NVIC_EnableIRQ+0x34>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	095b      	lsrs	r3, r3, #5
 80008c0:	2001      	movs	r0, #1
 80008c2:	fa00 f202 	lsl.w	r2, r0, r2
 80008c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	e000e100 	.word	0xe000e100

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	490c      	ldr	r1, [pc, #48]	; (8000924 <__NVIC_SetPriority+0x4c>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	0112      	lsls	r2, r2, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4908      	ldr	r1, [pc, #32]	; (8000928 <__NVIC_SetPriority+0x50>)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	3b04      	subs	r3, #4
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	; 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 32ff 	mov.w	r2, #4294967295
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	f04f 31ff 	mov.w	r1, #4294967295
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43d9      	mvns	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	4313      	orrs	r3, r2
         );
}
 8000986:	4618      	mov	r0, r3
 8000988:	3724      	adds	r7, #36	; 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009a0:	d301      	bcc.n	80009a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00f      	b.n	80009c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <SysTick_Config+0x40>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ae:	210f      	movs	r1, #15
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295
 80009b4:	f7ff ff90 	bl	80008d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <SysTick_Config+0x40>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <SysTick_Config+0x40>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff2d 	bl	800083c <__NVIC_SetPriorityGrouping>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009fc:	f7ff ff42 	bl	8000884 <__NVIC_GetPriorityGrouping>
 8000a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	6978      	ldr	r0, [r7, #20]
 8000a08:	f7ff ff90 	bl	800092c <NVIC_EncodePriority>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff5f 	bl	80008d8 <__NVIC_SetPriority>
}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff35 	bl	80008a0 <__NVIC_EnableIRQ>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ffa2 	bl	8000990 <SysTick_Config>
 8000a4c:	4603      	mov	r3, r0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d005      	beq.n	8000a7a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2204      	movs	r2, #4
 8000a72:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
 8000a78:	e0d6      	b.n	8000c28 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f022 020e 	bic.w	r2, r2, #14
 8000a88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f022 0201 	bic.w	r2, r2, #1
 8000a98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b64      	ldr	r3, [pc, #400]	; (8000c34 <HAL_DMA_Abort_IT+0x1dc>)
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d958      	bls.n	8000b58 <HAL_DMA_Abort_IT+0x100>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a63      	ldr	r2, [pc, #396]	; (8000c38 <HAL_DMA_Abort_IT+0x1e0>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d04f      	beq.n	8000b50 <HAL_DMA_Abort_IT+0xf8>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a61      	ldr	r2, [pc, #388]	; (8000c3c <HAL_DMA_Abort_IT+0x1e4>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d048      	beq.n	8000b4c <HAL_DMA_Abort_IT+0xf4>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a60      	ldr	r2, [pc, #384]	; (8000c40 <HAL_DMA_Abort_IT+0x1e8>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d040      	beq.n	8000b46 <HAL_DMA_Abort_IT+0xee>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a5e      	ldr	r2, [pc, #376]	; (8000c44 <HAL_DMA_Abort_IT+0x1ec>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d038      	beq.n	8000b40 <HAL_DMA_Abort_IT+0xe8>
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a5d      	ldr	r2, [pc, #372]	; (8000c48 <HAL_DMA_Abort_IT+0x1f0>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d030      	beq.n	8000b3a <HAL_DMA_Abort_IT+0xe2>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a5b      	ldr	r2, [pc, #364]	; (8000c4c <HAL_DMA_Abort_IT+0x1f4>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d028      	beq.n	8000b34 <HAL_DMA_Abort_IT+0xdc>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a53      	ldr	r2, [pc, #332]	; (8000c34 <HAL_DMA_Abort_IT+0x1dc>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d020      	beq.n	8000b2e <HAL_DMA_Abort_IT+0xd6>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a57      	ldr	r2, [pc, #348]	; (8000c50 <HAL_DMA_Abort_IT+0x1f8>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d019      	beq.n	8000b2a <HAL_DMA_Abort_IT+0xd2>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a56      	ldr	r2, [pc, #344]	; (8000c54 <HAL_DMA_Abort_IT+0x1fc>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d012      	beq.n	8000b26 <HAL_DMA_Abort_IT+0xce>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a54      	ldr	r2, [pc, #336]	; (8000c58 <HAL_DMA_Abort_IT+0x200>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d00a      	beq.n	8000b20 <HAL_DMA_Abort_IT+0xc8>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a53      	ldr	r2, [pc, #332]	; (8000c5c <HAL_DMA_Abort_IT+0x204>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d102      	bne.n	8000b1a <HAL_DMA_Abort_IT+0xc2>
 8000b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b18:	e01b      	b.n	8000b52 <HAL_DMA_Abort_IT+0xfa>
 8000b1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b1e:	e018      	b.n	8000b52 <HAL_DMA_Abort_IT+0xfa>
 8000b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b24:	e015      	b.n	8000b52 <HAL_DMA_Abort_IT+0xfa>
 8000b26:	2310      	movs	r3, #16
 8000b28:	e013      	b.n	8000b52 <HAL_DMA_Abort_IT+0xfa>
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e011      	b.n	8000b52 <HAL_DMA_Abort_IT+0xfa>
 8000b2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b32:	e00e      	b.n	8000b52 <HAL_DMA_Abort_IT+0xfa>
 8000b34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b38:	e00b      	b.n	8000b52 <HAL_DMA_Abort_IT+0xfa>
 8000b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b3e:	e008      	b.n	8000b52 <HAL_DMA_Abort_IT+0xfa>
 8000b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b44:	e005      	b.n	8000b52 <HAL_DMA_Abort_IT+0xfa>
 8000b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b4a:	e002      	b.n	8000b52 <HAL_DMA_Abort_IT+0xfa>
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	e000      	b.n	8000b52 <HAL_DMA_Abort_IT+0xfa>
 8000b50:	2301      	movs	r3, #1
 8000b52:	4a43      	ldr	r2, [pc, #268]	; (8000c60 <HAL_DMA_Abort_IT+0x208>)
 8000b54:	6053      	str	r3, [r2, #4]
 8000b56:	e057      	b.n	8000c08 <HAL_DMA_Abort_IT+0x1b0>
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a36      	ldr	r2, [pc, #216]	; (8000c38 <HAL_DMA_Abort_IT+0x1e0>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d04f      	beq.n	8000c02 <HAL_DMA_Abort_IT+0x1aa>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a35      	ldr	r2, [pc, #212]	; (8000c3c <HAL_DMA_Abort_IT+0x1e4>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d048      	beq.n	8000bfe <HAL_DMA_Abort_IT+0x1a6>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a33      	ldr	r2, [pc, #204]	; (8000c40 <HAL_DMA_Abort_IT+0x1e8>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d040      	beq.n	8000bf8 <HAL_DMA_Abort_IT+0x1a0>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a32      	ldr	r2, [pc, #200]	; (8000c44 <HAL_DMA_Abort_IT+0x1ec>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d038      	beq.n	8000bf2 <HAL_DMA_Abort_IT+0x19a>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a30      	ldr	r2, [pc, #192]	; (8000c48 <HAL_DMA_Abort_IT+0x1f0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d030      	beq.n	8000bec <HAL_DMA_Abort_IT+0x194>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a2f      	ldr	r2, [pc, #188]	; (8000c4c <HAL_DMA_Abort_IT+0x1f4>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d028      	beq.n	8000be6 <HAL_DMA_Abort_IT+0x18e>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a26      	ldr	r2, [pc, #152]	; (8000c34 <HAL_DMA_Abort_IT+0x1dc>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d020      	beq.n	8000be0 <HAL_DMA_Abort_IT+0x188>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a2b      	ldr	r2, [pc, #172]	; (8000c50 <HAL_DMA_Abort_IT+0x1f8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d019      	beq.n	8000bdc <HAL_DMA_Abort_IT+0x184>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a29      	ldr	r2, [pc, #164]	; (8000c54 <HAL_DMA_Abort_IT+0x1fc>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d012      	beq.n	8000bd8 <HAL_DMA_Abort_IT+0x180>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a28      	ldr	r2, [pc, #160]	; (8000c58 <HAL_DMA_Abort_IT+0x200>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d00a      	beq.n	8000bd2 <HAL_DMA_Abort_IT+0x17a>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a26      	ldr	r2, [pc, #152]	; (8000c5c <HAL_DMA_Abort_IT+0x204>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d102      	bne.n	8000bcc <HAL_DMA_Abort_IT+0x174>
 8000bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bca:	e01b      	b.n	8000c04 <HAL_DMA_Abort_IT+0x1ac>
 8000bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bd0:	e018      	b.n	8000c04 <HAL_DMA_Abort_IT+0x1ac>
 8000bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd6:	e015      	b.n	8000c04 <HAL_DMA_Abort_IT+0x1ac>
 8000bd8:	2310      	movs	r3, #16
 8000bda:	e013      	b.n	8000c04 <HAL_DMA_Abort_IT+0x1ac>
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e011      	b.n	8000c04 <HAL_DMA_Abort_IT+0x1ac>
 8000be0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000be4:	e00e      	b.n	8000c04 <HAL_DMA_Abort_IT+0x1ac>
 8000be6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bea:	e00b      	b.n	8000c04 <HAL_DMA_Abort_IT+0x1ac>
 8000bec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf0:	e008      	b.n	8000c04 <HAL_DMA_Abort_IT+0x1ac>
 8000bf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf6:	e005      	b.n	8000c04 <HAL_DMA_Abort_IT+0x1ac>
 8000bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfc:	e002      	b.n	8000c04 <HAL_DMA_Abort_IT+0x1ac>
 8000bfe:	2310      	movs	r3, #16
 8000c00:	e000      	b.n	8000c04 <HAL_DMA_Abort_IT+0x1ac>
 8000c02:	2301      	movs	r3, #1
 8000c04:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <HAL_DMA_Abort_IT+0x20c>)
 8000c06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d003      	beq.n	8000c28 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	4798      	blx	r3
    } 
  }
  return status;
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40020080 	.word	0x40020080
 8000c38:	40020008 	.word	0x40020008
 8000c3c:	4002001c 	.word	0x4002001c
 8000c40:	40020030 	.word	0x40020030
 8000c44:	40020044 	.word	0x40020044
 8000c48:	40020058 	.word	0x40020058
 8000c4c:	4002006c 	.word	0x4002006c
 8000c50:	40020408 	.word	0x40020408
 8000c54:	4002041c 	.word	0x4002041c
 8000c58:	40020430 	.word	0x40020430
 8000c5c:	40020444 	.word	0x40020444
 8000c60:	40020400 	.word	0x40020400
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b08b      	sub	sp, #44	; 0x2c
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c7a:	e179      	b.n	8000f70 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	f040 8168 	bne.w	8000f6a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	4aa0      	ldr	r2, [pc, #640]	; (8000f20 <HAL_GPIO_Init+0x2b8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d05e      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000ca4:	4a9e      	ldr	r2, [pc, #632]	; (8000f20 <HAL_GPIO_Init+0x2b8>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d875      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000caa:	4a9e      	ldr	r2, [pc, #632]	; (8000f24 <HAL_GPIO_Init+0x2bc>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d058      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cb0:	4a9c      	ldr	r2, [pc, #624]	; (8000f24 <HAL_GPIO_Init+0x2bc>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d86f      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cb6:	4a9c      	ldr	r2, [pc, #624]	; (8000f28 <HAL_GPIO_Init+0x2c0>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d052      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cbc:	4a9a      	ldr	r2, [pc, #616]	; (8000f28 <HAL_GPIO_Init+0x2c0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d869      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cc2:	4a9a      	ldr	r2, [pc, #616]	; (8000f2c <HAL_GPIO_Init+0x2c4>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d04c      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cc8:	4a98      	ldr	r2, [pc, #608]	; (8000f2c <HAL_GPIO_Init+0x2c4>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d863      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cce:	4a98      	ldr	r2, [pc, #608]	; (8000f30 <HAL_GPIO_Init+0x2c8>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d046      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
 8000cd4:	4a96      	ldr	r2, [pc, #600]	; (8000f30 <HAL_GPIO_Init+0x2c8>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d85d      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000cda:	2b12      	cmp	r3, #18
 8000cdc:	d82a      	bhi.n	8000d34 <HAL_GPIO_Init+0xcc>
 8000cde:	2b12      	cmp	r3, #18
 8000ce0:	d859      	bhi.n	8000d96 <HAL_GPIO_Init+0x12e>
 8000ce2:	a201      	add	r2, pc, #4	; (adr r2, 8000ce8 <HAL_GPIO_Init+0x80>)
 8000ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ce8:	08000d63 	.word	0x08000d63
 8000cec:	08000d3d 	.word	0x08000d3d
 8000cf0:	08000d4f 	.word	0x08000d4f
 8000cf4:	08000d91 	.word	0x08000d91
 8000cf8:	08000d97 	.word	0x08000d97
 8000cfc:	08000d97 	.word	0x08000d97
 8000d00:	08000d97 	.word	0x08000d97
 8000d04:	08000d97 	.word	0x08000d97
 8000d08:	08000d97 	.word	0x08000d97
 8000d0c:	08000d97 	.word	0x08000d97
 8000d10:	08000d97 	.word	0x08000d97
 8000d14:	08000d97 	.word	0x08000d97
 8000d18:	08000d97 	.word	0x08000d97
 8000d1c:	08000d97 	.word	0x08000d97
 8000d20:	08000d97 	.word	0x08000d97
 8000d24:	08000d97 	.word	0x08000d97
 8000d28:	08000d97 	.word	0x08000d97
 8000d2c:	08000d45 	.word	0x08000d45
 8000d30:	08000d59 	.word	0x08000d59
 8000d34:	4a7f      	ldr	r2, [pc, #508]	; (8000f34 <HAL_GPIO_Init+0x2cc>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d013      	beq.n	8000d62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d3a:	e02c      	b.n	8000d96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	623b      	str	r3, [r7, #32]
          break;
 8000d42:	e029      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	623b      	str	r3, [r7, #32]
          break;
 8000d4c:	e024      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	3308      	adds	r3, #8
 8000d54:	623b      	str	r3, [r7, #32]
          break;
 8000d56:	e01f      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	330c      	adds	r3, #12
 8000d5e:	623b      	str	r3, [r7, #32]
          break;
 8000d60:	e01a      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	623b      	str	r3, [r7, #32]
          break;
 8000d6e:	e013      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d105      	bne.n	8000d84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69fa      	ldr	r2, [r7, #28]
 8000d80:	611a      	str	r2, [r3, #16]
          break;
 8000d82:	e009      	b.n	8000d98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d84:	2308      	movs	r3, #8
 8000d86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	69fa      	ldr	r2, [r7, #28]
 8000d8c:	615a      	str	r2, [r3, #20]
          break;
 8000d8e:	e003      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
          break;
 8000d94:	e000      	b.n	8000d98 <HAL_GPIO_Init+0x130>
          break;
 8000d96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	2bff      	cmp	r3, #255	; 0xff
 8000d9c:	d801      	bhi.n	8000da2 <HAL_GPIO_Init+0x13a>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	e001      	b.n	8000da6 <HAL_GPIO_Init+0x13e>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	3304      	adds	r3, #4
 8000da6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	2bff      	cmp	r3, #255	; 0xff
 8000dac:	d802      	bhi.n	8000db4 <HAL_GPIO_Init+0x14c>
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	e002      	b.n	8000dba <HAL_GPIO_Init+0x152>
 8000db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db6:	3b08      	subs	r3, #8
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	210f      	movs	r1, #15
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	401a      	ands	r2, r3
 8000dcc:	6a39      	ldr	r1, [r7, #32]
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f000 80c1 	beq.w	8000f6a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000de8:	4b53      	ldr	r3, [pc, #332]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a52      	ldr	r2, [pc, #328]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b50      	ldr	r3, [pc, #320]	; (8000f38 <HAL_GPIO_Init+0x2d0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e00:	4a4e      	ldr	r2, [pc, #312]	; (8000f3c <HAL_GPIO_Init+0x2d4>)
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	3302      	adds	r3, #2
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4a46      	ldr	r2, [pc, #280]	; (8000f40 <HAL_GPIO_Init+0x2d8>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d01f      	beq.n	8000e6c <HAL_GPIO_Init+0x204>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4a45      	ldr	r2, [pc, #276]	; (8000f44 <HAL_GPIO_Init+0x2dc>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d019      	beq.n	8000e68 <HAL_GPIO_Init+0x200>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	4a44      	ldr	r2, [pc, #272]	; (8000f48 <HAL_GPIO_Init+0x2e0>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d013      	beq.n	8000e64 <HAL_GPIO_Init+0x1fc>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a43      	ldr	r2, [pc, #268]	; (8000f4c <HAL_GPIO_Init+0x2e4>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d00d      	beq.n	8000e60 <HAL_GPIO_Init+0x1f8>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a42      	ldr	r2, [pc, #264]	; (8000f50 <HAL_GPIO_Init+0x2e8>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d007      	beq.n	8000e5c <HAL_GPIO_Init+0x1f4>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a41      	ldr	r2, [pc, #260]	; (8000f54 <HAL_GPIO_Init+0x2ec>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d101      	bne.n	8000e58 <HAL_GPIO_Init+0x1f0>
 8000e54:	2305      	movs	r3, #5
 8000e56:	e00a      	b.n	8000e6e <HAL_GPIO_Init+0x206>
 8000e58:	2306      	movs	r3, #6
 8000e5a:	e008      	b.n	8000e6e <HAL_GPIO_Init+0x206>
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	e006      	b.n	8000e6e <HAL_GPIO_Init+0x206>
 8000e60:	2303      	movs	r3, #3
 8000e62:	e004      	b.n	8000e6e <HAL_GPIO_Init+0x206>
 8000e64:	2302      	movs	r3, #2
 8000e66:	e002      	b.n	8000e6e <HAL_GPIO_Init+0x206>
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e000      	b.n	8000e6e <HAL_GPIO_Init+0x206>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e70:	f002 0203 	and.w	r2, r2, #3
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	4093      	lsls	r3, r2
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e7e:	492f      	ldr	r1, [pc, #188]	; (8000f3c <HAL_GPIO_Init+0x2d4>)
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	089b      	lsrs	r3, r3, #2
 8000e84:	3302      	adds	r3, #2
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d006      	beq.n	8000ea6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e98:	4b2f      	ldr	r3, [pc, #188]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	492e      	ldr	r1, [pc, #184]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	600b      	str	r3, [r1, #0]
 8000ea4:	e006      	b.n	8000eb4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ea6:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	43db      	mvns	r3, r3
 8000eae:	492a      	ldr	r1, [pc, #168]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d006      	beq.n	8000ece <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	4924      	ldr	r1, [pc, #144]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	604b      	str	r3, [r1, #4]
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ece:	4b22      	ldr	r3, [pc, #136]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000ed0:	685a      	ldr	r2, [r3, #4]
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	4920      	ldr	r1, [pc, #128]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d006      	beq.n	8000ef6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	491a      	ldr	r1, [pc, #104]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	608b      	str	r3, [r1, #8]
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	4916      	ldr	r1, [pc, #88]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d025      	beq.n	8000f5c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	4910      	ldr	r1, [pc, #64]	; (8000f58 <HAL_GPIO_Init+0x2f0>)
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	60cb      	str	r3, [r1, #12]
 8000f1c:	e025      	b.n	8000f6a <HAL_GPIO_Init+0x302>
 8000f1e:	bf00      	nop
 8000f20:	10320000 	.word	0x10320000
 8000f24:	10310000 	.word	0x10310000
 8000f28:	10220000 	.word	0x10220000
 8000f2c:	10210000 	.word	0x10210000
 8000f30:	10120000 	.word	0x10120000
 8000f34:	10110000 	.word	0x10110000
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010000 	.word	0x40010000
 8000f40:	40010800 	.word	0x40010800
 8000f44:	40010c00 	.word	0x40010c00
 8000f48:	40011000 	.word	0x40011000
 8000f4c:	40011400 	.word	0x40011400
 8000f50:	40011800 	.word	0x40011800
 8000f54:	40011c00 	.word	0x40011c00
 8000f58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	4909      	ldr	r1, [pc, #36]	; (8000f8c <HAL_GPIO_Init+0x324>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f47f ae7e 	bne.w	8000c7c <HAL_GPIO_Init+0x14>
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	372c      	adds	r7, #44	; 0x2c
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40010400 	.word	0x40010400

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e26c      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f000 8087 	beq.w	80010be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fb0:	4b92      	ldr	r3, [pc, #584]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 030c 	and.w	r3, r3, #12
 8000fb8:	2b04      	cmp	r3, #4
 8000fba:	d00c      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fbc:	4b8f      	ldr	r3, [pc, #572]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 030c 	and.w	r3, r3, #12
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d112      	bne.n	8000fee <HAL_RCC_OscConfig+0x5e>
 8000fc8:	4b8c      	ldr	r3, [pc, #560]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd4:	d10b      	bne.n	8000fee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd6:	4b89      	ldr	r3, [pc, #548]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d06c      	beq.n	80010bc <HAL_RCC_OscConfig+0x12c>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d168      	bne.n	80010bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e246      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff6:	d106      	bne.n	8001006 <HAL_RCC_OscConfig+0x76>
 8000ff8:	4b80      	ldr	r3, [pc, #512]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a7f      	ldr	r2, [pc, #508]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	e02e      	b.n	8001064 <HAL_RCC_OscConfig+0xd4>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0x98>
 800100e:	4b7b      	ldr	r3, [pc, #492]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a7a      	ldr	r2, [pc, #488]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b78      	ldr	r3, [pc, #480]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a77      	ldr	r2, [pc, #476]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e01d      	b.n	8001064 <HAL_RCC_OscConfig+0xd4>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001030:	d10c      	bne.n	800104c <HAL_RCC_OscConfig+0xbc>
 8001032:	4b72      	ldr	r3, [pc, #456]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a71      	ldr	r2, [pc, #452]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103c:	6013      	str	r3, [r2, #0]
 800103e:	4b6f      	ldr	r3, [pc, #444]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a6e      	ldr	r2, [pc, #440]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	e00b      	b.n	8001064 <HAL_RCC_OscConfig+0xd4>
 800104c:	4b6b      	ldr	r3, [pc, #428]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a6a      	ldr	r2, [pc, #424]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b68      	ldr	r3, [pc, #416]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a67      	ldr	r2, [pc, #412]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 800105e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001062:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d013      	beq.n	8001094 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fbdc 	bl	8000828 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001074:	f7ff fbd8 	bl	8000828 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b64      	cmp	r3, #100	; 0x64
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e1fa      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001086:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f0      	beq.n	8001074 <HAL_RCC_OscConfig+0xe4>
 8001092:	e014      	b.n	80010be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001094:	f7ff fbc8 	bl	8000828 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800109c:	f7ff fbc4 	bl	8000828 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b64      	cmp	r3, #100	; 0x64
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e1e6      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ae:	4b53      	ldr	r3, [pc, #332]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x10c>
 80010ba:	e000      	b.n	80010be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d063      	beq.n	8001192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010ca:	4b4c      	ldr	r3, [pc, #304]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010d6:	4b49      	ldr	r3, [pc, #292]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d11c      	bne.n	800111c <HAL_RCC_OscConfig+0x18c>
 80010e2:	4b46      	ldr	r3, [pc, #280]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d116      	bne.n	800111c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	4b43      	ldr	r3, [pc, #268]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d005      	beq.n	8001106 <HAL_RCC_OscConfig+0x176>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d001      	beq.n	8001106 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e1ba      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001106:	4b3d      	ldr	r3, [pc, #244]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4939      	ldr	r1, [pc, #228]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001116:	4313      	orrs	r3, r2
 8001118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111a:	e03a      	b.n	8001192 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d020      	beq.n	8001166 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001124:	4b36      	ldr	r3, [pc, #216]	; (8001200 <HAL_RCC_OscConfig+0x270>)
 8001126:	2201      	movs	r2, #1
 8001128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fb7d 	bl	8000828 <HAL_GetTick>
 800112e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001132:	f7ff fb79 	bl	8000828 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e19b      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d0f0      	beq.n	8001132 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001150:	4b2a      	ldr	r3, [pc, #168]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	4927      	ldr	r1, [pc, #156]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001160:	4313      	orrs	r3, r2
 8001162:	600b      	str	r3, [r1, #0]
 8001164:	e015      	b.n	8001192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001166:	4b26      	ldr	r3, [pc, #152]	; (8001200 <HAL_RCC_OscConfig+0x270>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fb5c 	bl	8000828 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001174:	f7ff fb58 	bl	8000828 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e17a      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	2b00      	cmp	r3, #0
 800119c:	d03a      	beq.n	8001214 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d019      	beq.n	80011da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_RCC_OscConfig+0x274>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011ac:	f7ff fb3c 	bl	8000828 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011b4:	f7ff fb38 	bl	8000828 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e15a      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_RCC_OscConfig+0x26c>)
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f000 fad8 	bl	8001788 <RCC_Delay>
 80011d8:	e01c      	b.n	8001214 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_RCC_OscConfig+0x274>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e0:	f7ff fb22 	bl	8000828 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e6:	e00f      	b.n	8001208 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e8:	f7ff fb1e 	bl	8000828 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d908      	bls.n	8001208 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e140      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	42420000 	.word	0x42420000
 8001204:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001208:	4b9e      	ldr	r3, [pc, #632]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1e9      	bne.n	80011e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 80a6 	beq.w	800136e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001226:	4b97      	ldr	r3, [pc, #604]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10d      	bne.n	800124e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	4b94      	ldr	r3, [pc, #592]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4a93      	ldr	r2, [pc, #588]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123c:	61d3      	str	r3, [r2, #28]
 800123e:	4b91      	ldr	r3, [pc, #580]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800124a:	2301      	movs	r3, #1
 800124c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800124e:	4b8e      	ldr	r3, [pc, #568]	; (8001488 <HAL_RCC_OscConfig+0x4f8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001256:	2b00      	cmp	r3, #0
 8001258:	d118      	bne.n	800128c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800125a:	4b8b      	ldr	r3, [pc, #556]	; (8001488 <HAL_RCC_OscConfig+0x4f8>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a8a      	ldr	r2, [pc, #552]	; (8001488 <HAL_RCC_OscConfig+0x4f8>)
 8001260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001266:	f7ff fadf 	bl	8000828 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800126e:	f7ff fadb 	bl	8000828 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b64      	cmp	r3, #100	; 0x64
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e0fd      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001280:	4b81      	ldr	r3, [pc, #516]	; (8001488 <HAL_RCC_OscConfig+0x4f8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d106      	bne.n	80012a2 <HAL_RCC_OscConfig+0x312>
 8001294:	4b7b      	ldr	r3, [pc, #492]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	4a7a      	ldr	r2, [pc, #488]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6213      	str	r3, [r2, #32]
 80012a0:	e02d      	b.n	80012fe <HAL_RCC_OscConfig+0x36e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10c      	bne.n	80012c4 <HAL_RCC_OscConfig+0x334>
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	4a75      	ldr	r2, [pc, #468]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012b0:	f023 0301 	bic.w	r3, r3, #1
 80012b4:	6213      	str	r3, [r2, #32]
 80012b6:	4b73      	ldr	r3, [pc, #460]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012b8:	6a1b      	ldr	r3, [r3, #32]
 80012ba:	4a72      	ldr	r2, [pc, #456]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	f023 0304 	bic.w	r3, r3, #4
 80012c0:	6213      	str	r3, [r2, #32]
 80012c2:	e01c      	b.n	80012fe <HAL_RCC_OscConfig+0x36e>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	d10c      	bne.n	80012e6 <HAL_RCC_OscConfig+0x356>
 80012cc:	4b6d      	ldr	r3, [pc, #436]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	4a6c      	ldr	r2, [pc, #432]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	6213      	str	r3, [r2, #32]
 80012d8:	4b6a      	ldr	r3, [pc, #424]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	4a69      	ldr	r2, [pc, #420]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6213      	str	r3, [r2, #32]
 80012e4:	e00b      	b.n	80012fe <HAL_RCC_OscConfig+0x36e>
 80012e6:	4b67      	ldr	r3, [pc, #412]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	4a66      	ldr	r2, [pc, #408]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012ec:	f023 0301 	bic.w	r3, r3, #1
 80012f0:	6213      	str	r3, [r2, #32]
 80012f2:	4b64      	ldr	r3, [pc, #400]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	6a1b      	ldr	r3, [r3, #32]
 80012f6:	4a63      	ldr	r2, [pc, #396]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80012f8:	f023 0304 	bic.w	r3, r3, #4
 80012fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d015      	beq.n	8001332 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff fa8f 	bl	8000828 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130c:	e00a      	b.n	8001324 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130e:	f7ff fa8b 	bl	8000828 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	; 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e0ab      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001324:	4b57      	ldr	r3, [pc, #348]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0ee      	beq.n	800130e <HAL_RCC_OscConfig+0x37e>
 8001330:	e014      	b.n	800135c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001332:	f7ff fa79 	bl	8000828 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001338:	e00a      	b.n	8001350 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800133a:	f7ff fa75 	bl	8000828 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	f241 3288 	movw	r2, #5000	; 0x1388
 8001348:	4293      	cmp	r3, r2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e095      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001350:	4b4c      	ldr	r3, [pc, #304]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1ee      	bne.n	800133a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d105      	bne.n	800136e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001362:	4b48      	ldr	r3, [pc, #288]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4a47      	ldr	r2, [pc, #284]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800136c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8081 	beq.w	800147a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001378:	4b42      	ldr	r3, [pc, #264]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b08      	cmp	r3, #8
 8001382:	d061      	beq.n	8001448 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	2b02      	cmp	r3, #2
 800138a:	d146      	bne.n	800141a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138c:	4b3f      	ldr	r3, [pc, #252]	; (800148c <HAL_RCC_OscConfig+0x4fc>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fa49 	bl	8000828 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800139a:	f7ff fa45 	bl	8000828 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e067      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ac:	4b35      	ldr	r3, [pc, #212]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c0:	d108      	bne.n	80013d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	492d      	ldr	r1, [pc, #180]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a19      	ldr	r1, [r3, #32]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e4:	430b      	orrs	r3, r1
 80013e6:	4927      	ldr	r1, [pc, #156]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ec:	4b27      	ldr	r3, [pc, #156]	; (800148c <HAL_RCC_OscConfig+0x4fc>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fa19 	bl	8000828 <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff fa15 	bl	8000828 <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e037      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x46a>
 8001418:	e02f      	b.n	800147a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <HAL_RCC_OscConfig+0x4fc>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fa02 	bl	8000828 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff f9fe 	bl	8000828 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e020      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800143a:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x498>
 8001446:	e018      	b.n	800147a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69db      	ldr	r3, [r3, #28]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e013      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_RCC_OscConfig+0x4f4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	429a      	cmp	r2, r3
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001472:	429a      	cmp	r2, r3
 8001474:	d001      	beq.n	800147a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40021000 	.word	0x40021000
 8001488:	40007000 	.word	0x40007000
 800148c:	42420060 	.word	0x42420060

08001490 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0d0      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014a4:	4b6a      	ldr	r3, [pc, #424]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d910      	bls.n	80014d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b67      	ldr	r3, [pc, #412]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 0207 	bic.w	r2, r3, #7
 80014ba:	4965      	ldr	r1, [pc, #404]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c2:	4b63      	ldr	r3, [pc, #396]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0b8      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d020      	beq.n	8001522 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ec:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4a58      	ldr	r2, [pc, #352]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001504:	4b53      	ldr	r3, [pc, #332]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	4a52      	ldr	r2, [pc, #328]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800150a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800150e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001510:	4b50      	ldr	r3, [pc, #320]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	494d      	ldr	r1, [pc, #308]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	4313      	orrs	r3, r2
 8001520:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d040      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b47      	ldr	r3, [pc, #284]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d115      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e07f      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d107      	bne.n	800155e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	4b41      	ldr	r3, [pc, #260]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d109      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e073      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155e:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e06b      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156e:	4b39      	ldr	r3, [pc, #228]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f023 0203 	bic.w	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4936      	ldr	r1, [pc, #216]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001580:	f7ff f952 	bl	8000828 <HAL_GetTick>
 8001584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	e00a      	b.n	800159e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001588:	f7ff f94e 	bl	8000828 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e053      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 020c 	and.w	r2, r3, #12
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d1eb      	bne.n	8001588 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015b0:	4b27      	ldr	r3, [pc, #156]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d210      	bcs.n	80015e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b24      	ldr	r3, [pc, #144]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 0207 	bic.w	r2, r3, #7
 80015c6:	4922      	ldr	r1, [pc, #136]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e032      	b.n	8001646 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4916      	ldr	r1, [pc, #88]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	490e      	ldr	r1, [pc, #56]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	4313      	orrs	r3, r2
 800161c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800161e:	f000 f821 	bl	8001664 <HAL_RCC_GetSysClockFreq>
 8001622:	4602      	mov	r2, r0
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	490a      	ldr	r1, [pc, #40]	; (8001658 <HAL_RCC_ClockConfig+0x1c8>)
 8001630:	5ccb      	ldrb	r3, [r1, r3]
 8001632:	fa22 f303 	lsr.w	r3, r2, r3
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <HAL_RCC_ClockConfig+0x1cc>)
 8001638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RCC_ClockConfig+0x1d0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff f8b0 	bl	80007a4 <HAL_InitTick>

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40022000 	.word	0x40022000
 8001654:	40021000 	.word	0x40021000
 8001658:	08002d78 	.word	0x08002d78
 800165c:	20000000 	.word	0x20000000
 8001660:	20000004 	.word	0x20000004

08001664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001664:	b490      	push	{r4, r7}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800166a:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <HAL_RCC_GetSysClockFreq+0xb0>)
 800166c:	1d3c      	adds	r4, r7, #4
 800166e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001670:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001674:	f240 2301 	movw	r3, #513	; 0x201
 8001678:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	2300      	movs	r3, #0
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f003 030c 	and.w	r3, r3, #12
 800169a:	2b04      	cmp	r3, #4
 800169c:	d002      	beq.n	80016a4 <HAL_RCC_GetSysClockFreq+0x40>
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d003      	beq.n	80016aa <HAL_RCC_GetSysClockFreq+0x46>
 80016a2:	e02d      	b.n	8001700 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_RCC_GetSysClockFreq+0xb8>)
 80016a6:	623b      	str	r3, [r7, #32]
      break;
 80016a8:	e02d      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	0c9b      	lsrs	r3, r3, #18
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016b6:	4413      	add	r3, r2
 80016b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d013      	beq.n	80016f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_RCC_GetSysClockFreq+0xb4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	0c5b      	lsrs	r3, r3, #17
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80016d6:	4413      	add	r3, r2
 80016d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80016dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <HAL_RCC_GetSysClockFreq+0xb8>)
 80016e2:	fb02 f203 	mul.w	r2, r2, r3
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
 80016ee:	e004      	b.n	80016fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <HAL_RCC_GetSysClockFreq+0xbc>)
 80016f4:	fb02 f303 	mul.w	r3, r2, r3
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	623b      	str	r3, [r7, #32]
      break;
 80016fe:	e002      	b.n	8001706 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001702:	623b      	str	r3, [r7, #32]
      break;
 8001704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001706:	6a3b      	ldr	r3, [r7, #32]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bc90      	pop	{r4, r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	08002d60 	.word	0x08002d60
 8001718:	40021000 	.word	0x40021000
 800171c:	007a1200 	.word	0x007a1200
 8001720:	003d0900 	.word	0x003d0900

08001724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001728:	4b02      	ldr	r3, [pc, #8]	; (8001734 <HAL_RCC_GetHCLKFreq+0x10>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr
 8001734:	20000000 	.word	0x20000000

08001738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800173c:	f7ff fff2 	bl	8001724 <HAL_RCC_GetHCLKFreq>
 8001740:	4602      	mov	r2, r0
 8001742:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	0a1b      	lsrs	r3, r3, #8
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	4903      	ldr	r1, [pc, #12]	; (800175c <HAL_RCC_GetPCLK1Freq+0x24>)
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001754:	4618      	mov	r0, r3
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40021000 	.word	0x40021000
 800175c:	08002d88 	.word	0x08002d88

08001760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001764:	f7ff ffde 	bl	8001724 <HAL_RCC_GetHCLKFreq>
 8001768:	4602      	mov	r2, r0
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	0adb      	lsrs	r3, r3, #11
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	4903      	ldr	r1, [pc, #12]	; (8001784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001776:	5ccb      	ldrb	r3, [r1, r3]
 8001778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000
 8001784:	08002d88 	.word	0x08002d88

08001788 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <RCC_Delay+0x34>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0a      	ldr	r2, [pc, #40]	; (80017c0 <RCC_Delay+0x38>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0a5b      	lsrs	r3, r3, #9
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017a4:	bf00      	nop
  }
  while (Delay --);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1e5a      	subs	r2, r3, #1
 80017aa:	60fa      	str	r2, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f9      	bne.n	80017a4 <RCC_Delay+0x1c>
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	20000000 	.word	0x20000000
 80017c0:	10624dd3 	.word	0x10624dd3

080017c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e03f      	b.n	8001856 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7fe ff32 	bl	8000654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2224      	movs	r2, #36	; 0x24
 80017f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 fa5d 	bl	8001cc8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800181c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800182c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800183c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2220      	movs	r2, #32
 8001848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2220      	movs	r2, #32
 8001850:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10d      	bne.n	80018b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f003 0320 	and.w	r3, r3, #32
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_UART_IRQHandler+0x52>
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f98b 	bl	8001bc6 <UART_Receive_IT>
      return;
 80018b0:	e0d0      	b.n	8001a54 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80b0 	beq.w	8001a1a <HAL_UART_IRQHandler+0x1ba>
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d105      	bne.n	80018d0 <HAL_UART_IRQHandler+0x70>
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80a5 	beq.w	8001a1a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00a      	beq.n	80018f0 <HAL_UART_IRQHandler+0x90>
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e8:	f043 0201 	orr.w	r2, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0304 	and.w	r3, r3, #4
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00a      	beq.n	8001910 <HAL_UART_IRQHandler+0xb0>
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00a      	beq.n	8001930 <HAL_UART_IRQHandler+0xd0>
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001928:	f043 0204 	orr.w	r2, r3, #4
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00f      	beq.n	800195a <HAL_UART_IRQHandler+0xfa>
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b00      	cmp	r3, #0
 8001942:	d104      	bne.n	800194e <HAL_UART_IRQHandler+0xee>
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d005      	beq.n	800195a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001952:	f043 0208 	orr.w	r2, r3, #8
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195e:	2b00      	cmp	r3, #0
 8001960:	d077      	beq.n	8001a52 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <HAL_UART_IRQHandler+0x11c>
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	f003 0320 	and.w	r3, r3, #32
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f000 f925 	bl	8001bc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001986:	2b00      	cmp	r3, #0
 8001988:	bf14      	ite	ne
 800198a:	2301      	movne	r3, #1
 800198c:	2300      	moveq	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d102      	bne.n	80019a4 <HAL_UART_IRQHandler+0x144>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d031      	beq.n	8001a08 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f876 	bl	8001a96 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d023      	beq.n	8001a00 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019c6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d013      	beq.n	80019f8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d4:	4a21      	ldr	r2, [pc, #132]	; (8001a5c <HAL_UART_IRQHandler+0x1fc>)
 80019d6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff f83b 	bl	8000a58 <HAL_DMA_Abort_IT>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d016      	beq.n	8001a16 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019f2:	4610      	mov	r0, r2
 80019f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019f6:	e00e      	b.n	8001a16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f843 	bl	8001a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019fe:	e00a      	b.n	8001a16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f83f 	bl	8001a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a06:	e006      	b.n	8001a16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 f83b 	bl	8001a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001a14:	e01d      	b.n	8001a52 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a16:	bf00      	nop
    return;
 8001a18:	e01b      	b.n	8001a52 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_UART_IRQHandler+0x1d6>
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f862 	bl	8001af8 <UART_Transmit_IT>
    return;
 8001a34:	e00e      	b.n	8001a54 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d009      	beq.n	8001a54 <HAL_UART_IRQHandler+0x1f4>
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 f8a3 	bl	8001b96 <UART_EndTransmit_IT>
    return;
 8001a50:	e000      	b.n	8001a54 <HAL_UART_IRQHandler+0x1f4>
    return;
 8001a52:	bf00      	nop
  }
}
 8001a54:	3720      	adds	r7, #32
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	08001ad1 	.word	0x08001ad1

08001a60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr

08001a72 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr

08001a84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr

08001a96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001aac:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0201 	bic.w	r2, r2, #1
 8001abc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001adc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001aea:	68f8      	ldr	r0, [r7, #12]
 8001aec:	f7ff ffca 	bl	8001a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001af0:	bf00      	nop
 8001af2:	3710      	adds	r7, #16
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b21      	cmp	r3, #33	; 0x21
 8001b0a:	d13e      	bne.n	8001b8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b14:	d114      	bne.n	8001b40 <UART_Transmit_IT+0x48>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d110      	bne.n	8001b40 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	1c9a      	adds	r2, r3, #2
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	621a      	str	r2, [r3, #32]
 8001b3e:	e008      	b.n	8001b52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	1c59      	adds	r1, r3, #1
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6211      	str	r1, [r2, #32]
 8001b4a:	781a      	ldrb	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	4619      	mov	r1, r3
 8001b60:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10f      	bne.n	8001b86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68da      	ldr	r2, [r3, #12]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001b86:	2300      	movs	r3, #0
 8001b88:	e000      	b.n	8001b8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001b8a:	2302      	movs	r3, #2
  }
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ff52 	bl	8001a60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b22      	cmp	r3, #34	; 0x22
 8001bd8:	d170      	bne.n	8001cbc <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001be2:	d117      	bne.n	8001c14 <UART_Receive_IT+0x4e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d113      	bne.n	8001c14 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	1c9a      	adds	r2, r3, #2
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
 8001c12:	e026      	b.n	8001c62 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c26:	d007      	beq.n	8001c38 <UART_Receive_IT+0x72>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10a      	bne.n	8001c46 <UART_Receive_IT+0x80>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d106      	bne.n	8001c46 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	e008      	b.n	8001c58 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d120      	bne.n	8001cb8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f022 0220 	bic.w	r2, r2, #32
 8001c84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695a      	ldr	r2, [r3, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 0201 	bic.w	r2, r2, #1
 8001ca4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fedf 	bl	8001a72 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e002      	b.n	8001cbe <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	e000      	b.n	8001cbe <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001cbc:	2302      	movs	r3, #2
  }
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d02:	f023 030c 	bic.w	r3, r3, #12
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699a      	ldr	r2, [r3, #24]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a2c      	ldr	r2, [pc, #176]	; (8001ddc <UART_SetConfig+0x114>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d103      	bne.n	8001d38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001d30:	f7ff fd16 	bl	8001760 <HAL_RCC_GetPCLK2Freq>
 8001d34:	60f8      	str	r0, [r7, #12]
 8001d36:	e002      	b.n	8001d3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001d38:	f7ff fcfe 	bl	8001738 <HAL_RCC_GetPCLK1Freq>
 8001d3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4613      	mov	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4413      	add	r3, r2
 8001d46:	009a      	lsls	r2, r3, #2
 8001d48:	441a      	add	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	4a22      	ldr	r2, [pc, #136]	; (8001de0 <UART_SetConfig+0x118>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	095b      	lsrs	r3, r3, #5
 8001d5c:	0119      	lsls	r1, r3, #4
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	009a      	lsls	r2, r3, #2
 8001d68:	441a      	add	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <UART_SetConfig+0x118>)
 8001d76:	fba3 0302 	umull	r0, r3, r3, r2
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	2064      	movs	r0, #100	; 0x64
 8001d7e:	fb00 f303 	mul.w	r3, r0, r3
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	3332      	adds	r3, #50	; 0x32
 8001d88:	4a15      	ldr	r2, [pc, #84]	; (8001de0 <UART_SetConfig+0x118>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d94:	4419      	add	r1, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009a      	lsls	r2, r3, #2
 8001da0:	441a      	add	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <UART_SetConfig+0x118>)
 8001dae:	fba3 0302 	umull	r0, r3, r3, r2
 8001db2:	095b      	lsrs	r3, r3, #5
 8001db4:	2064      	movs	r0, #100	; 0x64
 8001db6:	fb00 f303 	mul.w	r3, r0, r3
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	3332      	adds	r3, #50	; 0x32
 8001dc0:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <UART_SetConfig+0x118>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	f003 020f 	and.w	r2, r3, #15
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	440a      	add	r2, r1
 8001dd2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001dd4:	bf00      	nop
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40013800 	.word	0x40013800
 8001de0:	51eb851f 	.word	0x51eb851f

08001de4 <__errno>:
 8001de4:	4b01      	ldr	r3, [pc, #4]	; (8001dec <__errno+0x8>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	2000000c 	.word	0x2000000c

08001df0 <__libc_init_array>:
 8001df0:	b570      	push	{r4, r5, r6, lr}
 8001df2:	2600      	movs	r6, #0
 8001df4:	4d0c      	ldr	r5, [pc, #48]	; (8001e28 <__libc_init_array+0x38>)
 8001df6:	4c0d      	ldr	r4, [pc, #52]	; (8001e2c <__libc_init_array+0x3c>)
 8001df8:	1b64      	subs	r4, r4, r5
 8001dfa:	10a4      	asrs	r4, r4, #2
 8001dfc:	42a6      	cmp	r6, r4
 8001dfe:	d109      	bne.n	8001e14 <__libc_init_array+0x24>
 8001e00:	f000 ff82 	bl	8002d08 <_init>
 8001e04:	2600      	movs	r6, #0
 8001e06:	4d0a      	ldr	r5, [pc, #40]	; (8001e30 <__libc_init_array+0x40>)
 8001e08:	4c0a      	ldr	r4, [pc, #40]	; (8001e34 <__libc_init_array+0x44>)
 8001e0a:	1b64      	subs	r4, r4, r5
 8001e0c:	10a4      	asrs	r4, r4, #2
 8001e0e:	42a6      	cmp	r6, r4
 8001e10:	d105      	bne.n	8001e1e <__libc_init_array+0x2e>
 8001e12:	bd70      	pop	{r4, r5, r6, pc}
 8001e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e18:	4798      	blx	r3
 8001e1a:	3601      	adds	r6, #1
 8001e1c:	e7ee      	b.n	8001dfc <__libc_init_array+0xc>
 8001e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e22:	4798      	blx	r3
 8001e24:	3601      	adds	r6, #1
 8001e26:	e7f2      	b.n	8001e0e <__libc_init_array+0x1e>
 8001e28:	08002e28 	.word	0x08002e28
 8001e2c:	08002e28 	.word	0x08002e28
 8001e30:	08002e28 	.word	0x08002e28
 8001e34:	08002e2c 	.word	0x08002e2c

08001e38 <memset>:
 8001e38:	4603      	mov	r3, r0
 8001e3a:	4402      	add	r2, r0
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d100      	bne.n	8001e42 <memset+0xa>
 8001e40:	4770      	bx	lr
 8001e42:	f803 1b01 	strb.w	r1, [r3], #1
 8001e46:	e7f9      	b.n	8001e3c <memset+0x4>

08001e48 <iprintf>:
 8001e48:	b40f      	push	{r0, r1, r2, r3}
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <iprintf+0x2c>)
 8001e4c:	b513      	push	{r0, r1, r4, lr}
 8001e4e:	681c      	ldr	r4, [r3, #0]
 8001e50:	b124      	cbz	r4, 8001e5c <iprintf+0x14>
 8001e52:	69a3      	ldr	r3, [r4, #24]
 8001e54:	b913      	cbnz	r3, 8001e5c <iprintf+0x14>
 8001e56:	4620      	mov	r0, r4
 8001e58:	f000 f866 	bl	8001f28 <__sinit>
 8001e5c:	ab05      	add	r3, sp, #20
 8001e5e:	4620      	mov	r0, r4
 8001e60:	9a04      	ldr	r2, [sp, #16]
 8001e62:	68a1      	ldr	r1, [r4, #8]
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	f000 f981 	bl	800216c <_vfiprintf_r>
 8001e6a:	b002      	add	sp, #8
 8001e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e70:	b004      	add	sp, #16
 8001e72:	4770      	bx	lr
 8001e74:	2000000c 	.word	0x2000000c

08001e78 <std>:
 8001e78:	2300      	movs	r3, #0
 8001e7a:	b510      	push	{r4, lr}
 8001e7c:	4604      	mov	r4, r0
 8001e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8001e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e86:	6083      	str	r3, [r0, #8]
 8001e88:	8181      	strh	r1, [r0, #12]
 8001e8a:	6643      	str	r3, [r0, #100]	; 0x64
 8001e8c:	81c2      	strh	r2, [r0, #14]
 8001e8e:	6183      	str	r3, [r0, #24]
 8001e90:	4619      	mov	r1, r3
 8001e92:	2208      	movs	r2, #8
 8001e94:	305c      	adds	r0, #92	; 0x5c
 8001e96:	f7ff ffcf 	bl	8001e38 <memset>
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <std+0x38>)
 8001e9c:	6224      	str	r4, [r4, #32]
 8001e9e:	6263      	str	r3, [r4, #36]	; 0x24
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <std+0x3c>)
 8001ea2:	62a3      	str	r3, [r4, #40]	; 0x28
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <std+0x40>)
 8001ea6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001ea8:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <std+0x44>)
 8001eaa:	6323      	str	r3, [r4, #48]	; 0x30
 8001eac:	bd10      	pop	{r4, pc}
 8001eae:	bf00      	nop
 8001eb0:	08002719 	.word	0x08002719
 8001eb4:	0800273b 	.word	0x0800273b
 8001eb8:	08002773 	.word	0x08002773
 8001ebc:	08002797 	.word	0x08002797

08001ec0 <_cleanup_r>:
 8001ec0:	4901      	ldr	r1, [pc, #4]	; (8001ec8 <_cleanup_r+0x8>)
 8001ec2:	f000 b8af 	b.w	8002024 <_fwalk_reent>
 8001ec6:	bf00      	nop
 8001ec8:	08002a71 	.word	0x08002a71

08001ecc <__sfmoreglue>:
 8001ecc:	b570      	push	{r4, r5, r6, lr}
 8001ece:	2568      	movs	r5, #104	; 0x68
 8001ed0:	1e4a      	subs	r2, r1, #1
 8001ed2:	4355      	muls	r5, r2
 8001ed4:	460e      	mov	r6, r1
 8001ed6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001eda:	f000 f8c5 	bl	8002068 <_malloc_r>
 8001ede:	4604      	mov	r4, r0
 8001ee0:	b140      	cbz	r0, 8001ef4 <__sfmoreglue+0x28>
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	e9c0 1600 	strd	r1, r6, [r0]
 8001ee8:	300c      	adds	r0, #12
 8001eea:	60a0      	str	r0, [r4, #8]
 8001eec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ef0:	f7ff ffa2 	bl	8001e38 <memset>
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}

08001ef8 <__sfp_lock_acquire>:
 8001ef8:	4801      	ldr	r0, [pc, #4]	; (8001f00 <__sfp_lock_acquire+0x8>)
 8001efa:	f000 b8b3 	b.w	8002064 <__retarget_lock_acquire_recursive>
 8001efe:	bf00      	nop
 8001f00:	2000014c 	.word	0x2000014c

08001f04 <__sfp_lock_release>:
 8001f04:	4801      	ldr	r0, [pc, #4]	; (8001f0c <__sfp_lock_release+0x8>)
 8001f06:	f000 b8ae 	b.w	8002066 <__retarget_lock_release_recursive>
 8001f0a:	bf00      	nop
 8001f0c:	2000014c 	.word	0x2000014c

08001f10 <__sinit_lock_acquire>:
 8001f10:	4801      	ldr	r0, [pc, #4]	; (8001f18 <__sinit_lock_acquire+0x8>)
 8001f12:	f000 b8a7 	b.w	8002064 <__retarget_lock_acquire_recursive>
 8001f16:	bf00      	nop
 8001f18:	20000147 	.word	0x20000147

08001f1c <__sinit_lock_release>:
 8001f1c:	4801      	ldr	r0, [pc, #4]	; (8001f24 <__sinit_lock_release+0x8>)
 8001f1e:	f000 b8a2 	b.w	8002066 <__retarget_lock_release_recursive>
 8001f22:	bf00      	nop
 8001f24:	20000147 	.word	0x20000147

08001f28 <__sinit>:
 8001f28:	b510      	push	{r4, lr}
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	f7ff fff0 	bl	8001f10 <__sinit_lock_acquire>
 8001f30:	69a3      	ldr	r3, [r4, #24]
 8001f32:	b11b      	cbz	r3, 8001f3c <__sinit+0x14>
 8001f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f38:	f7ff bff0 	b.w	8001f1c <__sinit_lock_release>
 8001f3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f40:	6523      	str	r3, [r4, #80]	; 0x50
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <__sinit+0x68>)
 8001f44:	4a13      	ldr	r2, [pc, #76]	; (8001f94 <__sinit+0x6c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f4a:	42a3      	cmp	r3, r4
 8001f4c:	bf08      	it	eq
 8001f4e:	2301      	moveq	r3, #1
 8001f50:	4620      	mov	r0, r4
 8001f52:	bf08      	it	eq
 8001f54:	61a3      	streq	r3, [r4, #24]
 8001f56:	f000 f81f 	bl	8001f98 <__sfp>
 8001f5a:	6060      	str	r0, [r4, #4]
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f000 f81b 	bl	8001f98 <__sfp>
 8001f62:	60a0      	str	r0, [r4, #8]
 8001f64:	4620      	mov	r0, r4
 8001f66:	f000 f817 	bl	8001f98 <__sfp>
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	60e0      	str	r0, [r4, #12]
 8001f70:	6860      	ldr	r0, [r4, #4]
 8001f72:	f7ff ff81 	bl	8001e78 <std>
 8001f76:	2201      	movs	r2, #1
 8001f78:	2109      	movs	r1, #9
 8001f7a:	68a0      	ldr	r0, [r4, #8]
 8001f7c:	f7ff ff7c 	bl	8001e78 <std>
 8001f80:	2202      	movs	r2, #2
 8001f82:	2112      	movs	r1, #18
 8001f84:	68e0      	ldr	r0, [r4, #12]
 8001f86:	f7ff ff77 	bl	8001e78 <std>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	61a3      	str	r3, [r4, #24]
 8001f8e:	e7d1      	b.n	8001f34 <__sinit+0xc>
 8001f90:	08002d90 	.word	0x08002d90
 8001f94:	08001ec1 	.word	0x08001ec1

08001f98 <__sfp>:
 8001f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9a:	4607      	mov	r7, r0
 8001f9c:	f7ff ffac 	bl	8001ef8 <__sfp_lock_acquire>
 8001fa0:	4b1e      	ldr	r3, [pc, #120]	; (800201c <__sfp+0x84>)
 8001fa2:	681e      	ldr	r6, [r3, #0]
 8001fa4:	69b3      	ldr	r3, [r6, #24]
 8001fa6:	b913      	cbnz	r3, 8001fae <__sfp+0x16>
 8001fa8:	4630      	mov	r0, r6
 8001faa:	f7ff ffbd 	bl	8001f28 <__sinit>
 8001fae:	3648      	adds	r6, #72	; 0x48
 8001fb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	d503      	bpl.n	8001fc0 <__sfp+0x28>
 8001fb8:	6833      	ldr	r3, [r6, #0]
 8001fba:	b30b      	cbz	r3, 8002000 <__sfp+0x68>
 8001fbc:	6836      	ldr	r6, [r6, #0]
 8001fbe:	e7f7      	b.n	8001fb0 <__sfp+0x18>
 8001fc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001fc4:	b9d5      	cbnz	r5, 8001ffc <__sfp+0x64>
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <__sfp+0x88>)
 8001fc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001fcc:	60e3      	str	r3, [r4, #12]
 8001fce:	6665      	str	r5, [r4, #100]	; 0x64
 8001fd0:	f000 f847 	bl	8002062 <__retarget_lock_init_recursive>
 8001fd4:	f7ff ff96 	bl	8001f04 <__sfp_lock_release>
 8001fd8:	2208      	movs	r2, #8
 8001fda:	4629      	mov	r1, r5
 8001fdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001fe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001fe4:	6025      	str	r5, [r4, #0]
 8001fe6:	61a5      	str	r5, [r4, #24]
 8001fe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001fec:	f7ff ff24 	bl	8001e38 <memset>
 8001ff0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ff4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ffc:	3468      	adds	r4, #104	; 0x68
 8001ffe:	e7d9      	b.n	8001fb4 <__sfp+0x1c>
 8002000:	2104      	movs	r1, #4
 8002002:	4638      	mov	r0, r7
 8002004:	f7ff ff62 	bl	8001ecc <__sfmoreglue>
 8002008:	4604      	mov	r4, r0
 800200a:	6030      	str	r0, [r6, #0]
 800200c:	2800      	cmp	r0, #0
 800200e:	d1d5      	bne.n	8001fbc <__sfp+0x24>
 8002010:	f7ff ff78 	bl	8001f04 <__sfp_lock_release>
 8002014:	230c      	movs	r3, #12
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	e7ee      	b.n	8001ff8 <__sfp+0x60>
 800201a:	bf00      	nop
 800201c:	08002d90 	.word	0x08002d90
 8002020:	ffff0001 	.word	0xffff0001

08002024 <_fwalk_reent>:
 8002024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002028:	4606      	mov	r6, r0
 800202a:	4688      	mov	r8, r1
 800202c:	2700      	movs	r7, #0
 800202e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002032:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002036:	f1b9 0901 	subs.w	r9, r9, #1
 800203a:	d505      	bpl.n	8002048 <_fwalk_reent+0x24>
 800203c:	6824      	ldr	r4, [r4, #0]
 800203e:	2c00      	cmp	r4, #0
 8002040:	d1f7      	bne.n	8002032 <_fwalk_reent+0xe>
 8002042:	4638      	mov	r0, r7
 8002044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002048:	89ab      	ldrh	r3, [r5, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d907      	bls.n	800205e <_fwalk_reent+0x3a>
 800204e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002052:	3301      	adds	r3, #1
 8002054:	d003      	beq.n	800205e <_fwalk_reent+0x3a>
 8002056:	4629      	mov	r1, r5
 8002058:	4630      	mov	r0, r6
 800205a:	47c0      	blx	r8
 800205c:	4307      	orrs	r7, r0
 800205e:	3568      	adds	r5, #104	; 0x68
 8002060:	e7e9      	b.n	8002036 <_fwalk_reent+0x12>

08002062 <__retarget_lock_init_recursive>:
 8002062:	4770      	bx	lr

08002064 <__retarget_lock_acquire_recursive>:
 8002064:	4770      	bx	lr

08002066 <__retarget_lock_release_recursive>:
 8002066:	4770      	bx	lr

08002068 <_malloc_r>:
 8002068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206a:	1ccd      	adds	r5, r1, #3
 800206c:	f025 0503 	bic.w	r5, r5, #3
 8002070:	3508      	adds	r5, #8
 8002072:	2d0c      	cmp	r5, #12
 8002074:	bf38      	it	cc
 8002076:	250c      	movcc	r5, #12
 8002078:	2d00      	cmp	r5, #0
 800207a:	4606      	mov	r6, r0
 800207c:	db01      	blt.n	8002082 <_malloc_r+0x1a>
 800207e:	42a9      	cmp	r1, r5
 8002080:	d903      	bls.n	800208a <_malloc_r+0x22>
 8002082:	230c      	movs	r3, #12
 8002084:	6033      	str	r3, [r6, #0]
 8002086:	2000      	movs	r0, #0
 8002088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800208a:	f000 fdb1 	bl	8002bf0 <__malloc_lock>
 800208e:	4921      	ldr	r1, [pc, #132]	; (8002114 <_malloc_r+0xac>)
 8002090:	680a      	ldr	r2, [r1, #0]
 8002092:	4614      	mov	r4, r2
 8002094:	b99c      	cbnz	r4, 80020be <_malloc_r+0x56>
 8002096:	4f20      	ldr	r7, [pc, #128]	; (8002118 <_malloc_r+0xb0>)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b923      	cbnz	r3, 80020a6 <_malloc_r+0x3e>
 800209c:	4621      	mov	r1, r4
 800209e:	4630      	mov	r0, r6
 80020a0:	f000 fb2a 	bl	80026f8 <_sbrk_r>
 80020a4:	6038      	str	r0, [r7, #0]
 80020a6:	4629      	mov	r1, r5
 80020a8:	4630      	mov	r0, r6
 80020aa:	f000 fb25 	bl	80026f8 <_sbrk_r>
 80020ae:	1c43      	adds	r3, r0, #1
 80020b0:	d123      	bne.n	80020fa <_malloc_r+0x92>
 80020b2:	230c      	movs	r3, #12
 80020b4:	4630      	mov	r0, r6
 80020b6:	6033      	str	r3, [r6, #0]
 80020b8:	f000 fda0 	bl	8002bfc <__malloc_unlock>
 80020bc:	e7e3      	b.n	8002086 <_malloc_r+0x1e>
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	1b5b      	subs	r3, r3, r5
 80020c2:	d417      	bmi.n	80020f4 <_malloc_r+0x8c>
 80020c4:	2b0b      	cmp	r3, #11
 80020c6:	d903      	bls.n	80020d0 <_malloc_r+0x68>
 80020c8:	6023      	str	r3, [r4, #0]
 80020ca:	441c      	add	r4, r3
 80020cc:	6025      	str	r5, [r4, #0]
 80020ce:	e004      	b.n	80020da <_malloc_r+0x72>
 80020d0:	6863      	ldr	r3, [r4, #4]
 80020d2:	42a2      	cmp	r2, r4
 80020d4:	bf0c      	ite	eq
 80020d6:	600b      	streq	r3, [r1, #0]
 80020d8:	6053      	strne	r3, [r2, #4]
 80020da:	4630      	mov	r0, r6
 80020dc:	f000 fd8e 	bl	8002bfc <__malloc_unlock>
 80020e0:	f104 000b 	add.w	r0, r4, #11
 80020e4:	1d23      	adds	r3, r4, #4
 80020e6:	f020 0007 	bic.w	r0, r0, #7
 80020ea:	1ac2      	subs	r2, r0, r3
 80020ec:	d0cc      	beq.n	8002088 <_malloc_r+0x20>
 80020ee:	1a1b      	subs	r3, r3, r0
 80020f0:	50a3      	str	r3, [r4, r2]
 80020f2:	e7c9      	b.n	8002088 <_malloc_r+0x20>
 80020f4:	4622      	mov	r2, r4
 80020f6:	6864      	ldr	r4, [r4, #4]
 80020f8:	e7cc      	b.n	8002094 <_malloc_r+0x2c>
 80020fa:	1cc4      	adds	r4, r0, #3
 80020fc:	f024 0403 	bic.w	r4, r4, #3
 8002100:	42a0      	cmp	r0, r4
 8002102:	d0e3      	beq.n	80020cc <_malloc_r+0x64>
 8002104:	1a21      	subs	r1, r4, r0
 8002106:	4630      	mov	r0, r6
 8002108:	f000 faf6 	bl	80026f8 <_sbrk_r>
 800210c:	3001      	adds	r0, #1
 800210e:	d1dd      	bne.n	80020cc <_malloc_r+0x64>
 8002110:	e7cf      	b.n	80020b2 <_malloc_r+0x4a>
 8002112:	bf00      	nop
 8002114:	20000090 	.word	0x20000090
 8002118:	20000094 	.word	0x20000094

0800211c <__sfputc_r>:
 800211c:	6893      	ldr	r3, [r2, #8]
 800211e:	b410      	push	{r4}
 8002120:	3b01      	subs	r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	6093      	str	r3, [r2, #8]
 8002126:	da07      	bge.n	8002138 <__sfputc_r+0x1c>
 8002128:	6994      	ldr	r4, [r2, #24]
 800212a:	42a3      	cmp	r3, r4
 800212c:	db01      	blt.n	8002132 <__sfputc_r+0x16>
 800212e:	290a      	cmp	r1, #10
 8002130:	d102      	bne.n	8002138 <__sfputc_r+0x1c>
 8002132:	bc10      	pop	{r4}
 8002134:	f000 bb34 	b.w	80027a0 <__swbuf_r>
 8002138:	6813      	ldr	r3, [r2, #0]
 800213a:	1c58      	adds	r0, r3, #1
 800213c:	6010      	str	r0, [r2, #0]
 800213e:	7019      	strb	r1, [r3, #0]
 8002140:	4608      	mov	r0, r1
 8002142:	bc10      	pop	{r4}
 8002144:	4770      	bx	lr

08002146 <__sfputs_r>:
 8002146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002148:	4606      	mov	r6, r0
 800214a:	460f      	mov	r7, r1
 800214c:	4614      	mov	r4, r2
 800214e:	18d5      	adds	r5, r2, r3
 8002150:	42ac      	cmp	r4, r5
 8002152:	d101      	bne.n	8002158 <__sfputs_r+0x12>
 8002154:	2000      	movs	r0, #0
 8002156:	e007      	b.n	8002168 <__sfputs_r+0x22>
 8002158:	463a      	mov	r2, r7
 800215a:	4630      	mov	r0, r6
 800215c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002160:	f7ff ffdc 	bl	800211c <__sfputc_r>
 8002164:	1c43      	adds	r3, r0, #1
 8002166:	d1f3      	bne.n	8002150 <__sfputs_r+0xa>
 8002168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800216c <_vfiprintf_r>:
 800216c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002170:	460d      	mov	r5, r1
 8002172:	4614      	mov	r4, r2
 8002174:	4698      	mov	r8, r3
 8002176:	4606      	mov	r6, r0
 8002178:	b09d      	sub	sp, #116	; 0x74
 800217a:	b118      	cbz	r0, 8002184 <_vfiprintf_r+0x18>
 800217c:	6983      	ldr	r3, [r0, #24]
 800217e:	b90b      	cbnz	r3, 8002184 <_vfiprintf_r+0x18>
 8002180:	f7ff fed2 	bl	8001f28 <__sinit>
 8002184:	4b89      	ldr	r3, [pc, #548]	; (80023ac <_vfiprintf_r+0x240>)
 8002186:	429d      	cmp	r5, r3
 8002188:	d11b      	bne.n	80021c2 <_vfiprintf_r+0x56>
 800218a:	6875      	ldr	r5, [r6, #4]
 800218c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800218e:	07d9      	lsls	r1, r3, #31
 8002190:	d405      	bmi.n	800219e <_vfiprintf_r+0x32>
 8002192:	89ab      	ldrh	r3, [r5, #12]
 8002194:	059a      	lsls	r2, r3, #22
 8002196:	d402      	bmi.n	800219e <_vfiprintf_r+0x32>
 8002198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800219a:	f7ff ff63 	bl	8002064 <__retarget_lock_acquire_recursive>
 800219e:	89ab      	ldrh	r3, [r5, #12]
 80021a0:	071b      	lsls	r3, r3, #28
 80021a2:	d501      	bpl.n	80021a8 <_vfiprintf_r+0x3c>
 80021a4:	692b      	ldr	r3, [r5, #16]
 80021a6:	b9eb      	cbnz	r3, 80021e4 <_vfiprintf_r+0x78>
 80021a8:	4629      	mov	r1, r5
 80021aa:	4630      	mov	r0, r6
 80021ac:	f000 fb5c 	bl	8002868 <__swsetup_r>
 80021b0:	b1c0      	cbz	r0, 80021e4 <_vfiprintf_r+0x78>
 80021b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80021b4:	07dc      	lsls	r4, r3, #31
 80021b6:	d50e      	bpl.n	80021d6 <_vfiprintf_r+0x6a>
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	b01d      	add	sp, #116	; 0x74
 80021be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c2:	4b7b      	ldr	r3, [pc, #492]	; (80023b0 <_vfiprintf_r+0x244>)
 80021c4:	429d      	cmp	r5, r3
 80021c6:	d101      	bne.n	80021cc <_vfiprintf_r+0x60>
 80021c8:	68b5      	ldr	r5, [r6, #8]
 80021ca:	e7df      	b.n	800218c <_vfiprintf_r+0x20>
 80021cc:	4b79      	ldr	r3, [pc, #484]	; (80023b4 <_vfiprintf_r+0x248>)
 80021ce:	429d      	cmp	r5, r3
 80021d0:	bf08      	it	eq
 80021d2:	68f5      	ldreq	r5, [r6, #12]
 80021d4:	e7da      	b.n	800218c <_vfiprintf_r+0x20>
 80021d6:	89ab      	ldrh	r3, [r5, #12]
 80021d8:	0598      	lsls	r0, r3, #22
 80021da:	d4ed      	bmi.n	80021b8 <_vfiprintf_r+0x4c>
 80021dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80021de:	f7ff ff42 	bl	8002066 <__retarget_lock_release_recursive>
 80021e2:	e7e9      	b.n	80021b8 <_vfiprintf_r+0x4c>
 80021e4:	2300      	movs	r3, #0
 80021e6:	9309      	str	r3, [sp, #36]	; 0x24
 80021e8:	2320      	movs	r3, #32
 80021ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021ee:	2330      	movs	r3, #48	; 0x30
 80021f0:	f04f 0901 	mov.w	r9, #1
 80021f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80021f8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80023b8 <_vfiprintf_r+0x24c>
 80021fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002200:	4623      	mov	r3, r4
 8002202:	469a      	mov	sl, r3
 8002204:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002208:	b10a      	cbz	r2, 800220e <_vfiprintf_r+0xa2>
 800220a:	2a25      	cmp	r2, #37	; 0x25
 800220c:	d1f9      	bne.n	8002202 <_vfiprintf_r+0x96>
 800220e:	ebba 0b04 	subs.w	fp, sl, r4
 8002212:	d00b      	beq.n	800222c <_vfiprintf_r+0xc0>
 8002214:	465b      	mov	r3, fp
 8002216:	4622      	mov	r2, r4
 8002218:	4629      	mov	r1, r5
 800221a:	4630      	mov	r0, r6
 800221c:	f7ff ff93 	bl	8002146 <__sfputs_r>
 8002220:	3001      	adds	r0, #1
 8002222:	f000 80aa 	beq.w	800237a <_vfiprintf_r+0x20e>
 8002226:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002228:	445a      	add	r2, fp
 800222a:	9209      	str	r2, [sp, #36]	; 0x24
 800222c:	f89a 3000 	ldrb.w	r3, [sl]
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80a2 	beq.w	800237a <_vfiprintf_r+0x20e>
 8002236:	2300      	movs	r3, #0
 8002238:	f04f 32ff 	mov.w	r2, #4294967295
 800223c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002240:	f10a 0a01 	add.w	sl, sl, #1
 8002244:	9304      	str	r3, [sp, #16]
 8002246:	9307      	str	r3, [sp, #28]
 8002248:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800224c:	931a      	str	r3, [sp, #104]	; 0x68
 800224e:	4654      	mov	r4, sl
 8002250:	2205      	movs	r2, #5
 8002252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002256:	4858      	ldr	r0, [pc, #352]	; (80023b8 <_vfiprintf_r+0x24c>)
 8002258:	f000 fcbc 	bl	8002bd4 <memchr>
 800225c:	9a04      	ldr	r2, [sp, #16]
 800225e:	b9d8      	cbnz	r0, 8002298 <_vfiprintf_r+0x12c>
 8002260:	06d1      	lsls	r1, r2, #27
 8002262:	bf44      	itt	mi
 8002264:	2320      	movmi	r3, #32
 8002266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800226a:	0713      	lsls	r3, r2, #28
 800226c:	bf44      	itt	mi
 800226e:	232b      	movmi	r3, #43	; 0x2b
 8002270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002274:	f89a 3000 	ldrb.w	r3, [sl]
 8002278:	2b2a      	cmp	r3, #42	; 0x2a
 800227a:	d015      	beq.n	80022a8 <_vfiprintf_r+0x13c>
 800227c:	4654      	mov	r4, sl
 800227e:	2000      	movs	r0, #0
 8002280:	f04f 0c0a 	mov.w	ip, #10
 8002284:	9a07      	ldr	r2, [sp, #28]
 8002286:	4621      	mov	r1, r4
 8002288:	f811 3b01 	ldrb.w	r3, [r1], #1
 800228c:	3b30      	subs	r3, #48	; 0x30
 800228e:	2b09      	cmp	r3, #9
 8002290:	d94e      	bls.n	8002330 <_vfiprintf_r+0x1c4>
 8002292:	b1b0      	cbz	r0, 80022c2 <_vfiprintf_r+0x156>
 8002294:	9207      	str	r2, [sp, #28]
 8002296:	e014      	b.n	80022c2 <_vfiprintf_r+0x156>
 8002298:	eba0 0308 	sub.w	r3, r0, r8
 800229c:	fa09 f303 	lsl.w	r3, r9, r3
 80022a0:	4313      	orrs	r3, r2
 80022a2:	46a2      	mov	sl, r4
 80022a4:	9304      	str	r3, [sp, #16]
 80022a6:	e7d2      	b.n	800224e <_vfiprintf_r+0xe2>
 80022a8:	9b03      	ldr	r3, [sp, #12]
 80022aa:	1d19      	adds	r1, r3, #4
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	9103      	str	r1, [sp, #12]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	bfbb      	ittet	lt
 80022b4:	425b      	neglt	r3, r3
 80022b6:	f042 0202 	orrlt.w	r2, r2, #2
 80022ba:	9307      	strge	r3, [sp, #28]
 80022bc:	9307      	strlt	r3, [sp, #28]
 80022be:	bfb8      	it	lt
 80022c0:	9204      	strlt	r2, [sp, #16]
 80022c2:	7823      	ldrb	r3, [r4, #0]
 80022c4:	2b2e      	cmp	r3, #46	; 0x2e
 80022c6:	d10c      	bne.n	80022e2 <_vfiprintf_r+0x176>
 80022c8:	7863      	ldrb	r3, [r4, #1]
 80022ca:	2b2a      	cmp	r3, #42	; 0x2a
 80022cc:	d135      	bne.n	800233a <_vfiprintf_r+0x1ce>
 80022ce:	9b03      	ldr	r3, [sp, #12]
 80022d0:	3402      	adds	r4, #2
 80022d2:	1d1a      	adds	r2, r3, #4
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	9203      	str	r2, [sp, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	bfb8      	it	lt
 80022dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80022e0:	9305      	str	r3, [sp, #20]
 80022e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80023c8 <_vfiprintf_r+0x25c>
 80022e6:	2203      	movs	r2, #3
 80022e8:	4650      	mov	r0, sl
 80022ea:	7821      	ldrb	r1, [r4, #0]
 80022ec:	f000 fc72 	bl	8002bd4 <memchr>
 80022f0:	b140      	cbz	r0, 8002304 <_vfiprintf_r+0x198>
 80022f2:	2340      	movs	r3, #64	; 0x40
 80022f4:	eba0 000a 	sub.w	r0, r0, sl
 80022f8:	fa03 f000 	lsl.w	r0, r3, r0
 80022fc:	9b04      	ldr	r3, [sp, #16]
 80022fe:	3401      	adds	r4, #1
 8002300:	4303      	orrs	r3, r0
 8002302:	9304      	str	r3, [sp, #16]
 8002304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002308:	2206      	movs	r2, #6
 800230a:	482c      	ldr	r0, [pc, #176]	; (80023bc <_vfiprintf_r+0x250>)
 800230c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002310:	f000 fc60 	bl	8002bd4 <memchr>
 8002314:	2800      	cmp	r0, #0
 8002316:	d03f      	beq.n	8002398 <_vfiprintf_r+0x22c>
 8002318:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <_vfiprintf_r+0x254>)
 800231a:	bb1b      	cbnz	r3, 8002364 <_vfiprintf_r+0x1f8>
 800231c:	9b03      	ldr	r3, [sp, #12]
 800231e:	3307      	adds	r3, #7
 8002320:	f023 0307 	bic.w	r3, r3, #7
 8002324:	3308      	adds	r3, #8
 8002326:	9303      	str	r3, [sp, #12]
 8002328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800232a:	443b      	add	r3, r7
 800232c:	9309      	str	r3, [sp, #36]	; 0x24
 800232e:	e767      	b.n	8002200 <_vfiprintf_r+0x94>
 8002330:	460c      	mov	r4, r1
 8002332:	2001      	movs	r0, #1
 8002334:	fb0c 3202 	mla	r2, ip, r2, r3
 8002338:	e7a5      	b.n	8002286 <_vfiprintf_r+0x11a>
 800233a:	2300      	movs	r3, #0
 800233c:	f04f 0c0a 	mov.w	ip, #10
 8002340:	4619      	mov	r1, r3
 8002342:	3401      	adds	r4, #1
 8002344:	9305      	str	r3, [sp, #20]
 8002346:	4620      	mov	r0, r4
 8002348:	f810 2b01 	ldrb.w	r2, [r0], #1
 800234c:	3a30      	subs	r2, #48	; 0x30
 800234e:	2a09      	cmp	r2, #9
 8002350:	d903      	bls.n	800235a <_vfiprintf_r+0x1ee>
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0c5      	beq.n	80022e2 <_vfiprintf_r+0x176>
 8002356:	9105      	str	r1, [sp, #20]
 8002358:	e7c3      	b.n	80022e2 <_vfiprintf_r+0x176>
 800235a:	4604      	mov	r4, r0
 800235c:	2301      	movs	r3, #1
 800235e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002362:	e7f0      	b.n	8002346 <_vfiprintf_r+0x1da>
 8002364:	ab03      	add	r3, sp, #12
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	462a      	mov	r2, r5
 800236a:	4630      	mov	r0, r6
 800236c:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <_vfiprintf_r+0x258>)
 800236e:	a904      	add	r1, sp, #16
 8002370:	f3af 8000 	nop.w
 8002374:	4607      	mov	r7, r0
 8002376:	1c78      	adds	r0, r7, #1
 8002378:	d1d6      	bne.n	8002328 <_vfiprintf_r+0x1bc>
 800237a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800237c:	07d9      	lsls	r1, r3, #31
 800237e:	d405      	bmi.n	800238c <_vfiprintf_r+0x220>
 8002380:	89ab      	ldrh	r3, [r5, #12]
 8002382:	059a      	lsls	r2, r3, #22
 8002384:	d402      	bmi.n	800238c <_vfiprintf_r+0x220>
 8002386:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002388:	f7ff fe6d 	bl	8002066 <__retarget_lock_release_recursive>
 800238c:	89ab      	ldrh	r3, [r5, #12]
 800238e:	065b      	lsls	r3, r3, #25
 8002390:	f53f af12 	bmi.w	80021b8 <_vfiprintf_r+0x4c>
 8002394:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002396:	e711      	b.n	80021bc <_vfiprintf_r+0x50>
 8002398:	ab03      	add	r3, sp, #12
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	462a      	mov	r2, r5
 800239e:	4630      	mov	r0, r6
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <_vfiprintf_r+0x258>)
 80023a2:	a904      	add	r1, sp, #16
 80023a4:	f000 f882 	bl	80024ac <_printf_i>
 80023a8:	e7e4      	b.n	8002374 <_vfiprintf_r+0x208>
 80023aa:	bf00      	nop
 80023ac:	08002db4 	.word	0x08002db4
 80023b0:	08002dd4 	.word	0x08002dd4
 80023b4:	08002d94 	.word	0x08002d94
 80023b8:	08002df4 	.word	0x08002df4
 80023bc:	08002dfe 	.word	0x08002dfe
 80023c0:	00000000 	.word	0x00000000
 80023c4:	08002147 	.word	0x08002147
 80023c8:	08002dfa 	.word	0x08002dfa

080023cc <_printf_common>:
 80023cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023d0:	4616      	mov	r6, r2
 80023d2:	4699      	mov	r9, r3
 80023d4:	688a      	ldr	r2, [r1, #8]
 80023d6:	690b      	ldr	r3, [r1, #16]
 80023d8:	4607      	mov	r7, r0
 80023da:	4293      	cmp	r3, r2
 80023dc:	bfb8      	it	lt
 80023de:	4613      	movlt	r3, r2
 80023e0:	6033      	str	r3, [r6, #0]
 80023e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80023e6:	460c      	mov	r4, r1
 80023e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80023ec:	b10a      	cbz	r2, 80023f2 <_printf_common+0x26>
 80023ee:	3301      	adds	r3, #1
 80023f0:	6033      	str	r3, [r6, #0]
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	0699      	lsls	r1, r3, #26
 80023f6:	bf42      	ittt	mi
 80023f8:	6833      	ldrmi	r3, [r6, #0]
 80023fa:	3302      	addmi	r3, #2
 80023fc:	6033      	strmi	r3, [r6, #0]
 80023fe:	6825      	ldr	r5, [r4, #0]
 8002400:	f015 0506 	ands.w	r5, r5, #6
 8002404:	d106      	bne.n	8002414 <_printf_common+0x48>
 8002406:	f104 0a19 	add.w	sl, r4, #25
 800240a:	68e3      	ldr	r3, [r4, #12]
 800240c:	6832      	ldr	r2, [r6, #0]
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	42ab      	cmp	r3, r5
 8002412:	dc28      	bgt.n	8002466 <_printf_common+0x9a>
 8002414:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002418:	1e13      	subs	r3, r2, #0
 800241a:	6822      	ldr	r2, [r4, #0]
 800241c:	bf18      	it	ne
 800241e:	2301      	movne	r3, #1
 8002420:	0692      	lsls	r2, r2, #26
 8002422:	d42d      	bmi.n	8002480 <_printf_common+0xb4>
 8002424:	4649      	mov	r1, r9
 8002426:	4638      	mov	r0, r7
 8002428:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800242c:	47c0      	blx	r8
 800242e:	3001      	adds	r0, #1
 8002430:	d020      	beq.n	8002474 <_printf_common+0xa8>
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	68e5      	ldr	r5, [r4, #12]
 8002436:	f003 0306 	and.w	r3, r3, #6
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf18      	it	ne
 800243e:	2500      	movne	r5, #0
 8002440:	6832      	ldr	r2, [r6, #0]
 8002442:	f04f 0600 	mov.w	r6, #0
 8002446:	68a3      	ldr	r3, [r4, #8]
 8002448:	bf08      	it	eq
 800244a:	1aad      	subeq	r5, r5, r2
 800244c:	6922      	ldr	r2, [r4, #16]
 800244e:	bf08      	it	eq
 8002450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002454:	4293      	cmp	r3, r2
 8002456:	bfc4      	itt	gt
 8002458:	1a9b      	subgt	r3, r3, r2
 800245a:	18ed      	addgt	r5, r5, r3
 800245c:	341a      	adds	r4, #26
 800245e:	42b5      	cmp	r5, r6
 8002460:	d11a      	bne.n	8002498 <_printf_common+0xcc>
 8002462:	2000      	movs	r0, #0
 8002464:	e008      	b.n	8002478 <_printf_common+0xac>
 8002466:	2301      	movs	r3, #1
 8002468:	4652      	mov	r2, sl
 800246a:	4649      	mov	r1, r9
 800246c:	4638      	mov	r0, r7
 800246e:	47c0      	blx	r8
 8002470:	3001      	adds	r0, #1
 8002472:	d103      	bne.n	800247c <_printf_common+0xb0>
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800247c:	3501      	adds	r5, #1
 800247e:	e7c4      	b.n	800240a <_printf_common+0x3e>
 8002480:	2030      	movs	r0, #48	; 0x30
 8002482:	18e1      	adds	r1, r4, r3
 8002484:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800248e:	4422      	add	r2, r4
 8002490:	3302      	adds	r3, #2
 8002492:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002496:	e7c5      	b.n	8002424 <_printf_common+0x58>
 8002498:	2301      	movs	r3, #1
 800249a:	4622      	mov	r2, r4
 800249c:	4649      	mov	r1, r9
 800249e:	4638      	mov	r0, r7
 80024a0:	47c0      	blx	r8
 80024a2:	3001      	adds	r0, #1
 80024a4:	d0e6      	beq.n	8002474 <_printf_common+0xa8>
 80024a6:	3601      	adds	r6, #1
 80024a8:	e7d9      	b.n	800245e <_printf_common+0x92>
	...

080024ac <_printf_i>:
 80024ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024b0:	460c      	mov	r4, r1
 80024b2:	7e27      	ldrb	r7, [r4, #24]
 80024b4:	4691      	mov	r9, r2
 80024b6:	2f78      	cmp	r7, #120	; 0x78
 80024b8:	4680      	mov	r8, r0
 80024ba:	469a      	mov	sl, r3
 80024bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80024be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80024c2:	d807      	bhi.n	80024d4 <_printf_i+0x28>
 80024c4:	2f62      	cmp	r7, #98	; 0x62
 80024c6:	d80a      	bhi.n	80024de <_printf_i+0x32>
 80024c8:	2f00      	cmp	r7, #0
 80024ca:	f000 80d9 	beq.w	8002680 <_printf_i+0x1d4>
 80024ce:	2f58      	cmp	r7, #88	; 0x58
 80024d0:	f000 80a4 	beq.w	800261c <_printf_i+0x170>
 80024d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80024d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80024dc:	e03a      	b.n	8002554 <_printf_i+0xa8>
 80024de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80024e2:	2b15      	cmp	r3, #21
 80024e4:	d8f6      	bhi.n	80024d4 <_printf_i+0x28>
 80024e6:	a001      	add	r0, pc, #4	; (adr r0, 80024ec <_printf_i+0x40>)
 80024e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80024ec:	08002545 	.word	0x08002545
 80024f0:	08002559 	.word	0x08002559
 80024f4:	080024d5 	.word	0x080024d5
 80024f8:	080024d5 	.word	0x080024d5
 80024fc:	080024d5 	.word	0x080024d5
 8002500:	080024d5 	.word	0x080024d5
 8002504:	08002559 	.word	0x08002559
 8002508:	080024d5 	.word	0x080024d5
 800250c:	080024d5 	.word	0x080024d5
 8002510:	080024d5 	.word	0x080024d5
 8002514:	080024d5 	.word	0x080024d5
 8002518:	08002667 	.word	0x08002667
 800251c:	08002589 	.word	0x08002589
 8002520:	08002649 	.word	0x08002649
 8002524:	080024d5 	.word	0x080024d5
 8002528:	080024d5 	.word	0x080024d5
 800252c:	08002689 	.word	0x08002689
 8002530:	080024d5 	.word	0x080024d5
 8002534:	08002589 	.word	0x08002589
 8002538:	080024d5 	.word	0x080024d5
 800253c:	080024d5 	.word	0x080024d5
 8002540:	08002651 	.word	0x08002651
 8002544:	680b      	ldr	r3, [r1, #0]
 8002546:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800254a:	1d1a      	adds	r2, r3, #4
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	600a      	str	r2, [r1, #0]
 8002550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002554:	2301      	movs	r3, #1
 8002556:	e0a4      	b.n	80026a2 <_printf_i+0x1f6>
 8002558:	6825      	ldr	r5, [r4, #0]
 800255a:	6808      	ldr	r0, [r1, #0]
 800255c:	062e      	lsls	r6, r5, #24
 800255e:	f100 0304 	add.w	r3, r0, #4
 8002562:	d50a      	bpl.n	800257a <_printf_i+0xce>
 8002564:	6805      	ldr	r5, [r0, #0]
 8002566:	600b      	str	r3, [r1, #0]
 8002568:	2d00      	cmp	r5, #0
 800256a:	da03      	bge.n	8002574 <_printf_i+0xc8>
 800256c:	232d      	movs	r3, #45	; 0x2d
 800256e:	426d      	negs	r5, r5
 8002570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002574:	230a      	movs	r3, #10
 8002576:	485e      	ldr	r0, [pc, #376]	; (80026f0 <_printf_i+0x244>)
 8002578:	e019      	b.n	80025ae <_printf_i+0x102>
 800257a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800257e:	6805      	ldr	r5, [r0, #0]
 8002580:	600b      	str	r3, [r1, #0]
 8002582:	bf18      	it	ne
 8002584:	b22d      	sxthne	r5, r5
 8002586:	e7ef      	b.n	8002568 <_printf_i+0xbc>
 8002588:	680b      	ldr	r3, [r1, #0]
 800258a:	6825      	ldr	r5, [r4, #0]
 800258c:	1d18      	adds	r0, r3, #4
 800258e:	6008      	str	r0, [r1, #0]
 8002590:	0628      	lsls	r0, r5, #24
 8002592:	d501      	bpl.n	8002598 <_printf_i+0xec>
 8002594:	681d      	ldr	r5, [r3, #0]
 8002596:	e002      	b.n	800259e <_printf_i+0xf2>
 8002598:	0669      	lsls	r1, r5, #25
 800259a:	d5fb      	bpl.n	8002594 <_printf_i+0xe8>
 800259c:	881d      	ldrh	r5, [r3, #0]
 800259e:	2f6f      	cmp	r7, #111	; 0x6f
 80025a0:	bf0c      	ite	eq
 80025a2:	2308      	moveq	r3, #8
 80025a4:	230a      	movne	r3, #10
 80025a6:	4852      	ldr	r0, [pc, #328]	; (80026f0 <_printf_i+0x244>)
 80025a8:	2100      	movs	r1, #0
 80025aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80025ae:	6866      	ldr	r6, [r4, #4]
 80025b0:	2e00      	cmp	r6, #0
 80025b2:	bfa8      	it	ge
 80025b4:	6821      	ldrge	r1, [r4, #0]
 80025b6:	60a6      	str	r6, [r4, #8]
 80025b8:	bfa4      	itt	ge
 80025ba:	f021 0104 	bicge.w	r1, r1, #4
 80025be:	6021      	strge	r1, [r4, #0]
 80025c0:	b90d      	cbnz	r5, 80025c6 <_printf_i+0x11a>
 80025c2:	2e00      	cmp	r6, #0
 80025c4:	d04d      	beq.n	8002662 <_printf_i+0x1b6>
 80025c6:	4616      	mov	r6, r2
 80025c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80025cc:	fb03 5711 	mls	r7, r3, r1, r5
 80025d0:	5dc7      	ldrb	r7, [r0, r7]
 80025d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025d6:	462f      	mov	r7, r5
 80025d8:	42bb      	cmp	r3, r7
 80025da:	460d      	mov	r5, r1
 80025dc:	d9f4      	bls.n	80025c8 <_printf_i+0x11c>
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d10b      	bne.n	80025fa <_printf_i+0x14e>
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	07df      	lsls	r7, r3, #31
 80025e6:	d508      	bpl.n	80025fa <_printf_i+0x14e>
 80025e8:	6923      	ldr	r3, [r4, #16]
 80025ea:	6861      	ldr	r1, [r4, #4]
 80025ec:	4299      	cmp	r1, r3
 80025ee:	bfde      	ittt	le
 80025f0:	2330      	movle	r3, #48	; 0x30
 80025f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80025fa:	1b92      	subs	r2, r2, r6
 80025fc:	6122      	str	r2, [r4, #16]
 80025fe:	464b      	mov	r3, r9
 8002600:	4621      	mov	r1, r4
 8002602:	4640      	mov	r0, r8
 8002604:	f8cd a000 	str.w	sl, [sp]
 8002608:	aa03      	add	r2, sp, #12
 800260a:	f7ff fedf 	bl	80023cc <_printf_common>
 800260e:	3001      	adds	r0, #1
 8002610:	d14c      	bne.n	80026ac <_printf_i+0x200>
 8002612:	f04f 30ff 	mov.w	r0, #4294967295
 8002616:	b004      	add	sp, #16
 8002618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800261c:	4834      	ldr	r0, [pc, #208]	; (80026f0 <_printf_i+0x244>)
 800261e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002622:	680e      	ldr	r6, [r1, #0]
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	f856 5b04 	ldr.w	r5, [r6], #4
 800262a:	061f      	lsls	r7, r3, #24
 800262c:	600e      	str	r6, [r1, #0]
 800262e:	d514      	bpl.n	800265a <_printf_i+0x1ae>
 8002630:	07d9      	lsls	r1, r3, #31
 8002632:	bf44      	itt	mi
 8002634:	f043 0320 	orrmi.w	r3, r3, #32
 8002638:	6023      	strmi	r3, [r4, #0]
 800263a:	b91d      	cbnz	r5, 8002644 <_printf_i+0x198>
 800263c:	6823      	ldr	r3, [r4, #0]
 800263e:	f023 0320 	bic.w	r3, r3, #32
 8002642:	6023      	str	r3, [r4, #0]
 8002644:	2310      	movs	r3, #16
 8002646:	e7af      	b.n	80025a8 <_printf_i+0xfc>
 8002648:	6823      	ldr	r3, [r4, #0]
 800264a:	f043 0320 	orr.w	r3, r3, #32
 800264e:	6023      	str	r3, [r4, #0]
 8002650:	2378      	movs	r3, #120	; 0x78
 8002652:	4828      	ldr	r0, [pc, #160]	; (80026f4 <_printf_i+0x248>)
 8002654:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002658:	e7e3      	b.n	8002622 <_printf_i+0x176>
 800265a:	065e      	lsls	r6, r3, #25
 800265c:	bf48      	it	mi
 800265e:	b2ad      	uxthmi	r5, r5
 8002660:	e7e6      	b.n	8002630 <_printf_i+0x184>
 8002662:	4616      	mov	r6, r2
 8002664:	e7bb      	b.n	80025de <_printf_i+0x132>
 8002666:	680b      	ldr	r3, [r1, #0]
 8002668:	6826      	ldr	r6, [r4, #0]
 800266a:	1d1d      	adds	r5, r3, #4
 800266c:	6960      	ldr	r0, [r4, #20]
 800266e:	600d      	str	r5, [r1, #0]
 8002670:	0635      	lsls	r5, r6, #24
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	d501      	bpl.n	800267a <_printf_i+0x1ce>
 8002676:	6018      	str	r0, [r3, #0]
 8002678:	e002      	b.n	8002680 <_printf_i+0x1d4>
 800267a:	0671      	lsls	r1, r6, #25
 800267c:	d5fb      	bpl.n	8002676 <_printf_i+0x1ca>
 800267e:	8018      	strh	r0, [r3, #0]
 8002680:	2300      	movs	r3, #0
 8002682:	4616      	mov	r6, r2
 8002684:	6123      	str	r3, [r4, #16]
 8002686:	e7ba      	b.n	80025fe <_printf_i+0x152>
 8002688:	680b      	ldr	r3, [r1, #0]
 800268a:	1d1a      	adds	r2, r3, #4
 800268c:	600a      	str	r2, [r1, #0]
 800268e:	681e      	ldr	r6, [r3, #0]
 8002690:	2100      	movs	r1, #0
 8002692:	4630      	mov	r0, r6
 8002694:	6862      	ldr	r2, [r4, #4]
 8002696:	f000 fa9d 	bl	8002bd4 <memchr>
 800269a:	b108      	cbz	r0, 80026a0 <_printf_i+0x1f4>
 800269c:	1b80      	subs	r0, r0, r6
 800269e:	6060      	str	r0, [r4, #4]
 80026a0:	6863      	ldr	r3, [r4, #4]
 80026a2:	6123      	str	r3, [r4, #16]
 80026a4:	2300      	movs	r3, #0
 80026a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026aa:	e7a8      	b.n	80025fe <_printf_i+0x152>
 80026ac:	4632      	mov	r2, r6
 80026ae:	4649      	mov	r1, r9
 80026b0:	4640      	mov	r0, r8
 80026b2:	6923      	ldr	r3, [r4, #16]
 80026b4:	47d0      	blx	sl
 80026b6:	3001      	adds	r0, #1
 80026b8:	d0ab      	beq.n	8002612 <_printf_i+0x166>
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	079b      	lsls	r3, r3, #30
 80026be:	d413      	bmi.n	80026e8 <_printf_i+0x23c>
 80026c0:	68e0      	ldr	r0, [r4, #12]
 80026c2:	9b03      	ldr	r3, [sp, #12]
 80026c4:	4298      	cmp	r0, r3
 80026c6:	bfb8      	it	lt
 80026c8:	4618      	movlt	r0, r3
 80026ca:	e7a4      	b.n	8002616 <_printf_i+0x16a>
 80026cc:	2301      	movs	r3, #1
 80026ce:	4632      	mov	r2, r6
 80026d0:	4649      	mov	r1, r9
 80026d2:	4640      	mov	r0, r8
 80026d4:	47d0      	blx	sl
 80026d6:	3001      	adds	r0, #1
 80026d8:	d09b      	beq.n	8002612 <_printf_i+0x166>
 80026da:	3501      	adds	r5, #1
 80026dc:	68e3      	ldr	r3, [r4, #12]
 80026de:	9903      	ldr	r1, [sp, #12]
 80026e0:	1a5b      	subs	r3, r3, r1
 80026e2:	42ab      	cmp	r3, r5
 80026e4:	dcf2      	bgt.n	80026cc <_printf_i+0x220>
 80026e6:	e7eb      	b.n	80026c0 <_printf_i+0x214>
 80026e8:	2500      	movs	r5, #0
 80026ea:	f104 0619 	add.w	r6, r4, #25
 80026ee:	e7f5      	b.n	80026dc <_printf_i+0x230>
 80026f0:	08002e05 	.word	0x08002e05
 80026f4:	08002e16 	.word	0x08002e16

080026f8 <_sbrk_r>:
 80026f8:	b538      	push	{r3, r4, r5, lr}
 80026fa:	2300      	movs	r3, #0
 80026fc:	4d05      	ldr	r5, [pc, #20]	; (8002714 <_sbrk_r+0x1c>)
 80026fe:	4604      	mov	r4, r0
 8002700:	4608      	mov	r0, r1
 8002702:	602b      	str	r3, [r5, #0]
 8002704:	f7fd ff40 	bl	8000588 <_sbrk>
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	d102      	bne.n	8002712 <_sbrk_r+0x1a>
 800270c:	682b      	ldr	r3, [r5, #0]
 800270e:	b103      	cbz	r3, 8002712 <_sbrk_r+0x1a>
 8002710:	6023      	str	r3, [r4, #0]
 8002712:	bd38      	pop	{r3, r4, r5, pc}
 8002714:	20000150 	.word	0x20000150

08002718 <__sread>:
 8002718:	b510      	push	{r4, lr}
 800271a:	460c      	mov	r4, r1
 800271c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002720:	f000 fabe 	bl	8002ca0 <_read_r>
 8002724:	2800      	cmp	r0, #0
 8002726:	bfab      	itete	ge
 8002728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800272a:	89a3      	ldrhlt	r3, [r4, #12]
 800272c:	181b      	addge	r3, r3, r0
 800272e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002732:	bfac      	ite	ge
 8002734:	6563      	strge	r3, [r4, #84]	; 0x54
 8002736:	81a3      	strhlt	r3, [r4, #12]
 8002738:	bd10      	pop	{r4, pc}

0800273a <__swrite>:
 800273a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800273e:	461f      	mov	r7, r3
 8002740:	898b      	ldrh	r3, [r1, #12]
 8002742:	4605      	mov	r5, r0
 8002744:	05db      	lsls	r3, r3, #23
 8002746:	460c      	mov	r4, r1
 8002748:	4616      	mov	r6, r2
 800274a:	d505      	bpl.n	8002758 <__swrite+0x1e>
 800274c:	2302      	movs	r3, #2
 800274e:	2200      	movs	r2, #0
 8002750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002754:	f000 f9c8 	bl	8002ae8 <_lseek_r>
 8002758:	89a3      	ldrh	r3, [r4, #12]
 800275a:	4632      	mov	r2, r6
 800275c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002760:	81a3      	strh	r3, [r4, #12]
 8002762:	4628      	mov	r0, r5
 8002764:	463b      	mov	r3, r7
 8002766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800276a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800276e:	f000 b869 	b.w	8002844 <_write_r>

08002772 <__sseek>:
 8002772:	b510      	push	{r4, lr}
 8002774:	460c      	mov	r4, r1
 8002776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800277a:	f000 f9b5 	bl	8002ae8 <_lseek_r>
 800277e:	1c43      	adds	r3, r0, #1
 8002780:	89a3      	ldrh	r3, [r4, #12]
 8002782:	bf15      	itete	ne
 8002784:	6560      	strne	r0, [r4, #84]	; 0x54
 8002786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800278a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800278e:	81a3      	strheq	r3, [r4, #12]
 8002790:	bf18      	it	ne
 8002792:	81a3      	strhne	r3, [r4, #12]
 8002794:	bd10      	pop	{r4, pc}

08002796 <__sclose>:
 8002796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800279a:	f000 b8d3 	b.w	8002944 <_close_r>
	...

080027a0 <__swbuf_r>:
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	460e      	mov	r6, r1
 80027a4:	4614      	mov	r4, r2
 80027a6:	4605      	mov	r5, r0
 80027a8:	b118      	cbz	r0, 80027b2 <__swbuf_r+0x12>
 80027aa:	6983      	ldr	r3, [r0, #24]
 80027ac:	b90b      	cbnz	r3, 80027b2 <__swbuf_r+0x12>
 80027ae:	f7ff fbbb 	bl	8001f28 <__sinit>
 80027b2:	4b21      	ldr	r3, [pc, #132]	; (8002838 <__swbuf_r+0x98>)
 80027b4:	429c      	cmp	r4, r3
 80027b6:	d12b      	bne.n	8002810 <__swbuf_r+0x70>
 80027b8:	686c      	ldr	r4, [r5, #4]
 80027ba:	69a3      	ldr	r3, [r4, #24]
 80027bc:	60a3      	str	r3, [r4, #8]
 80027be:	89a3      	ldrh	r3, [r4, #12]
 80027c0:	071a      	lsls	r2, r3, #28
 80027c2:	d52f      	bpl.n	8002824 <__swbuf_r+0x84>
 80027c4:	6923      	ldr	r3, [r4, #16]
 80027c6:	b36b      	cbz	r3, 8002824 <__swbuf_r+0x84>
 80027c8:	6923      	ldr	r3, [r4, #16]
 80027ca:	6820      	ldr	r0, [r4, #0]
 80027cc:	b2f6      	uxtb	r6, r6
 80027ce:	1ac0      	subs	r0, r0, r3
 80027d0:	6963      	ldr	r3, [r4, #20]
 80027d2:	4637      	mov	r7, r6
 80027d4:	4283      	cmp	r3, r0
 80027d6:	dc04      	bgt.n	80027e2 <__swbuf_r+0x42>
 80027d8:	4621      	mov	r1, r4
 80027da:	4628      	mov	r0, r5
 80027dc:	f000 f948 	bl	8002a70 <_fflush_r>
 80027e0:	bb30      	cbnz	r0, 8002830 <__swbuf_r+0x90>
 80027e2:	68a3      	ldr	r3, [r4, #8]
 80027e4:	3001      	adds	r0, #1
 80027e6:	3b01      	subs	r3, #1
 80027e8:	60a3      	str	r3, [r4, #8]
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	6022      	str	r2, [r4, #0]
 80027f0:	701e      	strb	r6, [r3, #0]
 80027f2:	6963      	ldr	r3, [r4, #20]
 80027f4:	4283      	cmp	r3, r0
 80027f6:	d004      	beq.n	8002802 <__swbuf_r+0x62>
 80027f8:	89a3      	ldrh	r3, [r4, #12]
 80027fa:	07db      	lsls	r3, r3, #31
 80027fc:	d506      	bpl.n	800280c <__swbuf_r+0x6c>
 80027fe:	2e0a      	cmp	r6, #10
 8002800:	d104      	bne.n	800280c <__swbuf_r+0x6c>
 8002802:	4621      	mov	r1, r4
 8002804:	4628      	mov	r0, r5
 8002806:	f000 f933 	bl	8002a70 <_fflush_r>
 800280a:	b988      	cbnz	r0, 8002830 <__swbuf_r+0x90>
 800280c:	4638      	mov	r0, r7
 800280e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002810:	4b0a      	ldr	r3, [pc, #40]	; (800283c <__swbuf_r+0x9c>)
 8002812:	429c      	cmp	r4, r3
 8002814:	d101      	bne.n	800281a <__swbuf_r+0x7a>
 8002816:	68ac      	ldr	r4, [r5, #8]
 8002818:	e7cf      	b.n	80027ba <__swbuf_r+0x1a>
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <__swbuf_r+0xa0>)
 800281c:	429c      	cmp	r4, r3
 800281e:	bf08      	it	eq
 8002820:	68ec      	ldreq	r4, [r5, #12]
 8002822:	e7ca      	b.n	80027ba <__swbuf_r+0x1a>
 8002824:	4621      	mov	r1, r4
 8002826:	4628      	mov	r0, r5
 8002828:	f000 f81e 	bl	8002868 <__swsetup_r>
 800282c:	2800      	cmp	r0, #0
 800282e:	d0cb      	beq.n	80027c8 <__swbuf_r+0x28>
 8002830:	f04f 37ff 	mov.w	r7, #4294967295
 8002834:	e7ea      	b.n	800280c <__swbuf_r+0x6c>
 8002836:	bf00      	nop
 8002838:	08002db4 	.word	0x08002db4
 800283c:	08002dd4 	.word	0x08002dd4
 8002840:	08002d94 	.word	0x08002d94

08002844 <_write_r>:
 8002844:	b538      	push	{r3, r4, r5, lr}
 8002846:	4604      	mov	r4, r0
 8002848:	4608      	mov	r0, r1
 800284a:	4611      	mov	r1, r2
 800284c:	2200      	movs	r2, #0
 800284e:	4d05      	ldr	r5, [pc, #20]	; (8002864 <_write_r+0x20>)
 8002850:	602a      	str	r2, [r5, #0]
 8002852:	461a      	mov	r2, r3
 8002854:	f7fd fe4b 	bl	80004ee <_write>
 8002858:	1c43      	adds	r3, r0, #1
 800285a:	d102      	bne.n	8002862 <_write_r+0x1e>
 800285c:	682b      	ldr	r3, [r5, #0]
 800285e:	b103      	cbz	r3, 8002862 <_write_r+0x1e>
 8002860:	6023      	str	r3, [r4, #0]
 8002862:	bd38      	pop	{r3, r4, r5, pc}
 8002864:	20000150 	.word	0x20000150

08002868 <__swsetup_r>:
 8002868:	4b32      	ldr	r3, [pc, #200]	; (8002934 <__swsetup_r+0xcc>)
 800286a:	b570      	push	{r4, r5, r6, lr}
 800286c:	681d      	ldr	r5, [r3, #0]
 800286e:	4606      	mov	r6, r0
 8002870:	460c      	mov	r4, r1
 8002872:	b125      	cbz	r5, 800287e <__swsetup_r+0x16>
 8002874:	69ab      	ldr	r3, [r5, #24]
 8002876:	b913      	cbnz	r3, 800287e <__swsetup_r+0x16>
 8002878:	4628      	mov	r0, r5
 800287a:	f7ff fb55 	bl	8001f28 <__sinit>
 800287e:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <__swsetup_r+0xd0>)
 8002880:	429c      	cmp	r4, r3
 8002882:	d10f      	bne.n	80028a4 <__swsetup_r+0x3c>
 8002884:	686c      	ldr	r4, [r5, #4]
 8002886:	89a3      	ldrh	r3, [r4, #12]
 8002888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800288c:	0719      	lsls	r1, r3, #28
 800288e:	d42c      	bmi.n	80028ea <__swsetup_r+0x82>
 8002890:	06dd      	lsls	r5, r3, #27
 8002892:	d411      	bmi.n	80028b8 <__swsetup_r+0x50>
 8002894:	2309      	movs	r3, #9
 8002896:	6033      	str	r3, [r6, #0]
 8002898:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	81a3      	strh	r3, [r4, #12]
 80028a2:	e03e      	b.n	8002922 <__swsetup_r+0xba>
 80028a4:	4b25      	ldr	r3, [pc, #148]	; (800293c <__swsetup_r+0xd4>)
 80028a6:	429c      	cmp	r4, r3
 80028a8:	d101      	bne.n	80028ae <__swsetup_r+0x46>
 80028aa:	68ac      	ldr	r4, [r5, #8]
 80028ac:	e7eb      	b.n	8002886 <__swsetup_r+0x1e>
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <__swsetup_r+0xd8>)
 80028b0:	429c      	cmp	r4, r3
 80028b2:	bf08      	it	eq
 80028b4:	68ec      	ldreq	r4, [r5, #12]
 80028b6:	e7e6      	b.n	8002886 <__swsetup_r+0x1e>
 80028b8:	0758      	lsls	r0, r3, #29
 80028ba:	d512      	bpl.n	80028e2 <__swsetup_r+0x7a>
 80028bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028be:	b141      	cbz	r1, 80028d2 <__swsetup_r+0x6a>
 80028c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80028c4:	4299      	cmp	r1, r3
 80028c6:	d002      	beq.n	80028ce <__swsetup_r+0x66>
 80028c8:	4630      	mov	r0, r6
 80028ca:	f000 f99d 	bl	8002c08 <_free_r>
 80028ce:	2300      	movs	r3, #0
 80028d0:	6363      	str	r3, [r4, #52]	; 0x34
 80028d2:	89a3      	ldrh	r3, [r4, #12]
 80028d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80028d8:	81a3      	strh	r3, [r4, #12]
 80028da:	2300      	movs	r3, #0
 80028dc:	6063      	str	r3, [r4, #4]
 80028de:	6923      	ldr	r3, [r4, #16]
 80028e0:	6023      	str	r3, [r4, #0]
 80028e2:	89a3      	ldrh	r3, [r4, #12]
 80028e4:	f043 0308 	orr.w	r3, r3, #8
 80028e8:	81a3      	strh	r3, [r4, #12]
 80028ea:	6923      	ldr	r3, [r4, #16]
 80028ec:	b94b      	cbnz	r3, 8002902 <__swsetup_r+0x9a>
 80028ee:	89a3      	ldrh	r3, [r4, #12]
 80028f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80028f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028f8:	d003      	beq.n	8002902 <__swsetup_r+0x9a>
 80028fa:	4621      	mov	r1, r4
 80028fc:	4630      	mov	r0, r6
 80028fe:	f000 f929 	bl	8002b54 <__smakebuf_r>
 8002902:	89a0      	ldrh	r0, [r4, #12]
 8002904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002908:	f010 0301 	ands.w	r3, r0, #1
 800290c:	d00a      	beq.n	8002924 <__swsetup_r+0xbc>
 800290e:	2300      	movs	r3, #0
 8002910:	60a3      	str	r3, [r4, #8]
 8002912:	6963      	ldr	r3, [r4, #20]
 8002914:	425b      	negs	r3, r3
 8002916:	61a3      	str	r3, [r4, #24]
 8002918:	6923      	ldr	r3, [r4, #16]
 800291a:	b943      	cbnz	r3, 800292e <__swsetup_r+0xc6>
 800291c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002920:	d1ba      	bne.n	8002898 <__swsetup_r+0x30>
 8002922:	bd70      	pop	{r4, r5, r6, pc}
 8002924:	0781      	lsls	r1, r0, #30
 8002926:	bf58      	it	pl
 8002928:	6963      	ldrpl	r3, [r4, #20]
 800292a:	60a3      	str	r3, [r4, #8]
 800292c:	e7f4      	b.n	8002918 <__swsetup_r+0xb0>
 800292e:	2000      	movs	r0, #0
 8002930:	e7f7      	b.n	8002922 <__swsetup_r+0xba>
 8002932:	bf00      	nop
 8002934:	2000000c 	.word	0x2000000c
 8002938:	08002db4 	.word	0x08002db4
 800293c:	08002dd4 	.word	0x08002dd4
 8002940:	08002d94 	.word	0x08002d94

08002944 <_close_r>:
 8002944:	b538      	push	{r3, r4, r5, lr}
 8002946:	2300      	movs	r3, #0
 8002948:	4d05      	ldr	r5, [pc, #20]	; (8002960 <_close_r+0x1c>)
 800294a:	4604      	mov	r4, r0
 800294c:	4608      	mov	r0, r1
 800294e:	602b      	str	r3, [r5, #0]
 8002950:	f7fd fde9 	bl	8000526 <_close>
 8002954:	1c43      	adds	r3, r0, #1
 8002956:	d102      	bne.n	800295e <_close_r+0x1a>
 8002958:	682b      	ldr	r3, [r5, #0]
 800295a:	b103      	cbz	r3, 800295e <_close_r+0x1a>
 800295c:	6023      	str	r3, [r4, #0]
 800295e:	bd38      	pop	{r3, r4, r5, pc}
 8002960:	20000150 	.word	0x20000150

08002964 <__sflush_r>:
 8002964:	898a      	ldrh	r2, [r1, #12]
 8002966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800296a:	4605      	mov	r5, r0
 800296c:	0710      	lsls	r0, r2, #28
 800296e:	460c      	mov	r4, r1
 8002970:	d458      	bmi.n	8002a24 <__sflush_r+0xc0>
 8002972:	684b      	ldr	r3, [r1, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	dc05      	bgt.n	8002984 <__sflush_r+0x20>
 8002978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	dc02      	bgt.n	8002984 <__sflush_r+0x20>
 800297e:	2000      	movs	r0, #0
 8002980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002986:	2e00      	cmp	r6, #0
 8002988:	d0f9      	beq.n	800297e <__sflush_r+0x1a>
 800298a:	2300      	movs	r3, #0
 800298c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002990:	682f      	ldr	r7, [r5, #0]
 8002992:	602b      	str	r3, [r5, #0]
 8002994:	d032      	beq.n	80029fc <__sflush_r+0x98>
 8002996:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002998:	89a3      	ldrh	r3, [r4, #12]
 800299a:	075a      	lsls	r2, r3, #29
 800299c:	d505      	bpl.n	80029aa <__sflush_r+0x46>
 800299e:	6863      	ldr	r3, [r4, #4]
 80029a0:	1ac0      	subs	r0, r0, r3
 80029a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80029a4:	b10b      	cbz	r3, 80029aa <__sflush_r+0x46>
 80029a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029a8:	1ac0      	subs	r0, r0, r3
 80029aa:	2300      	movs	r3, #0
 80029ac:	4602      	mov	r2, r0
 80029ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80029b0:	4628      	mov	r0, r5
 80029b2:	6a21      	ldr	r1, [r4, #32]
 80029b4:	47b0      	blx	r6
 80029b6:	1c43      	adds	r3, r0, #1
 80029b8:	89a3      	ldrh	r3, [r4, #12]
 80029ba:	d106      	bne.n	80029ca <__sflush_r+0x66>
 80029bc:	6829      	ldr	r1, [r5, #0]
 80029be:	291d      	cmp	r1, #29
 80029c0:	d82c      	bhi.n	8002a1c <__sflush_r+0xb8>
 80029c2:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <__sflush_r+0x108>)
 80029c4:	40ca      	lsrs	r2, r1
 80029c6:	07d6      	lsls	r6, r2, #31
 80029c8:	d528      	bpl.n	8002a1c <__sflush_r+0xb8>
 80029ca:	2200      	movs	r2, #0
 80029cc:	6062      	str	r2, [r4, #4]
 80029ce:	6922      	ldr	r2, [r4, #16]
 80029d0:	04d9      	lsls	r1, r3, #19
 80029d2:	6022      	str	r2, [r4, #0]
 80029d4:	d504      	bpl.n	80029e0 <__sflush_r+0x7c>
 80029d6:	1c42      	adds	r2, r0, #1
 80029d8:	d101      	bne.n	80029de <__sflush_r+0x7a>
 80029da:	682b      	ldr	r3, [r5, #0]
 80029dc:	b903      	cbnz	r3, 80029e0 <__sflush_r+0x7c>
 80029de:	6560      	str	r0, [r4, #84]	; 0x54
 80029e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80029e2:	602f      	str	r7, [r5, #0]
 80029e4:	2900      	cmp	r1, #0
 80029e6:	d0ca      	beq.n	800297e <__sflush_r+0x1a>
 80029e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80029ec:	4299      	cmp	r1, r3
 80029ee:	d002      	beq.n	80029f6 <__sflush_r+0x92>
 80029f0:	4628      	mov	r0, r5
 80029f2:	f000 f909 	bl	8002c08 <_free_r>
 80029f6:	2000      	movs	r0, #0
 80029f8:	6360      	str	r0, [r4, #52]	; 0x34
 80029fa:	e7c1      	b.n	8002980 <__sflush_r+0x1c>
 80029fc:	6a21      	ldr	r1, [r4, #32]
 80029fe:	2301      	movs	r3, #1
 8002a00:	4628      	mov	r0, r5
 8002a02:	47b0      	blx	r6
 8002a04:	1c41      	adds	r1, r0, #1
 8002a06:	d1c7      	bne.n	8002998 <__sflush_r+0x34>
 8002a08:	682b      	ldr	r3, [r5, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0c4      	beq.n	8002998 <__sflush_r+0x34>
 8002a0e:	2b1d      	cmp	r3, #29
 8002a10:	d001      	beq.n	8002a16 <__sflush_r+0xb2>
 8002a12:	2b16      	cmp	r3, #22
 8002a14:	d101      	bne.n	8002a1a <__sflush_r+0xb6>
 8002a16:	602f      	str	r7, [r5, #0]
 8002a18:	e7b1      	b.n	800297e <__sflush_r+0x1a>
 8002a1a:	89a3      	ldrh	r3, [r4, #12]
 8002a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a20:	81a3      	strh	r3, [r4, #12]
 8002a22:	e7ad      	b.n	8002980 <__sflush_r+0x1c>
 8002a24:	690f      	ldr	r7, [r1, #16]
 8002a26:	2f00      	cmp	r7, #0
 8002a28:	d0a9      	beq.n	800297e <__sflush_r+0x1a>
 8002a2a:	0793      	lsls	r3, r2, #30
 8002a2c:	bf18      	it	ne
 8002a2e:	2300      	movne	r3, #0
 8002a30:	680e      	ldr	r6, [r1, #0]
 8002a32:	bf08      	it	eq
 8002a34:	694b      	ldreq	r3, [r1, #20]
 8002a36:	eba6 0807 	sub.w	r8, r6, r7
 8002a3a:	600f      	str	r7, [r1, #0]
 8002a3c:	608b      	str	r3, [r1, #8]
 8002a3e:	f1b8 0f00 	cmp.w	r8, #0
 8002a42:	dd9c      	ble.n	800297e <__sflush_r+0x1a>
 8002a44:	4643      	mov	r3, r8
 8002a46:	463a      	mov	r2, r7
 8002a48:	4628      	mov	r0, r5
 8002a4a:	6a21      	ldr	r1, [r4, #32]
 8002a4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002a4e:	47b0      	blx	r6
 8002a50:	2800      	cmp	r0, #0
 8002a52:	dc06      	bgt.n	8002a62 <__sflush_r+0xfe>
 8002a54:	89a3      	ldrh	r3, [r4, #12]
 8002a56:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a5e:	81a3      	strh	r3, [r4, #12]
 8002a60:	e78e      	b.n	8002980 <__sflush_r+0x1c>
 8002a62:	4407      	add	r7, r0
 8002a64:	eba8 0800 	sub.w	r8, r8, r0
 8002a68:	e7e9      	b.n	8002a3e <__sflush_r+0xda>
 8002a6a:	bf00      	nop
 8002a6c:	20400001 	.word	0x20400001

08002a70 <_fflush_r>:
 8002a70:	b538      	push	{r3, r4, r5, lr}
 8002a72:	690b      	ldr	r3, [r1, #16]
 8002a74:	4605      	mov	r5, r0
 8002a76:	460c      	mov	r4, r1
 8002a78:	b913      	cbnz	r3, 8002a80 <_fflush_r+0x10>
 8002a7a:	2500      	movs	r5, #0
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	bd38      	pop	{r3, r4, r5, pc}
 8002a80:	b118      	cbz	r0, 8002a8a <_fflush_r+0x1a>
 8002a82:	6983      	ldr	r3, [r0, #24]
 8002a84:	b90b      	cbnz	r3, 8002a8a <_fflush_r+0x1a>
 8002a86:	f7ff fa4f 	bl	8001f28 <__sinit>
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <_fflush_r+0x6c>)
 8002a8c:	429c      	cmp	r4, r3
 8002a8e:	d11b      	bne.n	8002ac8 <_fflush_r+0x58>
 8002a90:	686c      	ldr	r4, [r5, #4]
 8002a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0ef      	beq.n	8002a7a <_fflush_r+0xa>
 8002a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002a9c:	07d0      	lsls	r0, r2, #31
 8002a9e:	d404      	bmi.n	8002aaa <_fflush_r+0x3a>
 8002aa0:	0599      	lsls	r1, r3, #22
 8002aa2:	d402      	bmi.n	8002aaa <_fflush_r+0x3a>
 8002aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aa6:	f7ff fadd 	bl	8002064 <__retarget_lock_acquire_recursive>
 8002aaa:	4628      	mov	r0, r5
 8002aac:	4621      	mov	r1, r4
 8002aae:	f7ff ff59 	bl	8002964 <__sflush_r>
 8002ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ab4:	4605      	mov	r5, r0
 8002ab6:	07da      	lsls	r2, r3, #31
 8002ab8:	d4e0      	bmi.n	8002a7c <_fflush_r+0xc>
 8002aba:	89a3      	ldrh	r3, [r4, #12]
 8002abc:	059b      	lsls	r3, r3, #22
 8002abe:	d4dd      	bmi.n	8002a7c <_fflush_r+0xc>
 8002ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ac2:	f7ff fad0 	bl	8002066 <__retarget_lock_release_recursive>
 8002ac6:	e7d9      	b.n	8002a7c <_fflush_r+0xc>
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <_fflush_r+0x70>)
 8002aca:	429c      	cmp	r4, r3
 8002acc:	d101      	bne.n	8002ad2 <_fflush_r+0x62>
 8002ace:	68ac      	ldr	r4, [r5, #8]
 8002ad0:	e7df      	b.n	8002a92 <_fflush_r+0x22>
 8002ad2:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <_fflush_r+0x74>)
 8002ad4:	429c      	cmp	r4, r3
 8002ad6:	bf08      	it	eq
 8002ad8:	68ec      	ldreq	r4, [r5, #12]
 8002ada:	e7da      	b.n	8002a92 <_fflush_r+0x22>
 8002adc:	08002db4 	.word	0x08002db4
 8002ae0:	08002dd4 	.word	0x08002dd4
 8002ae4:	08002d94 	.word	0x08002d94

08002ae8 <_lseek_r>:
 8002ae8:	b538      	push	{r3, r4, r5, lr}
 8002aea:	4604      	mov	r4, r0
 8002aec:	4608      	mov	r0, r1
 8002aee:	4611      	mov	r1, r2
 8002af0:	2200      	movs	r2, #0
 8002af2:	4d05      	ldr	r5, [pc, #20]	; (8002b08 <_lseek_r+0x20>)
 8002af4:	602a      	str	r2, [r5, #0]
 8002af6:	461a      	mov	r2, r3
 8002af8:	f7fd fd39 	bl	800056e <_lseek>
 8002afc:	1c43      	adds	r3, r0, #1
 8002afe:	d102      	bne.n	8002b06 <_lseek_r+0x1e>
 8002b00:	682b      	ldr	r3, [r5, #0]
 8002b02:	b103      	cbz	r3, 8002b06 <_lseek_r+0x1e>
 8002b04:	6023      	str	r3, [r4, #0]
 8002b06:	bd38      	pop	{r3, r4, r5, pc}
 8002b08:	20000150 	.word	0x20000150

08002b0c <__swhatbuf_r>:
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	460e      	mov	r6, r1
 8002b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b14:	4614      	mov	r4, r2
 8002b16:	2900      	cmp	r1, #0
 8002b18:	461d      	mov	r5, r3
 8002b1a:	b096      	sub	sp, #88	; 0x58
 8002b1c:	da07      	bge.n	8002b2e <__swhatbuf_r+0x22>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	602b      	str	r3, [r5, #0]
 8002b22:	89b3      	ldrh	r3, [r6, #12]
 8002b24:	061a      	lsls	r2, r3, #24
 8002b26:	d410      	bmi.n	8002b4a <__swhatbuf_r+0x3e>
 8002b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b2c:	e00e      	b.n	8002b4c <__swhatbuf_r+0x40>
 8002b2e:	466a      	mov	r2, sp
 8002b30:	f000 f8c8 	bl	8002cc4 <_fstat_r>
 8002b34:	2800      	cmp	r0, #0
 8002b36:	dbf2      	blt.n	8002b1e <__swhatbuf_r+0x12>
 8002b38:	9a01      	ldr	r2, [sp, #4]
 8002b3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b42:	425a      	negs	r2, r3
 8002b44:	415a      	adcs	r2, r3
 8002b46:	602a      	str	r2, [r5, #0]
 8002b48:	e7ee      	b.n	8002b28 <__swhatbuf_r+0x1c>
 8002b4a:	2340      	movs	r3, #64	; 0x40
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	6023      	str	r3, [r4, #0]
 8002b50:	b016      	add	sp, #88	; 0x58
 8002b52:	bd70      	pop	{r4, r5, r6, pc}

08002b54 <__smakebuf_r>:
 8002b54:	898b      	ldrh	r3, [r1, #12]
 8002b56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b58:	079d      	lsls	r5, r3, #30
 8002b5a:	4606      	mov	r6, r0
 8002b5c:	460c      	mov	r4, r1
 8002b5e:	d507      	bpl.n	8002b70 <__smakebuf_r+0x1c>
 8002b60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b64:	6023      	str	r3, [r4, #0]
 8002b66:	6123      	str	r3, [r4, #16]
 8002b68:	2301      	movs	r3, #1
 8002b6a:	6163      	str	r3, [r4, #20]
 8002b6c:	b002      	add	sp, #8
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	466a      	mov	r2, sp
 8002b72:	ab01      	add	r3, sp, #4
 8002b74:	f7ff ffca 	bl	8002b0c <__swhatbuf_r>
 8002b78:	9900      	ldr	r1, [sp, #0]
 8002b7a:	4605      	mov	r5, r0
 8002b7c:	4630      	mov	r0, r6
 8002b7e:	f7ff fa73 	bl	8002068 <_malloc_r>
 8002b82:	b948      	cbnz	r0, 8002b98 <__smakebuf_r+0x44>
 8002b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b88:	059a      	lsls	r2, r3, #22
 8002b8a:	d4ef      	bmi.n	8002b6c <__smakebuf_r+0x18>
 8002b8c:	f023 0303 	bic.w	r3, r3, #3
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	81a3      	strh	r3, [r4, #12]
 8002b96:	e7e3      	b.n	8002b60 <__smakebuf_r+0xc>
 8002b98:	4b0d      	ldr	r3, [pc, #52]	; (8002bd0 <__smakebuf_r+0x7c>)
 8002b9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8002b9c:	89a3      	ldrh	r3, [r4, #12]
 8002b9e:	6020      	str	r0, [r4, #0]
 8002ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba4:	81a3      	strh	r3, [r4, #12]
 8002ba6:	9b00      	ldr	r3, [sp, #0]
 8002ba8:	6120      	str	r0, [r4, #16]
 8002baa:	6163      	str	r3, [r4, #20]
 8002bac:	9b01      	ldr	r3, [sp, #4]
 8002bae:	b15b      	cbz	r3, 8002bc8 <__smakebuf_r+0x74>
 8002bb0:	4630      	mov	r0, r6
 8002bb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bb6:	f000 f897 	bl	8002ce8 <_isatty_r>
 8002bba:	b128      	cbz	r0, 8002bc8 <__smakebuf_r+0x74>
 8002bbc:	89a3      	ldrh	r3, [r4, #12]
 8002bbe:	f023 0303 	bic.w	r3, r3, #3
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	81a3      	strh	r3, [r4, #12]
 8002bc8:	89a0      	ldrh	r0, [r4, #12]
 8002bca:	4305      	orrs	r5, r0
 8002bcc:	81a5      	strh	r5, [r4, #12]
 8002bce:	e7cd      	b.n	8002b6c <__smakebuf_r+0x18>
 8002bd0:	08001ec1 	.word	0x08001ec1

08002bd4 <memchr>:
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	b510      	push	{r4, lr}
 8002bd8:	b2c9      	uxtb	r1, r1
 8002bda:	4402      	add	r2, r0
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	d101      	bne.n	8002be6 <memchr+0x12>
 8002be2:	2000      	movs	r0, #0
 8002be4:	e003      	b.n	8002bee <memchr+0x1a>
 8002be6:	7804      	ldrb	r4, [r0, #0]
 8002be8:	3301      	adds	r3, #1
 8002bea:	428c      	cmp	r4, r1
 8002bec:	d1f6      	bne.n	8002bdc <memchr+0x8>
 8002bee:	bd10      	pop	{r4, pc}

08002bf0 <__malloc_lock>:
 8002bf0:	4801      	ldr	r0, [pc, #4]	; (8002bf8 <__malloc_lock+0x8>)
 8002bf2:	f7ff ba37 	b.w	8002064 <__retarget_lock_acquire_recursive>
 8002bf6:	bf00      	nop
 8002bf8:	20000148 	.word	0x20000148

08002bfc <__malloc_unlock>:
 8002bfc:	4801      	ldr	r0, [pc, #4]	; (8002c04 <__malloc_unlock+0x8>)
 8002bfe:	f7ff ba32 	b.w	8002066 <__retarget_lock_release_recursive>
 8002c02:	bf00      	nop
 8002c04:	20000148 	.word	0x20000148

08002c08 <_free_r>:
 8002c08:	b538      	push	{r3, r4, r5, lr}
 8002c0a:	4605      	mov	r5, r0
 8002c0c:	2900      	cmp	r1, #0
 8002c0e:	d043      	beq.n	8002c98 <_free_r+0x90>
 8002c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c14:	1f0c      	subs	r4, r1, #4
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	bfb8      	it	lt
 8002c1a:	18e4      	addlt	r4, r4, r3
 8002c1c:	f7ff ffe8 	bl	8002bf0 <__malloc_lock>
 8002c20:	4a1e      	ldr	r2, [pc, #120]	; (8002c9c <_free_r+0x94>)
 8002c22:	6813      	ldr	r3, [r2, #0]
 8002c24:	4610      	mov	r0, r2
 8002c26:	b933      	cbnz	r3, 8002c36 <_free_r+0x2e>
 8002c28:	6063      	str	r3, [r4, #4]
 8002c2a:	6014      	str	r4, [r2, #0]
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c32:	f7ff bfe3 	b.w	8002bfc <__malloc_unlock>
 8002c36:	42a3      	cmp	r3, r4
 8002c38:	d90a      	bls.n	8002c50 <_free_r+0x48>
 8002c3a:	6821      	ldr	r1, [r4, #0]
 8002c3c:	1862      	adds	r2, r4, r1
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	bf01      	itttt	eq
 8002c42:	681a      	ldreq	r2, [r3, #0]
 8002c44:	685b      	ldreq	r3, [r3, #4]
 8002c46:	1852      	addeq	r2, r2, r1
 8002c48:	6022      	streq	r2, [r4, #0]
 8002c4a:	6063      	str	r3, [r4, #4]
 8002c4c:	6004      	str	r4, [r0, #0]
 8002c4e:	e7ed      	b.n	8002c2c <_free_r+0x24>
 8002c50:	461a      	mov	r2, r3
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	b10b      	cbz	r3, 8002c5a <_free_r+0x52>
 8002c56:	42a3      	cmp	r3, r4
 8002c58:	d9fa      	bls.n	8002c50 <_free_r+0x48>
 8002c5a:	6811      	ldr	r1, [r2, #0]
 8002c5c:	1850      	adds	r0, r2, r1
 8002c5e:	42a0      	cmp	r0, r4
 8002c60:	d10b      	bne.n	8002c7a <_free_r+0x72>
 8002c62:	6820      	ldr	r0, [r4, #0]
 8002c64:	4401      	add	r1, r0
 8002c66:	1850      	adds	r0, r2, r1
 8002c68:	4283      	cmp	r3, r0
 8002c6a:	6011      	str	r1, [r2, #0]
 8002c6c:	d1de      	bne.n	8002c2c <_free_r+0x24>
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	4401      	add	r1, r0
 8002c74:	6011      	str	r1, [r2, #0]
 8002c76:	6053      	str	r3, [r2, #4]
 8002c78:	e7d8      	b.n	8002c2c <_free_r+0x24>
 8002c7a:	d902      	bls.n	8002c82 <_free_r+0x7a>
 8002c7c:	230c      	movs	r3, #12
 8002c7e:	602b      	str	r3, [r5, #0]
 8002c80:	e7d4      	b.n	8002c2c <_free_r+0x24>
 8002c82:	6820      	ldr	r0, [r4, #0]
 8002c84:	1821      	adds	r1, r4, r0
 8002c86:	428b      	cmp	r3, r1
 8002c88:	bf01      	itttt	eq
 8002c8a:	6819      	ldreq	r1, [r3, #0]
 8002c8c:	685b      	ldreq	r3, [r3, #4]
 8002c8e:	1809      	addeq	r1, r1, r0
 8002c90:	6021      	streq	r1, [r4, #0]
 8002c92:	6063      	str	r3, [r4, #4]
 8002c94:	6054      	str	r4, [r2, #4]
 8002c96:	e7c9      	b.n	8002c2c <_free_r+0x24>
 8002c98:	bd38      	pop	{r3, r4, r5, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000090 	.word	0x20000090

08002ca0 <_read_r>:
 8002ca0:	b538      	push	{r3, r4, r5, lr}
 8002ca2:	4604      	mov	r4, r0
 8002ca4:	4608      	mov	r0, r1
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	2200      	movs	r2, #0
 8002caa:	4d05      	ldr	r5, [pc, #20]	; (8002cc0 <_read_r+0x20>)
 8002cac:	602a      	str	r2, [r5, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f7fd fc00 	bl	80004b4 <_read>
 8002cb4:	1c43      	adds	r3, r0, #1
 8002cb6:	d102      	bne.n	8002cbe <_read_r+0x1e>
 8002cb8:	682b      	ldr	r3, [r5, #0]
 8002cba:	b103      	cbz	r3, 8002cbe <_read_r+0x1e>
 8002cbc:	6023      	str	r3, [r4, #0]
 8002cbe:	bd38      	pop	{r3, r4, r5, pc}
 8002cc0:	20000150 	.word	0x20000150

08002cc4 <_fstat_r>:
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	4d06      	ldr	r5, [pc, #24]	; (8002ce4 <_fstat_r+0x20>)
 8002cca:	4604      	mov	r4, r0
 8002ccc:	4608      	mov	r0, r1
 8002cce:	4611      	mov	r1, r2
 8002cd0:	602b      	str	r3, [r5, #0]
 8002cd2:	f7fd fc33 	bl	800053c <_fstat>
 8002cd6:	1c43      	adds	r3, r0, #1
 8002cd8:	d102      	bne.n	8002ce0 <_fstat_r+0x1c>
 8002cda:	682b      	ldr	r3, [r5, #0]
 8002cdc:	b103      	cbz	r3, 8002ce0 <_fstat_r+0x1c>
 8002cde:	6023      	str	r3, [r4, #0]
 8002ce0:	bd38      	pop	{r3, r4, r5, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000150 	.word	0x20000150

08002ce8 <_isatty_r>:
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	2300      	movs	r3, #0
 8002cec:	4d05      	ldr	r5, [pc, #20]	; (8002d04 <_isatty_r+0x1c>)
 8002cee:	4604      	mov	r4, r0
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	602b      	str	r3, [r5, #0]
 8002cf4:	f7fd fc31 	bl	800055a <_isatty>
 8002cf8:	1c43      	adds	r3, r0, #1
 8002cfa:	d102      	bne.n	8002d02 <_isatty_r+0x1a>
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	b103      	cbz	r3, 8002d02 <_isatty_r+0x1a>
 8002d00:	6023      	str	r3, [r4, #0]
 8002d02:	bd38      	pop	{r3, r4, r5, pc}
 8002d04:	20000150 	.word	0x20000150

08002d08 <_init>:
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d0a:	bf00      	nop
 8002d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d0e:	bc08      	pop	{r3}
 8002d10:	469e      	mov	lr, r3
 8002d12:	4770      	bx	lr

08002d14 <_fini>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	bf00      	nop
 8002d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1a:	bc08      	pop	{r3}
 8002d1c:	469e      	mov	lr, r3
 8002d1e:	4770      	bx	lr
