
TEMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a54  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08002c38  08002c38  00012c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d10  08002d10  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002d10  08002d10  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d10  08002d10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d10  08002d10  00012d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d14  08002d14  00012d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000070  08002d88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08002d88  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008aab  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001beb  00000000  00000000  00028b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002a730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002ae78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fe3  00000000  00000000  0002b4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008a82  00000000  00000000  000454bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091894  00000000  00000000  0004df3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000df7d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000232c  00000000  00000000  000df824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08002c20 	.word	0x08002c20

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08002c20 	.word	0x08002c20

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800022a:	4b08      	ldr	r3, [pc, #32]	; (800024c <MX_GPIO_Init+0x28>)
 800022c:	699b      	ldr	r3, [r3, #24]
 800022e:	4a07      	ldr	r2, [pc, #28]	; (800024c <MX_GPIO_Init+0x28>)
 8000230:	f043 0304 	orr.w	r3, r3, #4
 8000234:	6193      	str	r3, [r2, #24]
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <MX_GPIO_Init+0x28>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	f003 0304 	and.w	r3, r3, #4
 800023e:	607b      	str	r3, [r7, #4]
 8000240:	687b      	ldr	r3, [r7, #4]

}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	40021000 	.word	0x40021000

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 fa1c 	bl	8000690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f80a 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f7ff ffe2 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000260:	f000 f95a 	bl	8000518 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("初始化完成......");
 8000264:	4801      	ldr	r0, [pc, #4]	; (800026c <main+0x1c>)
 8000266:	f001 fd7b 	bl	8001d60 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026a:	e7fe      	b.n	800026a <main+0x1a>
 800026c:	08002c38 	.word	0x08002c38

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b090      	sub	sp, #64	; 0x40
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0318 	add.w	r3, r7, #24
 800027a:	2228      	movs	r2, #40	; 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f001 fd66 	bl	8001d50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000292:	2301      	movs	r3, #1
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a0:	2301      	movs	r3, #1
 80002a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a4:	2302      	movs	r3, #2
 80002a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b4:	f107 0318 	add.w	r3, r7, #24
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fdf5 	bl	8000ea8 <HAL_RCC_OscConfig>
 80002be:	4603      	mov	r3, r0
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002c4:	f000 f819 	bl	80002fa <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c8:	230f      	movs	r3, #15
 80002ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002cc:	2302      	movs	r3, #2
 80002ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002da:	2300      	movs	r3, #0
 80002dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	2102      	movs	r1, #2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f001 f860 	bl	80013a8 <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ee:	f000 f804 	bl	80002fa <Error_Handler>
  }
}
 80002f2:	bf00      	nop
 80002f4:	3740      	adds	r7, #64	; 0x40
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}

080002fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002fa:	b480      	push	{r7}
 80002fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002fe:	b672      	cpsid	i
}
 8000300:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000302:	e7fe      	b.n	8000302 <Error_Handler+0x8>

08000304 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800030a:	4b15      	ldr	r3, [pc, #84]	; (8000360 <HAL_MspInit+0x5c>)
 800030c:	699b      	ldr	r3, [r3, #24]
 800030e:	4a14      	ldr	r2, [pc, #80]	; (8000360 <HAL_MspInit+0x5c>)
 8000310:	f043 0301 	orr.w	r3, r3, #1
 8000314:	6193      	str	r3, [r2, #24]
 8000316:	4b12      	ldr	r3, [pc, #72]	; (8000360 <HAL_MspInit+0x5c>)
 8000318:	699b      	ldr	r3, [r3, #24]
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	60bb      	str	r3, [r7, #8]
 8000320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <HAL_MspInit+0x5c>)
 8000324:	69db      	ldr	r3, [r3, #28]
 8000326:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <HAL_MspInit+0x5c>)
 8000328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800032c:	61d3      	str	r3, [r2, #28]
 800032e:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <HAL_MspInit+0x5c>)
 8000330:	69db      	ldr	r3, [r3, #28]
 8000332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <HAL_MspInit+0x60>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	60fb      	str	r3, [r7, #12]
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800034e:	60fb      	str	r3, [r7, #12]
 8000350:	4a04      	ldr	r2, [pc, #16]	; (8000364 <HAL_MspInit+0x60>)
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000356:	bf00      	nop
 8000358:	3714      	adds	r7, #20
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000
 8000364:	40010000 	.word	0x40010000

08000368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800036c:	e7fe      	b.n	800036c <NMI_Handler+0x4>

0800036e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000372:	e7fe      	b.n	8000372 <HardFault_Handler+0x4>

08000374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <MemManage_Handler+0x4>

0800037a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037e:	e7fe      	b.n	800037e <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000384:	e7fe      	b.n	8000384 <UsageFault_Handler+0x4>

08000386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr

08000392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr

0800039e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ae:	f000 f9b5 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
	...

080003b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80003bc:	4802      	ldr	r0, [pc, #8]	; (80003c8 <USART1_IRQHandler+0x10>)
 80003be:	f001 f9db 	bl	8001778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000098 	.word	0x20000098

080003cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
 80003dc:	e00a      	b.n	80003f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003de:	f3af 8000 	nop.w
 80003e2:	4601      	mov	r1, r0
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	1c5a      	adds	r2, r3, #1
 80003e8:	60ba      	str	r2, [r7, #8]
 80003ea:	b2ca      	uxtb	r2, r1
 80003ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	3301      	adds	r3, #1
 80003f2:	617b      	str	r3, [r7, #20]
 80003f4:	697a      	ldr	r2, [r7, #20]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	dbf0      	blt.n	80003de <_read+0x12>
	}

return len;
 80003fc:	687b      	ldr	r3, [r7, #4]
}
 80003fe:	4618      	mov	r0, r3
 8000400:	3718      	adds	r7, #24
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000406:	b580      	push	{r7, lr}
 8000408:	b086      	sub	sp, #24
 800040a:	af00      	add	r7, sp, #0
 800040c:	60f8      	str	r0, [r7, #12]
 800040e:	60b9      	str	r1, [r7, #8]
 8000410:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000412:	2300      	movs	r3, #0
 8000414:	617b      	str	r3, [r7, #20]
 8000416:	e009      	b.n	800042c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	1c5a      	adds	r2, r3, #1
 800041c:	60ba      	str	r2, [r7, #8]
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	4618      	mov	r0, r3
 8000422:	f000 f8f7 	bl	8000614 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	3301      	adds	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
 800042c:	697a      	ldr	r2, [r7, #20]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	429a      	cmp	r2, r3
 8000432:	dbf1      	blt.n	8000418 <_write+0x12>
	}
	return len;
 8000434:	687b      	ldr	r3, [r7, #4]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3718      	adds	r7, #24
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}

0800043e <_close>:

int _close(int file)
{
 800043e:	b480      	push	{r7}
 8000440:	b083      	sub	sp, #12
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
	return -1;
 8000446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800044a:	4618      	mov	r0, r3
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800045e:	683b      	ldr	r3, [r7, #0]
 8000460:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000464:	605a      	str	r2, [r3, #4]
	return 0;
 8000466:	2300      	movs	r3, #0
}
 8000468:	4618      	mov	r0, r3
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	bc80      	pop	{r7}
 8000470:	4770      	bx	lr

08000472 <_isatty>:

int _isatty(int file)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
	return 1;
 800047a:	2301      	movs	r3, #1
}
 800047c:	4618      	mov	r0, r3
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr

08000486 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000486:	b480      	push	{r7}
 8000488:	b085      	sub	sp, #20
 800048a:	af00      	add	r7, sp, #0
 800048c:	60f8      	str	r0, [r7, #12]
 800048e:	60b9      	str	r1, [r7, #8]
 8000490:	607a      	str	r2, [r7, #4]
	return 0;
 8000492:	2300      	movs	r3, #0
}
 8000494:	4618      	mov	r0, r3
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
	...

080004a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a8:	4a14      	ldr	r2, [pc, #80]	; (80004fc <_sbrk+0x5c>)
 80004aa:	4b15      	ldr	r3, [pc, #84]	; (8000500 <_sbrk+0x60>)
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004b4:	4b13      	ldr	r3, [pc, #76]	; (8000504 <_sbrk+0x64>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d102      	bne.n	80004c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004bc:	4b11      	ldr	r3, [pc, #68]	; (8000504 <_sbrk+0x64>)
 80004be:	4a12      	ldr	r2, [pc, #72]	; (8000508 <_sbrk+0x68>)
 80004c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004c2:	4b10      	ldr	r3, [pc, #64]	; (8000504 <_sbrk+0x64>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	693a      	ldr	r2, [r7, #16]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d207      	bcs.n	80004e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004d0:	f001 fc14 	bl	8001cfc <__errno>
 80004d4:	4603      	mov	r3, r0
 80004d6:	220c      	movs	r2, #12
 80004d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	e009      	b.n	80004f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <_sbrk+0x64>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004e6:	4b07      	ldr	r3, [pc, #28]	; (8000504 <_sbrk+0x64>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	4a05      	ldr	r2, [pc, #20]	; (8000504 <_sbrk+0x64>)
 80004f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004f2:	68fb      	ldr	r3, [r7, #12]
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3718      	adds	r7, #24
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	20010000 	.word	0x20010000
 8000500:	00000400 	.word	0x00000400
 8000504:	2000008c 	.word	0x2000008c
 8000508:	20000158 	.word	0x20000158

0800050c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr

08000518 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800051c:	4b11      	ldr	r3, [pc, #68]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800051e:	4a12      	ldr	r2, [pc, #72]	; (8000568 <MX_USART1_UART_Init+0x50>)
 8000520:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000522:	4b10      	ldr	r3, [pc, #64]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000528:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000530:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000532:	2200      	movs	r2, #0
 8000534:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000538:	2200      	movs	r2, #0
 800053a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800053e:	220c      	movs	r2, #12
 8000540:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <MX_USART1_UART_Init+0x4c>)
 8000550:	f001 f8c4 	bl	80016dc <HAL_UART_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800055a:	f7ff fece 	bl	80002fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800055e:	bf00      	nop
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000098 	.word	0x20000098
 8000568:	40013800 	.word	0x40013800

0800056c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a20      	ldr	r2, [pc, #128]	; (8000608 <HAL_UART_MspInit+0x9c>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d139      	bne.n	8000600 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <HAL_UART_MspInit+0xa0>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a1e      	ldr	r2, [pc, #120]	; (800060c <HAL_UART_MspInit+0xa0>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b1c      	ldr	r3, [pc, #112]	; (800060c <HAL_UART_MspInit+0xa0>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <HAL_UART_MspInit+0xa0>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a18      	ldr	r2, [pc, #96]	; (800060c <HAL_UART_MspInit+0xa0>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <HAL_UART_MspInit+0xa0>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c2:	2302      	movs	r3, #2
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	4619      	mov	r1, r3
 80005d0:	480f      	ldr	r0, [pc, #60]	; (8000610 <HAL_UART_MspInit+0xa4>)
 80005d2:	f000 fad5 	bl	8000b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	4809      	ldr	r0, [pc, #36]	; (8000610 <HAL_UART_MspInit+0xa4>)
 80005ec:	f000 fac8 	bl	8000b80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	2025      	movs	r0, #37	; 0x25
 80005f6:	f000 f984 	bl	8000902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005fa:	2025      	movs	r0, #37	; 0x25
 80005fc:	f000 f99d 	bl	800093a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40013800 	.word	0x40013800
 800060c:	40021000 	.word	0x40021000
 8000610:	40010800 	.word	0x40010800

08000614 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
  x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  // 具体哪个串口可以更改huart2为其它串口
  // HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
  while ((USART1->SR & 0X40) == 0) {
 800061c:	bf00      	nop
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <__io_putchar+0x2c>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0f9      	beq.n	800061e <__io_putchar+0xa>
  }; //循环发送,直到发送完毕
  USART1->DR = (uint8_t) ch;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	b2da      	uxtb	r2, r3
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <__io_putchar+0x2c>)
 8000630:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

  return ch;
 8000632:	687b      	ldr	r3, [r7, #4]
}
 8000634:	4618      	mov	r0, r3
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	40013800 	.word	0x40013800

08000644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000644:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000646:	e003      	b.n	8000650 <LoopCopyDataInit>

08000648 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800064a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800064c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800064e:	3104      	adds	r1, #4

08000650 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000650:	480a      	ldr	r0, [pc, #40]	; (800067c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000654:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000656:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000658:	d3f6      	bcc.n	8000648 <CopyDataInit>
  ldr r2, =_sbss
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800065c:	e002      	b.n	8000664 <LoopFillZerobss>

0800065e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000660:	f842 3b04 	str.w	r3, [r2], #4

08000664 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000666:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000668:	d3f9      	bcc.n	800065e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800066a:	f7ff ff4f 	bl	800050c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800066e:	f001 fb4b 	bl	8001d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000672:	f7ff fded 	bl	8000250 <main>
  bx lr
 8000676:	4770      	bx	lr
  ldr r3, =_sidata
 8000678:	08002d18 	.word	0x08002d18
  ldr r0, =_sdata
 800067c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000680:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000684:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000688:	20000154 	.word	0x20000154

0800068c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC1_2_IRQHandler>
	...

08000690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000694:	4b08      	ldr	r3, [pc, #32]	; (80006b8 <HAL_Init+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <HAL_Init+0x28>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f000 f923 	bl	80008ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f808 	bl	80006bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ac:	f7ff fe2a 	bl	8000304 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40022000 	.word	0x40022000

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c4:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_InitTick+0x54>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_InitTick+0x58>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f93b 	bl	8000956 <HAL_SYSTICK_Config>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e00e      	b.n	8000708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d80a      	bhi.n	8000706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f0:	2200      	movs	r2, #0
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295
 80006f8:	f000 f903 	bl	8000902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <HAL_InitTick+0x5c>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000702:	2300      	movs	r3, #0
 8000704:	e000      	b.n	8000708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000000 	.word	0x20000000
 8000714:	20000008 	.word	0x20000008
 8000718:	20000004 	.word	0x20000004

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_IncTick+0x1c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	; (800073c <HAL_IncTick+0x20>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	; (800073c <HAL_IncTick+0x20>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000008 	.word	0x20000008
 800073c:	20000140 	.word	0x20000140

08000740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b02      	ldr	r3, [pc, #8]	; (8000750 <HAL_GetTick+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	20000140 	.word	0x20000140

08000754 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800076a:	68ba      	ldr	r2, [r7, #8]
 800076c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000770:	4013      	ands	r3, r2
 8000772:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800077c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000786:	4a04      	ldr	r2, [pc, #16]	; (8000798 <__NVIC_SetPriorityGrouping+0x44>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	60d3      	str	r3, [r2, #12]
}
 800078c:	bf00      	nop
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <__NVIC_GetPriorityGrouping+0x18>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	0a1b      	lsrs	r3, r3, #8
 80007a6:	f003 0307 	and.w	r3, r3, #7
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	db0b      	blt.n	80007e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f003 021f 	and.w	r2, r3, #31
 80007d0:	4906      	ldr	r1, [pc, #24]	; (80007ec <__NVIC_EnableIRQ+0x34>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	2001      	movs	r0, #1
 80007da:	fa00 f202 	lsl.w	r2, r0, r2
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	e000e100 	.word	0xe000e100

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008b8:	d301      	bcc.n	80008be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ba:	2301      	movs	r3, #1
 80008bc:	e00f      	b.n	80008de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <SysTick_Config+0x40>)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	3b01      	subs	r3, #1
 80008c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008c6:	210f      	movs	r1, #15
 80008c8:	f04f 30ff 	mov.w	r0, #4294967295
 80008cc:	f7ff ff90 	bl	80007f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <SysTick_Config+0x40>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008d6:	4b04      	ldr	r3, [pc, #16]	; (80008e8 <SysTick_Config+0x40>)
 80008d8:	2207      	movs	r2, #7
 80008da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	e000e010 	.word	0xe000e010

080008ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff ff2d 	bl	8000754 <__NVIC_SetPriorityGrouping>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000902:	b580      	push	{r7, lr}
 8000904:	b086      	sub	sp, #24
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	60b9      	str	r1, [r7, #8]
 800090c:	607a      	str	r2, [r7, #4]
 800090e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000914:	f7ff ff42 	bl	800079c <__NVIC_GetPriorityGrouping>
 8000918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	68b9      	ldr	r1, [r7, #8]
 800091e:	6978      	ldr	r0, [r7, #20]
 8000920:	f7ff ff90 	bl	8000844 <NVIC_EncodePriority>
 8000924:	4602      	mov	r2, r0
 8000926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800092a:	4611      	mov	r1, r2
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff5f 	bl	80007f0 <__NVIC_SetPriority>
}
 8000932:	bf00      	nop
 8000934:	3718      	adds	r7, #24
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b082      	sub	sp, #8
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff35 	bl	80007b8 <__NVIC_EnableIRQ>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff ffa2 	bl	80008a8 <SysTick_Config>
 8000964:	4603      	mov	r3, r0
}
 8000966:	4618      	mov	r0, r3
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000978:	2300      	movs	r3, #0
 800097a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000982:	2b02      	cmp	r3, #2
 8000984:	d005      	beq.n	8000992 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2204      	movs	r2, #4
 800098a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	73fb      	strb	r3, [r7, #15]
 8000990:	e0d6      	b.n	8000b40 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f022 020e 	bic.w	r2, r2, #14
 80009a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f022 0201 	bic.w	r2, r2, #1
 80009b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b64      	ldr	r3, [pc, #400]	; (8000b4c <HAL_DMA_Abort_IT+0x1dc>)
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d958      	bls.n	8000a70 <HAL_DMA_Abort_IT+0x100>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a63      	ldr	r2, [pc, #396]	; (8000b50 <HAL_DMA_Abort_IT+0x1e0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d04f      	beq.n	8000a68 <HAL_DMA_Abort_IT+0xf8>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a61      	ldr	r2, [pc, #388]	; (8000b54 <HAL_DMA_Abort_IT+0x1e4>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d048      	beq.n	8000a64 <HAL_DMA_Abort_IT+0xf4>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a60      	ldr	r2, [pc, #384]	; (8000b58 <HAL_DMA_Abort_IT+0x1e8>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d040      	beq.n	8000a5e <HAL_DMA_Abort_IT+0xee>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a5e      	ldr	r2, [pc, #376]	; (8000b5c <HAL_DMA_Abort_IT+0x1ec>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d038      	beq.n	8000a58 <HAL_DMA_Abort_IT+0xe8>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a5d      	ldr	r2, [pc, #372]	; (8000b60 <HAL_DMA_Abort_IT+0x1f0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d030      	beq.n	8000a52 <HAL_DMA_Abort_IT+0xe2>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a5b      	ldr	r2, [pc, #364]	; (8000b64 <HAL_DMA_Abort_IT+0x1f4>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d028      	beq.n	8000a4c <HAL_DMA_Abort_IT+0xdc>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a53      	ldr	r2, [pc, #332]	; (8000b4c <HAL_DMA_Abort_IT+0x1dc>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d020      	beq.n	8000a46 <HAL_DMA_Abort_IT+0xd6>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a57      	ldr	r2, [pc, #348]	; (8000b68 <HAL_DMA_Abort_IT+0x1f8>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d019      	beq.n	8000a42 <HAL_DMA_Abort_IT+0xd2>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a56      	ldr	r2, [pc, #344]	; (8000b6c <HAL_DMA_Abort_IT+0x1fc>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d012      	beq.n	8000a3e <HAL_DMA_Abort_IT+0xce>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a54      	ldr	r2, [pc, #336]	; (8000b70 <HAL_DMA_Abort_IT+0x200>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d00a      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xc8>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a53      	ldr	r2, [pc, #332]	; (8000b74 <HAL_DMA_Abort_IT+0x204>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d102      	bne.n	8000a32 <HAL_DMA_Abort_IT+0xc2>
 8000a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a30:	e01b      	b.n	8000a6a <HAL_DMA_Abort_IT+0xfa>
 8000a32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a36:	e018      	b.n	8000a6a <HAL_DMA_Abort_IT+0xfa>
 8000a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3c:	e015      	b.n	8000a6a <HAL_DMA_Abort_IT+0xfa>
 8000a3e:	2310      	movs	r3, #16
 8000a40:	e013      	b.n	8000a6a <HAL_DMA_Abort_IT+0xfa>
 8000a42:	2301      	movs	r3, #1
 8000a44:	e011      	b.n	8000a6a <HAL_DMA_Abort_IT+0xfa>
 8000a46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a4a:	e00e      	b.n	8000a6a <HAL_DMA_Abort_IT+0xfa>
 8000a4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a50:	e00b      	b.n	8000a6a <HAL_DMA_Abort_IT+0xfa>
 8000a52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a56:	e008      	b.n	8000a6a <HAL_DMA_Abort_IT+0xfa>
 8000a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a5c:	e005      	b.n	8000a6a <HAL_DMA_Abort_IT+0xfa>
 8000a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a62:	e002      	b.n	8000a6a <HAL_DMA_Abort_IT+0xfa>
 8000a64:	2310      	movs	r3, #16
 8000a66:	e000      	b.n	8000a6a <HAL_DMA_Abort_IT+0xfa>
 8000a68:	2301      	movs	r3, #1
 8000a6a:	4a43      	ldr	r2, [pc, #268]	; (8000b78 <HAL_DMA_Abort_IT+0x208>)
 8000a6c:	6053      	str	r3, [r2, #4]
 8000a6e:	e057      	b.n	8000b20 <HAL_DMA_Abort_IT+0x1b0>
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a36      	ldr	r2, [pc, #216]	; (8000b50 <HAL_DMA_Abort_IT+0x1e0>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d04f      	beq.n	8000b1a <HAL_DMA_Abort_IT+0x1aa>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a35      	ldr	r2, [pc, #212]	; (8000b54 <HAL_DMA_Abort_IT+0x1e4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d048      	beq.n	8000b16 <HAL_DMA_Abort_IT+0x1a6>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a33      	ldr	r2, [pc, #204]	; (8000b58 <HAL_DMA_Abort_IT+0x1e8>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d040      	beq.n	8000b10 <HAL_DMA_Abort_IT+0x1a0>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a32      	ldr	r2, [pc, #200]	; (8000b5c <HAL_DMA_Abort_IT+0x1ec>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d038      	beq.n	8000b0a <HAL_DMA_Abort_IT+0x19a>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a30      	ldr	r2, [pc, #192]	; (8000b60 <HAL_DMA_Abort_IT+0x1f0>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d030      	beq.n	8000b04 <HAL_DMA_Abort_IT+0x194>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a2f      	ldr	r2, [pc, #188]	; (8000b64 <HAL_DMA_Abort_IT+0x1f4>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d028      	beq.n	8000afe <HAL_DMA_Abort_IT+0x18e>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a26      	ldr	r2, [pc, #152]	; (8000b4c <HAL_DMA_Abort_IT+0x1dc>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d020      	beq.n	8000af8 <HAL_DMA_Abort_IT+0x188>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a2b      	ldr	r2, [pc, #172]	; (8000b68 <HAL_DMA_Abort_IT+0x1f8>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d019      	beq.n	8000af4 <HAL_DMA_Abort_IT+0x184>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a29      	ldr	r2, [pc, #164]	; (8000b6c <HAL_DMA_Abort_IT+0x1fc>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d012      	beq.n	8000af0 <HAL_DMA_Abort_IT+0x180>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a28      	ldr	r2, [pc, #160]	; (8000b70 <HAL_DMA_Abort_IT+0x200>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d00a      	beq.n	8000aea <HAL_DMA_Abort_IT+0x17a>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a26      	ldr	r2, [pc, #152]	; (8000b74 <HAL_DMA_Abort_IT+0x204>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d102      	bne.n	8000ae4 <HAL_DMA_Abort_IT+0x174>
 8000ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae2:	e01b      	b.n	8000b1c <HAL_DMA_Abort_IT+0x1ac>
 8000ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae8:	e018      	b.n	8000b1c <HAL_DMA_Abort_IT+0x1ac>
 8000aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aee:	e015      	b.n	8000b1c <HAL_DMA_Abort_IT+0x1ac>
 8000af0:	2310      	movs	r3, #16
 8000af2:	e013      	b.n	8000b1c <HAL_DMA_Abort_IT+0x1ac>
 8000af4:	2301      	movs	r3, #1
 8000af6:	e011      	b.n	8000b1c <HAL_DMA_Abort_IT+0x1ac>
 8000af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000afc:	e00e      	b.n	8000b1c <HAL_DMA_Abort_IT+0x1ac>
 8000afe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b02:	e00b      	b.n	8000b1c <HAL_DMA_Abort_IT+0x1ac>
 8000b04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b08:	e008      	b.n	8000b1c <HAL_DMA_Abort_IT+0x1ac>
 8000b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0e:	e005      	b.n	8000b1c <HAL_DMA_Abort_IT+0x1ac>
 8000b10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b14:	e002      	b.n	8000b1c <HAL_DMA_Abort_IT+0x1ac>
 8000b16:	2310      	movs	r3, #16
 8000b18:	e000      	b.n	8000b1c <HAL_DMA_Abort_IT+0x1ac>
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_DMA_Abort_IT+0x20c>)
 8000b1e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2201      	movs	r2, #1
 8000b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d003      	beq.n	8000b40 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	4798      	blx	r3
    } 
  }
  return status;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40020080 	.word	0x40020080
 8000b50:	40020008 	.word	0x40020008
 8000b54:	4002001c 	.word	0x4002001c
 8000b58:	40020030 	.word	0x40020030
 8000b5c:	40020044 	.word	0x40020044
 8000b60:	40020058 	.word	0x40020058
 8000b64:	4002006c 	.word	0x4002006c
 8000b68:	40020408 	.word	0x40020408
 8000b6c:	4002041c 	.word	0x4002041c
 8000b70:	40020430 	.word	0x40020430
 8000b74:	40020444 	.word	0x40020444
 8000b78:	40020400 	.word	0x40020400
 8000b7c:	40020000 	.word	0x40020000

08000b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b08b      	sub	sp, #44	; 0x2c
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b92:	e179      	b.n	8000e88 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b94:	2201      	movs	r2, #1
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	69fa      	ldr	r2, [r7, #28]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	f040 8168 	bne.w	8000e82 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	4aa0      	ldr	r2, [pc, #640]	; (8000e38 <HAL_GPIO_Init+0x2b8>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d05e      	beq.n	8000c7a <HAL_GPIO_Init+0xfa>
 8000bbc:	4a9e      	ldr	r2, [pc, #632]	; (8000e38 <HAL_GPIO_Init+0x2b8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d875      	bhi.n	8000cae <HAL_GPIO_Init+0x12e>
 8000bc2:	4a9e      	ldr	r2, [pc, #632]	; (8000e3c <HAL_GPIO_Init+0x2bc>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d058      	beq.n	8000c7a <HAL_GPIO_Init+0xfa>
 8000bc8:	4a9c      	ldr	r2, [pc, #624]	; (8000e3c <HAL_GPIO_Init+0x2bc>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d86f      	bhi.n	8000cae <HAL_GPIO_Init+0x12e>
 8000bce:	4a9c      	ldr	r2, [pc, #624]	; (8000e40 <HAL_GPIO_Init+0x2c0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d052      	beq.n	8000c7a <HAL_GPIO_Init+0xfa>
 8000bd4:	4a9a      	ldr	r2, [pc, #616]	; (8000e40 <HAL_GPIO_Init+0x2c0>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d869      	bhi.n	8000cae <HAL_GPIO_Init+0x12e>
 8000bda:	4a9a      	ldr	r2, [pc, #616]	; (8000e44 <HAL_GPIO_Init+0x2c4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d04c      	beq.n	8000c7a <HAL_GPIO_Init+0xfa>
 8000be0:	4a98      	ldr	r2, [pc, #608]	; (8000e44 <HAL_GPIO_Init+0x2c4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d863      	bhi.n	8000cae <HAL_GPIO_Init+0x12e>
 8000be6:	4a98      	ldr	r2, [pc, #608]	; (8000e48 <HAL_GPIO_Init+0x2c8>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d046      	beq.n	8000c7a <HAL_GPIO_Init+0xfa>
 8000bec:	4a96      	ldr	r2, [pc, #600]	; (8000e48 <HAL_GPIO_Init+0x2c8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d85d      	bhi.n	8000cae <HAL_GPIO_Init+0x12e>
 8000bf2:	2b12      	cmp	r3, #18
 8000bf4:	d82a      	bhi.n	8000c4c <HAL_GPIO_Init+0xcc>
 8000bf6:	2b12      	cmp	r3, #18
 8000bf8:	d859      	bhi.n	8000cae <HAL_GPIO_Init+0x12e>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <HAL_GPIO_Init+0x80>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c7b 	.word	0x08000c7b
 8000c04:	08000c55 	.word	0x08000c55
 8000c08:	08000c67 	.word	0x08000c67
 8000c0c:	08000ca9 	.word	0x08000ca9
 8000c10:	08000caf 	.word	0x08000caf
 8000c14:	08000caf 	.word	0x08000caf
 8000c18:	08000caf 	.word	0x08000caf
 8000c1c:	08000caf 	.word	0x08000caf
 8000c20:	08000caf 	.word	0x08000caf
 8000c24:	08000caf 	.word	0x08000caf
 8000c28:	08000caf 	.word	0x08000caf
 8000c2c:	08000caf 	.word	0x08000caf
 8000c30:	08000caf 	.word	0x08000caf
 8000c34:	08000caf 	.word	0x08000caf
 8000c38:	08000caf 	.word	0x08000caf
 8000c3c:	08000caf 	.word	0x08000caf
 8000c40:	08000caf 	.word	0x08000caf
 8000c44:	08000c5d 	.word	0x08000c5d
 8000c48:	08000c71 	.word	0x08000c71
 8000c4c:	4a7f      	ldr	r2, [pc, #508]	; (8000e4c <HAL_GPIO_Init+0x2cc>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d013      	beq.n	8000c7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c52:	e02c      	b.n	8000cae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	623b      	str	r3, [r7, #32]
          break;
 8000c5a:	e029      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	3304      	adds	r3, #4
 8000c62:	623b      	str	r3, [r7, #32]
          break;
 8000c64:	e024      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	3308      	adds	r3, #8
 8000c6c:	623b      	str	r3, [r7, #32]
          break;
 8000c6e:	e01f      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	330c      	adds	r3, #12
 8000c76:	623b      	str	r3, [r7, #32]
          break;
 8000c78:	e01a      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d102      	bne.n	8000c88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c82:	2304      	movs	r3, #4
 8000c84:	623b      	str	r3, [r7, #32]
          break;
 8000c86:	e013      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d105      	bne.n	8000c9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c90:	2308      	movs	r3, #8
 8000c92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	611a      	str	r2, [r3, #16]
          break;
 8000c9a:	e009      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	615a      	str	r2, [r3, #20]
          break;
 8000ca6:	e003      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
          break;
 8000cac:	e000      	b.n	8000cb0 <HAL_GPIO_Init+0x130>
          break;
 8000cae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	2bff      	cmp	r3, #255	; 0xff
 8000cb4:	d801      	bhi.n	8000cba <HAL_GPIO_Init+0x13a>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	e001      	b.n	8000cbe <HAL_GPIO_Init+0x13e>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2bff      	cmp	r3, #255	; 0xff
 8000cc4:	d802      	bhi.n	8000ccc <HAL_GPIO_Init+0x14c>
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	e002      	b.n	8000cd2 <HAL_GPIO_Init+0x152>
 8000ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cce:	3b08      	subs	r3, #8
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	210f      	movs	r1, #15
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	6a39      	ldr	r1, [r7, #32]
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cec:	431a      	orrs	r2, r3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 80c1 	beq.w	8000e82 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d00:	4b53      	ldr	r3, [pc, #332]	; (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a52      	ldr	r2, [pc, #328]	; (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b50      	ldr	r3, [pc, #320]	; (8000e50 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d18:	4a4e      	ldr	r2, [pc, #312]	; (8000e54 <HAL_GPIO_Init+0x2d4>)
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	089b      	lsrs	r3, r3, #2
 8000d1e:	3302      	adds	r3, #2
 8000d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	220f      	movs	r2, #15
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a46      	ldr	r2, [pc, #280]	; (8000e58 <HAL_GPIO_Init+0x2d8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d01f      	beq.n	8000d84 <HAL_GPIO_Init+0x204>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a45      	ldr	r2, [pc, #276]	; (8000e5c <HAL_GPIO_Init+0x2dc>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d019      	beq.n	8000d80 <HAL_GPIO_Init+0x200>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a44      	ldr	r2, [pc, #272]	; (8000e60 <HAL_GPIO_Init+0x2e0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d013      	beq.n	8000d7c <HAL_GPIO_Init+0x1fc>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a43      	ldr	r2, [pc, #268]	; (8000e64 <HAL_GPIO_Init+0x2e4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d00d      	beq.n	8000d78 <HAL_GPIO_Init+0x1f8>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a42      	ldr	r2, [pc, #264]	; (8000e68 <HAL_GPIO_Init+0x2e8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d007      	beq.n	8000d74 <HAL_GPIO_Init+0x1f4>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a41      	ldr	r2, [pc, #260]	; (8000e6c <HAL_GPIO_Init+0x2ec>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d101      	bne.n	8000d70 <HAL_GPIO_Init+0x1f0>
 8000d6c:	2305      	movs	r3, #5
 8000d6e:	e00a      	b.n	8000d86 <HAL_GPIO_Init+0x206>
 8000d70:	2306      	movs	r3, #6
 8000d72:	e008      	b.n	8000d86 <HAL_GPIO_Init+0x206>
 8000d74:	2304      	movs	r3, #4
 8000d76:	e006      	b.n	8000d86 <HAL_GPIO_Init+0x206>
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e004      	b.n	8000d86 <HAL_GPIO_Init+0x206>
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	e002      	b.n	8000d86 <HAL_GPIO_Init+0x206>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <HAL_GPIO_Init+0x206>
 8000d84:	2300      	movs	r3, #0
 8000d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d88:	f002 0203 	and.w	r2, r2, #3
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	4093      	lsls	r3, r2
 8000d90:	68fa      	ldr	r2, [r7, #12]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d96:	492f      	ldr	r1, [pc, #188]	; (8000e54 <HAL_GPIO_Init+0x2d4>)
 8000d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d006      	beq.n	8000dbe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000db0:	4b2f      	ldr	r3, [pc, #188]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	492e      	ldr	r1, [pc, #184]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	600b      	str	r3, [r1, #0]
 8000dbc:	e006      	b.n	8000dcc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dbe:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	492a      	ldr	r1, [pc, #168]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000dc8:	4013      	ands	r3, r2
 8000dca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d006      	beq.n	8000de6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dd8:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	4924      	ldr	r1, [pc, #144]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]
 8000de4:	e006      	b.n	8000df4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	4920      	ldr	r1, [pc, #128]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000df0:	4013      	ands	r3, r2
 8000df2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d006      	beq.n	8000e0e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e00:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	491a      	ldr	r1, [pc, #104]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	608b      	str	r3, [r1, #8]
 8000e0c:	e006      	b.n	8000e1c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000e10:	689a      	ldr	r2, [r3, #8]
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	4916      	ldr	r1, [pc, #88]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000e18:	4013      	ands	r3, r2
 8000e1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d025      	beq.n	8000e74 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000e2a:	68da      	ldr	r2, [r3, #12]
 8000e2c:	4910      	ldr	r1, [pc, #64]	; (8000e70 <HAL_GPIO_Init+0x2f0>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	60cb      	str	r3, [r1, #12]
 8000e34:	e025      	b.n	8000e82 <HAL_GPIO_Init+0x302>
 8000e36:	bf00      	nop
 8000e38:	10320000 	.word	0x10320000
 8000e3c:	10310000 	.word	0x10310000
 8000e40:	10220000 	.word	0x10220000
 8000e44:	10210000 	.word	0x10210000
 8000e48:	10120000 	.word	0x10120000
 8000e4c:	10110000 	.word	0x10110000
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010000 	.word	0x40010000
 8000e58:	40010800 	.word	0x40010800
 8000e5c:	40010c00 	.word	0x40010c00
 8000e60:	40011000 	.word	0x40011000
 8000e64:	40011400 	.word	0x40011400
 8000e68:	40011800 	.word	0x40011800
 8000e6c:	40011c00 	.word	0x40011c00
 8000e70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e74:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <HAL_GPIO_Init+0x324>)
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	4909      	ldr	r1, [pc, #36]	; (8000ea4 <HAL_GPIO_Init+0x324>)
 8000e7e:	4013      	ands	r3, r2
 8000e80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	3301      	adds	r3, #1
 8000e86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f47f ae7e 	bne.w	8000b94 <HAL_GPIO_Init+0x14>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	372c      	adds	r7, #44	; 0x2c
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	40010400 	.word	0x40010400

08000ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e26c      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 8087 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ec8:	4b92      	ldr	r3, [pc, #584]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 030c 	and.w	r3, r3, #12
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d00c      	beq.n	8000eee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed4:	4b8f      	ldr	r3, [pc, #572]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d112      	bne.n	8000f06 <HAL_RCC_OscConfig+0x5e>
 8000ee0:	4b8c      	ldr	r3, [pc, #560]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eec:	d10b      	bne.n	8000f06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eee:	4b89      	ldr	r3, [pc, #548]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d06c      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x12c>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d168      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e246      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0e:	d106      	bne.n	8000f1e <HAL_RCC_OscConfig+0x76>
 8000f10:	4b80      	ldr	r3, [pc, #512]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a7f      	ldr	r2, [pc, #508]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	e02e      	b.n	8000f7c <HAL_RCC_OscConfig+0xd4>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10c      	bne.n	8000f40 <HAL_RCC_OscConfig+0x98>
 8000f26:	4b7b      	ldr	r3, [pc, #492]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a7a      	ldr	r2, [pc, #488]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	4b78      	ldr	r3, [pc, #480]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a77      	ldr	r2, [pc, #476]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e01d      	b.n	8000f7c <HAL_RCC_OscConfig+0xd4>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f48:	d10c      	bne.n	8000f64 <HAL_RCC_OscConfig+0xbc>
 8000f4a:	4b72      	ldr	r3, [pc, #456]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a71      	ldr	r2, [pc, #452]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	4b6f      	ldr	r3, [pc, #444]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a6e      	ldr	r2, [pc, #440]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e00b      	b.n	8000f7c <HAL_RCC_OscConfig+0xd4>
 8000f64:	4b6b      	ldr	r3, [pc, #428]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a6a      	ldr	r2, [pc, #424]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b68      	ldr	r3, [pc, #416]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a67      	ldr	r2, [pc, #412]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d013      	beq.n	8000fac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fbdc 	bl	8000740 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f8c:	f7ff fbd8 	bl	8000740 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b64      	cmp	r3, #100	; 0x64
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e1fa      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9e:	4b5d      	ldr	r3, [pc, #372]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f0      	beq.n	8000f8c <HAL_RCC_OscConfig+0xe4>
 8000faa:	e014      	b.n	8000fd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fbc8 	bl	8000740 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fbc4 	bl	8000740 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b64      	cmp	r3, #100	; 0x64
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e1e6      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc6:	4b53      	ldr	r3, [pc, #332]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f0      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x10c>
 8000fd2:	e000      	b.n	8000fd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d063      	beq.n	80010aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fe2:	4b4c      	ldr	r3, [pc, #304]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fee:	4b49      	ldr	r3, [pc, #292]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d11c      	bne.n	8001034 <HAL_RCC_OscConfig+0x18c>
 8000ffa:	4b46      	ldr	r3, [pc, #280]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d116      	bne.n	8001034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001006:	4b43      	ldr	r3, [pc, #268]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <HAL_RCC_OscConfig+0x176>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d001      	beq.n	800101e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e1ba      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101e:	4b3d      	ldr	r3, [pc, #244]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4939      	ldr	r1, [pc, #228]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 800102e:	4313      	orrs	r3, r2
 8001030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001032:	e03a      	b.n	80010aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d020      	beq.n	800107e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <HAL_RCC_OscConfig+0x270>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fb7d 	bl	8000740 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800104a:	f7ff fb79 	bl	8000740 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e19b      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105c:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f0      	beq.n	800104a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001068:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4927      	ldr	r1, [pc, #156]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8001078:	4313      	orrs	r3, r2
 800107a:	600b      	str	r3, [r1, #0]
 800107c:	e015      	b.n	80010aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <HAL_RCC_OscConfig+0x270>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff fb5c 	bl	8000740 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108c:	f7ff fb58 	bl	8000740 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e17a      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f0      	bne.n	800108c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d03a      	beq.n	800112c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d019      	beq.n	80010f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_RCC_OscConfig+0x274>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c4:	f7ff fb3c 	bl	8000740 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010cc:	f7ff fb38 	bl	8000740 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e15a      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f0      	beq.n	80010cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 fad8 	bl	80016a0 <RCC_Delay>
 80010f0:	e01c      	b.n	800112c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_RCC_OscConfig+0x274>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f8:	f7ff fb22 	bl	8000740 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010fe:	e00f      	b.n	8001120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001100:	f7ff fb1e 	bl	8000740 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d908      	bls.n	8001120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e140      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	42420000 	.word	0x42420000
 800111c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001120:	4b9e      	ldr	r3, [pc, #632]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1e9      	bne.n	8001100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80a6 	beq.w	8001286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113e:	4b97      	ldr	r3, [pc, #604]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10d      	bne.n	8001166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b94      	ldr	r3, [pc, #592]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	4a93      	ldr	r2, [pc, #588]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	61d3      	str	r3, [r2, #28]
 8001156:	4b91      	ldr	r3, [pc, #580]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001162:	2301      	movs	r3, #1
 8001164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001166:	4b8e      	ldr	r3, [pc, #568]	; (80013a0 <HAL_RCC_OscConfig+0x4f8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116e:	2b00      	cmp	r3, #0
 8001170:	d118      	bne.n	80011a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001172:	4b8b      	ldr	r3, [pc, #556]	; (80013a0 <HAL_RCC_OscConfig+0x4f8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a8a      	ldr	r2, [pc, #552]	; (80013a0 <HAL_RCC_OscConfig+0x4f8>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800117e:	f7ff fadf 	bl	8000740 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001186:	f7ff fadb 	bl	8000740 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b64      	cmp	r3, #100	; 0x64
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e0fd      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	4b81      	ldr	r3, [pc, #516]	; (80013a0 <HAL_RCC_OscConfig+0x4f8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d106      	bne.n	80011ba <HAL_RCC_OscConfig+0x312>
 80011ac:	4b7b      	ldr	r3, [pc, #492]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4a7a      	ldr	r2, [pc, #488]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6213      	str	r3, [r2, #32]
 80011b8:	e02d      	b.n	8001216 <HAL_RCC_OscConfig+0x36e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10c      	bne.n	80011dc <HAL_RCC_OscConfig+0x334>
 80011c2:	4b76      	ldr	r3, [pc, #472]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	4a75      	ldr	r2, [pc, #468]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	6213      	str	r3, [r2, #32]
 80011ce:	4b73      	ldr	r3, [pc, #460]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4a72      	ldr	r2, [pc, #456]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011d4:	f023 0304 	bic.w	r3, r3, #4
 80011d8:	6213      	str	r3, [r2, #32]
 80011da:	e01c      	b.n	8001216 <HAL_RCC_OscConfig+0x36e>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	d10c      	bne.n	80011fe <HAL_RCC_OscConfig+0x356>
 80011e4:	4b6d      	ldr	r3, [pc, #436]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4a6c      	ldr	r2, [pc, #432]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6213      	str	r3, [r2, #32]
 80011f0:	4b6a      	ldr	r3, [pc, #424]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4a69      	ldr	r2, [pc, #420]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6213      	str	r3, [r2, #32]
 80011fc:	e00b      	b.n	8001216 <HAL_RCC_OscConfig+0x36e>
 80011fe:	4b67      	ldr	r3, [pc, #412]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4a66      	ldr	r2, [pc, #408]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6213      	str	r3, [r2, #32]
 800120a:	4b64      	ldr	r3, [pc, #400]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	4a63      	ldr	r2, [pc, #396]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001210:	f023 0304 	bic.w	r3, r3, #4
 8001214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d015      	beq.n	800124a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fa8f 	bl	8000740 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff fa8b 	bl	8000740 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f241 3288 	movw	r2, #5000	; 0x1388
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e0ab      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123c:	4b57      	ldr	r3, [pc, #348]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0ee      	beq.n	8001226 <HAL_RCC_OscConfig+0x37e>
 8001248:	e014      	b.n	8001274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124a:	f7ff fa79 	bl	8000740 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f7ff fa75 	bl	8000740 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001260:	4293      	cmp	r3, r2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e095      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001268:	4b4c      	ldr	r3, [pc, #304]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1ee      	bne.n	8001252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d105      	bne.n	8001286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800127a:	4b48      	ldr	r3, [pc, #288]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a47      	ldr	r2, [pc, #284]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8081 	beq.w	8001392 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001290:	4b42      	ldr	r3, [pc, #264]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 030c 	and.w	r3, r3, #12
 8001298:	2b08      	cmp	r3, #8
 800129a:	d061      	beq.n	8001360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d146      	bne.n	8001332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a4:	4b3f      	ldr	r3, [pc, #252]	; (80013a4 <HAL_RCC_OscConfig+0x4fc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012aa:	f7ff fa49 	bl	8000740 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b2:	f7ff fa45 	bl	8000740 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e067      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c4:	4b35      	ldr	r3, [pc, #212]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f0      	bne.n	80012b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d8:	d108      	bne.n	80012ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	492d      	ldr	r1, [pc, #180]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ec:	4b2b      	ldr	r3, [pc, #172]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a19      	ldr	r1, [r3, #32]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	430b      	orrs	r3, r1
 80012fe:	4927      	ldr	r1, [pc, #156]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001304:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <HAL_RCC_OscConfig+0x4fc>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fa19 	bl	8000740 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001312:	f7ff fa15 	bl	8000740 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e037      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x46a>
 8001330:	e02f      	b.n	8001392 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_RCC_OscConfig+0x4fc>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fa02 	bl	8000740 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001340:	f7ff f9fe 	bl	8000740 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e020      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x498>
 800135e:	e018      	b.n	8001392 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e013      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	429a      	cmp	r2, r3
 800137e:	d106      	bne.n	800138e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800138a:	429a      	cmp	r2, r3
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	40007000 	.word	0x40007000
 80013a4:	42420060 	.word	0x42420060

080013a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0d0      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013bc:	4b6a      	ldr	r3, [pc, #424]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d910      	bls.n	80013ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	4b67      	ldr	r3, [pc, #412]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 0207 	bic.w	r2, r3, #7
 80013d2:	4965      	ldr	r1, [pc, #404]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013da:	4b63      	ldr	r3, [pc, #396]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0b8      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001404:	4b59      	ldr	r3, [pc, #356]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a58      	ldr	r2, [pc, #352]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800140e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800141c:	4b53      	ldr	r3, [pc, #332]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a52      	ldr	r2, [pc, #328]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001428:	4b50      	ldr	r3, [pc, #320]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	494d      	ldr	r1, [pc, #308]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d040      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d115      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e07f      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e073      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001476:	4b3d      	ldr	r3, [pc, #244]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e06b      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001486:	4b39      	ldr	r3, [pc, #228]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f023 0203 	bic.w	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4936      	ldr	r1, [pc, #216]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001498:	f7ff f952 	bl	8000740 <HAL_GetTick>
 800149c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a0:	f7ff f94e 	bl	8000740 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e053      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b6:	4b2d      	ldr	r3, [pc, #180]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 020c 	and.w	r2, r3, #12
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d1eb      	bne.n	80014a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d210      	bcs.n	80014f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 0207 	bic.w	r2, r3, #7
 80014de:	4922      	ldr	r1, [pc, #136]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e032      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4916      	ldr	r1, [pc, #88]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	490e      	ldr	r1, [pc, #56]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001536:	f000 f821 	bl	800157c <HAL_RCC_GetSysClockFreq>
 800153a:	4602      	mov	r2, r0
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	490a      	ldr	r1, [pc, #40]	; (8001570 <HAL_RCC_ClockConfig+0x1c8>)
 8001548:	5ccb      	ldrb	r3, [r1, r3]
 800154a:	fa22 f303 	lsr.w	r3, r2, r3
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <HAL_RCC_ClockConfig+0x1cc>)
 8001550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_ClockConfig+0x1d0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f8b0 	bl	80006bc <HAL_InitTick>

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40022000 	.word	0x40022000
 800156c:	40021000 	.word	0x40021000
 8001570:	08002c60 	.word	0x08002c60
 8001574:	20000000 	.word	0x20000000
 8001578:	20000004 	.word	0x20000004

0800157c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800157c:	b490      	push	{r4, r7}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001584:	1d3c      	adds	r4, r7, #4
 8001586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800158c:	f240 2301 	movw	r3, #513	; 0x201
 8001590:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d002      	beq.n	80015bc <HAL_RCC_GetSysClockFreq+0x40>
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d003      	beq.n	80015c2 <HAL_RCC_GetSysClockFreq+0x46>
 80015ba:	e02d      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015be:	623b      	str	r3, [r7, #32]
      break;
 80015c0:	e02d      	b.n	800161e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	0c9b      	lsrs	r3, r3, #18
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015ce:	4413      	add	r3, r2
 80015d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015e0:	4b13      	ldr	r3, [pc, #76]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	0c5b      	lsrs	r3, r3, #17
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015ee:	4413      	add	r3, r2
 80015f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015fa:	fb02 f203 	mul.w	r2, r2, r3
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	fbb2 f3f3 	udiv	r3, r2, r3
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
 8001606:	e004      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	4a0b      	ldr	r2, [pc, #44]	; (8001638 <HAL_RCC_GetSysClockFreq+0xbc>)
 800160c:	fb02 f303 	mul.w	r3, r2, r3
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	623b      	str	r3, [r7, #32]
      break;
 8001616:	e002      	b.n	800161e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 800161a:	623b      	str	r3, [r7, #32]
      break;
 800161c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800161e:	6a3b      	ldr	r3, [r7, #32]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bc90      	pop	{r4, r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	08002c50 	.word	0x08002c50
 8001630:	40021000 	.word	0x40021000
 8001634:	007a1200 	.word	0x007a1200
 8001638:	003d0900 	.word	0x003d0900

0800163c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001640:	4b02      	ldr	r3, [pc, #8]	; (800164c <HAL_RCC_GetHCLKFreq+0x10>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	20000000 	.word	0x20000000

08001650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001654:	f7ff fff2 	bl	800163c <HAL_RCC_GetHCLKFreq>
 8001658:	4602      	mov	r2, r0
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	4903      	ldr	r1, [pc, #12]	; (8001674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001666:	5ccb      	ldrb	r3, [r1, r3]
 8001668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800166c:	4618      	mov	r0, r3
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40021000 	.word	0x40021000
 8001674:	08002c70 	.word	0x08002c70

08001678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800167c:	f7ff ffde 	bl	800163c <HAL_RCC_GetHCLKFreq>
 8001680:	4602      	mov	r2, r0
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	0adb      	lsrs	r3, r3, #11
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	4903      	ldr	r1, [pc, #12]	; (800169c <HAL_RCC_GetPCLK2Freq+0x24>)
 800168e:	5ccb      	ldrb	r3, [r1, r3]
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	08002c70 	.word	0x08002c70

080016a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <RCC_Delay+0x34>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <RCC_Delay+0x38>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	0a5b      	lsrs	r3, r3, #9
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	fb02 f303 	mul.w	r3, r2, r3
 80016ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016bc:	bf00      	nop
  }
  while (Delay --);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	1e5a      	subs	r2, r3, #1
 80016c2:	60fa      	str	r2, [r7, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f9      	bne.n	80016bc <RCC_Delay+0x1c>
}
 80016c8:	bf00      	nop
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000000 	.word	0x20000000
 80016d8:	10624dd3 	.word	0x10624dd3

080016dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e03f      	b.n	800176e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d106      	bne.n	8001708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7fe ff32 	bl	800056c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2224      	movs	r2, #36	; 0x24
 800170c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800171e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 fa5d 	bl	8001be0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2220      	movs	r2, #32
 8001760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2220      	movs	r2, #32
 8001768:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001798:	2300      	movs	r3, #0
 800179a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10d      	bne.n	80017ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f003 0320 	and.w	r3, r3, #32
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_UART_IRQHandler+0x52>
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	f003 0320 	and.w	r3, r3, #32
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f98b 	bl	8001ade <UART_Receive_IT>
      return;
 80017c8:	e0d0      	b.n	800196c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80b0 	beq.w	8001932 <HAL_UART_IRQHandler+0x1ba>
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <HAL_UART_IRQHandler+0x70>
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80a5 	beq.w	8001932 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00a      	beq.n	8001808 <HAL_UART_IRQHandler+0x90>
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d005      	beq.n	8001808 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00a      	beq.n	8001828 <HAL_UART_IRQHandler+0xb0>
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001820:	f043 0202 	orr.w	r2, r3, #2
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00a      	beq.n	8001848 <HAL_UART_IRQHandler+0xd0>
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001840:	f043 0204 	orr.w	r2, r3, #4
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00f      	beq.n	8001872 <HAL_UART_IRQHandler+0xfa>
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	f003 0320 	and.w	r3, r3, #32
 8001858:	2b00      	cmp	r3, #0
 800185a:	d104      	bne.n	8001866 <HAL_UART_IRQHandler+0xee>
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186a:	f043 0208 	orr.w	r2, r3, #8
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001876:	2b00      	cmp	r3, #0
 8001878:	d077      	beq.n	800196a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	2b00      	cmp	r3, #0
 8001882:	d007      	beq.n	8001894 <HAL_UART_IRQHandler+0x11c>
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	f003 0320 	and.w	r3, r3, #32
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f925 	bl	8001ade <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	bf14      	ite	ne
 80018a2:	2301      	movne	r3, #1
 80018a4:	2300      	moveq	r3, #0
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <HAL_UART_IRQHandler+0x144>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d031      	beq.n	8001920 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f876 	bl	80019ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d023      	beq.n	8001918 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018de:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d013      	beq.n	8001910 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ec:	4a21      	ldr	r2, [pc, #132]	; (8001974 <HAL_UART_IRQHandler+0x1fc>)
 80018ee:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff f83b 	bl	8000970 <HAL_DMA_Abort_IT>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d016      	beq.n	800192e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800190a:	4610      	mov	r0, r2
 800190c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800190e:	e00e      	b.n	800192e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f843 	bl	800199c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001916:	e00a      	b.n	800192e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f83f 	bl	800199c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800191e:	e006      	b.n	800192e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f83b 	bl	800199c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800192c:	e01d      	b.n	800196a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800192e:	bf00      	nop
    return;
 8001930:	e01b      	b.n	800196a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_UART_IRQHandler+0x1d6>
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f862 	bl	8001a10 <UART_Transmit_IT>
    return;
 800194c:	e00e      	b.n	800196c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <HAL_UART_IRQHandler+0x1f4>
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f8a3 	bl	8001aae <UART_EndTransmit_IT>
    return;
 8001968:	e000      	b.n	800196c <HAL_UART_IRQHandler+0x1f4>
    return;
 800196a:	bf00      	nop
  }
}
 800196c:	3720      	adds	r7, #32
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	080019e9 	.word	0x080019e9

08001978 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80019c4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2220      	movs	r2, #32
 80019da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2200      	movs	r2, #0
 80019fa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f7ff ffca 	bl	800199c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	2b21      	cmp	r3, #33	; 0x21
 8001a22:	d13e      	bne.n	8001aa2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a2c:	d114      	bne.n	8001a58 <UART_Transmit_IT+0x48>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d110      	bne.n	8001a58 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	461a      	mov	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	1c9a      	adds	r2, r3, #2
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	621a      	str	r2, [r3, #32]
 8001a56:	e008      	b.n	8001a6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	1c59      	adds	r1, r3, #1
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6211      	str	r1, [r2, #32]
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	4619      	mov	r1, r3
 8001a78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10f      	bne.n	8001a9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	e000      	b.n	8001aa4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001aa2:	2302      	movs	r3, #2
  }
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr

08001aae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ac4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2220      	movs	r2, #32
 8001aca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ff52 	bl	8001978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b22      	cmp	r3, #34	; 0x22
 8001af0:	d170      	bne.n	8001bd4 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001afa:	d117      	bne.n	8001b2c <UART_Receive_IT+0x4e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d113      	bne.n	8001b2c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b24:	1c9a      	adds	r2, r3, #2
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28
 8001b2a:	e026      	b.n	8001b7a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b3e:	d007      	beq.n	8001b50 <UART_Receive_IT+0x72>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10a      	bne.n	8001b5e <UART_Receive_IT+0x80>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d106      	bne.n	8001b5e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	e008      	b.n	8001b70 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	4619      	mov	r1, r3
 8001b88:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d120      	bne.n	8001bd0 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0220 	bic.w	r2, r2, #32
 8001b9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0201 	bic.w	r2, r2, #1
 8001bbc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fedf 	bl	800198a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e002      	b.n	8001bd6 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e000      	b.n	8001bd6 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001bd4:	2302      	movs	r3, #2
  }
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001c1a:	f023 030c 	bic.w	r3, r3, #12
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	68b9      	ldr	r1, [r7, #8]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a2c      	ldr	r2, [pc, #176]	; (8001cf4 <UART_SetConfig+0x114>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d103      	bne.n	8001c50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001c48:	f7ff fd16 	bl	8001678 <HAL_RCC_GetPCLK2Freq>
 8001c4c:	60f8      	str	r0, [r7, #12]
 8001c4e:	e002      	b.n	8001c56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001c50:	f7ff fcfe 	bl	8001650 <HAL_RCC_GetPCLK1Freq>
 8001c54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	009a      	lsls	r2, r3, #2
 8001c60:	441a      	add	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	4a22      	ldr	r2, [pc, #136]	; (8001cf8 <UART_SetConfig+0x118>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	0119      	lsls	r1, r3, #4
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009a      	lsls	r2, r3, #2
 8001c80:	441a      	add	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <UART_SetConfig+0x118>)
 8001c8e:	fba3 0302 	umull	r0, r3, r3, r2
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	2064      	movs	r0, #100	; 0x64
 8001c96:	fb00 f303 	mul.w	r3, r0, r3
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	011b      	lsls	r3, r3, #4
 8001c9e:	3332      	adds	r3, #50	; 0x32
 8001ca0:	4a15      	ldr	r2, [pc, #84]	; (8001cf8 <UART_SetConfig+0x118>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	095b      	lsrs	r3, r3, #5
 8001ca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cac:	4419      	add	r1, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009a      	lsls	r2, r3, #2
 8001cb8:	441a      	add	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <UART_SetConfig+0x118>)
 8001cc6:	fba3 0302 	umull	r0, r3, r3, r2
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2064      	movs	r0, #100	; 0x64
 8001cce:	fb00 f303 	mul.w	r3, r0, r3
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	3332      	adds	r3, #50	; 0x32
 8001cd8:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <UART_SetConfig+0x118>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	f003 020f 	and.w	r2, r3, #15
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	440a      	add	r2, r1
 8001cea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40013800 	.word	0x40013800
 8001cf8:	51eb851f 	.word	0x51eb851f

08001cfc <__errno>:
 8001cfc:	4b01      	ldr	r3, [pc, #4]	; (8001d04 <__errno+0x8>)
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	2000000c 	.word	0x2000000c

08001d08 <__libc_init_array>:
 8001d08:	b570      	push	{r4, r5, r6, lr}
 8001d0a:	2600      	movs	r6, #0
 8001d0c:	4d0c      	ldr	r5, [pc, #48]	; (8001d40 <__libc_init_array+0x38>)
 8001d0e:	4c0d      	ldr	r4, [pc, #52]	; (8001d44 <__libc_init_array+0x3c>)
 8001d10:	1b64      	subs	r4, r4, r5
 8001d12:	10a4      	asrs	r4, r4, #2
 8001d14:	42a6      	cmp	r6, r4
 8001d16:	d109      	bne.n	8001d2c <__libc_init_array+0x24>
 8001d18:	f000 ff82 	bl	8002c20 <_init>
 8001d1c:	2600      	movs	r6, #0
 8001d1e:	4d0a      	ldr	r5, [pc, #40]	; (8001d48 <__libc_init_array+0x40>)
 8001d20:	4c0a      	ldr	r4, [pc, #40]	; (8001d4c <__libc_init_array+0x44>)
 8001d22:	1b64      	subs	r4, r4, r5
 8001d24:	10a4      	asrs	r4, r4, #2
 8001d26:	42a6      	cmp	r6, r4
 8001d28:	d105      	bne.n	8001d36 <__libc_init_array+0x2e>
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}
 8001d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d30:	4798      	blx	r3
 8001d32:	3601      	adds	r6, #1
 8001d34:	e7ee      	b.n	8001d14 <__libc_init_array+0xc>
 8001d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d3a:	4798      	blx	r3
 8001d3c:	3601      	adds	r6, #1
 8001d3e:	e7f2      	b.n	8001d26 <__libc_init_array+0x1e>
 8001d40:	08002d10 	.word	0x08002d10
 8001d44:	08002d10 	.word	0x08002d10
 8001d48:	08002d10 	.word	0x08002d10
 8001d4c:	08002d14 	.word	0x08002d14

08001d50 <memset>:
 8001d50:	4603      	mov	r3, r0
 8001d52:	4402      	add	r2, r0
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d100      	bne.n	8001d5a <memset+0xa>
 8001d58:	4770      	bx	lr
 8001d5a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d5e:	e7f9      	b.n	8001d54 <memset+0x4>

08001d60 <iprintf>:
 8001d60:	b40f      	push	{r0, r1, r2, r3}
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <iprintf+0x2c>)
 8001d64:	b513      	push	{r0, r1, r4, lr}
 8001d66:	681c      	ldr	r4, [r3, #0]
 8001d68:	b124      	cbz	r4, 8001d74 <iprintf+0x14>
 8001d6a:	69a3      	ldr	r3, [r4, #24]
 8001d6c:	b913      	cbnz	r3, 8001d74 <iprintf+0x14>
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f000 f866 	bl	8001e40 <__sinit>
 8001d74:	ab05      	add	r3, sp, #20
 8001d76:	4620      	mov	r0, r4
 8001d78:	9a04      	ldr	r2, [sp, #16]
 8001d7a:	68a1      	ldr	r1, [r4, #8]
 8001d7c:	9301      	str	r3, [sp, #4]
 8001d7e:	f000 f981 	bl	8002084 <_vfiprintf_r>
 8001d82:	b002      	add	sp, #8
 8001d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d88:	b004      	add	sp, #16
 8001d8a:	4770      	bx	lr
 8001d8c:	2000000c 	.word	0x2000000c

08001d90 <std>:
 8001d90:	2300      	movs	r3, #0
 8001d92:	b510      	push	{r4, lr}
 8001d94:	4604      	mov	r4, r0
 8001d96:	e9c0 3300 	strd	r3, r3, [r0]
 8001d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d9e:	6083      	str	r3, [r0, #8]
 8001da0:	8181      	strh	r1, [r0, #12]
 8001da2:	6643      	str	r3, [r0, #100]	; 0x64
 8001da4:	81c2      	strh	r2, [r0, #14]
 8001da6:	6183      	str	r3, [r0, #24]
 8001da8:	4619      	mov	r1, r3
 8001daa:	2208      	movs	r2, #8
 8001dac:	305c      	adds	r0, #92	; 0x5c
 8001dae:	f7ff ffcf 	bl	8001d50 <memset>
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <std+0x38>)
 8001db4:	6224      	str	r4, [r4, #32]
 8001db6:	6263      	str	r3, [r4, #36]	; 0x24
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <std+0x3c>)
 8001dba:	62a3      	str	r3, [r4, #40]	; 0x28
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <std+0x40>)
 8001dbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <std+0x44>)
 8001dc2:	6323      	str	r3, [r4, #48]	; 0x30
 8001dc4:	bd10      	pop	{r4, pc}
 8001dc6:	bf00      	nop
 8001dc8:	08002631 	.word	0x08002631
 8001dcc:	08002653 	.word	0x08002653
 8001dd0:	0800268b 	.word	0x0800268b
 8001dd4:	080026af 	.word	0x080026af

08001dd8 <_cleanup_r>:
 8001dd8:	4901      	ldr	r1, [pc, #4]	; (8001de0 <_cleanup_r+0x8>)
 8001dda:	f000 b8af 	b.w	8001f3c <_fwalk_reent>
 8001dde:	bf00      	nop
 8001de0:	08002989 	.word	0x08002989

08001de4 <__sfmoreglue>:
 8001de4:	b570      	push	{r4, r5, r6, lr}
 8001de6:	2568      	movs	r5, #104	; 0x68
 8001de8:	1e4a      	subs	r2, r1, #1
 8001dea:	4355      	muls	r5, r2
 8001dec:	460e      	mov	r6, r1
 8001dee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001df2:	f000 f8c5 	bl	8001f80 <_malloc_r>
 8001df6:	4604      	mov	r4, r0
 8001df8:	b140      	cbz	r0, 8001e0c <__sfmoreglue+0x28>
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	e9c0 1600 	strd	r1, r6, [r0]
 8001e00:	300c      	adds	r0, #12
 8001e02:	60a0      	str	r0, [r4, #8]
 8001e04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e08:	f7ff ffa2 	bl	8001d50 <memset>
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	bd70      	pop	{r4, r5, r6, pc}

08001e10 <__sfp_lock_acquire>:
 8001e10:	4801      	ldr	r0, [pc, #4]	; (8001e18 <__sfp_lock_acquire+0x8>)
 8001e12:	f000 b8b3 	b.w	8001f7c <__retarget_lock_acquire_recursive>
 8001e16:	bf00      	nop
 8001e18:	2000014c 	.word	0x2000014c

08001e1c <__sfp_lock_release>:
 8001e1c:	4801      	ldr	r0, [pc, #4]	; (8001e24 <__sfp_lock_release+0x8>)
 8001e1e:	f000 b8ae 	b.w	8001f7e <__retarget_lock_release_recursive>
 8001e22:	bf00      	nop
 8001e24:	2000014c 	.word	0x2000014c

08001e28 <__sinit_lock_acquire>:
 8001e28:	4801      	ldr	r0, [pc, #4]	; (8001e30 <__sinit_lock_acquire+0x8>)
 8001e2a:	f000 b8a7 	b.w	8001f7c <__retarget_lock_acquire_recursive>
 8001e2e:	bf00      	nop
 8001e30:	20000147 	.word	0x20000147

08001e34 <__sinit_lock_release>:
 8001e34:	4801      	ldr	r0, [pc, #4]	; (8001e3c <__sinit_lock_release+0x8>)
 8001e36:	f000 b8a2 	b.w	8001f7e <__retarget_lock_release_recursive>
 8001e3a:	bf00      	nop
 8001e3c:	20000147 	.word	0x20000147

08001e40 <__sinit>:
 8001e40:	b510      	push	{r4, lr}
 8001e42:	4604      	mov	r4, r0
 8001e44:	f7ff fff0 	bl	8001e28 <__sinit_lock_acquire>
 8001e48:	69a3      	ldr	r3, [r4, #24]
 8001e4a:	b11b      	cbz	r3, 8001e54 <__sinit+0x14>
 8001e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e50:	f7ff bff0 	b.w	8001e34 <__sinit_lock_release>
 8001e54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001e58:	6523      	str	r3, [r4, #80]	; 0x50
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <__sinit+0x68>)
 8001e5c:	4a13      	ldr	r2, [pc, #76]	; (8001eac <__sinit+0x6c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	62a2      	str	r2, [r4, #40]	; 0x28
 8001e62:	42a3      	cmp	r3, r4
 8001e64:	bf08      	it	eq
 8001e66:	2301      	moveq	r3, #1
 8001e68:	4620      	mov	r0, r4
 8001e6a:	bf08      	it	eq
 8001e6c:	61a3      	streq	r3, [r4, #24]
 8001e6e:	f000 f81f 	bl	8001eb0 <__sfp>
 8001e72:	6060      	str	r0, [r4, #4]
 8001e74:	4620      	mov	r0, r4
 8001e76:	f000 f81b 	bl	8001eb0 <__sfp>
 8001e7a:	60a0      	str	r0, [r4, #8]
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	f000 f817 	bl	8001eb0 <__sfp>
 8001e82:	2200      	movs	r2, #0
 8001e84:	2104      	movs	r1, #4
 8001e86:	60e0      	str	r0, [r4, #12]
 8001e88:	6860      	ldr	r0, [r4, #4]
 8001e8a:	f7ff ff81 	bl	8001d90 <std>
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2109      	movs	r1, #9
 8001e92:	68a0      	ldr	r0, [r4, #8]
 8001e94:	f7ff ff7c 	bl	8001d90 <std>
 8001e98:	2202      	movs	r2, #2
 8001e9a:	2112      	movs	r1, #18
 8001e9c:	68e0      	ldr	r0, [r4, #12]
 8001e9e:	f7ff ff77 	bl	8001d90 <std>
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	61a3      	str	r3, [r4, #24]
 8001ea6:	e7d1      	b.n	8001e4c <__sinit+0xc>
 8001ea8:	08002c78 	.word	0x08002c78
 8001eac:	08001dd9 	.word	0x08001dd9

08001eb0 <__sfp>:
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	4607      	mov	r7, r0
 8001eb4:	f7ff ffac 	bl	8001e10 <__sfp_lock_acquire>
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <__sfp+0x84>)
 8001eba:	681e      	ldr	r6, [r3, #0]
 8001ebc:	69b3      	ldr	r3, [r6, #24]
 8001ebe:	b913      	cbnz	r3, 8001ec6 <__sfp+0x16>
 8001ec0:	4630      	mov	r0, r6
 8001ec2:	f7ff ffbd 	bl	8001e40 <__sinit>
 8001ec6:	3648      	adds	r6, #72	; 0x48
 8001ec8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	d503      	bpl.n	8001ed8 <__sfp+0x28>
 8001ed0:	6833      	ldr	r3, [r6, #0]
 8001ed2:	b30b      	cbz	r3, 8001f18 <__sfp+0x68>
 8001ed4:	6836      	ldr	r6, [r6, #0]
 8001ed6:	e7f7      	b.n	8001ec8 <__sfp+0x18>
 8001ed8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001edc:	b9d5      	cbnz	r5, 8001f14 <__sfp+0x64>
 8001ede:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <__sfp+0x88>)
 8001ee0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001ee4:	60e3      	str	r3, [r4, #12]
 8001ee6:	6665      	str	r5, [r4, #100]	; 0x64
 8001ee8:	f000 f847 	bl	8001f7a <__retarget_lock_init_recursive>
 8001eec:	f7ff ff96 	bl	8001e1c <__sfp_lock_release>
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	4629      	mov	r1, r5
 8001ef4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001ef8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001efc:	6025      	str	r5, [r4, #0]
 8001efe:	61a5      	str	r5, [r4, #24]
 8001f00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f04:	f7ff ff24 	bl	8001d50 <memset>
 8001f08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f10:	4620      	mov	r0, r4
 8001f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f14:	3468      	adds	r4, #104	; 0x68
 8001f16:	e7d9      	b.n	8001ecc <__sfp+0x1c>
 8001f18:	2104      	movs	r1, #4
 8001f1a:	4638      	mov	r0, r7
 8001f1c:	f7ff ff62 	bl	8001de4 <__sfmoreglue>
 8001f20:	4604      	mov	r4, r0
 8001f22:	6030      	str	r0, [r6, #0]
 8001f24:	2800      	cmp	r0, #0
 8001f26:	d1d5      	bne.n	8001ed4 <__sfp+0x24>
 8001f28:	f7ff ff78 	bl	8001e1c <__sfp_lock_release>
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	e7ee      	b.n	8001f10 <__sfp+0x60>
 8001f32:	bf00      	nop
 8001f34:	08002c78 	.word	0x08002c78
 8001f38:	ffff0001 	.word	0xffff0001

08001f3c <_fwalk_reent>:
 8001f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f40:	4606      	mov	r6, r0
 8001f42:	4688      	mov	r8, r1
 8001f44:	2700      	movs	r7, #0
 8001f46:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001f4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f4e:	f1b9 0901 	subs.w	r9, r9, #1
 8001f52:	d505      	bpl.n	8001f60 <_fwalk_reent+0x24>
 8001f54:	6824      	ldr	r4, [r4, #0]
 8001f56:	2c00      	cmp	r4, #0
 8001f58:	d1f7      	bne.n	8001f4a <_fwalk_reent+0xe>
 8001f5a:	4638      	mov	r0, r7
 8001f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f60:	89ab      	ldrh	r3, [r5, #12]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d907      	bls.n	8001f76 <_fwalk_reent+0x3a>
 8001f66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	d003      	beq.n	8001f76 <_fwalk_reent+0x3a>
 8001f6e:	4629      	mov	r1, r5
 8001f70:	4630      	mov	r0, r6
 8001f72:	47c0      	blx	r8
 8001f74:	4307      	orrs	r7, r0
 8001f76:	3568      	adds	r5, #104	; 0x68
 8001f78:	e7e9      	b.n	8001f4e <_fwalk_reent+0x12>

08001f7a <__retarget_lock_init_recursive>:
 8001f7a:	4770      	bx	lr

08001f7c <__retarget_lock_acquire_recursive>:
 8001f7c:	4770      	bx	lr

08001f7e <__retarget_lock_release_recursive>:
 8001f7e:	4770      	bx	lr

08001f80 <_malloc_r>:
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	1ccd      	adds	r5, r1, #3
 8001f84:	f025 0503 	bic.w	r5, r5, #3
 8001f88:	3508      	adds	r5, #8
 8001f8a:	2d0c      	cmp	r5, #12
 8001f8c:	bf38      	it	cc
 8001f8e:	250c      	movcc	r5, #12
 8001f90:	2d00      	cmp	r5, #0
 8001f92:	4606      	mov	r6, r0
 8001f94:	db01      	blt.n	8001f9a <_malloc_r+0x1a>
 8001f96:	42a9      	cmp	r1, r5
 8001f98:	d903      	bls.n	8001fa2 <_malloc_r+0x22>
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	6033      	str	r3, [r6, #0]
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa2:	f000 fdb1 	bl	8002b08 <__malloc_lock>
 8001fa6:	4921      	ldr	r1, [pc, #132]	; (800202c <_malloc_r+0xac>)
 8001fa8:	680a      	ldr	r2, [r1, #0]
 8001faa:	4614      	mov	r4, r2
 8001fac:	b99c      	cbnz	r4, 8001fd6 <_malloc_r+0x56>
 8001fae:	4f20      	ldr	r7, [pc, #128]	; (8002030 <_malloc_r+0xb0>)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	b923      	cbnz	r3, 8001fbe <_malloc_r+0x3e>
 8001fb4:	4621      	mov	r1, r4
 8001fb6:	4630      	mov	r0, r6
 8001fb8:	f000 fb2a 	bl	8002610 <_sbrk_r>
 8001fbc:	6038      	str	r0, [r7, #0]
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	4630      	mov	r0, r6
 8001fc2:	f000 fb25 	bl	8002610 <_sbrk_r>
 8001fc6:	1c43      	adds	r3, r0, #1
 8001fc8:	d123      	bne.n	8002012 <_malloc_r+0x92>
 8001fca:	230c      	movs	r3, #12
 8001fcc:	4630      	mov	r0, r6
 8001fce:	6033      	str	r3, [r6, #0]
 8001fd0:	f000 fda0 	bl	8002b14 <__malloc_unlock>
 8001fd4:	e7e3      	b.n	8001f9e <_malloc_r+0x1e>
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	1b5b      	subs	r3, r3, r5
 8001fda:	d417      	bmi.n	800200c <_malloc_r+0x8c>
 8001fdc:	2b0b      	cmp	r3, #11
 8001fde:	d903      	bls.n	8001fe8 <_malloc_r+0x68>
 8001fe0:	6023      	str	r3, [r4, #0]
 8001fe2:	441c      	add	r4, r3
 8001fe4:	6025      	str	r5, [r4, #0]
 8001fe6:	e004      	b.n	8001ff2 <_malloc_r+0x72>
 8001fe8:	6863      	ldr	r3, [r4, #4]
 8001fea:	42a2      	cmp	r2, r4
 8001fec:	bf0c      	ite	eq
 8001fee:	600b      	streq	r3, [r1, #0]
 8001ff0:	6053      	strne	r3, [r2, #4]
 8001ff2:	4630      	mov	r0, r6
 8001ff4:	f000 fd8e 	bl	8002b14 <__malloc_unlock>
 8001ff8:	f104 000b 	add.w	r0, r4, #11
 8001ffc:	1d23      	adds	r3, r4, #4
 8001ffe:	f020 0007 	bic.w	r0, r0, #7
 8002002:	1ac2      	subs	r2, r0, r3
 8002004:	d0cc      	beq.n	8001fa0 <_malloc_r+0x20>
 8002006:	1a1b      	subs	r3, r3, r0
 8002008:	50a3      	str	r3, [r4, r2]
 800200a:	e7c9      	b.n	8001fa0 <_malloc_r+0x20>
 800200c:	4622      	mov	r2, r4
 800200e:	6864      	ldr	r4, [r4, #4]
 8002010:	e7cc      	b.n	8001fac <_malloc_r+0x2c>
 8002012:	1cc4      	adds	r4, r0, #3
 8002014:	f024 0403 	bic.w	r4, r4, #3
 8002018:	42a0      	cmp	r0, r4
 800201a:	d0e3      	beq.n	8001fe4 <_malloc_r+0x64>
 800201c:	1a21      	subs	r1, r4, r0
 800201e:	4630      	mov	r0, r6
 8002020:	f000 faf6 	bl	8002610 <_sbrk_r>
 8002024:	3001      	adds	r0, #1
 8002026:	d1dd      	bne.n	8001fe4 <_malloc_r+0x64>
 8002028:	e7cf      	b.n	8001fca <_malloc_r+0x4a>
 800202a:	bf00      	nop
 800202c:	20000090 	.word	0x20000090
 8002030:	20000094 	.word	0x20000094

08002034 <__sfputc_r>:
 8002034:	6893      	ldr	r3, [r2, #8]
 8002036:	b410      	push	{r4}
 8002038:	3b01      	subs	r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	6093      	str	r3, [r2, #8]
 800203e:	da07      	bge.n	8002050 <__sfputc_r+0x1c>
 8002040:	6994      	ldr	r4, [r2, #24]
 8002042:	42a3      	cmp	r3, r4
 8002044:	db01      	blt.n	800204a <__sfputc_r+0x16>
 8002046:	290a      	cmp	r1, #10
 8002048:	d102      	bne.n	8002050 <__sfputc_r+0x1c>
 800204a:	bc10      	pop	{r4}
 800204c:	f000 bb34 	b.w	80026b8 <__swbuf_r>
 8002050:	6813      	ldr	r3, [r2, #0]
 8002052:	1c58      	adds	r0, r3, #1
 8002054:	6010      	str	r0, [r2, #0]
 8002056:	7019      	strb	r1, [r3, #0]
 8002058:	4608      	mov	r0, r1
 800205a:	bc10      	pop	{r4}
 800205c:	4770      	bx	lr

0800205e <__sfputs_r>:
 800205e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002060:	4606      	mov	r6, r0
 8002062:	460f      	mov	r7, r1
 8002064:	4614      	mov	r4, r2
 8002066:	18d5      	adds	r5, r2, r3
 8002068:	42ac      	cmp	r4, r5
 800206a:	d101      	bne.n	8002070 <__sfputs_r+0x12>
 800206c:	2000      	movs	r0, #0
 800206e:	e007      	b.n	8002080 <__sfputs_r+0x22>
 8002070:	463a      	mov	r2, r7
 8002072:	4630      	mov	r0, r6
 8002074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002078:	f7ff ffdc 	bl	8002034 <__sfputc_r>
 800207c:	1c43      	adds	r3, r0, #1
 800207e:	d1f3      	bne.n	8002068 <__sfputs_r+0xa>
 8002080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002084 <_vfiprintf_r>:
 8002084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002088:	460d      	mov	r5, r1
 800208a:	4614      	mov	r4, r2
 800208c:	4698      	mov	r8, r3
 800208e:	4606      	mov	r6, r0
 8002090:	b09d      	sub	sp, #116	; 0x74
 8002092:	b118      	cbz	r0, 800209c <_vfiprintf_r+0x18>
 8002094:	6983      	ldr	r3, [r0, #24]
 8002096:	b90b      	cbnz	r3, 800209c <_vfiprintf_r+0x18>
 8002098:	f7ff fed2 	bl	8001e40 <__sinit>
 800209c:	4b89      	ldr	r3, [pc, #548]	; (80022c4 <_vfiprintf_r+0x240>)
 800209e:	429d      	cmp	r5, r3
 80020a0:	d11b      	bne.n	80020da <_vfiprintf_r+0x56>
 80020a2:	6875      	ldr	r5, [r6, #4]
 80020a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020a6:	07d9      	lsls	r1, r3, #31
 80020a8:	d405      	bmi.n	80020b6 <_vfiprintf_r+0x32>
 80020aa:	89ab      	ldrh	r3, [r5, #12]
 80020ac:	059a      	lsls	r2, r3, #22
 80020ae:	d402      	bmi.n	80020b6 <_vfiprintf_r+0x32>
 80020b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020b2:	f7ff ff63 	bl	8001f7c <__retarget_lock_acquire_recursive>
 80020b6:	89ab      	ldrh	r3, [r5, #12]
 80020b8:	071b      	lsls	r3, r3, #28
 80020ba:	d501      	bpl.n	80020c0 <_vfiprintf_r+0x3c>
 80020bc:	692b      	ldr	r3, [r5, #16]
 80020be:	b9eb      	cbnz	r3, 80020fc <_vfiprintf_r+0x78>
 80020c0:	4629      	mov	r1, r5
 80020c2:	4630      	mov	r0, r6
 80020c4:	f000 fb5c 	bl	8002780 <__swsetup_r>
 80020c8:	b1c0      	cbz	r0, 80020fc <_vfiprintf_r+0x78>
 80020ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020cc:	07dc      	lsls	r4, r3, #31
 80020ce:	d50e      	bpl.n	80020ee <_vfiprintf_r+0x6a>
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	b01d      	add	sp, #116	; 0x74
 80020d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020da:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <_vfiprintf_r+0x244>)
 80020dc:	429d      	cmp	r5, r3
 80020de:	d101      	bne.n	80020e4 <_vfiprintf_r+0x60>
 80020e0:	68b5      	ldr	r5, [r6, #8]
 80020e2:	e7df      	b.n	80020a4 <_vfiprintf_r+0x20>
 80020e4:	4b79      	ldr	r3, [pc, #484]	; (80022cc <_vfiprintf_r+0x248>)
 80020e6:	429d      	cmp	r5, r3
 80020e8:	bf08      	it	eq
 80020ea:	68f5      	ldreq	r5, [r6, #12]
 80020ec:	e7da      	b.n	80020a4 <_vfiprintf_r+0x20>
 80020ee:	89ab      	ldrh	r3, [r5, #12]
 80020f0:	0598      	lsls	r0, r3, #22
 80020f2:	d4ed      	bmi.n	80020d0 <_vfiprintf_r+0x4c>
 80020f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020f6:	f7ff ff42 	bl	8001f7e <__retarget_lock_release_recursive>
 80020fa:	e7e9      	b.n	80020d0 <_vfiprintf_r+0x4c>
 80020fc:	2300      	movs	r3, #0
 80020fe:	9309      	str	r3, [sp, #36]	; 0x24
 8002100:	2320      	movs	r3, #32
 8002102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002106:	2330      	movs	r3, #48	; 0x30
 8002108:	f04f 0901 	mov.w	r9, #1
 800210c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002110:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80022d0 <_vfiprintf_r+0x24c>
 8002114:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002118:	4623      	mov	r3, r4
 800211a:	469a      	mov	sl, r3
 800211c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002120:	b10a      	cbz	r2, 8002126 <_vfiprintf_r+0xa2>
 8002122:	2a25      	cmp	r2, #37	; 0x25
 8002124:	d1f9      	bne.n	800211a <_vfiprintf_r+0x96>
 8002126:	ebba 0b04 	subs.w	fp, sl, r4
 800212a:	d00b      	beq.n	8002144 <_vfiprintf_r+0xc0>
 800212c:	465b      	mov	r3, fp
 800212e:	4622      	mov	r2, r4
 8002130:	4629      	mov	r1, r5
 8002132:	4630      	mov	r0, r6
 8002134:	f7ff ff93 	bl	800205e <__sfputs_r>
 8002138:	3001      	adds	r0, #1
 800213a:	f000 80aa 	beq.w	8002292 <_vfiprintf_r+0x20e>
 800213e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002140:	445a      	add	r2, fp
 8002142:	9209      	str	r2, [sp, #36]	; 0x24
 8002144:	f89a 3000 	ldrb.w	r3, [sl]
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80a2 	beq.w	8002292 <_vfiprintf_r+0x20e>
 800214e:	2300      	movs	r3, #0
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002158:	f10a 0a01 	add.w	sl, sl, #1
 800215c:	9304      	str	r3, [sp, #16]
 800215e:	9307      	str	r3, [sp, #28]
 8002160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002164:	931a      	str	r3, [sp, #104]	; 0x68
 8002166:	4654      	mov	r4, sl
 8002168:	2205      	movs	r2, #5
 800216a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800216e:	4858      	ldr	r0, [pc, #352]	; (80022d0 <_vfiprintf_r+0x24c>)
 8002170:	f000 fcbc 	bl	8002aec <memchr>
 8002174:	9a04      	ldr	r2, [sp, #16]
 8002176:	b9d8      	cbnz	r0, 80021b0 <_vfiprintf_r+0x12c>
 8002178:	06d1      	lsls	r1, r2, #27
 800217a:	bf44      	itt	mi
 800217c:	2320      	movmi	r3, #32
 800217e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002182:	0713      	lsls	r3, r2, #28
 8002184:	bf44      	itt	mi
 8002186:	232b      	movmi	r3, #43	; 0x2b
 8002188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800218c:	f89a 3000 	ldrb.w	r3, [sl]
 8002190:	2b2a      	cmp	r3, #42	; 0x2a
 8002192:	d015      	beq.n	80021c0 <_vfiprintf_r+0x13c>
 8002194:	4654      	mov	r4, sl
 8002196:	2000      	movs	r0, #0
 8002198:	f04f 0c0a 	mov.w	ip, #10
 800219c:	9a07      	ldr	r2, [sp, #28]
 800219e:	4621      	mov	r1, r4
 80021a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021a4:	3b30      	subs	r3, #48	; 0x30
 80021a6:	2b09      	cmp	r3, #9
 80021a8:	d94e      	bls.n	8002248 <_vfiprintf_r+0x1c4>
 80021aa:	b1b0      	cbz	r0, 80021da <_vfiprintf_r+0x156>
 80021ac:	9207      	str	r2, [sp, #28]
 80021ae:	e014      	b.n	80021da <_vfiprintf_r+0x156>
 80021b0:	eba0 0308 	sub.w	r3, r0, r8
 80021b4:	fa09 f303 	lsl.w	r3, r9, r3
 80021b8:	4313      	orrs	r3, r2
 80021ba:	46a2      	mov	sl, r4
 80021bc:	9304      	str	r3, [sp, #16]
 80021be:	e7d2      	b.n	8002166 <_vfiprintf_r+0xe2>
 80021c0:	9b03      	ldr	r3, [sp, #12]
 80021c2:	1d19      	adds	r1, r3, #4
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	9103      	str	r1, [sp, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bfbb      	ittet	lt
 80021cc:	425b      	neglt	r3, r3
 80021ce:	f042 0202 	orrlt.w	r2, r2, #2
 80021d2:	9307      	strge	r3, [sp, #28]
 80021d4:	9307      	strlt	r3, [sp, #28]
 80021d6:	bfb8      	it	lt
 80021d8:	9204      	strlt	r2, [sp, #16]
 80021da:	7823      	ldrb	r3, [r4, #0]
 80021dc:	2b2e      	cmp	r3, #46	; 0x2e
 80021de:	d10c      	bne.n	80021fa <_vfiprintf_r+0x176>
 80021e0:	7863      	ldrb	r3, [r4, #1]
 80021e2:	2b2a      	cmp	r3, #42	; 0x2a
 80021e4:	d135      	bne.n	8002252 <_vfiprintf_r+0x1ce>
 80021e6:	9b03      	ldr	r3, [sp, #12]
 80021e8:	3402      	adds	r4, #2
 80021ea:	1d1a      	adds	r2, r3, #4
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	9203      	str	r2, [sp, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bfb8      	it	lt
 80021f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80021f8:	9305      	str	r3, [sp, #20]
 80021fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80022e0 <_vfiprintf_r+0x25c>
 80021fe:	2203      	movs	r2, #3
 8002200:	4650      	mov	r0, sl
 8002202:	7821      	ldrb	r1, [r4, #0]
 8002204:	f000 fc72 	bl	8002aec <memchr>
 8002208:	b140      	cbz	r0, 800221c <_vfiprintf_r+0x198>
 800220a:	2340      	movs	r3, #64	; 0x40
 800220c:	eba0 000a 	sub.w	r0, r0, sl
 8002210:	fa03 f000 	lsl.w	r0, r3, r0
 8002214:	9b04      	ldr	r3, [sp, #16]
 8002216:	3401      	adds	r4, #1
 8002218:	4303      	orrs	r3, r0
 800221a:	9304      	str	r3, [sp, #16]
 800221c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002220:	2206      	movs	r2, #6
 8002222:	482c      	ldr	r0, [pc, #176]	; (80022d4 <_vfiprintf_r+0x250>)
 8002224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002228:	f000 fc60 	bl	8002aec <memchr>
 800222c:	2800      	cmp	r0, #0
 800222e:	d03f      	beq.n	80022b0 <_vfiprintf_r+0x22c>
 8002230:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <_vfiprintf_r+0x254>)
 8002232:	bb1b      	cbnz	r3, 800227c <_vfiprintf_r+0x1f8>
 8002234:	9b03      	ldr	r3, [sp, #12]
 8002236:	3307      	adds	r3, #7
 8002238:	f023 0307 	bic.w	r3, r3, #7
 800223c:	3308      	adds	r3, #8
 800223e:	9303      	str	r3, [sp, #12]
 8002240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002242:	443b      	add	r3, r7
 8002244:	9309      	str	r3, [sp, #36]	; 0x24
 8002246:	e767      	b.n	8002118 <_vfiprintf_r+0x94>
 8002248:	460c      	mov	r4, r1
 800224a:	2001      	movs	r0, #1
 800224c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002250:	e7a5      	b.n	800219e <_vfiprintf_r+0x11a>
 8002252:	2300      	movs	r3, #0
 8002254:	f04f 0c0a 	mov.w	ip, #10
 8002258:	4619      	mov	r1, r3
 800225a:	3401      	adds	r4, #1
 800225c:	9305      	str	r3, [sp, #20]
 800225e:	4620      	mov	r0, r4
 8002260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002264:	3a30      	subs	r2, #48	; 0x30
 8002266:	2a09      	cmp	r2, #9
 8002268:	d903      	bls.n	8002272 <_vfiprintf_r+0x1ee>
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0c5      	beq.n	80021fa <_vfiprintf_r+0x176>
 800226e:	9105      	str	r1, [sp, #20]
 8002270:	e7c3      	b.n	80021fa <_vfiprintf_r+0x176>
 8002272:	4604      	mov	r4, r0
 8002274:	2301      	movs	r3, #1
 8002276:	fb0c 2101 	mla	r1, ip, r1, r2
 800227a:	e7f0      	b.n	800225e <_vfiprintf_r+0x1da>
 800227c:	ab03      	add	r3, sp, #12
 800227e:	9300      	str	r3, [sp, #0]
 8002280:	462a      	mov	r2, r5
 8002282:	4630      	mov	r0, r6
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <_vfiprintf_r+0x258>)
 8002286:	a904      	add	r1, sp, #16
 8002288:	f3af 8000 	nop.w
 800228c:	4607      	mov	r7, r0
 800228e:	1c78      	adds	r0, r7, #1
 8002290:	d1d6      	bne.n	8002240 <_vfiprintf_r+0x1bc>
 8002292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002294:	07d9      	lsls	r1, r3, #31
 8002296:	d405      	bmi.n	80022a4 <_vfiprintf_r+0x220>
 8002298:	89ab      	ldrh	r3, [r5, #12]
 800229a:	059a      	lsls	r2, r3, #22
 800229c:	d402      	bmi.n	80022a4 <_vfiprintf_r+0x220>
 800229e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80022a0:	f7ff fe6d 	bl	8001f7e <__retarget_lock_release_recursive>
 80022a4:	89ab      	ldrh	r3, [r5, #12]
 80022a6:	065b      	lsls	r3, r3, #25
 80022a8:	f53f af12 	bmi.w	80020d0 <_vfiprintf_r+0x4c>
 80022ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022ae:	e711      	b.n	80020d4 <_vfiprintf_r+0x50>
 80022b0:	ab03      	add	r3, sp, #12
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	462a      	mov	r2, r5
 80022b6:	4630      	mov	r0, r6
 80022b8:	4b08      	ldr	r3, [pc, #32]	; (80022dc <_vfiprintf_r+0x258>)
 80022ba:	a904      	add	r1, sp, #16
 80022bc:	f000 f882 	bl	80023c4 <_printf_i>
 80022c0:	e7e4      	b.n	800228c <_vfiprintf_r+0x208>
 80022c2:	bf00      	nop
 80022c4:	08002c9c 	.word	0x08002c9c
 80022c8:	08002cbc 	.word	0x08002cbc
 80022cc:	08002c7c 	.word	0x08002c7c
 80022d0:	08002cdc 	.word	0x08002cdc
 80022d4:	08002ce6 	.word	0x08002ce6
 80022d8:	00000000 	.word	0x00000000
 80022dc:	0800205f 	.word	0x0800205f
 80022e0:	08002ce2 	.word	0x08002ce2

080022e4 <_printf_common>:
 80022e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022e8:	4616      	mov	r6, r2
 80022ea:	4699      	mov	r9, r3
 80022ec:	688a      	ldr	r2, [r1, #8]
 80022ee:	690b      	ldr	r3, [r1, #16]
 80022f0:	4607      	mov	r7, r0
 80022f2:	4293      	cmp	r3, r2
 80022f4:	bfb8      	it	lt
 80022f6:	4613      	movlt	r3, r2
 80022f8:	6033      	str	r3, [r6, #0]
 80022fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022fe:	460c      	mov	r4, r1
 8002300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002304:	b10a      	cbz	r2, 800230a <_printf_common+0x26>
 8002306:	3301      	adds	r3, #1
 8002308:	6033      	str	r3, [r6, #0]
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	0699      	lsls	r1, r3, #26
 800230e:	bf42      	ittt	mi
 8002310:	6833      	ldrmi	r3, [r6, #0]
 8002312:	3302      	addmi	r3, #2
 8002314:	6033      	strmi	r3, [r6, #0]
 8002316:	6825      	ldr	r5, [r4, #0]
 8002318:	f015 0506 	ands.w	r5, r5, #6
 800231c:	d106      	bne.n	800232c <_printf_common+0x48>
 800231e:	f104 0a19 	add.w	sl, r4, #25
 8002322:	68e3      	ldr	r3, [r4, #12]
 8002324:	6832      	ldr	r2, [r6, #0]
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	42ab      	cmp	r3, r5
 800232a:	dc28      	bgt.n	800237e <_printf_common+0x9a>
 800232c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002330:	1e13      	subs	r3, r2, #0
 8002332:	6822      	ldr	r2, [r4, #0]
 8002334:	bf18      	it	ne
 8002336:	2301      	movne	r3, #1
 8002338:	0692      	lsls	r2, r2, #26
 800233a:	d42d      	bmi.n	8002398 <_printf_common+0xb4>
 800233c:	4649      	mov	r1, r9
 800233e:	4638      	mov	r0, r7
 8002340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002344:	47c0      	blx	r8
 8002346:	3001      	adds	r0, #1
 8002348:	d020      	beq.n	800238c <_printf_common+0xa8>
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	68e5      	ldr	r5, [r4, #12]
 800234e:	f003 0306 	and.w	r3, r3, #6
 8002352:	2b04      	cmp	r3, #4
 8002354:	bf18      	it	ne
 8002356:	2500      	movne	r5, #0
 8002358:	6832      	ldr	r2, [r6, #0]
 800235a:	f04f 0600 	mov.w	r6, #0
 800235e:	68a3      	ldr	r3, [r4, #8]
 8002360:	bf08      	it	eq
 8002362:	1aad      	subeq	r5, r5, r2
 8002364:	6922      	ldr	r2, [r4, #16]
 8002366:	bf08      	it	eq
 8002368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800236c:	4293      	cmp	r3, r2
 800236e:	bfc4      	itt	gt
 8002370:	1a9b      	subgt	r3, r3, r2
 8002372:	18ed      	addgt	r5, r5, r3
 8002374:	341a      	adds	r4, #26
 8002376:	42b5      	cmp	r5, r6
 8002378:	d11a      	bne.n	80023b0 <_printf_common+0xcc>
 800237a:	2000      	movs	r0, #0
 800237c:	e008      	b.n	8002390 <_printf_common+0xac>
 800237e:	2301      	movs	r3, #1
 8002380:	4652      	mov	r2, sl
 8002382:	4649      	mov	r1, r9
 8002384:	4638      	mov	r0, r7
 8002386:	47c0      	blx	r8
 8002388:	3001      	adds	r0, #1
 800238a:	d103      	bne.n	8002394 <_printf_common+0xb0>
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002394:	3501      	adds	r5, #1
 8002396:	e7c4      	b.n	8002322 <_printf_common+0x3e>
 8002398:	2030      	movs	r0, #48	; 0x30
 800239a:	18e1      	adds	r1, r4, r3
 800239c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80023a6:	4422      	add	r2, r4
 80023a8:	3302      	adds	r3, #2
 80023aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80023ae:	e7c5      	b.n	800233c <_printf_common+0x58>
 80023b0:	2301      	movs	r3, #1
 80023b2:	4622      	mov	r2, r4
 80023b4:	4649      	mov	r1, r9
 80023b6:	4638      	mov	r0, r7
 80023b8:	47c0      	blx	r8
 80023ba:	3001      	adds	r0, #1
 80023bc:	d0e6      	beq.n	800238c <_printf_common+0xa8>
 80023be:	3601      	adds	r6, #1
 80023c0:	e7d9      	b.n	8002376 <_printf_common+0x92>
	...

080023c4 <_printf_i>:
 80023c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023c8:	460c      	mov	r4, r1
 80023ca:	7e27      	ldrb	r7, [r4, #24]
 80023cc:	4691      	mov	r9, r2
 80023ce:	2f78      	cmp	r7, #120	; 0x78
 80023d0:	4680      	mov	r8, r0
 80023d2:	469a      	mov	sl, r3
 80023d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80023d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023da:	d807      	bhi.n	80023ec <_printf_i+0x28>
 80023dc:	2f62      	cmp	r7, #98	; 0x62
 80023de:	d80a      	bhi.n	80023f6 <_printf_i+0x32>
 80023e0:	2f00      	cmp	r7, #0
 80023e2:	f000 80d9 	beq.w	8002598 <_printf_i+0x1d4>
 80023e6:	2f58      	cmp	r7, #88	; 0x58
 80023e8:	f000 80a4 	beq.w	8002534 <_printf_i+0x170>
 80023ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80023f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80023f4:	e03a      	b.n	800246c <_printf_i+0xa8>
 80023f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80023fa:	2b15      	cmp	r3, #21
 80023fc:	d8f6      	bhi.n	80023ec <_printf_i+0x28>
 80023fe:	a001      	add	r0, pc, #4	; (adr r0, 8002404 <_printf_i+0x40>)
 8002400:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002404:	0800245d 	.word	0x0800245d
 8002408:	08002471 	.word	0x08002471
 800240c:	080023ed 	.word	0x080023ed
 8002410:	080023ed 	.word	0x080023ed
 8002414:	080023ed 	.word	0x080023ed
 8002418:	080023ed 	.word	0x080023ed
 800241c:	08002471 	.word	0x08002471
 8002420:	080023ed 	.word	0x080023ed
 8002424:	080023ed 	.word	0x080023ed
 8002428:	080023ed 	.word	0x080023ed
 800242c:	080023ed 	.word	0x080023ed
 8002430:	0800257f 	.word	0x0800257f
 8002434:	080024a1 	.word	0x080024a1
 8002438:	08002561 	.word	0x08002561
 800243c:	080023ed 	.word	0x080023ed
 8002440:	080023ed 	.word	0x080023ed
 8002444:	080025a1 	.word	0x080025a1
 8002448:	080023ed 	.word	0x080023ed
 800244c:	080024a1 	.word	0x080024a1
 8002450:	080023ed 	.word	0x080023ed
 8002454:	080023ed 	.word	0x080023ed
 8002458:	08002569 	.word	0x08002569
 800245c:	680b      	ldr	r3, [r1, #0]
 800245e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002462:	1d1a      	adds	r2, r3, #4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	600a      	str	r2, [r1, #0]
 8002468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800246c:	2301      	movs	r3, #1
 800246e:	e0a4      	b.n	80025ba <_printf_i+0x1f6>
 8002470:	6825      	ldr	r5, [r4, #0]
 8002472:	6808      	ldr	r0, [r1, #0]
 8002474:	062e      	lsls	r6, r5, #24
 8002476:	f100 0304 	add.w	r3, r0, #4
 800247a:	d50a      	bpl.n	8002492 <_printf_i+0xce>
 800247c:	6805      	ldr	r5, [r0, #0]
 800247e:	600b      	str	r3, [r1, #0]
 8002480:	2d00      	cmp	r5, #0
 8002482:	da03      	bge.n	800248c <_printf_i+0xc8>
 8002484:	232d      	movs	r3, #45	; 0x2d
 8002486:	426d      	negs	r5, r5
 8002488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800248c:	230a      	movs	r3, #10
 800248e:	485e      	ldr	r0, [pc, #376]	; (8002608 <_printf_i+0x244>)
 8002490:	e019      	b.n	80024c6 <_printf_i+0x102>
 8002492:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002496:	6805      	ldr	r5, [r0, #0]
 8002498:	600b      	str	r3, [r1, #0]
 800249a:	bf18      	it	ne
 800249c:	b22d      	sxthne	r5, r5
 800249e:	e7ef      	b.n	8002480 <_printf_i+0xbc>
 80024a0:	680b      	ldr	r3, [r1, #0]
 80024a2:	6825      	ldr	r5, [r4, #0]
 80024a4:	1d18      	adds	r0, r3, #4
 80024a6:	6008      	str	r0, [r1, #0]
 80024a8:	0628      	lsls	r0, r5, #24
 80024aa:	d501      	bpl.n	80024b0 <_printf_i+0xec>
 80024ac:	681d      	ldr	r5, [r3, #0]
 80024ae:	e002      	b.n	80024b6 <_printf_i+0xf2>
 80024b0:	0669      	lsls	r1, r5, #25
 80024b2:	d5fb      	bpl.n	80024ac <_printf_i+0xe8>
 80024b4:	881d      	ldrh	r5, [r3, #0]
 80024b6:	2f6f      	cmp	r7, #111	; 0x6f
 80024b8:	bf0c      	ite	eq
 80024ba:	2308      	moveq	r3, #8
 80024bc:	230a      	movne	r3, #10
 80024be:	4852      	ldr	r0, [pc, #328]	; (8002608 <_printf_i+0x244>)
 80024c0:	2100      	movs	r1, #0
 80024c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024c6:	6866      	ldr	r6, [r4, #4]
 80024c8:	2e00      	cmp	r6, #0
 80024ca:	bfa8      	it	ge
 80024cc:	6821      	ldrge	r1, [r4, #0]
 80024ce:	60a6      	str	r6, [r4, #8]
 80024d0:	bfa4      	itt	ge
 80024d2:	f021 0104 	bicge.w	r1, r1, #4
 80024d6:	6021      	strge	r1, [r4, #0]
 80024d8:	b90d      	cbnz	r5, 80024de <_printf_i+0x11a>
 80024da:	2e00      	cmp	r6, #0
 80024dc:	d04d      	beq.n	800257a <_printf_i+0x1b6>
 80024de:	4616      	mov	r6, r2
 80024e0:	fbb5 f1f3 	udiv	r1, r5, r3
 80024e4:	fb03 5711 	mls	r7, r3, r1, r5
 80024e8:	5dc7      	ldrb	r7, [r0, r7]
 80024ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80024ee:	462f      	mov	r7, r5
 80024f0:	42bb      	cmp	r3, r7
 80024f2:	460d      	mov	r5, r1
 80024f4:	d9f4      	bls.n	80024e0 <_printf_i+0x11c>
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d10b      	bne.n	8002512 <_printf_i+0x14e>
 80024fa:	6823      	ldr	r3, [r4, #0]
 80024fc:	07df      	lsls	r7, r3, #31
 80024fe:	d508      	bpl.n	8002512 <_printf_i+0x14e>
 8002500:	6923      	ldr	r3, [r4, #16]
 8002502:	6861      	ldr	r1, [r4, #4]
 8002504:	4299      	cmp	r1, r3
 8002506:	bfde      	ittt	le
 8002508:	2330      	movle	r3, #48	; 0x30
 800250a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800250e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002512:	1b92      	subs	r2, r2, r6
 8002514:	6122      	str	r2, [r4, #16]
 8002516:	464b      	mov	r3, r9
 8002518:	4621      	mov	r1, r4
 800251a:	4640      	mov	r0, r8
 800251c:	f8cd a000 	str.w	sl, [sp]
 8002520:	aa03      	add	r2, sp, #12
 8002522:	f7ff fedf 	bl	80022e4 <_printf_common>
 8002526:	3001      	adds	r0, #1
 8002528:	d14c      	bne.n	80025c4 <_printf_i+0x200>
 800252a:	f04f 30ff 	mov.w	r0, #4294967295
 800252e:	b004      	add	sp, #16
 8002530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002534:	4834      	ldr	r0, [pc, #208]	; (8002608 <_printf_i+0x244>)
 8002536:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800253a:	680e      	ldr	r6, [r1, #0]
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	f856 5b04 	ldr.w	r5, [r6], #4
 8002542:	061f      	lsls	r7, r3, #24
 8002544:	600e      	str	r6, [r1, #0]
 8002546:	d514      	bpl.n	8002572 <_printf_i+0x1ae>
 8002548:	07d9      	lsls	r1, r3, #31
 800254a:	bf44      	itt	mi
 800254c:	f043 0320 	orrmi.w	r3, r3, #32
 8002550:	6023      	strmi	r3, [r4, #0]
 8002552:	b91d      	cbnz	r5, 800255c <_printf_i+0x198>
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	f023 0320 	bic.w	r3, r3, #32
 800255a:	6023      	str	r3, [r4, #0]
 800255c:	2310      	movs	r3, #16
 800255e:	e7af      	b.n	80024c0 <_printf_i+0xfc>
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	f043 0320 	orr.w	r3, r3, #32
 8002566:	6023      	str	r3, [r4, #0]
 8002568:	2378      	movs	r3, #120	; 0x78
 800256a:	4828      	ldr	r0, [pc, #160]	; (800260c <_printf_i+0x248>)
 800256c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002570:	e7e3      	b.n	800253a <_printf_i+0x176>
 8002572:	065e      	lsls	r6, r3, #25
 8002574:	bf48      	it	mi
 8002576:	b2ad      	uxthmi	r5, r5
 8002578:	e7e6      	b.n	8002548 <_printf_i+0x184>
 800257a:	4616      	mov	r6, r2
 800257c:	e7bb      	b.n	80024f6 <_printf_i+0x132>
 800257e:	680b      	ldr	r3, [r1, #0]
 8002580:	6826      	ldr	r6, [r4, #0]
 8002582:	1d1d      	adds	r5, r3, #4
 8002584:	6960      	ldr	r0, [r4, #20]
 8002586:	600d      	str	r5, [r1, #0]
 8002588:	0635      	lsls	r5, r6, #24
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	d501      	bpl.n	8002592 <_printf_i+0x1ce>
 800258e:	6018      	str	r0, [r3, #0]
 8002590:	e002      	b.n	8002598 <_printf_i+0x1d4>
 8002592:	0671      	lsls	r1, r6, #25
 8002594:	d5fb      	bpl.n	800258e <_printf_i+0x1ca>
 8002596:	8018      	strh	r0, [r3, #0]
 8002598:	2300      	movs	r3, #0
 800259a:	4616      	mov	r6, r2
 800259c:	6123      	str	r3, [r4, #16]
 800259e:	e7ba      	b.n	8002516 <_printf_i+0x152>
 80025a0:	680b      	ldr	r3, [r1, #0]
 80025a2:	1d1a      	adds	r2, r3, #4
 80025a4:	600a      	str	r2, [r1, #0]
 80025a6:	681e      	ldr	r6, [r3, #0]
 80025a8:	2100      	movs	r1, #0
 80025aa:	4630      	mov	r0, r6
 80025ac:	6862      	ldr	r2, [r4, #4]
 80025ae:	f000 fa9d 	bl	8002aec <memchr>
 80025b2:	b108      	cbz	r0, 80025b8 <_printf_i+0x1f4>
 80025b4:	1b80      	subs	r0, r0, r6
 80025b6:	6060      	str	r0, [r4, #4]
 80025b8:	6863      	ldr	r3, [r4, #4]
 80025ba:	6123      	str	r3, [r4, #16]
 80025bc:	2300      	movs	r3, #0
 80025be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025c2:	e7a8      	b.n	8002516 <_printf_i+0x152>
 80025c4:	4632      	mov	r2, r6
 80025c6:	4649      	mov	r1, r9
 80025c8:	4640      	mov	r0, r8
 80025ca:	6923      	ldr	r3, [r4, #16]
 80025cc:	47d0      	blx	sl
 80025ce:	3001      	adds	r0, #1
 80025d0:	d0ab      	beq.n	800252a <_printf_i+0x166>
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	079b      	lsls	r3, r3, #30
 80025d6:	d413      	bmi.n	8002600 <_printf_i+0x23c>
 80025d8:	68e0      	ldr	r0, [r4, #12]
 80025da:	9b03      	ldr	r3, [sp, #12]
 80025dc:	4298      	cmp	r0, r3
 80025de:	bfb8      	it	lt
 80025e0:	4618      	movlt	r0, r3
 80025e2:	e7a4      	b.n	800252e <_printf_i+0x16a>
 80025e4:	2301      	movs	r3, #1
 80025e6:	4632      	mov	r2, r6
 80025e8:	4649      	mov	r1, r9
 80025ea:	4640      	mov	r0, r8
 80025ec:	47d0      	blx	sl
 80025ee:	3001      	adds	r0, #1
 80025f0:	d09b      	beq.n	800252a <_printf_i+0x166>
 80025f2:	3501      	adds	r5, #1
 80025f4:	68e3      	ldr	r3, [r4, #12]
 80025f6:	9903      	ldr	r1, [sp, #12]
 80025f8:	1a5b      	subs	r3, r3, r1
 80025fa:	42ab      	cmp	r3, r5
 80025fc:	dcf2      	bgt.n	80025e4 <_printf_i+0x220>
 80025fe:	e7eb      	b.n	80025d8 <_printf_i+0x214>
 8002600:	2500      	movs	r5, #0
 8002602:	f104 0619 	add.w	r6, r4, #25
 8002606:	e7f5      	b.n	80025f4 <_printf_i+0x230>
 8002608:	08002ced 	.word	0x08002ced
 800260c:	08002cfe 	.word	0x08002cfe

08002610 <_sbrk_r>:
 8002610:	b538      	push	{r3, r4, r5, lr}
 8002612:	2300      	movs	r3, #0
 8002614:	4d05      	ldr	r5, [pc, #20]	; (800262c <_sbrk_r+0x1c>)
 8002616:	4604      	mov	r4, r0
 8002618:	4608      	mov	r0, r1
 800261a:	602b      	str	r3, [r5, #0]
 800261c:	f7fd ff40 	bl	80004a0 <_sbrk>
 8002620:	1c43      	adds	r3, r0, #1
 8002622:	d102      	bne.n	800262a <_sbrk_r+0x1a>
 8002624:	682b      	ldr	r3, [r5, #0]
 8002626:	b103      	cbz	r3, 800262a <_sbrk_r+0x1a>
 8002628:	6023      	str	r3, [r4, #0]
 800262a:	bd38      	pop	{r3, r4, r5, pc}
 800262c:	20000150 	.word	0x20000150

08002630 <__sread>:
 8002630:	b510      	push	{r4, lr}
 8002632:	460c      	mov	r4, r1
 8002634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002638:	f000 fabe 	bl	8002bb8 <_read_r>
 800263c:	2800      	cmp	r0, #0
 800263e:	bfab      	itete	ge
 8002640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002642:	89a3      	ldrhlt	r3, [r4, #12]
 8002644:	181b      	addge	r3, r3, r0
 8002646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800264a:	bfac      	ite	ge
 800264c:	6563      	strge	r3, [r4, #84]	; 0x54
 800264e:	81a3      	strhlt	r3, [r4, #12]
 8002650:	bd10      	pop	{r4, pc}

08002652 <__swrite>:
 8002652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002656:	461f      	mov	r7, r3
 8002658:	898b      	ldrh	r3, [r1, #12]
 800265a:	4605      	mov	r5, r0
 800265c:	05db      	lsls	r3, r3, #23
 800265e:	460c      	mov	r4, r1
 8002660:	4616      	mov	r6, r2
 8002662:	d505      	bpl.n	8002670 <__swrite+0x1e>
 8002664:	2302      	movs	r3, #2
 8002666:	2200      	movs	r2, #0
 8002668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800266c:	f000 f9c8 	bl	8002a00 <_lseek_r>
 8002670:	89a3      	ldrh	r3, [r4, #12]
 8002672:	4632      	mov	r2, r6
 8002674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002678:	81a3      	strh	r3, [r4, #12]
 800267a:	4628      	mov	r0, r5
 800267c:	463b      	mov	r3, r7
 800267e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002686:	f000 b869 	b.w	800275c <_write_r>

0800268a <__sseek>:
 800268a:	b510      	push	{r4, lr}
 800268c:	460c      	mov	r4, r1
 800268e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002692:	f000 f9b5 	bl	8002a00 <_lseek_r>
 8002696:	1c43      	adds	r3, r0, #1
 8002698:	89a3      	ldrh	r3, [r4, #12]
 800269a:	bf15      	itete	ne
 800269c:	6560      	strne	r0, [r4, #84]	; 0x54
 800269e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80026a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80026a6:	81a3      	strheq	r3, [r4, #12]
 80026a8:	bf18      	it	ne
 80026aa:	81a3      	strhne	r3, [r4, #12]
 80026ac:	bd10      	pop	{r4, pc}

080026ae <__sclose>:
 80026ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026b2:	f000 b8d3 	b.w	800285c <_close_r>
	...

080026b8 <__swbuf_r>:
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ba:	460e      	mov	r6, r1
 80026bc:	4614      	mov	r4, r2
 80026be:	4605      	mov	r5, r0
 80026c0:	b118      	cbz	r0, 80026ca <__swbuf_r+0x12>
 80026c2:	6983      	ldr	r3, [r0, #24]
 80026c4:	b90b      	cbnz	r3, 80026ca <__swbuf_r+0x12>
 80026c6:	f7ff fbbb 	bl	8001e40 <__sinit>
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <__swbuf_r+0x98>)
 80026cc:	429c      	cmp	r4, r3
 80026ce:	d12b      	bne.n	8002728 <__swbuf_r+0x70>
 80026d0:	686c      	ldr	r4, [r5, #4]
 80026d2:	69a3      	ldr	r3, [r4, #24]
 80026d4:	60a3      	str	r3, [r4, #8]
 80026d6:	89a3      	ldrh	r3, [r4, #12]
 80026d8:	071a      	lsls	r2, r3, #28
 80026da:	d52f      	bpl.n	800273c <__swbuf_r+0x84>
 80026dc:	6923      	ldr	r3, [r4, #16]
 80026de:	b36b      	cbz	r3, 800273c <__swbuf_r+0x84>
 80026e0:	6923      	ldr	r3, [r4, #16]
 80026e2:	6820      	ldr	r0, [r4, #0]
 80026e4:	b2f6      	uxtb	r6, r6
 80026e6:	1ac0      	subs	r0, r0, r3
 80026e8:	6963      	ldr	r3, [r4, #20]
 80026ea:	4637      	mov	r7, r6
 80026ec:	4283      	cmp	r3, r0
 80026ee:	dc04      	bgt.n	80026fa <__swbuf_r+0x42>
 80026f0:	4621      	mov	r1, r4
 80026f2:	4628      	mov	r0, r5
 80026f4:	f000 f948 	bl	8002988 <_fflush_r>
 80026f8:	bb30      	cbnz	r0, 8002748 <__swbuf_r+0x90>
 80026fa:	68a3      	ldr	r3, [r4, #8]
 80026fc:	3001      	adds	r0, #1
 80026fe:	3b01      	subs	r3, #1
 8002700:	60a3      	str	r3, [r4, #8]
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	6022      	str	r2, [r4, #0]
 8002708:	701e      	strb	r6, [r3, #0]
 800270a:	6963      	ldr	r3, [r4, #20]
 800270c:	4283      	cmp	r3, r0
 800270e:	d004      	beq.n	800271a <__swbuf_r+0x62>
 8002710:	89a3      	ldrh	r3, [r4, #12]
 8002712:	07db      	lsls	r3, r3, #31
 8002714:	d506      	bpl.n	8002724 <__swbuf_r+0x6c>
 8002716:	2e0a      	cmp	r6, #10
 8002718:	d104      	bne.n	8002724 <__swbuf_r+0x6c>
 800271a:	4621      	mov	r1, r4
 800271c:	4628      	mov	r0, r5
 800271e:	f000 f933 	bl	8002988 <_fflush_r>
 8002722:	b988      	cbnz	r0, 8002748 <__swbuf_r+0x90>
 8002724:	4638      	mov	r0, r7
 8002726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <__swbuf_r+0x9c>)
 800272a:	429c      	cmp	r4, r3
 800272c:	d101      	bne.n	8002732 <__swbuf_r+0x7a>
 800272e:	68ac      	ldr	r4, [r5, #8]
 8002730:	e7cf      	b.n	80026d2 <__swbuf_r+0x1a>
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <__swbuf_r+0xa0>)
 8002734:	429c      	cmp	r4, r3
 8002736:	bf08      	it	eq
 8002738:	68ec      	ldreq	r4, [r5, #12]
 800273a:	e7ca      	b.n	80026d2 <__swbuf_r+0x1a>
 800273c:	4621      	mov	r1, r4
 800273e:	4628      	mov	r0, r5
 8002740:	f000 f81e 	bl	8002780 <__swsetup_r>
 8002744:	2800      	cmp	r0, #0
 8002746:	d0cb      	beq.n	80026e0 <__swbuf_r+0x28>
 8002748:	f04f 37ff 	mov.w	r7, #4294967295
 800274c:	e7ea      	b.n	8002724 <__swbuf_r+0x6c>
 800274e:	bf00      	nop
 8002750:	08002c9c 	.word	0x08002c9c
 8002754:	08002cbc 	.word	0x08002cbc
 8002758:	08002c7c 	.word	0x08002c7c

0800275c <_write_r>:
 800275c:	b538      	push	{r3, r4, r5, lr}
 800275e:	4604      	mov	r4, r0
 8002760:	4608      	mov	r0, r1
 8002762:	4611      	mov	r1, r2
 8002764:	2200      	movs	r2, #0
 8002766:	4d05      	ldr	r5, [pc, #20]	; (800277c <_write_r+0x20>)
 8002768:	602a      	str	r2, [r5, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	f7fd fe4b 	bl	8000406 <_write>
 8002770:	1c43      	adds	r3, r0, #1
 8002772:	d102      	bne.n	800277a <_write_r+0x1e>
 8002774:	682b      	ldr	r3, [r5, #0]
 8002776:	b103      	cbz	r3, 800277a <_write_r+0x1e>
 8002778:	6023      	str	r3, [r4, #0]
 800277a:	bd38      	pop	{r3, r4, r5, pc}
 800277c:	20000150 	.word	0x20000150

08002780 <__swsetup_r>:
 8002780:	4b32      	ldr	r3, [pc, #200]	; (800284c <__swsetup_r+0xcc>)
 8002782:	b570      	push	{r4, r5, r6, lr}
 8002784:	681d      	ldr	r5, [r3, #0]
 8002786:	4606      	mov	r6, r0
 8002788:	460c      	mov	r4, r1
 800278a:	b125      	cbz	r5, 8002796 <__swsetup_r+0x16>
 800278c:	69ab      	ldr	r3, [r5, #24]
 800278e:	b913      	cbnz	r3, 8002796 <__swsetup_r+0x16>
 8002790:	4628      	mov	r0, r5
 8002792:	f7ff fb55 	bl	8001e40 <__sinit>
 8002796:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <__swsetup_r+0xd0>)
 8002798:	429c      	cmp	r4, r3
 800279a:	d10f      	bne.n	80027bc <__swsetup_r+0x3c>
 800279c:	686c      	ldr	r4, [r5, #4]
 800279e:	89a3      	ldrh	r3, [r4, #12]
 80027a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80027a4:	0719      	lsls	r1, r3, #28
 80027a6:	d42c      	bmi.n	8002802 <__swsetup_r+0x82>
 80027a8:	06dd      	lsls	r5, r3, #27
 80027aa:	d411      	bmi.n	80027d0 <__swsetup_r+0x50>
 80027ac:	2309      	movs	r3, #9
 80027ae:	6033      	str	r3, [r6, #0]
 80027b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	81a3      	strh	r3, [r4, #12]
 80027ba:	e03e      	b.n	800283a <__swsetup_r+0xba>
 80027bc:	4b25      	ldr	r3, [pc, #148]	; (8002854 <__swsetup_r+0xd4>)
 80027be:	429c      	cmp	r4, r3
 80027c0:	d101      	bne.n	80027c6 <__swsetup_r+0x46>
 80027c2:	68ac      	ldr	r4, [r5, #8]
 80027c4:	e7eb      	b.n	800279e <__swsetup_r+0x1e>
 80027c6:	4b24      	ldr	r3, [pc, #144]	; (8002858 <__swsetup_r+0xd8>)
 80027c8:	429c      	cmp	r4, r3
 80027ca:	bf08      	it	eq
 80027cc:	68ec      	ldreq	r4, [r5, #12]
 80027ce:	e7e6      	b.n	800279e <__swsetup_r+0x1e>
 80027d0:	0758      	lsls	r0, r3, #29
 80027d2:	d512      	bpl.n	80027fa <__swsetup_r+0x7a>
 80027d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80027d6:	b141      	cbz	r1, 80027ea <__swsetup_r+0x6a>
 80027d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80027dc:	4299      	cmp	r1, r3
 80027de:	d002      	beq.n	80027e6 <__swsetup_r+0x66>
 80027e0:	4630      	mov	r0, r6
 80027e2:	f000 f99d 	bl	8002b20 <_free_r>
 80027e6:	2300      	movs	r3, #0
 80027e8:	6363      	str	r3, [r4, #52]	; 0x34
 80027ea:	89a3      	ldrh	r3, [r4, #12]
 80027ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80027f0:	81a3      	strh	r3, [r4, #12]
 80027f2:	2300      	movs	r3, #0
 80027f4:	6063      	str	r3, [r4, #4]
 80027f6:	6923      	ldr	r3, [r4, #16]
 80027f8:	6023      	str	r3, [r4, #0]
 80027fa:	89a3      	ldrh	r3, [r4, #12]
 80027fc:	f043 0308 	orr.w	r3, r3, #8
 8002800:	81a3      	strh	r3, [r4, #12]
 8002802:	6923      	ldr	r3, [r4, #16]
 8002804:	b94b      	cbnz	r3, 800281a <__swsetup_r+0x9a>
 8002806:	89a3      	ldrh	r3, [r4, #12]
 8002808:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800280c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002810:	d003      	beq.n	800281a <__swsetup_r+0x9a>
 8002812:	4621      	mov	r1, r4
 8002814:	4630      	mov	r0, r6
 8002816:	f000 f929 	bl	8002a6c <__smakebuf_r>
 800281a:	89a0      	ldrh	r0, [r4, #12]
 800281c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002820:	f010 0301 	ands.w	r3, r0, #1
 8002824:	d00a      	beq.n	800283c <__swsetup_r+0xbc>
 8002826:	2300      	movs	r3, #0
 8002828:	60a3      	str	r3, [r4, #8]
 800282a:	6963      	ldr	r3, [r4, #20]
 800282c:	425b      	negs	r3, r3
 800282e:	61a3      	str	r3, [r4, #24]
 8002830:	6923      	ldr	r3, [r4, #16]
 8002832:	b943      	cbnz	r3, 8002846 <__swsetup_r+0xc6>
 8002834:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002838:	d1ba      	bne.n	80027b0 <__swsetup_r+0x30>
 800283a:	bd70      	pop	{r4, r5, r6, pc}
 800283c:	0781      	lsls	r1, r0, #30
 800283e:	bf58      	it	pl
 8002840:	6963      	ldrpl	r3, [r4, #20]
 8002842:	60a3      	str	r3, [r4, #8]
 8002844:	e7f4      	b.n	8002830 <__swsetup_r+0xb0>
 8002846:	2000      	movs	r0, #0
 8002848:	e7f7      	b.n	800283a <__swsetup_r+0xba>
 800284a:	bf00      	nop
 800284c:	2000000c 	.word	0x2000000c
 8002850:	08002c9c 	.word	0x08002c9c
 8002854:	08002cbc 	.word	0x08002cbc
 8002858:	08002c7c 	.word	0x08002c7c

0800285c <_close_r>:
 800285c:	b538      	push	{r3, r4, r5, lr}
 800285e:	2300      	movs	r3, #0
 8002860:	4d05      	ldr	r5, [pc, #20]	; (8002878 <_close_r+0x1c>)
 8002862:	4604      	mov	r4, r0
 8002864:	4608      	mov	r0, r1
 8002866:	602b      	str	r3, [r5, #0]
 8002868:	f7fd fde9 	bl	800043e <_close>
 800286c:	1c43      	adds	r3, r0, #1
 800286e:	d102      	bne.n	8002876 <_close_r+0x1a>
 8002870:	682b      	ldr	r3, [r5, #0]
 8002872:	b103      	cbz	r3, 8002876 <_close_r+0x1a>
 8002874:	6023      	str	r3, [r4, #0]
 8002876:	bd38      	pop	{r3, r4, r5, pc}
 8002878:	20000150 	.word	0x20000150

0800287c <__sflush_r>:
 800287c:	898a      	ldrh	r2, [r1, #12]
 800287e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002882:	4605      	mov	r5, r0
 8002884:	0710      	lsls	r0, r2, #28
 8002886:	460c      	mov	r4, r1
 8002888:	d458      	bmi.n	800293c <__sflush_r+0xc0>
 800288a:	684b      	ldr	r3, [r1, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	dc05      	bgt.n	800289c <__sflush_r+0x20>
 8002890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	dc02      	bgt.n	800289c <__sflush_r+0x20>
 8002896:	2000      	movs	r0, #0
 8002898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800289c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800289e:	2e00      	cmp	r6, #0
 80028a0:	d0f9      	beq.n	8002896 <__sflush_r+0x1a>
 80028a2:	2300      	movs	r3, #0
 80028a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028a8:	682f      	ldr	r7, [r5, #0]
 80028aa:	602b      	str	r3, [r5, #0]
 80028ac:	d032      	beq.n	8002914 <__sflush_r+0x98>
 80028ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028b0:	89a3      	ldrh	r3, [r4, #12]
 80028b2:	075a      	lsls	r2, r3, #29
 80028b4:	d505      	bpl.n	80028c2 <__sflush_r+0x46>
 80028b6:	6863      	ldr	r3, [r4, #4]
 80028b8:	1ac0      	subs	r0, r0, r3
 80028ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028bc:	b10b      	cbz	r3, 80028c2 <__sflush_r+0x46>
 80028be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028c0:	1ac0      	subs	r0, r0, r3
 80028c2:	2300      	movs	r3, #0
 80028c4:	4602      	mov	r2, r0
 80028c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028c8:	4628      	mov	r0, r5
 80028ca:	6a21      	ldr	r1, [r4, #32]
 80028cc:	47b0      	blx	r6
 80028ce:	1c43      	adds	r3, r0, #1
 80028d0:	89a3      	ldrh	r3, [r4, #12]
 80028d2:	d106      	bne.n	80028e2 <__sflush_r+0x66>
 80028d4:	6829      	ldr	r1, [r5, #0]
 80028d6:	291d      	cmp	r1, #29
 80028d8:	d82c      	bhi.n	8002934 <__sflush_r+0xb8>
 80028da:	4a2a      	ldr	r2, [pc, #168]	; (8002984 <__sflush_r+0x108>)
 80028dc:	40ca      	lsrs	r2, r1
 80028de:	07d6      	lsls	r6, r2, #31
 80028e0:	d528      	bpl.n	8002934 <__sflush_r+0xb8>
 80028e2:	2200      	movs	r2, #0
 80028e4:	6062      	str	r2, [r4, #4]
 80028e6:	6922      	ldr	r2, [r4, #16]
 80028e8:	04d9      	lsls	r1, r3, #19
 80028ea:	6022      	str	r2, [r4, #0]
 80028ec:	d504      	bpl.n	80028f8 <__sflush_r+0x7c>
 80028ee:	1c42      	adds	r2, r0, #1
 80028f0:	d101      	bne.n	80028f6 <__sflush_r+0x7a>
 80028f2:	682b      	ldr	r3, [r5, #0]
 80028f4:	b903      	cbnz	r3, 80028f8 <__sflush_r+0x7c>
 80028f6:	6560      	str	r0, [r4, #84]	; 0x54
 80028f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028fa:	602f      	str	r7, [r5, #0]
 80028fc:	2900      	cmp	r1, #0
 80028fe:	d0ca      	beq.n	8002896 <__sflush_r+0x1a>
 8002900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002904:	4299      	cmp	r1, r3
 8002906:	d002      	beq.n	800290e <__sflush_r+0x92>
 8002908:	4628      	mov	r0, r5
 800290a:	f000 f909 	bl	8002b20 <_free_r>
 800290e:	2000      	movs	r0, #0
 8002910:	6360      	str	r0, [r4, #52]	; 0x34
 8002912:	e7c1      	b.n	8002898 <__sflush_r+0x1c>
 8002914:	6a21      	ldr	r1, [r4, #32]
 8002916:	2301      	movs	r3, #1
 8002918:	4628      	mov	r0, r5
 800291a:	47b0      	blx	r6
 800291c:	1c41      	adds	r1, r0, #1
 800291e:	d1c7      	bne.n	80028b0 <__sflush_r+0x34>
 8002920:	682b      	ldr	r3, [r5, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0c4      	beq.n	80028b0 <__sflush_r+0x34>
 8002926:	2b1d      	cmp	r3, #29
 8002928:	d001      	beq.n	800292e <__sflush_r+0xb2>
 800292a:	2b16      	cmp	r3, #22
 800292c:	d101      	bne.n	8002932 <__sflush_r+0xb6>
 800292e:	602f      	str	r7, [r5, #0]
 8002930:	e7b1      	b.n	8002896 <__sflush_r+0x1a>
 8002932:	89a3      	ldrh	r3, [r4, #12]
 8002934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002938:	81a3      	strh	r3, [r4, #12]
 800293a:	e7ad      	b.n	8002898 <__sflush_r+0x1c>
 800293c:	690f      	ldr	r7, [r1, #16]
 800293e:	2f00      	cmp	r7, #0
 8002940:	d0a9      	beq.n	8002896 <__sflush_r+0x1a>
 8002942:	0793      	lsls	r3, r2, #30
 8002944:	bf18      	it	ne
 8002946:	2300      	movne	r3, #0
 8002948:	680e      	ldr	r6, [r1, #0]
 800294a:	bf08      	it	eq
 800294c:	694b      	ldreq	r3, [r1, #20]
 800294e:	eba6 0807 	sub.w	r8, r6, r7
 8002952:	600f      	str	r7, [r1, #0]
 8002954:	608b      	str	r3, [r1, #8]
 8002956:	f1b8 0f00 	cmp.w	r8, #0
 800295a:	dd9c      	ble.n	8002896 <__sflush_r+0x1a>
 800295c:	4643      	mov	r3, r8
 800295e:	463a      	mov	r2, r7
 8002960:	4628      	mov	r0, r5
 8002962:	6a21      	ldr	r1, [r4, #32]
 8002964:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002966:	47b0      	blx	r6
 8002968:	2800      	cmp	r0, #0
 800296a:	dc06      	bgt.n	800297a <__sflush_r+0xfe>
 800296c:	89a3      	ldrh	r3, [r4, #12]
 800296e:	f04f 30ff 	mov.w	r0, #4294967295
 8002972:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002976:	81a3      	strh	r3, [r4, #12]
 8002978:	e78e      	b.n	8002898 <__sflush_r+0x1c>
 800297a:	4407      	add	r7, r0
 800297c:	eba8 0800 	sub.w	r8, r8, r0
 8002980:	e7e9      	b.n	8002956 <__sflush_r+0xda>
 8002982:	bf00      	nop
 8002984:	20400001 	.word	0x20400001

08002988 <_fflush_r>:
 8002988:	b538      	push	{r3, r4, r5, lr}
 800298a:	690b      	ldr	r3, [r1, #16]
 800298c:	4605      	mov	r5, r0
 800298e:	460c      	mov	r4, r1
 8002990:	b913      	cbnz	r3, 8002998 <_fflush_r+0x10>
 8002992:	2500      	movs	r5, #0
 8002994:	4628      	mov	r0, r5
 8002996:	bd38      	pop	{r3, r4, r5, pc}
 8002998:	b118      	cbz	r0, 80029a2 <_fflush_r+0x1a>
 800299a:	6983      	ldr	r3, [r0, #24]
 800299c:	b90b      	cbnz	r3, 80029a2 <_fflush_r+0x1a>
 800299e:	f7ff fa4f 	bl	8001e40 <__sinit>
 80029a2:	4b14      	ldr	r3, [pc, #80]	; (80029f4 <_fflush_r+0x6c>)
 80029a4:	429c      	cmp	r4, r3
 80029a6:	d11b      	bne.n	80029e0 <_fflush_r+0x58>
 80029a8:	686c      	ldr	r4, [r5, #4]
 80029aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ef      	beq.n	8002992 <_fflush_r+0xa>
 80029b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80029b4:	07d0      	lsls	r0, r2, #31
 80029b6:	d404      	bmi.n	80029c2 <_fflush_r+0x3a>
 80029b8:	0599      	lsls	r1, r3, #22
 80029ba:	d402      	bmi.n	80029c2 <_fflush_r+0x3a>
 80029bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029be:	f7ff fadd 	bl	8001f7c <__retarget_lock_acquire_recursive>
 80029c2:	4628      	mov	r0, r5
 80029c4:	4621      	mov	r1, r4
 80029c6:	f7ff ff59 	bl	800287c <__sflush_r>
 80029ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029cc:	4605      	mov	r5, r0
 80029ce:	07da      	lsls	r2, r3, #31
 80029d0:	d4e0      	bmi.n	8002994 <_fflush_r+0xc>
 80029d2:	89a3      	ldrh	r3, [r4, #12]
 80029d4:	059b      	lsls	r3, r3, #22
 80029d6:	d4dd      	bmi.n	8002994 <_fflush_r+0xc>
 80029d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029da:	f7ff fad0 	bl	8001f7e <__retarget_lock_release_recursive>
 80029de:	e7d9      	b.n	8002994 <_fflush_r+0xc>
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <_fflush_r+0x70>)
 80029e2:	429c      	cmp	r4, r3
 80029e4:	d101      	bne.n	80029ea <_fflush_r+0x62>
 80029e6:	68ac      	ldr	r4, [r5, #8]
 80029e8:	e7df      	b.n	80029aa <_fflush_r+0x22>
 80029ea:	4b04      	ldr	r3, [pc, #16]	; (80029fc <_fflush_r+0x74>)
 80029ec:	429c      	cmp	r4, r3
 80029ee:	bf08      	it	eq
 80029f0:	68ec      	ldreq	r4, [r5, #12]
 80029f2:	e7da      	b.n	80029aa <_fflush_r+0x22>
 80029f4:	08002c9c 	.word	0x08002c9c
 80029f8:	08002cbc 	.word	0x08002cbc
 80029fc:	08002c7c 	.word	0x08002c7c

08002a00 <_lseek_r>:
 8002a00:	b538      	push	{r3, r4, r5, lr}
 8002a02:	4604      	mov	r4, r0
 8002a04:	4608      	mov	r0, r1
 8002a06:	4611      	mov	r1, r2
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4d05      	ldr	r5, [pc, #20]	; (8002a20 <_lseek_r+0x20>)
 8002a0c:	602a      	str	r2, [r5, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f7fd fd39 	bl	8000486 <_lseek>
 8002a14:	1c43      	adds	r3, r0, #1
 8002a16:	d102      	bne.n	8002a1e <_lseek_r+0x1e>
 8002a18:	682b      	ldr	r3, [r5, #0]
 8002a1a:	b103      	cbz	r3, 8002a1e <_lseek_r+0x1e>
 8002a1c:	6023      	str	r3, [r4, #0]
 8002a1e:	bd38      	pop	{r3, r4, r5, pc}
 8002a20:	20000150 	.word	0x20000150

08002a24 <__swhatbuf_r>:
 8002a24:	b570      	push	{r4, r5, r6, lr}
 8002a26:	460e      	mov	r6, r1
 8002a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a2c:	4614      	mov	r4, r2
 8002a2e:	2900      	cmp	r1, #0
 8002a30:	461d      	mov	r5, r3
 8002a32:	b096      	sub	sp, #88	; 0x58
 8002a34:	da07      	bge.n	8002a46 <__swhatbuf_r+0x22>
 8002a36:	2300      	movs	r3, #0
 8002a38:	602b      	str	r3, [r5, #0]
 8002a3a:	89b3      	ldrh	r3, [r6, #12]
 8002a3c:	061a      	lsls	r2, r3, #24
 8002a3e:	d410      	bmi.n	8002a62 <__swhatbuf_r+0x3e>
 8002a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a44:	e00e      	b.n	8002a64 <__swhatbuf_r+0x40>
 8002a46:	466a      	mov	r2, sp
 8002a48:	f000 f8c8 	bl	8002bdc <_fstat_r>
 8002a4c:	2800      	cmp	r0, #0
 8002a4e:	dbf2      	blt.n	8002a36 <__swhatbuf_r+0x12>
 8002a50:	9a01      	ldr	r2, [sp, #4]
 8002a52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002a56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002a5a:	425a      	negs	r2, r3
 8002a5c:	415a      	adcs	r2, r3
 8002a5e:	602a      	str	r2, [r5, #0]
 8002a60:	e7ee      	b.n	8002a40 <__swhatbuf_r+0x1c>
 8002a62:	2340      	movs	r3, #64	; 0x40
 8002a64:	2000      	movs	r0, #0
 8002a66:	6023      	str	r3, [r4, #0]
 8002a68:	b016      	add	sp, #88	; 0x58
 8002a6a:	bd70      	pop	{r4, r5, r6, pc}

08002a6c <__smakebuf_r>:
 8002a6c:	898b      	ldrh	r3, [r1, #12]
 8002a6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a70:	079d      	lsls	r5, r3, #30
 8002a72:	4606      	mov	r6, r0
 8002a74:	460c      	mov	r4, r1
 8002a76:	d507      	bpl.n	8002a88 <__smakebuf_r+0x1c>
 8002a78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002a7c:	6023      	str	r3, [r4, #0]
 8002a7e:	6123      	str	r3, [r4, #16]
 8002a80:	2301      	movs	r3, #1
 8002a82:	6163      	str	r3, [r4, #20]
 8002a84:	b002      	add	sp, #8
 8002a86:	bd70      	pop	{r4, r5, r6, pc}
 8002a88:	466a      	mov	r2, sp
 8002a8a:	ab01      	add	r3, sp, #4
 8002a8c:	f7ff ffca 	bl	8002a24 <__swhatbuf_r>
 8002a90:	9900      	ldr	r1, [sp, #0]
 8002a92:	4605      	mov	r5, r0
 8002a94:	4630      	mov	r0, r6
 8002a96:	f7ff fa73 	bl	8001f80 <_malloc_r>
 8002a9a:	b948      	cbnz	r0, 8002ab0 <__smakebuf_r+0x44>
 8002a9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aa0:	059a      	lsls	r2, r3, #22
 8002aa2:	d4ef      	bmi.n	8002a84 <__smakebuf_r+0x18>
 8002aa4:	f023 0303 	bic.w	r3, r3, #3
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	81a3      	strh	r3, [r4, #12]
 8002aae:	e7e3      	b.n	8002a78 <__smakebuf_r+0xc>
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <__smakebuf_r+0x7c>)
 8002ab2:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ab4:	89a3      	ldrh	r3, [r4, #12]
 8002ab6:	6020      	str	r0, [r4, #0]
 8002ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002abc:	81a3      	strh	r3, [r4, #12]
 8002abe:	9b00      	ldr	r3, [sp, #0]
 8002ac0:	6120      	str	r0, [r4, #16]
 8002ac2:	6163      	str	r3, [r4, #20]
 8002ac4:	9b01      	ldr	r3, [sp, #4]
 8002ac6:	b15b      	cbz	r3, 8002ae0 <__smakebuf_r+0x74>
 8002ac8:	4630      	mov	r0, r6
 8002aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ace:	f000 f897 	bl	8002c00 <_isatty_r>
 8002ad2:	b128      	cbz	r0, 8002ae0 <__smakebuf_r+0x74>
 8002ad4:	89a3      	ldrh	r3, [r4, #12]
 8002ad6:	f023 0303 	bic.w	r3, r3, #3
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	81a3      	strh	r3, [r4, #12]
 8002ae0:	89a0      	ldrh	r0, [r4, #12]
 8002ae2:	4305      	orrs	r5, r0
 8002ae4:	81a5      	strh	r5, [r4, #12]
 8002ae6:	e7cd      	b.n	8002a84 <__smakebuf_r+0x18>
 8002ae8:	08001dd9 	.word	0x08001dd9

08002aec <memchr>:
 8002aec:	4603      	mov	r3, r0
 8002aee:	b510      	push	{r4, lr}
 8002af0:	b2c9      	uxtb	r1, r1
 8002af2:	4402      	add	r2, r0
 8002af4:	4293      	cmp	r3, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	d101      	bne.n	8002afe <memchr+0x12>
 8002afa:	2000      	movs	r0, #0
 8002afc:	e003      	b.n	8002b06 <memchr+0x1a>
 8002afe:	7804      	ldrb	r4, [r0, #0]
 8002b00:	3301      	adds	r3, #1
 8002b02:	428c      	cmp	r4, r1
 8002b04:	d1f6      	bne.n	8002af4 <memchr+0x8>
 8002b06:	bd10      	pop	{r4, pc}

08002b08 <__malloc_lock>:
 8002b08:	4801      	ldr	r0, [pc, #4]	; (8002b10 <__malloc_lock+0x8>)
 8002b0a:	f7ff ba37 	b.w	8001f7c <__retarget_lock_acquire_recursive>
 8002b0e:	bf00      	nop
 8002b10:	20000148 	.word	0x20000148

08002b14 <__malloc_unlock>:
 8002b14:	4801      	ldr	r0, [pc, #4]	; (8002b1c <__malloc_unlock+0x8>)
 8002b16:	f7ff ba32 	b.w	8001f7e <__retarget_lock_release_recursive>
 8002b1a:	bf00      	nop
 8002b1c:	20000148 	.word	0x20000148

08002b20 <_free_r>:
 8002b20:	b538      	push	{r3, r4, r5, lr}
 8002b22:	4605      	mov	r5, r0
 8002b24:	2900      	cmp	r1, #0
 8002b26:	d043      	beq.n	8002bb0 <_free_r+0x90>
 8002b28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b2c:	1f0c      	subs	r4, r1, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bfb8      	it	lt
 8002b32:	18e4      	addlt	r4, r4, r3
 8002b34:	f7ff ffe8 	bl	8002b08 <__malloc_lock>
 8002b38:	4a1e      	ldr	r2, [pc, #120]	; (8002bb4 <_free_r+0x94>)
 8002b3a:	6813      	ldr	r3, [r2, #0]
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	b933      	cbnz	r3, 8002b4e <_free_r+0x2e>
 8002b40:	6063      	str	r3, [r4, #4]
 8002b42:	6014      	str	r4, [r2, #0]
 8002b44:	4628      	mov	r0, r5
 8002b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b4a:	f7ff bfe3 	b.w	8002b14 <__malloc_unlock>
 8002b4e:	42a3      	cmp	r3, r4
 8002b50:	d90a      	bls.n	8002b68 <_free_r+0x48>
 8002b52:	6821      	ldr	r1, [r4, #0]
 8002b54:	1862      	adds	r2, r4, r1
 8002b56:	4293      	cmp	r3, r2
 8002b58:	bf01      	itttt	eq
 8002b5a:	681a      	ldreq	r2, [r3, #0]
 8002b5c:	685b      	ldreq	r3, [r3, #4]
 8002b5e:	1852      	addeq	r2, r2, r1
 8002b60:	6022      	streq	r2, [r4, #0]
 8002b62:	6063      	str	r3, [r4, #4]
 8002b64:	6004      	str	r4, [r0, #0]
 8002b66:	e7ed      	b.n	8002b44 <_free_r+0x24>
 8002b68:	461a      	mov	r2, r3
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	b10b      	cbz	r3, 8002b72 <_free_r+0x52>
 8002b6e:	42a3      	cmp	r3, r4
 8002b70:	d9fa      	bls.n	8002b68 <_free_r+0x48>
 8002b72:	6811      	ldr	r1, [r2, #0]
 8002b74:	1850      	adds	r0, r2, r1
 8002b76:	42a0      	cmp	r0, r4
 8002b78:	d10b      	bne.n	8002b92 <_free_r+0x72>
 8002b7a:	6820      	ldr	r0, [r4, #0]
 8002b7c:	4401      	add	r1, r0
 8002b7e:	1850      	adds	r0, r2, r1
 8002b80:	4283      	cmp	r3, r0
 8002b82:	6011      	str	r1, [r2, #0]
 8002b84:	d1de      	bne.n	8002b44 <_free_r+0x24>
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4401      	add	r1, r0
 8002b8c:	6011      	str	r1, [r2, #0]
 8002b8e:	6053      	str	r3, [r2, #4]
 8002b90:	e7d8      	b.n	8002b44 <_free_r+0x24>
 8002b92:	d902      	bls.n	8002b9a <_free_r+0x7a>
 8002b94:	230c      	movs	r3, #12
 8002b96:	602b      	str	r3, [r5, #0]
 8002b98:	e7d4      	b.n	8002b44 <_free_r+0x24>
 8002b9a:	6820      	ldr	r0, [r4, #0]
 8002b9c:	1821      	adds	r1, r4, r0
 8002b9e:	428b      	cmp	r3, r1
 8002ba0:	bf01      	itttt	eq
 8002ba2:	6819      	ldreq	r1, [r3, #0]
 8002ba4:	685b      	ldreq	r3, [r3, #4]
 8002ba6:	1809      	addeq	r1, r1, r0
 8002ba8:	6021      	streq	r1, [r4, #0]
 8002baa:	6063      	str	r3, [r4, #4]
 8002bac:	6054      	str	r4, [r2, #4]
 8002bae:	e7c9      	b.n	8002b44 <_free_r+0x24>
 8002bb0:	bd38      	pop	{r3, r4, r5, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000090 	.word	0x20000090

08002bb8 <_read_r>:
 8002bb8:	b538      	push	{r3, r4, r5, lr}
 8002bba:	4604      	mov	r4, r0
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4d05      	ldr	r5, [pc, #20]	; (8002bd8 <_read_r+0x20>)
 8002bc4:	602a      	str	r2, [r5, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	f7fd fc00 	bl	80003cc <_read>
 8002bcc:	1c43      	adds	r3, r0, #1
 8002bce:	d102      	bne.n	8002bd6 <_read_r+0x1e>
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	b103      	cbz	r3, 8002bd6 <_read_r+0x1e>
 8002bd4:	6023      	str	r3, [r4, #0]
 8002bd6:	bd38      	pop	{r3, r4, r5, pc}
 8002bd8:	20000150 	.word	0x20000150

08002bdc <_fstat_r>:
 8002bdc:	b538      	push	{r3, r4, r5, lr}
 8002bde:	2300      	movs	r3, #0
 8002be0:	4d06      	ldr	r5, [pc, #24]	; (8002bfc <_fstat_r+0x20>)
 8002be2:	4604      	mov	r4, r0
 8002be4:	4608      	mov	r0, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	602b      	str	r3, [r5, #0]
 8002bea:	f7fd fc33 	bl	8000454 <_fstat>
 8002bee:	1c43      	adds	r3, r0, #1
 8002bf0:	d102      	bne.n	8002bf8 <_fstat_r+0x1c>
 8002bf2:	682b      	ldr	r3, [r5, #0]
 8002bf4:	b103      	cbz	r3, 8002bf8 <_fstat_r+0x1c>
 8002bf6:	6023      	str	r3, [r4, #0]
 8002bf8:	bd38      	pop	{r3, r4, r5, pc}
 8002bfa:	bf00      	nop
 8002bfc:	20000150 	.word	0x20000150

08002c00 <_isatty_r>:
 8002c00:	b538      	push	{r3, r4, r5, lr}
 8002c02:	2300      	movs	r3, #0
 8002c04:	4d05      	ldr	r5, [pc, #20]	; (8002c1c <_isatty_r+0x1c>)
 8002c06:	4604      	mov	r4, r0
 8002c08:	4608      	mov	r0, r1
 8002c0a:	602b      	str	r3, [r5, #0]
 8002c0c:	f7fd fc31 	bl	8000472 <_isatty>
 8002c10:	1c43      	adds	r3, r0, #1
 8002c12:	d102      	bne.n	8002c1a <_isatty_r+0x1a>
 8002c14:	682b      	ldr	r3, [r5, #0]
 8002c16:	b103      	cbz	r3, 8002c1a <_isatty_r+0x1a>
 8002c18:	6023      	str	r3, [r4, #0]
 8002c1a:	bd38      	pop	{r3, r4, r5, pc}
 8002c1c:	20000150 	.word	0x20000150

08002c20 <_init>:
 8002c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c22:	bf00      	nop
 8002c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c26:	bc08      	pop	{r3}
 8002c28:	469e      	mov	lr, r3
 8002c2a:	4770      	bx	lr

08002c2c <_fini>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	bf00      	nop
 8002c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c32:	bc08      	pop	{r3}
 8002c34:	469e      	mov	lr, r3
 8002c36:	4770      	bx	lr
