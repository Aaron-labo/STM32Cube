
PRO_TEMPERATURE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e02c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d6c  0800e218  0800e218  0001e218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff84  0800ff84  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800ff84  0800ff84  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ff84  0800ff84  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff84  0800ff84  0001ff84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff88  0800ff88  0001ff88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800ff8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  200001ec  08010178  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000558  08010178  00020558  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c08a  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004073  00000000  00000000  0003c29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00040318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00041590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021425  00000000  00000000  00042620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019458  00000000  00000000  00063a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6e37  00000000  00000000  0007ce9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00133cd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e34  00000000  00000000  00133d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001ec 	.word	0x200001ec
 8000204:	00000000 	.word	0x00000000
 8000208:	0800e1fc 	.word	0x0800e1fc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f0 	.word	0x200001f0
 8000224:	0800e1fc 	.word	0x0800e1fc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2uiz>:
 80011e8:	0042      	lsls	r2, r0, #1
 80011ea:	d20e      	bcs.n	800120a <__aeabi_f2uiz+0x22>
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30b      	bcc.n	800120a <__aeabi_f2uiz+0x22>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d409      	bmi.n	8001210 <__aeabi_f2uiz+0x28>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	fa23 f002 	lsr.w	r0, r3, r2
 8001208:	4770      	bx	lr
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	4770      	bx	lr
 8001210:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001214:	d101      	bne.n	800121a <__aeabi_f2uiz+0x32>
 8001216:	0242      	lsls	r2, r0, #9
 8001218:	d102      	bne.n	8001220 <__aeabi_f2uiz+0x38>
 800121a:	f04f 30ff 	mov.w	r0, #4294967295
 800121e:	4770      	bx	lr
 8001220:	f04f 0000 	mov.w	r0, #0
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop

08001228 <show_Data>:
 *      Author: Francis
 */

#include "lcd_irmp.h"

void show_Data(float voltage, float temperature, float target_temp, float pwmVal_fan, float pwmVal_res) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af02      	add	r7, sp, #8
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
	static uint8_t Show_Str[64];
	sprintf((char*) Show_Str, "TEMPERATURE CONTROL");
 8001236:	493d      	ldr	r1, [pc, #244]	; (800132c <show_Data+0x104>)
 8001238:	483d      	ldr	r0, [pc, #244]	; (8001330 <show_Data+0x108>)
 800123a:	f00a fe73 	bl	800bf24 <siprintf>
	LCD_ShowString(10, 30, 240, 24, 24, Show_Str);
 800123e:	4b3c      	ldr	r3, [pc, #240]	; (8001330 <show_Data+0x108>)
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	2318      	movs	r3, #24
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2318      	movs	r3, #24
 8001248:	22f0      	movs	r2, #240	; 0xf0
 800124a:	211e      	movs	r1, #30
 800124c:	200a      	movs	r0, #10
 800124e:	f005 f833 	bl	80062b8 <LCD_ShowString>
	sprintf((char*) Show_Str, "Current voltage   : %.3f", voltage);
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f7ff f954 	bl	8000500 <__aeabi_f2d>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4935      	ldr	r1, [pc, #212]	; (8001334 <show_Data+0x10c>)
 800125e:	4834      	ldr	r0, [pc, #208]	; (8001330 <show_Data+0x108>)
 8001260:	f00a fe60 	bl	800bf24 <siprintf>
	LCD_ShowString(20, 80, 220, 16, 16, Show_Str);
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <show_Data+0x108>)
 8001266:	9301      	str	r3, [sp, #4]
 8001268:	2310      	movs	r3, #16
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2310      	movs	r3, #16
 800126e:	22dc      	movs	r2, #220	; 0xdc
 8001270:	2150      	movs	r1, #80	; 0x50
 8001272:	2014      	movs	r0, #20
 8001274:	f005 f820 	bl	80062b8 <LCD_ShowString>
	sprintf((char*) Show_Str, "Current temperature: %.2f", temperature);
 8001278:	68b8      	ldr	r0, [r7, #8]
 800127a:	f7ff f941 	bl	8000500 <__aeabi_f2d>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	492d      	ldr	r1, [pc, #180]	; (8001338 <show_Data+0x110>)
 8001284:	482a      	ldr	r0, [pc, #168]	; (8001330 <show_Data+0x108>)
 8001286:	f00a fe4d 	bl	800bf24 <siprintf>
	LCD_ShowString(20, 110, 220, 16, 16, Show_Str);
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <show_Data+0x108>)
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	2310      	movs	r3, #16
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2310      	movs	r3, #16
 8001294:	22dc      	movs	r2, #220	; 0xdc
 8001296:	216e      	movs	r1, #110	; 0x6e
 8001298:	2014      	movs	r0, #20
 800129a:	f005 f80d 	bl	80062b8 <LCD_ShowString>
	sprintf((char*) Show_Str, "Target temperature: %.1f", target_temp);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff f92e 	bl	8000500 <__aeabi_f2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4924      	ldr	r1, [pc, #144]	; (800133c <show_Data+0x114>)
 80012aa:	4821      	ldr	r0, [pc, #132]	; (8001330 <show_Data+0x108>)
 80012ac:	f00a fe3a 	bl	800bf24 <siprintf>
	LCD_ShowString(20, 140, 220, 16, 16, Show_Str);
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <show_Data+0x108>)
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	2310      	movs	r3, #16
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	2310      	movs	r3, #16
 80012ba:	22dc      	movs	r2, #220	; 0xdc
 80012bc:	218c      	movs	r1, #140	; 0x8c
 80012be:	2014      	movs	r0, #20
 80012c0:	f004 fffa 	bl	80062b8 <LCD_ShowString>
	sprintf((char*) Show_Str, "PWM_Fan: %.2f", pwmVal_fan / 1000);
 80012c4:	491e      	ldr	r1, [pc, #120]	; (8001340 <show_Data+0x118>)
 80012c6:	6838      	ldr	r0, [r7, #0]
 80012c8:	f7ff fe7c 	bl	8000fc4 <__aeabi_fdiv>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f916 	bl	8000500 <__aeabi_f2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	491a      	ldr	r1, [pc, #104]	; (8001344 <show_Data+0x11c>)
 80012da:	4815      	ldr	r0, [pc, #84]	; (8001330 <show_Data+0x108>)
 80012dc:	f00a fe22 	bl	800bf24 <siprintf>
	LCD_ShowString(20, 170, 220, 16, 16, Show_Str);
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <show_Data+0x108>)
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	2310      	movs	r3, #16
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2310      	movs	r3, #16
 80012ea:	22dc      	movs	r2, #220	; 0xdc
 80012ec:	21aa      	movs	r1, #170	; 0xaa
 80012ee:	2014      	movs	r0, #20
 80012f0:	f004 ffe2 	bl	80062b8 <LCD_ShowString>
	sprintf((char*) Show_Str, "PWM_Res: %.2f", pwmVal_res / 1000);
 80012f4:	4912      	ldr	r1, [pc, #72]	; (8001340 <show_Data+0x118>)
 80012f6:	69b8      	ldr	r0, [r7, #24]
 80012f8:	f7ff fe64 	bl	8000fc4 <__aeabi_fdiv>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f8fe 	bl	8000500 <__aeabi_f2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	490f      	ldr	r1, [pc, #60]	; (8001348 <show_Data+0x120>)
 800130a:	4809      	ldr	r0, [pc, #36]	; (8001330 <show_Data+0x108>)
 800130c:	f00a fe0a 	bl	800bf24 <siprintf>
	LCD_ShowString(20, 200, 220, 16, 16, Show_Str);
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <show_Data+0x108>)
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	2310      	movs	r3, #16
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2310      	movs	r3, #16
 800131a:	22dc      	movs	r2, #220	; 0xdc
 800131c:	21c8      	movs	r1, #200	; 0xc8
 800131e:	2014      	movs	r0, #20
 8001320:	f004 ffca 	bl	80062b8 <LCD_ShowString>
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	0800e218 	.word	0x0800e218
 8001330:	20000208 	.word	0x20000208
 8001334:	0800e22c 	.word	0x0800e22c
 8001338:	0800e248 	.word	0x0800e248
 800133c:	0800e264 	.word	0x0800e264
 8001340:	447a0000 	.word	0x447a0000
 8001344:	0800e280 	.word	0x0800e280
 8001348:	0800e290 	.word	0x0800e290

0800134c <PID_Init>:
#include "PID.h"

//水泥电阻PID初始化
void PID_Init(PID *pid) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	printf("PID Init begin\r\n");
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <PID_Init+0x58>)
 8001356:	f00a fdcd 	bl	800bef4 <puts>
	pid->SetTemp = 40;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <PID_Init+0x5c>)
 800135e:	601a      	str	r2, [r3, #0]
	pid->ActualTemp = 0;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	605a      	str	r2, [r3, #4]
	pid->err = 0;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
	pid->err_last = 0;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f04f 0200 	mov.w	r2, #0
 8001376:	60da      	str	r2, [r3, #12]
	pid->voltage = 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
	pid->integral = 0;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
	pid->Kp = 35.0;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a08      	ldr	r2, [pc, #32]	; (80013ac <PID_Init+0x60>)
 800138c:	611a      	str	r2, [r3, #16]
	pid->Ki = 0.4;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <PID_Init+0x64>)
 8001392:	615a      	str	r2, [r3, #20]
	pid->Kd = 32.0;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800139a:	619a      	str	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	0800e2bc 	.word	0x0800e2bc
 80013a8:	42200000 	.word	0x42200000
 80013ac:	420c0000 	.word	0x420c0000
 80013b0:	3ecccccd 	.word	0x3ecccccd

080013b4 <PID_Calc>:

//水泥电阻PID调节函数
float PID_Calc(PID *pid, float temp) {
 80013b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013b8:	b088      	sub	sp, #32
 80013ba:	af06      	add	r7, sp, #24
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]

	pid->ActualTemp = temp;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	605a      	str	r2, [r3, #4]
	pid->err = pid->SetTemp - pid->ActualTemp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4619      	mov	r1, r3
 80013d0:	4610      	mov	r0, r2
 80013d2:	f7ff fc39 	bl	8000c48 <__aeabi_fsub>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	609a      	str	r2, [r3, #8]

	if (pid->err >= 20) {
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	494e      	ldr	r1, [pc, #312]	; (800151c <PID_Calc+0x168>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff feeb 	bl	80011c0 <__aeabi_fcmpge>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <PID_Calc+0x40>
		return 800;
 80013f0:	4b4b      	ldr	r3, [pc, #300]	; (8001520 <PID_Calc+0x16c>)
 80013f2:	e08d      	b.n	8001510 <PID_Calc+0x15c>
	}

	pid->integral += pid->err;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1a      	ldr	r2, [r3, #32]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4619      	mov	r1, r3
 80013fe:	4610      	mov	r0, r2
 8001400:	f7ff fc24 	bl	8000c4c <__addsf3>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	621a      	str	r2, [r3, #32]
	//PID算法核心函数
	pid->voltage = pid->Kp * pid->err + pid->Ki * pid->integral
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691a      	ldr	r2, [r3, #16]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	4619      	mov	r1, r3
 8001416:	4610      	mov	r0, r2
 8001418:	f7ff fd20 	bl	8000e5c <__aeabi_fmul>
 800141c:	4603      	mov	r3, r0
 800141e:	461c      	mov	r4, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695a      	ldr	r2, [r3, #20]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	4619      	mov	r1, r3
 800142a:	4610      	mov	r0, r2
 800142c:	f7ff fd16 	bl	8000e5c <__aeabi_fmul>
 8001430:	4603      	mov	r3, r0
 8001432:	4619      	mov	r1, r3
 8001434:	4620      	mov	r0, r4
 8001436:	f7ff fc09 	bl	8000c4c <__addsf3>
 800143a:	4603      	mov	r3, r0
 800143c:	461d      	mov	r5, r3
			+ pid->Kd * (pid->err - pid->err_last);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699c      	ldr	r4, [r3, #24]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	4619      	mov	r1, r3
 800144c:	4610      	mov	r0, r2
 800144e:	f7ff fbfb 	bl	8000c48 <__aeabi_fsub>
 8001452:	4603      	mov	r3, r0
 8001454:	4619      	mov	r1, r3
 8001456:	4620      	mov	r0, r4
 8001458:	f7ff fd00 	bl	8000e5c <__aeabi_fmul>
 800145c:	4603      	mov	r3, r0
 800145e:	4619      	mov	r1, r3
 8001460:	4628      	mov	r0, r5
 8001462:	f7ff fbf3 	bl	8000c4c <__addsf3>
 8001466:	4603      	mov	r3, r0
 8001468:	461a      	mov	r2, r3
	pid->voltage = pid->Kp * pid->err + pid->Ki * pid->integral
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	61da      	str	r2, [r3, #28]
	pid->ActualTemp = pid->voltage * 1.0;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	69da      	ldr	r2, [r3, #28]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	605a      	str	r2, [r3, #4]
	printf("比例%.2f\r\n积分%.2f\r\n微分%.2f\r\n输出为%.2f", pid->err, pid->integral,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f840 	bl	8000500 <__aeabi_f2d>
 8001480:	4682      	mov	sl, r0
 8001482:	468b      	mov	fp, r1
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff f839 	bl	8000500 <__aeabi_f2d>
 800148e:	4604      	mov	r4, r0
 8001490:	460d      	mov	r5, r1
			(pid->err - pid->err_last), pid->ActualTemp);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	4619      	mov	r1, r3
 800149c:	4610      	mov	r0, r2
 800149e:	f7ff fbd3 	bl	8000c48 <__aeabi_fsub>
 80014a2:	4603      	mov	r3, r0
	printf("比例%.2f\r\n积分%.2f\r\n微分%.2f\r\n输出为%.2f", pid->err, pid->integral,
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f82b 	bl	8000500 <__aeabi_f2d>
 80014aa:	4680      	mov	r8, r0
 80014ac:	4689      	mov	r9, r1
			(pid->err - pid->err_last), pid->ActualTemp);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
	printf("比例%.2f\r\n积分%.2f\r\n微分%.2f\r\n输出为%.2f", pid->err, pid->integral,
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f824 	bl	8000500 <__aeabi_f2d>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80014c0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80014c4:	e9cd 4500 	strd	r4, r5, [sp]
 80014c8:	4652      	mov	r2, sl
 80014ca:	465b      	mov	r3, fp
 80014cc:	4815      	ldr	r0, [pc, #84]	; (8001524 <PID_Calc+0x170>)
 80014ce:	f00a fc8b 	bl	800bde8 <iprintf>
	pid->err_last = pid->err;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	60da      	str	r2, [r3, #12]

	//设定其最大值和最小值
	if (pid->ActualTemp >= 700) {
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4912      	ldr	r1, [pc, #72]	; (8001528 <PID_Calc+0x174>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fe6d 	bl	80011c0 <__aeabi_fcmpge>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <PID_Calc+0x140>
		pid->ActualTemp = 700;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <PID_Calc+0x174>)
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	e00b      	b.n	800150c <PID_Calc+0x158>
	} else if (pid->ActualTemp <= 10) {
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <PID_Calc+0x178>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fe56 	bl	80011ac <__aeabi_fcmple>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d002      	beq.n	800150c <PID_Calc+0x158>
		pid->ActualTemp = 10;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a08      	ldr	r2, [pc, #32]	; (800152c <PID_Calc+0x178>)
 800150a:	605a      	str	r2, [r3, #4]
	}

	return pid->ActualTemp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800151a:	bf00      	nop
 800151c:	41a00000 	.word	0x41a00000
 8001520:	44480000 	.word	0x44480000
 8001524:	0800e2cc 	.word	0x0800e2cc
 8001528:	442f0000 	.word	0x442f0000
 800152c:	41200000 	.word	0x41200000

08001530 <ChaSetTemp>:

//改变设定值
void ChaSetTemp(PID* pid, float settemp)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
	pid->SetTemp = settemp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	601a      	str	r2, [r3, #0]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <PID_inte_Init>:

void PID_inte_Init(PID* pid)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	pid->integral = 0;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr
 8001564:	0000      	movs	r0, r0
	...

08001568 <conversion1>:
/*电压与温度的函数为:
 * v = 0.0156*t+0.4164(v为电压值，t为温度值）
 * t = (v-0.4164)/0.0156
 */
float conversion1(float voltage)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	float temperature = 0;
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
	if(voltage >= 1.56)
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7fe ffc2 	bl	8000500 <__aeabi_f2d>
 800157c:	a34a      	add	r3, pc, #296	; (adr r3, 80016a8 <conversion1+0x140>)
 800157e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001582:	f7ff fa9b 	bl	8000abc <__aeabi_dcmpge>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d019      	beq.n	80015c0 <conversion1+0x58>
	{
		temperature = (voltage - 0.21)/0.039;
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7fe ffb7 	bl	8000500 <__aeabi_f2d>
 8001592:	a347      	add	r3, pc, #284	; (adr r3, 80016b0 <conversion1+0x148>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7fe fe52 	bl	8000240 <__aeabi_dsub>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	a344      	add	r3, pc, #272	; (adr r3, 80016b8 <conversion1+0x150>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7ff f92b 	bl	8000804 <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff faf3 	bl	8000ba0 <__aeabi_d2f>
 80015ba:	4603      	mov	r3, r0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	e06d      	b.n	800169c <conversion1+0x134>
	}else if(voltage >= 1.513)
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7fe ff9d 	bl	8000500 <__aeabi_f2d>
 80015c6:	a33e      	add	r3, pc, #248	; (adr r3, 80016c0 <conversion1+0x158>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7ff fa76 	bl	8000abc <__aeabi_dcmpge>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d019      	beq.n	800160a <conversion1+0xa2>
	{
		temperature = (voltage - 0.358)/0.035;
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7fe ff92 	bl	8000500 <__aeabi_f2d>
 80015dc:	a33a      	add	r3, pc, #232	; (adr r3, 80016c8 <conversion1+0x160>)
 80015de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e2:	f7fe fe2d 	bl	8000240 <__aeabi_dsub>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	a338      	add	r3, pc, #224	; (adr r3, 80016d0 <conversion1+0x168>)
 80015f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f4:	f7ff f906 	bl	8000804 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff face 	bl	8000ba0 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	e048      	b.n	800169c <conversion1+0x134>
	}else if(voltage >= 1.479)
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7fe ff78 	bl	8000500 <__aeabi_f2d>
 8001610:	a331      	add	r3, pc, #196	; (adr r3, 80016d8 <conversion1+0x170>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	f7ff fa51 	bl	8000abc <__aeabi_dcmpge>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d019      	beq.n	8001654 <conversion1+0xec>
	{
		temperature = (voltage - 0.952)/0.017;
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7fe ff6d 	bl	8000500 <__aeabi_f2d>
 8001626:	a32e      	add	r3, pc, #184	; (adr r3, 80016e0 <conversion1+0x178>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7fe fe08 	bl	8000240 <__aeabi_dsub>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	a32b      	add	r3, pc, #172	; (adr r3, 80016e8 <conversion1+0x180>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7ff f8e1 	bl	8000804 <__aeabi_ddiv>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff faa9 	bl	8000ba0 <__aeabi_d2f>
 800164e:	4603      	mov	r3, r0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	e023      	b.n	800169c <conversion1+0x134>
	}else if(voltage >= 1.478)
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7fe ff53 	bl	8000500 <__aeabi_f2d>
 800165a:	a325      	add	r3, pc, #148	; (adr r3, 80016f0 <conversion1+0x188>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7ff fa2c 	bl	8000abc <__aeabi_dcmpge>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d018      	beq.n	800169c <conversion1+0x134>
	{
		temperature = (voltage - 1.4635)/0.0005;
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7fe ff48 	bl	8000500 <__aeabi_f2d>
 8001670:	a321      	add	r3, pc, #132	; (adr r3, 80016f8 <conversion1+0x190>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe fde3 	bl	8000240 <__aeabi_dsub>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	a31f      	add	r3, pc, #124	; (adr r3, 8001700 <conversion1+0x198>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7ff f8bc 	bl	8000804 <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fa84 	bl	8000ba0 <__aeabi_d2f>
 8001698:	4603      	mov	r3, r0
 800169a:	60fb      	str	r3, [r7, #12]
	}
	return temperature;
 800169c:	68fb      	ldr	r3, [r7, #12]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	8f5c28f6 	.word	0x8f5c28f6
 80016ac:	3ff8f5c2 	.word	0x3ff8f5c2
 80016b0:	ae147ae1 	.word	0xae147ae1
 80016b4:	3fcae147 	.word	0x3fcae147
 80016b8:	d916872b 	.word	0xd916872b
 80016bc:	3fa3f7ce 	.word	0x3fa3f7ce
 80016c0:	7ced9168 	.word	0x7ced9168
 80016c4:	3ff8353f 	.word	0x3ff8353f
 80016c8:	d4fdf3b6 	.word	0xd4fdf3b6
 80016cc:	3fd6e978 	.word	0x3fd6e978
 80016d0:	1eb851ec 	.word	0x1eb851ec
 80016d4:	3fa1eb85 	.word	0x3fa1eb85
 80016d8:	e76c8b44 	.word	0xe76c8b44
 80016dc:	3ff7a9fb 	.word	0x3ff7a9fb
 80016e0:	b4395810 	.word	0xb4395810
 80016e4:	3fee76c8 	.word	0x3fee76c8
 80016e8:	b020c49c 	.word	0xb020c49c
 80016ec:	3f916872 	.word	0x3f916872
 80016f0:	53f7ced9 	.word	0x53f7ced9
 80016f4:	3ff7a5e3 	.word	0x3ff7a5e3
 80016f8:	f9db22d1 	.word	0xf9db22d1
 80016fc:	3ff76a7e 	.word	0x3ff76a7e
 8001700:	d2f1a9fc 	.word	0xd2f1a9fc
 8001704:	3f40624d 	.word	0x3f40624d

08001708 <conversion2>:

float conversion2(float voltage)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	float temperature = 0;
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
	if(voltage >= 1.898)
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7fe fef2 	bl	8000500 <__aeabi_f2d>
 800171c:	a320      	add	r3, pc, #128	; (adr r3, 80017a0 <conversion2+0x98>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7ff f9cb 	bl	8000abc <__aeabi_dcmpge>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d019      	beq.n	8001760 <conversion2+0x58>
	{
		temperature = (voltage - 0.18)/0.0395;
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7fe fee7 	bl	8000500 <__aeabi_f2d>
 8001732:	a31d      	add	r3, pc, #116	; (adr r3, 80017a8 <conversion2+0xa0>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	f7fe fd82 	bl	8000240 <__aeabi_dsub>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	a31a      	add	r3, pc, #104	; (adr r3, 80017b0 <conversion2+0xa8>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	f7ff f85b 	bl	8000804 <__aeabi_ddiv>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fa23 	bl	8000ba0 <__aeabi_d2f>
 800175a:	4603      	mov	r3, r0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	e018      	b.n	8001792 <conversion2+0x8a>
	}else{
		temperature = (voltage - 0.37)/0.0354;
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7fe fecd 	bl	8000500 <__aeabi_f2d>
 8001766:	a314      	add	r3, pc, #80	; (adr r3, 80017b8 <conversion2+0xb0>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	f7fe fd68 	bl	8000240 <__aeabi_dsub>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4610      	mov	r0, r2
 8001776:	4619      	mov	r1, r3
 8001778:	a311      	add	r3, pc, #68	; (adr r3, 80017c0 <conversion2+0xb8>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7ff f841 	bl	8000804 <__aeabi_ddiv>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff fa09 	bl	8000ba0 <__aeabi_d2f>
 800178e:	4603      	mov	r3, r0
 8001790:	60fb      	str	r3, [r7, #12]
	}

	return temperature;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	f3af 8000 	nop.w
 80017a0:	3f7ced91 	.word	0x3f7ced91
 80017a4:	3ffe5e35 	.word	0x3ffe5e35
 80017a8:	70a3d70a 	.word	0x70a3d70a
 80017ac:	3fc70a3d 	.word	0x3fc70a3d
 80017b0:	10624dd3 	.word	0x10624dd3
 80017b4:	3fa43958 	.word	0x3fa43958
 80017b8:	7ae147ae 	.word	0x7ae147ae
 80017bc:	3fd7ae14 	.word	0x3fd7ae14
 80017c0:	e48e8a72 	.word	0xe48e8a72
 80017c4:	3fa21ff2 	.word	0x3fa21ff2

080017c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_ADC1_Init+0x74>)
 80017da:	4a19      	ldr	r2, [pc, #100]	; (8001840 <MX_ADC1_Init+0x78>)
 80017dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <MX_ADC1_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_ADC1_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_ADC1_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_ADC1_Init+0x74>)
 80017f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80017f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017f8:	4b10      	ldr	r3, [pc, #64]	; (800183c <MX_ADC1_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_ADC1_Init+0x74>)
 8001800:	2201      	movs	r2, #1
 8001802:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001804:	480d      	ldr	r0, [pc, #52]	; (800183c <MX_ADC1_Init+0x74>)
 8001806:	f005 fe2d 	bl	8007464 <HAL_ADC_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001810:	f005 f972 	bl	8006af8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001814:	2301      	movs	r3, #1
 8001816:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001818:	2301      	movs	r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_ADC1_Init+0x74>)
 8001826:	f006 f8c3 	bl	80079b0 <HAL_ADC_ConfigChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001830:	f005 f962 	bl	8006af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000029c 	.word	0x2000029c
 8001840:	40012400 	.word	0x40012400

08001844 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a2d      	ldr	r2, [pc, #180]	; (8001914 <HAL_ADC_MspInit+0xd0>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d152      	bne.n	800190a <HAL_ADC_MspInit+0xc6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001864:	4b2c      	ldr	r3, [pc, #176]	; (8001918 <HAL_ADC_MspInit+0xd4>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a2b      	ldr	r2, [pc, #172]	; (8001918 <HAL_ADC_MspInit+0xd4>)
 800186a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b29      	ldr	r3, [pc, #164]	; (8001918 <HAL_ADC_MspInit+0xd4>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4b26      	ldr	r3, [pc, #152]	; (8001918 <HAL_ADC_MspInit+0xd4>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a25      	ldr	r2, [pc, #148]	; (8001918 <HAL_ADC_MspInit+0xd4>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b23      	ldr	r3, [pc, #140]	; (8001918 <HAL_ADC_MspInit+0xd4>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001894:	2302      	movs	r3, #2
 8001896:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001898:	2303      	movs	r3, #3
 800189a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 0310 	add.w	r3, r7, #16
 80018a0:	4619      	mov	r1, r3
 80018a2:	481e      	ldr	r0, [pc, #120]	; (800191c <HAL_ADC_MspInit+0xd8>)
 80018a4:	f006 ffce 	bl	8008844 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80018a8:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_ADC_MspInit+0xdc>)
 80018aa:	4a1e      	ldr	r2, [pc, #120]	; (8001924 <HAL_ADC_MspInit+0xe0>)
 80018ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <HAL_ADC_MspInit+0xdc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_ADC_MspInit+0xdc>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_ADC_MspInit+0xdc>)
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_ADC_MspInit+0xdc>)
 80018c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018c8:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_ADC_MspInit+0xdc>)
 80018ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <HAL_ADC_MspInit+0xdc>)
 80018d2:	2220      	movs	r2, #32
 80018d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_ADC_MspInit+0xdc>)
 80018d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018de:	4810      	ldr	r0, [pc, #64]	; (8001920 <HAL_ADC_MspInit+0xdc>)
 80018e0:	f006 fb68 	bl	8007fb4 <HAL_DMA_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80018ea:	f005 f905 	bl	8006af8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_ADC_MspInit+0xdc>)
 80018f2:	621a      	str	r2, [r3, #32]
 80018f4:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_ADC_MspInit+0xdc>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	2012      	movs	r0, #18
 8001900:	f006 fb21 	bl	8007f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001904:	2012      	movs	r0, #18
 8001906:	f006 fb3a 	bl	8007f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800190a:	bf00      	nop
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40012400 	.word	0x40012400
 8001918:	40021000 	.word	0x40021000
 800191c:	40010800 	.word	0x40010800
 8001920:	200002cc 	.word	0x200002cc
 8001924:	40020008 	.word	0x40020008

08001928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_DMA_Init+0x38>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <MX_DMA_Init+0x38>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6153      	str	r3, [r2, #20]
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_DMA_Init+0x38>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	200b      	movs	r0, #11
 800194c:	f006 fafb 	bl	8007f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001950:	200b      	movs	r0, #11
 8001952:	f006 fb14 	bl	8007f7e <HAL_NVIC_EnableIRQ>

}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000

08001964 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram4;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08e      	sub	sp, #56	; 0x38
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]
 800197a:	615a      	str	r2, [r3, #20]
 800197c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800197e:	463b      	mov	r3, r7
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
 800198c:	615a      	str	r2, [r3, #20]
 800198e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM4 memory initialization sequence
  */
  hsram4.Instance = FSMC_NORSRAM_DEVICE;
 8001990:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <MX_FSMC_Init+0xf0>)
 8001992:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001996:	601a      	str	r2, [r3, #0]
  hsram4.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001998:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <MX_FSMC_Init+0xf0>)
 800199a:	4a2f      	ldr	r2, [pc, #188]	; (8001a58 <MX_FSMC_Init+0xf4>)
 800199c:	605a      	str	r2, [r3, #4]
  /* hsram4.Init */
  hsram4.Init.NSBank = FSMC_NORSRAM_BANK4;
 800199e:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <MX_FSMC_Init+0xf0>)
 80019a0:	2206      	movs	r2, #6
 80019a2:	609a      	str	r2, [r3, #8]
  hsram4.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80019a4:	4b2b      	ldr	r3, [pc, #172]	; (8001a54 <MX_FSMC_Init+0xf0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  hsram4.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <MX_FSMC_Init+0xf0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  hsram4.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80019b0:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <MX_FSMC_Init+0xf0>)
 80019b2:	2210      	movs	r2, #16
 80019b4:	615a      	str	r2, [r3, #20]
  hsram4.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80019b6:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <MX_FSMC_Init+0xf0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  hsram4.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <MX_FSMC_Init+0xf0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  hsram4.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <MX_FSMC_Init+0xf0>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
  hsram4.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <MX_FSMC_Init+0xf0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	; 0x24
  hsram4.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <MX_FSMC_Init+0xf0>)
 80019d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram4.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80019d6:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <MX_FSMC_Init+0xf0>)
 80019d8:	2200      	movs	r2, #0
 80019da:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram4.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <MX_FSMC_Init+0xf0>)
 80019de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019e2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram4.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	; (8001a54 <MX_FSMC_Init+0xf0>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram4.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <MX_FSMC_Init+0xf0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 1;
 80019f0:	2301      	movs	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80019f4:	230f      	movs	r3, #15
 80019f6:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 80019f8:	230f      	movs	r3, #15
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 80019fc:	230f      	movs	r3, #15
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001a00:	2310      	movs	r3, #16
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001a04:	2311      	movs	r3, #17
 8001a06:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001a10:	230f      	movs	r3, #15
 8001a12:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 15;
 8001a14:	230f      	movs	r3, #15
 8001a16:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8001a18:	230f      	movs	r3, #15
 8001a1a:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001a1c:	2310      	movs	r3, #16
 8001a1e:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001a20:	2311      	movs	r3, #17
 8001a22:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram4, &Timing, &ExtTiming) != HAL_OK)
 8001a28:	463a      	mov	r2, r7
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4808      	ldr	r0, [pc, #32]	; (8001a54 <MX_FSMC_Init+0xf0>)
 8001a32:	f007 fd83 	bl	800953c <HAL_SRAM_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 8001a3c:	f005 f85c 	bl	8006af8 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <MX_FSMC_Init+0xf8>)
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <MX_FSMC_Init+0xf8>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001a4c:	bf00      	nop
 8001a4e:	3738      	adds	r7, #56	; 0x38
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000310 	.word	0x20000310
 8001a58:	a0000104 	.word	0xa0000104
 8001a5c:	40010000 	.word	0x40010000

08001a60 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001a74:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <HAL_FSMC_MspInit+0x94>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d136      	bne.n	8001aea <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <HAL_FSMC_MspInit+0x94>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_FSMC_MspInit+0x98>)
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	4a1c      	ldr	r2, [pc, #112]	; (8001af8 <HAL_FSMC_MspInit+0x98>)
 8001a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a8c:	6153      	str	r3, [r2, #20]
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <HAL_FSMC_MspInit+0x98>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8001a9a:	f241 0301 	movw	r3, #4097	; 0x1001
 8001a9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aa8:	f107 0308 	add.w	r3, r7, #8
 8001aac:	4619      	mov	r1, r3
 8001aae:	4813      	ldr	r0, [pc, #76]	; (8001afc <HAL_FSMC_MspInit+0x9c>)
 8001ab0:	f006 fec8 	bl	8008844 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001ab4:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001ab8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac2:	f107 0308 	add.w	r3, r7, #8
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <HAL_FSMC_MspInit+0xa0>)
 8001aca:	f006 febb 	bl	8008844 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001ace:	f24c 7333 	movw	r3, #50995	; 0xc733
 8001ad2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001adc:	f107 0308 	add.w	r3, r7, #8
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4808      	ldr	r0, [pc, #32]	; (8001b04 <HAL_FSMC_MspInit+0xa4>)
 8001ae4:	f006 feae 	bl	8008844 <HAL_GPIO_Init>
 8001ae8:	e000      	b.n	8001aec <HAL_FSMC_MspInit+0x8c>
    return;
 8001aea:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000248 	.word	0x20000248
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40012000 	.word	0x40012000
 8001b00:	40011800 	.word	0x40011800
 8001b04:	40011400 	.word	0x40011400

08001b08 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001b10:	f7ff ffa6 	bl	8001a60 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b22:	f107 0318 	add.w	r3, r7, #24
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b30:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a43      	ldr	r2, [pc, #268]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b41      	ldr	r3, [pc, #260]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a3d      	ldr	r2, [pc, #244]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b60:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a37      	ldr	r2, [pc, #220]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b66:	f043 0308 	orr.w	r3, r3, #8
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0308 	and.w	r3, r3, #8
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b78:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	4a31      	ldr	r2, [pc, #196]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6193      	str	r3, [r2, #24]
 8001b84:	4b2f      	ldr	r3, [pc, #188]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b90:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	4a2b      	ldr	r2, [pc, #172]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b96:	f043 0320 	orr.w	r3, r3, #32
 8001b9a:	6193      	str	r3, [r2, #24]
 8001b9c:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <MX_GPIO_Init+0x128>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f003 0320 	and.w	r3, r3, #32
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2120      	movs	r1, #32
 8001bac:	4826      	ldr	r0, [pc, #152]	; (8001c48 <MX_GPIO_Init+0x12c>)
 8001bae:	f006 ffdd 	bl	8008b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|BEEP_Pin, GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f240 1101 	movw	r1, #257	; 0x101
 8001bb8:	4824      	ldr	r0, [pc, #144]	; (8001c4c <MX_GPIO_Init+0x130>)
 8001bba:	f006 ffd7 	bl	8008b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2120      	movs	r1, #32
 8001bc2:	4822      	ldr	r0, [pc, #136]	; (8001c4c <MX_GPIO_Init+0x130>)
 8001bc4:	f006 ffd2 	bl	8008b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	4619      	mov	r1, r3
 8001bde:	481a      	ldr	r0, [pc, #104]	; (8001c48 <MX_GPIO_Init+0x12c>)
 8001be0:	f006 fe30 	bl	8008844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001be4:	2301      	movs	r3, #1
 8001be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be8:	2301      	movs	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf4:	f107 0318 	add.w	r3, r7, #24
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4814      	ldr	r0, [pc, #80]	; (8001c4c <MX_GPIO_Init+0x130>)
 8001bfc:	f006 fe22 	bl	8008844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001c00:	2320      	movs	r3, #32
 8001c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001c10:	f107 0318 	add.w	r3, r7, #24
 8001c14:	4619      	mov	r1, r3
 8001c16:	480d      	ldr	r0, [pc, #52]	; (8001c4c <MX_GPIO_Init+0x130>)
 8001c18:	f006 fe14 	bl	8008844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8001c1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c22:	2301      	movs	r3, #1
 8001c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c26:	2302      	movs	r3, #2
 8001c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8001c2e:	f107 0318 	add.w	r3, r7, #24
 8001c32:	4619      	mov	r1, r3
 8001c34:	4805      	ldr	r0, [pc, #20]	; (8001c4c <MX_GPIO_Init+0x130>)
 8001c36:	f006 fe05 	bl	8008844 <HAL_GPIO_Init>

}
 8001c3a:	bf00      	nop
 8001c3c:	3728      	adds	r7, #40	; 0x28
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40011800 	.word	0x40011800
 8001c4c:	40010c00 	.word	0x40010c00

08001c50 <delay_us>:

/**
 * @brief 微秒级延时，参考F103的库实现
 * @retval None
 */
void delay_us(uint32_t duration) {
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  //见stm32f1xx_hal_rcc.c -- static void RCC_Delay(uint32_t mdelay)
  __IO uint32_t Delay = duration * (SystemCoreClock / 8U / 1000000U);
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <delay_us+0x34>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <delay_us+0x38>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	0d5b      	lsrs	r3, r3, #21
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	60fb      	str	r3, [r7, #12]
  do {
	__NOP();
 8001c6c:	bf00      	nop
  } while (Delay--);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	1e5a      	subs	r2, r3, #1
 8001c72:	60fa      	str	r2, [r7, #12]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f9      	bne.n	8001c6c <delay_us+0x1c>
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	3714      	adds	r7, #20
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	20000010 	.word	0x20000010
 8001c88:	431bde83 	.word	0x431bde83

08001c8c <LCD_WR_REG>:

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(uint16_t regval)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=regval;//写入要写的寄存器序号
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <LCD_WR_REG+0x1c>)
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	8013      	strh	r3, [r2, #0]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	6c0007fe 	.word	0x6c0007fe

08001cac <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(uint16_t data)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001cb6:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <LCD_WR_DATA+0x1c>)
 8001cb8:	88fb      	ldrh	r3, [r7, #6]
 8001cba:	8053      	strh	r3, [r2, #2]
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	6c0007fe 	.word	0x6c0007fe

08001ccc <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
	uint16_t ram;			//防止被优化
	ram=LCD->LCD_RAM;
 8001cd2:	4b04      	ldr	r3, [pc, #16]	; (8001ce4 <LCD_RD_DATA+0x18>)
 8001cd4:	885b      	ldrh	r3, [r3, #2]
 8001cd6:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr
 8001ce4:	6c0007fe 	.word	0x6c0007fe

08001ce8 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	80fb      	strh	r3, [r7, #6]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 8001cf8:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <LCD_WriteReg+0x28>)
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//写入数据
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <LCD_WriteReg+0x28>)
 8001d00:	88bb      	ldrh	r3, [r7, #4]
 8001d02:	8053      	strh	r3, [r2, #2]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	6c0007fe 	.word	0x6c0007fe

08001d14 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器地址
//返回值:读到的数据
uint16_t LCD_ReadReg(uint16_t LCD_Reg)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);		//写入要读的寄存器序号
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ffb3 	bl	8001c8c <LCD_WR_REG>
	delay_us(5);
 8001d26:	2005      	movs	r0, #5
 8001d28:	f7ff ff92 	bl	8001c50 <delay_us>
	return LCD_RD_DATA();		//返回读到的值
 8001d2c:	f7ff ffce 	bl	8001ccc <LCD_RD_DATA>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
 	LCD->LCD_REG=lcddev.wramcmd;
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <LCD_WriteRAM_Prepare+0x14>)
 8001d42:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <LCD_WriteRAM_Prepare+0x18>)
 8001d44:	8912      	ldrh	r2, [r2, #8]
 8001d46:	801a      	strh	r2, [r3, #0]
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr
 8001d50:	6c0007fe 	.word	0x6c0007fe
 8001d54:	20000358 	.word	0x20000358

08001d58 <LCD_SetCursor>:
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460a      	mov	r2, r1
 8001d62:	80fb      	strh	r3, [r7, #6]
 8001d64:	4613      	mov	r3, r2
 8001d66:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001d68:	4b92      	ldr	r3, [pc, #584]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001d6a:	889b      	ldrh	r3, [r3, #4]
 8001d6c:	f249 3241 	movw	r2, #37697	; 0x9341
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d005      	beq.n	8001d80 <LCD_SetCursor+0x28>
 8001d74:	4b8f      	ldr	r3, [pc, #572]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001d76:	889b      	ldrh	r3, [r3, #4]
 8001d78:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d122      	bne.n	8001dc6 <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8001d80:	4b8c      	ldr	r3, [pc, #560]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001d82:	895b      	ldrh	r3, [r3, #10]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff81 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff8b 	bl	8001cac <LCD_WR_DATA>
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff85 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001da2:	4b84      	ldr	r3, [pc, #528]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001da4:	899b      	ldrh	r3, [r3, #12]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff70 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8001dac:	88bb      	ldrh	r3, [r7, #4]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff ff7a 	bl	8001cac <LCD_WR_DATA>
 8001db8:	88bb      	ldrh	r3, [r7, #4]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff74 	bl	8001cac <LCD_WR_DATA>
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8001dc4:	e0f1      	b.n	8001faa <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X6804)
 8001dc6:	4b7b      	ldr	r3, [pc, #492]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001dc8:	889b      	ldrh	r3, [r3, #4]
 8001dca:	f646 0204 	movw	r2, #26628	; 0x6804
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d12d      	bne.n	8001e2e <LCD_SetCursor+0xd6>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏时处理
 8001dd2:	4b78      	ldr	r3, [pc, #480]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001dd4:	799b      	ldrb	r3, [r3, #6]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d106      	bne.n	8001de8 <LCD_SetCursor+0x90>
 8001dda:	4b76      	ldr	r3, [pc, #472]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001ddc:	881a      	ldrh	r2, [r3, #0]
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001de8:	4b72      	ldr	r3, [pc, #456]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001dea:	895b      	ldrh	r3, [r3, #10]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff4d 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001df2:	88fb      	ldrh	r3, [r7, #6]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff57 	bl	8001cac <LCD_WR_DATA>
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff ff51 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001e0a:	4b6a      	ldr	r3, [pc, #424]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001e0c:	899b      	ldrh	r3, [r3, #12]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff3c 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8001e14:	88bb      	ldrh	r3, [r7, #4]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff ff46 	bl	8001cac <LCD_WR_DATA>
 8001e20:	88bb      	ldrh	r3, [r7, #4]
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff40 	bl	8001cac <LCD_WR_DATA>
}
 8001e2c:	e0bd      	b.n	8001faa <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X1963)
 8001e2e:	4b61      	ldr	r3, [pc, #388]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001e30:	889b      	ldrh	r3, [r3, #4]
 8001e32:	f641 1263 	movw	r2, #6499	; 0x1963
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d167      	bne.n	8001f0a <LCD_SetCursor+0x1b2>
		if(lcddev.dir==0)//x坐标需要变换
 8001e3a:	4b5e      	ldr	r3, [pc, #376]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001e3c:	799b      	ldrb	r3, [r3, #6]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d11e      	bne.n	8001e80 <LCD_SetCursor+0x128>
			Xpos=lcddev.width-1-Xpos;
 8001e42:	4b5c      	ldr	r3, [pc, #368]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001e44:	881a      	ldrh	r2, [r3, #0]
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8001e50:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001e52:	895b      	ldrh	r3, [r3, #10]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff19 	bl	8001c8c <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f7ff ff26 	bl	8001cac <LCD_WR_DATA>
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff ff23 	bl	8001cac <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff1d 	bl	8001cac <LCD_WR_DATA>
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff17 	bl	8001cac <LCD_WR_DATA>
 8001e7e:	e021      	b.n	8001ec4 <LCD_SetCursor+0x16c>
			LCD_WR_REG(lcddev.setxcmd);
 8001e80:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001e82:	895b      	ldrh	r3, [r3, #10]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff01 	bl	8001c8c <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ff0b 	bl	8001cac <LCD_WR_DATA>
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff05 	bl	8001cac <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001ea2:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	121b      	asrs	r3, r3, #8
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fefd 	bl	8001cac <LCD_WR_DATA>
 8001eb2:	4b40      	ldr	r3, [pc, #256]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fef4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001ec4:	4b3b      	ldr	r3, [pc, #236]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001ec6:	899b      	ldrh	r3, [r3, #12]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fedf 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8001ece:	88bb      	ldrh	r3, [r7, #4]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fee9 	bl	8001cac <LCD_WR_DATA>
 8001eda:	88bb      	ldrh	r3, [r7, #4]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fee3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001ee6:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001ee8:	885b      	ldrh	r3, [r3, #2]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	121b      	asrs	r3, r3, #8
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fedb 	bl	8001cac <LCD_WR_DATA>
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001ef8:	885b      	ldrh	r3, [r3, #2]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fed2 	bl	8001cac <LCD_WR_DATA>
}
 8001f08:	e04f      	b.n	8001faa <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X5510)
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001f0c:	889b      	ldrh	r3, [r3, #4]
 8001f0e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d130      	bne.n	8001f78 <LCD_SetCursor+0x220>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 8001f16:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001f18:	895b      	ldrh	r3, [r3, #10]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff feb6 	bl	8001c8c <LCD_WR_REG>
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fec0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 8001f2c:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001f2e:	895b      	ldrh	r3, [r3, #10]
 8001f30:	3301      	adds	r3, #1
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fea9 	bl	8001c8c <LCD_WR_REG>
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff feb3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 8001f46:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001f48:	899b      	ldrh	r3, [r3, #12]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fe9e 	bl	8001c8c <LCD_WR_REG>
 8001f50:	88bb      	ldrh	r3, [r7, #4]
 8001f52:	0a1b      	lsrs	r3, r3, #8
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fea8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 8001f5c:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001f5e:	899b      	ldrh	r3, [r3, #12]
 8001f60:	3301      	adds	r3, #1
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fe91 	bl	8001c8c <LCD_WR_REG>
 8001f6a:	88bb      	ldrh	r3, [r7, #4]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff fe9b 	bl	8001cac <LCD_WR_DATA>
}
 8001f76:	e018      	b.n	8001faa <LCD_SetCursor+0x252>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001f7a:	799b      	ldrb	r3, [r3, #6]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d106      	bne.n	8001f8e <LCD_SetCursor+0x236>
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001f82:	881a      	ldrh	r2, [r3, #0]
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001f90:	895b      	ldrh	r3, [r3, #10]
 8001f92:	88fa      	ldrh	r2, [r7, #6]
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fea6 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <LCD_SetCursor+0x25c>)
 8001f9e:	899b      	ldrh	r3, [r3, #12]
 8001fa0:	88ba      	ldrh	r2, [r7, #4]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fe9f 	bl	8001ce8 <LCD_WriteReg>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000358 	.word	0x20000358

08001fb8 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X6804&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8001fca:	4b78      	ldr	r3, [pc, #480]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8001fcc:	799b      	ldrb	r3, [r3, #6]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d10b      	bne.n	8001fea <LCD_Scan_Dir+0x32>
 8001fd2:	4b76      	ldr	r3, [pc, #472]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8001fd4:	889b      	ldrh	r3, [r3, #4]
 8001fd6:	f646 0204 	movw	r2, #26628	; 0x6804
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d005      	beq.n	8001fea <LCD_Scan_Dir+0x32>
 8001fde:	4b73      	ldr	r3, [pc, #460]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8001fe0:	889b      	ldrh	r3, [r3, #4]
 8001fe2:	f641 1263 	movw	r2, #6499	; 0x1963
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d109      	bne.n	8001ffe <LCD_Scan_Dir+0x46>
 8001fea:	4b70      	ldr	r3, [pc, #448]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8001fec:	799b      	ldrb	r3, [r3, #6]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d134      	bne.n	800205c <LCD_Scan_Dir+0xa4>
 8001ff2:	4b6e      	ldr	r3, [pc, #440]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8001ff4:	889b      	ldrh	r3, [r3, #4]
 8001ff6:	f641 1263 	movw	r2, #6499	; 0x1963
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d12e      	bne.n	800205c <LCD_Scan_Dir+0xa4>
	{
		switch(dir)//方向转换
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	2b07      	cmp	r3, #7
 8002002:	d82c      	bhi.n	800205e <LCD_Scan_Dir+0xa6>
 8002004:	a201      	add	r2, pc, #4	; (adr r2, 800200c <LCD_Scan_Dir+0x54>)
 8002006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200a:	bf00      	nop
 800200c:	0800202d 	.word	0x0800202d
 8002010:	08002033 	.word	0x08002033
 8002014:	08002039 	.word	0x08002039
 8002018:	0800203f 	.word	0x0800203f
 800201c:	08002045 	.word	0x08002045
 8002020:	0800204b 	.word	0x0800204b
 8002024:	08002051 	.word	0x08002051
 8002028:	08002057 	.word	0x08002057
		{
			case 0:dir=6;break;
 800202c:	2306      	movs	r3, #6
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	e015      	b.n	800205e <LCD_Scan_Dir+0xa6>
			case 1:dir=7;break;
 8002032:	2307      	movs	r3, #7
 8002034:	71fb      	strb	r3, [r7, #7]
 8002036:	e012      	b.n	800205e <LCD_Scan_Dir+0xa6>
			case 2:dir=4;break;
 8002038:	2304      	movs	r3, #4
 800203a:	71fb      	strb	r3, [r7, #7]
 800203c:	e00f      	b.n	800205e <LCD_Scan_Dir+0xa6>
			case 3:dir=5;break;
 800203e:	2305      	movs	r3, #5
 8002040:	71fb      	strb	r3, [r7, #7]
 8002042:	e00c      	b.n	800205e <LCD_Scan_Dir+0xa6>
			case 4:dir=1;break;
 8002044:	2301      	movs	r3, #1
 8002046:	71fb      	strb	r3, [r7, #7]
 8002048:	e009      	b.n	800205e <LCD_Scan_Dir+0xa6>
			case 5:dir=0;break;
 800204a:	2300      	movs	r3, #0
 800204c:	71fb      	strb	r3, [r7, #7]
 800204e:	e006      	b.n	800205e <LCD_Scan_Dir+0xa6>
			case 6:dir=3;break;
 8002050:	2303      	movs	r3, #3
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	e003      	b.n	800205e <LCD_Scan_Dir+0xa6>
			case 7:dir=2;break;
 8002056:	2302      	movs	r3, #2
 8002058:	71fb      	strb	r3, [r7, #7]
 800205a:	e000      	b.n	800205e <LCD_Scan_Dir+0xa6>
		}
	}
 800205c:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/6804/5310/5510/1963,特殊处理
 800205e:	4b53      	ldr	r3, [pc, #332]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8002060:	889b      	ldrh	r3, [r3, #4]
 8002062:	f249 3241 	movw	r2, #37697	; 0x9341
 8002066:	4293      	cmp	r3, r2
 8002068:	d018      	beq.n	800209c <LCD_Scan_Dir+0xe4>
 800206a:	4b50      	ldr	r3, [pc, #320]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 800206c:	889b      	ldrh	r3, [r3, #4]
 800206e:	f646 0204 	movw	r2, #26628	; 0x6804
 8002072:	4293      	cmp	r3, r2
 8002074:	d012      	beq.n	800209c <LCD_Scan_Dir+0xe4>
 8002076:	4b4d      	ldr	r3, [pc, #308]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8002078:	889b      	ldrh	r3, [r3, #4]
 800207a:	f245 3210 	movw	r2, #21264	; 0x5310
 800207e:	4293      	cmp	r3, r2
 8002080:	d00c      	beq.n	800209c <LCD_Scan_Dir+0xe4>
 8002082:	4b4a      	ldr	r3, [pc, #296]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8002084:	889b      	ldrh	r3, [r3, #4]
 8002086:	f245 5210 	movw	r2, #21776	; 0x5510
 800208a:	4293      	cmp	r3, r2
 800208c:	d006      	beq.n	800209c <LCD_Scan_Dir+0xe4>
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8002090:	889b      	ldrh	r3, [r3, #4]
 8002092:	f641 1263 	movw	r2, #6499	; 0x1963
 8002096:	4293      	cmp	r3, r2
 8002098:	f040 813c 	bne.w	8002314 <LCD_Scan_Dir+0x35c>
	{
		switch(dir)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	2b07      	cmp	r3, #7
 80020a0:	d835      	bhi.n	800210e <LCD_Scan_Dir+0x156>
 80020a2:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <LCD_Scan_Dir+0xf0>)
 80020a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a8:	0800210f 	.word	0x0800210f
 80020ac:	080020c9 	.word	0x080020c9
 80020b0:	080020d3 	.word	0x080020d3
 80020b4:	080020dd 	.word	0x080020dd
 80020b8:	080020e7 	.word	0x080020e7
 80020bc:	080020f1 	.word	0x080020f1
 80020c0:	080020fb 	.word	0x080020fb
 80020c4:	08002105 	.word	0x08002105
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 80020c8:	89fb      	ldrh	r3, [r7, #14]
 80020ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020ce:	81fb      	strh	r3, [r7, #14]
				break;
 80020d0:	e01d      	b.n	800210e <LCD_Scan_Dir+0x156>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d8:	81fb      	strh	r3, [r7, #14]
				break;
 80020da:	e018      	b.n	800210e <LCD_Scan_Dir+0x156>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 80020dc:	89fb      	ldrh	r3, [r7, #14]
 80020de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80020e2:	81fb      	strh	r3, [r7, #14]
				break;
 80020e4:	e013      	b.n	800210e <LCD_Scan_Dir+0x156>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 80020e6:	89fb      	ldrh	r3, [r7, #14]
 80020e8:	f043 0320 	orr.w	r3, r3, #32
 80020ec:	81fb      	strh	r3, [r7, #14]
				break;
 80020ee:	e00e      	b.n	800210e <LCD_Scan_Dir+0x156>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 80020f0:	89fb      	ldrh	r3, [r7, #14]
 80020f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020f6:	81fb      	strh	r3, [r7, #14]
				break;
 80020f8:	e009      	b.n	800210e <LCD_Scan_Dir+0x156>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 80020fa:	89fb      	ldrh	r3, [r7, #14]
 80020fc:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002100:	81fb      	strh	r3, [r7, #14]
				break;
 8002102:	e004      	b.n	800210e <LCD_Scan_Dir+0x156>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 8002104:	89fb      	ldrh	r3, [r7, #14]
 8002106:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800210a:	81fb      	strh	r3, [r7, #14]
				break;
 800210c:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 800210e:	4b27      	ldr	r3, [pc, #156]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8002110:	889b      	ldrh	r3, [r3, #4]
 8002112:	f245 5210 	movw	r2, #21776	; 0x5510
 8002116:	4293      	cmp	r3, r2
 8002118:	d103      	bne.n	8002122 <LCD_Scan_Dir+0x16a>
 800211a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800211e:	81bb      	strh	r3, [r7, #12]
 8002120:	e001      	b.n	8002126 <LCD_Scan_Dir+0x16e>
		else dirreg=0X36;
 8002122:	2336      	movs	r3, #54	; 0x36
 8002124:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 8002126:	4b21      	ldr	r3, [pc, #132]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8002128:	889b      	ldrh	r3, [r3, #4]
 800212a:	f245 3210 	movw	r2, #21264	; 0x5310
 800212e:	4293      	cmp	r3, r2
 8002130:	d00f      	beq.n	8002152 <LCD_Scan_Dir+0x19a>
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8002134:	889b      	ldrh	r3, [r3, #4]
 8002136:	f245 5210 	movw	r2, #21776	; 0x5510
 800213a:	4293      	cmp	r3, r2
 800213c:	d009      	beq.n	8002152 <LCD_Scan_Dir+0x19a>
 800213e:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8002140:	889b      	ldrh	r3, [r3, #4]
 8002142:	f641 1263 	movw	r2, #6499	; 0x1963
 8002146:	4293      	cmp	r3, r2
 8002148:	d003      	beq.n	8002152 <LCD_Scan_Dir+0x19a>
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	f043 0308 	orr.w	r3, r3, #8
 8002150:	81fb      	strh	r3, [r7, #14]
		if(lcddev.id==0X6804)regval|=0x02;//6804的BIT6和9341的反了
 8002152:	4b16      	ldr	r3, [pc, #88]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8002154:	889b      	ldrh	r3, [r3, #4]
 8002156:	f646 0204 	movw	r2, #26628	; 0x6804
 800215a:	4293      	cmp	r3, r2
 800215c:	d103      	bne.n	8002166 <LCD_Scan_Dir+0x1ae>
 800215e:	89fb      	ldrh	r3, [r7, #14]
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8002166:	89fa      	ldrh	r2, [r7, #14]
 8002168:	89bb      	ldrh	r3, [r7, #12]
 800216a:	4611      	mov	r1, r2
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fdbb 	bl	8001ce8 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8002174:	889b      	ldrh	r3, [r3, #4]
 8002176:	f641 1263 	movw	r2, #6499	; 0x1963
 800217a:	4293      	cmp	r3, r2
 800217c:	d028      	beq.n	80021d0 <LCD_Scan_Dir+0x218>
		{
			if(regval&0X20)
 800217e:	89fb      	ldrh	r3, [r7, #14]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <LCD_Scan_Dir+0x1f8>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 8002188:	4b08      	ldr	r3, [pc, #32]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 800218a:	881a      	ldrh	r2, [r3, #0]
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 800218e:	885b      	ldrh	r3, [r3, #2]
 8002190:	429a      	cmp	r2, r3
 8002192:	d21d      	bcs.n	80021d0 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8002194:	4b05      	ldr	r3, [pc, #20]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 800219a:	4b04      	ldr	r3, [pc, #16]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 800219c:	885a      	ldrh	r2, [r3, #2]
 800219e:	4b03      	ldr	r3, [pc, #12]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 80021a0:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80021a2:	4a02      	ldr	r2, [pc, #8]	; (80021ac <LCD_Scan_Dir+0x1f4>)
 80021a4:	897b      	ldrh	r3, [r7, #10]
 80021a6:	8053      	strh	r3, [r2, #2]
 80021a8:	e012      	b.n	80021d0 <LCD_Scan_Dir+0x218>
 80021aa:	bf00      	nop
 80021ac:	20000358 	.word	0x20000358
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 80021b0:	4b7d      	ldr	r3, [pc, #500]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 80021b2:	881a      	ldrh	r2, [r3, #0]
 80021b4:	4b7c      	ldr	r3, [pc, #496]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 80021b6:	885b      	ldrh	r3, [r3, #2]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d909      	bls.n	80021d0 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 80021bc:	4b7a      	ldr	r3, [pc, #488]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80021c2:	4b79      	ldr	r3, [pc, #484]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 80021c4:	885a      	ldrh	r2, [r3, #2]
 80021c6:	4b78      	ldr	r3, [pc, #480]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 80021c8:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80021ca:	4a77      	ldr	r2, [pc, #476]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 80021cc:	897b      	ldrh	r3, [r7, #10]
 80021ce:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 80021d0:	4b75      	ldr	r3, [pc, #468]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 80021d2:	889b      	ldrh	r3, [r3, #4]
 80021d4:	f245 5210 	movw	r2, #21776	; 0x5510
 80021d8:	4293      	cmp	r3, r2
 80021da:	d162      	bne.n	80022a2 <LCD_Scan_Dir+0x2ea>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 80021dc:	4b72      	ldr	r3, [pc, #456]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 80021de:	895b      	ldrh	r3, [r3, #10]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fd53 	bl	8001c8c <LCD_WR_REG>
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7ff fd60 	bl	8001cac <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 80021ec:	4b6e      	ldr	r3, [pc, #440]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 80021ee:	895b      	ldrh	r3, [r3, #10]
 80021f0:	3301      	adds	r3, #1
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff fd49 	bl	8001c8c <LCD_WR_REG>
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff fd56 	bl	8001cac <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 8002200:	4b69      	ldr	r3, [pc, #420]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 8002202:	895b      	ldrh	r3, [r3, #10]
 8002204:	3302      	adds	r3, #2
 8002206:	b29b      	uxth	r3, r3
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fd3f 	bl	8001c8c <LCD_WR_REG>
 800220e:	4b66      	ldr	r3, [pc, #408]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	3b01      	subs	r3, #1
 8002214:	121b      	asrs	r3, r3, #8
 8002216:	b29b      	uxth	r3, r3
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fd47 	bl	8001cac <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 800221e:	4b62      	ldr	r3, [pc, #392]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 8002220:	895b      	ldrh	r3, [r3, #10]
 8002222:	3303      	adds	r3, #3
 8002224:	b29b      	uxth	r3, r3
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fd30 	bl	8001c8c <LCD_WR_REG>
 800222c:	4b5e      	ldr	r3, [pc, #376]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	3b01      	subs	r3, #1
 8002232:	b29b      	uxth	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	b29b      	uxth	r3, r3
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fd37 	bl	8001cac <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 800223e:	4b5a      	ldr	r3, [pc, #360]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 8002240:	899b      	ldrh	r3, [r3, #12]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fd22 	bl	8001c8c <LCD_WR_REG>
 8002248:	2000      	movs	r0, #0
 800224a:	f7ff fd2f 	bl	8001cac <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 800224e:	4b56      	ldr	r3, [pc, #344]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 8002250:	899b      	ldrh	r3, [r3, #12]
 8002252:	3301      	adds	r3, #1
 8002254:	b29b      	uxth	r3, r3
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff fd18 	bl	8001c8c <LCD_WR_REG>
 800225c:	2000      	movs	r0, #0
 800225e:	f7ff fd25 	bl	8001cac <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 8002262:	4b51      	ldr	r3, [pc, #324]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 8002264:	899b      	ldrh	r3, [r3, #12]
 8002266:	3302      	adds	r3, #2
 8002268:	b29b      	uxth	r3, r3
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fd0e 	bl	8001c8c <LCD_WR_REG>
 8002270:	4b4d      	ldr	r3, [pc, #308]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 8002272:	885b      	ldrh	r3, [r3, #2]
 8002274:	3b01      	subs	r3, #1
 8002276:	121b      	asrs	r3, r3, #8
 8002278:	b29b      	uxth	r3, r3
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fd16 	bl	8001cac <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8002280:	4b49      	ldr	r3, [pc, #292]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 8002282:	899b      	ldrh	r3, [r3, #12]
 8002284:	3303      	adds	r3, #3
 8002286:	b29b      	uxth	r3, r3
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fcff 	bl	8001c8c <LCD_WR_REG>
 800228e:	4b46      	ldr	r3, [pc, #280]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 8002290:	885b      	ldrh	r3, [r3, #2]
 8002292:	3b01      	subs	r3, #1
 8002294:	b29b      	uxth	r3, r3
 8002296:	b2db      	uxtb	r3, r3
 8002298:	b29b      	uxth	r3, r3
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fd06 	bl	8001cac <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 80022a0:	e07e      	b.n	80023a0 <LCD_Scan_Dir+0x3e8>
		}else
		{
			LCD_WR_REG(lcddev.setxcmd);
 80022a2:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 80022a4:	895b      	ldrh	r3, [r3, #10]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fcf0 	bl	8001c8c <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7ff fcfd 	bl	8001cac <LCD_WR_DATA>
 80022b2:	2000      	movs	r0, #0
 80022b4:	f7ff fcfa 	bl	8001cac <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 80022b8:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	3b01      	subs	r3, #1
 80022be:	121b      	asrs	r3, r3, #8
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fcf2 	bl	8001cac <LCD_WR_DATA>
 80022c8:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fce9 	bl	8001cac <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 80022da:	4b33      	ldr	r3, [pc, #204]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 80022dc:	899b      	ldrh	r3, [r3, #12]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fcd4 	bl	8001c8c <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff fce1 	bl	8001cac <LCD_WR_DATA>
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7ff fcde 	bl	8001cac <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80022f0:	4b2d      	ldr	r3, [pc, #180]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 80022f2:	885b      	ldrh	r3, [r3, #2]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	121b      	asrs	r3, r3, #8
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fcd6 	bl	8001cac <LCD_WR_DATA>
 8002300:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <LCD_Scan_Dir+0x3f0>)
 8002302:	885b      	ldrh	r3, [r3, #2]
 8002304:	3b01      	subs	r3, #1
 8002306:	b29b      	uxth	r3, r3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	b29b      	uxth	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff fccd 	bl	8001cac <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8002312:	e045      	b.n	80023a0 <LCD_Scan_Dir+0x3e8>
		}
  	}else
	{
		switch(dir)
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2b07      	cmp	r3, #7
 8002318:	d835      	bhi.n	8002386 <LCD_Scan_Dir+0x3ce>
 800231a:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <LCD_Scan_Dir+0x368>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	08002341 	.word	0x08002341
 8002324:	0800234b 	.word	0x0800234b
 8002328:	08002355 	.word	0x08002355
 800232c:	08002387 	.word	0x08002387
 8002330:	0800235f 	.word	0x0800235f
 8002334:	08002369 	.word	0x08002369
 8002338:	08002373 	.word	0x08002373
 800233c:	0800237d 	.word	0x0800237d
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(1<<5)|(1<<4)|(0<<3);
 8002340:	89fb      	ldrh	r3, [r7, #14]
 8002342:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002346:	81fb      	strh	r3, [r7, #14]
				break;
 8002348:	e01d      	b.n	8002386 <LCD_Scan_Dir+0x3ce>
			case L2R_D2U://从左到右,从下到上
				regval|=(0<<5)|(1<<4)|(0<<3);
 800234a:	89fb      	ldrh	r3, [r7, #14]
 800234c:	f043 0310 	orr.w	r3, r3, #16
 8002350:	81fb      	strh	r3, [r7, #14]
				break;
 8002352:	e018      	b.n	8002386 <LCD_Scan_Dir+0x3ce>
			case R2L_U2D://从右到左,从上到下
				regval|=(1<<5)|(0<<4)|(0<<3);
 8002354:	89fb      	ldrh	r3, [r7, #14]
 8002356:	f043 0320 	orr.w	r3, r3, #32
 800235a:	81fb      	strh	r3, [r7, #14]
				break;
 800235c:	e013      	b.n	8002386 <LCD_Scan_Dir+0x3ce>
			case R2L_D2U://从右到左,从下到上
				regval|=(0<<5)|(0<<4)|(0<<3);
				break;
			case U2D_L2R://从上到下,从左到右
				regval|=(1<<5)|(1<<4)|(1<<3);
 800235e:	89fb      	ldrh	r3, [r7, #14]
 8002360:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002364:	81fb      	strh	r3, [r7, #14]
				break;
 8002366:	e00e      	b.n	8002386 <LCD_Scan_Dir+0x3ce>
			case U2D_R2L://从上到下,从右到左
				regval|=(1<<5)|(0<<4)|(1<<3);
 8002368:	89fb      	ldrh	r3, [r7, #14]
 800236a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800236e:	81fb      	strh	r3, [r7, #14]
				break;
 8002370:	e009      	b.n	8002386 <LCD_Scan_Dir+0x3ce>
			case D2U_L2R://从下到上,从左到右
				regval|=(0<<5)|(1<<4)|(1<<3);
 8002372:	89fb      	ldrh	r3, [r7, #14]
 8002374:	f043 0318 	orr.w	r3, r3, #24
 8002378:	81fb      	strh	r3, [r7, #14]
				break;
 800237a:	e004      	b.n	8002386 <LCD_Scan_Dir+0x3ce>
			case D2U_R2L://从下到上,从右到左
				regval|=(0<<5)|(0<<4)|(1<<3);
 800237c:	89fb      	ldrh	r3, [r7, #14]
 800237e:	f043 0308 	orr.w	r3, r3, #8
 8002382:	81fb      	strh	r3, [r7, #14]
				break;
 8002384:	bf00      	nop
		}
		dirreg=0X03;
 8002386:	2303      	movs	r3, #3
 8002388:	81bb      	strh	r3, [r7, #12]
		regval|=1<<12;
 800238a:	89fb      	ldrh	r3, [r7, #14]
 800238c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002390:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8002392:	89fa      	ldrh	r2, [r7, #14]
 8002394:	89bb      	ldrh	r3, [r7, #12]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fca5 	bl	8001ce8 <LCD_WriteReg>
	}
}
 800239e:	bf00      	nop
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000358 	.word	0x20000358

080023ac <LCD_Fast_DrawPoint>:
}
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	80fb      	strh	r3, [r7, #6]
 80023b6:	460b      	mov	r3, r1
 80023b8:	80bb      	strh	r3, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	807b      	strh	r3, [r7, #2]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 80023be:	4b85      	ldr	r3, [pc, #532]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 80023c0:	889b      	ldrh	r3, [r3, #4]
 80023c2:	f249 3241 	movw	r2, #37697	; 0x9341
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d005      	beq.n	80023d6 <LCD_Fast_DrawPoint+0x2a>
 80023ca:	4b82      	ldr	r3, [pc, #520]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 80023cc:	889b      	ldrh	r3, [r3, #4]
 80023ce:	f245 3210 	movw	r2, #21264	; 0x5310
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d122      	bne.n	800241c <LCD_Fast_DrawPoint+0x70>
	{
		LCD_WR_REG(lcddev.setxcmd);
 80023d6:	4b7f      	ldr	r3, [pc, #508]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 80023d8:	895b      	ldrh	r3, [r3, #10]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff fc56 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	0a1b      	lsrs	r3, r3, #8
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fc60 	bl	8001cac <LCD_WR_DATA>
 80023ec:	88fb      	ldrh	r3, [r7, #6]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff fc5a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80023f8:	4b76      	ldr	r3, [pc, #472]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 80023fa:	899b      	ldrh	r3, [r3, #12]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fc45 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8002402:	88bb      	ldrh	r3, [r7, #4]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	b29b      	uxth	r3, r3
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fc4f 	bl	8001cac <LCD_WR_DATA>
 800240e:	88bb      	ldrh	r3, [r7, #4]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	b29b      	uxth	r3, r3
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fc49 	bl	8001cac <LCD_WR_DATA>
 800241a:	e0cf      	b.n	80025bc <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X5510)
 800241c:	4b6d      	ldr	r3, [pc, #436]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 800241e:	889b      	ldrh	r3, [r3, #4]
 8002420:	f245 5210 	movw	r2, #21776	; 0x5510
 8002424:	4293      	cmp	r3, r2
 8002426:	d130      	bne.n	800248a <LCD_Fast_DrawPoint+0xde>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 8002428:	4b6a      	ldr	r3, [pc, #424]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 800242a:	895b      	ldrh	r3, [r3, #10]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fc2d 	bl	8001c8c <LCD_WR_REG>
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	b29b      	uxth	r3, r3
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fc37 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 800243e:	4b65      	ldr	r3, [pc, #404]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 8002440:	895b      	ldrh	r3, [r3, #10]
 8002442:	3301      	adds	r3, #1
 8002444:	b29b      	uxth	r3, r3
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fc20 	bl	8001c8c <LCD_WR_REG>
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	b29b      	uxth	r3, r3
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff fc2a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8002458:	4b5e      	ldr	r3, [pc, #376]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 800245a:	899b      	ldrh	r3, [r3, #12]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fc15 	bl	8001c8c <LCD_WR_REG>
 8002462:	88bb      	ldrh	r3, [r7, #4]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	b29b      	uxth	r3, r3
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fc1f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 800246e:	4b59      	ldr	r3, [pc, #356]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 8002470:	899b      	ldrh	r3, [r3, #12]
 8002472:	3301      	adds	r3, #1
 8002474:	b29b      	uxth	r3, r3
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fc08 	bl	8001c8c <LCD_WR_REG>
 800247c:	88bb      	ldrh	r3, [r7, #4]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	b29b      	uxth	r3, r3
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fc12 	bl	8001cac <LCD_WR_DATA>
 8002488:	e098      	b.n	80025bc <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X1963)
 800248a:	4b52      	ldr	r3, [pc, #328]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 800248c:	889b      	ldrh	r3, [r3, #4]
 800248e:	f641 1263 	movw	r2, #6499	; 0x1963
 8002492:	4293      	cmp	r3, r2
 8002494:	d145      	bne.n	8002522 <LCD_Fast_DrawPoint+0x176>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8002496:	4b4f      	ldr	r3, [pc, #316]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 8002498:	799b      	ldrb	r3, [r3, #6]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d106      	bne.n	80024ac <LCD_Fast_DrawPoint+0x100>
 800249e:	4b4d      	ldr	r3, [pc, #308]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 80024a0:	881a      	ldrh	r2, [r3, #0]
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80024ac:	4b49      	ldr	r3, [pc, #292]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 80024ae:	895b      	ldrh	r3, [r3, #10]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff fbeb 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fbf5 	bl	8001cac <LCD_WR_DATA>
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fbef 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fbe9 	bl	8001cac <LCD_WR_DATA>
 80024da:	88fb      	ldrh	r3, [r7, #6]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	b29b      	uxth	r3, r3
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fbe3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80024e6:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 80024e8:	899b      	ldrh	r3, [r3, #12]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fbce 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80024f0:	88bb      	ldrh	r3, [r7, #4]
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fbd8 	bl	8001cac <LCD_WR_DATA>
 80024fc:	88bb      	ldrh	r3, [r7, #4]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	b29b      	uxth	r3, r3
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fbd2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8002508:	88bb      	ldrh	r3, [r7, #4]
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	b29b      	uxth	r3, r3
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fbcc 	bl	8001cac <LCD_WR_DATA>
 8002514:	88bb      	ldrh	r3, [r7, #4]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	b29b      	uxth	r3, r3
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fbc6 	bl	8001cac <LCD_WR_DATA>
 8002520:	e04c      	b.n	80025bc <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X6804)
 8002522:	4b2c      	ldr	r3, [pc, #176]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 8002524:	889b      	ldrh	r3, [r3, #4]
 8002526:	f646 0204 	movw	r2, #26628	; 0x6804
 800252a:	4293      	cmp	r3, r2
 800252c:	d12d      	bne.n	800258a <LCD_Fast_DrawPoint+0x1de>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 800252e:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 8002530:	799b      	ldrb	r3, [r3, #6]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d106      	bne.n	8002544 <LCD_Fast_DrawPoint+0x198>
 8002536:	4b27      	ldr	r3, [pc, #156]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 8002538:	881a      	ldrh	r2, [r3, #0]
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8002544:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 8002546:	895b      	ldrh	r3, [r3, #10]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fb9f 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	b29b      	uxth	r3, r3
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fba9 	bl	8001cac <LCD_WR_DATA>
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	b29b      	uxth	r3, r3
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fba3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8002566:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 8002568:	899b      	ldrh	r3, [r3, #12]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fb8e 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8002570:	88bb      	ldrh	r3, [r7, #4]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	b29b      	uxth	r3, r3
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fb98 	bl	8001cac <LCD_WR_DATA>
 800257c:	88bb      	ldrh	r3, [r7, #4]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	b29b      	uxth	r3, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff fb92 	bl	8001cac <LCD_WR_DATA>
 8002588:	e018      	b.n	80025bc <LCD_Fast_DrawPoint+0x210>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 800258c:	799b      	ldrb	r3, [r3, #6]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d106      	bne.n	80025a0 <LCD_Fast_DrawPoint+0x1f4>
 8002592:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 8002594:	881a      	ldrh	r2, [r3, #0]
 8002596:	88fb      	ldrh	r3, [r7, #6]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 80025a2:	895b      	ldrh	r3, [r3, #10]
 80025a4:	88fa      	ldrh	r2, [r7, #6]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff fb9d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 80025b0:	899b      	ldrh	r3, [r3, #12]
 80025b2:	88ba      	ldrh	r2, [r7, #4]
 80025b4:	4611      	mov	r1, r2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fb96 	bl	8001ce8 <LCD_WriteReg>
	}
	LCD->LCD_REG=lcddev.wramcmd;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <LCD_Fast_DrawPoint+0x22c>)
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <LCD_Fast_DrawPoint+0x228>)
 80025c0:	8912      	ldrh	r2, [r2, #8]
 80025c2:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM=color;
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <LCD_Fast_DrawPoint+0x22c>)
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	8053      	strh	r3, [r2, #2]
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000358 	.word	0x20000358
 80025d8:	6c0007fe 	.word	0x6c0007fe
 80025dc:	00000000 	.word	0x00000000

080025e0 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80025ea:	20be      	movs	r0, #190	; 0xbe
 80025ec:	f7ff fb4e 	bl	8001c8c <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80025f0:	2005      	movs	r0, #5
 80025f2:	f7ff fb5b 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fd ff6f 	bl	80004dc <__aeabi_i2d>
 80025fe:	a310      	add	r3, pc, #64	; (adr r3, 8002640 <LCD_SSD_BackLightSet+0x60>)
 8002600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002604:	f7fd ffd4 	bl	80005b0 <__aeabi_dmul>
 8002608:	4602      	mov	r2, r0
 800260a:	460b      	mov	r3, r1
 800260c:	4610      	mov	r0, r2
 800260e:	4619      	mov	r1, r3
 8002610:	f7fe faa6 	bl	8000b60 <__aeabi_d2uiz>
 8002614:	4603      	mov	r3, r0
 8002616:	b29b      	uxth	r3, r3
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff fb47 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 800261e:	2001      	movs	r0, #1
 8002620:	f7ff fb44 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 8002624:	20ff      	movs	r0, #255	; 0xff
 8002626:	f7ff fb41 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 800262a:	2000      	movs	r0, #0
 800262c:	f7ff fb3e 	bl	8001cac <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 8002630:	2000      	movs	r0, #0
 8002632:	f7ff fb3b 	bl	8001cac <LCD_WR_DATA>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	66666666 	.word	0x66666666
 8002644:	40046666 	.word	0x40046666

08002648 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
	if(dir==0)			//竖屏
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d177      	bne.n	8002748 <LCD_Display_Dir+0x100>
	{
		lcddev.dir=0;	//竖屏
 8002658:	4b80      	ldr	r3, [pc, #512]	; (800285c <LCD_Display_Dir+0x214>)
 800265a:	2200      	movs	r2, #0
 800265c:	719a      	strb	r2, [r3, #6]
		lcddev.width=240;
 800265e:	4b7f      	ldr	r3, [pc, #508]	; (800285c <LCD_Display_Dir+0x214>)
 8002660:	22f0      	movs	r2, #240	; 0xf0
 8002662:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8002664:	4b7d      	ldr	r3, [pc, #500]	; (800285c <LCD_Display_Dir+0x214>)
 8002666:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800266a:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310)
 800266c:	4b7b      	ldr	r3, [pc, #492]	; (800285c <LCD_Display_Dir+0x214>)
 800266e:	889b      	ldrh	r3, [r3, #4]
 8002670:	f249 3241 	movw	r2, #37697	; 0x9341
 8002674:	4293      	cmp	r3, r2
 8002676:	d00b      	beq.n	8002690 <LCD_Display_Dir+0x48>
 8002678:	4b78      	ldr	r3, [pc, #480]	; (800285c <LCD_Display_Dir+0x214>)
 800267a:	889b      	ldrh	r3, [r3, #4]
 800267c:	f646 0204 	movw	r2, #26628	; 0x6804
 8002680:	4293      	cmp	r3, r2
 8002682:	d005      	beq.n	8002690 <LCD_Display_Dir+0x48>
 8002684:	4b75      	ldr	r3, [pc, #468]	; (800285c <LCD_Display_Dir+0x214>)
 8002686:	889b      	ldrh	r3, [r3, #4]
 8002688:	f245 3210 	movw	r2, #21264	; 0x5310
 800268c:	4293      	cmp	r3, r2
 800268e:	d11e      	bne.n	80026ce <LCD_Display_Dir+0x86>
		{
			lcddev.wramcmd=0X2C;
 8002690:	4b72      	ldr	r3, [pc, #456]	; (800285c <LCD_Display_Dir+0x214>)
 8002692:	222c      	movs	r2, #44	; 0x2c
 8002694:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8002696:	4b71      	ldr	r3, [pc, #452]	; (800285c <LCD_Display_Dir+0x214>)
 8002698:	222a      	movs	r2, #42	; 0x2a
 800269a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 800269c:	4b6f      	ldr	r3, [pc, #444]	; (800285c <LCD_Display_Dir+0x214>)
 800269e:	222b      	movs	r2, #43	; 0x2b
 80026a0:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 80026a2:	4b6e      	ldr	r3, [pc, #440]	; (800285c <LCD_Display_Dir+0x214>)
 80026a4:	889b      	ldrh	r3, [r3, #4]
 80026a6:	f646 0204 	movw	r2, #26628	; 0x6804
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d006      	beq.n	80026bc <LCD_Display_Dir+0x74>
 80026ae:	4b6b      	ldr	r3, [pc, #428]	; (800285c <LCD_Display_Dir+0x214>)
 80026b0:	889b      	ldrh	r3, [r3, #4]
 80026b2:	f245 3210 	movw	r2, #21264	; 0x5310
 80026b6:	4293      	cmp	r3, r2
 80026b8:	f040 80c7 	bne.w	800284a <LCD_Display_Dir+0x202>
			{
				lcddev.width=320;
 80026bc:	4b67      	ldr	r3, [pc, #412]	; (800285c <LCD_Display_Dir+0x214>)
 80026be:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80026c2:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 80026c4:	4b65      	ldr	r3, [pc, #404]	; (800285c <LCD_Display_Dir+0x214>)
 80026c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80026ca:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 80026cc:	e0bd      	b.n	800284a <LCD_Display_Dir+0x202>
			}
		}else if(lcddev.id==0x5510)
 80026ce:	4b63      	ldr	r3, [pc, #396]	; (800285c <LCD_Display_Dir+0x214>)
 80026d0:	889b      	ldrh	r3, [r3, #4]
 80026d2:	f245 5210 	movw	r2, #21776	; 0x5510
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d114      	bne.n	8002704 <LCD_Display_Dir+0xbc>
		{
			lcddev.wramcmd=0X2C00;
 80026da:	4b60      	ldr	r3, [pc, #384]	; (800285c <LCD_Display_Dir+0x214>)
 80026dc:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80026e0:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 80026e2:	4b5e      	ldr	r3, [pc, #376]	; (800285c <LCD_Display_Dir+0x214>)
 80026e4:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80026e8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 80026ea:	4b5c      	ldr	r3, [pc, #368]	; (800285c <LCD_Display_Dir+0x214>)
 80026ec:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80026f0:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 80026f2:	4b5a      	ldr	r3, [pc, #360]	; (800285c <LCD_Display_Dir+0x214>)
 80026f4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80026f8:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 80026fa:	4b58      	ldr	r3, [pc, #352]	; (800285c <LCD_Display_Dir+0x214>)
 80026fc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002700:	805a      	strh	r2, [r3, #2]
 8002702:	e0a3      	b.n	800284c <LCD_Display_Dir+0x204>
		}else if(lcddev.id==0X1963)
 8002704:	4b55      	ldr	r3, [pc, #340]	; (800285c <LCD_Display_Dir+0x214>)
 8002706:	889b      	ldrh	r3, [r3, #4]
 8002708:	f641 1263 	movw	r2, #6499	; 0x1963
 800270c:	4293      	cmp	r3, r2
 800270e:	d111      	bne.n	8002734 <LCD_Display_Dir+0xec>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8002710:	4b52      	ldr	r3, [pc, #328]	; (800285c <LCD_Display_Dir+0x214>)
 8002712:	222c      	movs	r2, #44	; 0x2c
 8002714:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 8002716:	4b51      	ldr	r3, [pc, #324]	; (800285c <LCD_Display_Dir+0x214>)
 8002718:	222b      	movs	r2, #43	; 0x2b
 800271a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 800271c:	4b4f      	ldr	r3, [pc, #316]	; (800285c <LCD_Display_Dir+0x214>)
 800271e:	222a      	movs	r2, #42	; 0x2a
 8002720:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 8002722:	4b4e      	ldr	r3, [pc, #312]	; (800285c <LCD_Display_Dir+0x214>)
 8002724:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002728:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 800272a:	4b4c      	ldr	r3, [pc, #304]	; (800285c <LCD_Display_Dir+0x214>)
 800272c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002730:	805a      	strh	r2, [r3, #2]
 8002732:	e08b      	b.n	800284c <LCD_Display_Dir+0x204>
		}else
		{
			lcddev.wramcmd=0X22;
 8002734:	4b49      	ldr	r3, [pc, #292]	; (800285c <LCD_Display_Dir+0x214>)
 8002736:	2222      	movs	r2, #34	; 0x22
 8002738:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X20;
 800273a:	4b48      	ldr	r3, [pc, #288]	; (800285c <LCD_Display_Dir+0x214>)
 800273c:	2220      	movs	r2, #32
 800273e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X21;
 8002740:	4b46      	ldr	r3, [pc, #280]	; (800285c <LCD_Display_Dir+0x214>)
 8002742:	2221      	movs	r2, #33	; 0x21
 8002744:	819a      	strh	r2, [r3, #12]
 8002746:	e081      	b.n	800284c <LCD_Display_Dir+0x204>
		}
	}else 				//横屏
	{
		lcddev.dir=1;	//横屏
 8002748:	4b44      	ldr	r3, [pc, #272]	; (800285c <LCD_Display_Dir+0x214>)
 800274a:	2201      	movs	r2, #1
 800274c:	719a      	strb	r2, [r3, #6]
		lcddev.width=320;
 800274e:	4b43      	ldr	r3, [pc, #268]	; (800285c <LCD_Display_Dir+0x214>)
 8002750:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002754:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8002756:	4b41      	ldr	r3, [pc, #260]	; (800285c <LCD_Display_Dir+0x214>)
 8002758:	22f0      	movs	r2, #240	; 0xf0
 800275a:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 800275c:	4b3f      	ldr	r3, [pc, #252]	; (800285c <LCD_Display_Dir+0x214>)
 800275e:	889b      	ldrh	r3, [r3, #4]
 8002760:	f249 3241 	movw	r2, #37697	; 0x9341
 8002764:	4293      	cmp	r3, r2
 8002766:	d005      	beq.n	8002774 <LCD_Display_Dir+0x12c>
 8002768:	4b3c      	ldr	r3, [pc, #240]	; (800285c <LCD_Display_Dir+0x214>)
 800276a:	889b      	ldrh	r3, [r3, #4]
 800276c:	f245 3210 	movw	r2, #21264	; 0x5310
 8002770:	4293      	cmp	r3, r2
 8002772:	d109      	bne.n	8002788 <LCD_Display_Dir+0x140>
		{
			lcddev.wramcmd=0X2C;
 8002774:	4b39      	ldr	r3, [pc, #228]	; (800285c <LCD_Display_Dir+0x214>)
 8002776:	222c      	movs	r2, #44	; 0x2c
 8002778:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 800277a:	4b38      	ldr	r3, [pc, #224]	; (800285c <LCD_Display_Dir+0x214>)
 800277c:	222a      	movs	r2, #42	; 0x2a
 800277e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8002780:	4b36      	ldr	r3, [pc, #216]	; (800285c <LCD_Display_Dir+0x214>)
 8002782:	222b      	movs	r2, #43	; 0x2b
 8002784:	819a      	strh	r2, [r3, #12]
 8002786:	e04b      	b.n	8002820 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X6804)
 8002788:	4b34      	ldr	r3, [pc, #208]	; (800285c <LCD_Display_Dir+0x214>)
 800278a:	889b      	ldrh	r3, [r3, #4]
 800278c:	f646 0204 	movw	r2, #26628	; 0x6804
 8002790:	4293      	cmp	r3, r2
 8002792:	d109      	bne.n	80027a8 <LCD_Display_Dir+0x160>
		{
 			lcddev.wramcmd=0X2C;
 8002794:	4b31      	ldr	r3, [pc, #196]	; (800285c <LCD_Display_Dir+0x214>)
 8002796:	222c      	movs	r2, #44	; 0x2c
 8002798:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2B;
 800279a:	4b30      	ldr	r3, [pc, #192]	; (800285c <LCD_Display_Dir+0x214>)
 800279c:	222b      	movs	r2, #43	; 0x2b
 800279e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;
 80027a0:	4b2e      	ldr	r3, [pc, #184]	; (800285c <LCD_Display_Dir+0x214>)
 80027a2:	222a      	movs	r2, #42	; 0x2a
 80027a4:	819a      	strh	r2, [r3, #12]
 80027a6:	e03b      	b.n	8002820 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0x5510)
 80027a8:	4b2c      	ldr	r3, [pc, #176]	; (800285c <LCD_Display_Dir+0x214>)
 80027aa:	889b      	ldrh	r3, [r3, #4]
 80027ac:	f245 5210 	movw	r2, #21776	; 0x5510
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d114      	bne.n	80027de <LCD_Display_Dir+0x196>
		{
			lcddev.wramcmd=0X2C00;
 80027b4:	4b29      	ldr	r3, [pc, #164]	; (800285c <LCD_Display_Dir+0x214>)
 80027b6:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80027ba:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 80027bc:	4b27      	ldr	r3, [pc, #156]	; (800285c <LCD_Display_Dir+0x214>)
 80027be:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80027c2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 80027c4:	4b25      	ldr	r3, [pc, #148]	; (800285c <LCD_Display_Dir+0x214>)
 80027c6:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80027ca:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 80027cc:	4b23      	ldr	r3, [pc, #140]	; (800285c <LCD_Display_Dir+0x214>)
 80027ce:	f44f 7248 	mov.w	r2, #800	; 0x320
 80027d2:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 80027d4:	4b21      	ldr	r3, [pc, #132]	; (800285c <LCD_Display_Dir+0x214>)
 80027d6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80027da:	805a      	strh	r2, [r3, #2]
 80027dc:	e020      	b.n	8002820 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X1963)
 80027de:	4b1f      	ldr	r3, [pc, #124]	; (800285c <LCD_Display_Dir+0x214>)
 80027e0:	889b      	ldrh	r3, [r3, #4]
 80027e2:	f641 1263 	movw	r2, #6499	; 0x1963
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d111      	bne.n	800280e <LCD_Display_Dir+0x1c6>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <LCD_Display_Dir+0x214>)
 80027ec:	222c      	movs	r2, #44	; 0x2c
 80027ee:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <LCD_Display_Dir+0x214>)
 80027f2:	222a      	movs	r2, #42	; 0x2a
 80027f4:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 80027f6:	4b19      	ldr	r3, [pc, #100]	; (800285c <LCD_Display_Dir+0x214>)
 80027f8:	222b      	movs	r2, #43	; 0x2b
 80027fa:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 80027fc:	4b17      	ldr	r3, [pc, #92]	; (800285c <LCD_Display_Dir+0x214>)
 80027fe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002802:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 8002804:	4b15      	ldr	r3, [pc, #84]	; (800285c <LCD_Display_Dir+0x214>)
 8002806:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800280a:	805a      	strh	r2, [r3, #2]
 800280c:	e008      	b.n	8002820 <LCD_Display_Dir+0x1d8>
		}else
		{
			lcddev.wramcmd=0X22;
 800280e:	4b13      	ldr	r3, [pc, #76]	; (800285c <LCD_Display_Dir+0x214>)
 8002810:	2222      	movs	r2, #34	; 0x22
 8002812:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X21;
 8002814:	4b11      	ldr	r3, [pc, #68]	; (800285c <LCD_Display_Dir+0x214>)
 8002816:	2221      	movs	r2, #33	; 0x21
 8002818:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X20;
 800281a:	4b10      	ldr	r3, [pc, #64]	; (800285c <LCD_Display_Dir+0x214>)
 800281c:	2220      	movs	r2, #32
 800281e:	819a      	strh	r2, [r3, #12]
		}
		if(lcddev.id==0X6804||lcddev.id==0X5310)
 8002820:	4b0e      	ldr	r3, [pc, #56]	; (800285c <LCD_Display_Dir+0x214>)
 8002822:	889b      	ldrh	r3, [r3, #4]
 8002824:	f646 0204 	movw	r2, #26628	; 0x6804
 8002828:	4293      	cmp	r3, r2
 800282a:	d005      	beq.n	8002838 <LCD_Display_Dir+0x1f0>
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <LCD_Display_Dir+0x214>)
 800282e:	889b      	ldrh	r3, [r3, #4]
 8002830:	f245 3210 	movw	r2, #21264	; 0x5310
 8002834:	4293      	cmp	r3, r2
 8002836:	d109      	bne.n	800284c <LCD_Display_Dir+0x204>
		{
			lcddev.width=480;
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <LCD_Display_Dir+0x214>)
 800283a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800283e:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 8002840:	4b06      	ldr	r3, [pc, #24]	; (800285c <LCD_Display_Dir+0x214>)
 8002842:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002846:	805a      	strh	r2, [r3, #2]
 8002848:	e000      	b.n	800284c <LCD_Display_Dir+0x204>
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 800284a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 800284c:	2000      	movs	r0, #0
 800284e:	f7ff fbb3 	bl	8001fb8 <LCD_Scan_Dir>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000358 	.word	0x20000358

08002860 <LCD_Init>:
}
//初始化lcd
//该初始化函数可以初始化各种ILI93XX液晶,但是其他函数是基于ILI9320的!!!
//在其他型号的驱动芯片上没有测试!
void LCD_Init(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
	RCC->AHBENR|=1<<8;     	 	//使能FSMC时钟
 8002864:	4baa      	ldr	r3, [pc, #680]	; (8002b10 <LCD_Init+0x2b0>)
 8002866:	695b      	ldr	r3, [r3, #20]
 8002868:	4aa9      	ldr	r2, [pc, #676]	; (8002b10 <LCD_Init+0x2b0>)
 800286a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286e:	6153      	str	r3, [r2, #20]
  	RCC->APB2ENR|=1<<3;     	//使能PORTB时钟
 8002870:	4ba7      	ldr	r3, [pc, #668]	; (8002b10 <LCD_Init+0x2b0>)
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	4aa6      	ldr	r2, [pc, #664]	; (8002b10 <LCD_Init+0x2b0>)
 8002876:	f043 0308 	orr.w	r3, r3, #8
 800287a:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<5;     	//使能PORTD时钟
 800287c:	4ba4      	ldr	r3, [pc, #656]	; (8002b10 <LCD_Init+0x2b0>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	4aa3      	ldr	r2, [pc, #652]	; (8002b10 <LCD_Init+0x2b0>)
 8002882:	f043 0320 	orr.w	r3, r3, #32
 8002886:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<6;     	//使能PORTE时钟
 8002888:	4ba1      	ldr	r3, [pc, #644]	; (8002b10 <LCD_Init+0x2b0>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	4aa0      	ldr	r2, [pc, #640]	; (8002b10 <LCD_Init+0x2b0>)
 800288e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002892:	6193      	str	r3, [r2, #24]
 	RCC->APB2ENR|=1<<8;      	//使能PORTG时钟
 8002894:	4b9e      	ldr	r3, [pc, #632]	; (8002b10 <LCD_Init+0x2b0>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	4a9d      	ldr	r2, [pc, #628]	; (8002b10 <LCD_Init+0x2b0>)
 800289a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289e:	6193      	str	r3, [r2, #24]
	GPIOB->CRL&=0XFFFFFFF0;		//PB0 推挽输出 背光
 80028a0:	4b9c      	ldr	r3, [pc, #624]	; (8002b14 <LCD_Init+0x2b4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a9b      	ldr	r2, [pc, #620]	; (8002b14 <LCD_Init+0x2b4>)
 80028a6:	f023 030f 	bic.w	r3, r3, #15
 80028aa:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=0X00000003;
 80028ac:	4b99      	ldr	r3, [pc, #612]	; (8002b14 <LCD_Init+0x2b4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a98      	ldr	r2, [pc, #608]	; (8002b14 <LCD_Init+0x2b4>)
 80028b2:	f043 0303 	orr.w	r3, r3, #3
 80028b6:	6013      	str	r3, [r2, #0]
	//PORTD复用推挽输出
	GPIOD->CRH&=0X00FFF000;
 80028b8:	4b97      	ldr	r3, [pc, #604]	; (8002b18 <LCD_Init+0x2b8>)
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	4996      	ldr	r1, [pc, #600]	; (8002b18 <LCD_Init+0x2b8>)
 80028be:	4b97      	ldr	r3, [pc, #604]	; (8002b1c <LCD_Init+0x2bc>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
	GPIOD->CRH|=0XBB000BBB;
 80028c4:	4b94      	ldr	r3, [pc, #592]	; (8002b18 <LCD_Init+0x2b8>)
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4993      	ldr	r1, [pc, #588]	; (8002b18 <LCD_Init+0x2b8>)
 80028ca:	4b95      	ldr	r3, [pc, #596]	; (8002b20 <LCD_Init+0x2c0>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
	GPIOD->CRL&=0XFF00FF00;
 80028d0:	4b91      	ldr	r3, [pc, #580]	; (8002b18 <LCD_Init+0x2b8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a90      	ldr	r2, [pc, #576]	; (8002b18 <LCD_Init+0x2b8>)
 80028d6:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80028da:	6013      	str	r3, [r2, #0]
	GPIOD->CRL|=0X00BB00BB;
 80028dc:	4b8e      	ldr	r3, [pc, #568]	; (8002b18 <LCD_Init+0x2b8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a8d      	ldr	r2, [pc, #564]	; (8002b18 <LCD_Init+0x2b8>)
 80028e2:	f043 13bb 	orr.w	r3, r3, #12255419	; 0xbb00bb
 80028e6:	6013      	str	r3, [r2, #0]
	//PORTE复用推挽输出
	GPIOE->CRH&=0X00000000;
 80028e8:	4b8e      	ldr	r3, [pc, #568]	; (8002b24 <LCD_Init+0x2c4>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	4b8d      	ldr	r3, [pc, #564]	; (8002b24 <LCD_Init+0x2c4>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	605a      	str	r2, [r3, #4]
	GPIOE->CRH|=0XBBBBBBBB;
 80028f2:	4b8c      	ldr	r3, [pc, #560]	; (8002b24 <LCD_Init+0x2c4>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4a8b      	ldr	r2, [pc, #556]	; (8002b24 <LCD_Init+0x2c4>)
 80028f8:	f043 33bb 	orr.w	r3, r3, #3149642683	; 0xbbbbbbbb
 80028fc:	6053      	str	r3, [r2, #4]
	GPIOE->CRL&=0X0FFFFFFF;
 80028fe:	4b89      	ldr	r3, [pc, #548]	; (8002b24 <LCD_Init+0x2c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a88      	ldr	r2, [pc, #544]	; (8002b24 <LCD_Init+0x2c4>)
 8002904:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002908:	6013      	str	r3, [r2, #0]
	GPIOE->CRL|=0XB0000000;
 800290a:	4b86      	ldr	r3, [pc, #536]	; (8002b24 <LCD_Init+0x2c4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a85      	ldr	r2, [pc, #532]	; (8002b24 <LCD_Init+0x2c4>)
 8002910:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 8002914:	6013      	str	r3, [r2, #0]
	//PORTG12复用推挽输出
	GPIOG->CRH&=0XFFF0FFFF;
 8002916:	4b84      	ldr	r3, [pc, #528]	; (8002b28 <LCD_Init+0x2c8>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4a83      	ldr	r2, [pc, #524]	; (8002b28 <LCD_Init+0x2c8>)
 800291c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002920:	6053      	str	r3, [r2, #4]
	GPIOG->CRH|=0X000B0000;
 8002922:	4b81      	ldr	r3, [pc, #516]	; (8002b28 <LCD_Init+0x2c8>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4a80      	ldr	r2, [pc, #512]	; (8002b28 <LCD_Init+0x2c8>)
 8002928:	f443 2330 	orr.w	r3, r3, #720896	; 0xb0000
 800292c:	6053      	str	r3, [r2, #4]
	GPIOG->CRL&=0XFFFFFFF0;//PG0->RS
 800292e:	4b7e      	ldr	r3, [pc, #504]	; (8002b28 <LCD_Init+0x2c8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a7d      	ldr	r2, [pc, #500]	; (8002b28 <LCD_Init+0x2c8>)
 8002934:	f023 030f 	bic.w	r3, r3, #15
 8002938:	6013      	str	r3, [r2, #0]
	GPIOG->CRL|=0X0000000B;
 800293a:	4b7b      	ldr	r3, [pc, #492]	; (8002b28 <LCD_Init+0x2c8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a7a      	ldr	r2, [pc, #488]	; (8002b28 <LCD_Init+0x2c8>)
 8002940:	f043 030b 	orr.w	r3, r3, #11
 8002944:	6013      	str	r3, [r2, #0]

	//寄存器清零
	//bank1有NE1~4,每一个有一个BCR+TCR，所以总共八个寄存器。
	//这里我们使用NE4 ，也就对应BTCR[6],[7]。
	FSMC_Bank1->BTCR[6]=0X00000000;
 8002946:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800294a:	2200      	movs	r2, #0
 800294c:	619a      	str	r2, [r3, #24]
	FSMC_Bank1->BTCR[7]=0X00000000;
 800294e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002952:	2200      	movs	r2, #0
 8002954:	61da      	str	r2, [r3, #28]
	FSMC_Bank1E->BWTR[6]=0X00000000;
 8002956:	4b75      	ldr	r3, [pc, #468]	; (8002b2c <LCD_Init+0x2cc>)
 8002958:	2200      	movs	r2, #0
 800295a:	619a      	str	r2, [r3, #24]
	//操作BCR寄存器	使用异步模式
	FSMC_Bank1->BTCR[6]|=1<<12;		//存储器写使能
 800295c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002966:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800296a:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<14;		//读写使用不同的时序
 800296c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297a:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<4; 		//存储器数据宽度为16bit
 800297c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002986:	f043 0310 	orr.w	r3, r3, #16
 800298a:	6193      	str	r3, [r2, #24]
	//操作BTR寄存器
	//读时序控制寄存器
	FSMC_Bank1->BTCR[7]|=0<<28;		//模式A
 800298c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002990:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	61d3      	str	r3, [r2, #28]
	FSMC_Bank1->BTCR[7]|=1<<0; 		//地址建立时间（ADDSET）为2个HCLK 1/36M=27ns(实际>200ns)
 8002998:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	61d3      	str	r3, [r2, #28]
	//因为液晶驱动IC的读数据的时候，速度不能太快，尤其对1289这个IC。
	FSMC_Bank1->BTCR[7]|=0XF<<8;  	//数据保存时间为16个HCLK
 80029a8:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80029b2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80029b6:	61d3      	str	r3, [r2, #28]
	//写时序控制寄存器
	FSMC_Bank1E->BWTR[6]|=0<<28; 	//模式A
 80029b8:	4b5c      	ldr	r3, [pc, #368]	; (8002b2c <LCD_Init+0x2cc>)
 80029ba:	4a5c      	ldr	r2, [pc, #368]	; (8002b2c <LCD_Init+0x2cc>)
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	6193      	str	r3, [r2, #24]
	FSMC_Bank1E->BWTR[6]|=0<<0;		//地址建立时间（ADDSET）为1个HCLK
 80029c0:	4b5a      	ldr	r3, [pc, #360]	; (8002b2c <LCD_Init+0x2cc>)
 80029c2:	4a5a      	ldr	r2, [pc, #360]	; (8002b2c <LCD_Init+0x2cc>)
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	6193      	str	r3, [r2, #24]
 	//4个HCLK（HCLK=72M）因为液晶驱动IC的写信号脉宽，最少也得50ns。72M/4=24M=55ns
	FSMC_Bank1E->BWTR[6]|=3<<8; 	//数据保存时间为4个HCLK
 80029c8:	4b58      	ldr	r3, [pc, #352]	; (8002b2c <LCD_Init+0x2cc>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	4a57      	ldr	r2, [pc, #348]	; (8002b2c <LCD_Init+0x2cc>)
 80029ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80029d2:	6193      	str	r3, [r2, #24]
	//使能BANK1,区域4
	FSMC_Bank1->BTCR[6]|=1<<0;		//使能BANK1，区域4
 80029d4:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6193      	str	r3, [r2, #24]
	HAL_Delay(50); 					// delay 50 ms
 80029e4:	2032      	movs	r0, #50	; 0x32
 80029e6:	f004 fd19 	bl	800741c <HAL_Delay>
  	lcddev.id=LCD_ReadReg(0x0000);	//读ID（9320/9325/9328/4531/4535等IC）
 80029ea:	2000      	movs	r0, #0
 80029ec:	f7ff f992 	bl	8001d14 <LCD_ReadReg>
 80029f0:	4603      	mov	r3, r0
 80029f2:	461a      	mov	r2, r3
 80029f4:	4b4e      	ldr	r3, [pc, #312]	; (8002b30 <LCD_Init+0x2d0>)
 80029f6:	809a      	strh	r2, [r3, #4]
  	if(lcddev.id<0XFF||lcddev.id==0XFFFF||lcddev.id==0X9300)//读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 80029f8:	4b4d      	ldr	r3, [pc, #308]	; (8002b30 <LCD_Init+0x2d0>)
 80029fa:	889b      	ldrh	r3, [r3, #4]
 80029fc:	2bfe      	cmp	r3, #254	; 0xfe
 80029fe:	d90b      	bls.n	8002a18 <LCD_Init+0x1b8>
 8002a00:	4b4b      	ldr	r3, [pc, #300]	; (8002b30 <LCD_Init+0x2d0>)
 8002a02:	889b      	ldrh	r3, [r3, #4]
 8002a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d005      	beq.n	8002a18 <LCD_Init+0x1b8>
 8002a0c:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <LCD_Init+0x2d0>)
 8002a0e:	889b      	ldrh	r3, [r3, #4]
 8002a10:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8002a14:	f040 80fc 	bne.w	8002c10 <LCD_Init+0x3b0>
	{
 		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002a18:	20d3      	movs	r0, #211	; 0xd3
 8002a1a:	f7ff f937 	bl	8001c8c <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();	//dummy read
 8002a1e:	f7ff f955 	bl	8001ccc <LCD_RD_DATA>
 8002a22:	4603      	mov	r3, r0
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b42      	ldr	r3, [pc, #264]	; (8002b30 <LCD_Init+0x2d0>)
 8002a28:	809a      	strh	r2, [r3, #4]
 		lcddev.id=LCD_RD_DATA();	//读到0X00
 8002a2a:	f7ff f94f 	bl	8001ccc <LCD_RD_DATA>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <LCD_Init+0x2d0>)
 8002a34:	809a      	strh	r2, [r3, #4]
  		lcddev.id=LCD_RD_DATA();   	//读取93
 8002a36:	f7ff f949 	bl	8001ccc <LCD_RD_DATA>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4b3c      	ldr	r3, [pc, #240]	; (8002b30 <LCD_Init+0x2d0>)
 8002a40:	809a      	strh	r2, [r3, #4]
 		lcddev.id<<=8;
 8002a42:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <LCD_Init+0x2d0>)
 8002a44:	889b      	ldrh	r3, [r3, #4]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	4b39      	ldr	r3, [pc, #228]	; (8002b30 <LCD_Init+0x2d0>)
 8002a4c:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();  	//读取41
 8002a4e:	f7ff f93d 	bl	8001ccc <LCD_RD_DATA>
 8002a52:	4603      	mov	r3, r0
 8002a54:	461a      	mov	r2, r3
 8002a56:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <LCD_Init+0x2d0>)
 8002a58:	889b      	ldrh	r3, [r3, #4]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <LCD_Init+0x2d0>)
 8002a60:	809a      	strh	r2, [r3, #4]
 		if(lcddev.id!=0X9341)		//非9341,尝试是不是6804
 8002a62:	4b33      	ldr	r3, [pc, #204]	; (8002b30 <LCD_Init+0x2d0>)
 8002a64:	889b      	ldrh	r3, [r3, #4]
 8002a66:	f249 3241 	movw	r2, #37697	; 0x9341
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	f000 80d0 	beq.w	8002c10 <LCD_Init+0x3b0>
		{
 			LCD_WR_REG(0XBF);
 8002a70:	20bf      	movs	r0, #191	; 0xbf
 8002a72:	f7ff f90b 	bl	8001c8c <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA(); 	//dummy read
 8002a76:	f7ff f929 	bl	8001ccc <LCD_RD_DATA>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <LCD_Init+0x2d0>)
 8002a80:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA();   	//读回0X01
 8002a82:	f7ff f923 	bl	8001ccc <LCD_RD_DATA>
 8002a86:	4603      	mov	r3, r0
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b29      	ldr	r3, [pc, #164]	; (8002b30 <LCD_Init+0x2d0>)
 8002a8c:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA(); 	//读回0XD0
 8002a8e:	f7ff f91d 	bl	8001ccc <LCD_RD_DATA>
 8002a92:	4603      	mov	r3, r0
 8002a94:	461a      	mov	r2, r3
 8002a96:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <LCD_Init+0x2d0>)
 8002a98:	809a      	strh	r2, [r3, #4]
	  		lcddev.id=LCD_RD_DATA();	//这里读回0X68
 8002a9a:	f7ff f917 	bl	8001ccc <LCD_RD_DATA>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <LCD_Init+0x2d0>)
 8002aa4:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 8002aa6:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <LCD_Init+0x2d0>)
 8002aa8:	889b      	ldrh	r3, [r3, #4]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	4b20      	ldr	r3, [pc, #128]	; (8002b30 <LCD_Init+0x2d0>)
 8002ab0:	809a      	strh	r2, [r3, #4]
	  		lcddev.id|=LCD_RD_DATA();	//这里读回0X04
 8002ab2:	f7ff f90b 	bl	8001ccc <LCD_RD_DATA>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <LCD_Init+0x2d0>)
 8002abc:	889b      	ldrh	r3, [r3, #4]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <LCD_Init+0x2d0>)
 8002ac4:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X6804)		//也不是6804,尝试看看是不是NT35310
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <LCD_Init+0x2d0>)
 8002ac8:	889b      	ldrh	r3, [r3, #4]
 8002aca:	f646 0204 	movw	r2, #26628	; 0x6804
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	f000 809e 	beq.w	8002c10 <LCD_Init+0x3b0>
			{
				LCD_WR_REG(0XD4);
 8002ad4:	20d4      	movs	r0, #212	; 0xd4
 8002ad6:	f7ff f8d9 	bl	8001c8c <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();//dummy read
 8002ada:	f7ff f8f7 	bl	8001ccc <LCD_RD_DATA>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b13      	ldr	r3, [pc, #76]	; (8002b30 <LCD_Init+0x2d0>)
 8002ae4:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X01
 8002ae6:	f7ff f8f1 	bl	8001ccc <LCD_RD_DATA>
 8002aea:	4603      	mov	r3, r0
 8002aec:	461a      	mov	r2, r3
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <LCD_Init+0x2d0>)
 8002af0:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X53
 8002af2:	f7ff f8eb 	bl	8001ccc <LCD_RD_DATA>
 8002af6:	4603      	mov	r3, r0
 8002af8:	461a      	mov	r2, r3
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <LCD_Init+0x2d0>)
 8002afc:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 8002afe:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <LCD_Init+0x2d0>)
 8002b00:	889b      	ldrh	r3, [r3, #4]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <LCD_Init+0x2d0>)
 8002b08:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 8002b0a:	f7ff f8df 	bl	8001ccc <LCD_RD_DATA>
 8002b0e:	e011      	b.n	8002b34 <LCD_Init+0x2d4>
 8002b10:	40021000 	.word	0x40021000
 8002b14:	40010c00 	.word	0x40010c00
 8002b18:	40011400 	.word	0x40011400
 8002b1c:	00fff000 	.word	0x00fff000
 8002b20:	bb000bbb 	.word	0xbb000bbb
 8002b24:	40011800 	.word	0x40011800
 8002b28:	40012000 	.word	0x40012000
 8002b2c:	a0000104 	.word	0xa0000104
 8002b30:	20000358 	.word	0x20000358
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	4bc7      	ldr	r3, [pc, #796]	; (8002e58 <LCD_Init+0x5f8>)
 8002b3a:	889b      	ldrh	r3, [r3, #4]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	4bc5      	ldr	r3, [pc, #788]	; (8002e58 <LCD_Init+0x5f8>)
 8002b42:	809a      	strh	r2, [r3, #4]
				if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8002b44:	4bc4      	ldr	r3, [pc, #784]	; (8002e58 <LCD_Init+0x5f8>)
 8002b46:	889b      	ldrh	r3, [r3, #4]
 8002b48:	f245 3210 	movw	r2, #21264	; 0x5310
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d05f      	beq.n	8002c10 <LCD_Init+0x3b0>
				{
					LCD_WR_REG(0XDA00);
 8002b50:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8002b54:	f7ff f89a 	bl	8001c8c <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X00
 8002b58:	f7ff f8b8 	bl	8001ccc <LCD_RD_DATA>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4bbd      	ldr	r3, [pc, #756]	; (8002e58 <LCD_Init+0x5f8>)
 8002b62:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDB00);
 8002b64:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002b68:	f7ff f890 	bl	8001c8c <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X80
 8002b6c:	f7ff f8ae 	bl	8001ccc <LCD_RD_DATA>
 8002b70:	4603      	mov	r3, r0
 8002b72:	461a      	mov	r2, r3
 8002b74:	4bb8      	ldr	r3, [pc, #736]	; (8002e58 <LCD_Init+0x5f8>)
 8002b76:	809a      	strh	r2, [r3, #4]
					lcddev.id<<=8;
 8002b78:	4bb7      	ldr	r3, [pc, #732]	; (8002e58 <LCD_Init+0x5f8>)
 8002b7a:	889b      	ldrh	r3, [r3, #4]
 8002b7c:	021b      	lsls	r3, r3, #8
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	4bb5      	ldr	r3, [pc, #724]	; (8002e58 <LCD_Init+0x5f8>)
 8002b82:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8002b84:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002b88:	f7ff f880 	bl	8001c8c <LCD_WR_REG>
					lcddev.id|=LCD_RD_DATA();		//读回0X00
 8002b8c:	f7ff f89e 	bl	8001ccc <LCD_RD_DATA>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461a      	mov	r2, r3
 8002b94:	4bb0      	ldr	r3, [pc, #704]	; (8002e58 <LCD_Init+0x5f8>)
 8002b96:	889b      	ldrh	r3, [r3, #4]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	4bae      	ldr	r3, [pc, #696]	; (8002e58 <LCD_Init+0x5f8>)
 8002b9e:	809a      	strh	r2, [r3, #4]
					if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8002ba0:	4bad      	ldr	r3, [pc, #692]	; (8002e58 <LCD_Init+0x5f8>)
 8002ba2:	889b      	ldrh	r3, [r3, #4]
 8002ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ba8:	d103      	bne.n	8002bb2 <LCD_Init+0x352>
 8002baa:	4bab      	ldr	r3, [pc, #684]	; (8002e58 <LCD_Init+0x5f8>)
 8002bac:	f245 5210 	movw	r2, #21776	; 0x5510
 8002bb0:	809a      	strh	r2, [r3, #4]
					if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8002bb2:	4ba9      	ldr	r3, [pc, #676]	; (8002e58 <LCD_Init+0x5f8>)
 8002bb4:	889b      	ldrh	r3, [r3, #4]
 8002bb6:	f245 5210 	movw	r2, #21776	; 0x5510
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d028      	beq.n	8002c10 <LCD_Init+0x3b0>
					{
						LCD_WR_REG(0XA1);
 8002bbe:	20a1      	movs	r0, #161	; 0xa1
 8002bc0:	f7ff f864 	bl	8001c8c <LCD_WR_REG>
						lcddev.id=LCD_RD_DATA();
 8002bc4:	f7ff f882 	bl	8001ccc <LCD_RD_DATA>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4ba2      	ldr	r3, [pc, #648]	; (8002e58 <LCD_Init+0x5f8>)
 8002bce:	809a      	strh	r2, [r3, #4]
						lcddev.id=LCD_RD_DATA();	//读回0X57
 8002bd0:	f7ff f87c 	bl	8001ccc <LCD_RD_DATA>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4b9f      	ldr	r3, [pc, #636]	; (8002e58 <LCD_Init+0x5f8>)
 8002bda:	809a      	strh	r2, [r3, #4]
						lcddev.id<<=8;
 8002bdc:	4b9e      	ldr	r3, [pc, #632]	; (8002e58 <LCD_Init+0x5f8>)
 8002bde:	889b      	ldrh	r3, [r3, #4]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	4b9c      	ldr	r3, [pc, #624]	; (8002e58 <LCD_Init+0x5f8>)
 8002be6:	809a      	strh	r2, [r3, #4]
						lcddev.id|=LCD_RD_DATA();	//读回0X61
 8002be8:	f7ff f870 	bl	8001ccc <LCD_RD_DATA>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b99      	ldr	r3, [pc, #612]	; (8002e58 <LCD_Init+0x5f8>)
 8002bf2:	889b      	ldrh	r3, [r3, #4]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	4b97      	ldr	r3, [pc, #604]	; (8002e58 <LCD_Init+0x5f8>)
 8002bfa:	809a      	strh	r2, [r3, #4]
						if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002bfc:	4b96      	ldr	r3, [pc, #600]	; (8002e58 <LCD_Init+0x5f8>)
 8002bfe:	889b      	ldrh	r3, [r3, #4]
 8002c00:	f245 7261 	movw	r2, #22369	; 0x5761
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d103      	bne.n	8002c10 <LCD_Init+0x3b0>
 8002c08:	4b93      	ldr	r3, [pc, #588]	; (8002e58 <LCD_Init+0x5f8>)
 8002c0a:	f641 1263 	movw	r2, #6499	; 0x1963
 8002c0e:	809a      	strh	r2, [r3, #4]
					}
				}
			}
 		}
	}
 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 8002c10:	4b91      	ldr	r3, [pc, #580]	; (8002e58 <LCD_Init+0x5f8>)
 8002c12:	889b      	ldrh	r3, [r3, #4]
 8002c14:	4619      	mov	r1, r3
 8002c16:	4891      	ldr	r0, [pc, #580]	; (8002e5c <LCD_Init+0x5fc>)
 8002c18:	f009 f8e6 	bl	800bde8 <iprintf>
	if(lcddev.id==0X9341)	//9341初始化
 8002c1c:	4b8e      	ldr	r3, [pc, #568]	; (8002e58 <LCD_Init+0x5f8>)
 8002c1e:	889b      	ldrh	r3, [r3, #4]
 8002c20:	f249 3241 	movw	r2, #37697	; 0x9341
 8002c24:	4293      	cmp	r3, r2
 8002c26:	f040 811b 	bne.w	8002e60 <LCD_Init+0x600>
	{
		LCD_WR_REG(0xCF);
 8002c2a:	20cf      	movs	r0, #207	; 0xcf
 8002c2c:	f7ff f82e 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7ff f83b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 8002c36:	20c1      	movs	r0, #193	; 0xc1
 8002c38:	f7ff f838 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8002c3c:	2030      	movs	r0, #48	; 0x30
 8002c3e:	f7ff f835 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 8002c42:	20ed      	movs	r0, #237	; 0xed
 8002c44:	f7ff f822 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 8002c48:	2064      	movs	r0, #100	; 0x64
 8002c4a:	f7ff f82f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8002c4e:	2003      	movs	r0, #3
 8002c50:	f7ff f82c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 8002c54:	2012      	movs	r0, #18
 8002c56:	f7ff f829 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 8002c5a:	2081      	movs	r0, #129	; 0x81
 8002c5c:	f7ff f826 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8002c60:	20e8      	movs	r0, #232	; 0xe8
 8002c62:	f7ff f813 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 8002c66:	2085      	movs	r0, #133	; 0x85
 8002c68:	f7ff f820 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8002c6c:	2010      	movs	r0, #16
 8002c6e:	f7ff f81d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8002c72:	207a      	movs	r0, #122	; 0x7a
 8002c74:	f7ff f81a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 8002c78:	20cb      	movs	r0, #203	; 0xcb
 8002c7a:	f7ff f807 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8002c7e:	2039      	movs	r0, #57	; 0x39
 8002c80:	f7ff f814 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002c84:	202c      	movs	r0, #44	; 0x2c
 8002c86:	f7ff f811 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7ff f80e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8002c90:	2034      	movs	r0, #52	; 0x34
 8002c92:	f7ff f80b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002c96:	2002      	movs	r0, #2
 8002c98:	f7ff f808 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8002c9c:	20f7      	movs	r0, #247	; 0xf7
 8002c9e:	f7fe fff5 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8002ca2:	2020      	movs	r0, #32
 8002ca4:	f7ff f802 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8002ca8:	20ea      	movs	r0, #234	; 0xea
 8002caa:	f7fe ffef 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7fe fffc 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f7fe fff9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 8002cba:	20c0      	movs	r0, #192	; 0xc0
 8002cbc:	f7fe ffe6 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002cc0:	201b      	movs	r0, #27
 8002cc2:	f7fe fff3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 8002cc6:	20c1      	movs	r0, #193	; 0xc1
 8002cc8:	f7fe ffe0 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f7fe ffed 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 8002cd2:	20c5      	movs	r0, #197	; 0xc5
 8002cd4:	f7fe ffda 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 8002cd8:	2030      	movs	r0, #48	; 0x30
 8002cda:	f7fe ffe7 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 8002cde:	2030      	movs	r0, #48	; 0x30
 8002ce0:	f7fe ffe4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 8002ce4:	20c7      	movs	r0, #199	; 0xc7
 8002ce6:	f7fe ffd1 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 8002cea:	20b7      	movs	r0, #183	; 0xb7
 8002cec:	f7fe ffde 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 8002cf0:	2036      	movs	r0, #54	; 0x36
 8002cf2:	f7fe ffcb 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 8002cf6:	2048      	movs	r0, #72	; 0x48
 8002cf8:	f7fe ffd8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 8002cfc:	203a      	movs	r0, #58	; 0x3a
 8002cfe:	f7fe ffc5 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 8002d02:	2055      	movs	r0, #85	; 0x55
 8002d04:	f7fe ffd2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 8002d08:	20b1      	movs	r0, #177	; 0xb1
 8002d0a:	f7fe ffbf 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f7fe ffcc 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 8002d14:	201a      	movs	r0, #26
 8002d16:	f7fe ffc9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 8002d1a:	20b6      	movs	r0, #182	; 0xb6
 8002d1c:	f7fe ffb6 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8002d20:	200a      	movs	r0, #10
 8002d22:	f7fe ffc3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002d26:	20a2      	movs	r0, #162	; 0xa2
 8002d28:	f7fe ffc0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002d2c:	20f2      	movs	r0, #242	; 0xf2
 8002d2e:	f7fe ffad 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002d32:	2000      	movs	r0, #0
 8002d34:	f7fe ffba 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 8002d38:	2026      	movs	r0, #38	; 0x26
 8002d3a:	f7fe ffa7 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002d3e:	2001      	movs	r0, #1
 8002d40:	f7fe ffb4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 8002d44:	20e0      	movs	r0, #224	; 0xe0
 8002d46:	f7fe ffa1 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 8002d4a:	200f      	movs	r0, #15
 8002d4c:	f7fe ffae 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8002d50:	202a      	movs	r0, #42	; 0x2a
 8002d52:	f7fe ffab 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 8002d56:	2028      	movs	r0, #40	; 0x28
 8002d58:	f7fe ffa8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8002d5c:	2008      	movs	r0, #8
 8002d5e:	f7fe ffa5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 8002d62:	200e      	movs	r0, #14
 8002d64:	f7fe ffa2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8002d68:	2008      	movs	r0, #8
 8002d6a:	f7fe ff9f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8002d6e:	2054      	movs	r0, #84	; 0x54
 8002d70:	f7fe ff9c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 8002d74:	20a9      	movs	r0, #169	; 0xa9
 8002d76:	f7fe ff99 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8002d7a:	2043      	movs	r0, #67	; 0x43
 8002d7c:	f7fe ff96 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8002d80:	200a      	movs	r0, #10
 8002d82:	f7fe ff93 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8002d86:	200f      	movs	r0, #15
 8002d88:	f7fe ff90 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7fe ff8d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7fe ff8a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f7fe ff87 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f7fe ff84 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 8002da4:	20e1      	movs	r0, #225	; 0xe1
 8002da6:	f7fe ff71 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7fe ff7e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 8002db0:	2015      	movs	r0, #21
 8002db2:	f7fe ff7b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8002db6:	2017      	movs	r0, #23
 8002db8:	f7fe ff78 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 8002dbc:	2007      	movs	r0, #7
 8002dbe:	f7fe ff75 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8002dc2:	2011      	movs	r0, #17
 8002dc4:	f7fe ff72 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 8002dc8:	2006      	movs	r0, #6
 8002dca:	f7fe ff6f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 8002dce:	202b      	movs	r0, #43	; 0x2b
 8002dd0:	f7fe ff6c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002dd4:	2056      	movs	r0, #86	; 0x56
 8002dd6:	f7fe ff69 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002dda:	203c      	movs	r0, #60	; 0x3c
 8002ddc:	f7fe ff66 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8002de0:	2005      	movs	r0, #5
 8002de2:	f7fe ff63 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8002de6:	2010      	movs	r0, #16
 8002de8:	f7fe ff60 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8002dec:	200f      	movs	r0, #15
 8002dee:	f7fe ff5d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8002df2:	203f      	movs	r0, #63	; 0x3f
 8002df4:	f7fe ff5a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8002df8:	203f      	movs	r0, #63	; 0x3f
 8002dfa:	f7fe ff57 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8002dfe:	200f      	movs	r0, #15
 8002e00:	f7fe ff54 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 8002e04:	202b      	movs	r0, #43	; 0x2b
 8002e06:	f7fe ff41 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002e0a:	2000      	movs	r0, #0
 8002e0c:	f7fe ff4e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7fe ff4b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f7fe ff48 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 8002e1c:	203f      	movs	r0, #63	; 0x3f
 8002e1e:	f7fe ff45 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 8002e22:	202a      	movs	r0, #42	; 0x2a
 8002e24:	f7fe ff32 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f7fe ff3f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7fe ff3c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e34:	2000      	movs	r0, #0
 8002e36:	f7fe ff39 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 8002e3a:	20ef      	movs	r0, #239	; 0xef
 8002e3c:	f7fe ff36 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 8002e40:	2011      	movs	r0, #17
 8002e42:	f7fe ff23 	bl	8001c8c <LCD_WR_REG>
		HAL_Delay(20);
 8002e46:	2014      	movs	r0, #20
 8002e48:	f004 fae8 	bl	800741c <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 8002e4c:	2029      	movs	r0, #41	; 0x29
 8002e4e:	f7fe ff1d 	bl	8001c8c <LCD_WR_REG>
 8002e52:	f003 b923 	b.w	800609c <LCD_Init+0x383c>
 8002e56:	bf00      	nop
 8002e58:	20000358 	.word	0x20000358
 8002e5c:	0800e300 	.word	0x0800e300
	}else if(lcddev.id==0x6804) //6804初始化
 8002e60:	4b58      	ldr	r3, [pc, #352]	; (8002fc4 <LCD_Init+0x764>)
 8002e62:	889b      	ldrh	r3, [r3, #4]
 8002e64:	f646 0204 	movw	r2, #26628	; 0x6804
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	f040 80ad 	bne.w	8002fc8 <LCD_Init+0x768>
	{
		LCD_WR_REG(0X11);
 8002e6e:	2011      	movs	r0, #17
 8002e70:	f7fe ff0c 	bl	8001c8c <LCD_WR_REG>
		HAL_Delay(20);
 8002e74:	2014      	movs	r0, #20
 8002e76:	f004 fad1 	bl	800741c <HAL_Delay>
		LCD_WR_REG(0XD0);//VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002e7a:	20d0      	movs	r0, #208	; 0xd0
 8002e7c:	f7fe ff06 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0X07);
 8002e80:	2007      	movs	r0, #7
 8002e82:	f7fe ff13 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X42);
 8002e86:	2042      	movs	r0, #66	; 0x42
 8002e88:	f7fe ff10 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X1D);
 8002e8c:	201d      	movs	r0, #29
 8002e8e:	f7fe ff0d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0XD1);//VCOMH VCOM_AC amplitude setting
 8002e92:	20d1      	movs	r0, #209	; 0xd1
 8002e94:	f7fe fefa 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fe ff07 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X1a);
 8002e9e:	201a      	movs	r0, #26
 8002ea0:	f7fe ff04 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X09);
 8002ea4:	2009      	movs	r0, #9
 8002ea6:	f7fe ff01 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0XD2);//Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002eaa:	20d2      	movs	r0, #210	; 0xd2
 8002eac:	f7fe feee 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f7fe fefb 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X22);
 8002eb6:	2022      	movs	r0, #34	; 0x22
 8002eb8:	f7fe fef8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0XC0);//REV SM GS
 8002ebc:	20c0      	movs	r0, #192	; 0xc0
 8002ebe:	f7fe fee5 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0X10);
 8002ec2:	2010      	movs	r0, #16
 8002ec4:	f7fe fef2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X3B);
 8002ec8:	203b      	movs	r0, #59	; 0x3b
 8002eca:	f7fe feef 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7fe feec 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X02);
 8002ed4:	2002      	movs	r0, #2
 8002ed6:	f7fe fee9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X11);
 8002eda:	2011      	movs	r0, #17
 8002edc:	f7fe fee6 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0XC5);// Frame rate setting = 72HZ  when setting 0x03
 8002ee0:	20c5      	movs	r0, #197	; 0xc5
 8002ee2:	f7fe fed3 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0X03);
 8002ee6:	2003      	movs	r0, #3
 8002ee8:	f7fe fee0 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0XC8);//Gamma setting
 8002eec:	20c8      	movs	r0, #200	; 0xc8
 8002eee:	f7fe fecd 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f7fe feda 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 8002ef8:	2025      	movs	r0, #37	; 0x25
 8002efa:	f7fe fed7 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X21);
 8002efe:	2021      	movs	r0, #33	; 0x21
 8002f00:	f7fe fed4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X05);
 8002f04:	2005      	movs	r0, #5
 8002f06:	f7fe fed1 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f7fe fece 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X0a);
 8002f10:	200a      	movs	r0, #10
 8002f12:	f7fe fecb 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X65);
 8002f16:	2065      	movs	r0, #101	; 0x65
 8002f18:	f7fe fec8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 8002f1c:	2025      	movs	r0, #37	; 0x25
 8002f1e:	f7fe fec5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X77);
 8002f22:	2077      	movs	r0, #119	; 0x77
 8002f24:	f7fe fec2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X50);
 8002f28:	2050      	movs	r0, #80	; 0x50
 8002f2a:	f7fe febf 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X0f);
 8002f2e:	200f      	movs	r0, #15
 8002f30:	f7fe febc 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002f34:	2000      	movs	r0, #0
 8002f36:	f7fe feb9 	bl	8001cac <LCD_WR_DATA>

   		LCD_WR_REG(0XF8);
 8002f3a:	20f8      	movs	r0, #248	; 0xf8
 8002f3c:	f7fe fea6 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 8002f40:	2001      	movs	r0, #1
 8002f42:	f7fe feb3 	bl	8001cac <LCD_WR_DATA>

 		LCD_WR_REG(0XFE);
 8002f46:	20fe      	movs	r0, #254	; 0xfe
 8002f48:	f7fe fea0 	bl	8001c8c <LCD_WR_REG>
 		LCD_WR_DATA(0X00);
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7fe fead 	bl	8001cac <LCD_WR_DATA>
 		LCD_WR_DATA(0X02);
 8002f52:	2002      	movs	r0, #2
 8002f54:	f7fe feaa 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0X20);//Exit invert mode
 8002f58:	2020      	movs	r0, #32
 8002f5a:	f7fe fe97 	bl	8001c8c <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002f5e:	2036      	movs	r0, #54	; 0x36
 8002f60:	f7fe fe94 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0X08);//原来是a
 8002f64:	2008      	movs	r0, #8
 8002f66:	f7fe fea1 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0X3A);
 8002f6a:	203a      	movs	r0, #58	; 0x3a
 8002f6c:	f7fe fe8e 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0X55);//16位模式
 8002f70:	2055      	movs	r0, #85	; 0x55
 8002f72:	f7fe fe9b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0X2B);
 8002f76:	202b      	movs	r0, #43	; 0x2b
 8002f78:	f7fe fe88 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7fe fe95 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f7fe fe92 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8002f88:	2001      	movs	r0, #1
 8002f8a:	f7fe fe8f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X3F);
 8002f8e:	203f      	movs	r0, #63	; 0x3f
 8002f90:	f7fe fe8c 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0X2A);
 8002f94:	202a      	movs	r0, #42	; 0x2a
 8002f96:	f7fe fe79 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f7fe fe86 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	f7fe fe83 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f7fe fe80 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0XDF);
 8002fac:	20df      	movs	r0, #223	; 0xdf
 8002fae:	f7fe fe7d 	bl	8001cac <LCD_WR_DATA>
		HAL_Delay(120);
 8002fb2:	2078      	movs	r0, #120	; 0x78
 8002fb4:	f004 fa32 	bl	800741c <HAL_Delay>
		LCD_WR_REG(0X29);
 8002fb8:	2029      	movs	r0, #41	; 0x29
 8002fba:	f7fe fe67 	bl	8001c8c <LCD_WR_REG>
 8002fbe:	f003 b86d 	b.w	800609c <LCD_Init+0x383c>
 8002fc2:	bf00      	nop
 8002fc4:	20000358 	.word	0x20000358
 	}else if(lcddev.id==0x5310)
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <LCD_Init+0x778>)
 8002fca:	889b      	ldrh	r3, [r3, #4]
 8002fcc:	f245 3210 	movw	r2, #21264	; 0x5310
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	f040 877c 	bne.w	8003ece <LCD_Init+0x166e>
 8002fd6:	e001      	b.n	8002fdc <LCD_Init+0x77c>
 8002fd8:	20000358 	.word	0x20000358
	{
		LCD_WR_REG(0xED);
 8002fdc:	20ed      	movs	r0, #237	; 0xed
 8002fde:	f7fe fe55 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	f7fe fe62 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 8002fe8:	20fe      	movs	r0, #254	; 0xfe
 8002fea:	f7fe fe5f 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 8002fee:	20ee      	movs	r0, #238	; 0xee
 8002ff0:	f7fe fe4c 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 8002ff4:	20de      	movs	r0, #222	; 0xde
 8002ff6:	f7fe fe59 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002ffa:	2021      	movs	r0, #33	; 0x21
 8002ffc:	f7fe fe56 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 8003000:	20f1      	movs	r0, #241	; 0xf1
 8003002:	f7fe fe43 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8003006:	2001      	movs	r0, #1
 8003008:	f7fe fe50 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 800300c:	20df      	movs	r0, #223	; 0xdf
 800300e:	f7fe fe3d 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 8003012:	2010      	movs	r0, #16
 8003014:	f7fe fe4a 	bl	8001cac <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8003018:	20c4      	movs	r0, #196	; 0xc4
 800301a:	f7fe fe37 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 800301e:	208f      	movs	r0, #143	; 0x8f
 8003020:	f7fe fe44 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8003024:	20c6      	movs	r0, #198	; 0xc6
 8003026:	f7fe fe31 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800302a:	2000      	movs	r0, #0
 800302c:	f7fe fe3e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8003030:	20e2      	movs	r0, #226	; 0xe2
 8003032:	f7fe fe3b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8003036:	20e2      	movs	r0, #226	; 0xe2
 8003038:	f7fe fe38 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 800303c:	20e2      	movs	r0, #226	; 0xe2
 800303e:	f7fe fe35 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 8003042:	20bf      	movs	r0, #191	; 0xbf
 8003044:	f7fe fe22 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8003048:	20aa      	movs	r0, #170	; 0xaa
 800304a:	f7fe fe2f 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 800304e:	20b0      	movs	r0, #176	; 0xb0
 8003050:	f7fe fe1c 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 8003054:	200d      	movs	r0, #13
 8003056:	f7fe fe29 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800305a:	2000      	movs	r0, #0
 800305c:	f7fe fe26 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8003060:	200d      	movs	r0, #13
 8003062:	f7fe fe23 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003066:	2000      	movs	r0, #0
 8003068:	f7fe fe20 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 800306c:	2011      	movs	r0, #17
 800306e:	f7fe fe1d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003072:	2000      	movs	r0, #0
 8003074:	f7fe fe1a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8003078:	2019      	movs	r0, #25
 800307a:	f7fe fe17 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800307e:	2000      	movs	r0, #0
 8003080:	f7fe fe14 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8003084:	2021      	movs	r0, #33	; 0x21
 8003086:	f7fe fe11 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800308a:	2000      	movs	r0, #0
 800308c:	f7fe fe0e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8003090:	202d      	movs	r0, #45	; 0x2d
 8003092:	f7fe fe0b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003096:	2000      	movs	r0, #0
 8003098:	f7fe fe08 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 800309c:	203d      	movs	r0, #61	; 0x3d
 800309e:	f7fe fe05 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030a2:	2000      	movs	r0, #0
 80030a4:	f7fe fe02 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 80030a8:	205d      	movs	r0, #93	; 0x5d
 80030aa:	f7fe fdff 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030ae:	2000      	movs	r0, #0
 80030b0:	f7fe fdfc 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 80030b4:	205d      	movs	r0, #93	; 0x5d
 80030b6:	f7fe fdf9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030ba:	2000      	movs	r0, #0
 80030bc:	f7fe fdf6 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 80030c0:	20b1      	movs	r0, #177	; 0xb1
 80030c2:	f7fe fde3 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 80030c6:	2080      	movs	r0, #128	; 0x80
 80030c8:	f7fe fdf0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030cc:	2000      	movs	r0, #0
 80030ce:	f7fe fded 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80030d2:	208b      	movs	r0, #139	; 0x8b
 80030d4:	f7fe fdea 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030d8:	2000      	movs	r0, #0
 80030da:	f7fe fde7 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 80030de:	2096      	movs	r0, #150	; 0x96
 80030e0:	f7fe fde4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030e4:	2000      	movs	r0, #0
 80030e6:	f7fe fde1 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 80030ea:	20b2      	movs	r0, #178	; 0xb2
 80030ec:	f7fe fdce 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7fe fddb 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030f6:	2000      	movs	r0, #0
 80030f8:	f7fe fdd8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 80030fc:	2002      	movs	r0, #2
 80030fe:	f7fe fdd5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fe fdd2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8003108:	2003      	movs	r0, #3
 800310a:	f7fe fdcf 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800310e:	2000      	movs	r0, #0
 8003110:	f7fe fdcc 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 8003114:	20b3      	movs	r0, #179	; 0xb3
 8003116:	f7fe fdb9 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800311a:	2000      	movs	r0, #0
 800311c:	f7fe fdc6 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003120:	2000      	movs	r0, #0
 8003122:	f7fe fdc3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003126:	2000      	movs	r0, #0
 8003128:	f7fe fdc0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800312c:	2000      	movs	r0, #0
 800312e:	f7fe fdbd 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003132:	2000      	movs	r0, #0
 8003134:	f7fe fdba 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003138:	2000      	movs	r0, #0
 800313a:	f7fe fdb7 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800313e:	2000      	movs	r0, #0
 8003140:	f7fe fdb4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003144:	2000      	movs	r0, #0
 8003146:	f7fe fdb1 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800314a:	2000      	movs	r0, #0
 800314c:	f7fe fdae 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003150:	2000      	movs	r0, #0
 8003152:	f7fe fdab 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003156:	2000      	movs	r0, #0
 8003158:	f7fe fda8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800315c:	2000      	movs	r0, #0
 800315e:	f7fe fda5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003162:	2000      	movs	r0, #0
 8003164:	f7fe fda2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003168:	2000      	movs	r0, #0
 800316a:	f7fe fd9f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800316e:	2000      	movs	r0, #0
 8003170:	f7fe fd9c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003174:	2000      	movs	r0, #0
 8003176:	f7fe fd99 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800317a:	2000      	movs	r0, #0
 800317c:	f7fe fd96 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003180:	2000      	movs	r0, #0
 8003182:	f7fe fd93 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003186:	2000      	movs	r0, #0
 8003188:	f7fe fd90 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800318c:	2000      	movs	r0, #0
 800318e:	f7fe fd8d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003192:	2000      	movs	r0, #0
 8003194:	f7fe fd8a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003198:	2000      	movs	r0, #0
 800319a:	f7fe fd87 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800319e:	2000      	movs	r0, #0
 80031a0:	f7fe fd84 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031a4:	2000      	movs	r0, #0
 80031a6:	f7fe fd81 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 80031aa:	20b4      	movs	r0, #180	; 0xb4
 80031ac:	f7fe fd6e 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 80031b0:	208b      	movs	r0, #139	; 0x8b
 80031b2:	f7fe fd7b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031b6:	2000      	movs	r0, #0
 80031b8:	f7fe fd78 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 80031bc:	2096      	movs	r0, #150	; 0x96
 80031be:	f7fe fd75 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031c2:	2000      	movs	r0, #0
 80031c4:	f7fe fd72 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 80031c8:	20a1      	movs	r0, #161	; 0xa1
 80031ca:	f7fe fd6f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031ce:	2000      	movs	r0, #0
 80031d0:	f7fe fd6c 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 80031d4:	20b5      	movs	r0, #181	; 0xb5
 80031d6:	f7fe fd59 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 80031da:	2002      	movs	r0, #2
 80031dc:	f7fe fd66 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031e0:	2000      	movs	r0, #0
 80031e2:	f7fe fd63 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80031e6:	2003      	movs	r0, #3
 80031e8:	f7fe fd60 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7fe fd5d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80031f2:	2004      	movs	r0, #4
 80031f4:	f7fe fd5a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031f8:	2000      	movs	r0, #0
 80031fa:	f7fe fd57 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 80031fe:	20b6      	movs	r0, #182	; 0xb6
 8003200:	f7fe fd44 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003204:	2000      	movs	r0, #0
 8003206:	f7fe fd51 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800320a:	2000      	movs	r0, #0
 800320c:	f7fe fd4e 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 8003210:	20b7      	movs	r0, #183	; 0xb7
 8003212:	f7fe fd3b 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003216:	2000      	movs	r0, #0
 8003218:	f7fe fd48 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800321c:	2000      	movs	r0, #0
 800321e:	f7fe fd45 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8003222:	203f      	movs	r0, #63	; 0x3f
 8003224:	f7fe fd42 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003228:	2000      	movs	r0, #0
 800322a:	f7fe fd3f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 800322e:	205e      	movs	r0, #94	; 0x5e
 8003230:	f7fe fd3c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003234:	2000      	movs	r0, #0
 8003236:	f7fe fd39 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 800323a:	2064      	movs	r0, #100	; 0x64
 800323c:	f7fe fd36 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003240:	2000      	movs	r0, #0
 8003242:	f7fe fd33 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 8003246:	208c      	movs	r0, #140	; 0x8c
 8003248:	f7fe fd30 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800324c:	2000      	movs	r0, #0
 800324e:	f7fe fd2d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 8003252:	20ac      	movs	r0, #172	; 0xac
 8003254:	f7fe fd2a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003258:	2000      	movs	r0, #0
 800325a:	f7fe fd27 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 800325e:	20dc      	movs	r0, #220	; 0xdc
 8003260:	f7fe fd24 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003264:	2000      	movs	r0, #0
 8003266:	f7fe fd21 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 800326a:	2070      	movs	r0, #112	; 0x70
 800326c:	f7fe fd1e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003270:	2000      	movs	r0, #0
 8003272:	f7fe fd1b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 8003276:	2090      	movs	r0, #144	; 0x90
 8003278:	f7fe fd18 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800327c:	2000      	movs	r0, #0
 800327e:	f7fe fd15 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 8003282:	20eb      	movs	r0, #235	; 0xeb
 8003284:	f7fe fd12 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003288:	2000      	movs	r0, #0
 800328a:	f7fe fd0f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 800328e:	20dc      	movs	r0, #220	; 0xdc
 8003290:	f7fe fd0c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003294:	2000      	movs	r0, #0
 8003296:	f7fe fd09 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 800329a:	20b8      	movs	r0, #184	; 0xb8
 800329c:	f7fe fcf6 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80032a0:	2000      	movs	r0, #0
 80032a2:	f7fe fd03 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032a6:	2000      	movs	r0, #0
 80032a8:	f7fe fd00 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7fe fcfd 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032b2:	2000      	movs	r0, #0
 80032b4:	f7fe fcfa 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032b8:	2000      	movs	r0, #0
 80032ba:	f7fe fcf7 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032be:	2000      	movs	r0, #0
 80032c0:	f7fe fcf4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7fe fcf1 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7fe fcee 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 80032d0:	20ba      	movs	r0, #186	; 0xba
 80032d2:	f7fe fcdb 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 80032d6:	2024      	movs	r0, #36	; 0x24
 80032d8:	f7fe fce8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032dc:	2000      	movs	r0, #0
 80032de:	f7fe fce5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032e2:	2000      	movs	r0, #0
 80032e4:	f7fe fce2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032e8:	2000      	movs	r0, #0
 80032ea:	f7fe fcdf 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 80032ee:	20c1      	movs	r0, #193	; 0xc1
 80032f0:	f7fe fccc 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 80032f4:	2020      	movs	r0, #32
 80032f6:	f7fe fcd9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032fa:	2000      	movs	r0, #0
 80032fc:	f7fe fcd6 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8003300:	2054      	movs	r0, #84	; 0x54
 8003302:	f7fe fcd3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003306:	2000      	movs	r0, #0
 8003308:	f7fe fcd0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 800330c:	20ff      	movs	r0, #255	; 0xff
 800330e:	f7fe fccd 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003312:	2000      	movs	r0, #0
 8003314:	f7fe fcca 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 8003318:	20c2      	movs	r0, #194	; 0xc2
 800331a:	f7fe fcb7 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 800331e:	200a      	movs	r0, #10
 8003320:	f7fe fcc4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003324:	2000      	movs	r0, #0
 8003326:	f7fe fcc1 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 800332a:	2004      	movs	r0, #4
 800332c:	f7fe fcbe 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003330:	2000      	movs	r0, #0
 8003332:	f7fe fcbb 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 8003336:	20c3      	movs	r0, #195	; 0xc3
 8003338:	f7fe fca8 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 800333c:	203c      	movs	r0, #60	; 0x3c
 800333e:	f7fe fcb5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003342:	2000      	movs	r0, #0
 8003344:	f7fe fcb2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8003348:	203a      	movs	r0, #58	; 0x3a
 800334a:	f7fe fcaf 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800334e:	2000      	movs	r0, #0
 8003350:	f7fe fcac 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 8003354:	2039      	movs	r0, #57	; 0x39
 8003356:	f7fe fca9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800335a:	2000      	movs	r0, #0
 800335c:	f7fe fca6 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8003360:	2037      	movs	r0, #55	; 0x37
 8003362:	f7fe fca3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003366:	2000      	movs	r0, #0
 8003368:	f7fe fca0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 800336c:	203c      	movs	r0, #60	; 0x3c
 800336e:	f7fe fc9d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003372:	2000      	movs	r0, #0
 8003374:	f7fe fc9a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8003378:	2036      	movs	r0, #54	; 0x36
 800337a:	f7fe fc97 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800337e:	2000      	movs	r0, #0
 8003380:	f7fe fc94 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8003384:	2032      	movs	r0, #50	; 0x32
 8003386:	f7fe fc91 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800338a:	2000      	movs	r0, #0
 800338c:	f7fe fc8e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8003390:	202f      	movs	r0, #47	; 0x2f
 8003392:	f7fe fc8b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003396:	2000      	movs	r0, #0
 8003398:	f7fe fc88 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 800339c:	202c      	movs	r0, #44	; 0x2c
 800339e:	f7fe fc85 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033a2:	2000      	movs	r0, #0
 80033a4:	f7fe fc82 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80033a8:	2029      	movs	r0, #41	; 0x29
 80033aa:	f7fe fc7f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033ae:	2000      	movs	r0, #0
 80033b0:	f7fe fc7c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 80033b4:	2026      	movs	r0, #38	; 0x26
 80033b6:	f7fe fc79 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033ba:	2000      	movs	r0, #0
 80033bc:	f7fe fc76 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 80033c0:	2024      	movs	r0, #36	; 0x24
 80033c2:	f7fe fc73 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033c6:	2000      	movs	r0, #0
 80033c8:	f7fe fc70 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 80033cc:	2024      	movs	r0, #36	; 0x24
 80033ce:	f7fe fc6d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033d2:	2000      	movs	r0, #0
 80033d4:	f7fe fc6a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 80033d8:	2023      	movs	r0, #35	; 0x23
 80033da:	f7fe fc67 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033de:	2000      	movs	r0, #0
 80033e0:	f7fe fc64 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80033e4:	203c      	movs	r0, #60	; 0x3c
 80033e6:	f7fe fc61 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033ea:	2000      	movs	r0, #0
 80033ec:	f7fe fc5e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80033f0:	2036      	movs	r0, #54	; 0x36
 80033f2:	f7fe fc5b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033f6:	2000      	movs	r0, #0
 80033f8:	f7fe fc58 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 80033fc:	2032      	movs	r0, #50	; 0x32
 80033fe:	f7fe fc55 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003402:	2000      	movs	r0, #0
 8003404:	f7fe fc52 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8003408:	202f      	movs	r0, #47	; 0x2f
 800340a:	f7fe fc4f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800340e:	2000      	movs	r0, #0
 8003410:	f7fe fc4c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8003414:	202c      	movs	r0, #44	; 0x2c
 8003416:	f7fe fc49 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800341a:	2000      	movs	r0, #0
 800341c:	f7fe fc46 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003420:	2029      	movs	r0, #41	; 0x29
 8003422:	f7fe fc43 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003426:	2000      	movs	r0, #0
 8003428:	f7fe fc40 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 800342c:	2026      	movs	r0, #38	; 0x26
 800342e:	f7fe fc3d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003432:	2000      	movs	r0, #0
 8003434:	f7fe fc3a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8003438:	2024      	movs	r0, #36	; 0x24
 800343a:	f7fe fc37 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800343e:	2000      	movs	r0, #0
 8003440:	f7fe fc34 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8003444:	2024      	movs	r0, #36	; 0x24
 8003446:	f7fe fc31 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800344a:	2000      	movs	r0, #0
 800344c:	f7fe fc2e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8003450:	2023      	movs	r0, #35	; 0x23
 8003452:	f7fe fc2b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003456:	2000      	movs	r0, #0
 8003458:	f7fe fc28 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 800345c:	20c4      	movs	r0, #196	; 0xc4
 800345e:	f7fe fc15 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 8003462:	2062      	movs	r0, #98	; 0x62
 8003464:	f7fe fc22 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003468:	2000      	movs	r0, #0
 800346a:	f7fe fc1f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 800346e:	2005      	movs	r0, #5
 8003470:	f7fe fc1c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003474:	2000      	movs	r0, #0
 8003476:	f7fe fc19 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 800347a:	2084      	movs	r0, #132	; 0x84
 800347c:	f7fe fc16 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003480:	2000      	movs	r0, #0
 8003482:	f7fe fc13 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8003486:	20f0      	movs	r0, #240	; 0xf0
 8003488:	f7fe fc10 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800348c:	2000      	movs	r0, #0
 800348e:	f7fe fc0d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8003492:	2018      	movs	r0, #24
 8003494:	f7fe fc0a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003498:	2000      	movs	r0, #0
 800349a:	f7fe fc07 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 800349e:	20a4      	movs	r0, #164	; 0xa4
 80034a0:	f7fe fc04 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034a4:	2000      	movs	r0, #0
 80034a6:	f7fe fc01 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 80034aa:	2018      	movs	r0, #24
 80034ac:	f7fe fbfe 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034b0:	2000      	movs	r0, #0
 80034b2:	f7fe fbfb 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 80034b6:	2050      	movs	r0, #80	; 0x50
 80034b8:	f7fe fbf8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034bc:	2000      	movs	r0, #0
 80034be:	f7fe fbf5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 80034c2:	200c      	movs	r0, #12
 80034c4:	f7fe fbf2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7fe fbef 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80034ce:	2017      	movs	r0, #23
 80034d0:	f7fe fbec 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034d4:	2000      	movs	r0, #0
 80034d6:	f7fe fbe9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 80034da:	2095      	movs	r0, #149	; 0x95
 80034dc:	f7fe fbe6 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034e0:	2000      	movs	r0, #0
 80034e2:	f7fe fbe3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80034e6:	20f3      	movs	r0, #243	; 0xf3
 80034e8:	f7fe fbe0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034ec:	2000      	movs	r0, #0
 80034ee:	f7fe fbdd 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 80034f2:	20e6      	movs	r0, #230	; 0xe6
 80034f4:	f7fe fbda 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034f8:	2000      	movs	r0, #0
 80034fa:	f7fe fbd7 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 80034fe:	20c5      	movs	r0, #197	; 0xc5
 8003500:	f7fe fbc4 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8003504:	2032      	movs	r0, #50	; 0x32
 8003506:	f7fe fbd1 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800350a:	2000      	movs	r0, #0
 800350c:	f7fe fbce 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003510:	2044      	movs	r0, #68	; 0x44
 8003512:	f7fe fbcb 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003516:	2000      	movs	r0, #0
 8003518:	f7fe fbc8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 800351c:	2065      	movs	r0, #101	; 0x65
 800351e:	f7fe fbc5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003522:	2000      	movs	r0, #0
 8003524:	f7fe fbc2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8003528:	2076      	movs	r0, #118	; 0x76
 800352a:	f7fe fbbf 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800352e:	2000      	movs	r0, #0
 8003530:	f7fe fbbc 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003534:	2088      	movs	r0, #136	; 0x88
 8003536:	f7fe fbb9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800353a:	2000      	movs	r0, #0
 800353c:	f7fe fbb6 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8003540:	20c6      	movs	r0, #198	; 0xc6
 8003542:	f7fe fba3 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8003546:	2020      	movs	r0, #32
 8003548:	f7fe fbb0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800354c:	2000      	movs	r0, #0
 800354e:	f7fe fbad 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8003552:	2017      	movs	r0, #23
 8003554:	f7fe fbaa 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003558:	2000      	movs	r0, #0
 800355a:	f7fe fba7 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 800355e:	2001      	movs	r0, #1
 8003560:	f7fe fba4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003564:	2000      	movs	r0, #0
 8003566:	f7fe fba1 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 800356a:	20c7      	movs	r0, #199	; 0xc7
 800356c:	f7fe fb8e 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003570:	2000      	movs	r0, #0
 8003572:	f7fe fb9b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003576:	2000      	movs	r0, #0
 8003578:	f7fe fb98 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800357c:	2000      	movs	r0, #0
 800357e:	f7fe fb95 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003582:	2000      	movs	r0, #0
 8003584:	f7fe fb92 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8003588:	20c8      	movs	r0, #200	; 0xc8
 800358a:	f7fe fb7f 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800358e:	2000      	movs	r0, #0
 8003590:	f7fe fb8c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003594:	2000      	movs	r0, #0
 8003596:	f7fe fb89 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800359a:	2000      	movs	r0, #0
 800359c:	f7fe fb86 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035a0:	2000      	movs	r0, #0
 80035a2:	f7fe fb83 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 80035a6:	20c9      	movs	r0, #201	; 0xc9
 80035a8:	f7fe fb70 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80035ac:	2000      	movs	r0, #0
 80035ae:	f7fe fb7d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035b2:	2000      	movs	r0, #0
 80035b4:	f7fe fb7a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035b8:	2000      	movs	r0, #0
 80035ba:	f7fe fb77 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035be:	2000      	movs	r0, #0
 80035c0:	f7fe fb74 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035c4:	2000      	movs	r0, #0
 80035c6:	f7fe fb71 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035ca:	2000      	movs	r0, #0
 80035cc:	f7fe fb6e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035d0:	2000      	movs	r0, #0
 80035d2:	f7fe fb6b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035d6:	2000      	movs	r0, #0
 80035d8:	f7fe fb68 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035dc:	2000      	movs	r0, #0
 80035de:	f7fe fb65 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035e2:	2000      	movs	r0, #0
 80035e4:	f7fe fb62 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035e8:	2000      	movs	r0, #0
 80035ea:	f7fe fb5f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035ee:	2000      	movs	r0, #0
 80035f0:	f7fe fb5c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035f4:	2000      	movs	r0, #0
 80035f6:	f7fe fb59 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035fa:	2000      	movs	r0, #0
 80035fc:	f7fe fb56 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003600:	2000      	movs	r0, #0
 8003602:	f7fe fb53 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003606:	2000      	movs	r0, #0
 8003608:	f7fe fb50 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 800360c:	20e0      	movs	r0, #224	; 0xe0
 800360e:	f7fe fb3d 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8003612:	2016      	movs	r0, #22
 8003614:	f7fe fb4a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003618:	2000      	movs	r0, #0
 800361a:	f7fe fb47 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 800361e:	201c      	movs	r0, #28
 8003620:	f7fe fb44 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003624:	2000      	movs	r0, #0
 8003626:	f7fe fb41 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 800362a:	2021      	movs	r0, #33	; 0x21
 800362c:	f7fe fb3e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003630:	2000      	movs	r0, #0
 8003632:	f7fe fb3b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8003636:	2036      	movs	r0, #54	; 0x36
 8003638:	f7fe fb38 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800363c:	2000      	movs	r0, #0
 800363e:	f7fe fb35 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 8003642:	2046      	movs	r0, #70	; 0x46
 8003644:	f7fe fb32 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003648:	2000      	movs	r0, #0
 800364a:	f7fe fb2f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 800364e:	2052      	movs	r0, #82	; 0x52
 8003650:	f7fe fb2c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003654:	2000      	movs	r0, #0
 8003656:	f7fe fb29 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 800365a:	2064      	movs	r0, #100	; 0x64
 800365c:	f7fe fb26 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003660:	2000      	movs	r0, #0
 8003662:	f7fe fb23 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8003666:	207a      	movs	r0, #122	; 0x7a
 8003668:	f7fe fb20 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800366c:	2000      	movs	r0, #0
 800366e:	f7fe fb1d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8003672:	208b      	movs	r0, #139	; 0x8b
 8003674:	f7fe fb1a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003678:	2000      	movs	r0, #0
 800367a:	f7fe fb17 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800367e:	2099      	movs	r0, #153	; 0x99
 8003680:	f7fe fb14 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003684:	2000      	movs	r0, #0
 8003686:	f7fe fb11 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 800368a:	20a8      	movs	r0, #168	; 0xa8
 800368c:	f7fe fb0e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003690:	2000      	movs	r0, #0
 8003692:	f7fe fb0b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8003696:	20b9      	movs	r0, #185	; 0xb9
 8003698:	f7fe fb08 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800369c:	2000      	movs	r0, #0
 800369e:	f7fe fb05 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80036a2:	20c4      	movs	r0, #196	; 0xc4
 80036a4:	f7fe fb02 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036a8:	2000      	movs	r0, #0
 80036aa:	f7fe faff 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 80036ae:	20ca      	movs	r0, #202	; 0xca
 80036b0:	f7fe fafc 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036b4:	2000      	movs	r0, #0
 80036b6:	f7fe faf9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 80036ba:	20d2      	movs	r0, #210	; 0xd2
 80036bc:	f7fe faf6 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036c0:	2000      	movs	r0, #0
 80036c2:	f7fe faf3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 80036c6:	20d9      	movs	r0, #217	; 0xd9
 80036c8:	f7fe faf0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036cc:	2000      	movs	r0, #0
 80036ce:	f7fe faed 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 80036d2:	20e0      	movs	r0, #224	; 0xe0
 80036d4:	f7fe faea 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036d8:	2000      	movs	r0, #0
 80036da:	f7fe fae7 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80036de:	20f3      	movs	r0, #243	; 0xf3
 80036e0:	f7fe fae4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036e4:	2000      	movs	r0, #0
 80036e6:	f7fe fae1 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 80036ea:	20e1      	movs	r0, #225	; 0xe1
 80036ec:	f7fe face 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80036f0:	2016      	movs	r0, #22
 80036f2:	f7fe fadb 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036f6:	2000      	movs	r0, #0
 80036f8:	f7fe fad8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80036fc:	201c      	movs	r0, #28
 80036fe:	f7fe fad5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003702:	2000      	movs	r0, #0
 8003704:	f7fe fad2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 8003708:	2022      	movs	r0, #34	; 0x22
 800370a:	f7fe facf 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800370e:	2000      	movs	r0, #0
 8003710:	f7fe facc 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8003714:	2036      	movs	r0, #54	; 0x36
 8003716:	f7fe fac9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800371a:	2000      	movs	r0, #0
 800371c:	f7fe fac6 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8003720:	2045      	movs	r0, #69	; 0x45
 8003722:	f7fe fac3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003726:	2000      	movs	r0, #0
 8003728:	f7fe fac0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 800372c:	2052      	movs	r0, #82	; 0x52
 800372e:	f7fe fabd 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003732:	2000      	movs	r0, #0
 8003734:	f7fe faba 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8003738:	2064      	movs	r0, #100	; 0x64
 800373a:	f7fe fab7 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800373e:	2000      	movs	r0, #0
 8003740:	f7fe fab4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8003744:	207a      	movs	r0, #122	; 0x7a
 8003746:	f7fe fab1 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800374a:	2000      	movs	r0, #0
 800374c:	f7fe faae 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8003750:	208b      	movs	r0, #139	; 0x8b
 8003752:	f7fe faab 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003756:	2000      	movs	r0, #0
 8003758:	f7fe faa8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800375c:	2099      	movs	r0, #153	; 0x99
 800375e:	f7fe faa5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003762:	2000      	movs	r0, #0
 8003764:	f7fe faa2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8003768:	20a8      	movs	r0, #168	; 0xa8
 800376a:	f7fe fa9f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800376e:	2000      	movs	r0, #0
 8003770:	f7fe fa9c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8003774:	20b9      	movs	r0, #185	; 0xb9
 8003776:	f7fe fa99 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800377a:	2000      	movs	r0, #0
 800377c:	f7fe fa96 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8003780:	20c4      	movs	r0, #196	; 0xc4
 8003782:	f7fe fa93 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003786:	2000      	movs	r0, #0
 8003788:	f7fe fa90 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 800378c:	20ca      	movs	r0, #202	; 0xca
 800378e:	f7fe fa8d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003792:	2000      	movs	r0, #0
 8003794:	f7fe fa8a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8003798:	20d2      	movs	r0, #210	; 0xd2
 800379a:	f7fe fa87 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800379e:	2000      	movs	r0, #0
 80037a0:	f7fe fa84 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 80037a4:	20d8      	movs	r0, #216	; 0xd8
 80037a6:	f7fe fa81 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037aa:	2000      	movs	r0, #0
 80037ac:	f7fe fa7e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 80037b0:	20e0      	movs	r0, #224	; 0xe0
 80037b2:	f7fe fa7b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037b6:	2000      	movs	r0, #0
 80037b8:	f7fe fa78 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80037bc:	20f3      	movs	r0, #243	; 0xf3
 80037be:	f7fe fa75 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037c2:	2000      	movs	r0, #0
 80037c4:	f7fe fa72 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 80037c8:	20e2      	movs	r0, #226	; 0xe2
 80037ca:	f7fe fa5f 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 80037ce:	2005      	movs	r0, #5
 80037d0:	f7fe fa6c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037d4:	2000      	movs	r0, #0
 80037d6:	f7fe fa69 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 80037da:	200b      	movs	r0, #11
 80037dc:	f7fe fa66 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037e0:	2000      	movs	r0, #0
 80037e2:	f7fe fa63 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 80037e6:	201b      	movs	r0, #27
 80037e8:	f7fe fa60 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037ec:	2000      	movs	r0, #0
 80037ee:	f7fe fa5d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80037f2:	2034      	movs	r0, #52	; 0x34
 80037f4:	f7fe fa5a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037f8:	2000      	movs	r0, #0
 80037fa:	f7fe fa57 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80037fe:	2044      	movs	r0, #68	; 0x44
 8003800:	f7fe fa54 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003804:	2000      	movs	r0, #0
 8003806:	f7fe fa51 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 800380a:	204f      	movs	r0, #79	; 0x4f
 800380c:	f7fe fa4e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003810:	2000      	movs	r0, #0
 8003812:	f7fe fa4b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 8003816:	2061      	movs	r0, #97	; 0x61
 8003818:	f7fe fa48 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800381c:	2000      	movs	r0, #0
 800381e:	f7fe fa45 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 8003822:	2079      	movs	r0, #121	; 0x79
 8003824:	f7fe fa42 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003828:	2000      	movs	r0, #0
 800382a:	f7fe fa3f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800382e:	2088      	movs	r0, #136	; 0x88
 8003830:	f7fe fa3c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003834:	2000      	movs	r0, #0
 8003836:	f7fe fa39 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 800383a:	2097      	movs	r0, #151	; 0x97
 800383c:	f7fe fa36 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003840:	2000      	movs	r0, #0
 8003842:	f7fe fa33 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8003846:	20a6      	movs	r0, #166	; 0xa6
 8003848:	f7fe fa30 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800384c:	2000      	movs	r0, #0
 800384e:	f7fe fa2d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8003852:	20b7      	movs	r0, #183	; 0xb7
 8003854:	f7fe fa2a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003858:	2000      	movs	r0, #0
 800385a:	f7fe fa27 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 800385e:	20c2      	movs	r0, #194	; 0xc2
 8003860:	f7fe fa24 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003864:	2000      	movs	r0, #0
 8003866:	f7fe fa21 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 800386a:	20c7      	movs	r0, #199	; 0xc7
 800386c:	f7fe fa1e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003870:	2000      	movs	r0, #0
 8003872:	f7fe fa1b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8003876:	20d1      	movs	r0, #209	; 0xd1
 8003878:	f7fe fa18 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800387c:	2000      	movs	r0, #0
 800387e:	f7fe fa15 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 8003882:	20d6      	movs	r0, #214	; 0xd6
 8003884:	f7fe fa12 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003888:	2000      	movs	r0, #0
 800388a:	f7fe fa0f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 800388e:	20dd      	movs	r0, #221	; 0xdd
 8003890:	f7fe fa0c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003894:	2000      	movs	r0, #0
 8003896:	f7fe fa09 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800389a:	20f3      	movs	r0, #243	; 0xf3
 800389c:	f7fe fa06 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038a0:	2000      	movs	r0, #0
 80038a2:	f7fe fa03 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 80038a6:	20e3      	movs	r0, #227	; 0xe3
 80038a8:	f7fe f9f0 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 80038ac:	2005      	movs	r0, #5
 80038ae:	f7fe f9fd 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038b2:	2000      	movs	r0, #0
 80038b4:	f7fe f9fa 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 80038b8:	200a      	movs	r0, #10
 80038ba:	f7fe f9f7 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038be:	2000      	movs	r0, #0
 80038c0:	f7fe f9f4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80038c4:	201c      	movs	r0, #28
 80038c6:	f7fe f9f1 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038ca:	2000      	movs	r0, #0
 80038cc:	f7fe f9ee 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 80038d0:	2033      	movs	r0, #51	; 0x33
 80038d2:	f7fe f9eb 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038d6:	2000      	movs	r0, #0
 80038d8:	f7fe f9e8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80038dc:	2044      	movs	r0, #68	; 0x44
 80038de:	f7fe f9e5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038e2:	2000      	movs	r0, #0
 80038e4:	f7fe f9e2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 80038e8:	2050      	movs	r0, #80	; 0x50
 80038ea:	f7fe f9df 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038ee:	2000      	movs	r0, #0
 80038f0:	f7fe f9dc 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 80038f4:	2062      	movs	r0, #98	; 0x62
 80038f6:	f7fe f9d9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038fa:	2000      	movs	r0, #0
 80038fc:	f7fe f9d6 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 8003900:	2078      	movs	r0, #120	; 0x78
 8003902:	f7fe f9d3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003906:	2000      	movs	r0, #0
 8003908:	f7fe f9d0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800390c:	2088      	movs	r0, #136	; 0x88
 800390e:	f7fe f9cd 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003912:	2000      	movs	r0, #0
 8003914:	f7fe f9ca 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8003918:	2097      	movs	r0, #151	; 0x97
 800391a:	f7fe f9c7 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800391e:	2000      	movs	r0, #0
 8003920:	f7fe f9c4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8003924:	20a6      	movs	r0, #166	; 0xa6
 8003926:	f7fe f9c1 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800392a:	2000      	movs	r0, #0
 800392c:	f7fe f9be 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8003930:	20b7      	movs	r0, #183	; 0xb7
 8003932:	f7fe f9bb 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003936:	2000      	movs	r0, #0
 8003938:	f7fe f9b8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 800393c:	20c2      	movs	r0, #194	; 0xc2
 800393e:	f7fe f9b5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003942:	2000      	movs	r0, #0
 8003944:	f7fe f9b2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8003948:	20c7      	movs	r0, #199	; 0xc7
 800394a:	f7fe f9af 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800394e:	2000      	movs	r0, #0
 8003950:	f7fe f9ac 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8003954:	20d1      	movs	r0, #209	; 0xd1
 8003956:	f7fe f9a9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800395a:	2000      	movs	r0, #0
 800395c:	f7fe f9a6 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 8003960:	20d5      	movs	r0, #213	; 0xd5
 8003962:	f7fe f9a3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003966:	2000      	movs	r0, #0
 8003968:	f7fe f9a0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 800396c:	20dd      	movs	r0, #221	; 0xdd
 800396e:	f7fe f99d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003972:	2000      	movs	r0, #0
 8003974:	f7fe f99a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003978:	20f3      	movs	r0, #243	; 0xf3
 800397a:	f7fe f997 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800397e:	2000      	movs	r0, #0
 8003980:	f7fe f994 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8003984:	20e4      	movs	r0, #228	; 0xe4
 8003986:	f7fe f981 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 800398a:	2001      	movs	r0, #1
 800398c:	f7fe f98e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003990:	2000      	movs	r0, #0
 8003992:	f7fe f98b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8003996:	2001      	movs	r0, #1
 8003998:	f7fe f988 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800399c:	2000      	movs	r0, #0
 800399e:	f7fe f985 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 80039a2:	2002      	movs	r0, #2
 80039a4:	f7fe f982 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039a8:	2000      	movs	r0, #0
 80039aa:	f7fe f97f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 80039ae:	202a      	movs	r0, #42	; 0x2a
 80039b0:	f7fe f97c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039b4:	2000      	movs	r0, #0
 80039b6:	f7fe f979 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80039ba:	203c      	movs	r0, #60	; 0x3c
 80039bc:	f7fe f976 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039c0:	2000      	movs	r0, #0
 80039c2:	f7fe f973 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 80039c6:	204b      	movs	r0, #75	; 0x4b
 80039c8:	f7fe f970 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039cc:	2000      	movs	r0, #0
 80039ce:	f7fe f96d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 80039d2:	205d      	movs	r0, #93	; 0x5d
 80039d4:	f7fe f96a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039d8:	2000      	movs	r0, #0
 80039da:	f7fe f967 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 80039de:	2074      	movs	r0, #116	; 0x74
 80039e0:	f7fe f964 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039e4:	2000      	movs	r0, #0
 80039e6:	f7fe f961 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 80039ea:	2084      	movs	r0, #132	; 0x84
 80039ec:	f7fe f95e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039f0:	2000      	movs	r0, #0
 80039f2:	f7fe f95b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 80039f6:	2093      	movs	r0, #147	; 0x93
 80039f8:	f7fe f958 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039fc:	2000      	movs	r0, #0
 80039fe:	f7fe f955 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8003a02:	20a2      	movs	r0, #162	; 0xa2
 8003a04:	f7fe f952 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a08:	2000      	movs	r0, #0
 8003a0a:	f7fe f94f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8003a0e:	20b3      	movs	r0, #179	; 0xb3
 8003a10:	f7fe f94c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a14:	2000      	movs	r0, #0
 8003a16:	f7fe f949 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8003a1a:	20be      	movs	r0, #190	; 0xbe
 8003a1c:	f7fe f946 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a20:	2000      	movs	r0, #0
 8003a22:	f7fe f943 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8003a26:	20c4      	movs	r0, #196	; 0xc4
 8003a28:	f7fe f940 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f7fe f93d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8003a32:	20cd      	movs	r0, #205	; 0xcd
 8003a34:	f7fe f93a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a38:	2000      	movs	r0, #0
 8003a3a:	f7fe f937 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8003a3e:	20d3      	movs	r0, #211	; 0xd3
 8003a40:	f7fe f934 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7fe f931 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8003a4a:	20dd      	movs	r0, #221	; 0xdd
 8003a4c:	f7fe f92e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a50:	2000      	movs	r0, #0
 8003a52:	f7fe f92b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003a56:	20f3      	movs	r0, #243	; 0xf3
 8003a58:	f7fe f928 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f7fe f925 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 8003a62:	20e5      	movs	r0, #229	; 0xe5
 8003a64:	f7fe f912 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003a68:	2000      	movs	r0, #0
 8003a6a:	f7fe f91f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f7fe f91c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a74:	2000      	movs	r0, #0
 8003a76:	f7fe f919 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f7fe f916 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8003a80:	2002      	movs	r0, #2
 8003a82:	f7fe f913 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a86:	2000      	movs	r0, #0
 8003a88:	f7fe f910 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003a8c:	2029      	movs	r0, #41	; 0x29
 8003a8e:	f7fe f90d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a92:	2000      	movs	r0, #0
 8003a94:	f7fe f90a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8003a98:	203c      	movs	r0, #60	; 0x3c
 8003a9a:	f7fe f907 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f7fe f904 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8003aa4:	204b      	movs	r0, #75	; 0x4b
 8003aa6:	f7fe f901 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003aaa:	2000      	movs	r0, #0
 8003aac:	f7fe f8fe 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8003ab0:	205d      	movs	r0, #93	; 0x5d
 8003ab2:	f7fe f8fb 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ab6:	2000      	movs	r0, #0
 8003ab8:	f7fe f8f8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8003abc:	2074      	movs	r0, #116	; 0x74
 8003abe:	f7fe f8f5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	f7fe f8f2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8003ac8:	2084      	movs	r0, #132	; 0x84
 8003aca:	f7fe f8ef 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f7fe f8ec 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8003ad4:	2093      	movs	r0, #147	; 0x93
 8003ad6:	f7fe f8e9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ada:	2000      	movs	r0, #0
 8003adc:	f7fe f8e6 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8003ae0:	20a2      	movs	r0, #162	; 0xa2
 8003ae2:	f7fe f8e3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ae6:	2000      	movs	r0, #0
 8003ae8:	f7fe f8e0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8003aec:	20b3      	movs	r0, #179	; 0xb3
 8003aee:	f7fe f8dd 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003af2:	2000      	movs	r0, #0
 8003af4:	f7fe f8da 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8003af8:	20be      	movs	r0, #190	; 0xbe
 8003afa:	f7fe f8d7 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003afe:	2000      	movs	r0, #0
 8003b00:	f7fe f8d4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8003b04:	20c4      	movs	r0, #196	; 0xc4
 8003b06:	f7fe f8d1 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	f7fe f8ce 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8003b10:	20cd      	movs	r0, #205	; 0xcd
 8003b12:	f7fe f8cb 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b16:	2000      	movs	r0, #0
 8003b18:	f7fe f8c8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8003b1c:	20d3      	movs	r0, #211	; 0xd3
 8003b1e:	f7fe f8c5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b22:	2000      	movs	r0, #0
 8003b24:	f7fe f8c2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8003b28:	20dc      	movs	r0, #220	; 0xdc
 8003b2a:	f7fe f8bf 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b2e:	2000      	movs	r0, #0
 8003b30:	f7fe f8bc 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003b34:	20f3      	movs	r0, #243	; 0xf3
 8003b36:	f7fe f8b9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f7fe f8b6 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 8003b40:	20e6      	movs	r0, #230	; 0xe6
 8003b42:	f7fe f8a3 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 8003b46:	2011      	movs	r0, #17
 8003b48:	f7fe f8b0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b4c:	2000      	movs	r0, #0
 8003b4e:	f7fe f8ad 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8003b52:	2034      	movs	r0, #52	; 0x34
 8003b54:	f7fe f8aa 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b58:	2000      	movs	r0, #0
 8003b5a:	f7fe f8a7 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8003b5e:	2056      	movs	r0, #86	; 0x56
 8003b60:	f7fe f8a4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b64:	2000      	movs	r0, #0
 8003b66:	f7fe f8a1 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8003b6a:	2076      	movs	r0, #118	; 0x76
 8003b6c:	f7fe f89e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b70:	2000      	movs	r0, #0
 8003b72:	f7fe f89b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8003b76:	2077      	movs	r0, #119	; 0x77
 8003b78:	f7fe f898 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	f7fe f895 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8003b82:	2066      	movs	r0, #102	; 0x66
 8003b84:	f7fe f892 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b88:	2000      	movs	r0, #0
 8003b8a:	f7fe f88f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003b8e:	2088      	movs	r0, #136	; 0x88
 8003b90:	f7fe f88c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b94:	2000      	movs	r0, #0
 8003b96:	f7fe f889 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003b9a:	2099      	movs	r0, #153	; 0x99
 8003b9c:	f7fe f886 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ba0:	2000      	movs	r0, #0
 8003ba2:	f7fe f883 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8003ba6:	20bb      	movs	r0, #187	; 0xbb
 8003ba8:	f7fe f880 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bac:	2000      	movs	r0, #0
 8003bae:	f7fe f87d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003bb2:	2099      	movs	r0, #153	; 0x99
 8003bb4:	f7fe f87a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bb8:	2000      	movs	r0, #0
 8003bba:	f7fe f877 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8003bbe:	2066      	movs	r0, #102	; 0x66
 8003bc0:	f7fe f874 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	f7fe f871 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8003bca:	2055      	movs	r0, #85	; 0x55
 8003bcc:	f7fe f86e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	f7fe f86b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8003bd6:	2055      	movs	r0, #85	; 0x55
 8003bd8:	f7fe f868 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f7fe f865 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8003be2:	2045      	movs	r0, #69	; 0x45
 8003be4:	f7fe f862 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003be8:	2000      	movs	r0, #0
 8003bea:	f7fe f85f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8003bee:	2043      	movs	r0, #67	; 0x43
 8003bf0:	f7fe f85c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bf4:	2000      	movs	r0, #0
 8003bf6:	f7fe f859 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003bfa:	2044      	movs	r0, #68	; 0x44
 8003bfc:	f7fe f856 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c00:	2000      	movs	r0, #0
 8003c02:	f7fe f853 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 8003c06:	20e7      	movs	r0, #231	; 0xe7
 8003c08:	f7fe f840 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8003c0c:	2032      	movs	r0, #50	; 0x32
 8003c0e:	f7fe f84d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c12:	2000      	movs	r0, #0
 8003c14:	f7fe f84a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8003c18:	2055      	movs	r0, #85	; 0x55
 8003c1a:	f7fe f847 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c1e:	2000      	movs	r0, #0
 8003c20:	f7fe f844 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8003c24:	2076      	movs	r0, #118	; 0x76
 8003c26:	f7fe f841 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c2a:	2000      	movs	r0, #0
 8003c2c:	f7fe f83e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8003c30:	2066      	movs	r0, #102	; 0x66
 8003c32:	f7fe f83b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c36:	2000      	movs	r0, #0
 8003c38:	f7fe f838 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8003c3c:	2067      	movs	r0, #103	; 0x67
 8003c3e:	f7fe f835 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c42:	2000      	movs	r0, #0
 8003c44:	f7fe f832 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8003c48:	2067      	movs	r0, #103	; 0x67
 8003c4a:	f7fe f82f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f7fe f82c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8003c54:	2087      	movs	r0, #135	; 0x87
 8003c56:	f7fe f829 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	f7fe f826 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003c60:	2099      	movs	r0, #153	; 0x99
 8003c62:	f7fe f823 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c66:	2000      	movs	r0, #0
 8003c68:	f7fe f820 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8003c6c:	20bb      	movs	r0, #187	; 0xbb
 8003c6e:	f7fe f81d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c72:	2000      	movs	r0, #0
 8003c74:	f7fe f81a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003c78:	2099      	movs	r0, #153	; 0x99
 8003c7a:	f7fe f817 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c7e:	2000      	movs	r0, #0
 8003c80:	f7fe f814 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8003c84:	2077      	movs	r0, #119	; 0x77
 8003c86:	f7fe f811 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	f7fe f80e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003c90:	2044      	movs	r0, #68	; 0x44
 8003c92:	f7fe f80b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c96:	2000      	movs	r0, #0
 8003c98:	f7fe f808 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8003c9c:	2056      	movs	r0, #86	; 0x56
 8003c9e:	f7fe f805 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	f7fe f802 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8003ca8:	2023      	movs	r0, #35	; 0x23
 8003caa:	f7fd ffff 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cae:	2000      	movs	r0, #0
 8003cb0:	f7fd fffc 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8003cb4:	2033      	movs	r0, #51	; 0x33
 8003cb6:	f7fd fff9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cba:	2000      	movs	r0, #0
 8003cbc:	f7fd fff6 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8003cc0:	2045      	movs	r0, #69	; 0x45
 8003cc2:	f7fd fff3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	f7fd fff0 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8003ccc:	20e8      	movs	r0, #232	; 0xe8
 8003cce:	f7fd ffdd 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003cd2:	2000      	movs	r0, #0
 8003cd4:	f7fd ffea 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cd8:	2000      	movs	r0, #0
 8003cda:	f7fd ffe7 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003cde:	2099      	movs	r0, #153	; 0x99
 8003ce0:	f7fd ffe4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ce4:	2000      	movs	r0, #0
 8003ce6:	f7fd ffe1 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8003cea:	2087      	movs	r0, #135	; 0x87
 8003cec:	f7fd ffde 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f7fd ffdb 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003cf6:	2088      	movs	r0, #136	; 0x88
 8003cf8:	f7fd ffd8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f7fd ffd5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8003d02:	2077      	movs	r0, #119	; 0x77
 8003d04:	f7fd ffd2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d08:	2000      	movs	r0, #0
 8003d0a:	f7fd ffcf 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8003d0e:	2066      	movs	r0, #102	; 0x66
 8003d10:	f7fd ffcc 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d14:	2000      	movs	r0, #0
 8003d16:	f7fd ffc9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003d1a:	2088      	movs	r0, #136	; 0x88
 8003d1c:	f7fd ffc6 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d20:	2000      	movs	r0, #0
 8003d22:	f7fd ffc3 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 8003d26:	20aa      	movs	r0, #170	; 0xaa
 8003d28:	f7fd ffc0 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	f7fd ffbd 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8003d32:	20bb      	movs	r0, #187	; 0xbb
 8003d34:	f7fd ffba 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f7fd ffb7 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003d3e:	2099      	movs	r0, #153	; 0x99
 8003d40:	f7fd ffb4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d44:	2000      	movs	r0, #0
 8003d46:	f7fd ffb1 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8003d4a:	2066      	movs	r0, #102	; 0x66
 8003d4c:	f7fd ffae 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d50:	2000      	movs	r0, #0
 8003d52:	f7fd ffab 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8003d56:	2055      	movs	r0, #85	; 0x55
 8003d58:	f7fd ffa8 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	f7fd ffa5 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8003d62:	2055      	movs	r0, #85	; 0x55
 8003d64:	f7fd ffa2 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d68:	2000      	movs	r0, #0
 8003d6a:	f7fd ff9f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003d6e:	2044      	movs	r0, #68	; 0x44
 8003d70:	f7fd ff9c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d74:	2000      	movs	r0, #0
 8003d76:	f7fd ff99 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003d7a:	2044      	movs	r0, #68	; 0x44
 8003d7c:	f7fd ff96 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d80:	2000      	movs	r0, #0
 8003d82:	f7fd ff93 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8003d86:	2055      	movs	r0, #85	; 0x55
 8003d88:	f7fd ff90 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	f7fd ff8d 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 8003d92:	20e9      	movs	r0, #233	; 0xe9
 8003d94:	f7fd ff7a 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8003d98:	20aa      	movs	r0, #170	; 0xaa
 8003d9a:	f7fd ff87 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d9e:	2000      	movs	r0, #0
 8003da0:	f7fd ff84 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003da4:	2000      	movs	r0, #0
 8003da6:	f7fd ff81 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003daa:	2000      	movs	r0, #0
 8003dac:	f7fd ff7e 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8003db0:	2000      	movs	r0, #0
 8003db2:	f7fd ff6b 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8003db6:	20aa      	movs	r0, #170	; 0xaa
 8003db8:	f7fd ff78 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8003dbc:	20cf      	movs	r0, #207	; 0xcf
 8003dbe:	f7fd ff65 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003dc2:	2000      	movs	r0, #0
 8003dc4:	f7fd ff72 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dc8:	2000      	movs	r0, #0
 8003dca:	f7fd ff6f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dce:	2000      	movs	r0, #0
 8003dd0:	f7fd ff6c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f7fd ff69 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f7fd ff66 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003de0:	2000      	movs	r0, #0
 8003de2:	f7fd ff63 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003de6:	2000      	movs	r0, #0
 8003de8:	f7fd ff60 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dec:	2000      	movs	r0, #0
 8003dee:	f7fd ff5d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003df2:	2000      	movs	r0, #0
 8003df4:	f7fd ff5a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f7fd ff57 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dfe:	2000      	movs	r0, #0
 8003e00:	f7fd ff54 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e04:	2000      	movs	r0, #0
 8003e06:	f7fd ff51 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	f7fd ff4e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e10:	2000      	movs	r0, #0
 8003e12:	f7fd ff4b 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e16:	2000      	movs	r0, #0
 8003e18:	f7fd ff48 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	f7fd ff45 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e22:	2000      	movs	r0, #0
 8003e24:	f7fd ff42 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 8003e28:	20f0      	movs	r0, #240	; 0xf0
 8003e2a:	f7fd ff2f 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f7fd ff3c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8003e34:	2050      	movs	r0, #80	; 0x50
 8003e36:	f7fd ff39 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f7fd ff36 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e40:	2000      	movs	r0, #0
 8003e42:	f7fd ff33 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e46:	2000      	movs	r0, #0
 8003e48:	f7fd ff30 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8003e4c:	20f3      	movs	r0, #243	; 0xf3
 8003e4e:	f7fd ff1d 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003e52:	2000      	movs	r0, #0
 8003e54:	f7fd ff2a 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 8003e58:	20f9      	movs	r0, #249	; 0xf9
 8003e5a:	f7fd ff17 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 8003e5e:	2006      	movs	r0, #6
 8003e60:	f7fd ff24 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8003e64:	2010      	movs	r0, #16
 8003e66:	f7fd ff21 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003e6a:	2029      	movs	r0, #41	; 0x29
 8003e6c:	f7fd ff1e 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e70:	2000      	movs	r0, #0
 8003e72:	f7fd ff1b 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 8003e76:	203a      	movs	r0, #58	; 0x3a
 8003e78:	f7fd ff08 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8003e7c:	2055      	movs	r0, #85	; 0x55
 8003e7e:	f7fd ff15 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 8003e82:	2011      	movs	r0, #17
 8003e84:	f7fd ff02 	bl	8001c8c <LCD_WR_REG>
		HAL_Delay(100);
 8003e88:	2064      	movs	r0, #100	; 0x64
 8003e8a:	f003 fac7 	bl	800741c <HAL_Delay>
		LCD_WR_REG(0x29);
 8003e8e:	2029      	movs	r0, #41	; 0x29
 8003e90:	f7fd fefc 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003e94:	2035      	movs	r0, #53	; 0x35
 8003e96:	f7fd fef9 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f7fd ff06 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8003ea0:	2051      	movs	r0, #81	; 0x51
 8003ea2:	f7fd fef3 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 8003ea6:	20ff      	movs	r0, #255	; 0xff
 8003ea8:	f7fd ff00 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8003eac:	2053      	movs	r0, #83	; 0x53
 8003eae:	f7fd feed 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 8003eb2:	202c      	movs	r0, #44	; 0x2c
 8003eb4:	f7fd fefa 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8003eb8:	2055      	movs	r0, #85	; 0x55
 8003eba:	f7fd fee7 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 8003ebe:	2082      	movs	r0, #130	; 0x82
 8003ec0:	f7fd fef4 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8003ec4:	202c      	movs	r0, #44	; 0x2c
 8003ec6:	f7fd fee1 	bl	8001c8c <LCD_WR_REG>
 8003eca:	f002 b8e7 	b.w	800609c <LCD_Init+0x383c>
	}else if(lcddev.id==0x5510)
 8003ece:	4b04      	ldr	r3, [pc, #16]	; (8003ee0 <LCD_Init+0x1680>)
 8003ed0:	889b      	ldrh	r3, [r3, #4]
 8003ed2:	f245 5210 	movw	r2, #21776	; 0x5510
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	f040 8782 	bne.w	8004de0 <LCD_Init+0x2580>
 8003edc:	e002      	b.n	8003ee4 <LCD_Init+0x1684>
 8003ede:	bf00      	nop
 8003ee0:	20000358 	.word	0x20000358
	{
		LCD_WriteReg(0xF000,0x55);
 8003ee4:	2155      	movs	r1, #85	; 0x55
 8003ee6:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003eea:	f7fd fefd 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8003eee:	21aa      	movs	r1, #170	; 0xaa
 8003ef0:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003ef4:	f7fd fef8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8003ef8:	2152      	movs	r1, #82	; 0x52
 8003efa:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003efe:	f7fd fef3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8003f02:	2108      	movs	r1, #8
 8003f04:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003f08:	f7fd feee 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003f12:	f7fd fee9 	bl	8001ce8 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 8003f16:	210d      	movs	r1, #13
 8003f18:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003f1c:	f7fd fee4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 8003f20:	210d      	movs	r1, #13
 8003f22:	f24b 0001 	movw	r0, #45057	; 0xb001
 8003f26:	f7fd fedf 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 8003f2a:	210d      	movs	r1, #13
 8003f2c:	f24b 0002 	movw	r0, #45058	; 0xb002
 8003f30:	f7fd feda 	bl	8001ce8 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 8003f34:	2134      	movs	r1, #52	; 0x34
 8003f36:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003f3a:	f7fd fed5 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 8003f3e:	2134      	movs	r1, #52	; 0x34
 8003f40:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003f44:	f7fd fed0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8003f48:	2134      	movs	r1, #52	; 0x34
 8003f4a:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003f4e:	f7fd fecb 	bl	8001ce8 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 8003f52:	210d      	movs	r1, #13
 8003f54:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003f58:	f7fd fec6 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8003f5c:	210d      	movs	r1, #13
 8003f5e:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003f62:	f7fd fec1 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 8003f66:	210d      	movs	r1, #13
 8003f68:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003f6c:	f7fd febc 	bl	8001ce8 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 8003f70:	2134      	movs	r1, #52	; 0x34
 8003f72:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003f76:	f7fd feb7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8003f7a:	2134      	movs	r1, #52	; 0x34
 8003f7c:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003f80:	f7fd feb2 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8003f84:	2134      	movs	r1, #52	; 0x34
 8003f86:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003f8a:	f7fd fead 	bl	8001ce8 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8003f8e:	2100      	movs	r1, #0
 8003f90:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003f94:	f7fd fea8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003f9e:	f7fd fea3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003fa8:	f7fd fe9e 	bl	8001ce8 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8003fac:	2124      	movs	r1, #36	; 0x24
 8003fae:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003fb2:	f7fd fe99 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 8003fb6:	2124      	movs	r1, #36	; 0x24
 8003fb8:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003fbc:	f7fd fe94 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8003fc0:	2124      	movs	r1, #36	; 0x24
 8003fc2:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003fc6:	f7fd fe8f 	bl	8001ce8 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8003fca:	2101      	movs	r1, #1
 8003fcc:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003fd0:	f7fd fe8a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 8003fd4:	210f      	movs	r1, #15
 8003fd6:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8003fda:	f7fd fe85 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 8003fde:	210f      	movs	r1, #15
 8003fe0:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003fe4:	f7fd fe80 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 8003fe8:	210f      	movs	r1, #15
 8003fea:	f24b 3002 	movw	r0, #45826	; 0xb302
 8003fee:	f7fd fe7b 	bl	8001ce8 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 8003ff2:	2134      	movs	r1, #52	; 0x34
 8003ff4:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003ff8:	f7fd fe76 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 8003ffc:	2134      	movs	r1, #52	; 0x34
 8003ffe:	f64b 1001 	movw	r0, #47361	; 0xb901
 8004002:	f7fd fe71 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 8004006:	2134      	movs	r1, #52	; 0x34
 8004008:	f64b 1002 	movw	r0, #47362	; 0xb902
 800400c:	f7fd fe6c 	bl	8001ce8 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 8004010:	2108      	movs	r1, #8
 8004012:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8004016:	f7fd fe67 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 800401a:	2108      	movs	r1, #8
 800401c:	f24b 5001 	movw	r0, #46337	; 0xb501
 8004020:	f7fd fe62 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 8004024:	2108      	movs	r1, #8
 8004026:	f24b 5002 	movw	r0, #46338	; 0xb502
 800402a:	f7fd fe5d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 800402e:	2103      	movs	r1, #3
 8004030:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8004034:	f7fd fe58 	bl	8001ce8 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8004038:	2124      	movs	r1, #36	; 0x24
 800403a:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800403e:	f7fd fe53 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 8004042:	2124      	movs	r1, #36	; 0x24
 8004044:	f64b 2001 	movw	r0, #47617	; 0xba01
 8004048:	f7fd fe4e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 800404c:	2124      	movs	r1, #36	; 0x24
 800404e:	f64b 2002 	movw	r0, #47618	; 0xba02
 8004052:	f7fd fe49 	bl	8001ce8 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 8004056:	2100      	movs	r1, #0
 8004058:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 800405c:	f7fd fe44 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8004060:	2178      	movs	r1, #120	; 0x78
 8004062:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004066:	f7fd fe3f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 800406a:	2100      	movs	r1, #0
 800406c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004070:	f7fd fe3a 	bl	8001ce8 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8004074:	2100      	movs	r1, #0
 8004076:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 800407a:	f7fd fe35 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 800407e:	2178      	movs	r1, #120	; 0x78
 8004080:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8004084:	f7fd fe30 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8004088:	2100      	movs	r1, #0
 800408a:	f64b 5002 	movw	r0, #48386	; 0xbd02
 800408e:	f7fd fe2b 	bl	8001ce8 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 8004092:	2100      	movs	r1, #0
 8004094:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8004098:	f7fd fe26 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 800409c:	2164      	movs	r1, #100	; 0x64
 800409e:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80040a2:	f7fd fe21 	bl	8001ce8 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 80040a6:	2100      	movs	r1, #0
 80040a8:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80040ac:	f7fd fe1c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 80040b0:	2133      	movs	r1, #51	; 0x33
 80040b2:	f24d 1001 	movw	r0, #53505	; 0xd101
 80040b6:	f7fd fe17 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 80040ba:	2100      	movs	r1, #0
 80040bc:	f24d 1002 	movw	r0, #53506	; 0xd102
 80040c0:	f7fd fe12 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 80040c4:	2134      	movs	r1, #52	; 0x34
 80040c6:	f24d 1003 	movw	r0, #53507	; 0xd103
 80040ca:	f7fd fe0d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 80040ce:	2100      	movs	r1, #0
 80040d0:	f24d 1004 	movw	r0, #53508	; 0xd104
 80040d4:	f7fd fe08 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 80040d8:	213a      	movs	r1, #58	; 0x3a
 80040da:	f24d 1005 	movw	r0, #53509	; 0xd105
 80040de:	f7fd fe03 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 80040e2:	2100      	movs	r1, #0
 80040e4:	f24d 1006 	movw	r0, #53510	; 0xd106
 80040e8:	f7fd fdfe 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 80040ec:	214a      	movs	r1, #74	; 0x4a
 80040ee:	f24d 1007 	movw	r0, #53511	; 0xd107
 80040f2:	f7fd fdf9 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 80040f6:	2100      	movs	r1, #0
 80040f8:	f24d 1008 	movw	r0, #53512	; 0xd108
 80040fc:	f7fd fdf4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 8004100:	215c      	movs	r1, #92	; 0x5c
 8004102:	f24d 1009 	movw	r0, #53513	; 0xd109
 8004106:	f7fd fdef 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 800410a:	2100      	movs	r1, #0
 800410c:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8004110:	f7fd fdea 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 8004114:	2181      	movs	r1, #129	; 0x81
 8004116:	f24d 100b 	movw	r0, #53515	; 0xd10b
 800411a:	f7fd fde5 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 800411e:	2100      	movs	r1, #0
 8004120:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8004124:	f7fd fde0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 8004128:	21a6      	movs	r1, #166	; 0xa6
 800412a:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800412e:	f7fd fddb 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 8004132:	2100      	movs	r1, #0
 8004134:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8004138:	f7fd fdd6 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 800413c:	21e5      	movs	r1, #229	; 0xe5
 800413e:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8004142:	f7fd fdd1 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 8004146:	2101      	movs	r1, #1
 8004148:	f24d 1010 	movw	r0, #53520	; 0xd110
 800414c:	f7fd fdcc 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8004150:	2113      	movs	r1, #19
 8004152:	f24d 1011 	movw	r0, #53521	; 0xd111
 8004156:	f7fd fdc7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 800415a:	2101      	movs	r1, #1
 800415c:	f24d 1012 	movw	r0, #53522	; 0xd112
 8004160:	f7fd fdc2 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8004164:	2154      	movs	r1, #84	; 0x54
 8004166:	f24d 1013 	movw	r0, #53523	; 0xd113
 800416a:	f7fd fdbd 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 800416e:	2101      	movs	r1, #1
 8004170:	f24d 1014 	movw	r0, #53524	; 0xd114
 8004174:	f7fd fdb8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8004178:	2182      	movs	r1, #130	; 0x82
 800417a:	f24d 1015 	movw	r0, #53525	; 0xd115
 800417e:	f7fd fdb3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 8004182:	2101      	movs	r1, #1
 8004184:	f24d 1016 	movw	r0, #53526	; 0xd116
 8004188:	f7fd fdae 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 800418c:	21ca      	movs	r1, #202	; 0xca
 800418e:	f24d 1017 	movw	r0, #53527	; 0xd117
 8004192:	f7fd fda9 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 8004196:	2102      	movs	r1, #2
 8004198:	f24d 1018 	movw	r0, #53528	; 0xd118
 800419c:	f7fd fda4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 80041a0:	2100      	movs	r1, #0
 80041a2:	f24d 1019 	movw	r0, #53529	; 0xd119
 80041a6:	f7fd fd9f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 80041aa:	2102      	movs	r1, #2
 80041ac:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80041b0:	f7fd fd9a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 80041b4:	2101      	movs	r1, #1
 80041b6:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80041ba:	f7fd fd95 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 80041be:	2102      	movs	r1, #2
 80041c0:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80041c4:	f7fd fd90 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 80041c8:	2134      	movs	r1, #52	; 0x34
 80041ca:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80041ce:	f7fd fd8b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 80041d2:	2102      	movs	r1, #2
 80041d4:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80041d8:	f7fd fd86 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 80041dc:	2167      	movs	r1, #103	; 0x67
 80041de:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80041e2:	f7fd fd81 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 80041e6:	2102      	movs	r1, #2
 80041e8:	f24d 1020 	movw	r0, #53536	; 0xd120
 80041ec:	f7fd fd7c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 80041f0:	2184      	movs	r1, #132	; 0x84
 80041f2:	f24d 1021 	movw	r0, #53537	; 0xd121
 80041f6:	f7fd fd77 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 80041fa:	2102      	movs	r1, #2
 80041fc:	f24d 1022 	movw	r0, #53538	; 0xd122
 8004200:	f7fd fd72 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 8004204:	21a4      	movs	r1, #164	; 0xa4
 8004206:	f24d 1023 	movw	r0, #53539	; 0xd123
 800420a:	f7fd fd6d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 800420e:	2102      	movs	r1, #2
 8004210:	f24d 1024 	movw	r0, #53540	; 0xd124
 8004214:	f7fd fd68 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 8004218:	21b7      	movs	r1, #183	; 0xb7
 800421a:	f24d 1025 	movw	r0, #53541	; 0xd125
 800421e:	f7fd fd63 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 8004222:	2102      	movs	r1, #2
 8004224:	f24d 1026 	movw	r0, #53542	; 0xd126
 8004228:	f7fd fd5e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 800422c:	21cf      	movs	r1, #207	; 0xcf
 800422e:	f24d 1027 	movw	r0, #53543	; 0xd127
 8004232:	f7fd fd59 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 8004236:	2102      	movs	r1, #2
 8004238:	f24d 1028 	movw	r0, #53544	; 0xd128
 800423c:	f7fd fd54 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8004240:	21de      	movs	r1, #222	; 0xde
 8004242:	f24d 1029 	movw	r0, #53545	; 0xd129
 8004246:	f7fd fd4f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 800424a:	2102      	movs	r1, #2
 800424c:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8004250:	f7fd fd4a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8004254:	21f2      	movs	r1, #242	; 0xf2
 8004256:	f24d 102b 	movw	r0, #53547	; 0xd12b
 800425a:	f7fd fd45 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 800425e:	2102      	movs	r1, #2
 8004260:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8004264:	f7fd fd40 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8004268:	21fe      	movs	r1, #254	; 0xfe
 800426a:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800426e:	f7fd fd3b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 8004272:	2103      	movs	r1, #3
 8004274:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8004278:	f7fd fd36 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 800427c:	2110      	movs	r1, #16
 800427e:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8004282:	f7fd fd31 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8004286:	2103      	movs	r1, #3
 8004288:	f24d 1030 	movw	r0, #53552	; 0xd130
 800428c:	f7fd fd2c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8004290:	2133      	movs	r1, #51	; 0x33
 8004292:	f24d 1031 	movw	r0, #53553	; 0xd131
 8004296:	f7fd fd27 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 800429a:	2103      	movs	r1, #3
 800429c:	f24d 1032 	movw	r0, #53554	; 0xd132
 80042a0:	f7fd fd22 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 80042a4:	216d      	movs	r1, #109	; 0x6d
 80042a6:	f24d 1033 	movw	r0, #53555	; 0xd133
 80042aa:	f7fd fd1d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 80042ae:	2100      	movs	r1, #0
 80042b0:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80042b4:	f7fd fd18 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 80042b8:	2133      	movs	r1, #51	; 0x33
 80042ba:	f24d 2001 	movw	r0, #53761	; 0xd201
 80042be:	f7fd fd13 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 80042c2:	2100      	movs	r1, #0
 80042c4:	f24d 2002 	movw	r0, #53762	; 0xd202
 80042c8:	f7fd fd0e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 80042cc:	2134      	movs	r1, #52	; 0x34
 80042ce:	f24d 2003 	movw	r0, #53763	; 0xd203
 80042d2:	f7fd fd09 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 80042d6:	2100      	movs	r1, #0
 80042d8:	f24d 2004 	movw	r0, #53764	; 0xd204
 80042dc:	f7fd fd04 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 80042e0:	213a      	movs	r1, #58	; 0x3a
 80042e2:	f24d 2005 	movw	r0, #53765	; 0xd205
 80042e6:	f7fd fcff 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 80042ea:	2100      	movs	r1, #0
 80042ec:	f24d 2006 	movw	r0, #53766	; 0xd206
 80042f0:	f7fd fcfa 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 80042f4:	214a      	movs	r1, #74	; 0x4a
 80042f6:	f24d 2007 	movw	r0, #53767	; 0xd207
 80042fa:	f7fd fcf5 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 80042fe:	2100      	movs	r1, #0
 8004300:	f24d 2008 	movw	r0, #53768	; 0xd208
 8004304:	f7fd fcf0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 8004308:	215c      	movs	r1, #92	; 0x5c
 800430a:	f24d 2009 	movw	r0, #53769	; 0xd209
 800430e:	f7fd fceb 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 8004312:	2100      	movs	r1, #0
 8004314:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8004318:	f7fd fce6 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 800431c:	2181      	movs	r1, #129	; 0x81
 800431e:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8004322:	f7fd fce1 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 8004326:	2100      	movs	r1, #0
 8004328:	f24d 200c 	movw	r0, #53772	; 0xd20c
 800432c:	f7fd fcdc 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 8004330:	21a6      	movs	r1, #166	; 0xa6
 8004332:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8004336:	f7fd fcd7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 800433a:	2100      	movs	r1, #0
 800433c:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8004340:	f7fd fcd2 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 8004344:	21e5      	movs	r1, #229	; 0xe5
 8004346:	f24d 200f 	movw	r0, #53775	; 0xd20f
 800434a:	f7fd fccd 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 800434e:	2101      	movs	r1, #1
 8004350:	f24d 2010 	movw	r0, #53776	; 0xd210
 8004354:	f7fd fcc8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8004358:	2113      	movs	r1, #19
 800435a:	f24d 2011 	movw	r0, #53777	; 0xd211
 800435e:	f7fd fcc3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 8004362:	2101      	movs	r1, #1
 8004364:	f24d 2012 	movw	r0, #53778	; 0xd212
 8004368:	f7fd fcbe 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 800436c:	2154      	movs	r1, #84	; 0x54
 800436e:	f24d 2013 	movw	r0, #53779	; 0xd213
 8004372:	f7fd fcb9 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8004376:	2101      	movs	r1, #1
 8004378:	f24d 2014 	movw	r0, #53780	; 0xd214
 800437c:	f7fd fcb4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8004380:	2182      	movs	r1, #130	; 0x82
 8004382:	f24d 2015 	movw	r0, #53781	; 0xd215
 8004386:	f7fd fcaf 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 800438a:	2101      	movs	r1, #1
 800438c:	f24d 2016 	movw	r0, #53782	; 0xd216
 8004390:	f7fd fcaa 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 8004394:	21ca      	movs	r1, #202	; 0xca
 8004396:	f24d 2017 	movw	r0, #53783	; 0xd217
 800439a:	f7fd fca5 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 800439e:	2102      	movs	r1, #2
 80043a0:	f24d 2018 	movw	r0, #53784	; 0xd218
 80043a4:	f7fd fca0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 80043a8:	2100      	movs	r1, #0
 80043aa:	f24d 2019 	movw	r0, #53785	; 0xd219
 80043ae:	f7fd fc9b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 80043b2:	2102      	movs	r1, #2
 80043b4:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80043b8:	f7fd fc96 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 80043bc:	2101      	movs	r1, #1
 80043be:	f24d 201b 	movw	r0, #53787	; 0xd21b
 80043c2:	f7fd fc91 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 80043c6:	2102      	movs	r1, #2
 80043c8:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80043cc:	f7fd fc8c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 80043d0:	2134      	movs	r1, #52	; 0x34
 80043d2:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80043d6:	f7fd fc87 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 80043da:	2102      	movs	r1, #2
 80043dc:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80043e0:	f7fd fc82 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 80043e4:	2167      	movs	r1, #103	; 0x67
 80043e6:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80043ea:	f7fd fc7d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 80043ee:	2102      	movs	r1, #2
 80043f0:	f24d 2020 	movw	r0, #53792	; 0xd220
 80043f4:	f7fd fc78 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 80043f8:	2184      	movs	r1, #132	; 0x84
 80043fa:	f24d 2021 	movw	r0, #53793	; 0xd221
 80043fe:	f7fd fc73 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 8004402:	2102      	movs	r1, #2
 8004404:	f24d 2022 	movw	r0, #53794	; 0xd222
 8004408:	f7fd fc6e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 800440c:	21a4      	movs	r1, #164	; 0xa4
 800440e:	f24d 2023 	movw	r0, #53795	; 0xd223
 8004412:	f7fd fc69 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 8004416:	2102      	movs	r1, #2
 8004418:	f24d 2024 	movw	r0, #53796	; 0xd224
 800441c:	f7fd fc64 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 8004420:	21b7      	movs	r1, #183	; 0xb7
 8004422:	f24d 2025 	movw	r0, #53797	; 0xd225
 8004426:	f7fd fc5f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 800442a:	2102      	movs	r1, #2
 800442c:	f24d 2026 	movw	r0, #53798	; 0xd226
 8004430:	f7fd fc5a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 8004434:	21cf      	movs	r1, #207	; 0xcf
 8004436:	f24d 2027 	movw	r0, #53799	; 0xd227
 800443a:	f7fd fc55 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 800443e:	2102      	movs	r1, #2
 8004440:	f24d 2028 	movw	r0, #53800	; 0xd228
 8004444:	f7fd fc50 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8004448:	21de      	movs	r1, #222	; 0xde
 800444a:	f24d 2029 	movw	r0, #53801	; 0xd229
 800444e:	f7fd fc4b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 8004452:	2102      	movs	r1, #2
 8004454:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8004458:	f7fd fc46 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 800445c:	21f2      	movs	r1, #242	; 0xf2
 800445e:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8004462:	f7fd fc41 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8004466:	2102      	movs	r1, #2
 8004468:	f24d 202c 	movw	r0, #53804	; 0xd22c
 800446c:	f7fd fc3c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8004470:	21fe      	movs	r1, #254	; 0xfe
 8004472:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8004476:	f7fd fc37 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 800447a:	2103      	movs	r1, #3
 800447c:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8004480:	f7fd fc32 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8004484:	2110      	movs	r1, #16
 8004486:	f24d 202f 	movw	r0, #53807	; 0xd22f
 800448a:	f7fd fc2d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 800448e:	2103      	movs	r1, #3
 8004490:	f24d 2030 	movw	r0, #53808	; 0xd230
 8004494:	f7fd fc28 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8004498:	2133      	movs	r1, #51	; 0x33
 800449a:	f24d 2031 	movw	r0, #53809	; 0xd231
 800449e:	f7fd fc23 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 80044a2:	2103      	movs	r1, #3
 80044a4:	f24d 2032 	movw	r0, #53810	; 0xd232
 80044a8:	f7fd fc1e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 80044ac:	216d      	movs	r1, #109	; 0x6d
 80044ae:	f24d 2033 	movw	r0, #53811	; 0xd233
 80044b2:	f7fd fc19 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 80044b6:	2100      	movs	r1, #0
 80044b8:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 80044bc:	f7fd fc14 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 80044c0:	2133      	movs	r1, #51	; 0x33
 80044c2:	f24d 3001 	movw	r0, #54017	; 0xd301
 80044c6:	f7fd fc0f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 80044ca:	2100      	movs	r1, #0
 80044cc:	f24d 3002 	movw	r0, #54018	; 0xd302
 80044d0:	f7fd fc0a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 80044d4:	2134      	movs	r1, #52	; 0x34
 80044d6:	f24d 3003 	movw	r0, #54019	; 0xd303
 80044da:	f7fd fc05 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 80044de:	2100      	movs	r1, #0
 80044e0:	f24d 3004 	movw	r0, #54020	; 0xd304
 80044e4:	f7fd fc00 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 80044e8:	213a      	movs	r1, #58	; 0x3a
 80044ea:	f24d 3005 	movw	r0, #54021	; 0xd305
 80044ee:	f7fd fbfb 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 80044f2:	2100      	movs	r1, #0
 80044f4:	f24d 3006 	movw	r0, #54022	; 0xd306
 80044f8:	f7fd fbf6 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 80044fc:	214a      	movs	r1, #74	; 0x4a
 80044fe:	f24d 3007 	movw	r0, #54023	; 0xd307
 8004502:	f7fd fbf1 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 8004506:	2100      	movs	r1, #0
 8004508:	f24d 3008 	movw	r0, #54024	; 0xd308
 800450c:	f7fd fbec 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 8004510:	215c      	movs	r1, #92	; 0x5c
 8004512:	f24d 3009 	movw	r0, #54025	; 0xd309
 8004516:	f7fd fbe7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 800451a:	2100      	movs	r1, #0
 800451c:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8004520:	f7fd fbe2 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 8004524:	2181      	movs	r1, #129	; 0x81
 8004526:	f24d 300b 	movw	r0, #54027	; 0xd30b
 800452a:	f7fd fbdd 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 800452e:	2100      	movs	r1, #0
 8004530:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8004534:	f7fd fbd8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8004538:	21a6      	movs	r1, #166	; 0xa6
 800453a:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800453e:	f7fd fbd3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 8004542:	2100      	movs	r1, #0
 8004544:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8004548:	f7fd fbce 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 800454c:	21e5      	movs	r1, #229	; 0xe5
 800454e:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8004552:	f7fd fbc9 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 8004556:	2101      	movs	r1, #1
 8004558:	f24d 3010 	movw	r0, #54032	; 0xd310
 800455c:	f7fd fbc4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 8004560:	2113      	movs	r1, #19
 8004562:	f24d 3011 	movw	r0, #54033	; 0xd311
 8004566:	f7fd fbbf 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 800456a:	2101      	movs	r1, #1
 800456c:	f24d 3012 	movw	r0, #54034	; 0xd312
 8004570:	f7fd fbba 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8004574:	2154      	movs	r1, #84	; 0x54
 8004576:	f24d 3013 	movw	r0, #54035	; 0xd313
 800457a:	f7fd fbb5 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 800457e:	2101      	movs	r1, #1
 8004580:	f24d 3014 	movw	r0, #54036	; 0xd314
 8004584:	f7fd fbb0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8004588:	2182      	movs	r1, #130	; 0x82
 800458a:	f24d 3015 	movw	r0, #54037	; 0xd315
 800458e:	f7fd fbab 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 8004592:	2101      	movs	r1, #1
 8004594:	f24d 3016 	movw	r0, #54038	; 0xd316
 8004598:	f7fd fba6 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 800459c:	21ca      	movs	r1, #202	; 0xca
 800459e:	f24d 3017 	movw	r0, #54039	; 0xd317
 80045a2:	f7fd fba1 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 80045a6:	2102      	movs	r1, #2
 80045a8:	f24d 3018 	movw	r0, #54040	; 0xd318
 80045ac:	f7fd fb9c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 80045b0:	2100      	movs	r1, #0
 80045b2:	f24d 3019 	movw	r0, #54041	; 0xd319
 80045b6:	f7fd fb97 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 80045ba:	2102      	movs	r1, #2
 80045bc:	f24d 301a 	movw	r0, #54042	; 0xd31a
 80045c0:	f7fd fb92 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 80045c4:	2101      	movs	r1, #1
 80045c6:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80045ca:	f7fd fb8d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 80045ce:	2102      	movs	r1, #2
 80045d0:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80045d4:	f7fd fb88 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 80045d8:	2134      	movs	r1, #52	; 0x34
 80045da:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80045de:	f7fd fb83 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 80045e2:	2102      	movs	r1, #2
 80045e4:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80045e8:	f7fd fb7e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 80045ec:	2167      	movs	r1, #103	; 0x67
 80045ee:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80045f2:	f7fd fb79 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 80045f6:	2102      	movs	r1, #2
 80045f8:	f24d 3020 	movw	r0, #54048	; 0xd320
 80045fc:	f7fd fb74 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 8004600:	2184      	movs	r1, #132	; 0x84
 8004602:	f24d 3021 	movw	r0, #54049	; 0xd321
 8004606:	f7fd fb6f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 800460a:	2102      	movs	r1, #2
 800460c:	f24d 3022 	movw	r0, #54050	; 0xd322
 8004610:	f7fd fb6a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 8004614:	21a4      	movs	r1, #164	; 0xa4
 8004616:	f24d 3023 	movw	r0, #54051	; 0xd323
 800461a:	f7fd fb65 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 800461e:	2102      	movs	r1, #2
 8004620:	f24d 3024 	movw	r0, #54052	; 0xd324
 8004624:	f7fd fb60 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 8004628:	21b7      	movs	r1, #183	; 0xb7
 800462a:	f24d 3025 	movw	r0, #54053	; 0xd325
 800462e:	f7fd fb5b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 8004632:	2102      	movs	r1, #2
 8004634:	f24d 3026 	movw	r0, #54054	; 0xd326
 8004638:	f7fd fb56 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 800463c:	21cf      	movs	r1, #207	; 0xcf
 800463e:	f24d 3027 	movw	r0, #54055	; 0xd327
 8004642:	f7fd fb51 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 8004646:	2102      	movs	r1, #2
 8004648:	f24d 3028 	movw	r0, #54056	; 0xd328
 800464c:	f7fd fb4c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 8004650:	21de      	movs	r1, #222	; 0xde
 8004652:	f24d 3029 	movw	r0, #54057	; 0xd329
 8004656:	f7fd fb47 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 800465a:	2102      	movs	r1, #2
 800465c:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8004660:	f7fd fb42 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 8004664:	21f2      	movs	r1, #242	; 0xf2
 8004666:	f24d 302b 	movw	r0, #54059	; 0xd32b
 800466a:	f7fd fb3d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 800466e:	2102      	movs	r1, #2
 8004670:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8004674:	f7fd fb38 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8004678:	21fe      	movs	r1, #254	; 0xfe
 800467a:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800467e:	f7fd fb33 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 8004682:	2103      	movs	r1, #3
 8004684:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8004688:	f7fd fb2e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 800468c:	2110      	movs	r1, #16
 800468e:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8004692:	f7fd fb29 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 8004696:	2103      	movs	r1, #3
 8004698:	f24d 3030 	movw	r0, #54064	; 0xd330
 800469c:	f7fd fb24 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 80046a0:	2133      	movs	r1, #51	; 0x33
 80046a2:	f24d 3031 	movw	r0, #54065	; 0xd331
 80046a6:	f7fd fb1f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 80046aa:	2103      	movs	r1, #3
 80046ac:	f24d 3032 	movw	r0, #54066	; 0xd332
 80046b0:	f7fd fb1a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 80046b4:	216d      	movs	r1, #109	; 0x6d
 80046b6:	f24d 3033 	movw	r0, #54067	; 0xd333
 80046ba:	f7fd fb15 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 80046be:	2100      	movs	r1, #0
 80046c0:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80046c4:	f7fd fb10 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 80046c8:	2133      	movs	r1, #51	; 0x33
 80046ca:	f24d 4001 	movw	r0, #54273	; 0xd401
 80046ce:	f7fd fb0b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 80046d2:	2100      	movs	r1, #0
 80046d4:	f24d 4002 	movw	r0, #54274	; 0xd402
 80046d8:	f7fd fb06 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 80046dc:	2134      	movs	r1, #52	; 0x34
 80046de:	f24d 4003 	movw	r0, #54275	; 0xd403
 80046e2:	f7fd fb01 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 80046e6:	2100      	movs	r1, #0
 80046e8:	f24d 4004 	movw	r0, #54276	; 0xd404
 80046ec:	f7fd fafc 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 80046f0:	213a      	movs	r1, #58	; 0x3a
 80046f2:	f24d 4005 	movw	r0, #54277	; 0xd405
 80046f6:	f7fd faf7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 80046fa:	2100      	movs	r1, #0
 80046fc:	f24d 4006 	movw	r0, #54278	; 0xd406
 8004700:	f7fd faf2 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 8004704:	214a      	movs	r1, #74	; 0x4a
 8004706:	f24d 4007 	movw	r0, #54279	; 0xd407
 800470a:	f7fd faed 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 800470e:	2100      	movs	r1, #0
 8004710:	f24d 4008 	movw	r0, #54280	; 0xd408
 8004714:	f7fd fae8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 8004718:	215c      	movs	r1, #92	; 0x5c
 800471a:	f24d 4009 	movw	r0, #54281	; 0xd409
 800471e:	f7fd fae3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 8004722:	2100      	movs	r1, #0
 8004724:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8004728:	f7fd fade 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 800472c:	2181      	movs	r1, #129	; 0x81
 800472e:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8004732:	f7fd fad9 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 8004736:	2100      	movs	r1, #0
 8004738:	f24d 400c 	movw	r0, #54284	; 0xd40c
 800473c:	f7fd fad4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 8004740:	21a6      	movs	r1, #166	; 0xa6
 8004742:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8004746:	f7fd facf 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 800474a:	2100      	movs	r1, #0
 800474c:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8004750:	f7fd faca 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 8004754:	21e5      	movs	r1, #229	; 0xe5
 8004756:	f24d 400f 	movw	r0, #54287	; 0xd40f
 800475a:	f7fd fac5 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 800475e:	2101      	movs	r1, #1
 8004760:	f24d 4010 	movw	r0, #54288	; 0xd410
 8004764:	f7fd fac0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8004768:	2113      	movs	r1, #19
 800476a:	f24d 4011 	movw	r0, #54289	; 0xd411
 800476e:	f7fd fabb 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 8004772:	2101      	movs	r1, #1
 8004774:	f24d 4012 	movw	r0, #54290	; 0xd412
 8004778:	f7fd fab6 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 800477c:	2154      	movs	r1, #84	; 0x54
 800477e:	f24d 4013 	movw	r0, #54291	; 0xd413
 8004782:	f7fd fab1 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 8004786:	2101      	movs	r1, #1
 8004788:	f24d 4014 	movw	r0, #54292	; 0xd414
 800478c:	f7fd faac 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8004790:	2182      	movs	r1, #130	; 0x82
 8004792:	f24d 4015 	movw	r0, #54293	; 0xd415
 8004796:	f7fd faa7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 800479a:	2101      	movs	r1, #1
 800479c:	f24d 4016 	movw	r0, #54294	; 0xd416
 80047a0:	f7fd faa2 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 80047a4:	21ca      	movs	r1, #202	; 0xca
 80047a6:	f24d 4017 	movw	r0, #54295	; 0xd417
 80047aa:	f7fd fa9d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 80047ae:	2102      	movs	r1, #2
 80047b0:	f24d 4018 	movw	r0, #54296	; 0xd418
 80047b4:	f7fd fa98 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 80047b8:	2100      	movs	r1, #0
 80047ba:	f24d 4019 	movw	r0, #54297	; 0xd419
 80047be:	f7fd fa93 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 80047c2:	2102      	movs	r1, #2
 80047c4:	f24d 401a 	movw	r0, #54298	; 0xd41a
 80047c8:	f7fd fa8e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 80047cc:	2101      	movs	r1, #1
 80047ce:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80047d2:	f7fd fa89 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 80047d6:	2102      	movs	r1, #2
 80047d8:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80047dc:	f7fd fa84 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 80047e0:	2134      	movs	r1, #52	; 0x34
 80047e2:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80047e6:	f7fd fa7f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 80047ea:	2102      	movs	r1, #2
 80047ec:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80047f0:	f7fd fa7a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 80047f4:	2167      	movs	r1, #103	; 0x67
 80047f6:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80047fa:	f7fd fa75 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 80047fe:	2102      	movs	r1, #2
 8004800:	f24d 4020 	movw	r0, #54304	; 0xd420
 8004804:	f7fd fa70 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 8004808:	2184      	movs	r1, #132	; 0x84
 800480a:	f24d 4021 	movw	r0, #54305	; 0xd421
 800480e:	f7fd fa6b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 8004812:	2102      	movs	r1, #2
 8004814:	f24d 4022 	movw	r0, #54306	; 0xd422
 8004818:	f7fd fa66 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 800481c:	21a4      	movs	r1, #164	; 0xa4
 800481e:	f24d 4023 	movw	r0, #54307	; 0xd423
 8004822:	f7fd fa61 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 8004826:	2102      	movs	r1, #2
 8004828:	f24d 4024 	movw	r0, #54308	; 0xd424
 800482c:	f7fd fa5c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 8004830:	21b7      	movs	r1, #183	; 0xb7
 8004832:	f24d 4025 	movw	r0, #54309	; 0xd425
 8004836:	f7fd fa57 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 800483a:	2102      	movs	r1, #2
 800483c:	f24d 4026 	movw	r0, #54310	; 0xd426
 8004840:	f7fd fa52 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 8004844:	21cf      	movs	r1, #207	; 0xcf
 8004846:	f24d 4027 	movw	r0, #54311	; 0xd427
 800484a:	f7fd fa4d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 800484e:	2102      	movs	r1, #2
 8004850:	f24d 4028 	movw	r0, #54312	; 0xd428
 8004854:	f7fd fa48 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 8004858:	21de      	movs	r1, #222	; 0xde
 800485a:	f24d 4029 	movw	r0, #54313	; 0xd429
 800485e:	f7fd fa43 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 8004862:	2102      	movs	r1, #2
 8004864:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8004868:	f7fd fa3e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 800486c:	21f2      	movs	r1, #242	; 0xf2
 800486e:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8004872:	f7fd fa39 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8004876:	2102      	movs	r1, #2
 8004878:	f24d 402c 	movw	r0, #54316	; 0xd42c
 800487c:	f7fd fa34 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8004880:	21fe      	movs	r1, #254	; 0xfe
 8004882:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8004886:	f7fd fa2f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 800488a:	2103      	movs	r1, #3
 800488c:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8004890:	f7fd fa2a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8004894:	2110      	movs	r1, #16
 8004896:	f24d 402f 	movw	r0, #54319	; 0xd42f
 800489a:	f7fd fa25 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 800489e:	2103      	movs	r1, #3
 80048a0:	f24d 4030 	movw	r0, #54320	; 0xd430
 80048a4:	f7fd fa20 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 80048a8:	2133      	movs	r1, #51	; 0x33
 80048aa:	f24d 4031 	movw	r0, #54321	; 0xd431
 80048ae:	f7fd fa1b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 80048b2:	2103      	movs	r1, #3
 80048b4:	f24d 4032 	movw	r0, #54322	; 0xd432
 80048b8:	f7fd fa16 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 80048bc:	216d      	movs	r1, #109	; 0x6d
 80048be:	f24d 4033 	movw	r0, #54323	; 0xd433
 80048c2:	f7fd fa11 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 80048c6:	2100      	movs	r1, #0
 80048c8:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80048cc:	f7fd fa0c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 80048d0:	2133      	movs	r1, #51	; 0x33
 80048d2:	f24d 5001 	movw	r0, #54529	; 0xd501
 80048d6:	f7fd fa07 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 80048da:	2100      	movs	r1, #0
 80048dc:	f24d 5002 	movw	r0, #54530	; 0xd502
 80048e0:	f7fd fa02 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 80048e4:	2134      	movs	r1, #52	; 0x34
 80048e6:	f24d 5003 	movw	r0, #54531	; 0xd503
 80048ea:	f7fd f9fd 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 80048ee:	2100      	movs	r1, #0
 80048f0:	f24d 5004 	movw	r0, #54532	; 0xd504
 80048f4:	f7fd f9f8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 80048f8:	213a      	movs	r1, #58	; 0x3a
 80048fa:	f24d 5005 	movw	r0, #54533	; 0xd505
 80048fe:	f7fd f9f3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 8004902:	2100      	movs	r1, #0
 8004904:	f24d 5006 	movw	r0, #54534	; 0xd506
 8004908:	f7fd f9ee 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 800490c:	214a      	movs	r1, #74	; 0x4a
 800490e:	f24d 5007 	movw	r0, #54535	; 0xd507
 8004912:	f7fd f9e9 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 8004916:	2100      	movs	r1, #0
 8004918:	f24d 5008 	movw	r0, #54536	; 0xd508
 800491c:	f7fd f9e4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 8004920:	215c      	movs	r1, #92	; 0x5c
 8004922:	f24d 5009 	movw	r0, #54537	; 0xd509
 8004926:	f7fd f9df 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 800492a:	2100      	movs	r1, #0
 800492c:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8004930:	f7fd f9da 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 8004934:	2181      	movs	r1, #129	; 0x81
 8004936:	f24d 500b 	movw	r0, #54539	; 0xd50b
 800493a:	f7fd f9d5 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 800493e:	2100      	movs	r1, #0
 8004940:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8004944:	f7fd f9d0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 8004948:	21a6      	movs	r1, #166	; 0xa6
 800494a:	f24d 500d 	movw	r0, #54541	; 0xd50d
 800494e:	f7fd f9cb 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 8004952:	2100      	movs	r1, #0
 8004954:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8004958:	f7fd f9c6 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 800495c:	21e5      	movs	r1, #229	; 0xe5
 800495e:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8004962:	f7fd f9c1 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 8004966:	2101      	movs	r1, #1
 8004968:	f24d 5010 	movw	r0, #54544	; 0xd510
 800496c:	f7fd f9bc 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 8004970:	2113      	movs	r1, #19
 8004972:	f24d 5011 	movw	r0, #54545	; 0xd511
 8004976:	f7fd f9b7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 800497a:	2101      	movs	r1, #1
 800497c:	f24d 5012 	movw	r0, #54546	; 0xd512
 8004980:	f7fd f9b2 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8004984:	2154      	movs	r1, #84	; 0x54
 8004986:	f24d 5013 	movw	r0, #54547	; 0xd513
 800498a:	f7fd f9ad 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 800498e:	2101      	movs	r1, #1
 8004990:	f24d 5014 	movw	r0, #54548	; 0xd514
 8004994:	f7fd f9a8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8004998:	2182      	movs	r1, #130	; 0x82
 800499a:	f24d 5015 	movw	r0, #54549	; 0xd515
 800499e:	f7fd f9a3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 80049a2:	2101      	movs	r1, #1
 80049a4:	f24d 5016 	movw	r0, #54550	; 0xd516
 80049a8:	f7fd f99e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 80049ac:	21ca      	movs	r1, #202	; 0xca
 80049ae:	f24d 5017 	movw	r0, #54551	; 0xd517
 80049b2:	f7fd f999 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 80049b6:	2102      	movs	r1, #2
 80049b8:	f24d 5018 	movw	r0, #54552	; 0xd518
 80049bc:	f7fd f994 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 80049c0:	2100      	movs	r1, #0
 80049c2:	f24d 5019 	movw	r0, #54553	; 0xd519
 80049c6:	f7fd f98f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 80049ca:	2102      	movs	r1, #2
 80049cc:	f24d 501a 	movw	r0, #54554	; 0xd51a
 80049d0:	f7fd f98a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 80049d4:	2101      	movs	r1, #1
 80049d6:	f24d 501b 	movw	r0, #54555	; 0xd51b
 80049da:	f7fd f985 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 80049de:	2102      	movs	r1, #2
 80049e0:	f24d 501c 	movw	r0, #54556	; 0xd51c
 80049e4:	f7fd f980 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 80049e8:	2134      	movs	r1, #52	; 0x34
 80049ea:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80049ee:	f7fd f97b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 80049f2:	2102      	movs	r1, #2
 80049f4:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80049f8:	f7fd f976 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 80049fc:	2167      	movs	r1, #103	; 0x67
 80049fe:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8004a02:	f7fd f971 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 8004a06:	2102      	movs	r1, #2
 8004a08:	f24d 5020 	movw	r0, #54560	; 0xd520
 8004a0c:	f7fd f96c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 8004a10:	2184      	movs	r1, #132	; 0x84
 8004a12:	f24d 5021 	movw	r0, #54561	; 0xd521
 8004a16:	f7fd f967 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	f24d 5022 	movw	r0, #54562	; 0xd522
 8004a20:	f7fd f962 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 8004a24:	21a4      	movs	r1, #164	; 0xa4
 8004a26:	f24d 5023 	movw	r0, #54563	; 0xd523
 8004a2a:	f7fd f95d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 8004a2e:	2102      	movs	r1, #2
 8004a30:	f24d 5024 	movw	r0, #54564	; 0xd524
 8004a34:	f7fd f958 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 8004a38:	21b7      	movs	r1, #183	; 0xb7
 8004a3a:	f24d 5025 	movw	r0, #54565	; 0xd525
 8004a3e:	f7fd f953 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 8004a42:	2102      	movs	r1, #2
 8004a44:	f24d 5026 	movw	r0, #54566	; 0xd526
 8004a48:	f7fd f94e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 8004a4c:	21cf      	movs	r1, #207	; 0xcf
 8004a4e:	f24d 5027 	movw	r0, #54567	; 0xd527
 8004a52:	f7fd f949 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 8004a56:	2102      	movs	r1, #2
 8004a58:	f24d 5028 	movw	r0, #54568	; 0xd528
 8004a5c:	f7fd f944 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 8004a60:	21de      	movs	r1, #222	; 0xde
 8004a62:	f24d 5029 	movw	r0, #54569	; 0xd529
 8004a66:	f7fd f93f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8004a70:	f7fd f93a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8004a74:	21f2      	movs	r1, #242	; 0xf2
 8004a76:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8004a7a:	f7fd f935 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 8004a7e:	2102      	movs	r1, #2
 8004a80:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004a84:	f7fd f930 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8004a88:	21fe      	movs	r1, #254	; 0xfe
 8004a8a:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8004a8e:	f7fd f92b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 8004a92:	2103      	movs	r1, #3
 8004a94:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8004a98:	f7fd f926 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8004a9c:	2110      	movs	r1, #16
 8004a9e:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8004aa2:	f7fd f921 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 8004aa6:	2103      	movs	r1, #3
 8004aa8:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004aac:	f7fd f91c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 8004ab0:	2133      	movs	r1, #51	; 0x33
 8004ab2:	f24d 5031 	movw	r0, #54577	; 0xd531
 8004ab6:	f7fd f917 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 8004aba:	2103      	movs	r1, #3
 8004abc:	f24d 5032 	movw	r0, #54578	; 0xd532
 8004ac0:	f7fd f912 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 8004ac4:	216d      	movs	r1, #109	; 0x6d
 8004ac6:	f24d 5033 	movw	r0, #54579	; 0xd533
 8004aca:	f7fd f90d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 8004ace:	2100      	movs	r1, #0
 8004ad0:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004ad4:	f7fd f908 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 8004ad8:	2133      	movs	r1, #51	; 0x33
 8004ada:	f24d 6001 	movw	r0, #54785	; 0xd601
 8004ade:	f7fd f903 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	f24d 6002 	movw	r0, #54786	; 0xd602
 8004ae8:	f7fd f8fe 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 8004aec:	2134      	movs	r1, #52	; 0x34
 8004aee:	f24d 6003 	movw	r0, #54787	; 0xd603
 8004af2:	f7fd f8f9 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 8004af6:	2100      	movs	r1, #0
 8004af8:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004afc:	f7fd f8f4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 8004b00:	213a      	movs	r1, #58	; 0x3a
 8004b02:	f24d 6005 	movw	r0, #54789	; 0xd605
 8004b06:	f7fd f8ef 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	f24d 6006 	movw	r0, #54790	; 0xd606
 8004b10:	f7fd f8ea 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 8004b14:	214a      	movs	r1, #74	; 0x4a
 8004b16:	f24d 6007 	movw	r0, #54791	; 0xd607
 8004b1a:	f7fd f8e5 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 8004b1e:	2100      	movs	r1, #0
 8004b20:	f24d 6008 	movw	r0, #54792	; 0xd608
 8004b24:	f7fd f8e0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 8004b28:	215c      	movs	r1, #92	; 0x5c
 8004b2a:	f24d 6009 	movw	r0, #54793	; 0xd609
 8004b2e:	f7fd f8db 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 8004b32:	2100      	movs	r1, #0
 8004b34:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8004b38:	f7fd f8d6 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 8004b3c:	2181      	movs	r1, #129	; 0x81
 8004b3e:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8004b42:	f7fd f8d1 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 8004b46:	2100      	movs	r1, #0
 8004b48:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004b4c:	f7fd f8cc 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 8004b50:	21a6      	movs	r1, #166	; 0xa6
 8004b52:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8004b56:	f7fd f8c7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8004b5a:	2100      	movs	r1, #0
 8004b5c:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8004b60:	f7fd f8c2 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 8004b64:	21e5      	movs	r1, #229	; 0xe5
 8004b66:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8004b6a:	f7fd f8bd 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 8004b6e:	2101      	movs	r1, #1
 8004b70:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004b74:	f7fd f8b8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8004b78:	2113      	movs	r1, #19
 8004b7a:	f24d 6011 	movw	r0, #54801	; 0xd611
 8004b7e:	f7fd f8b3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 8004b82:	2101      	movs	r1, #1
 8004b84:	f24d 6012 	movw	r0, #54802	; 0xd612
 8004b88:	f7fd f8ae 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8004b8c:	2154      	movs	r1, #84	; 0x54
 8004b8e:	f24d 6013 	movw	r0, #54803	; 0xd613
 8004b92:	f7fd f8a9 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 8004b96:	2101      	movs	r1, #1
 8004b98:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004b9c:	f7fd f8a4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 8004ba0:	2182      	movs	r1, #130	; 0x82
 8004ba2:	f24d 6015 	movw	r0, #54805	; 0xd615
 8004ba6:	f7fd f89f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 8004baa:	2101      	movs	r1, #1
 8004bac:	f24d 6016 	movw	r0, #54806	; 0xd616
 8004bb0:	f7fd f89a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 8004bb4:	21ca      	movs	r1, #202	; 0xca
 8004bb6:	f24d 6017 	movw	r0, #54807	; 0xd617
 8004bba:	f7fd f895 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 8004bbe:	2102      	movs	r1, #2
 8004bc0:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004bc4:	f7fd f890 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 8004bc8:	2100      	movs	r1, #0
 8004bca:	f24d 6019 	movw	r0, #54809	; 0xd619
 8004bce:	f7fd f88b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 8004bd2:	2102      	movs	r1, #2
 8004bd4:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8004bd8:	f7fd f886 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 8004bdc:	2101      	movs	r1, #1
 8004bde:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8004be2:	f7fd f881 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 8004be6:	2102      	movs	r1, #2
 8004be8:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004bec:	f7fd f87c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 8004bf0:	2134      	movs	r1, #52	; 0x34
 8004bf2:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8004bf6:	f7fd f877 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 8004bfa:	2102      	movs	r1, #2
 8004bfc:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8004c00:	f7fd f872 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 8004c04:	2167      	movs	r1, #103	; 0x67
 8004c06:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8004c0a:	f7fd f86d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 8004c0e:	2102      	movs	r1, #2
 8004c10:	f24d 6020 	movw	r0, #54816	; 0xd620
 8004c14:	f7fd f868 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 8004c18:	2184      	movs	r1, #132	; 0x84
 8004c1a:	f24d 6021 	movw	r0, #54817	; 0xd621
 8004c1e:	f7fd f863 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 8004c22:	2102      	movs	r1, #2
 8004c24:	f24d 6022 	movw	r0, #54818	; 0xd622
 8004c28:	f7fd f85e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 8004c2c:	21a4      	movs	r1, #164	; 0xa4
 8004c2e:	f24d 6023 	movw	r0, #54819	; 0xd623
 8004c32:	f7fd f859 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 8004c36:	2102      	movs	r1, #2
 8004c38:	f24d 6024 	movw	r0, #54820	; 0xd624
 8004c3c:	f7fd f854 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 8004c40:	21b7      	movs	r1, #183	; 0xb7
 8004c42:	f24d 6025 	movw	r0, #54821	; 0xd625
 8004c46:	f7fd f84f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 8004c4a:	2102      	movs	r1, #2
 8004c4c:	f24d 6026 	movw	r0, #54822	; 0xd626
 8004c50:	f7fd f84a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 8004c54:	21cf      	movs	r1, #207	; 0xcf
 8004c56:	f24d 6027 	movw	r0, #54823	; 0xd627
 8004c5a:	f7fd f845 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 8004c5e:	2102      	movs	r1, #2
 8004c60:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004c64:	f7fd f840 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8004c68:	21de      	movs	r1, #222	; 0xde
 8004c6a:	f24d 6029 	movw	r0, #54825	; 0xd629
 8004c6e:	f7fd f83b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 8004c72:	2102      	movs	r1, #2
 8004c74:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8004c78:	f7fd f836 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8004c7c:	21f2      	movs	r1, #242	; 0xf2
 8004c7e:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8004c82:	f7fd f831 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8004c86:	2102      	movs	r1, #2
 8004c88:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004c8c:	f7fd f82c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 8004c90:	21fe      	movs	r1, #254	; 0xfe
 8004c92:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8004c96:	f7fd f827 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8004c9a:	2103      	movs	r1, #3
 8004c9c:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8004ca0:	f7fd f822 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 8004ca4:	2110      	movs	r1, #16
 8004ca6:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8004caa:	f7fd f81d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 8004cae:	2103      	movs	r1, #3
 8004cb0:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004cb4:	f7fd f818 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8004cb8:	2133      	movs	r1, #51	; 0x33
 8004cba:	f24d 6031 	movw	r0, #54833	; 0xd631
 8004cbe:	f7fd f813 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 8004cc2:	2103      	movs	r1, #3
 8004cc4:	f24d 6032 	movw	r0, #54834	; 0xd632
 8004cc8:	f7fd f80e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8004ccc:	216d      	movs	r1, #109	; 0x6d
 8004cce:	f24d 6033 	movw	r0, #54835	; 0xd633
 8004cd2:	f7fd f809 	bl	8001ce8 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 8004cd6:	2155      	movs	r1, #85	; 0x55
 8004cd8:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004cdc:	f7fd f804 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8004ce0:	21aa      	movs	r1, #170	; 0xaa
 8004ce2:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004ce6:	f7fc ffff 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8004cea:	2152      	movs	r1, #82	; 0x52
 8004cec:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004cf0:	f7fc fffa 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8004cf4:	2108      	movs	r1, #8
 8004cf6:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004cfa:	f7fc fff5 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 8004cfe:	2100      	movs	r1, #0
 8004d00:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004d04:	f7fc fff0 	bl	8001ce8 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8004d08:	21cc      	movs	r1, #204	; 0xcc
 8004d0a:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004d0e:	f7fc ffeb 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8004d12:	2100      	movs	r1, #0
 8004d14:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004d18:	f7fc ffe6 	bl	8001ce8 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 8004d1c:	2105      	movs	r1, #5
 8004d1e:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8004d22:	f7fc ffe1 	bl	8001ce8 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 8004d26:	2170      	movs	r1, #112	; 0x70
 8004d28:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004d2c:	f7fc ffdc 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 8004d30:	2170      	movs	r1, #112	; 0x70
 8004d32:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004d36:	f7fc ffd7 	bl	8001ce8 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004d40:	f7fc ffd2 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 8004d44:	2103      	movs	r1, #3
 8004d46:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004d4a:	f7fc ffcd 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 8004d4e:	2103      	movs	r1, #3
 8004d50:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004d54:	f7fc ffc8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8004d58:	2103      	movs	r1, #3
 8004d5a:	f64b 0003 	movw	r0, #47107	; 0xb803
 8004d5e:	f7fc ffc3 	bl	8001ce8 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 8004d62:	2102      	movs	r1, #2
 8004d64:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004d68:	f7fc ffbe 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004d72:	f7fc ffb9 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8004d76:	2100      	movs	r1, #0
 8004d78:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004d7c:	f7fc ffb4 	bl	8001ce8 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8004d80:	21d0      	movs	r1, #208	; 0xd0
 8004d82:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8004d86:	f7fc ffaf 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8004d8a:	2102      	movs	r1, #2
 8004d8c:	f64c 1001 	movw	r0, #51457	; 0xc901
 8004d90:	f7fc ffaa 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8004d94:	2150      	movs	r1, #80	; 0x50
 8004d96:	f64c 1002 	movw	r0, #51458	; 0xc902
 8004d9a:	f7fc ffa5 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8004d9e:	2150      	movs	r1, #80	; 0x50
 8004da0:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004da4:	f7fc ffa0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8004da8:	2150      	movs	r1, #80	; 0x50
 8004daa:	f64c 1004 	movw	r0, #51460	; 0xc904
 8004dae:	f7fc ff9b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 8004db2:	2100      	movs	r1, #0
 8004db4:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8004db8:	f7fc ff96 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8004dbc:	2155      	movs	r1, #85	; 0x55
 8004dbe:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004dc2:	f7fc ff91 	bl	8001ce8 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004dc6:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8004dca:	f7fc ff5f 	bl	8001c8c <LCD_WR_REG>
		delay_us(120);
 8004dce:	2078      	movs	r0, #120	; 0x78
 8004dd0:	f7fc ff3e 	bl	8001c50 <delay_us>
		LCD_WR_REG(0x2900);
 8004dd4:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8004dd8:	f7fc ff58 	bl	8001c8c <LCD_WR_REG>
 8004ddc:	f001 b95e 	b.w	800609c <LCD_Init+0x383c>
	}else if(lcddev.id==0x9325)//9325
 8004de0:	4bec      	ldr	r3, [pc, #944]	; (8005194 <LCD_Init+0x2934>)
 8004de2:	889b      	ldrh	r3, [r3, #4]
 8004de4:	f249 3225 	movw	r2, #37669	; 0x9325
 8004de8:	4293      	cmp	r3, r2
 8004dea:	f040 80d7 	bne.w	8004f9c <LCD_Init+0x273c>
	{
		LCD_WriteReg(0x00E5,0x78F0);
 8004dee:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8004df2:	20e5      	movs	r0, #229	; 0xe5
 8004df4:	f7fc ff78 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0001,0x0100);
 8004df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004dfc:	2001      	movs	r0, #1
 8004dfe:	f7fc ff73 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 8004e02:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004e06:	2002      	movs	r0, #2
 8004e08:	f7fc ff6e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0003,0x1030);
 8004e0c:	f241 0130 	movw	r1, #4144	; 0x1030
 8004e10:	2003      	movs	r0, #3
 8004e12:	f7fc ff69 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0004,0x0000);
 8004e16:	2100      	movs	r1, #0
 8004e18:	2004      	movs	r0, #4
 8004e1a:	f7fc ff65 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8004e1e:	f240 2102 	movw	r1, #514	; 0x202
 8004e22:	2008      	movs	r0, #8
 8004e24:	f7fc ff60 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0009,0x0000);
 8004e28:	2100      	movs	r1, #0
 8004e2a:	2009      	movs	r0, #9
 8004e2c:	f7fc ff5c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x000A,0x0000);
 8004e30:	2100      	movs	r1, #0
 8004e32:	200a      	movs	r0, #10
 8004e34:	f7fc ff58 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x000C,0x0000);
 8004e38:	2100      	movs	r1, #0
 8004e3a:	200c      	movs	r0, #12
 8004e3c:	f7fc ff54 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x000D,0x0000);
 8004e40:	2100      	movs	r1, #0
 8004e42:	200d      	movs	r0, #13
 8004e44:	f7fc ff50 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x000F,0x0000);
 8004e48:	2100      	movs	r1, #0
 8004e4a:	200f      	movs	r0, #15
 8004e4c:	f7fc ff4c 	bl	8001ce8 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010,0x0000);
 8004e50:	2100      	movs	r1, #0
 8004e52:	2010      	movs	r0, #16
 8004e54:	f7fc ff48 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 8004e58:	2107      	movs	r1, #7
 8004e5a:	2011      	movs	r0, #17
 8004e5c:	f7fc ff44 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 8004e60:	2100      	movs	r1, #0
 8004e62:	2012      	movs	r0, #18
 8004e64:	f7fc ff40 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 8004e68:	2100      	movs	r1, #0
 8004e6a:	2013      	movs	r0, #19
 8004e6c:	f7fc ff3c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0000);
 8004e70:	2100      	movs	r1, #0
 8004e72:	2007      	movs	r0, #7
 8004e74:	f7fc ff38 	bl	8001ce8 <LCD_WriteReg>
		//vgh
		LCD_WriteReg(0x0010,0x1690);
 8004e78:	f241 6190 	movw	r1, #5776	; 0x1690
 8004e7c:	2010      	movs	r0, #16
 8004e7e:	f7fc ff33 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0227);
 8004e82:	f240 2127 	movw	r1, #551	; 0x227
 8004e86:	2011      	movs	r0, #17
 8004e88:	f7fc ff2e 	bl	8001ce8 <LCD_WriteReg>
		//delayms(100);
		//vregiout
		LCD_WriteReg(0x0012,0x009D); //0x001b
 8004e8c:	219d      	movs	r1, #157	; 0x9d
 8004e8e:	2012      	movs	r0, #18
 8004e90:	f7fc ff2a 	bl	8001ce8 <LCD_WriteReg>
		//delayms(100);
		//vom amplitude
		LCD_WriteReg(0x0013,0x1900);
 8004e94:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004e98:	2013      	movs	r0, #19
 8004e9a:	f7fc ff25 	bl	8001ce8 <LCD_WriteReg>
		//delayms(100);
		//vom H
		LCD_WriteReg(0x0029,0x0025);
 8004e9e:	2125      	movs	r1, #37	; 0x25
 8004ea0:	2029      	movs	r0, #41	; 0x29
 8004ea2:	f7fc ff21 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x002B,0x000D);
 8004ea6:	210d      	movs	r1, #13
 8004ea8:	202b      	movs	r0, #43	; 0x2b
 8004eaa:	f7fc ff1d 	bl	8001ce8 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030,0x0007);
 8004eae:	2107      	movs	r1, #7
 8004eb0:	2030      	movs	r0, #48	; 0x30
 8004eb2:	f7fc ff19 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0303);
 8004eb6:	f240 3103 	movw	r1, #771	; 0x303
 8004eba:	2031      	movs	r0, #49	; 0x31
 8004ebc:	f7fc ff14 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0003);// 0006
 8004ec0:	2103      	movs	r1, #3
 8004ec2:	2032      	movs	r0, #50	; 0x32
 8004ec4:	f7fc ff10 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0206);
 8004ec8:	f240 2106 	movw	r1, #518	; 0x206
 8004ecc:	2035      	movs	r0, #53	; 0x35
 8004ece:	f7fc ff0b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x0008);
 8004ed2:	2108      	movs	r1, #8
 8004ed4:	2036      	movs	r0, #54	; 0x36
 8004ed6:	f7fc ff07 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0406);
 8004eda:	f240 4106 	movw	r1, #1030	; 0x406
 8004ede:	2037      	movs	r0, #55	; 0x37
 8004ee0:	f7fc ff02 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0304);//0200
 8004ee4:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004ee8:	2038      	movs	r0, #56	; 0x38
 8004eea:	f7fc fefd 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0007);
 8004eee:	2107      	movs	r1, #7
 8004ef0:	2039      	movs	r0, #57	; 0x39
 8004ef2:	f7fc fef9 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x003C,0x0602);// 0504
 8004ef6:	f240 6102 	movw	r1, #1538	; 0x602
 8004efa:	203c      	movs	r0, #60	; 0x3c
 8004efc:	f7fc fef4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x003D,0x0008);
 8004f00:	2108      	movs	r1, #8
 8004f02:	203d      	movs	r0, #61	; 0x3d
 8004f04:	f7fc fef0 	bl	8001ce8 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050,0x0000);
 8004f08:	2100      	movs	r1, #0
 8004f0a:	2050      	movs	r0, #80	; 0x50
 8004f0c:	f7fc feec 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00EF);
 8004f10:	21ef      	movs	r1, #239	; 0xef
 8004f12:	2051      	movs	r0, #81	; 0x51
 8004f14:	f7fc fee8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 8004f18:	2100      	movs	r1, #0
 8004f1a:	2052      	movs	r0, #82	; 0x52
 8004f1c:	f7fc fee4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013F);
 8004f20:	f240 113f 	movw	r1, #319	; 0x13f
 8004f24:	2053      	movs	r0, #83	; 0x53
 8004f26:	f7fc fedf 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0xA700);
 8004f2a:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004f2e:	2060      	movs	r0, #96	; 0x60
 8004f30:	f7fc feda 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 8004f34:	2101      	movs	r1, #1
 8004f36:	2061      	movs	r0, #97	; 0x61
 8004f38:	f7fc fed6 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x006A,0x0000);
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	206a      	movs	r0, #106	; 0x6a
 8004f40:	f7fc fed2 	bl	8001ce8 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080,0x0000);
 8004f44:	2100      	movs	r1, #0
 8004f46:	2080      	movs	r0, #128	; 0x80
 8004f48:	f7fc fece 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0081,0x0000);
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	2081      	movs	r0, #129	; 0x81
 8004f50:	f7fc feca 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0082,0x0000);
 8004f54:	2100      	movs	r1, #0
 8004f56:	2082      	movs	r0, #130	; 0x82
 8004f58:	f7fc fec6 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0083,0x0000);
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	2083      	movs	r0, #131	; 0x83
 8004f60:	f7fc fec2 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0084,0x0000);
 8004f64:	2100      	movs	r1, #0
 8004f66:	2084      	movs	r0, #132	; 0x84
 8004f68:	f7fc febe 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0085,0x0000);
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	2085      	movs	r0, #133	; 0x85
 8004f70:	f7fc feba 	bl	8001ce8 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090,0x0010);
 8004f74:	2110      	movs	r1, #16
 8004f76:	2090      	movs	r0, #144	; 0x90
 8004f78:	f7fc feb6 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8004f7c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f80:	2092      	movs	r0, #146	; 0x92
 8004f82:	f7fc feb1 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0x0007,0x0133);
 8004f86:	f240 1133 	movw	r1, #307	; 0x133
 8004f8a:	2007      	movs	r0, #7
 8004f8c:	f7fc feac 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x0022);//
 8004f90:	2122      	movs	r1, #34	; 0x22
 8004f92:	2000      	movs	r0, #0
 8004f94:	f7fc fea8 	bl	8001ce8 <LCD_WriteReg>
 8004f98:	f001 b880 	b.w	800609c <LCD_Init+0x383c>
	}else if(lcddev.id==0x9328)//ILI9328   OK
 8004f9c:	4b7d      	ldr	r3, [pc, #500]	; (8005194 <LCD_Init+0x2934>)
 8004f9e:	889b      	ldrh	r3, [r3, #4]
 8004fa0:	f249 3228 	movw	r2, #37672	; 0x9328
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	f040 80f7 	bne.w	8005198 <LCD_Init+0x2938>
	{
  		LCD_WriteReg(0x00EC,0x108F);// internal timeing
 8004faa:	f241 018f 	movw	r1, #4239	; 0x108f
 8004fae:	20ec      	movs	r0, #236	; 0xec
 8004fb0:	f7fc fe9a 	bl	8001ce8 <LCD_WriteReg>
 		LCD_WriteReg(0x00EF,0x1234);// ADD
 8004fb4:	f241 2134 	movw	r1, #4660	; 0x1234
 8004fb8:	20ef      	movs	r0, #239	; 0xef
 8004fba:	f7fc fe95 	bl	8001ce8 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);
        //LCD_WriteReg(0x0000,0x0001);//开启内部时钟
        LCD_WriteReg(0x0001,0x0100);
 8004fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	f7fc fe90 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);//电源开启
 8004fc8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004fcc:	2002      	movs	r0, #2
 8004fce:	f7fc fe8b 	bl	8001ce8 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(0<<3) );//65K
 8004fd2:	f241 0130 	movw	r1, #4144	; 0x1030
 8004fd6:	2003      	movs	r0, #3
 8004fd8:	f7fc fe86 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 8004fdc:	2100      	movs	r1, #0
 8004fde:	2004      	movs	r0, #4
 8004fe0:	f7fc fe82 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x0202);
 8004fe4:	f240 2102 	movw	r1, #514	; 0x202
 8004fe8:	2008      	movs	r0, #8
 8004fea:	f7fc fe7d 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0009,0x0000);
 8004fee:	2100      	movs	r1, #0
 8004ff0:	2009      	movs	r0, #9
 8004ff2:	f7fc fe79 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x000a,0x0000);//display setting
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	200a      	movs	r0, #10
 8004ffa:	f7fc fe75 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x000c,0x0001);//display setting
 8004ffe:	2101      	movs	r1, #1
 8005000:	200c      	movs	r0, #12
 8005002:	f7fc fe71 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x000d,0x0000);//0f3c
 8005006:	2100      	movs	r1, #0
 8005008:	200d      	movs	r0, #13
 800500a:	f7fc fe6d 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x000f,0x0000);
 800500e:	2100      	movs	r1, #0
 8005010:	200f      	movs	r0, #15
 8005012:	f7fc fe69 	bl	8001ce8 <LCD_WriteReg>
		//电源配置
        LCD_WriteReg(0x0010,0x0000);
 8005016:	2100      	movs	r1, #0
 8005018:	2010      	movs	r0, #16
 800501a:	f7fc fe65 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0007);
 800501e:	2107      	movs	r1, #7
 8005020:	2011      	movs	r0, #17
 8005022:	f7fc fe61 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x0000);
 8005026:	2100      	movs	r1, #0
 8005028:	2012      	movs	r0, #18
 800502a:	f7fc fe5d 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0000);
 800502e:	2100      	movs	r1, #0
 8005030:	2013      	movs	r0, #19
 8005032:	f7fc fe59 	bl	8001ce8 <LCD_WriteReg>
     	LCD_WriteReg(0x0007,0x0001);
 8005036:	2101      	movs	r1, #1
 8005038:	2007      	movs	r0, #7
 800503a:	f7fc fe55 	bl	8001ce8 <LCD_WriteReg>
     	HAL_Delay(50);
 800503e:	2032      	movs	r0, #50	; 0x32
 8005040:	f002 f9ec 	bl	800741c <HAL_Delay>
        LCD_WriteReg(0x0010,0x1490);
 8005044:	f241 4190 	movw	r1, #5264	; 0x1490
 8005048:	2010      	movs	r0, #16
 800504a:	f7fc fe4d 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0227);
 800504e:	f240 2127 	movw	r1, #551	; 0x227
 8005052:	2011      	movs	r0, #17
 8005054:	f7fc fe48 	bl	8001ce8 <LCD_WriteReg>
        HAL_Delay(50);
 8005058:	2032      	movs	r0, #50	; 0x32
 800505a:	f002 f9df 	bl	800741c <HAL_Delay>
        LCD_WriteReg(0x0012,0x008A);
 800505e:	218a      	movs	r1, #138	; 0x8a
 8005060:	2012      	movs	r0, #18
 8005062:	f7fc fe41 	bl	8001ce8 <LCD_WriteReg>
        HAL_Delay(50);
 8005066:	2032      	movs	r0, #50	; 0x32
 8005068:	f002 f9d8 	bl	800741c <HAL_Delay>
        LCD_WriteReg(0x0013,0x1a00);
 800506c:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8005070:	2013      	movs	r0, #19
 8005072:	f7fc fe39 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x0006);
 8005076:	2106      	movs	r1, #6
 8005078:	2029      	movs	r0, #41	; 0x29
 800507a:	f7fc fe35 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x002b,0x000d);
 800507e:	210d      	movs	r1, #13
 8005080:	202b      	movs	r0, #43	; 0x2b
 8005082:	f7fc fe31 	bl	8001ce8 <LCD_WriteReg>
        HAL_Delay(50);
 8005086:	2032      	movs	r0, #50	; 0x32
 8005088:	f002 f9c8 	bl	800741c <HAL_Delay>
        LCD_WriteReg(0x0020,0x0000);
 800508c:	2100      	movs	r1, #0
 800508e:	2020      	movs	r0, #32
 8005090:	f7fc fe2a 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 8005094:	2100      	movs	r1, #0
 8005096:	2021      	movs	r0, #33	; 0x21
 8005098:	f7fc fe26 	bl	8001ce8 <LCD_WriteReg>
        HAL_Delay(50);
 800509c:	2032      	movs	r0, #50	; 0x32
 800509e:	f002 f9bd 	bl	800741c <HAL_Delay>
		//伽马校正
        LCD_WriteReg(0x0030,0x0000);
 80050a2:	2100      	movs	r1, #0
 80050a4:	2030      	movs	r0, #48	; 0x30
 80050a6:	f7fc fe1f 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0604);
 80050aa:	f240 6104 	movw	r1, #1540	; 0x604
 80050ae:	2031      	movs	r0, #49	; 0x31
 80050b0:	f7fc fe1a 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0305);
 80050b4:	f240 3105 	movw	r1, #773	; 0x305
 80050b8:	2032      	movs	r0, #50	; 0x32
 80050ba:	f7fc fe15 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0000);
 80050be:	2100      	movs	r1, #0
 80050c0:	2035      	movs	r0, #53	; 0x35
 80050c2:	f7fc fe11 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x0C09);
 80050c6:	f640 4109 	movw	r1, #3081	; 0xc09
 80050ca:	2036      	movs	r0, #54	; 0x36
 80050cc:	f7fc fe0c 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0204);
 80050d0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80050d4:	2037      	movs	r0, #55	; 0x37
 80050d6:	f7fc fe07 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0301);
 80050da:	f240 3101 	movw	r1, #769	; 0x301
 80050de:	2038      	movs	r0, #56	; 0x38
 80050e0:	f7fc fe02 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0707);
 80050e4:	f240 7107 	movw	r1, #1799	; 0x707
 80050e8:	2039      	movs	r0, #57	; 0x39
 80050ea:	f7fc fdfd 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x003c,0x0000);
 80050ee:	2100      	movs	r1, #0
 80050f0:	203c      	movs	r0, #60	; 0x3c
 80050f2:	f7fc fdf9 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x003d,0x0a0a);
 80050f6:	f640 210a 	movw	r1, #2570	; 0xa0a
 80050fa:	203d      	movs	r0, #61	; 0x3d
 80050fc:	f7fc fdf4 	bl	8001ce8 <LCD_WriteReg>
        HAL_Delay(50);
 8005100:	2032      	movs	r0, #50	; 0x32
 8005102:	f002 f98b 	bl	800741c <HAL_Delay>
        LCD_WriteReg(0x0050,0x0000); //水平GRAM起始位置
 8005106:	2100      	movs	r1, #0
 8005108:	2050      	movs	r0, #80	; 0x50
 800510a:	f7fc fded 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00ef); //水平GRAM终止位置
 800510e:	21ef      	movs	r1, #239	; 0xef
 8005110:	2051      	movs	r0, #81	; 0x51
 8005112:	f7fc fde9 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000); //垂直GRAM起始位置
 8005116:	2100      	movs	r1, #0
 8005118:	2052      	movs	r0, #82	; 0x52
 800511a:	f7fc fde5 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013f); //垂直GRAM终止位置
 800511e:	f240 113f 	movw	r1, #319	; 0x13f
 8005122:	2053      	movs	r0, #83	; 0x53
 8005124:	f7fc fde0 	bl	8001ce8 <LCD_WriteReg>

         LCD_WriteReg(0x0060,0xa700);
 8005128:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800512c:	2060      	movs	r0, #96	; 0x60
 800512e:	f7fc fddb 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8005132:	2101      	movs	r1, #1
 8005134:	2061      	movs	r0, #97	; 0x61
 8005136:	f7fc fdd7 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x006a,0x0000);
 800513a:	2100      	movs	r1, #0
 800513c:	206a      	movs	r0, #106	; 0x6a
 800513e:	f7fc fdd3 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8005142:	2100      	movs	r1, #0
 8005144:	2080      	movs	r0, #128	; 0x80
 8005146:	f7fc fdcf 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0081,0x0000);
 800514a:	2100      	movs	r1, #0
 800514c:	2081      	movs	r0, #129	; 0x81
 800514e:	f7fc fdcb 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8005152:	2100      	movs	r1, #0
 8005154:	2082      	movs	r0, #130	; 0x82
 8005156:	f7fc fdc7 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 800515a:	2100      	movs	r1, #0
 800515c:	2083      	movs	r0, #131	; 0x83
 800515e:	f7fc fdc3 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8005162:	2100      	movs	r1, #0
 8005164:	2084      	movs	r0, #132	; 0x84
 8005166:	f7fc fdbf 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 800516a:	2100      	movs	r1, #0
 800516c:	2085      	movs	r0, #133	; 0x85
 800516e:	f7fc fdbb 	bl	8001ce8 <LCD_WriteReg>

        LCD_WriteReg(0x0090,0x0010);
 8005172:	2110      	movs	r1, #16
 8005174:	2090      	movs	r0, #144	; 0x90
 8005176:	f7fc fdb7 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0600);
 800517a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800517e:	2092      	movs	r0, #146	; 0x92
 8005180:	f7fc fdb2 	bl	8001ce8 <LCD_WriteReg>
        //开启显示设置
        LCD_WriteReg(0x0007,0x0133);
 8005184:	f240 1133 	movw	r1, #307	; 0x133
 8005188:	2007      	movs	r0, #7
 800518a:	f7fc fdad 	bl	8001ce8 <LCD_WriteReg>
 800518e:	f000 bf85 	b.w	800609c <LCD_Init+0x383c>
 8005192:	bf00      	nop
 8005194:	20000358 	.word	0x20000358
	}else if(lcddev.id==0x9320)//测试OK.
 8005198:	4bce      	ldr	r3, [pc, #824]	; (80054d4 <LCD_Init+0x2c74>)
 800519a:	889b      	ldrh	r3, [r3, #4]
 800519c:	f249 3220 	movw	r2, #37664	; 0x9320
 80051a0:	4293      	cmp	r3, r2
 80051a2:	f040 80ad 	bne.w	8005300 <LCD_Init+0x2aa0>
	{
		LCD_WriteReg(0x00,0x0000);
 80051a6:	2100      	movs	r1, #0
 80051a8:	2000      	movs	r0, #0
 80051aa:	f7fc fd9d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x01,0x0100);	//Driver Output Contral.
 80051ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051b2:	2001      	movs	r0, #1
 80051b4:	f7fc fd98 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);	//LCD Driver Waveform Contral.
 80051b8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80051bc:	2002      	movs	r0, #2
 80051be:	f7fc fd93 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode Set.
 80051c2:	f241 0130 	movw	r1, #4144	; 0x1030
 80051c6:	2003      	movs	r0, #3
 80051c8:	f7fc fd8e 	bl	8001ce8 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04,0x0000);	//Scalling Contral.
 80051cc:	2100      	movs	r1, #0
 80051ce:	2004      	movs	r0, #4
 80051d0:	f7fc fd8a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0202);	//Display Contral 2.(0x0207)
 80051d4:	f240 2102 	movw	r1, #514	; 0x202
 80051d8:	2008      	movs	r0, #8
 80051da:	f7fc fd85 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000);	//Display Contral 3.(0x0000)
 80051de:	2100      	movs	r1, #0
 80051e0:	2009      	movs	r0, #9
 80051e2:	f7fc fd81 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
 80051e6:	2100      	movs	r1, #0
 80051e8:	200a      	movs	r0, #10
 80051ea:	f7fc fd7d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
 80051ee:	2101      	movs	r1, #1
 80051f0:	200c      	movs	r0, #12
 80051f2:	f7fc fd79 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0d,0x0000);	//Frame Maker Position.
 80051f6:	2100      	movs	r1, #0
 80051f8:	200d      	movs	r0, #13
 80051fa:	f7fc fd75 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0f,0x0000);	//Extern Display Interface Contral 2.
 80051fe:	2100      	movs	r1, #0
 8005200:	200f      	movs	r0, #15
 8005202:	f7fc fd71 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(50);
 8005206:	2032      	movs	r0, #50	; 0x32
 8005208:	f002 f908 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0x07,0x0101);	//Display Contral.
 800520c:	f240 1101 	movw	r1, #257	; 0x101
 8005210:	2007      	movs	r0, #7
 8005212:	f7fc fd69 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(50);
 8005216:	2032      	movs	r0, #50	; 0x32
 8005218:	f002 f900 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
 800521c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8005220:	2010      	movs	r0, #16
 8005222:	f7fc fd61 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0007);								//Power Control 2.(0x0001)
 8005226:	2107      	movs	r1, #7
 8005228:	2011      	movs	r0, #17
 800522a:	f7fc fd5d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));				//Power Control 3.(0x0138)
 800522e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005232:	2012      	movs	r0, #18
 8005234:	f7fc fd58 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0b00);								//Power Control 4.
 8005238:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 800523c:	2013      	movs	r0, #19
 800523e:	f7fc fd53 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0000);								//Power Control 7.
 8005242:	2100      	movs	r1, #0
 8005244:	2029      	movs	r0, #41	; 0x29
 8005246:	f7fc fd4f 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0x2b,(1<<14)|(1<<4));
 800524a:	f244 0110 	movw	r1, #16400	; 0x4010
 800524e:	202b      	movs	r0, #43	; 0x2b
 8005250:	f7fc fd4a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x50,0);	//Set X Star
 8005254:	2100      	movs	r1, #0
 8005256:	2050      	movs	r0, #80	; 0x50
 8005258:	f7fc fd46 	bl	8001ce8 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51,239);	//Set Y Star
 800525c:	21ef      	movs	r1, #239	; 0xef
 800525e:	2051      	movs	r0, #81	; 0x51
 8005260:	f7fc fd42 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x52,0);	//Set Y End.t.
 8005264:	2100      	movs	r1, #0
 8005266:	2052      	movs	r0, #82	; 0x52
 8005268:	f7fc fd3e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x53,319);	//
 800526c:	f240 113f 	movw	r1, #319	; 0x13f
 8005270:	2053      	movs	r0, #83	; 0x53
 8005272:	f7fc fd39 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0x60,0x2700);	//Driver Output Control.
 8005276:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800527a:	2060      	movs	r0, #96	; 0x60
 800527c:	f7fc fd34 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x61,0x0001);	//Driver Output Control.
 8005280:	2101      	movs	r1, #1
 8005282:	2061      	movs	r0, #97	; 0x61
 8005284:	f7fc fd30 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x6a,0x0000);	//Vertical Srcoll Control.
 8005288:	2100      	movs	r1, #0
 800528a:	206a      	movs	r0, #106	; 0x6a
 800528c:	f7fc fd2c 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0x80,0x0000);	//Display Position? Partial Display 1.
 8005290:	2100      	movs	r1, #0
 8005292:	2080      	movs	r0, #128	; 0x80
 8005294:	f7fc fd28 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000);	//RAM Address Start? Partial Display 1.
 8005298:	2100      	movs	r1, #0
 800529a:	2081      	movs	r0, #129	; 0x81
 800529c:	f7fc fd24 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000);	//RAM Address End-Partial Display 1.
 80052a0:	2100      	movs	r1, #0
 80052a2:	2082      	movs	r0, #130	; 0x82
 80052a4:	f7fc fd20 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000);	//Displsy Position? Partial Display 2.
 80052a8:	2100      	movs	r1, #0
 80052aa:	2083      	movs	r0, #131	; 0x83
 80052ac:	f7fc fd1c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000);	//RAM Address Start? Partial Display 2.
 80052b0:	2100      	movs	r1, #0
 80052b2:	2084      	movs	r0, #132	; 0x84
 80052b4:	f7fc fd18 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000);	//RAM Address End? Partial Display 2.
 80052b8:	2100      	movs	r1, #0
 80052ba:	2085      	movs	r0, #133	; 0x85
 80052bc:	f7fc fd14 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
 80052c0:	2110      	movs	r1, #16
 80052c2:	2090      	movs	r0, #144	; 0x90
 80052c4:	f7fc fd10 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
 80052c8:	2100      	movs	r1, #0
 80052ca:	2092      	movs	r0, #146	; 0x92
 80052cc:	f7fc fd0c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0001);	//Panel Interface Contral 3.
 80052d0:	2101      	movs	r1, #1
 80052d2:	2093      	movs	r0, #147	; 0x93
 80052d4:	f7fc fd08 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
 80052d8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80052dc:	2095      	movs	r0, #149	; 0x95
 80052de:	f7fc fd03 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x97,(0<<8));	//
 80052e2:	2100      	movs	r1, #0
 80052e4:	2097      	movs	r0, #151	; 0x97
 80052e6:	f7fc fcff 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x98,0x0000);	//Frame Cycle Contral.
 80052ea:	2100      	movs	r1, #0
 80052ec:	2098      	movs	r0, #152	; 0x98
 80052ee:	f7fc fcfb 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);	//(0x0173)
 80052f2:	f240 1173 	movw	r1, #371	; 0x173
 80052f6:	2007      	movs	r0, #7
 80052f8:	f7fc fcf6 	bl	8001ce8 <LCD_WriteReg>
 80052fc:	f000 bece 	b.w	800609c <LCD_Init+0x383c>
	}else if(lcddev.id==0X9331)//OK |/|/|
 8005300:	4b74      	ldr	r3, [pc, #464]	; (80054d4 <LCD_Init+0x2c74>)
 8005302:	889b      	ldrh	r3, [r3, #4]
 8005304:	f249 3231 	movw	r2, #37681	; 0x9331
 8005308:	4293      	cmp	r3, r2
 800530a:	f040 80e5 	bne.w	80054d8 <LCD_Init+0x2c78>
	{
		LCD_WriteReg(0x00E7, 0x1014);
 800530e:	f241 0114 	movw	r1, #4116	; 0x1014
 8005312:	20e7      	movs	r0, #231	; 0xe7
 8005314:	f7fc fce8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8005318:	f44f 7180 	mov.w	r1, #256	; 0x100
 800531c:	2001      	movs	r0, #1
 800531e:	f7fc fce3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8005322:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005326:	2002      	movs	r0, #2
 8005328:	f7fc fcde 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(1<<3));//65K
 800532c:	f241 0138 	movw	r1, #4152	; 0x1038
 8005330:	2003      	movs	r0, #3
 8005332:	f7fc fcd9 	bl	8001ce8 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8005336:	f240 2102 	movw	r1, #514	; 0x202
 800533a:	2008      	movs	r0, #8
 800533c:	f7fc fcd4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8005340:	2100      	movs	r1, #0
 8005342:	2009      	movs	r0, #9
 8005344:	f7fc fcd0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8005348:	2100      	movs	r1, #0
 800534a:	200a      	movs	r0, #10
 800534c:	f7fc fccc 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8005350:	2100      	movs	r1, #0
 8005352:	200c      	movs	r0, #12
 8005354:	f7fc fcc8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8005358:	2100      	movs	r1, #0
 800535a:	200d      	movs	r0, #13
 800535c:	f7fc fcc4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8005360:	2100      	movs	r1, #0
 8005362:	200f      	movs	r0, #15
 8005364:	f7fc fcc0 	bl	8001ce8 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8005368:	2100      	movs	r1, #0
 800536a:	2010      	movs	r0, #16
 800536c:	f7fc fcbc 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8005370:	2107      	movs	r1, #7
 8005372:	2011      	movs	r0, #17
 8005374:	f7fc fcb8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8005378:	2100      	movs	r1, #0
 800537a:	2012      	movs	r0, #18
 800537c:	f7fc fcb4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8005380:	2100      	movs	r1, #0
 8005382:	2013      	movs	r0, #19
 8005384:	f7fc fcb0 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8005388:	20c8      	movs	r0, #200	; 0xc8
 800538a:	f002 f847 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 800538e:	f241 6190 	movw	r1, #5776	; 0x1690
 8005392:	2010      	movs	r0, #16
 8005394:	f7fc fca8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8005398:	f240 2127 	movw	r1, #551	; 0x227
 800539c:	2011      	movs	r0, #17
 800539e:	f7fc fca3 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80053a2:	2032      	movs	r0, #50	; 0x32
 80053a4:	f002 f83a 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 80053a8:	210c      	movs	r1, #12
 80053aa:	2012      	movs	r0, #18
 80053ac:	f7fc fc9c 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80053b0:	2032      	movs	r0, #50	; 0x32
 80053b2:	f002 f833 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 80053b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053ba:	2013      	movs	r0, #19
 80053bc:	f7fc fc94 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 80053c0:	2111      	movs	r1, #17
 80053c2:	2029      	movs	r0, #41	; 0x29
 80053c4:	f7fc fc90 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 80053c8:	210b      	movs	r1, #11
 80053ca:	202b      	movs	r0, #43	; 0x2b
 80053cc:	f7fc fc8c 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80053d0:	2032      	movs	r0, #50	; 0x32
 80053d2:	f002 f823 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 80053d6:	2100      	movs	r1, #0
 80053d8:	2020      	movs	r0, #32
 80053da:	f7fc fc85 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 80053de:	f240 113f 	movw	r1, #319	; 0x13f
 80053e2:	2021      	movs	r0, #33	; 0x21
 80053e4:	f7fc fc80 	bl	8001ce8 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 80053e8:	2100      	movs	r1, #0
 80053ea:	2030      	movs	r0, #48	; 0x30
 80053ec:	f7fc fc7c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 80053f0:	f44f 7183 	mov.w	r1, #262	; 0x106
 80053f4:	2031      	movs	r0, #49	; 0x31
 80053f6:	f7fc fc77 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 80053fa:	2100      	movs	r1, #0
 80053fc:	2032      	movs	r0, #50	; 0x32
 80053fe:	f7fc fc73 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8005402:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005406:	2035      	movs	r0, #53	; 0x35
 8005408:	f7fc fc6e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 800540c:	f241 610a 	movw	r1, #5642	; 0x160a
 8005410:	2036      	movs	r0, #54	; 0x36
 8005412:	f7fc fc69 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8005416:	f240 7107 	movw	r1, #1799	; 0x707
 800541a:	2037      	movs	r0, #55	; 0x37
 800541c:	f7fc fc64 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8005420:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005424:	2038      	movs	r0, #56	; 0x38
 8005426:	f7fc fc5f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 800542a:	f240 7107 	movw	r1, #1799	; 0x707
 800542e:	2039      	movs	r0, #57	; 0x39
 8005430:	f7fc fc5a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8005434:	f240 4102 	movw	r1, #1026	; 0x402
 8005438:	203c      	movs	r0, #60	; 0x3c
 800543a:	f7fc fc55 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 800543e:	f640 410f 	movw	r1, #3087	; 0xc0f
 8005442:	203d      	movs	r0, #61	; 0x3d
 8005444:	f7fc fc50 	bl	8001ce8 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8005448:	2100      	movs	r1, #0
 800544a:	2050      	movs	r0, #80	; 0x50
 800544c:	f7fc fc4c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8005450:	21ef      	movs	r1, #239	; 0xef
 8005452:	2051      	movs	r0, #81	; 0x51
 8005454:	f7fc fc48 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8005458:	2100      	movs	r1, #0
 800545a:	2052      	movs	r0, #82	; 0x52
 800545c:	f7fc fc44 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8005460:	f240 113f 	movw	r1, #319	; 0x13f
 8005464:	2053      	movs	r0, #83	; 0x53
 8005466:	f7fc fc3f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 800546a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800546e:	2060      	movs	r0, #96	; 0x60
 8005470:	f7fc fc3a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
 8005474:	2101      	movs	r1, #1
 8005476:	2061      	movs	r0, #97	; 0x61
 8005478:	f7fc fc36 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 800547c:	2100      	movs	r1, #0
 800547e:	206a      	movs	r0, #106	; 0x6a
 8005480:	f7fc fc32 	bl	8001ce8 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8005484:	2100      	movs	r1, #0
 8005486:	2080      	movs	r0, #128	; 0x80
 8005488:	f7fc fc2e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 800548c:	2100      	movs	r1, #0
 800548e:	2081      	movs	r0, #129	; 0x81
 8005490:	f7fc fc2a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005494:	2100      	movs	r1, #0
 8005496:	2082      	movs	r0, #130	; 0x82
 8005498:	f7fc fc26 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800549c:	2100      	movs	r1, #0
 800549e:	2083      	movs	r0, #131	; 0x83
 80054a0:	f7fc fc22 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80054a4:	2100      	movs	r1, #0
 80054a6:	2084      	movs	r0, #132	; 0x84
 80054a8:	f7fc fc1e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80054ac:	2100      	movs	r1, #0
 80054ae:	2085      	movs	r0, #133	; 0x85
 80054b0:	f7fc fc1a 	bl	8001ce8 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 80054b4:	2110      	movs	r1, #16
 80054b6:	2090      	movs	r0, #144	; 0x90
 80054b8:	f7fc fc16 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80054bc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80054c0:	2092      	movs	r0, #146	; 0x92
 80054c2:	f7fc fc11 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 80054c6:	f240 1133 	movw	r1, #307	; 0x133
 80054ca:	2007      	movs	r0, #7
 80054cc:	f7fc fc0c 	bl	8001ce8 <LCD_WriteReg>
 80054d0:	f000 bde4 	b.w	800609c <LCD_Init+0x383c>
 80054d4:	20000358 	.word	0x20000358
	}else if(lcddev.id==0x5408)
 80054d8:	4be2      	ldr	r3, [pc, #904]	; (8005864 <LCD_Init+0x3004>)
 80054da:	889b      	ldrh	r3, [r3, #4]
 80054dc:	f245 4208 	movw	r2, #21512	; 0x5408
 80054e0:	4293      	cmp	r3, r2
 80054e2:	f040 80a3 	bne.w	800562c <LCD_Init+0x2dcc>
	{
		LCD_WriteReg(0x01,0x0100);
 80054e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054ea:	2001      	movs	r0, #1
 80054ec:	f7fc fbfc 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);//LCD Driving Waveform Contral
 80054f0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80054f4:	2002      	movs	r0, #2
 80054f6:	f7fc fbf7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode设置
 80054fa:	f241 0130 	movw	r1, #4144	; 0x1030
 80054fe:	2003      	movs	r0, #3
 8005500:	f7fc fbf2 	bl	8001ce8 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04,0x0000); //Scalling Control register
 8005504:	2100      	movs	r1, #0
 8005506:	2004      	movs	r0, #4
 8005508:	f7fc fbee 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0207); //Display Control 2
 800550c:	f240 2107 	movw	r1, #519	; 0x207
 8005510:	2008      	movs	r0, #8
 8005512:	f7fc fbe9 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000); //Display Control 3
 8005516:	2100      	movs	r1, #0
 8005518:	2009      	movs	r0, #9
 800551a:	f7fc fbe5 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0A,0x0000); //Frame Cycle Control
 800551e:	2100      	movs	r1, #0
 8005520:	200a      	movs	r0, #10
 8005522:	f7fc fbe1 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0C,0x0000); //External Display Interface Control 1
 8005526:	2100      	movs	r1, #0
 8005528:	200c      	movs	r0, #12
 800552a:	f7fc fbdd 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0D,0x0000); //Frame Maker Position
 800552e:	2100      	movs	r1, #0
 8005530:	200d      	movs	r0, #13
 8005532:	f7fc fbd9 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0F,0x0000); //External Display Interface Control 2
 8005536:	2100      	movs	r1, #0
 8005538:	200f      	movs	r0, #15
 800553a:	f7fc fbd5 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(20);
 800553e:	2014      	movs	r0, #20
 8005540:	f001 ff6c 	bl	800741c <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10,0x16B0); //0x14B0 //Power Control 1
 8005544:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8005548:	2010      	movs	r0, #16
 800554a:	f7fc fbcd 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0001); //0x0007 //Power Control 2
 800554e:	2101      	movs	r1, #1
 8005550:	2011      	movs	r0, #17
 8005552:	f7fc fbc9 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x17,0x0001); //0x0000 //Power Control 3
 8005556:	2101      	movs	r1, #1
 8005558:	2017      	movs	r0, #23
 800555a:	f7fc fbc5 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x12,0x0138); //0x013B //Power Control 4
 800555e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8005562:	2012      	movs	r0, #18
 8005564:	f7fc fbc0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0800); //0x0800 //Power Control 5
 8005568:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800556c:	2013      	movs	r0, #19
 800556e:	f7fc fbbb 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0009); //NVM read data 2
 8005572:	2109      	movs	r1, #9
 8005574:	2029      	movs	r0, #41	; 0x29
 8005576:	f7fc fbb7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x2a,0x0009); //NVM read data 3
 800557a:	2109      	movs	r1, #9
 800557c:	202a      	movs	r0, #42	; 0x2a
 800557e:	f7fc fbb3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0xa4,0x0000);
 8005582:	2100      	movs	r1, #0
 8005584:	20a4      	movs	r0, #164	; 0xa4
 8005586:	f7fc fbaf 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x50,0x0000); //设置操作窗口的X轴开始列
 800558a:	2100      	movs	r1, #0
 800558c:	2050      	movs	r0, #80	; 0x50
 800558e:	f7fc fbab 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x51,0x00EF); //设置操作窗口的X轴结束列
 8005592:	21ef      	movs	r1, #239	; 0xef
 8005594:	2051      	movs	r0, #81	; 0x51
 8005596:	f7fc fba7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x52,0x0000); //设置操作窗口的Y轴开始行
 800559a:	2100      	movs	r1, #0
 800559c:	2052      	movs	r0, #82	; 0x52
 800559e:	f7fc fba3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x53,0x013F); //设置操作窗口的Y轴结束行
 80055a2:	f240 113f 	movw	r1, #319	; 0x13f
 80055a6:	2053      	movs	r0, #83	; 0x53
 80055a8:	f7fc fb9e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x60,0x2700); //Driver Output Control
 80055ac:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80055b0:	2060      	movs	r0, #96	; 0x60
 80055b2:	f7fc fb99 	bl	8001ce8 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61,0x0001); //Driver Output Control
 80055b6:	2101      	movs	r1, #1
 80055b8:	2061      	movs	r0, #97	; 0x61
 80055ba:	f7fc fb95 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x6A,0x0000); //Vertical Scroll Control
 80055be:	2100      	movs	r1, #0
 80055c0:	206a      	movs	r0, #106	; 0x6a
 80055c2:	f7fc fb91 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x80,0x0000); //Display Position – Partial Display 1
 80055c6:	2100      	movs	r1, #0
 80055c8:	2080      	movs	r0, #128	; 0x80
 80055ca:	f7fc fb8d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000); //RAM Address Start – Partial Display 1
 80055ce:	2100      	movs	r1, #0
 80055d0:	2081      	movs	r0, #129	; 0x81
 80055d2:	f7fc fb89 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000); //RAM address End - Partial Display 1
 80055d6:	2100      	movs	r1, #0
 80055d8:	2082      	movs	r0, #130	; 0x82
 80055da:	f7fc fb85 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000); //Display Position – Partial Display 2
 80055de:	2100      	movs	r1, #0
 80055e0:	2083      	movs	r0, #131	; 0x83
 80055e2:	f7fc fb81 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000); //RAM Address Start – Partial Display 2
 80055e6:	2100      	movs	r1, #0
 80055e8:	2084      	movs	r0, #132	; 0x84
 80055ea:	f7fc fb7d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000); //RAM address End – Partail Display2
 80055ee:	2100      	movs	r1, #0
 80055f0:	2085      	movs	r0, #133	; 0x85
 80055f2:	f7fc fb79 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x90,0x0013); //Frame Cycle Control
 80055f6:	2113      	movs	r1, #19
 80055f8:	2090      	movs	r0, #144	; 0x90
 80055fa:	f7fc fb75 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);  //Panel Interface Control 2
 80055fe:	2100      	movs	r1, #0
 8005600:	2092      	movs	r0, #146	; 0x92
 8005602:	f7fc fb71 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0003); //Panel Interface control 3
 8005606:	2103      	movs	r1, #3
 8005608:	2093      	movs	r0, #147	; 0x93
 800560a:	f7fc fb6d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);  //Frame Cycle Control
 800560e:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005612:	2095      	movs	r0, #149	; 0x95
 8005614:	f7fc fb68 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);
 8005618:	f240 1173 	movw	r1, #371	; 0x173
 800561c:	2007      	movs	r0, #7
 800561e:	f7fc fb63 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(50);
 8005622:	2032      	movs	r0, #50	; 0x32
 8005624:	f001 fefa 	bl	800741c <HAL_Delay>
 8005628:	f000 bd38 	b.w	800609c <LCD_Init+0x383c>
	}
	else if(lcddev.id==0x1505)//OK
 800562c:	4b8d      	ldr	r3, [pc, #564]	; (8005864 <LCD_Init+0x3004>)
 800562e:	889b      	ldrh	r3, [r3, #4]
 8005630:	f241 5205 	movw	r2, #5381	; 0x1505
 8005634:	4293      	cmp	r3, r2
 8005636:	f040 8117 	bne.w	8005868 <LCD_Init+0x3008>
	{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
        LCD_WriteReg(0x0007,0x0000);
 800563a:	2100      	movs	r1, #0
 800563c:	2007      	movs	r0, #7
 800563e:	f7fc fb53 	bl	8001ce8 <LCD_WriteReg>
        HAL_Delay(50);
 8005642:	2032      	movs	r0, #50	; 0x32
 8005644:	f001 feea 	bl	800741c <HAL_Delay>
        LCD_WriteReg(0x0012,0x011C);//0x011A   why need to set several times?
 8005648:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800564c:	2012      	movs	r0, #18
 800564e:	f7fc fb4b 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x00A4,0x0001);//NVM
 8005652:	2101      	movs	r1, #1
 8005654:	20a4      	movs	r0, #164	; 0xa4
 8005656:	f7fc fb47 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x000F);
 800565a:	210f      	movs	r1, #15
 800565c:	2008      	movs	r0, #8
 800565e:	f7fc fb43 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x000A,0x0008);
 8005662:	2108      	movs	r1, #8
 8005664:	200a      	movs	r0, #10
 8005666:	f7fc fb3f 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x000D,0x0008);
 800566a:	2108      	movs	r1, #8
 800566c:	200d      	movs	r0, #13
 800566e:	f7fc fb3b 	bl	8001ce8 <LCD_WriteReg>
  		//伽马校正
        LCD_WriteReg(0x0030,0x0707);
 8005672:	f240 7107 	movw	r1, #1799	; 0x707
 8005676:	2030      	movs	r0, #48	; 0x30
 8005678:	f7fc fb36 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0007); //0x0707
 800567c:	2107      	movs	r1, #7
 800567e:	2031      	movs	r0, #49	; 0x31
 8005680:	f7fc fb32 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0603);
 8005684:	f240 6103 	movw	r1, #1539	; 0x603
 8005688:	2032      	movs	r0, #50	; 0x32
 800568a:	f7fc fb2d 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0033,0x0700);
 800568e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005692:	2033      	movs	r0, #51	; 0x33
 8005694:	f7fc fb28 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0034,0x0202);
 8005698:	f240 2102 	movw	r1, #514	; 0x202
 800569c:	2034      	movs	r0, #52	; 0x34
 800569e:	f7fc fb23 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0002); //?0x0606
 80056a2:	2102      	movs	r1, #2
 80056a4:	2035      	movs	r0, #53	; 0x35
 80056a6:	f7fc fb1f 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x1F0F);
 80056aa:	f641 710f 	movw	r1, #7951	; 0x1f0f
 80056ae:	2036      	movs	r0, #54	; 0x36
 80056b0:	f7fc fb1a 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0707); //0x0f0f  0x0105
 80056b4:	f240 7107 	movw	r1, #1799	; 0x707
 80056b8:	2037      	movs	r0, #55	; 0x37
 80056ba:	f7fc fb15 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0000);
 80056be:	2100      	movs	r1, #0
 80056c0:	2038      	movs	r0, #56	; 0x38
 80056c2:	f7fc fb11 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0000);
 80056c6:	2100      	movs	r1, #0
 80056c8:	2039      	movs	r0, #57	; 0x39
 80056ca:	f7fc fb0d 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x003A,0x0707);
 80056ce:	f240 7107 	movw	r1, #1799	; 0x707
 80056d2:	203a      	movs	r0, #58	; 0x3a
 80056d4:	f7fc fb08 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x003B,0x0000); //0x0303
 80056d8:	2100      	movs	r1, #0
 80056da:	203b      	movs	r0, #59	; 0x3b
 80056dc:	f7fc fb04 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x003C,0x0007); //?0x0707
 80056e0:	2107      	movs	r1, #7
 80056e2:	203c      	movs	r0, #60	; 0x3c
 80056e4:	f7fc fb00 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x003D,0x0000); //0x1313//0x1f08
 80056e8:	2100      	movs	r1, #0
 80056ea:	203d      	movs	r0, #61	; 0x3d
 80056ec:	f7fc fafc 	bl	8001ce8 <LCD_WriteReg>
        HAL_Delay(50);
 80056f0:	2032      	movs	r0, #50	; 0x32
 80056f2:	f001 fe93 	bl	800741c <HAL_Delay>
        LCD_WriteReg(0x0007,0x0001);
 80056f6:	2101      	movs	r1, #1
 80056f8:	2007      	movs	r0, #7
 80056fa:	f7fc faf5 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0017,0x0001);//开启电源
 80056fe:	2101      	movs	r1, #1
 8005700:	2017      	movs	r0, #23
 8005702:	f7fc faf1 	bl	8001ce8 <LCD_WriteReg>
        HAL_Delay(50);
 8005706:	2032      	movs	r0, #50	; 0x32
 8005708:	f001 fe88 	bl	800741c <HAL_Delay>
  		//电源配置
        LCD_WriteReg(0x0010,0x17A0);
 800570c:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8005710:	2010      	movs	r0, #16
 8005712:	f7fc fae9 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0217);//reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8005716:	f240 2117 	movw	r1, #535	; 0x217
 800571a:	2011      	movs	r0, #17
 800571c:	f7fc fae4 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x011E);//0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8005720:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8005724:	2012      	movs	r0, #18
 8005726:	f7fc fadf 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0F00);//VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 800572a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800572e:	2013      	movs	r0, #19
 8005730:	f7fc fada 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x002A,0x0000);
 8005734:	2100      	movs	r1, #0
 8005736:	202a      	movs	r0, #42	; 0x2a
 8005738:	f7fc fad6 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x000A);//0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 800573c:	210a      	movs	r1, #10
 800573e:	2029      	movs	r0, #41	; 0x29
 8005740:	f7fc fad2 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x013E);// 0x013C  power supply on
 8005744:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005748:	2012      	movs	r0, #18
 800574a:	f7fc facd 	bl	8001ce8 <LCD_WriteReg>
        //Coordinates Control//
        LCD_WriteReg(0x0050,0x0000);//0x0e00
 800574e:	2100      	movs	r1, #0
 8005750:	2050      	movs	r0, #80	; 0x50
 8005752:	f7fc fac9 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00EF);
 8005756:	21ef      	movs	r1, #239	; 0xef
 8005758:	2051      	movs	r0, #81	; 0x51
 800575a:	f7fc fac5 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000);
 800575e:	2100      	movs	r1, #0
 8005760:	2052      	movs	r0, #82	; 0x52
 8005762:	f7fc fac1 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013F);
 8005766:	f240 113f 	movw	r1, #319	; 0x13f
 800576a:	2053      	movs	r0, #83	; 0x53
 800576c:	f7fc fabc 	bl	8001ce8 <LCD_WriteReg>
    	//Pannel Image Control//
        LCD_WriteReg(0x0060,0x2700);
 8005770:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005774:	2060      	movs	r0, #96	; 0x60
 8005776:	f7fc fab7 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 800577a:	2101      	movs	r1, #1
 800577c:	2061      	movs	r0, #97	; 0x61
 800577e:	f7fc fab3 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x006A,0x0000);
 8005782:	2100      	movs	r1, #0
 8005784:	206a      	movs	r0, #106	; 0x6a
 8005786:	f7fc faaf 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 800578a:	2100      	movs	r1, #0
 800578c:	2080      	movs	r0, #128	; 0x80
 800578e:	f7fc faab 	bl	8001ce8 <LCD_WriteReg>
    	//Partial Image Control//
        LCD_WriteReg(0x0081,0x0000);
 8005792:	2100      	movs	r1, #0
 8005794:	2081      	movs	r0, #129	; 0x81
 8005796:	f7fc faa7 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 800579a:	2100      	movs	r1, #0
 800579c:	2082      	movs	r0, #130	; 0x82
 800579e:	f7fc faa3 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 80057a2:	2100      	movs	r1, #0
 80057a4:	2083      	movs	r0, #131	; 0x83
 80057a6:	f7fc fa9f 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 80057aa:	2100      	movs	r1, #0
 80057ac:	2084      	movs	r0, #132	; 0x84
 80057ae:	f7fc fa9b 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 80057b2:	2100      	movs	r1, #0
 80057b4:	2085      	movs	r0, #133	; 0x85
 80057b6:	f7fc fa97 	bl	8001ce8 <LCD_WriteReg>
  		//Panel Interface Control//
        LCD_WriteReg(0x0090,0x0013);//0x0010 frenqucy
 80057ba:	2113      	movs	r1, #19
 80057bc:	2090      	movs	r0, #144	; 0x90
 80057be:	f7fc fa93 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0300);
 80057c2:	f44f 7140 	mov.w	r1, #768	; 0x300
 80057c6:	2092      	movs	r0, #146	; 0x92
 80057c8:	f7fc fa8e 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0093,0x0005);
 80057cc:	2105      	movs	r1, #5
 80057ce:	2093      	movs	r0, #147	; 0x93
 80057d0:	f7fc fa8a 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0095,0x0000);
 80057d4:	2100      	movs	r1, #0
 80057d6:	2095      	movs	r0, #149	; 0x95
 80057d8:	f7fc fa86 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0097,0x0000);
 80057dc:	2100      	movs	r1, #0
 80057de:	2097      	movs	r0, #151	; 0x97
 80057e0:	f7fc fa82 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0098,0x0000);
 80057e4:	2100      	movs	r1, #0
 80057e6:	2098      	movs	r0, #152	; 0x98
 80057e8:	f7fc fa7e 	bl	8001ce8 <LCD_WriteReg>

        LCD_WriteReg(0x0001,0x0100);
 80057ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057f0:	2001      	movs	r0, #1
 80057f2:	f7fc fa79 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);
 80057f6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80057fa:	2002      	movs	r0, #2
 80057fc:	f7fc fa74 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 8005800:	f241 0138 	movw	r1, #4152	; 0x1038
 8005804:	2003      	movs	r0, #3
 8005806:	f7fc fa6f 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 800580a:	2100      	movs	r1, #0
 800580c:	2004      	movs	r0, #4
 800580e:	f7fc fa6b 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x000C,0x0000);
 8005812:	2100      	movs	r1, #0
 8005814:	200c      	movs	r0, #12
 8005816:	f7fc fa67 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x000F,0x0000);
 800581a:	2100      	movs	r1, #0
 800581c:	200f      	movs	r0, #15
 800581e:	f7fc fa63 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0020,0x0000);
 8005822:	2100      	movs	r1, #0
 8005824:	2020      	movs	r0, #32
 8005826:	f7fc fa5f 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 800582a:	2100      	movs	r1, #0
 800582c:	2021      	movs	r0, #33	; 0x21
 800582e:	f7fc fa5b 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0007,0x0021);
 8005832:	2121      	movs	r1, #33	; 0x21
 8005834:	2007      	movs	r0, #7
 8005836:	f7fc fa57 	bl	8001ce8 <LCD_WriteReg>
        HAL_Delay(20);
 800583a:	2014      	movs	r0, #20
 800583c:	f001 fdee 	bl	800741c <HAL_Delay>
        LCD_WriteReg(0x0007,0x0061);
 8005840:	2161      	movs	r1, #97	; 0x61
 8005842:	2007      	movs	r0, #7
 8005844:	f7fc fa50 	bl	8001ce8 <LCD_WriteReg>
        HAL_Delay(20);
 8005848:	2014      	movs	r0, #20
 800584a:	f001 fde7 	bl	800741c <HAL_Delay>
        LCD_WriteReg(0x0007,0x0173);
 800584e:	f240 1173 	movw	r1, #371	; 0x173
 8005852:	2007      	movs	r0, #7
 8005854:	f7fc fa48 	bl	8001ce8 <LCD_WriteReg>
        HAL_Delay(20);
 8005858:	2014      	movs	r0, #20
 800585a:	f001 fddf 	bl	800741c <HAL_Delay>
 800585e:	f000 bc1d 	b.w	800609c <LCD_Init+0x383c>
 8005862:	bf00      	nop
 8005864:	20000358 	.word	0x20000358
	}else if(lcddev.id==0xB505)
 8005868:	4bef      	ldr	r3, [pc, #956]	; (8005c28 <LCD_Init+0x33c8>)
 800586a:	889b      	ldrh	r3, [r3, #4]
 800586c:	f24b 5205 	movw	r2, #46341	; 0xb505
 8005870:	4293      	cmp	r3, r2
 8005872:	f040 8102 	bne.w	8005a7a <LCD_Init+0x321a>
	{
		LCD_WriteReg(0x0000,0x0000);
 8005876:	2100      	movs	r1, #0
 8005878:	2000      	movs	r0, #0
 800587a:	f7fc fa35 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800587e:	2100      	movs	r1, #0
 8005880:	2000      	movs	r0, #0
 8005882:	f7fc fa31 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005886:	2100      	movs	r1, #0
 8005888:	2000      	movs	r0, #0
 800588a:	f7fc fa2d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800588e:	2100      	movs	r1, #0
 8005890:	2000      	movs	r0, #0
 8005892:	f7fc fa29 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0x00a4,0x0001);
 8005896:	2101      	movs	r1, #1
 8005898:	20a4      	movs	r0, #164	; 0xa4
 800589a:	f7fc fa25 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(20);
 800589e:	2014      	movs	r0, #20
 80058a0:	f001 fdbc 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 80058a4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80058a8:	2060      	movs	r0, #96	; 0x60
 80058aa:	f7fc fa1d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 80058ae:	f240 2102 	movw	r1, #514	; 0x202
 80058b2:	2008      	movs	r0, #8
 80058b4:	f7fc fa18 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0214);
 80058b8:	f44f 7105 	mov.w	r1, #532	; 0x214
 80058bc:	2030      	movs	r0, #48	; 0x30
 80058be:	f7fc fa13 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x3715);
 80058c2:	f243 7115 	movw	r1, #14101	; 0x3715
 80058c6:	2031      	movs	r0, #49	; 0x31
 80058c8:	f7fc fa0e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0604);
 80058cc:	f240 6104 	movw	r1, #1540	; 0x604
 80058d0:	2032      	movs	r0, #50	; 0x32
 80058d2:	f7fc fa09 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0e16);
 80058d6:	f640 6116 	movw	r1, #3606	; 0xe16
 80058da:	2033      	movs	r0, #51	; 0x33
 80058dc:	f7fc fa04 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x2211);
 80058e0:	f242 2111 	movw	r1, #8721	; 0x2211
 80058e4:	2034      	movs	r0, #52	; 0x34
 80058e6:	f7fc f9ff 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x1500);
 80058ea:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80058ee:	2035      	movs	r0, #53	; 0x35
 80058f0:	f7fc f9fa 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x8507);
 80058f4:	f248 5107 	movw	r1, #34055	; 0x8507
 80058f8:	2036      	movs	r0, #54	; 0x36
 80058fa:	f7fc f9f5 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x1407);
 80058fe:	f241 4107 	movw	r1, #5127	; 0x1407
 8005902:	2037      	movs	r0, #55	; 0x37
 8005904:	f7fc f9f0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x1403);
 8005908:	f241 4103 	movw	r1, #5123	; 0x1403
 800590c:	2038      	movs	r0, #56	; 0x38
 800590e:	f7fc f9eb 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0020);
 8005912:	2120      	movs	r1, #32
 8005914:	2039      	movs	r0, #57	; 0x39
 8005916:	f7fc f9e7 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0x0090,0x001a);
 800591a:	211a      	movs	r1, #26
 800591c:	2090      	movs	r0, #144	; 0x90
 800591e:	f7fc f9e3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0010,0x0000);
 8005922:	2100      	movs	r1, #0
 8005924:	2010      	movs	r0, #16
 8005926:	f7fc f9df 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 800592a:	2107      	movs	r1, #7
 800592c:	2011      	movs	r0, #17
 800592e:	f7fc f9db 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 8005932:	2100      	movs	r1, #0
 8005934:	2012      	movs	r0, #18
 8005936:	f7fc f9d7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 800593a:	2100      	movs	r1, #0
 800593c:	2013      	movs	r0, #19
 800593e:	f7fc f9d3 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(20);
 8005942:	2014      	movs	r0, #20
 8005944:	f001 fd6a 	bl	800741c <HAL_Delay>

		LCD_WriteReg(0x0010,0x0730);
 8005948:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 800594c:	2010      	movs	r0, #16
 800594e:	f7fc f9cb 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0137);
 8005952:	f240 1137 	movw	r1, #311	; 0x137
 8005956:	2011      	movs	r0, #17
 8005958:	f7fc f9c6 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(20);
 800595c:	2014      	movs	r0, #20
 800595e:	f001 fd5d 	bl	800741c <HAL_Delay>

		LCD_WriteReg(0x0012,0x01b8);
 8005962:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8005966:	2012      	movs	r0, #18
 8005968:	f7fc f9be 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(20);
 800596c:	2014      	movs	r0, #20
 800596e:	f001 fd55 	bl	800741c <HAL_Delay>

		LCD_WriteReg(0x0013,0x0f00);
 8005972:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005976:	2013      	movs	r0, #19
 8005978:	f7fc f9b6 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x002a,0x0080);
 800597c:	2180      	movs	r1, #128	; 0x80
 800597e:	202a      	movs	r0, #42	; 0x2a
 8005980:	f7fc f9b2 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0029,0x0048);
 8005984:	2148      	movs	r1, #72	; 0x48
 8005986:	2029      	movs	r0, #41	; 0x29
 8005988:	f7fc f9ae 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(20);
 800598c:	2014      	movs	r0, #20
 800598e:	f001 fd45 	bl	800741c <HAL_Delay>

		LCD_WriteReg(0x0001,0x0100);
 8005992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005996:	2001      	movs	r0, #1
 8005998:	f7fc f9a6 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 800599c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80059a0:	2002      	movs	r0, #2
 80059a2:	f7fc f9a1 	bl	8001ce8 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 80059a6:	f241 0138 	movw	r1, #4152	; 0x1038
 80059aa:	2003      	movs	r0, #3
 80059ac:	f7fc f99c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 80059b0:	f240 2102 	movw	r1, #514	; 0x202
 80059b4:	2008      	movs	r0, #8
 80059b6:	f7fc f997 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x000a,0x0000);
 80059ba:	2100      	movs	r1, #0
 80059bc:	200a      	movs	r0, #10
 80059be:	f7fc f993 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x000c,0x0000);
 80059c2:	2100      	movs	r1, #0
 80059c4:	200c      	movs	r0, #12
 80059c6:	f7fc f98f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x000d,0x0000);
 80059ca:	2100      	movs	r1, #0
 80059cc:	200d      	movs	r0, #13
 80059ce:	f7fc f98b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x000e,0x0030);
 80059d2:	2130      	movs	r1, #48	; 0x30
 80059d4:	200e      	movs	r0, #14
 80059d6:	f7fc f987 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0050,0x0000);
 80059da:	2100      	movs	r1, #0
 80059dc:	2050      	movs	r0, #80	; 0x50
 80059de:	f7fc f983 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00ef);
 80059e2:	21ef      	movs	r1, #239	; 0xef
 80059e4:	2051      	movs	r0, #81	; 0x51
 80059e6:	f7fc f97f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 80059ea:	2100      	movs	r1, #0
 80059ec:	2052      	movs	r0, #82	; 0x52
 80059ee:	f7fc f97b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013f);
 80059f2:	f240 113f 	movw	r1, #319	; 0x13f
 80059f6:	2053      	movs	r0, #83	; 0x53
 80059f8:	f7fc f976 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0x2700);
 80059fc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005a00:	2060      	movs	r0, #96	; 0x60
 8005a02:	f7fc f971 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 8005a06:	2101      	movs	r1, #1
 8005a08:	2061      	movs	r0, #97	; 0x61
 8005a0a:	f7fc f96d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x006a,0x0000);
 8005a0e:	2100      	movs	r1, #0
 8005a10:	206a      	movs	r0, #106	; 0x6a
 8005a12:	f7fc f969 	bl	8001ce8 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090,0X0011);
 8005a16:	2111      	movs	r1, #17
 8005a18:	2090      	movs	r0, #144	; 0x90
 8005a1a:	f7fc f965 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8005a1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a22:	2092      	movs	r0, #146	; 0x92
 8005a24:	f7fc f960 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0093,0x0402);
 8005a28:	f240 4102 	movw	r1, #1026	; 0x402
 8005a2c:	2093      	movs	r0, #147	; 0x93
 8005a2e:	f7fc f95b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0094,0x0002);
 8005a32:	2102      	movs	r1, #2
 8005a34:	2094      	movs	r0, #148	; 0x94
 8005a36:	f7fc f957 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(20);
 8005a3a:	2014      	movs	r0, #20
 8005a3c:	f001 fcee 	bl	800741c <HAL_Delay>

		LCD_WriteReg(0x0007,0x0001);
 8005a40:	2101      	movs	r1, #1
 8005a42:	2007      	movs	r0, #7
 8005a44:	f7fc f950 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(20);
 8005a48:	2014      	movs	r0, #20
 8005a4a:	f001 fce7 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0x0007,0x0061);
 8005a4e:	2161      	movs	r1, #97	; 0x61
 8005a50:	2007      	movs	r0, #7
 8005a52:	f7fc f949 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0173);
 8005a56:	f240 1173 	movw	r1, #371	; 0x173
 8005a5a:	2007      	movs	r0, #7
 8005a5c:	f7fc f944 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0x0020,0x0000);
 8005a60:	2100      	movs	r1, #0
 8005a62:	2020      	movs	r0, #32
 8005a64:	f7fc f940 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0021,0x0000);
 8005a68:	2100      	movs	r1, #0
 8005a6a:	2021      	movs	r0, #33	; 0x21
 8005a6c:	f7fc f93c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x22);
 8005a70:	2122      	movs	r1, #34	; 0x22
 8005a72:	2000      	movs	r0, #0
 8005a74:	f7fc f938 	bl	8001ce8 <LCD_WriteReg>
 8005a78:	e310      	b.n	800609c <LCD_Init+0x383c>
	}else if(lcddev.id==0xC505)
 8005a7a:	4b6b      	ldr	r3, [pc, #428]	; (8005c28 <LCD_Init+0x33c8>)
 8005a7c:	889b      	ldrh	r3, [r3, #4]
 8005a7e:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005a82:	4293      	cmp	r3, r2
 8005a84:	f040 80d2 	bne.w	8005c2c <LCD_Init+0x33cc>
	{
		LCD_WriteReg(0x0000,0x0000);
 8005a88:	2100      	movs	r1, #0
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	f7fc f92c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005a90:	2100      	movs	r1, #0
 8005a92:	2000      	movs	r0, #0
 8005a94:	f7fc f928 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(20);
 8005a98:	2014      	movs	r0, #20
 8005a9a:	f001 fcbf 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0x0000,0x0000);
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	f7fc f921 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	f7fc f91d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005aae:	2100      	movs	r1, #0
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	f7fc f919 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005ab6:	2100      	movs	r1, #0
 8005ab8:	2000      	movs	r0, #0
 8005aba:	f7fc f915 	bl	8001ce8 <LCD_WriteReg>
 		LCD_WriteReg(0x00a4,0x0001);
 8005abe:	2101      	movs	r1, #1
 8005ac0:	20a4      	movs	r0, #164	; 0xa4
 8005ac2:	f7fc f911 	bl	8001ce8 <LCD_WriteReg>
 		HAL_Delay(20);
 8005ac6:	2014      	movs	r0, #20
 8005ac8:	f001 fca8 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8005acc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005ad0:	2060      	movs	r0, #96	; 0x60
 8005ad2:	f7fc f909 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0806);
 8005ad6:	f640 0106 	movw	r1, #2054	; 0x806
 8005ada:	2008      	movs	r0, #8
 8005adc:	f7fc f904 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0703);//gamma setting
 8005ae0:	f240 7103 	movw	r1, #1795	; 0x703
 8005ae4:	2030      	movs	r0, #48	; 0x30
 8005ae6:	f7fc f8ff 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0001);
 8005aea:	2101      	movs	r1, #1
 8005aec:	2031      	movs	r0, #49	; 0x31
 8005aee:	f7fc f8fb 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0004);
 8005af2:	2104      	movs	r1, #4
 8005af4:	2032      	movs	r0, #50	; 0x32
 8005af6:	f7fc f8f7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0102);
 8005afa:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005afe:	2033      	movs	r0, #51	; 0x33
 8005b00:	f7fc f8f2 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x0300);
 8005b04:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005b08:	2034      	movs	r0, #52	; 0x34
 8005b0a:	f7fc f8ed 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0103);
 8005b0e:	f240 1103 	movw	r1, #259	; 0x103
 8005b12:	2035      	movs	r0, #53	; 0x35
 8005b14:	f7fc f8e8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x001F);
 8005b18:	211f      	movs	r1, #31
 8005b1a:	2036      	movs	r0, #54	; 0x36
 8005b1c:	f7fc f8e4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0703);
 8005b20:	f240 7103 	movw	r1, #1795	; 0x703
 8005b24:	2037      	movs	r0, #55	; 0x37
 8005b26:	f7fc f8df 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0001);
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	2038      	movs	r0, #56	; 0x38
 8005b2e:	f7fc f8db 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0004);
 8005b32:	2104      	movs	r1, #4
 8005b34:	2039      	movs	r0, #57	; 0x39
 8005b36:	f7fc f8d7 	bl	8001ce8 <LCD_WriteReg>



		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8005b3a:	2115      	movs	r1, #21
 8005b3c:	2090      	movs	r0, #144	; 0x90
 8005b3e:	f7fc f8d3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8005b42:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005b46:	2010      	movs	r0, #16
 8005b48:	f7fc f8ce 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0247);	//DC1,DC0,VC
 8005b4c:	f240 2147 	movw	r1, #583	; 0x247
 8005b50:	2011      	movs	r0, #17
 8005b52:	f7fc f8c9 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8005b56:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005b5a:	2012      	movs	r0, #18
 8005b5c:	f7fc f8c4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8005b60:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8005b64:	2013      	movs	r0, #19
 8005b66:	f7fc f8bf 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(120);
 8005b6a:	2078      	movs	r0, #120	; 0x78
 8005b6c:	f001 fc56 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8005b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b74:	2001      	movs	r0, #1
 8005b76:	f7fc f8b7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005b7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b7e:	2002      	movs	r0, #2
 8005b80:	f7fc f8b2 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005b84:	f241 0130 	movw	r1, #4144	; 0x1030
 8005b88:	2003      	movs	r0, #3
 8005b8a:	f7fc f8ad 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8005b8e:	2108      	movs	r1, #8
 8005b90:	200a      	movs	r0, #10
 8005b92:	f7fc f8a9 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005b96:	2100      	movs	r1, #0
 8005b98:	200c      	movs	r0, #12
 8005b9a:	f7fc f8a5 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8005b9e:	2120      	movs	r1, #32
 8005ba0:	200e      	movs	r0, #14
 8005ba2:	f7fc f8a1 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	200f      	movs	r0, #15
 8005baa:	f7fc f89d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8005bae:	2100      	movs	r1, #0
 8005bb0:	2020      	movs	r0, #32
 8005bb2:	f7fc f899 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	2021      	movs	r0, #33	; 0x21
 8005bba:	f7fc f895 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x002A,0x003D);	//vcom2
 8005bbe:	213d      	movs	r1, #61	; 0x3d
 8005bc0:	202a      	movs	r0, #42	; 0x2a
 8005bc2:	f7fc f891 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(20);
 8005bc6:	2014      	movs	r0, #20
 8005bc8:	f001 fc28 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8005bcc:	212d      	movs	r1, #45	; 0x2d
 8005bce:	2029      	movs	r0, #41	; 0x29
 8005bd0:	f7fc f88a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	2050      	movs	r0, #80	; 0x50
 8005bd8:	f7fc f886 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8005bdc:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8005be0:	2051      	movs	r0, #81	; 0x51
 8005be2:	f7fc f881 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005be6:	2100      	movs	r1, #0
 8005be8:	2052      	movs	r0, #82	; 0x52
 8005bea:	f7fc f87d 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8005bee:	f240 113f 	movw	r1, #319	; 0x13f
 8005bf2:	2053      	movs	r0, #83	; 0x53
 8005bf4:	f7fc f878 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005bf8:	2100      	movs	r1, #0
 8005bfa:	2061      	movs	r0, #97	; 0x61
 8005bfc:	f7fc f874 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005c00:	2100      	movs	r1, #0
 8005c02:	206a      	movs	r0, #106	; 0x6a
 8005c04:	f7fc f870 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0300);
 8005c08:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005c0c:	2092      	movs	r0, #146	; 0x92
 8005c0e:	f7fc f86b 	bl	8001ce8 <LCD_WriteReg>

 		LCD_WriteReg(0x0093, 0x0005);
 8005c12:	2105      	movs	r1, #5
 8005c14:	2093      	movs	r0, #147	; 0x93
 8005c16:	f7fc f867 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8005c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c1e:	2007      	movs	r0, #7
 8005c20:	f7fc f862 	bl	8001ce8 <LCD_WriteReg>
 8005c24:	e23a      	b.n	800609c <LCD_Init+0x383c>
 8005c26:	bf00      	nop
 8005c28:	20000358 	.word	0x20000358
	}else if(lcddev.id==0x4531)//OK |/|/|
 8005c2c:	4bbb      	ldr	r3, [pc, #748]	; (8005f1c <LCD_Init+0x36bc>)
 8005c2e:	889b      	ldrh	r3, [r3, #4]
 8005c30:	f244 5231 	movw	r2, #17713	; 0x4531
 8005c34:	4293      	cmp	r3, r2
 8005c36:	f040 80ba 	bne.w	8005dae <LCD_Init+0x354e>
	{
		LCD_WriteReg(0X00,0X0001);
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	f7fc f853 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(10);
 8005c42:	200a      	movs	r0, #10
 8005c44:	f001 fbea 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0X10,0X1628);
 8005c48:	f241 6128 	movw	r1, #5672	; 0x1628
 8005c4c:	2010      	movs	r0, #16
 8005c4e:	f7fc f84b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X000e);//0x0006
 8005c52:	210e      	movs	r1, #14
 8005c54:	2012      	movs	r0, #18
 8005c56:	f7fc f847 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X0A39);
 8005c5a:	f640 2139 	movw	r1, #2617	; 0xa39
 8005c5e:	2013      	movs	r0, #19
 8005c60:	f7fc f842 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(10);
 8005c64:	200a      	movs	r0, #10
 8005c66:	f001 fbd9 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0X11,0X0040);
 8005c6a:	2140      	movs	r1, #64	; 0x40
 8005c6c:	2011      	movs	r0, #17
 8005c6e:	f7fc f83b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X15,0X0050);
 8005c72:	2150      	movs	r1, #80	; 0x50
 8005c74:	2015      	movs	r0, #21
 8005c76:	f7fc f837 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(10);
 8005c7a:	200a      	movs	r0, #10
 8005c7c:	f001 fbce 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0X12,0X001e);//16
 8005c80:	211e      	movs	r1, #30
 8005c82:	2012      	movs	r0, #18
 8005c84:	f7fc f830 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(10);
 8005c88:	200a      	movs	r0, #10
 8005c8a:	f001 fbc7 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0X10,0X1620);
 8005c8e:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005c92:	2010      	movs	r0, #16
 8005c94:	f7fc f828 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X2A39);
 8005c98:	f642 2139 	movw	r1, #10809	; 0x2a39
 8005c9c:	2013      	movs	r0, #19
 8005c9e:	f7fc f823 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(10);
 8005ca2:	200a      	movs	r0, #10
 8005ca4:	f001 fbba 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0X01,0X0100);
 8005ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005cac:	2001      	movs	r0, #1
 8005cae:	f7fc f81b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8005cb2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005cb6:	2002      	movs	r0, #2
 8005cb8:	f7fc f816 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1038);//改变方向的
 8005cbc:	f241 0138 	movw	r1, #4152	; 0x1038
 8005cc0:	2003      	movs	r0, #3
 8005cc2:	f7fc f811 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0202);
 8005cc6:	f240 2102 	movw	r1, #514	; 0x202
 8005cca:	2008      	movs	r0, #8
 8005ccc:	f7fc f80c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 8005cd0:	2108      	movs	r1, #8
 8005cd2:	200a      	movs	r0, #10
 8005cd4:	f7fc f808 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X30,0X0000);
 8005cd8:	2100      	movs	r1, #0
 8005cda:	2030      	movs	r0, #48	; 0x30
 8005cdc:	f7fc f804 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 8005ce0:	f240 4102 	movw	r1, #1026	; 0x402
 8005ce4:	2031      	movs	r0, #49	; 0x31
 8005ce6:	f7fb ffff 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0106);
 8005cea:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005cee:	2032      	movs	r0, #50	; 0x32
 8005cf0:	f7fb fffa 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0503);
 8005cf4:	f240 5103 	movw	r1, #1283	; 0x503
 8005cf8:	2033      	movs	r0, #51	; 0x33
 8005cfa:	f7fb fff5 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0104);
 8005cfe:	f44f 7182 	mov.w	r1, #260	; 0x104
 8005d02:	2034      	movs	r0, #52	; 0x34
 8005d04:	f7fb fff0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0301);
 8005d08:	f240 3101 	movw	r1, #769	; 0x301
 8005d0c:	2035      	movs	r0, #53	; 0x35
 8005d0e:	f7fb ffeb 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 8005d12:	f240 7107 	movw	r1, #1799	; 0x707
 8005d16:	2036      	movs	r0, #54	; 0x36
 8005d18:	f7fb ffe6 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 8005d1c:	f240 3105 	movw	r1, #773	; 0x305
 8005d20:	2037      	movs	r0, #55	; 0x37
 8005d22:	f7fb ffe1 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0208);
 8005d26:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005d2a:	2038      	movs	r0, #56	; 0x38
 8005d2c:	f7fb ffdc 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0F0B);
 8005d30:	f640 710b 	movw	r1, #3851	; 0xf0b
 8005d34:	2039      	movs	r0, #57	; 0x39
 8005d36:	f7fb ffd7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X41,0X0002);
 8005d3a:	2102      	movs	r1, #2
 8005d3c:	2041      	movs	r0, #65	; 0x41
 8005d3e:	f7fb ffd3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X60,0X2700);
 8005d42:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005d46:	2060      	movs	r0, #96	; 0x60
 8005d48:	f7fb ffce 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	2061      	movs	r0, #97	; 0x61
 8005d50:	f7fb ffca 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X0210);
 8005d54:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005d58:	2090      	movs	r0, #144	; 0x90
 8005d5a:	f7fb ffc5 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X010A);
 8005d5e:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005d62:	2092      	movs	r0, #146	; 0x92
 8005d64:	f7fb ffc0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0004);
 8005d68:	2104      	movs	r1, #4
 8005d6a:	2093      	movs	r0, #147	; 0x93
 8005d6c:	f7fb ffbc 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0100);
 8005d70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d74:	20a0      	movs	r0, #160	; 0xa0
 8005d76:	f7fb ffb7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	2007      	movs	r0, #7
 8005d7e:	f7fb ffb3 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 8005d82:	2121      	movs	r1, #33	; 0x21
 8005d84:	2007      	movs	r0, #7
 8005d86:	f7fb ffaf 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 8005d8a:	2123      	movs	r1, #35	; 0x23
 8005d8c:	2007      	movs	r0, #7
 8005d8e:	f7fb ffab 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 8005d92:	2133      	movs	r1, #51	; 0x33
 8005d94:	2007      	movs	r0, #7
 8005d96:	f7fb ffa7 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 8005d9a:	f240 1133 	movw	r1, #307	; 0x133
 8005d9e:	2007      	movs	r0, #7
 8005da0:	f7fb ffa2 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0000);
 8005da4:	2100      	movs	r1, #0
 8005da6:	20a0      	movs	r0, #160	; 0xa0
 8005da8:	f7fb ff9e 	bl	8001ce8 <LCD_WriteReg>
 8005dac:	e176      	b.n	800609c <LCD_Init+0x383c>
	}else if(lcddev.id==0x4535)
 8005dae:	4b5b      	ldr	r3, [pc, #364]	; (8005f1c <LCD_Init+0x36bc>)
 8005db0:	889b      	ldrh	r3, [r3, #4]
 8005db2:	f244 5235 	movw	r2, #17717	; 0x4535
 8005db6:	4293      	cmp	r3, r2
 8005db8:	f040 80b2 	bne.w	8005f20 <LCD_Init+0x36c0>
	{
		LCD_WriteReg(0X15,0X0030);
 8005dbc:	2130      	movs	r1, #48	; 0x30
 8005dbe:	2015      	movs	r0, #21
 8005dc0:	f7fb ff92 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X9A,0X0010);
 8005dc4:	2110      	movs	r1, #16
 8005dc6:	209a      	movs	r0, #154	; 0x9a
 8005dc8:	f7fb ff8e 	bl	8001ce8 <LCD_WriteReg>
 		LCD_WriteReg(0X11,0X0020);
 8005dcc:	2120      	movs	r1, #32
 8005dce:	2011      	movs	r0, #17
 8005dd0:	f7fb ff8a 	bl	8001ce8 <LCD_WriteReg>
 		LCD_WriteReg(0X10,0X3428);
 8005dd4:	f243 4128 	movw	r1, #13352	; 0x3428
 8005dd8:	2010      	movs	r0, #16
 8005dda:	f7fb ff85 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X0002);//16
 8005dde:	2102      	movs	r1, #2
 8005de0:	2012      	movs	r0, #18
 8005de2:	f7fb ff81 	bl	8001ce8 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X1038);
 8005de6:	f241 0138 	movw	r1, #4152	; 0x1038
 8005dea:	2013      	movs	r0, #19
 8005dec:	f7fb ff7c 	bl	8001ce8 <LCD_WriteReg>
 		HAL_Delay(40);
 8005df0:	2028      	movs	r0, #40	; 0x28
 8005df2:	f001 fb13 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0X12,0X0012);//16
 8005df6:	2112      	movs	r1, #18
 8005df8:	2012      	movs	r0, #18
 8005dfa:	f7fb ff75 	bl	8001ce8 <LCD_WriteReg>
		HAL_Delay(40);
 8005dfe:	2028      	movs	r0, #40	; 0x28
 8005e00:	f001 fb0c 	bl	800741c <HAL_Delay>
  		LCD_WriteReg(0X10,0X3420);
 8005e04:	f243 4120 	movw	r1, #13344	; 0x3420
 8005e08:	2010      	movs	r0, #16
 8005e0a:	f7fb ff6d 	bl	8001ce8 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X3038);
 8005e0e:	f243 0138 	movw	r1, #12344	; 0x3038
 8005e12:	2013      	movs	r0, #19
 8005e14:	f7fb ff68 	bl	8001ce8 <LCD_WriteReg>
 		HAL_Delay(70);
 8005e18:	2046      	movs	r0, #70	; 0x46
 8005e1a:	f001 faff 	bl	800741c <HAL_Delay>
		LCD_WriteReg(0X30,0X0000);
 8005e1e:	2100      	movs	r1, #0
 8005e20:	2030      	movs	r0, #48	; 0x30
 8005e22:	f7fb ff61 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 8005e26:	f240 4102 	movw	r1, #1026	; 0x402
 8005e2a:	2031      	movs	r0, #49	; 0x31
 8005e2c:	f7fb ff5c 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0307);
 8005e30:	f240 3107 	movw	r1, #775	; 0x307
 8005e34:	2032      	movs	r0, #50	; 0x32
 8005e36:	f7fb ff57 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0304);
 8005e3a:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005e3e:	2033      	movs	r0, #51	; 0x33
 8005e40:	f7fb ff52 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0004);
 8005e44:	2104      	movs	r1, #4
 8005e46:	2034      	movs	r0, #52	; 0x34
 8005e48:	f7fb ff4e 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0401);
 8005e4c:	f240 4101 	movw	r1, #1025	; 0x401
 8005e50:	2035      	movs	r0, #53	; 0x35
 8005e52:	f7fb ff49 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 8005e56:	f240 7107 	movw	r1, #1799	; 0x707
 8005e5a:	2036      	movs	r0, #54	; 0x36
 8005e5c:	f7fb ff44 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 8005e60:	f240 3105 	movw	r1, #773	; 0x305
 8005e64:	2037      	movs	r0, #55	; 0x37
 8005e66:	f7fb ff3f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0610);
 8005e6a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005e6e:	2038      	movs	r0, #56	; 0x38
 8005e70:	f7fb ff3a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0610);
 8005e74:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005e78:	2039      	movs	r0, #57	; 0x39
 8005e7a:	f7fb ff35 	bl	8001ce8 <LCD_WriteReg>

		LCD_WriteReg(0X01,0X0100);
 8005e7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e82:	2001      	movs	r0, #1
 8005e84:	f7fb ff30 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8005e88:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005e8c:	2002      	movs	r0, #2
 8005e8e:	f7fb ff2b 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1030);//改变方向的
 8005e92:	f241 0130 	movw	r1, #4144	; 0x1030
 8005e96:	2003      	movs	r0, #3
 8005e98:	f7fb ff26 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0808);
 8005e9c:	f640 0108 	movw	r1, #2056	; 0x808
 8005ea0:	2008      	movs	r0, #8
 8005ea2:	f7fb ff21 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 8005ea6:	2108      	movs	r1, #8
 8005ea8:	200a      	movs	r0, #10
 8005eaa:	f7fb ff1d 	bl	8001ce8 <LCD_WriteReg>
 		LCD_WriteReg(0X60,0X2700);
 8005eae:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005eb2:	2060      	movs	r0, #96	; 0x60
 8005eb4:	f7fb ff18 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8005eb8:	2101      	movs	r1, #1
 8005eba:	2061      	movs	r0, #97	; 0x61
 8005ebc:	f7fb ff14 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X013E);
 8005ec0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005ec4:	2090      	movs	r0, #144	; 0x90
 8005ec6:	f7fb ff0f 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X0100);
 8005eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ece:	2092      	movs	r0, #146	; 0x92
 8005ed0:	f7fb ff0a 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0100);
 8005ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ed8:	2093      	movs	r0, #147	; 0x93
 8005eda:	f7fb ff05 	bl	8001ce8 <LCD_WriteReg>
 		LCD_WriteReg(0XA0,0X3000);
 8005ede:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005ee2:	20a0      	movs	r0, #160	; 0xa0
 8005ee4:	f7fb ff00 	bl	8001ce8 <LCD_WriteReg>
 		LCD_WriteReg(0XA3,0X0010);
 8005ee8:	2110      	movs	r1, #16
 8005eea:	20a3      	movs	r0, #163	; 0xa3
 8005eec:	f7fb fefc 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	2007      	movs	r0, #7
 8005ef4:	f7fb fef8 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 8005ef8:	2121      	movs	r1, #33	; 0x21
 8005efa:	2007      	movs	r0, #7
 8005efc:	f7fb fef4 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 8005f00:	2123      	movs	r1, #35	; 0x23
 8005f02:	2007      	movs	r0, #7
 8005f04:	f7fb fef0 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 8005f08:	2133      	movs	r1, #51	; 0x33
 8005f0a:	2007      	movs	r0, #7
 8005f0c:	f7fb feec 	bl	8001ce8 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 8005f10:	f240 1133 	movw	r1, #307	; 0x133
 8005f14:	2007      	movs	r0, #7
 8005f16:	f7fb fee7 	bl	8001ce8 <LCD_WriteReg>
 8005f1a:	e0bf      	b.n	800609c <LCD_Init+0x383c>
 8005f1c:	20000358 	.word	0x20000358
	}else if(lcddev.id==0X1963)
 8005f20:	4b65      	ldr	r3, [pc, #404]	; (80060b8 <LCD_Init+0x3858>)
 8005f22:	889b      	ldrh	r3, [r3, #4]
 8005f24:	f641 1263 	movw	r2, #6499	; 0x1963
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	f040 80b7 	bne.w	800609c <LCD_Init+0x383c>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8005f2e:	20e2      	movs	r0, #226	; 0xe2
 8005f30:	f7fb feac 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 8005f34:	201d      	movs	r0, #29
 8005f36:	f7fb feb9 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005f3a:	2002      	movs	r0, #2
 8005f3c:	f7fb feb6 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 8005f40:	2004      	movs	r0, #4
 8005f42:	f7fb feb3 	bl	8001cac <LCD_WR_DATA>
		delay_us(100);
 8005f46:	2064      	movs	r0, #100	; 0x64
 8005f48:	f7fb fe82 	bl	8001c50 <delay_us>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005f4c:	20e0      	movs	r0, #224	; 0xe0
 8005f4e:	f7fb fe9d 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005f52:	2001      	movs	r0, #1
 8005f54:	f7fb feaa 	bl	8001cac <LCD_WR_DATA>
		HAL_Delay(10);
 8005f58:	200a      	movs	r0, #10
 8005f5a:	f001 fa5f 	bl	800741c <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8005f5e:	20e0      	movs	r0, #224	; 0xe0
 8005f60:	f7fb fe94 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8005f64:	2003      	movs	r0, #3
 8005f66:	f7fb fea1 	bl	8001cac <LCD_WR_DATA>
		HAL_Delay(12);
 8005f6a:	200c      	movs	r0, #12
 8005f6c:	f001 fa56 	bl	800741c <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005f70:	2001      	movs	r0, #1
 8005f72:	f7fb fe8b 	bl	8001c8c <LCD_WR_REG>
		HAL_Delay(10);
 8005f76:	200a      	movs	r0, #10
 8005f78:	f001 fa50 	bl	800741c <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005f7c:	20e6      	movs	r0, #230	; 0xe6
 8005f7e:	f7fb fe85 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005f82:	202f      	movs	r0, #47	; 0x2f
 8005f84:	f7fb fe92 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8005f88:	20ff      	movs	r0, #255	; 0xff
 8005f8a:	f7fb fe8f 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8005f8e:	20ff      	movs	r0, #255	; 0xff
 8005f90:	f7fb fe8c 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005f94:	20b0      	movs	r0, #176	; 0xb0
 8005f96:	f7fb fe79 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005f9a:	2020      	movs	r0, #32
 8005f9c:	f7fb fe86 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	f7fb fe83 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 8005fa6:	2001      	movs	r0, #1
 8005fa8:	f7fb fe80 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005fac:	f240 103f 	movw	r0, #319	; 0x13f
 8005fb0:	f7fb fe7c 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	f7fb fe79 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005fba:	20ef      	movs	r0, #239	; 0xef
 8005fbc:	f7fb fe76 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	f7fb fe73 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005fc6:	20b4      	movs	r0, #180	; 0xb4
 8005fc8:	f7fb fe60 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005fcc:	2002      	movs	r0, #2
 8005fce:	f7fb fe6d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 8005fd2:	f240 203f 	movw	r0, #575	; 0x23f
 8005fd6:	f7fb fe69 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 8005fda:	2000      	movs	r0, #0
 8005fdc:	f7fb fe66 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 8005fe0:	202e      	movs	r0, #46	; 0x2e
 8005fe2:	f7fb fe63 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	f7fb fe60 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005fec:	2000      	movs	r0, #0
 8005fee:	f7fb fe5d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	f7fb fe5a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005ff8:	2000      	movs	r0, #0
 8005ffa:	f7fb fe57 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 8005ffe:	20b6      	movs	r0, #182	; 0xb6
 8006000:	f7fb fe44 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8006004:	2001      	movs	r0, #1
 8006006:	f7fb fe51 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 800600a:	f44f 708e 	mov.w	r0, #284	; 0x11c
 800600e:	f7fb fe4d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 8006012:	2000      	movs	r0, #0
 8006014:	f7fb fe4a 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 8006018:	2017      	movs	r0, #23
 800601a:	f7fb fe47 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 800601e:	2015      	movs	r0, #21
 8006020:	f7fb fe44 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8006024:	2000      	movs	r0, #0
 8006026:	f7fb fe41 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800602a:	2000      	movs	r0, #0
 800602c:	f7fb fe3e 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 8006030:	20f0      	movs	r0, #240	; 0xf0
 8006032:	f7fb fe2b 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8006036:	2003      	movs	r0, #3
 8006038:	f7fb fe38 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 800603c:	2029      	movs	r0, #41	; 0x29
 800603e:	f7fb fe25 	bl	8001c8c <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8006042:	20d0      	movs	r0, #208	; 0xd0
 8006044:	f7fb fe22 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8006048:	2000      	movs	r0, #0
 800604a:	f7fb fe2f 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 800604e:	20be      	movs	r0, #190	; 0xbe
 8006050:	f7fb fe1c 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8006054:	2005      	movs	r0, #5
 8006056:	f7fb fe29 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 800605a:	20fe      	movs	r0, #254	; 0xfe
 800605c:	f7fb fe26 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 8006060:	2001      	movs	r0, #1
 8006062:	f7fb fe23 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 8006066:	2000      	movs	r0, #0
 8006068:	f7fb fe20 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 800606c:	2000      	movs	r0, #0
 800606e:	f7fb fe1d 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 8006072:	2000      	movs	r0, #0
 8006074:	f7fb fe1a 	bl	8001cac <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8006078:	20b8      	movs	r0, #184	; 0xb8
 800607a:	f7fb fe07 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 800607e:	2003      	movs	r0, #3
 8006080:	f7fb fe14 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 8006084:	2001      	movs	r0, #1
 8006086:	f7fb fe11 	bl	8001cac <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 800608a:	20ba      	movs	r0, #186	; 0xba
 800608c:	f7fb fdfe 	bl	8001c8c <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8006090:	2001      	movs	r0, #1
 8006092:	f7fb fe0b 	bl	8001cac <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 8006096:	2064      	movs	r0, #100	; 0x64
 8006098:	f7fc faa2 	bl	80025e0 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		//默认为竖屏
 800609c:	2000      	movs	r0, #0
 800609e:	f7fc fad3 	bl	8002648 <LCD_Display_Dir>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);				//点亮背光
 80060a2:	2201      	movs	r2, #1
 80060a4:	2101      	movs	r1, #1
 80060a6:	4805      	ldr	r0, [pc, #20]	; (80060bc <LCD_Init+0x385c>)
 80060a8:	f002 fd60 	bl	8008b6c <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);
 80060ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80060b0:	f000 f806 	bl	80060c0 <LCD_Clear>
}
 80060b4:	bf00      	nop
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000358 	.word	0x20000358
 80060bc:	40010c00 	.word	0x40010c00

080060c0 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint16_t color)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4603      	mov	r3, r0
 80060c8:	80fb      	strh	r3, [r7, #6]
	uint32_t index=0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 80060ce:	4b21      	ldr	r3, [pc, #132]	; (8006154 <LCD_Clear+0x94>)
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 80060d4:	4b1f      	ldr	r3, [pc, #124]	; (8006154 <LCD_Clear+0x94>)
 80060d6:	885b      	ldrh	r3, [r3, #2]
 80060d8:	461a      	mov	r2, r3
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	fb02 f303 	mul.w	r3, r2, r3
 80060e0:	60bb      	str	r3, [r7, #8]
	if((lcddev.id==0X6804)&&(lcddev.dir==1))//6804横屏的时候特殊处理
 80060e2:	4b1c      	ldr	r3, [pc, #112]	; (8006154 <LCD_Clear+0x94>)
 80060e4:	889b      	ldrh	r3, [r3, #4]
 80060e6:	f646 0204 	movw	r2, #26628	; 0x6804
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d11a      	bne.n	8006124 <LCD_Clear+0x64>
 80060ee:	4b19      	ldr	r3, [pc, #100]	; (8006154 <LCD_Clear+0x94>)
 80060f0:	799b      	ldrb	r3, [r3, #6]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d116      	bne.n	8006124 <LCD_Clear+0x64>
	{
 		lcddev.dir=0;
 80060f6:	4b17      	ldr	r3, [pc, #92]	; (8006154 <LCD_Clear+0x94>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 80060fc:	4b15      	ldr	r3, [pc, #84]	; (8006154 <LCD_Clear+0x94>)
 80060fe:	222a      	movs	r2, #42	; 0x2a
 8006100:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 8006102:	4b14      	ldr	r3, [pc, #80]	; (8006154 <LCD_Clear+0x94>)
 8006104:	222b      	movs	r2, #43	; 0x2b
 8006106:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00,0x0000);		//设置光标位置
 8006108:	2100      	movs	r1, #0
 800610a:	2000      	movs	r0, #0
 800610c:	f7fb fe24 	bl	8001d58 <LCD_SetCursor>
 		lcddev.dir=1;
 8006110:	4b10      	ldr	r3, [pc, #64]	; (8006154 <LCD_Clear+0x94>)
 8006112:	2201      	movs	r2, #1
 8006114:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 8006116:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <LCD_Clear+0x94>)
 8006118:	222b      	movs	r2, #43	; 0x2b
 800611a:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 800611c:	4b0d      	ldr	r3, [pc, #52]	; (8006154 <LCD_Clear+0x94>)
 800611e:	222a      	movs	r2, #42	; 0x2a
 8006120:	819a      	strh	r2, [r3, #12]
 8006122:	e003      	b.n	800612c <LCD_Clear+0x6c>
 	}else LCD_SetCursor(0x00,0x0000);	//设置光标位置
 8006124:	2100      	movs	r1, #0
 8006126:	2000      	movs	r0, #0
 8006128:	f7fb fe16 	bl	8001d58 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 800612c:	f7fb fe06 	bl	8001d3c <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 8006130:	2300      	movs	r3, #0
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	e005      	b.n	8006142 <LCD_Clear+0x82>
	{
		LCD->LCD_RAM=color;
 8006136:	4a08      	ldr	r2, [pc, #32]	; (8006158 <LCD_Clear+0x98>)
 8006138:	88fb      	ldrh	r3, [r7, #6]
 800613a:	8053      	strh	r3, [r2, #2]
	for(index=0;index<totalpoint;index++)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3301      	adds	r3, #1
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	429a      	cmp	r2, r3
 8006148:	d3f5      	bcc.n	8006136 <LCD_Clear+0x76>
	}
}
 800614a:	bf00      	nop
 800614c:	bf00      	nop
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	20000358 	.word	0x20000358
 8006158:	6c0007fe 	.word	0x6c0007fe

0800615c <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 800615c:	b590      	push	{r4, r7, lr}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	4604      	mov	r4, r0
 8006164:	4608      	mov	r0, r1
 8006166:	4611      	mov	r1, r2
 8006168:	461a      	mov	r2, r3
 800616a:	4623      	mov	r3, r4
 800616c:	80fb      	strh	r3, [r7, #6]
 800616e:	4603      	mov	r3, r0
 8006170:	80bb      	strh	r3, [r7, #4]
 8006172:	460b      	mov	r3, r1
 8006174:	70fb      	strb	r3, [r7, #3]
 8006176:	4613      	mov	r3, r2
 8006178:	70bb      	strb	r3, [r7, #2]
	uint8_t temp,t1,t;
	uint16_t y0=y;
 800617a:	88bb      	ldrh	r3, [r7, #4]
 800617c:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 800617e:	78bb      	ldrb	r3, [r7, #2]
 8006180:	08db      	lsrs	r3, r3, #3
 8006182:	b2db      	uxtb	r3, r3
 8006184:	461a      	mov	r2, r3
 8006186:	78bb      	ldrb	r3, [r7, #2]
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	bf14      	ite	ne
 8006192:	2301      	movne	r3, #1
 8006194:	2300      	moveq	r3, #0
 8006196:	b2db      	uxtb	r3, r3
 8006198:	4413      	add	r3, r2
 800619a:	b2db      	uxtb	r3, r3
 800619c:	78ba      	ldrb	r2, [r7, #2]
 800619e:	0852      	lsrs	r2, r2, #1
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	fb02 f303 	mul.w	r3, r2, r3
 80061a6:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	3b20      	subs	r3, #32
 80061ac:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 80061ae:	2300      	movs	r3, #0
 80061b0:	737b      	strb	r3, [r7, #13]
 80061b2:	e069      	b.n	8006288 <LCD_ShowChar+0x12c>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 80061b4:	78bb      	ldrb	r3, [r7, #2]
 80061b6:	2b0c      	cmp	r3, #12
 80061b8:	d10b      	bne.n	80061d2 <LCD_ShowChar+0x76>
 80061ba:	78fa      	ldrb	r2, [r7, #3]
 80061bc:	7b79      	ldrb	r1, [r7, #13]
 80061be:	4838      	ldr	r0, [pc, #224]	; (80062a0 <LCD_ShowChar+0x144>)
 80061c0:	4613      	mov	r3, r2
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4403      	add	r3, r0
 80061ca:	440b      	add	r3, r1
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	73fb      	strb	r3, [r7, #15]
 80061d0:	e019      	b.n	8006206 <LCD_ShowChar+0xaa>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 80061d2:	78bb      	ldrb	r3, [r7, #2]
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d108      	bne.n	80061ea <LCD_ShowChar+0x8e>
 80061d8:	78fa      	ldrb	r2, [r7, #3]
 80061da:	7b7b      	ldrb	r3, [r7, #13]
 80061dc:	4931      	ldr	r1, [pc, #196]	; (80062a4 <LCD_ShowChar+0x148>)
 80061de:	0112      	lsls	r2, r2, #4
 80061e0:	440a      	add	r2, r1
 80061e2:	4413      	add	r3, r2
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	73fb      	strb	r3, [r7, #15]
 80061e8:	e00d      	b.n	8006206 <LCD_ShowChar+0xaa>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 80061ea:	78bb      	ldrb	r3, [r7, #2]
 80061ec:	2b18      	cmp	r3, #24
 80061ee:	d150      	bne.n	8006292 <LCD_ShowChar+0x136>
 80061f0:	78fa      	ldrb	r2, [r7, #3]
 80061f2:	7b79      	ldrb	r1, [r7, #13]
 80061f4:	482c      	ldr	r0, [pc, #176]	; (80062a8 <LCD_ShowChar+0x14c>)
 80061f6:	4613      	mov	r3, r2
 80061f8:	00db      	lsls	r3, r3, #3
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4403      	add	r3, r0
 8006200:	440b      	add	r3, r1
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 8006206:	2300      	movs	r3, #0
 8006208:	73bb      	strb	r3, [r7, #14]
 800620a:	e035      	b.n	8006278 <LCD_ShowChar+0x11c>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 800620c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006210:	2b00      	cmp	r3, #0
 8006212:	da07      	bge.n	8006224 <LCD_ShowChar+0xc8>
 8006214:	4b25      	ldr	r3, [pc, #148]	; (80062ac <LCD_ShowChar+0x150>)
 8006216:	881a      	ldrh	r2, [r3, #0]
 8006218:	88b9      	ldrh	r1, [r7, #4]
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	4618      	mov	r0, r3
 800621e:	f7fc f8c5 	bl	80023ac <LCD_Fast_DrawPoint>
 8006222:	e00a      	b.n	800623a <LCD_ShowChar+0xde>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8006224:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d106      	bne.n	800623a <LCD_ShowChar+0xde>
 800622c:	4b20      	ldr	r3, [pc, #128]	; (80062b0 <LCD_ShowChar+0x154>)
 800622e:	881a      	ldrh	r2, [r3, #0]
 8006230:	88b9      	ldrh	r1, [r7, #4]
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	4618      	mov	r0, r3
 8006236:	f7fc f8b9 	bl	80023ac <LCD_Fast_DrawPoint>
			temp<<=1;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
			y++;
 8006240:	88bb      	ldrh	r3, [r7, #4]
 8006242:	3301      	adds	r3, #1
 8006244:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 8006246:	4b1b      	ldr	r3, [pc, #108]	; (80062b4 <LCD_ShowChar+0x158>)
 8006248:	885b      	ldrh	r3, [r3, #2]
 800624a:	88ba      	ldrh	r2, [r7, #4]
 800624c:	429a      	cmp	r2, r3
 800624e:	d222      	bcs.n	8006296 <LCD_ShowChar+0x13a>
			if((y-y0)==size)
 8006250:	88ba      	ldrh	r2, [r7, #4]
 8006252:	897b      	ldrh	r3, [r7, #10]
 8006254:	1ad2      	subs	r2, r2, r3
 8006256:	78bb      	ldrb	r3, [r7, #2]
 8006258:	429a      	cmp	r2, r3
 800625a:	d10a      	bne.n	8006272 <LCD_ShowChar+0x116>
			{
				y=y0;
 800625c:	897b      	ldrh	r3, [r7, #10]
 800625e:	80bb      	strh	r3, [r7, #4]
				x++;
 8006260:	88fb      	ldrh	r3, [r7, #6]
 8006262:	3301      	adds	r3, #1
 8006264:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 8006266:	4b13      	ldr	r3, [pc, #76]	; (80062b4 <LCD_ShowChar+0x158>)
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	88fa      	ldrh	r2, [r7, #6]
 800626c:	429a      	cmp	r2, r3
 800626e:	d307      	bcc.n	8006280 <LCD_ShowChar+0x124>
 8006270:	e012      	b.n	8006298 <LCD_ShowChar+0x13c>
		for(t1=0;t1<8;t1++)
 8006272:	7bbb      	ldrb	r3, [r7, #14]
 8006274:	3301      	adds	r3, #1
 8006276:	73bb      	strb	r3, [r7, #14]
 8006278:	7bbb      	ldrb	r3, [r7, #14]
 800627a:	2b07      	cmp	r3, #7
 800627c:	d9c6      	bls.n	800620c <LCD_ShowChar+0xb0>
 800627e:	e000      	b.n	8006282 <LCD_ShowChar+0x126>
				break;
 8006280:	bf00      	nop
	for(t=0;t<csize;t++)
 8006282:	7b7b      	ldrb	r3, [r7, #13]
 8006284:	3301      	adds	r3, #1
 8006286:	737b      	strb	r3, [r7, #13]
 8006288:	7b7a      	ldrb	r2, [r7, #13]
 800628a:	7a7b      	ldrb	r3, [r7, #9]
 800628c:	429a      	cmp	r2, r3
 800628e:	d391      	bcc.n	80061b4 <LCD_ShowChar+0x58>
 8006290:	e002      	b.n	8006298 <LCD_ShowChar+0x13c>
		else return;								//没有的字库
 8006292:	bf00      	nop
 8006294:	e000      	b.n	8006298 <LCD_ShowChar+0x13c>
			if(y>=lcddev.height)return;		//超区域了
 8006296:	bf00      	nop
			}
		}
	}
}
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	bd90      	pop	{r4, r7, pc}
 800629e:	bf00      	nop
 80062a0:	0800e3cc 	.word	0x0800e3cc
 80062a4:	0800e840 	.word	0x0800e840
 80062a8:	0800ee30 	.word	0x0800ee30
 80062ac:	2000024c 	.word	0x2000024c
 80062b0:	20000000 	.word	0x20000000
 80062b4:	20000358 	.word	0x20000358

080062b8 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 80062b8:	b590      	push	{r4, r7, lr}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af02      	add	r7, sp, #8
 80062be:	4604      	mov	r4, r0
 80062c0:	4608      	mov	r0, r1
 80062c2:	4611      	mov	r1, r2
 80062c4:	461a      	mov	r2, r3
 80062c6:	4623      	mov	r3, r4
 80062c8:	80fb      	strh	r3, [r7, #6]
 80062ca:	4603      	mov	r3, r0
 80062cc:	80bb      	strh	r3, [r7, #4]
 80062ce:	460b      	mov	r3, r1
 80062d0:	807b      	strh	r3, [r7, #2]
 80062d2:	4613      	mov	r3, r2
 80062d4:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 80062d6:	88fb      	ldrh	r3, [r7, #6]
 80062d8:	73fb      	strb	r3, [r7, #15]
	width+=x;
 80062da:	887a      	ldrh	r2, [r7, #2]
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	4413      	add	r3, r2
 80062e0:	807b      	strh	r3, [r7, #2]
	height+=y;
 80062e2:	883a      	ldrh	r2, [r7, #0]
 80062e4:	88bb      	ldrh	r3, [r7, #4]
 80062e6:	4413      	add	r3, r2
 80062e8:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 80062ea:	e024      	b.n	8006336 <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 80062ec:	88fa      	ldrh	r2, [r7, #6]
 80062ee:	887b      	ldrh	r3, [r7, #2]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d307      	bcc.n	8006304 <LCD_ShowString+0x4c>
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
 80062f6:	80fb      	strh	r3, [r7, #6]
 80062f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80062fc:	b29a      	uxth	r2, r3
 80062fe:	88bb      	ldrh	r3, [r7, #4]
 8006300:	4413      	add	r3, r2
 8006302:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 8006304:	88ba      	ldrh	r2, [r7, #4]
 8006306:	883b      	ldrh	r3, [r7, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d21d      	bcs.n	8006348 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	781a      	ldrb	r2, [r3, #0]
 8006310:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006314:	88b9      	ldrh	r1, [r7, #4]
 8006316:	88f8      	ldrh	r0, [r7, #6]
 8006318:	2400      	movs	r4, #0
 800631a:	9400      	str	r4, [sp, #0]
 800631c:	f7ff ff1e 	bl	800615c <LCD_ShowChar>
        x+=size/2;
 8006320:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006324:	085b      	lsrs	r3, r3, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	b29a      	uxth	r2, r3
 800632a:	88fb      	ldrh	r3, [r7, #6]
 800632c:	4413      	add	r3, r2
 800632e:	80fb      	strh	r3, [r7, #6]
        p++;
 8006330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006332:	3301      	adds	r3, #1
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b7e      	cmp	r3, #126	; 0x7e
 800633c:	d805      	bhi.n	800634a <LCD_ShowString+0x92>
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b1f      	cmp	r3, #31
 8006344:	d8d2      	bhi.n	80062ec <LCD_ShowString+0x34>
    }
}
 8006346:	e000      	b.n	800634a <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8006348:	bf00      	nop
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	bd90      	pop	{r4, r7, pc}
 8006352:	0000      	movs	r0, r0
 8006354:	0000      	movs	r0, r0
	...

08006358 <HAL_ADC_ConvCpltCallback>:
PID *pid_res;

uint8_t Rx_Date; //接受串口输入

//DMA回调函数
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8006358:	b5b0      	push	{r4, r5, r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af02      	add	r7, sp, #8
 800635e:	6078      	str	r0, [r7, #4]
	if (hadc1.Instance == ADC1) {  //判断是否为ADC1的模拟输入
 8006360:	4ba5      	ldr	r3, [pc, #660]	; (80065f8 <HAL_ADC_ConvCpltCallback+0x2a0>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4aa5      	ldr	r2, [pc, #660]	; (80065fc <HAL_ADC_ConvCpltCallback+0x2a4>)
 8006366:	4293      	cmp	r3, r2
 8006368:	f040 8214 	bne.w	8006794 <HAL_ADC_ConvCpltCallback+0x43c>
		//软件低通滤波(但是效果并不理想)
		for (i = 0; i < 19; i++) {
 800636c:	4ba4      	ldr	r3, [pc, #656]	; (8006600 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800636e:	2200      	movs	r2, #0
 8006370:	701a      	strb	r2, [r3, #0]
 8006372:	e02b      	b.n	80063cc <HAL_ADC_ConvCpltCallback+0x74>
			temp_vol = adc_buffer[i];
 8006374:	4ba2      	ldr	r3, [pc, #648]	; (8006600 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	461a      	mov	r2, r3
 800637a:	4ba2      	ldr	r3, [pc, #648]	; (8006604 <HAL_ADC_ConvCpltCallback+0x2ac>)
 800637c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006380:	4ba1      	ldr	r3, [pc, #644]	; (8006608 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8006382:	801a      	strh	r2, [r3, #0]
			if (temp_vol > adc_buffer[i + 1]) {
 8006384:	4b9e      	ldr	r3, [pc, #632]	; (8006600 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8006386:	781b      	ldrb	r3, [r3, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	4a9e      	ldr	r2, [pc, #632]	; (8006604 <HAL_ADC_ConvCpltCallback+0x2ac>)
 800638c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006390:	4b9d      	ldr	r3, [pc, #628]	; (8006608 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	429a      	cmp	r2, r3
 8006396:	d213      	bcs.n	80063c0 <HAL_ADC_ConvCpltCallback+0x68>
				adc_buffer[i] = adc_buffer[i + 1];
 8006398:	4b99      	ldr	r3, [pc, #612]	; (8006600 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	3301      	adds	r3, #1
 800639e:	4a98      	ldr	r2, [pc, #608]	; (8006600 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80063a0:	7812      	ldrb	r2, [r2, #0]
 80063a2:	4611      	mov	r1, r2
 80063a4:	4a97      	ldr	r2, [pc, #604]	; (8006604 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80063a6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80063aa:	4b96      	ldr	r3, [pc, #600]	; (8006604 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80063ac:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
				adc_buffer[i + 1] = temp_vol;
 80063b0:	4b93      	ldr	r3, [pc, #588]	; (8006600 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	3301      	adds	r3, #1
 80063b6:	4a94      	ldr	r2, [pc, #592]	; (8006608 <HAL_ADC_ConvCpltCallback+0x2b0>)
 80063b8:	8811      	ldrh	r1, [r2, #0]
 80063ba:	4a92      	ldr	r2, [pc, #584]	; (8006604 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80063bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (i = 0; i < 19; i++) {
 80063c0:	4b8f      	ldr	r3, [pc, #572]	; (8006600 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	3301      	adds	r3, #1
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	4b8d      	ldr	r3, [pc, #564]	; (8006600 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	4b8c      	ldr	r3, [pc, #560]	; (8006600 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b12      	cmp	r3, #18
 80063d2:	d9cf      	bls.n	8006374 <HAL_ADC_ConvCpltCallback+0x1c>
			}
		}
		voltage = 0;
 80063d4:	4b8d      	ldr	r3, [pc, #564]	; (800660c <HAL_ADC_ConvCpltCallback+0x2b4>)
 80063d6:	f04f 0200 	mov.w	r2, #0
 80063da:	601a      	str	r2, [r3, #0]
		for (i = 8; i < 14; i++) {
 80063dc:	4b88      	ldr	r3, [pc, #544]	; (8006600 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80063de:	2208      	movs	r2, #8
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e036      	b.n	8006452 <HAL_ADC_ConvCpltCallback+0xfa>
			voltage += ((float) adc_buffer[i]) * 3.3 / 4096;
 80063e4:	4b89      	ldr	r3, [pc, #548]	; (800660c <HAL_ADC_ConvCpltCallback+0x2b4>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fa f889 	bl	8000500 <__aeabi_f2d>
 80063ee:	4604      	mov	r4, r0
 80063f0:	460d      	mov	r5, r1
 80063f2:	4b83      	ldr	r3, [pc, #524]	; (8006600 <HAL_ADC_ConvCpltCallback+0x2a8>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	4b82      	ldr	r3, [pc, #520]	; (8006604 <HAL_ADC_ConvCpltCallback+0x2ac>)
 80063fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fa fcd4 	bl	8000dac <__aeabi_ui2f>
 8006404:	4603      	mov	r3, r0
 8006406:	4618      	mov	r0, r3
 8006408:	f7fa f87a 	bl	8000500 <__aeabi_f2d>
 800640c:	a374      	add	r3, pc, #464	; (adr r3, 80065e0 <HAL_ADC_ConvCpltCallback+0x288>)
 800640e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006412:	f7fa f8cd 	bl	80005b0 <__aeabi_dmul>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4610      	mov	r0, r2
 800641c:	4619      	mov	r1, r3
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	4b7b      	ldr	r3, [pc, #492]	; (8006610 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8006424:	f7fa f9ee 	bl	8000804 <__aeabi_ddiv>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4620      	mov	r0, r4
 800642e:	4629      	mov	r1, r5
 8006430:	f7f9 ff08 	bl	8000244 <__adddf3>
 8006434:	4602      	mov	r2, r0
 8006436:	460b      	mov	r3, r1
 8006438:	4610      	mov	r0, r2
 800643a:	4619      	mov	r1, r3
 800643c:	f7fa fbb0 	bl	8000ba0 <__aeabi_d2f>
 8006440:	4603      	mov	r3, r0
 8006442:	4a72      	ldr	r2, [pc, #456]	; (800660c <HAL_ADC_ConvCpltCallback+0x2b4>)
 8006444:	6013      	str	r3, [r2, #0]
		for (i = 8; i < 14; i++) {
 8006446:	4b6e      	ldr	r3, [pc, #440]	; (8006600 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	3301      	adds	r3, #1
 800644c:	b2da      	uxtb	r2, r3
 800644e:	4b6c      	ldr	r3, [pc, #432]	; (8006600 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8006450:	701a      	strb	r2, [r3, #0]
 8006452:	4b6b      	ldr	r3, [pc, #428]	; (8006600 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b0d      	cmp	r3, #13
 8006458:	d9c4      	bls.n	80063e4 <HAL_ADC_ConvCpltCallback+0x8c>
		}
		voltage /= 6;
 800645a:	4b6c      	ldr	r3, [pc, #432]	; (800660c <HAL_ADC_ConvCpltCallback+0x2b4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	496d      	ldr	r1, [pc, #436]	; (8006614 <HAL_ADC_ConvCpltCallback+0x2bc>)
 8006460:	4618      	mov	r0, r3
 8006462:	f7fa fdaf 	bl	8000fc4 <__aeabi_fdiv>
 8006466:	4603      	mov	r3, r0
 8006468:	461a      	mov	r2, r3
 800646a:	4b68      	ldr	r3, [pc, #416]	; (800660c <HAL_ADC_ConvCpltCallback+0x2b4>)
 800646c:	601a      	str	r2, [r3, #0]

		//根据电压——温度转化函数得到对应温度值
		temperature = conversion1(voltage);
 800646e:	4b67      	ldr	r3, [pc, #412]	; (800660c <HAL_ADC_ConvCpltCallback+0x2b4>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f7fb f878 	bl	8001568 <conversion1>
 8006478:	4603      	mov	r3, r0
 800647a:	4a67      	ldr	r2, [pc, #412]	; (8006618 <HAL_ADC_ConvCpltCallback+0x2c0>)
 800647c:	6013      	str	r3, [r2, #0]
		//通过PID调节水泥电阻占空比
		if (mode == 1) {
 800647e:	4b67      	ldr	r3, [pc, #412]	; (800661c <HAL_ADC_ConvCpltCallback+0x2c4>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b01      	cmp	r3, #1
 8006484:	f040 80dc 	bne.w	8006640 <HAL_ADC_ConvCpltCallback+0x2e8>
			if (LastTemp != 0
 8006488:	4b65      	ldr	r3, [pc, #404]	; (8006620 <HAL_ADC_ConvCpltCallback+0x2c8>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f04f 0100 	mov.w	r1, #0
 8006490:	4618      	mov	r0, r3
 8006492:	f7fa fe77 	bl	8001184 <__aeabi_fcmpeq>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d12c      	bne.n	80064f6 <HAL_ADC_ConvCpltCallback+0x19e>
					&& (temperature - LastTemp >= 1
 800649c:	4b5e      	ldr	r3, [pc, #376]	; (8006618 <HAL_ADC_ConvCpltCallback+0x2c0>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a5f      	ldr	r2, [pc, #380]	; (8006620 <HAL_ADC_ConvCpltCallback+0x2c8>)
 80064a2:	6812      	ldr	r2, [r2, #0]
 80064a4:	4611      	mov	r1, r2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fa fbce 	bl	8000c48 <__aeabi_fsub>
 80064ac:	4603      	mov	r3, r0
 80064ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fa fe84 	bl	80011c0 <__aeabi_fcmpge>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d110      	bne.n	80064e0 <HAL_ADC_ConvCpltCallback+0x188>
							|| LastTemp - temperature >= 1)) {
 80064be:	4b58      	ldr	r3, [pc, #352]	; (8006620 <HAL_ADC_ConvCpltCallback+0x2c8>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a55      	ldr	r2, [pc, #340]	; (8006618 <HAL_ADC_ConvCpltCallback+0x2c0>)
 80064c4:	6812      	ldr	r2, [r2, #0]
 80064c6:	4611      	mov	r1, r2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fa fbbd 	bl	8000c48 <__aeabi_fsub>
 80064ce:	4603      	mov	r3, r0
 80064d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fa fe73 	bl	80011c0 <__aeabi_fcmpge>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00a      	beq.n	80064f6 <HAL_ADC_ConvCpltCallback+0x19e>
				if (isUp == 0) {
 80064e0:	4b50      	ldr	r3, [pc, #320]	; (8006624 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d103      	bne.n	80064f0 <HAL_ADC_ConvCpltCallback+0x198>
					isUp = 1;
 80064e8:	4b4e      	ldr	r3, [pc, #312]	; (8006624 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	e002      	b.n	80064f6 <HAL_ADC_ConvCpltCallback+0x19e>
				} else {
					isUp = 0;
 80064f0:	4b4c      	ldr	r3, [pc, #304]	; (8006624 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]
				}
			}
			if (isUp == 1) {
 80064f6:	4b4b      	ldr	r3, [pc, #300]	; (8006624 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d108      	bne.n	8006510 <HAL_ADC_ConvCpltCallback+0x1b8>
				temperature = conversion1(voltage);
 80064fe:	4b43      	ldr	r3, [pc, #268]	; (800660c <HAL_ADC_ConvCpltCallback+0x2b4>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f7fb f830 	bl	8001568 <conversion1>
 8006508:	4603      	mov	r3, r0
 800650a:	4a43      	ldr	r2, [pc, #268]	; (8006618 <HAL_ADC_ConvCpltCallback+0x2c0>)
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	e00b      	b.n	8006528 <HAL_ADC_ConvCpltCallback+0x1d0>
				//printf("采用上升温度。。。。\r\n");
			} else if (isUp == 0) {
 8006510:	4b44      	ldr	r3, [pc, #272]	; (8006624 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d107      	bne.n	8006528 <HAL_ADC_ConvCpltCallback+0x1d0>
				temperature = conversion2(voltage);
 8006518:	4b3c      	ldr	r3, [pc, #240]	; (800660c <HAL_ADC_ConvCpltCallback+0x2b4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4618      	mov	r0, r3
 800651e:	f7fb f8f3 	bl	8001708 <conversion2>
 8006522:	4603      	mov	r3, r0
 8006524:	4a3c      	ldr	r2, [pc, #240]	; (8006618 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8006526:	6013      	str	r3, [r2, #0]
				//printf("采用下降温度。。。。\r\n");
			}

			if (temperature <= pid_res->SetTemp - 10) {
 8006528:	4b3f      	ldr	r3, [pc, #252]	; (8006628 <HAL_ADC_ConvCpltCallback+0x2d0>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	493f      	ldr	r1, [pc, #252]	; (800662c <HAL_ADC_ConvCpltCallback+0x2d4>)
 8006530:	4618      	mov	r0, r3
 8006532:	f7fa fb89 	bl	8000c48 <__aeabi_fsub>
 8006536:	4603      	mov	r3, r0
 8006538:	461a      	mov	r2, r3
 800653a:	4b37      	ldr	r3, [pc, #220]	; (8006618 <HAL_ADC_ConvCpltCallback+0x2c0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4619      	mov	r1, r3
 8006540:	4610      	mov	r0, r2
 8006542:	f7fa fe3d 	bl	80011c0 <__aeabi_fcmpge>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00c      	beq.n	8006566 <HAL_ADC_ConvCpltCallback+0x20e>
				pwmVal_res = 700;
 800654c:	4b38      	ldr	r3, [pc, #224]	; (8006630 <HAL_ADC_ConvCpltCallback+0x2d8>)
 800654e:	4a39      	ldr	r2, [pc, #228]	; (8006634 <HAL_ADC_ConvCpltCallback+0x2dc>)
 8006550:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwmVal_res);
 8006552:	4b37      	ldr	r3, [pc, #220]	; (8006630 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a38      	ldr	r2, [pc, #224]	; (8006638 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8006558:	6814      	ldr	r4, [r2, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f7fa fe44 	bl	80011e8 <__aeabi_f2uiz>
 8006560:	4603      	mov	r3, r0
 8006562:	63a3      	str	r3, [r4, #56]	; 0x38
 8006564:	e013      	b.n	800658e <HAL_ADC_ConvCpltCallback+0x236>
			} else {
				pwmVal_res = PID_Calc(pid_res, temperature);
 8006566:	4b30      	ldr	r3, [pc, #192]	; (8006628 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a2b      	ldr	r2, [pc, #172]	; (8006618 <HAL_ADC_ConvCpltCallback+0x2c0>)
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	4611      	mov	r1, r2
 8006570:	4618      	mov	r0, r3
 8006572:	f7fa ff1f 	bl	80013b4 <PID_Calc>
 8006576:	4603      	mov	r3, r0
 8006578:	4a2d      	ldr	r2, [pc, #180]	; (8006630 <HAL_ADC_ConvCpltCallback+0x2d8>)
 800657a:	6013      	str	r3, [r2, #0]
				__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwmVal_res);
 800657c:	4b2c      	ldr	r3, [pc, #176]	; (8006630 <HAL_ADC_ConvCpltCallback+0x2d8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a2d      	ldr	r2, [pc, #180]	; (8006638 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8006582:	6814      	ldr	r4, [r2, #0]
 8006584:	4618      	mov	r0, r3
 8006586:	f7fa fe2f 	bl	80011e8 <__aeabi_f2uiz>
 800658a:	4603      	mov	r3, r0
 800658c:	63a3      	str	r3, [r4, #56]	; 0x38
//				printf("\r\n水泥电阻电压PWM的当前占空比为%.2f\r\n", pwmVal_res / 1000);
			}

			pwmVal_fan = voltage * 272.7 - 263.56; //电压为1.7V是占空比为0.20;电压为2.8V时占空比为0.50
 800658e:	4b1f      	ldr	r3, [pc, #124]	; (800660c <HAL_ADC_ConvCpltCallback+0x2b4>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f7f9 ffb4 	bl	8000500 <__aeabi_f2d>
 8006598:	a313      	add	r3, pc, #76	; (adr r3, 80065e8 <HAL_ADC_ConvCpltCallback+0x290>)
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f7fa f807 	bl	80005b0 <__aeabi_dmul>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	4610      	mov	r0, r2
 80065a8:	4619      	mov	r1, r3
 80065aa:	a311      	add	r3, pc, #68	; (adr r3, 80065f0 <HAL_ADC_ConvCpltCallback+0x298>)
 80065ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b0:	f7f9 fe46 	bl	8000240 <__aeabi_dsub>
 80065b4:	4602      	mov	r2, r0
 80065b6:	460b      	mov	r3, r1
 80065b8:	4610      	mov	r0, r2
 80065ba:	4619      	mov	r1, r3
 80065bc:	f7fa faf0 	bl	8000ba0 <__aeabi_d2f>
 80065c0:	4603      	mov	r3, r0
 80065c2:	4a1e      	ldr	r2, [pc, #120]	; (800663c <HAL_ADC_ConvCpltCallback+0x2e4>)
 80065c4:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, pwmVal_fan);
 80065c6:	4b1d      	ldr	r3, [pc, #116]	; (800663c <HAL_ADC_ConvCpltCallback+0x2e4>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1b      	ldr	r2, [pc, #108]	; (8006638 <HAL_ADC_ConvCpltCallback+0x2e0>)
 80065cc:	6814      	ldr	r4, [r2, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fa fe0a 	bl	80011e8 <__aeabi_f2uiz>
 80065d4:	4603      	mov	r3, r0
 80065d6:	6363      	str	r3, [r4, #52]	; 0x34
 80065d8:	e093      	b.n	8006702 <HAL_ADC_ConvCpltCallback+0x3aa>
 80065da:	bf00      	nop
 80065dc:	f3af 8000 	nop.w
 80065e0:	66666666 	.word	0x66666666
 80065e4:	400a6666 	.word	0x400a6666
 80065e8:	33333333 	.word	0x33333333
 80065ec:	40710b33 	.word	0x40710b33
 80065f0:	c28f5c29 	.word	0xc28f5c29
 80065f4:	407078f5 	.word	0x407078f5
 80065f8:	2000029c 	.word	0x2000029c
 80065fc:	40012400 	.word	0x40012400
 8006600:	20000280 	.word	0x20000280
 8006604:	20000250 	.word	0x20000250
 8006608:	20000278 	.word	0x20000278
 800660c:	2000027c 	.word	0x2000027c
 8006610:	40b00000 	.word	0x40b00000
 8006614:	40c00000 	.word	0x40c00000
 8006618:	20000374 	.word	0x20000374
 800661c:	20000288 	.word	0x20000288
 8006620:	2000028c 	.word	0x2000028c
 8006624:	2000000c 	.word	0x2000000c
 8006628:	20000370 	.word	0x20000370
 800662c:	41200000 	.word	0x41200000
 8006630:	20000004 	.word	0x20000004
 8006634:	442f0000 	.word	0x442f0000
 8006638:	200004bc 	.word	0x200004bc
 800663c:	20000284 	.word	0x20000284
		} else if (mode == 2) {
 8006640:	4b5b      	ldr	r3, [pc, #364]	; (80067b0 <HAL_ADC_ConvCpltCallback+0x458>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b02      	cmp	r3, #2
 8006646:	d137      	bne.n	80066b8 <HAL_ADC_ConvCpltCallback+0x360>
			temperature = conversion2(voltage);
 8006648:	4b5a      	ldr	r3, [pc, #360]	; (80067b4 <HAL_ADC_ConvCpltCallback+0x45c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f7fb f85b 	bl	8001708 <conversion2>
 8006652:	4603      	mov	r3, r0
 8006654:	4a58      	ldr	r2, [pc, #352]	; (80067b8 <HAL_ADC_ConvCpltCallback+0x460>)
 8006656:	6013      	str	r3, [r2, #0]
			if (temperature >= pid_res->SetTemp-2) {
 8006658:	4b58      	ldr	r3, [pc, #352]	; (80067bc <HAL_ADC_ConvCpltCallback+0x464>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006662:	4618      	mov	r0, r3
 8006664:	f7fa faf0 	bl	8000c48 <__aeabi_fsub>
 8006668:	4603      	mov	r3, r0
 800666a:	461a      	mov	r2, r3
 800666c:	4b52      	ldr	r3, [pc, #328]	; (80067b8 <HAL_ADC_ConvCpltCallback+0x460>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4619      	mov	r1, r3
 8006672:	4610      	mov	r0, r2
 8006674:	f7fa fd9a 	bl	80011ac <__aeabi_fcmple>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d018      	beq.n	80066b0 <HAL_ADC_ConvCpltCallback+0x358>
				pwmVal_fan = 1000;
 800667e:	4b50      	ldr	r3, [pc, #320]	; (80067c0 <HAL_ADC_ConvCpltCallback+0x468>)
 8006680:	4a50      	ldr	r2, [pc, #320]	; (80067c4 <HAL_ADC_ConvCpltCallback+0x46c>)
 8006682:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, pwmVal_fan);
 8006684:	4b4e      	ldr	r3, [pc, #312]	; (80067c0 <HAL_ADC_ConvCpltCallback+0x468>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a4f      	ldr	r2, [pc, #316]	; (80067c8 <HAL_ADC_ConvCpltCallback+0x470>)
 800668a:	6814      	ldr	r4, [r2, #0]
 800668c:	4618      	mov	r0, r3
 800668e:	f7fa fdab 	bl	80011e8 <__aeabi_f2uiz>
 8006692:	4603      	mov	r3, r0
 8006694:	6363      	str	r3, [r4, #52]	; 0x34
				pwmVal_res = 10;
 8006696:	4b4d      	ldr	r3, [pc, #308]	; (80067cc <HAL_ADC_ConvCpltCallback+0x474>)
 8006698:	4a4d      	ldr	r2, [pc, #308]	; (80067d0 <HAL_ADC_ConvCpltCallback+0x478>)
 800669a:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwmVal_res);
 800669c:	4b4b      	ldr	r3, [pc, #300]	; (80067cc <HAL_ADC_ConvCpltCallback+0x474>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a49      	ldr	r2, [pc, #292]	; (80067c8 <HAL_ADC_ConvCpltCallback+0x470>)
 80066a2:	6814      	ldr	r4, [r2, #0]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fa fd9f 	bl	80011e8 <__aeabi_f2uiz>
 80066aa:	4603      	mov	r3, r0
 80066ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80066ae:	e028      	b.n	8006702 <HAL_ADC_ConvCpltCallback+0x3aa>
			} else {
				mode = 1;
 80066b0:	4b3f      	ldr	r3, [pc, #252]	; (80067b0 <HAL_ADC_ConvCpltCallback+0x458>)
 80066b2:	2201      	movs	r2, #1
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e024      	b.n	8006702 <HAL_ADC_ConvCpltCallback+0x3aa>
			}
		} else {
			pwmVal_fan = voltage * 272.7 - 263.56; //电压为1.7V是占空比为0.20;电压为2.8V时占空比为0.50
 80066b8:	4b3e      	ldr	r3, [pc, #248]	; (80067b4 <HAL_ADC_ConvCpltCallback+0x45c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7f9 ff1f 	bl	8000500 <__aeabi_f2d>
 80066c2:	a337      	add	r3, pc, #220	; (adr r3, 80067a0 <HAL_ADC_ConvCpltCallback+0x448>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f7f9 ff72 	bl	80005b0 <__aeabi_dmul>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4610      	mov	r0, r2
 80066d2:	4619      	mov	r1, r3
 80066d4:	a334      	add	r3, pc, #208	; (adr r3, 80067a8 <HAL_ADC_ConvCpltCallback+0x450>)
 80066d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066da:	f7f9 fdb1 	bl	8000240 <__aeabi_dsub>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	4610      	mov	r0, r2
 80066e4:	4619      	mov	r1, r3
 80066e6:	f7fa fa5b 	bl	8000ba0 <__aeabi_d2f>
 80066ea:	4603      	mov	r3, r0
 80066ec:	4a34      	ldr	r2, [pc, #208]	; (80067c0 <HAL_ADC_ConvCpltCallback+0x468>)
 80066ee:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, pwmVal_fan);
 80066f0:	4b33      	ldr	r3, [pc, #204]	; (80067c0 <HAL_ADC_ConvCpltCallback+0x468>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a34      	ldr	r2, [pc, #208]	; (80067c8 <HAL_ADC_ConvCpltCallback+0x470>)
 80066f6:	6814      	ldr	r4, [r2, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7fa fd75 	bl	80011e8 <__aeabi_f2uiz>
 80066fe:	4603      	mov	r3, r0
 8006700:	6363      	str	r3, [r4, #52]	; 0x34
		}

		//LCD输出相关信息
		show_Data(voltage, temperature, target_temp, pwmVal_fan, pwmVal_res);
 8006702:	4b2c      	ldr	r3, [pc, #176]	; (80067b4 <HAL_ADC_ConvCpltCallback+0x45c>)
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	4b2c      	ldr	r3, [pc, #176]	; (80067b8 <HAL_ADC_ConvCpltCallback+0x460>)
 8006708:	6819      	ldr	r1, [r3, #0]
 800670a:	4b32      	ldr	r3, [pc, #200]	; (80067d4 <HAL_ADC_ConvCpltCallback+0x47c>)
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	4b2c      	ldr	r3, [pc, #176]	; (80067c0 <HAL_ADC_ConvCpltCallback+0x468>)
 8006710:	681c      	ldr	r4, [r3, #0]
 8006712:	4b2e      	ldr	r3, [pc, #184]	; (80067cc <HAL_ADC_ConvCpltCallback+0x474>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	4623      	mov	r3, r4
 800671a:	f7fa fd85 	bl	8001228 <show_Data>

		//当温度达到60±1℃时，LED1亮；达到40±1℃时，LED0亮；其他时候灭
		if (temperature >= 59 && temperature <= 61) {
 800671e:	4b26      	ldr	r3, [pc, #152]	; (80067b8 <HAL_ADC_ConvCpltCallback+0x460>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	492d      	ldr	r1, [pc, #180]	; (80067d8 <HAL_ADC_ConvCpltCallback+0x480>)
 8006724:	4618      	mov	r0, r3
 8006726:	f7fa fd4b 	bl	80011c0 <__aeabi_fcmpge>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00e      	beq.n	800674e <HAL_ADC_ConvCpltCallback+0x3f6>
 8006730:	4b21      	ldr	r3, [pc, #132]	; (80067b8 <HAL_ADC_ConvCpltCallback+0x460>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4929      	ldr	r1, [pc, #164]	; (80067dc <HAL_ADC_ConvCpltCallback+0x484>)
 8006736:	4618      	mov	r0, r3
 8006738:	f7fa fd38 	bl	80011ac <__aeabi_fcmple>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <HAL_ADC_ConvCpltCallback+0x3f6>
			LED0_On();
 8006742:	2200      	movs	r2, #0
 8006744:	2120      	movs	r1, #32
 8006746:	4826      	ldr	r0, [pc, #152]	; (80067e0 <HAL_ADC_ConvCpltCallback+0x488>)
 8006748:	f002 fa10 	bl	8008b6c <HAL_GPIO_WritePin>
 800674c:	e022      	b.n	8006794 <HAL_ADC_ConvCpltCallback+0x43c>
		} else if (temperature >= 39 && temperature <= 41) {
 800674e:	4b1a      	ldr	r3, [pc, #104]	; (80067b8 <HAL_ADC_ConvCpltCallback+0x460>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4924      	ldr	r1, [pc, #144]	; (80067e4 <HAL_ADC_ConvCpltCallback+0x48c>)
 8006754:	4618      	mov	r0, r3
 8006756:	f7fa fd33 	bl	80011c0 <__aeabi_fcmpge>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d00e      	beq.n	800677e <HAL_ADC_ConvCpltCallback+0x426>
 8006760:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <HAL_ADC_ConvCpltCallback+0x460>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4920      	ldr	r1, [pc, #128]	; (80067e8 <HAL_ADC_ConvCpltCallback+0x490>)
 8006766:	4618      	mov	r0, r3
 8006768:	f7fa fd20 	bl	80011ac <__aeabi_fcmple>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <HAL_ADC_ConvCpltCallback+0x426>
			LED1_On();
 8006772:	2200      	movs	r2, #0
 8006774:	2120      	movs	r1, #32
 8006776:	481d      	ldr	r0, [pc, #116]	; (80067ec <HAL_ADC_ConvCpltCallback+0x494>)
 8006778:	f002 f9f8 	bl	8008b6c <HAL_GPIO_WritePin>
 800677c:	e00a      	b.n	8006794 <HAL_ADC_ConvCpltCallback+0x43c>
		} else {
			LED0_Off();
 800677e:	2201      	movs	r2, #1
 8006780:	2120      	movs	r1, #32
 8006782:	4817      	ldr	r0, [pc, #92]	; (80067e0 <HAL_ADC_ConvCpltCallback+0x488>)
 8006784:	f002 f9f2 	bl	8008b6c <HAL_GPIO_WritePin>
			LED1_Off();
 8006788:	2201      	movs	r2, #1
 800678a:	2120      	movs	r1, #32
 800678c:	4817      	ldr	r0, [pc, #92]	; (80067ec <HAL_ADC_ConvCpltCallback+0x494>)
 800678e:	f002 f9ed 	bl	8008b6c <HAL_GPIO_WritePin>
		}
	}
}
 8006792:	e7ff      	b.n	8006794 <HAL_ADC_ConvCpltCallback+0x43c>
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bdb0      	pop	{r4, r5, r7, pc}
 800679c:	f3af 8000 	nop.w
 80067a0:	33333333 	.word	0x33333333
 80067a4:	40710b33 	.word	0x40710b33
 80067a8:	c28f5c29 	.word	0xc28f5c29
 80067ac:	407078f5 	.word	0x407078f5
 80067b0:	20000288 	.word	0x20000288
 80067b4:	2000027c 	.word	0x2000027c
 80067b8:	20000374 	.word	0x20000374
 80067bc:	20000370 	.word	0x20000370
 80067c0:	20000284 	.word	0x20000284
 80067c4:	447a0000 	.word	0x447a0000
 80067c8:	200004bc 	.word	0x200004bc
 80067cc:	20000004 	.word	0x20000004
 80067d0:	41200000 	.word	0x41200000
 80067d4:	20000008 	.word	0x20000008
 80067d8:	426c0000 	.word	0x426c0000
 80067dc:	42740000 	.word	0x42740000
 80067e0:	40010c00 	.word	0x40010c00
 80067e4:	421c0000 	.word	0x421c0000
 80067e8:	42240000 	.word	0x42240000
 80067ec:	40011800 	.word	0x40011800

080067f0 <HAL_UART_RxCpltCallback>:
//USART接收回调函数
//在调试阶段，使用串口调节占空比
/* 将目的温度值调整到任意位置  0x**  (“**”为目的温度值的十六进制形式)
 *   开始升温  0xa1    开始降温 0xa2    停止调温  0xa3
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80067f0:	b590      	push	{r4, r7, lr}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a3f      	ldr	r2, [pc, #252]	; (80068fc <HAL_UART_RxCpltCallback+0x10c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d178      	bne.n	80068f4 <HAL_UART_RxCpltCallback+0x104>
		if (Rx_Date <= 0xa0) {
 8006802:	4b3f      	ldr	r3, [pc, #252]	; (8006900 <HAL_UART_RxCpltCallback+0x110>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2ba0      	cmp	r3, #160	; 0xa0
 8006808:	d81f      	bhi.n	800684a <HAL_UART_RxCpltCallback+0x5a>
			target_temp = Rx_Date;
 800680a:	4b3d      	ldr	r3, [pc, #244]	; (8006900 <HAL_UART_RxCpltCallback+0x110>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f7fa facc 	bl	8000dac <__aeabi_ui2f>
 8006814:	4603      	mov	r3, r0
 8006816:	4a3b      	ldr	r2, [pc, #236]	; (8006904 <HAL_UART_RxCpltCallback+0x114>)
 8006818:	6013      	str	r3, [r2, #0]
			ChaSetTemp(pid_res, target_temp);
 800681a:	4b3b      	ldr	r3, [pc, #236]	; (8006908 <HAL_UART_RxCpltCallback+0x118>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a39      	ldr	r2, [pc, #228]	; (8006904 <HAL_UART_RxCpltCallback+0x114>)
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	4611      	mov	r1, r2
 8006824:	4618      	mov	r0, r3
 8006826:	f7fa fe83 	bl	8001530 <ChaSetTemp>
			HAL_UART_Receive_IT(&huart1, &Rx_Date, 1);
 800682a:	2201      	movs	r2, #1
 800682c:	4934      	ldr	r1, [pc, #208]	; (8006900 <HAL_UART_RxCpltCallback+0x110>)
 800682e:	4837      	ldr	r0, [pc, #220]	; (800690c <HAL_UART_RxCpltCallback+0x11c>)
 8006830:	f004 f9a3 	bl	800ab7a <HAL_UART_Receive_IT>
			printf("当前温度目标值为 %.2f\r\n", target_temp);
 8006834:	4b33      	ldr	r3, [pc, #204]	; (8006904 <HAL_UART_RxCpltCallback+0x114>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4618      	mov	r0, r3
 800683a:	f7f9 fe61 	bl	8000500 <__aeabi_f2d>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
 8006842:	4833      	ldr	r0, [pc, #204]	; (8006910 <HAL_UART_RxCpltCallback+0x120>)
 8006844:	f005 fad0 	bl	800bde8 <iprintf>
 8006848:	e046      	b.n	80068d8 <HAL_UART_RxCpltCallback+0xe8>
		} else {
			if (Rx_Date == 0xa1) {
 800684a:	4b2d      	ldr	r3, [pc, #180]	; (8006900 <HAL_UART_RxCpltCallback+0x110>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	2ba1      	cmp	r3, #161	; 0xa1
 8006850:	d117      	bne.n	8006882 <HAL_UART_RxCpltCallback+0x92>
				mode = 1;
 8006852:	4b30      	ldr	r3, [pc, #192]	; (8006914 <HAL_UART_RxCpltCallback+0x124>)
 8006854:	2201      	movs	r2, #1
 8006856:	701a      	strb	r2, [r3, #0]
				PID_inte_Init(pid_res);
 8006858:	4b2b      	ldr	r3, [pc, #172]	; (8006908 <HAL_UART_RxCpltCallback+0x118>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4618      	mov	r0, r3
 800685e:	f7fa fe74 	bl	800154a <PID_inte_Init>
				printf("\r\n开始升温！！！温度升至%.2f\r\n", target_temp);
 8006862:	4b28      	ldr	r3, [pc, #160]	; (8006904 <HAL_UART_RxCpltCallback+0x114>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f7f9 fe4a 	bl	8000500 <__aeabi_f2d>
 800686c:	4602      	mov	r2, r0
 800686e:	460b      	mov	r3, r1
 8006870:	4829      	ldr	r0, [pc, #164]	; (8006918 <HAL_UART_RxCpltCallback+0x128>)
 8006872:	f005 fab9 	bl	800bde8 <iprintf>
				HAL_UART_Receive_IT(&huart1, &Rx_Date, 1);
 8006876:	2201      	movs	r2, #1
 8006878:	4921      	ldr	r1, [pc, #132]	; (8006900 <HAL_UART_RxCpltCallback+0x110>)
 800687a:	4824      	ldr	r0, [pc, #144]	; (800690c <HAL_UART_RxCpltCallback+0x11c>)
 800687c:	f004 f97d 	bl	800ab7a <HAL_UART_Receive_IT>
 8006880:	e02a      	b.n	80068d8 <HAL_UART_RxCpltCallback+0xe8>
			} else if (Rx_Date == 0xa2) {
 8006882:	4b1f      	ldr	r3, [pc, #124]	; (8006900 <HAL_UART_RxCpltCallback+0x110>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2ba2      	cmp	r3, #162	; 0xa2
 8006888:	d117      	bne.n	80068ba <HAL_UART_RxCpltCallback+0xca>
				mode = 2;
 800688a:	4b22      	ldr	r3, [pc, #136]	; (8006914 <HAL_UART_RxCpltCallback+0x124>)
 800688c:	2202      	movs	r2, #2
 800688e:	701a      	strb	r2, [r3, #0]
				PID_inte_Init(pid_res);
 8006890:	4b1d      	ldr	r3, [pc, #116]	; (8006908 <HAL_UART_RxCpltCallback+0x118>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4618      	mov	r0, r3
 8006896:	f7fa fe58 	bl	800154a <PID_inte_Init>
				printf("\r\n开始降温！！！温度降至%.2f\r\n", target_temp);
 800689a:	4b1a      	ldr	r3, [pc, #104]	; (8006904 <HAL_UART_RxCpltCallback+0x114>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7f9 fe2e 	bl	8000500 <__aeabi_f2d>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	481c      	ldr	r0, [pc, #112]	; (800691c <HAL_UART_RxCpltCallback+0x12c>)
 80068aa:	f005 fa9d 	bl	800bde8 <iprintf>
				HAL_UART_Receive_IT(&huart1, &Rx_Date, 1);
 80068ae:	2201      	movs	r2, #1
 80068b0:	4913      	ldr	r1, [pc, #76]	; (8006900 <HAL_UART_RxCpltCallback+0x110>)
 80068b2:	4816      	ldr	r0, [pc, #88]	; (800690c <HAL_UART_RxCpltCallback+0x11c>)
 80068b4:	f004 f961 	bl	800ab7a <HAL_UART_Receive_IT>
 80068b8:	e00e      	b.n	80068d8 <HAL_UART_RxCpltCallback+0xe8>
			} else if (Rx_Date == 0xa3) {
 80068ba:	4b11      	ldr	r3, [pc, #68]	; (8006900 <HAL_UART_RxCpltCallback+0x110>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2ba3      	cmp	r3, #163	; 0xa3
 80068c0:	d10a      	bne.n	80068d8 <HAL_UART_RxCpltCallback+0xe8>
				mode = 0;
 80068c2:	4b14      	ldr	r3, [pc, #80]	; (8006914 <HAL_UART_RxCpltCallback+0x124>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	701a      	strb	r2, [r3, #0]
				printf("停止调温！！！");
 80068c8:	4815      	ldr	r0, [pc, #84]	; (8006920 <HAL_UART_RxCpltCallback+0x130>)
 80068ca:	f005 fa8d 	bl	800bde8 <iprintf>
				HAL_UART_Receive_IT(&huart1, &Rx_Date, 1);
 80068ce:	2201      	movs	r2, #1
 80068d0:	490b      	ldr	r1, [pc, #44]	; (8006900 <HAL_UART_RxCpltCallback+0x110>)
 80068d2:	480e      	ldr	r0, [pc, #56]	; (800690c <HAL_UART_RxCpltCallback+0x11c>)
 80068d4:	f004 f951 	bl	800ab7a <HAL_UART_Receive_IT>
//				__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwmVal_res);
//				printf("水泥电阻的占空比减小了0.01, 当前水泥电阻占空比为%.2f", pwmVal_fan / 1000);
//				HAL_UART_Receive_IT(&huart1, &Rx_Date, 1);
//			}
		}
		show_Data(voltage, temperature, target_temp, pwmVal_fan, pwmVal_res);
 80068d8:	4b12      	ldr	r3, [pc, #72]	; (8006924 <HAL_UART_RxCpltCallback+0x134>)
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	4b12      	ldr	r3, [pc, #72]	; (8006928 <HAL_UART_RxCpltCallback+0x138>)
 80068de:	6819      	ldr	r1, [r3, #0]
 80068e0:	4b08      	ldr	r3, [pc, #32]	; (8006904 <HAL_UART_RxCpltCallback+0x114>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	4b11      	ldr	r3, [pc, #68]	; (800692c <HAL_UART_RxCpltCallback+0x13c>)
 80068e6:	681c      	ldr	r4, [r3, #0]
 80068e8:	4b11      	ldr	r3, [pc, #68]	; (8006930 <HAL_UART_RxCpltCallback+0x140>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	4623      	mov	r3, r4
 80068f0:	f7fa fc9a 	bl	8001228 <show_Data>
	}
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd90      	pop	{r4, r7, pc}
 80068fc:	40013800 	.word	0x40013800
 8006900:	20000380 	.word	0x20000380
 8006904:	20000008 	.word	0x20000008
 8006908:	20000370 	.word	0x20000370
 800690c:	20000504 	.word	0x20000504
 8006910:	0800e310 	.word	0x0800e310
 8006914:	20000288 	.word	0x20000288
 8006918:	0800e330 	.word	0x0800e330
 800691c:	0800e35c 	.word	0x0800e35c
 8006920:	0800e388 	.word	0x0800e388
 8006924:	2000027c 	.word	0x2000027c
 8006928:	20000374 	.word	0x20000374
 800692c:	20000284 	.word	0x20000284
 8006930:	20000004 	.word	0x20000004

08006934 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8006934:	b590      	push	{r4, r7, lr}
 8006936:	b083      	sub	sp, #12
 8006938:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800693a:	f000 fd0d 	bl	8007358 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800693e:	f000 f865 	bl	8006a0c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8006942:	f7fb f8eb 	bl	8001b1c <MX_GPIO_Init>
	MX_DMA_Init();
 8006946:	f7fa ffef 	bl	8001928 <MX_DMA_Init>
	MX_ADC1_Init();
 800694a:	f7fa ff3d 	bl	80017c8 <MX_ADC1_Init>
	MX_TIM3_Init();
 800694e:	f000 fa91 	bl	8006e74 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8006952:	f000 fc5d 	bl	8007210 <MX_USART1_UART_Init>
	MX_TIM2_Init();
 8006956:	f000 fa27 	bl	8006da8 <MX_TIM2_Init>
	MX_FSMC_Init();
 800695a:	f7fb f803 	bl	8001964 <MX_FSMC_Init>
	MX_TIM4_Init();
 800695e:	f000 fafd 	bl	8006f5c <MX_TIM4_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2); // 开启计时器
 8006962:	481d      	ldr	r0, [pc, #116]	; (80069d8 <main+0xa4>)
 8006964:	f002 fe86 	bl	8009674 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3); // 开启计时器
 8006968:	481c      	ldr	r0, [pc, #112]	; (80069dc <main+0xa8>)
 800696a:	f002 fe83 	bl	8009674 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); //开启PWM波输出
 800696e:	2100      	movs	r1, #0
 8006970:	4819      	ldr	r0, [pc, #100]	; (80069d8 <main+0xa4>)
 8006972:	f002 ff87 	bl	8009884 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //开启PWM波输出2
 8006976:	2104      	movs	r1, #4
 8006978:	4817      	ldr	r0, [pc, #92]	; (80069d8 <main+0xa4>)
 800697a:	f002 ff83 	bl	8009884 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart1, &Rx_Date, 1); //开启串口接受中断
 800697e:	2201      	movs	r2, #1
 8006980:	4917      	ldr	r1, [pc, #92]	; (80069e0 <main+0xac>)
 8006982:	4818      	ldr	r0, [pc, #96]	; (80069e4 <main+0xb0>)
 8006984:	f004 f8f9 	bl	800ab7a <HAL_UART_Receive_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_buffer, 20); //DMA方式开启ADC
 8006988:	2214      	movs	r2, #20
 800698a:	4917      	ldr	r1, [pc, #92]	; (80069e8 <main+0xb4>)
 800698c:	4817      	ldr	r0, [pc, #92]	; (80069ec <main+0xb8>)
 800698e:	f000 fe53 	bl	8007638 <HAL_ADC_Start_DMA>

	//分别为风扇和水泥电阻的结构体申请内存空间
	pid_res = (PID*) malloc(sizeof(PID));
 8006992:	2024      	movs	r0, #36	; 0x24
 8006994:	f004 fd04 	bl	800b3a0 <malloc>
 8006998:	4603      	mov	r3, r0
 800699a:	461a      	mov	r2, r3
 800699c:	4b14      	ldr	r3, [pc, #80]	; (80069f0 <main+0xbc>)
 800699e:	601a      	str	r2, [r3, #0]

	PID_Init(pid_res); //初始化PID结构体
 80069a0:	4b13      	ldr	r3, [pc, #76]	; (80069f0 <main+0xbc>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4618      	mov	r0, r3
 80069a6:	f7fa fcd1 	bl	800134c <PID_Init>
	LCD_Init(); //LCD显示屏初始化
 80069aa:	f7fb ff59 	bl	8002860 <LCD_Init>
	irmp_init(); //初始化红外遥控
 80069ae:	f004 fcc7 	bl	800b340 <irmp_init>

	printf("初始化完成。。。\r\n");
 80069b2:	4810      	ldr	r0, [pc, #64]	; (80069f4 <main+0xc0>)
 80069b4:	f005 fa9e 	bl	800bef4 <puts>
	//LCD显示各项数据
	show_Data(voltage, temperature, target_temp, pwmVal_fan, pwmVal_res);
 80069b8:	4b0f      	ldr	r3, [pc, #60]	; (80069f8 <main+0xc4>)
 80069ba:	6818      	ldr	r0, [r3, #0]
 80069bc:	4b0f      	ldr	r3, [pc, #60]	; (80069fc <main+0xc8>)
 80069be:	6819      	ldr	r1, [r3, #0]
 80069c0:	4b0f      	ldr	r3, [pc, #60]	; (8006a00 <main+0xcc>)
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	4b0f      	ldr	r3, [pc, #60]	; (8006a04 <main+0xd0>)
 80069c6:	681c      	ldr	r4, [r3, #0]
 80069c8:	4b0f      	ldr	r3, [pc, #60]	; (8006a08 <main+0xd4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	4623      	mov	r3, r4
 80069d0:	f7fa fc2a 	bl	8001228 <show_Data>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80069d4:	e7fe      	b.n	80069d4 <main+0xa0>
 80069d6:	bf00      	nop
 80069d8:	200004bc 	.word	0x200004bc
 80069dc:	20000474 	.word	0x20000474
 80069e0:	20000380 	.word	0x20000380
 80069e4:	20000504 	.word	0x20000504
 80069e8:	20000250 	.word	0x20000250
 80069ec:	2000029c 	.word	0x2000029c
 80069f0:	20000370 	.word	0x20000370
 80069f4:	0800e3a0 	.word	0x0800e3a0
 80069f8:	2000027c 	.word	0x2000027c
 80069fc:	20000374 	.word	0x20000374
 8006a00:	20000008 	.word	0x20000008
 8006a04:	20000284 	.word	0x20000284
 8006a08:	20000004 	.word	0x20000004

08006a0c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b096      	sub	sp, #88	; 0x58
 8006a10:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8006a12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a16:	2228      	movs	r2, #40	; 0x28
 8006a18:	2100      	movs	r1, #0
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f004 fcd6 	bl	800b3cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8006a20:	f107 031c 	add.w	r3, r7, #28
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]
 8006a28:	605a      	str	r2, [r3, #4]
 8006a2a:	609a      	str	r2, [r3, #8]
 8006a2c:	60da      	str	r2, [r3, #12]
 8006a2e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8006a30:	1d3b      	adds	r3, r7, #4
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	605a      	str	r2, [r3, #4]
 8006a38:	609a      	str	r2, [r3, #8]
 8006a3a:	60da      	str	r2, [r3, #12]
 8006a3c:	611a      	str	r2, [r3, #16]
 8006a3e:	615a      	str	r2, [r3, #20]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006a40:	2301      	movs	r3, #1
 8006a42:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006a44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006a52:	2302      	movs	r3, #2
 8006a54:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006a56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006a5a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8006a5c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8006a60:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8006a62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a66:	4618      	mov	r0, r3
 8006a68:	f002 f898 	bl	8008b9c <HAL_RCC_OscConfig>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <SystemClock_Config+0x6a>
		Error_Handler();
 8006a72:	f000 f841 	bl	8006af8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8006a76:	230f      	movs	r3, #15
 8006a78:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8006a8c:	f107 031c 	add.w	r3, r7, #28
 8006a90:	2102      	movs	r1, #2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f002 fb02 	bl	800909c <HAL_RCC_ClockConfig>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <SystemClock_Config+0x96>
		Error_Handler();
 8006a9e:	f000 f82b 	bl	8006af8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8006aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aaa:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8006aac:	1d3b      	adds	r3, r7, #4
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f002 fc8e 	bl	80093d0 <HAL_RCCEx_PeriphCLKConfig>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <SystemClock_Config+0xb2>
		Error_Handler();
 8006aba:	f000 f81d 	bl	8006af8 <Error_Handler>
	}
}
 8006abe:	bf00      	nop
 8006ac0:	3758      	adds	r7, #88	; 0x58
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
// 具体哪个串口可以更改huart2为其它串口
// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 8006ad0:	bf00      	nop
 8006ad2:	4b08      	ldr	r3, [pc, #32]	; (8006af4 <__io_putchar+0x2c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0f9      	beq.n	8006ad2 <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <__io_putchar+0x2c>)
 8006ae4:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

	return ch;
 8006ae6:	687b      	ldr	r3, [r7, #4]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bc80      	pop	{r7}
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	40013800 	.word	0x40013800

08006af8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8006af8:	b480      	push	{r7}
 8006afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006afc:	b672      	cpsid	i
}
 8006afe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006b00:	e7fe      	b.n	8006b00 <Error_Handler+0x8>
	...

08006b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006b0a:	4b15      	ldr	r3, [pc, #84]	; (8006b60 <HAL_MspInit+0x5c>)
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	4a14      	ldr	r2, [pc, #80]	; (8006b60 <HAL_MspInit+0x5c>)
 8006b10:	f043 0301 	orr.w	r3, r3, #1
 8006b14:	6193      	str	r3, [r2, #24]
 8006b16:	4b12      	ldr	r3, [pc, #72]	; (8006b60 <HAL_MspInit+0x5c>)
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	60bb      	str	r3, [r7, #8]
 8006b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b22:	4b0f      	ldr	r3, [pc, #60]	; (8006b60 <HAL_MspInit+0x5c>)
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	4a0e      	ldr	r2, [pc, #56]	; (8006b60 <HAL_MspInit+0x5c>)
 8006b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b2c:	61d3      	str	r3, [r2, #28]
 8006b2e:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <HAL_MspInit+0x5c>)
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b36:	607b      	str	r3, [r7, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <HAL_MspInit+0x60>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	60fb      	str	r3, [r7, #12]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8006b46:	60fb      	str	r3, [r7, #12]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b4e:	60fb      	str	r3, [r7, #12]
 8006b50:	4a04      	ldr	r2, [pc, #16]	; (8006b64 <HAL_MspInit+0x60>)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b56:	bf00      	nop
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bc80      	pop	{r7}
 8006b5e:	4770      	bx	lr
 8006b60:	40021000 	.word	0x40021000
 8006b64:	40010000 	.word	0x40010000

08006b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006b6c:	e7fe      	b.n	8006b6c <NMI_Handler+0x4>

08006b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006b72:	e7fe      	b.n	8006b72 <HardFault_Handler+0x4>

08006b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006b78:	e7fe      	b.n	8006b78 <MemManage_Handler+0x4>

08006b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006b7e:	e7fe      	b.n	8006b7e <BusFault_Handler+0x4>

08006b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006b84:	e7fe      	b.n	8006b84 <UsageFault_Handler+0x4>

08006b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006b86:	b480      	push	{r7}
 8006b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006b8a:	bf00      	nop
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc80      	pop	{r7}
 8006b90:	4770      	bx	lr

08006b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b92:	b480      	push	{r7}
 8006b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b96:	bf00      	nop
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr

08006b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006ba2:	bf00      	nop
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr

08006baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006bae:	f000 fc19 	bl	80073e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006bb2:	bf00      	nop
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006bbc:	4802      	ldr	r0, [pc, #8]	; (8006bc8 <DMA1_Channel1_IRQHandler+0x10>)
 8006bbe:	f001 fbd7 	bl	8008370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006bc2:	bf00      	nop
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	200002cc 	.word	0x200002cc

08006bcc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006bd0:	4802      	ldr	r0, [pc, #8]	; (8006bdc <ADC1_2_IRQHandler+0x10>)
 8006bd2:	f000 fe0f 	bl	80077f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8006bd6:	bf00      	nop
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	2000029c 	.word	0x2000029c

08006be0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006be4:	4802      	ldr	r0, [pc, #8]	; (8006bf0 <TIM3_IRQHandler+0x10>)
 8006be6:	f002 ff5f 	bl	8009aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006bea:	bf00      	nop
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20000474 	.word	0x20000474

08006bf4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006bf8:	4802      	ldr	r0, [pc, #8]	; (8006c04 <TIM4_IRQHandler+0x10>)
 8006bfa:	f002 ff55 	bl	8009aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006bfe:	bf00      	nop
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	2000042c 	.word	0x2000042c

08006c08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006c0c:	4802      	ldr	r0, [pc, #8]	; (8006c18 <USART1_IRQHandler+0x10>)
 8006c0e:	f004 f809 	bl	800ac24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006c12:	bf00      	nop
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20000504 	.word	0x20000504

08006c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
	return 1;
 8006c20:	2301      	movs	r3, #1
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bc80      	pop	{r7}
 8006c28:	4770      	bx	lr

08006c2a <_kill>:

int _kill(int pid, int sig)
{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b082      	sub	sp, #8
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006c34:	f004 fb8a 	bl	800b34c <__errno>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2216      	movs	r2, #22
 8006c3c:	601a      	str	r2, [r3, #0]
	return -1;
 8006c3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <_exit>:

void _exit (int status)
{
 8006c4a:	b580      	push	{r7, lr}
 8006c4c:	b082      	sub	sp, #8
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006c52:	f04f 31ff 	mov.w	r1, #4294967295
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff ffe7 	bl	8006c2a <_kill>
	while (1) {}		/* Make sure we hang here */
 8006c5c:	e7fe      	b.n	8006c5c <_exit+0x12>

08006c5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b086      	sub	sp, #24
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	e00a      	b.n	8006c86 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006c70:	f3af 8000 	nop.w
 8006c74:	4601      	mov	r1, r0
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	60ba      	str	r2, [r7, #8]
 8006c7c:	b2ca      	uxtb	r2, r1
 8006c7e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	3301      	adds	r3, #1
 8006c84:	617b      	str	r3, [r7, #20]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	dbf0      	blt.n	8006c70 <_read+0x12>
	}

return len;
 8006c8e:	687b      	ldr	r3, [r7, #4]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	e009      	b.n	8006cbe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	60ba      	str	r2, [r7, #8]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff ff08 	bl	8006ac8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	dbf1      	blt.n	8006caa <_write+0x12>
	}
	return len;
 8006cc6:	687b      	ldr	r3, [r7, #4]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3718      	adds	r7, #24
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <_close>:

int _close(int file)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
	return -1;
 8006cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr

08006ce6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006cf6:	605a      	str	r2, [r3, #4]
	return 0;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bc80      	pop	{r7}
 8006d02:	4770      	bx	lr

08006d04 <_isatty>:

int _isatty(int file)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
	return 1;
 8006d0c:	2301      	movs	r3, #1
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bc80      	pop	{r7}
 8006d16:	4770      	bx	lr

08006d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
	return 0;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bc80      	pop	{r7}
 8006d2e:	4770      	bx	lr

08006d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006d38:	4a14      	ldr	r2, [pc, #80]	; (8006d8c <_sbrk+0x5c>)
 8006d3a:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <_sbrk+0x60>)
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006d44:	4b13      	ldr	r3, [pc, #76]	; (8006d94 <_sbrk+0x64>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d102      	bne.n	8006d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006d4c:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <_sbrk+0x64>)
 8006d4e:	4a12      	ldr	r2, [pc, #72]	; (8006d98 <_sbrk+0x68>)
 8006d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006d52:	4b10      	ldr	r3, [pc, #64]	; (8006d94 <_sbrk+0x64>)
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4413      	add	r3, r2
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d207      	bcs.n	8006d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006d60:	f004 faf4 	bl	800b34c <__errno>
 8006d64:	4603      	mov	r3, r0
 8006d66:	220c      	movs	r2, #12
 8006d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6e:	e009      	b.n	8006d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006d70:	4b08      	ldr	r3, [pc, #32]	; (8006d94 <_sbrk+0x64>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006d76:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <_sbrk+0x64>)
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	4a05      	ldr	r2, [pc, #20]	; (8006d94 <_sbrk+0x64>)
 8006d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006d82:	68fb      	ldr	r3, [r7, #12]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3718      	adds	r7, #24
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	20010000 	.word	0x20010000
 8006d90:	00000400 	.word	0x00000400
 8006d94:	20000290 	.word	0x20000290
 8006d98:	20000558 	.word	0x20000558

08006d9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006da0:	bf00      	nop
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bc80      	pop	{r7}
 8006da6:	4770      	bx	lr

08006da8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08a      	sub	sp, #40	; 0x28
 8006dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006dae:	f107 0320 	add.w	r3, r7, #32
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006db8:	1d3b      	adds	r3, r7, #4
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	605a      	str	r2, [r3, #4]
 8006dc0:	609a      	str	r2, [r3, #8]
 8006dc2:	60da      	str	r2, [r3, #12]
 8006dc4:	611a      	str	r2, [r3, #16]
 8006dc6:	615a      	str	r2, [r3, #20]
 8006dc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006dca:	4b29      	ldr	r3, [pc, #164]	; (8006e70 <MX_TIM2_Init+0xc8>)
 8006dcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006dd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8006dd2:	4b27      	ldr	r3, [pc, #156]	; (8006e70 <MX_TIM2_Init+0xc8>)
 8006dd4:	2247      	movs	r2, #71	; 0x47
 8006dd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006dd8:	4b25      	ldr	r3, [pc, #148]	; (8006e70 <MX_TIM2_Init+0xc8>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8006dde:	4b24      	ldr	r3, [pc, #144]	; (8006e70 <MX_TIM2_Init+0xc8>)
 8006de0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006de4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006de6:	4b22      	ldr	r3, [pc, #136]	; (8006e70 <MX_TIM2_Init+0xc8>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006dec:	4b20      	ldr	r3, [pc, #128]	; (8006e70 <MX_TIM2_Init+0xc8>)
 8006dee:	2280      	movs	r2, #128	; 0x80
 8006df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8006df2:	481f      	ldr	r0, [pc, #124]	; (8006e70 <MX_TIM2_Init+0xc8>)
 8006df4:	f002 fcf6 	bl	80097e4 <HAL_TIM_PWM_Init>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8006dfe:	f7ff fe7b 	bl	8006af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006e02:	2300      	movs	r3, #0
 8006e04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006e06:	2300      	movs	r3, #0
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006e0a:	f107 0320 	add.w	r3, r7, #32
 8006e0e:	4619      	mov	r1, r3
 8006e10:	4817      	ldr	r0, [pc, #92]	; (8006e70 <MX_TIM2_Init+0xc8>)
 8006e12:	f003 fde7 	bl	800a9e4 <HAL_TIMEx_MasterConfigSynchronization>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8006e1c:	f7ff fe6c 	bl	8006af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006e20:	2360      	movs	r3, #96	; 0x60
 8006e22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200;
 8006e24:	23c8      	movs	r3, #200	; 0xc8
 8006e26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006e30:	1d3b      	adds	r3, r7, #4
 8006e32:	2200      	movs	r2, #0
 8006e34:	4619      	mov	r1, r3
 8006e36:	480e      	ldr	r0, [pc, #56]	; (8006e70 <MX_TIM2_Init+0xc8>)
 8006e38:	f003 f82a 	bl	8009e90 <HAL_TIM_PWM_ConfigChannel>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8006e42:	f7ff fe59 	bl	8006af8 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8006e46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006e4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006e4c:	1d3b      	adds	r3, r7, #4
 8006e4e:	2204      	movs	r2, #4
 8006e50:	4619      	mov	r1, r3
 8006e52:	4807      	ldr	r0, [pc, #28]	; (8006e70 <MX_TIM2_Init+0xc8>)
 8006e54:	f003 f81c 	bl	8009e90 <HAL_TIM_PWM_ConfigChannel>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8006e5e:	f7ff fe4b 	bl	8006af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8006e62:	4803      	ldr	r0, [pc, #12]	; (8006e70 <MX_TIM2_Init+0xc8>)
 8006e64:	f000 f974 	bl	8007150 <HAL_TIM_MspPostInit>

}
 8006e68:	bf00      	nop
 8006e6a:	3728      	adds	r7, #40	; 0x28
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	200004bc 	.word	0x200004bc

08006e74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b08e      	sub	sp, #56	; 0x38
 8006e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	605a      	str	r2, [r3, #4]
 8006e84:	609a      	str	r2, [r3, #8]
 8006e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006e88:	f107 0320 	add.w	r3, r7, #32
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006e92:	1d3b      	adds	r3, r7, #4
 8006e94:	2200      	movs	r2, #0
 8006e96:	601a      	str	r2, [r3, #0]
 8006e98:	605a      	str	r2, [r3, #4]
 8006e9a:	609a      	str	r2, [r3, #8]
 8006e9c:	60da      	str	r2, [r3, #12]
 8006e9e:	611a      	str	r2, [r3, #16]
 8006ea0:	615a      	str	r2, [r3, #20]
 8006ea2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006ea4:	4b2b      	ldr	r3, [pc, #172]	; (8006f54 <MX_TIM3_Init+0xe0>)
 8006ea6:	4a2c      	ldr	r2, [pc, #176]	; (8006f58 <MX_TIM3_Init+0xe4>)
 8006ea8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8006eaa:	4b2a      	ldr	r3, [pc, #168]	; (8006f54 <MX_TIM3_Init+0xe0>)
 8006eac:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8006eb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006eb2:	4b28      	ldr	r3, [pc, #160]	; (8006f54 <MX_TIM3_Init+0xe0>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8006eb8:	4b26      	ldr	r3, [pc, #152]	; (8006f54 <MX_TIM3_Init+0xe0>)
 8006eba:	f240 12f3 	movw	r2, #499	; 0x1f3
 8006ebe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ec0:	4b24      	ldr	r3, [pc, #144]	; (8006f54 <MX_TIM3_Init+0xe0>)
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006ec6:	4b23      	ldr	r3, [pc, #140]	; (8006f54 <MX_TIM3_Init+0xe0>)
 8006ec8:	2280      	movs	r2, #128	; 0x80
 8006eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006ecc:	4821      	ldr	r0, [pc, #132]	; (8006f54 <MX_TIM3_Init+0xe0>)
 8006ece:	f002 fb82 	bl	80095d6 <HAL_TIM_Base_Init>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8006ed8:	f7ff fe0e 	bl	8006af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	481a      	ldr	r0, [pc, #104]	; (8006f54 <MX_TIM3_Init+0xe0>)
 8006eea:	f003 f88f 	bl	800a00c <HAL_TIM_ConfigClockSource>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8006ef4:	f7ff fe00 	bl	8006af8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8006ef8:	4816      	ldr	r0, [pc, #88]	; (8006f54 <MX_TIM3_Init+0xe0>)
 8006efa:	f002 fc1b 	bl	8009734 <HAL_TIM_OC_Init>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8006f04:	f7ff fdf8 	bl	8006af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006f08:	2320      	movs	r3, #32
 8006f0a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006f10:	f107 0320 	add.w	r3, r7, #32
 8006f14:	4619      	mov	r1, r3
 8006f16:	480f      	ldr	r0, [pc, #60]	; (8006f54 <MX_TIM3_Init+0xe0>)
 8006f18:	f003 fd64 	bl	800a9e4 <HAL_TIMEx_MasterConfigSynchronization>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8006f22:	f7ff fde9 	bl	8006af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006f26:	2300      	movs	r3, #0
 8006f28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006f36:	1d3b      	adds	r3, r7, #4
 8006f38:	220c      	movs	r2, #12
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4805      	ldr	r0, [pc, #20]	; (8006f54 <MX_TIM3_Init+0xe0>)
 8006f3e:	f002 febb 	bl	8009cb8 <HAL_TIM_OC_ConfigChannel>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8006f48:	f7ff fdd6 	bl	8006af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006f4c:	bf00      	nop
 8006f4e:	3738      	adds	r7, #56	; 0x38
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	20000474 	.word	0x20000474
 8006f58:	40000400 	.word	0x40000400

08006f5c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08a      	sub	sp, #40	; 0x28
 8006f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006f62:	f107 0318 	add.w	r3, r7, #24
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	605a      	str	r2, [r3, #4]
 8006f6c:	609a      	str	r2, [r3, #8]
 8006f6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f70:	f107 0310 	add.w	r3, r7, #16
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8006f7a:	463b      	mov	r3, r7
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	605a      	str	r2, [r3, #4]
 8006f82:	609a      	str	r2, [r3, #8]
 8006f84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006f86:	4b2e      	ldr	r3, [pc, #184]	; (8007040 <MX_TIM4_Init+0xe4>)
 8006f88:	4a2e      	ldr	r2, [pc, #184]	; (8007044 <MX_TIM4_Init+0xe8>)
 8006f8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = ((F_CPU / F_INTERRUPTS)/8) - 1;
 8006f8c:	4b2e      	ldr	r3, [pc, #184]	; (8007048 <MX_TIM4_Init+0xec>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a2e      	ldr	r2, [pc, #184]	; (800704c <MX_TIM4_Init+0xf0>)
 8006f92:	fba2 2303 	umull	r2, r3, r2, r3
 8006f96:	0bdb      	lsrs	r3, r3, #15
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	4a29      	ldr	r2, [pc, #164]	; (8007040 <MX_TIM4_Init+0xe4>)
 8006f9c:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f9e:	4b28      	ldr	r3, [pc, #160]	; (8007040 <MX_TIM4_Init+0xe4>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8-1;
 8006fa4:	4b26      	ldr	r3, [pc, #152]	; (8007040 <MX_TIM4_Init+0xe4>)
 8006fa6:	2207      	movs	r2, #7
 8006fa8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006faa:	4b25      	ldr	r3, [pc, #148]	; (8007040 <MX_TIM4_Init+0xe4>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006fb0:	4b23      	ldr	r3, [pc, #140]	; (8007040 <MX_TIM4_Init+0xe4>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8006fb6:	4822      	ldr	r0, [pc, #136]	; (8007040 <MX_TIM4_Init+0xe4>)
 8006fb8:	f002 fb0d 	bl	80095d6 <HAL_TIM_Base_Init>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8006fc2:	f7ff fd99 	bl	8006af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8006fcc:	f107 0318 	add.w	r3, r7, #24
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	481b      	ldr	r0, [pc, #108]	; (8007040 <MX_TIM4_Init+0xe4>)
 8006fd4:	f003 f81a 	bl	800a00c <HAL_TIM_ConfigClockSource>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d001      	beq.n	8006fe2 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8006fde:	f7ff fd8b 	bl	8006af8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8006fe2:	4817      	ldr	r0, [pc, #92]	; (8007040 <MX_TIM4_Init+0xe4>)
 8006fe4:	f002 fd08 	bl	80099f8 <HAL_TIM_IC_Init>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8006fee:	f7ff fd83 	bl	8006af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006ffa:	f107 0310 	add.w	r3, r7, #16
 8006ffe:	4619      	mov	r1, r3
 8007000:	480f      	ldr	r0, [pc, #60]	; (8007040 <MX_TIM4_Init+0xe4>)
 8007002:	f003 fcef 	bl	800a9e4 <HAL_TIMEx_MasterConfigSynchronization>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800700c:	f7ff fd74 	bl	8006af8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007010:	2300      	movs	r3, #0
 8007012:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007014:	2301      	movs	r3, #1
 8007016:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007018:	2300      	movs	r3, #0
 800701a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800701c:	2300      	movs	r3, #0
 800701e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8007020:	463b      	mov	r3, r7
 8007022:	220c      	movs	r2, #12
 8007024:	4619      	mov	r1, r3
 8007026:	4806      	ldr	r0, [pc, #24]	; (8007040 <MX_TIM4_Init+0xe4>)
 8007028:	f002 fe9e 	bl	8009d68 <HAL_TIM_IC_ConfigChannel>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8007032:	f7ff fd61 	bl	8006af8 <Error_Handler>
  /* USER CODE BEGIN TIM4_Init 2 */
//	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_4);
//	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);   //使能更新中断
  /* USER CODE END TIM4_Init 2 */

}
 8007036:	bf00      	nop
 8007038:	3728      	adds	r7, #40	; 0x28
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	2000042c 	.word	0x2000042c
 8007044:	40000800 	.word	0x40000800
 8007048:	20000010 	.word	0x20000010
 800704c:	45e7b273 	.word	0x45e7b273

08007050 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007060:	d10b      	bne.n	800707a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007062:	4b08      	ldr	r3, [pc, #32]	; (8007084 <HAL_TIM_PWM_MspInit+0x34>)
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	4a07      	ldr	r2, [pc, #28]	; (8007084 <HAL_TIM_PWM_MspInit+0x34>)
 8007068:	f043 0301 	orr.w	r3, r3, #1
 800706c:	61d3      	str	r3, [r2, #28]
 800706e:	4b05      	ldr	r3, [pc, #20]	; (8007084 <HAL_TIM_PWM_MspInit+0x34>)
 8007070:	69db      	ldr	r3, [r3, #28]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800707a:	bf00      	nop
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	bc80      	pop	{r7}
 8007082:	4770      	bx	lr
 8007084:	40021000 	.word	0x40021000

08007088 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b08a      	sub	sp, #40	; 0x28
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007090:	f107 0318 	add.w	r3, r7, #24
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]
 8007098:	605a      	str	r2, [r3, #4]
 800709a:	609a      	str	r2, [r3, #8]
 800709c:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM3)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a27      	ldr	r2, [pc, #156]	; (8007140 <HAL_TIM_Base_MspInit+0xb8>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d114      	bne.n	80070d2 <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80070a8:	4b26      	ldr	r3, [pc, #152]	; (8007144 <HAL_TIM_Base_MspInit+0xbc>)
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	4a25      	ldr	r2, [pc, #148]	; (8007144 <HAL_TIM_Base_MspInit+0xbc>)
 80070ae:	f043 0302 	orr.w	r3, r3, #2
 80070b2:	61d3      	str	r3, [r2, #28]
 80070b4:	4b23      	ldr	r3, [pc, #140]	; (8007144 <HAL_TIM_Base_MspInit+0xbc>)
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80070c0:	2200      	movs	r2, #0
 80070c2:	2100      	movs	r1, #0
 80070c4:	201d      	movs	r0, #29
 80070c6:	f000 ff3e 	bl	8007f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80070ca:	201d      	movs	r0, #29
 80070cc:	f000 ff57 	bl	8007f7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80070d0:	e031      	b.n	8007136 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM4)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a1c      	ldr	r2, [pc, #112]	; (8007148 <HAL_TIM_Base_MspInit+0xc0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d12c      	bne.n	8007136 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80070dc:	4b19      	ldr	r3, [pc, #100]	; (8007144 <HAL_TIM_Base_MspInit+0xbc>)
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	4a18      	ldr	r2, [pc, #96]	; (8007144 <HAL_TIM_Base_MspInit+0xbc>)
 80070e2:	f043 0304 	orr.w	r3, r3, #4
 80070e6:	61d3      	str	r3, [r2, #28]
 80070e8:	4b16      	ldr	r3, [pc, #88]	; (8007144 <HAL_TIM_Base_MspInit+0xbc>)
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	f003 0304 	and.w	r3, r3, #4
 80070f0:	613b      	str	r3, [r7, #16]
 80070f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070f4:	4b13      	ldr	r3, [pc, #76]	; (8007144 <HAL_TIM_Base_MspInit+0xbc>)
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	4a12      	ldr	r2, [pc, #72]	; (8007144 <HAL_TIM_Base_MspInit+0xbc>)
 80070fa:	f043 0308 	orr.w	r3, r3, #8
 80070fe:	6193      	str	r3, [r2, #24]
 8007100:	4b10      	ldr	r3, [pc, #64]	; (8007144 <HAL_TIM_Base_MspInit+0xbc>)
 8007102:	699b      	ldr	r3, [r3, #24]
 8007104:	f003 0308 	and.w	r3, r3, #8
 8007108:	60fb      	str	r3, [r7, #12]
 800710a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IRMP_Receive_Pin;
 800710c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007112:	2300      	movs	r3, #0
 8007114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007116:	2301      	movs	r3, #1
 8007118:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(IRMP_Receive_GPIO_Port, &GPIO_InitStruct);
 800711a:	f107 0318 	add.w	r3, r7, #24
 800711e:	4619      	mov	r1, r3
 8007120:	480a      	ldr	r0, [pc, #40]	; (800714c <HAL_TIM_Base_MspInit+0xc4>)
 8007122:	f001 fb8f 	bl	8008844 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007126:	2200      	movs	r2, #0
 8007128:	2100      	movs	r1, #0
 800712a:	201e      	movs	r0, #30
 800712c:	f000 ff0b 	bl	8007f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007130:	201e      	movs	r0, #30
 8007132:	f000 ff24 	bl	8007f7e <HAL_NVIC_EnableIRQ>
}
 8007136:	bf00      	nop
 8007138:	3728      	adds	r7, #40	; 0x28
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	40000400 	.word	0x40000400
 8007144:	40021000 	.word	0x40021000
 8007148:	40000800 	.word	0x40000800
 800714c:	40010c00 	.word	0x40010c00

08007150 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08a      	sub	sp, #40	; 0x28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007158:	f107 0314 	add.w	r3, r7, #20
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	609a      	str	r2, [r3, #8]
 8007164:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716e:	d142      	bne.n	80071f6 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007170:	4b23      	ldr	r3, [pc, #140]	; (8007200 <HAL_TIM_MspPostInit+0xb0>)
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	4a22      	ldr	r2, [pc, #136]	; (8007200 <HAL_TIM_MspPostInit+0xb0>)
 8007176:	f043 0304 	orr.w	r3, r3, #4
 800717a:	6193      	str	r3, [r2, #24]
 800717c:	4b20      	ldr	r3, [pc, #128]	; (8007200 <HAL_TIM_MspPostInit+0xb0>)
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007188:	4b1d      	ldr	r3, [pc, #116]	; (8007200 <HAL_TIM_MspPostInit+0xb0>)
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	4a1c      	ldr	r2, [pc, #112]	; (8007200 <HAL_TIM_MspPostInit+0xb0>)
 800718e:	f043 0308 	orr.w	r3, r3, #8
 8007192:	6193      	str	r3, [r2, #24]
 8007194:	4b1a      	ldr	r3, [pc, #104]	; (8007200 <HAL_TIM_MspPostInit+0xb0>)
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	f003 0308 	and.w	r3, r3, #8
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80071a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a6:	2302      	movs	r3, #2
 80071a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071aa:	2302      	movs	r3, #2
 80071ac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071ae:	f107 0314 	add.w	r3, r7, #20
 80071b2:	4619      	mov	r1, r3
 80071b4:	4813      	ldr	r0, [pc, #76]	; (8007204 <HAL_TIM_MspPostInit+0xb4>)
 80071b6:	f001 fb45 	bl	8008844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80071ba:	2308      	movs	r3, #8
 80071bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071be:	2302      	movs	r3, #2
 80071c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071c2:	2302      	movs	r3, #2
 80071c4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071c6:	f107 0314 	add.w	r3, r7, #20
 80071ca:	4619      	mov	r1, r3
 80071cc:	480e      	ldr	r0, [pc, #56]	; (8007208 <HAL_TIM_MspPostInit+0xb8>)
 80071ce:	f001 fb39 	bl	8008844 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80071d2:	4b0e      	ldr	r3, [pc, #56]	; (800720c <HAL_TIM_MspPostInit+0xbc>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
 80071d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071de:	627b      	str	r3, [r7, #36]	; 0x24
 80071e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
 80071f0:	4a06      	ldr	r2, [pc, #24]	; (800720c <HAL_TIM_MspPostInit+0xbc>)
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80071f6:	bf00      	nop
 80071f8:	3728      	adds	r7, #40	; 0x28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	40021000 	.word	0x40021000
 8007204:	40010800 	.word	0x40010800
 8007208:	40010c00 	.word	0x40010c00
 800720c:	40010000 	.word	0x40010000

08007210 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007214:	4b11      	ldr	r3, [pc, #68]	; (800725c <MX_USART1_UART_Init+0x4c>)
 8007216:	4a12      	ldr	r2, [pc, #72]	; (8007260 <MX_USART1_UART_Init+0x50>)
 8007218:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800721a:	4b10      	ldr	r3, [pc, #64]	; (800725c <MX_USART1_UART_Init+0x4c>)
 800721c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007220:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007222:	4b0e      	ldr	r3, [pc, #56]	; (800725c <MX_USART1_UART_Init+0x4c>)
 8007224:	2200      	movs	r2, #0
 8007226:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007228:	4b0c      	ldr	r3, [pc, #48]	; (800725c <MX_USART1_UART_Init+0x4c>)
 800722a:	2200      	movs	r2, #0
 800722c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800722e:	4b0b      	ldr	r3, [pc, #44]	; (800725c <MX_USART1_UART_Init+0x4c>)
 8007230:	2200      	movs	r2, #0
 8007232:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007234:	4b09      	ldr	r3, [pc, #36]	; (800725c <MX_USART1_UART_Init+0x4c>)
 8007236:	220c      	movs	r2, #12
 8007238:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800723a:	4b08      	ldr	r3, [pc, #32]	; (800725c <MX_USART1_UART_Init+0x4c>)
 800723c:	2200      	movs	r2, #0
 800723e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007240:	4b06      	ldr	r3, [pc, #24]	; (800725c <MX_USART1_UART_Init+0x4c>)
 8007242:	2200      	movs	r2, #0
 8007244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007246:	4805      	ldr	r0, [pc, #20]	; (800725c <MX_USART1_UART_Init+0x4c>)
 8007248:	f003 fc4a 	bl	800aae0 <HAL_UART_Init>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007252:	f7ff fc51 	bl	8006af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007256:	bf00      	nop
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000504 	.word	0x20000504
 8007260:	40013800 	.word	0x40013800

08007264 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b088      	sub	sp, #32
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800726c:	f107 0310 	add.w	r3, r7, #16
 8007270:	2200      	movs	r2, #0
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	605a      	str	r2, [r3, #4]
 8007276:	609a      	str	r2, [r3, #8]
 8007278:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a20      	ldr	r2, [pc, #128]	; (8007300 <HAL_UART_MspInit+0x9c>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d139      	bne.n	80072f8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007284:	4b1f      	ldr	r3, [pc, #124]	; (8007304 <HAL_UART_MspInit+0xa0>)
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	4a1e      	ldr	r2, [pc, #120]	; (8007304 <HAL_UART_MspInit+0xa0>)
 800728a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800728e:	6193      	str	r3, [r2, #24]
 8007290:	4b1c      	ldr	r3, [pc, #112]	; (8007304 <HAL_UART_MspInit+0xa0>)
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800729c:	4b19      	ldr	r3, [pc, #100]	; (8007304 <HAL_UART_MspInit+0xa0>)
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	4a18      	ldr	r2, [pc, #96]	; (8007304 <HAL_UART_MspInit+0xa0>)
 80072a2:	f043 0304 	orr.w	r3, r3, #4
 80072a6:	6193      	str	r3, [r2, #24]
 80072a8:	4b16      	ldr	r3, [pc, #88]	; (8007304 <HAL_UART_MspInit+0xa0>)
 80072aa:	699b      	ldr	r3, [r3, #24]
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	60bb      	str	r3, [r7, #8]
 80072b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80072b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ba:	2302      	movs	r3, #2
 80072bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80072be:	2303      	movs	r3, #3
 80072c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072c2:	f107 0310 	add.w	r3, r7, #16
 80072c6:	4619      	mov	r1, r3
 80072c8:	480f      	ldr	r0, [pc, #60]	; (8007308 <HAL_UART_MspInit+0xa4>)
 80072ca:	f001 fabb 	bl	8008844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80072ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072d4:	2300      	movs	r3, #0
 80072d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072d8:	2300      	movs	r3, #0
 80072da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072dc:	f107 0310 	add.w	r3, r7, #16
 80072e0:	4619      	mov	r1, r3
 80072e2:	4809      	ldr	r0, [pc, #36]	; (8007308 <HAL_UART_MspInit+0xa4>)
 80072e4:	f001 faae 	bl	8008844 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80072e8:	2200      	movs	r2, #0
 80072ea:	2100      	movs	r1, #0
 80072ec:	2025      	movs	r0, #37	; 0x25
 80072ee:	f000 fe2a 	bl	8007f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80072f2:	2025      	movs	r0, #37	; 0x25
 80072f4:	f000 fe43 	bl	8007f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80072f8:	bf00      	nop
 80072fa:	3720      	adds	r7, #32
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	40013800 	.word	0x40013800
 8007304:	40021000 	.word	0x40021000
 8007308:	40010800 	.word	0x40010800

0800730c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800730c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800730e:	e003      	b.n	8007318 <LoopCopyDataInit>

08007310 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8007310:	4b0b      	ldr	r3, [pc, #44]	; (8007340 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8007312:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8007314:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8007316:	3104      	adds	r1, #4

08007318 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8007318:	480a      	ldr	r0, [pc, #40]	; (8007344 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800731a:	4b0b      	ldr	r3, [pc, #44]	; (8007348 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800731c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800731e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8007320:	d3f6      	bcc.n	8007310 <CopyDataInit>
  ldr r2, =_sbss
 8007322:	4a0a      	ldr	r2, [pc, #40]	; (800734c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8007324:	e002      	b.n	800732c <LoopFillZerobss>

08007326 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8007326:	2300      	movs	r3, #0
  str r3, [r2], #4
 8007328:	f842 3b04 	str.w	r3, [r2], #4

0800732c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800732c:	4b08      	ldr	r3, [pc, #32]	; (8007350 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800732e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8007330:	d3f9      	bcc.n	8007326 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007332:	f7ff fd33 	bl	8006d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007336:	f004 f80f 	bl	800b358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800733a:	f7ff fafb 	bl	8006934 <main>
  bx lr
 800733e:	4770      	bx	lr
  ldr r3, =_sidata
 8007340:	0800ff8c 	.word	0x0800ff8c
  ldr r0, =_sdata
 8007344:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8007348:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 800734c:	200001ec 	.word	0x200001ec
  ldr r3, = _ebss
 8007350:	20000558 	.word	0x20000558

08007354 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007354:	e7fe      	b.n	8007354 <ADC3_IRQHandler>
	...

08007358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800735c:	4b08      	ldr	r3, [pc, #32]	; (8007380 <HAL_Init+0x28>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a07      	ldr	r2, [pc, #28]	; (8007380 <HAL_Init+0x28>)
 8007362:	f043 0310 	orr.w	r3, r3, #16
 8007366:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007368:	2003      	movs	r0, #3
 800736a:	f000 fde1 	bl	8007f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800736e:	2000      	movs	r0, #0
 8007370:	f000 f808 	bl	8007384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007374:	f7ff fbc6 	bl	8006b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	40022000 	.word	0x40022000

08007384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800738c:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <HAL_InitTick+0x54>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	4b12      	ldr	r3, [pc, #72]	; (80073dc <HAL_InitTick+0x58>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	4619      	mov	r1, r3
 8007396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800739a:	fbb3 f3f1 	udiv	r3, r3, r1
 800739e:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fdf9 	bl	8007f9a <HAL_SYSTICK_Config>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e00e      	b.n	80073d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b0f      	cmp	r3, #15
 80073b6:	d80a      	bhi.n	80073ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80073b8:	2200      	movs	r2, #0
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	f04f 30ff 	mov.w	r0, #4294967295
 80073c0:	f000 fdc1 	bl	8007f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80073c4:	4a06      	ldr	r2, [pc, #24]	; (80073e0 <HAL_InitTick+0x5c>)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	e000      	b.n	80073d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	20000010 	.word	0x20000010
 80073dc:	20000018 	.word	0x20000018
 80073e0:	20000014 	.word	0x20000014

080073e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <HAL_IncTick+0x1c>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	4b05      	ldr	r3, [pc, #20]	; (8007404 <HAL_IncTick+0x20>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4413      	add	r3, r2
 80073f4:	4a03      	ldr	r2, [pc, #12]	; (8007404 <HAL_IncTick+0x20>)
 80073f6:	6013      	str	r3, [r2, #0]
}
 80073f8:	bf00      	nop
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr
 8007400:	20000018 	.word	0x20000018
 8007404:	20000544 	.word	0x20000544

08007408 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
  return uwTick;
 800740c:	4b02      	ldr	r3, [pc, #8]	; (8007418 <HAL_GetTick+0x10>)
 800740e:	681b      	ldr	r3, [r3, #0]
}
 8007410:	4618      	mov	r0, r3
 8007412:	46bd      	mov	sp, r7
 8007414:	bc80      	pop	{r7}
 8007416:	4770      	bx	lr
 8007418:	20000544 	.word	0x20000544

0800741c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007424:	f7ff fff0 	bl	8007408 <HAL_GetTick>
 8007428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007434:	d005      	beq.n	8007442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007436:	4b0a      	ldr	r3, [pc, #40]	; (8007460 <HAL_Delay+0x44>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007442:	bf00      	nop
 8007444:	f7ff ffe0 	bl	8007408 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	429a      	cmp	r2, r3
 8007452:	d8f7      	bhi.n	8007444 <HAL_Delay+0x28>
  {
  }
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	20000018 	.word	0x20000018

08007464 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b086      	sub	sp, #24
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8007474:	2300      	movs	r3, #0
 8007476:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e0ce      	b.n	8007624 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007490:	2b00      	cmp	r3, #0
 8007492:	d109      	bne.n	80074a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f7fa f9ce 	bl	8001844 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fbcb 	bl	8007c44 <ADC_ConversionStop_Disable>
 80074ae:	4603      	mov	r3, r0
 80074b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b6:	f003 0310 	and.w	r3, r3, #16
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	f040 80a9 	bne.w	8007612 <HAL_ADC_Init+0x1ae>
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	f040 80a5 	bne.w	8007612 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80074d0:	f023 0302 	bic.w	r3, r3, #2
 80074d4:	f043 0202 	orr.w	r2, r3, #2
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4951      	ldr	r1, [pc, #324]	; (800762c <HAL_ADC_Init+0x1c8>)
 80074e6:	428b      	cmp	r3, r1
 80074e8:	d10a      	bne.n	8007500 <HAL_ADC_Init+0x9c>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80074f2:	d002      	beq.n	80074fa <HAL_ADC_Init+0x96>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	69db      	ldr	r3, [r3, #28]
 80074f8:	e004      	b.n	8007504 <HAL_ADC_Init+0xa0>
 80074fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80074fe:	e001      	b.n	8007504 <HAL_ADC_Init+0xa0>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8007504:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	7b1b      	ldrb	r3, [r3, #12]
 800750a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800750c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800750e:	68ba      	ldr	r2, [r7, #8]
 8007510:	4313      	orrs	r3, r2
 8007512:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800751c:	d003      	beq.n	8007526 <HAL_ADC_Init+0xc2>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d102      	bne.n	800752c <HAL_ADC_Init+0xc8>
 8007526:	f44f 7380 	mov.w	r3, #256	; 0x100
 800752a:	e000      	b.n	800752e <HAL_ADC_Init+0xca>
 800752c:	2300      	movs	r3, #0
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	4313      	orrs	r3, r2
 8007532:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	7d1b      	ldrb	r3, [r3, #20]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d119      	bne.n	8007570 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	7b1b      	ldrb	r3, [r3, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d109      	bne.n	8007558 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	3b01      	subs	r3, #1
 800754a:	035a      	lsls	r2, r3, #13
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007554:	613b      	str	r3, [r7, #16]
 8007556:	e00b      	b.n	8007570 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755c:	f043 0220 	orr.w	r2, r3, #32
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	f043 0201 	orr.w	r2, r3, #1
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	430a      	orrs	r2, r1
 8007582:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	4b29      	ldr	r3, [pc, #164]	; (8007630 <HAL_ADC_Init+0x1cc>)
 800758c:	4013      	ands	r3, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6812      	ldr	r2, [r2, #0]
 8007592:	68b9      	ldr	r1, [r7, #8]
 8007594:	430b      	orrs	r3, r1
 8007596:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075a0:	d003      	beq.n	80075aa <HAL_ADC_Init+0x146>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d104      	bne.n	80075b4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	051b      	lsls	r3, r3, #20
 80075b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	430a      	orrs	r2, r1
 80075c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689a      	ldr	r2, [r3, #8]
 80075ce:	4b19      	ldr	r3, [pc, #100]	; (8007634 <HAL_ADC_Init+0x1d0>)
 80075d0:	4013      	ands	r3, r2
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d10b      	bne.n	80075f0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e2:	f023 0303 	bic.w	r3, r3, #3
 80075e6:	f043 0201 	orr.w	r2, r3, #1
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80075ee:	e018      	b.n	8007622 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f4:	f023 0312 	bic.w	r3, r3, #18
 80075f8:	f043 0210 	orr.w	r2, r3, #16
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	f043 0201 	orr.w	r2, r3, #1
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007610:	e007      	b.n	8007622 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007616:	f043 0210 	orr.w	r2, r3, #16
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007622:	7dfb      	ldrb	r3, [r7, #23]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	40013c00 	.word	0x40013c00
 8007630:	ffe1f7fd 	.word	0xffe1f7fd
 8007634:	ff1f0efe 	.word	0xff1f0efe

08007638 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007644:	2300      	movs	r3, #0
 8007646:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a64      	ldr	r2, [pc, #400]	; (80077e0 <HAL_ADC_Start_DMA+0x1a8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d004      	beq.n	800765c <HAL_ADC_Start_DMA+0x24>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a63      	ldr	r2, [pc, #396]	; (80077e4 <HAL_ADC_Start_DMA+0x1ac>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d106      	bne.n	800766a <HAL_ADC_Start_DMA+0x32>
 800765c:	4b60      	ldr	r3, [pc, #384]	; (80077e0 <HAL_ADC_Start_DMA+0x1a8>)
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8007664:	2b00      	cmp	r3, #0
 8007666:	f040 80b3 	bne.w	80077d0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007670:	2b01      	cmp	r3, #1
 8007672:	d101      	bne.n	8007678 <HAL_ADC_Start_DMA+0x40>
 8007674:	2302      	movs	r3, #2
 8007676:	e0ae      	b.n	80077d6 <HAL_ADC_Start_DMA+0x19e>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fa8d 	bl	8007ba0 <ADC_Enable>
 8007686:	4603      	mov	r3, r0
 8007688:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800768a:	7dfb      	ldrb	r3, [r7, #23]
 800768c:	2b00      	cmp	r3, #0
 800768e:	f040 809a 	bne.w	80077c6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007696:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800769a:	f023 0301 	bic.w	r3, r3, #1
 800769e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a4e      	ldr	r2, [pc, #312]	; (80077e4 <HAL_ADC_Start_DMA+0x1ac>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d105      	bne.n	80076bc <HAL_ADC_Start_DMA+0x84>
 80076b0:	4b4b      	ldr	r3, [pc, #300]	; (80077e0 <HAL_ADC_Start_DMA+0x1a8>)
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d115      	bne.n	80076e8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d026      	beq.n	8007724 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80076de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80076e6:	e01d      	b.n	8007724 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a39      	ldr	r2, [pc, #228]	; (80077e0 <HAL_ADC_Start_DMA+0x1a8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d004      	beq.n	8007708 <HAL_ADC_Start_DMA+0xd0>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a38      	ldr	r2, [pc, #224]	; (80077e4 <HAL_ADC_Start_DMA+0x1ac>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d10d      	bne.n	8007724 <HAL_ADC_Start_DMA+0xec>
 8007708:	4b35      	ldr	r3, [pc, #212]	; (80077e0 <HAL_ADC_Start_DMA+0x1a8>)
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007710:	2b00      	cmp	r3, #0
 8007712:	d007      	beq.n	8007724 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007718:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800771c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d006      	beq.n	800773e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	f023 0206 	bic.w	r2, r3, #6
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	62da      	str	r2, [r3, #44]	; 0x2c
 800773c:	e002      	b.n	8007744 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	4a25      	ldr	r2, [pc, #148]	; (80077e8 <HAL_ADC_Start_DMA+0x1b0>)
 8007752:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6a1b      	ldr	r3, [r3, #32]
 8007758:	4a24      	ldr	r2, [pc, #144]	; (80077ec <HAL_ADC_Start_DMA+0x1b4>)
 800775a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	4a23      	ldr	r2, [pc, #140]	; (80077f0 <HAL_ADC_Start_DMA+0x1b8>)
 8007762:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f06f 0202 	mvn.w	r2, #2
 800776c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	689a      	ldr	r2, [r3, #8]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800777c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a18      	ldr	r0, [r3, #32]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	334c      	adds	r3, #76	; 0x4c
 8007788:	4619      	mov	r1, r3
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f000 fc87 	bl	80080a0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800779c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80077a0:	d108      	bne.n	80077b4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	689a      	ldr	r2, [r3, #8]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80077b0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80077b2:	e00f      	b.n	80077d4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689a      	ldr	r2, [r3, #8]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80077c2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80077c4:	e006      	b.n	80077d4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80077ce:	e001      	b.n	80077d4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	40012400 	.word	0x40012400
 80077e4:	40012800 	.word	0x40012800
 80077e8:	08007cb9 	.word	0x08007cb9
 80077ec:	08007d35 	.word	0x08007d35
 80077f0:	08007d51 	.word	0x08007d51

080077f4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b20      	cmp	r3, #32
 8007808:	d140      	bne.n	800788c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b02      	cmp	r3, #2
 8007816:	d139      	bne.n	800788c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781c:	f003 0310 	and.w	r3, r3, #16
 8007820:	2b00      	cmp	r3, #0
 8007822:	d105      	bne.n	8007830 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007828:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800783a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800783e:	d11d      	bne.n	800787c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007844:	2b00      	cmp	r3, #0
 8007846:	d119      	bne.n	800787c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f022 0220 	bic.w	r2, r2, #32
 8007856:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800785c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800786c:	2b00      	cmp	r3, #0
 800786e:	d105      	bne.n	800787c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	f043 0201 	orr.w	r2, r3, #1
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f7fe fd6b 	bl	8006358 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f06f 0212 	mvn.w	r2, #18
 800788a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007896:	2b80      	cmp	r3, #128	; 0x80
 8007898:	d14f      	bne.n	800793a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0304 	and.w	r3, r3, #4
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d148      	bne.n	800793a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	f003 0310 	and.w	r3, r3, #16
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d105      	bne.n	80078c0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80078ca:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80078ce:	d012      	beq.n	80078f6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d125      	bne.n	800792a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80078e8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80078ec:	d11d      	bne.n	800792a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d119      	bne.n	800792a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007904:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791a:	2b00      	cmp	r3, #0
 800791c:	d105      	bne.n	800792a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007922:	f043 0201 	orr.w	r2, r3, #1
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fa2a 	bl	8007d84 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f06f 020c 	mvn.w	r2, #12
 8007938:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007944:	2b40      	cmp	r3, #64	; 0x40
 8007946:	d114      	bne.n	8007972 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b01      	cmp	r3, #1
 8007954:	d10d      	bne.n	8007972 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f812 	bl	800798c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f06f 0201 	mvn.w	r2, #1
 8007970:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800797a:	b480      	push	{r7}
 800797c:	b083      	sub	sp, #12
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007982:	bf00      	nop
 8007984:	370c      	adds	r7, #12
 8007986:	46bd      	mov	sp, r7
 8007988:	bc80      	pop	{r7}
 800798a:	4770      	bx	lr

0800798c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	bc80      	pop	{r7}
 800799c:	4770      	bx	lr

0800799e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800799e:	b480      	push	{r7}
 80079a0:	b083      	sub	sp, #12
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80079a6:	bf00      	nop
 80079a8:	370c      	adds	r7, #12
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bc80      	pop	{r7}
 80079ae:	4770      	bx	lr

080079b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d101      	bne.n	80079d0 <HAL_ADC_ConfigChannel+0x20>
 80079cc:	2302      	movs	r3, #2
 80079ce:	e0dc      	b.n	8007b8a <HAL_ADC_ConfigChannel+0x1da>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	2b06      	cmp	r3, #6
 80079de:	d81c      	bhi.n	8007a1a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	3b05      	subs	r3, #5
 80079f2:	221f      	movs	r2, #31
 80079f4:	fa02 f303 	lsl.w	r3, r2, r3
 80079f8:	43db      	mvns	r3, r3
 80079fa:	4019      	ands	r1, r3
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	6818      	ldr	r0, [r3, #0]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	685a      	ldr	r2, [r3, #4]
 8007a04:	4613      	mov	r3, r2
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	3b05      	subs	r3, #5
 8007a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	635a      	str	r2, [r3, #52]	; 0x34
 8007a18:	e03c      	b.n	8007a94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2b0c      	cmp	r3, #12
 8007a20:	d81c      	bhi.n	8007a5c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	3b23      	subs	r3, #35	; 0x23
 8007a34:	221f      	movs	r2, #31
 8007a36:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3a:	43db      	mvns	r3, r3
 8007a3c:	4019      	ands	r1, r3
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	685a      	ldr	r2, [r3, #4]
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	3b23      	subs	r3, #35	; 0x23
 8007a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	631a      	str	r2, [r3, #48]	; 0x30
 8007a5a:	e01b      	b.n	8007a94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	4613      	mov	r3, r2
 8007a68:	009b      	lsls	r3, r3, #2
 8007a6a:	4413      	add	r3, r2
 8007a6c:	3b41      	subs	r3, #65	; 0x41
 8007a6e:	221f      	movs	r2, #31
 8007a70:	fa02 f303 	lsl.w	r3, r2, r3
 8007a74:	43db      	mvns	r3, r3
 8007a76:	4019      	ands	r1, r3
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	3b41      	subs	r3, #65	; 0x41
 8007a88:	fa00 f203 	lsl.w	r2, r0, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b09      	cmp	r3, #9
 8007a9a:	d91c      	bls.n	8007ad6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68d9      	ldr	r1, [r3, #12]
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	4413      	add	r3, r2
 8007aac:	3b1e      	subs	r3, #30
 8007aae:	2207      	movs	r2, #7
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	43db      	mvns	r3, r3
 8007ab6:	4019      	ands	r1, r3
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	6898      	ldr	r0, [r3, #8]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	4413      	add	r3, r2
 8007ac6:	3b1e      	subs	r3, #30
 8007ac8:	fa00 f203 	lsl.w	r2, r0, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	60da      	str	r2, [r3, #12]
 8007ad4:	e019      	b.n	8007b0a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6919      	ldr	r1, [r3, #16]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	4413      	add	r3, r2
 8007ae6:	2207      	movs	r2, #7
 8007ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aec:	43db      	mvns	r3, r3
 8007aee:	4019      	ands	r1, r3
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	6898      	ldr	r0, [r3, #8]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	4613      	mov	r3, r2
 8007afa:	005b      	lsls	r3, r3, #1
 8007afc:	4413      	add	r3, r2
 8007afe:	fa00 f203 	lsl.w	r2, r0, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b10      	cmp	r3, #16
 8007b10:	d003      	beq.n	8007b1a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8007b16:	2b11      	cmp	r3, #17
 8007b18:	d132      	bne.n	8007b80 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a1d      	ldr	r2, [pc, #116]	; (8007b94 <HAL_ADC_ConfigChannel+0x1e4>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d125      	bne.n	8007b70 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d126      	bne.n	8007b80 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	689a      	ldr	r2, [r3, #8]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007b40:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b10      	cmp	r3, #16
 8007b48:	d11a      	bne.n	8007b80 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007b4a:	4b13      	ldr	r3, [pc, #76]	; (8007b98 <HAL_ADC_ConfigChannel+0x1e8>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a13      	ldr	r2, [pc, #76]	; (8007b9c <HAL_ADC_ConfigChannel+0x1ec>)
 8007b50:	fba2 2303 	umull	r2, r3, r2, r3
 8007b54:	0c9a      	lsrs	r2, r3, #18
 8007b56:	4613      	mov	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	005b      	lsls	r3, r3, #1
 8007b5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007b60:	e002      	b.n	8007b68 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	3b01      	subs	r3, #1
 8007b66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1f9      	bne.n	8007b62 <HAL_ADC_ConfigChannel+0x1b2>
 8007b6e:	e007      	b.n	8007b80 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b74:	f043 0220 	orr.w	r2, r3, #32
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8007b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bc80      	pop	{r7}
 8007b92:	4770      	bx	lr
 8007b94:	40012400 	.word	0x40012400
 8007b98:	20000010 	.word	0x20000010
 8007b9c:	431bde83 	.word	0x431bde83

08007ba0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 0301 	and.w	r3, r3, #1
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d039      	beq.n	8007c32 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f042 0201 	orr.w	r2, r2, #1
 8007bcc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007bce:	4b1b      	ldr	r3, [pc, #108]	; (8007c3c <ADC_Enable+0x9c>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a1b      	ldr	r2, [pc, #108]	; (8007c40 <ADC_Enable+0xa0>)
 8007bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd8:	0c9b      	lsrs	r3, r3, #18
 8007bda:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007bdc:	e002      	b.n	8007be4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	3b01      	subs	r3, #1
 8007be2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1f9      	bne.n	8007bde <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007bea:	f7ff fc0d 	bl	8007408 <HAL_GetTick>
 8007bee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007bf0:	e018      	b.n	8007c24 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007bf2:	f7ff fc09 	bl	8007408 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d911      	bls.n	8007c24 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c04:	f043 0210 	orr.w	r2, r3, #16
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c10:	f043 0201 	orr.w	r2, r3, #1
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e007      	b.n	8007c34 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d1df      	bne.n	8007bf2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20000010 	.word	0x20000010
 8007c40:	431bde83 	.word	0x431bde83

08007c44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d127      	bne.n	8007cae <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 0201 	bic.w	r2, r2, #1
 8007c6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007c6e:	f7ff fbcb 	bl	8007408 <HAL_GetTick>
 8007c72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007c74:	e014      	b.n	8007ca0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007c76:	f7ff fbc7 	bl	8007408 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	2b02      	cmp	r3, #2
 8007c82:	d90d      	bls.n	8007ca0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c88:	f043 0210 	orr.w	r2, r3, #16
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	f043 0201 	orr.w	r2, r3, #1
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e007      	b.n	8007cb0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d0e3      	beq.n	8007c76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d127      	bne.n	8007d22 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007ce8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8007cec:	d115      	bne.n	8007d1a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d111      	bne.n	8007d1a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d105      	bne.n	8007d1a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d12:	f043 0201 	orr.w	r2, r3, #1
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f7fe fb1c 	bl	8006358 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8007d20:	e004      	b.n	8007d2c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	4798      	blx	r3
}
 8007d2c:	bf00      	nop
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d40:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007d42:	68f8      	ldr	r0, [r7, #12]
 8007d44:	f7ff fe19 	bl	800797a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d48:	bf00      	nop
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6e:	f043 0204 	orr.w	r2, r3, #4
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f7ff fe11 	bl	800799e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d7c:	bf00      	nop
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bc80      	pop	{r7}
 8007d94:	4770      	bx	lr
	...

08007d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007da8:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <__NVIC_SetPriorityGrouping+0x44>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007db4:	4013      	ands	r3, r2
 8007db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007dca:	4a04      	ldr	r2, [pc, #16]	; (8007ddc <__NVIC_SetPriorityGrouping+0x44>)
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	60d3      	str	r3, [r2, #12]
}
 8007dd0:	bf00      	nop
 8007dd2:	3714      	adds	r7, #20
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bc80      	pop	{r7}
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	e000ed00 	.word	0xe000ed00

08007de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007de0:	b480      	push	{r7}
 8007de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007de4:	4b04      	ldr	r3, [pc, #16]	; (8007df8 <__NVIC_GetPriorityGrouping+0x18>)
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	0a1b      	lsrs	r3, r3, #8
 8007dea:	f003 0307 	and.w	r3, r3, #7
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bc80      	pop	{r7}
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	e000ed00 	.word	0xe000ed00

08007dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	4603      	mov	r3, r0
 8007e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	db0b      	blt.n	8007e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	f003 021f 	and.w	r2, r3, #31
 8007e14:	4906      	ldr	r1, [pc, #24]	; (8007e30 <__NVIC_EnableIRQ+0x34>)
 8007e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e1a:	095b      	lsrs	r3, r3, #5
 8007e1c:	2001      	movs	r0, #1
 8007e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8007e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bc80      	pop	{r7}
 8007e2e:	4770      	bx	lr
 8007e30:	e000e100 	.word	0xe000e100

08007e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	6039      	str	r1, [r7, #0]
 8007e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	db0a      	blt.n	8007e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	490c      	ldr	r1, [pc, #48]	; (8007e80 <__NVIC_SetPriority+0x4c>)
 8007e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e52:	0112      	lsls	r2, r2, #4
 8007e54:	b2d2      	uxtb	r2, r2
 8007e56:	440b      	add	r3, r1
 8007e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007e5c:	e00a      	b.n	8007e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	b2da      	uxtb	r2, r3
 8007e62:	4908      	ldr	r1, [pc, #32]	; (8007e84 <__NVIC_SetPriority+0x50>)
 8007e64:	79fb      	ldrb	r3, [r7, #7]
 8007e66:	f003 030f 	and.w	r3, r3, #15
 8007e6a:	3b04      	subs	r3, #4
 8007e6c:	0112      	lsls	r2, r2, #4
 8007e6e:	b2d2      	uxtb	r2, r2
 8007e70:	440b      	add	r3, r1
 8007e72:	761a      	strb	r2, [r3, #24]
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc80      	pop	{r7}
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	e000e100 	.word	0xe000e100
 8007e84:	e000ed00 	.word	0xe000ed00

08007e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b089      	sub	sp, #36	; 0x24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f003 0307 	and.w	r3, r3, #7
 8007e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	f1c3 0307 	rsb	r3, r3, #7
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	bf28      	it	cs
 8007ea6:	2304      	movcs	r3, #4
 8007ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	3304      	adds	r3, #4
 8007eae:	2b06      	cmp	r3, #6
 8007eb0:	d902      	bls.n	8007eb8 <NVIC_EncodePriority+0x30>
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	3b03      	subs	r3, #3
 8007eb6:	e000      	b.n	8007eba <NVIC_EncodePriority+0x32>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec6:	43da      	mvns	r2, r3
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	401a      	ands	r2, r3
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eda:	43d9      	mvns	r1, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ee0:	4313      	orrs	r3, r2
         );
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3724      	adds	r7, #36	; 0x24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr

08007eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007efc:	d301      	bcc.n	8007f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007efe:	2301      	movs	r3, #1
 8007f00:	e00f      	b.n	8007f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f02:	4a0a      	ldr	r2, [pc, #40]	; (8007f2c <SysTick_Config+0x40>)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f0a:	210f      	movs	r1, #15
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f10:	f7ff ff90 	bl	8007e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f14:	4b05      	ldr	r3, [pc, #20]	; (8007f2c <SysTick_Config+0x40>)
 8007f16:	2200      	movs	r2, #0
 8007f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f1a:	4b04      	ldr	r3, [pc, #16]	; (8007f2c <SysTick_Config+0x40>)
 8007f1c:	2207      	movs	r2, #7
 8007f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	e000e010 	.word	0xe000e010

08007f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f7ff ff2d 	bl	8007d98 <__NVIC_SetPriorityGrouping>
}
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b086      	sub	sp, #24
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]
 8007f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007f54:	2300      	movs	r3, #0
 8007f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007f58:	f7ff ff42 	bl	8007de0 <__NVIC_GetPriorityGrouping>
 8007f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	68b9      	ldr	r1, [r7, #8]
 8007f62:	6978      	ldr	r0, [r7, #20]
 8007f64:	f7ff ff90 	bl	8007e88 <NVIC_EncodePriority>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f6e:	4611      	mov	r1, r2
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff ff5f 	bl	8007e34 <__NVIC_SetPriority>
}
 8007f76:	bf00      	nop
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b082      	sub	sp, #8
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	4603      	mov	r3, r0
 8007f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f7ff ff35 	bl	8007dfc <__NVIC_EnableIRQ>
}
 8007f92:	bf00      	nop
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff ffa2 	bl	8007eec <SysTick_Config>
 8007fa8:	4603      	mov	r3, r0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e059      	b.n	800807e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	4b2d      	ldr	r3, [pc, #180]	; (8008088 <HAL_DMA_Init+0xd4>)
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d80f      	bhi.n	8007ff6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	4b2b      	ldr	r3, [pc, #172]	; (800808c <HAL_DMA_Init+0xd8>)
 8007fde:	4413      	add	r3, r2
 8007fe0:	4a2b      	ldr	r2, [pc, #172]	; (8008090 <HAL_DMA_Init+0xdc>)
 8007fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe6:	091b      	lsrs	r3, r3, #4
 8007fe8:	009a      	lsls	r2, r3, #2
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a28      	ldr	r2, [pc, #160]	; (8008094 <HAL_DMA_Init+0xe0>)
 8007ff2:	63da      	str	r2, [r3, #60]	; 0x3c
 8007ff4:	e00e      	b.n	8008014 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	4b26      	ldr	r3, [pc, #152]	; (8008098 <HAL_DMA_Init+0xe4>)
 8007ffe:	4413      	add	r3, r2
 8008000:	4a23      	ldr	r2, [pc, #140]	; (8008090 <HAL_DMA_Init+0xdc>)
 8008002:	fba2 2303 	umull	r2, r3, r2, r3
 8008006:	091b      	lsrs	r3, r3, #4
 8008008:	009a      	lsls	r2, r3, #2
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a22      	ldr	r2, [pc, #136]	; (800809c <HAL_DMA_Init+0xe8>)
 8008012:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800802a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800802e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8008038:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008044:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008050:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	4313      	orrs	r3, r2
 800805c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	bc80      	pop	{r7}
 8008086:	4770      	bx	lr
 8008088:	40020407 	.word	0x40020407
 800808c:	bffdfff8 	.word	0xbffdfff8
 8008090:	cccccccd 	.word	0xcccccccd
 8008094:	40020000 	.word	0x40020000
 8008098:	bffdfbf8 	.word	0xbffdfbf8
 800809c:	40020400 	.word	0x40020400

080080a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
 80080ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d101      	bne.n	80080c0 <HAL_DMA_Start_IT+0x20>
 80080bc:	2302      	movs	r3, #2
 80080be:	e04a      	b.n	8008156 <HAL_DMA_Start_IT+0xb6>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d13a      	bne.n	8008148 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2202      	movs	r2, #2
 80080d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0201 	bic.w	r2, r2, #1
 80080ee:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	68b9      	ldr	r1, [r7, #8]
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 fb76 	bl	80087e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008100:	2b00      	cmp	r3, #0
 8008102:	d008      	beq.n	8008116 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 020e 	orr.w	r2, r2, #14
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	e00f      	b.n	8008136 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 0204 	bic.w	r2, r2, #4
 8008124:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 020a 	orr.w	r2, r2, #10
 8008134:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f042 0201 	orr.w	r2, r2, #1
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	e005      	b.n	8008154 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2200      	movs	r2, #0
 800814c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008150:	2302      	movs	r3, #2
 8008152:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8008154:	7dfb      	ldrb	r3, [r7, #23]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3718      	adds	r7, #24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
	...

08008160 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008172:	2b02      	cmp	r3, #2
 8008174:	d005      	beq.n	8008182 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2204      	movs	r2, #4
 800817a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	73fb      	strb	r3, [r7, #15]
 8008180:	e0d6      	b.n	8008330 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 020e 	bic.w	r2, r2, #14
 8008190:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0201 	bic.w	r2, r2, #1
 80081a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	4b64      	ldr	r3, [pc, #400]	; (800833c <HAL_DMA_Abort_IT+0x1dc>)
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d958      	bls.n	8008260 <HAL_DMA_Abort_IT+0x100>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a63      	ldr	r2, [pc, #396]	; (8008340 <HAL_DMA_Abort_IT+0x1e0>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d04f      	beq.n	8008258 <HAL_DMA_Abort_IT+0xf8>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a61      	ldr	r2, [pc, #388]	; (8008344 <HAL_DMA_Abort_IT+0x1e4>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d048      	beq.n	8008254 <HAL_DMA_Abort_IT+0xf4>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a60      	ldr	r2, [pc, #384]	; (8008348 <HAL_DMA_Abort_IT+0x1e8>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d040      	beq.n	800824e <HAL_DMA_Abort_IT+0xee>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a5e      	ldr	r2, [pc, #376]	; (800834c <HAL_DMA_Abort_IT+0x1ec>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d038      	beq.n	8008248 <HAL_DMA_Abort_IT+0xe8>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a5d      	ldr	r2, [pc, #372]	; (8008350 <HAL_DMA_Abort_IT+0x1f0>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d030      	beq.n	8008242 <HAL_DMA_Abort_IT+0xe2>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a5b      	ldr	r2, [pc, #364]	; (8008354 <HAL_DMA_Abort_IT+0x1f4>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d028      	beq.n	800823c <HAL_DMA_Abort_IT+0xdc>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a53      	ldr	r2, [pc, #332]	; (800833c <HAL_DMA_Abort_IT+0x1dc>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d020      	beq.n	8008236 <HAL_DMA_Abort_IT+0xd6>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a57      	ldr	r2, [pc, #348]	; (8008358 <HAL_DMA_Abort_IT+0x1f8>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d019      	beq.n	8008232 <HAL_DMA_Abort_IT+0xd2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a56      	ldr	r2, [pc, #344]	; (800835c <HAL_DMA_Abort_IT+0x1fc>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d012      	beq.n	800822e <HAL_DMA_Abort_IT+0xce>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a54      	ldr	r2, [pc, #336]	; (8008360 <HAL_DMA_Abort_IT+0x200>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d00a      	beq.n	8008228 <HAL_DMA_Abort_IT+0xc8>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a53      	ldr	r2, [pc, #332]	; (8008364 <HAL_DMA_Abort_IT+0x204>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d102      	bne.n	8008222 <HAL_DMA_Abort_IT+0xc2>
 800821c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008220:	e01b      	b.n	800825a <HAL_DMA_Abort_IT+0xfa>
 8008222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008226:	e018      	b.n	800825a <HAL_DMA_Abort_IT+0xfa>
 8008228:	f44f 7380 	mov.w	r3, #256	; 0x100
 800822c:	e015      	b.n	800825a <HAL_DMA_Abort_IT+0xfa>
 800822e:	2310      	movs	r3, #16
 8008230:	e013      	b.n	800825a <HAL_DMA_Abort_IT+0xfa>
 8008232:	2301      	movs	r3, #1
 8008234:	e011      	b.n	800825a <HAL_DMA_Abort_IT+0xfa>
 8008236:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800823a:	e00e      	b.n	800825a <HAL_DMA_Abort_IT+0xfa>
 800823c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008240:	e00b      	b.n	800825a <HAL_DMA_Abort_IT+0xfa>
 8008242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008246:	e008      	b.n	800825a <HAL_DMA_Abort_IT+0xfa>
 8008248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800824c:	e005      	b.n	800825a <HAL_DMA_Abort_IT+0xfa>
 800824e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008252:	e002      	b.n	800825a <HAL_DMA_Abort_IT+0xfa>
 8008254:	2310      	movs	r3, #16
 8008256:	e000      	b.n	800825a <HAL_DMA_Abort_IT+0xfa>
 8008258:	2301      	movs	r3, #1
 800825a:	4a43      	ldr	r2, [pc, #268]	; (8008368 <HAL_DMA_Abort_IT+0x208>)
 800825c:	6053      	str	r3, [r2, #4]
 800825e:	e057      	b.n	8008310 <HAL_DMA_Abort_IT+0x1b0>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a36      	ldr	r2, [pc, #216]	; (8008340 <HAL_DMA_Abort_IT+0x1e0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d04f      	beq.n	800830a <HAL_DMA_Abort_IT+0x1aa>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a35      	ldr	r2, [pc, #212]	; (8008344 <HAL_DMA_Abort_IT+0x1e4>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d048      	beq.n	8008306 <HAL_DMA_Abort_IT+0x1a6>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a33      	ldr	r2, [pc, #204]	; (8008348 <HAL_DMA_Abort_IT+0x1e8>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d040      	beq.n	8008300 <HAL_DMA_Abort_IT+0x1a0>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a32      	ldr	r2, [pc, #200]	; (800834c <HAL_DMA_Abort_IT+0x1ec>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d038      	beq.n	80082fa <HAL_DMA_Abort_IT+0x19a>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a30      	ldr	r2, [pc, #192]	; (8008350 <HAL_DMA_Abort_IT+0x1f0>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d030      	beq.n	80082f4 <HAL_DMA_Abort_IT+0x194>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a2f      	ldr	r2, [pc, #188]	; (8008354 <HAL_DMA_Abort_IT+0x1f4>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d028      	beq.n	80082ee <HAL_DMA_Abort_IT+0x18e>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a26      	ldr	r2, [pc, #152]	; (800833c <HAL_DMA_Abort_IT+0x1dc>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d020      	beq.n	80082e8 <HAL_DMA_Abort_IT+0x188>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a2b      	ldr	r2, [pc, #172]	; (8008358 <HAL_DMA_Abort_IT+0x1f8>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d019      	beq.n	80082e4 <HAL_DMA_Abort_IT+0x184>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a29      	ldr	r2, [pc, #164]	; (800835c <HAL_DMA_Abort_IT+0x1fc>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d012      	beq.n	80082e0 <HAL_DMA_Abort_IT+0x180>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a28      	ldr	r2, [pc, #160]	; (8008360 <HAL_DMA_Abort_IT+0x200>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d00a      	beq.n	80082da <HAL_DMA_Abort_IT+0x17a>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a26      	ldr	r2, [pc, #152]	; (8008364 <HAL_DMA_Abort_IT+0x204>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d102      	bne.n	80082d4 <HAL_DMA_Abort_IT+0x174>
 80082ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082d2:	e01b      	b.n	800830c <HAL_DMA_Abort_IT+0x1ac>
 80082d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082d8:	e018      	b.n	800830c <HAL_DMA_Abort_IT+0x1ac>
 80082da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082de:	e015      	b.n	800830c <HAL_DMA_Abort_IT+0x1ac>
 80082e0:	2310      	movs	r3, #16
 80082e2:	e013      	b.n	800830c <HAL_DMA_Abort_IT+0x1ac>
 80082e4:	2301      	movs	r3, #1
 80082e6:	e011      	b.n	800830c <HAL_DMA_Abort_IT+0x1ac>
 80082e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80082ec:	e00e      	b.n	800830c <HAL_DMA_Abort_IT+0x1ac>
 80082ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80082f2:	e00b      	b.n	800830c <HAL_DMA_Abort_IT+0x1ac>
 80082f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80082f8:	e008      	b.n	800830c <HAL_DMA_Abort_IT+0x1ac>
 80082fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082fe:	e005      	b.n	800830c <HAL_DMA_Abort_IT+0x1ac>
 8008300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008304:	e002      	b.n	800830c <HAL_DMA_Abort_IT+0x1ac>
 8008306:	2310      	movs	r3, #16
 8008308:	e000      	b.n	800830c <HAL_DMA_Abort_IT+0x1ac>
 800830a:	2301      	movs	r3, #1
 800830c:	4a17      	ldr	r2, [pc, #92]	; (800836c <HAL_DMA_Abort_IT+0x20c>)
 800830e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	4798      	blx	r3
    } 
  }
  return status;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
 800833a:	bf00      	nop
 800833c:	40020080 	.word	0x40020080
 8008340:	40020008 	.word	0x40020008
 8008344:	4002001c 	.word	0x4002001c
 8008348:	40020030 	.word	0x40020030
 800834c:	40020044 	.word	0x40020044
 8008350:	40020058 	.word	0x40020058
 8008354:	4002006c 	.word	0x4002006c
 8008358:	40020408 	.word	0x40020408
 800835c:	4002041c 	.word	0x4002041c
 8008360:	40020430 	.word	0x40020430
 8008364:	40020444 	.word	0x40020444
 8008368:	40020400 	.word	0x40020400
 800836c:	40020000 	.word	0x40020000

08008370 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	2204      	movs	r2, #4
 800838e:	409a      	lsls	r2, r3
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4013      	ands	r3, r2
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 80d6 	beq.w	8008546 <HAL_DMA_IRQHandler+0x1d6>
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 80d0 	beq.w	8008546 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0320 	and.w	r3, r3, #32
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d107      	bne.n	80083c4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 0204 	bic.w	r2, r2, #4
 80083c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	4b9b      	ldr	r3, [pc, #620]	; (8008638 <HAL_DMA_IRQHandler+0x2c8>)
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d958      	bls.n	8008482 <HAL_DMA_IRQHandler+0x112>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a99      	ldr	r2, [pc, #612]	; (800863c <HAL_DMA_IRQHandler+0x2cc>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d04f      	beq.n	800847a <HAL_DMA_IRQHandler+0x10a>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a98      	ldr	r2, [pc, #608]	; (8008640 <HAL_DMA_IRQHandler+0x2d0>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d048      	beq.n	8008476 <HAL_DMA_IRQHandler+0x106>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a96      	ldr	r2, [pc, #600]	; (8008644 <HAL_DMA_IRQHandler+0x2d4>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d040      	beq.n	8008470 <HAL_DMA_IRQHandler+0x100>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a95      	ldr	r2, [pc, #596]	; (8008648 <HAL_DMA_IRQHandler+0x2d8>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d038      	beq.n	800846a <HAL_DMA_IRQHandler+0xfa>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a93      	ldr	r2, [pc, #588]	; (800864c <HAL_DMA_IRQHandler+0x2dc>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d030      	beq.n	8008464 <HAL_DMA_IRQHandler+0xf4>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a92      	ldr	r2, [pc, #584]	; (8008650 <HAL_DMA_IRQHandler+0x2e0>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d028      	beq.n	800845e <HAL_DMA_IRQHandler+0xee>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a89      	ldr	r2, [pc, #548]	; (8008638 <HAL_DMA_IRQHandler+0x2c8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d020      	beq.n	8008458 <HAL_DMA_IRQHandler+0xe8>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a8e      	ldr	r2, [pc, #568]	; (8008654 <HAL_DMA_IRQHandler+0x2e4>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d019      	beq.n	8008454 <HAL_DMA_IRQHandler+0xe4>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a8c      	ldr	r2, [pc, #560]	; (8008658 <HAL_DMA_IRQHandler+0x2e8>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d012      	beq.n	8008450 <HAL_DMA_IRQHandler+0xe0>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a8b      	ldr	r2, [pc, #556]	; (800865c <HAL_DMA_IRQHandler+0x2ec>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d00a      	beq.n	800844a <HAL_DMA_IRQHandler+0xda>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a89      	ldr	r2, [pc, #548]	; (8008660 <HAL_DMA_IRQHandler+0x2f0>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d102      	bne.n	8008444 <HAL_DMA_IRQHandler+0xd4>
 800843e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008442:	e01b      	b.n	800847c <HAL_DMA_IRQHandler+0x10c>
 8008444:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008448:	e018      	b.n	800847c <HAL_DMA_IRQHandler+0x10c>
 800844a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800844e:	e015      	b.n	800847c <HAL_DMA_IRQHandler+0x10c>
 8008450:	2340      	movs	r3, #64	; 0x40
 8008452:	e013      	b.n	800847c <HAL_DMA_IRQHandler+0x10c>
 8008454:	2304      	movs	r3, #4
 8008456:	e011      	b.n	800847c <HAL_DMA_IRQHandler+0x10c>
 8008458:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800845c:	e00e      	b.n	800847c <HAL_DMA_IRQHandler+0x10c>
 800845e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008462:	e00b      	b.n	800847c <HAL_DMA_IRQHandler+0x10c>
 8008464:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008468:	e008      	b.n	800847c <HAL_DMA_IRQHandler+0x10c>
 800846a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800846e:	e005      	b.n	800847c <HAL_DMA_IRQHandler+0x10c>
 8008470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008474:	e002      	b.n	800847c <HAL_DMA_IRQHandler+0x10c>
 8008476:	2340      	movs	r3, #64	; 0x40
 8008478:	e000      	b.n	800847c <HAL_DMA_IRQHandler+0x10c>
 800847a:	2304      	movs	r3, #4
 800847c:	4a79      	ldr	r2, [pc, #484]	; (8008664 <HAL_DMA_IRQHandler+0x2f4>)
 800847e:	6053      	str	r3, [r2, #4]
 8008480:	e057      	b.n	8008532 <HAL_DMA_IRQHandler+0x1c2>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a6d      	ldr	r2, [pc, #436]	; (800863c <HAL_DMA_IRQHandler+0x2cc>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d04f      	beq.n	800852c <HAL_DMA_IRQHandler+0x1bc>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a6b      	ldr	r2, [pc, #428]	; (8008640 <HAL_DMA_IRQHandler+0x2d0>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d048      	beq.n	8008528 <HAL_DMA_IRQHandler+0x1b8>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a6a      	ldr	r2, [pc, #424]	; (8008644 <HAL_DMA_IRQHandler+0x2d4>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d040      	beq.n	8008522 <HAL_DMA_IRQHandler+0x1b2>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a68      	ldr	r2, [pc, #416]	; (8008648 <HAL_DMA_IRQHandler+0x2d8>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d038      	beq.n	800851c <HAL_DMA_IRQHandler+0x1ac>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a67      	ldr	r2, [pc, #412]	; (800864c <HAL_DMA_IRQHandler+0x2dc>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d030      	beq.n	8008516 <HAL_DMA_IRQHandler+0x1a6>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a65      	ldr	r2, [pc, #404]	; (8008650 <HAL_DMA_IRQHandler+0x2e0>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d028      	beq.n	8008510 <HAL_DMA_IRQHandler+0x1a0>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a5d      	ldr	r2, [pc, #372]	; (8008638 <HAL_DMA_IRQHandler+0x2c8>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d020      	beq.n	800850a <HAL_DMA_IRQHandler+0x19a>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a61      	ldr	r2, [pc, #388]	; (8008654 <HAL_DMA_IRQHandler+0x2e4>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d019      	beq.n	8008506 <HAL_DMA_IRQHandler+0x196>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a60      	ldr	r2, [pc, #384]	; (8008658 <HAL_DMA_IRQHandler+0x2e8>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d012      	beq.n	8008502 <HAL_DMA_IRQHandler+0x192>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a5e      	ldr	r2, [pc, #376]	; (800865c <HAL_DMA_IRQHandler+0x2ec>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d00a      	beq.n	80084fc <HAL_DMA_IRQHandler+0x18c>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a5d      	ldr	r2, [pc, #372]	; (8008660 <HAL_DMA_IRQHandler+0x2f0>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d102      	bne.n	80084f6 <HAL_DMA_IRQHandler+0x186>
 80084f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80084f4:	e01b      	b.n	800852e <HAL_DMA_IRQHandler+0x1be>
 80084f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80084fa:	e018      	b.n	800852e <HAL_DMA_IRQHandler+0x1be>
 80084fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008500:	e015      	b.n	800852e <HAL_DMA_IRQHandler+0x1be>
 8008502:	2340      	movs	r3, #64	; 0x40
 8008504:	e013      	b.n	800852e <HAL_DMA_IRQHandler+0x1be>
 8008506:	2304      	movs	r3, #4
 8008508:	e011      	b.n	800852e <HAL_DMA_IRQHandler+0x1be>
 800850a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800850e:	e00e      	b.n	800852e <HAL_DMA_IRQHandler+0x1be>
 8008510:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008514:	e00b      	b.n	800852e <HAL_DMA_IRQHandler+0x1be>
 8008516:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800851a:	e008      	b.n	800852e <HAL_DMA_IRQHandler+0x1be>
 800851c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008520:	e005      	b.n	800852e <HAL_DMA_IRQHandler+0x1be>
 8008522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008526:	e002      	b.n	800852e <HAL_DMA_IRQHandler+0x1be>
 8008528:	2340      	movs	r3, #64	; 0x40
 800852a:	e000      	b.n	800852e <HAL_DMA_IRQHandler+0x1be>
 800852c:	2304      	movs	r3, #4
 800852e:	4a4e      	ldr	r2, [pc, #312]	; (8008668 <HAL_DMA_IRQHandler+0x2f8>)
 8008530:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 8136 	beq.w	80087a8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8008544:	e130      	b.n	80087a8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	2202      	movs	r2, #2
 800854c:	409a      	lsls	r2, r3
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4013      	ands	r3, r2
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 80f8 	beq.w	8008748 <HAL_DMA_IRQHandler+0x3d8>
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 80f2 	beq.w	8008748 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0320 	and.w	r3, r3, #32
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10b      	bne.n	800858a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f022 020a 	bic.w	r2, r2, #10
 8008580:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	4b29      	ldr	r3, [pc, #164]	; (8008638 <HAL_DMA_IRQHandler+0x2c8>)
 8008592:	429a      	cmp	r2, r3
 8008594:	d973      	bls.n	800867e <HAL_DMA_IRQHandler+0x30e>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a28      	ldr	r2, [pc, #160]	; (800863c <HAL_DMA_IRQHandler+0x2cc>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d06a      	beq.n	8008676 <HAL_DMA_IRQHandler+0x306>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a26      	ldr	r2, [pc, #152]	; (8008640 <HAL_DMA_IRQHandler+0x2d0>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d063      	beq.n	8008672 <HAL_DMA_IRQHandler+0x302>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a25      	ldr	r2, [pc, #148]	; (8008644 <HAL_DMA_IRQHandler+0x2d4>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d05b      	beq.n	800866c <HAL_DMA_IRQHandler+0x2fc>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a23      	ldr	r2, [pc, #140]	; (8008648 <HAL_DMA_IRQHandler+0x2d8>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d038      	beq.n	8008630 <HAL_DMA_IRQHandler+0x2c0>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a22      	ldr	r2, [pc, #136]	; (800864c <HAL_DMA_IRQHandler+0x2dc>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d030      	beq.n	800862a <HAL_DMA_IRQHandler+0x2ba>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a20      	ldr	r2, [pc, #128]	; (8008650 <HAL_DMA_IRQHandler+0x2e0>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d028      	beq.n	8008624 <HAL_DMA_IRQHandler+0x2b4>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a18      	ldr	r2, [pc, #96]	; (8008638 <HAL_DMA_IRQHandler+0x2c8>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d020      	beq.n	800861e <HAL_DMA_IRQHandler+0x2ae>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a1c      	ldr	r2, [pc, #112]	; (8008654 <HAL_DMA_IRQHandler+0x2e4>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d019      	beq.n	800861a <HAL_DMA_IRQHandler+0x2aa>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a1b      	ldr	r2, [pc, #108]	; (8008658 <HAL_DMA_IRQHandler+0x2e8>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d012      	beq.n	8008616 <HAL_DMA_IRQHandler+0x2a6>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a19      	ldr	r2, [pc, #100]	; (800865c <HAL_DMA_IRQHandler+0x2ec>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00a      	beq.n	8008610 <HAL_DMA_IRQHandler+0x2a0>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a18      	ldr	r2, [pc, #96]	; (8008660 <HAL_DMA_IRQHandler+0x2f0>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d102      	bne.n	800860a <HAL_DMA_IRQHandler+0x29a>
 8008604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008608:	e036      	b.n	8008678 <HAL_DMA_IRQHandler+0x308>
 800860a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800860e:	e033      	b.n	8008678 <HAL_DMA_IRQHandler+0x308>
 8008610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008614:	e030      	b.n	8008678 <HAL_DMA_IRQHandler+0x308>
 8008616:	2320      	movs	r3, #32
 8008618:	e02e      	b.n	8008678 <HAL_DMA_IRQHandler+0x308>
 800861a:	2302      	movs	r3, #2
 800861c:	e02c      	b.n	8008678 <HAL_DMA_IRQHandler+0x308>
 800861e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008622:	e029      	b.n	8008678 <HAL_DMA_IRQHandler+0x308>
 8008624:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008628:	e026      	b.n	8008678 <HAL_DMA_IRQHandler+0x308>
 800862a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800862e:	e023      	b.n	8008678 <HAL_DMA_IRQHandler+0x308>
 8008630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008634:	e020      	b.n	8008678 <HAL_DMA_IRQHandler+0x308>
 8008636:	bf00      	nop
 8008638:	40020080 	.word	0x40020080
 800863c:	40020008 	.word	0x40020008
 8008640:	4002001c 	.word	0x4002001c
 8008644:	40020030 	.word	0x40020030
 8008648:	40020044 	.word	0x40020044
 800864c:	40020058 	.word	0x40020058
 8008650:	4002006c 	.word	0x4002006c
 8008654:	40020408 	.word	0x40020408
 8008658:	4002041c 	.word	0x4002041c
 800865c:	40020430 	.word	0x40020430
 8008660:	40020444 	.word	0x40020444
 8008664:	40020400 	.word	0x40020400
 8008668:	40020000 	.word	0x40020000
 800866c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008670:	e002      	b.n	8008678 <HAL_DMA_IRQHandler+0x308>
 8008672:	2320      	movs	r3, #32
 8008674:	e000      	b.n	8008678 <HAL_DMA_IRQHandler+0x308>
 8008676:	2302      	movs	r3, #2
 8008678:	4a4e      	ldr	r2, [pc, #312]	; (80087b4 <HAL_DMA_IRQHandler+0x444>)
 800867a:	6053      	str	r3, [r2, #4]
 800867c:	e057      	b.n	800872e <HAL_DMA_IRQHandler+0x3be>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a4d      	ldr	r2, [pc, #308]	; (80087b8 <HAL_DMA_IRQHandler+0x448>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d04f      	beq.n	8008728 <HAL_DMA_IRQHandler+0x3b8>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a4b      	ldr	r2, [pc, #300]	; (80087bc <HAL_DMA_IRQHandler+0x44c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d048      	beq.n	8008724 <HAL_DMA_IRQHandler+0x3b4>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a4a      	ldr	r2, [pc, #296]	; (80087c0 <HAL_DMA_IRQHandler+0x450>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d040      	beq.n	800871e <HAL_DMA_IRQHandler+0x3ae>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a48      	ldr	r2, [pc, #288]	; (80087c4 <HAL_DMA_IRQHandler+0x454>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d038      	beq.n	8008718 <HAL_DMA_IRQHandler+0x3a8>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a47      	ldr	r2, [pc, #284]	; (80087c8 <HAL_DMA_IRQHandler+0x458>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d030      	beq.n	8008712 <HAL_DMA_IRQHandler+0x3a2>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a45      	ldr	r2, [pc, #276]	; (80087cc <HAL_DMA_IRQHandler+0x45c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d028      	beq.n	800870c <HAL_DMA_IRQHandler+0x39c>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a44      	ldr	r2, [pc, #272]	; (80087d0 <HAL_DMA_IRQHandler+0x460>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d020      	beq.n	8008706 <HAL_DMA_IRQHandler+0x396>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a42      	ldr	r2, [pc, #264]	; (80087d4 <HAL_DMA_IRQHandler+0x464>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d019      	beq.n	8008702 <HAL_DMA_IRQHandler+0x392>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a41      	ldr	r2, [pc, #260]	; (80087d8 <HAL_DMA_IRQHandler+0x468>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d012      	beq.n	80086fe <HAL_DMA_IRQHandler+0x38e>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a3f      	ldr	r2, [pc, #252]	; (80087dc <HAL_DMA_IRQHandler+0x46c>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d00a      	beq.n	80086f8 <HAL_DMA_IRQHandler+0x388>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4a3e      	ldr	r2, [pc, #248]	; (80087e0 <HAL_DMA_IRQHandler+0x470>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d102      	bne.n	80086f2 <HAL_DMA_IRQHandler+0x382>
 80086ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086f0:	e01b      	b.n	800872a <HAL_DMA_IRQHandler+0x3ba>
 80086f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80086f6:	e018      	b.n	800872a <HAL_DMA_IRQHandler+0x3ba>
 80086f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086fc:	e015      	b.n	800872a <HAL_DMA_IRQHandler+0x3ba>
 80086fe:	2320      	movs	r3, #32
 8008700:	e013      	b.n	800872a <HAL_DMA_IRQHandler+0x3ba>
 8008702:	2302      	movs	r3, #2
 8008704:	e011      	b.n	800872a <HAL_DMA_IRQHandler+0x3ba>
 8008706:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800870a:	e00e      	b.n	800872a <HAL_DMA_IRQHandler+0x3ba>
 800870c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008710:	e00b      	b.n	800872a <HAL_DMA_IRQHandler+0x3ba>
 8008712:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008716:	e008      	b.n	800872a <HAL_DMA_IRQHandler+0x3ba>
 8008718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800871c:	e005      	b.n	800872a <HAL_DMA_IRQHandler+0x3ba>
 800871e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008722:	e002      	b.n	800872a <HAL_DMA_IRQHandler+0x3ba>
 8008724:	2320      	movs	r3, #32
 8008726:	e000      	b.n	800872a <HAL_DMA_IRQHandler+0x3ba>
 8008728:	2302      	movs	r3, #2
 800872a:	4a2e      	ldr	r2, [pc, #184]	; (80087e4 <HAL_DMA_IRQHandler+0x474>)
 800872c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873a:	2b00      	cmp	r3, #0
 800873c:	d034      	beq.n	80087a8 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008746:	e02f      	b.n	80087a8 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874c:	2208      	movs	r2, #8
 800874e:	409a      	lsls	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	4013      	ands	r3, r2
 8008754:	2b00      	cmp	r3, #0
 8008756:	d028      	beq.n	80087aa <HAL_DMA_IRQHandler+0x43a>
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f003 0308 	and.w	r3, r3, #8
 800875e:	2b00      	cmp	r3, #0
 8008760:	d023      	beq.n	80087aa <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f022 020e 	bic.w	r2, r2, #14
 8008770:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800877a:	2101      	movs	r1, #1
 800877c:	fa01 f202 	lsl.w	r2, r1, r2
 8008780:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879c:	2b00      	cmp	r3, #0
 800879e:	d004      	beq.n	80087aa <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	4798      	blx	r3
    }
  }
  return;
 80087a8:	bf00      	nop
 80087aa:	bf00      	nop
}
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	40020400 	.word	0x40020400
 80087b8:	40020008 	.word	0x40020008
 80087bc:	4002001c 	.word	0x4002001c
 80087c0:	40020030 	.word	0x40020030
 80087c4:	40020044 	.word	0x40020044
 80087c8:	40020058 	.word	0x40020058
 80087cc:	4002006c 	.word	0x4002006c
 80087d0:	40020080 	.word	0x40020080
 80087d4:	40020408 	.word	0x40020408
 80087d8:	4002041c 	.word	0x4002041c
 80087dc:	40020430 	.word	0x40020430
 80087e0:	40020444 	.word	0x40020444
 80087e4:	40020000 	.word	0x40020000

080087e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087fe:	2101      	movs	r1, #1
 8008800:	fa01 f202 	lsl.w	r2, r1, r2
 8008804:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	2b10      	cmp	r3, #16
 8008814:	d108      	bne.n	8008828 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	687a      	ldr	r2, [r7, #4]
 800881c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008826:	e007      	b.n	8008838 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	60da      	str	r2, [r3, #12]
}
 8008838:	bf00      	nop
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	bc80      	pop	{r7}
 8008840:	4770      	bx	lr
	...

08008844 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008844:	b480      	push	{r7}
 8008846:	b08b      	sub	sp, #44	; 0x2c
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800884e:	2300      	movs	r3, #0
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008852:	2300      	movs	r3, #0
 8008854:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008856:	e179      	b.n	8008b4c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008858:	2201      	movs	r2, #1
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	fa02 f303 	lsl.w	r3, r2, r3
 8008860:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69fa      	ldr	r2, [r7, #28]
 8008868:	4013      	ands	r3, r2
 800886a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800886c:	69ba      	ldr	r2, [r7, #24]
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	429a      	cmp	r2, r3
 8008872:	f040 8168 	bne.w	8008b46 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	4aa0      	ldr	r2, [pc, #640]	; (8008afc <HAL_GPIO_Init+0x2b8>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d05e      	beq.n	800893e <HAL_GPIO_Init+0xfa>
 8008880:	4a9e      	ldr	r2, [pc, #632]	; (8008afc <HAL_GPIO_Init+0x2b8>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d875      	bhi.n	8008972 <HAL_GPIO_Init+0x12e>
 8008886:	4a9e      	ldr	r2, [pc, #632]	; (8008b00 <HAL_GPIO_Init+0x2bc>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d058      	beq.n	800893e <HAL_GPIO_Init+0xfa>
 800888c:	4a9c      	ldr	r2, [pc, #624]	; (8008b00 <HAL_GPIO_Init+0x2bc>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d86f      	bhi.n	8008972 <HAL_GPIO_Init+0x12e>
 8008892:	4a9c      	ldr	r2, [pc, #624]	; (8008b04 <HAL_GPIO_Init+0x2c0>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d052      	beq.n	800893e <HAL_GPIO_Init+0xfa>
 8008898:	4a9a      	ldr	r2, [pc, #616]	; (8008b04 <HAL_GPIO_Init+0x2c0>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d869      	bhi.n	8008972 <HAL_GPIO_Init+0x12e>
 800889e:	4a9a      	ldr	r2, [pc, #616]	; (8008b08 <HAL_GPIO_Init+0x2c4>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d04c      	beq.n	800893e <HAL_GPIO_Init+0xfa>
 80088a4:	4a98      	ldr	r2, [pc, #608]	; (8008b08 <HAL_GPIO_Init+0x2c4>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d863      	bhi.n	8008972 <HAL_GPIO_Init+0x12e>
 80088aa:	4a98      	ldr	r2, [pc, #608]	; (8008b0c <HAL_GPIO_Init+0x2c8>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d046      	beq.n	800893e <HAL_GPIO_Init+0xfa>
 80088b0:	4a96      	ldr	r2, [pc, #600]	; (8008b0c <HAL_GPIO_Init+0x2c8>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d85d      	bhi.n	8008972 <HAL_GPIO_Init+0x12e>
 80088b6:	2b12      	cmp	r3, #18
 80088b8:	d82a      	bhi.n	8008910 <HAL_GPIO_Init+0xcc>
 80088ba:	2b12      	cmp	r3, #18
 80088bc:	d859      	bhi.n	8008972 <HAL_GPIO_Init+0x12e>
 80088be:	a201      	add	r2, pc, #4	; (adr r2, 80088c4 <HAL_GPIO_Init+0x80>)
 80088c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c4:	0800893f 	.word	0x0800893f
 80088c8:	08008919 	.word	0x08008919
 80088cc:	0800892b 	.word	0x0800892b
 80088d0:	0800896d 	.word	0x0800896d
 80088d4:	08008973 	.word	0x08008973
 80088d8:	08008973 	.word	0x08008973
 80088dc:	08008973 	.word	0x08008973
 80088e0:	08008973 	.word	0x08008973
 80088e4:	08008973 	.word	0x08008973
 80088e8:	08008973 	.word	0x08008973
 80088ec:	08008973 	.word	0x08008973
 80088f0:	08008973 	.word	0x08008973
 80088f4:	08008973 	.word	0x08008973
 80088f8:	08008973 	.word	0x08008973
 80088fc:	08008973 	.word	0x08008973
 8008900:	08008973 	.word	0x08008973
 8008904:	08008973 	.word	0x08008973
 8008908:	08008921 	.word	0x08008921
 800890c:	08008935 	.word	0x08008935
 8008910:	4a7f      	ldr	r2, [pc, #508]	; (8008b10 <HAL_GPIO_Init+0x2cc>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d013      	beq.n	800893e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008916:	e02c      	b.n	8008972 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	623b      	str	r3, [r7, #32]
          break;
 800891e:	e029      	b.n	8008974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	3304      	adds	r3, #4
 8008926:	623b      	str	r3, [r7, #32]
          break;
 8008928:	e024      	b.n	8008974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800892a:	683b      	ldr	r3, [r7, #0]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	3308      	adds	r3, #8
 8008930:	623b      	str	r3, [r7, #32]
          break;
 8008932:	e01f      	b.n	8008974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	330c      	adds	r3, #12
 800893a:	623b      	str	r3, [r7, #32]
          break;
 800893c:	e01a      	b.n	8008974 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d102      	bne.n	800894c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008946:	2304      	movs	r3, #4
 8008948:	623b      	str	r3, [r7, #32]
          break;
 800894a:	e013      	b.n	8008974 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d105      	bne.n	8008960 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008954:	2308      	movs	r3, #8
 8008956:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	69fa      	ldr	r2, [r7, #28]
 800895c:	611a      	str	r2, [r3, #16]
          break;
 800895e:	e009      	b.n	8008974 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008960:	2308      	movs	r3, #8
 8008962:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	69fa      	ldr	r2, [r7, #28]
 8008968:	615a      	str	r2, [r3, #20]
          break;
 800896a:	e003      	b.n	8008974 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800896c:	2300      	movs	r3, #0
 800896e:	623b      	str	r3, [r7, #32]
          break;
 8008970:	e000      	b.n	8008974 <HAL_GPIO_Init+0x130>
          break;
 8008972:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	2bff      	cmp	r3, #255	; 0xff
 8008978:	d801      	bhi.n	800897e <HAL_GPIO_Init+0x13a>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	e001      	b.n	8008982 <HAL_GPIO_Init+0x13e>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	3304      	adds	r3, #4
 8008982:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	2bff      	cmp	r3, #255	; 0xff
 8008988:	d802      	bhi.n	8008990 <HAL_GPIO_Init+0x14c>
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	e002      	b.n	8008996 <HAL_GPIO_Init+0x152>
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	3b08      	subs	r3, #8
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	210f      	movs	r1, #15
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	fa01 f303 	lsl.w	r3, r1, r3
 80089a4:	43db      	mvns	r3, r3
 80089a6:	401a      	ands	r2, r3
 80089a8:	6a39      	ldr	r1, [r7, #32]
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	fa01 f303 	lsl.w	r3, r1, r3
 80089b0:	431a      	orrs	r2, r3
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f000 80c1 	beq.w	8008b46 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80089c4:	4b53      	ldr	r3, [pc, #332]	; (8008b14 <HAL_GPIO_Init+0x2d0>)
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	4a52      	ldr	r2, [pc, #328]	; (8008b14 <HAL_GPIO_Init+0x2d0>)
 80089ca:	f043 0301 	orr.w	r3, r3, #1
 80089ce:	6193      	str	r3, [r2, #24]
 80089d0:	4b50      	ldr	r3, [pc, #320]	; (8008b14 <HAL_GPIO_Init+0x2d0>)
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	60bb      	str	r3, [r7, #8]
 80089da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80089dc:	4a4e      	ldr	r2, [pc, #312]	; (8008b18 <HAL_GPIO_Init+0x2d4>)
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	089b      	lsrs	r3, r3, #2
 80089e2:	3302      	adds	r3, #2
 80089e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	f003 0303 	and.w	r3, r3, #3
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	220f      	movs	r2, #15
 80089f4:	fa02 f303 	lsl.w	r3, r2, r3
 80089f8:	43db      	mvns	r3, r3
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	4013      	ands	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a46      	ldr	r2, [pc, #280]	; (8008b1c <HAL_GPIO_Init+0x2d8>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d01f      	beq.n	8008a48 <HAL_GPIO_Init+0x204>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a45      	ldr	r2, [pc, #276]	; (8008b20 <HAL_GPIO_Init+0x2dc>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d019      	beq.n	8008a44 <HAL_GPIO_Init+0x200>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a44      	ldr	r2, [pc, #272]	; (8008b24 <HAL_GPIO_Init+0x2e0>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d013      	beq.n	8008a40 <HAL_GPIO_Init+0x1fc>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a43      	ldr	r2, [pc, #268]	; (8008b28 <HAL_GPIO_Init+0x2e4>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d00d      	beq.n	8008a3c <HAL_GPIO_Init+0x1f8>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4a42      	ldr	r2, [pc, #264]	; (8008b2c <HAL_GPIO_Init+0x2e8>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d007      	beq.n	8008a38 <HAL_GPIO_Init+0x1f4>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a41      	ldr	r2, [pc, #260]	; (8008b30 <HAL_GPIO_Init+0x2ec>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d101      	bne.n	8008a34 <HAL_GPIO_Init+0x1f0>
 8008a30:	2305      	movs	r3, #5
 8008a32:	e00a      	b.n	8008a4a <HAL_GPIO_Init+0x206>
 8008a34:	2306      	movs	r3, #6
 8008a36:	e008      	b.n	8008a4a <HAL_GPIO_Init+0x206>
 8008a38:	2304      	movs	r3, #4
 8008a3a:	e006      	b.n	8008a4a <HAL_GPIO_Init+0x206>
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	e004      	b.n	8008a4a <HAL_GPIO_Init+0x206>
 8008a40:	2302      	movs	r3, #2
 8008a42:	e002      	b.n	8008a4a <HAL_GPIO_Init+0x206>
 8008a44:	2301      	movs	r3, #1
 8008a46:	e000      	b.n	8008a4a <HAL_GPIO_Init+0x206>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a4c:	f002 0203 	and.w	r2, r2, #3
 8008a50:	0092      	lsls	r2, r2, #2
 8008a52:	4093      	lsls	r3, r2
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008a5a:	492f      	ldr	r1, [pc, #188]	; (8008b18 <HAL_GPIO_Init+0x2d4>)
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	089b      	lsrs	r3, r3, #2
 8008a60:	3302      	adds	r3, #2
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d006      	beq.n	8008a82 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008a74:	4b2f      	ldr	r3, [pc, #188]	; (8008b34 <HAL_GPIO_Init+0x2f0>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	492e      	ldr	r1, [pc, #184]	; (8008b34 <HAL_GPIO_Init+0x2f0>)
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	600b      	str	r3, [r1, #0]
 8008a80:	e006      	b.n	8008a90 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008a82:	4b2c      	ldr	r3, [pc, #176]	; (8008b34 <HAL_GPIO_Init+0x2f0>)
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	43db      	mvns	r3, r3
 8008a8a:	492a      	ldr	r1, [pc, #168]	; (8008b34 <HAL_GPIO_Init+0x2f0>)
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d006      	beq.n	8008aaa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008a9c:	4b25      	ldr	r3, [pc, #148]	; (8008b34 <HAL_GPIO_Init+0x2f0>)
 8008a9e:	685a      	ldr	r2, [r3, #4]
 8008aa0:	4924      	ldr	r1, [pc, #144]	; (8008b34 <HAL_GPIO_Init+0x2f0>)
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	604b      	str	r3, [r1, #4]
 8008aa8:	e006      	b.n	8008ab8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008aaa:	4b22      	ldr	r3, [pc, #136]	; (8008b34 <HAL_GPIO_Init+0x2f0>)
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	43db      	mvns	r3, r3
 8008ab2:	4920      	ldr	r1, [pc, #128]	; (8008b34 <HAL_GPIO_Init+0x2f0>)
 8008ab4:	4013      	ands	r3, r2
 8008ab6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d006      	beq.n	8008ad2 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008ac4:	4b1b      	ldr	r3, [pc, #108]	; (8008b34 <HAL_GPIO_Init+0x2f0>)
 8008ac6:	689a      	ldr	r2, [r3, #8]
 8008ac8:	491a      	ldr	r1, [pc, #104]	; (8008b34 <HAL_GPIO_Init+0x2f0>)
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	608b      	str	r3, [r1, #8]
 8008ad0:	e006      	b.n	8008ae0 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008ad2:	4b18      	ldr	r3, [pc, #96]	; (8008b34 <HAL_GPIO_Init+0x2f0>)
 8008ad4:	689a      	ldr	r2, [r3, #8]
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	4916      	ldr	r1, [pc, #88]	; (8008b34 <HAL_GPIO_Init+0x2f0>)
 8008adc:	4013      	ands	r3, r2
 8008ade:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d025      	beq.n	8008b38 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008aec:	4b11      	ldr	r3, [pc, #68]	; (8008b34 <HAL_GPIO_Init+0x2f0>)
 8008aee:	68da      	ldr	r2, [r3, #12]
 8008af0:	4910      	ldr	r1, [pc, #64]	; (8008b34 <HAL_GPIO_Init+0x2f0>)
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	60cb      	str	r3, [r1, #12]
 8008af8:	e025      	b.n	8008b46 <HAL_GPIO_Init+0x302>
 8008afa:	bf00      	nop
 8008afc:	10320000 	.word	0x10320000
 8008b00:	10310000 	.word	0x10310000
 8008b04:	10220000 	.word	0x10220000
 8008b08:	10210000 	.word	0x10210000
 8008b0c:	10120000 	.word	0x10120000
 8008b10:	10110000 	.word	0x10110000
 8008b14:	40021000 	.word	0x40021000
 8008b18:	40010000 	.word	0x40010000
 8008b1c:	40010800 	.word	0x40010800
 8008b20:	40010c00 	.word	0x40010c00
 8008b24:	40011000 	.word	0x40011000
 8008b28:	40011400 	.word	0x40011400
 8008b2c:	40011800 	.word	0x40011800
 8008b30:	40011c00 	.word	0x40011c00
 8008b34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008b38:	4b0b      	ldr	r3, [pc, #44]	; (8008b68 <HAL_GPIO_Init+0x324>)
 8008b3a:	68da      	ldr	r2, [r3, #12]
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	43db      	mvns	r3, r3
 8008b40:	4909      	ldr	r1, [pc, #36]	; (8008b68 <HAL_GPIO_Init+0x324>)
 8008b42:	4013      	ands	r3, r2
 8008b44:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	3301      	adds	r3, #1
 8008b4a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	fa22 f303 	lsr.w	r3, r2, r3
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f47f ae7e 	bne.w	8008858 <HAL_GPIO_Init+0x14>
  }
}
 8008b5c:	bf00      	nop
 8008b5e:	bf00      	nop
 8008b60:	372c      	adds	r7, #44	; 0x2c
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bc80      	pop	{r7}
 8008b66:	4770      	bx	lr
 8008b68:	40010400 	.word	0x40010400

08008b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	460b      	mov	r3, r1
 8008b76:	807b      	strh	r3, [r7, #2]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b7c:	787b      	ldrb	r3, [r7, #1]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b82:	887a      	ldrh	r2, [r7, #2]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008b88:	e003      	b.n	8008b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008b8a:	887b      	ldrh	r3, [r7, #2]
 8008b8c:	041a      	lsls	r2, r3, #16
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	611a      	str	r2, [r3, #16]
}
 8008b92:	bf00      	nop
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bc80      	pop	{r7}
 8008b9a:	4770      	bx	lr

08008b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d101      	bne.n	8008bae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e26c      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 0301 	and.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f000 8087 	beq.w	8008cca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008bbc:	4b92      	ldr	r3, [pc, #584]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f003 030c 	and.w	r3, r3, #12
 8008bc4:	2b04      	cmp	r3, #4
 8008bc6:	d00c      	beq.n	8008be2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008bc8:	4b8f      	ldr	r3, [pc, #572]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f003 030c 	and.w	r3, r3, #12
 8008bd0:	2b08      	cmp	r3, #8
 8008bd2:	d112      	bne.n	8008bfa <HAL_RCC_OscConfig+0x5e>
 8008bd4:	4b8c      	ldr	r3, [pc, #560]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008be0:	d10b      	bne.n	8008bfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008be2:	4b89      	ldr	r3, [pc, #548]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d06c      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x12c>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d168      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e246      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c02:	d106      	bne.n	8008c12 <HAL_RCC_OscConfig+0x76>
 8008c04:	4b80      	ldr	r3, [pc, #512]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a7f      	ldr	r2, [pc, #508]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	e02e      	b.n	8008c70 <HAL_RCC_OscConfig+0xd4>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10c      	bne.n	8008c34 <HAL_RCC_OscConfig+0x98>
 8008c1a:	4b7b      	ldr	r3, [pc, #492]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a7a      	ldr	r2, [pc, #488]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c24:	6013      	str	r3, [r2, #0]
 8008c26:	4b78      	ldr	r3, [pc, #480]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a77      	ldr	r2, [pc, #476]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	e01d      	b.n	8008c70 <HAL_RCC_OscConfig+0xd4>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c3c:	d10c      	bne.n	8008c58 <HAL_RCC_OscConfig+0xbc>
 8008c3e:	4b72      	ldr	r3, [pc, #456]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a71      	ldr	r2, [pc, #452]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	4b6f      	ldr	r3, [pc, #444]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a6e      	ldr	r2, [pc, #440]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	e00b      	b.n	8008c70 <HAL_RCC_OscConfig+0xd4>
 8008c58:	4b6b      	ldr	r3, [pc, #428]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a6a      	ldr	r2, [pc, #424]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	4b68      	ldr	r3, [pc, #416]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a67      	ldr	r2, [pc, #412]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d013      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c78:	f7fe fbc6 	bl	8007408 <HAL_GetTick>
 8008c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c7e:	e008      	b.n	8008c92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c80:	f7fe fbc2 	bl	8007408 <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	2b64      	cmp	r3, #100	; 0x64
 8008c8c:	d901      	bls.n	8008c92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e1fa      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c92:	4b5d      	ldr	r3, [pc, #372]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0f0      	beq.n	8008c80 <HAL_RCC_OscConfig+0xe4>
 8008c9e:	e014      	b.n	8008cca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ca0:	f7fe fbb2 	bl	8007408 <HAL_GetTick>
 8008ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ca6:	e008      	b.n	8008cba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ca8:	f7fe fbae 	bl	8007408 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	2b64      	cmp	r3, #100	; 0x64
 8008cb4:	d901      	bls.n	8008cba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e1e6      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cba:	4b53      	ldr	r3, [pc, #332]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1f0      	bne.n	8008ca8 <HAL_RCC_OscConfig+0x10c>
 8008cc6:	e000      	b.n	8008cca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d063      	beq.n	8008d9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008cd6:	4b4c      	ldr	r3, [pc, #304]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f003 030c 	and.w	r3, r3, #12
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00b      	beq.n	8008cfa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008ce2:	4b49      	ldr	r3, [pc, #292]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f003 030c 	and.w	r3, r3, #12
 8008cea:	2b08      	cmp	r3, #8
 8008cec:	d11c      	bne.n	8008d28 <HAL_RCC_OscConfig+0x18c>
 8008cee:	4b46      	ldr	r3, [pc, #280]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d116      	bne.n	8008d28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cfa:	4b43      	ldr	r3, [pc, #268]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <HAL_RCC_OscConfig+0x176>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d001      	beq.n	8008d12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e1ba      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d12:	4b3d      	ldr	r3, [pc, #244]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	00db      	lsls	r3, r3, #3
 8008d20:	4939      	ldr	r1, [pc, #228]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d26:	e03a      	b.n	8008d9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d020      	beq.n	8008d72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d30:	4b36      	ldr	r3, [pc, #216]	; (8008e0c <HAL_RCC_OscConfig+0x270>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d36:	f7fe fb67 	bl	8007408 <HAL_GetTick>
 8008d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d3c:	e008      	b.n	8008d50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d3e:	f7fe fb63 	bl	8007408 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d901      	bls.n	8008d50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e19b      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d50:	4b2d      	ldr	r3, [pc, #180]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 0302 	and.w	r3, r3, #2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d0f0      	beq.n	8008d3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d5c:	4b2a      	ldr	r3, [pc, #168]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	695b      	ldr	r3, [r3, #20]
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	4927      	ldr	r1, [pc, #156]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	600b      	str	r3, [r1, #0]
 8008d70:	e015      	b.n	8008d9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d72:	4b26      	ldr	r3, [pc, #152]	; (8008e0c <HAL_RCC_OscConfig+0x270>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d78:	f7fe fb46 	bl	8007408 <HAL_GetTick>
 8008d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d7e:	e008      	b.n	8008d92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d80:	f7fe fb42 	bl	8007408 <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d901      	bls.n	8008d92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e17a      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d92:	4b1d      	ldr	r3, [pc, #116]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1f0      	bne.n	8008d80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0308 	and.w	r3, r3, #8
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d03a      	beq.n	8008e20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d019      	beq.n	8008de6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008db2:	4b17      	ldr	r3, [pc, #92]	; (8008e10 <HAL_RCC_OscConfig+0x274>)
 8008db4:	2201      	movs	r2, #1
 8008db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008db8:	f7fe fb26 	bl	8007408 <HAL_GetTick>
 8008dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008dc0:	f7fe fb22 	bl	8007408 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e15a      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dd2:	4b0d      	ldr	r3, [pc, #52]	; (8008e08 <HAL_RCC_OscConfig+0x26c>)
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d0f0      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008dde:	2001      	movs	r0, #1
 8008de0:	f000 fad8 	bl	8009394 <RCC_Delay>
 8008de4:	e01c      	b.n	8008e20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008de6:	4b0a      	ldr	r3, [pc, #40]	; (8008e10 <HAL_RCC_OscConfig+0x274>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dec:	f7fe fb0c 	bl	8007408 <HAL_GetTick>
 8008df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008df2:	e00f      	b.n	8008e14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008df4:	f7fe fb08 	bl	8007408 <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d908      	bls.n	8008e14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e140      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
 8008e06:	bf00      	nop
 8008e08:	40021000 	.word	0x40021000
 8008e0c:	42420000 	.word	0x42420000
 8008e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e14:	4b9e      	ldr	r3, [pc, #632]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e18:	f003 0302 	and.w	r3, r3, #2
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1e9      	bne.n	8008df4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 80a6 	beq.w	8008f7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e32:	4b97      	ldr	r3, [pc, #604]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008e34:	69db      	ldr	r3, [r3, #28]
 8008e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10d      	bne.n	8008e5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e3e:	4b94      	ldr	r3, [pc, #592]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	4a93      	ldr	r2, [pc, #588]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e48:	61d3      	str	r3, [r2, #28]
 8008e4a:	4b91      	ldr	r3, [pc, #580]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e52:	60bb      	str	r3, [r7, #8]
 8008e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e56:	2301      	movs	r3, #1
 8008e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e5a:	4b8e      	ldr	r3, [pc, #568]	; (8009094 <HAL_RCC_OscConfig+0x4f8>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d118      	bne.n	8008e98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e66:	4b8b      	ldr	r3, [pc, #556]	; (8009094 <HAL_RCC_OscConfig+0x4f8>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a8a      	ldr	r2, [pc, #552]	; (8009094 <HAL_RCC_OscConfig+0x4f8>)
 8008e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e72:	f7fe fac9 	bl	8007408 <HAL_GetTick>
 8008e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e78:	e008      	b.n	8008e8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e7a:	f7fe fac5 	bl	8007408 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	2b64      	cmp	r3, #100	; 0x64
 8008e86:	d901      	bls.n	8008e8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e0fd      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e8c:	4b81      	ldr	r3, [pc, #516]	; (8009094 <HAL_RCC_OscConfig+0x4f8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0f0      	beq.n	8008e7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d106      	bne.n	8008eae <HAL_RCC_OscConfig+0x312>
 8008ea0:	4b7b      	ldr	r3, [pc, #492]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	4a7a      	ldr	r2, [pc, #488]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008ea6:	f043 0301 	orr.w	r3, r3, #1
 8008eaa:	6213      	str	r3, [r2, #32]
 8008eac:	e02d      	b.n	8008f0a <HAL_RCC_OscConfig+0x36e>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10c      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x334>
 8008eb6:	4b76      	ldr	r3, [pc, #472]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	4a75      	ldr	r2, [pc, #468]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008ebc:	f023 0301 	bic.w	r3, r3, #1
 8008ec0:	6213      	str	r3, [r2, #32]
 8008ec2:	4b73      	ldr	r3, [pc, #460]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008ec4:	6a1b      	ldr	r3, [r3, #32]
 8008ec6:	4a72      	ldr	r2, [pc, #456]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008ec8:	f023 0304 	bic.w	r3, r3, #4
 8008ecc:	6213      	str	r3, [r2, #32]
 8008ece:	e01c      	b.n	8008f0a <HAL_RCC_OscConfig+0x36e>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	2b05      	cmp	r3, #5
 8008ed6:	d10c      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x356>
 8008ed8:	4b6d      	ldr	r3, [pc, #436]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	4a6c      	ldr	r2, [pc, #432]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008ede:	f043 0304 	orr.w	r3, r3, #4
 8008ee2:	6213      	str	r3, [r2, #32]
 8008ee4:	4b6a      	ldr	r3, [pc, #424]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	4a69      	ldr	r2, [pc, #420]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008eea:	f043 0301 	orr.w	r3, r3, #1
 8008eee:	6213      	str	r3, [r2, #32]
 8008ef0:	e00b      	b.n	8008f0a <HAL_RCC_OscConfig+0x36e>
 8008ef2:	4b67      	ldr	r3, [pc, #412]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	4a66      	ldr	r2, [pc, #408]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008ef8:	f023 0301 	bic.w	r3, r3, #1
 8008efc:	6213      	str	r3, [r2, #32]
 8008efe:	4b64      	ldr	r3, [pc, #400]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008f00:	6a1b      	ldr	r3, [r3, #32]
 8008f02:	4a63      	ldr	r2, [pc, #396]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008f04:	f023 0304 	bic.w	r3, r3, #4
 8008f08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d015      	beq.n	8008f3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f12:	f7fe fa79 	bl	8007408 <HAL_GetTick>
 8008f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f18:	e00a      	b.n	8008f30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f1a:	f7fe fa75 	bl	8007408 <HAL_GetTick>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d901      	bls.n	8008f30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e0ab      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f30:	4b57      	ldr	r3, [pc, #348]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	f003 0302 	and.w	r3, r3, #2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d0ee      	beq.n	8008f1a <HAL_RCC_OscConfig+0x37e>
 8008f3c:	e014      	b.n	8008f68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f3e:	f7fe fa63 	bl	8007408 <HAL_GetTick>
 8008f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f44:	e00a      	b.n	8008f5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f46:	f7fe fa5f 	bl	8007408 <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d901      	bls.n	8008f5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	e095      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f5c:	4b4c      	ldr	r3, [pc, #304]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008f5e:	6a1b      	ldr	r3, [r3, #32]
 8008f60:	f003 0302 	and.w	r3, r3, #2
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1ee      	bne.n	8008f46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d105      	bne.n	8008f7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f6e:	4b48      	ldr	r3, [pc, #288]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	4a47      	ldr	r2, [pc, #284]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008f74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 8081 	beq.w	8009086 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f84:	4b42      	ldr	r3, [pc, #264]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f003 030c 	and.w	r3, r3, #12
 8008f8c:	2b08      	cmp	r3, #8
 8008f8e:	d061      	beq.n	8009054 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d146      	bne.n	8009026 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f98:	4b3f      	ldr	r3, [pc, #252]	; (8009098 <HAL_RCC_OscConfig+0x4fc>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f9e:	f7fe fa33 	bl	8007408 <HAL_GetTick>
 8008fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008fa4:	e008      	b.n	8008fb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fa6:	f7fe fa2f 	bl	8007408 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d901      	bls.n	8008fb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e067      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008fb8:	4b35      	ldr	r3, [pc, #212]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1f0      	bne.n	8008fa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a1b      	ldr	r3, [r3, #32]
 8008fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fcc:	d108      	bne.n	8008fe0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008fce:	4b30      	ldr	r3, [pc, #192]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	492d      	ldr	r1, [pc, #180]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008fe0:	4b2b      	ldr	r3, [pc, #172]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a19      	ldr	r1, [r3, #32]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	4927      	ldr	r1, [pc, #156]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ff8:	4b27      	ldr	r3, [pc, #156]	; (8009098 <HAL_RCC_OscConfig+0x4fc>)
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ffe:	f7fe fa03 	bl	8007408 <HAL_GetTick>
 8009002:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009004:	e008      	b.n	8009018 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009006:	f7fe f9ff 	bl	8007408 <HAL_GetTick>
 800900a:	4602      	mov	r2, r0
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	2b02      	cmp	r3, #2
 8009012:	d901      	bls.n	8009018 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	e037      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009018:	4b1d      	ldr	r3, [pc, #116]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d0f0      	beq.n	8009006 <HAL_RCC_OscConfig+0x46a>
 8009024:	e02f      	b.n	8009086 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009026:	4b1c      	ldr	r3, [pc, #112]	; (8009098 <HAL_RCC_OscConfig+0x4fc>)
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800902c:	f7fe f9ec 	bl	8007408 <HAL_GetTick>
 8009030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009032:	e008      	b.n	8009046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009034:	f7fe f9e8 	bl	8007408 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b02      	cmp	r3, #2
 8009040:	d901      	bls.n	8009046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e020      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009046:	4b12      	ldr	r3, [pc, #72]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1f0      	bne.n	8009034 <HAL_RCC_OscConfig+0x498>
 8009052:	e018      	b.n	8009086 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	2b01      	cmp	r3, #1
 800905a:	d101      	bne.n	8009060 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e013      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009060:	4b0b      	ldr	r3, [pc, #44]	; (8009090 <HAL_RCC_OscConfig+0x4f4>)
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a1b      	ldr	r3, [r3, #32]
 8009070:	429a      	cmp	r2, r3
 8009072:	d106      	bne.n	8009082 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800907e:	429a      	cmp	r2, r3
 8009080:	d001      	beq.n	8009086 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e000      	b.n	8009088 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8009086:	2300      	movs	r3, #0
}
 8009088:	4618      	mov	r0, r3
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	40021000 	.word	0x40021000
 8009094:	40007000 	.word	0x40007000
 8009098:	42420060 	.word	0x42420060

0800909c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e0d0      	b.n	8009252 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090b0:	4b6a      	ldr	r3, [pc, #424]	; (800925c <HAL_RCC_ClockConfig+0x1c0>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0307 	and.w	r3, r3, #7
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d910      	bls.n	80090e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090be:	4b67      	ldr	r3, [pc, #412]	; (800925c <HAL_RCC_ClockConfig+0x1c0>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f023 0207 	bic.w	r2, r3, #7
 80090c6:	4965      	ldr	r1, [pc, #404]	; (800925c <HAL_RCC_ClockConfig+0x1c0>)
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090ce:	4b63      	ldr	r3, [pc, #396]	; (800925c <HAL_RCC_ClockConfig+0x1c0>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0307 	and.w	r3, r3, #7
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d001      	beq.n	80090e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	e0b8      	b.n	8009252 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 0302 	and.w	r3, r3, #2
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d020      	beq.n	800912e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d005      	beq.n	8009104 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090f8:	4b59      	ldr	r3, [pc, #356]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	4a58      	ldr	r2, [pc, #352]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 80090fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009102:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0308 	and.w	r3, r3, #8
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009110:	4b53      	ldr	r3, [pc, #332]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	4a52      	ldr	r2, [pc, #328]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 8009116:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800911a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800911c:	4b50      	ldr	r3, [pc, #320]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	494d      	ldr	r1, [pc, #308]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 800912a:	4313      	orrs	r3, r2
 800912c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	2b00      	cmp	r3, #0
 8009138:	d040      	beq.n	80091bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d107      	bne.n	8009152 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009142:	4b47      	ldr	r3, [pc, #284]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d115      	bne.n	800917a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e07f      	b.n	8009252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	2b02      	cmp	r3, #2
 8009158:	d107      	bne.n	800916a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800915a:	4b41      	ldr	r3, [pc, #260]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d109      	bne.n	800917a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e073      	b.n	8009252 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800916a:	4b3d      	ldr	r3, [pc, #244]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0302 	and.w	r3, r3, #2
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e06b      	b.n	8009252 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800917a:	4b39      	ldr	r3, [pc, #228]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f023 0203 	bic.w	r2, r3, #3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	4936      	ldr	r1, [pc, #216]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 8009188:	4313      	orrs	r3, r2
 800918a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800918c:	f7fe f93c 	bl	8007408 <HAL_GetTick>
 8009190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009192:	e00a      	b.n	80091aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009194:	f7fe f938 	bl	8007408 <HAL_GetTick>
 8009198:	4602      	mov	r2, r0
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	1ad3      	subs	r3, r2, r3
 800919e:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d901      	bls.n	80091aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e053      	b.n	8009252 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091aa:	4b2d      	ldr	r3, [pc, #180]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f003 020c 	and.w	r2, r3, #12
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d1eb      	bne.n	8009194 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091bc:	4b27      	ldr	r3, [pc, #156]	; (800925c <HAL_RCC_ClockConfig+0x1c0>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f003 0307 	and.w	r3, r3, #7
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d210      	bcs.n	80091ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091ca:	4b24      	ldr	r3, [pc, #144]	; (800925c <HAL_RCC_ClockConfig+0x1c0>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f023 0207 	bic.w	r2, r3, #7
 80091d2:	4922      	ldr	r1, [pc, #136]	; (800925c <HAL_RCC_ClockConfig+0x1c0>)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091da:	4b20      	ldr	r3, [pc, #128]	; (800925c <HAL_RCC_ClockConfig+0x1c0>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0307 	and.w	r3, r3, #7
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d001      	beq.n	80091ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	e032      	b.n	8009252 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0304 	and.w	r3, r3, #4
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d008      	beq.n	800920a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091f8:	4b19      	ldr	r3, [pc, #100]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	4916      	ldr	r1, [pc, #88]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 8009206:	4313      	orrs	r3, r2
 8009208:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0308 	and.w	r3, r3, #8
 8009212:	2b00      	cmp	r3, #0
 8009214:	d009      	beq.n	800922a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009216:	4b12      	ldr	r3, [pc, #72]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	00db      	lsls	r3, r3, #3
 8009224:	490e      	ldr	r1, [pc, #56]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 8009226:	4313      	orrs	r3, r2
 8009228:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800922a:	f000 f821 	bl	8009270 <HAL_RCC_GetSysClockFreq>
 800922e:	4602      	mov	r2, r0
 8009230:	4b0b      	ldr	r3, [pc, #44]	; (8009260 <HAL_RCC_ClockConfig+0x1c4>)
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	091b      	lsrs	r3, r3, #4
 8009236:	f003 030f 	and.w	r3, r3, #15
 800923a:	490a      	ldr	r1, [pc, #40]	; (8009264 <HAL_RCC_ClockConfig+0x1c8>)
 800923c:	5ccb      	ldrb	r3, [r1, r3]
 800923e:	fa22 f303 	lsr.w	r3, r2, r3
 8009242:	4a09      	ldr	r2, [pc, #36]	; (8009268 <HAL_RCC_ClockConfig+0x1cc>)
 8009244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8009246:	4b09      	ldr	r3, [pc, #36]	; (800926c <HAL_RCC_ClockConfig+0x1d0>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe f89a 	bl	8007384 <HAL_InitTick>

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	40022000 	.word	0x40022000
 8009260:	40021000 	.word	0x40021000
 8009264:	0800fb8c 	.word	0x0800fb8c
 8009268:	20000010 	.word	0x20000010
 800926c:	20000014 	.word	0x20000014

08009270 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009270:	b490      	push	{r4, r7}
 8009272:	b08a      	sub	sp, #40	; 0x28
 8009274:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8009276:	4b2a      	ldr	r3, [pc, #168]	; (8009320 <HAL_RCC_GetSysClockFreq+0xb0>)
 8009278:	1d3c      	adds	r4, r7, #4
 800927a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800927c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8009280:	f240 2301 	movw	r3, #513	; 0x201
 8009284:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	61fb      	str	r3, [r7, #28]
 800928a:	2300      	movs	r3, #0
 800928c:	61bb      	str	r3, [r7, #24]
 800928e:	2300      	movs	r3, #0
 8009290:	627b      	str	r3, [r7, #36]	; 0x24
 8009292:	2300      	movs	r3, #0
 8009294:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009296:	2300      	movs	r3, #0
 8009298:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800929a:	4b22      	ldr	r3, [pc, #136]	; (8009324 <HAL_RCC_GetSysClockFreq+0xb4>)
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	f003 030c 	and.w	r3, r3, #12
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d002      	beq.n	80092b0 <HAL_RCC_GetSysClockFreq+0x40>
 80092aa:	2b08      	cmp	r3, #8
 80092ac:	d003      	beq.n	80092b6 <HAL_RCC_GetSysClockFreq+0x46>
 80092ae:	e02d      	b.n	800930c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80092b0:	4b1d      	ldr	r3, [pc, #116]	; (8009328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092b2:	623b      	str	r3, [r7, #32]
      break;
 80092b4:	e02d      	b.n	8009312 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	0c9b      	lsrs	r3, r3, #18
 80092ba:	f003 030f 	and.w	r3, r3, #15
 80092be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80092c2:	4413      	add	r3, r2
 80092c4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80092c8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d013      	beq.n	80092fc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80092d4:	4b13      	ldr	r3, [pc, #76]	; (8009324 <HAL_RCC_GetSysClockFreq+0xb4>)
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	0c5b      	lsrs	r3, r3, #17
 80092da:	f003 0301 	and.w	r3, r3, #1
 80092de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80092e2:	4413      	add	r3, r2
 80092e4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80092e8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	4a0e      	ldr	r2, [pc, #56]	; (8009328 <HAL_RCC_GetSysClockFreq+0xb8>)
 80092ee:	fb02 f203 	mul.w	r2, r2, r3
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f8:	627b      	str	r3, [r7, #36]	; 0x24
 80092fa:	e004      	b.n	8009306 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	4a0b      	ldr	r2, [pc, #44]	; (800932c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009300:	fb02 f303 	mul.w	r3, r2, r3
 8009304:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	623b      	str	r3, [r7, #32]
      break;
 800930a:	e002      	b.n	8009312 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800930c:	4b06      	ldr	r3, [pc, #24]	; (8009328 <HAL_RCC_GetSysClockFreq+0xb8>)
 800930e:	623b      	str	r3, [r7, #32]
      break;
 8009310:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009312:	6a3b      	ldr	r3, [r7, #32]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3728      	adds	r7, #40	; 0x28
 8009318:	46bd      	mov	sp, r7
 800931a:	bc90      	pop	{r4, r7}
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	0800e3bc 	.word	0x0800e3bc
 8009324:	40021000 	.word	0x40021000
 8009328:	007a1200 	.word	0x007a1200
 800932c:	003d0900 	.word	0x003d0900

08009330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009330:	b480      	push	{r7}
 8009332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009334:	4b02      	ldr	r3, [pc, #8]	; (8009340 <HAL_RCC_GetHCLKFreq+0x10>)
 8009336:	681b      	ldr	r3, [r3, #0]
}
 8009338:	4618      	mov	r0, r3
 800933a:	46bd      	mov	sp, r7
 800933c:	bc80      	pop	{r7}
 800933e:	4770      	bx	lr
 8009340:	20000010 	.word	0x20000010

08009344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009348:	f7ff fff2 	bl	8009330 <HAL_RCC_GetHCLKFreq>
 800934c:	4602      	mov	r2, r0
 800934e:	4b05      	ldr	r3, [pc, #20]	; (8009364 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	0a1b      	lsrs	r3, r3, #8
 8009354:	f003 0307 	and.w	r3, r3, #7
 8009358:	4903      	ldr	r1, [pc, #12]	; (8009368 <HAL_RCC_GetPCLK1Freq+0x24>)
 800935a:	5ccb      	ldrb	r3, [r1, r3]
 800935c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009360:	4618      	mov	r0, r3
 8009362:	bd80      	pop	{r7, pc}
 8009364:	40021000 	.word	0x40021000
 8009368:	0800fb9c 	.word	0x0800fb9c

0800936c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009370:	f7ff ffde 	bl	8009330 <HAL_RCC_GetHCLKFreq>
 8009374:	4602      	mov	r2, r0
 8009376:	4b05      	ldr	r3, [pc, #20]	; (800938c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	0adb      	lsrs	r3, r3, #11
 800937c:	f003 0307 	and.w	r3, r3, #7
 8009380:	4903      	ldr	r1, [pc, #12]	; (8009390 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009382:	5ccb      	ldrb	r3, [r1, r3]
 8009384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009388:	4618      	mov	r0, r3
 800938a:	bd80      	pop	{r7, pc}
 800938c:	40021000 	.word	0x40021000
 8009390:	0800fb9c 	.word	0x0800fb9c

08009394 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800939c:	4b0a      	ldr	r3, [pc, #40]	; (80093c8 <RCC_Delay+0x34>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a0a      	ldr	r2, [pc, #40]	; (80093cc <RCC_Delay+0x38>)
 80093a2:	fba2 2303 	umull	r2, r3, r2, r3
 80093a6:	0a5b      	lsrs	r3, r3, #9
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	fb02 f303 	mul.w	r3, r2, r3
 80093ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80093b0:	bf00      	nop
  }
  while (Delay --);
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	1e5a      	subs	r2, r3, #1
 80093b6:	60fa      	str	r2, [r7, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1f9      	bne.n	80093b0 <RCC_Delay+0x1c>
}
 80093bc:	bf00      	nop
 80093be:	bf00      	nop
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bc80      	pop	{r7}
 80093c6:	4770      	bx	lr
 80093c8:	20000010 	.word	0x20000010
 80093cc:	10624dd3 	.word	0x10624dd3

080093d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	613b      	str	r3, [r7, #16]
 80093dc:	2300      	movs	r3, #0
 80093de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d07d      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80093ec:	2300      	movs	r3, #0
 80093ee:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093f0:	4b4f      	ldr	r3, [pc, #316]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093f2:	69db      	ldr	r3, [r3, #28]
 80093f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10d      	bne.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093fc:	4b4c      	ldr	r3, [pc, #304]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80093fe:	69db      	ldr	r3, [r3, #28]
 8009400:	4a4b      	ldr	r2, [pc, #300]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009406:	61d3      	str	r3, [r2, #28]
 8009408:	4b49      	ldr	r3, [pc, #292]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009410:	60bb      	str	r3, [r7, #8]
 8009412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009414:	2301      	movs	r3, #1
 8009416:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009418:	4b46      	ldr	r3, [pc, #280]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009420:	2b00      	cmp	r3, #0
 8009422:	d118      	bne.n	8009456 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009424:	4b43      	ldr	r3, [pc, #268]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a42      	ldr	r2, [pc, #264]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800942a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800942e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009430:	f7fd ffea 	bl	8007408 <HAL_GetTick>
 8009434:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009436:	e008      	b.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009438:	f7fd ffe6 	bl	8007408 <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2b64      	cmp	r3, #100	; 0x64
 8009444:	d901      	bls.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e06d      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800944a:	4b3a      	ldr	r3, [pc, #232]	; (8009534 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0f0      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009456:	4b36      	ldr	r3, [pc, #216]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800945e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d02e      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	429a      	cmp	r2, r3
 8009472:	d027      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009474:	4b2e      	ldr	r3, [pc, #184]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009476:	6a1b      	ldr	r3, [r3, #32]
 8009478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800947c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800947e:	4b2e      	ldr	r3, [pc, #184]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009480:	2201      	movs	r2, #1
 8009482:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009484:	4b2c      	ldr	r3, [pc, #176]	; (8009538 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009486:	2200      	movs	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800948a:	4a29      	ldr	r2, [pc, #164]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b00      	cmp	r3, #0
 8009498:	d014      	beq.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800949a:	f7fd ffb5 	bl	8007408 <HAL_GetTick>
 800949e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094a0:	e00a      	b.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094a2:	f7fd ffb1 	bl	8007408 <HAL_GetTick>
 80094a6:	4602      	mov	r2, r0
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d901      	bls.n	80094b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80094b4:	2303      	movs	r3, #3
 80094b6:	e036      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094b8:	4b1d      	ldr	r3, [pc, #116]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80094ba:	6a1b      	ldr	r3, [r3, #32]
 80094bc:	f003 0302 	and.w	r3, r3, #2
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d0ee      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094c4:	4b1a      	ldr	r3, [pc, #104]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80094c6:	6a1b      	ldr	r3, [r3, #32]
 80094c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	4917      	ldr	r1, [pc, #92]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80094d2:	4313      	orrs	r3, r2
 80094d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80094d6:	7dfb      	ldrb	r3, [r7, #23]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d105      	bne.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094dc:	4b14      	ldr	r3, [pc, #80]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	4a13      	ldr	r2, [pc, #76]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80094e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f003 0302 	and.w	r3, r3, #2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d008      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80094f4:	4b0e      	ldr	r3, [pc, #56]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	490b      	ldr	r1, [pc, #44]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009502:	4313      	orrs	r3, r2
 8009504:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 0310 	and.w	r3, r3, #16
 800950e:	2b00      	cmp	r3, #0
 8009510:	d008      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009512:	4b07      	ldr	r3, [pc, #28]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	4904      	ldr	r1, [pc, #16]	; (8009530 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009520:	4313      	orrs	r3, r2
 8009522:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	40021000 	.word	0x40021000
 8009534:	40007000 	.word	0x40007000
 8009538:	42420440 	.word	0x42420440

0800953c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d004      	beq.n	8009558 <HAL_SRAM_Init+0x1c>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009556:	d101      	bne.n	800955c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e038      	b.n	80095ce <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009562:	b2db      	uxtb	r3, r3
 8009564:	2b00      	cmp	r3, #0
 8009566:	d106      	bne.n	8009576 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f7f8 fac9 	bl	8001b08 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	3308      	adds	r3, #8
 800957e:	4619      	mov	r1, r3
 8009580:	4610      	mov	r0, r2
 8009582:	f001 fe07 	bl	800b194 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	6818      	ldr	r0, [r3, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	461a      	mov	r2, r3
 8009590:	68b9      	ldr	r1, [r7, #8]
 8009592:	f001 fe69 	bl	800b268 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6858      	ldr	r0, [r3, #4]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	689a      	ldr	r2, [r3, #8]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	f001 fe94 	bl	800b2d0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	6892      	ldr	r2, [r2, #8]
 80095b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	6892      	ldr	r2, [r2, #8]
 80095bc:	f041 0101 	orr.w	r1, r1, #1
 80095c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3710      	adds	r7, #16
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b082      	sub	sp, #8
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e041      	b.n	800966c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f7fd fd43 	bl	8007088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2202      	movs	r2, #2
 8009606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3304      	adds	r3, #4
 8009612:	4619      	mov	r1, r3
 8009614:	4610      	mov	r0, r2
 8009616:	f000 fdeb 	bl	800a1f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2201      	movs	r2, #1
 800961e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2201      	movs	r2, #1
 8009656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3708      	adds	r7, #8
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b01      	cmp	r3, #1
 8009686:	d001      	beq.n	800968c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e044      	b.n	8009716 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2202      	movs	r2, #2
 8009690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68da      	ldr	r2, [r3, #12]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f042 0201 	orr.w	r2, r2, #1
 80096a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a1d      	ldr	r2, [pc, #116]	; (8009720 <HAL_TIM_Base_Start_IT+0xac>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d018      	beq.n	80096e0 <HAL_TIM_Base_Start_IT+0x6c>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a1c      	ldr	r2, [pc, #112]	; (8009724 <HAL_TIM_Base_Start_IT+0xb0>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d013      	beq.n	80096e0 <HAL_TIM_Base_Start_IT+0x6c>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c0:	d00e      	beq.n	80096e0 <HAL_TIM_Base_Start_IT+0x6c>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a18      	ldr	r2, [pc, #96]	; (8009728 <HAL_TIM_Base_Start_IT+0xb4>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d009      	beq.n	80096e0 <HAL_TIM_Base_Start_IT+0x6c>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a16      	ldr	r2, [pc, #88]	; (800972c <HAL_TIM_Base_Start_IT+0xb8>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d004      	beq.n	80096e0 <HAL_TIM_Base_Start_IT+0x6c>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a15      	ldr	r2, [pc, #84]	; (8009730 <HAL_TIM_Base_Start_IT+0xbc>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d111      	bne.n	8009704 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f003 0307 	and.w	r3, r3, #7
 80096ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2b06      	cmp	r3, #6
 80096f0:	d010      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f042 0201 	orr.w	r2, r2, #1
 8009700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009702:	e007      	b.n	8009714 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f042 0201 	orr.w	r2, r2, #1
 8009712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	bc80      	pop	{r7}
 800971e:	4770      	bx	lr
 8009720:	40012c00 	.word	0x40012c00
 8009724:	40013400 	.word	0x40013400
 8009728:	40000400 	.word	0x40000400
 800972c:	40000800 	.word	0x40000800
 8009730:	40000c00 	.word	0x40000c00

08009734 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d101      	bne.n	8009746 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e041      	b.n	80097ca <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800974c:	b2db      	uxtb	r3, r3
 800974e:	2b00      	cmp	r3, #0
 8009750:	d106      	bne.n	8009760 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f839 	bl	80097d2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	3304      	adds	r3, #4
 8009770:	4619      	mov	r1, r3
 8009772:	4610      	mov	r0, r2
 8009774:	f000 fd3c 	bl	800a1f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2201      	movs	r2, #1
 800977c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80097da:	bf00      	nop
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	bc80      	pop	{r7}
 80097e2:	4770      	bx	lr

080097e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d101      	bne.n	80097f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e041      	b.n	800987a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d106      	bne.n	8009810 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7fd fc20 	bl	8007050 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2202      	movs	r2, #2
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3304      	adds	r3, #4
 8009820:	4619      	mov	r1, r3
 8009822:	4610      	mov	r0, r2
 8009824:	f000 fce4 	bl	800a1f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2201      	movs	r2, #1
 8009864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2201      	movs	r2, #1
 800986c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2201      	movs	r2, #1
 8009874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d109      	bne.n	80098a8 <HAL_TIM_PWM_Start+0x24>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b01      	cmp	r3, #1
 800989e:	bf14      	ite	ne
 80098a0:	2301      	movne	r3, #1
 80098a2:	2300      	moveq	r3, #0
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	e022      	b.n	80098ee <HAL_TIM_PWM_Start+0x6a>
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2b04      	cmp	r3, #4
 80098ac:	d109      	bne.n	80098c2 <HAL_TIM_PWM_Start+0x3e>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	bf14      	ite	ne
 80098ba:	2301      	movne	r3, #1
 80098bc:	2300      	moveq	r3, #0
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	e015      	b.n	80098ee <HAL_TIM_PWM_Start+0x6a>
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b08      	cmp	r3, #8
 80098c6:	d109      	bne.n	80098dc <HAL_TIM_PWM_Start+0x58>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	bf14      	ite	ne
 80098d4:	2301      	movne	r3, #1
 80098d6:	2300      	moveq	r3, #0
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	e008      	b.n	80098ee <HAL_TIM_PWM_Start+0x6a>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	bf14      	ite	ne
 80098e8:	2301      	movne	r3, #1
 80098ea:	2300      	moveq	r3, #0
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e072      	b.n	80099dc <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d104      	bne.n	8009906 <HAL_TIM_PWM_Start+0x82>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009904:	e013      	b.n	800992e <HAL_TIM_PWM_Start+0xaa>
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b04      	cmp	r3, #4
 800990a:	d104      	bne.n	8009916 <HAL_TIM_PWM_Start+0x92>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2202      	movs	r2, #2
 8009910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009914:	e00b      	b.n	800992e <HAL_TIM_PWM_Start+0xaa>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b08      	cmp	r3, #8
 800991a:	d104      	bne.n	8009926 <HAL_TIM_PWM_Start+0xa2>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2202      	movs	r2, #2
 8009920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009924:	e003      	b.n	800992e <HAL_TIM_PWM_Start+0xaa>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2202      	movs	r2, #2
 800992a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	2201      	movs	r2, #1
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	4618      	mov	r0, r3
 8009938:	f001 f82f 	bl	800a99a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a28      	ldr	r2, [pc, #160]	; (80099e4 <HAL_TIM_PWM_Start+0x160>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d004      	beq.n	8009950 <HAL_TIM_PWM_Start+0xcc>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a27      	ldr	r2, [pc, #156]	; (80099e8 <HAL_TIM_PWM_Start+0x164>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d101      	bne.n	8009954 <HAL_TIM_PWM_Start+0xd0>
 8009950:	2301      	movs	r3, #1
 8009952:	e000      	b.n	8009956 <HAL_TIM_PWM_Start+0xd2>
 8009954:	2300      	movs	r3, #0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d007      	beq.n	800996a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009968:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a1d      	ldr	r2, [pc, #116]	; (80099e4 <HAL_TIM_PWM_Start+0x160>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d018      	beq.n	80099a6 <HAL_TIM_PWM_Start+0x122>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a1b      	ldr	r2, [pc, #108]	; (80099e8 <HAL_TIM_PWM_Start+0x164>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d013      	beq.n	80099a6 <HAL_TIM_PWM_Start+0x122>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009986:	d00e      	beq.n	80099a6 <HAL_TIM_PWM_Start+0x122>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a17      	ldr	r2, [pc, #92]	; (80099ec <HAL_TIM_PWM_Start+0x168>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d009      	beq.n	80099a6 <HAL_TIM_PWM_Start+0x122>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a16      	ldr	r2, [pc, #88]	; (80099f0 <HAL_TIM_PWM_Start+0x16c>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d004      	beq.n	80099a6 <HAL_TIM_PWM_Start+0x122>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a14      	ldr	r2, [pc, #80]	; (80099f4 <HAL_TIM_PWM_Start+0x170>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d111      	bne.n	80099ca <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f003 0307 	and.w	r3, r3, #7
 80099b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2b06      	cmp	r3, #6
 80099b6:	d010      	beq.n	80099da <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f042 0201 	orr.w	r2, r2, #1
 80099c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099c8:	e007      	b.n	80099da <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f042 0201 	orr.w	r2, r2, #1
 80099d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	40012c00 	.word	0x40012c00
 80099e8:	40013400 	.word	0x40013400
 80099ec:	40000400 	.word	0x40000400
 80099f0:	40000800 	.word	0x40000800
 80099f4:	40000c00 	.word	0x40000c00

080099f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e041      	b.n	8009a8e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d106      	bne.n	8009a24 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f839 	bl	8009a96 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2202      	movs	r2, #2
 8009a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	3304      	adds	r3, #4
 8009a34:	4619      	mov	r1, r3
 8009a36:	4610      	mov	r0, r2
 8009a38:	f000 fbda 	bl	800a1f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2201      	movs	r2, #1
 8009a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a8c:	2300      	movs	r3, #0
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3708      	adds	r7, #8
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009a9e:	bf00      	nop
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bc80      	pop	{r7}
 8009aa6:	4770      	bx	lr

08009aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	f003 0302 	and.w	r3, r3, #2
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d122      	bne.n	8009b04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	f003 0302 	and.w	r3, r3, #2
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d11b      	bne.n	8009b04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f06f 0202 	mvn.w	r2, #2
 8009ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	699b      	ldr	r3, [r3, #24]
 8009ae2:	f003 0303 	and.w	r3, r3, #3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d003      	beq.n	8009af2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 fb64 	bl	800a1b8 <HAL_TIM_IC_CaptureCallback>
 8009af0:	e005      	b.n	8009afe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f000 fb57 	bl	800a1a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f000 fb66 	bl	800a1ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	f003 0304 	and.w	r3, r3, #4
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	d122      	bne.n	8009b58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	f003 0304 	and.w	r3, r3, #4
 8009b1c:	2b04      	cmp	r3, #4
 8009b1e:	d11b      	bne.n	8009b58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f06f 0204 	mvn.w	r2, #4
 8009b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2202      	movs	r2, #2
 8009b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d003      	beq.n	8009b46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fb3a 	bl	800a1b8 <HAL_TIM_IC_CaptureCallback>
 8009b44:	e005      	b.n	8009b52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 fb2d 	bl	800a1a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f000 fb3c 	bl	800a1ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	f003 0308 	and.w	r3, r3, #8
 8009b62:	2b08      	cmp	r3, #8
 8009b64:	d122      	bne.n	8009bac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	f003 0308 	and.w	r3, r3, #8
 8009b70:	2b08      	cmp	r3, #8
 8009b72:	d11b      	bne.n	8009bac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f06f 0208 	mvn.w	r2, #8
 8009b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2204      	movs	r2, #4
 8009b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	f003 0303 	and.w	r3, r3, #3
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d003      	beq.n	8009b9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 fb10 	bl	800a1b8 <HAL_TIM_IC_CaptureCallback>
 8009b98:	e005      	b.n	8009ba6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 fb03 	bl	800a1a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 fb12 	bl	800a1ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	f003 0310 	and.w	r3, r3, #16
 8009bb6:	2b10      	cmp	r3, #16
 8009bb8:	d122      	bne.n	8009c00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	f003 0310 	and.w	r3, r3, #16
 8009bc4:	2b10      	cmp	r3, #16
 8009bc6:	d11b      	bne.n	8009c00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f06f 0210 	mvn.w	r2, #16
 8009bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2208      	movs	r2, #8
 8009bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	69db      	ldr	r3, [r3, #28]
 8009bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fae6 	bl	800a1b8 <HAL_TIM_IC_CaptureCallback>
 8009bec:	e005      	b.n	8009bfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fad9 	bl	800a1a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 fae8 	bl	800a1ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d10e      	bne.n	8009c2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d107      	bne.n	8009c2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f06f 0201 	mvn.w	r2, #1
 8009c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 fab4 	bl	800a194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c36:	2b80      	cmp	r3, #128	; 0x80
 8009c38:	d10e      	bne.n	8009c58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c44:	2b80      	cmp	r3, #128	; 0x80
 8009c46:	d107      	bne.n	8009c58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 ff3b 	bl	800aace <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c62:	2b40      	cmp	r3, #64	; 0x40
 8009c64:	d10e      	bne.n	8009c84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c70:	2b40      	cmp	r3, #64	; 0x40
 8009c72:	d107      	bne.n	8009c84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 faac 	bl	800a1dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	691b      	ldr	r3, [r3, #16]
 8009c8a:	f003 0320 	and.w	r3, r3, #32
 8009c8e:	2b20      	cmp	r3, #32
 8009c90:	d10e      	bne.n	8009cb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	f003 0320 	and.w	r3, r3, #32
 8009c9c:	2b20      	cmp	r3, #32
 8009c9e:	d107      	bne.n	8009cb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f06f 0220 	mvn.w	r2, #32
 8009ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 ff06 	bl	800aabc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d101      	bne.n	8009cd2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8009cce:	2302      	movs	r3, #2
 8009cd0:	e046      	b.n	8009d60 <HAL_TIM_OC_ConfigChannel+0xa8>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b0c      	cmp	r3, #12
 8009cde:	d839      	bhi.n	8009d54 <HAL_TIM_OC_ConfigChannel+0x9c>
 8009ce0:	a201      	add	r2, pc, #4	; (adr r2, 8009ce8 <HAL_TIM_OC_ConfigChannel+0x30>)
 8009ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce6:	bf00      	nop
 8009ce8:	08009d1d 	.word	0x08009d1d
 8009cec:	08009d55 	.word	0x08009d55
 8009cf0:	08009d55 	.word	0x08009d55
 8009cf4:	08009d55 	.word	0x08009d55
 8009cf8:	08009d2b 	.word	0x08009d2b
 8009cfc:	08009d55 	.word	0x08009d55
 8009d00:	08009d55 	.word	0x08009d55
 8009d04:	08009d55 	.word	0x08009d55
 8009d08:	08009d39 	.word	0x08009d39
 8009d0c:	08009d55 	.word	0x08009d55
 8009d10:	08009d55 	.word	0x08009d55
 8009d14:	08009d55 	.word	0x08009d55
 8009d18:	08009d47 	.word	0x08009d47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68b9      	ldr	r1, [r7, #8]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 fade 	bl	800a2e4 <TIM_OC1_SetConfig>
      break;
 8009d28:	e015      	b.n	8009d56 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68b9      	ldr	r1, [r7, #8]
 8009d30:	4618      	mov	r0, r3
 8009d32:	f000 fb47 	bl	800a3c4 <TIM_OC2_SetConfig>
      break;
 8009d36:	e00e      	b.n	8009d56 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68b9      	ldr	r1, [r7, #8]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 fbb4 	bl	800a4ac <TIM_OC3_SetConfig>
      break;
 8009d44:	e007      	b.n	8009d56 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68b9      	ldr	r1, [r7, #8]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f000 fc21 	bl	800a594 <TIM_OC4_SetConfig>
      break;
 8009d52:	e000      	b.n	8009d56 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8009d54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d101      	bne.n	8009d82 <HAL_TIM_IC_ConfigChannel+0x1a>
 8009d7e:	2302      	movs	r3, #2
 8009d80:	e082      	b.n	8009e88 <HAL_TIM_IC_ConfigChannel+0x120>
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d11b      	bne.n	8009dc8 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6818      	ldr	r0, [r3, #0]
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	6819      	ldr	r1, [r3, #0]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	685a      	ldr	r2, [r3, #4]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	f000 fc4c 	bl	800a63c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	699a      	ldr	r2, [r3, #24]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f022 020c 	bic.w	r2, r2, #12
 8009db2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6999      	ldr	r1, [r3, #24]
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	689a      	ldr	r2, [r3, #8]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	619a      	str	r2, [r3, #24]
 8009dc6:	e05a      	b.n	8009e7e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2b04      	cmp	r3, #4
 8009dcc:	d11c      	bne.n	8009e08 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6818      	ldr	r0, [r3, #0]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	6819      	ldr	r1, [r3, #0]
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	685a      	ldr	r2, [r3, #4]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	f000 fcc1 	bl	800a764 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	699a      	ldr	r2, [r3, #24]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009df0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6999      	ldr	r1, [r3, #24]
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	021a      	lsls	r2, r3, #8
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	430a      	orrs	r2, r1
 8009e04:	619a      	str	r2, [r3, #24]
 8009e06:	e03a      	b.n	8009e7e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b08      	cmp	r3, #8
 8009e0c:	d11b      	bne.n	8009e46 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6818      	ldr	r0, [r3, #0]
 8009e12:	68bb      	ldr	r3, [r7, #8]
 8009e14:	6819      	ldr	r1, [r3, #0]
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	685a      	ldr	r2, [r3, #4]
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	f000 fd0c 	bl	800a83a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	69da      	ldr	r2, [r3, #28]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f022 020c 	bic.w	r2, r2, #12
 8009e30:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69d9      	ldr	r1, [r3, #28]
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	689a      	ldr	r2, [r3, #8]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	430a      	orrs	r2, r1
 8009e42:	61da      	str	r2, [r3, #28]
 8009e44:	e01b      	b.n	8009e7e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6818      	ldr	r0, [r3, #0]
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	6819      	ldr	r1, [r3, #0]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	685a      	ldr	r2, [r3, #4]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f000 fd2b 	bl	800a8b0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	69da      	ldr	r2, [r3, #28]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009e68:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	69d9      	ldr	r1, [r3, #28]
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	021a      	lsls	r2, r3, #8
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	430a      	orrs	r2, r1
 8009e7c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d101      	bne.n	8009eaa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009ea6:	2302      	movs	r3, #2
 8009ea8:	e0ac      	b.n	800a004 <HAL_TIM_PWM_ConfigChannel+0x174>
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b0c      	cmp	r3, #12
 8009eb6:	f200 809f 	bhi.w	8009ff8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8009eba:	a201      	add	r2, pc, #4	; (adr r2, 8009ec0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8009ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec0:	08009ef5 	.word	0x08009ef5
 8009ec4:	08009ff9 	.word	0x08009ff9
 8009ec8:	08009ff9 	.word	0x08009ff9
 8009ecc:	08009ff9 	.word	0x08009ff9
 8009ed0:	08009f35 	.word	0x08009f35
 8009ed4:	08009ff9 	.word	0x08009ff9
 8009ed8:	08009ff9 	.word	0x08009ff9
 8009edc:	08009ff9 	.word	0x08009ff9
 8009ee0:	08009f77 	.word	0x08009f77
 8009ee4:	08009ff9 	.word	0x08009ff9
 8009ee8:	08009ff9 	.word	0x08009ff9
 8009eec:	08009ff9 	.word	0x08009ff9
 8009ef0:	08009fb7 	.word	0x08009fb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68b9      	ldr	r1, [r7, #8]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f000 f9f2 	bl	800a2e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	699a      	ldr	r2, [r3, #24]
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f042 0208 	orr.w	r2, r2, #8
 8009f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	699a      	ldr	r2, [r3, #24]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f022 0204 	bic.w	r2, r2, #4
 8009f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6999      	ldr	r1, [r3, #24]
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	691a      	ldr	r2, [r3, #16]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	619a      	str	r2, [r3, #24]
      break;
 8009f32:	e062      	b.n	8009ffa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68b9      	ldr	r1, [r7, #8]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 fa42 	bl	800a3c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	699a      	ldr	r2, [r3, #24]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	699a      	ldr	r2, [r3, #24]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6999      	ldr	r1, [r3, #24]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	021a      	lsls	r2, r3, #8
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	619a      	str	r2, [r3, #24]
      break;
 8009f74:	e041      	b.n	8009ffa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68b9      	ldr	r1, [r7, #8]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fa95 	bl	800a4ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	69da      	ldr	r2, [r3, #28]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f042 0208 	orr.w	r2, r2, #8
 8009f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	69da      	ldr	r2, [r3, #28]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f022 0204 	bic.w	r2, r2, #4
 8009fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	69d9      	ldr	r1, [r3, #28]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	691a      	ldr	r2, [r3, #16]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	61da      	str	r2, [r3, #28]
      break;
 8009fb4:	e021      	b.n	8009ffa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68b9      	ldr	r1, [r7, #8]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 fae9 	bl	800a594 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	69da      	ldr	r2, [r3, #28]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	69da      	ldr	r2, [r3, #28]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	69d9      	ldr	r1, [r3, #28]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	021a      	lsls	r2, r3, #8
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	430a      	orrs	r2, r1
 8009ff4:	61da      	str	r2, [r3, #28]
      break;
 8009ff6:	e000      	b.n	8009ffa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8009ff8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3710      	adds	r7, #16
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d101      	bne.n	800a024 <HAL_TIM_ConfigClockSource+0x18>
 800a020:	2302      	movs	r3, #2
 800a022:	e0b3      	b.n	800a18c <HAL_TIM_ConfigClockSource+0x180>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2201      	movs	r2, #1
 800a028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2202      	movs	r2, #2
 800a030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a042:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a04a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68fa      	ldr	r2, [r7, #12]
 800a052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a05c:	d03e      	beq.n	800a0dc <HAL_TIM_ConfigClockSource+0xd0>
 800a05e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a062:	f200 8087 	bhi.w	800a174 <HAL_TIM_ConfigClockSource+0x168>
 800a066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a06a:	f000 8085 	beq.w	800a178 <HAL_TIM_ConfigClockSource+0x16c>
 800a06e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a072:	d87f      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x168>
 800a074:	2b70      	cmp	r3, #112	; 0x70
 800a076:	d01a      	beq.n	800a0ae <HAL_TIM_ConfigClockSource+0xa2>
 800a078:	2b70      	cmp	r3, #112	; 0x70
 800a07a:	d87b      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x168>
 800a07c:	2b60      	cmp	r3, #96	; 0x60
 800a07e:	d050      	beq.n	800a122 <HAL_TIM_ConfigClockSource+0x116>
 800a080:	2b60      	cmp	r3, #96	; 0x60
 800a082:	d877      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x168>
 800a084:	2b50      	cmp	r3, #80	; 0x50
 800a086:	d03c      	beq.n	800a102 <HAL_TIM_ConfigClockSource+0xf6>
 800a088:	2b50      	cmp	r3, #80	; 0x50
 800a08a:	d873      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x168>
 800a08c:	2b40      	cmp	r3, #64	; 0x40
 800a08e:	d058      	beq.n	800a142 <HAL_TIM_ConfigClockSource+0x136>
 800a090:	2b40      	cmp	r3, #64	; 0x40
 800a092:	d86f      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x168>
 800a094:	2b30      	cmp	r3, #48	; 0x30
 800a096:	d064      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0x156>
 800a098:	2b30      	cmp	r3, #48	; 0x30
 800a09a:	d86b      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x168>
 800a09c:	2b20      	cmp	r3, #32
 800a09e:	d060      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0x156>
 800a0a0:	2b20      	cmp	r3, #32
 800a0a2:	d867      	bhi.n	800a174 <HAL_TIM_ConfigClockSource+0x168>
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d05c      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0x156>
 800a0a8:	2b10      	cmp	r3, #16
 800a0aa:	d05a      	beq.n	800a162 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a0ac:	e062      	b.n	800a174 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6818      	ldr	r0, [r3, #0]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	6899      	ldr	r1, [r3, #8]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	685a      	ldr	r2, [r3, #4]
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	f000 fc4d 	bl	800a95c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a0d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	609a      	str	r2, [r3, #8]
      break;
 800a0da:	e04e      	b.n	800a17a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6818      	ldr	r0, [r3, #0]
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	6899      	ldr	r1, [r3, #8]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	685a      	ldr	r2, [r3, #4]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	f000 fc36 	bl	800a95c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	689a      	ldr	r2, [r3, #8]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0fe:	609a      	str	r2, [r3, #8]
      break;
 800a100:	e03b      	b.n	800a17a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6818      	ldr	r0, [r3, #0]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	6859      	ldr	r1, [r3, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	461a      	mov	r2, r3
 800a110:	f000 fafa 	bl	800a708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2150      	movs	r1, #80	; 0x50
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 fc04 	bl	800a928 <TIM_ITRx_SetConfig>
      break;
 800a120:	e02b      	b.n	800a17a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6818      	ldr	r0, [r3, #0]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	6859      	ldr	r1, [r3, #4]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	461a      	mov	r2, r3
 800a130:	f000 fb54 	bl	800a7dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2160      	movs	r1, #96	; 0x60
 800a13a:	4618      	mov	r0, r3
 800a13c:	f000 fbf4 	bl	800a928 <TIM_ITRx_SetConfig>
      break;
 800a140:	e01b      	b.n	800a17a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6818      	ldr	r0, [r3, #0]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	6859      	ldr	r1, [r3, #4]
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	461a      	mov	r2, r3
 800a150:	f000 fada 	bl	800a708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2140      	movs	r1, #64	; 0x40
 800a15a:	4618      	mov	r0, r3
 800a15c:	f000 fbe4 	bl	800a928 <TIM_ITRx_SetConfig>
      break;
 800a160:	e00b      	b.n	800a17a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4619      	mov	r1, r3
 800a16c:	4610      	mov	r0, r2
 800a16e:	f000 fbdb 	bl	800a928 <TIM_ITRx_SetConfig>
        break;
 800a172:	e002      	b.n	800a17a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a174:	bf00      	nop
 800a176:	e000      	b.n	800a17a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a178:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bc80      	pop	{r7}
 800a1a4:	4770      	bx	lr

0800a1a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b083      	sub	sp, #12
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a1ae:	bf00      	nop
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bc80      	pop	{r7}
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bc80      	pop	{r7}
 800a1c8:	4770      	bx	lr

0800a1ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a1ca:	b480      	push	{r7}
 800a1cc:	b083      	sub	sp, #12
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a1d2:	bf00      	nop
 800a1d4:	370c      	adds	r7, #12
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bc80      	pop	{r7}
 800a1da:	4770      	bx	lr

0800a1dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bc80      	pop	{r7}
 800a1ec:	4770      	bx	lr
	...

0800a1f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b085      	sub	sp, #20
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a33      	ldr	r2, [pc, #204]	; (800a2d0 <TIM_Base_SetConfig+0xe0>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d013      	beq.n	800a230 <TIM_Base_SetConfig+0x40>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a32      	ldr	r2, [pc, #200]	; (800a2d4 <TIM_Base_SetConfig+0xe4>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d00f      	beq.n	800a230 <TIM_Base_SetConfig+0x40>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a216:	d00b      	beq.n	800a230 <TIM_Base_SetConfig+0x40>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a2f      	ldr	r2, [pc, #188]	; (800a2d8 <TIM_Base_SetConfig+0xe8>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d007      	beq.n	800a230 <TIM_Base_SetConfig+0x40>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a2e      	ldr	r2, [pc, #184]	; (800a2dc <TIM_Base_SetConfig+0xec>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d003      	beq.n	800a230 <TIM_Base_SetConfig+0x40>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a2d      	ldr	r2, [pc, #180]	; (800a2e0 <TIM_Base_SetConfig+0xf0>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d108      	bne.n	800a242 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	4313      	orrs	r3, r2
 800a240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a22      	ldr	r2, [pc, #136]	; (800a2d0 <TIM_Base_SetConfig+0xe0>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d013      	beq.n	800a272 <TIM_Base_SetConfig+0x82>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a21      	ldr	r2, [pc, #132]	; (800a2d4 <TIM_Base_SetConfig+0xe4>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d00f      	beq.n	800a272 <TIM_Base_SetConfig+0x82>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a258:	d00b      	beq.n	800a272 <TIM_Base_SetConfig+0x82>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a1e      	ldr	r2, [pc, #120]	; (800a2d8 <TIM_Base_SetConfig+0xe8>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d007      	beq.n	800a272 <TIM_Base_SetConfig+0x82>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a1d      	ldr	r2, [pc, #116]	; (800a2dc <TIM_Base_SetConfig+0xec>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d003      	beq.n	800a272 <TIM_Base_SetConfig+0x82>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a1c      	ldr	r2, [pc, #112]	; (800a2e0 <TIM_Base_SetConfig+0xf0>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d108      	bne.n	800a284 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	4313      	orrs	r3, r2
 800a282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	695b      	ldr	r3, [r3, #20]
 800a28e:	4313      	orrs	r3, r2
 800a290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	689a      	ldr	r2, [r3, #8]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4a09      	ldr	r2, [pc, #36]	; (800a2d0 <TIM_Base_SetConfig+0xe0>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d003      	beq.n	800a2b8 <TIM_Base_SetConfig+0xc8>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	4a08      	ldr	r2, [pc, #32]	; (800a2d4 <TIM_Base_SetConfig+0xe4>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d103      	bne.n	800a2c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	691a      	ldr	r2, [r3, #16]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	615a      	str	r2, [r3, #20]
}
 800a2c6:	bf00      	nop
 800a2c8:	3714      	adds	r7, #20
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bc80      	pop	{r7}
 800a2ce:	4770      	bx	lr
 800a2d0:	40012c00 	.word	0x40012c00
 800a2d4:	40013400 	.word	0x40013400
 800a2d8:	40000400 	.word	0x40000400
 800a2dc:	40000800 	.word	0x40000800
 800a2e0:	40000c00 	.word	0x40000c00

0800a2e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b087      	sub	sp, #28
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	f023 0201 	bic.w	r2, r3, #1
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f023 0303 	bic.w	r3, r3, #3
 800a31a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	4313      	orrs	r3, r2
 800a324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a326:	697b      	ldr	r3, [r7, #20]
 800a328:	f023 0302 	bic.w	r3, r3, #2
 800a32c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	697a      	ldr	r2, [r7, #20]
 800a334:	4313      	orrs	r3, r2
 800a336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	4a20      	ldr	r2, [pc, #128]	; (800a3bc <TIM_OC1_SetConfig+0xd8>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d003      	beq.n	800a348 <TIM_OC1_SetConfig+0x64>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4a1f      	ldr	r2, [pc, #124]	; (800a3c0 <TIM_OC1_SetConfig+0xdc>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d10c      	bne.n	800a362 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	f023 0308 	bic.w	r3, r3, #8
 800a34e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	697a      	ldr	r2, [r7, #20]
 800a356:	4313      	orrs	r3, r2
 800a358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	f023 0304 	bic.w	r3, r3, #4
 800a360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a15      	ldr	r2, [pc, #84]	; (800a3bc <TIM_OC1_SetConfig+0xd8>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d003      	beq.n	800a372 <TIM_OC1_SetConfig+0x8e>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a14      	ldr	r2, [pc, #80]	; (800a3c0 <TIM_OC1_SetConfig+0xdc>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d111      	bne.n	800a396 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	695b      	ldr	r3, [r3, #20]
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	4313      	orrs	r3, r2
 800a38a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	693a      	ldr	r2, [r7, #16]
 800a392:	4313      	orrs	r3, r2
 800a394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	693a      	ldr	r2, [r7, #16]
 800a39a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	685a      	ldr	r2, [r3, #4]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	697a      	ldr	r2, [r7, #20]
 800a3ae:	621a      	str	r2, [r3, #32]
}
 800a3b0:	bf00      	nop
 800a3b2:	371c      	adds	r7, #28
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bc80      	pop	{r7}
 800a3b8:	4770      	bx	lr
 800a3ba:	bf00      	nop
 800a3bc:	40012c00 	.word	0x40012c00
 800a3c0:	40013400 	.word	0x40013400

0800a3c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	f023 0210 	bic.w	r2, r3, #16
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	021b      	lsls	r3, r3, #8
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	4313      	orrs	r3, r2
 800a406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	f023 0320 	bic.w	r3, r3, #32
 800a40e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	011b      	lsls	r3, r3, #4
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	4313      	orrs	r3, r2
 800a41a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a21      	ldr	r2, [pc, #132]	; (800a4a4 <TIM_OC2_SetConfig+0xe0>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d003      	beq.n	800a42c <TIM_OC2_SetConfig+0x68>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a20      	ldr	r2, [pc, #128]	; (800a4a8 <TIM_OC2_SetConfig+0xe4>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d10d      	bne.n	800a448 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	011b      	lsls	r3, r3, #4
 800a43a:	697a      	ldr	r2, [r7, #20]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a446:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	4a16      	ldr	r2, [pc, #88]	; (800a4a4 <TIM_OC2_SetConfig+0xe0>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d003      	beq.n	800a458 <TIM_OC2_SetConfig+0x94>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	4a15      	ldr	r2, [pc, #84]	; (800a4a8 <TIM_OC2_SetConfig+0xe4>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d113      	bne.n	800a480 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a45e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a466:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	695b      	ldr	r3, [r3, #20]
 800a46c:	009b      	lsls	r3, r3, #2
 800a46e:	693a      	ldr	r2, [r7, #16]
 800a470:	4313      	orrs	r3, r2
 800a472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	699b      	ldr	r3, [r3, #24]
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	4313      	orrs	r3, r2
 800a47e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	693a      	ldr	r2, [r7, #16]
 800a484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68fa      	ldr	r2, [r7, #12]
 800a48a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	685a      	ldr	r2, [r3, #4]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	621a      	str	r2, [r3, #32]
}
 800a49a:	bf00      	nop
 800a49c:	371c      	adds	r7, #28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bc80      	pop	{r7}
 800a4a2:	4770      	bx	lr
 800a4a4:	40012c00 	.word	0x40012c00
 800a4a8:	40013400 	.word	0x40013400

0800a4ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	69db      	ldr	r3, [r3, #28]
 800a4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f023 0303 	bic.w	r3, r3, #3
 800a4e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a4f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	021b      	lsls	r3, r3, #8
 800a4fc:	697a      	ldr	r2, [r7, #20]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	4a21      	ldr	r2, [pc, #132]	; (800a58c <TIM_OC3_SetConfig+0xe0>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d003      	beq.n	800a512 <TIM_OC3_SetConfig+0x66>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4a20      	ldr	r2, [pc, #128]	; (800a590 <TIM_OC3_SetConfig+0xe4>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d10d      	bne.n	800a52e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a512:	697b      	ldr	r3, [r7, #20]
 800a514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	021b      	lsls	r3, r3, #8
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	4313      	orrs	r3, r2
 800a524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a52c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a16      	ldr	r2, [pc, #88]	; (800a58c <TIM_OC3_SetConfig+0xe0>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d003      	beq.n	800a53e <TIM_OC3_SetConfig+0x92>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a15      	ldr	r2, [pc, #84]	; (800a590 <TIM_OC3_SetConfig+0xe4>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d113      	bne.n	800a566 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a544:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a54c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	695b      	ldr	r3, [r3, #20]
 800a552:	011b      	lsls	r3, r3, #4
 800a554:	693a      	ldr	r2, [r7, #16]
 800a556:	4313      	orrs	r3, r2
 800a558:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	011b      	lsls	r3, r3, #4
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	4313      	orrs	r3, r2
 800a564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	685a      	ldr	r2, [r3, #4]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	697a      	ldr	r2, [r7, #20]
 800a57e:	621a      	str	r2, [r3, #32]
}
 800a580:	bf00      	nop
 800a582:	371c      	adds	r7, #28
 800a584:	46bd      	mov	sp, r7
 800a586:	bc80      	pop	{r7}
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	40012c00 	.word	0x40012c00
 800a590:	40013400 	.word	0x40013400

0800a594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
 800a59c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6a1b      	ldr	r3, [r3, #32]
 800a5ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	69db      	ldr	r3, [r3, #28]
 800a5ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	021b      	lsls	r3, r3, #8
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a5de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	031b      	lsls	r3, r3, #12
 800a5e6:	693a      	ldr	r2, [r7, #16]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a11      	ldr	r2, [pc, #68]	; (800a634 <TIM_OC4_SetConfig+0xa0>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d003      	beq.n	800a5fc <TIM_OC4_SetConfig+0x68>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4a10      	ldr	r2, [pc, #64]	; (800a638 <TIM_OC4_SetConfig+0xa4>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d109      	bne.n	800a610 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a602:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	695b      	ldr	r3, [r3, #20]
 800a608:	019b      	lsls	r3, r3, #6
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	697a      	ldr	r2, [r7, #20]
 800a614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	693a      	ldr	r2, [r7, #16]
 800a628:	621a      	str	r2, [r3, #32]
}
 800a62a:	bf00      	nop
 800a62c:	371c      	adds	r7, #28
 800a62e:	46bd      	mov	sp, r7
 800a630:	bc80      	pop	{r7}
 800a632:	4770      	bx	lr
 800a634:	40012c00 	.word	0x40012c00
 800a638:	40013400 	.word	0x40013400

0800a63c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b087      	sub	sp, #28
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
 800a648:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	f023 0201 	bic.w	r2, r3, #1
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6a1b      	ldr	r3, [r3, #32]
 800a660:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	4a23      	ldr	r2, [pc, #140]	; (800a6f4 <TIM_TI1_SetConfig+0xb8>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d013      	beq.n	800a692 <TIM_TI1_SetConfig+0x56>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	4a22      	ldr	r2, [pc, #136]	; (800a6f8 <TIM_TI1_SetConfig+0xbc>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d00f      	beq.n	800a692 <TIM_TI1_SetConfig+0x56>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a678:	d00b      	beq.n	800a692 <TIM_TI1_SetConfig+0x56>
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	4a1f      	ldr	r2, [pc, #124]	; (800a6fc <TIM_TI1_SetConfig+0xc0>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d007      	beq.n	800a692 <TIM_TI1_SetConfig+0x56>
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	4a1e      	ldr	r2, [pc, #120]	; (800a700 <TIM_TI1_SetConfig+0xc4>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d003      	beq.n	800a692 <TIM_TI1_SetConfig+0x56>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	4a1d      	ldr	r2, [pc, #116]	; (800a704 <TIM_TI1_SetConfig+0xc8>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d101      	bne.n	800a696 <TIM_TI1_SetConfig+0x5a>
 800a692:	2301      	movs	r3, #1
 800a694:	e000      	b.n	800a698 <TIM_TI1_SetConfig+0x5c>
 800a696:	2300      	movs	r3, #0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d008      	beq.n	800a6ae <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	f023 0303 	bic.w	r3, r3, #3
 800a6a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4313      	orrs	r3, r2
 800a6aa:	617b      	str	r3, [r7, #20]
 800a6ac:	e003      	b.n	800a6b6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f043 0301 	orr.w	r3, r3, #1
 800a6b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a6bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	011b      	lsls	r3, r3, #4
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	697a      	ldr	r2, [r7, #20]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	f023 030a 	bic.w	r3, r3, #10
 800a6d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	f003 030a 	and.w	r3, r3, #10
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	697a      	ldr	r2, [r7, #20]
 800a6e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	621a      	str	r2, [r3, #32]
}
 800a6ea:	bf00      	nop
 800a6ec:	371c      	adds	r7, #28
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bc80      	pop	{r7}
 800a6f2:	4770      	bx	lr
 800a6f4:	40012c00 	.word	0x40012c00
 800a6f8:	40013400 	.word	0x40013400
 800a6fc:	40000400 	.word	0x40000400
 800a700:	40000800 	.word	0x40000800
 800a704:	40000c00 	.word	0x40000c00

0800a708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a708:	b480      	push	{r7}
 800a70a:	b087      	sub	sp, #28
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6a1b      	ldr	r3, [r3, #32]
 800a718:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6a1b      	ldr	r3, [r3, #32]
 800a71e:	f023 0201 	bic.w	r2, r3, #1
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	699b      	ldr	r3, [r3, #24]
 800a72a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a732:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	011b      	lsls	r3, r3, #4
 800a738:	693a      	ldr	r2, [r7, #16]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	f023 030a 	bic.w	r3, r3, #10
 800a744:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a746:	697a      	ldr	r2, [r7, #20]
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	697a      	ldr	r2, [r7, #20]
 800a758:	621a      	str	r2, [r3, #32]
}
 800a75a:	bf00      	nop
 800a75c:	371c      	adds	r7, #28
 800a75e:	46bd      	mov	sp, r7
 800a760:	bc80      	pop	{r7}
 800a762:	4770      	bx	lr

0800a764 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a764:	b480      	push	{r7}
 800a766:	b087      	sub	sp, #28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
 800a770:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	f023 0210 	bic.w	r2, r3, #16
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	6a1b      	ldr	r3, [r3, #32]
 800a788:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a790:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	021b      	lsls	r3, r3, #8
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	4313      	orrs	r3, r2
 800a79a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a7a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	031b      	lsls	r3, r3, #12
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a7b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	011b      	lsls	r3, r3, #4
 800a7bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a7c0:	693a      	ldr	r2, [r7, #16]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	697a      	ldr	r2, [r7, #20]
 800a7ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	693a      	ldr	r2, [r7, #16]
 800a7d0:	621a      	str	r2, [r3, #32]
}
 800a7d2:	bf00      	nop
 800a7d4:	371c      	adds	r7, #28
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bc80      	pop	{r7}
 800a7da:	4770      	bx	lr

0800a7dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b087      	sub	sp, #28
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6a1b      	ldr	r3, [r3, #32]
 800a7ec:	f023 0210 	bic.w	r2, r3, #16
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	699b      	ldr	r3, [r3, #24]
 800a7f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a806:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	031b      	lsls	r3, r3, #12
 800a80c:	697a      	ldr	r2, [r7, #20]
 800a80e:	4313      	orrs	r3, r2
 800a810:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a818:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	011b      	lsls	r3, r3, #4
 800a81e:	693a      	ldr	r2, [r7, #16]
 800a820:	4313      	orrs	r3, r2
 800a822:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	693a      	ldr	r2, [r7, #16]
 800a82e:	621a      	str	r2, [r3, #32]
}
 800a830:	bf00      	nop
 800a832:	371c      	adds	r7, #28
 800a834:	46bd      	mov	sp, r7
 800a836:	bc80      	pop	{r7}
 800a838:	4770      	bx	lr

0800a83a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a83a:	b480      	push	{r7}
 800a83c:	b087      	sub	sp, #28
 800a83e:	af00      	add	r7, sp, #0
 800a840:	60f8      	str	r0, [r7, #12]
 800a842:	60b9      	str	r1, [r7, #8]
 800a844:	607a      	str	r2, [r7, #4]
 800a846:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6a1b      	ldr	r3, [r3, #32]
 800a84c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	69db      	ldr	r3, [r3, #28]
 800a858:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6a1b      	ldr	r3, [r3, #32]
 800a85e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	f023 0303 	bic.w	r3, r3, #3
 800a866:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a876:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	011b      	lsls	r3, r3, #4
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	697a      	ldr	r2, [r7, #20]
 800a880:	4313      	orrs	r3, r2
 800a882:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a88a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	021b      	lsls	r3, r3, #8
 800a890:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	4313      	orrs	r3, r2
 800a898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	697a      	ldr	r2, [r7, #20]
 800a89e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	621a      	str	r2, [r3, #32]
}
 800a8a6:	bf00      	nop
 800a8a8:	371c      	adds	r7, #28
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bc80      	pop	{r7}
 800a8ae:	4770      	bx	lr

0800a8b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b087      	sub	sp, #28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	60b9      	str	r1, [r7, #8]
 800a8ba:	607a      	str	r2, [r7, #4]
 800a8bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6a1b      	ldr	r3, [r3, #32]
 800a8c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	69db      	ldr	r3, [r3, #28]
 800a8ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6a1b      	ldr	r3, [r3, #32]
 800a8d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	021b      	lsls	r3, r3, #8
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a8ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	031b      	lsls	r3, r3, #12
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a902:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	031b      	lsls	r3, r3, #12
 800a908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a90c:	693a      	ldr	r2, [r7, #16]
 800a90e:	4313      	orrs	r3, r2
 800a910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	697a      	ldr	r2, [r7, #20]
 800a916:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	693a      	ldr	r2, [r7, #16]
 800a91c:	621a      	str	r2, [r3, #32]
}
 800a91e:	bf00      	nop
 800a920:	371c      	adds	r7, #28
 800a922:	46bd      	mov	sp, r7
 800a924:	bc80      	pop	{r7}
 800a926:	4770      	bx	lr

0800a928 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a93e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	4313      	orrs	r3, r2
 800a946:	f043 0307 	orr.w	r3, r3, #7
 800a94a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	609a      	str	r2, [r3, #8]
}
 800a952:	bf00      	nop
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	bc80      	pop	{r7}
 800a95a:	4770      	bx	lr

0800a95c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b087      	sub	sp, #28
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	021a      	lsls	r2, r3, #8
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	431a      	orrs	r2, r3
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	4313      	orrs	r3, r2
 800a984:	697a      	ldr	r2, [r7, #20]
 800a986:	4313      	orrs	r3, r2
 800a988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	609a      	str	r2, [r3, #8]
}
 800a990:	bf00      	nop
 800a992:	371c      	adds	r7, #28
 800a994:	46bd      	mov	sp, r7
 800a996:	bc80      	pop	{r7}
 800a998:	4770      	bx	lr

0800a99a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a99a:	b480      	push	{r7}
 800a99c:	b087      	sub	sp, #28
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	60f8      	str	r0, [r7, #12]
 800a9a2:	60b9      	str	r1, [r7, #8]
 800a9a4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	f003 031f 	and.w	r3, r3, #31
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	6a1a      	ldr	r2, [r3, #32]
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	43db      	mvns	r3, r3
 800a9bc:	401a      	ands	r2, r3
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6a1a      	ldr	r2, [r3, #32]
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	f003 031f 	and.w	r3, r3, #31
 800a9cc:	6879      	ldr	r1, [r7, #4]
 800a9ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a9d2:	431a      	orrs	r2, r3
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	621a      	str	r2, [r3, #32]
}
 800a9d8:	bf00      	nop
 800a9da:	371c      	adds	r7, #28
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bc80      	pop	{r7}
 800a9e0:	4770      	bx	lr
	...

0800a9e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d101      	bne.n	800a9fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a9f8:	2302      	movs	r3, #2
 800a9fa:	e050      	b.n	800aa9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2201      	movs	r2, #1
 800aa00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2202      	movs	r2, #2
 800aa08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4a1b      	ldr	r2, [pc, #108]	; (800aaa8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d018      	beq.n	800aa72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a19      	ldr	r2, [pc, #100]	; (800aaac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d013      	beq.n	800aa72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa52:	d00e      	beq.n	800aa72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a15      	ldr	r2, [pc, #84]	; (800aab0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d009      	beq.n	800aa72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a14      	ldr	r2, [pc, #80]	; (800aab4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d004      	beq.n	800aa72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a12      	ldr	r2, [pc, #72]	; (800aab8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d10c      	bne.n	800aa8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3714      	adds	r7, #20
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bc80      	pop	{r7}
 800aaa6:	4770      	bx	lr
 800aaa8:	40012c00 	.word	0x40012c00
 800aaac:	40013400 	.word	0x40013400
 800aab0:	40000400 	.word	0x40000400
 800aab4:	40000800 	.word	0x40000800
 800aab8:	40000c00 	.word	0x40000c00

0800aabc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bc80      	pop	{r7}
 800aacc:	4770      	bx	lr

0800aace <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aace:	b480      	push	{r7}
 800aad0:	b083      	sub	sp, #12
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aad6:	bf00      	nop
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	bc80      	pop	{r7}
 800aade:	4770      	bx	lr

0800aae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d101      	bne.n	800aaf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e03f      	b.n	800ab72 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d106      	bne.n	800ab0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f7fc fbac 	bl	8007264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2224      	movs	r2, #36	; 0x24
 800ab10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68da      	ldr	r2, [r3, #12]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ab22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 faa7 	bl	800b078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	691a      	ldr	r2, [r3, #16]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ab38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	695a      	ldr	r2, [r3, #20]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ab48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68da      	ldr	r2, [r3, #12]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ab58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2220      	movs	r2, #32
 800ab64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2220      	movs	r2, #32
 800ab6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ab70:	2300      	movs	r3, #0
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3708      	adds	r7, #8
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b085      	sub	sp, #20
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	60f8      	str	r0, [r7, #12]
 800ab82:	60b9      	str	r1, [r7, #8]
 800ab84:	4613      	mov	r3, r2
 800ab86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	2b20      	cmp	r3, #32
 800ab92:	d140      	bne.n	800ac16 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d002      	beq.n	800aba0 <HAL_UART_Receive_IT+0x26>
 800ab9a:	88fb      	ldrh	r3, [r7, #6]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d101      	bne.n	800aba4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e039      	b.n	800ac18 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d101      	bne.n	800abb2 <HAL_UART_Receive_IT+0x38>
 800abae:	2302      	movs	r3, #2
 800abb0:	e032      	b.n	800ac18 <HAL_UART_Receive_IT+0x9e>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2201      	movs	r2, #1
 800abb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	68ba      	ldr	r2, [r7, #8]
 800abbe:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	88fa      	ldrh	r2, [r7, #6]
 800abc4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	88fa      	ldrh	r2, [r7, #6]
 800abca:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2200      	movs	r2, #0
 800abd0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2222      	movs	r2, #34	; 0x22
 800abd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68da      	ldr	r2, [r3, #12]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abf0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	695a      	ldr	r2, [r3, #20]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f042 0201 	orr.w	r2, r2, #1
 800ac00:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68da      	ldr	r2, [r3, #12]
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f042 0220 	orr.w	r2, r2, #32
 800ac10:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	e000      	b.n	800ac18 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800ac16:	2302      	movs	r3, #2
  }
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3714      	adds	r7, #20
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bc80      	pop	{r7}
 800ac20:	4770      	bx	lr
	...

0800ac24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b088      	sub	sp, #32
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	695b      	ldr	r3, [r3, #20]
 800ac42:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ac44:	2300      	movs	r3, #0
 800ac46:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	f003 030f 	and.w	r3, r3, #15
 800ac52:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10d      	bne.n	800ac76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	f003 0320 	and.w	r3, r3, #32
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d008      	beq.n	800ac76 <HAL_UART_IRQHandler+0x52>
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 f982 	bl	800af78 <UART_Receive_IT>
      return;
 800ac74:	e0d0      	b.n	800ae18 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 80b0 	beq.w	800adde <HAL_UART_IRQHandler+0x1ba>
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f003 0301 	and.w	r3, r3, #1
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d105      	bne.n	800ac94 <HAL_UART_IRQHandler+0x70>
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 80a5 	beq.w	800adde <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00a      	beq.n	800acb4 <HAL_UART_IRQHandler+0x90>
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d005      	beq.n	800acb4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acac:	f043 0201 	orr.w	r2, r3, #1
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	f003 0304 	and.w	r3, r3, #4
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00a      	beq.n	800acd4 <HAL_UART_IRQHandler+0xb0>
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	f003 0301 	and.w	r3, r3, #1
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d005      	beq.n	800acd4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800accc:	f043 0202 	orr.w	r2, r3, #2
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	f003 0302 	and.w	r3, r3, #2
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00a      	beq.n	800acf4 <HAL_UART_IRQHandler+0xd0>
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	f003 0301 	and.w	r3, r3, #1
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d005      	beq.n	800acf4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acec:	f043 0204 	orr.w	r2, r3, #4
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	f003 0308 	and.w	r3, r3, #8
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00f      	beq.n	800ad1e <HAL_UART_IRQHandler+0xfa>
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	f003 0320 	and.w	r3, r3, #32
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d104      	bne.n	800ad12 <HAL_UART_IRQHandler+0xee>
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d005      	beq.n	800ad1e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad16:	f043 0208 	orr.w	r2, r3, #8
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d077      	beq.n	800ae16 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	f003 0320 	and.w	r3, r3, #32
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d007      	beq.n	800ad40 <HAL_UART_IRQHandler+0x11c>
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	f003 0320 	and.w	r3, r3, #32
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d002      	beq.n	800ad40 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 f91c 	bl	800af78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	695b      	ldr	r3, [r3, #20]
 800ad46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	bf14      	ite	ne
 800ad4e:	2301      	movne	r3, #1
 800ad50:	2300      	moveq	r3, #0
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad5a:	f003 0308 	and.w	r3, r3, #8
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d102      	bne.n	800ad68 <HAL_UART_IRQHandler+0x144>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d031      	beq.n	800adcc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f86d 	bl	800ae48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d023      	beq.n	800adc4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	695a      	ldr	r2, [r3, #20]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad8a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d013      	beq.n	800adbc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad98:	4a21      	ldr	r2, [pc, #132]	; (800ae20 <HAL_UART_IRQHandler+0x1fc>)
 800ad9a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7fd f9dd 	bl	8008160 <HAL_DMA_Abort_IT>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d016      	beq.n	800adda <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800adb6:	4610      	mov	r0, r2
 800adb8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adba:	e00e      	b.n	800adda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 f83a 	bl	800ae36 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adc2:	e00a      	b.n	800adda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 f836 	bl	800ae36 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adca:	e006      	b.n	800adda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f832 	bl	800ae36 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800add8:	e01d      	b.n	800ae16 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800adda:	bf00      	nop
    return;
 800addc:	e01b      	b.n	800ae16 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800adde:	69fb      	ldr	r3, [r7, #28]
 800ade0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d008      	beq.n	800adfa <HAL_UART_IRQHandler+0x1d6>
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d003      	beq.n	800adfa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 f859 	bl	800aeaa <UART_Transmit_IT>
    return;
 800adf8:	e00e      	b.n	800ae18 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d009      	beq.n	800ae18 <HAL_UART_IRQHandler+0x1f4>
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d004      	beq.n	800ae18 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f89a 	bl	800af48 <UART_EndTransmit_IT>
    return;
 800ae14:	e000      	b.n	800ae18 <HAL_UART_IRQHandler+0x1f4>
    return;
 800ae16:	bf00      	nop
  }
}
 800ae18:	3720      	adds	r7, #32
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	0800ae83 	.word	0x0800ae83

0800ae24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ae2c:	bf00      	nop
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bc80      	pop	{r7}
 800ae34:	4770      	bx	lr

0800ae36 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae36:	b480      	push	{r7}
 800ae38:	b083      	sub	sp, #12
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ae3e:	bf00      	nop
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bc80      	pop	{r7}
 800ae46:	4770      	bx	lr

0800ae48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68da      	ldr	r2, [r3, #12]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ae5e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	695a      	ldr	r2, [r3, #20]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f022 0201 	bic.w	r2, r2, #1
 800ae6e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2220      	movs	r2, #32
 800ae74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bc80      	pop	{r7}
 800ae80:	4770      	bx	lr

0800ae82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b084      	sub	sp, #16
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae9c:	68f8      	ldr	r0, [r7, #12]
 800ae9e:	f7ff ffca 	bl	800ae36 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aea2:	bf00      	nop
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	b085      	sub	sp, #20
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b21      	cmp	r3, #33	; 0x21
 800aebc:	d13e      	bne.n	800af3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aec6:	d114      	bne.n	800aef2 <UART_Transmit_IT+0x48>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	691b      	ldr	r3, [r3, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d110      	bne.n	800aef2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	461a      	mov	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aee4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	1c9a      	adds	r2, r3, #2
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	621a      	str	r2, [r3, #32]
 800aef0:	e008      	b.n	800af04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6a1b      	ldr	r3, [r3, #32]
 800aef6:	1c59      	adds	r1, r3, #1
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	6211      	str	r1, [r2, #32]
 800aefc:	781a      	ldrb	r2, [r3, #0]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af08:	b29b      	uxth	r3, r3
 800af0a:	3b01      	subs	r3, #1
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	4619      	mov	r1, r3
 800af12:	84d1      	strh	r1, [r2, #38]	; 0x26
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10f      	bne.n	800af38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68da      	ldr	r2, [r3, #12]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	68da      	ldr	r2, [r3, #12]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800af38:	2300      	movs	r3, #0
 800af3a:	e000      	b.n	800af3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800af3c:	2302      	movs	r3, #2
  }
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	bc80      	pop	{r7}
 800af46:	4770      	bx	lr

0800af48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b082      	sub	sp, #8
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68da      	ldr	r2, [r3, #12]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2220      	movs	r2, #32
 800af64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af68:	6878      	ldr	r0, [r7, #4]
 800af6a:	f7ff ff5b 	bl	800ae24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800af6e:	2300      	movs	r3, #0
}
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b084      	sub	sp, #16
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800af86:	b2db      	uxtb	r3, r3
 800af88:	2b22      	cmp	r3, #34	; 0x22
 800af8a:	d170      	bne.n	800b06e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af94:	d117      	bne.n	800afc6 <UART_Receive_IT+0x4e>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	691b      	ldr	r3, [r3, #16]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d113      	bne.n	800afc6 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800af9e:	2300      	movs	r3, #0
 800afa0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afa6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb4:	b29a      	uxth	r2, r3
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbe:	1c9a      	adds	r2, r3, #2
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	629a      	str	r2, [r3, #40]	; 0x28
 800afc4:	e026      	b.n	800b014 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afca:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800afcc:	2300      	movs	r3, #0
 800afce:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afd8:	d007      	beq.n	800afea <UART_Receive_IT+0x72>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10a      	bne.n	800aff8 <UART_Receive_IT+0x80>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d106      	bne.n	800aff8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	701a      	strb	r2, [r3, #0]
 800aff6:	e008      	b.n	800b00a <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	b2db      	uxtb	r3, r3
 800b000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b004:	b2da      	uxtb	r2, r3
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00e:	1c5a      	adds	r2, r3, #1
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b018:	b29b      	uxth	r3, r3
 800b01a:	3b01      	subs	r3, #1
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	4619      	mov	r1, r3
 800b022:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b024:	2b00      	cmp	r3, #0
 800b026:	d120      	bne.n	800b06a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	68da      	ldr	r2, [r3, #12]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f022 0220 	bic.w	r2, r2, #32
 800b036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	68da      	ldr	r2, [r3, #12]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b046:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	695a      	ldr	r2, [r3, #20]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f022 0201 	bic.w	r2, r2, #1
 800b056:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2220      	movs	r2, #32
 800b05c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f7fb fbc5 	bl	80067f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800b066:	2300      	movs	r3, #0
 800b068:	e002      	b.n	800b070 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	e000      	b.n	800b070 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800b06e:	2302      	movs	r3, #2
  }
}
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68da      	ldr	r2, [r3, #12]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	430a      	orrs	r2, r1
 800b094:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	689a      	ldr	r2, [r3, #8]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	431a      	orrs	r2, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	695b      	ldr	r3, [r3, #20]
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b0b2:	f023 030c 	bic.w	r3, r3, #12
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	6812      	ldr	r2, [r2, #0]
 800b0ba:	68b9      	ldr	r1, [r7, #8]
 800b0bc:	430b      	orrs	r3, r1
 800b0be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	695b      	ldr	r3, [r3, #20]
 800b0c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	699a      	ldr	r2, [r3, #24]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	430a      	orrs	r2, r1
 800b0d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a2c      	ldr	r2, [pc, #176]	; (800b18c <UART_SetConfig+0x114>)
 800b0dc:	4293      	cmp	r3, r2
 800b0de:	d103      	bne.n	800b0e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b0e0:	f7fe f944 	bl	800936c <HAL_RCC_GetPCLK2Freq>
 800b0e4:	60f8      	str	r0, [r7, #12]
 800b0e6:	e002      	b.n	800b0ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b0e8:	f7fe f92c 	bl	8009344 <HAL_RCC_GetPCLK1Freq>
 800b0ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	009a      	lsls	r2, r3, #2
 800b0f8:	441a      	add	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	fbb2 f3f3 	udiv	r3, r2, r3
 800b104:	4a22      	ldr	r2, [pc, #136]	; (800b190 <UART_SetConfig+0x118>)
 800b106:	fba2 2303 	umull	r2, r3, r2, r3
 800b10a:	095b      	lsrs	r3, r3, #5
 800b10c:	0119      	lsls	r1, r3, #4
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	4613      	mov	r3, r2
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	4413      	add	r3, r2
 800b116:	009a      	lsls	r2, r3, #2
 800b118:	441a      	add	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	fbb2 f2f3 	udiv	r2, r2, r3
 800b124:	4b1a      	ldr	r3, [pc, #104]	; (800b190 <UART_SetConfig+0x118>)
 800b126:	fba3 0302 	umull	r0, r3, r3, r2
 800b12a:	095b      	lsrs	r3, r3, #5
 800b12c:	2064      	movs	r0, #100	; 0x64
 800b12e:	fb00 f303 	mul.w	r3, r0, r3
 800b132:	1ad3      	subs	r3, r2, r3
 800b134:	011b      	lsls	r3, r3, #4
 800b136:	3332      	adds	r3, #50	; 0x32
 800b138:	4a15      	ldr	r2, [pc, #84]	; (800b190 <UART_SetConfig+0x118>)
 800b13a:	fba2 2303 	umull	r2, r3, r2, r3
 800b13e:	095b      	lsrs	r3, r3, #5
 800b140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b144:	4419      	add	r1, r3
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	4613      	mov	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	4413      	add	r3, r2
 800b14e:	009a      	lsls	r2, r3, #2
 800b150:	441a      	add	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	fbb2 f2f3 	udiv	r2, r2, r3
 800b15c:	4b0c      	ldr	r3, [pc, #48]	; (800b190 <UART_SetConfig+0x118>)
 800b15e:	fba3 0302 	umull	r0, r3, r3, r2
 800b162:	095b      	lsrs	r3, r3, #5
 800b164:	2064      	movs	r0, #100	; 0x64
 800b166:	fb00 f303 	mul.w	r3, r0, r3
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	011b      	lsls	r3, r3, #4
 800b16e:	3332      	adds	r3, #50	; 0x32
 800b170:	4a07      	ldr	r2, [pc, #28]	; (800b190 <UART_SetConfig+0x118>)
 800b172:	fba2 2303 	umull	r2, r3, r2, r3
 800b176:	095b      	lsrs	r3, r3, #5
 800b178:	f003 020f 	and.w	r2, r3, #15
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	440a      	add	r2, r1
 800b182:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b184:	bf00      	nop
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}
 800b18c:	40013800 	.word	0x40013800
 800b190:	51eb851f 	.word	0x51eb851f

0800b194 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800b194:	b480      	push	{r7}
 800b196:	b087      	sub	sp, #28
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	6812      	ldr	r2, [r2, #0]
 800b1ac:	f023 0101 	bic.w	r1, r3, #1
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	2b08      	cmp	r3, #8
 800b1bc:	d102      	bne.n	800b1c4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800b1be:	2340      	movs	r3, #64	; 0x40
 800b1c0:	617b      	str	r3, [r7, #20]
 800b1c2:	e001      	b.n	800b1c8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800b1d4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800b1da:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800b1e0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800b1e6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800b1ec:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800b1f2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800b1f8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800b1fe:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 800b204:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800b20a:	4313      	orrs	r3, r2
 800b20c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	699b      	ldr	r3, [r3, #24]
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	4313      	orrs	r3, r2
 800b216:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b21c:	693a      	ldr	r2, [r7, #16]
 800b21e:	4313      	orrs	r3, r2
 800b220:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800b222:	4b10      	ldr	r3, [pc, #64]	; (800b264 <FSMC_NORSRAM_Init+0xd0>)
 800b224:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b22c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800b234:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	43db      	mvns	r3, r3
 800b244:	ea02 0103 	and.w	r1, r2, r3
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	4319      	orrs	r1, r3
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800b256:	2300      	movs	r3, #0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	371c      	adds	r7, #28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bc80      	pop	{r7}
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	0008fb7f 	.word	0x0008fb7f

0800b268 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	1c5a      	adds	r2, r3, #1
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	011b      	lsls	r3, r3, #4
 800b28c:	431a      	orrs	r2, r3
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	021b      	lsls	r3, r3, #8
 800b294:	431a      	orrs	r2, r3
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	041b      	lsls	r3, r3, #16
 800b29c:	431a      	orrs	r2, r3
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	051b      	lsls	r3, r3, #20
 800b2a6:	431a      	orrs	r2, r3
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	695b      	ldr	r3, [r3, #20]
 800b2ac:	3b02      	subs	r3, #2
 800b2ae:	061b      	lsls	r3, r3, #24
 800b2b0:	431a      	orrs	r2, r3
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	3201      	adds	r2, #1
 800b2bc:	4319      	orrs	r1, r3
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3714      	adds	r7, #20
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bc80      	pop	{r7}
 800b2ce:	4770      	bx	lr

0800b2d0 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	60f8      	str	r0, [r7, #12]
 800b2d8:	60b9      	str	r1, [r7, #8]
 800b2da:	607a      	str	r2, [r7, #4]
 800b2dc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b2e4:	d11d      	bne.n	800b322 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b2ee:	4b13      	ldr	r3, [pc, #76]	; (800b33c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	6811      	ldr	r1, [r2, #0]
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	6852      	ldr	r2, [r2, #4]
 800b2fa:	0112      	lsls	r2, r2, #4
 800b2fc:	4311      	orrs	r1, r2
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	6892      	ldr	r2, [r2, #8]
 800b302:	0212      	lsls	r2, r2, #8
 800b304:	4311      	orrs	r1, r2
 800b306:	68ba      	ldr	r2, [r7, #8]
 800b308:	6992      	ldr	r2, [r2, #24]
 800b30a:	4311      	orrs	r1, r2
 800b30c:	68ba      	ldr	r2, [r7, #8]
 800b30e:	68d2      	ldr	r2, [r2, #12]
 800b310:	0412      	lsls	r2, r2, #16
 800b312:	430a      	orrs	r2, r1
 800b314:	ea43 0102 	orr.w	r1, r3, r2
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b320:	e005      	b.n	800b32e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b32a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3714      	adds	r7, #20
 800b334:	46bd      	mov	sp, r7
 800b336:	bc80      	pop	{r7}
 800b338:	4770      	bx	lr
 800b33a:	bf00      	nop
 800b33c:	cff00000 	.word	0xcff00000

0800b340 <irmp_init>:
 *  Initialize IRMP decoder
 *  @details  Configures IRMP input pin
 *---------------------------------------------------------------------------------------------------------------------------------------------------
 */
#ifndef ANALYZE
void irmp_init(void) {
 800b340:	b480      	push	{r7}
 800b342:	af00      	add	r7, sp, #0
#endif

#if IRMP_LOGGING == 1
    irmp_uart_init ();
#endif
}
 800b344:	bf00      	nop
 800b346:	46bd      	mov	sp, r7
 800b348:	bc80      	pop	{r7}
 800b34a:	4770      	bx	lr

0800b34c <__errno>:
 800b34c:	4b01      	ldr	r3, [pc, #4]	; (800b354 <__errno+0x8>)
 800b34e:	6818      	ldr	r0, [r3, #0]
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	2000001c 	.word	0x2000001c

0800b358 <__libc_init_array>:
 800b358:	b570      	push	{r4, r5, r6, lr}
 800b35a:	2600      	movs	r6, #0
 800b35c:	4d0c      	ldr	r5, [pc, #48]	; (800b390 <__libc_init_array+0x38>)
 800b35e:	4c0d      	ldr	r4, [pc, #52]	; (800b394 <__libc_init_array+0x3c>)
 800b360:	1b64      	subs	r4, r4, r5
 800b362:	10a4      	asrs	r4, r4, #2
 800b364:	42a6      	cmp	r6, r4
 800b366:	d109      	bne.n	800b37c <__libc_init_array+0x24>
 800b368:	f002 ff48 	bl	800e1fc <_init>
 800b36c:	2600      	movs	r6, #0
 800b36e:	4d0a      	ldr	r5, [pc, #40]	; (800b398 <__libc_init_array+0x40>)
 800b370:	4c0a      	ldr	r4, [pc, #40]	; (800b39c <__libc_init_array+0x44>)
 800b372:	1b64      	subs	r4, r4, r5
 800b374:	10a4      	asrs	r4, r4, #2
 800b376:	42a6      	cmp	r6, r4
 800b378:	d105      	bne.n	800b386 <__libc_init_array+0x2e>
 800b37a:	bd70      	pop	{r4, r5, r6, pc}
 800b37c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b380:	4798      	blx	r3
 800b382:	3601      	adds	r6, #1
 800b384:	e7ee      	b.n	800b364 <__libc_init_array+0xc>
 800b386:	f855 3b04 	ldr.w	r3, [r5], #4
 800b38a:	4798      	blx	r3
 800b38c:	3601      	adds	r6, #1
 800b38e:	e7f2      	b.n	800b376 <__libc_init_array+0x1e>
 800b390:	0800ff84 	.word	0x0800ff84
 800b394:	0800ff84 	.word	0x0800ff84
 800b398:	0800ff84 	.word	0x0800ff84
 800b39c:	0800ff88 	.word	0x0800ff88

0800b3a0 <malloc>:
 800b3a0:	4b02      	ldr	r3, [pc, #8]	; (800b3ac <malloc+0xc>)
 800b3a2:	4601      	mov	r1, r0
 800b3a4:	6818      	ldr	r0, [r3, #0]
 800b3a6:	f000 b865 	b.w	800b474 <_malloc_r>
 800b3aa:	bf00      	nop
 800b3ac:	2000001c 	.word	0x2000001c

0800b3b0 <memcpy>:
 800b3b0:	440a      	add	r2, r1
 800b3b2:	4291      	cmp	r1, r2
 800b3b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3b8:	d100      	bne.n	800b3bc <memcpy+0xc>
 800b3ba:	4770      	bx	lr
 800b3bc:	b510      	push	{r4, lr}
 800b3be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3c2:	4291      	cmp	r1, r2
 800b3c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3c8:	d1f9      	bne.n	800b3be <memcpy+0xe>
 800b3ca:	bd10      	pop	{r4, pc}

0800b3cc <memset>:
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	4402      	add	r2, r0
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d100      	bne.n	800b3d6 <memset+0xa>
 800b3d4:	4770      	bx	lr
 800b3d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b3da:	e7f9      	b.n	800b3d0 <memset+0x4>

0800b3dc <_free_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	4605      	mov	r5, r0
 800b3e0:	2900      	cmp	r1, #0
 800b3e2:	d043      	beq.n	800b46c <_free_r+0x90>
 800b3e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3e8:	1f0c      	subs	r4, r1, #4
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	bfb8      	it	lt
 800b3ee:	18e4      	addlt	r4, r4, r3
 800b3f0:	f001 ff26 	bl	800d240 <__malloc_lock>
 800b3f4:	4a1e      	ldr	r2, [pc, #120]	; (800b470 <_free_r+0x94>)
 800b3f6:	6813      	ldr	r3, [r2, #0]
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	b933      	cbnz	r3, 800b40a <_free_r+0x2e>
 800b3fc:	6063      	str	r3, [r4, #4]
 800b3fe:	6014      	str	r4, [r2, #0]
 800b400:	4628      	mov	r0, r5
 800b402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b406:	f001 bf21 	b.w	800d24c <__malloc_unlock>
 800b40a:	42a3      	cmp	r3, r4
 800b40c:	d90a      	bls.n	800b424 <_free_r+0x48>
 800b40e:	6821      	ldr	r1, [r4, #0]
 800b410:	1862      	adds	r2, r4, r1
 800b412:	4293      	cmp	r3, r2
 800b414:	bf01      	itttt	eq
 800b416:	681a      	ldreq	r2, [r3, #0]
 800b418:	685b      	ldreq	r3, [r3, #4]
 800b41a:	1852      	addeq	r2, r2, r1
 800b41c:	6022      	streq	r2, [r4, #0]
 800b41e:	6063      	str	r3, [r4, #4]
 800b420:	6004      	str	r4, [r0, #0]
 800b422:	e7ed      	b.n	800b400 <_free_r+0x24>
 800b424:	461a      	mov	r2, r3
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	b10b      	cbz	r3, 800b42e <_free_r+0x52>
 800b42a:	42a3      	cmp	r3, r4
 800b42c:	d9fa      	bls.n	800b424 <_free_r+0x48>
 800b42e:	6811      	ldr	r1, [r2, #0]
 800b430:	1850      	adds	r0, r2, r1
 800b432:	42a0      	cmp	r0, r4
 800b434:	d10b      	bne.n	800b44e <_free_r+0x72>
 800b436:	6820      	ldr	r0, [r4, #0]
 800b438:	4401      	add	r1, r0
 800b43a:	1850      	adds	r0, r2, r1
 800b43c:	4283      	cmp	r3, r0
 800b43e:	6011      	str	r1, [r2, #0]
 800b440:	d1de      	bne.n	800b400 <_free_r+0x24>
 800b442:	6818      	ldr	r0, [r3, #0]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	4401      	add	r1, r0
 800b448:	6011      	str	r1, [r2, #0]
 800b44a:	6053      	str	r3, [r2, #4]
 800b44c:	e7d8      	b.n	800b400 <_free_r+0x24>
 800b44e:	d902      	bls.n	800b456 <_free_r+0x7a>
 800b450:	230c      	movs	r3, #12
 800b452:	602b      	str	r3, [r5, #0]
 800b454:	e7d4      	b.n	800b400 <_free_r+0x24>
 800b456:	6820      	ldr	r0, [r4, #0]
 800b458:	1821      	adds	r1, r4, r0
 800b45a:	428b      	cmp	r3, r1
 800b45c:	bf01      	itttt	eq
 800b45e:	6819      	ldreq	r1, [r3, #0]
 800b460:	685b      	ldreq	r3, [r3, #4]
 800b462:	1809      	addeq	r1, r1, r0
 800b464:	6021      	streq	r1, [r4, #0]
 800b466:	6063      	str	r3, [r4, #4]
 800b468:	6054      	str	r4, [r2, #4]
 800b46a:	e7c9      	b.n	800b400 <_free_r+0x24>
 800b46c:	bd38      	pop	{r3, r4, r5, pc}
 800b46e:	bf00      	nop
 800b470:	20000294 	.word	0x20000294

0800b474 <_malloc_r>:
 800b474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b476:	1ccd      	adds	r5, r1, #3
 800b478:	f025 0503 	bic.w	r5, r5, #3
 800b47c:	3508      	adds	r5, #8
 800b47e:	2d0c      	cmp	r5, #12
 800b480:	bf38      	it	cc
 800b482:	250c      	movcc	r5, #12
 800b484:	2d00      	cmp	r5, #0
 800b486:	4606      	mov	r6, r0
 800b488:	db01      	blt.n	800b48e <_malloc_r+0x1a>
 800b48a:	42a9      	cmp	r1, r5
 800b48c:	d903      	bls.n	800b496 <_malloc_r+0x22>
 800b48e:	230c      	movs	r3, #12
 800b490:	6033      	str	r3, [r6, #0]
 800b492:	2000      	movs	r0, #0
 800b494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b496:	f001 fed3 	bl	800d240 <__malloc_lock>
 800b49a:	4921      	ldr	r1, [pc, #132]	; (800b520 <_malloc_r+0xac>)
 800b49c:	680a      	ldr	r2, [r1, #0]
 800b49e:	4614      	mov	r4, r2
 800b4a0:	b99c      	cbnz	r4, 800b4ca <_malloc_r+0x56>
 800b4a2:	4f20      	ldr	r7, [pc, #128]	; (800b524 <_malloc_r+0xb0>)
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	b923      	cbnz	r3, 800b4b2 <_malloc_r+0x3e>
 800b4a8:	4621      	mov	r1, r4
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f000 fd2a 	bl	800bf04 <_sbrk_r>
 800b4b0:	6038      	str	r0, [r7, #0]
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	f000 fd25 	bl	800bf04 <_sbrk_r>
 800b4ba:	1c43      	adds	r3, r0, #1
 800b4bc:	d123      	bne.n	800b506 <_malloc_r+0x92>
 800b4be:	230c      	movs	r3, #12
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	6033      	str	r3, [r6, #0]
 800b4c4:	f001 fec2 	bl	800d24c <__malloc_unlock>
 800b4c8:	e7e3      	b.n	800b492 <_malloc_r+0x1e>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	1b5b      	subs	r3, r3, r5
 800b4ce:	d417      	bmi.n	800b500 <_malloc_r+0x8c>
 800b4d0:	2b0b      	cmp	r3, #11
 800b4d2:	d903      	bls.n	800b4dc <_malloc_r+0x68>
 800b4d4:	6023      	str	r3, [r4, #0]
 800b4d6:	441c      	add	r4, r3
 800b4d8:	6025      	str	r5, [r4, #0]
 800b4da:	e004      	b.n	800b4e6 <_malloc_r+0x72>
 800b4dc:	6863      	ldr	r3, [r4, #4]
 800b4de:	42a2      	cmp	r2, r4
 800b4e0:	bf0c      	ite	eq
 800b4e2:	600b      	streq	r3, [r1, #0]
 800b4e4:	6053      	strne	r3, [r2, #4]
 800b4e6:	4630      	mov	r0, r6
 800b4e8:	f001 feb0 	bl	800d24c <__malloc_unlock>
 800b4ec:	f104 000b 	add.w	r0, r4, #11
 800b4f0:	1d23      	adds	r3, r4, #4
 800b4f2:	f020 0007 	bic.w	r0, r0, #7
 800b4f6:	1ac2      	subs	r2, r0, r3
 800b4f8:	d0cc      	beq.n	800b494 <_malloc_r+0x20>
 800b4fa:	1a1b      	subs	r3, r3, r0
 800b4fc:	50a3      	str	r3, [r4, r2]
 800b4fe:	e7c9      	b.n	800b494 <_malloc_r+0x20>
 800b500:	4622      	mov	r2, r4
 800b502:	6864      	ldr	r4, [r4, #4]
 800b504:	e7cc      	b.n	800b4a0 <_malloc_r+0x2c>
 800b506:	1cc4      	adds	r4, r0, #3
 800b508:	f024 0403 	bic.w	r4, r4, #3
 800b50c:	42a0      	cmp	r0, r4
 800b50e:	d0e3      	beq.n	800b4d8 <_malloc_r+0x64>
 800b510:	1a21      	subs	r1, r4, r0
 800b512:	4630      	mov	r0, r6
 800b514:	f000 fcf6 	bl	800bf04 <_sbrk_r>
 800b518:	3001      	adds	r0, #1
 800b51a:	d1dd      	bne.n	800b4d8 <_malloc_r+0x64>
 800b51c:	e7cf      	b.n	800b4be <_malloc_r+0x4a>
 800b51e:	bf00      	nop
 800b520:	20000294 	.word	0x20000294
 800b524:	20000298 	.word	0x20000298

0800b528 <__cvt>:
 800b528:	2b00      	cmp	r3, #0
 800b52a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b52e:	461f      	mov	r7, r3
 800b530:	bfbb      	ittet	lt
 800b532:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b536:	461f      	movlt	r7, r3
 800b538:	2300      	movge	r3, #0
 800b53a:	232d      	movlt	r3, #45	; 0x2d
 800b53c:	b088      	sub	sp, #32
 800b53e:	4614      	mov	r4, r2
 800b540:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b542:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b544:	7013      	strb	r3, [r2, #0]
 800b546:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b548:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b54c:	f023 0820 	bic.w	r8, r3, #32
 800b550:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b554:	d005      	beq.n	800b562 <__cvt+0x3a>
 800b556:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b55a:	d100      	bne.n	800b55e <__cvt+0x36>
 800b55c:	3501      	adds	r5, #1
 800b55e:	2302      	movs	r3, #2
 800b560:	e000      	b.n	800b564 <__cvt+0x3c>
 800b562:	2303      	movs	r3, #3
 800b564:	aa07      	add	r2, sp, #28
 800b566:	9204      	str	r2, [sp, #16]
 800b568:	aa06      	add	r2, sp, #24
 800b56a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b56e:	e9cd 3500 	strd	r3, r5, [sp]
 800b572:	4622      	mov	r2, r4
 800b574:	463b      	mov	r3, r7
 800b576:	f000 fe43 	bl	800c200 <_dtoa_r>
 800b57a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b57e:	4606      	mov	r6, r0
 800b580:	d102      	bne.n	800b588 <__cvt+0x60>
 800b582:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b584:	07db      	lsls	r3, r3, #31
 800b586:	d522      	bpl.n	800b5ce <__cvt+0xa6>
 800b588:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b58c:	eb06 0905 	add.w	r9, r6, r5
 800b590:	d110      	bne.n	800b5b4 <__cvt+0x8c>
 800b592:	7833      	ldrb	r3, [r6, #0]
 800b594:	2b30      	cmp	r3, #48	; 0x30
 800b596:	d10a      	bne.n	800b5ae <__cvt+0x86>
 800b598:	2200      	movs	r2, #0
 800b59a:	2300      	movs	r3, #0
 800b59c:	4620      	mov	r0, r4
 800b59e:	4639      	mov	r1, r7
 800b5a0:	f7f5 fa6e 	bl	8000a80 <__aeabi_dcmpeq>
 800b5a4:	b918      	cbnz	r0, 800b5ae <__cvt+0x86>
 800b5a6:	f1c5 0501 	rsb	r5, r5, #1
 800b5aa:	f8ca 5000 	str.w	r5, [sl]
 800b5ae:	f8da 3000 	ldr.w	r3, [sl]
 800b5b2:	4499      	add	r9, r3
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	4639      	mov	r1, r7
 800b5bc:	f7f5 fa60 	bl	8000a80 <__aeabi_dcmpeq>
 800b5c0:	b108      	cbz	r0, 800b5c6 <__cvt+0x9e>
 800b5c2:	f8cd 901c 	str.w	r9, [sp, #28]
 800b5c6:	2230      	movs	r2, #48	; 0x30
 800b5c8:	9b07      	ldr	r3, [sp, #28]
 800b5ca:	454b      	cmp	r3, r9
 800b5cc:	d307      	bcc.n	800b5de <__cvt+0xb6>
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	9b07      	ldr	r3, [sp, #28]
 800b5d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b5d4:	1b9b      	subs	r3, r3, r6
 800b5d6:	6013      	str	r3, [r2, #0]
 800b5d8:	b008      	add	sp, #32
 800b5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5de:	1c59      	adds	r1, r3, #1
 800b5e0:	9107      	str	r1, [sp, #28]
 800b5e2:	701a      	strb	r2, [r3, #0]
 800b5e4:	e7f0      	b.n	800b5c8 <__cvt+0xa0>

0800b5e6 <__exponent>:
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b5ea:	2900      	cmp	r1, #0
 800b5ec:	f803 2b02 	strb.w	r2, [r3], #2
 800b5f0:	bfb6      	itet	lt
 800b5f2:	222d      	movlt	r2, #45	; 0x2d
 800b5f4:	222b      	movge	r2, #43	; 0x2b
 800b5f6:	4249      	neglt	r1, r1
 800b5f8:	2909      	cmp	r1, #9
 800b5fa:	7042      	strb	r2, [r0, #1]
 800b5fc:	dd2b      	ble.n	800b656 <__exponent+0x70>
 800b5fe:	f10d 0407 	add.w	r4, sp, #7
 800b602:	46a4      	mov	ip, r4
 800b604:	270a      	movs	r7, #10
 800b606:	fb91 f6f7 	sdiv	r6, r1, r7
 800b60a:	460a      	mov	r2, r1
 800b60c:	46a6      	mov	lr, r4
 800b60e:	fb07 1516 	mls	r5, r7, r6, r1
 800b612:	2a63      	cmp	r2, #99	; 0x63
 800b614:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800b618:	4631      	mov	r1, r6
 800b61a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b61e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b622:	dcf0      	bgt.n	800b606 <__exponent+0x20>
 800b624:	3130      	adds	r1, #48	; 0x30
 800b626:	f1ae 0502 	sub.w	r5, lr, #2
 800b62a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b62e:	4629      	mov	r1, r5
 800b630:	1c44      	adds	r4, r0, #1
 800b632:	4561      	cmp	r1, ip
 800b634:	d30a      	bcc.n	800b64c <__exponent+0x66>
 800b636:	f10d 0209 	add.w	r2, sp, #9
 800b63a:	eba2 020e 	sub.w	r2, r2, lr
 800b63e:	4565      	cmp	r5, ip
 800b640:	bf88      	it	hi
 800b642:	2200      	movhi	r2, #0
 800b644:	4413      	add	r3, r2
 800b646:	1a18      	subs	r0, r3, r0
 800b648:	b003      	add	sp, #12
 800b64a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b64c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b650:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b654:	e7ed      	b.n	800b632 <__exponent+0x4c>
 800b656:	2330      	movs	r3, #48	; 0x30
 800b658:	3130      	adds	r1, #48	; 0x30
 800b65a:	7083      	strb	r3, [r0, #2]
 800b65c:	70c1      	strb	r1, [r0, #3]
 800b65e:	1d03      	adds	r3, r0, #4
 800b660:	e7f1      	b.n	800b646 <__exponent+0x60>
	...

0800b664 <_printf_float>:
 800b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b668:	b091      	sub	sp, #68	; 0x44
 800b66a:	460c      	mov	r4, r1
 800b66c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b670:	4616      	mov	r6, r2
 800b672:	461f      	mov	r7, r3
 800b674:	4605      	mov	r5, r0
 800b676:	f001 fd69 	bl	800d14c <_localeconv_r>
 800b67a:	6803      	ldr	r3, [r0, #0]
 800b67c:	4618      	mov	r0, r3
 800b67e:	9309      	str	r3, [sp, #36]	; 0x24
 800b680:	f7f4 fdd2 	bl	8000228 <strlen>
 800b684:	2300      	movs	r3, #0
 800b686:	930e      	str	r3, [sp, #56]	; 0x38
 800b688:	f8d8 3000 	ldr.w	r3, [r8]
 800b68c:	900a      	str	r0, [sp, #40]	; 0x28
 800b68e:	3307      	adds	r3, #7
 800b690:	f023 0307 	bic.w	r3, r3, #7
 800b694:	f103 0208 	add.w	r2, r3, #8
 800b698:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b69c:	f8d4 b000 	ldr.w	fp, [r4]
 800b6a0:	f8c8 2000 	str.w	r2, [r8]
 800b6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b6ac:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b6b0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b6b4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ba:	4640      	mov	r0, r8
 800b6bc:	4b9c      	ldr	r3, [pc, #624]	; (800b930 <_printf_float+0x2cc>)
 800b6be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6c0:	f7f5 fa10 	bl	8000ae4 <__aeabi_dcmpun>
 800b6c4:	bb70      	cbnz	r0, 800b724 <_printf_float+0xc0>
 800b6c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ca:	4640      	mov	r0, r8
 800b6cc:	4b98      	ldr	r3, [pc, #608]	; (800b930 <_printf_float+0x2cc>)
 800b6ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b6d0:	f7f5 f9ea 	bl	8000aa8 <__aeabi_dcmple>
 800b6d4:	bb30      	cbnz	r0, 800b724 <_printf_float+0xc0>
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	2300      	movs	r3, #0
 800b6da:	4640      	mov	r0, r8
 800b6dc:	4651      	mov	r1, sl
 800b6de:	f7f5 f9d9 	bl	8000a94 <__aeabi_dcmplt>
 800b6e2:	b110      	cbz	r0, 800b6ea <_printf_float+0x86>
 800b6e4:	232d      	movs	r3, #45	; 0x2d
 800b6e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6ea:	4b92      	ldr	r3, [pc, #584]	; (800b934 <_printf_float+0x2d0>)
 800b6ec:	4892      	ldr	r0, [pc, #584]	; (800b938 <_printf_float+0x2d4>)
 800b6ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b6f2:	bf94      	ite	ls
 800b6f4:	4698      	movls	r8, r3
 800b6f6:	4680      	movhi	r8, r0
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	f04f 0a00 	mov.w	sl, #0
 800b6fe:	6123      	str	r3, [r4, #16]
 800b700:	f02b 0304 	bic.w	r3, fp, #4
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	4633      	mov	r3, r6
 800b708:	4621      	mov	r1, r4
 800b70a:	4628      	mov	r0, r5
 800b70c:	9700      	str	r7, [sp, #0]
 800b70e:	aa0f      	add	r2, sp, #60	; 0x3c
 800b710:	f000 f9d4 	bl	800babc <_printf_common>
 800b714:	3001      	adds	r0, #1
 800b716:	f040 8090 	bne.w	800b83a <_printf_float+0x1d6>
 800b71a:	f04f 30ff 	mov.w	r0, #4294967295
 800b71e:	b011      	add	sp, #68	; 0x44
 800b720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b724:	4642      	mov	r2, r8
 800b726:	4653      	mov	r3, sl
 800b728:	4640      	mov	r0, r8
 800b72a:	4651      	mov	r1, sl
 800b72c:	f7f5 f9da 	bl	8000ae4 <__aeabi_dcmpun>
 800b730:	b148      	cbz	r0, 800b746 <_printf_float+0xe2>
 800b732:	f1ba 0f00 	cmp.w	sl, #0
 800b736:	bfb8      	it	lt
 800b738:	232d      	movlt	r3, #45	; 0x2d
 800b73a:	4880      	ldr	r0, [pc, #512]	; (800b93c <_printf_float+0x2d8>)
 800b73c:	bfb8      	it	lt
 800b73e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b742:	4b7f      	ldr	r3, [pc, #508]	; (800b940 <_printf_float+0x2dc>)
 800b744:	e7d3      	b.n	800b6ee <_printf_float+0x8a>
 800b746:	6863      	ldr	r3, [r4, #4]
 800b748:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b74c:	1c5a      	adds	r2, r3, #1
 800b74e:	d142      	bne.n	800b7d6 <_printf_float+0x172>
 800b750:	2306      	movs	r3, #6
 800b752:	6063      	str	r3, [r4, #4]
 800b754:	2200      	movs	r2, #0
 800b756:	9206      	str	r2, [sp, #24]
 800b758:	aa0e      	add	r2, sp, #56	; 0x38
 800b75a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b75e:	aa0d      	add	r2, sp, #52	; 0x34
 800b760:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b764:	9203      	str	r2, [sp, #12]
 800b766:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b76a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b76e:	6023      	str	r3, [r4, #0]
 800b770:	6863      	ldr	r3, [r4, #4]
 800b772:	4642      	mov	r2, r8
 800b774:	9300      	str	r3, [sp, #0]
 800b776:	4628      	mov	r0, r5
 800b778:	4653      	mov	r3, sl
 800b77a:	910b      	str	r1, [sp, #44]	; 0x2c
 800b77c:	f7ff fed4 	bl	800b528 <__cvt>
 800b780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b782:	4680      	mov	r8, r0
 800b784:	2947      	cmp	r1, #71	; 0x47
 800b786:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b788:	d108      	bne.n	800b79c <_printf_float+0x138>
 800b78a:	1cc8      	adds	r0, r1, #3
 800b78c:	db02      	blt.n	800b794 <_printf_float+0x130>
 800b78e:	6863      	ldr	r3, [r4, #4]
 800b790:	4299      	cmp	r1, r3
 800b792:	dd40      	ble.n	800b816 <_printf_float+0x1b2>
 800b794:	f1a9 0902 	sub.w	r9, r9, #2
 800b798:	fa5f f989 	uxtb.w	r9, r9
 800b79c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b7a0:	d81f      	bhi.n	800b7e2 <_printf_float+0x17e>
 800b7a2:	464a      	mov	r2, r9
 800b7a4:	3901      	subs	r1, #1
 800b7a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b7aa:	910d      	str	r1, [sp, #52]	; 0x34
 800b7ac:	f7ff ff1b 	bl	800b5e6 <__exponent>
 800b7b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7b2:	4682      	mov	sl, r0
 800b7b4:	1813      	adds	r3, r2, r0
 800b7b6:	2a01      	cmp	r2, #1
 800b7b8:	6123      	str	r3, [r4, #16]
 800b7ba:	dc02      	bgt.n	800b7c2 <_printf_float+0x15e>
 800b7bc:	6822      	ldr	r2, [r4, #0]
 800b7be:	07d2      	lsls	r2, r2, #31
 800b7c0:	d501      	bpl.n	800b7c6 <_printf_float+0x162>
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	6123      	str	r3, [r4, #16]
 800b7c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d09b      	beq.n	800b706 <_printf_float+0xa2>
 800b7ce:	232d      	movs	r3, #45	; 0x2d
 800b7d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7d4:	e797      	b.n	800b706 <_printf_float+0xa2>
 800b7d6:	2947      	cmp	r1, #71	; 0x47
 800b7d8:	d1bc      	bne.n	800b754 <_printf_float+0xf0>
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1ba      	bne.n	800b754 <_printf_float+0xf0>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e7b7      	b.n	800b752 <_printf_float+0xee>
 800b7e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b7e6:	d118      	bne.n	800b81a <_printf_float+0x1b6>
 800b7e8:	2900      	cmp	r1, #0
 800b7ea:	6863      	ldr	r3, [r4, #4]
 800b7ec:	dd0b      	ble.n	800b806 <_printf_float+0x1a2>
 800b7ee:	6121      	str	r1, [r4, #16]
 800b7f0:	b913      	cbnz	r3, 800b7f8 <_printf_float+0x194>
 800b7f2:	6822      	ldr	r2, [r4, #0]
 800b7f4:	07d0      	lsls	r0, r2, #31
 800b7f6:	d502      	bpl.n	800b7fe <_printf_float+0x19a>
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	440b      	add	r3, r1
 800b7fc:	6123      	str	r3, [r4, #16]
 800b7fe:	f04f 0a00 	mov.w	sl, #0
 800b802:	65a1      	str	r1, [r4, #88]	; 0x58
 800b804:	e7df      	b.n	800b7c6 <_printf_float+0x162>
 800b806:	b913      	cbnz	r3, 800b80e <_printf_float+0x1aa>
 800b808:	6822      	ldr	r2, [r4, #0]
 800b80a:	07d2      	lsls	r2, r2, #31
 800b80c:	d501      	bpl.n	800b812 <_printf_float+0x1ae>
 800b80e:	3302      	adds	r3, #2
 800b810:	e7f4      	b.n	800b7fc <_printf_float+0x198>
 800b812:	2301      	movs	r3, #1
 800b814:	e7f2      	b.n	800b7fc <_printf_float+0x198>
 800b816:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b81a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b81c:	4299      	cmp	r1, r3
 800b81e:	db05      	blt.n	800b82c <_printf_float+0x1c8>
 800b820:	6823      	ldr	r3, [r4, #0]
 800b822:	6121      	str	r1, [r4, #16]
 800b824:	07d8      	lsls	r0, r3, #31
 800b826:	d5ea      	bpl.n	800b7fe <_printf_float+0x19a>
 800b828:	1c4b      	adds	r3, r1, #1
 800b82a:	e7e7      	b.n	800b7fc <_printf_float+0x198>
 800b82c:	2900      	cmp	r1, #0
 800b82e:	bfcc      	ite	gt
 800b830:	2201      	movgt	r2, #1
 800b832:	f1c1 0202 	rsble	r2, r1, #2
 800b836:	4413      	add	r3, r2
 800b838:	e7e0      	b.n	800b7fc <_printf_float+0x198>
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	055a      	lsls	r2, r3, #21
 800b83e:	d407      	bmi.n	800b850 <_printf_float+0x1ec>
 800b840:	6923      	ldr	r3, [r4, #16]
 800b842:	4642      	mov	r2, r8
 800b844:	4631      	mov	r1, r6
 800b846:	4628      	mov	r0, r5
 800b848:	47b8      	blx	r7
 800b84a:	3001      	adds	r0, #1
 800b84c:	d12b      	bne.n	800b8a6 <_printf_float+0x242>
 800b84e:	e764      	b.n	800b71a <_printf_float+0xb6>
 800b850:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b854:	f240 80dd 	bls.w	800ba12 <_printf_float+0x3ae>
 800b858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b85c:	2200      	movs	r2, #0
 800b85e:	2300      	movs	r3, #0
 800b860:	f7f5 f90e 	bl	8000a80 <__aeabi_dcmpeq>
 800b864:	2800      	cmp	r0, #0
 800b866:	d033      	beq.n	800b8d0 <_printf_float+0x26c>
 800b868:	2301      	movs	r3, #1
 800b86a:	4631      	mov	r1, r6
 800b86c:	4628      	mov	r0, r5
 800b86e:	4a35      	ldr	r2, [pc, #212]	; (800b944 <_printf_float+0x2e0>)
 800b870:	47b8      	blx	r7
 800b872:	3001      	adds	r0, #1
 800b874:	f43f af51 	beq.w	800b71a <_printf_float+0xb6>
 800b878:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b87c:	429a      	cmp	r2, r3
 800b87e:	db02      	blt.n	800b886 <_printf_float+0x222>
 800b880:	6823      	ldr	r3, [r4, #0]
 800b882:	07d8      	lsls	r0, r3, #31
 800b884:	d50f      	bpl.n	800b8a6 <_printf_float+0x242>
 800b886:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b88a:	4631      	mov	r1, r6
 800b88c:	4628      	mov	r0, r5
 800b88e:	47b8      	blx	r7
 800b890:	3001      	adds	r0, #1
 800b892:	f43f af42 	beq.w	800b71a <_printf_float+0xb6>
 800b896:	f04f 0800 	mov.w	r8, #0
 800b89a:	f104 091a 	add.w	r9, r4, #26
 800b89e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	4543      	cmp	r3, r8
 800b8a4:	dc09      	bgt.n	800b8ba <_printf_float+0x256>
 800b8a6:	6823      	ldr	r3, [r4, #0]
 800b8a8:	079b      	lsls	r3, r3, #30
 800b8aa:	f100 8102 	bmi.w	800bab2 <_printf_float+0x44e>
 800b8ae:	68e0      	ldr	r0, [r4, #12]
 800b8b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8b2:	4298      	cmp	r0, r3
 800b8b4:	bfb8      	it	lt
 800b8b6:	4618      	movlt	r0, r3
 800b8b8:	e731      	b.n	800b71e <_printf_float+0xba>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	464a      	mov	r2, r9
 800b8be:	4631      	mov	r1, r6
 800b8c0:	4628      	mov	r0, r5
 800b8c2:	47b8      	blx	r7
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	f43f af28 	beq.w	800b71a <_printf_float+0xb6>
 800b8ca:	f108 0801 	add.w	r8, r8, #1
 800b8ce:	e7e6      	b.n	800b89e <_printf_float+0x23a>
 800b8d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	dc38      	bgt.n	800b948 <_printf_float+0x2e4>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	4631      	mov	r1, r6
 800b8da:	4628      	mov	r0, r5
 800b8dc:	4a19      	ldr	r2, [pc, #100]	; (800b944 <_printf_float+0x2e0>)
 800b8de:	47b8      	blx	r7
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	f43f af1a 	beq.w	800b71a <_printf_float+0xb6>
 800b8e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	d102      	bne.n	800b8f4 <_printf_float+0x290>
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	07d9      	lsls	r1, r3, #31
 800b8f2:	d5d8      	bpl.n	800b8a6 <_printf_float+0x242>
 800b8f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8f8:	4631      	mov	r1, r6
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	47b8      	blx	r7
 800b8fe:	3001      	adds	r0, #1
 800b900:	f43f af0b 	beq.w	800b71a <_printf_float+0xb6>
 800b904:	f04f 0900 	mov.w	r9, #0
 800b908:	f104 0a1a 	add.w	sl, r4, #26
 800b90c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b90e:	425b      	negs	r3, r3
 800b910:	454b      	cmp	r3, r9
 800b912:	dc01      	bgt.n	800b918 <_printf_float+0x2b4>
 800b914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b916:	e794      	b.n	800b842 <_printf_float+0x1de>
 800b918:	2301      	movs	r3, #1
 800b91a:	4652      	mov	r2, sl
 800b91c:	4631      	mov	r1, r6
 800b91e:	4628      	mov	r0, r5
 800b920:	47b8      	blx	r7
 800b922:	3001      	adds	r0, #1
 800b924:	f43f aef9 	beq.w	800b71a <_printf_float+0xb6>
 800b928:	f109 0901 	add.w	r9, r9, #1
 800b92c:	e7ee      	b.n	800b90c <_printf_float+0x2a8>
 800b92e:	bf00      	nop
 800b930:	7fefffff 	.word	0x7fefffff
 800b934:	0800fba8 	.word	0x0800fba8
 800b938:	0800fbac 	.word	0x0800fbac
 800b93c:	0800fbb4 	.word	0x0800fbb4
 800b940:	0800fbb0 	.word	0x0800fbb0
 800b944:	0800fbb8 	.word	0x0800fbb8
 800b948:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b94a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b94c:	429a      	cmp	r2, r3
 800b94e:	bfa8      	it	ge
 800b950:	461a      	movge	r2, r3
 800b952:	2a00      	cmp	r2, #0
 800b954:	4691      	mov	r9, r2
 800b956:	dc37      	bgt.n	800b9c8 <_printf_float+0x364>
 800b958:	f04f 0b00 	mov.w	fp, #0
 800b95c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b960:	f104 021a 	add.w	r2, r4, #26
 800b964:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b968:	ebaa 0309 	sub.w	r3, sl, r9
 800b96c:	455b      	cmp	r3, fp
 800b96e:	dc33      	bgt.n	800b9d8 <_printf_float+0x374>
 800b970:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b974:	429a      	cmp	r2, r3
 800b976:	db3b      	blt.n	800b9f0 <_printf_float+0x38c>
 800b978:	6823      	ldr	r3, [r4, #0]
 800b97a:	07da      	lsls	r2, r3, #31
 800b97c:	d438      	bmi.n	800b9f0 <_printf_float+0x38c>
 800b97e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b980:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b982:	eba2 030a 	sub.w	r3, r2, sl
 800b986:	eba2 0901 	sub.w	r9, r2, r1
 800b98a:	4599      	cmp	r9, r3
 800b98c:	bfa8      	it	ge
 800b98e:	4699      	movge	r9, r3
 800b990:	f1b9 0f00 	cmp.w	r9, #0
 800b994:	dc34      	bgt.n	800ba00 <_printf_float+0x39c>
 800b996:	f04f 0800 	mov.w	r8, #0
 800b99a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b99e:	f104 0a1a 	add.w	sl, r4, #26
 800b9a2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b9a6:	1a9b      	subs	r3, r3, r2
 800b9a8:	eba3 0309 	sub.w	r3, r3, r9
 800b9ac:	4543      	cmp	r3, r8
 800b9ae:	f77f af7a 	ble.w	800b8a6 <_printf_float+0x242>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	4652      	mov	r2, sl
 800b9b6:	4631      	mov	r1, r6
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	47b8      	blx	r7
 800b9bc:	3001      	adds	r0, #1
 800b9be:	f43f aeac 	beq.w	800b71a <_printf_float+0xb6>
 800b9c2:	f108 0801 	add.w	r8, r8, #1
 800b9c6:	e7ec      	b.n	800b9a2 <_printf_float+0x33e>
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	4631      	mov	r1, r6
 800b9cc:	4642      	mov	r2, r8
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	47b8      	blx	r7
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	d1c0      	bne.n	800b958 <_printf_float+0x2f4>
 800b9d6:	e6a0      	b.n	800b71a <_printf_float+0xb6>
 800b9d8:	2301      	movs	r3, #1
 800b9da:	4631      	mov	r1, r6
 800b9dc:	4628      	mov	r0, r5
 800b9de:	920b      	str	r2, [sp, #44]	; 0x2c
 800b9e0:	47b8      	blx	r7
 800b9e2:	3001      	adds	r0, #1
 800b9e4:	f43f ae99 	beq.w	800b71a <_printf_float+0xb6>
 800b9e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b9ea:	f10b 0b01 	add.w	fp, fp, #1
 800b9ee:	e7b9      	b.n	800b964 <_printf_float+0x300>
 800b9f0:	4631      	mov	r1, r6
 800b9f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	47b8      	blx	r7
 800b9fa:	3001      	adds	r0, #1
 800b9fc:	d1bf      	bne.n	800b97e <_printf_float+0x31a>
 800b9fe:	e68c      	b.n	800b71a <_printf_float+0xb6>
 800ba00:	464b      	mov	r3, r9
 800ba02:	4631      	mov	r1, r6
 800ba04:	4628      	mov	r0, r5
 800ba06:	eb08 020a 	add.w	r2, r8, sl
 800ba0a:	47b8      	blx	r7
 800ba0c:	3001      	adds	r0, #1
 800ba0e:	d1c2      	bne.n	800b996 <_printf_float+0x332>
 800ba10:	e683      	b.n	800b71a <_printf_float+0xb6>
 800ba12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba14:	2a01      	cmp	r2, #1
 800ba16:	dc01      	bgt.n	800ba1c <_printf_float+0x3b8>
 800ba18:	07db      	lsls	r3, r3, #31
 800ba1a:	d537      	bpl.n	800ba8c <_printf_float+0x428>
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	4642      	mov	r2, r8
 800ba20:	4631      	mov	r1, r6
 800ba22:	4628      	mov	r0, r5
 800ba24:	47b8      	blx	r7
 800ba26:	3001      	adds	r0, #1
 800ba28:	f43f ae77 	beq.w	800b71a <_printf_float+0xb6>
 800ba2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba30:	4631      	mov	r1, r6
 800ba32:	4628      	mov	r0, r5
 800ba34:	47b8      	blx	r7
 800ba36:	3001      	adds	r0, #1
 800ba38:	f43f ae6f 	beq.w	800b71a <_printf_float+0xb6>
 800ba3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba40:	2200      	movs	r2, #0
 800ba42:	2300      	movs	r3, #0
 800ba44:	f7f5 f81c 	bl	8000a80 <__aeabi_dcmpeq>
 800ba48:	b9d8      	cbnz	r0, 800ba82 <_printf_float+0x41e>
 800ba4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba4c:	f108 0201 	add.w	r2, r8, #1
 800ba50:	3b01      	subs	r3, #1
 800ba52:	4631      	mov	r1, r6
 800ba54:	4628      	mov	r0, r5
 800ba56:	47b8      	blx	r7
 800ba58:	3001      	adds	r0, #1
 800ba5a:	d10e      	bne.n	800ba7a <_printf_float+0x416>
 800ba5c:	e65d      	b.n	800b71a <_printf_float+0xb6>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	464a      	mov	r2, r9
 800ba62:	4631      	mov	r1, r6
 800ba64:	4628      	mov	r0, r5
 800ba66:	47b8      	blx	r7
 800ba68:	3001      	adds	r0, #1
 800ba6a:	f43f ae56 	beq.w	800b71a <_printf_float+0xb6>
 800ba6e:	f108 0801 	add.w	r8, r8, #1
 800ba72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba74:	3b01      	subs	r3, #1
 800ba76:	4543      	cmp	r3, r8
 800ba78:	dcf1      	bgt.n	800ba5e <_printf_float+0x3fa>
 800ba7a:	4653      	mov	r3, sl
 800ba7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ba80:	e6e0      	b.n	800b844 <_printf_float+0x1e0>
 800ba82:	f04f 0800 	mov.w	r8, #0
 800ba86:	f104 091a 	add.w	r9, r4, #26
 800ba8a:	e7f2      	b.n	800ba72 <_printf_float+0x40e>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	4642      	mov	r2, r8
 800ba90:	e7df      	b.n	800ba52 <_printf_float+0x3ee>
 800ba92:	2301      	movs	r3, #1
 800ba94:	464a      	mov	r2, r9
 800ba96:	4631      	mov	r1, r6
 800ba98:	4628      	mov	r0, r5
 800ba9a:	47b8      	blx	r7
 800ba9c:	3001      	adds	r0, #1
 800ba9e:	f43f ae3c 	beq.w	800b71a <_printf_float+0xb6>
 800baa2:	f108 0801 	add.w	r8, r8, #1
 800baa6:	68e3      	ldr	r3, [r4, #12]
 800baa8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800baaa:	1a5b      	subs	r3, r3, r1
 800baac:	4543      	cmp	r3, r8
 800baae:	dcf0      	bgt.n	800ba92 <_printf_float+0x42e>
 800bab0:	e6fd      	b.n	800b8ae <_printf_float+0x24a>
 800bab2:	f04f 0800 	mov.w	r8, #0
 800bab6:	f104 0919 	add.w	r9, r4, #25
 800baba:	e7f4      	b.n	800baa6 <_printf_float+0x442>

0800babc <_printf_common>:
 800babc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bac0:	4616      	mov	r6, r2
 800bac2:	4699      	mov	r9, r3
 800bac4:	688a      	ldr	r2, [r1, #8]
 800bac6:	690b      	ldr	r3, [r1, #16]
 800bac8:	4607      	mov	r7, r0
 800baca:	4293      	cmp	r3, r2
 800bacc:	bfb8      	it	lt
 800bace:	4613      	movlt	r3, r2
 800bad0:	6033      	str	r3, [r6, #0]
 800bad2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bad6:	460c      	mov	r4, r1
 800bad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800badc:	b10a      	cbz	r2, 800bae2 <_printf_common+0x26>
 800bade:	3301      	adds	r3, #1
 800bae0:	6033      	str	r3, [r6, #0]
 800bae2:	6823      	ldr	r3, [r4, #0]
 800bae4:	0699      	lsls	r1, r3, #26
 800bae6:	bf42      	ittt	mi
 800bae8:	6833      	ldrmi	r3, [r6, #0]
 800baea:	3302      	addmi	r3, #2
 800baec:	6033      	strmi	r3, [r6, #0]
 800baee:	6825      	ldr	r5, [r4, #0]
 800baf0:	f015 0506 	ands.w	r5, r5, #6
 800baf4:	d106      	bne.n	800bb04 <_printf_common+0x48>
 800baf6:	f104 0a19 	add.w	sl, r4, #25
 800bafa:	68e3      	ldr	r3, [r4, #12]
 800bafc:	6832      	ldr	r2, [r6, #0]
 800bafe:	1a9b      	subs	r3, r3, r2
 800bb00:	42ab      	cmp	r3, r5
 800bb02:	dc28      	bgt.n	800bb56 <_printf_common+0x9a>
 800bb04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb08:	1e13      	subs	r3, r2, #0
 800bb0a:	6822      	ldr	r2, [r4, #0]
 800bb0c:	bf18      	it	ne
 800bb0e:	2301      	movne	r3, #1
 800bb10:	0692      	lsls	r2, r2, #26
 800bb12:	d42d      	bmi.n	800bb70 <_printf_common+0xb4>
 800bb14:	4649      	mov	r1, r9
 800bb16:	4638      	mov	r0, r7
 800bb18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb1c:	47c0      	blx	r8
 800bb1e:	3001      	adds	r0, #1
 800bb20:	d020      	beq.n	800bb64 <_printf_common+0xa8>
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	68e5      	ldr	r5, [r4, #12]
 800bb26:	f003 0306 	and.w	r3, r3, #6
 800bb2a:	2b04      	cmp	r3, #4
 800bb2c:	bf18      	it	ne
 800bb2e:	2500      	movne	r5, #0
 800bb30:	6832      	ldr	r2, [r6, #0]
 800bb32:	f04f 0600 	mov.w	r6, #0
 800bb36:	68a3      	ldr	r3, [r4, #8]
 800bb38:	bf08      	it	eq
 800bb3a:	1aad      	subeq	r5, r5, r2
 800bb3c:	6922      	ldr	r2, [r4, #16]
 800bb3e:	bf08      	it	eq
 800bb40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb44:	4293      	cmp	r3, r2
 800bb46:	bfc4      	itt	gt
 800bb48:	1a9b      	subgt	r3, r3, r2
 800bb4a:	18ed      	addgt	r5, r5, r3
 800bb4c:	341a      	adds	r4, #26
 800bb4e:	42b5      	cmp	r5, r6
 800bb50:	d11a      	bne.n	800bb88 <_printf_common+0xcc>
 800bb52:	2000      	movs	r0, #0
 800bb54:	e008      	b.n	800bb68 <_printf_common+0xac>
 800bb56:	2301      	movs	r3, #1
 800bb58:	4652      	mov	r2, sl
 800bb5a:	4649      	mov	r1, r9
 800bb5c:	4638      	mov	r0, r7
 800bb5e:	47c0      	blx	r8
 800bb60:	3001      	adds	r0, #1
 800bb62:	d103      	bne.n	800bb6c <_printf_common+0xb0>
 800bb64:	f04f 30ff 	mov.w	r0, #4294967295
 800bb68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb6c:	3501      	adds	r5, #1
 800bb6e:	e7c4      	b.n	800bafa <_printf_common+0x3e>
 800bb70:	2030      	movs	r0, #48	; 0x30
 800bb72:	18e1      	adds	r1, r4, r3
 800bb74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bb78:	1c5a      	adds	r2, r3, #1
 800bb7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bb7e:	4422      	add	r2, r4
 800bb80:	3302      	adds	r3, #2
 800bb82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bb86:	e7c5      	b.n	800bb14 <_printf_common+0x58>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	4622      	mov	r2, r4
 800bb8c:	4649      	mov	r1, r9
 800bb8e:	4638      	mov	r0, r7
 800bb90:	47c0      	blx	r8
 800bb92:	3001      	adds	r0, #1
 800bb94:	d0e6      	beq.n	800bb64 <_printf_common+0xa8>
 800bb96:	3601      	adds	r6, #1
 800bb98:	e7d9      	b.n	800bb4e <_printf_common+0x92>
	...

0800bb9c <_printf_i>:
 800bb9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bba0:	460c      	mov	r4, r1
 800bba2:	7e27      	ldrb	r7, [r4, #24]
 800bba4:	4691      	mov	r9, r2
 800bba6:	2f78      	cmp	r7, #120	; 0x78
 800bba8:	4680      	mov	r8, r0
 800bbaa:	469a      	mov	sl, r3
 800bbac:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bbae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbb2:	d807      	bhi.n	800bbc4 <_printf_i+0x28>
 800bbb4:	2f62      	cmp	r7, #98	; 0x62
 800bbb6:	d80a      	bhi.n	800bbce <_printf_i+0x32>
 800bbb8:	2f00      	cmp	r7, #0
 800bbba:	f000 80d9 	beq.w	800bd70 <_printf_i+0x1d4>
 800bbbe:	2f58      	cmp	r7, #88	; 0x58
 800bbc0:	f000 80a4 	beq.w	800bd0c <_printf_i+0x170>
 800bbc4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bbc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bbcc:	e03a      	b.n	800bc44 <_printf_i+0xa8>
 800bbce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bbd2:	2b15      	cmp	r3, #21
 800bbd4:	d8f6      	bhi.n	800bbc4 <_printf_i+0x28>
 800bbd6:	a001      	add	r0, pc, #4	; (adr r0, 800bbdc <_printf_i+0x40>)
 800bbd8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bbdc:	0800bc35 	.word	0x0800bc35
 800bbe0:	0800bc49 	.word	0x0800bc49
 800bbe4:	0800bbc5 	.word	0x0800bbc5
 800bbe8:	0800bbc5 	.word	0x0800bbc5
 800bbec:	0800bbc5 	.word	0x0800bbc5
 800bbf0:	0800bbc5 	.word	0x0800bbc5
 800bbf4:	0800bc49 	.word	0x0800bc49
 800bbf8:	0800bbc5 	.word	0x0800bbc5
 800bbfc:	0800bbc5 	.word	0x0800bbc5
 800bc00:	0800bbc5 	.word	0x0800bbc5
 800bc04:	0800bbc5 	.word	0x0800bbc5
 800bc08:	0800bd57 	.word	0x0800bd57
 800bc0c:	0800bc79 	.word	0x0800bc79
 800bc10:	0800bd39 	.word	0x0800bd39
 800bc14:	0800bbc5 	.word	0x0800bbc5
 800bc18:	0800bbc5 	.word	0x0800bbc5
 800bc1c:	0800bd79 	.word	0x0800bd79
 800bc20:	0800bbc5 	.word	0x0800bbc5
 800bc24:	0800bc79 	.word	0x0800bc79
 800bc28:	0800bbc5 	.word	0x0800bbc5
 800bc2c:	0800bbc5 	.word	0x0800bbc5
 800bc30:	0800bd41 	.word	0x0800bd41
 800bc34:	680b      	ldr	r3, [r1, #0]
 800bc36:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc3a:	1d1a      	adds	r2, r3, #4
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	600a      	str	r2, [r1, #0]
 800bc40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc44:	2301      	movs	r3, #1
 800bc46:	e0a4      	b.n	800bd92 <_printf_i+0x1f6>
 800bc48:	6825      	ldr	r5, [r4, #0]
 800bc4a:	6808      	ldr	r0, [r1, #0]
 800bc4c:	062e      	lsls	r6, r5, #24
 800bc4e:	f100 0304 	add.w	r3, r0, #4
 800bc52:	d50a      	bpl.n	800bc6a <_printf_i+0xce>
 800bc54:	6805      	ldr	r5, [r0, #0]
 800bc56:	600b      	str	r3, [r1, #0]
 800bc58:	2d00      	cmp	r5, #0
 800bc5a:	da03      	bge.n	800bc64 <_printf_i+0xc8>
 800bc5c:	232d      	movs	r3, #45	; 0x2d
 800bc5e:	426d      	negs	r5, r5
 800bc60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bc64:	230a      	movs	r3, #10
 800bc66:	485e      	ldr	r0, [pc, #376]	; (800bde0 <_printf_i+0x244>)
 800bc68:	e019      	b.n	800bc9e <_printf_i+0x102>
 800bc6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bc6e:	6805      	ldr	r5, [r0, #0]
 800bc70:	600b      	str	r3, [r1, #0]
 800bc72:	bf18      	it	ne
 800bc74:	b22d      	sxthne	r5, r5
 800bc76:	e7ef      	b.n	800bc58 <_printf_i+0xbc>
 800bc78:	680b      	ldr	r3, [r1, #0]
 800bc7a:	6825      	ldr	r5, [r4, #0]
 800bc7c:	1d18      	adds	r0, r3, #4
 800bc7e:	6008      	str	r0, [r1, #0]
 800bc80:	0628      	lsls	r0, r5, #24
 800bc82:	d501      	bpl.n	800bc88 <_printf_i+0xec>
 800bc84:	681d      	ldr	r5, [r3, #0]
 800bc86:	e002      	b.n	800bc8e <_printf_i+0xf2>
 800bc88:	0669      	lsls	r1, r5, #25
 800bc8a:	d5fb      	bpl.n	800bc84 <_printf_i+0xe8>
 800bc8c:	881d      	ldrh	r5, [r3, #0]
 800bc8e:	2f6f      	cmp	r7, #111	; 0x6f
 800bc90:	bf0c      	ite	eq
 800bc92:	2308      	moveq	r3, #8
 800bc94:	230a      	movne	r3, #10
 800bc96:	4852      	ldr	r0, [pc, #328]	; (800bde0 <_printf_i+0x244>)
 800bc98:	2100      	movs	r1, #0
 800bc9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bc9e:	6866      	ldr	r6, [r4, #4]
 800bca0:	2e00      	cmp	r6, #0
 800bca2:	bfa8      	it	ge
 800bca4:	6821      	ldrge	r1, [r4, #0]
 800bca6:	60a6      	str	r6, [r4, #8]
 800bca8:	bfa4      	itt	ge
 800bcaa:	f021 0104 	bicge.w	r1, r1, #4
 800bcae:	6021      	strge	r1, [r4, #0]
 800bcb0:	b90d      	cbnz	r5, 800bcb6 <_printf_i+0x11a>
 800bcb2:	2e00      	cmp	r6, #0
 800bcb4:	d04d      	beq.n	800bd52 <_printf_i+0x1b6>
 800bcb6:	4616      	mov	r6, r2
 800bcb8:	fbb5 f1f3 	udiv	r1, r5, r3
 800bcbc:	fb03 5711 	mls	r7, r3, r1, r5
 800bcc0:	5dc7      	ldrb	r7, [r0, r7]
 800bcc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bcc6:	462f      	mov	r7, r5
 800bcc8:	42bb      	cmp	r3, r7
 800bcca:	460d      	mov	r5, r1
 800bccc:	d9f4      	bls.n	800bcb8 <_printf_i+0x11c>
 800bcce:	2b08      	cmp	r3, #8
 800bcd0:	d10b      	bne.n	800bcea <_printf_i+0x14e>
 800bcd2:	6823      	ldr	r3, [r4, #0]
 800bcd4:	07df      	lsls	r7, r3, #31
 800bcd6:	d508      	bpl.n	800bcea <_printf_i+0x14e>
 800bcd8:	6923      	ldr	r3, [r4, #16]
 800bcda:	6861      	ldr	r1, [r4, #4]
 800bcdc:	4299      	cmp	r1, r3
 800bcde:	bfde      	ittt	le
 800bce0:	2330      	movle	r3, #48	; 0x30
 800bce2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bce6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bcea:	1b92      	subs	r2, r2, r6
 800bcec:	6122      	str	r2, [r4, #16]
 800bcee:	464b      	mov	r3, r9
 800bcf0:	4621      	mov	r1, r4
 800bcf2:	4640      	mov	r0, r8
 800bcf4:	f8cd a000 	str.w	sl, [sp]
 800bcf8:	aa03      	add	r2, sp, #12
 800bcfa:	f7ff fedf 	bl	800babc <_printf_common>
 800bcfe:	3001      	adds	r0, #1
 800bd00:	d14c      	bne.n	800bd9c <_printf_i+0x200>
 800bd02:	f04f 30ff 	mov.w	r0, #4294967295
 800bd06:	b004      	add	sp, #16
 800bd08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd0c:	4834      	ldr	r0, [pc, #208]	; (800bde0 <_printf_i+0x244>)
 800bd0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd12:	680e      	ldr	r6, [r1, #0]
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	f856 5b04 	ldr.w	r5, [r6], #4
 800bd1a:	061f      	lsls	r7, r3, #24
 800bd1c:	600e      	str	r6, [r1, #0]
 800bd1e:	d514      	bpl.n	800bd4a <_printf_i+0x1ae>
 800bd20:	07d9      	lsls	r1, r3, #31
 800bd22:	bf44      	itt	mi
 800bd24:	f043 0320 	orrmi.w	r3, r3, #32
 800bd28:	6023      	strmi	r3, [r4, #0]
 800bd2a:	b91d      	cbnz	r5, 800bd34 <_printf_i+0x198>
 800bd2c:	6823      	ldr	r3, [r4, #0]
 800bd2e:	f023 0320 	bic.w	r3, r3, #32
 800bd32:	6023      	str	r3, [r4, #0]
 800bd34:	2310      	movs	r3, #16
 800bd36:	e7af      	b.n	800bc98 <_printf_i+0xfc>
 800bd38:	6823      	ldr	r3, [r4, #0]
 800bd3a:	f043 0320 	orr.w	r3, r3, #32
 800bd3e:	6023      	str	r3, [r4, #0]
 800bd40:	2378      	movs	r3, #120	; 0x78
 800bd42:	4828      	ldr	r0, [pc, #160]	; (800bde4 <_printf_i+0x248>)
 800bd44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd48:	e7e3      	b.n	800bd12 <_printf_i+0x176>
 800bd4a:	065e      	lsls	r6, r3, #25
 800bd4c:	bf48      	it	mi
 800bd4e:	b2ad      	uxthmi	r5, r5
 800bd50:	e7e6      	b.n	800bd20 <_printf_i+0x184>
 800bd52:	4616      	mov	r6, r2
 800bd54:	e7bb      	b.n	800bcce <_printf_i+0x132>
 800bd56:	680b      	ldr	r3, [r1, #0]
 800bd58:	6826      	ldr	r6, [r4, #0]
 800bd5a:	1d1d      	adds	r5, r3, #4
 800bd5c:	6960      	ldr	r0, [r4, #20]
 800bd5e:	600d      	str	r5, [r1, #0]
 800bd60:	0635      	lsls	r5, r6, #24
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	d501      	bpl.n	800bd6a <_printf_i+0x1ce>
 800bd66:	6018      	str	r0, [r3, #0]
 800bd68:	e002      	b.n	800bd70 <_printf_i+0x1d4>
 800bd6a:	0671      	lsls	r1, r6, #25
 800bd6c:	d5fb      	bpl.n	800bd66 <_printf_i+0x1ca>
 800bd6e:	8018      	strh	r0, [r3, #0]
 800bd70:	2300      	movs	r3, #0
 800bd72:	4616      	mov	r6, r2
 800bd74:	6123      	str	r3, [r4, #16]
 800bd76:	e7ba      	b.n	800bcee <_printf_i+0x152>
 800bd78:	680b      	ldr	r3, [r1, #0]
 800bd7a:	1d1a      	adds	r2, r3, #4
 800bd7c:	600a      	str	r2, [r1, #0]
 800bd7e:	681e      	ldr	r6, [r3, #0]
 800bd80:	2100      	movs	r1, #0
 800bd82:	4630      	mov	r0, r6
 800bd84:	6862      	ldr	r2, [r4, #4]
 800bd86:	f001 fa4d 	bl	800d224 <memchr>
 800bd8a:	b108      	cbz	r0, 800bd90 <_printf_i+0x1f4>
 800bd8c:	1b80      	subs	r0, r0, r6
 800bd8e:	6060      	str	r0, [r4, #4]
 800bd90:	6863      	ldr	r3, [r4, #4]
 800bd92:	6123      	str	r3, [r4, #16]
 800bd94:	2300      	movs	r3, #0
 800bd96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd9a:	e7a8      	b.n	800bcee <_printf_i+0x152>
 800bd9c:	4632      	mov	r2, r6
 800bd9e:	4649      	mov	r1, r9
 800bda0:	4640      	mov	r0, r8
 800bda2:	6923      	ldr	r3, [r4, #16]
 800bda4:	47d0      	blx	sl
 800bda6:	3001      	adds	r0, #1
 800bda8:	d0ab      	beq.n	800bd02 <_printf_i+0x166>
 800bdaa:	6823      	ldr	r3, [r4, #0]
 800bdac:	079b      	lsls	r3, r3, #30
 800bdae:	d413      	bmi.n	800bdd8 <_printf_i+0x23c>
 800bdb0:	68e0      	ldr	r0, [r4, #12]
 800bdb2:	9b03      	ldr	r3, [sp, #12]
 800bdb4:	4298      	cmp	r0, r3
 800bdb6:	bfb8      	it	lt
 800bdb8:	4618      	movlt	r0, r3
 800bdba:	e7a4      	b.n	800bd06 <_printf_i+0x16a>
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	4632      	mov	r2, r6
 800bdc0:	4649      	mov	r1, r9
 800bdc2:	4640      	mov	r0, r8
 800bdc4:	47d0      	blx	sl
 800bdc6:	3001      	adds	r0, #1
 800bdc8:	d09b      	beq.n	800bd02 <_printf_i+0x166>
 800bdca:	3501      	adds	r5, #1
 800bdcc:	68e3      	ldr	r3, [r4, #12]
 800bdce:	9903      	ldr	r1, [sp, #12]
 800bdd0:	1a5b      	subs	r3, r3, r1
 800bdd2:	42ab      	cmp	r3, r5
 800bdd4:	dcf2      	bgt.n	800bdbc <_printf_i+0x220>
 800bdd6:	e7eb      	b.n	800bdb0 <_printf_i+0x214>
 800bdd8:	2500      	movs	r5, #0
 800bdda:	f104 0619 	add.w	r6, r4, #25
 800bdde:	e7f5      	b.n	800bdcc <_printf_i+0x230>
 800bde0:	0800fbba 	.word	0x0800fbba
 800bde4:	0800fbcb 	.word	0x0800fbcb

0800bde8 <iprintf>:
 800bde8:	b40f      	push	{r0, r1, r2, r3}
 800bdea:	4b0a      	ldr	r3, [pc, #40]	; (800be14 <iprintf+0x2c>)
 800bdec:	b513      	push	{r0, r1, r4, lr}
 800bdee:	681c      	ldr	r4, [r3, #0]
 800bdf0:	b124      	cbz	r4, 800bdfc <iprintf+0x14>
 800bdf2:	69a3      	ldr	r3, [r4, #24]
 800bdf4:	b913      	cbnz	r3, 800bdfc <iprintf+0x14>
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	f001 f90a 	bl	800d010 <__sinit>
 800bdfc:	ab05      	add	r3, sp, #20
 800bdfe:	4620      	mov	r0, r4
 800be00:	9a04      	ldr	r2, [sp, #16]
 800be02:	68a1      	ldr	r1, [r4, #8]
 800be04:	9301      	str	r3, [sp, #4]
 800be06:	f001 ff3b 	bl	800dc80 <_vfiprintf_r>
 800be0a:	b002      	add	sp, #8
 800be0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be10:	b004      	add	sp, #16
 800be12:	4770      	bx	lr
 800be14:	2000001c 	.word	0x2000001c

0800be18 <_puts_r>:
 800be18:	b570      	push	{r4, r5, r6, lr}
 800be1a:	460e      	mov	r6, r1
 800be1c:	4605      	mov	r5, r0
 800be1e:	b118      	cbz	r0, 800be28 <_puts_r+0x10>
 800be20:	6983      	ldr	r3, [r0, #24]
 800be22:	b90b      	cbnz	r3, 800be28 <_puts_r+0x10>
 800be24:	f001 f8f4 	bl	800d010 <__sinit>
 800be28:	69ab      	ldr	r3, [r5, #24]
 800be2a:	68ac      	ldr	r4, [r5, #8]
 800be2c:	b913      	cbnz	r3, 800be34 <_puts_r+0x1c>
 800be2e:	4628      	mov	r0, r5
 800be30:	f001 f8ee 	bl	800d010 <__sinit>
 800be34:	4b2c      	ldr	r3, [pc, #176]	; (800bee8 <_puts_r+0xd0>)
 800be36:	429c      	cmp	r4, r3
 800be38:	d120      	bne.n	800be7c <_puts_r+0x64>
 800be3a:	686c      	ldr	r4, [r5, #4]
 800be3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be3e:	07db      	lsls	r3, r3, #31
 800be40:	d405      	bmi.n	800be4e <_puts_r+0x36>
 800be42:	89a3      	ldrh	r3, [r4, #12]
 800be44:	0598      	lsls	r0, r3, #22
 800be46:	d402      	bmi.n	800be4e <_puts_r+0x36>
 800be48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be4a:	f001 f984 	bl	800d156 <__retarget_lock_acquire_recursive>
 800be4e:	89a3      	ldrh	r3, [r4, #12]
 800be50:	0719      	lsls	r1, r3, #28
 800be52:	d51d      	bpl.n	800be90 <_puts_r+0x78>
 800be54:	6923      	ldr	r3, [r4, #16]
 800be56:	b1db      	cbz	r3, 800be90 <_puts_r+0x78>
 800be58:	3e01      	subs	r6, #1
 800be5a:	68a3      	ldr	r3, [r4, #8]
 800be5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800be60:	3b01      	subs	r3, #1
 800be62:	60a3      	str	r3, [r4, #8]
 800be64:	bb39      	cbnz	r1, 800beb6 <_puts_r+0x9e>
 800be66:	2b00      	cmp	r3, #0
 800be68:	da38      	bge.n	800bedc <_puts_r+0xc4>
 800be6a:	4622      	mov	r2, r4
 800be6c:	210a      	movs	r1, #10
 800be6e:	4628      	mov	r0, r5
 800be70:	f000 f878 	bl	800bf64 <__swbuf_r>
 800be74:	3001      	adds	r0, #1
 800be76:	d011      	beq.n	800be9c <_puts_r+0x84>
 800be78:	250a      	movs	r5, #10
 800be7a:	e011      	b.n	800bea0 <_puts_r+0x88>
 800be7c:	4b1b      	ldr	r3, [pc, #108]	; (800beec <_puts_r+0xd4>)
 800be7e:	429c      	cmp	r4, r3
 800be80:	d101      	bne.n	800be86 <_puts_r+0x6e>
 800be82:	68ac      	ldr	r4, [r5, #8]
 800be84:	e7da      	b.n	800be3c <_puts_r+0x24>
 800be86:	4b1a      	ldr	r3, [pc, #104]	; (800bef0 <_puts_r+0xd8>)
 800be88:	429c      	cmp	r4, r3
 800be8a:	bf08      	it	eq
 800be8c:	68ec      	ldreq	r4, [r5, #12]
 800be8e:	e7d5      	b.n	800be3c <_puts_r+0x24>
 800be90:	4621      	mov	r1, r4
 800be92:	4628      	mov	r0, r5
 800be94:	f000 f8b8 	bl	800c008 <__swsetup_r>
 800be98:	2800      	cmp	r0, #0
 800be9a:	d0dd      	beq.n	800be58 <_puts_r+0x40>
 800be9c:	f04f 35ff 	mov.w	r5, #4294967295
 800bea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bea2:	07da      	lsls	r2, r3, #31
 800bea4:	d405      	bmi.n	800beb2 <_puts_r+0x9a>
 800bea6:	89a3      	ldrh	r3, [r4, #12]
 800bea8:	059b      	lsls	r3, r3, #22
 800beaa:	d402      	bmi.n	800beb2 <_puts_r+0x9a>
 800beac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800beae:	f001 f953 	bl	800d158 <__retarget_lock_release_recursive>
 800beb2:	4628      	mov	r0, r5
 800beb4:	bd70      	pop	{r4, r5, r6, pc}
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	da04      	bge.n	800bec4 <_puts_r+0xac>
 800beba:	69a2      	ldr	r2, [r4, #24]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	dc06      	bgt.n	800bece <_puts_r+0xb6>
 800bec0:	290a      	cmp	r1, #10
 800bec2:	d004      	beq.n	800bece <_puts_r+0xb6>
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	1c5a      	adds	r2, r3, #1
 800bec8:	6022      	str	r2, [r4, #0]
 800beca:	7019      	strb	r1, [r3, #0]
 800becc:	e7c5      	b.n	800be5a <_puts_r+0x42>
 800bece:	4622      	mov	r2, r4
 800bed0:	4628      	mov	r0, r5
 800bed2:	f000 f847 	bl	800bf64 <__swbuf_r>
 800bed6:	3001      	adds	r0, #1
 800bed8:	d1bf      	bne.n	800be5a <_puts_r+0x42>
 800beda:	e7df      	b.n	800be9c <_puts_r+0x84>
 800bedc:	250a      	movs	r5, #10
 800bede:	6823      	ldr	r3, [r4, #0]
 800bee0:	1c5a      	adds	r2, r3, #1
 800bee2:	6022      	str	r2, [r4, #0]
 800bee4:	701d      	strb	r5, [r3, #0]
 800bee6:	e7db      	b.n	800bea0 <_puts_r+0x88>
 800bee8:	0800fc90 	.word	0x0800fc90
 800beec:	0800fcb0 	.word	0x0800fcb0
 800bef0:	0800fc70 	.word	0x0800fc70

0800bef4 <puts>:
 800bef4:	4b02      	ldr	r3, [pc, #8]	; (800bf00 <puts+0xc>)
 800bef6:	4601      	mov	r1, r0
 800bef8:	6818      	ldr	r0, [r3, #0]
 800befa:	f7ff bf8d 	b.w	800be18 <_puts_r>
 800befe:	bf00      	nop
 800bf00:	2000001c 	.word	0x2000001c

0800bf04 <_sbrk_r>:
 800bf04:	b538      	push	{r3, r4, r5, lr}
 800bf06:	2300      	movs	r3, #0
 800bf08:	4d05      	ldr	r5, [pc, #20]	; (800bf20 <_sbrk_r+0x1c>)
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	4608      	mov	r0, r1
 800bf0e:	602b      	str	r3, [r5, #0]
 800bf10:	f7fa ff0e 	bl	8006d30 <_sbrk>
 800bf14:	1c43      	adds	r3, r0, #1
 800bf16:	d102      	bne.n	800bf1e <_sbrk_r+0x1a>
 800bf18:	682b      	ldr	r3, [r5, #0]
 800bf1a:	b103      	cbz	r3, 800bf1e <_sbrk_r+0x1a>
 800bf1c:	6023      	str	r3, [r4, #0]
 800bf1e:	bd38      	pop	{r3, r4, r5, pc}
 800bf20:	20000554 	.word	0x20000554

0800bf24 <siprintf>:
 800bf24:	b40e      	push	{r1, r2, r3}
 800bf26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf2a:	b500      	push	{lr}
 800bf2c:	b09c      	sub	sp, #112	; 0x70
 800bf2e:	ab1d      	add	r3, sp, #116	; 0x74
 800bf30:	9002      	str	r0, [sp, #8]
 800bf32:	9006      	str	r0, [sp, #24]
 800bf34:	9107      	str	r1, [sp, #28]
 800bf36:	9104      	str	r1, [sp, #16]
 800bf38:	4808      	ldr	r0, [pc, #32]	; (800bf5c <siprintf+0x38>)
 800bf3a:	4909      	ldr	r1, [pc, #36]	; (800bf60 <siprintf+0x3c>)
 800bf3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf40:	9105      	str	r1, [sp, #20]
 800bf42:	6800      	ldr	r0, [r0, #0]
 800bf44:	a902      	add	r1, sp, #8
 800bf46:	9301      	str	r3, [sp, #4]
 800bf48:	f001 fd72 	bl	800da30 <_svfiprintf_r>
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	9b02      	ldr	r3, [sp, #8]
 800bf50:	701a      	strb	r2, [r3, #0]
 800bf52:	b01c      	add	sp, #112	; 0x70
 800bf54:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf58:	b003      	add	sp, #12
 800bf5a:	4770      	bx	lr
 800bf5c:	2000001c 	.word	0x2000001c
 800bf60:	ffff0208 	.word	0xffff0208

0800bf64 <__swbuf_r>:
 800bf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf66:	460e      	mov	r6, r1
 800bf68:	4614      	mov	r4, r2
 800bf6a:	4605      	mov	r5, r0
 800bf6c:	b118      	cbz	r0, 800bf76 <__swbuf_r+0x12>
 800bf6e:	6983      	ldr	r3, [r0, #24]
 800bf70:	b90b      	cbnz	r3, 800bf76 <__swbuf_r+0x12>
 800bf72:	f001 f84d 	bl	800d010 <__sinit>
 800bf76:	4b21      	ldr	r3, [pc, #132]	; (800bffc <__swbuf_r+0x98>)
 800bf78:	429c      	cmp	r4, r3
 800bf7a:	d12b      	bne.n	800bfd4 <__swbuf_r+0x70>
 800bf7c:	686c      	ldr	r4, [r5, #4]
 800bf7e:	69a3      	ldr	r3, [r4, #24]
 800bf80:	60a3      	str	r3, [r4, #8]
 800bf82:	89a3      	ldrh	r3, [r4, #12]
 800bf84:	071a      	lsls	r2, r3, #28
 800bf86:	d52f      	bpl.n	800bfe8 <__swbuf_r+0x84>
 800bf88:	6923      	ldr	r3, [r4, #16]
 800bf8a:	b36b      	cbz	r3, 800bfe8 <__swbuf_r+0x84>
 800bf8c:	6923      	ldr	r3, [r4, #16]
 800bf8e:	6820      	ldr	r0, [r4, #0]
 800bf90:	b2f6      	uxtb	r6, r6
 800bf92:	1ac0      	subs	r0, r0, r3
 800bf94:	6963      	ldr	r3, [r4, #20]
 800bf96:	4637      	mov	r7, r6
 800bf98:	4283      	cmp	r3, r0
 800bf9a:	dc04      	bgt.n	800bfa6 <__swbuf_r+0x42>
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	f000 ffa2 	bl	800cee8 <_fflush_r>
 800bfa4:	bb30      	cbnz	r0, 800bff4 <__swbuf_r+0x90>
 800bfa6:	68a3      	ldr	r3, [r4, #8]
 800bfa8:	3001      	adds	r0, #1
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	60a3      	str	r3, [r4, #8]
 800bfae:	6823      	ldr	r3, [r4, #0]
 800bfb0:	1c5a      	adds	r2, r3, #1
 800bfb2:	6022      	str	r2, [r4, #0]
 800bfb4:	701e      	strb	r6, [r3, #0]
 800bfb6:	6963      	ldr	r3, [r4, #20]
 800bfb8:	4283      	cmp	r3, r0
 800bfba:	d004      	beq.n	800bfc6 <__swbuf_r+0x62>
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	07db      	lsls	r3, r3, #31
 800bfc0:	d506      	bpl.n	800bfd0 <__swbuf_r+0x6c>
 800bfc2:	2e0a      	cmp	r6, #10
 800bfc4:	d104      	bne.n	800bfd0 <__swbuf_r+0x6c>
 800bfc6:	4621      	mov	r1, r4
 800bfc8:	4628      	mov	r0, r5
 800bfca:	f000 ff8d 	bl	800cee8 <_fflush_r>
 800bfce:	b988      	cbnz	r0, 800bff4 <__swbuf_r+0x90>
 800bfd0:	4638      	mov	r0, r7
 800bfd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfd4:	4b0a      	ldr	r3, [pc, #40]	; (800c000 <__swbuf_r+0x9c>)
 800bfd6:	429c      	cmp	r4, r3
 800bfd8:	d101      	bne.n	800bfde <__swbuf_r+0x7a>
 800bfda:	68ac      	ldr	r4, [r5, #8]
 800bfdc:	e7cf      	b.n	800bf7e <__swbuf_r+0x1a>
 800bfde:	4b09      	ldr	r3, [pc, #36]	; (800c004 <__swbuf_r+0xa0>)
 800bfe0:	429c      	cmp	r4, r3
 800bfe2:	bf08      	it	eq
 800bfe4:	68ec      	ldreq	r4, [r5, #12]
 800bfe6:	e7ca      	b.n	800bf7e <__swbuf_r+0x1a>
 800bfe8:	4621      	mov	r1, r4
 800bfea:	4628      	mov	r0, r5
 800bfec:	f000 f80c 	bl	800c008 <__swsetup_r>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	d0cb      	beq.n	800bf8c <__swbuf_r+0x28>
 800bff4:	f04f 37ff 	mov.w	r7, #4294967295
 800bff8:	e7ea      	b.n	800bfd0 <__swbuf_r+0x6c>
 800bffa:	bf00      	nop
 800bffc:	0800fc90 	.word	0x0800fc90
 800c000:	0800fcb0 	.word	0x0800fcb0
 800c004:	0800fc70 	.word	0x0800fc70

0800c008 <__swsetup_r>:
 800c008:	4b32      	ldr	r3, [pc, #200]	; (800c0d4 <__swsetup_r+0xcc>)
 800c00a:	b570      	push	{r4, r5, r6, lr}
 800c00c:	681d      	ldr	r5, [r3, #0]
 800c00e:	4606      	mov	r6, r0
 800c010:	460c      	mov	r4, r1
 800c012:	b125      	cbz	r5, 800c01e <__swsetup_r+0x16>
 800c014:	69ab      	ldr	r3, [r5, #24]
 800c016:	b913      	cbnz	r3, 800c01e <__swsetup_r+0x16>
 800c018:	4628      	mov	r0, r5
 800c01a:	f000 fff9 	bl	800d010 <__sinit>
 800c01e:	4b2e      	ldr	r3, [pc, #184]	; (800c0d8 <__swsetup_r+0xd0>)
 800c020:	429c      	cmp	r4, r3
 800c022:	d10f      	bne.n	800c044 <__swsetup_r+0x3c>
 800c024:	686c      	ldr	r4, [r5, #4]
 800c026:	89a3      	ldrh	r3, [r4, #12]
 800c028:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c02c:	0719      	lsls	r1, r3, #28
 800c02e:	d42c      	bmi.n	800c08a <__swsetup_r+0x82>
 800c030:	06dd      	lsls	r5, r3, #27
 800c032:	d411      	bmi.n	800c058 <__swsetup_r+0x50>
 800c034:	2309      	movs	r3, #9
 800c036:	6033      	str	r3, [r6, #0]
 800c038:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c03c:	f04f 30ff 	mov.w	r0, #4294967295
 800c040:	81a3      	strh	r3, [r4, #12]
 800c042:	e03e      	b.n	800c0c2 <__swsetup_r+0xba>
 800c044:	4b25      	ldr	r3, [pc, #148]	; (800c0dc <__swsetup_r+0xd4>)
 800c046:	429c      	cmp	r4, r3
 800c048:	d101      	bne.n	800c04e <__swsetup_r+0x46>
 800c04a:	68ac      	ldr	r4, [r5, #8]
 800c04c:	e7eb      	b.n	800c026 <__swsetup_r+0x1e>
 800c04e:	4b24      	ldr	r3, [pc, #144]	; (800c0e0 <__swsetup_r+0xd8>)
 800c050:	429c      	cmp	r4, r3
 800c052:	bf08      	it	eq
 800c054:	68ec      	ldreq	r4, [r5, #12]
 800c056:	e7e6      	b.n	800c026 <__swsetup_r+0x1e>
 800c058:	0758      	lsls	r0, r3, #29
 800c05a:	d512      	bpl.n	800c082 <__swsetup_r+0x7a>
 800c05c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c05e:	b141      	cbz	r1, 800c072 <__swsetup_r+0x6a>
 800c060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c064:	4299      	cmp	r1, r3
 800c066:	d002      	beq.n	800c06e <__swsetup_r+0x66>
 800c068:	4630      	mov	r0, r6
 800c06a:	f7ff f9b7 	bl	800b3dc <_free_r>
 800c06e:	2300      	movs	r3, #0
 800c070:	6363      	str	r3, [r4, #52]	; 0x34
 800c072:	89a3      	ldrh	r3, [r4, #12]
 800c074:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c078:	81a3      	strh	r3, [r4, #12]
 800c07a:	2300      	movs	r3, #0
 800c07c:	6063      	str	r3, [r4, #4]
 800c07e:	6923      	ldr	r3, [r4, #16]
 800c080:	6023      	str	r3, [r4, #0]
 800c082:	89a3      	ldrh	r3, [r4, #12]
 800c084:	f043 0308 	orr.w	r3, r3, #8
 800c088:	81a3      	strh	r3, [r4, #12]
 800c08a:	6923      	ldr	r3, [r4, #16]
 800c08c:	b94b      	cbnz	r3, 800c0a2 <__swsetup_r+0x9a>
 800c08e:	89a3      	ldrh	r3, [r4, #12]
 800c090:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c098:	d003      	beq.n	800c0a2 <__swsetup_r+0x9a>
 800c09a:	4621      	mov	r1, r4
 800c09c:	4630      	mov	r0, r6
 800c09e:	f001 f881 	bl	800d1a4 <__smakebuf_r>
 800c0a2:	89a0      	ldrh	r0, [r4, #12]
 800c0a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0a8:	f010 0301 	ands.w	r3, r0, #1
 800c0ac:	d00a      	beq.n	800c0c4 <__swsetup_r+0xbc>
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	60a3      	str	r3, [r4, #8]
 800c0b2:	6963      	ldr	r3, [r4, #20]
 800c0b4:	425b      	negs	r3, r3
 800c0b6:	61a3      	str	r3, [r4, #24]
 800c0b8:	6923      	ldr	r3, [r4, #16]
 800c0ba:	b943      	cbnz	r3, 800c0ce <__swsetup_r+0xc6>
 800c0bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0c0:	d1ba      	bne.n	800c038 <__swsetup_r+0x30>
 800c0c2:	bd70      	pop	{r4, r5, r6, pc}
 800c0c4:	0781      	lsls	r1, r0, #30
 800c0c6:	bf58      	it	pl
 800c0c8:	6963      	ldrpl	r3, [r4, #20]
 800c0ca:	60a3      	str	r3, [r4, #8]
 800c0cc:	e7f4      	b.n	800c0b8 <__swsetup_r+0xb0>
 800c0ce:	2000      	movs	r0, #0
 800c0d0:	e7f7      	b.n	800c0c2 <__swsetup_r+0xba>
 800c0d2:	bf00      	nop
 800c0d4:	2000001c 	.word	0x2000001c
 800c0d8:	0800fc90 	.word	0x0800fc90
 800c0dc:	0800fcb0 	.word	0x0800fcb0
 800c0e0:	0800fc70 	.word	0x0800fc70

0800c0e4 <quorem>:
 800c0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e8:	6903      	ldr	r3, [r0, #16]
 800c0ea:	690c      	ldr	r4, [r1, #16]
 800c0ec:	4607      	mov	r7, r0
 800c0ee:	42a3      	cmp	r3, r4
 800c0f0:	f2c0 8083 	blt.w	800c1fa <quorem+0x116>
 800c0f4:	3c01      	subs	r4, #1
 800c0f6:	f100 0514 	add.w	r5, r0, #20
 800c0fa:	f101 0814 	add.w	r8, r1, #20
 800c0fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c102:	9301      	str	r3, [sp, #4]
 800c104:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c108:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c10c:	3301      	adds	r3, #1
 800c10e:	429a      	cmp	r2, r3
 800c110:	fbb2 f6f3 	udiv	r6, r2, r3
 800c114:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c118:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c11c:	d332      	bcc.n	800c184 <quorem+0xa0>
 800c11e:	f04f 0e00 	mov.w	lr, #0
 800c122:	4640      	mov	r0, r8
 800c124:	46ac      	mov	ip, r5
 800c126:	46f2      	mov	sl, lr
 800c128:	f850 2b04 	ldr.w	r2, [r0], #4
 800c12c:	b293      	uxth	r3, r2
 800c12e:	fb06 e303 	mla	r3, r6, r3, lr
 800c132:	0c12      	lsrs	r2, r2, #16
 800c134:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c138:	fb06 e202 	mla	r2, r6, r2, lr
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	ebaa 0303 	sub.w	r3, sl, r3
 800c142:	f8dc a000 	ldr.w	sl, [ip]
 800c146:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c14a:	fa1f fa8a 	uxth.w	sl, sl
 800c14e:	4453      	add	r3, sl
 800c150:	fa1f fa82 	uxth.w	sl, r2
 800c154:	f8dc 2000 	ldr.w	r2, [ip]
 800c158:	4581      	cmp	r9, r0
 800c15a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c15e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c162:	b29b      	uxth	r3, r3
 800c164:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c168:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c16c:	f84c 3b04 	str.w	r3, [ip], #4
 800c170:	d2da      	bcs.n	800c128 <quorem+0x44>
 800c172:	f855 300b 	ldr.w	r3, [r5, fp]
 800c176:	b92b      	cbnz	r3, 800c184 <quorem+0xa0>
 800c178:	9b01      	ldr	r3, [sp, #4]
 800c17a:	3b04      	subs	r3, #4
 800c17c:	429d      	cmp	r5, r3
 800c17e:	461a      	mov	r2, r3
 800c180:	d32f      	bcc.n	800c1e2 <quorem+0xfe>
 800c182:	613c      	str	r4, [r7, #16]
 800c184:	4638      	mov	r0, r7
 800c186:	f001 fae1 	bl	800d74c <__mcmp>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	db25      	blt.n	800c1da <quorem+0xf6>
 800c18e:	4628      	mov	r0, r5
 800c190:	f04f 0c00 	mov.w	ip, #0
 800c194:	3601      	adds	r6, #1
 800c196:	f858 1b04 	ldr.w	r1, [r8], #4
 800c19a:	f8d0 e000 	ldr.w	lr, [r0]
 800c19e:	b28b      	uxth	r3, r1
 800c1a0:	ebac 0303 	sub.w	r3, ip, r3
 800c1a4:	fa1f f28e 	uxth.w	r2, lr
 800c1a8:	4413      	add	r3, r2
 800c1aa:	0c0a      	lsrs	r2, r1, #16
 800c1ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c1b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1ba:	45c1      	cmp	r9, r8
 800c1bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c1c0:	f840 3b04 	str.w	r3, [r0], #4
 800c1c4:	d2e7      	bcs.n	800c196 <quorem+0xb2>
 800c1c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c1ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c1ce:	b922      	cbnz	r2, 800c1da <quorem+0xf6>
 800c1d0:	3b04      	subs	r3, #4
 800c1d2:	429d      	cmp	r5, r3
 800c1d4:	461a      	mov	r2, r3
 800c1d6:	d30a      	bcc.n	800c1ee <quorem+0x10a>
 800c1d8:	613c      	str	r4, [r7, #16]
 800c1da:	4630      	mov	r0, r6
 800c1dc:	b003      	add	sp, #12
 800c1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e2:	6812      	ldr	r2, [r2, #0]
 800c1e4:	3b04      	subs	r3, #4
 800c1e6:	2a00      	cmp	r2, #0
 800c1e8:	d1cb      	bne.n	800c182 <quorem+0x9e>
 800c1ea:	3c01      	subs	r4, #1
 800c1ec:	e7c6      	b.n	800c17c <quorem+0x98>
 800c1ee:	6812      	ldr	r2, [r2, #0]
 800c1f0:	3b04      	subs	r3, #4
 800c1f2:	2a00      	cmp	r2, #0
 800c1f4:	d1f0      	bne.n	800c1d8 <quorem+0xf4>
 800c1f6:	3c01      	subs	r4, #1
 800c1f8:	e7eb      	b.n	800c1d2 <quorem+0xee>
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	e7ee      	b.n	800c1dc <quorem+0xf8>
	...

0800c200 <_dtoa_r>:
 800c200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c204:	4616      	mov	r6, r2
 800c206:	461f      	mov	r7, r3
 800c208:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c20a:	b099      	sub	sp, #100	; 0x64
 800c20c:	4605      	mov	r5, r0
 800c20e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c212:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c216:	b974      	cbnz	r4, 800c236 <_dtoa_r+0x36>
 800c218:	2010      	movs	r0, #16
 800c21a:	f7ff f8c1 	bl	800b3a0 <malloc>
 800c21e:	4602      	mov	r2, r0
 800c220:	6268      	str	r0, [r5, #36]	; 0x24
 800c222:	b920      	cbnz	r0, 800c22e <_dtoa_r+0x2e>
 800c224:	21ea      	movs	r1, #234	; 0xea
 800c226:	4bae      	ldr	r3, [pc, #696]	; (800c4e0 <_dtoa_r+0x2e0>)
 800c228:	48ae      	ldr	r0, [pc, #696]	; (800c4e4 <_dtoa_r+0x2e4>)
 800c22a:	f001 feaf 	bl	800df8c <__assert_func>
 800c22e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c232:	6004      	str	r4, [r0, #0]
 800c234:	60c4      	str	r4, [r0, #12]
 800c236:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c238:	6819      	ldr	r1, [r3, #0]
 800c23a:	b151      	cbz	r1, 800c252 <_dtoa_r+0x52>
 800c23c:	685a      	ldr	r2, [r3, #4]
 800c23e:	2301      	movs	r3, #1
 800c240:	4093      	lsls	r3, r2
 800c242:	604a      	str	r2, [r1, #4]
 800c244:	608b      	str	r3, [r1, #8]
 800c246:	4628      	mov	r0, r5
 800c248:	f001 f846 	bl	800d2d8 <_Bfree>
 800c24c:	2200      	movs	r2, #0
 800c24e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	1e3b      	subs	r3, r7, #0
 800c254:	bfaf      	iteee	ge
 800c256:	2300      	movge	r3, #0
 800c258:	2201      	movlt	r2, #1
 800c25a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c25e:	9305      	strlt	r3, [sp, #20]
 800c260:	bfa8      	it	ge
 800c262:	f8c8 3000 	strge.w	r3, [r8]
 800c266:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c26a:	4b9f      	ldr	r3, [pc, #636]	; (800c4e8 <_dtoa_r+0x2e8>)
 800c26c:	bfb8      	it	lt
 800c26e:	f8c8 2000 	strlt.w	r2, [r8]
 800c272:	ea33 0309 	bics.w	r3, r3, r9
 800c276:	d119      	bne.n	800c2ac <_dtoa_r+0xac>
 800c278:	f242 730f 	movw	r3, #9999	; 0x270f
 800c27c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c27e:	6013      	str	r3, [r2, #0]
 800c280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c284:	4333      	orrs	r3, r6
 800c286:	f000 8580 	beq.w	800cd8a <_dtoa_r+0xb8a>
 800c28a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c28c:	b953      	cbnz	r3, 800c2a4 <_dtoa_r+0xa4>
 800c28e:	4b97      	ldr	r3, [pc, #604]	; (800c4ec <_dtoa_r+0x2ec>)
 800c290:	e022      	b.n	800c2d8 <_dtoa_r+0xd8>
 800c292:	4b97      	ldr	r3, [pc, #604]	; (800c4f0 <_dtoa_r+0x2f0>)
 800c294:	9308      	str	r3, [sp, #32]
 800c296:	3308      	adds	r3, #8
 800c298:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	9808      	ldr	r0, [sp, #32]
 800c29e:	b019      	add	sp, #100	; 0x64
 800c2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a4:	4b91      	ldr	r3, [pc, #580]	; (800c4ec <_dtoa_r+0x2ec>)
 800c2a6:	9308      	str	r3, [sp, #32]
 800c2a8:	3303      	adds	r3, #3
 800c2aa:	e7f5      	b.n	800c298 <_dtoa_r+0x98>
 800c2ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c2b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c2b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	f7f4 fbe0 	bl	8000a80 <__aeabi_dcmpeq>
 800c2c0:	4680      	mov	r8, r0
 800c2c2:	b158      	cbz	r0, 800c2dc <_dtoa_r+0xdc>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c2c8:	6013      	str	r3, [r2, #0]
 800c2ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f000 8559 	beq.w	800cd84 <_dtoa_r+0xb84>
 800c2d2:	4888      	ldr	r0, [pc, #544]	; (800c4f4 <_dtoa_r+0x2f4>)
 800c2d4:	6018      	str	r0, [r3, #0]
 800c2d6:	1e43      	subs	r3, r0, #1
 800c2d8:	9308      	str	r3, [sp, #32]
 800c2da:	e7df      	b.n	800c29c <_dtoa_r+0x9c>
 800c2dc:	ab16      	add	r3, sp, #88	; 0x58
 800c2de:	9301      	str	r3, [sp, #4]
 800c2e0:	ab17      	add	r3, sp, #92	; 0x5c
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c2ea:	f001 fadb 	bl	800d8a4 <__d2b>
 800c2ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c2f2:	4682      	mov	sl, r0
 800c2f4:	2c00      	cmp	r4, #0
 800c2f6:	d07e      	beq.n	800c3f6 <_dtoa_r+0x1f6>
 800c2f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c2fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c306:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800c30a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c30e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c312:	2200      	movs	r2, #0
 800c314:	4b78      	ldr	r3, [pc, #480]	; (800c4f8 <_dtoa_r+0x2f8>)
 800c316:	f7f3 ff93 	bl	8000240 <__aeabi_dsub>
 800c31a:	a36b      	add	r3, pc, #428	; (adr r3, 800c4c8 <_dtoa_r+0x2c8>)
 800c31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c320:	f7f4 f946 	bl	80005b0 <__aeabi_dmul>
 800c324:	a36a      	add	r3, pc, #424	; (adr r3, 800c4d0 <_dtoa_r+0x2d0>)
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	f7f3 ff8b 	bl	8000244 <__adddf3>
 800c32e:	4606      	mov	r6, r0
 800c330:	4620      	mov	r0, r4
 800c332:	460f      	mov	r7, r1
 800c334:	f7f4 f8d2 	bl	80004dc <__aeabi_i2d>
 800c338:	a367      	add	r3, pc, #412	; (adr r3, 800c4d8 <_dtoa_r+0x2d8>)
 800c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33e:	f7f4 f937 	bl	80005b0 <__aeabi_dmul>
 800c342:	4602      	mov	r2, r0
 800c344:	460b      	mov	r3, r1
 800c346:	4630      	mov	r0, r6
 800c348:	4639      	mov	r1, r7
 800c34a:	f7f3 ff7b 	bl	8000244 <__adddf3>
 800c34e:	4606      	mov	r6, r0
 800c350:	460f      	mov	r7, r1
 800c352:	f7f4 fbdd 	bl	8000b10 <__aeabi_d2iz>
 800c356:	2200      	movs	r2, #0
 800c358:	4681      	mov	r9, r0
 800c35a:	2300      	movs	r3, #0
 800c35c:	4630      	mov	r0, r6
 800c35e:	4639      	mov	r1, r7
 800c360:	f7f4 fb98 	bl	8000a94 <__aeabi_dcmplt>
 800c364:	b148      	cbz	r0, 800c37a <_dtoa_r+0x17a>
 800c366:	4648      	mov	r0, r9
 800c368:	f7f4 f8b8 	bl	80004dc <__aeabi_i2d>
 800c36c:	4632      	mov	r2, r6
 800c36e:	463b      	mov	r3, r7
 800c370:	f7f4 fb86 	bl	8000a80 <__aeabi_dcmpeq>
 800c374:	b908      	cbnz	r0, 800c37a <_dtoa_r+0x17a>
 800c376:	f109 39ff 	add.w	r9, r9, #4294967295
 800c37a:	f1b9 0f16 	cmp.w	r9, #22
 800c37e:	d857      	bhi.n	800c430 <_dtoa_r+0x230>
 800c380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c384:	4b5d      	ldr	r3, [pc, #372]	; (800c4fc <_dtoa_r+0x2fc>)
 800c386:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c38e:	f7f4 fb81 	bl	8000a94 <__aeabi_dcmplt>
 800c392:	2800      	cmp	r0, #0
 800c394:	d04e      	beq.n	800c434 <_dtoa_r+0x234>
 800c396:	2300      	movs	r3, #0
 800c398:	f109 39ff 	add.w	r9, r9, #4294967295
 800c39c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c39e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c3a0:	1b1c      	subs	r4, r3, r4
 800c3a2:	1e63      	subs	r3, r4, #1
 800c3a4:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a6:	bf49      	itett	mi
 800c3a8:	f1c4 0301 	rsbmi	r3, r4, #1
 800c3ac:	2300      	movpl	r3, #0
 800c3ae:	9306      	strmi	r3, [sp, #24]
 800c3b0:	2300      	movmi	r3, #0
 800c3b2:	bf54      	ite	pl
 800c3b4:	9306      	strpl	r3, [sp, #24]
 800c3b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c3b8:	f1b9 0f00 	cmp.w	r9, #0
 800c3bc:	db3c      	blt.n	800c438 <_dtoa_r+0x238>
 800c3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c3c4:	444b      	add	r3, r9
 800c3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	930a      	str	r3, [sp, #40]	; 0x28
 800c3cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3ce:	2b09      	cmp	r3, #9
 800c3d0:	d86c      	bhi.n	800c4ac <_dtoa_r+0x2ac>
 800c3d2:	2b05      	cmp	r3, #5
 800c3d4:	bfc4      	itt	gt
 800c3d6:	3b04      	subgt	r3, #4
 800c3d8:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c3da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3dc:	bfc8      	it	gt
 800c3de:	2400      	movgt	r4, #0
 800c3e0:	f1a3 0302 	sub.w	r3, r3, #2
 800c3e4:	bfd8      	it	le
 800c3e6:	2401      	movle	r4, #1
 800c3e8:	2b03      	cmp	r3, #3
 800c3ea:	f200 808b 	bhi.w	800c504 <_dtoa_r+0x304>
 800c3ee:	e8df f003 	tbb	[pc, r3]
 800c3f2:	4f2d      	.short	0x4f2d
 800c3f4:	5b4d      	.short	0x5b4d
 800c3f6:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c3fa:	441c      	add	r4, r3
 800c3fc:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c400:	2b20      	cmp	r3, #32
 800c402:	bfc3      	ittte	gt
 800c404:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c408:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800c40c:	fa09 f303 	lslgt.w	r3, r9, r3
 800c410:	f1c3 0320 	rsble	r3, r3, #32
 800c414:	bfc6      	itte	gt
 800c416:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c41a:	4318      	orrgt	r0, r3
 800c41c:	fa06 f003 	lslle.w	r0, r6, r3
 800c420:	f7f4 f84c 	bl	80004bc <__aeabi_ui2d>
 800c424:	2301      	movs	r3, #1
 800c426:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c42a:	3c01      	subs	r4, #1
 800c42c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c42e:	e770      	b.n	800c312 <_dtoa_r+0x112>
 800c430:	2301      	movs	r3, #1
 800c432:	e7b3      	b.n	800c39c <_dtoa_r+0x19c>
 800c434:	900f      	str	r0, [sp, #60]	; 0x3c
 800c436:	e7b2      	b.n	800c39e <_dtoa_r+0x19e>
 800c438:	9b06      	ldr	r3, [sp, #24]
 800c43a:	eba3 0309 	sub.w	r3, r3, r9
 800c43e:	9306      	str	r3, [sp, #24]
 800c440:	f1c9 0300 	rsb	r3, r9, #0
 800c444:	930a      	str	r3, [sp, #40]	; 0x28
 800c446:	2300      	movs	r3, #0
 800c448:	930e      	str	r3, [sp, #56]	; 0x38
 800c44a:	e7bf      	b.n	800c3cc <_dtoa_r+0x1cc>
 800c44c:	2300      	movs	r3, #0
 800c44e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c450:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c452:	2b00      	cmp	r3, #0
 800c454:	dc59      	bgt.n	800c50a <_dtoa_r+0x30a>
 800c456:	f04f 0b01 	mov.w	fp, #1
 800c45a:	465b      	mov	r3, fp
 800c45c:	f8cd b008 	str.w	fp, [sp, #8]
 800c460:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800c464:	2200      	movs	r2, #0
 800c466:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c468:	6042      	str	r2, [r0, #4]
 800c46a:	2204      	movs	r2, #4
 800c46c:	f102 0614 	add.w	r6, r2, #20
 800c470:	429e      	cmp	r6, r3
 800c472:	6841      	ldr	r1, [r0, #4]
 800c474:	d94f      	bls.n	800c516 <_dtoa_r+0x316>
 800c476:	4628      	mov	r0, r5
 800c478:	f000 feee 	bl	800d258 <_Balloc>
 800c47c:	9008      	str	r0, [sp, #32]
 800c47e:	2800      	cmp	r0, #0
 800c480:	d14d      	bne.n	800c51e <_dtoa_r+0x31e>
 800c482:	4602      	mov	r2, r0
 800c484:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c488:	4b1d      	ldr	r3, [pc, #116]	; (800c500 <_dtoa_r+0x300>)
 800c48a:	e6cd      	b.n	800c228 <_dtoa_r+0x28>
 800c48c:	2301      	movs	r3, #1
 800c48e:	e7de      	b.n	800c44e <_dtoa_r+0x24e>
 800c490:	2300      	movs	r3, #0
 800c492:	930b      	str	r3, [sp, #44]	; 0x2c
 800c494:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c496:	eb09 0b03 	add.w	fp, r9, r3
 800c49a:	f10b 0301 	add.w	r3, fp, #1
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	9302      	str	r3, [sp, #8]
 800c4a2:	bfb8      	it	lt
 800c4a4:	2301      	movlt	r3, #1
 800c4a6:	e7dd      	b.n	800c464 <_dtoa_r+0x264>
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	e7f2      	b.n	800c492 <_dtoa_r+0x292>
 800c4ac:	2401      	movs	r4, #1
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	940b      	str	r4, [sp, #44]	; 0x2c
 800c4b2:	9322      	str	r3, [sp, #136]	; 0x88
 800c4b4:	f04f 3bff 	mov.w	fp, #4294967295
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	2312      	movs	r3, #18
 800c4bc:	f8cd b008 	str.w	fp, [sp, #8]
 800c4c0:	9223      	str	r2, [sp, #140]	; 0x8c
 800c4c2:	e7cf      	b.n	800c464 <_dtoa_r+0x264>
 800c4c4:	f3af 8000 	nop.w
 800c4c8:	636f4361 	.word	0x636f4361
 800c4cc:	3fd287a7 	.word	0x3fd287a7
 800c4d0:	8b60c8b3 	.word	0x8b60c8b3
 800c4d4:	3fc68a28 	.word	0x3fc68a28
 800c4d8:	509f79fb 	.word	0x509f79fb
 800c4dc:	3fd34413 	.word	0x3fd34413
 800c4e0:	0800fbe9 	.word	0x0800fbe9
 800c4e4:	0800fc00 	.word	0x0800fc00
 800c4e8:	7ff00000 	.word	0x7ff00000
 800c4ec:	0800fbe5 	.word	0x0800fbe5
 800c4f0:	0800fbdc 	.word	0x0800fbdc
 800c4f4:	0800fbb9 	.word	0x0800fbb9
 800c4f8:	3ff80000 	.word	0x3ff80000
 800c4fc:	0800fd58 	.word	0x0800fd58
 800c500:	0800fc5f 	.word	0x0800fc5f
 800c504:	2301      	movs	r3, #1
 800c506:	930b      	str	r3, [sp, #44]	; 0x2c
 800c508:	e7d4      	b.n	800c4b4 <_dtoa_r+0x2b4>
 800c50a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800c50e:	465b      	mov	r3, fp
 800c510:	f8cd b008 	str.w	fp, [sp, #8]
 800c514:	e7a6      	b.n	800c464 <_dtoa_r+0x264>
 800c516:	3101      	adds	r1, #1
 800c518:	6041      	str	r1, [r0, #4]
 800c51a:	0052      	lsls	r2, r2, #1
 800c51c:	e7a6      	b.n	800c46c <_dtoa_r+0x26c>
 800c51e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c520:	9a08      	ldr	r2, [sp, #32]
 800c522:	601a      	str	r2, [r3, #0]
 800c524:	9b02      	ldr	r3, [sp, #8]
 800c526:	2b0e      	cmp	r3, #14
 800c528:	f200 80a8 	bhi.w	800c67c <_dtoa_r+0x47c>
 800c52c:	2c00      	cmp	r4, #0
 800c52e:	f000 80a5 	beq.w	800c67c <_dtoa_r+0x47c>
 800c532:	f1b9 0f00 	cmp.w	r9, #0
 800c536:	dd34      	ble.n	800c5a2 <_dtoa_r+0x3a2>
 800c538:	4a9a      	ldr	r2, [pc, #616]	; (800c7a4 <_dtoa_r+0x5a4>)
 800c53a:	f009 030f 	and.w	r3, r9, #15
 800c53e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c542:	f419 7f80 	tst.w	r9, #256	; 0x100
 800c546:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c54a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c54e:	ea4f 1429 	mov.w	r4, r9, asr #4
 800c552:	d016      	beq.n	800c582 <_dtoa_r+0x382>
 800c554:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c558:	4b93      	ldr	r3, [pc, #588]	; (800c7a8 <_dtoa_r+0x5a8>)
 800c55a:	2703      	movs	r7, #3
 800c55c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c560:	f7f4 f950 	bl	8000804 <__aeabi_ddiv>
 800c564:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c568:	f004 040f 	and.w	r4, r4, #15
 800c56c:	4e8e      	ldr	r6, [pc, #568]	; (800c7a8 <_dtoa_r+0x5a8>)
 800c56e:	b954      	cbnz	r4, 800c586 <_dtoa_r+0x386>
 800c570:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c574:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c578:	f7f4 f944 	bl	8000804 <__aeabi_ddiv>
 800c57c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c580:	e029      	b.n	800c5d6 <_dtoa_r+0x3d6>
 800c582:	2702      	movs	r7, #2
 800c584:	e7f2      	b.n	800c56c <_dtoa_r+0x36c>
 800c586:	07e1      	lsls	r1, r4, #31
 800c588:	d508      	bpl.n	800c59c <_dtoa_r+0x39c>
 800c58a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c58e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c592:	f7f4 f80d 	bl	80005b0 <__aeabi_dmul>
 800c596:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c59a:	3701      	adds	r7, #1
 800c59c:	1064      	asrs	r4, r4, #1
 800c59e:	3608      	adds	r6, #8
 800c5a0:	e7e5      	b.n	800c56e <_dtoa_r+0x36e>
 800c5a2:	f000 80a5 	beq.w	800c6f0 <_dtoa_r+0x4f0>
 800c5a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c5aa:	f1c9 0400 	rsb	r4, r9, #0
 800c5ae:	4b7d      	ldr	r3, [pc, #500]	; (800c7a4 <_dtoa_r+0x5a4>)
 800c5b0:	f004 020f 	and.w	r2, r4, #15
 800c5b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5bc:	f7f3 fff8 	bl	80005b0 <__aeabi_dmul>
 800c5c0:	2702      	movs	r7, #2
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5c8:	4e77      	ldr	r6, [pc, #476]	; (800c7a8 <_dtoa_r+0x5a8>)
 800c5ca:	1124      	asrs	r4, r4, #4
 800c5cc:	2c00      	cmp	r4, #0
 800c5ce:	f040 8084 	bne.w	800c6da <_dtoa_r+0x4da>
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d1d2      	bne.n	800c57c <_dtoa_r+0x37c>
 800c5d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f000 808b 	beq.w	800c6f4 <_dtoa_r+0x4f4>
 800c5de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c5e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c5e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	4b6f      	ldr	r3, [pc, #444]	; (800c7ac <_dtoa_r+0x5ac>)
 800c5ee:	f7f4 fa51 	bl	8000a94 <__aeabi_dcmplt>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d07e      	beq.n	800c6f4 <_dtoa_r+0x4f4>
 800c5f6:	9b02      	ldr	r3, [sp, #8]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d07b      	beq.n	800c6f4 <_dtoa_r+0x4f4>
 800c5fc:	f1bb 0f00 	cmp.w	fp, #0
 800c600:	dd38      	ble.n	800c674 <_dtoa_r+0x474>
 800c602:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c606:	2200      	movs	r2, #0
 800c608:	4b69      	ldr	r3, [pc, #420]	; (800c7b0 <_dtoa_r+0x5b0>)
 800c60a:	f7f3 ffd1 	bl	80005b0 <__aeabi_dmul>
 800c60e:	465c      	mov	r4, fp
 800c610:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c614:	f109 38ff 	add.w	r8, r9, #4294967295
 800c618:	3701      	adds	r7, #1
 800c61a:	4638      	mov	r0, r7
 800c61c:	f7f3 ff5e 	bl	80004dc <__aeabi_i2d>
 800c620:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c624:	f7f3 ffc4 	bl	80005b0 <__aeabi_dmul>
 800c628:	2200      	movs	r2, #0
 800c62a:	4b62      	ldr	r3, [pc, #392]	; (800c7b4 <_dtoa_r+0x5b4>)
 800c62c:	f7f3 fe0a 	bl	8000244 <__adddf3>
 800c630:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c634:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c638:	9611      	str	r6, [sp, #68]	; 0x44
 800c63a:	2c00      	cmp	r4, #0
 800c63c:	d15d      	bne.n	800c6fa <_dtoa_r+0x4fa>
 800c63e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c642:	2200      	movs	r2, #0
 800c644:	4b5c      	ldr	r3, [pc, #368]	; (800c7b8 <_dtoa_r+0x5b8>)
 800c646:	f7f3 fdfb 	bl	8000240 <__aeabi_dsub>
 800c64a:	4602      	mov	r2, r0
 800c64c:	460b      	mov	r3, r1
 800c64e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c652:	4633      	mov	r3, r6
 800c654:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c656:	f7f4 fa3b 	bl	8000ad0 <__aeabi_dcmpgt>
 800c65a:	2800      	cmp	r0, #0
 800c65c:	f040 829e 	bne.w	800cb9c <_dtoa_r+0x99c>
 800c660:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c664:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c666:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c66a:	f7f4 fa13 	bl	8000a94 <__aeabi_dcmplt>
 800c66e:	2800      	cmp	r0, #0
 800c670:	f040 8292 	bne.w	800cb98 <_dtoa_r+0x998>
 800c674:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c678:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c67c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c67e:	2b00      	cmp	r3, #0
 800c680:	f2c0 8153 	blt.w	800c92a <_dtoa_r+0x72a>
 800c684:	f1b9 0f0e 	cmp.w	r9, #14
 800c688:	f300 814f 	bgt.w	800c92a <_dtoa_r+0x72a>
 800c68c:	4b45      	ldr	r3, [pc, #276]	; (800c7a4 <_dtoa_r+0x5a4>)
 800c68e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c692:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c696:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c69a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f280 80db 	bge.w	800c858 <_dtoa_r+0x658>
 800c6a2:	9b02      	ldr	r3, [sp, #8]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f300 80d7 	bgt.w	800c858 <_dtoa_r+0x658>
 800c6aa:	f040 8274 	bne.w	800cb96 <_dtoa_r+0x996>
 800c6ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	4b40      	ldr	r3, [pc, #256]	; (800c7b8 <_dtoa_r+0x5b8>)
 800c6b6:	f7f3 ff7b 	bl	80005b0 <__aeabi_dmul>
 800c6ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6be:	f7f4 f9fd 	bl	8000abc <__aeabi_dcmpge>
 800c6c2:	9c02      	ldr	r4, [sp, #8]
 800c6c4:	4626      	mov	r6, r4
 800c6c6:	2800      	cmp	r0, #0
 800c6c8:	f040 824a 	bne.w	800cb60 <_dtoa_r+0x960>
 800c6cc:	2331      	movs	r3, #49	; 0x31
 800c6ce:	9f08      	ldr	r7, [sp, #32]
 800c6d0:	f109 0901 	add.w	r9, r9, #1
 800c6d4:	f807 3b01 	strb.w	r3, [r7], #1
 800c6d8:	e246      	b.n	800cb68 <_dtoa_r+0x968>
 800c6da:	07e2      	lsls	r2, r4, #31
 800c6dc:	d505      	bpl.n	800c6ea <_dtoa_r+0x4ea>
 800c6de:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c6e2:	f7f3 ff65 	bl	80005b0 <__aeabi_dmul>
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	3701      	adds	r7, #1
 800c6ea:	1064      	asrs	r4, r4, #1
 800c6ec:	3608      	adds	r6, #8
 800c6ee:	e76d      	b.n	800c5cc <_dtoa_r+0x3cc>
 800c6f0:	2702      	movs	r7, #2
 800c6f2:	e770      	b.n	800c5d6 <_dtoa_r+0x3d6>
 800c6f4:	46c8      	mov	r8, r9
 800c6f6:	9c02      	ldr	r4, [sp, #8]
 800c6f8:	e78f      	b.n	800c61a <_dtoa_r+0x41a>
 800c6fa:	9908      	ldr	r1, [sp, #32]
 800c6fc:	4b29      	ldr	r3, [pc, #164]	; (800c7a4 <_dtoa_r+0x5a4>)
 800c6fe:	4421      	add	r1, r4
 800c700:	9112      	str	r1, [sp, #72]	; 0x48
 800c702:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c704:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c708:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c70c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c710:	2900      	cmp	r1, #0
 800c712:	d055      	beq.n	800c7c0 <_dtoa_r+0x5c0>
 800c714:	2000      	movs	r0, #0
 800c716:	4929      	ldr	r1, [pc, #164]	; (800c7bc <_dtoa_r+0x5bc>)
 800c718:	f7f4 f874 	bl	8000804 <__aeabi_ddiv>
 800c71c:	463b      	mov	r3, r7
 800c71e:	4632      	mov	r2, r6
 800c720:	f7f3 fd8e 	bl	8000240 <__aeabi_dsub>
 800c724:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c728:	9f08      	ldr	r7, [sp, #32]
 800c72a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c72e:	f7f4 f9ef 	bl	8000b10 <__aeabi_d2iz>
 800c732:	4604      	mov	r4, r0
 800c734:	f7f3 fed2 	bl	80004dc <__aeabi_i2d>
 800c738:	4602      	mov	r2, r0
 800c73a:	460b      	mov	r3, r1
 800c73c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c740:	f7f3 fd7e 	bl	8000240 <__aeabi_dsub>
 800c744:	4602      	mov	r2, r0
 800c746:	460b      	mov	r3, r1
 800c748:	3430      	adds	r4, #48	; 0x30
 800c74a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c74e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c752:	f807 4b01 	strb.w	r4, [r7], #1
 800c756:	f7f4 f99d 	bl	8000a94 <__aeabi_dcmplt>
 800c75a:	2800      	cmp	r0, #0
 800c75c:	d174      	bne.n	800c848 <_dtoa_r+0x648>
 800c75e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c762:	2000      	movs	r0, #0
 800c764:	4911      	ldr	r1, [pc, #68]	; (800c7ac <_dtoa_r+0x5ac>)
 800c766:	f7f3 fd6b 	bl	8000240 <__aeabi_dsub>
 800c76a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c76e:	f7f4 f991 	bl	8000a94 <__aeabi_dcmplt>
 800c772:	2800      	cmp	r0, #0
 800c774:	f040 80b6 	bne.w	800c8e4 <_dtoa_r+0x6e4>
 800c778:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c77a:	429f      	cmp	r7, r3
 800c77c:	f43f af7a 	beq.w	800c674 <_dtoa_r+0x474>
 800c780:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c784:	2200      	movs	r2, #0
 800c786:	4b0a      	ldr	r3, [pc, #40]	; (800c7b0 <_dtoa_r+0x5b0>)
 800c788:	f7f3 ff12 	bl	80005b0 <__aeabi_dmul>
 800c78c:	2200      	movs	r2, #0
 800c78e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c792:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c796:	4b06      	ldr	r3, [pc, #24]	; (800c7b0 <_dtoa_r+0x5b0>)
 800c798:	f7f3 ff0a 	bl	80005b0 <__aeabi_dmul>
 800c79c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c7a0:	e7c3      	b.n	800c72a <_dtoa_r+0x52a>
 800c7a2:	bf00      	nop
 800c7a4:	0800fd58 	.word	0x0800fd58
 800c7a8:	0800fd30 	.word	0x0800fd30
 800c7ac:	3ff00000 	.word	0x3ff00000
 800c7b0:	40240000 	.word	0x40240000
 800c7b4:	401c0000 	.word	0x401c0000
 800c7b8:	40140000 	.word	0x40140000
 800c7bc:	3fe00000 	.word	0x3fe00000
 800c7c0:	4630      	mov	r0, r6
 800c7c2:	4639      	mov	r1, r7
 800c7c4:	f7f3 fef4 	bl	80005b0 <__aeabi_dmul>
 800c7c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c7ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c7ce:	9c08      	ldr	r4, [sp, #32]
 800c7d0:	9314      	str	r3, [sp, #80]	; 0x50
 800c7d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7d6:	f7f4 f99b 	bl	8000b10 <__aeabi_d2iz>
 800c7da:	9015      	str	r0, [sp, #84]	; 0x54
 800c7dc:	f7f3 fe7e 	bl	80004dc <__aeabi_i2d>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7e8:	f7f3 fd2a 	bl	8000240 <__aeabi_dsub>
 800c7ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c7ee:	4606      	mov	r6, r0
 800c7f0:	3330      	adds	r3, #48	; 0x30
 800c7f2:	f804 3b01 	strb.w	r3, [r4], #1
 800c7f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c7f8:	460f      	mov	r7, r1
 800c7fa:	429c      	cmp	r4, r3
 800c7fc:	f04f 0200 	mov.w	r2, #0
 800c800:	d124      	bne.n	800c84c <_dtoa_r+0x64c>
 800c802:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c806:	4bb3      	ldr	r3, [pc, #716]	; (800cad4 <_dtoa_r+0x8d4>)
 800c808:	f7f3 fd1c 	bl	8000244 <__adddf3>
 800c80c:	4602      	mov	r2, r0
 800c80e:	460b      	mov	r3, r1
 800c810:	4630      	mov	r0, r6
 800c812:	4639      	mov	r1, r7
 800c814:	f7f4 f95c 	bl	8000ad0 <__aeabi_dcmpgt>
 800c818:	2800      	cmp	r0, #0
 800c81a:	d162      	bne.n	800c8e2 <_dtoa_r+0x6e2>
 800c81c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c820:	2000      	movs	r0, #0
 800c822:	49ac      	ldr	r1, [pc, #688]	; (800cad4 <_dtoa_r+0x8d4>)
 800c824:	f7f3 fd0c 	bl	8000240 <__aeabi_dsub>
 800c828:	4602      	mov	r2, r0
 800c82a:	460b      	mov	r3, r1
 800c82c:	4630      	mov	r0, r6
 800c82e:	4639      	mov	r1, r7
 800c830:	f7f4 f930 	bl	8000a94 <__aeabi_dcmplt>
 800c834:	2800      	cmp	r0, #0
 800c836:	f43f af1d 	beq.w	800c674 <_dtoa_r+0x474>
 800c83a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c83c:	1e7b      	subs	r3, r7, #1
 800c83e:	9314      	str	r3, [sp, #80]	; 0x50
 800c840:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c844:	2b30      	cmp	r3, #48	; 0x30
 800c846:	d0f8      	beq.n	800c83a <_dtoa_r+0x63a>
 800c848:	46c1      	mov	r9, r8
 800c84a:	e03a      	b.n	800c8c2 <_dtoa_r+0x6c2>
 800c84c:	4ba2      	ldr	r3, [pc, #648]	; (800cad8 <_dtoa_r+0x8d8>)
 800c84e:	f7f3 feaf 	bl	80005b0 <__aeabi_dmul>
 800c852:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c856:	e7bc      	b.n	800c7d2 <_dtoa_r+0x5d2>
 800c858:	9f08      	ldr	r7, [sp, #32]
 800c85a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c85e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c862:	f7f3 ffcf 	bl	8000804 <__aeabi_ddiv>
 800c866:	f7f4 f953 	bl	8000b10 <__aeabi_d2iz>
 800c86a:	4604      	mov	r4, r0
 800c86c:	f7f3 fe36 	bl	80004dc <__aeabi_i2d>
 800c870:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c874:	f7f3 fe9c 	bl	80005b0 <__aeabi_dmul>
 800c878:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c87c:	460b      	mov	r3, r1
 800c87e:	4602      	mov	r2, r0
 800c880:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c884:	f7f3 fcdc 	bl	8000240 <__aeabi_dsub>
 800c888:	f807 6b01 	strb.w	r6, [r7], #1
 800c88c:	9e08      	ldr	r6, [sp, #32]
 800c88e:	9b02      	ldr	r3, [sp, #8]
 800c890:	1bbe      	subs	r6, r7, r6
 800c892:	42b3      	cmp	r3, r6
 800c894:	d13a      	bne.n	800c90c <_dtoa_r+0x70c>
 800c896:	4602      	mov	r2, r0
 800c898:	460b      	mov	r3, r1
 800c89a:	f7f3 fcd3 	bl	8000244 <__adddf3>
 800c89e:	4602      	mov	r2, r0
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c8a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8aa:	f7f4 f911 	bl	8000ad0 <__aeabi_dcmpgt>
 800c8ae:	bb58      	cbnz	r0, 800c908 <_dtoa_r+0x708>
 800c8b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c8b8:	f7f4 f8e2 	bl	8000a80 <__aeabi_dcmpeq>
 800c8bc:	b108      	cbz	r0, 800c8c2 <_dtoa_r+0x6c2>
 800c8be:	07e1      	lsls	r1, r4, #31
 800c8c0:	d422      	bmi.n	800c908 <_dtoa_r+0x708>
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	4651      	mov	r1, sl
 800c8c6:	f000 fd07 	bl	800d2d8 <_Bfree>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	703b      	strb	r3, [r7, #0]
 800c8ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c8d0:	f109 0001 	add.w	r0, r9, #1
 800c8d4:	6018      	str	r0, [r3, #0]
 800c8d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	f43f acdf 	beq.w	800c29c <_dtoa_r+0x9c>
 800c8de:	601f      	str	r7, [r3, #0]
 800c8e0:	e4dc      	b.n	800c29c <_dtoa_r+0x9c>
 800c8e2:	4627      	mov	r7, r4
 800c8e4:	463b      	mov	r3, r7
 800c8e6:	461f      	mov	r7, r3
 800c8e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8ec:	2a39      	cmp	r2, #57	; 0x39
 800c8ee:	d107      	bne.n	800c900 <_dtoa_r+0x700>
 800c8f0:	9a08      	ldr	r2, [sp, #32]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d1f7      	bne.n	800c8e6 <_dtoa_r+0x6e6>
 800c8f6:	2230      	movs	r2, #48	; 0x30
 800c8f8:	9908      	ldr	r1, [sp, #32]
 800c8fa:	f108 0801 	add.w	r8, r8, #1
 800c8fe:	700a      	strb	r2, [r1, #0]
 800c900:	781a      	ldrb	r2, [r3, #0]
 800c902:	3201      	adds	r2, #1
 800c904:	701a      	strb	r2, [r3, #0]
 800c906:	e79f      	b.n	800c848 <_dtoa_r+0x648>
 800c908:	46c8      	mov	r8, r9
 800c90a:	e7eb      	b.n	800c8e4 <_dtoa_r+0x6e4>
 800c90c:	2200      	movs	r2, #0
 800c90e:	4b72      	ldr	r3, [pc, #456]	; (800cad8 <_dtoa_r+0x8d8>)
 800c910:	f7f3 fe4e 	bl	80005b0 <__aeabi_dmul>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c91c:	2200      	movs	r2, #0
 800c91e:	2300      	movs	r3, #0
 800c920:	f7f4 f8ae 	bl	8000a80 <__aeabi_dcmpeq>
 800c924:	2800      	cmp	r0, #0
 800c926:	d098      	beq.n	800c85a <_dtoa_r+0x65a>
 800c928:	e7cb      	b.n	800c8c2 <_dtoa_r+0x6c2>
 800c92a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c92c:	2a00      	cmp	r2, #0
 800c92e:	f000 80cd 	beq.w	800cacc <_dtoa_r+0x8cc>
 800c932:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c934:	2a01      	cmp	r2, #1
 800c936:	f300 80af 	bgt.w	800ca98 <_dtoa_r+0x898>
 800c93a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c93c:	2a00      	cmp	r2, #0
 800c93e:	f000 80a7 	beq.w	800ca90 <_dtoa_r+0x890>
 800c942:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c946:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c948:	9f06      	ldr	r7, [sp, #24]
 800c94a:	9a06      	ldr	r2, [sp, #24]
 800c94c:	2101      	movs	r1, #1
 800c94e:	441a      	add	r2, r3
 800c950:	9206      	str	r2, [sp, #24]
 800c952:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c954:	4628      	mov	r0, r5
 800c956:	441a      	add	r2, r3
 800c958:	9209      	str	r2, [sp, #36]	; 0x24
 800c95a:	f000 fd77 	bl	800d44c <__i2b>
 800c95e:	4606      	mov	r6, r0
 800c960:	2f00      	cmp	r7, #0
 800c962:	dd0c      	ble.n	800c97e <_dtoa_r+0x77e>
 800c964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c966:	2b00      	cmp	r3, #0
 800c968:	dd09      	ble.n	800c97e <_dtoa_r+0x77e>
 800c96a:	42bb      	cmp	r3, r7
 800c96c:	bfa8      	it	ge
 800c96e:	463b      	movge	r3, r7
 800c970:	9a06      	ldr	r2, [sp, #24]
 800c972:	1aff      	subs	r7, r7, r3
 800c974:	1ad2      	subs	r2, r2, r3
 800c976:	9206      	str	r2, [sp, #24]
 800c978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c97a:	1ad3      	subs	r3, r2, r3
 800c97c:	9309      	str	r3, [sp, #36]	; 0x24
 800c97e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c980:	b1f3      	cbz	r3, 800c9c0 <_dtoa_r+0x7c0>
 800c982:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c984:	2b00      	cmp	r3, #0
 800c986:	f000 80a9 	beq.w	800cadc <_dtoa_r+0x8dc>
 800c98a:	2c00      	cmp	r4, #0
 800c98c:	dd10      	ble.n	800c9b0 <_dtoa_r+0x7b0>
 800c98e:	4631      	mov	r1, r6
 800c990:	4622      	mov	r2, r4
 800c992:	4628      	mov	r0, r5
 800c994:	f000 fe14 	bl	800d5c0 <__pow5mult>
 800c998:	4652      	mov	r2, sl
 800c99a:	4601      	mov	r1, r0
 800c99c:	4606      	mov	r6, r0
 800c99e:	4628      	mov	r0, r5
 800c9a0:	f000 fd6a 	bl	800d478 <__multiply>
 800c9a4:	4680      	mov	r8, r0
 800c9a6:	4651      	mov	r1, sl
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	f000 fc95 	bl	800d2d8 <_Bfree>
 800c9ae:	46c2      	mov	sl, r8
 800c9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9b2:	1b1a      	subs	r2, r3, r4
 800c9b4:	d004      	beq.n	800c9c0 <_dtoa_r+0x7c0>
 800c9b6:	4651      	mov	r1, sl
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	f000 fe01 	bl	800d5c0 <__pow5mult>
 800c9be:	4682      	mov	sl, r0
 800c9c0:	2101      	movs	r1, #1
 800c9c2:	4628      	mov	r0, r5
 800c9c4:	f000 fd42 	bl	800d44c <__i2b>
 800c9c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f340 8087 	ble.w	800cae0 <_dtoa_r+0x8e0>
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	4601      	mov	r1, r0
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	f000 fdf2 	bl	800d5c0 <__pow5mult>
 800c9dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c9de:	4604      	mov	r4, r0
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	f340 8080 	ble.w	800cae6 <_dtoa_r+0x8e6>
 800c9e6:	f04f 0800 	mov.w	r8, #0
 800c9ea:	6923      	ldr	r3, [r4, #16]
 800c9ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9f0:	6918      	ldr	r0, [r3, #16]
 800c9f2:	f000 fcdd 	bl	800d3b0 <__hi0bits>
 800c9f6:	f1c0 0020 	rsb	r0, r0, #32
 800c9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9fc:	4418      	add	r0, r3
 800c9fe:	f010 001f 	ands.w	r0, r0, #31
 800ca02:	f000 8092 	beq.w	800cb2a <_dtoa_r+0x92a>
 800ca06:	f1c0 0320 	rsb	r3, r0, #32
 800ca0a:	2b04      	cmp	r3, #4
 800ca0c:	f340 808a 	ble.w	800cb24 <_dtoa_r+0x924>
 800ca10:	f1c0 001c 	rsb	r0, r0, #28
 800ca14:	9b06      	ldr	r3, [sp, #24]
 800ca16:	4407      	add	r7, r0
 800ca18:	4403      	add	r3, r0
 800ca1a:	9306      	str	r3, [sp, #24]
 800ca1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca1e:	4403      	add	r3, r0
 800ca20:	9309      	str	r3, [sp, #36]	; 0x24
 800ca22:	9b06      	ldr	r3, [sp, #24]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	dd05      	ble.n	800ca34 <_dtoa_r+0x834>
 800ca28:	4651      	mov	r1, sl
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	f000 fe21 	bl	800d674 <__lshift>
 800ca32:	4682      	mov	sl, r0
 800ca34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	dd05      	ble.n	800ca46 <_dtoa_r+0x846>
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	4628      	mov	r0, r5
 800ca40:	f000 fe18 	bl	800d674 <__lshift>
 800ca44:	4604      	mov	r4, r0
 800ca46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d070      	beq.n	800cb2e <_dtoa_r+0x92e>
 800ca4c:	4621      	mov	r1, r4
 800ca4e:	4650      	mov	r0, sl
 800ca50:	f000 fe7c 	bl	800d74c <__mcmp>
 800ca54:	2800      	cmp	r0, #0
 800ca56:	da6a      	bge.n	800cb2e <_dtoa_r+0x92e>
 800ca58:	2300      	movs	r3, #0
 800ca5a:	4651      	mov	r1, sl
 800ca5c:	220a      	movs	r2, #10
 800ca5e:	4628      	mov	r0, r5
 800ca60:	f000 fc5c 	bl	800d31c <__multadd>
 800ca64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca66:	4682      	mov	sl, r0
 800ca68:	f109 39ff 	add.w	r9, r9, #4294967295
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f000 8193 	beq.w	800cd98 <_dtoa_r+0xb98>
 800ca72:	4631      	mov	r1, r6
 800ca74:	2300      	movs	r3, #0
 800ca76:	220a      	movs	r2, #10
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f000 fc4f 	bl	800d31c <__multadd>
 800ca7e:	f1bb 0f00 	cmp.w	fp, #0
 800ca82:	4606      	mov	r6, r0
 800ca84:	f300 8093 	bgt.w	800cbae <_dtoa_r+0x9ae>
 800ca88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ca8a:	2b02      	cmp	r3, #2
 800ca8c:	dc57      	bgt.n	800cb3e <_dtoa_r+0x93e>
 800ca8e:	e08e      	b.n	800cbae <_dtoa_r+0x9ae>
 800ca90:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800ca92:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ca96:	e756      	b.n	800c946 <_dtoa_r+0x746>
 800ca98:	9b02      	ldr	r3, [sp, #8]
 800ca9a:	1e5c      	subs	r4, r3, #1
 800ca9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca9e:	42a3      	cmp	r3, r4
 800caa0:	bfb7      	itett	lt
 800caa2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800caa4:	1b1c      	subge	r4, r3, r4
 800caa6:	1ae2      	sublt	r2, r4, r3
 800caa8:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800caaa:	bfbe      	ittt	lt
 800caac:	940a      	strlt	r4, [sp, #40]	; 0x28
 800caae:	189b      	addlt	r3, r3, r2
 800cab0:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cab2:	9b02      	ldr	r3, [sp, #8]
 800cab4:	bfb8      	it	lt
 800cab6:	2400      	movlt	r4, #0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	bfbb      	ittet	lt
 800cabc:	9b06      	ldrlt	r3, [sp, #24]
 800cabe:	9a02      	ldrlt	r2, [sp, #8]
 800cac0:	9f06      	ldrge	r7, [sp, #24]
 800cac2:	1a9f      	sublt	r7, r3, r2
 800cac4:	bfac      	ite	ge
 800cac6:	9b02      	ldrge	r3, [sp, #8]
 800cac8:	2300      	movlt	r3, #0
 800caca:	e73e      	b.n	800c94a <_dtoa_r+0x74a>
 800cacc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cace:	9f06      	ldr	r7, [sp, #24]
 800cad0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800cad2:	e745      	b.n	800c960 <_dtoa_r+0x760>
 800cad4:	3fe00000 	.word	0x3fe00000
 800cad8:	40240000 	.word	0x40240000
 800cadc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cade:	e76a      	b.n	800c9b6 <_dtoa_r+0x7b6>
 800cae0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cae2:	2b01      	cmp	r3, #1
 800cae4:	dc19      	bgt.n	800cb1a <_dtoa_r+0x91a>
 800cae6:	9b04      	ldr	r3, [sp, #16]
 800cae8:	b9bb      	cbnz	r3, 800cb1a <_dtoa_r+0x91a>
 800caea:	9b05      	ldr	r3, [sp, #20]
 800caec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800caf0:	b99b      	cbnz	r3, 800cb1a <_dtoa_r+0x91a>
 800caf2:	9b05      	ldr	r3, [sp, #20]
 800caf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800caf8:	0d1b      	lsrs	r3, r3, #20
 800cafa:	051b      	lsls	r3, r3, #20
 800cafc:	b183      	cbz	r3, 800cb20 <_dtoa_r+0x920>
 800cafe:	f04f 0801 	mov.w	r8, #1
 800cb02:	9b06      	ldr	r3, [sp, #24]
 800cb04:	3301      	adds	r3, #1
 800cb06:	9306      	str	r3, [sp, #24]
 800cb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	9309      	str	r3, [sp, #36]	; 0x24
 800cb0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	f47f af6a 	bne.w	800c9ea <_dtoa_r+0x7ea>
 800cb16:	2001      	movs	r0, #1
 800cb18:	e76f      	b.n	800c9fa <_dtoa_r+0x7fa>
 800cb1a:	f04f 0800 	mov.w	r8, #0
 800cb1e:	e7f6      	b.n	800cb0e <_dtoa_r+0x90e>
 800cb20:	4698      	mov	r8, r3
 800cb22:	e7f4      	b.n	800cb0e <_dtoa_r+0x90e>
 800cb24:	f43f af7d 	beq.w	800ca22 <_dtoa_r+0x822>
 800cb28:	4618      	mov	r0, r3
 800cb2a:	301c      	adds	r0, #28
 800cb2c:	e772      	b.n	800ca14 <_dtoa_r+0x814>
 800cb2e:	9b02      	ldr	r3, [sp, #8]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	dc36      	bgt.n	800cba2 <_dtoa_r+0x9a2>
 800cb34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	dd33      	ble.n	800cba2 <_dtoa_r+0x9a2>
 800cb3a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800cb3e:	f1bb 0f00 	cmp.w	fp, #0
 800cb42:	d10d      	bne.n	800cb60 <_dtoa_r+0x960>
 800cb44:	4621      	mov	r1, r4
 800cb46:	465b      	mov	r3, fp
 800cb48:	2205      	movs	r2, #5
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	f000 fbe6 	bl	800d31c <__multadd>
 800cb50:	4601      	mov	r1, r0
 800cb52:	4604      	mov	r4, r0
 800cb54:	4650      	mov	r0, sl
 800cb56:	f000 fdf9 	bl	800d74c <__mcmp>
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	f73f adb6 	bgt.w	800c6cc <_dtoa_r+0x4cc>
 800cb60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cb62:	9f08      	ldr	r7, [sp, #32]
 800cb64:	ea6f 0903 	mvn.w	r9, r3
 800cb68:	f04f 0800 	mov.w	r8, #0
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	4628      	mov	r0, r5
 800cb70:	f000 fbb2 	bl	800d2d8 <_Bfree>
 800cb74:	2e00      	cmp	r6, #0
 800cb76:	f43f aea4 	beq.w	800c8c2 <_dtoa_r+0x6c2>
 800cb7a:	f1b8 0f00 	cmp.w	r8, #0
 800cb7e:	d005      	beq.n	800cb8c <_dtoa_r+0x98c>
 800cb80:	45b0      	cmp	r8, r6
 800cb82:	d003      	beq.n	800cb8c <_dtoa_r+0x98c>
 800cb84:	4641      	mov	r1, r8
 800cb86:	4628      	mov	r0, r5
 800cb88:	f000 fba6 	bl	800d2d8 <_Bfree>
 800cb8c:	4631      	mov	r1, r6
 800cb8e:	4628      	mov	r0, r5
 800cb90:	f000 fba2 	bl	800d2d8 <_Bfree>
 800cb94:	e695      	b.n	800c8c2 <_dtoa_r+0x6c2>
 800cb96:	2400      	movs	r4, #0
 800cb98:	4626      	mov	r6, r4
 800cb9a:	e7e1      	b.n	800cb60 <_dtoa_r+0x960>
 800cb9c:	46c1      	mov	r9, r8
 800cb9e:	4626      	mov	r6, r4
 800cba0:	e594      	b.n	800c6cc <_dtoa_r+0x4cc>
 800cba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cba4:	f8dd b008 	ldr.w	fp, [sp, #8]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	f000 80fc 	beq.w	800cda6 <_dtoa_r+0xba6>
 800cbae:	2f00      	cmp	r7, #0
 800cbb0:	dd05      	ble.n	800cbbe <_dtoa_r+0x9be>
 800cbb2:	4631      	mov	r1, r6
 800cbb4:	463a      	mov	r2, r7
 800cbb6:	4628      	mov	r0, r5
 800cbb8:	f000 fd5c 	bl	800d674 <__lshift>
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	f1b8 0f00 	cmp.w	r8, #0
 800cbc2:	d05c      	beq.n	800cc7e <_dtoa_r+0xa7e>
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	6871      	ldr	r1, [r6, #4]
 800cbc8:	f000 fb46 	bl	800d258 <_Balloc>
 800cbcc:	4607      	mov	r7, r0
 800cbce:	b928      	cbnz	r0, 800cbdc <_dtoa_r+0x9dc>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cbd6:	4b7e      	ldr	r3, [pc, #504]	; (800cdd0 <_dtoa_r+0xbd0>)
 800cbd8:	f7ff bb26 	b.w	800c228 <_dtoa_r+0x28>
 800cbdc:	6932      	ldr	r2, [r6, #16]
 800cbde:	f106 010c 	add.w	r1, r6, #12
 800cbe2:	3202      	adds	r2, #2
 800cbe4:	0092      	lsls	r2, r2, #2
 800cbe6:	300c      	adds	r0, #12
 800cbe8:	f7fe fbe2 	bl	800b3b0 <memcpy>
 800cbec:	2201      	movs	r2, #1
 800cbee:	4639      	mov	r1, r7
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	f000 fd3f 	bl	800d674 <__lshift>
 800cbf6:	46b0      	mov	r8, r6
 800cbf8:	4606      	mov	r6, r0
 800cbfa:	9b08      	ldr	r3, [sp, #32]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	9302      	str	r3, [sp, #8]
 800cc00:	9b08      	ldr	r3, [sp, #32]
 800cc02:	445b      	add	r3, fp
 800cc04:	930a      	str	r3, [sp, #40]	; 0x28
 800cc06:	9b04      	ldr	r3, [sp, #16]
 800cc08:	f003 0301 	and.w	r3, r3, #1
 800cc0c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc0e:	9b02      	ldr	r3, [sp, #8]
 800cc10:	4621      	mov	r1, r4
 800cc12:	4650      	mov	r0, sl
 800cc14:	f103 3bff 	add.w	fp, r3, #4294967295
 800cc18:	f7ff fa64 	bl	800c0e4 <quorem>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	4641      	mov	r1, r8
 800cc20:	3330      	adds	r3, #48	; 0x30
 800cc22:	9004      	str	r0, [sp, #16]
 800cc24:	4650      	mov	r0, sl
 800cc26:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc28:	f000 fd90 	bl	800d74c <__mcmp>
 800cc2c:	4632      	mov	r2, r6
 800cc2e:	9006      	str	r0, [sp, #24]
 800cc30:	4621      	mov	r1, r4
 800cc32:	4628      	mov	r0, r5
 800cc34:	f000 fda6 	bl	800d784 <__mdiff>
 800cc38:	68c2      	ldr	r2, [r0, #12]
 800cc3a:	4607      	mov	r7, r0
 800cc3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc3e:	bb02      	cbnz	r2, 800cc82 <_dtoa_r+0xa82>
 800cc40:	4601      	mov	r1, r0
 800cc42:	4650      	mov	r0, sl
 800cc44:	f000 fd82 	bl	800d74c <__mcmp>
 800cc48:	4602      	mov	r2, r0
 800cc4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc4c:	4639      	mov	r1, r7
 800cc4e:	4628      	mov	r0, r5
 800cc50:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800cc54:	f000 fb40 	bl	800d2d8 <_Bfree>
 800cc58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc5c:	9f02      	ldr	r7, [sp, #8]
 800cc5e:	ea43 0102 	orr.w	r1, r3, r2
 800cc62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc64:	430b      	orrs	r3, r1
 800cc66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc68:	d10d      	bne.n	800cc86 <_dtoa_r+0xa86>
 800cc6a:	2b39      	cmp	r3, #57	; 0x39
 800cc6c:	d027      	beq.n	800ccbe <_dtoa_r+0xabe>
 800cc6e:	9a06      	ldr	r2, [sp, #24]
 800cc70:	2a00      	cmp	r2, #0
 800cc72:	dd01      	ble.n	800cc78 <_dtoa_r+0xa78>
 800cc74:	9b04      	ldr	r3, [sp, #16]
 800cc76:	3331      	adds	r3, #49	; 0x31
 800cc78:	f88b 3000 	strb.w	r3, [fp]
 800cc7c:	e776      	b.n	800cb6c <_dtoa_r+0x96c>
 800cc7e:	4630      	mov	r0, r6
 800cc80:	e7b9      	b.n	800cbf6 <_dtoa_r+0x9f6>
 800cc82:	2201      	movs	r2, #1
 800cc84:	e7e2      	b.n	800cc4c <_dtoa_r+0xa4c>
 800cc86:	9906      	ldr	r1, [sp, #24]
 800cc88:	2900      	cmp	r1, #0
 800cc8a:	db04      	blt.n	800cc96 <_dtoa_r+0xa96>
 800cc8c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800cc8e:	4301      	orrs	r1, r0
 800cc90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc92:	4301      	orrs	r1, r0
 800cc94:	d120      	bne.n	800ccd8 <_dtoa_r+0xad8>
 800cc96:	2a00      	cmp	r2, #0
 800cc98:	ddee      	ble.n	800cc78 <_dtoa_r+0xa78>
 800cc9a:	4651      	mov	r1, sl
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	4628      	mov	r0, r5
 800cca0:	9302      	str	r3, [sp, #8]
 800cca2:	f000 fce7 	bl	800d674 <__lshift>
 800cca6:	4621      	mov	r1, r4
 800cca8:	4682      	mov	sl, r0
 800ccaa:	f000 fd4f 	bl	800d74c <__mcmp>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	9b02      	ldr	r3, [sp, #8]
 800ccb2:	dc02      	bgt.n	800ccba <_dtoa_r+0xaba>
 800ccb4:	d1e0      	bne.n	800cc78 <_dtoa_r+0xa78>
 800ccb6:	07da      	lsls	r2, r3, #31
 800ccb8:	d5de      	bpl.n	800cc78 <_dtoa_r+0xa78>
 800ccba:	2b39      	cmp	r3, #57	; 0x39
 800ccbc:	d1da      	bne.n	800cc74 <_dtoa_r+0xa74>
 800ccbe:	2339      	movs	r3, #57	; 0x39
 800ccc0:	f88b 3000 	strb.w	r3, [fp]
 800ccc4:	463b      	mov	r3, r7
 800ccc6:	461f      	mov	r7, r3
 800ccc8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800cccc:	3b01      	subs	r3, #1
 800ccce:	2a39      	cmp	r2, #57	; 0x39
 800ccd0:	d050      	beq.n	800cd74 <_dtoa_r+0xb74>
 800ccd2:	3201      	adds	r2, #1
 800ccd4:	701a      	strb	r2, [r3, #0]
 800ccd6:	e749      	b.n	800cb6c <_dtoa_r+0x96c>
 800ccd8:	2a00      	cmp	r2, #0
 800ccda:	dd03      	ble.n	800cce4 <_dtoa_r+0xae4>
 800ccdc:	2b39      	cmp	r3, #57	; 0x39
 800ccde:	d0ee      	beq.n	800ccbe <_dtoa_r+0xabe>
 800cce0:	3301      	adds	r3, #1
 800cce2:	e7c9      	b.n	800cc78 <_dtoa_r+0xa78>
 800cce4:	9a02      	ldr	r2, [sp, #8]
 800cce6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cce8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ccec:	428a      	cmp	r2, r1
 800ccee:	d02a      	beq.n	800cd46 <_dtoa_r+0xb46>
 800ccf0:	4651      	mov	r1, sl
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	220a      	movs	r2, #10
 800ccf6:	4628      	mov	r0, r5
 800ccf8:	f000 fb10 	bl	800d31c <__multadd>
 800ccfc:	45b0      	cmp	r8, r6
 800ccfe:	4682      	mov	sl, r0
 800cd00:	f04f 0300 	mov.w	r3, #0
 800cd04:	f04f 020a 	mov.w	r2, #10
 800cd08:	4641      	mov	r1, r8
 800cd0a:	4628      	mov	r0, r5
 800cd0c:	d107      	bne.n	800cd1e <_dtoa_r+0xb1e>
 800cd0e:	f000 fb05 	bl	800d31c <__multadd>
 800cd12:	4680      	mov	r8, r0
 800cd14:	4606      	mov	r6, r0
 800cd16:	9b02      	ldr	r3, [sp, #8]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	9302      	str	r3, [sp, #8]
 800cd1c:	e777      	b.n	800cc0e <_dtoa_r+0xa0e>
 800cd1e:	f000 fafd 	bl	800d31c <__multadd>
 800cd22:	4631      	mov	r1, r6
 800cd24:	4680      	mov	r8, r0
 800cd26:	2300      	movs	r3, #0
 800cd28:	220a      	movs	r2, #10
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	f000 faf6 	bl	800d31c <__multadd>
 800cd30:	4606      	mov	r6, r0
 800cd32:	e7f0      	b.n	800cd16 <_dtoa_r+0xb16>
 800cd34:	f1bb 0f00 	cmp.w	fp, #0
 800cd38:	bfcc      	ite	gt
 800cd3a:	465f      	movgt	r7, fp
 800cd3c:	2701      	movle	r7, #1
 800cd3e:	f04f 0800 	mov.w	r8, #0
 800cd42:	9a08      	ldr	r2, [sp, #32]
 800cd44:	4417      	add	r7, r2
 800cd46:	4651      	mov	r1, sl
 800cd48:	2201      	movs	r2, #1
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	9302      	str	r3, [sp, #8]
 800cd4e:	f000 fc91 	bl	800d674 <__lshift>
 800cd52:	4621      	mov	r1, r4
 800cd54:	4682      	mov	sl, r0
 800cd56:	f000 fcf9 	bl	800d74c <__mcmp>
 800cd5a:	2800      	cmp	r0, #0
 800cd5c:	dcb2      	bgt.n	800ccc4 <_dtoa_r+0xac4>
 800cd5e:	d102      	bne.n	800cd66 <_dtoa_r+0xb66>
 800cd60:	9b02      	ldr	r3, [sp, #8]
 800cd62:	07db      	lsls	r3, r3, #31
 800cd64:	d4ae      	bmi.n	800ccc4 <_dtoa_r+0xac4>
 800cd66:	463b      	mov	r3, r7
 800cd68:	461f      	mov	r7, r3
 800cd6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd6e:	2a30      	cmp	r2, #48	; 0x30
 800cd70:	d0fa      	beq.n	800cd68 <_dtoa_r+0xb68>
 800cd72:	e6fb      	b.n	800cb6c <_dtoa_r+0x96c>
 800cd74:	9a08      	ldr	r2, [sp, #32]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d1a5      	bne.n	800ccc6 <_dtoa_r+0xac6>
 800cd7a:	2331      	movs	r3, #49	; 0x31
 800cd7c:	f109 0901 	add.w	r9, r9, #1
 800cd80:	7013      	strb	r3, [r2, #0]
 800cd82:	e6f3      	b.n	800cb6c <_dtoa_r+0x96c>
 800cd84:	4b13      	ldr	r3, [pc, #76]	; (800cdd4 <_dtoa_r+0xbd4>)
 800cd86:	f7ff baa7 	b.w	800c2d8 <_dtoa_r+0xd8>
 800cd8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f47f aa80 	bne.w	800c292 <_dtoa_r+0x92>
 800cd92:	4b11      	ldr	r3, [pc, #68]	; (800cdd8 <_dtoa_r+0xbd8>)
 800cd94:	f7ff baa0 	b.w	800c2d8 <_dtoa_r+0xd8>
 800cd98:	f1bb 0f00 	cmp.w	fp, #0
 800cd9c:	dc03      	bgt.n	800cda6 <_dtoa_r+0xba6>
 800cd9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	f73f aecc 	bgt.w	800cb3e <_dtoa_r+0x93e>
 800cda6:	9f08      	ldr	r7, [sp, #32]
 800cda8:	4621      	mov	r1, r4
 800cdaa:	4650      	mov	r0, sl
 800cdac:	f7ff f99a 	bl	800c0e4 <quorem>
 800cdb0:	9a08      	ldr	r2, [sp, #32]
 800cdb2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cdb6:	f807 3b01 	strb.w	r3, [r7], #1
 800cdba:	1aba      	subs	r2, r7, r2
 800cdbc:	4593      	cmp	fp, r2
 800cdbe:	ddb9      	ble.n	800cd34 <_dtoa_r+0xb34>
 800cdc0:	4651      	mov	r1, sl
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	220a      	movs	r2, #10
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	f000 faa8 	bl	800d31c <__multadd>
 800cdcc:	4682      	mov	sl, r0
 800cdce:	e7eb      	b.n	800cda8 <_dtoa_r+0xba8>
 800cdd0:	0800fc5f 	.word	0x0800fc5f
 800cdd4:	0800fbb8 	.word	0x0800fbb8
 800cdd8:	0800fbdc 	.word	0x0800fbdc

0800cddc <__sflush_r>:
 800cddc:	898a      	ldrh	r2, [r1, #12]
 800cdde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cde2:	4605      	mov	r5, r0
 800cde4:	0710      	lsls	r0, r2, #28
 800cde6:	460c      	mov	r4, r1
 800cde8:	d458      	bmi.n	800ce9c <__sflush_r+0xc0>
 800cdea:	684b      	ldr	r3, [r1, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	dc05      	bgt.n	800cdfc <__sflush_r+0x20>
 800cdf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	dc02      	bgt.n	800cdfc <__sflush_r+0x20>
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdfe:	2e00      	cmp	r6, #0
 800ce00:	d0f9      	beq.n	800cdf6 <__sflush_r+0x1a>
 800ce02:	2300      	movs	r3, #0
 800ce04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ce08:	682f      	ldr	r7, [r5, #0]
 800ce0a:	602b      	str	r3, [r5, #0]
 800ce0c:	d032      	beq.n	800ce74 <__sflush_r+0x98>
 800ce0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ce10:	89a3      	ldrh	r3, [r4, #12]
 800ce12:	075a      	lsls	r2, r3, #29
 800ce14:	d505      	bpl.n	800ce22 <__sflush_r+0x46>
 800ce16:	6863      	ldr	r3, [r4, #4]
 800ce18:	1ac0      	subs	r0, r0, r3
 800ce1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce1c:	b10b      	cbz	r3, 800ce22 <__sflush_r+0x46>
 800ce1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce20:	1ac0      	subs	r0, r0, r3
 800ce22:	2300      	movs	r3, #0
 800ce24:	4602      	mov	r2, r0
 800ce26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce28:	4628      	mov	r0, r5
 800ce2a:	6a21      	ldr	r1, [r4, #32]
 800ce2c:	47b0      	blx	r6
 800ce2e:	1c43      	adds	r3, r0, #1
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	d106      	bne.n	800ce42 <__sflush_r+0x66>
 800ce34:	6829      	ldr	r1, [r5, #0]
 800ce36:	291d      	cmp	r1, #29
 800ce38:	d82c      	bhi.n	800ce94 <__sflush_r+0xb8>
 800ce3a:	4a2a      	ldr	r2, [pc, #168]	; (800cee4 <__sflush_r+0x108>)
 800ce3c:	40ca      	lsrs	r2, r1
 800ce3e:	07d6      	lsls	r6, r2, #31
 800ce40:	d528      	bpl.n	800ce94 <__sflush_r+0xb8>
 800ce42:	2200      	movs	r2, #0
 800ce44:	6062      	str	r2, [r4, #4]
 800ce46:	6922      	ldr	r2, [r4, #16]
 800ce48:	04d9      	lsls	r1, r3, #19
 800ce4a:	6022      	str	r2, [r4, #0]
 800ce4c:	d504      	bpl.n	800ce58 <__sflush_r+0x7c>
 800ce4e:	1c42      	adds	r2, r0, #1
 800ce50:	d101      	bne.n	800ce56 <__sflush_r+0x7a>
 800ce52:	682b      	ldr	r3, [r5, #0]
 800ce54:	b903      	cbnz	r3, 800ce58 <__sflush_r+0x7c>
 800ce56:	6560      	str	r0, [r4, #84]	; 0x54
 800ce58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce5a:	602f      	str	r7, [r5, #0]
 800ce5c:	2900      	cmp	r1, #0
 800ce5e:	d0ca      	beq.n	800cdf6 <__sflush_r+0x1a>
 800ce60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce64:	4299      	cmp	r1, r3
 800ce66:	d002      	beq.n	800ce6e <__sflush_r+0x92>
 800ce68:	4628      	mov	r0, r5
 800ce6a:	f7fe fab7 	bl	800b3dc <_free_r>
 800ce6e:	2000      	movs	r0, #0
 800ce70:	6360      	str	r0, [r4, #52]	; 0x34
 800ce72:	e7c1      	b.n	800cdf8 <__sflush_r+0x1c>
 800ce74:	6a21      	ldr	r1, [r4, #32]
 800ce76:	2301      	movs	r3, #1
 800ce78:	4628      	mov	r0, r5
 800ce7a:	47b0      	blx	r6
 800ce7c:	1c41      	adds	r1, r0, #1
 800ce7e:	d1c7      	bne.n	800ce10 <__sflush_r+0x34>
 800ce80:	682b      	ldr	r3, [r5, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d0c4      	beq.n	800ce10 <__sflush_r+0x34>
 800ce86:	2b1d      	cmp	r3, #29
 800ce88:	d001      	beq.n	800ce8e <__sflush_r+0xb2>
 800ce8a:	2b16      	cmp	r3, #22
 800ce8c:	d101      	bne.n	800ce92 <__sflush_r+0xb6>
 800ce8e:	602f      	str	r7, [r5, #0]
 800ce90:	e7b1      	b.n	800cdf6 <__sflush_r+0x1a>
 800ce92:	89a3      	ldrh	r3, [r4, #12]
 800ce94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce98:	81a3      	strh	r3, [r4, #12]
 800ce9a:	e7ad      	b.n	800cdf8 <__sflush_r+0x1c>
 800ce9c:	690f      	ldr	r7, [r1, #16]
 800ce9e:	2f00      	cmp	r7, #0
 800cea0:	d0a9      	beq.n	800cdf6 <__sflush_r+0x1a>
 800cea2:	0793      	lsls	r3, r2, #30
 800cea4:	bf18      	it	ne
 800cea6:	2300      	movne	r3, #0
 800cea8:	680e      	ldr	r6, [r1, #0]
 800ceaa:	bf08      	it	eq
 800ceac:	694b      	ldreq	r3, [r1, #20]
 800ceae:	eba6 0807 	sub.w	r8, r6, r7
 800ceb2:	600f      	str	r7, [r1, #0]
 800ceb4:	608b      	str	r3, [r1, #8]
 800ceb6:	f1b8 0f00 	cmp.w	r8, #0
 800ceba:	dd9c      	ble.n	800cdf6 <__sflush_r+0x1a>
 800cebc:	4643      	mov	r3, r8
 800cebe:	463a      	mov	r2, r7
 800cec0:	4628      	mov	r0, r5
 800cec2:	6a21      	ldr	r1, [r4, #32]
 800cec4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cec6:	47b0      	blx	r6
 800cec8:	2800      	cmp	r0, #0
 800ceca:	dc06      	bgt.n	800ceda <__sflush_r+0xfe>
 800cecc:	89a3      	ldrh	r3, [r4, #12]
 800cece:	f04f 30ff 	mov.w	r0, #4294967295
 800ced2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ced6:	81a3      	strh	r3, [r4, #12]
 800ced8:	e78e      	b.n	800cdf8 <__sflush_r+0x1c>
 800ceda:	4407      	add	r7, r0
 800cedc:	eba8 0800 	sub.w	r8, r8, r0
 800cee0:	e7e9      	b.n	800ceb6 <__sflush_r+0xda>
 800cee2:	bf00      	nop
 800cee4:	20400001 	.word	0x20400001

0800cee8 <_fflush_r>:
 800cee8:	b538      	push	{r3, r4, r5, lr}
 800ceea:	690b      	ldr	r3, [r1, #16]
 800ceec:	4605      	mov	r5, r0
 800ceee:	460c      	mov	r4, r1
 800cef0:	b913      	cbnz	r3, 800cef8 <_fflush_r+0x10>
 800cef2:	2500      	movs	r5, #0
 800cef4:	4628      	mov	r0, r5
 800cef6:	bd38      	pop	{r3, r4, r5, pc}
 800cef8:	b118      	cbz	r0, 800cf02 <_fflush_r+0x1a>
 800cefa:	6983      	ldr	r3, [r0, #24]
 800cefc:	b90b      	cbnz	r3, 800cf02 <_fflush_r+0x1a>
 800cefe:	f000 f887 	bl	800d010 <__sinit>
 800cf02:	4b14      	ldr	r3, [pc, #80]	; (800cf54 <_fflush_r+0x6c>)
 800cf04:	429c      	cmp	r4, r3
 800cf06:	d11b      	bne.n	800cf40 <_fflush_r+0x58>
 800cf08:	686c      	ldr	r4, [r5, #4]
 800cf0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d0ef      	beq.n	800cef2 <_fflush_r+0xa>
 800cf12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cf14:	07d0      	lsls	r0, r2, #31
 800cf16:	d404      	bmi.n	800cf22 <_fflush_r+0x3a>
 800cf18:	0599      	lsls	r1, r3, #22
 800cf1a:	d402      	bmi.n	800cf22 <_fflush_r+0x3a>
 800cf1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf1e:	f000 f91a 	bl	800d156 <__retarget_lock_acquire_recursive>
 800cf22:	4628      	mov	r0, r5
 800cf24:	4621      	mov	r1, r4
 800cf26:	f7ff ff59 	bl	800cddc <__sflush_r>
 800cf2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf2c:	4605      	mov	r5, r0
 800cf2e:	07da      	lsls	r2, r3, #31
 800cf30:	d4e0      	bmi.n	800cef4 <_fflush_r+0xc>
 800cf32:	89a3      	ldrh	r3, [r4, #12]
 800cf34:	059b      	lsls	r3, r3, #22
 800cf36:	d4dd      	bmi.n	800cef4 <_fflush_r+0xc>
 800cf38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf3a:	f000 f90d 	bl	800d158 <__retarget_lock_release_recursive>
 800cf3e:	e7d9      	b.n	800cef4 <_fflush_r+0xc>
 800cf40:	4b05      	ldr	r3, [pc, #20]	; (800cf58 <_fflush_r+0x70>)
 800cf42:	429c      	cmp	r4, r3
 800cf44:	d101      	bne.n	800cf4a <_fflush_r+0x62>
 800cf46:	68ac      	ldr	r4, [r5, #8]
 800cf48:	e7df      	b.n	800cf0a <_fflush_r+0x22>
 800cf4a:	4b04      	ldr	r3, [pc, #16]	; (800cf5c <_fflush_r+0x74>)
 800cf4c:	429c      	cmp	r4, r3
 800cf4e:	bf08      	it	eq
 800cf50:	68ec      	ldreq	r4, [r5, #12]
 800cf52:	e7da      	b.n	800cf0a <_fflush_r+0x22>
 800cf54:	0800fc90 	.word	0x0800fc90
 800cf58:	0800fcb0 	.word	0x0800fcb0
 800cf5c:	0800fc70 	.word	0x0800fc70

0800cf60 <std>:
 800cf60:	2300      	movs	r3, #0
 800cf62:	b510      	push	{r4, lr}
 800cf64:	4604      	mov	r4, r0
 800cf66:	e9c0 3300 	strd	r3, r3, [r0]
 800cf6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf6e:	6083      	str	r3, [r0, #8]
 800cf70:	8181      	strh	r1, [r0, #12]
 800cf72:	6643      	str	r3, [r0, #100]	; 0x64
 800cf74:	81c2      	strh	r2, [r0, #14]
 800cf76:	6183      	str	r3, [r0, #24]
 800cf78:	4619      	mov	r1, r3
 800cf7a:	2208      	movs	r2, #8
 800cf7c:	305c      	adds	r0, #92	; 0x5c
 800cf7e:	f7fe fa25 	bl	800b3cc <memset>
 800cf82:	4b05      	ldr	r3, [pc, #20]	; (800cf98 <std+0x38>)
 800cf84:	6224      	str	r4, [r4, #32]
 800cf86:	6263      	str	r3, [r4, #36]	; 0x24
 800cf88:	4b04      	ldr	r3, [pc, #16]	; (800cf9c <std+0x3c>)
 800cf8a:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf8c:	4b04      	ldr	r3, [pc, #16]	; (800cfa0 <std+0x40>)
 800cf8e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf90:	4b04      	ldr	r3, [pc, #16]	; (800cfa4 <std+0x44>)
 800cf92:	6323      	str	r3, [r4, #48]	; 0x30
 800cf94:	bd10      	pop	{r4, pc}
 800cf96:	bf00      	nop
 800cf98:	0800dee1 	.word	0x0800dee1
 800cf9c:	0800df03 	.word	0x0800df03
 800cfa0:	0800df3b 	.word	0x0800df3b
 800cfa4:	0800df5f 	.word	0x0800df5f

0800cfa8 <_cleanup_r>:
 800cfa8:	4901      	ldr	r1, [pc, #4]	; (800cfb0 <_cleanup_r+0x8>)
 800cfaa:	f000 b8af 	b.w	800d10c <_fwalk_reent>
 800cfae:	bf00      	nop
 800cfb0:	0800cee9 	.word	0x0800cee9

0800cfb4 <__sfmoreglue>:
 800cfb4:	b570      	push	{r4, r5, r6, lr}
 800cfb6:	2568      	movs	r5, #104	; 0x68
 800cfb8:	1e4a      	subs	r2, r1, #1
 800cfba:	4355      	muls	r5, r2
 800cfbc:	460e      	mov	r6, r1
 800cfbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cfc2:	f7fe fa57 	bl	800b474 <_malloc_r>
 800cfc6:	4604      	mov	r4, r0
 800cfc8:	b140      	cbz	r0, 800cfdc <__sfmoreglue+0x28>
 800cfca:	2100      	movs	r1, #0
 800cfcc:	e9c0 1600 	strd	r1, r6, [r0]
 800cfd0:	300c      	adds	r0, #12
 800cfd2:	60a0      	str	r0, [r4, #8]
 800cfd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cfd8:	f7fe f9f8 	bl	800b3cc <memset>
 800cfdc:	4620      	mov	r0, r4
 800cfde:	bd70      	pop	{r4, r5, r6, pc}

0800cfe0 <__sfp_lock_acquire>:
 800cfe0:	4801      	ldr	r0, [pc, #4]	; (800cfe8 <__sfp_lock_acquire+0x8>)
 800cfe2:	f000 b8b8 	b.w	800d156 <__retarget_lock_acquire_recursive>
 800cfe6:	bf00      	nop
 800cfe8:	20000550 	.word	0x20000550

0800cfec <__sfp_lock_release>:
 800cfec:	4801      	ldr	r0, [pc, #4]	; (800cff4 <__sfp_lock_release+0x8>)
 800cfee:	f000 b8b3 	b.w	800d158 <__retarget_lock_release_recursive>
 800cff2:	bf00      	nop
 800cff4:	20000550 	.word	0x20000550

0800cff8 <__sinit_lock_acquire>:
 800cff8:	4801      	ldr	r0, [pc, #4]	; (800d000 <__sinit_lock_acquire+0x8>)
 800cffa:	f000 b8ac 	b.w	800d156 <__retarget_lock_acquire_recursive>
 800cffe:	bf00      	nop
 800d000:	2000054b 	.word	0x2000054b

0800d004 <__sinit_lock_release>:
 800d004:	4801      	ldr	r0, [pc, #4]	; (800d00c <__sinit_lock_release+0x8>)
 800d006:	f000 b8a7 	b.w	800d158 <__retarget_lock_release_recursive>
 800d00a:	bf00      	nop
 800d00c:	2000054b 	.word	0x2000054b

0800d010 <__sinit>:
 800d010:	b510      	push	{r4, lr}
 800d012:	4604      	mov	r4, r0
 800d014:	f7ff fff0 	bl	800cff8 <__sinit_lock_acquire>
 800d018:	69a3      	ldr	r3, [r4, #24]
 800d01a:	b11b      	cbz	r3, 800d024 <__sinit+0x14>
 800d01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d020:	f7ff bff0 	b.w	800d004 <__sinit_lock_release>
 800d024:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d028:	6523      	str	r3, [r4, #80]	; 0x50
 800d02a:	4b13      	ldr	r3, [pc, #76]	; (800d078 <__sinit+0x68>)
 800d02c:	4a13      	ldr	r2, [pc, #76]	; (800d07c <__sinit+0x6c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	62a2      	str	r2, [r4, #40]	; 0x28
 800d032:	42a3      	cmp	r3, r4
 800d034:	bf08      	it	eq
 800d036:	2301      	moveq	r3, #1
 800d038:	4620      	mov	r0, r4
 800d03a:	bf08      	it	eq
 800d03c:	61a3      	streq	r3, [r4, #24]
 800d03e:	f000 f81f 	bl	800d080 <__sfp>
 800d042:	6060      	str	r0, [r4, #4]
 800d044:	4620      	mov	r0, r4
 800d046:	f000 f81b 	bl	800d080 <__sfp>
 800d04a:	60a0      	str	r0, [r4, #8]
 800d04c:	4620      	mov	r0, r4
 800d04e:	f000 f817 	bl	800d080 <__sfp>
 800d052:	2200      	movs	r2, #0
 800d054:	2104      	movs	r1, #4
 800d056:	60e0      	str	r0, [r4, #12]
 800d058:	6860      	ldr	r0, [r4, #4]
 800d05a:	f7ff ff81 	bl	800cf60 <std>
 800d05e:	2201      	movs	r2, #1
 800d060:	2109      	movs	r1, #9
 800d062:	68a0      	ldr	r0, [r4, #8]
 800d064:	f7ff ff7c 	bl	800cf60 <std>
 800d068:	2202      	movs	r2, #2
 800d06a:	2112      	movs	r1, #18
 800d06c:	68e0      	ldr	r0, [r4, #12]
 800d06e:	f7ff ff77 	bl	800cf60 <std>
 800d072:	2301      	movs	r3, #1
 800d074:	61a3      	str	r3, [r4, #24]
 800d076:	e7d1      	b.n	800d01c <__sinit+0xc>
 800d078:	0800fba4 	.word	0x0800fba4
 800d07c:	0800cfa9 	.word	0x0800cfa9

0800d080 <__sfp>:
 800d080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d082:	4607      	mov	r7, r0
 800d084:	f7ff ffac 	bl	800cfe0 <__sfp_lock_acquire>
 800d088:	4b1e      	ldr	r3, [pc, #120]	; (800d104 <__sfp+0x84>)
 800d08a:	681e      	ldr	r6, [r3, #0]
 800d08c:	69b3      	ldr	r3, [r6, #24]
 800d08e:	b913      	cbnz	r3, 800d096 <__sfp+0x16>
 800d090:	4630      	mov	r0, r6
 800d092:	f7ff ffbd 	bl	800d010 <__sinit>
 800d096:	3648      	adds	r6, #72	; 0x48
 800d098:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d09c:	3b01      	subs	r3, #1
 800d09e:	d503      	bpl.n	800d0a8 <__sfp+0x28>
 800d0a0:	6833      	ldr	r3, [r6, #0]
 800d0a2:	b30b      	cbz	r3, 800d0e8 <__sfp+0x68>
 800d0a4:	6836      	ldr	r6, [r6, #0]
 800d0a6:	e7f7      	b.n	800d098 <__sfp+0x18>
 800d0a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d0ac:	b9d5      	cbnz	r5, 800d0e4 <__sfp+0x64>
 800d0ae:	4b16      	ldr	r3, [pc, #88]	; (800d108 <__sfp+0x88>)
 800d0b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0b4:	60e3      	str	r3, [r4, #12]
 800d0b6:	6665      	str	r5, [r4, #100]	; 0x64
 800d0b8:	f000 f84c 	bl	800d154 <__retarget_lock_init_recursive>
 800d0bc:	f7ff ff96 	bl	800cfec <__sfp_lock_release>
 800d0c0:	2208      	movs	r2, #8
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d0c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d0cc:	6025      	str	r5, [r4, #0]
 800d0ce:	61a5      	str	r5, [r4, #24]
 800d0d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d0d4:	f7fe f97a 	bl	800b3cc <memset>
 800d0d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d0dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0e4:	3468      	adds	r4, #104	; 0x68
 800d0e6:	e7d9      	b.n	800d09c <__sfp+0x1c>
 800d0e8:	2104      	movs	r1, #4
 800d0ea:	4638      	mov	r0, r7
 800d0ec:	f7ff ff62 	bl	800cfb4 <__sfmoreglue>
 800d0f0:	4604      	mov	r4, r0
 800d0f2:	6030      	str	r0, [r6, #0]
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	d1d5      	bne.n	800d0a4 <__sfp+0x24>
 800d0f8:	f7ff ff78 	bl	800cfec <__sfp_lock_release>
 800d0fc:	230c      	movs	r3, #12
 800d0fe:	603b      	str	r3, [r7, #0]
 800d100:	e7ee      	b.n	800d0e0 <__sfp+0x60>
 800d102:	bf00      	nop
 800d104:	0800fba4 	.word	0x0800fba4
 800d108:	ffff0001 	.word	0xffff0001

0800d10c <_fwalk_reent>:
 800d10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d110:	4606      	mov	r6, r0
 800d112:	4688      	mov	r8, r1
 800d114:	2700      	movs	r7, #0
 800d116:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d11a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d11e:	f1b9 0901 	subs.w	r9, r9, #1
 800d122:	d505      	bpl.n	800d130 <_fwalk_reent+0x24>
 800d124:	6824      	ldr	r4, [r4, #0]
 800d126:	2c00      	cmp	r4, #0
 800d128:	d1f7      	bne.n	800d11a <_fwalk_reent+0xe>
 800d12a:	4638      	mov	r0, r7
 800d12c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d130:	89ab      	ldrh	r3, [r5, #12]
 800d132:	2b01      	cmp	r3, #1
 800d134:	d907      	bls.n	800d146 <_fwalk_reent+0x3a>
 800d136:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d13a:	3301      	adds	r3, #1
 800d13c:	d003      	beq.n	800d146 <_fwalk_reent+0x3a>
 800d13e:	4629      	mov	r1, r5
 800d140:	4630      	mov	r0, r6
 800d142:	47c0      	blx	r8
 800d144:	4307      	orrs	r7, r0
 800d146:	3568      	adds	r5, #104	; 0x68
 800d148:	e7e9      	b.n	800d11e <_fwalk_reent+0x12>
	...

0800d14c <_localeconv_r>:
 800d14c:	4800      	ldr	r0, [pc, #0]	; (800d150 <_localeconv_r+0x4>)
 800d14e:	4770      	bx	lr
 800d150:	20000170 	.word	0x20000170

0800d154 <__retarget_lock_init_recursive>:
 800d154:	4770      	bx	lr

0800d156 <__retarget_lock_acquire_recursive>:
 800d156:	4770      	bx	lr

0800d158 <__retarget_lock_release_recursive>:
 800d158:	4770      	bx	lr

0800d15a <__swhatbuf_r>:
 800d15a:	b570      	push	{r4, r5, r6, lr}
 800d15c:	460e      	mov	r6, r1
 800d15e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d162:	4614      	mov	r4, r2
 800d164:	2900      	cmp	r1, #0
 800d166:	461d      	mov	r5, r3
 800d168:	b096      	sub	sp, #88	; 0x58
 800d16a:	da07      	bge.n	800d17c <__swhatbuf_r+0x22>
 800d16c:	2300      	movs	r3, #0
 800d16e:	602b      	str	r3, [r5, #0]
 800d170:	89b3      	ldrh	r3, [r6, #12]
 800d172:	061a      	lsls	r2, r3, #24
 800d174:	d410      	bmi.n	800d198 <__swhatbuf_r+0x3e>
 800d176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d17a:	e00e      	b.n	800d19a <__swhatbuf_r+0x40>
 800d17c:	466a      	mov	r2, sp
 800d17e:	f000 ff45 	bl	800e00c <_fstat_r>
 800d182:	2800      	cmp	r0, #0
 800d184:	dbf2      	blt.n	800d16c <__swhatbuf_r+0x12>
 800d186:	9a01      	ldr	r2, [sp, #4]
 800d188:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d18c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d190:	425a      	negs	r2, r3
 800d192:	415a      	adcs	r2, r3
 800d194:	602a      	str	r2, [r5, #0]
 800d196:	e7ee      	b.n	800d176 <__swhatbuf_r+0x1c>
 800d198:	2340      	movs	r3, #64	; 0x40
 800d19a:	2000      	movs	r0, #0
 800d19c:	6023      	str	r3, [r4, #0]
 800d19e:	b016      	add	sp, #88	; 0x58
 800d1a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d1a4 <__smakebuf_r>:
 800d1a4:	898b      	ldrh	r3, [r1, #12]
 800d1a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d1a8:	079d      	lsls	r5, r3, #30
 800d1aa:	4606      	mov	r6, r0
 800d1ac:	460c      	mov	r4, r1
 800d1ae:	d507      	bpl.n	800d1c0 <__smakebuf_r+0x1c>
 800d1b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	6123      	str	r3, [r4, #16]
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	6163      	str	r3, [r4, #20]
 800d1bc:	b002      	add	sp, #8
 800d1be:	bd70      	pop	{r4, r5, r6, pc}
 800d1c0:	466a      	mov	r2, sp
 800d1c2:	ab01      	add	r3, sp, #4
 800d1c4:	f7ff ffc9 	bl	800d15a <__swhatbuf_r>
 800d1c8:	9900      	ldr	r1, [sp, #0]
 800d1ca:	4605      	mov	r5, r0
 800d1cc:	4630      	mov	r0, r6
 800d1ce:	f7fe f951 	bl	800b474 <_malloc_r>
 800d1d2:	b948      	cbnz	r0, 800d1e8 <__smakebuf_r+0x44>
 800d1d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1d8:	059a      	lsls	r2, r3, #22
 800d1da:	d4ef      	bmi.n	800d1bc <__smakebuf_r+0x18>
 800d1dc:	f023 0303 	bic.w	r3, r3, #3
 800d1e0:	f043 0302 	orr.w	r3, r3, #2
 800d1e4:	81a3      	strh	r3, [r4, #12]
 800d1e6:	e7e3      	b.n	800d1b0 <__smakebuf_r+0xc>
 800d1e8:	4b0d      	ldr	r3, [pc, #52]	; (800d220 <__smakebuf_r+0x7c>)
 800d1ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800d1ec:	89a3      	ldrh	r3, [r4, #12]
 800d1ee:	6020      	str	r0, [r4, #0]
 800d1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1f4:	81a3      	strh	r3, [r4, #12]
 800d1f6:	9b00      	ldr	r3, [sp, #0]
 800d1f8:	6120      	str	r0, [r4, #16]
 800d1fa:	6163      	str	r3, [r4, #20]
 800d1fc:	9b01      	ldr	r3, [sp, #4]
 800d1fe:	b15b      	cbz	r3, 800d218 <__smakebuf_r+0x74>
 800d200:	4630      	mov	r0, r6
 800d202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d206:	f000 ff13 	bl	800e030 <_isatty_r>
 800d20a:	b128      	cbz	r0, 800d218 <__smakebuf_r+0x74>
 800d20c:	89a3      	ldrh	r3, [r4, #12]
 800d20e:	f023 0303 	bic.w	r3, r3, #3
 800d212:	f043 0301 	orr.w	r3, r3, #1
 800d216:	81a3      	strh	r3, [r4, #12]
 800d218:	89a0      	ldrh	r0, [r4, #12]
 800d21a:	4305      	orrs	r5, r0
 800d21c:	81a5      	strh	r5, [r4, #12]
 800d21e:	e7cd      	b.n	800d1bc <__smakebuf_r+0x18>
 800d220:	0800cfa9 	.word	0x0800cfa9

0800d224 <memchr>:
 800d224:	4603      	mov	r3, r0
 800d226:	b510      	push	{r4, lr}
 800d228:	b2c9      	uxtb	r1, r1
 800d22a:	4402      	add	r2, r0
 800d22c:	4293      	cmp	r3, r2
 800d22e:	4618      	mov	r0, r3
 800d230:	d101      	bne.n	800d236 <memchr+0x12>
 800d232:	2000      	movs	r0, #0
 800d234:	e003      	b.n	800d23e <memchr+0x1a>
 800d236:	7804      	ldrb	r4, [r0, #0]
 800d238:	3301      	adds	r3, #1
 800d23a:	428c      	cmp	r4, r1
 800d23c:	d1f6      	bne.n	800d22c <memchr+0x8>
 800d23e:	bd10      	pop	{r4, pc}

0800d240 <__malloc_lock>:
 800d240:	4801      	ldr	r0, [pc, #4]	; (800d248 <__malloc_lock+0x8>)
 800d242:	f7ff bf88 	b.w	800d156 <__retarget_lock_acquire_recursive>
 800d246:	bf00      	nop
 800d248:	2000054c 	.word	0x2000054c

0800d24c <__malloc_unlock>:
 800d24c:	4801      	ldr	r0, [pc, #4]	; (800d254 <__malloc_unlock+0x8>)
 800d24e:	f7ff bf83 	b.w	800d158 <__retarget_lock_release_recursive>
 800d252:	bf00      	nop
 800d254:	2000054c 	.word	0x2000054c

0800d258 <_Balloc>:
 800d258:	b570      	push	{r4, r5, r6, lr}
 800d25a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d25c:	4604      	mov	r4, r0
 800d25e:	460d      	mov	r5, r1
 800d260:	b976      	cbnz	r6, 800d280 <_Balloc+0x28>
 800d262:	2010      	movs	r0, #16
 800d264:	f7fe f89c 	bl	800b3a0 <malloc>
 800d268:	4602      	mov	r2, r0
 800d26a:	6260      	str	r0, [r4, #36]	; 0x24
 800d26c:	b920      	cbnz	r0, 800d278 <_Balloc+0x20>
 800d26e:	2166      	movs	r1, #102	; 0x66
 800d270:	4b17      	ldr	r3, [pc, #92]	; (800d2d0 <_Balloc+0x78>)
 800d272:	4818      	ldr	r0, [pc, #96]	; (800d2d4 <_Balloc+0x7c>)
 800d274:	f000 fe8a 	bl	800df8c <__assert_func>
 800d278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d27c:	6006      	str	r6, [r0, #0]
 800d27e:	60c6      	str	r6, [r0, #12]
 800d280:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d282:	68f3      	ldr	r3, [r6, #12]
 800d284:	b183      	cbz	r3, 800d2a8 <_Balloc+0x50>
 800d286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d28e:	b9b8      	cbnz	r0, 800d2c0 <_Balloc+0x68>
 800d290:	2101      	movs	r1, #1
 800d292:	fa01 f605 	lsl.w	r6, r1, r5
 800d296:	1d72      	adds	r2, r6, #5
 800d298:	4620      	mov	r0, r4
 800d29a:	0092      	lsls	r2, r2, #2
 800d29c:	f000 fb5e 	bl	800d95c <_calloc_r>
 800d2a0:	b160      	cbz	r0, 800d2bc <_Balloc+0x64>
 800d2a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d2a6:	e00e      	b.n	800d2c6 <_Balloc+0x6e>
 800d2a8:	2221      	movs	r2, #33	; 0x21
 800d2aa:	2104      	movs	r1, #4
 800d2ac:	4620      	mov	r0, r4
 800d2ae:	f000 fb55 	bl	800d95c <_calloc_r>
 800d2b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2b4:	60f0      	str	r0, [r6, #12]
 800d2b6:	68db      	ldr	r3, [r3, #12]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1e4      	bne.n	800d286 <_Balloc+0x2e>
 800d2bc:	2000      	movs	r0, #0
 800d2be:	bd70      	pop	{r4, r5, r6, pc}
 800d2c0:	6802      	ldr	r2, [r0, #0]
 800d2c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d2cc:	e7f7      	b.n	800d2be <_Balloc+0x66>
 800d2ce:	bf00      	nop
 800d2d0:	0800fbe9 	.word	0x0800fbe9
 800d2d4:	0800fcd0 	.word	0x0800fcd0

0800d2d8 <_Bfree>:
 800d2d8:	b570      	push	{r4, r5, r6, lr}
 800d2da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d2dc:	4605      	mov	r5, r0
 800d2de:	460c      	mov	r4, r1
 800d2e0:	b976      	cbnz	r6, 800d300 <_Bfree+0x28>
 800d2e2:	2010      	movs	r0, #16
 800d2e4:	f7fe f85c 	bl	800b3a0 <malloc>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	6268      	str	r0, [r5, #36]	; 0x24
 800d2ec:	b920      	cbnz	r0, 800d2f8 <_Bfree+0x20>
 800d2ee:	218a      	movs	r1, #138	; 0x8a
 800d2f0:	4b08      	ldr	r3, [pc, #32]	; (800d314 <_Bfree+0x3c>)
 800d2f2:	4809      	ldr	r0, [pc, #36]	; (800d318 <_Bfree+0x40>)
 800d2f4:	f000 fe4a 	bl	800df8c <__assert_func>
 800d2f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d2fc:	6006      	str	r6, [r0, #0]
 800d2fe:	60c6      	str	r6, [r0, #12]
 800d300:	b13c      	cbz	r4, 800d312 <_Bfree+0x3a>
 800d302:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d304:	6862      	ldr	r2, [r4, #4]
 800d306:	68db      	ldr	r3, [r3, #12]
 800d308:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d30c:	6021      	str	r1, [r4, #0]
 800d30e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d312:	bd70      	pop	{r4, r5, r6, pc}
 800d314:	0800fbe9 	.word	0x0800fbe9
 800d318:	0800fcd0 	.word	0x0800fcd0

0800d31c <__multadd>:
 800d31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d320:	4698      	mov	r8, r3
 800d322:	460c      	mov	r4, r1
 800d324:	2300      	movs	r3, #0
 800d326:	690e      	ldr	r6, [r1, #16]
 800d328:	4607      	mov	r7, r0
 800d32a:	f101 0014 	add.w	r0, r1, #20
 800d32e:	6805      	ldr	r5, [r0, #0]
 800d330:	3301      	adds	r3, #1
 800d332:	b2a9      	uxth	r1, r5
 800d334:	fb02 8101 	mla	r1, r2, r1, r8
 800d338:	0c2d      	lsrs	r5, r5, #16
 800d33a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d33e:	fb02 c505 	mla	r5, r2, r5, ip
 800d342:	b289      	uxth	r1, r1
 800d344:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d348:	429e      	cmp	r6, r3
 800d34a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d34e:	f840 1b04 	str.w	r1, [r0], #4
 800d352:	dcec      	bgt.n	800d32e <__multadd+0x12>
 800d354:	f1b8 0f00 	cmp.w	r8, #0
 800d358:	d022      	beq.n	800d3a0 <__multadd+0x84>
 800d35a:	68a3      	ldr	r3, [r4, #8]
 800d35c:	42b3      	cmp	r3, r6
 800d35e:	dc19      	bgt.n	800d394 <__multadd+0x78>
 800d360:	6861      	ldr	r1, [r4, #4]
 800d362:	4638      	mov	r0, r7
 800d364:	3101      	adds	r1, #1
 800d366:	f7ff ff77 	bl	800d258 <_Balloc>
 800d36a:	4605      	mov	r5, r0
 800d36c:	b928      	cbnz	r0, 800d37a <__multadd+0x5e>
 800d36e:	4602      	mov	r2, r0
 800d370:	21b5      	movs	r1, #181	; 0xb5
 800d372:	4b0d      	ldr	r3, [pc, #52]	; (800d3a8 <__multadd+0x8c>)
 800d374:	480d      	ldr	r0, [pc, #52]	; (800d3ac <__multadd+0x90>)
 800d376:	f000 fe09 	bl	800df8c <__assert_func>
 800d37a:	6922      	ldr	r2, [r4, #16]
 800d37c:	f104 010c 	add.w	r1, r4, #12
 800d380:	3202      	adds	r2, #2
 800d382:	0092      	lsls	r2, r2, #2
 800d384:	300c      	adds	r0, #12
 800d386:	f7fe f813 	bl	800b3b0 <memcpy>
 800d38a:	4621      	mov	r1, r4
 800d38c:	4638      	mov	r0, r7
 800d38e:	f7ff ffa3 	bl	800d2d8 <_Bfree>
 800d392:	462c      	mov	r4, r5
 800d394:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d398:	3601      	adds	r6, #1
 800d39a:	f8c3 8014 	str.w	r8, [r3, #20]
 800d39e:	6126      	str	r6, [r4, #16]
 800d3a0:	4620      	mov	r0, r4
 800d3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3a6:	bf00      	nop
 800d3a8:	0800fc5f 	.word	0x0800fc5f
 800d3ac:	0800fcd0 	.word	0x0800fcd0

0800d3b0 <__hi0bits>:
 800d3b0:	0c02      	lsrs	r2, r0, #16
 800d3b2:	0412      	lsls	r2, r2, #16
 800d3b4:	4603      	mov	r3, r0
 800d3b6:	b9ca      	cbnz	r2, 800d3ec <__hi0bits+0x3c>
 800d3b8:	0403      	lsls	r3, r0, #16
 800d3ba:	2010      	movs	r0, #16
 800d3bc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d3c0:	bf04      	itt	eq
 800d3c2:	021b      	lsleq	r3, r3, #8
 800d3c4:	3008      	addeq	r0, #8
 800d3c6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d3ca:	bf04      	itt	eq
 800d3cc:	011b      	lsleq	r3, r3, #4
 800d3ce:	3004      	addeq	r0, #4
 800d3d0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d3d4:	bf04      	itt	eq
 800d3d6:	009b      	lsleq	r3, r3, #2
 800d3d8:	3002      	addeq	r0, #2
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	db05      	blt.n	800d3ea <__hi0bits+0x3a>
 800d3de:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d3e2:	f100 0001 	add.w	r0, r0, #1
 800d3e6:	bf08      	it	eq
 800d3e8:	2020      	moveq	r0, #32
 800d3ea:	4770      	bx	lr
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	e7e5      	b.n	800d3bc <__hi0bits+0xc>

0800d3f0 <__lo0bits>:
 800d3f0:	6803      	ldr	r3, [r0, #0]
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	f013 0007 	ands.w	r0, r3, #7
 800d3f8:	d00b      	beq.n	800d412 <__lo0bits+0x22>
 800d3fa:	07d9      	lsls	r1, r3, #31
 800d3fc:	d422      	bmi.n	800d444 <__lo0bits+0x54>
 800d3fe:	0798      	lsls	r0, r3, #30
 800d400:	bf49      	itett	mi
 800d402:	085b      	lsrmi	r3, r3, #1
 800d404:	089b      	lsrpl	r3, r3, #2
 800d406:	2001      	movmi	r0, #1
 800d408:	6013      	strmi	r3, [r2, #0]
 800d40a:	bf5c      	itt	pl
 800d40c:	2002      	movpl	r0, #2
 800d40e:	6013      	strpl	r3, [r2, #0]
 800d410:	4770      	bx	lr
 800d412:	b299      	uxth	r1, r3
 800d414:	b909      	cbnz	r1, 800d41a <__lo0bits+0x2a>
 800d416:	2010      	movs	r0, #16
 800d418:	0c1b      	lsrs	r3, r3, #16
 800d41a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d41e:	bf04      	itt	eq
 800d420:	0a1b      	lsreq	r3, r3, #8
 800d422:	3008      	addeq	r0, #8
 800d424:	0719      	lsls	r1, r3, #28
 800d426:	bf04      	itt	eq
 800d428:	091b      	lsreq	r3, r3, #4
 800d42a:	3004      	addeq	r0, #4
 800d42c:	0799      	lsls	r1, r3, #30
 800d42e:	bf04      	itt	eq
 800d430:	089b      	lsreq	r3, r3, #2
 800d432:	3002      	addeq	r0, #2
 800d434:	07d9      	lsls	r1, r3, #31
 800d436:	d403      	bmi.n	800d440 <__lo0bits+0x50>
 800d438:	085b      	lsrs	r3, r3, #1
 800d43a:	f100 0001 	add.w	r0, r0, #1
 800d43e:	d003      	beq.n	800d448 <__lo0bits+0x58>
 800d440:	6013      	str	r3, [r2, #0]
 800d442:	4770      	bx	lr
 800d444:	2000      	movs	r0, #0
 800d446:	4770      	bx	lr
 800d448:	2020      	movs	r0, #32
 800d44a:	4770      	bx	lr

0800d44c <__i2b>:
 800d44c:	b510      	push	{r4, lr}
 800d44e:	460c      	mov	r4, r1
 800d450:	2101      	movs	r1, #1
 800d452:	f7ff ff01 	bl	800d258 <_Balloc>
 800d456:	4602      	mov	r2, r0
 800d458:	b928      	cbnz	r0, 800d466 <__i2b+0x1a>
 800d45a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d45e:	4b04      	ldr	r3, [pc, #16]	; (800d470 <__i2b+0x24>)
 800d460:	4804      	ldr	r0, [pc, #16]	; (800d474 <__i2b+0x28>)
 800d462:	f000 fd93 	bl	800df8c <__assert_func>
 800d466:	2301      	movs	r3, #1
 800d468:	6144      	str	r4, [r0, #20]
 800d46a:	6103      	str	r3, [r0, #16]
 800d46c:	bd10      	pop	{r4, pc}
 800d46e:	bf00      	nop
 800d470:	0800fc5f 	.word	0x0800fc5f
 800d474:	0800fcd0 	.word	0x0800fcd0

0800d478 <__multiply>:
 800d478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47c:	4614      	mov	r4, r2
 800d47e:	690a      	ldr	r2, [r1, #16]
 800d480:	6923      	ldr	r3, [r4, #16]
 800d482:	460d      	mov	r5, r1
 800d484:	429a      	cmp	r2, r3
 800d486:	bfbe      	ittt	lt
 800d488:	460b      	movlt	r3, r1
 800d48a:	4625      	movlt	r5, r4
 800d48c:	461c      	movlt	r4, r3
 800d48e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d492:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d496:	68ab      	ldr	r3, [r5, #8]
 800d498:	6869      	ldr	r1, [r5, #4]
 800d49a:	eb0a 0709 	add.w	r7, sl, r9
 800d49e:	42bb      	cmp	r3, r7
 800d4a0:	b085      	sub	sp, #20
 800d4a2:	bfb8      	it	lt
 800d4a4:	3101      	addlt	r1, #1
 800d4a6:	f7ff fed7 	bl	800d258 <_Balloc>
 800d4aa:	b930      	cbnz	r0, 800d4ba <__multiply+0x42>
 800d4ac:	4602      	mov	r2, r0
 800d4ae:	f240 115d 	movw	r1, #349	; 0x15d
 800d4b2:	4b41      	ldr	r3, [pc, #260]	; (800d5b8 <__multiply+0x140>)
 800d4b4:	4841      	ldr	r0, [pc, #260]	; (800d5bc <__multiply+0x144>)
 800d4b6:	f000 fd69 	bl	800df8c <__assert_func>
 800d4ba:	f100 0614 	add.w	r6, r0, #20
 800d4be:	4633      	mov	r3, r6
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d4c6:	4543      	cmp	r3, r8
 800d4c8:	d31e      	bcc.n	800d508 <__multiply+0x90>
 800d4ca:	f105 0c14 	add.w	ip, r5, #20
 800d4ce:	f104 0314 	add.w	r3, r4, #20
 800d4d2:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d4d6:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d4da:	9202      	str	r2, [sp, #8]
 800d4dc:	ebac 0205 	sub.w	r2, ip, r5
 800d4e0:	3a15      	subs	r2, #21
 800d4e2:	f022 0203 	bic.w	r2, r2, #3
 800d4e6:	3204      	adds	r2, #4
 800d4e8:	f105 0115 	add.w	r1, r5, #21
 800d4ec:	458c      	cmp	ip, r1
 800d4ee:	bf38      	it	cc
 800d4f0:	2204      	movcc	r2, #4
 800d4f2:	9201      	str	r2, [sp, #4]
 800d4f4:	9a02      	ldr	r2, [sp, #8]
 800d4f6:	9303      	str	r3, [sp, #12]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d808      	bhi.n	800d50e <__multiply+0x96>
 800d4fc:	2f00      	cmp	r7, #0
 800d4fe:	dc55      	bgt.n	800d5ac <__multiply+0x134>
 800d500:	6107      	str	r7, [r0, #16]
 800d502:	b005      	add	sp, #20
 800d504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d508:	f843 2b04 	str.w	r2, [r3], #4
 800d50c:	e7db      	b.n	800d4c6 <__multiply+0x4e>
 800d50e:	f8b3 a000 	ldrh.w	sl, [r3]
 800d512:	f1ba 0f00 	cmp.w	sl, #0
 800d516:	d020      	beq.n	800d55a <__multiply+0xe2>
 800d518:	46b1      	mov	r9, r6
 800d51a:	2200      	movs	r2, #0
 800d51c:	f105 0e14 	add.w	lr, r5, #20
 800d520:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d524:	f8d9 b000 	ldr.w	fp, [r9]
 800d528:	b2a1      	uxth	r1, r4
 800d52a:	fa1f fb8b 	uxth.w	fp, fp
 800d52e:	fb0a b101 	mla	r1, sl, r1, fp
 800d532:	4411      	add	r1, r2
 800d534:	f8d9 2000 	ldr.w	r2, [r9]
 800d538:	0c24      	lsrs	r4, r4, #16
 800d53a:	0c12      	lsrs	r2, r2, #16
 800d53c:	fb0a 2404 	mla	r4, sl, r4, r2
 800d540:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d544:	b289      	uxth	r1, r1
 800d546:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d54a:	45f4      	cmp	ip, lr
 800d54c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d550:	f849 1b04 	str.w	r1, [r9], #4
 800d554:	d8e4      	bhi.n	800d520 <__multiply+0xa8>
 800d556:	9901      	ldr	r1, [sp, #4]
 800d558:	5072      	str	r2, [r6, r1]
 800d55a:	9a03      	ldr	r2, [sp, #12]
 800d55c:	3304      	adds	r3, #4
 800d55e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d562:	f1b9 0f00 	cmp.w	r9, #0
 800d566:	d01f      	beq.n	800d5a8 <__multiply+0x130>
 800d568:	46b6      	mov	lr, r6
 800d56a:	f04f 0a00 	mov.w	sl, #0
 800d56e:	6834      	ldr	r4, [r6, #0]
 800d570:	f105 0114 	add.w	r1, r5, #20
 800d574:	880a      	ldrh	r2, [r1, #0]
 800d576:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d57a:	b2a4      	uxth	r4, r4
 800d57c:	fb09 b202 	mla	r2, r9, r2, fp
 800d580:	4492      	add	sl, r2
 800d582:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d586:	f84e 4b04 	str.w	r4, [lr], #4
 800d58a:	f851 4b04 	ldr.w	r4, [r1], #4
 800d58e:	f8be 2000 	ldrh.w	r2, [lr]
 800d592:	0c24      	lsrs	r4, r4, #16
 800d594:	fb09 2404 	mla	r4, r9, r4, r2
 800d598:	458c      	cmp	ip, r1
 800d59a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d59e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d5a2:	d8e7      	bhi.n	800d574 <__multiply+0xfc>
 800d5a4:	9a01      	ldr	r2, [sp, #4]
 800d5a6:	50b4      	str	r4, [r6, r2]
 800d5a8:	3604      	adds	r6, #4
 800d5aa:	e7a3      	b.n	800d4f4 <__multiply+0x7c>
 800d5ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1a5      	bne.n	800d500 <__multiply+0x88>
 800d5b4:	3f01      	subs	r7, #1
 800d5b6:	e7a1      	b.n	800d4fc <__multiply+0x84>
 800d5b8:	0800fc5f 	.word	0x0800fc5f
 800d5bc:	0800fcd0 	.word	0x0800fcd0

0800d5c0 <__pow5mult>:
 800d5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5c4:	4615      	mov	r5, r2
 800d5c6:	f012 0203 	ands.w	r2, r2, #3
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	460f      	mov	r7, r1
 800d5ce:	d007      	beq.n	800d5e0 <__pow5mult+0x20>
 800d5d0:	4c25      	ldr	r4, [pc, #148]	; (800d668 <__pow5mult+0xa8>)
 800d5d2:	3a01      	subs	r2, #1
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d5da:	f7ff fe9f 	bl	800d31c <__multadd>
 800d5de:	4607      	mov	r7, r0
 800d5e0:	10ad      	asrs	r5, r5, #2
 800d5e2:	d03d      	beq.n	800d660 <__pow5mult+0xa0>
 800d5e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d5e6:	b97c      	cbnz	r4, 800d608 <__pow5mult+0x48>
 800d5e8:	2010      	movs	r0, #16
 800d5ea:	f7fd fed9 	bl	800b3a0 <malloc>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	6270      	str	r0, [r6, #36]	; 0x24
 800d5f2:	b928      	cbnz	r0, 800d600 <__pow5mult+0x40>
 800d5f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d5f8:	4b1c      	ldr	r3, [pc, #112]	; (800d66c <__pow5mult+0xac>)
 800d5fa:	481d      	ldr	r0, [pc, #116]	; (800d670 <__pow5mult+0xb0>)
 800d5fc:	f000 fcc6 	bl	800df8c <__assert_func>
 800d600:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d604:	6004      	str	r4, [r0, #0]
 800d606:	60c4      	str	r4, [r0, #12]
 800d608:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d60c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d610:	b94c      	cbnz	r4, 800d626 <__pow5mult+0x66>
 800d612:	f240 2171 	movw	r1, #625	; 0x271
 800d616:	4630      	mov	r0, r6
 800d618:	f7ff ff18 	bl	800d44c <__i2b>
 800d61c:	2300      	movs	r3, #0
 800d61e:	4604      	mov	r4, r0
 800d620:	f8c8 0008 	str.w	r0, [r8, #8]
 800d624:	6003      	str	r3, [r0, #0]
 800d626:	f04f 0900 	mov.w	r9, #0
 800d62a:	07eb      	lsls	r3, r5, #31
 800d62c:	d50a      	bpl.n	800d644 <__pow5mult+0x84>
 800d62e:	4639      	mov	r1, r7
 800d630:	4622      	mov	r2, r4
 800d632:	4630      	mov	r0, r6
 800d634:	f7ff ff20 	bl	800d478 <__multiply>
 800d638:	4680      	mov	r8, r0
 800d63a:	4639      	mov	r1, r7
 800d63c:	4630      	mov	r0, r6
 800d63e:	f7ff fe4b 	bl	800d2d8 <_Bfree>
 800d642:	4647      	mov	r7, r8
 800d644:	106d      	asrs	r5, r5, #1
 800d646:	d00b      	beq.n	800d660 <__pow5mult+0xa0>
 800d648:	6820      	ldr	r0, [r4, #0]
 800d64a:	b938      	cbnz	r0, 800d65c <__pow5mult+0x9c>
 800d64c:	4622      	mov	r2, r4
 800d64e:	4621      	mov	r1, r4
 800d650:	4630      	mov	r0, r6
 800d652:	f7ff ff11 	bl	800d478 <__multiply>
 800d656:	6020      	str	r0, [r4, #0]
 800d658:	f8c0 9000 	str.w	r9, [r0]
 800d65c:	4604      	mov	r4, r0
 800d65e:	e7e4      	b.n	800d62a <__pow5mult+0x6a>
 800d660:	4638      	mov	r0, r7
 800d662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d666:	bf00      	nop
 800d668:	0800fe20 	.word	0x0800fe20
 800d66c:	0800fbe9 	.word	0x0800fbe9
 800d670:	0800fcd0 	.word	0x0800fcd0

0800d674 <__lshift>:
 800d674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d678:	460c      	mov	r4, r1
 800d67a:	4607      	mov	r7, r0
 800d67c:	4691      	mov	r9, r2
 800d67e:	6923      	ldr	r3, [r4, #16]
 800d680:	6849      	ldr	r1, [r1, #4]
 800d682:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d686:	68a3      	ldr	r3, [r4, #8]
 800d688:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d68c:	f108 0601 	add.w	r6, r8, #1
 800d690:	42b3      	cmp	r3, r6
 800d692:	db0b      	blt.n	800d6ac <__lshift+0x38>
 800d694:	4638      	mov	r0, r7
 800d696:	f7ff fddf 	bl	800d258 <_Balloc>
 800d69a:	4605      	mov	r5, r0
 800d69c:	b948      	cbnz	r0, 800d6b2 <__lshift+0x3e>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d6a4:	4b27      	ldr	r3, [pc, #156]	; (800d744 <__lshift+0xd0>)
 800d6a6:	4828      	ldr	r0, [pc, #160]	; (800d748 <__lshift+0xd4>)
 800d6a8:	f000 fc70 	bl	800df8c <__assert_func>
 800d6ac:	3101      	adds	r1, #1
 800d6ae:	005b      	lsls	r3, r3, #1
 800d6b0:	e7ee      	b.n	800d690 <__lshift+0x1c>
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	f100 0114 	add.w	r1, r0, #20
 800d6b8:	f100 0210 	add.w	r2, r0, #16
 800d6bc:	4618      	mov	r0, r3
 800d6be:	4553      	cmp	r3, sl
 800d6c0:	db33      	blt.n	800d72a <__lshift+0xb6>
 800d6c2:	6920      	ldr	r0, [r4, #16]
 800d6c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d6c8:	f104 0314 	add.w	r3, r4, #20
 800d6cc:	f019 091f 	ands.w	r9, r9, #31
 800d6d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d6d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d6d8:	d02b      	beq.n	800d732 <__lshift+0xbe>
 800d6da:	468a      	mov	sl, r1
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f1c9 0e20 	rsb	lr, r9, #32
 800d6e2:	6818      	ldr	r0, [r3, #0]
 800d6e4:	fa00 f009 	lsl.w	r0, r0, r9
 800d6e8:	4302      	orrs	r2, r0
 800d6ea:	f84a 2b04 	str.w	r2, [sl], #4
 800d6ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6f2:	459c      	cmp	ip, r3
 800d6f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d6f8:	d8f3      	bhi.n	800d6e2 <__lshift+0x6e>
 800d6fa:	ebac 0304 	sub.w	r3, ip, r4
 800d6fe:	3b15      	subs	r3, #21
 800d700:	f023 0303 	bic.w	r3, r3, #3
 800d704:	3304      	adds	r3, #4
 800d706:	f104 0015 	add.w	r0, r4, #21
 800d70a:	4584      	cmp	ip, r0
 800d70c:	bf38      	it	cc
 800d70e:	2304      	movcc	r3, #4
 800d710:	50ca      	str	r2, [r1, r3]
 800d712:	b10a      	cbz	r2, 800d718 <__lshift+0xa4>
 800d714:	f108 0602 	add.w	r6, r8, #2
 800d718:	3e01      	subs	r6, #1
 800d71a:	4638      	mov	r0, r7
 800d71c:	4621      	mov	r1, r4
 800d71e:	612e      	str	r6, [r5, #16]
 800d720:	f7ff fdda 	bl	800d2d8 <_Bfree>
 800d724:	4628      	mov	r0, r5
 800d726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d72a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d72e:	3301      	adds	r3, #1
 800d730:	e7c5      	b.n	800d6be <__lshift+0x4a>
 800d732:	3904      	subs	r1, #4
 800d734:	f853 2b04 	ldr.w	r2, [r3], #4
 800d738:	459c      	cmp	ip, r3
 800d73a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d73e:	d8f9      	bhi.n	800d734 <__lshift+0xc0>
 800d740:	e7ea      	b.n	800d718 <__lshift+0xa4>
 800d742:	bf00      	nop
 800d744:	0800fc5f 	.word	0x0800fc5f
 800d748:	0800fcd0 	.word	0x0800fcd0

0800d74c <__mcmp>:
 800d74c:	4603      	mov	r3, r0
 800d74e:	690a      	ldr	r2, [r1, #16]
 800d750:	6900      	ldr	r0, [r0, #16]
 800d752:	b530      	push	{r4, r5, lr}
 800d754:	1a80      	subs	r0, r0, r2
 800d756:	d10d      	bne.n	800d774 <__mcmp+0x28>
 800d758:	3314      	adds	r3, #20
 800d75a:	3114      	adds	r1, #20
 800d75c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d760:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d764:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d768:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d76c:	4295      	cmp	r5, r2
 800d76e:	d002      	beq.n	800d776 <__mcmp+0x2a>
 800d770:	d304      	bcc.n	800d77c <__mcmp+0x30>
 800d772:	2001      	movs	r0, #1
 800d774:	bd30      	pop	{r4, r5, pc}
 800d776:	42a3      	cmp	r3, r4
 800d778:	d3f4      	bcc.n	800d764 <__mcmp+0x18>
 800d77a:	e7fb      	b.n	800d774 <__mcmp+0x28>
 800d77c:	f04f 30ff 	mov.w	r0, #4294967295
 800d780:	e7f8      	b.n	800d774 <__mcmp+0x28>
	...

0800d784 <__mdiff>:
 800d784:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d788:	460c      	mov	r4, r1
 800d78a:	4606      	mov	r6, r0
 800d78c:	4611      	mov	r1, r2
 800d78e:	4620      	mov	r0, r4
 800d790:	4692      	mov	sl, r2
 800d792:	f7ff ffdb 	bl	800d74c <__mcmp>
 800d796:	1e05      	subs	r5, r0, #0
 800d798:	d111      	bne.n	800d7be <__mdiff+0x3a>
 800d79a:	4629      	mov	r1, r5
 800d79c:	4630      	mov	r0, r6
 800d79e:	f7ff fd5b 	bl	800d258 <_Balloc>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	b928      	cbnz	r0, 800d7b2 <__mdiff+0x2e>
 800d7a6:	f240 2132 	movw	r1, #562	; 0x232
 800d7aa:	4b3c      	ldr	r3, [pc, #240]	; (800d89c <__mdiff+0x118>)
 800d7ac:	483c      	ldr	r0, [pc, #240]	; (800d8a0 <__mdiff+0x11c>)
 800d7ae:	f000 fbed 	bl	800df8c <__assert_func>
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d7b8:	4610      	mov	r0, r2
 800d7ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7be:	bfa4      	itt	ge
 800d7c0:	4653      	movge	r3, sl
 800d7c2:	46a2      	movge	sl, r4
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d7ca:	bfa6      	itte	ge
 800d7cc:	461c      	movge	r4, r3
 800d7ce:	2500      	movge	r5, #0
 800d7d0:	2501      	movlt	r5, #1
 800d7d2:	f7ff fd41 	bl	800d258 <_Balloc>
 800d7d6:	4602      	mov	r2, r0
 800d7d8:	b918      	cbnz	r0, 800d7e2 <__mdiff+0x5e>
 800d7da:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d7de:	4b2f      	ldr	r3, [pc, #188]	; (800d89c <__mdiff+0x118>)
 800d7e0:	e7e4      	b.n	800d7ac <__mdiff+0x28>
 800d7e2:	f100 0814 	add.w	r8, r0, #20
 800d7e6:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d7ea:	60c5      	str	r5, [r0, #12]
 800d7ec:	f04f 0c00 	mov.w	ip, #0
 800d7f0:	f10a 0514 	add.w	r5, sl, #20
 800d7f4:	f10a 0010 	add.w	r0, sl, #16
 800d7f8:	46c2      	mov	sl, r8
 800d7fa:	6926      	ldr	r6, [r4, #16]
 800d7fc:	f104 0914 	add.w	r9, r4, #20
 800d800:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d804:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d808:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d80c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d810:	fa1f f18b 	uxth.w	r1, fp
 800d814:	4461      	add	r1, ip
 800d816:	fa1f fc83 	uxth.w	ip, r3
 800d81a:	0c1b      	lsrs	r3, r3, #16
 800d81c:	eba1 010c 	sub.w	r1, r1, ip
 800d820:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d824:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d828:	b289      	uxth	r1, r1
 800d82a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d82e:	454e      	cmp	r6, r9
 800d830:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d834:	f84a 3b04 	str.w	r3, [sl], #4
 800d838:	d8e6      	bhi.n	800d808 <__mdiff+0x84>
 800d83a:	1b33      	subs	r3, r6, r4
 800d83c:	3b15      	subs	r3, #21
 800d83e:	f023 0303 	bic.w	r3, r3, #3
 800d842:	3415      	adds	r4, #21
 800d844:	3304      	adds	r3, #4
 800d846:	42a6      	cmp	r6, r4
 800d848:	bf38      	it	cc
 800d84a:	2304      	movcc	r3, #4
 800d84c:	441d      	add	r5, r3
 800d84e:	4443      	add	r3, r8
 800d850:	461e      	mov	r6, r3
 800d852:	462c      	mov	r4, r5
 800d854:	4574      	cmp	r4, lr
 800d856:	d30e      	bcc.n	800d876 <__mdiff+0xf2>
 800d858:	f10e 0103 	add.w	r1, lr, #3
 800d85c:	1b49      	subs	r1, r1, r5
 800d85e:	f021 0103 	bic.w	r1, r1, #3
 800d862:	3d03      	subs	r5, #3
 800d864:	45ae      	cmp	lr, r5
 800d866:	bf38      	it	cc
 800d868:	2100      	movcc	r1, #0
 800d86a:	4419      	add	r1, r3
 800d86c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d870:	b18b      	cbz	r3, 800d896 <__mdiff+0x112>
 800d872:	6117      	str	r7, [r2, #16]
 800d874:	e7a0      	b.n	800d7b8 <__mdiff+0x34>
 800d876:	f854 8b04 	ldr.w	r8, [r4], #4
 800d87a:	fa1f f188 	uxth.w	r1, r8
 800d87e:	4461      	add	r1, ip
 800d880:	1408      	asrs	r0, r1, #16
 800d882:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d886:	b289      	uxth	r1, r1
 800d888:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d88c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d890:	f846 1b04 	str.w	r1, [r6], #4
 800d894:	e7de      	b.n	800d854 <__mdiff+0xd0>
 800d896:	3f01      	subs	r7, #1
 800d898:	e7e8      	b.n	800d86c <__mdiff+0xe8>
 800d89a:	bf00      	nop
 800d89c:	0800fc5f 	.word	0x0800fc5f
 800d8a0:	0800fcd0 	.word	0x0800fcd0

0800d8a4 <__d2b>:
 800d8a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d8a8:	2101      	movs	r1, #1
 800d8aa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d8ae:	4690      	mov	r8, r2
 800d8b0:	461d      	mov	r5, r3
 800d8b2:	f7ff fcd1 	bl	800d258 <_Balloc>
 800d8b6:	4604      	mov	r4, r0
 800d8b8:	b930      	cbnz	r0, 800d8c8 <__d2b+0x24>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	f240 310a 	movw	r1, #778	; 0x30a
 800d8c0:	4b24      	ldr	r3, [pc, #144]	; (800d954 <__d2b+0xb0>)
 800d8c2:	4825      	ldr	r0, [pc, #148]	; (800d958 <__d2b+0xb4>)
 800d8c4:	f000 fb62 	bl	800df8c <__assert_func>
 800d8c8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d8cc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d8d0:	bb2d      	cbnz	r5, 800d91e <__d2b+0x7a>
 800d8d2:	9301      	str	r3, [sp, #4]
 800d8d4:	f1b8 0300 	subs.w	r3, r8, #0
 800d8d8:	d026      	beq.n	800d928 <__d2b+0x84>
 800d8da:	4668      	mov	r0, sp
 800d8dc:	9300      	str	r3, [sp, #0]
 800d8de:	f7ff fd87 	bl	800d3f0 <__lo0bits>
 800d8e2:	9900      	ldr	r1, [sp, #0]
 800d8e4:	b1f0      	cbz	r0, 800d924 <__d2b+0x80>
 800d8e6:	9a01      	ldr	r2, [sp, #4]
 800d8e8:	f1c0 0320 	rsb	r3, r0, #32
 800d8ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d8f0:	430b      	orrs	r3, r1
 800d8f2:	40c2      	lsrs	r2, r0
 800d8f4:	6163      	str	r3, [r4, #20]
 800d8f6:	9201      	str	r2, [sp, #4]
 800d8f8:	9b01      	ldr	r3, [sp, #4]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	bf14      	ite	ne
 800d8fe:	2102      	movne	r1, #2
 800d900:	2101      	moveq	r1, #1
 800d902:	61a3      	str	r3, [r4, #24]
 800d904:	6121      	str	r1, [r4, #16]
 800d906:	b1c5      	cbz	r5, 800d93a <__d2b+0x96>
 800d908:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d90c:	4405      	add	r5, r0
 800d90e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d912:	603d      	str	r5, [r7, #0]
 800d914:	6030      	str	r0, [r6, #0]
 800d916:	4620      	mov	r0, r4
 800d918:	b002      	add	sp, #8
 800d91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d91e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d922:	e7d6      	b.n	800d8d2 <__d2b+0x2e>
 800d924:	6161      	str	r1, [r4, #20]
 800d926:	e7e7      	b.n	800d8f8 <__d2b+0x54>
 800d928:	a801      	add	r0, sp, #4
 800d92a:	f7ff fd61 	bl	800d3f0 <__lo0bits>
 800d92e:	2101      	movs	r1, #1
 800d930:	9b01      	ldr	r3, [sp, #4]
 800d932:	6121      	str	r1, [r4, #16]
 800d934:	6163      	str	r3, [r4, #20]
 800d936:	3020      	adds	r0, #32
 800d938:	e7e5      	b.n	800d906 <__d2b+0x62>
 800d93a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d93e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d942:	6038      	str	r0, [r7, #0]
 800d944:	6918      	ldr	r0, [r3, #16]
 800d946:	f7ff fd33 	bl	800d3b0 <__hi0bits>
 800d94a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d94e:	6031      	str	r1, [r6, #0]
 800d950:	e7e1      	b.n	800d916 <__d2b+0x72>
 800d952:	bf00      	nop
 800d954:	0800fc5f 	.word	0x0800fc5f
 800d958:	0800fcd0 	.word	0x0800fcd0

0800d95c <_calloc_r>:
 800d95c:	b538      	push	{r3, r4, r5, lr}
 800d95e:	fb02 f501 	mul.w	r5, r2, r1
 800d962:	4629      	mov	r1, r5
 800d964:	f7fd fd86 	bl	800b474 <_malloc_r>
 800d968:	4604      	mov	r4, r0
 800d96a:	b118      	cbz	r0, 800d974 <_calloc_r+0x18>
 800d96c:	462a      	mov	r2, r5
 800d96e:	2100      	movs	r1, #0
 800d970:	f7fd fd2c 	bl	800b3cc <memset>
 800d974:	4620      	mov	r0, r4
 800d976:	bd38      	pop	{r3, r4, r5, pc}

0800d978 <__ssputs_r>:
 800d978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d97c:	688e      	ldr	r6, [r1, #8]
 800d97e:	4682      	mov	sl, r0
 800d980:	429e      	cmp	r6, r3
 800d982:	460c      	mov	r4, r1
 800d984:	4690      	mov	r8, r2
 800d986:	461f      	mov	r7, r3
 800d988:	d838      	bhi.n	800d9fc <__ssputs_r+0x84>
 800d98a:	898a      	ldrh	r2, [r1, #12]
 800d98c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d990:	d032      	beq.n	800d9f8 <__ssputs_r+0x80>
 800d992:	6825      	ldr	r5, [r4, #0]
 800d994:	6909      	ldr	r1, [r1, #16]
 800d996:	3301      	adds	r3, #1
 800d998:	eba5 0901 	sub.w	r9, r5, r1
 800d99c:	6965      	ldr	r5, [r4, #20]
 800d99e:	444b      	add	r3, r9
 800d9a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d9a8:	106d      	asrs	r5, r5, #1
 800d9aa:	429d      	cmp	r5, r3
 800d9ac:	bf38      	it	cc
 800d9ae:	461d      	movcc	r5, r3
 800d9b0:	0553      	lsls	r3, r2, #21
 800d9b2:	d531      	bpl.n	800da18 <__ssputs_r+0xa0>
 800d9b4:	4629      	mov	r1, r5
 800d9b6:	f7fd fd5d 	bl	800b474 <_malloc_r>
 800d9ba:	4606      	mov	r6, r0
 800d9bc:	b950      	cbnz	r0, 800d9d4 <__ssputs_r+0x5c>
 800d9be:	230c      	movs	r3, #12
 800d9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c4:	f8ca 3000 	str.w	r3, [sl]
 800d9c8:	89a3      	ldrh	r3, [r4, #12]
 800d9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9ce:	81a3      	strh	r3, [r4, #12]
 800d9d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d4:	464a      	mov	r2, r9
 800d9d6:	6921      	ldr	r1, [r4, #16]
 800d9d8:	f7fd fcea 	bl	800b3b0 <memcpy>
 800d9dc:	89a3      	ldrh	r3, [r4, #12]
 800d9de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9e6:	81a3      	strh	r3, [r4, #12]
 800d9e8:	6126      	str	r6, [r4, #16]
 800d9ea:	444e      	add	r6, r9
 800d9ec:	6026      	str	r6, [r4, #0]
 800d9ee:	463e      	mov	r6, r7
 800d9f0:	6165      	str	r5, [r4, #20]
 800d9f2:	eba5 0509 	sub.w	r5, r5, r9
 800d9f6:	60a5      	str	r5, [r4, #8]
 800d9f8:	42be      	cmp	r6, r7
 800d9fa:	d900      	bls.n	800d9fe <__ssputs_r+0x86>
 800d9fc:	463e      	mov	r6, r7
 800d9fe:	4632      	mov	r2, r6
 800da00:	4641      	mov	r1, r8
 800da02:	6820      	ldr	r0, [r4, #0]
 800da04:	f000 fb48 	bl	800e098 <memmove>
 800da08:	68a3      	ldr	r3, [r4, #8]
 800da0a:	6822      	ldr	r2, [r4, #0]
 800da0c:	1b9b      	subs	r3, r3, r6
 800da0e:	4432      	add	r2, r6
 800da10:	2000      	movs	r0, #0
 800da12:	60a3      	str	r3, [r4, #8]
 800da14:	6022      	str	r2, [r4, #0]
 800da16:	e7db      	b.n	800d9d0 <__ssputs_r+0x58>
 800da18:	462a      	mov	r2, r5
 800da1a:	f000 fb57 	bl	800e0cc <_realloc_r>
 800da1e:	4606      	mov	r6, r0
 800da20:	2800      	cmp	r0, #0
 800da22:	d1e1      	bne.n	800d9e8 <__ssputs_r+0x70>
 800da24:	4650      	mov	r0, sl
 800da26:	6921      	ldr	r1, [r4, #16]
 800da28:	f7fd fcd8 	bl	800b3dc <_free_r>
 800da2c:	e7c7      	b.n	800d9be <__ssputs_r+0x46>
	...

0800da30 <_svfiprintf_r>:
 800da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da34:	4698      	mov	r8, r3
 800da36:	898b      	ldrh	r3, [r1, #12]
 800da38:	4607      	mov	r7, r0
 800da3a:	061b      	lsls	r3, r3, #24
 800da3c:	460d      	mov	r5, r1
 800da3e:	4614      	mov	r4, r2
 800da40:	b09d      	sub	sp, #116	; 0x74
 800da42:	d50e      	bpl.n	800da62 <_svfiprintf_r+0x32>
 800da44:	690b      	ldr	r3, [r1, #16]
 800da46:	b963      	cbnz	r3, 800da62 <_svfiprintf_r+0x32>
 800da48:	2140      	movs	r1, #64	; 0x40
 800da4a:	f7fd fd13 	bl	800b474 <_malloc_r>
 800da4e:	6028      	str	r0, [r5, #0]
 800da50:	6128      	str	r0, [r5, #16]
 800da52:	b920      	cbnz	r0, 800da5e <_svfiprintf_r+0x2e>
 800da54:	230c      	movs	r3, #12
 800da56:	603b      	str	r3, [r7, #0]
 800da58:	f04f 30ff 	mov.w	r0, #4294967295
 800da5c:	e0d1      	b.n	800dc02 <_svfiprintf_r+0x1d2>
 800da5e:	2340      	movs	r3, #64	; 0x40
 800da60:	616b      	str	r3, [r5, #20]
 800da62:	2300      	movs	r3, #0
 800da64:	9309      	str	r3, [sp, #36]	; 0x24
 800da66:	2320      	movs	r3, #32
 800da68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da6c:	2330      	movs	r3, #48	; 0x30
 800da6e:	f04f 0901 	mov.w	r9, #1
 800da72:	f8cd 800c 	str.w	r8, [sp, #12]
 800da76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dc1c <_svfiprintf_r+0x1ec>
 800da7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da7e:	4623      	mov	r3, r4
 800da80:	469a      	mov	sl, r3
 800da82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da86:	b10a      	cbz	r2, 800da8c <_svfiprintf_r+0x5c>
 800da88:	2a25      	cmp	r2, #37	; 0x25
 800da8a:	d1f9      	bne.n	800da80 <_svfiprintf_r+0x50>
 800da8c:	ebba 0b04 	subs.w	fp, sl, r4
 800da90:	d00b      	beq.n	800daaa <_svfiprintf_r+0x7a>
 800da92:	465b      	mov	r3, fp
 800da94:	4622      	mov	r2, r4
 800da96:	4629      	mov	r1, r5
 800da98:	4638      	mov	r0, r7
 800da9a:	f7ff ff6d 	bl	800d978 <__ssputs_r>
 800da9e:	3001      	adds	r0, #1
 800daa0:	f000 80aa 	beq.w	800dbf8 <_svfiprintf_r+0x1c8>
 800daa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800daa6:	445a      	add	r2, fp
 800daa8:	9209      	str	r2, [sp, #36]	; 0x24
 800daaa:	f89a 3000 	ldrb.w	r3, [sl]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	f000 80a2 	beq.w	800dbf8 <_svfiprintf_r+0x1c8>
 800dab4:	2300      	movs	r3, #0
 800dab6:	f04f 32ff 	mov.w	r2, #4294967295
 800daba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dabe:	f10a 0a01 	add.w	sl, sl, #1
 800dac2:	9304      	str	r3, [sp, #16]
 800dac4:	9307      	str	r3, [sp, #28]
 800dac6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800daca:	931a      	str	r3, [sp, #104]	; 0x68
 800dacc:	4654      	mov	r4, sl
 800dace:	2205      	movs	r2, #5
 800dad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dad4:	4851      	ldr	r0, [pc, #324]	; (800dc1c <_svfiprintf_r+0x1ec>)
 800dad6:	f7ff fba5 	bl	800d224 <memchr>
 800dada:	9a04      	ldr	r2, [sp, #16]
 800dadc:	b9d8      	cbnz	r0, 800db16 <_svfiprintf_r+0xe6>
 800dade:	06d0      	lsls	r0, r2, #27
 800dae0:	bf44      	itt	mi
 800dae2:	2320      	movmi	r3, #32
 800dae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dae8:	0711      	lsls	r1, r2, #28
 800daea:	bf44      	itt	mi
 800daec:	232b      	movmi	r3, #43	; 0x2b
 800daee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daf2:	f89a 3000 	ldrb.w	r3, [sl]
 800daf6:	2b2a      	cmp	r3, #42	; 0x2a
 800daf8:	d015      	beq.n	800db26 <_svfiprintf_r+0xf6>
 800dafa:	4654      	mov	r4, sl
 800dafc:	2000      	movs	r0, #0
 800dafe:	f04f 0c0a 	mov.w	ip, #10
 800db02:	9a07      	ldr	r2, [sp, #28]
 800db04:	4621      	mov	r1, r4
 800db06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db0a:	3b30      	subs	r3, #48	; 0x30
 800db0c:	2b09      	cmp	r3, #9
 800db0e:	d94e      	bls.n	800dbae <_svfiprintf_r+0x17e>
 800db10:	b1b0      	cbz	r0, 800db40 <_svfiprintf_r+0x110>
 800db12:	9207      	str	r2, [sp, #28]
 800db14:	e014      	b.n	800db40 <_svfiprintf_r+0x110>
 800db16:	eba0 0308 	sub.w	r3, r0, r8
 800db1a:	fa09 f303 	lsl.w	r3, r9, r3
 800db1e:	4313      	orrs	r3, r2
 800db20:	46a2      	mov	sl, r4
 800db22:	9304      	str	r3, [sp, #16]
 800db24:	e7d2      	b.n	800dacc <_svfiprintf_r+0x9c>
 800db26:	9b03      	ldr	r3, [sp, #12]
 800db28:	1d19      	adds	r1, r3, #4
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	9103      	str	r1, [sp, #12]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	bfbb      	ittet	lt
 800db32:	425b      	neglt	r3, r3
 800db34:	f042 0202 	orrlt.w	r2, r2, #2
 800db38:	9307      	strge	r3, [sp, #28]
 800db3a:	9307      	strlt	r3, [sp, #28]
 800db3c:	bfb8      	it	lt
 800db3e:	9204      	strlt	r2, [sp, #16]
 800db40:	7823      	ldrb	r3, [r4, #0]
 800db42:	2b2e      	cmp	r3, #46	; 0x2e
 800db44:	d10c      	bne.n	800db60 <_svfiprintf_r+0x130>
 800db46:	7863      	ldrb	r3, [r4, #1]
 800db48:	2b2a      	cmp	r3, #42	; 0x2a
 800db4a:	d135      	bne.n	800dbb8 <_svfiprintf_r+0x188>
 800db4c:	9b03      	ldr	r3, [sp, #12]
 800db4e:	3402      	adds	r4, #2
 800db50:	1d1a      	adds	r2, r3, #4
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	9203      	str	r2, [sp, #12]
 800db56:	2b00      	cmp	r3, #0
 800db58:	bfb8      	it	lt
 800db5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800db5e:	9305      	str	r3, [sp, #20]
 800db60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dc2c <_svfiprintf_r+0x1fc>
 800db64:	2203      	movs	r2, #3
 800db66:	4650      	mov	r0, sl
 800db68:	7821      	ldrb	r1, [r4, #0]
 800db6a:	f7ff fb5b 	bl	800d224 <memchr>
 800db6e:	b140      	cbz	r0, 800db82 <_svfiprintf_r+0x152>
 800db70:	2340      	movs	r3, #64	; 0x40
 800db72:	eba0 000a 	sub.w	r0, r0, sl
 800db76:	fa03 f000 	lsl.w	r0, r3, r0
 800db7a:	9b04      	ldr	r3, [sp, #16]
 800db7c:	3401      	adds	r4, #1
 800db7e:	4303      	orrs	r3, r0
 800db80:	9304      	str	r3, [sp, #16]
 800db82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db86:	2206      	movs	r2, #6
 800db88:	4825      	ldr	r0, [pc, #148]	; (800dc20 <_svfiprintf_r+0x1f0>)
 800db8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db8e:	f7ff fb49 	bl	800d224 <memchr>
 800db92:	2800      	cmp	r0, #0
 800db94:	d038      	beq.n	800dc08 <_svfiprintf_r+0x1d8>
 800db96:	4b23      	ldr	r3, [pc, #140]	; (800dc24 <_svfiprintf_r+0x1f4>)
 800db98:	bb1b      	cbnz	r3, 800dbe2 <_svfiprintf_r+0x1b2>
 800db9a:	9b03      	ldr	r3, [sp, #12]
 800db9c:	3307      	adds	r3, #7
 800db9e:	f023 0307 	bic.w	r3, r3, #7
 800dba2:	3308      	adds	r3, #8
 800dba4:	9303      	str	r3, [sp, #12]
 800dba6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dba8:	4433      	add	r3, r6
 800dbaa:	9309      	str	r3, [sp, #36]	; 0x24
 800dbac:	e767      	b.n	800da7e <_svfiprintf_r+0x4e>
 800dbae:	460c      	mov	r4, r1
 800dbb0:	2001      	movs	r0, #1
 800dbb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbb6:	e7a5      	b.n	800db04 <_svfiprintf_r+0xd4>
 800dbb8:	2300      	movs	r3, #0
 800dbba:	f04f 0c0a 	mov.w	ip, #10
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	3401      	adds	r4, #1
 800dbc2:	9305      	str	r3, [sp, #20]
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbca:	3a30      	subs	r2, #48	; 0x30
 800dbcc:	2a09      	cmp	r2, #9
 800dbce:	d903      	bls.n	800dbd8 <_svfiprintf_r+0x1a8>
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d0c5      	beq.n	800db60 <_svfiprintf_r+0x130>
 800dbd4:	9105      	str	r1, [sp, #20]
 800dbd6:	e7c3      	b.n	800db60 <_svfiprintf_r+0x130>
 800dbd8:	4604      	mov	r4, r0
 800dbda:	2301      	movs	r3, #1
 800dbdc:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbe0:	e7f0      	b.n	800dbc4 <_svfiprintf_r+0x194>
 800dbe2:	ab03      	add	r3, sp, #12
 800dbe4:	9300      	str	r3, [sp, #0]
 800dbe6:	462a      	mov	r2, r5
 800dbe8:	4638      	mov	r0, r7
 800dbea:	4b0f      	ldr	r3, [pc, #60]	; (800dc28 <_svfiprintf_r+0x1f8>)
 800dbec:	a904      	add	r1, sp, #16
 800dbee:	f7fd fd39 	bl	800b664 <_printf_float>
 800dbf2:	1c42      	adds	r2, r0, #1
 800dbf4:	4606      	mov	r6, r0
 800dbf6:	d1d6      	bne.n	800dba6 <_svfiprintf_r+0x176>
 800dbf8:	89ab      	ldrh	r3, [r5, #12]
 800dbfa:	065b      	lsls	r3, r3, #25
 800dbfc:	f53f af2c 	bmi.w	800da58 <_svfiprintf_r+0x28>
 800dc00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc02:	b01d      	add	sp, #116	; 0x74
 800dc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc08:	ab03      	add	r3, sp, #12
 800dc0a:	9300      	str	r3, [sp, #0]
 800dc0c:	462a      	mov	r2, r5
 800dc0e:	4638      	mov	r0, r7
 800dc10:	4b05      	ldr	r3, [pc, #20]	; (800dc28 <_svfiprintf_r+0x1f8>)
 800dc12:	a904      	add	r1, sp, #16
 800dc14:	f7fd ffc2 	bl	800bb9c <_printf_i>
 800dc18:	e7eb      	b.n	800dbf2 <_svfiprintf_r+0x1c2>
 800dc1a:	bf00      	nop
 800dc1c:	0800fe2c 	.word	0x0800fe2c
 800dc20:	0800fe36 	.word	0x0800fe36
 800dc24:	0800b665 	.word	0x0800b665
 800dc28:	0800d979 	.word	0x0800d979
 800dc2c:	0800fe32 	.word	0x0800fe32

0800dc30 <__sfputc_r>:
 800dc30:	6893      	ldr	r3, [r2, #8]
 800dc32:	b410      	push	{r4}
 800dc34:	3b01      	subs	r3, #1
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	6093      	str	r3, [r2, #8]
 800dc3a:	da07      	bge.n	800dc4c <__sfputc_r+0x1c>
 800dc3c:	6994      	ldr	r4, [r2, #24]
 800dc3e:	42a3      	cmp	r3, r4
 800dc40:	db01      	blt.n	800dc46 <__sfputc_r+0x16>
 800dc42:	290a      	cmp	r1, #10
 800dc44:	d102      	bne.n	800dc4c <__sfputc_r+0x1c>
 800dc46:	bc10      	pop	{r4}
 800dc48:	f7fe b98c 	b.w	800bf64 <__swbuf_r>
 800dc4c:	6813      	ldr	r3, [r2, #0]
 800dc4e:	1c58      	adds	r0, r3, #1
 800dc50:	6010      	str	r0, [r2, #0]
 800dc52:	7019      	strb	r1, [r3, #0]
 800dc54:	4608      	mov	r0, r1
 800dc56:	bc10      	pop	{r4}
 800dc58:	4770      	bx	lr

0800dc5a <__sfputs_r>:
 800dc5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc5c:	4606      	mov	r6, r0
 800dc5e:	460f      	mov	r7, r1
 800dc60:	4614      	mov	r4, r2
 800dc62:	18d5      	adds	r5, r2, r3
 800dc64:	42ac      	cmp	r4, r5
 800dc66:	d101      	bne.n	800dc6c <__sfputs_r+0x12>
 800dc68:	2000      	movs	r0, #0
 800dc6a:	e007      	b.n	800dc7c <__sfputs_r+0x22>
 800dc6c:	463a      	mov	r2, r7
 800dc6e:	4630      	mov	r0, r6
 800dc70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc74:	f7ff ffdc 	bl	800dc30 <__sfputc_r>
 800dc78:	1c43      	adds	r3, r0, #1
 800dc7a:	d1f3      	bne.n	800dc64 <__sfputs_r+0xa>
 800dc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc80 <_vfiprintf_r>:
 800dc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc84:	460d      	mov	r5, r1
 800dc86:	4614      	mov	r4, r2
 800dc88:	4698      	mov	r8, r3
 800dc8a:	4606      	mov	r6, r0
 800dc8c:	b09d      	sub	sp, #116	; 0x74
 800dc8e:	b118      	cbz	r0, 800dc98 <_vfiprintf_r+0x18>
 800dc90:	6983      	ldr	r3, [r0, #24]
 800dc92:	b90b      	cbnz	r3, 800dc98 <_vfiprintf_r+0x18>
 800dc94:	f7ff f9bc 	bl	800d010 <__sinit>
 800dc98:	4b89      	ldr	r3, [pc, #548]	; (800dec0 <_vfiprintf_r+0x240>)
 800dc9a:	429d      	cmp	r5, r3
 800dc9c:	d11b      	bne.n	800dcd6 <_vfiprintf_r+0x56>
 800dc9e:	6875      	ldr	r5, [r6, #4]
 800dca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dca2:	07d9      	lsls	r1, r3, #31
 800dca4:	d405      	bmi.n	800dcb2 <_vfiprintf_r+0x32>
 800dca6:	89ab      	ldrh	r3, [r5, #12]
 800dca8:	059a      	lsls	r2, r3, #22
 800dcaa:	d402      	bmi.n	800dcb2 <_vfiprintf_r+0x32>
 800dcac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcae:	f7ff fa52 	bl	800d156 <__retarget_lock_acquire_recursive>
 800dcb2:	89ab      	ldrh	r3, [r5, #12]
 800dcb4:	071b      	lsls	r3, r3, #28
 800dcb6:	d501      	bpl.n	800dcbc <_vfiprintf_r+0x3c>
 800dcb8:	692b      	ldr	r3, [r5, #16]
 800dcba:	b9eb      	cbnz	r3, 800dcf8 <_vfiprintf_r+0x78>
 800dcbc:	4629      	mov	r1, r5
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	f7fe f9a2 	bl	800c008 <__swsetup_r>
 800dcc4:	b1c0      	cbz	r0, 800dcf8 <_vfiprintf_r+0x78>
 800dcc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dcc8:	07dc      	lsls	r4, r3, #31
 800dcca:	d50e      	bpl.n	800dcea <_vfiprintf_r+0x6a>
 800dccc:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd0:	b01d      	add	sp, #116	; 0x74
 800dcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcd6:	4b7b      	ldr	r3, [pc, #492]	; (800dec4 <_vfiprintf_r+0x244>)
 800dcd8:	429d      	cmp	r5, r3
 800dcda:	d101      	bne.n	800dce0 <_vfiprintf_r+0x60>
 800dcdc:	68b5      	ldr	r5, [r6, #8]
 800dcde:	e7df      	b.n	800dca0 <_vfiprintf_r+0x20>
 800dce0:	4b79      	ldr	r3, [pc, #484]	; (800dec8 <_vfiprintf_r+0x248>)
 800dce2:	429d      	cmp	r5, r3
 800dce4:	bf08      	it	eq
 800dce6:	68f5      	ldreq	r5, [r6, #12]
 800dce8:	e7da      	b.n	800dca0 <_vfiprintf_r+0x20>
 800dcea:	89ab      	ldrh	r3, [r5, #12]
 800dcec:	0598      	lsls	r0, r3, #22
 800dcee:	d4ed      	bmi.n	800dccc <_vfiprintf_r+0x4c>
 800dcf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcf2:	f7ff fa31 	bl	800d158 <__retarget_lock_release_recursive>
 800dcf6:	e7e9      	b.n	800dccc <_vfiprintf_r+0x4c>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	9309      	str	r3, [sp, #36]	; 0x24
 800dcfc:	2320      	movs	r3, #32
 800dcfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd02:	2330      	movs	r3, #48	; 0x30
 800dd04:	f04f 0901 	mov.w	r9, #1
 800dd08:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd0c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800decc <_vfiprintf_r+0x24c>
 800dd10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd14:	4623      	mov	r3, r4
 800dd16:	469a      	mov	sl, r3
 800dd18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd1c:	b10a      	cbz	r2, 800dd22 <_vfiprintf_r+0xa2>
 800dd1e:	2a25      	cmp	r2, #37	; 0x25
 800dd20:	d1f9      	bne.n	800dd16 <_vfiprintf_r+0x96>
 800dd22:	ebba 0b04 	subs.w	fp, sl, r4
 800dd26:	d00b      	beq.n	800dd40 <_vfiprintf_r+0xc0>
 800dd28:	465b      	mov	r3, fp
 800dd2a:	4622      	mov	r2, r4
 800dd2c:	4629      	mov	r1, r5
 800dd2e:	4630      	mov	r0, r6
 800dd30:	f7ff ff93 	bl	800dc5a <__sfputs_r>
 800dd34:	3001      	adds	r0, #1
 800dd36:	f000 80aa 	beq.w	800de8e <_vfiprintf_r+0x20e>
 800dd3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd3c:	445a      	add	r2, fp
 800dd3e:	9209      	str	r2, [sp, #36]	; 0x24
 800dd40:	f89a 3000 	ldrb.w	r3, [sl]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	f000 80a2 	beq.w	800de8e <_vfiprintf_r+0x20e>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	f04f 32ff 	mov.w	r2, #4294967295
 800dd50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd54:	f10a 0a01 	add.w	sl, sl, #1
 800dd58:	9304      	str	r3, [sp, #16]
 800dd5a:	9307      	str	r3, [sp, #28]
 800dd5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd60:	931a      	str	r3, [sp, #104]	; 0x68
 800dd62:	4654      	mov	r4, sl
 800dd64:	2205      	movs	r2, #5
 800dd66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd6a:	4858      	ldr	r0, [pc, #352]	; (800decc <_vfiprintf_r+0x24c>)
 800dd6c:	f7ff fa5a 	bl	800d224 <memchr>
 800dd70:	9a04      	ldr	r2, [sp, #16]
 800dd72:	b9d8      	cbnz	r0, 800ddac <_vfiprintf_r+0x12c>
 800dd74:	06d1      	lsls	r1, r2, #27
 800dd76:	bf44      	itt	mi
 800dd78:	2320      	movmi	r3, #32
 800dd7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd7e:	0713      	lsls	r3, r2, #28
 800dd80:	bf44      	itt	mi
 800dd82:	232b      	movmi	r3, #43	; 0x2b
 800dd84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd88:	f89a 3000 	ldrb.w	r3, [sl]
 800dd8c:	2b2a      	cmp	r3, #42	; 0x2a
 800dd8e:	d015      	beq.n	800ddbc <_vfiprintf_r+0x13c>
 800dd90:	4654      	mov	r4, sl
 800dd92:	2000      	movs	r0, #0
 800dd94:	f04f 0c0a 	mov.w	ip, #10
 800dd98:	9a07      	ldr	r2, [sp, #28]
 800dd9a:	4621      	mov	r1, r4
 800dd9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dda0:	3b30      	subs	r3, #48	; 0x30
 800dda2:	2b09      	cmp	r3, #9
 800dda4:	d94e      	bls.n	800de44 <_vfiprintf_r+0x1c4>
 800dda6:	b1b0      	cbz	r0, 800ddd6 <_vfiprintf_r+0x156>
 800dda8:	9207      	str	r2, [sp, #28]
 800ddaa:	e014      	b.n	800ddd6 <_vfiprintf_r+0x156>
 800ddac:	eba0 0308 	sub.w	r3, r0, r8
 800ddb0:	fa09 f303 	lsl.w	r3, r9, r3
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	46a2      	mov	sl, r4
 800ddb8:	9304      	str	r3, [sp, #16]
 800ddba:	e7d2      	b.n	800dd62 <_vfiprintf_r+0xe2>
 800ddbc:	9b03      	ldr	r3, [sp, #12]
 800ddbe:	1d19      	adds	r1, r3, #4
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	9103      	str	r1, [sp, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	bfbb      	ittet	lt
 800ddc8:	425b      	neglt	r3, r3
 800ddca:	f042 0202 	orrlt.w	r2, r2, #2
 800ddce:	9307      	strge	r3, [sp, #28]
 800ddd0:	9307      	strlt	r3, [sp, #28]
 800ddd2:	bfb8      	it	lt
 800ddd4:	9204      	strlt	r2, [sp, #16]
 800ddd6:	7823      	ldrb	r3, [r4, #0]
 800ddd8:	2b2e      	cmp	r3, #46	; 0x2e
 800ddda:	d10c      	bne.n	800ddf6 <_vfiprintf_r+0x176>
 800dddc:	7863      	ldrb	r3, [r4, #1]
 800ddde:	2b2a      	cmp	r3, #42	; 0x2a
 800dde0:	d135      	bne.n	800de4e <_vfiprintf_r+0x1ce>
 800dde2:	9b03      	ldr	r3, [sp, #12]
 800dde4:	3402      	adds	r4, #2
 800dde6:	1d1a      	adds	r2, r3, #4
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	9203      	str	r2, [sp, #12]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	bfb8      	it	lt
 800ddf0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddf4:	9305      	str	r3, [sp, #20]
 800ddf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dedc <_vfiprintf_r+0x25c>
 800ddfa:	2203      	movs	r2, #3
 800ddfc:	4650      	mov	r0, sl
 800ddfe:	7821      	ldrb	r1, [r4, #0]
 800de00:	f7ff fa10 	bl	800d224 <memchr>
 800de04:	b140      	cbz	r0, 800de18 <_vfiprintf_r+0x198>
 800de06:	2340      	movs	r3, #64	; 0x40
 800de08:	eba0 000a 	sub.w	r0, r0, sl
 800de0c:	fa03 f000 	lsl.w	r0, r3, r0
 800de10:	9b04      	ldr	r3, [sp, #16]
 800de12:	3401      	adds	r4, #1
 800de14:	4303      	orrs	r3, r0
 800de16:	9304      	str	r3, [sp, #16]
 800de18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de1c:	2206      	movs	r2, #6
 800de1e:	482c      	ldr	r0, [pc, #176]	; (800ded0 <_vfiprintf_r+0x250>)
 800de20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de24:	f7ff f9fe 	bl	800d224 <memchr>
 800de28:	2800      	cmp	r0, #0
 800de2a:	d03f      	beq.n	800deac <_vfiprintf_r+0x22c>
 800de2c:	4b29      	ldr	r3, [pc, #164]	; (800ded4 <_vfiprintf_r+0x254>)
 800de2e:	bb1b      	cbnz	r3, 800de78 <_vfiprintf_r+0x1f8>
 800de30:	9b03      	ldr	r3, [sp, #12]
 800de32:	3307      	adds	r3, #7
 800de34:	f023 0307 	bic.w	r3, r3, #7
 800de38:	3308      	adds	r3, #8
 800de3a:	9303      	str	r3, [sp, #12]
 800de3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de3e:	443b      	add	r3, r7
 800de40:	9309      	str	r3, [sp, #36]	; 0x24
 800de42:	e767      	b.n	800dd14 <_vfiprintf_r+0x94>
 800de44:	460c      	mov	r4, r1
 800de46:	2001      	movs	r0, #1
 800de48:	fb0c 3202 	mla	r2, ip, r2, r3
 800de4c:	e7a5      	b.n	800dd9a <_vfiprintf_r+0x11a>
 800de4e:	2300      	movs	r3, #0
 800de50:	f04f 0c0a 	mov.w	ip, #10
 800de54:	4619      	mov	r1, r3
 800de56:	3401      	adds	r4, #1
 800de58:	9305      	str	r3, [sp, #20]
 800de5a:	4620      	mov	r0, r4
 800de5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de60:	3a30      	subs	r2, #48	; 0x30
 800de62:	2a09      	cmp	r2, #9
 800de64:	d903      	bls.n	800de6e <_vfiprintf_r+0x1ee>
 800de66:	2b00      	cmp	r3, #0
 800de68:	d0c5      	beq.n	800ddf6 <_vfiprintf_r+0x176>
 800de6a:	9105      	str	r1, [sp, #20]
 800de6c:	e7c3      	b.n	800ddf6 <_vfiprintf_r+0x176>
 800de6e:	4604      	mov	r4, r0
 800de70:	2301      	movs	r3, #1
 800de72:	fb0c 2101 	mla	r1, ip, r1, r2
 800de76:	e7f0      	b.n	800de5a <_vfiprintf_r+0x1da>
 800de78:	ab03      	add	r3, sp, #12
 800de7a:	9300      	str	r3, [sp, #0]
 800de7c:	462a      	mov	r2, r5
 800de7e:	4630      	mov	r0, r6
 800de80:	4b15      	ldr	r3, [pc, #84]	; (800ded8 <_vfiprintf_r+0x258>)
 800de82:	a904      	add	r1, sp, #16
 800de84:	f7fd fbee 	bl	800b664 <_printf_float>
 800de88:	4607      	mov	r7, r0
 800de8a:	1c78      	adds	r0, r7, #1
 800de8c:	d1d6      	bne.n	800de3c <_vfiprintf_r+0x1bc>
 800de8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de90:	07d9      	lsls	r1, r3, #31
 800de92:	d405      	bmi.n	800dea0 <_vfiprintf_r+0x220>
 800de94:	89ab      	ldrh	r3, [r5, #12]
 800de96:	059a      	lsls	r2, r3, #22
 800de98:	d402      	bmi.n	800dea0 <_vfiprintf_r+0x220>
 800de9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de9c:	f7ff f95c 	bl	800d158 <__retarget_lock_release_recursive>
 800dea0:	89ab      	ldrh	r3, [r5, #12]
 800dea2:	065b      	lsls	r3, r3, #25
 800dea4:	f53f af12 	bmi.w	800dccc <_vfiprintf_r+0x4c>
 800dea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deaa:	e711      	b.n	800dcd0 <_vfiprintf_r+0x50>
 800deac:	ab03      	add	r3, sp, #12
 800deae:	9300      	str	r3, [sp, #0]
 800deb0:	462a      	mov	r2, r5
 800deb2:	4630      	mov	r0, r6
 800deb4:	4b08      	ldr	r3, [pc, #32]	; (800ded8 <_vfiprintf_r+0x258>)
 800deb6:	a904      	add	r1, sp, #16
 800deb8:	f7fd fe70 	bl	800bb9c <_printf_i>
 800debc:	e7e4      	b.n	800de88 <_vfiprintf_r+0x208>
 800debe:	bf00      	nop
 800dec0:	0800fc90 	.word	0x0800fc90
 800dec4:	0800fcb0 	.word	0x0800fcb0
 800dec8:	0800fc70 	.word	0x0800fc70
 800decc:	0800fe2c 	.word	0x0800fe2c
 800ded0:	0800fe36 	.word	0x0800fe36
 800ded4:	0800b665 	.word	0x0800b665
 800ded8:	0800dc5b 	.word	0x0800dc5b
 800dedc:	0800fe32 	.word	0x0800fe32

0800dee0 <__sread>:
 800dee0:	b510      	push	{r4, lr}
 800dee2:	460c      	mov	r4, r1
 800dee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dee8:	f000 f916 	bl	800e118 <_read_r>
 800deec:	2800      	cmp	r0, #0
 800deee:	bfab      	itete	ge
 800def0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800def2:	89a3      	ldrhlt	r3, [r4, #12]
 800def4:	181b      	addge	r3, r3, r0
 800def6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800defa:	bfac      	ite	ge
 800defc:	6563      	strge	r3, [r4, #84]	; 0x54
 800defe:	81a3      	strhlt	r3, [r4, #12]
 800df00:	bd10      	pop	{r4, pc}

0800df02 <__swrite>:
 800df02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df06:	461f      	mov	r7, r3
 800df08:	898b      	ldrh	r3, [r1, #12]
 800df0a:	4605      	mov	r5, r0
 800df0c:	05db      	lsls	r3, r3, #23
 800df0e:	460c      	mov	r4, r1
 800df10:	4616      	mov	r6, r2
 800df12:	d505      	bpl.n	800df20 <__swrite+0x1e>
 800df14:	2302      	movs	r3, #2
 800df16:	2200      	movs	r2, #0
 800df18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df1c:	f000 f898 	bl	800e050 <_lseek_r>
 800df20:	89a3      	ldrh	r3, [r4, #12]
 800df22:	4632      	mov	r2, r6
 800df24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df28:	81a3      	strh	r3, [r4, #12]
 800df2a:	4628      	mov	r0, r5
 800df2c:	463b      	mov	r3, r7
 800df2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df36:	f000 b817 	b.w	800df68 <_write_r>

0800df3a <__sseek>:
 800df3a:	b510      	push	{r4, lr}
 800df3c:	460c      	mov	r4, r1
 800df3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df42:	f000 f885 	bl	800e050 <_lseek_r>
 800df46:	1c43      	adds	r3, r0, #1
 800df48:	89a3      	ldrh	r3, [r4, #12]
 800df4a:	bf15      	itete	ne
 800df4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800df4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df56:	81a3      	strheq	r3, [r4, #12]
 800df58:	bf18      	it	ne
 800df5a:	81a3      	strhne	r3, [r4, #12]
 800df5c:	bd10      	pop	{r4, pc}

0800df5e <__sclose>:
 800df5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df62:	f000 b831 	b.w	800dfc8 <_close_r>
	...

0800df68 <_write_r>:
 800df68:	b538      	push	{r3, r4, r5, lr}
 800df6a:	4604      	mov	r4, r0
 800df6c:	4608      	mov	r0, r1
 800df6e:	4611      	mov	r1, r2
 800df70:	2200      	movs	r2, #0
 800df72:	4d05      	ldr	r5, [pc, #20]	; (800df88 <_write_r+0x20>)
 800df74:	602a      	str	r2, [r5, #0]
 800df76:	461a      	mov	r2, r3
 800df78:	f7f8 fe8e 	bl	8006c98 <_write>
 800df7c:	1c43      	adds	r3, r0, #1
 800df7e:	d102      	bne.n	800df86 <_write_r+0x1e>
 800df80:	682b      	ldr	r3, [r5, #0]
 800df82:	b103      	cbz	r3, 800df86 <_write_r+0x1e>
 800df84:	6023      	str	r3, [r4, #0]
 800df86:	bd38      	pop	{r3, r4, r5, pc}
 800df88:	20000554 	.word	0x20000554

0800df8c <__assert_func>:
 800df8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df8e:	4614      	mov	r4, r2
 800df90:	461a      	mov	r2, r3
 800df92:	4b09      	ldr	r3, [pc, #36]	; (800dfb8 <__assert_func+0x2c>)
 800df94:	4605      	mov	r5, r0
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	68d8      	ldr	r0, [r3, #12]
 800df9a:	b14c      	cbz	r4, 800dfb0 <__assert_func+0x24>
 800df9c:	4b07      	ldr	r3, [pc, #28]	; (800dfbc <__assert_func+0x30>)
 800df9e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dfa2:	9100      	str	r1, [sp, #0]
 800dfa4:	462b      	mov	r3, r5
 800dfa6:	4906      	ldr	r1, [pc, #24]	; (800dfc0 <__assert_func+0x34>)
 800dfa8:	f000 f81e 	bl	800dfe8 <fiprintf>
 800dfac:	f000 f8d3 	bl	800e156 <abort>
 800dfb0:	4b04      	ldr	r3, [pc, #16]	; (800dfc4 <__assert_func+0x38>)
 800dfb2:	461c      	mov	r4, r3
 800dfb4:	e7f3      	b.n	800df9e <__assert_func+0x12>
 800dfb6:	bf00      	nop
 800dfb8:	2000001c 	.word	0x2000001c
 800dfbc:	0800fe3d 	.word	0x0800fe3d
 800dfc0:	0800fe4a 	.word	0x0800fe4a
 800dfc4:	0800fe78 	.word	0x0800fe78

0800dfc8 <_close_r>:
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	2300      	movs	r3, #0
 800dfcc:	4d05      	ldr	r5, [pc, #20]	; (800dfe4 <_close_r+0x1c>)
 800dfce:	4604      	mov	r4, r0
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	602b      	str	r3, [r5, #0]
 800dfd4:	f7f8 fe7c 	bl	8006cd0 <_close>
 800dfd8:	1c43      	adds	r3, r0, #1
 800dfda:	d102      	bne.n	800dfe2 <_close_r+0x1a>
 800dfdc:	682b      	ldr	r3, [r5, #0]
 800dfde:	b103      	cbz	r3, 800dfe2 <_close_r+0x1a>
 800dfe0:	6023      	str	r3, [r4, #0]
 800dfe2:	bd38      	pop	{r3, r4, r5, pc}
 800dfe4:	20000554 	.word	0x20000554

0800dfe8 <fiprintf>:
 800dfe8:	b40e      	push	{r1, r2, r3}
 800dfea:	b503      	push	{r0, r1, lr}
 800dfec:	4601      	mov	r1, r0
 800dfee:	ab03      	add	r3, sp, #12
 800dff0:	4805      	ldr	r0, [pc, #20]	; (800e008 <fiprintf+0x20>)
 800dff2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dff6:	6800      	ldr	r0, [r0, #0]
 800dff8:	9301      	str	r3, [sp, #4]
 800dffa:	f7ff fe41 	bl	800dc80 <_vfiprintf_r>
 800dffe:	b002      	add	sp, #8
 800e000:	f85d eb04 	ldr.w	lr, [sp], #4
 800e004:	b003      	add	sp, #12
 800e006:	4770      	bx	lr
 800e008:	2000001c 	.word	0x2000001c

0800e00c <_fstat_r>:
 800e00c:	b538      	push	{r3, r4, r5, lr}
 800e00e:	2300      	movs	r3, #0
 800e010:	4d06      	ldr	r5, [pc, #24]	; (800e02c <_fstat_r+0x20>)
 800e012:	4604      	mov	r4, r0
 800e014:	4608      	mov	r0, r1
 800e016:	4611      	mov	r1, r2
 800e018:	602b      	str	r3, [r5, #0]
 800e01a:	f7f8 fe64 	bl	8006ce6 <_fstat>
 800e01e:	1c43      	adds	r3, r0, #1
 800e020:	d102      	bne.n	800e028 <_fstat_r+0x1c>
 800e022:	682b      	ldr	r3, [r5, #0]
 800e024:	b103      	cbz	r3, 800e028 <_fstat_r+0x1c>
 800e026:	6023      	str	r3, [r4, #0]
 800e028:	bd38      	pop	{r3, r4, r5, pc}
 800e02a:	bf00      	nop
 800e02c:	20000554 	.word	0x20000554

0800e030 <_isatty_r>:
 800e030:	b538      	push	{r3, r4, r5, lr}
 800e032:	2300      	movs	r3, #0
 800e034:	4d05      	ldr	r5, [pc, #20]	; (800e04c <_isatty_r+0x1c>)
 800e036:	4604      	mov	r4, r0
 800e038:	4608      	mov	r0, r1
 800e03a:	602b      	str	r3, [r5, #0]
 800e03c:	f7f8 fe62 	bl	8006d04 <_isatty>
 800e040:	1c43      	adds	r3, r0, #1
 800e042:	d102      	bne.n	800e04a <_isatty_r+0x1a>
 800e044:	682b      	ldr	r3, [r5, #0]
 800e046:	b103      	cbz	r3, 800e04a <_isatty_r+0x1a>
 800e048:	6023      	str	r3, [r4, #0]
 800e04a:	bd38      	pop	{r3, r4, r5, pc}
 800e04c:	20000554 	.word	0x20000554

0800e050 <_lseek_r>:
 800e050:	b538      	push	{r3, r4, r5, lr}
 800e052:	4604      	mov	r4, r0
 800e054:	4608      	mov	r0, r1
 800e056:	4611      	mov	r1, r2
 800e058:	2200      	movs	r2, #0
 800e05a:	4d05      	ldr	r5, [pc, #20]	; (800e070 <_lseek_r+0x20>)
 800e05c:	602a      	str	r2, [r5, #0]
 800e05e:	461a      	mov	r2, r3
 800e060:	f7f8 fe5a 	bl	8006d18 <_lseek>
 800e064:	1c43      	adds	r3, r0, #1
 800e066:	d102      	bne.n	800e06e <_lseek_r+0x1e>
 800e068:	682b      	ldr	r3, [r5, #0]
 800e06a:	b103      	cbz	r3, 800e06e <_lseek_r+0x1e>
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	bd38      	pop	{r3, r4, r5, pc}
 800e070:	20000554 	.word	0x20000554

0800e074 <__ascii_mbtowc>:
 800e074:	b082      	sub	sp, #8
 800e076:	b901      	cbnz	r1, 800e07a <__ascii_mbtowc+0x6>
 800e078:	a901      	add	r1, sp, #4
 800e07a:	b142      	cbz	r2, 800e08e <__ascii_mbtowc+0x1a>
 800e07c:	b14b      	cbz	r3, 800e092 <__ascii_mbtowc+0x1e>
 800e07e:	7813      	ldrb	r3, [r2, #0]
 800e080:	600b      	str	r3, [r1, #0]
 800e082:	7812      	ldrb	r2, [r2, #0]
 800e084:	1e10      	subs	r0, r2, #0
 800e086:	bf18      	it	ne
 800e088:	2001      	movne	r0, #1
 800e08a:	b002      	add	sp, #8
 800e08c:	4770      	bx	lr
 800e08e:	4610      	mov	r0, r2
 800e090:	e7fb      	b.n	800e08a <__ascii_mbtowc+0x16>
 800e092:	f06f 0001 	mvn.w	r0, #1
 800e096:	e7f8      	b.n	800e08a <__ascii_mbtowc+0x16>

0800e098 <memmove>:
 800e098:	4288      	cmp	r0, r1
 800e09a:	b510      	push	{r4, lr}
 800e09c:	eb01 0402 	add.w	r4, r1, r2
 800e0a0:	d902      	bls.n	800e0a8 <memmove+0x10>
 800e0a2:	4284      	cmp	r4, r0
 800e0a4:	4623      	mov	r3, r4
 800e0a6:	d807      	bhi.n	800e0b8 <memmove+0x20>
 800e0a8:	1e43      	subs	r3, r0, #1
 800e0aa:	42a1      	cmp	r1, r4
 800e0ac:	d008      	beq.n	800e0c0 <memmove+0x28>
 800e0ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0b6:	e7f8      	b.n	800e0aa <memmove+0x12>
 800e0b8:	4601      	mov	r1, r0
 800e0ba:	4402      	add	r2, r0
 800e0bc:	428a      	cmp	r2, r1
 800e0be:	d100      	bne.n	800e0c2 <memmove+0x2a>
 800e0c0:	bd10      	pop	{r4, pc}
 800e0c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e0c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e0ca:	e7f7      	b.n	800e0bc <memmove+0x24>

0800e0cc <_realloc_r>:
 800e0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ce:	4607      	mov	r7, r0
 800e0d0:	4614      	mov	r4, r2
 800e0d2:	460e      	mov	r6, r1
 800e0d4:	b921      	cbnz	r1, 800e0e0 <_realloc_r+0x14>
 800e0d6:	4611      	mov	r1, r2
 800e0d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e0dc:	f7fd b9ca 	b.w	800b474 <_malloc_r>
 800e0e0:	b922      	cbnz	r2, 800e0ec <_realloc_r+0x20>
 800e0e2:	f7fd f97b 	bl	800b3dc <_free_r>
 800e0e6:	4625      	mov	r5, r4
 800e0e8:	4628      	mov	r0, r5
 800e0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0ec:	f000 f83a 	bl	800e164 <_malloc_usable_size_r>
 800e0f0:	42a0      	cmp	r0, r4
 800e0f2:	d20f      	bcs.n	800e114 <_realloc_r+0x48>
 800e0f4:	4621      	mov	r1, r4
 800e0f6:	4638      	mov	r0, r7
 800e0f8:	f7fd f9bc 	bl	800b474 <_malloc_r>
 800e0fc:	4605      	mov	r5, r0
 800e0fe:	2800      	cmp	r0, #0
 800e100:	d0f2      	beq.n	800e0e8 <_realloc_r+0x1c>
 800e102:	4631      	mov	r1, r6
 800e104:	4622      	mov	r2, r4
 800e106:	f7fd f953 	bl	800b3b0 <memcpy>
 800e10a:	4631      	mov	r1, r6
 800e10c:	4638      	mov	r0, r7
 800e10e:	f7fd f965 	bl	800b3dc <_free_r>
 800e112:	e7e9      	b.n	800e0e8 <_realloc_r+0x1c>
 800e114:	4635      	mov	r5, r6
 800e116:	e7e7      	b.n	800e0e8 <_realloc_r+0x1c>

0800e118 <_read_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	4604      	mov	r4, r0
 800e11c:	4608      	mov	r0, r1
 800e11e:	4611      	mov	r1, r2
 800e120:	2200      	movs	r2, #0
 800e122:	4d05      	ldr	r5, [pc, #20]	; (800e138 <_read_r+0x20>)
 800e124:	602a      	str	r2, [r5, #0]
 800e126:	461a      	mov	r2, r3
 800e128:	f7f8 fd99 	bl	8006c5e <_read>
 800e12c:	1c43      	adds	r3, r0, #1
 800e12e:	d102      	bne.n	800e136 <_read_r+0x1e>
 800e130:	682b      	ldr	r3, [r5, #0]
 800e132:	b103      	cbz	r3, 800e136 <_read_r+0x1e>
 800e134:	6023      	str	r3, [r4, #0]
 800e136:	bd38      	pop	{r3, r4, r5, pc}
 800e138:	20000554 	.word	0x20000554

0800e13c <__ascii_wctomb>:
 800e13c:	4603      	mov	r3, r0
 800e13e:	4608      	mov	r0, r1
 800e140:	b141      	cbz	r1, 800e154 <__ascii_wctomb+0x18>
 800e142:	2aff      	cmp	r2, #255	; 0xff
 800e144:	d904      	bls.n	800e150 <__ascii_wctomb+0x14>
 800e146:	228a      	movs	r2, #138	; 0x8a
 800e148:	f04f 30ff 	mov.w	r0, #4294967295
 800e14c:	601a      	str	r2, [r3, #0]
 800e14e:	4770      	bx	lr
 800e150:	2001      	movs	r0, #1
 800e152:	700a      	strb	r2, [r1, #0]
 800e154:	4770      	bx	lr

0800e156 <abort>:
 800e156:	2006      	movs	r0, #6
 800e158:	b508      	push	{r3, lr}
 800e15a:	f000 f833 	bl	800e1c4 <raise>
 800e15e:	2001      	movs	r0, #1
 800e160:	f7f8 fd73 	bl	8006c4a <_exit>

0800e164 <_malloc_usable_size_r>:
 800e164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e168:	1f18      	subs	r0, r3, #4
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	bfbc      	itt	lt
 800e16e:	580b      	ldrlt	r3, [r1, r0]
 800e170:	18c0      	addlt	r0, r0, r3
 800e172:	4770      	bx	lr

0800e174 <_raise_r>:
 800e174:	291f      	cmp	r1, #31
 800e176:	b538      	push	{r3, r4, r5, lr}
 800e178:	4604      	mov	r4, r0
 800e17a:	460d      	mov	r5, r1
 800e17c:	d904      	bls.n	800e188 <_raise_r+0x14>
 800e17e:	2316      	movs	r3, #22
 800e180:	6003      	str	r3, [r0, #0]
 800e182:	f04f 30ff 	mov.w	r0, #4294967295
 800e186:	bd38      	pop	{r3, r4, r5, pc}
 800e188:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e18a:	b112      	cbz	r2, 800e192 <_raise_r+0x1e>
 800e18c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e190:	b94b      	cbnz	r3, 800e1a6 <_raise_r+0x32>
 800e192:	4620      	mov	r0, r4
 800e194:	f000 f830 	bl	800e1f8 <_getpid_r>
 800e198:	462a      	mov	r2, r5
 800e19a:	4601      	mov	r1, r0
 800e19c:	4620      	mov	r0, r4
 800e19e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1a2:	f000 b817 	b.w	800e1d4 <_kill_r>
 800e1a6:	2b01      	cmp	r3, #1
 800e1a8:	d00a      	beq.n	800e1c0 <_raise_r+0x4c>
 800e1aa:	1c59      	adds	r1, r3, #1
 800e1ac:	d103      	bne.n	800e1b6 <_raise_r+0x42>
 800e1ae:	2316      	movs	r3, #22
 800e1b0:	6003      	str	r3, [r0, #0]
 800e1b2:	2001      	movs	r0, #1
 800e1b4:	e7e7      	b.n	800e186 <_raise_r+0x12>
 800e1b6:	2400      	movs	r4, #0
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e1be:	4798      	blx	r3
 800e1c0:	2000      	movs	r0, #0
 800e1c2:	e7e0      	b.n	800e186 <_raise_r+0x12>

0800e1c4 <raise>:
 800e1c4:	4b02      	ldr	r3, [pc, #8]	; (800e1d0 <raise+0xc>)
 800e1c6:	4601      	mov	r1, r0
 800e1c8:	6818      	ldr	r0, [r3, #0]
 800e1ca:	f7ff bfd3 	b.w	800e174 <_raise_r>
 800e1ce:	bf00      	nop
 800e1d0:	2000001c 	.word	0x2000001c

0800e1d4 <_kill_r>:
 800e1d4:	b538      	push	{r3, r4, r5, lr}
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	4d06      	ldr	r5, [pc, #24]	; (800e1f4 <_kill_r+0x20>)
 800e1da:	4604      	mov	r4, r0
 800e1dc:	4608      	mov	r0, r1
 800e1de:	4611      	mov	r1, r2
 800e1e0:	602b      	str	r3, [r5, #0]
 800e1e2:	f7f8 fd22 	bl	8006c2a <_kill>
 800e1e6:	1c43      	adds	r3, r0, #1
 800e1e8:	d102      	bne.n	800e1f0 <_kill_r+0x1c>
 800e1ea:	682b      	ldr	r3, [r5, #0]
 800e1ec:	b103      	cbz	r3, 800e1f0 <_kill_r+0x1c>
 800e1ee:	6023      	str	r3, [r4, #0]
 800e1f0:	bd38      	pop	{r3, r4, r5, pc}
 800e1f2:	bf00      	nop
 800e1f4:	20000554 	.word	0x20000554

0800e1f8 <_getpid_r>:
 800e1f8:	f7f8 bd10 	b.w	8006c1c <_getpid>

0800e1fc <_init>:
 800e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fe:	bf00      	nop
 800e200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e202:	bc08      	pop	{r3}
 800e204:	469e      	mov	lr, r3
 800e206:	4770      	bx	lr

0800e208 <_fini>:
 800e208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e20a:	bf00      	nop
 800e20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e20e:	bc08      	pop	{r3}
 800e210:	469e      	mov	lr, r3
 800e212:	4770      	bx	lr
