
DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a50  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001c34  08001c34  00011c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c5c  08001c5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001c5c  08001c5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c5c  08001c5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c5c  08001c5c  00011c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c60  08001c60  00011c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08001c70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001c70  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000603b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000169b  00000000  00000000  00026070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000670  00000000  00000000  00027710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  00027d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000013ea  00000000  00000000  00028328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a22  00000000  00000000  00029712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c070  00000000  00000000  00031134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000bd1a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001810  00000000  00000000  000bd1f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08001c1c 	.word	0x08001c1c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08001c1c 	.word	0x08001c1c

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0308 	add.w	r3, r7, #8
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000238:	4b13      	ldr	r3, [pc, #76]	; (8000288 <MX_GPIO_Init+0x64>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a12      	ldr	r2, [pc, #72]	; (8000288 <MX_GPIO_Init+0x64>)
 800023e:	f043 0310 	orr.w	r3, r3, #16
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <MX_GPIO_Init+0x64>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0310 	and.w	r3, r3, #16
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <MX_GPIO_Init+0x64>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a0c      	ldr	r2, [pc, #48]	; (8000288 <MX_GPIO_Init+0x64>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <MX_GPIO_Init+0x64>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0304 	and.w	r3, r3, #4
 8000264:	603b      	str	r3, [r7, #0]
 8000266:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 8000268:	2320      	movs	r3, #32
 800026a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800026c:	2300      	movs	r3, #0
 800026e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000270:	2301      	movs	r3, #1
 8000272:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8000274:	f107 0308 	add.w	r3, r7, #8
 8000278:	4619      	mov	r1, r3
 800027a:	4804      	ldr	r0, [pc, #16]	; (800028c <MX_GPIO_Init+0x68>)
 800027c:	f000 fbe4 	bl	8000a48 <HAL_GPIO_Init>

}
 8000280:	bf00      	nop
 8000282:	3718      	adds	r7, #24
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	40021000 	.word	0x40021000
 800028c:	40011000 	.word	0x40011000

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 f960 	bl	8000558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f805 	bl	80002a6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f7ff ffc2 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002a0:	f000 f8b6 	bl	8000410 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <main+0x14>

080002a6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b090      	sub	sp, #64	; 0x40
 80002aa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	2228      	movs	r2, #40	; 0x28
 80002b2:	2100      	movs	r1, #0
 80002b4:	4618      	mov	r0, r3
 80002b6:	f001 fca9 	bl	8001c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
 80002c0:	605a      	str	r2, [r3, #4]
 80002c2:	609a      	str	r2, [r3, #8]
 80002c4:	60da      	str	r2, [r3, #12]
 80002c6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c8:	2301      	movs	r3, #1
 80002ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d6:	2301      	movs	r3, #1
 80002d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002da:	2302      	movs	r3, #2
 80002dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0318 	add.w	r3, r7, #24
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fd3e 	bl	8000d70 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002fa:	f000 f819 	bl	8000330 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000302:	2302      	movs	r3, #2
 8000304:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800030a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	2102      	movs	r1, #2
 8000318:	4618      	mov	r0, r3
 800031a:	f000 ffa9 	bl	8001270 <HAL_RCC_ClockConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000324:	f000 f804 	bl	8000330 <Error_Handler>
  }
}
 8000328:	bf00      	nop
 800032a:	3740      	adds	r7, #64	; 0x40
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000334:	b672      	cpsid	i
}
 8000336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000338:	e7fe      	b.n	8000338 <Error_Handler+0x8>
	...

0800033c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000342:	4b15      	ldr	r3, [pc, #84]	; (8000398 <HAL_MspInit+0x5c>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a14      	ldr	r2, [pc, #80]	; (8000398 <HAL_MspInit+0x5c>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b12      	ldr	r3, [pc, #72]	; (8000398 <HAL_MspInit+0x5c>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035a:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <HAL_MspInit+0x5c>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	4a0e      	ldr	r2, [pc, #56]	; (8000398 <HAL_MspInit+0x5c>)
 8000360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000364:	61d3      	str	r3, [r2, #28]
 8000366:	4b0c      	ldr	r3, [pc, #48]	; (8000398 <HAL_MspInit+0x5c>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000372:	4b0a      	ldr	r3, [pc, #40]	; (800039c <HAL_MspInit+0x60>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	4a04      	ldr	r2, [pc, #16]	; (800039c <HAL_MspInit+0x60>)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	40021000 	.word	0x40021000
 800039c:	40010000 	.word	0x40010000

080003a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <NMI_Handler+0x4>

080003a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003aa:	e7fe      	b.n	80003aa <HardFault_Handler+0x4>

080003ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <MemManage_Handler+0x4>

080003b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <BusFault_Handler+0x4>

080003b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003bc:	e7fe      	b.n	80003bc <UsageFault_Handler+0x4>

080003be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr

080003ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr

080003d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	bc80      	pop	{r7}
 80003e0:	4770      	bx	lr

080003e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e2:	b580      	push	{r7, lr}
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e6:	f000 f8fd 	bl	80005e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80003f4:	4802      	ldr	r0, [pc, #8]	; (8000400 <USART1_IRQHandler+0x10>)
 80003f6:	f001 f923 	bl	8001640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	20000028 	.word	0x20000028

08000404 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000408:	bf00      	nop
 800040a:	46bd      	mov	sp, r7
 800040c:	bc80      	pop	{r7}
 800040e:	4770      	bx	lr

08000410 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000414:	4b11      	ldr	r3, [pc, #68]	; (800045c <MX_USART1_UART_Init+0x4c>)
 8000416:	4a12      	ldr	r2, [pc, #72]	; (8000460 <MX_USART1_UART_Init+0x50>)
 8000418:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800041a:	4b10      	ldr	r3, [pc, #64]	; (800045c <MX_USART1_UART_Init+0x4c>)
 800041c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000420:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000422:	4b0e      	ldr	r3, [pc, #56]	; (800045c <MX_USART1_UART_Init+0x4c>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000428:	4b0c      	ldr	r3, [pc, #48]	; (800045c <MX_USART1_UART_Init+0x4c>)
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800042e:	4b0b      	ldr	r3, [pc, #44]	; (800045c <MX_USART1_UART_Init+0x4c>)
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <MX_USART1_UART_Init+0x4c>)
 8000436:	220c      	movs	r2, #12
 8000438:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800043a:	4b08      	ldr	r3, [pc, #32]	; (800045c <MX_USART1_UART_Init+0x4c>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000440:	4b06      	ldr	r3, [pc, #24]	; (800045c <MX_USART1_UART_Init+0x4c>)
 8000442:	2200      	movs	r2, #0
 8000444:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_USART1_UART_Init+0x4c>)
 8000448:	f001 f8ac 	bl	80015a4 <HAL_UART_Init>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000452:	f7ff ff6d 	bl	8000330 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	20000028 	.word	0x20000028
 8000460:	40013800 	.word	0x40013800

08000464 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046c:	f107 0310 	add.w	r3, r7, #16
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a20      	ldr	r2, [pc, #128]	; (8000500 <HAL_UART_MspInit+0x9c>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d139      	bne.n	80004f8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000484:	4b1f      	ldr	r3, [pc, #124]	; (8000504 <HAL_UART_MspInit+0xa0>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	4a1e      	ldr	r2, [pc, #120]	; (8000504 <HAL_UART_MspInit+0xa0>)
 800048a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800048e:	6193      	str	r3, [r2, #24]
 8000490:	4b1c      	ldr	r3, [pc, #112]	; (8000504 <HAL_UART_MspInit+0xa0>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b19      	ldr	r3, [pc, #100]	; (8000504 <HAL_UART_MspInit+0xa0>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a18      	ldr	r2, [pc, #96]	; (8000504 <HAL_UART_MspInit+0xa0>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b16      	ldr	r3, [pc, #88]	; (8000504 <HAL_UART_MspInit+0xa0>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ba:	2302      	movs	r3, #2
 80004bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004be:	2303      	movs	r3, #3
 80004c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	4619      	mov	r1, r3
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <HAL_UART_MspInit+0xa4>)
 80004ca:	f000 fabd 	bl	8000a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004dc:	f107 0310 	add.w	r3, r7, #16
 80004e0:	4619      	mov	r1, r3
 80004e2:	4809      	ldr	r0, [pc, #36]	; (8000508 <HAL_UART_MspInit+0xa4>)
 80004e4:	f000 fab0 	bl	8000a48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2100      	movs	r1, #0
 80004ec:	2025      	movs	r0, #37	; 0x25
 80004ee:	f000 f96c 	bl	80007ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004f2:	2025      	movs	r0, #37	; 0x25
 80004f4:	f000 f985 	bl	8000802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80004f8:	bf00      	nop
 80004fa:	3720      	adds	r7, #32
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40013800 	.word	0x40013800
 8000504:	40021000 	.word	0x40021000
 8000508:	40010800 	.word	0x40010800

0800050c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800050c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800050e:	e003      	b.n	8000518 <LoopCopyDataInit>

08000510 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000512:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000514:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000516:	3104      	adds	r1, #4

08000518 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000518:	480a      	ldr	r0, [pc, #40]	; (8000544 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800051a:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800051c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800051e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000520:	d3f6      	bcc.n	8000510 <CopyDataInit>
  ldr r2, =_sbss
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000524:	e002      	b.n	800052c <LoopFillZerobss>

08000526 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000528:	f842 3b04 	str.w	r3, [r2], #4

0800052c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800052e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000530:	d3f9      	bcc.n	8000526 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000532:	f7ff ff67 	bl	8000404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000536:	f001 fb45 	bl	8001bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053a:	f7ff fea9 	bl	8000290 <main>
  bx lr
 800053e:	4770      	bx	lr
  ldr r3, =_sidata
 8000540:	08001c64 	.word	0x08001c64
  ldr r0, =_sdata
 8000544:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000548:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800054c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000550:	2000006c 	.word	0x2000006c

08000554 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000554:	e7fe      	b.n	8000554 <ADC1_2_IRQHandler>
	...

08000558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <HAL_Init+0x28>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a07      	ldr	r2, [pc, #28]	; (8000580 <HAL_Init+0x28>)
 8000562:	f043 0310 	orr.w	r3, r3, #16
 8000566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000568:	2003      	movs	r0, #3
 800056a:	f000 f923 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800056e:	2000      	movs	r0, #0
 8000570:	f000 f808 	bl	8000584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000574:	f7ff fee2 	bl	800033c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000578:	2300      	movs	r3, #0
}
 800057a:	4618      	mov	r0, r3
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40022000 	.word	0x40022000

08000584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_InitTick+0x54>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <HAL_InitTick+0x58>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	fbb3 f3f1 	udiv	r3, r3, r1
 800059e:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 f93b 	bl	800081e <HAL_SYSTICK_Config>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ae:	2301      	movs	r3, #1
 80005b0:	e00e      	b.n	80005d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b0f      	cmp	r3, #15
 80005b6:	d80a      	bhi.n	80005ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b8:	2200      	movs	r2, #0
 80005ba:	6879      	ldr	r1, [r7, #4]
 80005bc:	f04f 30ff 	mov.w	r0, #4294967295
 80005c0:	f000 f903 	bl	80007ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <HAL_InitTick+0x5c>)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ca:	2300      	movs	r3, #0
 80005cc:	e000      	b.n	80005d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000008 	.word	0x20000008
 80005e0:	20000004 	.word	0x20000004

080005e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <HAL_IncTick+0x1c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <HAL_IncTick+0x20>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <HAL_IncTick+0x20>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	20000008 	.word	0x20000008
 8000604:	20000068 	.word	0x20000068

08000608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return uwTick;
 800060c:	4b02      	ldr	r3, [pc, #8]	; (8000618 <HAL_GetTick+0x10>)
 800060e:	681b      	ldr	r3, [r3, #0]
}
 8000610:	4618      	mov	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	20000068 	.word	0x20000068

0800061c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000638:	4013      	ands	r3, r2
 800063a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064e:	4a04      	ldr	r2, [pc, #16]	; (8000660 <__NVIC_SetPriorityGrouping+0x44>)
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	60d3      	str	r3, [r2, #12]
}
 8000654:	bf00      	nop
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <__NVIC_GetPriorityGrouping+0x18>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	0a1b      	lsrs	r3, r3, #8
 800066e:	f003 0307 	and.w	r3, r3, #7
}
 8000672:	4618      	mov	r0, r3
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800068a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068e:	2b00      	cmp	r3, #0
 8000690:	db0b      	blt.n	80006aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 021f 	and.w	r2, r3, #31
 8000698:	4906      	ldr	r1, [pc, #24]	; (80006b4 <__NVIC_EnableIRQ+0x34>)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	095b      	lsrs	r3, r3, #5
 80006a0:	2001      	movs	r0, #1
 80006a2:	fa00 f202 	lsl.w	r2, r0, r2
 80006a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db0a      	blt.n	80006e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	; (8000704 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e0:	e00a      	b.n	80006f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4908      	ldr	r1, [pc, #32]	; (8000708 <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	0112      	lsls	r2, r2, #4
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	761a      	strb	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e100 	.word	0xe000e100
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	f04f 31ff 	mov.w	r1, #4294967295
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43d9      	mvns	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000780:	d301      	bcc.n	8000786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000782:	2301      	movs	r3, #1
 8000784:	e00f      	b.n	80007a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <SysTick_Config+0x40>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078e:	210f      	movs	r1, #15
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f7ff ff90 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <SysTick_Config+0x40>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <SysTick_Config+0x40>)
 80007a0:	2207      	movs	r2, #7
 80007a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff2d 	bl	800061c <__NVIC_SetPriorityGrouping>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007dc:	f7ff ff42 	bl	8000664 <__NVIC_GetPriorityGrouping>
 80007e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f7ff ff90 	bl	800070c <NVIC_EncodePriority>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff5f 	bl	80006b8 <__NVIC_SetPriority>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff35 	bl	8000680 <__NVIC_EnableIRQ>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ffa2 	bl	8000770 <SysTick_Config>
 800082c:	4603      	mov	r3, r0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800084a:	2b02      	cmp	r3, #2
 800084c:	d005      	beq.n	800085a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	2204      	movs	r2, #4
 8000852:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000854:	2301      	movs	r3, #1
 8000856:	73fb      	strb	r3, [r7, #15]
 8000858:	e0d6      	b.n	8000a08 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f022 020e 	bic.w	r2, r2, #14
 8000868:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f022 0201 	bic.w	r2, r2, #1
 8000878:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	4b64      	ldr	r3, [pc, #400]	; (8000a14 <HAL_DMA_Abort_IT+0x1dc>)
 8000882:	429a      	cmp	r2, r3
 8000884:	d958      	bls.n	8000938 <HAL_DMA_Abort_IT+0x100>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a63      	ldr	r2, [pc, #396]	; (8000a18 <HAL_DMA_Abort_IT+0x1e0>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d04f      	beq.n	8000930 <HAL_DMA_Abort_IT+0xf8>
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a61      	ldr	r2, [pc, #388]	; (8000a1c <HAL_DMA_Abort_IT+0x1e4>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d048      	beq.n	800092c <HAL_DMA_Abort_IT+0xf4>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a60      	ldr	r2, [pc, #384]	; (8000a20 <HAL_DMA_Abort_IT+0x1e8>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d040      	beq.n	8000926 <HAL_DMA_Abort_IT+0xee>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a5e      	ldr	r2, [pc, #376]	; (8000a24 <HAL_DMA_Abort_IT+0x1ec>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d038      	beq.n	8000920 <HAL_DMA_Abort_IT+0xe8>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a5d      	ldr	r2, [pc, #372]	; (8000a28 <HAL_DMA_Abort_IT+0x1f0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d030      	beq.n	800091a <HAL_DMA_Abort_IT+0xe2>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a5b      	ldr	r2, [pc, #364]	; (8000a2c <HAL_DMA_Abort_IT+0x1f4>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d028      	beq.n	8000914 <HAL_DMA_Abort_IT+0xdc>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a53      	ldr	r2, [pc, #332]	; (8000a14 <HAL_DMA_Abort_IT+0x1dc>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d020      	beq.n	800090e <HAL_DMA_Abort_IT+0xd6>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a57      	ldr	r2, [pc, #348]	; (8000a30 <HAL_DMA_Abort_IT+0x1f8>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d019      	beq.n	800090a <HAL_DMA_Abort_IT+0xd2>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a56      	ldr	r2, [pc, #344]	; (8000a34 <HAL_DMA_Abort_IT+0x1fc>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d012      	beq.n	8000906 <HAL_DMA_Abort_IT+0xce>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a54      	ldr	r2, [pc, #336]	; (8000a38 <HAL_DMA_Abort_IT+0x200>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d00a      	beq.n	8000900 <HAL_DMA_Abort_IT+0xc8>
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a53      	ldr	r2, [pc, #332]	; (8000a3c <HAL_DMA_Abort_IT+0x204>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d102      	bne.n	80008fa <HAL_DMA_Abort_IT+0xc2>
 80008f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f8:	e01b      	b.n	8000932 <HAL_DMA_Abort_IT+0xfa>
 80008fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fe:	e018      	b.n	8000932 <HAL_DMA_Abort_IT+0xfa>
 8000900:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000904:	e015      	b.n	8000932 <HAL_DMA_Abort_IT+0xfa>
 8000906:	2310      	movs	r3, #16
 8000908:	e013      	b.n	8000932 <HAL_DMA_Abort_IT+0xfa>
 800090a:	2301      	movs	r3, #1
 800090c:	e011      	b.n	8000932 <HAL_DMA_Abort_IT+0xfa>
 800090e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000912:	e00e      	b.n	8000932 <HAL_DMA_Abort_IT+0xfa>
 8000914:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000918:	e00b      	b.n	8000932 <HAL_DMA_Abort_IT+0xfa>
 800091a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091e:	e008      	b.n	8000932 <HAL_DMA_Abort_IT+0xfa>
 8000920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000924:	e005      	b.n	8000932 <HAL_DMA_Abort_IT+0xfa>
 8000926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800092a:	e002      	b.n	8000932 <HAL_DMA_Abort_IT+0xfa>
 800092c:	2310      	movs	r3, #16
 800092e:	e000      	b.n	8000932 <HAL_DMA_Abort_IT+0xfa>
 8000930:	2301      	movs	r3, #1
 8000932:	4a43      	ldr	r2, [pc, #268]	; (8000a40 <HAL_DMA_Abort_IT+0x208>)
 8000934:	6053      	str	r3, [r2, #4]
 8000936:	e057      	b.n	80009e8 <HAL_DMA_Abort_IT+0x1b0>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a36      	ldr	r2, [pc, #216]	; (8000a18 <HAL_DMA_Abort_IT+0x1e0>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d04f      	beq.n	80009e2 <HAL_DMA_Abort_IT+0x1aa>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a35      	ldr	r2, [pc, #212]	; (8000a1c <HAL_DMA_Abort_IT+0x1e4>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d048      	beq.n	80009de <HAL_DMA_Abort_IT+0x1a6>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a33      	ldr	r2, [pc, #204]	; (8000a20 <HAL_DMA_Abort_IT+0x1e8>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d040      	beq.n	80009d8 <HAL_DMA_Abort_IT+0x1a0>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a32      	ldr	r2, [pc, #200]	; (8000a24 <HAL_DMA_Abort_IT+0x1ec>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d038      	beq.n	80009d2 <HAL_DMA_Abort_IT+0x19a>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a30      	ldr	r2, [pc, #192]	; (8000a28 <HAL_DMA_Abort_IT+0x1f0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d030      	beq.n	80009cc <HAL_DMA_Abort_IT+0x194>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a2f      	ldr	r2, [pc, #188]	; (8000a2c <HAL_DMA_Abort_IT+0x1f4>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d028      	beq.n	80009c6 <HAL_DMA_Abort_IT+0x18e>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a26      	ldr	r2, [pc, #152]	; (8000a14 <HAL_DMA_Abort_IT+0x1dc>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d020      	beq.n	80009c0 <HAL_DMA_Abort_IT+0x188>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a2b      	ldr	r2, [pc, #172]	; (8000a30 <HAL_DMA_Abort_IT+0x1f8>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d019      	beq.n	80009bc <HAL_DMA_Abort_IT+0x184>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a29      	ldr	r2, [pc, #164]	; (8000a34 <HAL_DMA_Abort_IT+0x1fc>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d012      	beq.n	80009b8 <HAL_DMA_Abort_IT+0x180>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a28      	ldr	r2, [pc, #160]	; (8000a38 <HAL_DMA_Abort_IT+0x200>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d00a      	beq.n	80009b2 <HAL_DMA_Abort_IT+0x17a>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a26      	ldr	r2, [pc, #152]	; (8000a3c <HAL_DMA_Abort_IT+0x204>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d102      	bne.n	80009ac <HAL_DMA_Abort_IT+0x174>
 80009a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009aa:	e01b      	b.n	80009e4 <HAL_DMA_Abort_IT+0x1ac>
 80009ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009b0:	e018      	b.n	80009e4 <HAL_DMA_Abort_IT+0x1ac>
 80009b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b6:	e015      	b.n	80009e4 <HAL_DMA_Abort_IT+0x1ac>
 80009b8:	2310      	movs	r3, #16
 80009ba:	e013      	b.n	80009e4 <HAL_DMA_Abort_IT+0x1ac>
 80009bc:	2301      	movs	r3, #1
 80009be:	e011      	b.n	80009e4 <HAL_DMA_Abort_IT+0x1ac>
 80009c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009c4:	e00e      	b.n	80009e4 <HAL_DMA_Abort_IT+0x1ac>
 80009c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009ca:	e00b      	b.n	80009e4 <HAL_DMA_Abort_IT+0x1ac>
 80009cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d0:	e008      	b.n	80009e4 <HAL_DMA_Abort_IT+0x1ac>
 80009d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d6:	e005      	b.n	80009e4 <HAL_DMA_Abort_IT+0x1ac>
 80009d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009dc:	e002      	b.n	80009e4 <HAL_DMA_Abort_IT+0x1ac>
 80009de:	2310      	movs	r3, #16
 80009e0:	e000      	b.n	80009e4 <HAL_DMA_Abort_IT+0x1ac>
 80009e2:	2301      	movs	r3, #1
 80009e4:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <HAL_DMA_Abort_IT+0x20c>)
 80009e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2201      	movs	r2, #1
 80009ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d003      	beq.n	8000a08 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	4798      	blx	r3
    } 
  }
  return status;
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40020080 	.word	0x40020080
 8000a18:	40020008 	.word	0x40020008
 8000a1c:	4002001c 	.word	0x4002001c
 8000a20:	40020030 	.word	0x40020030
 8000a24:	40020044 	.word	0x40020044
 8000a28:	40020058 	.word	0x40020058
 8000a2c:	4002006c 	.word	0x4002006c
 8000a30:	40020408 	.word	0x40020408
 8000a34:	4002041c 	.word	0x4002041c
 8000a38:	40020430 	.word	0x40020430
 8000a3c:	40020444 	.word	0x40020444
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40020000 	.word	0x40020000

08000a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b08b      	sub	sp, #44	; 0x2c
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5a:	e179      	b.n	8000d50 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	f040 8168 	bne.w	8000d4a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4aa0      	ldr	r2, [pc, #640]	; (8000d00 <HAL_GPIO_Init+0x2b8>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d05e      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000a84:	4a9e      	ldr	r2, [pc, #632]	; (8000d00 <HAL_GPIO_Init+0x2b8>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d875      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000a8a:	4a9e      	ldr	r2, [pc, #632]	; (8000d04 <HAL_GPIO_Init+0x2bc>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d058      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000a90:	4a9c      	ldr	r2, [pc, #624]	; (8000d04 <HAL_GPIO_Init+0x2bc>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d86f      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000a96:	4a9c      	ldr	r2, [pc, #624]	; (8000d08 <HAL_GPIO_Init+0x2c0>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d052      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000a9c:	4a9a      	ldr	r2, [pc, #616]	; (8000d08 <HAL_GPIO_Init+0x2c0>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d869      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000aa2:	4a9a      	ldr	r2, [pc, #616]	; (8000d0c <HAL_GPIO_Init+0x2c4>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d04c      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000aa8:	4a98      	ldr	r2, [pc, #608]	; (8000d0c <HAL_GPIO_Init+0x2c4>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d863      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000aae:	4a98      	ldr	r2, [pc, #608]	; (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d046      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000ab4:	4a96      	ldr	r2, [pc, #600]	; (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d85d      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000aba:	2b12      	cmp	r3, #18
 8000abc:	d82a      	bhi.n	8000b14 <HAL_GPIO_Init+0xcc>
 8000abe:	2b12      	cmp	r3, #18
 8000ac0:	d859      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000ac2:	a201      	add	r2, pc, #4	; (adr r2, 8000ac8 <HAL_GPIO_Init+0x80>)
 8000ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac8:	08000b43 	.word	0x08000b43
 8000acc:	08000b1d 	.word	0x08000b1d
 8000ad0:	08000b2f 	.word	0x08000b2f
 8000ad4:	08000b71 	.word	0x08000b71
 8000ad8:	08000b77 	.word	0x08000b77
 8000adc:	08000b77 	.word	0x08000b77
 8000ae0:	08000b77 	.word	0x08000b77
 8000ae4:	08000b77 	.word	0x08000b77
 8000ae8:	08000b77 	.word	0x08000b77
 8000aec:	08000b77 	.word	0x08000b77
 8000af0:	08000b77 	.word	0x08000b77
 8000af4:	08000b77 	.word	0x08000b77
 8000af8:	08000b77 	.word	0x08000b77
 8000afc:	08000b77 	.word	0x08000b77
 8000b00:	08000b77 	.word	0x08000b77
 8000b04:	08000b77 	.word	0x08000b77
 8000b08:	08000b77 	.word	0x08000b77
 8000b0c:	08000b25 	.word	0x08000b25
 8000b10:	08000b39 	.word	0x08000b39
 8000b14:	4a7f      	ldr	r2, [pc, #508]	; (8000d14 <HAL_GPIO_Init+0x2cc>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d013      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b1a:	e02c      	b.n	8000b76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	623b      	str	r3, [r7, #32]
          break;
 8000b22:	e029      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	623b      	str	r3, [r7, #32]
          break;
 8000b2c:	e024      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	3308      	adds	r3, #8
 8000b34:	623b      	str	r3, [r7, #32]
          break;
 8000b36:	e01f      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	330c      	adds	r3, #12
 8000b3e:	623b      	str	r3, [r7, #32]
          break;
 8000b40:	e01a      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d102      	bne.n	8000b50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	623b      	str	r3, [r7, #32]
          break;
 8000b4e:	e013      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d105      	bne.n	8000b64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	69fa      	ldr	r2, [r7, #28]
 8000b60:	611a      	str	r2, [r3, #16]
          break;
 8000b62:	e009      	b.n	8000b78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b64:	2308      	movs	r3, #8
 8000b66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	615a      	str	r2, [r3, #20]
          break;
 8000b6e:	e003      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
          break;
 8000b74:	e000      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          break;
 8000b76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	2bff      	cmp	r3, #255	; 0xff
 8000b7c:	d801      	bhi.n	8000b82 <HAL_GPIO_Init+0x13a>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	e001      	b.n	8000b86 <HAL_GPIO_Init+0x13e>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3304      	adds	r3, #4
 8000b86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	2bff      	cmp	r3, #255	; 0xff
 8000b8c:	d802      	bhi.n	8000b94 <HAL_GPIO_Init+0x14c>
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	e002      	b.n	8000b9a <HAL_GPIO_Init+0x152>
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	3b08      	subs	r3, #8
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	401a      	ands	r2, r3
 8000bac:	6a39      	ldr	r1, [r7, #32]
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 80c1 	beq.w	8000d4a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc8:	4b53      	ldr	r3, [pc, #332]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a52      	ldr	r2, [pc, #328]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b50      	ldr	r3, [pc, #320]	; (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000be0:	4a4e      	ldr	r2, [pc, #312]	; (8000d1c <HAL_GPIO_Init+0x2d4>)
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	089b      	lsrs	r3, r3, #2
 8000be6:	3302      	adds	r3, #2
 8000be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	220f      	movs	r2, #15
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a46      	ldr	r2, [pc, #280]	; (8000d20 <HAL_GPIO_Init+0x2d8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d01f      	beq.n	8000c4c <HAL_GPIO_Init+0x204>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a45      	ldr	r2, [pc, #276]	; (8000d24 <HAL_GPIO_Init+0x2dc>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d019      	beq.n	8000c48 <HAL_GPIO_Init+0x200>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a44      	ldr	r2, [pc, #272]	; (8000d28 <HAL_GPIO_Init+0x2e0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d013      	beq.n	8000c44 <HAL_GPIO_Init+0x1fc>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a43      	ldr	r2, [pc, #268]	; (8000d2c <HAL_GPIO_Init+0x2e4>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d00d      	beq.n	8000c40 <HAL_GPIO_Init+0x1f8>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a42      	ldr	r2, [pc, #264]	; (8000d30 <HAL_GPIO_Init+0x2e8>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d007      	beq.n	8000c3c <HAL_GPIO_Init+0x1f4>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a41      	ldr	r2, [pc, #260]	; (8000d34 <HAL_GPIO_Init+0x2ec>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d101      	bne.n	8000c38 <HAL_GPIO_Init+0x1f0>
 8000c34:	2305      	movs	r3, #5
 8000c36:	e00a      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c38:	2306      	movs	r3, #6
 8000c3a:	e008      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e006      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c40:	2303      	movs	r3, #3
 8000c42:	e004      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c44:	2302      	movs	r3, #2
 8000c46:	e002      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e000      	b.n	8000c4e <HAL_GPIO_Init+0x206>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c50:	f002 0203 	and.w	r2, r2, #3
 8000c54:	0092      	lsls	r2, r2, #2
 8000c56:	4093      	lsls	r3, r2
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c5e:	492f      	ldr	r1, [pc, #188]	; (8000d1c <HAL_GPIO_Init+0x2d4>)
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	089b      	lsrs	r3, r3, #2
 8000c64:	3302      	adds	r3, #2
 8000c66:	68fa      	ldr	r2, [r7, #12]
 8000c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d006      	beq.n	8000c86 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c78:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	492e      	ldr	r1, [pc, #184]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	600b      	str	r3, [r1, #0]
 8000c84:	e006      	b.n	8000c94 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c86:	4b2c      	ldr	r3, [pc, #176]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	492a      	ldr	r1, [pc, #168]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000c90:	4013      	ands	r3, r2
 8000c92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d006      	beq.n	8000cae <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ca0:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000ca2:	685a      	ldr	r2, [r3, #4]
 8000ca4:	4924      	ldr	r1, [pc, #144]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	604b      	str	r3, [r1, #4]
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cae:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	43db      	mvns	r3, r3
 8000cb6:	4920      	ldr	r1, [pc, #128]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000cb8:	4013      	ands	r3, r2
 8000cba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d006      	beq.n	8000cd6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000cca:	689a      	ldr	r2, [r3, #8]
 8000ccc:	491a      	ldr	r1, [pc, #104]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	608b      	str	r3, [r1, #8]
 8000cd4:	e006      	b.n	8000ce4 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cd6:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	4916      	ldr	r1, [pc, #88]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d025      	beq.n	8000d3c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	4910      	ldr	r1, [pc, #64]	; (8000d38 <HAL_GPIO_Init+0x2f0>)
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	60cb      	str	r3, [r1, #12]
 8000cfc:	e025      	b.n	8000d4a <HAL_GPIO_Init+0x302>
 8000cfe:	bf00      	nop
 8000d00:	10320000 	.word	0x10320000
 8000d04:	10310000 	.word	0x10310000
 8000d08:	10220000 	.word	0x10220000
 8000d0c:	10210000 	.word	0x10210000
 8000d10:	10120000 	.word	0x10120000
 8000d14:	10110000 	.word	0x10110000
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	40010800 	.word	0x40010800
 8000d24:	40010c00 	.word	0x40010c00
 8000d28:	40011000 	.word	0x40011000
 8000d2c:	40011400 	.word	0x40011400
 8000d30:	40011800 	.word	0x40011800
 8000d34:	40011c00 	.word	0x40011c00
 8000d38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_GPIO_Init+0x324>)
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	43db      	mvns	r3, r3
 8000d44:	4909      	ldr	r1, [pc, #36]	; (8000d6c <HAL_GPIO_Init+0x324>)
 8000d46:	4013      	ands	r3, r2
 8000d48:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	fa22 f303 	lsr.w	r3, r2, r3
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f47f ae7e 	bne.w	8000a5c <HAL_GPIO_Init+0x14>
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	372c      	adds	r7, #44	; 0x2c
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	40010400 	.word	0x40010400

08000d70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e26c      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 8087 	beq.w	8000e9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d90:	4b92      	ldr	r3, [pc, #584]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 030c 	and.w	r3, r3, #12
 8000d98:	2b04      	cmp	r3, #4
 8000d9a:	d00c      	beq.n	8000db6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d9c:	4b8f      	ldr	r3, [pc, #572]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 030c 	and.w	r3, r3, #12
 8000da4:	2b08      	cmp	r3, #8
 8000da6:	d112      	bne.n	8000dce <HAL_RCC_OscConfig+0x5e>
 8000da8:	4b8c      	ldr	r3, [pc, #560]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db4:	d10b      	bne.n	8000dce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db6:	4b89      	ldr	r3, [pc, #548]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d06c      	beq.n	8000e9c <HAL_RCC_OscConfig+0x12c>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d168      	bne.n	8000e9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e246      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dd6:	d106      	bne.n	8000de6 <HAL_RCC_OscConfig+0x76>
 8000dd8:	4b80      	ldr	r3, [pc, #512]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a7f      	ldr	r2, [pc, #508]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000dde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	e02e      	b.n	8000e44 <HAL_RCC_OscConfig+0xd4>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d10c      	bne.n	8000e08 <HAL_RCC_OscConfig+0x98>
 8000dee:	4b7b      	ldr	r3, [pc, #492]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a7a      	ldr	r2, [pc, #488]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	4b78      	ldr	r3, [pc, #480]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a77      	ldr	r2, [pc, #476]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e01d      	b.n	8000e44 <HAL_RCC_OscConfig+0xd4>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0xbc>
 8000e12:	4b72      	ldr	r3, [pc, #456]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a71      	ldr	r2, [pc, #452]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b6f      	ldr	r3, [pc, #444]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a6e      	ldr	r2, [pc, #440]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e00b      	b.n	8000e44 <HAL_RCC_OscConfig+0xd4>
 8000e2c:	4b6b      	ldr	r3, [pc, #428]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a6a      	ldr	r2, [pc, #424]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b68      	ldr	r3, [pc, #416]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a67      	ldr	r2, [pc, #412]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d013      	beq.n	8000e74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fbdc 	bl	8000608 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e54:	f7ff fbd8 	bl	8000608 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b64      	cmp	r3, #100	; 0x64
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e1fa      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e66:	4b5d      	ldr	r3, [pc, #372]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f0      	beq.n	8000e54 <HAL_RCC_OscConfig+0xe4>
 8000e72:	e014      	b.n	8000e9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fbc8 	bl	8000608 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e7c:	f7ff fbc4 	bl	8000608 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b64      	cmp	r3, #100	; 0x64
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e1e6      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e8e:	4b53      	ldr	r3, [pc, #332]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f0      	bne.n	8000e7c <HAL_RCC_OscConfig+0x10c>
 8000e9a:	e000      	b.n	8000e9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d063      	beq.n	8000f72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eaa:	4b4c      	ldr	r3, [pc, #304]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f003 030c 	and.w	r3, r3, #12
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00b      	beq.n	8000ece <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	2b08      	cmp	r3, #8
 8000ec0:	d11c      	bne.n	8000efc <HAL_RCC_OscConfig+0x18c>
 8000ec2:	4b46      	ldr	r3, [pc, #280]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d116      	bne.n	8000efc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ece:	4b43      	ldr	r3, [pc, #268]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d005      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x176>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d001      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e1ba      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	4939      	ldr	r1, [pc, #228]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efa:	e03a      	b.n	8000f72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	691b      	ldr	r3, [r3, #16]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d020      	beq.n	8000f46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f04:	4b36      	ldr	r3, [pc, #216]	; (8000fe0 <HAL_RCC_OscConfig+0x270>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fb7d 	bl	8000608 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f12:	f7ff fb79 	bl	8000608 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e19b      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f24:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0f0      	beq.n	8000f12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f30:	4b2a      	ldr	r3, [pc, #168]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	4927      	ldr	r1, [pc, #156]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	600b      	str	r3, [r1, #0]
 8000f44:	e015      	b.n	8000f72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <HAL_RCC_OscConfig+0x270>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fb5c 	bl	8000608 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f54:	f7ff fb58 	bl	8000608 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e17a      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f0      	bne.n	8000f54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d03a      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d019      	beq.n	8000fba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8c:	f7ff fb3c 	bl	8000608 <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f94:	f7ff fb38 	bl	8000608 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e15a      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0f0      	beq.n	8000f94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f000 fad8 	bl	8001568 <RCC_Delay>
 8000fb8:	e01c      	b.n	8000ff4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_RCC_OscConfig+0x274>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc0:	f7ff fb22 	bl	8000608 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc6:	e00f      	b.n	8000fe8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc8:	f7ff fb1e 	bl	8000608 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d908      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e140      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	42420000 	.word	0x42420000
 8000fe4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe8:	4b9e      	ldr	r3, [pc, #632]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1e9      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80a6 	beq.w	800114e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001002:	2300      	movs	r3, #0
 8001004:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001006:	4b97      	ldr	r3, [pc, #604]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10d      	bne.n	800102e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	4b94      	ldr	r3, [pc, #592]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4a93      	ldr	r2, [pc, #588]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	61d3      	str	r3, [r2, #28]
 800101e:	4b91      	ldr	r3, [pc, #580]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800102a:	2301      	movs	r3, #1
 800102c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102e:	4b8e      	ldr	r3, [pc, #568]	; (8001268 <HAL_RCC_OscConfig+0x4f8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001036:	2b00      	cmp	r3, #0
 8001038:	d118      	bne.n	800106c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800103a:	4b8b      	ldr	r3, [pc, #556]	; (8001268 <HAL_RCC_OscConfig+0x4f8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a8a      	ldr	r2, [pc, #552]	; (8001268 <HAL_RCC_OscConfig+0x4f8>)
 8001040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001046:	f7ff fadf 	bl	8000608 <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800104e:	f7ff fadb 	bl	8000608 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b64      	cmp	r3, #100	; 0x64
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e0fd      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001060:	4b81      	ldr	r3, [pc, #516]	; (8001268 <HAL_RCC_OscConfig+0x4f8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f0      	beq.n	800104e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d106      	bne.n	8001082 <HAL_RCC_OscConfig+0x312>
 8001074:	4b7b      	ldr	r3, [pc, #492]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	4a7a      	ldr	r2, [pc, #488]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6213      	str	r3, [r2, #32]
 8001080:	e02d      	b.n	80010de <HAL_RCC_OscConfig+0x36e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x334>
 800108a:	4b76      	ldr	r3, [pc, #472]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 800108c:	6a1b      	ldr	r3, [r3, #32]
 800108e:	4a75      	ldr	r2, [pc, #468]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001090:	f023 0301 	bic.w	r3, r3, #1
 8001094:	6213      	str	r3, [r2, #32]
 8001096:	4b73      	ldr	r3, [pc, #460]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	4a72      	ldr	r2, [pc, #456]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 800109c:	f023 0304 	bic.w	r3, r3, #4
 80010a0:	6213      	str	r3, [r2, #32]
 80010a2:	e01c      	b.n	80010de <HAL_RCC_OscConfig+0x36e>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	2b05      	cmp	r3, #5
 80010aa:	d10c      	bne.n	80010c6 <HAL_RCC_OscConfig+0x356>
 80010ac:	4b6d      	ldr	r3, [pc, #436]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	4a6c      	ldr	r2, [pc, #432]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	6213      	str	r3, [r2, #32]
 80010b8:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	4a69      	ldr	r2, [pc, #420]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6213      	str	r3, [r2, #32]
 80010c4:	e00b      	b.n	80010de <HAL_RCC_OscConfig+0x36e>
 80010c6:	4b67      	ldr	r3, [pc, #412]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010c8:	6a1b      	ldr	r3, [r3, #32]
 80010ca:	4a66      	ldr	r2, [pc, #408]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010cc:	f023 0301 	bic.w	r3, r3, #1
 80010d0:	6213      	str	r3, [r2, #32]
 80010d2:	4b64      	ldr	r3, [pc, #400]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	4a63      	ldr	r2, [pc, #396]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	f023 0304 	bic.w	r3, r3, #4
 80010dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d015      	beq.n	8001112 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fa8f 	bl	8000608 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ec:	e00a      	b.n	8001104 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ee:	f7ff fa8b 	bl	8000608 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e0ab      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001104:	4b57      	ldr	r3, [pc, #348]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0ee      	beq.n	80010ee <HAL_RCC_OscConfig+0x37e>
 8001110:	e014      	b.n	800113c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001112:	f7ff fa79 	bl	8000608 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001118:	e00a      	b.n	8001130 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800111a:	f7ff fa75 	bl	8000608 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	f241 3288 	movw	r2, #5000	; 0x1388
 8001128:	4293      	cmp	r3, r2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e095      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001130:	4b4c      	ldr	r3, [pc, #304]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1ee      	bne.n	800111a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800113c:	7dfb      	ldrb	r3, [r7, #23]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d105      	bne.n	800114e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001142:	4b48      	ldr	r3, [pc, #288]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a47      	ldr	r2, [pc, #284]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800114c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8081 	beq.w	800125a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001158:	4b42      	ldr	r3, [pc, #264]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 030c 	and.w	r3, r3, #12
 8001160:	2b08      	cmp	r3, #8
 8001162:	d061      	beq.n	8001228 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	69db      	ldr	r3, [r3, #28]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d146      	bne.n	80011fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800116c:	4b3f      	ldr	r3, [pc, #252]	; (800126c <HAL_RCC_OscConfig+0x4fc>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001172:	f7ff fa49 	bl	8000608 <HAL_GetTick>
 8001176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117a:	f7ff fa45 	bl	8000608 <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e067      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118c:	4b35      	ldr	r3, [pc, #212]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1f0      	bne.n	800117a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a0:	d108      	bne.n	80011b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011a2:	4b30      	ldr	r3, [pc, #192]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	492d      	ldr	r1, [pc, #180]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	4313      	orrs	r3, r2
 80011b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011b4:	4b2b      	ldr	r3, [pc, #172]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a19      	ldr	r1, [r3, #32]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c4:	430b      	orrs	r3, r1
 80011c6:	4927      	ldr	r1, [pc, #156]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011cc:	4b27      	ldr	r3, [pc, #156]	; (800126c <HAL_RCC_OscConfig+0x4fc>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d2:	f7ff fa19 	bl	8000608 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011da:	f7ff fa15 	bl	8000608 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e037      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ec:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x46a>
 80011f8:	e02f      	b.n	800125a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011fa:	4b1c      	ldr	r3, [pc, #112]	; (800126c <HAL_RCC_OscConfig+0x4fc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff fa02 	bl	8000608 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001208:	f7ff f9fe 	bl	8000608 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e020      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800121a:	4b12      	ldr	r3, [pc, #72]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f0      	bne.n	8001208 <HAL_RCC_OscConfig+0x498>
 8001226:	e018      	b.n	800125a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	69db      	ldr	r3, [r3, #28]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e013      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <HAL_RCC_OscConfig+0x4f4>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	429a      	cmp	r2, r3
 8001246:	d106      	bne.n	8001256 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001252:	429a      	cmp	r2, r3
 8001254:	d001      	beq.n	800125a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021000 	.word	0x40021000
 8001268:	40007000 	.word	0x40007000
 800126c:	42420060 	.word	0x42420060

08001270 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e0d0      	b.n	8001426 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001284:	4b6a      	ldr	r3, [pc, #424]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	429a      	cmp	r2, r3
 8001290:	d910      	bls.n	80012b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001292:	4b67      	ldr	r3, [pc, #412]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f023 0207 	bic.w	r2, r3, #7
 800129a:	4965      	ldr	r1, [pc, #404]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	4313      	orrs	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a2:	4b63      	ldr	r3, [pc, #396]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d001      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e0b8      	b.n	8001426 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d020      	beq.n	8001302 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012cc:	4b59      	ldr	r3, [pc, #356]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	4a58      	ldr	r2, [pc, #352]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80012d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012e4:	4b53      	ldr	r3, [pc, #332]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	4a52      	ldr	r2, [pc, #328]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80012ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012f0:	4b50      	ldr	r3, [pc, #320]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	494d      	ldr	r1, [pc, #308]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80012fe:	4313      	orrs	r3, r2
 8001300:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d040      	beq.n	8001390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d107      	bne.n	8001326 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	4b47      	ldr	r3, [pc, #284]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d115      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e07f      	b.n	8001426 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d107      	bne.n	800133e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800132e:	4b41      	ldr	r3, [pc, #260]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d109      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e073      	b.n	8001426 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800133e:	4b3d      	ldr	r3, [pc, #244]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e06b      	b.n	8001426 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800134e:	4b39      	ldr	r3, [pc, #228]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f023 0203 	bic.w	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	4936      	ldr	r1, [pc, #216]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001360:	f7ff f952 	bl	8000608 <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001366:	e00a      	b.n	800137e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001368:	f7ff f94e 	bl	8000608 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	f241 3288 	movw	r2, #5000	; 0x1388
 8001376:	4293      	cmp	r3, r2
 8001378:	d901      	bls.n	800137e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e053      	b.n	8001426 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800137e:	4b2d      	ldr	r3, [pc, #180]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 020c 	and.w	r2, r3, #12
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	429a      	cmp	r2, r3
 800138e:	d1eb      	bne.n	8001368 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	429a      	cmp	r2, r3
 800139c:	d210      	bcs.n	80013c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139e:	4b24      	ldr	r3, [pc, #144]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 0207 	bic.w	r2, r3, #7
 80013a6:	4922      	ldr	r1, [pc, #136]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <HAL_RCC_ClockConfig+0x1c0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e032      	b.n	8001426 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d008      	beq.n	80013de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	4916      	ldr	r1, [pc, #88]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d009      	beq.n	80013fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ea:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	490e      	ldr	r1, [pc, #56]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013fe:	f000 f821 	bl	8001444 <HAL_RCC_GetSysClockFreq>
 8001402:	4602      	mov	r2, r0
 8001404:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	490a      	ldr	r1, [pc, #40]	; (8001438 <HAL_RCC_ClockConfig+0x1c8>)
 8001410:	5ccb      	ldrb	r3, [r1, r3]
 8001412:	fa22 f303 	lsr.w	r3, r2, r3
 8001416:	4a09      	ldr	r2, [pc, #36]	; (800143c <HAL_RCC_ClockConfig+0x1cc>)
 8001418:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_RCC_ClockConfig+0x1d0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f8b0 	bl	8000584 <HAL_InitTick>

  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40022000 	.word	0x40022000
 8001434:	40021000 	.word	0x40021000
 8001438:	08001c44 	.word	0x08001c44
 800143c:	20000000 	.word	0x20000000
 8001440:	20000004 	.word	0x20000004

08001444 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001444:	b490      	push	{r4, r7}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800144a:	4b2a      	ldr	r3, [pc, #168]	; (80014f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800144c:	1d3c      	adds	r4, r7, #4
 800144e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001454:	f240 2301 	movw	r3, #513	; 0x201
 8001458:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b04      	cmp	r3, #4
 800147c:	d002      	beq.n	8001484 <HAL_RCC_GetSysClockFreq+0x40>
 800147e:	2b08      	cmp	r3, #8
 8001480:	d003      	beq.n	800148a <HAL_RCC_GetSysClockFreq+0x46>
 8001482:	e02d      	b.n	80014e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001486:	623b      	str	r3, [r7, #32]
      break;
 8001488:	e02d      	b.n	80014e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	0c9b      	lsrs	r3, r3, #18
 800148e:	f003 030f 	and.w	r3, r3, #15
 8001492:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001496:	4413      	add	r3, r2
 8001498:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800149c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d013      	beq.n	80014d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	0c5b      	lsrs	r3, r3, #17
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014b6:	4413      	add	r3, r2
 80014b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80014c2:	fb02 f203 	mul.w	r2, r2, r3
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
 80014ce:	e004      	b.n	80014da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	4a0b      	ldr	r2, [pc, #44]	; (8001500 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014d4:	fb02 f303 	mul.w	r3, r2, r3
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	623b      	str	r3, [r7, #32]
      break;
 80014de:	e002      	b.n	80014e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80014e2:	623b      	str	r3, [r7, #32]
      break;
 80014e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014e6:	6a3b      	ldr	r3, [r7, #32]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc90      	pop	{r4, r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	08001c34 	.word	0x08001c34
 80014f8:	40021000 	.word	0x40021000
 80014fc:	007a1200 	.word	0x007a1200
 8001500:	003d0900 	.word	0x003d0900

08001504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001508:	4b02      	ldr	r3, [pc, #8]	; (8001514 <HAL_RCC_GetHCLKFreq+0x10>)
 800150a:	681b      	ldr	r3, [r3, #0]
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	20000000 	.word	0x20000000

08001518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800151c:	f7ff fff2 	bl	8001504 <HAL_RCC_GetHCLKFreq>
 8001520:	4602      	mov	r2, r0
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	0a1b      	lsrs	r3, r3, #8
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	4903      	ldr	r1, [pc, #12]	; (800153c <HAL_RCC_GetPCLK1Freq+0x24>)
 800152e:	5ccb      	ldrb	r3, [r1, r3]
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40021000 	.word	0x40021000
 800153c:	08001c54 	.word	0x08001c54

08001540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001544:	f7ff ffde 	bl	8001504 <HAL_RCC_GetHCLKFreq>
 8001548:	4602      	mov	r2, r0
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	0adb      	lsrs	r3, r3, #11
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	4903      	ldr	r1, [pc, #12]	; (8001564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001556:	5ccb      	ldrb	r3, [r1, r3]
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800155c:	4618      	mov	r0, r3
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000
 8001564:	08001c54 	.word	0x08001c54

08001568 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <RCC_Delay+0x34>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <RCC_Delay+0x38>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0a5b      	lsrs	r3, r3, #9
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	fb02 f303 	mul.w	r3, r2, r3
 8001582:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001584:	bf00      	nop
  }
  while (Delay --);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1e5a      	subs	r2, r3, #1
 800158a:	60fa      	str	r2, [r7, #12]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f9      	bne.n	8001584 <RCC_Delay+0x1c>
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	20000000 	.word	0x20000000
 80015a0:	10624dd3 	.word	0x10624dd3

080015a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d101      	bne.n	80015b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e03f      	b.n	8001636 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7fe ff4a 	bl	8000464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2224      	movs	r2, #36	; 0x24
 80015d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 fa5d 	bl	8001aa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80015fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800160c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800161c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2220      	movs	r2, #32
 8001628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2220      	movs	r2, #32
 8001630:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001660:	2300      	movs	r3, #0
 8001662:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10d      	bne.n	8001692 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f003 0320 	and.w	r3, r3, #32
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_UART_IRQHandler+0x52>
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	f003 0320 	and.w	r3, r3, #32
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 f98b 	bl	80019a6 <UART_Receive_IT>
      return;
 8001690:	e0d0      	b.n	8001834 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 80b0 	beq.w	80017fa <HAL_UART_IRQHandler+0x1ba>
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d105      	bne.n	80016b0 <HAL_UART_IRQHandler+0x70>
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 80a5 	beq.w	80017fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00a      	beq.n	80016d0 <HAL_UART_IRQHandler+0x90>
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c8:	f043 0201 	orr.w	r2, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d00a      	beq.n	80016f0 <HAL_UART_IRQHandler+0xb0>
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d005      	beq.n	80016f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e8:	f043 0202 	orr.w	r2, r3, #2
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00a      	beq.n	8001710 <HAL_UART_IRQHandler+0xd0>
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001708:	f043 0204 	orr.w	r2, r3, #4
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00f      	beq.n	800173a <HAL_UART_IRQHandler+0xfa>
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	f003 0320 	and.w	r3, r3, #32
 8001720:	2b00      	cmp	r3, #0
 8001722:	d104      	bne.n	800172e <HAL_UART_IRQHandler+0xee>
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d005      	beq.n	800173a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001732:	f043 0208 	orr.w	r2, r3, #8
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173e:	2b00      	cmp	r3, #0
 8001740:	d077      	beq.n	8001832 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f003 0320 	and.w	r3, r3, #32
 8001748:	2b00      	cmp	r3, #0
 800174a:	d007      	beq.n	800175c <HAL_UART_IRQHandler+0x11c>
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	f003 0320 	and.w	r3, r3, #32
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f925 	bl	80019a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001766:	2b00      	cmp	r3, #0
 8001768:	bf14      	ite	ne
 800176a:	2301      	movne	r3, #1
 800176c:	2300      	moveq	r3, #0
 800176e:	b2db      	uxtb	r3, r3
 8001770:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	2b00      	cmp	r3, #0
 800177c:	d102      	bne.n	8001784 <HAL_UART_IRQHandler+0x144>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d031      	beq.n	80017e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f876 	bl	8001876 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001794:	2b00      	cmp	r3, #0
 8001796:	d023      	beq.n	80017e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d013      	beq.n	80017d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b4:	4a21      	ldr	r2, [pc, #132]	; (800183c <HAL_UART_IRQHandler+0x1fc>)
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f83b 	bl	8000838 <HAL_DMA_Abort_IT>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d016      	beq.n	80017f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017d2:	4610      	mov	r0, r2
 80017d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017d6:	e00e      	b.n	80017f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 f843 	bl	8001864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017de:	e00a      	b.n	80017f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f83f 	bl	8001864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017e6:	e006      	b.n	80017f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f83b 	bl	8001864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80017f4:	e01d      	b.n	8001832 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017f6:	bf00      	nop
    return;
 80017f8:	e01b      	b.n	8001832 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <HAL_UART_IRQHandler+0x1d6>
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f862 	bl	80018d8 <UART_Transmit_IT>
    return;
 8001814:	e00e      	b.n	8001834 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181c:	2b00      	cmp	r3, #0
 800181e:	d009      	beq.n	8001834 <HAL_UART_IRQHandler+0x1f4>
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f8a3 	bl	8001976 <UART_EndTransmit_IT>
    return;
 8001830:	e000      	b.n	8001834 <HAL_UART_IRQHandler+0x1f4>
    return;
 8001832:	bf00      	nop
  }
}
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	080018b1 	.word	0x080018b1

08001840 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800188c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695a      	ldr	r2, [r3, #20]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0201 	bic.w	r2, r2, #1
 800189c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2220      	movs	r2, #32
 80018a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f7ff ffca 	bl	8001864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b21      	cmp	r3, #33	; 0x21
 80018ea:	d13e      	bne.n	800196a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f4:	d114      	bne.n	8001920 <UART_Transmit_IT+0x48>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d110      	bne.n	8001920 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001912:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	1c9a      	adds	r2, r3, #2
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	621a      	str	r2, [r3, #32]
 800191e:	e008      	b.n	8001932 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	1c59      	adds	r1, r3, #1
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6211      	str	r1, [r2, #32]
 800192a:	781a      	ldrb	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001936:	b29b      	uxth	r3, r3
 8001938:	3b01      	subs	r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	4619      	mov	r1, r3
 8001940:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10f      	bne.n	8001966 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001954:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68da      	ldr	r2, [r3, #12]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001964:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800196a:	2302      	movs	r3, #2
  }
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800198c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2220      	movs	r2, #32
 8001992:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ff52 	bl	8001840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b084      	sub	sp, #16
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b22      	cmp	r3, #34	; 0x22
 80019b8:	d170      	bne.n	8001a9c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019c2:	d117      	bne.n	80019f4 <UART_Receive_IT+0x4e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d113      	bne.n	80019f4 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d4:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ec:	1c9a      	adds	r2, r3, #2
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	629a      	str	r2, [r3, #40]	; 0x28
 80019f2:	e026      	b.n	8001a42 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a06:	d007      	beq.n	8001a18 <UART_Receive_IT+0x72>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10a      	bne.n	8001a26 <UART_Receive_IT+0x80>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691b      	ldr	r3, [r3, #16]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d106      	bne.n	8001a26 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	701a      	strb	r2, [r3, #0]
 8001a24:	e008      	b.n	8001a38 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	4619      	mov	r1, r3
 8001a50:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d120      	bne.n	8001a98 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68da      	ldr	r2, [r3, #12]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0220 	bic.w	r2, r2, #32
 8001a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695a      	ldr	r2, [r3, #20]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0201 	bic.w	r2, r2, #1
 8001a84:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff fedf 	bl	8001852 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001a94:	2300      	movs	r3, #0
 8001a96:	e002      	b.n	8001a9e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e000      	b.n	8001a9e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001a9c:	2302      	movs	r3, #2
  }
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001ae2:	f023 030c 	bic.w	r3, r3, #12
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	68b9      	ldr	r1, [r7, #8]
 8001aec:	430b      	orrs	r3, r1
 8001aee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a2c      	ldr	r2, [pc, #176]	; (8001bbc <UART_SetConfig+0x114>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d103      	bne.n	8001b18 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b10:	f7ff fd16 	bl	8001540 <HAL_RCC_GetPCLK2Freq>
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	e002      	b.n	8001b1e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b18:	f7ff fcfe 	bl	8001518 <HAL_RCC_GetPCLK1Freq>
 8001b1c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	009a      	lsls	r2, r3, #2
 8001b28:	441a      	add	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	4a22      	ldr	r2, [pc, #136]	; (8001bc0 <UART_SetConfig+0x118>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	0119      	lsls	r1, r3, #4
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	4613      	mov	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	009a      	lsls	r2, r3, #2
 8001b48:	441a      	add	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b54:	4b1a      	ldr	r3, [pc, #104]	; (8001bc0 <UART_SetConfig+0x118>)
 8001b56:	fba3 0302 	umull	r0, r3, r3, r2
 8001b5a:	095b      	lsrs	r3, r3, #5
 8001b5c:	2064      	movs	r0, #100	; 0x64
 8001b5e:	fb00 f303 	mul.w	r3, r0, r3
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	011b      	lsls	r3, r3, #4
 8001b66:	3332      	adds	r3, #50	; 0x32
 8001b68:	4a15      	ldr	r2, [pc, #84]	; (8001bc0 <UART_SetConfig+0x118>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b74:	4419      	add	r1, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009a      	lsls	r2, r3, #2
 8001b80:	441a      	add	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <UART_SetConfig+0x118>)
 8001b8e:	fba3 0302 	umull	r0, r3, r3, r2
 8001b92:	095b      	lsrs	r3, r3, #5
 8001b94:	2064      	movs	r0, #100	; 0x64
 8001b96:	fb00 f303 	mul.w	r3, r0, r3
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	3332      	adds	r3, #50	; 0x32
 8001ba0:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <UART_SetConfig+0x118>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	f003 020f 	and.w	r2, r3, #15
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	440a      	add	r2, r1
 8001bb2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	51eb851f 	.word	0x51eb851f

08001bc4 <__libc_init_array>:
 8001bc4:	b570      	push	{r4, r5, r6, lr}
 8001bc6:	2600      	movs	r6, #0
 8001bc8:	4d0c      	ldr	r5, [pc, #48]	; (8001bfc <__libc_init_array+0x38>)
 8001bca:	4c0d      	ldr	r4, [pc, #52]	; (8001c00 <__libc_init_array+0x3c>)
 8001bcc:	1b64      	subs	r4, r4, r5
 8001bce:	10a4      	asrs	r4, r4, #2
 8001bd0:	42a6      	cmp	r6, r4
 8001bd2:	d109      	bne.n	8001be8 <__libc_init_array+0x24>
 8001bd4:	f000 f822 	bl	8001c1c <_init>
 8001bd8:	2600      	movs	r6, #0
 8001bda:	4d0a      	ldr	r5, [pc, #40]	; (8001c04 <__libc_init_array+0x40>)
 8001bdc:	4c0a      	ldr	r4, [pc, #40]	; (8001c08 <__libc_init_array+0x44>)
 8001bde:	1b64      	subs	r4, r4, r5
 8001be0:	10a4      	asrs	r4, r4, #2
 8001be2:	42a6      	cmp	r6, r4
 8001be4:	d105      	bne.n	8001bf2 <__libc_init_array+0x2e>
 8001be6:	bd70      	pop	{r4, r5, r6, pc}
 8001be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bec:	4798      	blx	r3
 8001bee:	3601      	adds	r6, #1
 8001bf0:	e7ee      	b.n	8001bd0 <__libc_init_array+0xc>
 8001bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bf6:	4798      	blx	r3
 8001bf8:	3601      	adds	r6, #1
 8001bfa:	e7f2      	b.n	8001be2 <__libc_init_array+0x1e>
 8001bfc:	08001c5c 	.word	0x08001c5c
 8001c00:	08001c5c 	.word	0x08001c5c
 8001c04:	08001c5c 	.word	0x08001c5c
 8001c08:	08001c60 	.word	0x08001c60

08001c0c <memset>:
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	4402      	add	r2, r0
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d100      	bne.n	8001c16 <memset+0xa>
 8001c14:	4770      	bx	lr
 8001c16:	f803 1b01 	strb.w	r1, [r3], #1
 8001c1a:	e7f9      	b.n	8001c10 <memset+0x4>

08001c1c <_init>:
 8001c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c1e:	bf00      	nop
 8001c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c22:	bc08      	pop	{r3}
 8001c24:	469e      	mov	lr, r3
 8001c26:	4770      	bx	lr

08001c28 <_fini>:
 8001c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2a:	bf00      	nop
 8001c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c2e:	bc08      	pop	{r3}
 8001c30:	469e      	mov	lr, r3
 8001c32:	4770      	bx	lr
