
HC_SR501.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a64  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08004c50  08004c50  00014c50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005074  08005074  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005074  08005074  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005074  08005074  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800507c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  200001dc  08005258  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08005258  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a18  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bcd  00000000  00000000  00029c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0002b7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  0002bec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a2eb  00000000  00000000  0002c4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e75  00000000  00000000  000467a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000917aa  00000000  00000000  0004e618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dfdc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029fc  00000000  00000000  000dfe18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001dc 	.word	0x200001dc
 8000204:	00000000 	.word	0x00000000
 8000208:	08004c34 	.word	0x08004c34

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001e0 	.word	0x200001e0
 8000224:	08004c34 	.word	0x08004c34

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b74:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a2b      	ldr	r2, [pc, #172]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba4:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a25      	ldr	r2, [pc, #148]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000baa:	f043 0308 	orr.w	r3, r3, #8
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b23      	ldr	r3, [pc, #140]	; (8000c40 <MX_GPIO_Init+0xe0>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2120      	movs	r1, #32
 8000bc0:	4820      	ldr	r0, [pc, #128]	; (8000c44 <MX_GPIO_Init+0xe4>)
 8000bc2:	f000 fdf0 	bl	80017a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bcc:	481d      	ldr	r0, [pc, #116]	; (8000c44 <MX_GPIO_Init+0xe4>)
 8000bce:	f000 fdea 	bl	80017a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIRmotion_Pin;
 8000bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <MX_GPIO_Init+0xe8>)
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PIRmotion_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4619      	mov	r1, r3
 8000be6:	4819      	ldr	r0, [pc, #100]	; (8000c4c <MX_GPIO_Init+0xec>)
 8000be8:	f000 fc32 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000bec:	2320      	movs	r3, #32
 8000bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4619      	mov	r1, r3
 8000c02:	4810      	ldr	r0, [pc, #64]	; (8000c44 <MX_GPIO_Init+0xe4>)
 8000c04:	f000 fc24 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4808      	ldr	r0, [pc, #32]	; (8000c44 <MX_GPIO_Init+0xe4>)
 8000c22:	f000 fc15 	bl	8001450 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2017      	movs	r0, #23
 8000c2c:	f000 fbd9 	bl	80013e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c30:	2017      	movs	r0, #23
 8000c32:	f000 fbf2 	bl	800141a <HAL_NVIC_EnableIRQ>

}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000
 8000c44:	40010c00 	.word	0x40010c00
 8000c48:	10310000 	.word	0x10310000
 8000c4c:	40011800 	.word	0x40011800

08000c50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PIRmotion_Pin) {
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c60:	d125      	bne.n	8000cae <HAL_GPIO_EXTI_Callback+0x5e>
		if (PIRmotion == GPIO_PIN_SET) {
 8000c62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c66:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000c68:	f000 fd86 	bl	8001778 <HAL_GPIO_ReadPin>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d11d      	bne.n	8000cae <HAL_GPIO_EXTI_Callback+0x5e>
			HAL_Delay(3000);
 8000c72:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c76:	f000 fab9 	bl	80011ec <HAL_Delay>
			if (PIRmotion == GPIO_PIN_SET) {
 8000c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <HAL_GPIO_EXTI_Callback+0x68>)
 8000c80:	f000 fd7a 	bl	8001778 <HAL_GPIO_ReadPin>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d108      	bne.n	8000c9c <HAL_GPIO_EXTI_Callback+0x4c>
				printf("SOMEONE BROKE IN!!!!!!!!");
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <HAL_GPIO_EXTI_Callback+0x6c>)
 8000c8c:	f001 ff44 	bl	8002b18 <iprintf>
				LED0_ON();
 8000c90:	2200      	movs	r2, #0
 8000c92:	2120      	movs	r1, #32
 8000c94:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000c96:	f000 fd86 	bl	80017a6 <HAL_GPIO_WritePin>
 8000c9a:	e004      	b.n	8000ca6 <HAL_GPIO_EXTI_Callback+0x56>
			} else {
				LED0_OFF();
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2120      	movs	r1, #32
 8000ca0:	4807      	ldr	r0, [pc, #28]	; (8000cc0 <HAL_GPIO_EXTI_Callback+0x70>)
 8000ca2:	f000 fd80 	bl	80017a6 <HAL_GPIO_WritePin>
			}
			HAL_Delay(500);
 8000ca6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000caa:	f000 fa9f 	bl	80011ec <HAL_Delay>
		}
	}
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40011800 	.word	0x40011800
 8000cbc:	08004c50 	.word	0x08004c50
 8000cc0:	40010c00 	.word	0x40010c00

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc8:	f000 fa2e 	bl	8001128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ccc:	f000 f805 	bl	8000cda <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd0:	f7ff ff46 	bl	8000b60 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cd4:	f000 f98c 	bl	8000ff0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000cd8:	e7fe      	b.n	8000cd8 <main+0x14>

08000cda <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b090      	sub	sp, #64	; 0x40
 8000cde:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce0:	f107 0318 	add.w	r3, r7, #24
 8000ce4:	2228      	movs	r2, #40	; 0x28
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 faad 	bl	8002248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d04:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d18:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d1e:	f107 0318 	add.w	r3, r7, #24
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 fd70 	bl	8001808 <HAL_RCC_OscConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d2e:	f000 f831 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d32:	230f      	movs	r3, #15
 8000d34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d36:	2302      	movs	r3, #2
 8000d38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2102      	movs	r1, #2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 ffdb 	bl	8001d08 <HAL_RCC_ClockConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d58:	f000 f81c 	bl	8000d94 <Error_Handler>
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	3740      	adds	r7, #64	; 0x40
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 8000d6c:	bf00      	nop
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <__io_putchar+0x2c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0f9      	beq.n	8000d6e <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <__io_putchar+0x2c>)
 8000d80:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

	return ch;
 8000d82:	687b      	ldr	r3, [r7, #4]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bc80      	pop	{r7}
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40013800 	.word	0x40013800

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
}
 8000d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d9c:	e7fe      	b.n	8000d9c <Error_Handler+0x8>
	...

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_MspInit+0x5c>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6193      	str	r3, [r2, #24]
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_MspInit+0x5c>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_MspInit+0x60>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_MspInit+0x60>)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40010000 	.word	0x40010000

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bc80      	pop	{r7}
 8000e44:	4770      	bx	lr

08000e46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4a:	f000 f9b3 	bl	80011b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000e56:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e5a:	f000 fcbd 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
	return 1;
 8000e66:	2301      	movs	r3, #1
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <_kill>:

int _kill(int pid, int sig)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e7a:	f001 f9bb 	bl	80021f4 <__errno>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2216      	movs	r2, #22
 8000e82:	601a      	str	r2, [r3, #0]
	return -1;
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <_exit>:

void _exit (int status)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e98:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ffe7 	bl	8000e70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ea2:	e7fe      	b.n	8000ea2 <_exit+0x12>

08000ea4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	e00a      	b.n	8000ecc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000eb6:	f3af 8000 	nop.w
 8000eba:	4601      	mov	r1, r0
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	1c5a      	adds	r2, r3, #1
 8000ec0:	60ba      	str	r2, [r7, #8]
 8000ec2:	b2ca      	uxtb	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbf0      	blt.n	8000eb6 <_read+0x12>
	}

return len;
 8000ed4:	687b      	ldr	r3, [r7, #4]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b086      	sub	sp, #24
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e009      	b.n	8000f04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	1c5a      	adds	r2, r3, #1
 8000ef4:	60ba      	str	r2, [r7, #8]
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff33 	bl	8000d64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	dbf1      	blt.n	8000ef0 <_write+0x12>
	}
	return len;
 8000f0c:	687b      	ldr	r3, [r7, #4]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <_close>:

int _close(int file)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr

08000f2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3c:	605a      	str	r2, [r3, #4]
	return 0;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <_isatty>:

int _isatty(int file)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
	return 1;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b085      	sub	sp, #20
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
	return 0;
 8000f6a:	2300      	movs	r3, #0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
	...

08000f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <_sbrk+0x5c>)
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <_sbrk+0x60>)
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <_sbrk+0x64>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <_sbrk+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d207      	bcs.n	8000fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa8:	f001 f924 	bl	80021f4 <__errno>
 8000fac:	4603      	mov	r3, r0
 8000fae:	220c      	movs	r2, #12
 8000fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	e009      	b.n	8000fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <_sbrk+0x64>)
 8000fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20010000 	.word	0x20010000
 8000fd8:	00000400 	.word	0x00000400
 8000fdc:	200001f8 	.word	0x200001f8
 8000fe0:	20000258 	.word	0x20000258

08000fe4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USART1_UART_Init+0x4c>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_USART1_UART_Init+0x50>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <MX_USART1_UART_Init+0x4c>)
 8000ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001000:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USART1_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USART1_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USART1_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USART1_UART_Init+0x4c>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USART1_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USART1_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USART1_UART_Init+0x4c>)
 8001028:	f001 f808 	bl	800203c <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001032:	f7ff feaf 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000204 	.word	0x20000204
 8001040:	40013800 	.word	0x40013800

08001044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <HAL_UART_MspInit+0x8c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d131      	bne.n	80010c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_UART_MspInit+0x90>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <HAL_UART_MspInit+0x90>)
 800106a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_UART_MspInit+0x90>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_UART_MspInit+0x90>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <HAL_UART_MspInit+0x90>)
 8001082:	f043 0304 	orr.w	r3, r3, #4
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_UART_MspInit+0x90>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0304 	and.w	r3, r3, #4
 8001090:	60bb      	str	r3, [r7, #8]
 8001092:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001098:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 0310 	add.w	r3, r7, #16
 80010a6:	4619      	mov	r1, r3
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <HAL_UART_MspInit+0x94>)
 80010aa:	f000 f9d1 	bl	8001450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	4619      	mov	r1, r3
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <HAL_UART_MspInit+0x94>)
 80010c4:	f000 f9c4 	bl	8001450 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010c8:	bf00      	nop
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40013800 	.word	0x40013800
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40010800 	.word	0x40010800

080010dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010de:	e003      	b.n	80010e8 <LoopCopyDataInit>

080010e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010e0:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80010e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010e6:	3104      	adds	r1, #4

080010e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010e8:	480a      	ldr	r0, [pc, #40]	; (8001114 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80010ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010f0:	d3f6      	bcc.n	80010e0 <CopyDataInit>
  ldr r2, =_sbss
 80010f2:	4a0a      	ldr	r2, [pc, #40]	; (800111c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010f4:	e002      	b.n	80010fc <LoopFillZerobss>

080010f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010f8:	f842 3b04 	str.w	r3, [r2], #4

080010fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001100:	d3f9      	bcc.n	80010f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001102:	f7ff ff6f 	bl	8000fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001106:	f001 f87b 	bl	8002200 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110a:	f7ff fddb 	bl	8000cc4 <main>
  bx lr
 800110e:	4770      	bx	lr
  ldr r3, =_sidata
 8001110:	0800507c 	.word	0x0800507c
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001118:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 800111c:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001120:	20000258 	.word	0x20000258

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>
	...

08001128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_Init+0x28>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_Init+0x28>)
 8001132:	f043 0310 	orr.w	r3, r3, #16
 8001136:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001138:	2003      	movs	r0, #3
 800113a:	f000 f947 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f808 	bl	8001154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001144:	f7ff fe2c 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40022000 	.word	0x40022000

08001154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_InitTick+0x54>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x58>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	4619      	mov	r1, r3
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	fbb3 f3f1 	udiv	r3, r3, r1
 800116e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f95f 	bl	8001436 <HAL_SYSTICK_Config>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e00e      	b.n	80011a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b0f      	cmp	r3, #15
 8001186:	d80a      	bhi.n	800119e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001188:	2200      	movs	r2, #0
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f000 f927 	bl	80013e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <HAL_InitTick+0x5c>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000000 	.word	0x20000000
 80011ac:	20000008 	.word	0x20000008
 80011b0:	20000004 	.word	0x20000004

080011b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_IncTick+0x1c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_IncTick+0x20>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4413      	add	r3, r2
 80011c4:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <HAL_IncTick+0x20>)
 80011c6:	6013      	str	r3, [r2, #0]
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	20000008 	.word	0x20000008
 80011d4:	20000244 	.word	0x20000244

080011d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return uwTick;
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <HAL_GetTick+0x10>)
 80011de:	681b      	ldr	r3, [r3, #0]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	20000244 	.word	0x20000244

080011ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff fff0 	bl	80011d8 <HAL_GetTick>
 80011f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001204:	d005      	beq.n	8001212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_Delay+0x44>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001212:	bf00      	nop
 8001214:	f7ff ffe0 	bl	80011d8 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8f7      	bhi.n	8001214 <HAL_Delay+0x28>
  {
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000008 	.word	0x20000008

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4906      	ldr	r1, [pc, #24]	; (80012cc <__NVIC_EnableIRQ+0x34>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f7ff ff90 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff2d 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff42 	bl	800127c <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff90 	bl	8001324 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5f 	bl	80012d0 <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff35 	bl	8001298 <__NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffa2 	bl	8001388 <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b08b      	sub	sp, #44	; 0x2c
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001462:	e179      	b.n	8001758 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001464:	2201      	movs	r2, #1
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	429a      	cmp	r2, r3
 800147e:	f040 8168 	bne.w	8001752 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	4aa0      	ldr	r2, [pc, #640]	; (8001708 <HAL_GPIO_Init+0x2b8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d05e      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 800148c:	4a9e      	ldr	r2, [pc, #632]	; (8001708 <HAL_GPIO_Init+0x2b8>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d875      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 8001492:	4a9e      	ldr	r2, [pc, #632]	; (800170c <HAL_GPIO_Init+0x2bc>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d058      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 8001498:	4a9c      	ldr	r2, [pc, #624]	; (800170c <HAL_GPIO_Init+0x2bc>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d86f      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 800149e:	4a9c      	ldr	r2, [pc, #624]	; (8001710 <HAL_GPIO_Init+0x2c0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d052      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014a4:	4a9a      	ldr	r2, [pc, #616]	; (8001710 <HAL_GPIO_Init+0x2c0>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d869      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014aa:	4a9a      	ldr	r2, [pc, #616]	; (8001714 <HAL_GPIO_Init+0x2c4>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d04c      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014b0:	4a98      	ldr	r2, [pc, #608]	; (8001714 <HAL_GPIO_Init+0x2c4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d863      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014b6:	4a98      	ldr	r2, [pc, #608]	; (8001718 <HAL_GPIO_Init+0x2c8>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d046      	beq.n	800154a <HAL_GPIO_Init+0xfa>
 80014bc:	4a96      	ldr	r2, [pc, #600]	; (8001718 <HAL_GPIO_Init+0x2c8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d85d      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014c2:	2b12      	cmp	r3, #18
 80014c4:	d82a      	bhi.n	800151c <HAL_GPIO_Init+0xcc>
 80014c6:	2b12      	cmp	r3, #18
 80014c8:	d859      	bhi.n	800157e <HAL_GPIO_Init+0x12e>
 80014ca:	a201      	add	r2, pc, #4	; (adr r2, 80014d0 <HAL_GPIO_Init+0x80>)
 80014cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d0:	0800154b 	.word	0x0800154b
 80014d4:	08001525 	.word	0x08001525
 80014d8:	08001537 	.word	0x08001537
 80014dc:	08001579 	.word	0x08001579
 80014e0:	0800157f 	.word	0x0800157f
 80014e4:	0800157f 	.word	0x0800157f
 80014e8:	0800157f 	.word	0x0800157f
 80014ec:	0800157f 	.word	0x0800157f
 80014f0:	0800157f 	.word	0x0800157f
 80014f4:	0800157f 	.word	0x0800157f
 80014f8:	0800157f 	.word	0x0800157f
 80014fc:	0800157f 	.word	0x0800157f
 8001500:	0800157f 	.word	0x0800157f
 8001504:	0800157f 	.word	0x0800157f
 8001508:	0800157f 	.word	0x0800157f
 800150c:	0800157f 	.word	0x0800157f
 8001510:	0800157f 	.word	0x0800157f
 8001514:	0800152d 	.word	0x0800152d
 8001518:	08001541 	.word	0x08001541
 800151c:	4a7f      	ldr	r2, [pc, #508]	; (800171c <HAL_GPIO_Init+0x2cc>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001522:	e02c      	b.n	800157e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e029      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	3304      	adds	r3, #4
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e024      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	3308      	adds	r3, #8
 800153c:	623b      	str	r3, [r7, #32]
          break;
 800153e:	e01f      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	330c      	adds	r3, #12
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e01a      	b.n	8001580 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001552:	2304      	movs	r3, #4
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e013      	b.n	8001580 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	611a      	str	r2, [r3, #16]
          break;
 800156a:	e009      	b.n	8001580 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800156c:	2308      	movs	r3, #8
 800156e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	615a      	str	r2, [r3, #20]
          break;
 8001576:	e003      	b.n	8001580 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e000      	b.n	8001580 <HAL_GPIO_Init+0x130>
          break;
 800157e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	2bff      	cmp	r3, #255	; 0xff
 8001584:	d801      	bhi.n	800158a <HAL_GPIO_Init+0x13a>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	e001      	b.n	800158e <HAL_GPIO_Init+0x13e>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3304      	adds	r3, #4
 800158e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2bff      	cmp	r3, #255	; 0xff
 8001594:	d802      	bhi.n	800159c <HAL_GPIO_Init+0x14c>
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	e002      	b.n	80015a2 <HAL_GPIO_Init+0x152>
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	3b08      	subs	r3, #8
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	210f      	movs	r1, #15
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	fa01 f303 	lsl.w	r3, r1, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	401a      	ands	r2, r3
 80015b4:	6a39      	ldr	r1, [r7, #32]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	431a      	orrs	r2, r3
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80c1 	beq.w	8001752 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015d0:	4b53      	ldr	r3, [pc, #332]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a52      	ldr	r2, [pc, #328]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b50      	ldr	r3, [pc, #320]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e8:	4a4e      	ldr	r2, [pc, #312]	; (8001724 <HAL_GPIO_Init+0x2d4>)
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a46      	ldr	r2, [pc, #280]	; (8001728 <HAL_GPIO_Init+0x2d8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d01f      	beq.n	8001654 <HAL_GPIO_Init+0x204>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a45      	ldr	r2, [pc, #276]	; (800172c <HAL_GPIO_Init+0x2dc>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d019      	beq.n	8001650 <HAL_GPIO_Init+0x200>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a44      	ldr	r2, [pc, #272]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d013      	beq.n	800164c <HAL_GPIO_Init+0x1fc>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a43      	ldr	r2, [pc, #268]	; (8001734 <HAL_GPIO_Init+0x2e4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d00d      	beq.n	8001648 <HAL_GPIO_Init+0x1f8>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a42      	ldr	r2, [pc, #264]	; (8001738 <HAL_GPIO_Init+0x2e8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d007      	beq.n	8001644 <HAL_GPIO_Init+0x1f4>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a41      	ldr	r2, [pc, #260]	; (800173c <HAL_GPIO_Init+0x2ec>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_GPIO_Init+0x1f0>
 800163c:	2305      	movs	r3, #5
 800163e:	e00a      	b.n	8001656 <HAL_GPIO_Init+0x206>
 8001640:	2306      	movs	r3, #6
 8001642:	e008      	b.n	8001656 <HAL_GPIO_Init+0x206>
 8001644:	2304      	movs	r3, #4
 8001646:	e006      	b.n	8001656 <HAL_GPIO_Init+0x206>
 8001648:	2303      	movs	r3, #3
 800164a:	e004      	b.n	8001656 <HAL_GPIO_Init+0x206>
 800164c:	2302      	movs	r3, #2
 800164e:	e002      	b.n	8001656 <HAL_GPIO_Init+0x206>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_GPIO_Init+0x206>
 8001654:	2300      	movs	r3, #0
 8001656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001658:	f002 0203 	and.w	r2, r2, #3
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	4093      	lsls	r3, r2
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001666:	492f      	ldr	r1, [pc, #188]	; (8001724 <HAL_GPIO_Init+0x2d4>)
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001680:	4b2f      	ldr	r3, [pc, #188]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	492e      	ldr	r1, [pc, #184]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	600b      	str	r3, [r1, #0]
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800168e:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	43db      	mvns	r3, r3
 8001696:	492a      	ldr	r1, [pc, #168]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 8001698:	4013      	ands	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016a8:	4b25      	ldr	r3, [pc, #148]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4924      	ldr	r1, [pc, #144]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
 80016b4:	e006      	b.n	80016c4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	43db      	mvns	r3, r3
 80016be:	4920      	ldr	r1, [pc, #128]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d006      	beq.n	80016de <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	491a      	ldr	r1, [pc, #104]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	608b      	str	r3, [r1, #8]
 80016dc:	e006      	b.n	80016ec <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	43db      	mvns	r3, r3
 80016e6:	4916      	ldr	r1, [pc, #88]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 80016e8:	4013      	ands	r3, r2
 80016ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d025      	beq.n	8001744 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	4910      	ldr	r1, [pc, #64]	; (8001740 <HAL_GPIO_Init+0x2f0>)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	4313      	orrs	r3, r2
 8001702:	60cb      	str	r3, [r1, #12]
 8001704:	e025      	b.n	8001752 <HAL_GPIO_Init+0x302>
 8001706:	bf00      	nop
 8001708:	10320000 	.word	0x10320000
 800170c:	10310000 	.word	0x10310000
 8001710:	10220000 	.word	0x10220000
 8001714:	10210000 	.word	0x10210000
 8001718:	10120000 	.word	0x10120000
 800171c:	10110000 	.word	0x10110000
 8001720:	40021000 	.word	0x40021000
 8001724:	40010000 	.word	0x40010000
 8001728:	40010800 	.word	0x40010800
 800172c:	40010c00 	.word	0x40010c00
 8001730:	40011000 	.word	0x40011000
 8001734:	40011400 	.word	0x40011400
 8001738:	40011800 	.word	0x40011800
 800173c:	40011c00 	.word	0x40011c00
 8001740:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_GPIO_Init+0x324>)
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	43db      	mvns	r3, r3
 800174c:	4909      	ldr	r1, [pc, #36]	; (8001774 <HAL_GPIO_Init+0x324>)
 800174e:	4013      	ands	r3, r2
 8001750:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	3301      	adds	r3, #1
 8001756:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	fa22 f303 	lsr.w	r3, r2, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	f47f ae7e 	bne.w	8001464 <HAL_GPIO_Init+0x14>
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	372c      	adds	r7, #44	; 0x2c
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	40010400 	.word	0x40010400

08001778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	887b      	ldrh	r3, [r7, #2]
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e001      	b.n	800179a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800179a:	7bfb      	ldrb	r3, [r7, #15]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	807b      	strh	r3, [r7, #2]
 80017b2:	4613      	mov	r3, r2
 80017b4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b6:	787b      	ldrb	r3, [r7, #1]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017bc:	887a      	ldrh	r2, [r7, #2]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017c2:	e003      	b.n	80017cc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017c4:	887b      	ldrh	r3, [r7, #2]
 80017c6:	041a      	lsls	r2, r3, #16
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	611a      	str	r2, [r3, #16]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fa2a 	bl	8000c50 <HAL_GPIO_EXTI_Callback>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e26c      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8087 	beq.w	8001936 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001828:	4b92      	ldr	r3, [pc, #584]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 030c 	and.w	r3, r3, #12
 8001830:	2b04      	cmp	r3, #4
 8001832:	d00c      	beq.n	800184e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001834:	4b8f      	ldr	r3, [pc, #572]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b08      	cmp	r3, #8
 800183e:	d112      	bne.n	8001866 <HAL_RCC_OscConfig+0x5e>
 8001840:	4b8c      	ldr	r3, [pc, #560]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800184c:	d10b      	bne.n	8001866 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184e:	4b89      	ldr	r3, [pc, #548]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d06c      	beq.n	8001934 <HAL_RCC_OscConfig+0x12c>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d168      	bne.n	8001934 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e246      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186e:	d106      	bne.n	800187e <HAL_RCC_OscConfig+0x76>
 8001870:	4b80      	ldr	r3, [pc, #512]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a7f      	ldr	r2, [pc, #508]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e02e      	b.n	80018dc <HAL_RCC_OscConfig+0xd4>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x98>
 8001886:	4b7b      	ldr	r3, [pc, #492]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a7a      	ldr	r2, [pc, #488]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 800188c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b78      	ldr	r3, [pc, #480]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a77      	ldr	r2, [pc, #476]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e01d      	b.n	80018dc <HAL_RCC_OscConfig+0xd4>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0xbc>
 80018aa:	4b72      	ldr	r3, [pc, #456]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a71      	ldr	r2, [pc, #452]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	4b6f      	ldr	r3, [pc, #444]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6e      	ldr	r2, [pc, #440]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c0:	6013      	str	r3, [r2, #0]
 80018c2:	e00b      	b.n	80018dc <HAL_RCC_OscConfig+0xd4>
 80018c4:	4b6b      	ldr	r3, [pc, #428]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a6a      	ldr	r2, [pc, #424]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b68      	ldr	r3, [pc, #416]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a67      	ldr	r2, [pc, #412]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d013      	beq.n	800190c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fc78 	bl	80011d8 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff fc74 	bl	80011d8 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	; 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e1fa      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	4b5d      	ldr	r3, [pc, #372]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0xe4>
 800190a:	e014      	b.n	8001936 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fc64 	bl	80011d8 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fc60 	bl	80011d8 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e1e6      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f0      	bne.n	8001914 <HAL_RCC_OscConfig+0x10c>
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d063      	beq.n	8001a0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001942:	4b4c      	ldr	r3, [pc, #304]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f003 030c 	and.w	r3, r3, #12
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00b      	beq.n	8001966 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800194e:	4b49      	ldr	r3, [pc, #292]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b08      	cmp	r3, #8
 8001958:	d11c      	bne.n	8001994 <HAL_RCC_OscConfig+0x18c>
 800195a:	4b46      	ldr	r3, [pc, #280]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d116      	bne.n	8001994 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001966:	4b43      	ldr	r3, [pc, #268]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_RCC_OscConfig+0x176>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d001      	beq.n	800197e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e1ba      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197e:	4b3d      	ldr	r3, [pc, #244]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	00db      	lsls	r3, r3, #3
 800198c:	4939      	ldr	r1, [pc, #228]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	e03a      	b.n	8001a0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d020      	beq.n	80019de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199c:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <HAL_RCC_OscConfig+0x270>)
 800199e:	2201      	movs	r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a2:	f7ff fc19 	bl	80011d8 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff fc15 	bl	80011d8 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e19b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019bc:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4927      	ldr	r1, [pc, #156]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e015      	b.n	8001a0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019de:	4b26      	ldr	r3, [pc, #152]	; (8001a78 <HAL_RCC_OscConfig+0x270>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7ff fbf8 	bl	80011d8 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ec:	f7ff fbf4 	bl	80011d8 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e17a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d03a      	beq.n	8001a8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d019      	beq.n	8001a52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a24:	f7ff fbd8 	bl	80011d8 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fbd4 	bl	80011d8 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e15a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f000 fad8 	bl	8002000 <RCC_Delay>
 8001a50:	e01c      	b.n	8001a8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_RCC_OscConfig+0x274>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a58:	f7ff fbbe 	bl	80011d8 <HAL_GetTick>
 8001a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5e:	e00f      	b.n	8001a80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a60:	f7ff fbba 	bl	80011d8 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d908      	bls.n	8001a80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e140      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	42420000 	.word	0x42420000
 8001a7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	4b9e      	ldr	r3, [pc, #632]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1e9      	bne.n	8001a60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 80a6 	beq.w	8001be6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9e:	4b97      	ldr	r3, [pc, #604]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10d      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	4b94      	ldr	r3, [pc, #592]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a93      	ldr	r2, [pc, #588]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	61d3      	str	r3, [r2, #28]
 8001ab6:	4b91      	ldr	r3, [pc, #580]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac6:	4b8e      	ldr	r3, [pc, #568]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d118      	bne.n	8001b04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad2:	4b8b      	ldr	r3, [pc, #556]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a8a      	ldr	r2, [pc, #552]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ade:	f7ff fb7b 	bl	80011d8 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae6:	f7ff fb77 	bl	80011d8 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b64      	cmp	r3, #100	; 0x64
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e0fd      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	4b81      	ldr	r3, [pc, #516]	; (8001d00 <HAL_RCC_OscConfig+0x4f8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x312>
 8001b0c:	4b7b      	ldr	r3, [pc, #492]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4a7a      	ldr	r2, [pc, #488]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6213      	str	r3, [r2, #32]
 8001b18:	e02d      	b.n	8001b76 <HAL_RCC_OscConfig+0x36e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x334>
 8001b22:	4b76      	ldr	r3, [pc, #472]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	6a1b      	ldr	r3, [r3, #32]
 8001b26:	4a75      	ldr	r2, [pc, #468]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6213      	str	r3, [r2, #32]
 8001b2e:	4b73      	ldr	r3, [pc, #460]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	4a72      	ldr	r2, [pc, #456]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	f023 0304 	bic.w	r3, r3, #4
 8001b38:	6213      	str	r3, [r2, #32]
 8001b3a:	e01c      	b.n	8001b76 <HAL_RCC_OscConfig+0x36e>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d10c      	bne.n	8001b5e <HAL_RCC_OscConfig+0x356>
 8001b44:	4b6d      	ldr	r3, [pc, #436]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a6c      	ldr	r2, [pc, #432]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	f043 0304 	orr.w	r3, r3, #4
 8001b4e:	6213      	str	r3, [r2, #32]
 8001b50:	4b6a      	ldr	r3, [pc, #424]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4a69      	ldr	r2, [pc, #420]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6213      	str	r3, [r2, #32]
 8001b5c:	e00b      	b.n	8001b76 <HAL_RCC_OscConfig+0x36e>
 8001b5e:	4b67      	ldr	r3, [pc, #412]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	4a66      	ldr	r2, [pc, #408]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6213      	str	r3, [r2, #32]
 8001b6a:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a63      	ldr	r2, [pc, #396]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	f023 0304 	bic.w	r3, r3, #4
 8001b74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d015      	beq.n	8001baa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fb2b 	bl	80011d8 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7ff fb27 	bl	80011d8 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e0ab      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9c:	4b57      	ldr	r3, [pc, #348]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ee      	beq.n	8001b86 <HAL_RCC_OscConfig+0x37e>
 8001ba8:	e014      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001baa:	f7ff fb15 	bl	80011d8 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb0:	e00a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb2:	f7ff fb11 	bl	80011d8 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e095      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc8:	4b4c      	ldr	r3, [pc, #304]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ee      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bd4:	7dfb      	ldrb	r3, [r7, #23]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d105      	bne.n	8001be6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bda:	4b48      	ldr	r3, [pc, #288]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a47      	ldr	r2, [pc, #284]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f000 8081 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 030c 	and.w	r3, r3, #12
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d061      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d146      	bne.n	8001c92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c04:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <HAL_RCC_OscConfig+0x4fc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fae5 	bl	80011d8 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff fae1 	bl	80011d8 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e067      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c24:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1f0      	bne.n	8001c12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c38:	d108      	bne.n	8001c4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c3a:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	492d      	ldr	r1, [pc, #180]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c4c:	4b2b      	ldr	r3, [pc, #172]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a19      	ldr	r1, [r3, #32]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	4927      	ldr	r1, [pc, #156]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x4fc>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fab5 	bl	80011d8 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c72:	f7ff fab1 	bl	80011d8 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e037      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c84:	4b1d      	ldr	r3, [pc, #116]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x46a>
 8001c90:	e02f      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <HAL_RCC_OscConfig+0x4fc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fa9e 	bl	80011d8 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7ff fa9a 	bl	80011d8 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e020      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb2:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x498>
 8001cbe:	e018      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e013      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d106      	bne.n	8001cee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d001      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e000      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40007000 	.word	0x40007000
 8001d04:	42420060 	.word	0x42420060

08001d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0d0      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d910      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b67      	ldr	r3, [pc, #412]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4965      	ldr	r1, [pc, #404]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b63      	ldr	r3, [pc, #396]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b8      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a58      	ldr	r2, [pc, #352]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d7c:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a52      	ldr	r2, [pc, #328]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	494d      	ldr	r1, [pc, #308]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d040      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d115      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e07f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e073      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e06b      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4b39      	ldr	r3, [pc, #228]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4936      	ldr	r1, [pc, #216]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df8:	f7ff f9ee 	bl	80011d8 <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7ff f9ea 	bl	80011d8 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e053      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 020c 	and.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1eb      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b27      	ldr	r3, [pc, #156]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d210      	bcs.n	8001e58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	4922      	ldr	r1, [pc, #136]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e032      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4916      	ldr	r1, [pc, #88]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	490e      	ldr	r1, [pc, #56]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e96:	f000 f821 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	490a      	ldr	r1, [pc, #40]	; (8001ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea8:	5ccb      	ldrb	r3, [r1, r3]
 8001eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001eae:	4a09      	ldr	r2, [pc, #36]	; (8001ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eb2:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f94c 	bl	8001154 <HAL_InitTick>

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40022000 	.word	0x40022000
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08004c7c 	.word	0x08004c7c
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b490      	push	{r4, r7}
 8001ede:	b08a      	sub	sp, #40	; 0x28
 8001ee0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ee4:	1d3c      	adds	r4, r7, #4
 8001ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ee8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001eec:	f240 2301 	movw	r3, #513	; 0x201
 8001ef0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d002      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x40>
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d003      	beq.n	8001f22 <HAL_RCC_GetSysClockFreq+0x46>
 8001f1a:	e02d      	b.n	8001f78 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f1e:	623b      	str	r3, [r7, #32]
      break;
 8001f20:	e02d      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	0c9b      	lsrs	r3, r3, #18
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f2e:	4413      	add	r3, r2
 8001f30:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f34:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d013      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	0c5b      	lsrs	r3, r3, #17
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f4e:	4413      	add	r3, r2
 8001f50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f5a:	fb02 f203 	mul.w	r2, r2, r3
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
 8001f66:	e004      	b.n	8001f72 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f6c:	fb02 f303 	mul.w	r3, r2, r3
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f74:	623b      	str	r3, [r7, #32]
      break;
 8001f76:	e002      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f7a:	623b      	str	r3, [r7, #32]
      break;
 8001f7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3728      	adds	r7, #40	; 0x28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc90      	pop	{r4, r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	08004c6c 	.word	0x08004c6c
 8001f90:	40021000 	.word	0x40021000
 8001f94:	007a1200 	.word	0x007a1200
 8001f98:	003d0900 	.word	0x003d0900

08001f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa0:	4b02      	ldr	r3, [pc, #8]	; (8001fac <HAL_RCC_GetHCLKFreq+0x10>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	20000000 	.word	0x20000000

08001fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fb4:	f7ff fff2 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	0a1b      	lsrs	r3, r3, #8
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	4903      	ldr	r1, [pc, #12]	; (8001fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
 8001fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	08004c8c 	.word	0x08004c8c

08001fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fdc:	f7ff ffde 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	0adb      	lsrs	r3, r3, #11
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	4903      	ldr	r1, [pc, #12]	; (8001ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fee:	5ccb      	ldrb	r3, [r1, r3]
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08004c8c 	.word	0x08004c8c

08002000 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002008:	4b0a      	ldr	r3, [pc, #40]	; (8002034 <RCC_Delay+0x34>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <RCC_Delay+0x38>)
 800200e:	fba2 2303 	umull	r2, r3, r2, r3
 8002012:	0a5b      	lsrs	r3, r3, #9
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800201c:	bf00      	nop
  }
  while (Delay --);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1e5a      	subs	r2, r3, #1
 8002022:	60fa      	str	r2, [r7, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1f9      	bne.n	800201c <RCC_Delay+0x1c>
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	20000000 	.word	0x20000000
 8002038:	10624dd3 	.word	0x10624dd3

0800203c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e03f      	b.n	80020ce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe ffee 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2224      	movs	r2, #36	; 0x24
 800206c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800207e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f829 	bl	80020d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002094:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2220      	movs	r2, #32
 80020c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002112:	f023 030c 	bic.w	r3, r3, #12
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6812      	ldr	r2, [r2, #0]
 800211a:	68b9      	ldr	r1, [r7, #8]
 800211c:	430b      	orrs	r3, r1
 800211e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a2c      	ldr	r2, [pc, #176]	; (80021ec <UART_SetConfig+0x114>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d103      	bne.n	8002148 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002140:	f7ff ff4a 	bl	8001fd8 <HAL_RCC_GetPCLK2Freq>
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	e002      	b.n	800214e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002148:	f7ff ff32 	bl	8001fb0 <HAL_RCC_GetPCLK1Freq>
 800214c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	009a      	lsls	r2, r3, #2
 8002158:	441a      	add	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	fbb2 f3f3 	udiv	r3, r2, r3
 8002164:	4a22      	ldr	r2, [pc, #136]	; (80021f0 <UART_SetConfig+0x118>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	0119      	lsls	r1, r3, #4
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	009a      	lsls	r2, r3, #2
 8002178:	441a      	add	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	fbb2 f2f3 	udiv	r2, r2, r3
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <UART_SetConfig+0x118>)
 8002186:	fba3 0302 	umull	r0, r3, r3, r2
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2064      	movs	r0, #100	; 0x64
 800218e:	fb00 f303 	mul.w	r3, r0, r3
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	3332      	adds	r3, #50	; 0x32
 8002198:	4a15      	ldr	r2, [pc, #84]	; (80021f0 <UART_SetConfig+0x118>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	095b      	lsrs	r3, r3, #5
 80021a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a4:	4419      	add	r1, r3
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	009a      	lsls	r2, r3, #2
 80021b0:	441a      	add	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <UART_SetConfig+0x118>)
 80021be:	fba3 0302 	umull	r0, r3, r3, r2
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2064      	movs	r0, #100	; 0x64
 80021c6:	fb00 f303 	mul.w	r3, r0, r3
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	3332      	adds	r3, #50	; 0x32
 80021d0:	4a07      	ldr	r2, [pc, #28]	; (80021f0 <UART_SetConfig+0x118>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	f003 020f 	and.w	r2, r3, #15
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	440a      	add	r2, r1
 80021e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40013800 	.word	0x40013800
 80021f0:	51eb851f 	.word	0x51eb851f

080021f4 <__errno>:
 80021f4:	4b01      	ldr	r3, [pc, #4]	; (80021fc <__errno+0x8>)
 80021f6:	6818      	ldr	r0, [r3, #0]
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	2000000c 	.word	0x2000000c

08002200 <__libc_init_array>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	2600      	movs	r6, #0
 8002204:	4d0c      	ldr	r5, [pc, #48]	; (8002238 <__libc_init_array+0x38>)
 8002206:	4c0d      	ldr	r4, [pc, #52]	; (800223c <__libc_init_array+0x3c>)
 8002208:	1b64      	subs	r4, r4, r5
 800220a:	10a4      	asrs	r4, r4, #2
 800220c:	42a6      	cmp	r6, r4
 800220e:	d109      	bne.n	8002224 <__libc_init_array+0x24>
 8002210:	f002 fd10 	bl	8004c34 <_init>
 8002214:	2600      	movs	r6, #0
 8002216:	4d0a      	ldr	r5, [pc, #40]	; (8002240 <__libc_init_array+0x40>)
 8002218:	4c0a      	ldr	r4, [pc, #40]	; (8002244 <__libc_init_array+0x44>)
 800221a:	1b64      	subs	r4, r4, r5
 800221c:	10a4      	asrs	r4, r4, #2
 800221e:	42a6      	cmp	r6, r4
 8002220:	d105      	bne.n	800222e <__libc_init_array+0x2e>
 8002222:	bd70      	pop	{r4, r5, r6, pc}
 8002224:	f855 3b04 	ldr.w	r3, [r5], #4
 8002228:	4798      	blx	r3
 800222a:	3601      	adds	r6, #1
 800222c:	e7ee      	b.n	800220c <__libc_init_array+0xc>
 800222e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002232:	4798      	blx	r3
 8002234:	3601      	adds	r6, #1
 8002236:	e7f2      	b.n	800221e <__libc_init_array+0x1e>
 8002238:	08005074 	.word	0x08005074
 800223c:	08005074 	.word	0x08005074
 8002240:	08005074 	.word	0x08005074
 8002244:	08005078 	.word	0x08005078

08002248 <memset>:
 8002248:	4603      	mov	r3, r0
 800224a:	4402      	add	r2, r0
 800224c:	4293      	cmp	r3, r2
 800224e:	d100      	bne.n	8002252 <memset+0xa>
 8002250:	4770      	bx	lr
 8002252:	f803 1b01 	strb.w	r1, [r3], #1
 8002256:	e7f9      	b.n	800224c <memset+0x4>

08002258 <__cvt>:
 8002258:	2b00      	cmp	r3, #0
 800225a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800225e:	461f      	mov	r7, r3
 8002260:	bfbb      	ittet	lt
 8002262:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002266:	461f      	movlt	r7, r3
 8002268:	2300      	movge	r3, #0
 800226a:	232d      	movlt	r3, #45	; 0x2d
 800226c:	b088      	sub	sp, #32
 800226e:	4614      	mov	r4, r2
 8002270:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002272:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002274:	7013      	strb	r3, [r2, #0]
 8002276:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002278:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800227c:	f023 0820 	bic.w	r8, r3, #32
 8002280:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002284:	d005      	beq.n	8002292 <__cvt+0x3a>
 8002286:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800228a:	d100      	bne.n	800228e <__cvt+0x36>
 800228c:	3501      	adds	r5, #1
 800228e:	2302      	movs	r3, #2
 8002290:	e000      	b.n	8002294 <__cvt+0x3c>
 8002292:	2303      	movs	r3, #3
 8002294:	aa07      	add	r2, sp, #28
 8002296:	9204      	str	r2, [sp, #16]
 8002298:	aa06      	add	r2, sp, #24
 800229a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800229e:	e9cd 3500 	strd	r3, r5, [sp]
 80022a2:	4622      	mov	r2, r4
 80022a4:	463b      	mov	r3, r7
 80022a6:	f000 fcdf 	bl	8002c68 <_dtoa_r>
 80022aa:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80022ae:	4606      	mov	r6, r0
 80022b0:	d102      	bne.n	80022b8 <__cvt+0x60>
 80022b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80022b4:	07db      	lsls	r3, r3, #31
 80022b6:	d522      	bpl.n	80022fe <__cvt+0xa6>
 80022b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80022bc:	eb06 0905 	add.w	r9, r6, r5
 80022c0:	d110      	bne.n	80022e4 <__cvt+0x8c>
 80022c2:	7833      	ldrb	r3, [r6, #0]
 80022c4:	2b30      	cmp	r3, #48	; 0x30
 80022c6:	d10a      	bne.n	80022de <__cvt+0x86>
 80022c8:	2200      	movs	r2, #0
 80022ca:	2300      	movs	r3, #0
 80022cc:	4620      	mov	r0, r4
 80022ce:	4639      	mov	r1, r7
 80022d0:	f7fe fbd6 	bl	8000a80 <__aeabi_dcmpeq>
 80022d4:	b918      	cbnz	r0, 80022de <__cvt+0x86>
 80022d6:	f1c5 0501 	rsb	r5, r5, #1
 80022da:	f8ca 5000 	str.w	r5, [sl]
 80022de:	f8da 3000 	ldr.w	r3, [sl]
 80022e2:	4499      	add	r9, r3
 80022e4:	2200      	movs	r2, #0
 80022e6:	2300      	movs	r3, #0
 80022e8:	4620      	mov	r0, r4
 80022ea:	4639      	mov	r1, r7
 80022ec:	f7fe fbc8 	bl	8000a80 <__aeabi_dcmpeq>
 80022f0:	b108      	cbz	r0, 80022f6 <__cvt+0x9e>
 80022f2:	f8cd 901c 	str.w	r9, [sp, #28]
 80022f6:	2230      	movs	r2, #48	; 0x30
 80022f8:	9b07      	ldr	r3, [sp, #28]
 80022fa:	454b      	cmp	r3, r9
 80022fc:	d307      	bcc.n	800230e <__cvt+0xb6>
 80022fe:	4630      	mov	r0, r6
 8002300:	9b07      	ldr	r3, [sp, #28]
 8002302:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002304:	1b9b      	subs	r3, r3, r6
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	b008      	add	sp, #32
 800230a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800230e:	1c59      	adds	r1, r3, #1
 8002310:	9107      	str	r1, [sp, #28]
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	e7f0      	b.n	80022f8 <__cvt+0xa0>

08002316 <__exponent>:
 8002316:	4603      	mov	r3, r0
 8002318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800231a:	2900      	cmp	r1, #0
 800231c:	f803 2b02 	strb.w	r2, [r3], #2
 8002320:	bfb6      	itet	lt
 8002322:	222d      	movlt	r2, #45	; 0x2d
 8002324:	222b      	movge	r2, #43	; 0x2b
 8002326:	4249      	neglt	r1, r1
 8002328:	2909      	cmp	r1, #9
 800232a:	7042      	strb	r2, [r0, #1]
 800232c:	dd2b      	ble.n	8002386 <__exponent+0x70>
 800232e:	f10d 0407 	add.w	r4, sp, #7
 8002332:	46a4      	mov	ip, r4
 8002334:	270a      	movs	r7, #10
 8002336:	fb91 f6f7 	sdiv	r6, r1, r7
 800233a:	460a      	mov	r2, r1
 800233c:	46a6      	mov	lr, r4
 800233e:	fb07 1516 	mls	r5, r7, r6, r1
 8002342:	2a63      	cmp	r2, #99	; 0x63
 8002344:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8002348:	4631      	mov	r1, r6
 800234a:	f104 34ff 	add.w	r4, r4, #4294967295
 800234e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002352:	dcf0      	bgt.n	8002336 <__exponent+0x20>
 8002354:	3130      	adds	r1, #48	; 0x30
 8002356:	f1ae 0502 	sub.w	r5, lr, #2
 800235a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800235e:	4629      	mov	r1, r5
 8002360:	1c44      	adds	r4, r0, #1
 8002362:	4561      	cmp	r1, ip
 8002364:	d30a      	bcc.n	800237c <__exponent+0x66>
 8002366:	f10d 0209 	add.w	r2, sp, #9
 800236a:	eba2 020e 	sub.w	r2, r2, lr
 800236e:	4565      	cmp	r5, ip
 8002370:	bf88      	it	hi
 8002372:	2200      	movhi	r2, #0
 8002374:	4413      	add	r3, r2
 8002376:	1a18      	subs	r0, r3, r0
 8002378:	b003      	add	sp, #12
 800237a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800237c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002380:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002384:	e7ed      	b.n	8002362 <__exponent+0x4c>
 8002386:	2330      	movs	r3, #48	; 0x30
 8002388:	3130      	adds	r1, #48	; 0x30
 800238a:	7083      	strb	r3, [r0, #2]
 800238c:	70c1      	strb	r1, [r0, #3]
 800238e:	1d03      	adds	r3, r0, #4
 8002390:	e7f1      	b.n	8002376 <__exponent+0x60>
	...

08002394 <_printf_float>:
 8002394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002398:	b091      	sub	sp, #68	; 0x44
 800239a:	460c      	mov	r4, r1
 800239c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80023a0:	4616      	mov	r6, r2
 80023a2:	461f      	mov	r7, r3
 80023a4:	4605      	mov	r5, r0
 80023a6:	f001 fb43 	bl	8003a30 <_localeconv_r>
 80023aa:	6803      	ldr	r3, [r0, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	9309      	str	r3, [sp, #36]	; 0x24
 80023b0:	f7fd ff3a 	bl	8000228 <strlen>
 80023b4:	2300      	movs	r3, #0
 80023b6:	930e      	str	r3, [sp, #56]	; 0x38
 80023b8:	f8d8 3000 	ldr.w	r3, [r8]
 80023bc:	900a      	str	r0, [sp, #40]	; 0x28
 80023be:	3307      	adds	r3, #7
 80023c0:	f023 0307 	bic.w	r3, r3, #7
 80023c4:	f103 0208 	add.w	r2, r3, #8
 80023c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80023cc:	f8d4 b000 	ldr.w	fp, [r4]
 80023d0:	f8c8 2000 	str.w	r2, [r8]
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80023dc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80023e0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80023e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80023e6:	f04f 32ff 	mov.w	r2, #4294967295
 80023ea:	4640      	mov	r0, r8
 80023ec:	4b9c      	ldr	r3, [pc, #624]	; (8002660 <_printf_float+0x2cc>)
 80023ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80023f0:	f7fe fb78 	bl	8000ae4 <__aeabi_dcmpun>
 80023f4:	bb70      	cbnz	r0, 8002454 <_printf_float+0xc0>
 80023f6:	f04f 32ff 	mov.w	r2, #4294967295
 80023fa:	4640      	mov	r0, r8
 80023fc:	4b98      	ldr	r3, [pc, #608]	; (8002660 <_printf_float+0x2cc>)
 80023fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002400:	f7fe fb52 	bl	8000aa8 <__aeabi_dcmple>
 8002404:	bb30      	cbnz	r0, 8002454 <_printf_float+0xc0>
 8002406:	2200      	movs	r2, #0
 8002408:	2300      	movs	r3, #0
 800240a:	4640      	mov	r0, r8
 800240c:	4651      	mov	r1, sl
 800240e:	f7fe fb41 	bl	8000a94 <__aeabi_dcmplt>
 8002412:	b110      	cbz	r0, 800241a <_printf_float+0x86>
 8002414:	232d      	movs	r3, #45	; 0x2d
 8002416:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800241a:	4b92      	ldr	r3, [pc, #584]	; (8002664 <_printf_float+0x2d0>)
 800241c:	4892      	ldr	r0, [pc, #584]	; (8002668 <_printf_float+0x2d4>)
 800241e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002422:	bf94      	ite	ls
 8002424:	4698      	movls	r8, r3
 8002426:	4680      	movhi	r8, r0
 8002428:	2303      	movs	r3, #3
 800242a:	f04f 0a00 	mov.w	sl, #0
 800242e:	6123      	str	r3, [r4, #16]
 8002430:	f02b 0304 	bic.w	r3, fp, #4
 8002434:	6023      	str	r3, [r4, #0]
 8002436:	4633      	mov	r3, r6
 8002438:	4621      	mov	r1, r4
 800243a:	4628      	mov	r0, r5
 800243c:	9700      	str	r7, [sp, #0]
 800243e:	aa0f      	add	r2, sp, #60	; 0x3c
 8002440:	f000 f9d4 	bl	80027ec <_printf_common>
 8002444:	3001      	adds	r0, #1
 8002446:	f040 8090 	bne.w	800256a <_printf_float+0x1d6>
 800244a:	f04f 30ff 	mov.w	r0, #4294967295
 800244e:	b011      	add	sp, #68	; 0x44
 8002450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002454:	4642      	mov	r2, r8
 8002456:	4653      	mov	r3, sl
 8002458:	4640      	mov	r0, r8
 800245a:	4651      	mov	r1, sl
 800245c:	f7fe fb42 	bl	8000ae4 <__aeabi_dcmpun>
 8002460:	b148      	cbz	r0, 8002476 <_printf_float+0xe2>
 8002462:	f1ba 0f00 	cmp.w	sl, #0
 8002466:	bfb8      	it	lt
 8002468:	232d      	movlt	r3, #45	; 0x2d
 800246a:	4880      	ldr	r0, [pc, #512]	; (800266c <_printf_float+0x2d8>)
 800246c:	bfb8      	it	lt
 800246e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002472:	4b7f      	ldr	r3, [pc, #508]	; (8002670 <_printf_float+0x2dc>)
 8002474:	e7d3      	b.n	800241e <_printf_float+0x8a>
 8002476:	6863      	ldr	r3, [r4, #4]
 8002478:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	d142      	bne.n	8002506 <_printf_float+0x172>
 8002480:	2306      	movs	r3, #6
 8002482:	6063      	str	r3, [r4, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	9206      	str	r2, [sp, #24]
 8002488:	aa0e      	add	r2, sp, #56	; 0x38
 800248a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800248e:	aa0d      	add	r2, sp, #52	; 0x34
 8002490:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8002494:	9203      	str	r2, [sp, #12]
 8002496:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800249a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800249e:	6023      	str	r3, [r4, #0]
 80024a0:	6863      	ldr	r3, [r4, #4]
 80024a2:	4642      	mov	r2, r8
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	4628      	mov	r0, r5
 80024a8:	4653      	mov	r3, sl
 80024aa:	910b      	str	r1, [sp, #44]	; 0x2c
 80024ac:	f7ff fed4 	bl	8002258 <__cvt>
 80024b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80024b2:	4680      	mov	r8, r0
 80024b4:	2947      	cmp	r1, #71	; 0x47
 80024b6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80024b8:	d108      	bne.n	80024cc <_printf_float+0x138>
 80024ba:	1cc8      	adds	r0, r1, #3
 80024bc:	db02      	blt.n	80024c4 <_printf_float+0x130>
 80024be:	6863      	ldr	r3, [r4, #4]
 80024c0:	4299      	cmp	r1, r3
 80024c2:	dd40      	ble.n	8002546 <_printf_float+0x1b2>
 80024c4:	f1a9 0902 	sub.w	r9, r9, #2
 80024c8:	fa5f f989 	uxtb.w	r9, r9
 80024cc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80024d0:	d81f      	bhi.n	8002512 <_printf_float+0x17e>
 80024d2:	464a      	mov	r2, r9
 80024d4:	3901      	subs	r1, #1
 80024d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80024da:	910d      	str	r1, [sp, #52]	; 0x34
 80024dc:	f7ff ff1b 	bl	8002316 <__exponent>
 80024e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80024e2:	4682      	mov	sl, r0
 80024e4:	1813      	adds	r3, r2, r0
 80024e6:	2a01      	cmp	r2, #1
 80024e8:	6123      	str	r3, [r4, #16]
 80024ea:	dc02      	bgt.n	80024f2 <_printf_float+0x15e>
 80024ec:	6822      	ldr	r2, [r4, #0]
 80024ee:	07d2      	lsls	r2, r2, #31
 80024f0:	d501      	bpl.n	80024f6 <_printf_float+0x162>
 80024f2:	3301      	adds	r3, #1
 80024f4:	6123      	str	r3, [r4, #16]
 80024f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d09b      	beq.n	8002436 <_printf_float+0xa2>
 80024fe:	232d      	movs	r3, #45	; 0x2d
 8002500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002504:	e797      	b.n	8002436 <_printf_float+0xa2>
 8002506:	2947      	cmp	r1, #71	; 0x47
 8002508:	d1bc      	bne.n	8002484 <_printf_float+0xf0>
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1ba      	bne.n	8002484 <_printf_float+0xf0>
 800250e:	2301      	movs	r3, #1
 8002510:	e7b7      	b.n	8002482 <_printf_float+0xee>
 8002512:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8002516:	d118      	bne.n	800254a <_printf_float+0x1b6>
 8002518:	2900      	cmp	r1, #0
 800251a:	6863      	ldr	r3, [r4, #4]
 800251c:	dd0b      	ble.n	8002536 <_printf_float+0x1a2>
 800251e:	6121      	str	r1, [r4, #16]
 8002520:	b913      	cbnz	r3, 8002528 <_printf_float+0x194>
 8002522:	6822      	ldr	r2, [r4, #0]
 8002524:	07d0      	lsls	r0, r2, #31
 8002526:	d502      	bpl.n	800252e <_printf_float+0x19a>
 8002528:	3301      	adds	r3, #1
 800252a:	440b      	add	r3, r1
 800252c:	6123      	str	r3, [r4, #16]
 800252e:	f04f 0a00 	mov.w	sl, #0
 8002532:	65a1      	str	r1, [r4, #88]	; 0x58
 8002534:	e7df      	b.n	80024f6 <_printf_float+0x162>
 8002536:	b913      	cbnz	r3, 800253e <_printf_float+0x1aa>
 8002538:	6822      	ldr	r2, [r4, #0]
 800253a:	07d2      	lsls	r2, r2, #31
 800253c:	d501      	bpl.n	8002542 <_printf_float+0x1ae>
 800253e:	3302      	adds	r3, #2
 8002540:	e7f4      	b.n	800252c <_printf_float+0x198>
 8002542:	2301      	movs	r3, #1
 8002544:	e7f2      	b.n	800252c <_printf_float+0x198>
 8002546:	f04f 0967 	mov.w	r9, #103	; 0x67
 800254a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800254c:	4299      	cmp	r1, r3
 800254e:	db05      	blt.n	800255c <_printf_float+0x1c8>
 8002550:	6823      	ldr	r3, [r4, #0]
 8002552:	6121      	str	r1, [r4, #16]
 8002554:	07d8      	lsls	r0, r3, #31
 8002556:	d5ea      	bpl.n	800252e <_printf_float+0x19a>
 8002558:	1c4b      	adds	r3, r1, #1
 800255a:	e7e7      	b.n	800252c <_printf_float+0x198>
 800255c:	2900      	cmp	r1, #0
 800255e:	bfcc      	ite	gt
 8002560:	2201      	movgt	r2, #1
 8002562:	f1c1 0202 	rsble	r2, r1, #2
 8002566:	4413      	add	r3, r2
 8002568:	e7e0      	b.n	800252c <_printf_float+0x198>
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	055a      	lsls	r2, r3, #21
 800256e:	d407      	bmi.n	8002580 <_printf_float+0x1ec>
 8002570:	6923      	ldr	r3, [r4, #16]
 8002572:	4642      	mov	r2, r8
 8002574:	4631      	mov	r1, r6
 8002576:	4628      	mov	r0, r5
 8002578:	47b8      	blx	r7
 800257a:	3001      	adds	r0, #1
 800257c:	d12b      	bne.n	80025d6 <_printf_float+0x242>
 800257e:	e764      	b.n	800244a <_printf_float+0xb6>
 8002580:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002584:	f240 80dd 	bls.w	8002742 <_printf_float+0x3ae>
 8002588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800258c:	2200      	movs	r2, #0
 800258e:	2300      	movs	r3, #0
 8002590:	f7fe fa76 	bl	8000a80 <__aeabi_dcmpeq>
 8002594:	2800      	cmp	r0, #0
 8002596:	d033      	beq.n	8002600 <_printf_float+0x26c>
 8002598:	2301      	movs	r3, #1
 800259a:	4631      	mov	r1, r6
 800259c:	4628      	mov	r0, r5
 800259e:	4a35      	ldr	r2, [pc, #212]	; (8002674 <_printf_float+0x2e0>)
 80025a0:	47b8      	blx	r7
 80025a2:	3001      	adds	r0, #1
 80025a4:	f43f af51 	beq.w	800244a <_printf_float+0xb6>
 80025a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80025ac:	429a      	cmp	r2, r3
 80025ae:	db02      	blt.n	80025b6 <_printf_float+0x222>
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	07d8      	lsls	r0, r3, #31
 80025b4:	d50f      	bpl.n	80025d6 <_printf_float+0x242>
 80025b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80025ba:	4631      	mov	r1, r6
 80025bc:	4628      	mov	r0, r5
 80025be:	47b8      	blx	r7
 80025c0:	3001      	adds	r0, #1
 80025c2:	f43f af42 	beq.w	800244a <_printf_float+0xb6>
 80025c6:	f04f 0800 	mov.w	r8, #0
 80025ca:	f104 091a 	add.w	r9, r4, #26
 80025ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025d0:	3b01      	subs	r3, #1
 80025d2:	4543      	cmp	r3, r8
 80025d4:	dc09      	bgt.n	80025ea <_printf_float+0x256>
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	079b      	lsls	r3, r3, #30
 80025da:	f100 8102 	bmi.w	80027e2 <_printf_float+0x44e>
 80025de:	68e0      	ldr	r0, [r4, #12]
 80025e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80025e2:	4298      	cmp	r0, r3
 80025e4:	bfb8      	it	lt
 80025e6:	4618      	movlt	r0, r3
 80025e8:	e731      	b.n	800244e <_printf_float+0xba>
 80025ea:	2301      	movs	r3, #1
 80025ec:	464a      	mov	r2, r9
 80025ee:	4631      	mov	r1, r6
 80025f0:	4628      	mov	r0, r5
 80025f2:	47b8      	blx	r7
 80025f4:	3001      	adds	r0, #1
 80025f6:	f43f af28 	beq.w	800244a <_printf_float+0xb6>
 80025fa:	f108 0801 	add.w	r8, r8, #1
 80025fe:	e7e6      	b.n	80025ce <_printf_float+0x23a>
 8002600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002602:	2b00      	cmp	r3, #0
 8002604:	dc38      	bgt.n	8002678 <_printf_float+0x2e4>
 8002606:	2301      	movs	r3, #1
 8002608:	4631      	mov	r1, r6
 800260a:	4628      	mov	r0, r5
 800260c:	4a19      	ldr	r2, [pc, #100]	; (8002674 <_printf_float+0x2e0>)
 800260e:	47b8      	blx	r7
 8002610:	3001      	adds	r0, #1
 8002612:	f43f af1a 	beq.w	800244a <_printf_float+0xb6>
 8002616:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800261a:	4313      	orrs	r3, r2
 800261c:	d102      	bne.n	8002624 <_printf_float+0x290>
 800261e:	6823      	ldr	r3, [r4, #0]
 8002620:	07d9      	lsls	r1, r3, #31
 8002622:	d5d8      	bpl.n	80025d6 <_printf_float+0x242>
 8002624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002628:	4631      	mov	r1, r6
 800262a:	4628      	mov	r0, r5
 800262c:	47b8      	blx	r7
 800262e:	3001      	adds	r0, #1
 8002630:	f43f af0b 	beq.w	800244a <_printf_float+0xb6>
 8002634:	f04f 0900 	mov.w	r9, #0
 8002638:	f104 0a1a 	add.w	sl, r4, #26
 800263c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800263e:	425b      	negs	r3, r3
 8002640:	454b      	cmp	r3, r9
 8002642:	dc01      	bgt.n	8002648 <_printf_float+0x2b4>
 8002644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002646:	e794      	b.n	8002572 <_printf_float+0x1de>
 8002648:	2301      	movs	r3, #1
 800264a:	4652      	mov	r2, sl
 800264c:	4631      	mov	r1, r6
 800264e:	4628      	mov	r0, r5
 8002650:	47b8      	blx	r7
 8002652:	3001      	adds	r0, #1
 8002654:	f43f aef9 	beq.w	800244a <_printf_float+0xb6>
 8002658:	f109 0901 	add.w	r9, r9, #1
 800265c:	e7ee      	b.n	800263c <_printf_float+0x2a8>
 800265e:	bf00      	nop
 8002660:	7fefffff 	.word	0x7fefffff
 8002664:	08004c98 	.word	0x08004c98
 8002668:	08004c9c 	.word	0x08004c9c
 800266c:	08004ca4 	.word	0x08004ca4
 8002670:	08004ca0 	.word	0x08004ca0
 8002674:	08004ca8 	.word	0x08004ca8
 8002678:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800267a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800267c:	429a      	cmp	r2, r3
 800267e:	bfa8      	it	ge
 8002680:	461a      	movge	r2, r3
 8002682:	2a00      	cmp	r2, #0
 8002684:	4691      	mov	r9, r2
 8002686:	dc37      	bgt.n	80026f8 <_printf_float+0x364>
 8002688:	f04f 0b00 	mov.w	fp, #0
 800268c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002690:	f104 021a 	add.w	r2, r4, #26
 8002694:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002698:	ebaa 0309 	sub.w	r3, sl, r9
 800269c:	455b      	cmp	r3, fp
 800269e:	dc33      	bgt.n	8002708 <_printf_float+0x374>
 80026a0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80026a4:	429a      	cmp	r2, r3
 80026a6:	db3b      	blt.n	8002720 <_printf_float+0x38c>
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	07da      	lsls	r2, r3, #31
 80026ac:	d438      	bmi.n	8002720 <_printf_float+0x38c>
 80026ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80026b0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80026b2:	eba2 030a 	sub.w	r3, r2, sl
 80026b6:	eba2 0901 	sub.w	r9, r2, r1
 80026ba:	4599      	cmp	r9, r3
 80026bc:	bfa8      	it	ge
 80026be:	4699      	movge	r9, r3
 80026c0:	f1b9 0f00 	cmp.w	r9, #0
 80026c4:	dc34      	bgt.n	8002730 <_printf_float+0x39c>
 80026c6:	f04f 0800 	mov.w	r8, #0
 80026ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80026ce:	f104 0a1a 	add.w	sl, r4, #26
 80026d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	eba3 0309 	sub.w	r3, r3, r9
 80026dc:	4543      	cmp	r3, r8
 80026de:	f77f af7a 	ble.w	80025d6 <_printf_float+0x242>
 80026e2:	2301      	movs	r3, #1
 80026e4:	4652      	mov	r2, sl
 80026e6:	4631      	mov	r1, r6
 80026e8:	4628      	mov	r0, r5
 80026ea:	47b8      	blx	r7
 80026ec:	3001      	adds	r0, #1
 80026ee:	f43f aeac 	beq.w	800244a <_printf_float+0xb6>
 80026f2:	f108 0801 	add.w	r8, r8, #1
 80026f6:	e7ec      	b.n	80026d2 <_printf_float+0x33e>
 80026f8:	4613      	mov	r3, r2
 80026fa:	4631      	mov	r1, r6
 80026fc:	4642      	mov	r2, r8
 80026fe:	4628      	mov	r0, r5
 8002700:	47b8      	blx	r7
 8002702:	3001      	adds	r0, #1
 8002704:	d1c0      	bne.n	8002688 <_printf_float+0x2f4>
 8002706:	e6a0      	b.n	800244a <_printf_float+0xb6>
 8002708:	2301      	movs	r3, #1
 800270a:	4631      	mov	r1, r6
 800270c:	4628      	mov	r0, r5
 800270e:	920b      	str	r2, [sp, #44]	; 0x2c
 8002710:	47b8      	blx	r7
 8002712:	3001      	adds	r0, #1
 8002714:	f43f ae99 	beq.w	800244a <_printf_float+0xb6>
 8002718:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800271a:	f10b 0b01 	add.w	fp, fp, #1
 800271e:	e7b9      	b.n	8002694 <_printf_float+0x300>
 8002720:	4631      	mov	r1, r6
 8002722:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002726:	4628      	mov	r0, r5
 8002728:	47b8      	blx	r7
 800272a:	3001      	adds	r0, #1
 800272c:	d1bf      	bne.n	80026ae <_printf_float+0x31a>
 800272e:	e68c      	b.n	800244a <_printf_float+0xb6>
 8002730:	464b      	mov	r3, r9
 8002732:	4631      	mov	r1, r6
 8002734:	4628      	mov	r0, r5
 8002736:	eb08 020a 	add.w	r2, r8, sl
 800273a:	47b8      	blx	r7
 800273c:	3001      	adds	r0, #1
 800273e:	d1c2      	bne.n	80026c6 <_printf_float+0x332>
 8002740:	e683      	b.n	800244a <_printf_float+0xb6>
 8002742:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002744:	2a01      	cmp	r2, #1
 8002746:	dc01      	bgt.n	800274c <_printf_float+0x3b8>
 8002748:	07db      	lsls	r3, r3, #31
 800274a:	d537      	bpl.n	80027bc <_printf_float+0x428>
 800274c:	2301      	movs	r3, #1
 800274e:	4642      	mov	r2, r8
 8002750:	4631      	mov	r1, r6
 8002752:	4628      	mov	r0, r5
 8002754:	47b8      	blx	r7
 8002756:	3001      	adds	r0, #1
 8002758:	f43f ae77 	beq.w	800244a <_printf_float+0xb6>
 800275c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002760:	4631      	mov	r1, r6
 8002762:	4628      	mov	r0, r5
 8002764:	47b8      	blx	r7
 8002766:	3001      	adds	r0, #1
 8002768:	f43f ae6f 	beq.w	800244a <_printf_float+0xb6>
 800276c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002770:	2200      	movs	r2, #0
 8002772:	2300      	movs	r3, #0
 8002774:	f7fe f984 	bl	8000a80 <__aeabi_dcmpeq>
 8002778:	b9d8      	cbnz	r0, 80027b2 <_printf_float+0x41e>
 800277a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800277c:	f108 0201 	add.w	r2, r8, #1
 8002780:	3b01      	subs	r3, #1
 8002782:	4631      	mov	r1, r6
 8002784:	4628      	mov	r0, r5
 8002786:	47b8      	blx	r7
 8002788:	3001      	adds	r0, #1
 800278a:	d10e      	bne.n	80027aa <_printf_float+0x416>
 800278c:	e65d      	b.n	800244a <_printf_float+0xb6>
 800278e:	2301      	movs	r3, #1
 8002790:	464a      	mov	r2, r9
 8002792:	4631      	mov	r1, r6
 8002794:	4628      	mov	r0, r5
 8002796:	47b8      	blx	r7
 8002798:	3001      	adds	r0, #1
 800279a:	f43f ae56 	beq.w	800244a <_printf_float+0xb6>
 800279e:	f108 0801 	add.w	r8, r8, #1
 80027a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80027a4:	3b01      	subs	r3, #1
 80027a6:	4543      	cmp	r3, r8
 80027a8:	dcf1      	bgt.n	800278e <_printf_float+0x3fa>
 80027aa:	4653      	mov	r3, sl
 80027ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80027b0:	e6e0      	b.n	8002574 <_printf_float+0x1e0>
 80027b2:	f04f 0800 	mov.w	r8, #0
 80027b6:	f104 091a 	add.w	r9, r4, #26
 80027ba:	e7f2      	b.n	80027a2 <_printf_float+0x40e>
 80027bc:	2301      	movs	r3, #1
 80027be:	4642      	mov	r2, r8
 80027c0:	e7df      	b.n	8002782 <_printf_float+0x3ee>
 80027c2:	2301      	movs	r3, #1
 80027c4:	464a      	mov	r2, r9
 80027c6:	4631      	mov	r1, r6
 80027c8:	4628      	mov	r0, r5
 80027ca:	47b8      	blx	r7
 80027cc:	3001      	adds	r0, #1
 80027ce:	f43f ae3c 	beq.w	800244a <_printf_float+0xb6>
 80027d2:	f108 0801 	add.w	r8, r8, #1
 80027d6:	68e3      	ldr	r3, [r4, #12]
 80027d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80027da:	1a5b      	subs	r3, r3, r1
 80027dc:	4543      	cmp	r3, r8
 80027de:	dcf0      	bgt.n	80027c2 <_printf_float+0x42e>
 80027e0:	e6fd      	b.n	80025de <_printf_float+0x24a>
 80027e2:	f04f 0800 	mov.w	r8, #0
 80027e6:	f104 0919 	add.w	r9, r4, #25
 80027ea:	e7f4      	b.n	80027d6 <_printf_float+0x442>

080027ec <_printf_common>:
 80027ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027f0:	4616      	mov	r6, r2
 80027f2:	4699      	mov	r9, r3
 80027f4:	688a      	ldr	r2, [r1, #8]
 80027f6:	690b      	ldr	r3, [r1, #16]
 80027f8:	4607      	mov	r7, r0
 80027fa:	4293      	cmp	r3, r2
 80027fc:	bfb8      	it	lt
 80027fe:	4613      	movlt	r3, r2
 8002800:	6033      	str	r3, [r6, #0]
 8002802:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002806:	460c      	mov	r4, r1
 8002808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800280c:	b10a      	cbz	r2, 8002812 <_printf_common+0x26>
 800280e:	3301      	adds	r3, #1
 8002810:	6033      	str	r3, [r6, #0]
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	0699      	lsls	r1, r3, #26
 8002816:	bf42      	ittt	mi
 8002818:	6833      	ldrmi	r3, [r6, #0]
 800281a:	3302      	addmi	r3, #2
 800281c:	6033      	strmi	r3, [r6, #0]
 800281e:	6825      	ldr	r5, [r4, #0]
 8002820:	f015 0506 	ands.w	r5, r5, #6
 8002824:	d106      	bne.n	8002834 <_printf_common+0x48>
 8002826:	f104 0a19 	add.w	sl, r4, #25
 800282a:	68e3      	ldr	r3, [r4, #12]
 800282c:	6832      	ldr	r2, [r6, #0]
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	42ab      	cmp	r3, r5
 8002832:	dc28      	bgt.n	8002886 <_printf_common+0x9a>
 8002834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002838:	1e13      	subs	r3, r2, #0
 800283a:	6822      	ldr	r2, [r4, #0]
 800283c:	bf18      	it	ne
 800283e:	2301      	movne	r3, #1
 8002840:	0692      	lsls	r2, r2, #26
 8002842:	d42d      	bmi.n	80028a0 <_printf_common+0xb4>
 8002844:	4649      	mov	r1, r9
 8002846:	4638      	mov	r0, r7
 8002848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800284c:	47c0      	blx	r8
 800284e:	3001      	adds	r0, #1
 8002850:	d020      	beq.n	8002894 <_printf_common+0xa8>
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	68e5      	ldr	r5, [r4, #12]
 8002856:	f003 0306 	and.w	r3, r3, #6
 800285a:	2b04      	cmp	r3, #4
 800285c:	bf18      	it	ne
 800285e:	2500      	movne	r5, #0
 8002860:	6832      	ldr	r2, [r6, #0]
 8002862:	f04f 0600 	mov.w	r6, #0
 8002866:	68a3      	ldr	r3, [r4, #8]
 8002868:	bf08      	it	eq
 800286a:	1aad      	subeq	r5, r5, r2
 800286c:	6922      	ldr	r2, [r4, #16]
 800286e:	bf08      	it	eq
 8002870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002874:	4293      	cmp	r3, r2
 8002876:	bfc4      	itt	gt
 8002878:	1a9b      	subgt	r3, r3, r2
 800287a:	18ed      	addgt	r5, r5, r3
 800287c:	341a      	adds	r4, #26
 800287e:	42b5      	cmp	r5, r6
 8002880:	d11a      	bne.n	80028b8 <_printf_common+0xcc>
 8002882:	2000      	movs	r0, #0
 8002884:	e008      	b.n	8002898 <_printf_common+0xac>
 8002886:	2301      	movs	r3, #1
 8002888:	4652      	mov	r2, sl
 800288a:	4649      	mov	r1, r9
 800288c:	4638      	mov	r0, r7
 800288e:	47c0      	blx	r8
 8002890:	3001      	adds	r0, #1
 8002892:	d103      	bne.n	800289c <_printf_common+0xb0>
 8002894:	f04f 30ff 	mov.w	r0, #4294967295
 8002898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800289c:	3501      	adds	r5, #1
 800289e:	e7c4      	b.n	800282a <_printf_common+0x3e>
 80028a0:	2030      	movs	r0, #48	; 0x30
 80028a2:	18e1      	adds	r1, r4, r3
 80028a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028a8:	1c5a      	adds	r2, r3, #1
 80028aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028ae:	4422      	add	r2, r4
 80028b0:	3302      	adds	r3, #2
 80028b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028b6:	e7c5      	b.n	8002844 <_printf_common+0x58>
 80028b8:	2301      	movs	r3, #1
 80028ba:	4622      	mov	r2, r4
 80028bc:	4649      	mov	r1, r9
 80028be:	4638      	mov	r0, r7
 80028c0:	47c0      	blx	r8
 80028c2:	3001      	adds	r0, #1
 80028c4:	d0e6      	beq.n	8002894 <_printf_common+0xa8>
 80028c6:	3601      	adds	r6, #1
 80028c8:	e7d9      	b.n	800287e <_printf_common+0x92>
	...

080028cc <_printf_i>:
 80028cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028d0:	460c      	mov	r4, r1
 80028d2:	7e27      	ldrb	r7, [r4, #24]
 80028d4:	4691      	mov	r9, r2
 80028d6:	2f78      	cmp	r7, #120	; 0x78
 80028d8:	4680      	mov	r8, r0
 80028da:	469a      	mov	sl, r3
 80028dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80028de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028e2:	d807      	bhi.n	80028f4 <_printf_i+0x28>
 80028e4:	2f62      	cmp	r7, #98	; 0x62
 80028e6:	d80a      	bhi.n	80028fe <_printf_i+0x32>
 80028e8:	2f00      	cmp	r7, #0
 80028ea:	f000 80d9 	beq.w	8002aa0 <_printf_i+0x1d4>
 80028ee:	2f58      	cmp	r7, #88	; 0x58
 80028f0:	f000 80a4 	beq.w	8002a3c <_printf_i+0x170>
 80028f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80028f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028fc:	e03a      	b.n	8002974 <_printf_i+0xa8>
 80028fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002902:	2b15      	cmp	r3, #21
 8002904:	d8f6      	bhi.n	80028f4 <_printf_i+0x28>
 8002906:	a001      	add	r0, pc, #4	; (adr r0, 800290c <_printf_i+0x40>)
 8002908:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800290c:	08002965 	.word	0x08002965
 8002910:	08002979 	.word	0x08002979
 8002914:	080028f5 	.word	0x080028f5
 8002918:	080028f5 	.word	0x080028f5
 800291c:	080028f5 	.word	0x080028f5
 8002920:	080028f5 	.word	0x080028f5
 8002924:	08002979 	.word	0x08002979
 8002928:	080028f5 	.word	0x080028f5
 800292c:	080028f5 	.word	0x080028f5
 8002930:	080028f5 	.word	0x080028f5
 8002934:	080028f5 	.word	0x080028f5
 8002938:	08002a87 	.word	0x08002a87
 800293c:	080029a9 	.word	0x080029a9
 8002940:	08002a69 	.word	0x08002a69
 8002944:	080028f5 	.word	0x080028f5
 8002948:	080028f5 	.word	0x080028f5
 800294c:	08002aa9 	.word	0x08002aa9
 8002950:	080028f5 	.word	0x080028f5
 8002954:	080029a9 	.word	0x080029a9
 8002958:	080028f5 	.word	0x080028f5
 800295c:	080028f5 	.word	0x080028f5
 8002960:	08002a71 	.word	0x08002a71
 8002964:	680b      	ldr	r3, [r1, #0]
 8002966:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800296a:	1d1a      	adds	r2, r3, #4
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	600a      	str	r2, [r1, #0]
 8002970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002974:	2301      	movs	r3, #1
 8002976:	e0a4      	b.n	8002ac2 <_printf_i+0x1f6>
 8002978:	6825      	ldr	r5, [r4, #0]
 800297a:	6808      	ldr	r0, [r1, #0]
 800297c:	062e      	lsls	r6, r5, #24
 800297e:	f100 0304 	add.w	r3, r0, #4
 8002982:	d50a      	bpl.n	800299a <_printf_i+0xce>
 8002984:	6805      	ldr	r5, [r0, #0]
 8002986:	600b      	str	r3, [r1, #0]
 8002988:	2d00      	cmp	r5, #0
 800298a:	da03      	bge.n	8002994 <_printf_i+0xc8>
 800298c:	232d      	movs	r3, #45	; 0x2d
 800298e:	426d      	negs	r5, r5
 8002990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002994:	230a      	movs	r3, #10
 8002996:	485e      	ldr	r0, [pc, #376]	; (8002b10 <_printf_i+0x244>)
 8002998:	e019      	b.n	80029ce <_printf_i+0x102>
 800299a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800299e:	6805      	ldr	r5, [r0, #0]
 80029a0:	600b      	str	r3, [r1, #0]
 80029a2:	bf18      	it	ne
 80029a4:	b22d      	sxthne	r5, r5
 80029a6:	e7ef      	b.n	8002988 <_printf_i+0xbc>
 80029a8:	680b      	ldr	r3, [r1, #0]
 80029aa:	6825      	ldr	r5, [r4, #0]
 80029ac:	1d18      	adds	r0, r3, #4
 80029ae:	6008      	str	r0, [r1, #0]
 80029b0:	0628      	lsls	r0, r5, #24
 80029b2:	d501      	bpl.n	80029b8 <_printf_i+0xec>
 80029b4:	681d      	ldr	r5, [r3, #0]
 80029b6:	e002      	b.n	80029be <_printf_i+0xf2>
 80029b8:	0669      	lsls	r1, r5, #25
 80029ba:	d5fb      	bpl.n	80029b4 <_printf_i+0xe8>
 80029bc:	881d      	ldrh	r5, [r3, #0]
 80029be:	2f6f      	cmp	r7, #111	; 0x6f
 80029c0:	bf0c      	ite	eq
 80029c2:	2308      	moveq	r3, #8
 80029c4:	230a      	movne	r3, #10
 80029c6:	4852      	ldr	r0, [pc, #328]	; (8002b10 <_printf_i+0x244>)
 80029c8:	2100      	movs	r1, #0
 80029ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029ce:	6866      	ldr	r6, [r4, #4]
 80029d0:	2e00      	cmp	r6, #0
 80029d2:	bfa8      	it	ge
 80029d4:	6821      	ldrge	r1, [r4, #0]
 80029d6:	60a6      	str	r6, [r4, #8]
 80029d8:	bfa4      	itt	ge
 80029da:	f021 0104 	bicge.w	r1, r1, #4
 80029de:	6021      	strge	r1, [r4, #0]
 80029e0:	b90d      	cbnz	r5, 80029e6 <_printf_i+0x11a>
 80029e2:	2e00      	cmp	r6, #0
 80029e4:	d04d      	beq.n	8002a82 <_printf_i+0x1b6>
 80029e6:	4616      	mov	r6, r2
 80029e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80029ec:	fb03 5711 	mls	r7, r3, r1, r5
 80029f0:	5dc7      	ldrb	r7, [r0, r7]
 80029f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80029f6:	462f      	mov	r7, r5
 80029f8:	42bb      	cmp	r3, r7
 80029fa:	460d      	mov	r5, r1
 80029fc:	d9f4      	bls.n	80029e8 <_printf_i+0x11c>
 80029fe:	2b08      	cmp	r3, #8
 8002a00:	d10b      	bne.n	8002a1a <_printf_i+0x14e>
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	07df      	lsls	r7, r3, #31
 8002a06:	d508      	bpl.n	8002a1a <_printf_i+0x14e>
 8002a08:	6923      	ldr	r3, [r4, #16]
 8002a0a:	6861      	ldr	r1, [r4, #4]
 8002a0c:	4299      	cmp	r1, r3
 8002a0e:	bfde      	ittt	le
 8002a10:	2330      	movle	r3, #48	; 0x30
 8002a12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002a16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002a1a:	1b92      	subs	r2, r2, r6
 8002a1c:	6122      	str	r2, [r4, #16]
 8002a1e:	464b      	mov	r3, r9
 8002a20:	4621      	mov	r1, r4
 8002a22:	4640      	mov	r0, r8
 8002a24:	f8cd a000 	str.w	sl, [sp]
 8002a28:	aa03      	add	r2, sp, #12
 8002a2a:	f7ff fedf 	bl	80027ec <_printf_common>
 8002a2e:	3001      	adds	r0, #1
 8002a30:	d14c      	bne.n	8002acc <_printf_i+0x200>
 8002a32:	f04f 30ff 	mov.w	r0, #4294967295
 8002a36:	b004      	add	sp, #16
 8002a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a3c:	4834      	ldr	r0, [pc, #208]	; (8002b10 <_printf_i+0x244>)
 8002a3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a42:	680e      	ldr	r6, [r1, #0]
 8002a44:	6823      	ldr	r3, [r4, #0]
 8002a46:	f856 5b04 	ldr.w	r5, [r6], #4
 8002a4a:	061f      	lsls	r7, r3, #24
 8002a4c:	600e      	str	r6, [r1, #0]
 8002a4e:	d514      	bpl.n	8002a7a <_printf_i+0x1ae>
 8002a50:	07d9      	lsls	r1, r3, #31
 8002a52:	bf44      	itt	mi
 8002a54:	f043 0320 	orrmi.w	r3, r3, #32
 8002a58:	6023      	strmi	r3, [r4, #0]
 8002a5a:	b91d      	cbnz	r5, 8002a64 <_printf_i+0x198>
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	f023 0320 	bic.w	r3, r3, #32
 8002a62:	6023      	str	r3, [r4, #0]
 8002a64:	2310      	movs	r3, #16
 8002a66:	e7af      	b.n	80029c8 <_printf_i+0xfc>
 8002a68:	6823      	ldr	r3, [r4, #0]
 8002a6a:	f043 0320 	orr.w	r3, r3, #32
 8002a6e:	6023      	str	r3, [r4, #0]
 8002a70:	2378      	movs	r3, #120	; 0x78
 8002a72:	4828      	ldr	r0, [pc, #160]	; (8002b14 <_printf_i+0x248>)
 8002a74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a78:	e7e3      	b.n	8002a42 <_printf_i+0x176>
 8002a7a:	065e      	lsls	r6, r3, #25
 8002a7c:	bf48      	it	mi
 8002a7e:	b2ad      	uxthmi	r5, r5
 8002a80:	e7e6      	b.n	8002a50 <_printf_i+0x184>
 8002a82:	4616      	mov	r6, r2
 8002a84:	e7bb      	b.n	80029fe <_printf_i+0x132>
 8002a86:	680b      	ldr	r3, [r1, #0]
 8002a88:	6826      	ldr	r6, [r4, #0]
 8002a8a:	1d1d      	adds	r5, r3, #4
 8002a8c:	6960      	ldr	r0, [r4, #20]
 8002a8e:	600d      	str	r5, [r1, #0]
 8002a90:	0635      	lsls	r5, r6, #24
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	d501      	bpl.n	8002a9a <_printf_i+0x1ce>
 8002a96:	6018      	str	r0, [r3, #0]
 8002a98:	e002      	b.n	8002aa0 <_printf_i+0x1d4>
 8002a9a:	0671      	lsls	r1, r6, #25
 8002a9c:	d5fb      	bpl.n	8002a96 <_printf_i+0x1ca>
 8002a9e:	8018      	strh	r0, [r3, #0]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	4616      	mov	r6, r2
 8002aa4:	6123      	str	r3, [r4, #16]
 8002aa6:	e7ba      	b.n	8002a1e <_printf_i+0x152>
 8002aa8:	680b      	ldr	r3, [r1, #0]
 8002aaa:	1d1a      	adds	r2, r3, #4
 8002aac:	600a      	str	r2, [r1, #0]
 8002aae:	681e      	ldr	r6, [r3, #0]
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4630      	mov	r0, r6
 8002ab4:	6862      	ldr	r2, [r4, #4]
 8002ab6:	f000 ffcb 	bl	8003a50 <memchr>
 8002aba:	b108      	cbz	r0, 8002ac0 <_printf_i+0x1f4>
 8002abc:	1b80      	subs	r0, r0, r6
 8002abe:	6060      	str	r0, [r4, #4]
 8002ac0:	6863      	ldr	r3, [r4, #4]
 8002ac2:	6123      	str	r3, [r4, #16]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aca:	e7a8      	b.n	8002a1e <_printf_i+0x152>
 8002acc:	4632      	mov	r2, r6
 8002ace:	4649      	mov	r1, r9
 8002ad0:	4640      	mov	r0, r8
 8002ad2:	6923      	ldr	r3, [r4, #16]
 8002ad4:	47d0      	blx	sl
 8002ad6:	3001      	adds	r0, #1
 8002ad8:	d0ab      	beq.n	8002a32 <_printf_i+0x166>
 8002ada:	6823      	ldr	r3, [r4, #0]
 8002adc:	079b      	lsls	r3, r3, #30
 8002ade:	d413      	bmi.n	8002b08 <_printf_i+0x23c>
 8002ae0:	68e0      	ldr	r0, [r4, #12]
 8002ae2:	9b03      	ldr	r3, [sp, #12]
 8002ae4:	4298      	cmp	r0, r3
 8002ae6:	bfb8      	it	lt
 8002ae8:	4618      	movlt	r0, r3
 8002aea:	e7a4      	b.n	8002a36 <_printf_i+0x16a>
 8002aec:	2301      	movs	r3, #1
 8002aee:	4632      	mov	r2, r6
 8002af0:	4649      	mov	r1, r9
 8002af2:	4640      	mov	r0, r8
 8002af4:	47d0      	blx	sl
 8002af6:	3001      	adds	r0, #1
 8002af8:	d09b      	beq.n	8002a32 <_printf_i+0x166>
 8002afa:	3501      	adds	r5, #1
 8002afc:	68e3      	ldr	r3, [r4, #12]
 8002afe:	9903      	ldr	r1, [sp, #12]
 8002b00:	1a5b      	subs	r3, r3, r1
 8002b02:	42ab      	cmp	r3, r5
 8002b04:	dcf2      	bgt.n	8002aec <_printf_i+0x220>
 8002b06:	e7eb      	b.n	8002ae0 <_printf_i+0x214>
 8002b08:	2500      	movs	r5, #0
 8002b0a:	f104 0619 	add.w	r6, r4, #25
 8002b0e:	e7f5      	b.n	8002afc <_printf_i+0x230>
 8002b10:	08004caa 	.word	0x08004caa
 8002b14:	08004cbb 	.word	0x08004cbb

08002b18 <iprintf>:
 8002b18:	b40f      	push	{r0, r1, r2, r3}
 8002b1a:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <iprintf+0x2c>)
 8002b1c:	b513      	push	{r0, r1, r4, lr}
 8002b1e:	681c      	ldr	r4, [r3, #0]
 8002b20:	b124      	cbz	r4, 8002b2c <iprintf+0x14>
 8002b22:	69a3      	ldr	r3, [r4, #24]
 8002b24:	b913      	cbnz	r3, 8002b2c <iprintf+0x14>
 8002b26:	4620      	mov	r0, r4
 8002b28:	f000 fee4 	bl	80038f4 <__sinit>
 8002b2c:	ab05      	add	r3, sp, #20
 8002b2e:	4620      	mov	r0, r4
 8002b30:	9a04      	ldr	r2, [sp, #16]
 8002b32:	68a1      	ldr	r1, [r4, #8]
 8002b34:	9301      	str	r3, [sp, #4]
 8002b36:	f001 fc05 	bl	8004344 <_vfiprintf_r>
 8002b3a:	b002      	add	sp, #8
 8002b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b40:	b004      	add	sp, #16
 8002b42:	4770      	bx	lr
 8002b44:	2000000c 	.word	0x2000000c

08002b48 <quorem>:
 8002b48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b4c:	6903      	ldr	r3, [r0, #16]
 8002b4e:	690c      	ldr	r4, [r1, #16]
 8002b50:	4607      	mov	r7, r0
 8002b52:	42a3      	cmp	r3, r4
 8002b54:	f2c0 8083 	blt.w	8002c5e <quorem+0x116>
 8002b58:	3c01      	subs	r4, #1
 8002b5a:	f100 0514 	add.w	r5, r0, #20
 8002b5e:	f101 0814 	add.w	r8, r1, #20
 8002b62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002b6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002b70:	3301      	adds	r3, #1
 8002b72:	429a      	cmp	r2, r3
 8002b74:	fbb2 f6f3 	udiv	r6, r2, r3
 8002b78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002b7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002b80:	d332      	bcc.n	8002be8 <quorem+0xa0>
 8002b82:	f04f 0e00 	mov.w	lr, #0
 8002b86:	4640      	mov	r0, r8
 8002b88:	46ac      	mov	ip, r5
 8002b8a:	46f2      	mov	sl, lr
 8002b8c:	f850 2b04 	ldr.w	r2, [r0], #4
 8002b90:	b293      	uxth	r3, r2
 8002b92:	fb06 e303 	mla	r3, r6, r3, lr
 8002b96:	0c12      	lsrs	r2, r2, #16
 8002b98:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002b9c:	fb06 e202 	mla	r2, r6, r2, lr
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	ebaa 0303 	sub.w	r3, sl, r3
 8002ba6:	f8dc a000 	ldr.w	sl, [ip]
 8002baa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002bae:	fa1f fa8a 	uxth.w	sl, sl
 8002bb2:	4453      	add	r3, sl
 8002bb4:	fa1f fa82 	uxth.w	sl, r2
 8002bb8:	f8dc 2000 	ldr.w	r2, [ip]
 8002bbc:	4581      	cmp	r9, r0
 8002bbe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8002bc2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002bcc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002bd0:	f84c 3b04 	str.w	r3, [ip], #4
 8002bd4:	d2da      	bcs.n	8002b8c <quorem+0x44>
 8002bd6:	f855 300b 	ldr.w	r3, [r5, fp]
 8002bda:	b92b      	cbnz	r3, 8002be8 <quorem+0xa0>
 8002bdc:	9b01      	ldr	r3, [sp, #4]
 8002bde:	3b04      	subs	r3, #4
 8002be0:	429d      	cmp	r5, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	d32f      	bcc.n	8002c46 <quorem+0xfe>
 8002be6:	613c      	str	r4, [r7, #16]
 8002be8:	4638      	mov	r0, r7
 8002bea:	f001 f9c7 	bl	8003f7c <__mcmp>
 8002bee:	2800      	cmp	r0, #0
 8002bf0:	db25      	blt.n	8002c3e <quorem+0xf6>
 8002bf2:	4628      	mov	r0, r5
 8002bf4:	f04f 0c00 	mov.w	ip, #0
 8002bf8:	3601      	adds	r6, #1
 8002bfa:	f858 1b04 	ldr.w	r1, [r8], #4
 8002bfe:	f8d0 e000 	ldr.w	lr, [r0]
 8002c02:	b28b      	uxth	r3, r1
 8002c04:	ebac 0303 	sub.w	r3, ip, r3
 8002c08:	fa1f f28e 	uxth.w	r2, lr
 8002c0c:	4413      	add	r3, r2
 8002c0e:	0c0a      	lsrs	r2, r1, #16
 8002c10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002c14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002c1e:	45c1      	cmp	r9, r8
 8002c20:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002c24:	f840 3b04 	str.w	r3, [r0], #4
 8002c28:	d2e7      	bcs.n	8002bfa <quorem+0xb2>
 8002c2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002c2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002c32:	b922      	cbnz	r2, 8002c3e <quorem+0xf6>
 8002c34:	3b04      	subs	r3, #4
 8002c36:	429d      	cmp	r5, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	d30a      	bcc.n	8002c52 <quorem+0x10a>
 8002c3c:	613c      	str	r4, [r7, #16]
 8002c3e:	4630      	mov	r0, r6
 8002c40:	b003      	add	sp, #12
 8002c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	3b04      	subs	r3, #4
 8002c4a:	2a00      	cmp	r2, #0
 8002c4c:	d1cb      	bne.n	8002be6 <quorem+0x9e>
 8002c4e:	3c01      	subs	r4, #1
 8002c50:	e7c6      	b.n	8002be0 <quorem+0x98>
 8002c52:	6812      	ldr	r2, [r2, #0]
 8002c54:	3b04      	subs	r3, #4
 8002c56:	2a00      	cmp	r2, #0
 8002c58:	d1f0      	bne.n	8002c3c <quorem+0xf4>
 8002c5a:	3c01      	subs	r4, #1
 8002c5c:	e7eb      	b.n	8002c36 <quorem+0xee>
 8002c5e:	2000      	movs	r0, #0
 8002c60:	e7ee      	b.n	8002c40 <quorem+0xf8>
 8002c62:	0000      	movs	r0, r0
 8002c64:	0000      	movs	r0, r0
	...

08002c68 <_dtoa_r>:
 8002c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c6c:	4616      	mov	r6, r2
 8002c6e:	461f      	mov	r7, r3
 8002c70:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8002c72:	b099      	sub	sp, #100	; 0x64
 8002c74:	4605      	mov	r5, r0
 8002c76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8002c7a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8002c7e:	b974      	cbnz	r4, 8002c9e <_dtoa_r+0x36>
 8002c80:	2010      	movs	r0, #16
 8002c82:	f000 fedd 	bl	8003a40 <malloc>
 8002c86:	4602      	mov	r2, r0
 8002c88:	6268      	str	r0, [r5, #36]	; 0x24
 8002c8a:	b920      	cbnz	r0, 8002c96 <_dtoa_r+0x2e>
 8002c8c:	21ea      	movs	r1, #234	; 0xea
 8002c8e:	4bae      	ldr	r3, [pc, #696]	; (8002f48 <_dtoa_r+0x2e0>)
 8002c90:	48ae      	ldr	r0, [pc, #696]	; (8002f4c <_dtoa_r+0x2e4>)
 8002c92:	f001 fdad 	bl	80047f0 <__assert_func>
 8002c96:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8002c9a:	6004      	str	r4, [r0, #0]
 8002c9c:	60c4      	str	r4, [r0, #12]
 8002c9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002ca0:	6819      	ldr	r1, [r3, #0]
 8002ca2:	b151      	cbz	r1, 8002cba <_dtoa_r+0x52>
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	4093      	lsls	r3, r2
 8002caa:	604a      	str	r2, [r1, #4]
 8002cac:	608b      	str	r3, [r1, #8]
 8002cae:	4628      	mov	r0, r5
 8002cb0:	f000 ff2a 	bl	8003b08 <_Bfree>
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	1e3b      	subs	r3, r7, #0
 8002cbc:	bfaf      	iteee	ge
 8002cbe:	2300      	movge	r3, #0
 8002cc0:	2201      	movlt	r2, #1
 8002cc2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002cc6:	9305      	strlt	r3, [sp, #20]
 8002cc8:	bfa8      	it	ge
 8002cca:	f8c8 3000 	strge.w	r3, [r8]
 8002cce:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8002cd2:	4b9f      	ldr	r3, [pc, #636]	; (8002f50 <_dtoa_r+0x2e8>)
 8002cd4:	bfb8      	it	lt
 8002cd6:	f8c8 2000 	strlt.w	r2, [r8]
 8002cda:	ea33 0309 	bics.w	r3, r3, r9
 8002cde:	d119      	bne.n	8002d14 <_dtoa_r+0xac>
 8002ce0:	f242 730f 	movw	r3, #9999	; 0x270f
 8002ce4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002cec:	4333      	orrs	r3, r6
 8002cee:	f000 8580 	beq.w	80037f2 <_dtoa_r+0xb8a>
 8002cf2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002cf4:	b953      	cbnz	r3, 8002d0c <_dtoa_r+0xa4>
 8002cf6:	4b97      	ldr	r3, [pc, #604]	; (8002f54 <_dtoa_r+0x2ec>)
 8002cf8:	e022      	b.n	8002d40 <_dtoa_r+0xd8>
 8002cfa:	4b97      	ldr	r3, [pc, #604]	; (8002f58 <_dtoa_r+0x2f0>)
 8002cfc:	9308      	str	r3, [sp, #32]
 8002cfe:	3308      	adds	r3, #8
 8002d00:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	9808      	ldr	r0, [sp, #32]
 8002d06:	b019      	add	sp, #100	; 0x64
 8002d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d0c:	4b91      	ldr	r3, [pc, #580]	; (8002f54 <_dtoa_r+0x2ec>)
 8002d0e:	9308      	str	r3, [sp, #32]
 8002d10:	3303      	adds	r3, #3
 8002d12:	e7f5      	b.n	8002d00 <_dtoa_r+0x98>
 8002d14:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8002d18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8002d1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002d20:	2200      	movs	r2, #0
 8002d22:	2300      	movs	r3, #0
 8002d24:	f7fd feac 	bl	8000a80 <__aeabi_dcmpeq>
 8002d28:	4680      	mov	r8, r0
 8002d2a:	b158      	cbz	r0, 8002d44 <_dtoa_r+0xdc>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8559 	beq.w	80037ec <_dtoa_r+0xb84>
 8002d3a:	4888      	ldr	r0, [pc, #544]	; (8002f5c <_dtoa_r+0x2f4>)
 8002d3c:	6018      	str	r0, [r3, #0]
 8002d3e:	1e43      	subs	r3, r0, #1
 8002d40:	9308      	str	r3, [sp, #32]
 8002d42:	e7df      	b.n	8002d04 <_dtoa_r+0x9c>
 8002d44:	ab16      	add	r3, sp, #88	; 0x58
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	ab17      	add	r3, sp, #92	; 0x5c
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8002d52:	f001 f9bf 	bl	80040d4 <__d2b>
 8002d56:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8002d5a:	4682      	mov	sl, r0
 8002d5c:	2c00      	cmp	r4, #0
 8002d5e:	d07e      	beq.n	8002e5e <_dtoa_r+0x1f6>
 8002d60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d66:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002d6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d6e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8002d72:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8002d76:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	4b78      	ldr	r3, [pc, #480]	; (8002f60 <_dtoa_r+0x2f8>)
 8002d7e:	f7fd fa5f 	bl	8000240 <__aeabi_dsub>
 8002d82:	a36b      	add	r3, pc, #428	; (adr r3, 8002f30 <_dtoa_r+0x2c8>)
 8002d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d88:	f7fd fc12 	bl	80005b0 <__aeabi_dmul>
 8002d8c:	a36a      	add	r3, pc, #424	; (adr r3, 8002f38 <_dtoa_r+0x2d0>)
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f7fd fa57 	bl	8000244 <__adddf3>
 8002d96:	4606      	mov	r6, r0
 8002d98:	4620      	mov	r0, r4
 8002d9a:	460f      	mov	r7, r1
 8002d9c:	f7fd fb9e 	bl	80004dc <__aeabi_i2d>
 8002da0:	a367      	add	r3, pc, #412	; (adr r3, 8002f40 <_dtoa_r+0x2d8>)
 8002da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da6:	f7fd fc03 	bl	80005b0 <__aeabi_dmul>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4630      	mov	r0, r6
 8002db0:	4639      	mov	r1, r7
 8002db2:	f7fd fa47 	bl	8000244 <__adddf3>
 8002db6:	4606      	mov	r6, r0
 8002db8:	460f      	mov	r7, r1
 8002dba:	f7fd fea9 	bl	8000b10 <__aeabi_d2iz>
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	4681      	mov	r9, r0
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	4639      	mov	r1, r7
 8002dc8:	f7fd fe64 	bl	8000a94 <__aeabi_dcmplt>
 8002dcc:	b148      	cbz	r0, 8002de2 <_dtoa_r+0x17a>
 8002dce:	4648      	mov	r0, r9
 8002dd0:	f7fd fb84 	bl	80004dc <__aeabi_i2d>
 8002dd4:	4632      	mov	r2, r6
 8002dd6:	463b      	mov	r3, r7
 8002dd8:	f7fd fe52 	bl	8000a80 <__aeabi_dcmpeq>
 8002ddc:	b908      	cbnz	r0, 8002de2 <_dtoa_r+0x17a>
 8002dde:	f109 39ff 	add.w	r9, r9, #4294967295
 8002de2:	f1b9 0f16 	cmp.w	r9, #22
 8002de6:	d857      	bhi.n	8002e98 <_dtoa_r+0x230>
 8002de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002dec:	4b5d      	ldr	r3, [pc, #372]	; (8002f64 <_dtoa_r+0x2fc>)
 8002dee:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	f7fd fe4d 	bl	8000a94 <__aeabi_dcmplt>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	d04e      	beq.n	8002e9c <_dtoa_r+0x234>
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f109 39ff 	add.w	r9, r9, #4294967295
 8002e04:	930f      	str	r3, [sp, #60]	; 0x3c
 8002e06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002e08:	1b1c      	subs	r4, r3, r4
 8002e0a:	1e63      	subs	r3, r4, #1
 8002e0c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e0e:	bf49      	itett	mi
 8002e10:	f1c4 0301 	rsbmi	r3, r4, #1
 8002e14:	2300      	movpl	r3, #0
 8002e16:	9306      	strmi	r3, [sp, #24]
 8002e18:	2300      	movmi	r3, #0
 8002e1a:	bf54      	ite	pl
 8002e1c:	9306      	strpl	r3, [sp, #24]
 8002e1e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8002e20:	f1b9 0f00 	cmp.w	r9, #0
 8002e24:	db3c      	blt.n	8002ea0 <_dtoa_r+0x238>
 8002e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e28:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8002e2c:	444b      	add	r3, r9
 8002e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8002e30:	2300      	movs	r3, #0
 8002e32:	930a      	str	r3, [sp, #40]	; 0x28
 8002e34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002e36:	2b09      	cmp	r3, #9
 8002e38:	d86c      	bhi.n	8002f14 <_dtoa_r+0x2ac>
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	bfc4      	itt	gt
 8002e3e:	3b04      	subgt	r3, #4
 8002e40:	9322      	strgt	r3, [sp, #136]	; 0x88
 8002e42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002e44:	bfc8      	it	gt
 8002e46:	2400      	movgt	r4, #0
 8002e48:	f1a3 0302 	sub.w	r3, r3, #2
 8002e4c:	bfd8      	it	le
 8002e4e:	2401      	movle	r4, #1
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	f200 808b 	bhi.w	8002f6c <_dtoa_r+0x304>
 8002e56:	e8df f003 	tbb	[pc, r3]
 8002e5a:	4f2d      	.short	0x4f2d
 8002e5c:	5b4d      	.short	0x5b4d
 8002e5e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8002e62:	441c      	add	r4, r3
 8002e64:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8002e68:	2b20      	cmp	r3, #32
 8002e6a:	bfc3      	ittte	gt
 8002e6c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002e70:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8002e74:	fa09 f303 	lslgt.w	r3, r9, r3
 8002e78:	f1c3 0320 	rsble	r3, r3, #32
 8002e7c:	bfc6      	itte	gt
 8002e7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8002e82:	4318      	orrgt	r0, r3
 8002e84:	fa06 f003 	lslle.w	r0, r6, r3
 8002e88:	f7fd fb18 	bl	80004bc <__aeabi_ui2d>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8002e92:	3c01      	subs	r4, #1
 8002e94:	9313      	str	r3, [sp, #76]	; 0x4c
 8002e96:	e770      	b.n	8002d7a <_dtoa_r+0x112>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e7b3      	b.n	8002e04 <_dtoa_r+0x19c>
 8002e9c:	900f      	str	r0, [sp, #60]	; 0x3c
 8002e9e:	e7b2      	b.n	8002e06 <_dtoa_r+0x19e>
 8002ea0:	9b06      	ldr	r3, [sp, #24]
 8002ea2:	eba3 0309 	sub.w	r3, r3, r9
 8002ea6:	9306      	str	r3, [sp, #24]
 8002ea8:	f1c9 0300 	rsb	r3, r9, #0
 8002eac:	930a      	str	r3, [sp, #40]	; 0x28
 8002eae:	2300      	movs	r3, #0
 8002eb0:	930e      	str	r3, [sp, #56]	; 0x38
 8002eb2:	e7bf      	b.n	8002e34 <_dtoa_r+0x1cc>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8002eb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	dc59      	bgt.n	8002f72 <_dtoa_r+0x30a>
 8002ebe:	f04f 0b01 	mov.w	fp, #1
 8002ec2:	465b      	mov	r3, fp
 8002ec4:	f8cd b008 	str.w	fp, [sp, #8]
 8002ec8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8002ecc:	2200      	movs	r2, #0
 8002ece:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8002ed0:	6042      	str	r2, [r0, #4]
 8002ed2:	2204      	movs	r2, #4
 8002ed4:	f102 0614 	add.w	r6, r2, #20
 8002ed8:	429e      	cmp	r6, r3
 8002eda:	6841      	ldr	r1, [r0, #4]
 8002edc:	d94f      	bls.n	8002f7e <_dtoa_r+0x316>
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f000 fdd2 	bl	8003a88 <_Balloc>
 8002ee4:	9008      	str	r0, [sp, #32]
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	d14d      	bne.n	8002f86 <_dtoa_r+0x31e>
 8002eea:	4602      	mov	r2, r0
 8002eec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <_dtoa_r+0x300>)
 8002ef2:	e6cd      	b.n	8002c90 <_dtoa_r+0x28>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e7de      	b.n	8002eb6 <_dtoa_r+0x24e>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	930b      	str	r3, [sp, #44]	; 0x2c
 8002efc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002efe:	eb09 0b03 	add.w	fp, r9, r3
 8002f02:	f10b 0301 	add.w	r3, fp, #1
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	9302      	str	r3, [sp, #8]
 8002f0a:	bfb8      	it	lt
 8002f0c:	2301      	movlt	r3, #1
 8002f0e:	e7dd      	b.n	8002ecc <_dtoa_r+0x264>
 8002f10:	2301      	movs	r3, #1
 8002f12:	e7f2      	b.n	8002efa <_dtoa_r+0x292>
 8002f14:	2401      	movs	r4, #1
 8002f16:	2300      	movs	r3, #0
 8002f18:	940b      	str	r4, [sp, #44]	; 0x2c
 8002f1a:	9322      	str	r3, [sp, #136]	; 0x88
 8002f1c:	f04f 3bff 	mov.w	fp, #4294967295
 8002f20:	2200      	movs	r2, #0
 8002f22:	2312      	movs	r3, #18
 8002f24:	f8cd b008 	str.w	fp, [sp, #8]
 8002f28:	9223      	str	r2, [sp, #140]	; 0x8c
 8002f2a:	e7cf      	b.n	8002ecc <_dtoa_r+0x264>
 8002f2c:	f3af 8000 	nop.w
 8002f30:	636f4361 	.word	0x636f4361
 8002f34:	3fd287a7 	.word	0x3fd287a7
 8002f38:	8b60c8b3 	.word	0x8b60c8b3
 8002f3c:	3fc68a28 	.word	0x3fc68a28
 8002f40:	509f79fb 	.word	0x509f79fb
 8002f44:	3fd34413 	.word	0x3fd34413
 8002f48:	08004cd9 	.word	0x08004cd9
 8002f4c:	08004cf0 	.word	0x08004cf0
 8002f50:	7ff00000 	.word	0x7ff00000
 8002f54:	08004cd5 	.word	0x08004cd5
 8002f58:	08004ccc 	.word	0x08004ccc
 8002f5c:	08004ca9 	.word	0x08004ca9
 8002f60:	3ff80000 	.word	0x3ff80000
 8002f64:	08004e48 	.word	0x08004e48
 8002f68:	08004d4f 	.word	0x08004d4f
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002f70:	e7d4      	b.n	8002f1c <_dtoa_r+0x2b4>
 8002f72:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8002f76:	465b      	mov	r3, fp
 8002f78:	f8cd b008 	str.w	fp, [sp, #8]
 8002f7c:	e7a6      	b.n	8002ecc <_dtoa_r+0x264>
 8002f7e:	3101      	adds	r1, #1
 8002f80:	6041      	str	r1, [r0, #4]
 8002f82:	0052      	lsls	r2, r2, #1
 8002f84:	e7a6      	b.n	8002ed4 <_dtoa_r+0x26c>
 8002f86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002f88:	9a08      	ldr	r2, [sp, #32]
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	9b02      	ldr	r3, [sp, #8]
 8002f8e:	2b0e      	cmp	r3, #14
 8002f90:	f200 80a8 	bhi.w	80030e4 <_dtoa_r+0x47c>
 8002f94:	2c00      	cmp	r4, #0
 8002f96:	f000 80a5 	beq.w	80030e4 <_dtoa_r+0x47c>
 8002f9a:	f1b9 0f00 	cmp.w	r9, #0
 8002f9e:	dd34      	ble.n	800300a <_dtoa_r+0x3a2>
 8002fa0:	4a9a      	ldr	r2, [pc, #616]	; (800320c <_dtoa_r+0x5a4>)
 8002fa2:	f009 030f 	and.w	r3, r9, #15
 8002fa6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002faa:	f419 7f80 	tst.w	r9, #256	; 0x100
 8002fae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fb2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8002fb6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8002fba:	d016      	beq.n	8002fea <_dtoa_r+0x382>
 8002fbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8002fc0:	4b93      	ldr	r3, [pc, #588]	; (8003210 <_dtoa_r+0x5a8>)
 8002fc2:	2703      	movs	r7, #3
 8002fc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002fc8:	f7fd fc1c 	bl	8000804 <__aeabi_ddiv>
 8002fcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002fd0:	f004 040f 	and.w	r4, r4, #15
 8002fd4:	4e8e      	ldr	r6, [pc, #568]	; (8003210 <_dtoa_r+0x5a8>)
 8002fd6:	b954      	cbnz	r4, 8002fee <_dtoa_r+0x386>
 8002fd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002fdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002fe0:	f7fd fc10 	bl	8000804 <__aeabi_ddiv>
 8002fe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002fe8:	e029      	b.n	800303e <_dtoa_r+0x3d6>
 8002fea:	2702      	movs	r7, #2
 8002fec:	e7f2      	b.n	8002fd4 <_dtoa_r+0x36c>
 8002fee:	07e1      	lsls	r1, r4, #31
 8002ff0:	d508      	bpl.n	8003004 <_dtoa_r+0x39c>
 8002ff2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002ff6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8002ffa:	f7fd fad9 	bl	80005b0 <__aeabi_dmul>
 8002ffe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003002:	3701      	adds	r7, #1
 8003004:	1064      	asrs	r4, r4, #1
 8003006:	3608      	adds	r6, #8
 8003008:	e7e5      	b.n	8002fd6 <_dtoa_r+0x36e>
 800300a:	f000 80a5 	beq.w	8003158 <_dtoa_r+0x4f0>
 800300e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003012:	f1c9 0400 	rsb	r4, r9, #0
 8003016:	4b7d      	ldr	r3, [pc, #500]	; (800320c <_dtoa_r+0x5a4>)
 8003018:	f004 020f 	and.w	r2, r4, #15
 800301c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f7fd fac4 	bl	80005b0 <__aeabi_dmul>
 8003028:	2702      	movs	r7, #2
 800302a:	2300      	movs	r3, #0
 800302c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003030:	4e77      	ldr	r6, [pc, #476]	; (8003210 <_dtoa_r+0x5a8>)
 8003032:	1124      	asrs	r4, r4, #4
 8003034:	2c00      	cmp	r4, #0
 8003036:	f040 8084 	bne.w	8003142 <_dtoa_r+0x4da>
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1d2      	bne.n	8002fe4 <_dtoa_r+0x37c>
 800303e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 808b 	beq.w	800315c <_dtoa_r+0x4f4>
 8003046:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800304a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800304e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003052:	2200      	movs	r2, #0
 8003054:	4b6f      	ldr	r3, [pc, #444]	; (8003214 <_dtoa_r+0x5ac>)
 8003056:	f7fd fd1d 	bl	8000a94 <__aeabi_dcmplt>
 800305a:	2800      	cmp	r0, #0
 800305c:	d07e      	beq.n	800315c <_dtoa_r+0x4f4>
 800305e:	9b02      	ldr	r3, [sp, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d07b      	beq.n	800315c <_dtoa_r+0x4f4>
 8003064:	f1bb 0f00 	cmp.w	fp, #0
 8003068:	dd38      	ble.n	80030dc <_dtoa_r+0x474>
 800306a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800306e:	2200      	movs	r2, #0
 8003070:	4b69      	ldr	r3, [pc, #420]	; (8003218 <_dtoa_r+0x5b0>)
 8003072:	f7fd fa9d 	bl	80005b0 <__aeabi_dmul>
 8003076:	465c      	mov	r4, fp
 8003078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800307c:	f109 38ff 	add.w	r8, r9, #4294967295
 8003080:	3701      	adds	r7, #1
 8003082:	4638      	mov	r0, r7
 8003084:	f7fd fa2a 	bl	80004dc <__aeabi_i2d>
 8003088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800308c:	f7fd fa90 	bl	80005b0 <__aeabi_dmul>
 8003090:	2200      	movs	r2, #0
 8003092:	4b62      	ldr	r3, [pc, #392]	; (800321c <_dtoa_r+0x5b4>)
 8003094:	f7fd f8d6 	bl	8000244 <__adddf3>
 8003098:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800309c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80030a0:	9611      	str	r6, [sp, #68]	; 0x44
 80030a2:	2c00      	cmp	r4, #0
 80030a4:	d15d      	bne.n	8003162 <_dtoa_r+0x4fa>
 80030a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030aa:	2200      	movs	r2, #0
 80030ac:	4b5c      	ldr	r3, [pc, #368]	; (8003220 <_dtoa_r+0x5b8>)
 80030ae:	f7fd f8c7 	bl	8000240 <__aeabi_dsub>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80030ba:	4633      	mov	r3, r6
 80030bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80030be:	f7fd fd07 	bl	8000ad0 <__aeabi_dcmpgt>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	f040 829e 	bne.w	8003604 <_dtoa_r+0x99c>
 80030c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80030ce:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80030d2:	f7fd fcdf 	bl	8000a94 <__aeabi_dcmplt>
 80030d6:	2800      	cmp	r0, #0
 80030d8:	f040 8292 	bne.w	8003600 <_dtoa_r+0x998>
 80030dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80030e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80030e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f2c0 8153 	blt.w	8003392 <_dtoa_r+0x72a>
 80030ec:	f1b9 0f0e 	cmp.w	r9, #14
 80030f0:	f300 814f 	bgt.w	8003392 <_dtoa_r+0x72a>
 80030f4:	4b45      	ldr	r3, [pc, #276]	; (800320c <_dtoa_r+0x5a4>)
 80030f6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80030fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030fe:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8003102:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003104:	2b00      	cmp	r3, #0
 8003106:	f280 80db 	bge.w	80032c0 <_dtoa_r+0x658>
 800310a:	9b02      	ldr	r3, [sp, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f300 80d7 	bgt.w	80032c0 <_dtoa_r+0x658>
 8003112:	f040 8274 	bne.w	80035fe <_dtoa_r+0x996>
 8003116:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800311a:	2200      	movs	r2, #0
 800311c:	4b40      	ldr	r3, [pc, #256]	; (8003220 <_dtoa_r+0x5b8>)
 800311e:	f7fd fa47 	bl	80005b0 <__aeabi_dmul>
 8003122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003126:	f7fd fcc9 	bl	8000abc <__aeabi_dcmpge>
 800312a:	9c02      	ldr	r4, [sp, #8]
 800312c:	4626      	mov	r6, r4
 800312e:	2800      	cmp	r0, #0
 8003130:	f040 824a 	bne.w	80035c8 <_dtoa_r+0x960>
 8003134:	2331      	movs	r3, #49	; 0x31
 8003136:	9f08      	ldr	r7, [sp, #32]
 8003138:	f109 0901 	add.w	r9, r9, #1
 800313c:	f807 3b01 	strb.w	r3, [r7], #1
 8003140:	e246      	b.n	80035d0 <_dtoa_r+0x968>
 8003142:	07e2      	lsls	r2, r4, #31
 8003144:	d505      	bpl.n	8003152 <_dtoa_r+0x4ea>
 8003146:	e9d6 2300 	ldrd	r2, r3, [r6]
 800314a:	f7fd fa31 	bl	80005b0 <__aeabi_dmul>
 800314e:	2301      	movs	r3, #1
 8003150:	3701      	adds	r7, #1
 8003152:	1064      	asrs	r4, r4, #1
 8003154:	3608      	adds	r6, #8
 8003156:	e76d      	b.n	8003034 <_dtoa_r+0x3cc>
 8003158:	2702      	movs	r7, #2
 800315a:	e770      	b.n	800303e <_dtoa_r+0x3d6>
 800315c:	46c8      	mov	r8, r9
 800315e:	9c02      	ldr	r4, [sp, #8]
 8003160:	e78f      	b.n	8003082 <_dtoa_r+0x41a>
 8003162:	9908      	ldr	r1, [sp, #32]
 8003164:	4b29      	ldr	r3, [pc, #164]	; (800320c <_dtoa_r+0x5a4>)
 8003166:	4421      	add	r1, r4
 8003168:	9112      	str	r1, [sp, #72]	; 0x48
 800316a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800316c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003170:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003174:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003178:	2900      	cmp	r1, #0
 800317a:	d055      	beq.n	8003228 <_dtoa_r+0x5c0>
 800317c:	2000      	movs	r0, #0
 800317e:	4929      	ldr	r1, [pc, #164]	; (8003224 <_dtoa_r+0x5bc>)
 8003180:	f7fd fb40 	bl	8000804 <__aeabi_ddiv>
 8003184:	463b      	mov	r3, r7
 8003186:	4632      	mov	r2, r6
 8003188:	f7fd f85a 	bl	8000240 <__aeabi_dsub>
 800318c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003190:	9f08      	ldr	r7, [sp, #32]
 8003192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003196:	f7fd fcbb 	bl	8000b10 <__aeabi_d2iz>
 800319a:	4604      	mov	r4, r0
 800319c:	f7fd f99e 	bl	80004dc <__aeabi_i2d>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80031a8:	f7fd f84a 	bl	8000240 <__aeabi_dsub>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	3430      	adds	r4, #48	; 0x30
 80031b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80031ba:	f807 4b01 	strb.w	r4, [r7], #1
 80031be:	f7fd fc69 	bl	8000a94 <__aeabi_dcmplt>
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d174      	bne.n	80032b0 <_dtoa_r+0x648>
 80031c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031ca:	2000      	movs	r0, #0
 80031cc:	4911      	ldr	r1, [pc, #68]	; (8003214 <_dtoa_r+0x5ac>)
 80031ce:	f7fd f837 	bl	8000240 <__aeabi_dsub>
 80031d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80031d6:	f7fd fc5d 	bl	8000a94 <__aeabi_dcmplt>
 80031da:	2800      	cmp	r0, #0
 80031dc:	f040 80b6 	bne.w	800334c <_dtoa_r+0x6e4>
 80031e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80031e2:	429f      	cmp	r7, r3
 80031e4:	f43f af7a 	beq.w	80030dc <_dtoa_r+0x474>
 80031e8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80031ec:	2200      	movs	r2, #0
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <_dtoa_r+0x5b0>)
 80031f0:	f7fd f9de 	bl	80005b0 <__aeabi_dmul>
 80031f4:	2200      	movs	r2, #0
 80031f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80031fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <_dtoa_r+0x5b0>)
 8003200:	f7fd f9d6 	bl	80005b0 <__aeabi_dmul>
 8003204:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003208:	e7c3      	b.n	8003192 <_dtoa_r+0x52a>
 800320a:	bf00      	nop
 800320c:	08004e48 	.word	0x08004e48
 8003210:	08004e20 	.word	0x08004e20
 8003214:	3ff00000 	.word	0x3ff00000
 8003218:	40240000 	.word	0x40240000
 800321c:	401c0000 	.word	0x401c0000
 8003220:	40140000 	.word	0x40140000
 8003224:	3fe00000 	.word	0x3fe00000
 8003228:	4630      	mov	r0, r6
 800322a:	4639      	mov	r1, r7
 800322c:	f7fd f9c0 	bl	80005b0 <__aeabi_dmul>
 8003230:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003232:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003236:	9c08      	ldr	r4, [sp, #32]
 8003238:	9314      	str	r3, [sp, #80]	; 0x50
 800323a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800323e:	f7fd fc67 	bl	8000b10 <__aeabi_d2iz>
 8003242:	9015      	str	r0, [sp, #84]	; 0x54
 8003244:	f7fd f94a 	bl	80004dc <__aeabi_i2d>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003250:	f7fc fff6 	bl	8000240 <__aeabi_dsub>
 8003254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003256:	4606      	mov	r6, r0
 8003258:	3330      	adds	r3, #48	; 0x30
 800325a:	f804 3b01 	strb.w	r3, [r4], #1
 800325e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003260:	460f      	mov	r7, r1
 8003262:	429c      	cmp	r4, r3
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	d124      	bne.n	80032b4 <_dtoa_r+0x64c>
 800326a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800326e:	4bb3      	ldr	r3, [pc, #716]	; (800353c <_dtoa_r+0x8d4>)
 8003270:	f7fc ffe8 	bl	8000244 <__adddf3>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4630      	mov	r0, r6
 800327a:	4639      	mov	r1, r7
 800327c:	f7fd fc28 	bl	8000ad0 <__aeabi_dcmpgt>
 8003280:	2800      	cmp	r0, #0
 8003282:	d162      	bne.n	800334a <_dtoa_r+0x6e2>
 8003284:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003288:	2000      	movs	r0, #0
 800328a:	49ac      	ldr	r1, [pc, #688]	; (800353c <_dtoa_r+0x8d4>)
 800328c:	f7fc ffd8 	bl	8000240 <__aeabi_dsub>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4630      	mov	r0, r6
 8003296:	4639      	mov	r1, r7
 8003298:	f7fd fbfc 	bl	8000a94 <__aeabi_dcmplt>
 800329c:	2800      	cmp	r0, #0
 800329e:	f43f af1d 	beq.w	80030dc <_dtoa_r+0x474>
 80032a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80032a4:	1e7b      	subs	r3, r7, #1
 80032a6:	9314      	str	r3, [sp, #80]	; 0x50
 80032a8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80032ac:	2b30      	cmp	r3, #48	; 0x30
 80032ae:	d0f8      	beq.n	80032a2 <_dtoa_r+0x63a>
 80032b0:	46c1      	mov	r9, r8
 80032b2:	e03a      	b.n	800332a <_dtoa_r+0x6c2>
 80032b4:	4ba2      	ldr	r3, [pc, #648]	; (8003540 <_dtoa_r+0x8d8>)
 80032b6:	f7fd f97b 	bl	80005b0 <__aeabi_dmul>
 80032ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80032be:	e7bc      	b.n	800323a <_dtoa_r+0x5d2>
 80032c0:	9f08      	ldr	r7, [sp, #32]
 80032c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80032c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032ca:	f7fd fa9b 	bl	8000804 <__aeabi_ddiv>
 80032ce:	f7fd fc1f 	bl	8000b10 <__aeabi_d2iz>
 80032d2:	4604      	mov	r4, r0
 80032d4:	f7fd f902 	bl	80004dc <__aeabi_i2d>
 80032d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80032dc:	f7fd f968 	bl	80005b0 <__aeabi_dmul>
 80032e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80032e4:	460b      	mov	r3, r1
 80032e6:	4602      	mov	r2, r0
 80032e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032ec:	f7fc ffa8 	bl	8000240 <__aeabi_dsub>
 80032f0:	f807 6b01 	strb.w	r6, [r7], #1
 80032f4:	9e08      	ldr	r6, [sp, #32]
 80032f6:	9b02      	ldr	r3, [sp, #8]
 80032f8:	1bbe      	subs	r6, r7, r6
 80032fa:	42b3      	cmp	r3, r6
 80032fc:	d13a      	bne.n	8003374 <_dtoa_r+0x70c>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	f7fc ff9f 	bl	8000244 <__adddf3>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800330e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003312:	f7fd fbdd 	bl	8000ad0 <__aeabi_dcmpgt>
 8003316:	bb58      	cbnz	r0, 8003370 <_dtoa_r+0x708>
 8003318:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800331c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003320:	f7fd fbae 	bl	8000a80 <__aeabi_dcmpeq>
 8003324:	b108      	cbz	r0, 800332a <_dtoa_r+0x6c2>
 8003326:	07e1      	lsls	r1, r4, #31
 8003328:	d422      	bmi.n	8003370 <_dtoa_r+0x708>
 800332a:	4628      	mov	r0, r5
 800332c:	4651      	mov	r1, sl
 800332e:	f000 fbeb 	bl	8003b08 <_Bfree>
 8003332:	2300      	movs	r3, #0
 8003334:	703b      	strb	r3, [r7, #0]
 8003336:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8003338:	f109 0001 	add.w	r0, r9, #1
 800333c:	6018      	str	r0, [r3, #0]
 800333e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003340:	2b00      	cmp	r3, #0
 8003342:	f43f acdf 	beq.w	8002d04 <_dtoa_r+0x9c>
 8003346:	601f      	str	r7, [r3, #0]
 8003348:	e4dc      	b.n	8002d04 <_dtoa_r+0x9c>
 800334a:	4627      	mov	r7, r4
 800334c:	463b      	mov	r3, r7
 800334e:	461f      	mov	r7, r3
 8003350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003354:	2a39      	cmp	r2, #57	; 0x39
 8003356:	d107      	bne.n	8003368 <_dtoa_r+0x700>
 8003358:	9a08      	ldr	r2, [sp, #32]
 800335a:	429a      	cmp	r2, r3
 800335c:	d1f7      	bne.n	800334e <_dtoa_r+0x6e6>
 800335e:	2230      	movs	r2, #48	; 0x30
 8003360:	9908      	ldr	r1, [sp, #32]
 8003362:	f108 0801 	add.w	r8, r8, #1
 8003366:	700a      	strb	r2, [r1, #0]
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	3201      	adds	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	e79f      	b.n	80032b0 <_dtoa_r+0x648>
 8003370:	46c8      	mov	r8, r9
 8003372:	e7eb      	b.n	800334c <_dtoa_r+0x6e4>
 8003374:	2200      	movs	r2, #0
 8003376:	4b72      	ldr	r3, [pc, #456]	; (8003540 <_dtoa_r+0x8d8>)
 8003378:	f7fd f91a 	bl	80005b0 <__aeabi_dmul>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003384:	2200      	movs	r2, #0
 8003386:	2300      	movs	r3, #0
 8003388:	f7fd fb7a 	bl	8000a80 <__aeabi_dcmpeq>
 800338c:	2800      	cmp	r0, #0
 800338e:	d098      	beq.n	80032c2 <_dtoa_r+0x65a>
 8003390:	e7cb      	b.n	800332a <_dtoa_r+0x6c2>
 8003392:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003394:	2a00      	cmp	r2, #0
 8003396:	f000 80cd 	beq.w	8003534 <_dtoa_r+0x8cc>
 800339a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800339c:	2a01      	cmp	r2, #1
 800339e:	f300 80af 	bgt.w	8003500 <_dtoa_r+0x898>
 80033a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80033a4:	2a00      	cmp	r2, #0
 80033a6:	f000 80a7 	beq.w	80034f8 <_dtoa_r+0x890>
 80033aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80033ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80033b0:	9f06      	ldr	r7, [sp, #24]
 80033b2:	9a06      	ldr	r2, [sp, #24]
 80033b4:	2101      	movs	r1, #1
 80033b6:	441a      	add	r2, r3
 80033b8:	9206      	str	r2, [sp, #24]
 80033ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033bc:	4628      	mov	r0, r5
 80033be:	441a      	add	r2, r3
 80033c0:	9209      	str	r2, [sp, #36]	; 0x24
 80033c2:	f000 fc5b 	bl	8003c7c <__i2b>
 80033c6:	4606      	mov	r6, r0
 80033c8:	2f00      	cmp	r7, #0
 80033ca:	dd0c      	ble.n	80033e6 <_dtoa_r+0x77e>
 80033cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	dd09      	ble.n	80033e6 <_dtoa_r+0x77e>
 80033d2:	42bb      	cmp	r3, r7
 80033d4:	bfa8      	it	ge
 80033d6:	463b      	movge	r3, r7
 80033d8:	9a06      	ldr	r2, [sp, #24]
 80033da:	1aff      	subs	r7, r7, r3
 80033dc:	1ad2      	subs	r2, r2, r3
 80033de:	9206      	str	r2, [sp, #24]
 80033e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	9309      	str	r3, [sp, #36]	; 0x24
 80033e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80033e8:	b1f3      	cbz	r3, 8003428 <_dtoa_r+0x7c0>
 80033ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 80a9 	beq.w	8003544 <_dtoa_r+0x8dc>
 80033f2:	2c00      	cmp	r4, #0
 80033f4:	dd10      	ble.n	8003418 <_dtoa_r+0x7b0>
 80033f6:	4631      	mov	r1, r6
 80033f8:	4622      	mov	r2, r4
 80033fa:	4628      	mov	r0, r5
 80033fc:	f000 fcf8 	bl	8003df0 <__pow5mult>
 8003400:	4652      	mov	r2, sl
 8003402:	4601      	mov	r1, r0
 8003404:	4606      	mov	r6, r0
 8003406:	4628      	mov	r0, r5
 8003408:	f000 fc4e 	bl	8003ca8 <__multiply>
 800340c:	4680      	mov	r8, r0
 800340e:	4651      	mov	r1, sl
 8003410:	4628      	mov	r0, r5
 8003412:	f000 fb79 	bl	8003b08 <_Bfree>
 8003416:	46c2      	mov	sl, r8
 8003418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800341a:	1b1a      	subs	r2, r3, r4
 800341c:	d004      	beq.n	8003428 <_dtoa_r+0x7c0>
 800341e:	4651      	mov	r1, sl
 8003420:	4628      	mov	r0, r5
 8003422:	f000 fce5 	bl	8003df0 <__pow5mult>
 8003426:	4682      	mov	sl, r0
 8003428:	2101      	movs	r1, #1
 800342a:	4628      	mov	r0, r5
 800342c:	f000 fc26 	bl	8003c7c <__i2b>
 8003430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003432:	4604      	mov	r4, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	f340 8087 	ble.w	8003548 <_dtoa_r+0x8e0>
 800343a:	461a      	mov	r2, r3
 800343c:	4601      	mov	r1, r0
 800343e:	4628      	mov	r0, r5
 8003440:	f000 fcd6 	bl	8003df0 <__pow5mult>
 8003444:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003446:	4604      	mov	r4, r0
 8003448:	2b01      	cmp	r3, #1
 800344a:	f340 8080 	ble.w	800354e <_dtoa_r+0x8e6>
 800344e:	f04f 0800 	mov.w	r8, #0
 8003452:	6923      	ldr	r3, [r4, #16]
 8003454:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003458:	6918      	ldr	r0, [r3, #16]
 800345a:	f000 fbc1 	bl	8003be0 <__hi0bits>
 800345e:	f1c0 0020 	rsb	r0, r0, #32
 8003462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003464:	4418      	add	r0, r3
 8003466:	f010 001f 	ands.w	r0, r0, #31
 800346a:	f000 8092 	beq.w	8003592 <_dtoa_r+0x92a>
 800346e:	f1c0 0320 	rsb	r3, r0, #32
 8003472:	2b04      	cmp	r3, #4
 8003474:	f340 808a 	ble.w	800358c <_dtoa_r+0x924>
 8003478:	f1c0 001c 	rsb	r0, r0, #28
 800347c:	9b06      	ldr	r3, [sp, #24]
 800347e:	4407      	add	r7, r0
 8003480:	4403      	add	r3, r0
 8003482:	9306      	str	r3, [sp, #24]
 8003484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003486:	4403      	add	r3, r0
 8003488:	9309      	str	r3, [sp, #36]	; 0x24
 800348a:	9b06      	ldr	r3, [sp, #24]
 800348c:	2b00      	cmp	r3, #0
 800348e:	dd05      	ble.n	800349c <_dtoa_r+0x834>
 8003490:	4651      	mov	r1, sl
 8003492:	461a      	mov	r2, r3
 8003494:	4628      	mov	r0, r5
 8003496:	f000 fd05 	bl	8003ea4 <__lshift>
 800349a:	4682      	mov	sl, r0
 800349c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800349e:	2b00      	cmp	r3, #0
 80034a0:	dd05      	ble.n	80034ae <_dtoa_r+0x846>
 80034a2:	4621      	mov	r1, r4
 80034a4:	461a      	mov	r2, r3
 80034a6:	4628      	mov	r0, r5
 80034a8:	f000 fcfc 	bl	8003ea4 <__lshift>
 80034ac:	4604      	mov	r4, r0
 80034ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d070      	beq.n	8003596 <_dtoa_r+0x92e>
 80034b4:	4621      	mov	r1, r4
 80034b6:	4650      	mov	r0, sl
 80034b8:	f000 fd60 	bl	8003f7c <__mcmp>
 80034bc:	2800      	cmp	r0, #0
 80034be:	da6a      	bge.n	8003596 <_dtoa_r+0x92e>
 80034c0:	2300      	movs	r3, #0
 80034c2:	4651      	mov	r1, sl
 80034c4:	220a      	movs	r2, #10
 80034c6:	4628      	mov	r0, r5
 80034c8:	f000 fb40 	bl	8003b4c <__multadd>
 80034cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80034ce:	4682      	mov	sl, r0
 80034d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 8193 	beq.w	8003800 <_dtoa_r+0xb98>
 80034da:	4631      	mov	r1, r6
 80034dc:	2300      	movs	r3, #0
 80034de:	220a      	movs	r2, #10
 80034e0:	4628      	mov	r0, r5
 80034e2:	f000 fb33 	bl	8003b4c <__multadd>
 80034e6:	f1bb 0f00 	cmp.w	fp, #0
 80034ea:	4606      	mov	r6, r0
 80034ec:	f300 8093 	bgt.w	8003616 <_dtoa_r+0x9ae>
 80034f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	dc57      	bgt.n	80035a6 <_dtoa_r+0x93e>
 80034f6:	e08e      	b.n	8003616 <_dtoa_r+0x9ae>
 80034f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80034fa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80034fe:	e756      	b.n	80033ae <_dtoa_r+0x746>
 8003500:	9b02      	ldr	r3, [sp, #8]
 8003502:	1e5c      	subs	r4, r3, #1
 8003504:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003506:	42a3      	cmp	r3, r4
 8003508:	bfb7      	itett	lt
 800350a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800350c:	1b1c      	subge	r4, r3, r4
 800350e:	1ae2      	sublt	r2, r4, r3
 8003510:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003512:	bfbe      	ittt	lt
 8003514:	940a      	strlt	r4, [sp, #40]	; 0x28
 8003516:	189b      	addlt	r3, r3, r2
 8003518:	930e      	strlt	r3, [sp, #56]	; 0x38
 800351a:	9b02      	ldr	r3, [sp, #8]
 800351c:	bfb8      	it	lt
 800351e:	2400      	movlt	r4, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	bfbb      	ittet	lt
 8003524:	9b06      	ldrlt	r3, [sp, #24]
 8003526:	9a02      	ldrlt	r2, [sp, #8]
 8003528:	9f06      	ldrge	r7, [sp, #24]
 800352a:	1a9f      	sublt	r7, r3, r2
 800352c:	bfac      	ite	ge
 800352e:	9b02      	ldrge	r3, [sp, #8]
 8003530:	2300      	movlt	r3, #0
 8003532:	e73e      	b.n	80033b2 <_dtoa_r+0x74a>
 8003534:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003536:	9f06      	ldr	r7, [sp, #24]
 8003538:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800353a:	e745      	b.n	80033c8 <_dtoa_r+0x760>
 800353c:	3fe00000 	.word	0x3fe00000
 8003540:	40240000 	.word	0x40240000
 8003544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003546:	e76a      	b.n	800341e <_dtoa_r+0x7b6>
 8003548:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800354a:	2b01      	cmp	r3, #1
 800354c:	dc19      	bgt.n	8003582 <_dtoa_r+0x91a>
 800354e:	9b04      	ldr	r3, [sp, #16]
 8003550:	b9bb      	cbnz	r3, 8003582 <_dtoa_r+0x91a>
 8003552:	9b05      	ldr	r3, [sp, #20]
 8003554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003558:	b99b      	cbnz	r3, 8003582 <_dtoa_r+0x91a>
 800355a:	9b05      	ldr	r3, [sp, #20]
 800355c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003560:	0d1b      	lsrs	r3, r3, #20
 8003562:	051b      	lsls	r3, r3, #20
 8003564:	b183      	cbz	r3, 8003588 <_dtoa_r+0x920>
 8003566:	f04f 0801 	mov.w	r8, #1
 800356a:	9b06      	ldr	r3, [sp, #24]
 800356c:	3301      	adds	r3, #1
 800356e:	9306      	str	r3, [sp, #24]
 8003570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003572:	3301      	adds	r3, #1
 8003574:	9309      	str	r3, [sp, #36]	; 0x24
 8003576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003578:	2b00      	cmp	r3, #0
 800357a:	f47f af6a 	bne.w	8003452 <_dtoa_r+0x7ea>
 800357e:	2001      	movs	r0, #1
 8003580:	e76f      	b.n	8003462 <_dtoa_r+0x7fa>
 8003582:	f04f 0800 	mov.w	r8, #0
 8003586:	e7f6      	b.n	8003576 <_dtoa_r+0x90e>
 8003588:	4698      	mov	r8, r3
 800358a:	e7f4      	b.n	8003576 <_dtoa_r+0x90e>
 800358c:	f43f af7d 	beq.w	800348a <_dtoa_r+0x822>
 8003590:	4618      	mov	r0, r3
 8003592:	301c      	adds	r0, #28
 8003594:	e772      	b.n	800347c <_dtoa_r+0x814>
 8003596:	9b02      	ldr	r3, [sp, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	dc36      	bgt.n	800360a <_dtoa_r+0x9a2>
 800359c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800359e:	2b02      	cmp	r3, #2
 80035a0:	dd33      	ble.n	800360a <_dtoa_r+0x9a2>
 80035a2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80035a6:	f1bb 0f00 	cmp.w	fp, #0
 80035aa:	d10d      	bne.n	80035c8 <_dtoa_r+0x960>
 80035ac:	4621      	mov	r1, r4
 80035ae:	465b      	mov	r3, fp
 80035b0:	2205      	movs	r2, #5
 80035b2:	4628      	mov	r0, r5
 80035b4:	f000 faca 	bl	8003b4c <__multadd>
 80035b8:	4601      	mov	r1, r0
 80035ba:	4604      	mov	r4, r0
 80035bc:	4650      	mov	r0, sl
 80035be:	f000 fcdd 	bl	8003f7c <__mcmp>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	f73f adb6 	bgt.w	8003134 <_dtoa_r+0x4cc>
 80035c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80035ca:	9f08      	ldr	r7, [sp, #32]
 80035cc:	ea6f 0903 	mvn.w	r9, r3
 80035d0:	f04f 0800 	mov.w	r8, #0
 80035d4:	4621      	mov	r1, r4
 80035d6:	4628      	mov	r0, r5
 80035d8:	f000 fa96 	bl	8003b08 <_Bfree>
 80035dc:	2e00      	cmp	r6, #0
 80035de:	f43f aea4 	beq.w	800332a <_dtoa_r+0x6c2>
 80035e2:	f1b8 0f00 	cmp.w	r8, #0
 80035e6:	d005      	beq.n	80035f4 <_dtoa_r+0x98c>
 80035e8:	45b0      	cmp	r8, r6
 80035ea:	d003      	beq.n	80035f4 <_dtoa_r+0x98c>
 80035ec:	4641      	mov	r1, r8
 80035ee:	4628      	mov	r0, r5
 80035f0:	f000 fa8a 	bl	8003b08 <_Bfree>
 80035f4:	4631      	mov	r1, r6
 80035f6:	4628      	mov	r0, r5
 80035f8:	f000 fa86 	bl	8003b08 <_Bfree>
 80035fc:	e695      	b.n	800332a <_dtoa_r+0x6c2>
 80035fe:	2400      	movs	r4, #0
 8003600:	4626      	mov	r6, r4
 8003602:	e7e1      	b.n	80035c8 <_dtoa_r+0x960>
 8003604:	46c1      	mov	r9, r8
 8003606:	4626      	mov	r6, r4
 8003608:	e594      	b.n	8003134 <_dtoa_r+0x4cc>
 800360a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800360c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80fc 	beq.w	800380e <_dtoa_r+0xba6>
 8003616:	2f00      	cmp	r7, #0
 8003618:	dd05      	ble.n	8003626 <_dtoa_r+0x9be>
 800361a:	4631      	mov	r1, r6
 800361c:	463a      	mov	r2, r7
 800361e:	4628      	mov	r0, r5
 8003620:	f000 fc40 	bl	8003ea4 <__lshift>
 8003624:	4606      	mov	r6, r0
 8003626:	f1b8 0f00 	cmp.w	r8, #0
 800362a:	d05c      	beq.n	80036e6 <_dtoa_r+0xa7e>
 800362c:	4628      	mov	r0, r5
 800362e:	6871      	ldr	r1, [r6, #4]
 8003630:	f000 fa2a 	bl	8003a88 <_Balloc>
 8003634:	4607      	mov	r7, r0
 8003636:	b928      	cbnz	r0, 8003644 <_dtoa_r+0x9dc>
 8003638:	4602      	mov	r2, r0
 800363a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800363e:	4b7e      	ldr	r3, [pc, #504]	; (8003838 <_dtoa_r+0xbd0>)
 8003640:	f7ff bb26 	b.w	8002c90 <_dtoa_r+0x28>
 8003644:	6932      	ldr	r2, [r6, #16]
 8003646:	f106 010c 	add.w	r1, r6, #12
 800364a:	3202      	adds	r2, #2
 800364c:	0092      	lsls	r2, r2, #2
 800364e:	300c      	adds	r0, #12
 8003650:	f000 fa0c 	bl	8003a6c <memcpy>
 8003654:	2201      	movs	r2, #1
 8003656:	4639      	mov	r1, r7
 8003658:	4628      	mov	r0, r5
 800365a:	f000 fc23 	bl	8003ea4 <__lshift>
 800365e:	46b0      	mov	r8, r6
 8003660:	4606      	mov	r6, r0
 8003662:	9b08      	ldr	r3, [sp, #32]
 8003664:	3301      	adds	r3, #1
 8003666:	9302      	str	r3, [sp, #8]
 8003668:	9b08      	ldr	r3, [sp, #32]
 800366a:	445b      	add	r3, fp
 800366c:	930a      	str	r3, [sp, #40]	; 0x28
 800366e:	9b04      	ldr	r3, [sp, #16]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	9309      	str	r3, [sp, #36]	; 0x24
 8003676:	9b02      	ldr	r3, [sp, #8]
 8003678:	4621      	mov	r1, r4
 800367a:	4650      	mov	r0, sl
 800367c:	f103 3bff 	add.w	fp, r3, #4294967295
 8003680:	f7ff fa62 	bl	8002b48 <quorem>
 8003684:	4603      	mov	r3, r0
 8003686:	4641      	mov	r1, r8
 8003688:	3330      	adds	r3, #48	; 0x30
 800368a:	9004      	str	r0, [sp, #16]
 800368c:	4650      	mov	r0, sl
 800368e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003690:	f000 fc74 	bl	8003f7c <__mcmp>
 8003694:	4632      	mov	r2, r6
 8003696:	9006      	str	r0, [sp, #24]
 8003698:	4621      	mov	r1, r4
 800369a:	4628      	mov	r0, r5
 800369c:	f000 fc8a 	bl	8003fb4 <__mdiff>
 80036a0:	68c2      	ldr	r2, [r0, #12]
 80036a2:	4607      	mov	r7, r0
 80036a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80036a6:	bb02      	cbnz	r2, 80036ea <_dtoa_r+0xa82>
 80036a8:	4601      	mov	r1, r0
 80036aa:	4650      	mov	r0, sl
 80036ac:	f000 fc66 	bl	8003f7c <__mcmp>
 80036b0:	4602      	mov	r2, r0
 80036b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80036b4:	4639      	mov	r1, r7
 80036b6:	4628      	mov	r0, r5
 80036b8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80036bc:	f000 fa24 	bl	8003b08 <_Bfree>
 80036c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036c4:	9f02      	ldr	r7, [sp, #8]
 80036c6:	ea43 0102 	orr.w	r1, r3, r2
 80036ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036cc:	430b      	orrs	r3, r1
 80036ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80036d0:	d10d      	bne.n	80036ee <_dtoa_r+0xa86>
 80036d2:	2b39      	cmp	r3, #57	; 0x39
 80036d4:	d027      	beq.n	8003726 <_dtoa_r+0xabe>
 80036d6:	9a06      	ldr	r2, [sp, #24]
 80036d8:	2a00      	cmp	r2, #0
 80036da:	dd01      	ble.n	80036e0 <_dtoa_r+0xa78>
 80036dc:	9b04      	ldr	r3, [sp, #16]
 80036de:	3331      	adds	r3, #49	; 0x31
 80036e0:	f88b 3000 	strb.w	r3, [fp]
 80036e4:	e776      	b.n	80035d4 <_dtoa_r+0x96c>
 80036e6:	4630      	mov	r0, r6
 80036e8:	e7b9      	b.n	800365e <_dtoa_r+0x9f6>
 80036ea:	2201      	movs	r2, #1
 80036ec:	e7e2      	b.n	80036b4 <_dtoa_r+0xa4c>
 80036ee:	9906      	ldr	r1, [sp, #24]
 80036f0:	2900      	cmp	r1, #0
 80036f2:	db04      	blt.n	80036fe <_dtoa_r+0xa96>
 80036f4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80036f6:	4301      	orrs	r1, r0
 80036f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036fa:	4301      	orrs	r1, r0
 80036fc:	d120      	bne.n	8003740 <_dtoa_r+0xad8>
 80036fe:	2a00      	cmp	r2, #0
 8003700:	ddee      	ble.n	80036e0 <_dtoa_r+0xa78>
 8003702:	4651      	mov	r1, sl
 8003704:	2201      	movs	r2, #1
 8003706:	4628      	mov	r0, r5
 8003708:	9302      	str	r3, [sp, #8]
 800370a:	f000 fbcb 	bl	8003ea4 <__lshift>
 800370e:	4621      	mov	r1, r4
 8003710:	4682      	mov	sl, r0
 8003712:	f000 fc33 	bl	8003f7c <__mcmp>
 8003716:	2800      	cmp	r0, #0
 8003718:	9b02      	ldr	r3, [sp, #8]
 800371a:	dc02      	bgt.n	8003722 <_dtoa_r+0xaba>
 800371c:	d1e0      	bne.n	80036e0 <_dtoa_r+0xa78>
 800371e:	07da      	lsls	r2, r3, #31
 8003720:	d5de      	bpl.n	80036e0 <_dtoa_r+0xa78>
 8003722:	2b39      	cmp	r3, #57	; 0x39
 8003724:	d1da      	bne.n	80036dc <_dtoa_r+0xa74>
 8003726:	2339      	movs	r3, #57	; 0x39
 8003728:	f88b 3000 	strb.w	r3, [fp]
 800372c:	463b      	mov	r3, r7
 800372e:	461f      	mov	r7, r3
 8003730:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8003734:	3b01      	subs	r3, #1
 8003736:	2a39      	cmp	r2, #57	; 0x39
 8003738:	d050      	beq.n	80037dc <_dtoa_r+0xb74>
 800373a:	3201      	adds	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e749      	b.n	80035d4 <_dtoa_r+0x96c>
 8003740:	2a00      	cmp	r2, #0
 8003742:	dd03      	ble.n	800374c <_dtoa_r+0xae4>
 8003744:	2b39      	cmp	r3, #57	; 0x39
 8003746:	d0ee      	beq.n	8003726 <_dtoa_r+0xabe>
 8003748:	3301      	adds	r3, #1
 800374a:	e7c9      	b.n	80036e0 <_dtoa_r+0xa78>
 800374c:	9a02      	ldr	r2, [sp, #8]
 800374e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003750:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003754:	428a      	cmp	r2, r1
 8003756:	d02a      	beq.n	80037ae <_dtoa_r+0xb46>
 8003758:	4651      	mov	r1, sl
 800375a:	2300      	movs	r3, #0
 800375c:	220a      	movs	r2, #10
 800375e:	4628      	mov	r0, r5
 8003760:	f000 f9f4 	bl	8003b4c <__multadd>
 8003764:	45b0      	cmp	r8, r6
 8003766:	4682      	mov	sl, r0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	f04f 020a 	mov.w	r2, #10
 8003770:	4641      	mov	r1, r8
 8003772:	4628      	mov	r0, r5
 8003774:	d107      	bne.n	8003786 <_dtoa_r+0xb1e>
 8003776:	f000 f9e9 	bl	8003b4c <__multadd>
 800377a:	4680      	mov	r8, r0
 800377c:	4606      	mov	r6, r0
 800377e:	9b02      	ldr	r3, [sp, #8]
 8003780:	3301      	adds	r3, #1
 8003782:	9302      	str	r3, [sp, #8]
 8003784:	e777      	b.n	8003676 <_dtoa_r+0xa0e>
 8003786:	f000 f9e1 	bl	8003b4c <__multadd>
 800378a:	4631      	mov	r1, r6
 800378c:	4680      	mov	r8, r0
 800378e:	2300      	movs	r3, #0
 8003790:	220a      	movs	r2, #10
 8003792:	4628      	mov	r0, r5
 8003794:	f000 f9da 	bl	8003b4c <__multadd>
 8003798:	4606      	mov	r6, r0
 800379a:	e7f0      	b.n	800377e <_dtoa_r+0xb16>
 800379c:	f1bb 0f00 	cmp.w	fp, #0
 80037a0:	bfcc      	ite	gt
 80037a2:	465f      	movgt	r7, fp
 80037a4:	2701      	movle	r7, #1
 80037a6:	f04f 0800 	mov.w	r8, #0
 80037aa:	9a08      	ldr	r2, [sp, #32]
 80037ac:	4417      	add	r7, r2
 80037ae:	4651      	mov	r1, sl
 80037b0:	2201      	movs	r2, #1
 80037b2:	4628      	mov	r0, r5
 80037b4:	9302      	str	r3, [sp, #8]
 80037b6:	f000 fb75 	bl	8003ea4 <__lshift>
 80037ba:	4621      	mov	r1, r4
 80037bc:	4682      	mov	sl, r0
 80037be:	f000 fbdd 	bl	8003f7c <__mcmp>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	dcb2      	bgt.n	800372c <_dtoa_r+0xac4>
 80037c6:	d102      	bne.n	80037ce <_dtoa_r+0xb66>
 80037c8:	9b02      	ldr	r3, [sp, #8]
 80037ca:	07db      	lsls	r3, r3, #31
 80037cc:	d4ae      	bmi.n	800372c <_dtoa_r+0xac4>
 80037ce:	463b      	mov	r3, r7
 80037d0:	461f      	mov	r7, r3
 80037d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80037d6:	2a30      	cmp	r2, #48	; 0x30
 80037d8:	d0fa      	beq.n	80037d0 <_dtoa_r+0xb68>
 80037da:	e6fb      	b.n	80035d4 <_dtoa_r+0x96c>
 80037dc:	9a08      	ldr	r2, [sp, #32]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d1a5      	bne.n	800372e <_dtoa_r+0xac6>
 80037e2:	2331      	movs	r3, #49	; 0x31
 80037e4:	f109 0901 	add.w	r9, r9, #1
 80037e8:	7013      	strb	r3, [r2, #0]
 80037ea:	e6f3      	b.n	80035d4 <_dtoa_r+0x96c>
 80037ec:	4b13      	ldr	r3, [pc, #76]	; (800383c <_dtoa_r+0xbd4>)
 80037ee:	f7ff baa7 	b.w	8002d40 <_dtoa_r+0xd8>
 80037f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f47f aa80 	bne.w	8002cfa <_dtoa_r+0x92>
 80037fa:	4b11      	ldr	r3, [pc, #68]	; (8003840 <_dtoa_r+0xbd8>)
 80037fc:	f7ff baa0 	b.w	8002d40 <_dtoa_r+0xd8>
 8003800:	f1bb 0f00 	cmp.w	fp, #0
 8003804:	dc03      	bgt.n	800380e <_dtoa_r+0xba6>
 8003806:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003808:	2b02      	cmp	r3, #2
 800380a:	f73f aecc 	bgt.w	80035a6 <_dtoa_r+0x93e>
 800380e:	9f08      	ldr	r7, [sp, #32]
 8003810:	4621      	mov	r1, r4
 8003812:	4650      	mov	r0, sl
 8003814:	f7ff f998 	bl	8002b48 <quorem>
 8003818:	9a08      	ldr	r2, [sp, #32]
 800381a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800381e:	f807 3b01 	strb.w	r3, [r7], #1
 8003822:	1aba      	subs	r2, r7, r2
 8003824:	4593      	cmp	fp, r2
 8003826:	ddb9      	ble.n	800379c <_dtoa_r+0xb34>
 8003828:	4651      	mov	r1, sl
 800382a:	2300      	movs	r3, #0
 800382c:	220a      	movs	r2, #10
 800382e:	4628      	mov	r0, r5
 8003830:	f000 f98c 	bl	8003b4c <__multadd>
 8003834:	4682      	mov	sl, r0
 8003836:	e7eb      	b.n	8003810 <_dtoa_r+0xba8>
 8003838:	08004d4f 	.word	0x08004d4f
 800383c:	08004ca8 	.word	0x08004ca8
 8003840:	08004ccc 	.word	0x08004ccc

08003844 <std>:
 8003844:	2300      	movs	r3, #0
 8003846:	b510      	push	{r4, lr}
 8003848:	4604      	mov	r4, r0
 800384a:	e9c0 3300 	strd	r3, r3, [r0]
 800384e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003852:	6083      	str	r3, [r0, #8]
 8003854:	8181      	strh	r1, [r0, #12]
 8003856:	6643      	str	r3, [r0, #100]	; 0x64
 8003858:	81c2      	strh	r2, [r0, #14]
 800385a:	6183      	str	r3, [r0, #24]
 800385c:	4619      	mov	r1, r3
 800385e:	2208      	movs	r2, #8
 8003860:	305c      	adds	r0, #92	; 0x5c
 8003862:	f7fe fcf1 	bl	8002248 <memset>
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <std+0x38>)
 8003868:	6224      	str	r4, [r4, #32]
 800386a:	6263      	str	r3, [r4, #36]	; 0x24
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <std+0x3c>)
 800386e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <std+0x40>)
 8003872:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003874:	4b04      	ldr	r3, [pc, #16]	; (8003888 <std+0x44>)
 8003876:	6323      	str	r3, [r4, #48]	; 0x30
 8003878:	bd10      	pop	{r4, pc}
 800387a:	bf00      	nop
 800387c:	080045c5 	.word	0x080045c5
 8003880:	080045e7 	.word	0x080045e7
 8003884:	0800461f 	.word	0x0800461f
 8003888:	08004643 	.word	0x08004643

0800388c <_cleanup_r>:
 800388c:	4901      	ldr	r1, [pc, #4]	; (8003894 <_cleanup_r+0x8>)
 800388e:	f000 b8af 	b.w	80039f0 <_fwalk_reent>
 8003892:	bf00      	nop
 8003894:	08004959 	.word	0x08004959

08003898 <__sfmoreglue>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	2568      	movs	r5, #104	; 0x68
 800389c:	1e4a      	subs	r2, r1, #1
 800389e:	4355      	muls	r5, r2
 80038a0:	460e      	mov	r6, r1
 80038a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80038a6:	f000 fccb 	bl	8004240 <_malloc_r>
 80038aa:	4604      	mov	r4, r0
 80038ac:	b140      	cbz	r0, 80038c0 <__sfmoreglue+0x28>
 80038ae:	2100      	movs	r1, #0
 80038b0:	e9c0 1600 	strd	r1, r6, [r0]
 80038b4:	300c      	adds	r0, #12
 80038b6:	60a0      	str	r0, [r4, #8]
 80038b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80038bc:	f7fe fcc4 	bl	8002248 <memset>
 80038c0:	4620      	mov	r0, r4
 80038c2:	bd70      	pop	{r4, r5, r6, pc}

080038c4 <__sfp_lock_acquire>:
 80038c4:	4801      	ldr	r0, [pc, #4]	; (80038cc <__sfp_lock_acquire+0x8>)
 80038c6:	f000 b8b8 	b.w	8003a3a <__retarget_lock_acquire_recursive>
 80038ca:	bf00      	nop
 80038cc:	20000250 	.word	0x20000250

080038d0 <__sfp_lock_release>:
 80038d0:	4801      	ldr	r0, [pc, #4]	; (80038d8 <__sfp_lock_release+0x8>)
 80038d2:	f000 b8b3 	b.w	8003a3c <__retarget_lock_release_recursive>
 80038d6:	bf00      	nop
 80038d8:	20000250 	.word	0x20000250

080038dc <__sinit_lock_acquire>:
 80038dc:	4801      	ldr	r0, [pc, #4]	; (80038e4 <__sinit_lock_acquire+0x8>)
 80038de:	f000 b8ac 	b.w	8003a3a <__retarget_lock_acquire_recursive>
 80038e2:	bf00      	nop
 80038e4:	2000024b 	.word	0x2000024b

080038e8 <__sinit_lock_release>:
 80038e8:	4801      	ldr	r0, [pc, #4]	; (80038f0 <__sinit_lock_release+0x8>)
 80038ea:	f000 b8a7 	b.w	8003a3c <__retarget_lock_release_recursive>
 80038ee:	bf00      	nop
 80038f0:	2000024b 	.word	0x2000024b

080038f4 <__sinit>:
 80038f4:	b510      	push	{r4, lr}
 80038f6:	4604      	mov	r4, r0
 80038f8:	f7ff fff0 	bl	80038dc <__sinit_lock_acquire>
 80038fc:	69a3      	ldr	r3, [r4, #24]
 80038fe:	b11b      	cbz	r3, 8003908 <__sinit+0x14>
 8003900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003904:	f7ff bff0 	b.w	80038e8 <__sinit_lock_release>
 8003908:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800390c:	6523      	str	r3, [r4, #80]	; 0x50
 800390e:	4b13      	ldr	r3, [pc, #76]	; (800395c <__sinit+0x68>)
 8003910:	4a13      	ldr	r2, [pc, #76]	; (8003960 <__sinit+0x6c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	62a2      	str	r2, [r4, #40]	; 0x28
 8003916:	42a3      	cmp	r3, r4
 8003918:	bf08      	it	eq
 800391a:	2301      	moveq	r3, #1
 800391c:	4620      	mov	r0, r4
 800391e:	bf08      	it	eq
 8003920:	61a3      	streq	r3, [r4, #24]
 8003922:	f000 f81f 	bl	8003964 <__sfp>
 8003926:	6060      	str	r0, [r4, #4]
 8003928:	4620      	mov	r0, r4
 800392a:	f000 f81b 	bl	8003964 <__sfp>
 800392e:	60a0      	str	r0, [r4, #8]
 8003930:	4620      	mov	r0, r4
 8003932:	f000 f817 	bl	8003964 <__sfp>
 8003936:	2200      	movs	r2, #0
 8003938:	2104      	movs	r1, #4
 800393a:	60e0      	str	r0, [r4, #12]
 800393c:	6860      	ldr	r0, [r4, #4]
 800393e:	f7ff ff81 	bl	8003844 <std>
 8003942:	2201      	movs	r2, #1
 8003944:	2109      	movs	r1, #9
 8003946:	68a0      	ldr	r0, [r4, #8]
 8003948:	f7ff ff7c 	bl	8003844 <std>
 800394c:	2202      	movs	r2, #2
 800394e:	2112      	movs	r1, #18
 8003950:	68e0      	ldr	r0, [r4, #12]
 8003952:	f7ff ff77 	bl	8003844 <std>
 8003956:	2301      	movs	r3, #1
 8003958:	61a3      	str	r3, [r4, #24]
 800395a:	e7d1      	b.n	8003900 <__sinit+0xc>
 800395c:	08004c94 	.word	0x08004c94
 8003960:	0800388d 	.word	0x0800388d

08003964 <__sfp>:
 8003964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003966:	4607      	mov	r7, r0
 8003968:	f7ff ffac 	bl	80038c4 <__sfp_lock_acquire>
 800396c:	4b1e      	ldr	r3, [pc, #120]	; (80039e8 <__sfp+0x84>)
 800396e:	681e      	ldr	r6, [r3, #0]
 8003970:	69b3      	ldr	r3, [r6, #24]
 8003972:	b913      	cbnz	r3, 800397a <__sfp+0x16>
 8003974:	4630      	mov	r0, r6
 8003976:	f7ff ffbd 	bl	80038f4 <__sinit>
 800397a:	3648      	adds	r6, #72	; 0x48
 800397c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003980:	3b01      	subs	r3, #1
 8003982:	d503      	bpl.n	800398c <__sfp+0x28>
 8003984:	6833      	ldr	r3, [r6, #0]
 8003986:	b30b      	cbz	r3, 80039cc <__sfp+0x68>
 8003988:	6836      	ldr	r6, [r6, #0]
 800398a:	e7f7      	b.n	800397c <__sfp+0x18>
 800398c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003990:	b9d5      	cbnz	r5, 80039c8 <__sfp+0x64>
 8003992:	4b16      	ldr	r3, [pc, #88]	; (80039ec <__sfp+0x88>)
 8003994:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003998:	60e3      	str	r3, [r4, #12]
 800399a:	6665      	str	r5, [r4, #100]	; 0x64
 800399c:	f000 f84c 	bl	8003a38 <__retarget_lock_init_recursive>
 80039a0:	f7ff ff96 	bl	80038d0 <__sfp_lock_release>
 80039a4:	2208      	movs	r2, #8
 80039a6:	4629      	mov	r1, r5
 80039a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80039ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80039b0:	6025      	str	r5, [r4, #0]
 80039b2:	61a5      	str	r5, [r4, #24]
 80039b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80039b8:	f7fe fc46 	bl	8002248 <memset>
 80039bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80039c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80039c4:	4620      	mov	r0, r4
 80039c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039c8:	3468      	adds	r4, #104	; 0x68
 80039ca:	e7d9      	b.n	8003980 <__sfp+0x1c>
 80039cc:	2104      	movs	r1, #4
 80039ce:	4638      	mov	r0, r7
 80039d0:	f7ff ff62 	bl	8003898 <__sfmoreglue>
 80039d4:	4604      	mov	r4, r0
 80039d6:	6030      	str	r0, [r6, #0]
 80039d8:	2800      	cmp	r0, #0
 80039da:	d1d5      	bne.n	8003988 <__sfp+0x24>
 80039dc:	f7ff ff78 	bl	80038d0 <__sfp_lock_release>
 80039e0:	230c      	movs	r3, #12
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	e7ee      	b.n	80039c4 <__sfp+0x60>
 80039e6:	bf00      	nop
 80039e8:	08004c94 	.word	0x08004c94
 80039ec:	ffff0001 	.word	0xffff0001

080039f0 <_fwalk_reent>:
 80039f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f4:	4606      	mov	r6, r0
 80039f6:	4688      	mov	r8, r1
 80039f8:	2700      	movs	r7, #0
 80039fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a02:	f1b9 0901 	subs.w	r9, r9, #1
 8003a06:	d505      	bpl.n	8003a14 <_fwalk_reent+0x24>
 8003a08:	6824      	ldr	r4, [r4, #0]
 8003a0a:	2c00      	cmp	r4, #0
 8003a0c:	d1f7      	bne.n	80039fe <_fwalk_reent+0xe>
 8003a0e:	4638      	mov	r0, r7
 8003a10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a14:	89ab      	ldrh	r3, [r5, #12]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d907      	bls.n	8003a2a <_fwalk_reent+0x3a>
 8003a1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	d003      	beq.n	8003a2a <_fwalk_reent+0x3a>
 8003a22:	4629      	mov	r1, r5
 8003a24:	4630      	mov	r0, r6
 8003a26:	47c0      	blx	r8
 8003a28:	4307      	orrs	r7, r0
 8003a2a:	3568      	adds	r5, #104	; 0x68
 8003a2c:	e7e9      	b.n	8003a02 <_fwalk_reent+0x12>
	...

08003a30 <_localeconv_r>:
 8003a30:	4800      	ldr	r0, [pc, #0]	; (8003a34 <_localeconv_r+0x4>)
 8003a32:	4770      	bx	lr
 8003a34:	20000160 	.word	0x20000160

08003a38 <__retarget_lock_init_recursive>:
 8003a38:	4770      	bx	lr

08003a3a <__retarget_lock_acquire_recursive>:
 8003a3a:	4770      	bx	lr

08003a3c <__retarget_lock_release_recursive>:
 8003a3c:	4770      	bx	lr
	...

08003a40 <malloc>:
 8003a40:	4b02      	ldr	r3, [pc, #8]	; (8003a4c <malloc+0xc>)
 8003a42:	4601      	mov	r1, r0
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	f000 bbfb 	b.w	8004240 <_malloc_r>
 8003a4a:	bf00      	nop
 8003a4c:	2000000c 	.word	0x2000000c

08003a50 <memchr>:
 8003a50:	4603      	mov	r3, r0
 8003a52:	b510      	push	{r4, lr}
 8003a54:	b2c9      	uxtb	r1, r1
 8003a56:	4402      	add	r2, r0
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	d101      	bne.n	8003a62 <memchr+0x12>
 8003a5e:	2000      	movs	r0, #0
 8003a60:	e003      	b.n	8003a6a <memchr+0x1a>
 8003a62:	7804      	ldrb	r4, [r0, #0]
 8003a64:	3301      	adds	r3, #1
 8003a66:	428c      	cmp	r4, r1
 8003a68:	d1f6      	bne.n	8003a58 <memchr+0x8>
 8003a6a:	bd10      	pop	{r4, pc}

08003a6c <memcpy>:
 8003a6c:	440a      	add	r2, r1
 8003a6e:	4291      	cmp	r1, r2
 8003a70:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a74:	d100      	bne.n	8003a78 <memcpy+0xc>
 8003a76:	4770      	bx	lr
 8003a78:	b510      	push	{r4, lr}
 8003a7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a7e:	4291      	cmp	r1, r2
 8003a80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a84:	d1f9      	bne.n	8003a7a <memcpy+0xe>
 8003a86:	bd10      	pop	{r4, pc}

08003a88 <_Balloc>:
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003a8c:	4604      	mov	r4, r0
 8003a8e:	460d      	mov	r5, r1
 8003a90:	b976      	cbnz	r6, 8003ab0 <_Balloc+0x28>
 8003a92:	2010      	movs	r0, #16
 8003a94:	f7ff ffd4 	bl	8003a40 <malloc>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	6260      	str	r0, [r4, #36]	; 0x24
 8003a9c:	b920      	cbnz	r0, 8003aa8 <_Balloc+0x20>
 8003a9e:	2166      	movs	r1, #102	; 0x66
 8003aa0:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <_Balloc+0x78>)
 8003aa2:	4818      	ldr	r0, [pc, #96]	; (8003b04 <_Balloc+0x7c>)
 8003aa4:	f000 fea4 	bl	80047f0 <__assert_func>
 8003aa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003aac:	6006      	str	r6, [r0, #0]
 8003aae:	60c6      	str	r6, [r0, #12]
 8003ab0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003ab2:	68f3      	ldr	r3, [r6, #12]
 8003ab4:	b183      	cbz	r3, 8003ad8 <_Balloc+0x50>
 8003ab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003abe:	b9b8      	cbnz	r0, 8003af0 <_Balloc+0x68>
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	fa01 f605 	lsl.w	r6, r1, r5
 8003ac6:	1d72      	adds	r2, r6, #5
 8003ac8:	4620      	mov	r0, r4
 8003aca:	0092      	lsls	r2, r2, #2
 8003acc:	f000 fb5e 	bl	800418c <_calloc_r>
 8003ad0:	b160      	cbz	r0, 8003aec <_Balloc+0x64>
 8003ad2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003ad6:	e00e      	b.n	8003af6 <_Balloc+0x6e>
 8003ad8:	2221      	movs	r2, #33	; 0x21
 8003ada:	2104      	movs	r1, #4
 8003adc:	4620      	mov	r0, r4
 8003ade:	f000 fb55 	bl	800418c <_calloc_r>
 8003ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ae4:	60f0      	str	r0, [r6, #12]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e4      	bne.n	8003ab6 <_Balloc+0x2e>
 8003aec:	2000      	movs	r0, #0
 8003aee:	bd70      	pop	{r4, r5, r6, pc}
 8003af0:	6802      	ldr	r2, [r0, #0]
 8003af2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003af6:	2300      	movs	r3, #0
 8003af8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003afc:	e7f7      	b.n	8003aee <_Balloc+0x66>
 8003afe:	bf00      	nop
 8003b00:	08004cd9 	.word	0x08004cd9
 8003b04:	08004dc0 	.word	0x08004dc0

08003b08 <_Bfree>:
 8003b08:	b570      	push	{r4, r5, r6, lr}
 8003b0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003b0c:	4605      	mov	r5, r0
 8003b0e:	460c      	mov	r4, r1
 8003b10:	b976      	cbnz	r6, 8003b30 <_Bfree+0x28>
 8003b12:	2010      	movs	r0, #16
 8003b14:	f7ff ff94 	bl	8003a40 <malloc>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	6268      	str	r0, [r5, #36]	; 0x24
 8003b1c:	b920      	cbnz	r0, 8003b28 <_Bfree+0x20>
 8003b1e:	218a      	movs	r1, #138	; 0x8a
 8003b20:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <_Bfree+0x3c>)
 8003b22:	4809      	ldr	r0, [pc, #36]	; (8003b48 <_Bfree+0x40>)
 8003b24:	f000 fe64 	bl	80047f0 <__assert_func>
 8003b28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b2c:	6006      	str	r6, [r0, #0]
 8003b2e:	60c6      	str	r6, [r0, #12]
 8003b30:	b13c      	cbz	r4, 8003b42 <_Bfree+0x3a>
 8003b32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b34:	6862      	ldr	r2, [r4, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b3c:	6021      	str	r1, [r4, #0]
 8003b3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003b42:	bd70      	pop	{r4, r5, r6, pc}
 8003b44:	08004cd9 	.word	0x08004cd9
 8003b48:	08004dc0 	.word	0x08004dc0

08003b4c <__multadd>:
 8003b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b50:	4698      	mov	r8, r3
 8003b52:	460c      	mov	r4, r1
 8003b54:	2300      	movs	r3, #0
 8003b56:	690e      	ldr	r6, [r1, #16]
 8003b58:	4607      	mov	r7, r0
 8003b5a:	f101 0014 	add.w	r0, r1, #20
 8003b5e:	6805      	ldr	r5, [r0, #0]
 8003b60:	3301      	adds	r3, #1
 8003b62:	b2a9      	uxth	r1, r5
 8003b64:	fb02 8101 	mla	r1, r2, r1, r8
 8003b68:	0c2d      	lsrs	r5, r5, #16
 8003b6a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8003b6e:	fb02 c505 	mla	r5, r2, r5, ip
 8003b72:	b289      	uxth	r1, r1
 8003b74:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8003b78:	429e      	cmp	r6, r3
 8003b7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8003b7e:	f840 1b04 	str.w	r1, [r0], #4
 8003b82:	dcec      	bgt.n	8003b5e <__multadd+0x12>
 8003b84:	f1b8 0f00 	cmp.w	r8, #0
 8003b88:	d022      	beq.n	8003bd0 <__multadd+0x84>
 8003b8a:	68a3      	ldr	r3, [r4, #8]
 8003b8c:	42b3      	cmp	r3, r6
 8003b8e:	dc19      	bgt.n	8003bc4 <__multadd+0x78>
 8003b90:	6861      	ldr	r1, [r4, #4]
 8003b92:	4638      	mov	r0, r7
 8003b94:	3101      	adds	r1, #1
 8003b96:	f7ff ff77 	bl	8003a88 <_Balloc>
 8003b9a:	4605      	mov	r5, r0
 8003b9c:	b928      	cbnz	r0, 8003baa <__multadd+0x5e>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	21b5      	movs	r1, #181	; 0xb5
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <__multadd+0x8c>)
 8003ba4:	480d      	ldr	r0, [pc, #52]	; (8003bdc <__multadd+0x90>)
 8003ba6:	f000 fe23 	bl	80047f0 <__assert_func>
 8003baa:	6922      	ldr	r2, [r4, #16]
 8003bac:	f104 010c 	add.w	r1, r4, #12
 8003bb0:	3202      	adds	r2, #2
 8003bb2:	0092      	lsls	r2, r2, #2
 8003bb4:	300c      	adds	r0, #12
 8003bb6:	f7ff ff59 	bl	8003a6c <memcpy>
 8003bba:	4621      	mov	r1, r4
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	f7ff ffa3 	bl	8003b08 <_Bfree>
 8003bc2:	462c      	mov	r4, r5
 8003bc4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8003bc8:	3601      	adds	r6, #1
 8003bca:	f8c3 8014 	str.w	r8, [r3, #20]
 8003bce:	6126      	str	r6, [r4, #16]
 8003bd0:	4620      	mov	r0, r4
 8003bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bd6:	bf00      	nop
 8003bd8:	08004d4f 	.word	0x08004d4f
 8003bdc:	08004dc0 	.word	0x08004dc0

08003be0 <__hi0bits>:
 8003be0:	0c02      	lsrs	r2, r0, #16
 8003be2:	0412      	lsls	r2, r2, #16
 8003be4:	4603      	mov	r3, r0
 8003be6:	b9ca      	cbnz	r2, 8003c1c <__hi0bits+0x3c>
 8003be8:	0403      	lsls	r3, r0, #16
 8003bea:	2010      	movs	r0, #16
 8003bec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003bf0:	bf04      	itt	eq
 8003bf2:	021b      	lsleq	r3, r3, #8
 8003bf4:	3008      	addeq	r0, #8
 8003bf6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003bfa:	bf04      	itt	eq
 8003bfc:	011b      	lsleq	r3, r3, #4
 8003bfe:	3004      	addeq	r0, #4
 8003c00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003c04:	bf04      	itt	eq
 8003c06:	009b      	lsleq	r3, r3, #2
 8003c08:	3002      	addeq	r0, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	db05      	blt.n	8003c1a <__hi0bits+0x3a>
 8003c0e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003c12:	f100 0001 	add.w	r0, r0, #1
 8003c16:	bf08      	it	eq
 8003c18:	2020      	moveq	r0, #32
 8003c1a:	4770      	bx	lr
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	e7e5      	b.n	8003bec <__hi0bits+0xc>

08003c20 <__lo0bits>:
 8003c20:	6803      	ldr	r3, [r0, #0]
 8003c22:	4602      	mov	r2, r0
 8003c24:	f013 0007 	ands.w	r0, r3, #7
 8003c28:	d00b      	beq.n	8003c42 <__lo0bits+0x22>
 8003c2a:	07d9      	lsls	r1, r3, #31
 8003c2c:	d422      	bmi.n	8003c74 <__lo0bits+0x54>
 8003c2e:	0798      	lsls	r0, r3, #30
 8003c30:	bf49      	itett	mi
 8003c32:	085b      	lsrmi	r3, r3, #1
 8003c34:	089b      	lsrpl	r3, r3, #2
 8003c36:	2001      	movmi	r0, #1
 8003c38:	6013      	strmi	r3, [r2, #0]
 8003c3a:	bf5c      	itt	pl
 8003c3c:	2002      	movpl	r0, #2
 8003c3e:	6013      	strpl	r3, [r2, #0]
 8003c40:	4770      	bx	lr
 8003c42:	b299      	uxth	r1, r3
 8003c44:	b909      	cbnz	r1, 8003c4a <__lo0bits+0x2a>
 8003c46:	2010      	movs	r0, #16
 8003c48:	0c1b      	lsrs	r3, r3, #16
 8003c4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003c4e:	bf04      	itt	eq
 8003c50:	0a1b      	lsreq	r3, r3, #8
 8003c52:	3008      	addeq	r0, #8
 8003c54:	0719      	lsls	r1, r3, #28
 8003c56:	bf04      	itt	eq
 8003c58:	091b      	lsreq	r3, r3, #4
 8003c5a:	3004      	addeq	r0, #4
 8003c5c:	0799      	lsls	r1, r3, #30
 8003c5e:	bf04      	itt	eq
 8003c60:	089b      	lsreq	r3, r3, #2
 8003c62:	3002      	addeq	r0, #2
 8003c64:	07d9      	lsls	r1, r3, #31
 8003c66:	d403      	bmi.n	8003c70 <__lo0bits+0x50>
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	f100 0001 	add.w	r0, r0, #1
 8003c6e:	d003      	beq.n	8003c78 <__lo0bits+0x58>
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	4770      	bx	lr
 8003c74:	2000      	movs	r0, #0
 8003c76:	4770      	bx	lr
 8003c78:	2020      	movs	r0, #32
 8003c7a:	4770      	bx	lr

08003c7c <__i2b>:
 8003c7c:	b510      	push	{r4, lr}
 8003c7e:	460c      	mov	r4, r1
 8003c80:	2101      	movs	r1, #1
 8003c82:	f7ff ff01 	bl	8003a88 <_Balloc>
 8003c86:	4602      	mov	r2, r0
 8003c88:	b928      	cbnz	r0, 8003c96 <__i2b+0x1a>
 8003c8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003c8e:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <__i2b+0x24>)
 8003c90:	4804      	ldr	r0, [pc, #16]	; (8003ca4 <__i2b+0x28>)
 8003c92:	f000 fdad 	bl	80047f0 <__assert_func>
 8003c96:	2301      	movs	r3, #1
 8003c98:	6144      	str	r4, [r0, #20]
 8003c9a:	6103      	str	r3, [r0, #16]
 8003c9c:	bd10      	pop	{r4, pc}
 8003c9e:	bf00      	nop
 8003ca0:	08004d4f 	.word	0x08004d4f
 8003ca4:	08004dc0 	.word	0x08004dc0

08003ca8 <__multiply>:
 8003ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cac:	4614      	mov	r4, r2
 8003cae:	690a      	ldr	r2, [r1, #16]
 8003cb0:	6923      	ldr	r3, [r4, #16]
 8003cb2:	460d      	mov	r5, r1
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	bfbe      	ittt	lt
 8003cb8:	460b      	movlt	r3, r1
 8003cba:	4625      	movlt	r5, r4
 8003cbc:	461c      	movlt	r4, r3
 8003cbe:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8003cc2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003cc6:	68ab      	ldr	r3, [r5, #8]
 8003cc8:	6869      	ldr	r1, [r5, #4]
 8003cca:	eb0a 0709 	add.w	r7, sl, r9
 8003cce:	42bb      	cmp	r3, r7
 8003cd0:	b085      	sub	sp, #20
 8003cd2:	bfb8      	it	lt
 8003cd4:	3101      	addlt	r1, #1
 8003cd6:	f7ff fed7 	bl	8003a88 <_Balloc>
 8003cda:	b930      	cbnz	r0, 8003cea <__multiply+0x42>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	f240 115d 	movw	r1, #349	; 0x15d
 8003ce2:	4b41      	ldr	r3, [pc, #260]	; (8003de8 <__multiply+0x140>)
 8003ce4:	4841      	ldr	r0, [pc, #260]	; (8003dec <__multiply+0x144>)
 8003ce6:	f000 fd83 	bl	80047f0 <__assert_func>
 8003cea:	f100 0614 	add.w	r6, r0, #20
 8003cee:	4633      	mov	r3, r6
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8003cf6:	4543      	cmp	r3, r8
 8003cf8:	d31e      	bcc.n	8003d38 <__multiply+0x90>
 8003cfa:	f105 0c14 	add.w	ip, r5, #20
 8003cfe:	f104 0314 	add.w	r3, r4, #20
 8003d02:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8003d06:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8003d0a:	9202      	str	r2, [sp, #8]
 8003d0c:	ebac 0205 	sub.w	r2, ip, r5
 8003d10:	3a15      	subs	r2, #21
 8003d12:	f022 0203 	bic.w	r2, r2, #3
 8003d16:	3204      	adds	r2, #4
 8003d18:	f105 0115 	add.w	r1, r5, #21
 8003d1c:	458c      	cmp	ip, r1
 8003d1e:	bf38      	it	cc
 8003d20:	2204      	movcc	r2, #4
 8003d22:	9201      	str	r2, [sp, #4]
 8003d24:	9a02      	ldr	r2, [sp, #8]
 8003d26:	9303      	str	r3, [sp, #12]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d808      	bhi.n	8003d3e <__multiply+0x96>
 8003d2c:	2f00      	cmp	r7, #0
 8003d2e:	dc55      	bgt.n	8003ddc <__multiply+0x134>
 8003d30:	6107      	str	r7, [r0, #16]
 8003d32:	b005      	add	sp, #20
 8003d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d38:	f843 2b04 	str.w	r2, [r3], #4
 8003d3c:	e7db      	b.n	8003cf6 <__multiply+0x4e>
 8003d3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8003d42:	f1ba 0f00 	cmp.w	sl, #0
 8003d46:	d020      	beq.n	8003d8a <__multiply+0xe2>
 8003d48:	46b1      	mov	r9, r6
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f105 0e14 	add.w	lr, r5, #20
 8003d50:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003d54:	f8d9 b000 	ldr.w	fp, [r9]
 8003d58:	b2a1      	uxth	r1, r4
 8003d5a:	fa1f fb8b 	uxth.w	fp, fp
 8003d5e:	fb0a b101 	mla	r1, sl, r1, fp
 8003d62:	4411      	add	r1, r2
 8003d64:	f8d9 2000 	ldr.w	r2, [r9]
 8003d68:	0c24      	lsrs	r4, r4, #16
 8003d6a:	0c12      	lsrs	r2, r2, #16
 8003d6c:	fb0a 2404 	mla	r4, sl, r4, r2
 8003d70:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8003d74:	b289      	uxth	r1, r1
 8003d76:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003d7a:	45f4      	cmp	ip, lr
 8003d7c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8003d80:	f849 1b04 	str.w	r1, [r9], #4
 8003d84:	d8e4      	bhi.n	8003d50 <__multiply+0xa8>
 8003d86:	9901      	ldr	r1, [sp, #4]
 8003d88:	5072      	str	r2, [r6, r1]
 8003d8a:	9a03      	ldr	r2, [sp, #12]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003d92:	f1b9 0f00 	cmp.w	r9, #0
 8003d96:	d01f      	beq.n	8003dd8 <__multiply+0x130>
 8003d98:	46b6      	mov	lr, r6
 8003d9a:	f04f 0a00 	mov.w	sl, #0
 8003d9e:	6834      	ldr	r4, [r6, #0]
 8003da0:	f105 0114 	add.w	r1, r5, #20
 8003da4:	880a      	ldrh	r2, [r1, #0]
 8003da6:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003daa:	b2a4      	uxth	r4, r4
 8003dac:	fb09 b202 	mla	r2, r9, r2, fp
 8003db0:	4492      	add	sl, r2
 8003db2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8003db6:	f84e 4b04 	str.w	r4, [lr], #4
 8003dba:	f851 4b04 	ldr.w	r4, [r1], #4
 8003dbe:	f8be 2000 	ldrh.w	r2, [lr]
 8003dc2:	0c24      	lsrs	r4, r4, #16
 8003dc4:	fb09 2404 	mla	r4, r9, r4, r2
 8003dc8:	458c      	cmp	ip, r1
 8003dca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8003dce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003dd2:	d8e7      	bhi.n	8003da4 <__multiply+0xfc>
 8003dd4:	9a01      	ldr	r2, [sp, #4]
 8003dd6:	50b4      	str	r4, [r6, r2]
 8003dd8:	3604      	adds	r6, #4
 8003dda:	e7a3      	b.n	8003d24 <__multiply+0x7c>
 8003ddc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1a5      	bne.n	8003d30 <__multiply+0x88>
 8003de4:	3f01      	subs	r7, #1
 8003de6:	e7a1      	b.n	8003d2c <__multiply+0x84>
 8003de8:	08004d4f 	.word	0x08004d4f
 8003dec:	08004dc0 	.word	0x08004dc0

08003df0 <__pow5mult>:
 8003df0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003df4:	4615      	mov	r5, r2
 8003df6:	f012 0203 	ands.w	r2, r2, #3
 8003dfa:	4606      	mov	r6, r0
 8003dfc:	460f      	mov	r7, r1
 8003dfe:	d007      	beq.n	8003e10 <__pow5mult+0x20>
 8003e00:	4c25      	ldr	r4, [pc, #148]	; (8003e98 <__pow5mult+0xa8>)
 8003e02:	3a01      	subs	r2, #1
 8003e04:	2300      	movs	r3, #0
 8003e06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e0a:	f7ff fe9f 	bl	8003b4c <__multadd>
 8003e0e:	4607      	mov	r7, r0
 8003e10:	10ad      	asrs	r5, r5, #2
 8003e12:	d03d      	beq.n	8003e90 <__pow5mult+0xa0>
 8003e14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003e16:	b97c      	cbnz	r4, 8003e38 <__pow5mult+0x48>
 8003e18:	2010      	movs	r0, #16
 8003e1a:	f7ff fe11 	bl	8003a40 <malloc>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6270      	str	r0, [r6, #36]	; 0x24
 8003e22:	b928      	cbnz	r0, 8003e30 <__pow5mult+0x40>
 8003e24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003e28:	4b1c      	ldr	r3, [pc, #112]	; (8003e9c <__pow5mult+0xac>)
 8003e2a:	481d      	ldr	r0, [pc, #116]	; (8003ea0 <__pow5mult+0xb0>)
 8003e2c:	f000 fce0 	bl	80047f0 <__assert_func>
 8003e30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003e34:	6004      	str	r4, [r0, #0]
 8003e36:	60c4      	str	r4, [r0, #12]
 8003e38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003e3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003e40:	b94c      	cbnz	r4, 8003e56 <__pow5mult+0x66>
 8003e42:	f240 2171 	movw	r1, #625	; 0x271
 8003e46:	4630      	mov	r0, r6
 8003e48:	f7ff ff18 	bl	8003c7c <__i2b>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	4604      	mov	r4, r0
 8003e50:	f8c8 0008 	str.w	r0, [r8, #8]
 8003e54:	6003      	str	r3, [r0, #0]
 8003e56:	f04f 0900 	mov.w	r9, #0
 8003e5a:	07eb      	lsls	r3, r5, #31
 8003e5c:	d50a      	bpl.n	8003e74 <__pow5mult+0x84>
 8003e5e:	4639      	mov	r1, r7
 8003e60:	4622      	mov	r2, r4
 8003e62:	4630      	mov	r0, r6
 8003e64:	f7ff ff20 	bl	8003ca8 <__multiply>
 8003e68:	4680      	mov	r8, r0
 8003e6a:	4639      	mov	r1, r7
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f7ff fe4b 	bl	8003b08 <_Bfree>
 8003e72:	4647      	mov	r7, r8
 8003e74:	106d      	asrs	r5, r5, #1
 8003e76:	d00b      	beq.n	8003e90 <__pow5mult+0xa0>
 8003e78:	6820      	ldr	r0, [r4, #0]
 8003e7a:	b938      	cbnz	r0, 8003e8c <__pow5mult+0x9c>
 8003e7c:	4622      	mov	r2, r4
 8003e7e:	4621      	mov	r1, r4
 8003e80:	4630      	mov	r0, r6
 8003e82:	f7ff ff11 	bl	8003ca8 <__multiply>
 8003e86:	6020      	str	r0, [r4, #0]
 8003e88:	f8c0 9000 	str.w	r9, [r0]
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	e7e4      	b.n	8003e5a <__pow5mult+0x6a>
 8003e90:	4638      	mov	r0, r7
 8003e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e96:	bf00      	nop
 8003e98:	08004f10 	.word	0x08004f10
 8003e9c:	08004cd9 	.word	0x08004cd9
 8003ea0:	08004dc0 	.word	0x08004dc0

08003ea4 <__lshift>:
 8003ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ea8:	460c      	mov	r4, r1
 8003eaa:	4607      	mov	r7, r0
 8003eac:	4691      	mov	r9, r2
 8003eae:	6923      	ldr	r3, [r4, #16]
 8003eb0:	6849      	ldr	r1, [r1, #4]
 8003eb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003eb6:	68a3      	ldr	r3, [r4, #8]
 8003eb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003ebc:	f108 0601 	add.w	r6, r8, #1
 8003ec0:	42b3      	cmp	r3, r6
 8003ec2:	db0b      	blt.n	8003edc <__lshift+0x38>
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	f7ff fddf 	bl	8003a88 <_Balloc>
 8003eca:	4605      	mov	r5, r0
 8003ecc:	b948      	cbnz	r0, 8003ee2 <__lshift+0x3e>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003ed4:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <__lshift+0xd0>)
 8003ed6:	4828      	ldr	r0, [pc, #160]	; (8003f78 <__lshift+0xd4>)
 8003ed8:	f000 fc8a 	bl	80047f0 <__assert_func>
 8003edc:	3101      	adds	r1, #1
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	e7ee      	b.n	8003ec0 <__lshift+0x1c>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f100 0114 	add.w	r1, r0, #20
 8003ee8:	f100 0210 	add.w	r2, r0, #16
 8003eec:	4618      	mov	r0, r3
 8003eee:	4553      	cmp	r3, sl
 8003ef0:	db33      	blt.n	8003f5a <__lshift+0xb6>
 8003ef2:	6920      	ldr	r0, [r4, #16]
 8003ef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003ef8:	f104 0314 	add.w	r3, r4, #20
 8003efc:	f019 091f 	ands.w	r9, r9, #31
 8003f00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003f04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003f08:	d02b      	beq.n	8003f62 <__lshift+0xbe>
 8003f0a:	468a      	mov	sl, r1
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f1c9 0e20 	rsb	lr, r9, #32
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	fa00 f009 	lsl.w	r0, r0, r9
 8003f18:	4302      	orrs	r2, r0
 8003f1a:	f84a 2b04 	str.w	r2, [sl], #4
 8003f1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f22:	459c      	cmp	ip, r3
 8003f24:	fa22 f20e 	lsr.w	r2, r2, lr
 8003f28:	d8f3      	bhi.n	8003f12 <__lshift+0x6e>
 8003f2a:	ebac 0304 	sub.w	r3, ip, r4
 8003f2e:	3b15      	subs	r3, #21
 8003f30:	f023 0303 	bic.w	r3, r3, #3
 8003f34:	3304      	adds	r3, #4
 8003f36:	f104 0015 	add.w	r0, r4, #21
 8003f3a:	4584      	cmp	ip, r0
 8003f3c:	bf38      	it	cc
 8003f3e:	2304      	movcc	r3, #4
 8003f40:	50ca      	str	r2, [r1, r3]
 8003f42:	b10a      	cbz	r2, 8003f48 <__lshift+0xa4>
 8003f44:	f108 0602 	add.w	r6, r8, #2
 8003f48:	3e01      	subs	r6, #1
 8003f4a:	4638      	mov	r0, r7
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	612e      	str	r6, [r5, #16]
 8003f50:	f7ff fdda 	bl	8003b08 <_Bfree>
 8003f54:	4628      	mov	r0, r5
 8003f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8003f5e:	3301      	adds	r3, #1
 8003f60:	e7c5      	b.n	8003eee <__lshift+0x4a>
 8003f62:	3904      	subs	r1, #4
 8003f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f68:	459c      	cmp	ip, r3
 8003f6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8003f6e:	d8f9      	bhi.n	8003f64 <__lshift+0xc0>
 8003f70:	e7ea      	b.n	8003f48 <__lshift+0xa4>
 8003f72:	bf00      	nop
 8003f74:	08004d4f 	.word	0x08004d4f
 8003f78:	08004dc0 	.word	0x08004dc0

08003f7c <__mcmp>:
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	690a      	ldr	r2, [r1, #16]
 8003f80:	6900      	ldr	r0, [r0, #16]
 8003f82:	b530      	push	{r4, r5, lr}
 8003f84:	1a80      	subs	r0, r0, r2
 8003f86:	d10d      	bne.n	8003fa4 <__mcmp+0x28>
 8003f88:	3314      	adds	r3, #20
 8003f8a:	3114      	adds	r1, #20
 8003f8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003f90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003f94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003f98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003f9c:	4295      	cmp	r5, r2
 8003f9e:	d002      	beq.n	8003fa6 <__mcmp+0x2a>
 8003fa0:	d304      	bcc.n	8003fac <__mcmp+0x30>
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	bd30      	pop	{r4, r5, pc}
 8003fa6:	42a3      	cmp	r3, r4
 8003fa8:	d3f4      	bcc.n	8003f94 <__mcmp+0x18>
 8003faa:	e7fb      	b.n	8003fa4 <__mcmp+0x28>
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb0:	e7f8      	b.n	8003fa4 <__mcmp+0x28>
	...

08003fb4 <__mdiff>:
 8003fb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb8:	460c      	mov	r4, r1
 8003fba:	4606      	mov	r6, r0
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	4692      	mov	sl, r2
 8003fc2:	f7ff ffdb 	bl	8003f7c <__mcmp>
 8003fc6:	1e05      	subs	r5, r0, #0
 8003fc8:	d111      	bne.n	8003fee <__mdiff+0x3a>
 8003fca:	4629      	mov	r1, r5
 8003fcc:	4630      	mov	r0, r6
 8003fce:	f7ff fd5b 	bl	8003a88 <_Balloc>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	b928      	cbnz	r0, 8003fe2 <__mdiff+0x2e>
 8003fd6:	f240 2132 	movw	r1, #562	; 0x232
 8003fda:	4b3c      	ldr	r3, [pc, #240]	; (80040cc <__mdiff+0x118>)
 8003fdc:	483c      	ldr	r0, [pc, #240]	; (80040d0 <__mdiff+0x11c>)
 8003fde:	f000 fc07 	bl	80047f0 <__assert_func>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003fe8:	4610      	mov	r0, r2
 8003fea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fee:	bfa4      	itt	ge
 8003ff0:	4653      	movge	r3, sl
 8003ff2:	46a2      	movge	sl, r4
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003ffa:	bfa6      	itte	ge
 8003ffc:	461c      	movge	r4, r3
 8003ffe:	2500      	movge	r5, #0
 8004000:	2501      	movlt	r5, #1
 8004002:	f7ff fd41 	bl	8003a88 <_Balloc>
 8004006:	4602      	mov	r2, r0
 8004008:	b918      	cbnz	r0, 8004012 <__mdiff+0x5e>
 800400a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800400e:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <__mdiff+0x118>)
 8004010:	e7e4      	b.n	8003fdc <__mdiff+0x28>
 8004012:	f100 0814 	add.w	r8, r0, #20
 8004016:	f8da 7010 	ldr.w	r7, [sl, #16]
 800401a:	60c5      	str	r5, [r0, #12]
 800401c:	f04f 0c00 	mov.w	ip, #0
 8004020:	f10a 0514 	add.w	r5, sl, #20
 8004024:	f10a 0010 	add.w	r0, sl, #16
 8004028:	46c2      	mov	sl, r8
 800402a:	6926      	ldr	r6, [r4, #16]
 800402c:	f104 0914 	add.w	r9, r4, #20
 8004030:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004034:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004038:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800403c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004040:	fa1f f18b 	uxth.w	r1, fp
 8004044:	4461      	add	r1, ip
 8004046:	fa1f fc83 	uxth.w	ip, r3
 800404a:	0c1b      	lsrs	r3, r3, #16
 800404c:	eba1 010c 	sub.w	r1, r1, ip
 8004050:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004054:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004058:	b289      	uxth	r1, r1
 800405a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800405e:	454e      	cmp	r6, r9
 8004060:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004064:	f84a 3b04 	str.w	r3, [sl], #4
 8004068:	d8e6      	bhi.n	8004038 <__mdiff+0x84>
 800406a:	1b33      	subs	r3, r6, r4
 800406c:	3b15      	subs	r3, #21
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	3415      	adds	r4, #21
 8004074:	3304      	adds	r3, #4
 8004076:	42a6      	cmp	r6, r4
 8004078:	bf38      	it	cc
 800407a:	2304      	movcc	r3, #4
 800407c:	441d      	add	r5, r3
 800407e:	4443      	add	r3, r8
 8004080:	461e      	mov	r6, r3
 8004082:	462c      	mov	r4, r5
 8004084:	4574      	cmp	r4, lr
 8004086:	d30e      	bcc.n	80040a6 <__mdiff+0xf2>
 8004088:	f10e 0103 	add.w	r1, lr, #3
 800408c:	1b49      	subs	r1, r1, r5
 800408e:	f021 0103 	bic.w	r1, r1, #3
 8004092:	3d03      	subs	r5, #3
 8004094:	45ae      	cmp	lr, r5
 8004096:	bf38      	it	cc
 8004098:	2100      	movcc	r1, #0
 800409a:	4419      	add	r1, r3
 800409c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80040a0:	b18b      	cbz	r3, 80040c6 <__mdiff+0x112>
 80040a2:	6117      	str	r7, [r2, #16]
 80040a4:	e7a0      	b.n	8003fe8 <__mdiff+0x34>
 80040a6:	f854 8b04 	ldr.w	r8, [r4], #4
 80040aa:	fa1f f188 	uxth.w	r1, r8
 80040ae:	4461      	add	r1, ip
 80040b0:	1408      	asrs	r0, r1, #16
 80040b2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80040b6:	b289      	uxth	r1, r1
 80040b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80040bc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80040c0:	f846 1b04 	str.w	r1, [r6], #4
 80040c4:	e7de      	b.n	8004084 <__mdiff+0xd0>
 80040c6:	3f01      	subs	r7, #1
 80040c8:	e7e8      	b.n	800409c <__mdiff+0xe8>
 80040ca:	bf00      	nop
 80040cc:	08004d4f 	.word	0x08004d4f
 80040d0:	08004dc0 	.word	0x08004dc0

080040d4 <__d2b>:
 80040d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80040d8:	2101      	movs	r1, #1
 80040da:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80040de:	4690      	mov	r8, r2
 80040e0:	461d      	mov	r5, r3
 80040e2:	f7ff fcd1 	bl	8003a88 <_Balloc>
 80040e6:	4604      	mov	r4, r0
 80040e8:	b930      	cbnz	r0, 80040f8 <__d2b+0x24>
 80040ea:	4602      	mov	r2, r0
 80040ec:	f240 310a 	movw	r1, #778	; 0x30a
 80040f0:	4b24      	ldr	r3, [pc, #144]	; (8004184 <__d2b+0xb0>)
 80040f2:	4825      	ldr	r0, [pc, #148]	; (8004188 <__d2b+0xb4>)
 80040f4:	f000 fb7c 	bl	80047f0 <__assert_func>
 80040f8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80040fc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004100:	bb2d      	cbnz	r5, 800414e <__d2b+0x7a>
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	f1b8 0300 	subs.w	r3, r8, #0
 8004108:	d026      	beq.n	8004158 <__d2b+0x84>
 800410a:	4668      	mov	r0, sp
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	f7ff fd87 	bl	8003c20 <__lo0bits>
 8004112:	9900      	ldr	r1, [sp, #0]
 8004114:	b1f0      	cbz	r0, 8004154 <__d2b+0x80>
 8004116:	9a01      	ldr	r2, [sp, #4]
 8004118:	f1c0 0320 	rsb	r3, r0, #32
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	430b      	orrs	r3, r1
 8004122:	40c2      	lsrs	r2, r0
 8004124:	6163      	str	r3, [r4, #20]
 8004126:	9201      	str	r2, [sp, #4]
 8004128:	9b01      	ldr	r3, [sp, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf14      	ite	ne
 800412e:	2102      	movne	r1, #2
 8004130:	2101      	moveq	r1, #1
 8004132:	61a3      	str	r3, [r4, #24]
 8004134:	6121      	str	r1, [r4, #16]
 8004136:	b1c5      	cbz	r5, 800416a <__d2b+0x96>
 8004138:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800413c:	4405      	add	r5, r0
 800413e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004142:	603d      	str	r5, [r7, #0]
 8004144:	6030      	str	r0, [r6, #0]
 8004146:	4620      	mov	r0, r4
 8004148:	b002      	add	sp, #8
 800414a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800414e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004152:	e7d6      	b.n	8004102 <__d2b+0x2e>
 8004154:	6161      	str	r1, [r4, #20]
 8004156:	e7e7      	b.n	8004128 <__d2b+0x54>
 8004158:	a801      	add	r0, sp, #4
 800415a:	f7ff fd61 	bl	8003c20 <__lo0bits>
 800415e:	2101      	movs	r1, #1
 8004160:	9b01      	ldr	r3, [sp, #4]
 8004162:	6121      	str	r1, [r4, #16]
 8004164:	6163      	str	r3, [r4, #20]
 8004166:	3020      	adds	r0, #32
 8004168:	e7e5      	b.n	8004136 <__d2b+0x62>
 800416a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800416e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004172:	6038      	str	r0, [r7, #0]
 8004174:	6918      	ldr	r0, [r3, #16]
 8004176:	f7ff fd33 	bl	8003be0 <__hi0bits>
 800417a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800417e:	6031      	str	r1, [r6, #0]
 8004180:	e7e1      	b.n	8004146 <__d2b+0x72>
 8004182:	bf00      	nop
 8004184:	08004d4f 	.word	0x08004d4f
 8004188:	08004dc0 	.word	0x08004dc0

0800418c <_calloc_r>:
 800418c:	b538      	push	{r3, r4, r5, lr}
 800418e:	fb02 f501 	mul.w	r5, r2, r1
 8004192:	4629      	mov	r1, r5
 8004194:	f000 f854 	bl	8004240 <_malloc_r>
 8004198:	4604      	mov	r4, r0
 800419a:	b118      	cbz	r0, 80041a4 <_calloc_r+0x18>
 800419c:	462a      	mov	r2, r5
 800419e:	2100      	movs	r1, #0
 80041a0:	f7fe f852 	bl	8002248 <memset>
 80041a4:	4620      	mov	r0, r4
 80041a6:	bd38      	pop	{r3, r4, r5, pc}

080041a8 <_free_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4605      	mov	r5, r0
 80041ac:	2900      	cmp	r1, #0
 80041ae:	d043      	beq.n	8004238 <_free_r+0x90>
 80041b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b4:	1f0c      	subs	r4, r1, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bfb8      	it	lt
 80041ba:	18e4      	addlt	r4, r4, r3
 80041bc:	f000 fca2 	bl	8004b04 <__malloc_lock>
 80041c0:	4a1e      	ldr	r2, [pc, #120]	; (800423c <_free_r+0x94>)
 80041c2:	6813      	ldr	r3, [r2, #0]
 80041c4:	4610      	mov	r0, r2
 80041c6:	b933      	cbnz	r3, 80041d6 <_free_r+0x2e>
 80041c8:	6063      	str	r3, [r4, #4]
 80041ca:	6014      	str	r4, [r2, #0]
 80041cc:	4628      	mov	r0, r5
 80041ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041d2:	f000 bc9d 	b.w	8004b10 <__malloc_unlock>
 80041d6:	42a3      	cmp	r3, r4
 80041d8:	d90a      	bls.n	80041f0 <_free_r+0x48>
 80041da:	6821      	ldr	r1, [r4, #0]
 80041dc:	1862      	adds	r2, r4, r1
 80041de:	4293      	cmp	r3, r2
 80041e0:	bf01      	itttt	eq
 80041e2:	681a      	ldreq	r2, [r3, #0]
 80041e4:	685b      	ldreq	r3, [r3, #4]
 80041e6:	1852      	addeq	r2, r2, r1
 80041e8:	6022      	streq	r2, [r4, #0]
 80041ea:	6063      	str	r3, [r4, #4]
 80041ec:	6004      	str	r4, [r0, #0]
 80041ee:	e7ed      	b.n	80041cc <_free_r+0x24>
 80041f0:	461a      	mov	r2, r3
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	b10b      	cbz	r3, 80041fa <_free_r+0x52>
 80041f6:	42a3      	cmp	r3, r4
 80041f8:	d9fa      	bls.n	80041f0 <_free_r+0x48>
 80041fa:	6811      	ldr	r1, [r2, #0]
 80041fc:	1850      	adds	r0, r2, r1
 80041fe:	42a0      	cmp	r0, r4
 8004200:	d10b      	bne.n	800421a <_free_r+0x72>
 8004202:	6820      	ldr	r0, [r4, #0]
 8004204:	4401      	add	r1, r0
 8004206:	1850      	adds	r0, r2, r1
 8004208:	4283      	cmp	r3, r0
 800420a:	6011      	str	r1, [r2, #0]
 800420c:	d1de      	bne.n	80041cc <_free_r+0x24>
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4401      	add	r1, r0
 8004214:	6011      	str	r1, [r2, #0]
 8004216:	6053      	str	r3, [r2, #4]
 8004218:	e7d8      	b.n	80041cc <_free_r+0x24>
 800421a:	d902      	bls.n	8004222 <_free_r+0x7a>
 800421c:	230c      	movs	r3, #12
 800421e:	602b      	str	r3, [r5, #0]
 8004220:	e7d4      	b.n	80041cc <_free_r+0x24>
 8004222:	6820      	ldr	r0, [r4, #0]
 8004224:	1821      	adds	r1, r4, r0
 8004226:	428b      	cmp	r3, r1
 8004228:	bf01      	itttt	eq
 800422a:	6819      	ldreq	r1, [r3, #0]
 800422c:	685b      	ldreq	r3, [r3, #4]
 800422e:	1809      	addeq	r1, r1, r0
 8004230:	6021      	streq	r1, [r4, #0]
 8004232:	6063      	str	r3, [r4, #4]
 8004234:	6054      	str	r4, [r2, #4]
 8004236:	e7c9      	b.n	80041cc <_free_r+0x24>
 8004238:	bd38      	pop	{r3, r4, r5, pc}
 800423a:	bf00      	nop
 800423c:	200001fc 	.word	0x200001fc

08004240 <_malloc_r>:
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	1ccd      	adds	r5, r1, #3
 8004244:	f025 0503 	bic.w	r5, r5, #3
 8004248:	3508      	adds	r5, #8
 800424a:	2d0c      	cmp	r5, #12
 800424c:	bf38      	it	cc
 800424e:	250c      	movcc	r5, #12
 8004250:	2d00      	cmp	r5, #0
 8004252:	4606      	mov	r6, r0
 8004254:	db01      	blt.n	800425a <_malloc_r+0x1a>
 8004256:	42a9      	cmp	r1, r5
 8004258:	d903      	bls.n	8004262 <_malloc_r+0x22>
 800425a:	230c      	movs	r3, #12
 800425c:	6033      	str	r3, [r6, #0]
 800425e:	2000      	movs	r0, #0
 8004260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004262:	f000 fc4f 	bl	8004b04 <__malloc_lock>
 8004266:	4921      	ldr	r1, [pc, #132]	; (80042ec <_malloc_r+0xac>)
 8004268:	680a      	ldr	r2, [r1, #0]
 800426a:	4614      	mov	r4, r2
 800426c:	b99c      	cbnz	r4, 8004296 <_malloc_r+0x56>
 800426e:	4f20      	ldr	r7, [pc, #128]	; (80042f0 <_malloc_r+0xb0>)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	b923      	cbnz	r3, 800427e <_malloc_r+0x3e>
 8004274:	4621      	mov	r1, r4
 8004276:	4630      	mov	r0, r6
 8004278:	f000 f994 	bl	80045a4 <_sbrk_r>
 800427c:	6038      	str	r0, [r7, #0]
 800427e:	4629      	mov	r1, r5
 8004280:	4630      	mov	r0, r6
 8004282:	f000 f98f 	bl	80045a4 <_sbrk_r>
 8004286:	1c43      	adds	r3, r0, #1
 8004288:	d123      	bne.n	80042d2 <_malloc_r+0x92>
 800428a:	230c      	movs	r3, #12
 800428c:	4630      	mov	r0, r6
 800428e:	6033      	str	r3, [r6, #0]
 8004290:	f000 fc3e 	bl	8004b10 <__malloc_unlock>
 8004294:	e7e3      	b.n	800425e <_malloc_r+0x1e>
 8004296:	6823      	ldr	r3, [r4, #0]
 8004298:	1b5b      	subs	r3, r3, r5
 800429a:	d417      	bmi.n	80042cc <_malloc_r+0x8c>
 800429c:	2b0b      	cmp	r3, #11
 800429e:	d903      	bls.n	80042a8 <_malloc_r+0x68>
 80042a0:	6023      	str	r3, [r4, #0]
 80042a2:	441c      	add	r4, r3
 80042a4:	6025      	str	r5, [r4, #0]
 80042a6:	e004      	b.n	80042b2 <_malloc_r+0x72>
 80042a8:	6863      	ldr	r3, [r4, #4]
 80042aa:	42a2      	cmp	r2, r4
 80042ac:	bf0c      	ite	eq
 80042ae:	600b      	streq	r3, [r1, #0]
 80042b0:	6053      	strne	r3, [r2, #4]
 80042b2:	4630      	mov	r0, r6
 80042b4:	f000 fc2c 	bl	8004b10 <__malloc_unlock>
 80042b8:	f104 000b 	add.w	r0, r4, #11
 80042bc:	1d23      	adds	r3, r4, #4
 80042be:	f020 0007 	bic.w	r0, r0, #7
 80042c2:	1ac2      	subs	r2, r0, r3
 80042c4:	d0cc      	beq.n	8004260 <_malloc_r+0x20>
 80042c6:	1a1b      	subs	r3, r3, r0
 80042c8:	50a3      	str	r3, [r4, r2]
 80042ca:	e7c9      	b.n	8004260 <_malloc_r+0x20>
 80042cc:	4622      	mov	r2, r4
 80042ce:	6864      	ldr	r4, [r4, #4]
 80042d0:	e7cc      	b.n	800426c <_malloc_r+0x2c>
 80042d2:	1cc4      	adds	r4, r0, #3
 80042d4:	f024 0403 	bic.w	r4, r4, #3
 80042d8:	42a0      	cmp	r0, r4
 80042da:	d0e3      	beq.n	80042a4 <_malloc_r+0x64>
 80042dc:	1a21      	subs	r1, r4, r0
 80042de:	4630      	mov	r0, r6
 80042e0:	f000 f960 	bl	80045a4 <_sbrk_r>
 80042e4:	3001      	adds	r0, #1
 80042e6:	d1dd      	bne.n	80042a4 <_malloc_r+0x64>
 80042e8:	e7cf      	b.n	800428a <_malloc_r+0x4a>
 80042ea:	bf00      	nop
 80042ec:	200001fc 	.word	0x200001fc
 80042f0:	20000200 	.word	0x20000200

080042f4 <__sfputc_r>:
 80042f4:	6893      	ldr	r3, [r2, #8]
 80042f6:	b410      	push	{r4}
 80042f8:	3b01      	subs	r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	6093      	str	r3, [r2, #8]
 80042fe:	da07      	bge.n	8004310 <__sfputc_r+0x1c>
 8004300:	6994      	ldr	r4, [r2, #24]
 8004302:	42a3      	cmp	r3, r4
 8004304:	db01      	blt.n	800430a <__sfputc_r+0x16>
 8004306:	290a      	cmp	r1, #10
 8004308:	d102      	bne.n	8004310 <__sfputc_r+0x1c>
 800430a:	bc10      	pop	{r4}
 800430c:	f000 b99e 	b.w	800464c <__swbuf_r>
 8004310:	6813      	ldr	r3, [r2, #0]
 8004312:	1c58      	adds	r0, r3, #1
 8004314:	6010      	str	r0, [r2, #0]
 8004316:	7019      	strb	r1, [r3, #0]
 8004318:	4608      	mov	r0, r1
 800431a:	bc10      	pop	{r4}
 800431c:	4770      	bx	lr

0800431e <__sfputs_r>:
 800431e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004320:	4606      	mov	r6, r0
 8004322:	460f      	mov	r7, r1
 8004324:	4614      	mov	r4, r2
 8004326:	18d5      	adds	r5, r2, r3
 8004328:	42ac      	cmp	r4, r5
 800432a:	d101      	bne.n	8004330 <__sfputs_r+0x12>
 800432c:	2000      	movs	r0, #0
 800432e:	e007      	b.n	8004340 <__sfputs_r+0x22>
 8004330:	463a      	mov	r2, r7
 8004332:	4630      	mov	r0, r6
 8004334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004338:	f7ff ffdc 	bl	80042f4 <__sfputc_r>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d1f3      	bne.n	8004328 <__sfputs_r+0xa>
 8004340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004344 <_vfiprintf_r>:
 8004344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004348:	460d      	mov	r5, r1
 800434a:	4614      	mov	r4, r2
 800434c:	4698      	mov	r8, r3
 800434e:	4606      	mov	r6, r0
 8004350:	b09d      	sub	sp, #116	; 0x74
 8004352:	b118      	cbz	r0, 800435c <_vfiprintf_r+0x18>
 8004354:	6983      	ldr	r3, [r0, #24]
 8004356:	b90b      	cbnz	r3, 800435c <_vfiprintf_r+0x18>
 8004358:	f7ff facc 	bl	80038f4 <__sinit>
 800435c:	4b89      	ldr	r3, [pc, #548]	; (8004584 <_vfiprintf_r+0x240>)
 800435e:	429d      	cmp	r5, r3
 8004360:	d11b      	bne.n	800439a <_vfiprintf_r+0x56>
 8004362:	6875      	ldr	r5, [r6, #4]
 8004364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004366:	07d9      	lsls	r1, r3, #31
 8004368:	d405      	bmi.n	8004376 <_vfiprintf_r+0x32>
 800436a:	89ab      	ldrh	r3, [r5, #12]
 800436c:	059a      	lsls	r2, r3, #22
 800436e:	d402      	bmi.n	8004376 <_vfiprintf_r+0x32>
 8004370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004372:	f7ff fb62 	bl	8003a3a <__retarget_lock_acquire_recursive>
 8004376:	89ab      	ldrh	r3, [r5, #12]
 8004378:	071b      	lsls	r3, r3, #28
 800437a:	d501      	bpl.n	8004380 <_vfiprintf_r+0x3c>
 800437c:	692b      	ldr	r3, [r5, #16]
 800437e:	b9eb      	cbnz	r3, 80043bc <_vfiprintf_r+0x78>
 8004380:	4629      	mov	r1, r5
 8004382:	4630      	mov	r0, r6
 8004384:	f000 f9c6 	bl	8004714 <__swsetup_r>
 8004388:	b1c0      	cbz	r0, 80043bc <_vfiprintf_r+0x78>
 800438a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800438c:	07dc      	lsls	r4, r3, #31
 800438e:	d50e      	bpl.n	80043ae <_vfiprintf_r+0x6a>
 8004390:	f04f 30ff 	mov.w	r0, #4294967295
 8004394:	b01d      	add	sp, #116	; 0x74
 8004396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800439a:	4b7b      	ldr	r3, [pc, #492]	; (8004588 <_vfiprintf_r+0x244>)
 800439c:	429d      	cmp	r5, r3
 800439e:	d101      	bne.n	80043a4 <_vfiprintf_r+0x60>
 80043a0:	68b5      	ldr	r5, [r6, #8]
 80043a2:	e7df      	b.n	8004364 <_vfiprintf_r+0x20>
 80043a4:	4b79      	ldr	r3, [pc, #484]	; (800458c <_vfiprintf_r+0x248>)
 80043a6:	429d      	cmp	r5, r3
 80043a8:	bf08      	it	eq
 80043aa:	68f5      	ldreq	r5, [r6, #12]
 80043ac:	e7da      	b.n	8004364 <_vfiprintf_r+0x20>
 80043ae:	89ab      	ldrh	r3, [r5, #12]
 80043b0:	0598      	lsls	r0, r3, #22
 80043b2:	d4ed      	bmi.n	8004390 <_vfiprintf_r+0x4c>
 80043b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043b6:	f7ff fb41 	bl	8003a3c <__retarget_lock_release_recursive>
 80043ba:	e7e9      	b.n	8004390 <_vfiprintf_r+0x4c>
 80043bc:	2300      	movs	r3, #0
 80043be:	9309      	str	r3, [sp, #36]	; 0x24
 80043c0:	2320      	movs	r3, #32
 80043c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043c6:	2330      	movs	r3, #48	; 0x30
 80043c8:	f04f 0901 	mov.w	r9, #1
 80043cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80043d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004590 <_vfiprintf_r+0x24c>
 80043d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043d8:	4623      	mov	r3, r4
 80043da:	469a      	mov	sl, r3
 80043dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043e0:	b10a      	cbz	r2, 80043e6 <_vfiprintf_r+0xa2>
 80043e2:	2a25      	cmp	r2, #37	; 0x25
 80043e4:	d1f9      	bne.n	80043da <_vfiprintf_r+0x96>
 80043e6:	ebba 0b04 	subs.w	fp, sl, r4
 80043ea:	d00b      	beq.n	8004404 <_vfiprintf_r+0xc0>
 80043ec:	465b      	mov	r3, fp
 80043ee:	4622      	mov	r2, r4
 80043f0:	4629      	mov	r1, r5
 80043f2:	4630      	mov	r0, r6
 80043f4:	f7ff ff93 	bl	800431e <__sfputs_r>
 80043f8:	3001      	adds	r0, #1
 80043fa:	f000 80aa 	beq.w	8004552 <_vfiprintf_r+0x20e>
 80043fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004400:	445a      	add	r2, fp
 8004402:	9209      	str	r2, [sp, #36]	; 0x24
 8004404:	f89a 3000 	ldrb.w	r3, [sl]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 80a2 	beq.w	8004552 <_vfiprintf_r+0x20e>
 800440e:	2300      	movs	r3, #0
 8004410:	f04f 32ff 	mov.w	r2, #4294967295
 8004414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004418:	f10a 0a01 	add.w	sl, sl, #1
 800441c:	9304      	str	r3, [sp, #16]
 800441e:	9307      	str	r3, [sp, #28]
 8004420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004424:	931a      	str	r3, [sp, #104]	; 0x68
 8004426:	4654      	mov	r4, sl
 8004428:	2205      	movs	r2, #5
 800442a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800442e:	4858      	ldr	r0, [pc, #352]	; (8004590 <_vfiprintf_r+0x24c>)
 8004430:	f7ff fb0e 	bl	8003a50 <memchr>
 8004434:	9a04      	ldr	r2, [sp, #16]
 8004436:	b9d8      	cbnz	r0, 8004470 <_vfiprintf_r+0x12c>
 8004438:	06d1      	lsls	r1, r2, #27
 800443a:	bf44      	itt	mi
 800443c:	2320      	movmi	r3, #32
 800443e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004442:	0713      	lsls	r3, r2, #28
 8004444:	bf44      	itt	mi
 8004446:	232b      	movmi	r3, #43	; 0x2b
 8004448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800444c:	f89a 3000 	ldrb.w	r3, [sl]
 8004450:	2b2a      	cmp	r3, #42	; 0x2a
 8004452:	d015      	beq.n	8004480 <_vfiprintf_r+0x13c>
 8004454:	4654      	mov	r4, sl
 8004456:	2000      	movs	r0, #0
 8004458:	f04f 0c0a 	mov.w	ip, #10
 800445c:	9a07      	ldr	r2, [sp, #28]
 800445e:	4621      	mov	r1, r4
 8004460:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004464:	3b30      	subs	r3, #48	; 0x30
 8004466:	2b09      	cmp	r3, #9
 8004468:	d94e      	bls.n	8004508 <_vfiprintf_r+0x1c4>
 800446a:	b1b0      	cbz	r0, 800449a <_vfiprintf_r+0x156>
 800446c:	9207      	str	r2, [sp, #28]
 800446e:	e014      	b.n	800449a <_vfiprintf_r+0x156>
 8004470:	eba0 0308 	sub.w	r3, r0, r8
 8004474:	fa09 f303 	lsl.w	r3, r9, r3
 8004478:	4313      	orrs	r3, r2
 800447a:	46a2      	mov	sl, r4
 800447c:	9304      	str	r3, [sp, #16]
 800447e:	e7d2      	b.n	8004426 <_vfiprintf_r+0xe2>
 8004480:	9b03      	ldr	r3, [sp, #12]
 8004482:	1d19      	adds	r1, r3, #4
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	9103      	str	r1, [sp, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	bfbb      	ittet	lt
 800448c:	425b      	neglt	r3, r3
 800448e:	f042 0202 	orrlt.w	r2, r2, #2
 8004492:	9307      	strge	r3, [sp, #28]
 8004494:	9307      	strlt	r3, [sp, #28]
 8004496:	bfb8      	it	lt
 8004498:	9204      	strlt	r2, [sp, #16]
 800449a:	7823      	ldrb	r3, [r4, #0]
 800449c:	2b2e      	cmp	r3, #46	; 0x2e
 800449e:	d10c      	bne.n	80044ba <_vfiprintf_r+0x176>
 80044a0:	7863      	ldrb	r3, [r4, #1]
 80044a2:	2b2a      	cmp	r3, #42	; 0x2a
 80044a4:	d135      	bne.n	8004512 <_vfiprintf_r+0x1ce>
 80044a6:	9b03      	ldr	r3, [sp, #12]
 80044a8:	3402      	adds	r4, #2
 80044aa:	1d1a      	adds	r2, r3, #4
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	9203      	str	r2, [sp, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bfb8      	it	lt
 80044b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80044b8:	9305      	str	r3, [sp, #20]
 80044ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80045a0 <_vfiprintf_r+0x25c>
 80044be:	2203      	movs	r2, #3
 80044c0:	4650      	mov	r0, sl
 80044c2:	7821      	ldrb	r1, [r4, #0]
 80044c4:	f7ff fac4 	bl	8003a50 <memchr>
 80044c8:	b140      	cbz	r0, 80044dc <_vfiprintf_r+0x198>
 80044ca:	2340      	movs	r3, #64	; 0x40
 80044cc:	eba0 000a 	sub.w	r0, r0, sl
 80044d0:	fa03 f000 	lsl.w	r0, r3, r0
 80044d4:	9b04      	ldr	r3, [sp, #16]
 80044d6:	3401      	adds	r4, #1
 80044d8:	4303      	orrs	r3, r0
 80044da:	9304      	str	r3, [sp, #16]
 80044dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044e0:	2206      	movs	r2, #6
 80044e2:	482c      	ldr	r0, [pc, #176]	; (8004594 <_vfiprintf_r+0x250>)
 80044e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044e8:	f7ff fab2 	bl	8003a50 <memchr>
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d03f      	beq.n	8004570 <_vfiprintf_r+0x22c>
 80044f0:	4b29      	ldr	r3, [pc, #164]	; (8004598 <_vfiprintf_r+0x254>)
 80044f2:	bb1b      	cbnz	r3, 800453c <_vfiprintf_r+0x1f8>
 80044f4:	9b03      	ldr	r3, [sp, #12]
 80044f6:	3307      	adds	r3, #7
 80044f8:	f023 0307 	bic.w	r3, r3, #7
 80044fc:	3308      	adds	r3, #8
 80044fe:	9303      	str	r3, [sp, #12]
 8004500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004502:	443b      	add	r3, r7
 8004504:	9309      	str	r3, [sp, #36]	; 0x24
 8004506:	e767      	b.n	80043d8 <_vfiprintf_r+0x94>
 8004508:	460c      	mov	r4, r1
 800450a:	2001      	movs	r0, #1
 800450c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004510:	e7a5      	b.n	800445e <_vfiprintf_r+0x11a>
 8004512:	2300      	movs	r3, #0
 8004514:	f04f 0c0a 	mov.w	ip, #10
 8004518:	4619      	mov	r1, r3
 800451a:	3401      	adds	r4, #1
 800451c:	9305      	str	r3, [sp, #20]
 800451e:	4620      	mov	r0, r4
 8004520:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004524:	3a30      	subs	r2, #48	; 0x30
 8004526:	2a09      	cmp	r2, #9
 8004528:	d903      	bls.n	8004532 <_vfiprintf_r+0x1ee>
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0c5      	beq.n	80044ba <_vfiprintf_r+0x176>
 800452e:	9105      	str	r1, [sp, #20]
 8004530:	e7c3      	b.n	80044ba <_vfiprintf_r+0x176>
 8004532:	4604      	mov	r4, r0
 8004534:	2301      	movs	r3, #1
 8004536:	fb0c 2101 	mla	r1, ip, r1, r2
 800453a:	e7f0      	b.n	800451e <_vfiprintf_r+0x1da>
 800453c:	ab03      	add	r3, sp, #12
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	462a      	mov	r2, r5
 8004542:	4630      	mov	r0, r6
 8004544:	4b15      	ldr	r3, [pc, #84]	; (800459c <_vfiprintf_r+0x258>)
 8004546:	a904      	add	r1, sp, #16
 8004548:	f7fd ff24 	bl	8002394 <_printf_float>
 800454c:	4607      	mov	r7, r0
 800454e:	1c78      	adds	r0, r7, #1
 8004550:	d1d6      	bne.n	8004500 <_vfiprintf_r+0x1bc>
 8004552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004554:	07d9      	lsls	r1, r3, #31
 8004556:	d405      	bmi.n	8004564 <_vfiprintf_r+0x220>
 8004558:	89ab      	ldrh	r3, [r5, #12]
 800455a:	059a      	lsls	r2, r3, #22
 800455c:	d402      	bmi.n	8004564 <_vfiprintf_r+0x220>
 800455e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004560:	f7ff fa6c 	bl	8003a3c <__retarget_lock_release_recursive>
 8004564:	89ab      	ldrh	r3, [r5, #12]
 8004566:	065b      	lsls	r3, r3, #25
 8004568:	f53f af12 	bmi.w	8004390 <_vfiprintf_r+0x4c>
 800456c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800456e:	e711      	b.n	8004394 <_vfiprintf_r+0x50>
 8004570:	ab03      	add	r3, sp, #12
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	462a      	mov	r2, r5
 8004576:	4630      	mov	r0, r6
 8004578:	4b08      	ldr	r3, [pc, #32]	; (800459c <_vfiprintf_r+0x258>)
 800457a:	a904      	add	r1, sp, #16
 800457c:	f7fe f9a6 	bl	80028cc <_printf_i>
 8004580:	e7e4      	b.n	800454c <_vfiprintf_r+0x208>
 8004582:	bf00      	nop
 8004584:	08004d80 	.word	0x08004d80
 8004588:	08004da0 	.word	0x08004da0
 800458c:	08004d60 	.word	0x08004d60
 8004590:	08004f1c 	.word	0x08004f1c
 8004594:	08004f26 	.word	0x08004f26
 8004598:	08002395 	.word	0x08002395
 800459c:	0800431f 	.word	0x0800431f
 80045a0:	08004f22 	.word	0x08004f22

080045a4 <_sbrk_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	2300      	movs	r3, #0
 80045a8:	4d05      	ldr	r5, [pc, #20]	; (80045c0 <_sbrk_r+0x1c>)
 80045aa:	4604      	mov	r4, r0
 80045ac:	4608      	mov	r0, r1
 80045ae:	602b      	str	r3, [r5, #0]
 80045b0:	f7fc fce2 	bl	8000f78 <_sbrk>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_sbrk_r+0x1a>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	b103      	cbz	r3, 80045be <_sbrk_r+0x1a>
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	20000254 	.word	0x20000254

080045c4 <__sread>:
 80045c4:	b510      	push	{r4, lr}
 80045c6:	460c      	mov	r4, r1
 80045c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045cc:	f000 faa6 	bl	8004b1c <_read_r>
 80045d0:	2800      	cmp	r0, #0
 80045d2:	bfab      	itete	ge
 80045d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045d6:	89a3      	ldrhlt	r3, [r4, #12]
 80045d8:	181b      	addge	r3, r3, r0
 80045da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045de:	bfac      	ite	ge
 80045e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80045e2:	81a3      	strhlt	r3, [r4, #12]
 80045e4:	bd10      	pop	{r4, pc}

080045e6 <__swrite>:
 80045e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ea:	461f      	mov	r7, r3
 80045ec:	898b      	ldrh	r3, [r1, #12]
 80045ee:	4605      	mov	r5, r0
 80045f0:	05db      	lsls	r3, r3, #23
 80045f2:	460c      	mov	r4, r1
 80045f4:	4616      	mov	r6, r2
 80045f6:	d505      	bpl.n	8004604 <__swrite+0x1e>
 80045f8:	2302      	movs	r3, #2
 80045fa:	2200      	movs	r2, #0
 80045fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004600:	f000 f9f8 	bl	80049f4 <_lseek_r>
 8004604:	89a3      	ldrh	r3, [r4, #12]
 8004606:	4632      	mov	r2, r6
 8004608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800460c:	81a3      	strh	r3, [r4, #12]
 800460e:	4628      	mov	r0, r5
 8004610:	463b      	mov	r3, r7
 8004612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800461a:	f000 b869 	b.w	80046f0 <_write_r>

0800461e <__sseek>:
 800461e:	b510      	push	{r4, lr}
 8004620:	460c      	mov	r4, r1
 8004622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004626:	f000 f9e5 	bl	80049f4 <_lseek_r>
 800462a:	1c43      	adds	r3, r0, #1
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	bf15      	itete	ne
 8004630:	6560      	strne	r0, [r4, #84]	; 0x54
 8004632:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004636:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800463a:	81a3      	strheq	r3, [r4, #12]
 800463c:	bf18      	it	ne
 800463e:	81a3      	strhne	r3, [r4, #12]
 8004640:	bd10      	pop	{r4, pc}

08004642 <__sclose>:
 8004642:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004646:	f000 b8f1 	b.w	800482c <_close_r>
	...

0800464c <__swbuf_r>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	460e      	mov	r6, r1
 8004650:	4614      	mov	r4, r2
 8004652:	4605      	mov	r5, r0
 8004654:	b118      	cbz	r0, 800465e <__swbuf_r+0x12>
 8004656:	6983      	ldr	r3, [r0, #24]
 8004658:	b90b      	cbnz	r3, 800465e <__swbuf_r+0x12>
 800465a:	f7ff f94b 	bl	80038f4 <__sinit>
 800465e:	4b21      	ldr	r3, [pc, #132]	; (80046e4 <__swbuf_r+0x98>)
 8004660:	429c      	cmp	r4, r3
 8004662:	d12b      	bne.n	80046bc <__swbuf_r+0x70>
 8004664:	686c      	ldr	r4, [r5, #4]
 8004666:	69a3      	ldr	r3, [r4, #24]
 8004668:	60a3      	str	r3, [r4, #8]
 800466a:	89a3      	ldrh	r3, [r4, #12]
 800466c:	071a      	lsls	r2, r3, #28
 800466e:	d52f      	bpl.n	80046d0 <__swbuf_r+0x84>
 8004670:	6923      	ldr	r3, [r4, #16]
 8004672:	b36b      	cbz	r3, 80046d0 <__swbuf_r+0x84>
 8004674:	6923      	ldr	r3, [r4, #16]
 8004676:	6820      	ldr	r0, [r4, #0]
 8004678:	b2f6      	uxtb	r6, r6
 800467a:	1ac0      	subs	r0, r0, r3
 800467c:	6963      	ldr	r3, [r4, #20]
 800467e:	4637      	mov	r7, r6
 8004680:	4283      	cmp	r3, r0
 8004682:	dc04      	bgt.n	800468e <__swbuf_r+0x42>
 8004684:	4621      	mov	r1, r4
 8004686:	4628      	mov	r0, r5
 8004688:	f000 f966 	bl	8004958 <_fflush_r>
 800468c:	bb30      	cbnz	r0, 80046dc <__swbuf_r+0x90>
 800468e:	68a3      	ldr	r3, [r4, #8]
 8004690:	3001      	adds	r0, #1
 8004692:	3b01      	subs	r3, #1
 8004694:	60a3      	str	r3, [r4, #8]
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	6022      	str	r2, [r4, #0]
 800469c:	701e      	strb	r6, [r3, #0]
 800469e:	6963      	ldr	r3, [r4, #20]
 80046a0:	4283      	cmp	r3, r0
 80046a2:	d004      	beq.n	80046ae <__swbuf_r+0x62>
 80046a4:	89a3      	ldrh	r3, [r4, #12]
 80046a6:	07db      	lsls	r3, r3, #31
 80046a8:	d506      	bpl.n	80046b8 <__swbuf_r+0x6c>
 80046aa:	2e0a      	cmp	r6, #10
 80046ac:	d104      	bne.n	80046b8 <__swbuf_r+0x6c>
 80046ae:	4621      	mov	r1, r4
 80046b0:	4628      	mov	r0, r5
 80046b2:	f000 f951 	bl	8004958 <_fflush_r>
 80046b6:	b988      	cbnz	r0, 80046dc <__swbuf_r+0x90>
 80046b8:	4638      	mov	r0, r7
 80046ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046bc:	4b0a      	ldr	r3, [pc, #40]	; (80046e8 <__swbuf_r+0x9c>)
 80046be:	429c      	cmp	r4, r3
 80046c0:	d101      	bne.n	80046c6 <__swbuf_r+0x7a>
 80046c2:	68ac      	ldr	r4, [r5, #8]
 80046c4:	e7cf      	b.n	8004666 <__swbuf_r+0x1a>
 80046c6:	4b09      	ldr	r3, [pc, #36]	; (80046ec <__swbuf_r+0xa0>)
 80046c8:	429c      	cmp	r4, r3
 80046ca:	bf08      	it	eq
 80046cc:	68ec      	ldreq	r4, [r5, #12]
 80046ce:	e7ca      	b.n	8004666 <__swbuf_r+0x1a>
 80046d0:	4621      	mov	r1, r4
 80046d2:	4628      	mov	r0, r5
 80046d4:	f000 f81e 	bl	8004714 <__swsetup_r>
 80046d8:	2800      	cmp	r0, #0
 80046da:	d0cb      	beq.n	8004674 <__swbuf_r+0x28>
 80046dc:	f04f 37ff 	mov.w	r7, #4294967295
 80046e0:	e7ea      	b.n	80046b8 <__swbuf_r+0x6c>
 80046e2:	bf00      	nop
 80046e4:	08004d80 	.word	0x08004d80
 80046e8:	08004da0 	.word	0x08004da0
 80046ec:	08004d60 	.word	0x08004d60

080046f0 <_write_r>:
 80046f0:	b538      	push	{r3, r4, r5, lr}
 80046f2:	4604      	mov	r4, r0
 80046f4:	4608      	mov	r0, r1
 80046f6:	4611      	mov	r1, r2
 80046f8:	2200      	movs	r2, #0
 80046fa:	4d05      	ldr	r5, [pc, #20]	; (8004710 <_write_r+0x20>)
 80046fc:	602a      	str	r2, [r5, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	f7fc fbed 	bl	8000ede <_write>
 8004704:	1c43      	adds	r3, r0, #1
 8004706:	d102      	bne.n	800470e <_write_r+0x1e>
 8004708:	682b      	ldr	r3, [r5, #0]
 800470a:	b103      	cbz	r3, 800470e <_write_r+0x1e>
 800470c:	6023      	str	r3, [r4, #0]
 800470e:	bd38      	pop	{r3, r4, r5, pc}
 8004710:	20000254 	.word	0x20000254

08004714 <__swsetup_r>:
 8004714:	4b32      	ldr	r3, [pc, #200]	; (80047e0 <__swsetup_r+0xcc>)
 8004716:	b570      	push	{r4, r5, r6, lr}
 8004718:	681d      	ldr	r5, [r3, #0]
 800471a:	4606      	mov	r6, r0
 800471c:	460c      	mov	r4, r1
 800471e:	b125      	cbz	r5, 800472a <__swsetup_r+0x16>
 8004720:	69ab      	ldr	r3, [r5, #24]
 8004722:	b913      	cbnz	r3, 800472a <__swsetup_r+0x16>
 8004724:	4628      	mov	r0, r5
 8004726:	f7ff f8e5 	bl	80038f4 <__sinit>
 800472a:	4b2e      	ldr	r3, [pc, #184]	; (80047e4 <__swsetup_r+0xd0>)
 800472c:	429c      	cmp	r4, r3
 800472e:	d10f      	bne.n	8004750 <__swsetup_r+0x3c>
 8004730:	686c      	ldr	r4, [r5, #4]
 8004732:	89a3      	ldrh	r3, [r4, #12]
 8004734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004738:	0719      	lsls	r1, r3, #28
 800473a:	d42c      	bmi.n	8004796 <__swsetup_r+0x82>
 800473c:	06dd      	lsls	r5, r3, #27
 800473e:	d411      	bmi.n	8004764 <__swsetup_r+0x50>
 8004740:	2309      	movs	r3, #9
 8004742:	6033      	str	r3, [r6, #0]
 8004744:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004748:	f04f 30ff 	mov.w	r0, #4294967295
 800474c:	81a3      	strh	r3, [r4, #12]
 800474e:	e03e      	b.n	80047ce <__swsetup_r+0xba>
 8004750:	4b25      	ldr	r3, [pc, #148]	; (80047e8 <__swsetup_r+0xd4>)
 8004752:	429c      	cmp	r4, r3
 8004754:	d101      	bne.n	800475a <__swsetup_r+0x46>
 8004756:	68ac      	ldr	r4, [r5, #8]
 8004758:	e7eb      	b.n	8004732 <__swsetup_r+0x1e>
 800475a:	4b24      	ldr	r3, [pc, #144]	; (80047ec <__swsetup_r+0xd8>)
 800475c:	429c      	cmp	r4, r3
 800475e:	bf08      	it	eq
 8004760:	68ec      	ldreq	r4, [r5, #12]
 8004762:	e7e6      	b.n	8004732 <__swsetup_r+0x1e>
 8004764:	0758      	lsls	r0, r3, #29
 8004766:	d512      	bpl.n	800478e <__swsetup_r+0x7a>
 8004768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800476a:	b141      	cbz	r1, 800477e <__swsetup_r+0x6a>
 800476c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004770:	4299      	cmp	r1, r3
 8004772:	d002      	beq.n	800477a <__swsetup_r+0x66>
 8004774:	4630      	mov	r0, r6
 8004776:	f7ff fd17 	bl	80041a8 <_free_r>
 800477a:	2300      	movs	r3, #0
 800477c:	6363      	str	r3, [r4, #52]	; 0x34
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004784:	81a3      	strh	r3, [r4, #12]
 8004786:	2300      	movs	r3, #0
 8004788:	6063      	str	r3, [r4, #4]
 800478a:	6923      	ldr	r3, [r4, #16]
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	89a3      	ldrh	r3, [r4, #12]
 8004790:	f043 0308 	orr.w	r3, r3, #8
 8004794:	81a3      	strh	r3, [r4, #12]
 8004796:	6923      	ldr	r3, [r4, #16]
 8004798:	b94b      	cbnz	r3, 80047ae <__swsetup_r+0x9a>
 800479a:	89a3      	ldrh	r3, [r4, #12]
 800479c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047a4:	d003      	beq.n	80047ae <__swsetup_r+0x9a>
 80047a6:	4621      	mov	r1, r4
 80047a8:	4630      	mov	r0, r6
 80047aa:	f000 f959 	bl	8004a60 <__smakebuf_r>
 80047ae:	89a0      	ldrh	r0, [r4, #12]
 80047b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047b4:	f010 0301 	ands.w	r3, r0, #1
 80047b8:	d00a      	beq.n	80047d0 <__swsetup_r+0xbc>
 80047ba:	2300      	movs	r3, #0
 80047bc:	60a3      	str	r3, [r4, #8]
 80047be:	6963      	ldr	r3, [r4, #20]
 80047c0:	425b      	negs	r3, r3
 80047c2:	61a3      	str	r3, [r4, #24]
 80047c4:	6923      	ldr	r3, [r4, #16]
 80047c6:	b943      	cbnz	r3, 80047da <__swsetup_r+0xc6>
 80047c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80047cc:	d1ba      	bne.n	8004744 <__swsetup_r+0x30>
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	0781      	lsls	r1, r0, #30
 80047d2:	bf58      	it	pl
 80047d4:	6963      	ldrpl	r3, [r4, #20]
 80047d6:	60a3      	str	r3, [r4, #8]
 80047d8:	e7f4      	b.n	80047c4 <__swsetup_r+0xb0>
 80047da:	2000      	movs	r0, #0
 80047dc:	e7f7      	b.n	80047ce <__swsetup_r+0xba>
 80047de:	bf00      	nop
 80047e0:	2000000c 	.word	0x2000000c
 80047e4:	08004d80 	.word	0x08004d80
 80047e8:	08004da0 	.word	0x08004da0
 80047ec:	08004d60 	.word	0x08004d60

080047f0 <__assert_func>:
 80047f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047f2:	4614      	mov	r4, r2
 80047f4:	461a      	mov	r2, r3
 80047f6:	4b09      	ldr	r3, [pc, #36]	; (800481c <__assert_func+0x2c>)
 80047f8:	4605      	mov	r5, r0
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68d8      	ldr	r0, [r3, #12]
 80047fe:	b14c      	cbz	r4, 8004814 <__assert_func+0x24>
 8004800:	4b07      	ldr	r3, [pc, #28]	; (8004820 <__assert_func+0x30>)
 8004802:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004806:	9100      	str	r1, [sp, #0]
 8004808:	462b      	mov	r3, r5
 800480a:	4906      	ldr	r1, [pc, #24]	; (8004824 <__assert_func+0x34>)
 800480c:	f000 f8e0 	bl	80049d0 <fiprintf>
 8004810:	f000 f9a3 	bl	8004b5a <abort>
 8004814:	4b04      	ldr	r3, [pc, #16]	; (8004828 <__assert_func+0x38>)
 8004816:	461c      	mov	r4, r3
 8004818:	e7f3      	b.n	8004802 <__assert_func+0x12>
 800481a:	bf00      	nop
 800481c:	2000000c 	.word	0x2000000c
 8004820:	08004f2d 	.word	0x08004f2d
 8004824:	08004f3a 	.word	0x08004f3a
 8004828:	08004f68 	.word	0x08004f68

0800482c <_close_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	2300      	movs	r3, #0
 8004830:	4d05      	ldr	r5, [pc, #20]	; (8004848 <_close_r+0x1c>)
 8004832:	4604      	mov	r4, r0
 8004834:	4608      	mov	r0, r1
 8004836:	602b      	str	r3, [r5, #0]
 8004838:	f7fc fb6d 	bl	8000f16 <_close>
 800483c:	1c43      	adds	r3, r0, #1
 800483e:	d102      	bne.n	8004846 <_close_r+0x1a>
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	b103      	cbz	r3, 8004846 <_close_r+0x1a>
 8004844:	6023      	str	r3, [r4, #0]
 8004846:	bd38      	pop	{r3, r4, r5, pc}
 8004848:	20000254 	.word	0x20000254

0800484c <__sflush_r>:
 800484c:	898a      	ldrh	r2, [r1, #12]
 800484e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004852:	4605      	mov	r5, r0
 8004854:	0710      	lsls	r0, r2, #28
 8004856:	460c      	mov	r4, r1
 8004858:	d458      	bmi.n	800490c <__sflush_r+0xc0>
 800485a:	684b      	ldr	r3, [r1, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	dc05      	bgt.n	800486c <__sflush_r+0x20>
 8004860:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	dc02      	bgt.n	800486c <__sflush_r+0x20>
 8004866:	2000      	movs	r0, #0
 8004868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800486c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800486e:	2e00      	cmp	r6, #0
 8004870:	d0f9      	beq.n	8004866 <__sflush_r+0x1a>
 8004872:	2300      	movs	r3, #0
 8004874:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004878:	682f      	ldr	r7, [r5, #0]
 800487a:	602b      	str	r3, [r5, #0]
 800487c:	d032      	beq.n	80048e4 <__sflush_r+0x98>
 800487e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004880:	89a3      	ldrh	r3, [r4, #12]
 8004882:	075a      	lsls	r2, r3, #29
 8004884:	d505      	bpl.n	8004892 <__sflush_r+0x46>
 8004886:	6863      	ldr	r3, [r4, #4]
 8004888:	1ac0      	subs	r0, r0, r3
 800488a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800488c:	b10b      	cbz	r3, 8004892 <__sflush_r+0x46>
 800488e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004890:	1ac0      	subs	r0, r0, r3
 8004892:	2300      	movs	r3, #0
 8004894:	4602      	mov	r2, r0
 8004896:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004898:	4628      	mov	r0, r5
 800489a:	6a21      	ldr	r1, [r4, #32]
 800489c:	47b0      	blx	r6
 800489e:	1c43      	adds	r3, r0, #1
 80048a0:	89a3      	ldrh	r3, [r4, #12]
 80048a2:	d106      	bne.n	80048b2 <__sflush_r+0x66>
 80048a4:	6829      	ldr	r1, [r5, #0]
 80048a6:	291d      	cmp	r1, #29
 80048a8:	d82c      	bhi.n	8004904 <__sflush_r+0xb8>
 80048aa:	4a2a      	ldr	r2, [pc, #168]	; (8004954 <__sflush_r+0x108>)
 80048ac:	40ca      	lsrs	r2, r1
 80048ae:	07d6      	lsls	r6, r2, #31
 80048b0:	d528      	bpl.n	8004904 <__sflush_r+0xb8>
 80048b2:	2200      	movs	r2, #0
 80048b4:	6062      	str	r2, [r4, #4]
 80048b6:	6922      	ldr	r2, [r4, #16]
 80048b8:	04d9      	lsls	r1, r3, #19
 80048ba:	6022      	str	r2, [r4, #0]
 80048bc:	d504      	bpl.n	80048c8 <__sflush_r+0x7c>
 80048be:	1c42      	adds	r2, r0, #1
 80048c0:	d101      	bne.n	80048c6 <__sflush_r+0x7a>
 80048c2:	682b      	ldr	r3, [r5, #0]
 80048c4:	b903      	cbnz	r3, 80048c8 <__sflush_r+0x7c>
 80048c6:	6560      	str	r0, [r4, #84]	; 0x54
 80048c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048ca:	602f      	str	r7, [r5, #0]
 80048cc:	2900      	cmp	r1, #0
 80048ce:	d0ca      	beq.n	8004866 <__sflush_r+0x1a>
 80048d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048d4:	4299      	cmp	r1, r3
 80048d6:	d002      	beq.n	80048de <__sflush_r+0x92>
 80048d8:	4628      	mov	r0, r5
 80048da:	f7ff fc65 	bl	80041a8 <_free_r>
 80048de:	2000      	movs	r0, #0
 80048e0:	6360      	str	r0, [r4, #52]	; 0x34
 80048e2:	e7c1      	b.n	8004868 <__sflush_r+0x1c>
 80048e4:	6a21      	ldr	r1, [r4, #32]
 80048e6:	2301      	movs	r3, #1
 80048e8:	4628      	mov	r0, r5
 80048ea:	47b0      	blx	r6
 80048ec:	1c41      	adds	r1, r0, #1
 80048ee:	d1c7      	bne.n	8004880 <__sflush_r+0x34>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d0c4      	beq.n	8004880 <__sflush_r+0x34>
 80048f6:	2b1d      	cmp	r3, #29
 80048f8:	d001      	beq.n	80048fe <__sflush_r+0xb2>
 80048fa:	2b16      	cmp	r3, #22
 80048fc:	d101      	bne.n	8004902 <__sflush_r+0xb6>
 80048fe:	602f      	str	r7, [r5, #0]
 8004900:	e7b1      	b.n	8004866 <__sflush_r+0x1a>
 8004902:	89a3      	ldrh	r3, [r4, #12]
 8004904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004908:	81a3      	strh	r3, [r4, #12]
 800490a:	e7ad      	b.n	8004868 <__sflush_r+0x1c>
 800490c:	690f      	ldr	r7, [r1, #16]
 800490e:	2f00      	cmp	r7, #0
 8004910:	d0a9      	beq.n	8004866 <__sflush_r+0x1a>
 8004912:	0793      	lsls	r3, r2, #30
 8004914:	bf18      	it	ne
 8004916:	2300      	movne	r3, #0
 8004918:	680e      	ldr	r6, [r1, #0]
 800491a:	bf08      	it	eq
 800491c:	694b      	ldreq	r3, [r1, #20]
 800491e:	eba6 0807 	sub.w	r8, r6, r7
 8004922:	600f      	str	r7, [r1, #0]
 8004924:	608b      	str	r3, [r1, #8]
 8004926:	f1b8 0f00 	cmp.w	r8, #0
 800492a:	dd9c      	ble.n	8004866 <__sflush_r+0x1a>
 800492c:	4643      	mov	r3, r8
 800492e:	463a      	mov	r2, r7
 8004930:	4628      	mov	r0, r5
 8004932:	6a21      	ldr	r1, [r4, #32]
 8004934:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004936:	47b0      	blx	r6
 8004938:	2800      	cmp	r0, #0
 800493a:	dc06      	bgt.n	800494a <__sflush_r+0xfe>
 800493c:	89a3      	ldrh	r3, [r4, #12]
 800493e:	f04f 30ff 	mov.w	r0, #4294967295
 8004942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004946:	81a3      	strh	r3, [r4, #12]
 8004948:	e78e      	b.n	8004868 <__sflush_r+0x1c>
 800494a:	4407      	add	r7, r0
 800494c:	eba8 0800 	sub.w	r8, r8, r0
 8004950:	e7e9      	b.n	8004926 <__sflush_r+0xda>
 8004952:	bf00      	nop
 8004954:	20400001 	.word	0x20400001

08004958 <_fflush_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	690b      	ldr	r3, [r1, #16]
 800495c:	4605      	mov	r5, r0
 800495e:	460c      	mov	r4, r1
 8004960:	b913      	cbnz	r3, 8004968 <_fflush_r+0x10>
 8004962:	2500      	movs	r5, #0
 8004964:	4628      	mov	r0, r5
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	b118      	cbz	r0, 8004972 <_fflush_r+0x1a>
 800496a:	6983      	ldr	r3, [r0, #24]
 800496c:	b90b      	cbnz	r3, 8004972 <_fflush_r+0x1a>
 800496e:	f7fe ffc1 	bl	80038f4 <__sinit>
 8004972:	4b14      	ldr	r3, [pc, #80]	; (80049c4 <_fflush_r+0x6c>)
 8004974:	429c      	cmp	r4, r3
 8004976:	d11b      	bne.n	80049b0 <_fflush_r+0x58>
 8004978:	686c      	ldr	r4, [r5, #4]
 800497a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0ef      	beq.n	8004962 <_fflush_r+0xa>
 8004982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004984:	07d0      	lsls	r0, r2, #31
 8004986:	d404      	bmi.n	8004992 <_fflush_r+0x3a>
 8004988:	0599      	lsls	r1, r3, #22
 800498a:	d402      	bmi.n	8004992 <_fflush_r+0x3a>
 800498c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800498e:	f7ff f854 	bl	8003a3a <__retarget_lock_acquire_recursive>
 8004992:	4628      	mov	r0, r5
 8004994:	4621      	mov	r1, r4
 8004996:	f7ff ff59 	bl	800484c <__sflush_r>
 800499a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800499c:	4605      	mov	r5, r0
 800499e:	07da      	lsls	r2, r3, #31
 80049a0:	d4e0      	bmi.n	8004964 <_fflush_r+0xc>
 80049a2:	89a3      	ldrh	r3, [r4, #12]
 80049a4:	059b      	lsls	r3, r3, #22
 80049a6:	d4dd      	bmi.n	8004964 <_fflush_r+0xc>
 80049a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049aa:	f7ff f847 	bl	8003a3c <__retarget_lock_release_recursive>
 80049ae:	e7d9      	b.n	8004964 <_fflush_r+0xc>
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <_fflush_r+0x70>)
 80049b2:	429c      	cmp	r4, r3
 80049b4:	d101      	bne.n	80049ba <_fflush_r+0x62>
 80049b6:	68ac      	ldr	r4, [r5, #8]
 80049b8:	e7df      	b.n	800497a <_fflush_r+0x22>
 80049ba:	4b04      	ldr	r3, [pc, #16]	; (80049cc <_fflush_r+0x74>)
 80049bc:	429c      	cmp	r4, r3
 80049be:	bf08      	it	eq
 80049c0:	68ec      	ldreq	r4, [r5, #12]
 80049c2:	e7da      	b.n	800497a <_fflush_r+0x22>
 80049c4:	08004d80 	.word	0x08004d80
 80049c8:	08004da0 	.word	0x08004da0
 80049cc:	08004d60 	.word	0x08004d60

080049d0 <fiprintf>:
 80049d0:	b40e      	push	{r1, r2, r3}
 80049d2:	b503      	push	{r0, r1, lr}
 80049d4:	4601      	mov	r1, r0
 80049d6:	ab03      	add	r3, sp, #12
 80049d8:	4805      	ldr	r0, [pc, #20]	; (80049f0 <fiprintf+0x20>)
 80049da:	f853 2b04 	ldr.w	r2, [r3], #4
 80049de:	6800      	ldr	r0, [r0, #0]
 80049e0:	9301      	str	r3, [sp, #4]
 80049e2:	f7ff fcaf 	bl	8004344 <_vfiprintf_r>
 80049e6:	b002      	add	sp, #8
 80049e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80049ec:	b003      	add	sp, #12
 80049ee:	4770      	bx	lr
 80049f0:	2000000c 	.word	0x2000000c

080049f4 <_lseek_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	4604      	mov	r4, r0
 80049f8:	4608      	mov	r0, r1
 80049fa:	4611      	mov	r1, r2
 80049fc:	2200      	movs	r2, #0
 80049fe:	4d05      	ldr	r5, [pc, #20]	; (8004a14 <_lseek_r+0x20>)
 8004a00:	602a      	str	r2, [r5, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	f7fc faab 	bl	8000f5e <_lseek>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d102      	bne.n	8004a12 <_lseek_r+0x1e>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	b103      	cbz	r3, 8004a12 <_lseek_r+0x1e>
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	20000254 	.word	0x20000254

08004a18 <__swhatbuf_r>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	460e      	mov	r6, r1
 8004a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a20:	4614      	mov	r4, r2
 8004a22:	2900      	cmp	r1, #0
 8004a24:	461d      	mov	r5, r3
 8004a26:	b096      	sub	sp, #88	; 0x58
 8004a28:	da07      	bge.n	8004a3a <__swhatbuf_r+0x22>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	602b      	str	r3, [r5, #0]
 8004a2e:	89b3      	ldrh	r3, [r6, #12]
 8004a30:	061a      	lsls	r2, r3, #24
 8004a32:	d410      	bmi.n	8004a56 <__swhatbuf_r+0x3e>
 8004a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a38:	e00e      	b.n	8004a58 <__swhatbuf_r+0x40>
 8004a3a:	466a      	mov	r2, sp
 8004a3c:	f000 f894 	bl	8004b68 <_fstat_r>
 8004a40:	2800      	cmp	r0, #0
 8004a42:	dbf2      	blt.n	8004a2a <__swhatbuf_r+0x12>
 8004a44:	9a01      	ldr	r2, [sp, #4]
 8004a46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a4e:	425a      	negs	r2, r3
 8004a50:	415a      	adcs	r2, r3
 8004a52:	602a      	str	r2, [r5, #0]
 8004a54:	e7ee      	b.n	8004a34 <__swhatbuf_r+0x1c>
 8004a56:	2340      	movs	r3, #64	; 0x40
 8004a58:	2000      	movs	r0, #0
 8004a5a:	6023      	str	r3, [r4, #0]
 8004a5c:	b016      	add	sp, #88	; 0x58
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}

08004a60 <__smakebuf_r>:
 8004a60:	898b      	ldrh	r3, [r1, #12]
 8004a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a64:	079d      	lsls	r5, r3, #30
 8004a66:	4606      	mov	r6, r0
 8004a68:	460c      	mov	r4, r1
 8004a6a:	d507      	bpl.n	8004a7c <__smakebuf_r+0x1c>
 8004a6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a70:	6023      	str	r3, [r4, #0]
 8004a72:	6123      	str	r3, [r4, #16]
 8004a74:	2301      	movs	r3, #1
 8004a76:	6163      	str	r3, [r4, #20]
 8004a78:	b002      	add	sp, #8
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
 8004a7c:	466a      	mov	r2, sp
 8004a7e:	ab01      	add	r3, sp, #4
 8004a80:	f7ff ffca 	bl	8004a18 <__swhatbuf_r>
 8004a84:	9900      	ldr	r1, [sp, #0]
 8004a86:	4605      	mov	r5, r0
 8004a88:	4630      	mov	r0, r6
 8004a8a:	f7ff fbd9 	bl	8004240 <_malloc_r>
 8004a8e:	b948      	cbnz	r0, 8004aa4 <__smakebuf_r+0x44>
 8004a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a94:	059a      	lsls	r2, r3, #22
 8004a96:	d4ef      	bmi.n	8004a78 <__smakebuf_r+0x18>
 8004a98:	f023 0303 	bic.w	r3, r3, #3
 8004a9c:	f043 0302 	orr.w	r3, r3, #2
 8004aa0:	81a3      	strh	r3, [r4, #12]
 8004aa2:	e7e3      	b.n	8004a6c <__smakebuf_r+0xc>
 8004aa4:	4b0d      	ldr	r3, [pc, #52]	; (8004adc <__smakebuf_r+0x7c>)
 8004aa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004aa8:	89a3      	ldrh	r3, [r4, #12]
 8004aaa:	6020      	str	r0, [r4, #0]
 8004aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ab0:	81a3      	strh	r3, [r4, #12]
 8004ab2:	9b00      	ldr	r3, [sp, #0]
 8004ab4:	6120      	str	r0, [r4, #16]
 8004ab6:	6163      	str	r3, [r4, #20]
 8004ab8:	9b01      	ldr	r3, [sp, #4]
 8004aba:	b15b      	cbz	r3, 8004ad4 <__smakebuf_r+0x74>
 8004abc:	4630      	mov	r0, r6
 8004abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ac2:	f000 f863 	bl	8004b8c <_isatty_r>
 8004ac6:	b128      	cbz	r0, 8004ad4 <__smakebuf_r+0x74>
 8004ac8:	89a3      	ldrh	r3, [r4, #12]
 8004aca:	f023 0303 	bic.w	r3, r3, #3
 8004ace:	f043 0301 	orr.w	r3, r3, #1
 8004ad2:	81a3      	strh	r3, [r4, #12]
 8004ad4:	89a0      	ldrh	r0, [r4, #12]
 8004ad6:	4305      	orrs	r5, r0
 8004ad8:	81a5      	strh	r5, [r4, #12]
 8004ada:	e7cd      	b.n	8004a78 <__smakebuf_r+0x18>
 8004adc:	0800388d 	.word	0x0800388d

08004ae0 <__ascii_mbtowc>:
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	b901      	cbnz	r1, 8004ae6 <__ascii_mbtowc+0x6>
 8004ae4:	a901      	add	r1, sp, #4
 8004ae6:	b142      	cbz	r2, 8004afa <__ascii_mbtowc+0x1a>
 8004ae8:	b14b      	cbz	r3, 8004afe <__ascii_mbtowc+0x1e>
 8004aea:	7813      	ldrb	r3, [r2, #0]
 8004aec:	600b      	str	r3, [r1, #0]
 8004aee:	7812      	ldrb	r2, [r2, #0]
 8004af0:	1e10      	subs	r0, r2, #0
 8004af2:	bf18      	it	ne
 8004af4:	2001      	movne	r0, #1
 8004af6:	b002      	add	sp, #8
 8004af8:	4770      	bx	lr
 8004afa:	4610      	mov	r0, r2
 8004afc:	e7fb      	b.n	8004af6 <__ascii_mbtowc+0x16>
 8004afe:	f06f 0001 	mvn.w	r0, #1
 8004b02:	e7f8      	b.n	8004af6 <__ascii_mbtowc+0x16>

08004b04 <__malloc_lock>:
 8004b04:	4801      	ldr	r0, [pc, #4]	; (8004b0c <__malloc_lock+0x8>)
 8004b06:	f7fe bf98 	b.w	8003a3a <__retarget_lock_acquire_recursive>
 8004b0a:	bf00      	nop
 8004b0c:	2000024c 	.word	0x2000024c

08004b10 <__malloc_unlock>:
 8004b10:	4801      	ldr	r0, [pc, #4]	; (8004b18 <__malloc_unlock+0x8>)
 8004b12:	f7fe bf93 	b.w	8003a3c <__retarget_lock_release_recursive>
 8004b16:	bf00      	nop
 8004b18:	2000024c 	.word	0x2000024c

08004b1c <_read_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	4604      	mov	r4, r0
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	2200      	movs	r2, #0
 8004b26:	4d05      	ldr	r5, [pc, #20]	; (8004b3c <_read_r+0x20>)
 8004b28:	602a      	str	r2, [r5, #0]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f7fc f9ba 	bl	8000ea4 <_read>
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d102      	bne.n	8004b3a <_read_r+0x1e>
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	b103      	cbz	r3, 8004b3a <_read_r+0x1e>
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
 8004b3c:	20000254 	.word	0x20000254

08004b40 <__ascii_wctomb>:
 8004b40:	4603      	mov	r3, r0
 8004b42:	4608      	mov	r0, r1
 8004b44:	b141      	cbz	r1, 8004b58 <__ascii_wctomb+0x18>
 8004b46:	2aff      	cmp	r2, #255	; 0xff
 8004b48:	d904      	bls.n	8004b54 <__ascii_wctomb+0x14>
 8004b4a:	228a      	movs	r2, #138	; 0x8a
 8004b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	4770      	bx	lr
 8004b54:	2001      	movs	r0, #1
 8004b56:	700a      	strb	r2, [r1, #0]
 8004b58:	4770      	bx	lr

08004b5a <abort>:
 8004b5a:	2006      	movs	r0, #6
 8004b5c:	b508      	push	{r3, lr}
 8004b5e:	f000 f84d 	bl	8004bfc <raise>
 8004b62:	2001      	movs	r0, #1
 8004b64:	f7fc f994 	bl	8000e90 <_exit>

08004b68 <_fstat_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	4d06      	ldr	r5, [pc, #24]	; (8004b88 <_fstat_r+0x20>)
 8004b6e:	4604      	mov	r4, r0
 8004b70:	4608      	mov	r0, r1
 8004b72:	4611      	mov	r1, r2
 8004b74:	602b      	str	r3, [r5, #0]
 8004b76:	f7fc f9d9 	bl	8000f2c <_fstat>
 8004b7a:	1c43      	adds	r3, r0, #1
 8004b7c:	d102      	bne.n	8004b84 <_fstat_r+0x1c>
 8004b7e:	682b      	ldr	r3, [r5, #0]
 8004b80:	b103      	cbz	r3, 8004b84 <_fstat_r+0x1c>
 8004b82:	6023      	str	r3, [r4, #0]
 8004b84:	bd38      	pop	{r3, r4, r5, pc}
 8004b86:	bf00      	nop
 8004b88:	20000254 	.word	0x20000254

08004b8c <_isatty_r>:
 8004b8c:	b538      	push	{r3, r4, r5, lr}
 8004b8e:	2300      	movs	r3, #0
 8004b90:	4d05      	ldr	r5, [pc, #20]	; (8004ba8 <_isatty_r+0x1c>)
 8004b92:	4604      	mov	r4, r0
 8004b94:	4608      	mov	r0, r1
 8004b96:	602b      	str	r3, [r5, #0]
 8004b98:	f7fc f9d7 	bl	8000f4a <_isatty>
 8004b9c:	1c43      	adds	r3, r0, #1
 8004b9e:	d102      	bne.n	8004ba6 <_isatty_r+0x1a>
 8004ba0:	682b      	ldr	r3, [r5, #0]
 8004ba2:	b103      	cbz	r3, 8004ba6 <_isatty_r+0x1a>
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	bd38      	pop	{r3, r4, r5, pc}
 8004ba8:	20000254 	.word	0x20000254

08004bac <_raise_r>:
 8004bac:	291f      	cmp	r1, #31
 8004bae:	b538      	push	{r3, r4, r5, lr}
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	460d      	mov	r5, r1
 8004bb4:	d904      	bls.n	8004bc0 <_raise_r+0x14>
 8004bb6:	2316      	movs	r3, #22
 8004bb8:	6003      	str	r3, [r0, #0]
 8004bba:	f04f 30ff 	mov.w	r0, #4294967295
 8004bbe:	bd38      	pop	{r3, r4, r5, pc}
 8004bc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004bc2:	b112      	cbz	r2, 8004bca <_raise_r+0x1e>
 8004bc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004bc8:	b94b      	cbnz	r3, 8004bde <_raise_r+0x32>
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f000 f830 	bl	8004c30 <_getpid_r>
 8004bd0:	462a      	mov	r2, r5
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bda:	f000 b817 	b.w	8004c0c <_kill_r>
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d00a      	beq.n	8004bf8 <_raise_r+0x4c>
 8004be2:	1c59      	adds	r1, r3, #1
 8004be4:	d103      	bne.n	8004bee <_raise_r+0x42>
 8004be6:	2316      	movs	r3, #22
 8004be8:	6003      	str	r3, [r0, #0]
 8004bea:	2001      	movs	r0, #1
 8004bec:	e7e7      	b.n	8004bbe <_raise_r+0x12>
 8004bee:	2400      	movs	r4, #0
 8004bf0:	4628      	mov	r0, r5
 8004bf2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004bf6:	4798      	blx	r3
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	e7e0      	b.n	8004bbe <_raise_r+0x12>

08004bfc <raise>:
 8004bfc:	4b02      	ldr	r3, [pc, #8]	; (8004c08 <raise+0xc>)
 8004bfe:	4601      	mov	r1, r0
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	f7ff bfd3 	b.w	8004bac <_raise_r>
 8004c06:	bf00      	nop
 8004c08:	2000000c 	.word	0x2000000c

08004c0c <_kill_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	2300      	movs	r3, #0
 8004c10:	4d06      	ldr	r5, [pc, #24]	; (8004c2c <_kill_r+0x20>)
 8004c12:	4604      	mov	r4, r0
 8004c14:	4608      	mov	r0, r1
 8004c16:	4611      	mov	r1, r2
 8004c18:	602b      	str	r3, [r5, #0]
 8004c1a:	f7fc f929 	bl	8000e70 <_kill>
 8004c1e:	1c43      	adds	r3, r0, #1
 8004c20:	d102      	bne.n	8004c28 <_kill_r+0x1c>
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	b103      	cbz	r3, 8004c28 <_kill_r+0x1c>
 8004c26:	6023      	str	r3, [r4, #0]
 8004c28:	bd38      	pop	{r3, r4, r5, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000254 	.word	0x20000254

08004c30 <_getpid_r>:
 8004c30:	f7fc b917 	b.w	8000e62 <_getpid>

08004c34 <_init>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	bf00      	nop
 8004c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c3a:	bc08      	pop	{r3}
 8004c3c:	469e      	mov	lr, r3
 8004c3e:	4770      	bx	lr

08004c40 <_fini>:
 8004c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c42:	bf00      	nop
 8004c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c46:	bc08      	pop	{r3}
 8004c48:	469e      	mov	lr, r3
 8004c4a:	4770      	bx	lr
