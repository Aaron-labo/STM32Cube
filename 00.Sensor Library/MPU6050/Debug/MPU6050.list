
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f0c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  080070f8  080070f8  000170f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007578  08007578  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  08007578  08007578  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007578  08007578  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007578  08007578  00017578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800757c  0800757c  0001757c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08007580  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000278  080077f4  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  080077f4  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee79  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000235d  00000000  00000000  0002f116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  00031478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  00031ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0d2  00000000  00000000  00032818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d11c  00000000  00000000  0004d8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094dd6  00000000  00000000  0005aa06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ef7dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a4c  00000000  00000000  000ef830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000278 	.word	0x20000278
 8000204:	00000000 	.word	0x00000000
 8000208:	080070dc 	.word	0x080070dc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000027c 	.word	0x2000027c
 8000224:	080070dc 	.word	0x080070dc

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_GPIO_Init+0x40>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a0d      	ldr	r2, [pc, #52]	; (800105c <MX_GPIO_Init+0x40>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6193      	str	r3, [r2, #24]
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_GPIO_Init+0x40>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_GPIO_Init+0x40>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	4a07      	ldr	r2, [pc, #28]	; (800105c <MX_GPIO_Init+0x40>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	6193      	str	r3, [r2, #24]
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <MX_GPIO_Init+0x40>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40021000 	.word	0x40021000

08001060 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001066:	4a13      	ldr	r2, [pc, #76]	; (80010b4 <MX_I2C1_Init+0x54>)
 8001068:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_I2C1_Init+0x50>)
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <MX_I2C1_Init+0x58>)
 800106e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_I2C1_Init+0x50>)
 800107e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001082:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001086:	2200      	movs	r2, #0
 8001088:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_I2C1_Init+0x50>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_I2C1_Init+0x50>)
 8001098:	2200      	movs	r2, #0
 800109a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <MX_I2C1_Init+0x50>)
 800109e:	f001 fa09 	bl	80024b4 <HAL_I2C_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010a8:	f000 f8de 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200002a0 	.word	0x200002a0
 80010b4:	40005400 	.word	0x40005400
 80010b8:	00061a80 	.word	0x00061a80

080010bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a15      	ldr	r2, [pc, #84]	; (800112c <HAL_I2C_MspInit+0x70>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d123      	bne.n	8001124 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_I2C_MspInit+0x74>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a13      	ldr	r2, [pc, #76]	; (8001130 <HAL_I2C_MspInit+0x74>)
 80010e2:	f043 0308 	orr.w	r3, r3, #8
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_I2C_MspInit+0x74>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f4:	23c0      	movs	r3, #192	; 0xc0
 80010f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010f8:	2312      	movs	r3, #18
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	480b      	ldr	r0, [pc, #44]	; (8001134 <HAL_I2C_MspInit+0x78>)
 8001108:	f001 f840 	bl	800218c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <HAL_I2C_MspInit+0x74>)
 800110e:	69db      	ldr	r3, [r3, #28]
 8001110:	4a07      	ldr	r2, [pc, #28]	; (8001130 <HAL_I2C_MspInit+0x74>)
 8001112:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001116:	61d3      	str	r3, [r2, #28]
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_I2C_MspInit+0x74>)
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40005400 	.word	0x40005400
 8001130:	40021000 	.word	0x40021000
 8001134:	40010c00 	.word	0x40010c00

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b5b0      	push	{r4, r5, r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113e:	f000 febb 	bl	8001eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001142:	f000 f833 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001146:	f7ff ff69 	bl	800101c <MX_GPIO_Init>
  MX_I2C1_Init();
 800114a:	f7ff ff89 	bl	8001060 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800114e:	f000 f9b1 	bl	80014b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8001152:	bf00      	nop
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <main+0x6c>)
 8001156:	f000 fa48 	bl	80015ea <MPU6050_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	d0f9      	beq.n	8001154 <main+0x1c>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001160:	4911      	ldr	r1, [pc, #68]	; (80011a8 <main+0x70>)
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <main+0x6c>)
 8001164:	f000 fa98 	bl	8001698 <MPU6050_Read_All>
	  mpu6050_send_data(MPU6050.Accel_X_RAW, MPU6050.Accel_Y_RAW, MPU6050.Accel_Z_RAW, MPU6050.Gyro_X_RAW, MPU6050.Gyro_Y_RAW, MPU6050.Gyro_Z_RAW);
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <main+0x70>)
 800116a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <main+0x70>)
 8001170:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <main+0x70>)
 8001176:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <main+0x70>)
 800117c:	f9b3 5020 	ldrsh.w	r5, [r3, #32]
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <main+0x70>)
 8001182:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <main+0x70>)
 8001188:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 800118c:	9201      	str	r2, [sp, #4]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	462b      	mov	r3, r5
 8001192:	4622      	mov	r2, r4
 8001194:	f000 fe40 	bl	8001e18 <mpu6050_send_data>
//	  print("\r\nKalmanAngleX:%.2f\r\nKalmanAngleY:%.2f\r\n", MPU6050.KalmanAngleX, MPU6050.KalmanAngleY);
	  HAL_Delay (1000);
 8001198:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800119c:	f000 feee 	bl	8001f7c <HAL_Delay>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 80011a0:	e7de      	b.n	8001160 <main+0x28>
 80011a2:	bf00      	nop
 80011a4:	200002a0 	.word	0x200002a0
 80011a8:	200002f8 	.word	0x200002f8

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b090      	sub	sp, #64	; 0x40
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0318 	add.w	r3, r7, #24
 80011b6:	2228      	movs	r2, #40	; 0x28
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f002 ff76 	bl	80040ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ce:	2301      	movs	r3, #1
 80011d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011dc:	2301      	movs	r3, #1
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e0:	2302      	movs	r3, #2
 80011e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f0:	f107 0318 	add.w	r3, r7, #24
 80011f4:	4618      	mov	r0, r3
 80011f6:	f002 f95d 	bl	80034b4 <HAL_RCC_OscConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001200:	f000 f832 	bl	8001268 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001204:	230f      	movs	r3, #15
 8001206:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001208:	2302      	movs	r3, #2
 800120a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2102      	movs	r1, #2
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fbc8 	bl	80039b4 <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800122a:	f000 f81d 	bl	8001268 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3740      	adds	r7, #64	; 0x40
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
  x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  // 具体哪个串口可以更改huart2为其它串口
  // HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
  while ((USART1->SR & 0X40) == 0) {
 8001240:	bf00      	nop
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <__io_putchar+0x2c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0f9      	beq.n	8001242 <__io_putchar+0xa>
  }; //循环发送,直到发送完毕
  USART1->DR = (uint8_t) ch;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <__io_putchar+0x2c>)
 8001254:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

  return ch;
 8001256:	687b      	ldr	r3, [r7, #4]
}
 8001258:	4618      	mov	r0, r3
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40013800 	.word	0x40013800

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>
	...

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_MspInit+0x5c>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <HAL_MspInit+0x5c>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_MspInit+0x5c>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_MspInit+0x5c>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <HAL_MspInit+0x5c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_MspInit+0x5c>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_MspInit+0x60>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_MspInit+0x60>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <NMI_Handler+0x4>

080012de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	e7fe      	b.n	80012e8 <MemManage_Handler+0x4>

080012ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ee:	e7fe      	b.n	80012ee <BusFault_Handler+0x4>

080012f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <UsageFault_Handler+0x4>

080012f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr

08001302 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	46bd      	mov	sp, r7
 800130a:	bc80      	pop	{r7}
 800130c:	4770      	bx	lr

0800130e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr

0800131a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800131e:	f000 fe11 	bl	8001f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}

08001326 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
	return 1;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <_kill>:

int _kill(int pid, int sig)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800133e:	f002 fe8b 	bl	8004058 <__errno>
 8001342:	4603      	mov	r3, r0
 8001344:	2216      	movs	r2, #22
 8001346:	601a      	str	r2, [r3, #0]
	return -1;
 8001348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <_exit>:

void _exit (int status)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ffe7 	bl	8001334 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001366:	e7fe      	b.n	8001366 <_exit+0x12>

08001368 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	60b9      	str	r1, [r7, #8]
 8001372:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	e00a      	b.n	8001390 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800137a:	f3af 8000 	nop.w
 800137e:	4601      	mov	r1, r0
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	60ba      	str	r2, [r7, #8]
 8001386:	b2ca      	uxtb	r2, r1
 8001388:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbf0      	blt.n	800137a <_read+0x12>
	}

return len;
 8001398:	687b      	ldr	r3, [r7, #4]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b086      	sub	sp, #24
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	60b9      	str	r1, [r7, #8]
 80013ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	e009      	b.n	80013c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1c5a      	adds	r2, r3, #1
 80013b8:	60ba      	str	r2, [r7, #8]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff3b 	bl	8001238 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	dbf1      	blt.n	80013b4 <_write+0x12>
	}
	return len;
 80013d0:	687b      	ldr	r3, [r7, #4]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <_close>:

int _close(int file)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
	return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001400:	605a      	str	r2, [r3, #4]
	return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <_isatty>:

int _isatty(int file)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
	return 1;
 8001416:	2301      	movs	r3, #1
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr

08001422 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
	return 0;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
	...

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	; (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f002 fdf4 	bl	8004058 <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20010000 	.word	0x20010000
 800149c:	00000400 	.word	0x00000400
 80014a0:	20000294 	.word	0x20000294
 80014a4:	20000418 	.word	0x20000418

080014a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <MX_USART1_UART_Init+0x50>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014ec:	f002 fbfc 	bl	8003ce8 <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014f6:	f7ff feb7 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200003b8 	.word	0x200003b8
 8001504:	40013800 	.word	0x40013800

08001508 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <HAL_UART_MspInit+0x8c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d131      	bne.n	800158c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_UART_MspInit+0x90>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a1a      	ldr	r2, [pc, #104]	; (8001598 <HAL_UART_MspInit+0x90>)
 800152e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <HAL_UART_MspInit+0x90>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	4b15      	ldr	r3, [pc, #84]	; (8001598 <HAL_UART_MspInit+0x90>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <HAL_UART_MspInit+0x90>)
 8001546:	f043 0304 	orr.w	r3, r3, #4
 800154a:	6193      	str	r3, [r2, #24]
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_UART_MspInit+0x90>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	60bb      	str	r3, [r7, #8]
 8001556:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	4619      	mov	r1, r3
 800156c:	480b      	ldr	r0, [pc, #44]	; (800159c <HAL_UART_MspInit+0x94>)
 800156e:	f000 fe0d 	bl	800218c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4619      	mov	r1, r3
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <HAL_UART_MspInit+0x94>)
 8001588:	f000 fe00 	bl	800218c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800158c:	bf00      	nop
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40013800 	.word	0x40013800
 8001598:	40021000 	.word	0x40021000
 800159c:	40010800 	.word	0x40010800

080015a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015a2:	490d      	ldr	r1, [pc, #52]	; (80015d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a4:	4a0d      	ldr	r2, [pc, #52]	; (80015dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015b8:	4c0a      	ldr	r4, [pc, #40]	; (80015e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015c6:	f7ff ff6f 	bl	80014a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ca:	f002 fd4b 	bl	8004064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015ce:	f7ff fdb3 	bl	8001138 <main>
  bx lr
 80015d2:	4770      	bx	lr
  ldr r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d8:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 80015dc:	08007580 	.word	0x08007580
  ldr r2, =_sbss
 80015e0:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 80015e4:	20000414 	.word	0x20000414

080015e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015e8:	e7fe      	b.n	80015e8 <ADC1_2_IRQHandler>

080015ea <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b088      	sub	sp, #32
 80015ee:	af04      	add	r7, sp, #16
 80015f0:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80015f2:	2364      	movs	r3, #100	; 0x64
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2301      	movs	r3, #1
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	f107 030f 	add.w	r3, r7, #15
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2301      	movs	r3, #1
 8001602:	2275      	movs	r2, #117	; 0x75
 8001604:	21d0      	movs	r1, #208	; 0xd0
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f001 f992 	bl	8002930 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b68      	cmp	r3, #104	; 0x68
 8001610:	d13d      	bne.n	800168e <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001612:	2300      	movs	r3, #0
 8001614:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001616:	2364      	movs	r3, #100	; 0x64
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	2301      	movs	r3, #1
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f107 030e 	add.w	r3, r7, #14
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2301      	movs	r3, #1
 8001626:	226b      	movs	r2, #107	; 0x6b
 8001628:	21d0      	movs	r1, #208	; 0xd0
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f001 f886 	bl	800273c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001630:	2307      	movs	r3, #7
 8001632:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001634:	2364      	movs	r3, #100	; 0x64
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	2301      	movs	r3, #1
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	f107 030e 	add.w	r3, r7, #14
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2301      	movs	r3, #1
 8001644:	2219      	movs	r2, #25
 8001646:	21d0      	movs	r1, #208	; 0xd0
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f001 f877 	bl	800273c <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800164e:	2300      	movs	r3, #0
 8001650:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001652:	2364      	movs	r3, #100	; 0x64
 8001654:	9302      	str	r3, [sp, #8]
 8001656:	2301      	movs	r3, #1
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	f107 030e 	add.w	r3, r7, #14
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2301      	movs	r3, #1
 8001662:	221c      	movs	r2, #28
 8001664:	21d0      	movs	r1, #208	; 0xd0
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f001 f868 	bl	800273c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800166c:	2300      	movs	r3, #0
 800166e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	9302      	str	r3, [sp, #8]
 8001674:	2301      	movs	r3, #1
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	f107 030e 	add.w	r3, r7, #14
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	2301      	movs	r3, #1
 8001680:	221b      	movs	r2, #27
 8001682:	21d0      	movs	r1, #208	; 0xd0
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f001 f859 	bl	800273c <HAL_I2C_Mem_Write>
        return 0;
 800168a:	2300      	movs	r3, #0
 800168c:	e000      	b.n	8001690 <MPU6050_Init+0xa6>
    }
    return 1;
 800168e:	2301      	movs	r3, #1
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800169c:	b094      	sub	sp, #80	; 0x50
 800169e:	af04      	add	r7, sp, #16
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80016a4:	2364      	movs	r3, #100	; 0x64
 80016a6:	9302      	str	r3, [sp, #8]
 80016a8:	230e      	movs	r3, #14
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	f107 0308 	add.w	r3, r7, #8
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2301      	movs	r3, #1
 80016b4:	223b      	movs	r2, #59	; 0x3b
 80016b6:	21d0      	movs	r1, #208	; 0xd0
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f001 f939 	bl	8002930 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 80016be:	7a3b      	ldrb	r3, [r7, #8]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	7a7b      	ldrb	r3, [r7, #9]
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	4313      	orrs	r3, r2
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80016d0:	7abb      	ldrb	r3, [r7, #10]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	7afb      	ldrb	r3, [r7, #11]
 80016d8:	b21b      	sxth	r3, r3
 80016da:	4313      	orrs	r3, r2
 80016dc:	b21a      	sxth	r2, r3
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80016e2:	7b3b      	ldrb	r3, [r7, #12]
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	7b7b      	ldrb	r3, [r7, #13]
 80016ea:	b21b      	sxth	r3, r3
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80016f4:	7bbb      	ldrb	r3, [r7, #14]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001702:	7c3b      	ldrb	r3, [r7, #16]
 8001704:	021b      	lsls	r3, r3, #8
 8001706:	b21a      	sxth	r2, r3
 8001708:	7c7b      	ldrb	r3, [r7, #17]
 800170a:	b21b      	sxth	r3, r3
 800170c:	4313      	orrs	r3, r2
 800170e:	b21a      	sxth	r2, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001714:	7cbb      	ldrb	r3, [r7, #18]
 8001716:	021b      	lsls	r3, r3, #8
 8001718:	b21a      	sxth	r2, r3
 800171a:	7cfb      	ldrb	r3, [r7, #19]
 800171c:	b21b      	sxth	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b21a      	sxth	r2, r3
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001726:	7d3b      	ldrb	r3, [r7, #20]
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	b21a      	sxth	r2, r3
 800172c:	7d7b      	ldrb	r3, [r7, #21]
 800172e:	b21b      	sxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b21a      	sxth	r2, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fecc 	bl	80004dc <__aeabi_i2d>
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4bb7      	ldr	r3, [pc, #732]	; (8001a28 <MPU6050_Read_All+0x390>)
 800174a:	f7ff f85b 	bl	8000804 <__aeabi_ddiv>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	6839      	ldr	r1, [r7, #0]
 8001754:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe febc 	bl	80004dc <__aeabi_i2d>
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	4baf      	ldr	r3, [pc, #700]	; (8001a28 <MPU6050_Read_All+0x390>)
 800176a:	f7ff f84b 	bl	8000804 <__aeabi_ddiv>
 800176e:	4602      	mov	r2, r0
 8001770:	460b      	mov	r3, r1
 8001772:	6839      	ldr	r1, [r7, #0]
 8001774:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe feac 	bl	80004dc <__aeabi_i2d>
 8001784:	a3a2      	add	r3, pc, #648	; (adr r3, 8001a10 <MPU6050_Read_All+0x378>)
 8001786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178a:	f7ff f83b 	bl	8000804 <__aeabi_ddiv>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	6839      	ldr	r1, [r7, #0]
 8001794:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001798:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff fa99 	bl	8000cd4 <__aeabi_i2f>
 80017a2:	4603      	mov	r3, r0
 80017a4:	49a1      	ldr	r1, [pc, #644]	; (8001a2c <MPU6050_Read_All+0x394>)
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fb9c 	bl	8000ee4 <__aeabi_fdiv>
 80017ac:	4603      	mov	r3, r0
 80017ae:	49a0      	ldr	r1, [pc, #640]	; (8001a30 <MPU6050_Read_All+0x398>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff f9db 	bl	8000b6c <__addsf3>
 80017b6:	4603      	mov	r3, r0
 80017b8:	461a      	mov	r2, r3
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe89 	bl	80004dc <__aeabi_i2d>
 80017ca:	a393      	add	r3, pc, #588	; (adr r3, 8001a18 <MPU6050_Read_All+0x380>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7ff f818 	bl	8000804 <__aeabi_ddiv>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	6839      	ldr	r1, [r7, #0]
 80017da:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fe79 	bl	80004dc <__aeabi_i2d>
 80017ea:	a38b      	add	r3, pc, #556	; (adr r3, 8001a18 <MPU6050_Read_All+0x380>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7ff f808 	bl	8000804 <__aeabi_ddiv>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe69 	bl	80004dc <__aeabi_i2d>
 800180a:	a383      	add	r3, pc, #524	; (adr r3, 8001a18 <MPU6050_Read_All+0x380>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe fff8 	bl	8000804 <__aeabi_ddiv>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	6839      	ldr	r1, [r7, #0]
 800181a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 800181e:	f000 fba3 	bl	8001f68 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	4b83      	ldr	r3, [pc, #524]	; (8001a34 <MPU6050_Read_All+0x39c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe46 	bl	80004bc <__aeabi_ui2d>
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	4b80      	ldr	r3, [pc, #512]	; (8001a38 <MPU6050_Read_All+0x3a0>)
 8001836:	f7fe ffe5 	bl	8000804 <__aeabi_ddiv>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001842:	f000 fb91 	bl	8001f68 <HAL_GetTick>
 8001846:	4603      	mov	r3, r0
 8001848:	4a7a      	ldr	r2, [pc, #488]	; (8001a34 <MPU6050_Read_All+0x39c>)
 800184a:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001852:	461a      	mov	r2, r3
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185a:	fb03 f202 	mul.w	r2, r3, r2
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001864:	4619      	mov	r1, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800186c:	fb03 f301 	mul.w	r3, r3, r1
 8001870:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001872:	4618      	mov	r0, r3
 8001874:	f7fe fe32 	bl	80004dc <__aeabi_i2d>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f005 fa82 	bl	8006d88 <sqrt>
 8001884:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001894:	f7ff f8f4 	bl	8000a80 <__aeabi_dcmpeq>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d119      	bne.n	80018d2 <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe19 	bl	80004dc <__aeabi_i2d>
 80018aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018ae:	f7fe ffa9 	bl	8000804 <__aeabi_ddiv>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4610      	mov	r0, r2
 80018b8:	4619      	mov	r1, r3
 80018ba:	f005 f8d5 	bl	8006a68 <atan>
 80018be:	a358      	add	r3, pc, #352	; (adr r3, 8001a20 <MPU6050_Read_All+0x388>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe fe74 	bl	80005b0 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80018d0:	e005      	b.n	80018de <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e4:	425b      	negs	r3, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fdf8 	bl	80004dc <__aeabi_i2d>
 80018ec:	4682      	mov	sl, r0
 80018ee:	468b      	mov	fp, r1
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fdf0 	bl	80004dc <__aeabi_i2d>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4650      	mov	r0, sl
 8001902:	4659      	mov	r1, fp
 8001904:	f005 fa3d 	bl	8006d82 <atan2>
 8001908:	a345      	add	r3, pc, #276	; (adr r3, 8001a20 <MPU6050_Read_All+0x388>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	f7fe fe4f 	bl	80005b0 <__aeabi_dmul>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b47      	ldr	r3, [pc, #284]	; (8001a3c <MPU6050_Read_All+0x3a4>)
 8001920:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001924:	f7ff f8b6 	bl	8000a94 <__aeabi_dcmplt>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00a      	beq.n	8001944 <MPU6050_Read_All+0x2ac>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <MPU6050_Read_All+0x3a8>)
 800193a:	f7ff f8c9 	bl	8000ad0 <__aeabi_dcmpgt>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d114      	bne.n	800196e <MPU6050_Read_All+0x2d6>
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	4b3d      	ldr	r3, [pc, #244]	; (8001a40 <MPU6050_Read_All+0x3a8>)
 800194a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800194e:	f7ff f8bf 	bl	8000ad0 <__aeabi_dcmpgt>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d015      	beq.n	8001984 <MPU6050_Read_All+0x2ec>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <MPU6050_Read_All+0x3a4>)
 8001964:	f7ff f896 	bl	8000a94 <__aeabi_dcmplt>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00a      	beq.n	8001984 <MPU6050_Read_All+0x2ec>
        KalmanY.angle = pitch;
 800196e:	4935      	ldr	r1, [pc, #212]	; (8001a44 <MPU6050_Read_All+0x3ac>)
 8001970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001974:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001978:	6839      	ldr	r1, [r7, #0]
 800197a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800197e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001982:	e012      	b.n	80019aa <MPU6050_Read_All+0x312>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800198a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800198e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001992:	e9cd 2300 	strd	r2, r3, [sp]
 8001996:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800199a:	482a      	ldr	r0, [pc, #168]	; (8001a44 <MPU6050_Read_All+0x3ac>)
 800199c:	f000 f856 	bl	8001a4c <Kalman_getAngle>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	6839      	ldr	r1, [r7, #0]
 80019a6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80019b0:	4690      	mov	r8, r2
 80019b2:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <MPU6050_Read_All+0x3a8>)
 80019bc:	4640      	mov	r0, r8
 80019be:	4649      	mov	r1, r9
 80019c0:	f7ff f886 	bl	8000ad0 <__aeabi_dcmpgt>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d008      	beq.n	80019dc <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80019d0:	4614      	mov	r4, r2
 80019d2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80019e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80019ea:	e9cd 2300 	strd	r2, r3, [sp]
 80019ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019f2:	4815      	ldr	r0, [pc, #84]	; (8001a48 <MPU6050_Read_All+0x3b0>)
 80019f4:	f000 f82a 	bl	8001a4c <Kalman_getAngle>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	6839      	ldr	r1, [r7, #0]
 80019fe:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 8001a02:	bf00      	nop
 8001a04:	3740      	adds	r7, #64	; 0x40
 8001a06:	46bd      	mov	sp, r7
 8001a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0c:	f3af 8000 	nop.w
 8001a10:	00000000 	.word	0x00000000
 8001a14:	40cc2900 	.word	0x40cc2900
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	40606000 	.word	0x40606000
 8001a20:	1a63c1f8 	.word	0x1a63c1f8
 8001a24:	404ca5dc 	.word	0x404ca5dc
 8001a28:	40d00000 	.word	0x40d00000
 8001a2c:	43aa0000 	.word	0x43aa0000
 8001a30:	42121eb8 	.word	0x42121eb8
 8001a34:	200003fc 	.word	0x200003fc
 8001a38:	408f4000 	.word	0x408f4000
 8001a3c:	c0568000 	.word	0xc0568000
 8001a40:	40568000 	.word	0x40568000
 8001a44:	20000050 	.word	0x20000050
 8001a48:	20000008 	.word	0x20000008

08001a4c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001a4c:	b5b0      	push	{r4, r5, r7, lr}
 8001a4e:	b092      	sub	sp, #72	; 0x48
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001a5e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001a62:	f7fe fbed 	bl	8000240 <__aeabi_dsub>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001a7c:	f7fe fd98 	bl	80005b0 <__aeabi_dmul>
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	4620      	mov	r0, r4
 8001a86:	4629      	mov	r1, r5
 8001a88:	f7fe fbdc 	bl	8000244 <__adddf3>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	68f9      	ldr	r1, [r7, #12]
 8001a92:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001aa2:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001aa6:	f7fe fd83 	bl	80005b0 <__aeabi_dmul>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	460b      	mov	r3, r1
 8001aae:	4610      	mov	r0, r2
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001ab8:	f7fe fbc2 	bl	8000240 <__aeabi_dsub>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001aca:	f7fe fbb9 	bl	8000240 <__aeabi_dsub>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe fbb2 	bl	8000244 <__adddf3>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001aec:	f7fe fd60 	bl	80005b0 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4620      	mov	r0, r4
 8001af6:	4629      	mov	r1, r5
 8001af8:	f7fe fba4 	bl	8000244 <__adddf3>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	68f9      	ldr	r1, [r7, #12]
 8001b02:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001b12:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b16:	f7fe fd4b 	bl	80005b0 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4620      	mov	r0, r4
 8001b20:	4629      	mov	r1, r5
 8001b22:	f7fe fb8d 	bl	8000240 <__aeabi_dsub>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	68f9      	ldr	r1, [r7, #12]
 8001b2c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001b3c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b40:	f7fe fd36 	bl	80005b0 <__aeabi_dmul>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe fb78 	bl	8000240 <__aeabi_dsub>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	68f9      	ldr	r1, [r7, #12]
 8001b56:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001b66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b6a:	f7fe fd21 	bl	80005b0 <__aeabi_dmul>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4620      	mov	r0, r4
 8001b74:	4629      	mov	r1, r5
 8001b76:	f7fe fb65 	bl	8000244 <__adddf3>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	68f9      	ldr	r1, [r7, #12]
 8001b80:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001b90:	f7fe fb58 	bl	8000244 <__adddf3>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ba2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ba6:	f7fe fe2d 	bl	8000804 <__aeabi_ddiv>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001bb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001bbc:	f7fe fe22 	bl	8000804 <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001bce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001bd2:	f7fe fb35 	bl	8000240 <__aeabi_dsub>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001be4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001be8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001bec:	f7fe fce0 	bl	80005b0 <__aeabi_dmul>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	4629      	mov	r1, r5
 8001bf8:	f7fe fb24 	bl	8000244 <__adddf3>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001c0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c14:	f7fe fccc 	bl	80005b0 <__aeabi_dmul>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4620      	mov	r0, r4
 8001c1e:	4629      	mov	r1, r5
 8001c20:	f7fe fb10 	bl	8000244 <__adddf3>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	68f9      	ldr	r1, [r7, #12]
 8001c2a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001c34:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001c3e:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001c48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c50:	f7fe fcae 	bl	80005b0 <__aeabi_dmul>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4620      	mov	r0, r4
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	f7fe faf0 	bl	8000240 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001c70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c74:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c78:	f7fe fc9a 	bl	80005b0 <__aeabi_dmul>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4620      	mov	r0, r4
 8001c82:	4629      	mov	r1, r5
 8001c84:	f7fe fadc 	bl	8000240 <__aeabi_dsub>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	68f9      	ldr	r1, [r7, #12]
 8001c8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001c98:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ca0:	f7fe fc86 	bl	80005b0 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4629      	mov	r1, r5
 8001cac:	f7fe fac8 	bl	8000240 <__aeabi_dsub>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	68f9      	ldr	r1, [r7, #12]
 8001cb6:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001cc0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cc4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cc8:	f7fe fc72 	bl	80005b0 <__aeabi_dmul>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	f7fe fab4 	bl	8000240 <__aeabi_dsub>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	68f9      	ldr	r1, [r7, #12]
 8001cde:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001ce8:	4610      	mov	r0, r2
 8001cea:	4619      	mov	r1, r3
 8001cec:	3748      	adds	r7, #72	; 0x48
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001cf4 <usart1_send_char>:

//串口1发送1个字符
//c:要发送的字符
void usart1_send_char(uint8_t c)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	71fb      	strb	r3, [r7, #7]
	while(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_TC)==RESET){};//循环发送,直到发送完毕
 8001cfe:	bf00      	nop
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <usart1_send_char+0x30>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0a:	2b40      	cmp	r3, #64	; 0x40
 8001d0c:	d1f8      	bne.n	8001d00 <usart1_send_char+0xc>
	HAL_UART_Transmit(&huart1,&c,1,1000);
 8001d0e:	1df9      	adds	r1, r7, #7
 8001d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d14:	2201      	movs	r2, #1
 8001d16:	4803      	ldr	r0, [pc, #12]	; (8001d24 <usart1_send_char+0x30>)
 8001d18:	f002 f833 	bl	8003d82 <HAL_UART_Transmit>
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200003b8 	.word	0x200003b8

08001d28 <usart1_niming_report>:
//传送数据给匿名四轴上位机软件(V2.6版本)
//fun:功能字. 0XA0~0XAF
//data:数据缓存区,最多28字节!!
//len:data区有效数据个数
void usart1_niming_report(uint8_t fun,uint8_t*data,uint8_t len)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08c      	sub	sp, #48	; 0x30
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	71bb      	strb	r3, [r7, #6]
	uint8_t send_buf[32];
	uint8_t i;
	if(len>28)return;	//最多28字节数据
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	2b1c      	cmp	r3, #28
 8001d3c:	d868      	bhi.n	8001e10 <usart1_niming_report+0xe8>
	send_buf[len+3]=0;	//校验数置零
 8001d3e:	79bb      	ldrb	r3, [r7, #6]
 8001d40:	3303      	adds	r3, #3
 8001d42:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001d46:	4413      	add	r3, r2
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f803 2c24 	strb.w	r2, [r3, #-36]
	send_buf[0]=0X88;	//帧头
 8001d4e:	2388      	movs	r3, #136	; 0x88
 8001d50:	733b      	strb	r3, [r7, #12]
	send_buf[1]=fun;	//功能字
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	737b      	strb	r3, [r7, #13]
	send_buf[2]=len;	//数据长度
 8001d56:	79bb      	ldrb	r3, [r7, #6]
 8001d58:	73bb      	strb	r3, [r7, #14]
	for(i=0;i<len;i++)send_buf[3+i]=data[i];			//复制数据
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d60:	e011      	b.n	8001d86 <usart1_niming_report+0x5e>
 8001d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	441a      	add	r2, r3
 8001d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d6e:	3303      	adds	r3, #3
 8001d70:	7812      	ldrb	r2, [r2, #0]
 8001d72:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001d76:	440b      	add	r3, r1
 8001d78:	f803 2c24 	strb.w	r2, [r3, #-36]
 8001d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d80:	3301      	adds	r3, #1
 8001d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d86:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001d8a:	79bb      	ldrb	r3, [r7, #6]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d3e8      	bcc.n	8001d62 <usart1_niming_report+0x3a>
	for(i=0;i<len+3;i++)send_buf[len+3]+=send_buf[i];	//计算校验和
 8001d90:	2300      	movs	r3, #0
 8001d92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d96:	e01b      	b.n	8001dd0 <usart1_niming_report+0xa8>
 8001d98:	79bb      	ldrb	r3, [r7, #6]
 8001d9a:	3303      	adds	r3, #3
 8001d9c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001da0:	4413      	add	r3, r2
 8001da2:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 8001da6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001daa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001dae:	4413      	add	r3, r2
 8001db0:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001db4:	79bb      	ldrb	r3, [r7, #6]
 8001db6:	3303      	adds	r3, #3
 8001db8:	440a      	add	r2, r1
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001dc0:	440b      	add	r3, r1
 8001dc2:	f803 2c24 	strb.w	r2, [r3, #-36]
 8001dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001dd0:	79bb      	ldrb	r3, [r7, #6]
 8001dd2:	1c9a      	adds	r2, r3, #2
 8001dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dadd      	bge.n	8001d98 <usart1_niming_report+0x70>
	for(i=0;i<len+4;i++)usart1_send_char(send_buf[i]);	//发送数据到串口1
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001de2:	e00e      	b.n	8001e02 <usart1_niming_report+0xda>
 8001de4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001de8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001dec:	4413      	add	r3, r2
 8001dee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff ff7e 	bl	8001cf4 <usart1_send_char>
 8001df8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001e02:	79bb      	ldrb	r3, [r7, #6]
 8001e04:	1cda      	adds	r2, r3, #3
 8001e06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	daea      	bge.n	8001de4 <usart1_niming_report+0xbc>
 8001e0e:	e000      	b.n	8001e12 <usart1_niming_report+0xea>
	if(len>28)return;	//最多28字节数据
 8001e10:	bf00      	nop
}
 8001e12:	3730      	adds	r7, #48	; 0x30
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <mpu6050_send_data>:

//发送加速度传感器数据和陀螺仪数据
//aacx,aacy,aacz:x,y,z三个方向上面的加速度值
//gyrox,gyroy,gyroz:x,y,z三个方向上面的陀螺仪值
void mpu6050_send_data(int16_t aacx,int16_t aacy,int16_t aacz,int16_t gyrox,int16_t gyroy,int16_t gyroz)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4604      	mov	r4, r0
 8001e20:	4608      	mov	r0, r1
 8001e22:	4611      	mov	r1, r2
 8001e24:	461a      	mov	r2, r3
 8001e26:	4623      	mov	r3, r4
 8001e28:	80fb      	strh	r3, [r7, #6]
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80bb      	strh	r3, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	807b      	strh	r3, [r7, #2]
 8001e32:	4613      	mov	r3, r2
 8001e34:	803b      	strh	r3, [r7, #0]
	uint8_t tbuf[12];
	tbuf[0]=(aacx>>8)&0XFF;
 8001e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3a:	121b      	asrs	r3, r3, #8
 8001e3c:	b21b      	sxth	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	733b      	strb	r3, [r7, #12]
	tbuf[1]=aacx&0XFF;
 8001e42:	88fb      	ldrh	r3, [r7, #6]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	737b      	strb	r3, [r7, #13]
	tbuf[2]=(aacy>>8)&0XFF;
 8001e48:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e4c:	121b      	asrs	r3, r3, #8
 8001e4e:	b21b      	sxth	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	73bb      	strb	r3, [r7, #14]
	tbuf[3]=aacy&0XFF;
 8001e54:	88bb      	ldrh	r3, [r7, #4]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	73fb      	strb	r3, [r7, #15]
	tbuf[4]=(aacz>>8)&0XFF;
 8001e5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e5e:	121b      	asrs	r3, r3, #8
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	743b      	strb	r3, [r7, #16]
	tbuf[5]=aacz&0XFF;
 8001e66:	887b      	ldrh	r3, [r7, #2]
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	747b      	strb	r3, [r7, #17]
	tbuf[6]=(gyrox>>8)&0XFF;
 8001e6c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001e70:	121b      	asrs	r3, r3, #8
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	74bb      	strb	r3, [r7, #18]
	tbuf[7]=gyrox&0XFF;
 8001e78:	883b      	ldrh	r3, [r7, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	74fb      	strb	r3, [r7, #19]
	tbuf[8]=(gyroy>>8)&0XFF;
 8001e7e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001e82:	121b      	asrs	r3, r3, #8
 8001e84:	b21b      	sxth	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	753b      	strb	r3, [r7, #20]
	tbuf[9]=gyroy&0XFF;
 8001e8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	757b      	strb	r3, [r7, #21]
	tbuf[10]=(gyroz>>8)&0XFF;
 8001e90:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001e94:	121b      	asrs	r3, r3, #8
 8001e96:	b21b      	sxth	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	75bb      	strb	r3, [r7, #22]
	tbuf[11]=gyroz&0XFF;
 8001e9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	75fb      	strb	r3, [r7, #23]
	usart1_niming_report(0XA1,tbuf,12);//自定义帧,0XA1
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	20a1      	movs	r0, #161	; 0xa1
 8001eac:	f7ff ff3c 	bl	8001d28 <usart1_niming_report>
}
 8001eb0:	bf00      	nop
 8001eb2:	371c      	adds	r7, #28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd90      	pop	{r4, r7, pc}

08001eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <HAL_Init+0x28>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <HAL_Init+0x28>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec8:	2003      	movs	r0, #3
 8001eca:	f000 f92b 	bl	8002124 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f000 f808 	bl	8001ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed4:	f7ff f9ce 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40022000 	.word	0x40022000

08001ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_InitTick+0x54>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_InitTick+0x58>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	4618      	mov	r0, r3
 8001f04:	f000 f935 	bl	8002172 <HAL_SYSTICK_Config>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00e      	b.n	8001f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b0f      	cmp	r3, #15
 8001f16:	d80a      	bhi.n	8001f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f18:	2200      	movs	r2, #0
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f000 f90b 	bl	800213a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f24:	4a06      	ldr	r2, [pc, #24]	; (8001f40 <HAL_InitTick+0x5c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	2000009c 	.word	0x2000009c
 8001f40:	20000098 	.word	0x20000098

08001f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <HAL_IncTick+0x1c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_IncTick+0x20>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a03      	ldr	r2, [pc, #12]	; (8001f64 <HAL_IncTick+0x20>)
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	2000009c 	.word	0x2000009c
 8001f64:	20000400 	.word	0x20000400

08001f68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f6c:	4b02      	ldr	r3, [pc, #8]	; (8001f78 <HAL_GetTick+0x10>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	20000400 	.word	0x20000400

08001f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f84:	f7ff fff0 	bl	8001f68 <HAL_GetTick>
 8001f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f94:	d005      	beq.n	8001fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_Delay+0x44>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa2:	bf00      	nop
 8001fa4:	f7ff ffe0 	bl	8001f68 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d8f7      	bhi.n	8001fa4 <HAL_Delay+0x28>
  {
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000009c 	.word	0x2000009c

08001fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	; (8002008 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002010:	4b04      	ldr	r3, [pc, #16]	; (8002024 <__NVIC_GetPriorityGrouping+0x18>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	f003 0307 	and.w	r3, r3, #7
}
 800201a:	4618      	mov	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bc80      	pop	{r7}
 80020de:	4770      	bx	lr

080020e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f0:	d301      	bcc.n	80020f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00f      	b.n	8002116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <SysTick_Config+0x40>)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fe:	210f      	movs	r1, #15
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	f7ff ff90 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <SysTick_Config+0x40>)
 800210a:	2200      	movs	r2, #0
 800210c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210e:	4b04      	ldr	r3, [pc, #16]	; (8002120 <SysTick_Config+0x40>)
 8002110:	2207      	movs	r2, #7
 8002112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	e000e010 	.word	0xe000e010

08002124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f7ff ff49 	bl	8001fc4 <__NVIC_SetPriorityGrouping>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	4603      	mov	r3, r0
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
 8002146:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800214c:	f7ff ff5e 	bl	800200c <__NVIC_GetPriorityGrouping>
 8002150:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	6978      	ldr	r0, [r7, #20]
 8002158:	f7ff ff90 	bl	800207c <NVIC_EncodePriority>
 800215c:	4602      	mov	r2, r0
 800215e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff5f 	bl	8002028 <__NVIC_SetPriority>
}
 800216a:	bf00      	nop
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ffb0 	bl	80020e0 <SysTick_Config>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b08b      	sub	sp, #44	; 0x2c
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800219a:	2300      	movs	r3, #0
 800219c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219e:	e179      	b.n	8002494 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021a0:	2201      	movs	r2, #1
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69fa      	ldr	r2, [r7, #28]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	f040 8168 	bne.w	800248e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	4aa0      	ldr	r2, [pc, #640]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d05e      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021c8:	4a9e      	ldr	r2, [pc, #632]	; (8002444 <HAL_GPIO_Init+0x2b8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d875      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021ce:	4a9e      	ldr	r2, [pc, #632]	; (8002448 <HAL_GPIO_Init+0x2bc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d058      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021d4:	4a9c      	ldr	r2, [pc, #624]	; (8002448 <HAL_GPIO_Init+0x2bc>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d86f      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021da:	4a9c      	ldr	r2, [pc, #624]	; (800244c <HAL_GPIO_Init+0x2c0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d052      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021e0:	4a9a      	ldr	r2, [pc, #616]	; (800244c <HAL_GPIO_Init+0x2c0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d869      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021e6:	4a9a      	ldr	r2, [pc, #616]	; (8002450 <HAL_GPIO_Init+0x2c4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d04c      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021ec:	4a98      	ldr	r2, [pc, #608]	; (8002450 <HAL_GPIO_Init+0x2c4>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d863      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021f2:	4a98      	ldr	r2, [pc, #608]	; (8002454 <HAL_GPIO_Init+0x2c8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d046      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
 80021f8:	4a96      	ldr	r2, [pc, #600]	; (8002454 <HAL_GPIO_Init+0x2c8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d85d      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 80021fe:	2b12      	cmp	r3, #18
 8002200:	d82a      	bhi.n	8002258 <HAL_GPIO_Init+0xcc>
 8002202:	2b12      	cmp	r3, #18
 8002204:	d859      	bhi.n	80022ba <HAL_GPIO_Init+0x12e>
 8002206:	a201      	add	r2, pc, #4	; (adr r2, 800220c <HAL_GPIO_Init+0x80>)
 8002208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220c:	08002287 	.word	0x08002287
 8002210:	08002261 	.word	0x08002261
 8002214:	08002273 	.word	0x08002273
 8002218:	080022b5 	.word	0x080022b5
 800221c:	080022bb 	.word	0x080022bb
 8002220:	080022bb 	.word	0x080022bb
 8002224:	080022bb 	.word	0x080022bb
 8002228:	080022bb 	.word	0x080022bb
 800222c:	080022bb 	.word	0x080022bb
 8002230:	080022bb 	.word	0x080022bb
 8002234:	080022bb 	.word	0x080022bb
 8002238:	080022bb 	.word	0x080022bb
 800223c:	080022bb 	.word	0x080022bb
 8002240:	080022bb 	.word	0x080022bb
 8002244:	080022bb 	.word	0x080022bb
 8002248:	080022bb 	.word	0x080022bb
 800224c:	080022bb 	.word	0x080022bb
 8002250:	08002269 	.word	0x08002269
 8002254:	0800227d 	.word	0x0800227d
 8002258:	4a7f      	ldr	r2, [pc, #508]	; (8002458 <HAL_GPIO_Init+0x2cc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d013      	beq.n	8002286 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800225e:	e02c      	b.n	80022ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	623b      	str	r3, [r7, #32]
          break;
 8002266:	e029      	b.n	80022bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	3304      	adds	r3, #4
 800226e:	623b      	str	r3, [r7, #32]
          break;
 8002270:	e024      	b.n	80022bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	3308      	adds	r3, #8
 8002278:	623b      	str	r3, [r7, #32]
          break;
 800227a:	e01f      	b.n	80022bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	330c      	adds	r3, #12
 8002282:	623b      	str	r3, [r7, #32]
          break;
 8002284:	e01a      	b.n	80022bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d102      	bne.n	8002294 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800228e:	2304      	movs	r3, #4
 8002290:	623b      	str	r3, [r7, #32]
          break;
 8002292:	e013      	b.n	80022bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d105      	bne.n	80022a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800229c:	2308      	movs	r3, #8
 800229e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	611a      	str	r2, [r3, #16]
          break;
 80022a6:	e009      	b.n	80022bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a8:	2308      	movs	r3, #8
 80022aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	615a      	str	r2, [r3, #20]
          break;
 80022b2:	e003      	b.n	80022bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022b4:	2300      	movs	r3, #0
 80022b6:	623b      	str	r3, [r7, #32]
          break;
 80022b8:	e000      	b.n	80022bc <HAL_GPIO_Init+0x130>
          break;
 80022ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2bff      	cmp	r3, #255	; 0xff
 80022c0:	d801      	bhi.n	80022c6 <HAL_GPIO_Init+0x13a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	e001      	b.n	80022ca <HAL_GPIO_Init+0x13e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3304      	adds	r3, #4
 80022ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2bff      	cmp	r3, #255	; 0xff
 80022d0:	d802      	bhi.n	80022d8 <HAL_GPIO_Init+0x14c>
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	e002      	b.n	80022de <HAL_GPIO_Init+0x152>
 80022d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022da:	3b08      	subs	r3, #8
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	210f      	movs	r1, #15
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	401a      	ands	r2, r3
 80022f0:	6a39      	ldr	r1, [r7, #32]
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	431a      	orrs	r2, r3
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 80c1 	beq.w	800248e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800230c:	4b53      	ldr	r3, [pc, #332]	; (800245c <HAL_GPIO_Init+0x2d0>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	4a52      	ldr	r2, [pc, #328]	; (800245c <HAL_GPIO_Init+0x2d0>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6193      	str	r3, [r2, #24]
 8002318:	4b50      	ldr	r3, [pc, #320]	; (800245c <HAL_GPIO_Init+0x2d0>)
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002324:	4a4e      	ldr	r2, [pc, #312]	; (8002460 <HAL_GPIO_Init+0x2d4>)
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	089b      	lsrs	r3, r3, #2
 800232a:	3302      	adds	r3, #2
 800232c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002330:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	220f      	movs	r2, #15
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4013      	ands	r3, r2
 8002346:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a46      	ldr	r2, [pc, #280]	; (8002464 <HAL_GPIO_Init+0x2d8>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d01f      	beq.n	8002390 <HAL_GPIO_Init+0x204>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a45      	ldr	r2, [pc, #276]	; (8002468 <HAL_GPIO_Init+0x2dc>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d019      	beq.n	800238c <HAL_GPIO_Init+0x200>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a44      	ldr	r2, [pc, #272]	; (800246c <HAL_GPIO_Init+0x2e0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d013      	beq.n	8002388 <HAL_GPIO_Init+0x1fc>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a43      	ldr	r2, [pc, #268]	; (8002470 <HAL_GPIO_Init+0x2e4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d00d      	beq.n	8002384 <HAL_GPIO_Init+0x1f8>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a42      	ldr	r2, [pc, #264]	; (8002474 <HAL_GPIO_Init+0x2e8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d007      	beq.n	8002380 <HAL_GPIO_Init+0x1f4>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a41      	ldr	r2, [pc, #260]	; (8002478 <HAL_GPIO_Init+0x2ec>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_GPIO_Init+0x1f0>
 8002378:	2305      	movs	r3, #5
 800237a:	e00a      	b.n	8002392 <HAL_GPIO_Init+0x206>
 800237c:	2306      	movs	r3, #6
 800237e:	e008      	b.n	8002392 <HAL_GPIO_Init+0x206>
 8002380:	2304      	movs	r3, #4
 8002382:	e006      	b.n	8002392 <HAL_GPIO_Init+0x206>
 8002384:	2303      	movs	r3, #3
 8002386:	e004      	b.n	8002392 <HAL_GPIO_Init+0x206>
 8002388:	2302      	movs	r3, #2
 800238a:	e002      	b.n	8002392 <HAL_GPIO_Init+0x206>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <HAL_GPIO_Init+0x206>
 8002390:	2300      	movs	r3, #0
 8002392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002394:	f002 0203 	and.w	r2, r2, #3
 8002398:	0092      	lsls	r2, r2, #2
 800239a:	4093      	lsls	r3, r2
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023a2:	492f      	ldr	r1, [pc, #188]	; (8002460 <HAL_GPIO_Init+0x2d4>)
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	089b      	lsrs	r3, r3, #2
 80023a8:	3302      	adds	r3, #2
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023bc:	4b2f      	ldr	r3, [pc, #188]	; (800247c <HAL_GPIO_Init+0x2f0>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	492e      	ldr	r1, [pc, #184]	; (800247c <HAL_GPIO_Init+0x2f0>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023ca:	4b2c      	ldr	r3, [pc, #176]	; (800247c <HAL_GPIO_Init+0x2f0>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	492a      	ldr	r1, [pc, #168]	; (800247c <HAL_GPIO_Init+0x2f0>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023e4:	4b25      	ldr	r3, [pc, #148]	; (800247c <HAL_GPIO_Init+0x2f0>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4924      	ldr	r1, [pc, #144]	; (800247c <HAL_GPIO_Init+0x2f0>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
 80023f0:	e006      	b.n	8002400 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023f2:	4b22      	ldr	r3, [pc, #136]	; (800247c <HAL_GPIO_Init+0x2f0>)
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	4920      	ldr	r1, [pc, #128]	; (800247c <HAL_GPIO_Init+0x2f0>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d006      	beq.n	800241a <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800240c:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_GPIO_Init+0x2f0>)
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	491a      	ldr	r1, [pc, #104]	; (800247c <HAL_GPIO_Init+0x2f0>)
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	608b      	str	r3, [r1, #8]
 8002418:	e006      	b.n	8002428 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_GPIO_Init+0x2f0>)
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	43db      	mvns	r3, r3
 8002422:	4916      	ldr	r1, [pc, #88]	; (800247c <HAL_GPIO_Init+0x2f0>)
 8002424:	4013      	ands	r3, r2
 8002426:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d025      	beq.n	8002480 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002434:	4b11      	ldr	r3, [pc, #68]	; (800247c <HAL_GPIO_Init+0x2f0>)
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	4910      	ldr	r1, [pc, #64]	; (800247c <HAL_GPIO_Init+0x2f0>)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	60cb      	str	r3, [r1, #12]
 8002440:	e025      	b.n	800248e <HAL_GPIO_Init+0x302>
 8002442:	bf00      	nop
 8002444:	10320000 	.word	0x10320000
 8002448:	10310000 	.word	0x10310000
 800244c:	10220000 	.word	0x10220000
 8002450:	10210000 	.word	0x10210000
 8002454:	10120000 	.word	0x10120000
 8002458:	10110000 	.word	0x10110000
 800245c:	40021000 	.word	0x40021000
 8002460:	40010000 	.word	0x40010000
 8002464:	40010800 	.word	0x40010800
 8002468:	40010c00 	.word	0x40010c00
 800246c:	40011000 	.word	0x40011000
 8002470:	40011400 	.word	0x40011400
 8002474:	40011800 	.word	0x40011800
 8002478:	40011c00 	.word	0x40011c00
 800247c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_GPIO_Init+0x324>)
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	43db      	mvns	r3, r3
 8002488:	4909      	ldr	r1, [pc, #36]	; (80024b0 <HAL_GPIO_Init+0x324>)
 800248a:	4013      	ands	r3, r2
 800248c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	3301      	adds	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f47f ae7e 	bne.w	80021a0 <HAL_GPIO_Init+0x14>
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	372c      	adds	r7, #44	; 0x2c
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40010400 	.word	0x40010400

080024b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e12b      	b.n	800271e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fdee 	bl	80010bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2224      	movs	r2, #36	; 0x24
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002518:	f001 fba0 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 800251c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4a81      	ldr	r2, [pc, #516]	; (8002728 <HAL_I2C_Init+0x274>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d807      	bhi.n	8002538 <HAL_I2C_Init+0x84>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4a80      	ldr	r2, [pc, #512]	; (800272c <HAL_I2C_Init+0x278>)
 800252c:	4293      	cmp	r3, r2
 800252e:	bf94      	ite	ls
 8002530:	2301      	movls	r3, #1
 8002532:	2300      	movhi	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	e006      	b.n	8002546 <HAL_I2C_Init+0x92>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4a7d      	ldr	r2, [pc, #500]	; (8002730 <HAL_I2C_Init+0x27c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	bf94      	ite	ls
 8002540:	2301      	movls	r3, #1
 8002542:	2300      	movhi	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e0e7      	b.n	800271e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4a78      	ldr	r2, [pc, #480]	; (8002734 <HAL_I2C_Init+0x280>)
 8002552:	fba2 2303 	umull	r2, r3, r2, r3
 8002556:	0c9b      	lsrs	r3, r3, #18
 8002558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	430a      	orrs	r2, r1
 800256c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	4a6a      	ldr	r2, [pc, #424]	; (8002728 <HAL_I2C_Init+0x274>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d802      	bhi.n	8002588 <HAL_I2C_Init+0xd4>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	3301      	adds	r3, #1
 8002586:	e009      	b.n	800259c <HAL_I2C_Init+0xe8>
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800258e:	fb02 f303 	mul.w	r3, r2, r3
 8002592:	4a69      	ldr	r2, [pc, #420]	; (8002738 <HAL_I2C_Init+0x284>)
 8002594:	fba2 2303 	umull	r2, r3, r2, r3
 8002598:	099b      	lsrs	r3, r3, #6
 800259a:	3301      	adds	r3, #1
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	495c      	ldr	r1, [pc, #368]	; (8002728 <HAL_I2C_Init+0x274>)
 80025b8:	428b      	cmp	r3, r1
 80025ba:	d819      	bhi.n	80025f0 <HAL_I2C_Init+0x13c>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1e59      	subs	r1, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ca:	1c59      	adds	r1, r3, #1
 80025cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025d0:	400b      	ands	r3, r1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_I2C_Init+0x138>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1e59      	subs	r1, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025e4:	3301      	adds	r3, #1
 80025e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ea:	e051      	b.n	8002690 <HAL_I2C_Init+0x1dc>
 80025ec:	2304      	movs	r3, #4
 80025ee:	e04f      	b.n	8002690 <HAL_I2C_Init+0x1dc>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d111      	bne.n	800261c <HAL_I2C_Init+0x168>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1e58      	subs	r0, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	440b      	add	r3, r1
 8002606:	fbb0 f3f3 	udiv	r3, r0, r3
 800260a:	3301      	adds	r3, #1
 800260c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002610:	2b00      	cmp	r3, #0
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	e012      	b.n	8002642 <HAL_I2C_Init+0x18e>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1e58      	subs	r0, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	0099      	lsls	r1, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002632:	3301      	adds	r3, #1
 8002634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf0c      	ite	eq
 800263c:	2301      	moveq	r3, #1
 800263e:	2300      	movne	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_I2C_Init+0x196>
 8002646:	2301      	movs	r3, #1
 8002648:	e022      	b.n	8002690 <HAL_I2C_Init+0x1dc>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10e      	bne.n	8002670 <HAL_I2C_Init+0x1bc>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	1e58      	subs	r0, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	460b      	mov	r3, r1
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	440b      	add	r3, r1
 8002660:	fbb0 f3f3 	udiv	r3, r0, r3
 8002664:	3301      	adds	r3, #1
 8002666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800266e:	e00f      	b.n	8002690 <HAL_I2C_Init+0x1dc>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1e58      	subs	r0, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	0099      	lsls	r1, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	fbb0 f3f3 	udiv	r3, r0, r3
 8002686:	3301      	adds	r3, #1
 8002688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	6809      	ldr	r1, [r1, #0]
 8002694:	4313      	orrs	r3, r2
 8002696:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69da      	ldr	r2, [r3, #28]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6911      	ldr	r1, [r2, #16]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68d2      	ldr	r2, [r2, #12]
 80026ca:	4311      	orrs	r1, r2
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6812      	ldr	r2, [r2, #0]
 80026d0:	430b      	orrs	r3, r1
 80026d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	695a      	ldr	r2, [r3, #20]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2220      	movs	r2, #32
 800270a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	000186a0 	.word	0x000186a0
 800272c:	001e847f 	.word	0x001e847f
 8002730:	003d08ff 	.word	0x003d08ff
 8002734:	431bde83 	.word	0x431bde83
 8002738:	10624dd3 	.word	0x10624dd3

0800273c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	4608      	mov	r0, r1
 8002746:	4611      	mov	r1, r2
 8002748:	461a      	mov	r2, r3
 800274a:	4603      	mov	r3, r0
 800274c:	817b      	strh	r3, [r7, #10]
 800274e:	460b      	mov	r3, r1
 8002750:	813b      	strh	r3, [r7, #8]
 8002752:	4613      	mov	r3, r2
 8002754:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002756:	f7ff fc07 	bl	8001f68 <HAL_GetTick>
 800275a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b20      	cmp	r3, #32
 8002766:	f040 80d9 	bne.w	800291c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	2319      	movs	r3, #25
 8002770:	2201      	movs	r2, #1
 8002772:	496d      	ldr	r1, [pc, #436]	; (8002928 <HAL_I2C_Mem_Write+0x1ec>)
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fcc1 	bl	80030fc <I2C_WaitOnFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002780:	2302      	movs	r3, #2
 8002782:	e0cc      	b.n	800291e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_I2C_Mem_Write+0x56>
 800278e:	2302      	movs	r3, #2
 8002790:	e0c5      	b.n	800291e <HAL_I2C_Mem_Write+0x1e2>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d007      	beq.n	80027b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2221      	movs	r2, #33	; 0x21
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2240      	movs	r2, #64	; 0x40
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a3a      	ldr	r2, [r7, #32]
 80027e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4a4d      	ldr	r2, [pc, #308]	; (800292c <HAL_I2C_Mem_Write+0x1f0>)
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027fa:	88f8      	ldrh	r0, [r7, #6]
 80027fc:	893a      	ldrh	r2, [r7, #8]
 80027fe:	8979      	ldrh	r1, [r7, #10]
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	4603      	mov	r3, r0
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 faf8 	bl	8002e00 <I2C_RequestMemoryWrite>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d052      	beq.n	80028bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e081      	b.n	800291e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fd42 	bl	80032a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00d      	beq.n	8002846 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	2b04      	cmp	r3, #4
 8002830:	d107      	bne.n	8002842 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002840:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e06b      	b.n	800291e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b04      	cmp	r3, #4
 8002882:	d11b      	bne.n	80028bc <HAL_I2C_Mem_Write+0x180>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002888:	2b00      	cmp	r3, #0
 800288a:	d017      	beq.n	80028bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1aa      	bne.n	800281a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 fd2e 	bl	800332a <I2C_WaitOnBTFFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00d      	beq.n	80028f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	2b04      	cmp	r3, #4
 80028da:	d107      	bne.n	80028ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e016      	b.n	800291e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2220      	movs	r2, #32
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	e000      	b.n	800291e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800291c:	2302      	movs	r3, #2
  }
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	00100002 	.word	0x00100002
 800292c:	ffff0000 	.word	0xffff0000

08002930 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08c      	sub	sp, #48	; 0x30
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	4608      	mov	r0, r1
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	4603      	mov	r3, r0
 8002940:	817b      	strh	r3, [r7, #10]
 8002942:	460b      	mov	r3, r1
 8002944:	813b      	strh	r3, [r7, #8]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800294e:	f7ff fb0b 	bl	8001f68 <HAL_GetTick>
 8002952:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b20      	cmp	r3, #32
 800295e:	f040 8244 	bne.w	8002dea <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2319      	movs	r3, #25
 8002968:	2201      	movs	r2, #1
 800296a:	4982      	ldr	r1, [pc, #520]	; (8002b74 <HAL_I2C_Mem_Read+0x244>)
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f000 fbc5 	bl	80030fc <I2C_WaitOnFlagUntilTimeout>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
 800297a:	e237      	b.n	8002dec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002982:	2b01      	cmp	r3, #1
 8002984:	d101      	bne.n	800298a <HAL_I2C_Mem_Read+0x5a>
 8002986:	2302      	movs	r3, #2
 8002988:	e230      	b.n	8002dec <HAL_I2C_Mem_Read+0x4bc>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b01      	cmp	r3, #1
 800299e:	d007      	beq.n	80029b0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2222      	movs	r2, #34	; 0x22
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2240      	movs	r2, #64	; 0x40
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a62      	ldr	r2, [pc, #392]	; (8002b78 <HAL_I2C_Mem_Read+0x248>)
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029f2:	88f8      	ldrh	r0, [r7, #6]
 80029f4:	893a      	ldrh	r2, [r7, #8]
 80029f6:	8979      	ldrh	r1, [r7, #10]
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	4603      	mov	r3, r0
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fa92 	bl	8002f2c <I2C_RequestMemoryRead>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e1ec      	b.n	8002dec <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d113      	bne.n	8002a42 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e1c0      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d11e      	bne.n	8002a88 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a5a:	b672      	cpsid	i
}
 8002a5c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a84:	b662      	cpsie	i
}
 8002a86:	e035      	b.n	8002af4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d11e      	bne.n	8002ace <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002aa0:	b672      	cpsid	i
}
 8002aa2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ac8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002aca:	b662      	cpsie	i
}
 8002acc:	e012      	b.n	8002af4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002adc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	613b      	str	r3, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002af4:	e166      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	f200 811f 	bhi.w	8002d3e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d123      	bne.n	8002b50 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 fc4d 	bl	80033ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e167      	b.n	8002dec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b4e:	e139      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d152      	bne.n	8002bfe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	9300      	str	r3, [sp, #0]
 8002b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5e:	2200      	movs	r2, #0
 8002b60:	4906      	ldr	r1, [pc, #24]	; (8002b7c <HAL_I2C_Mem_Read+0x24c>)
 8002b62:	68f8      	ldr	r0, [r7, #12]
 8002b64:	f000 faca 	bl	80030fc <I2C_WaitOnFlagUntilTimeout>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d008      	beq.n	8002b80 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e13c      	b.n	8002dec <HAL_I2C_Mem_Read+0x4bc>
 8002b72:	bf00      	nop
 8002b74:	00100002 	.word	0x00100002
 8002b78:	ffff0000 	.word	0xffff0000
 8002b7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b80:	b672      	cpsid	i
}
 8002b82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bc6:	b662      	cpsie	i
}
 8002bc8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd4:	b2d2      	uxtb	r2, r2
 8002bd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bfc:	e0e2      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	2200      	movs	r2, #0
 8002c06:	497b      	ldr	r1, [pc, #492]	; (8002df4 <HAL_I2C_Mem_Read+0x4c4>)
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fa77 	bl	80030fc <I2C_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0e9      	b.n	8002dec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c28:	b672      	cpsid	i
}
 8002c2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	1c5a      	adds	r2, r3, #1
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	3b01      	subs	r3, #1
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c5e:	4b66      	ldr	r3, [pc, #408]	; (8002df8 <HAL_I2C_Mem_Read+0x4c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	4a65      	ldr	r2, [pc, #404]	; (8002dfc <HAL_I2C_Mem_Read+0x4cc>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0a1a      	lsrs	r2, r3, #8
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	00da      	lsls	r2, r3, #3
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d118      	bne.n	8002cb6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f043 0220 	orr.w	r2, r3, #32
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002ca6:	b662      	cpsie	i
}
 8002ca8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e09a      	b.n	8002dec <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d1d9      	bne.n	8002c78 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d06:	b662      	cpsie	i
}
 8002d08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d3c:	e042      	b.n	8002dc4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fb32 	bl	80033ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e04c      	b.n	8002dec <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d118      	bne.n	8002dc4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f47f ae94 	bne.w	8002af6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2220      	movs	r2, #32
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	e000      	b.n	8002dec <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002dea:	2302      	movs	r3, #2
  }
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3728      	adds	r7, #40	; 0x28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	00010004 	.word	0x00010004
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	14f8b589 	.word	0x14f8b589

08002e00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	4608      	mov	r0, r1
 8002e0a:	4611      	mov	r1, r2
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	817b      	strh	r3, [r7, #10]
 8002e12:	460b      	mov	r3, r1
 8002e14:	813b      	strh	r3, [r7, #8]
 8002e16:	4613      	mov	r3, r2
 8002e18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f960 	bl	80030fc <I2C_WaitOnFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00d      	beq.n	8002e5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e50:	d103      	bne.n	8002e5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e05f      	b.n	8002f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e5e:	897b      	ldrh	r3, [r7, #10]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	6a3a      	ldr	r2, [r7, #32]
 8002e72:	492d      	ldr	r1, [pc, #180]	; (8002f28 <I2C_RequestMemoryWrite+0x128>)
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f998 	bl	80031aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e04c      	b.n	8002f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	6a39      	ldr	r1, [r7, #32]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fa02 	bl	80032a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d107      	bne.n	8002ec2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e02b      	b.n	8002f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ecc:	893b      	ldrh	r3, [r7, #8]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	611a      	str	r2, [r3, #16]
 8002ed6:	e021      	b.n	8002f1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ed8:	893b      	ldrh	r3, [r7, #8]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee8:	6a39      	ldr	r1, [r7, #32]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f9dc 	bl	80032a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d107      	bne.n	8002f0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e005      	b.n	8002f1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f12:	893b      	ldrh	r3, [r7, #8]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	00010002 	.word	0x00010002

08002f2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	4608      	mov	r0, r1
 8002f36:	4611      	mov	r1, r2
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	817b      	strh	r3, [r7, #10]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	813b      	strh	r3, [r7, #8]
 8002f42:	4613      	mov	r3, r2
 8002f44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f72:	68f8      	ldr	r0, [r7, #12]
 8002f74:	f000 f8c2 	bl	80030fc <I2C_WaitOnFlagUntilTimeout>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00d      	beq.n	8002f9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8c:	d103      	bne.n	8002f96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e0aa      	b.n	80030f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f9a:	897b      	ldrh	r3, [r7, #10]
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	4952      	ldr	r1, [pc, #328]	; (80030f8 <I2C_RequestMemoryRead+0x1cc>)
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 f8fa 	bl	80031aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e097      	b.n	80030f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	617b      	str	r3, [r7, #20]
 8002fd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd8:	6a39      	ldr	r1, [r7, #32]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f964 	bl	80032a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00d      	beq.n	8003002 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d107      	bne.n	8002ffe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e076      	b.n	80030f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d105      	bne.n	8003014 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003008:	893b      	ldrh	r3, [r7, #8]
 800300a:	b2da      	uxtb	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	611a      	str	r2, [r3, #16]
 8003012:	e021      	b.n	8003058 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003014:	893b      	ldrh	r3, [r7, #8]
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	b29b      	uxth	r3, r3
 800301a:	b2da      	uxtb	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003024:	6a39      	ldr	r1, [r7, #32]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f93e 	bl	80032a8 <I2C_WaitOnTXEFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00d      	beq.n	800304e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	2b04      	cmp	r3, #4
 8003038:	d107      	bne.n	800304a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003048:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e050      	b.n	80030f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800304e:	893b      	ldrh	r3, [r7, #8]
 8003050:	b2da      	uxtb	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305a:	6a39      	ldr	r1, [r7, #32]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 f923 	bl	80032a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00d      	beq.n	8003084 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	2b04      	cmp	r3, #4
 800306e:	d107      	bne.n	8003080 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e035      	b.n	80030f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003092:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	2200      	movs	r2, #0
 800309c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f82b 	bl	80030fc <I2C_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00d      	beq.n	80030c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030ba:	d103      	bne.n	80030c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e013      	b.n	80030f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030c8:	897b      	ldrh	r3, [r7, #10]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	6a3a      	ldr	r2, [r7, #32]
 80030dc:	4906      	ldr	r1, [pc, #24]	; (80030f8 <I2C_RequestMemoryRead+0x1cc>)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f863 	bl	80031aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	00010002 	.word	0x00010002

080030fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	4613      	mov	r3, r2
 800310a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800310c:	e025      	b.n	800315a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d021      	beq.n	800315a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003116:	f7fe ff27 	bl	8001f68 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d302      	bcc.n	800312c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d116      	bne.n	800315a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2220      	movs	r2, #32
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f043 0220 	orr.w	r2, r3, #32
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e023      	b.n	80031a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	0c1b      	lsrs	r3, r3, #16
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b01      	cmp	r3, #1
 8003162:	d10d      	bne.n	8003180 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	43da      	mvns	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4013      	ands	r3, r2
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	e00c      	b.n	800319a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	43da      	mvns	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4013      	ands	r3, r2
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	bf0c      	ite	eq
 8003192:	2301      	moveq	r3, #1
 8003194:	2300      	movne	r3, #0
 8003196:	b2db      	uxtb	r3, r3
 8003198:	461a      	mov	r2, r3
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	429a      	cmp	r2, r3
 800319e:	d0b6      	beq.n	800310e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	60f8      	str	r0, [r7, #12]
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031b8:	e051      	b.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c8:	d123      	bne.n	8003212 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f043 0204 	orr.w	r2, r3, #4
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e046      	b.n	80032a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d021      	beq.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321a:	f7fe fea5 	bl	8001f68 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	429a      	cmp	r2, r3
 8003228:	d302      	bcc.n	8003230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d116      	bne.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f043 0220 	orr.w	r2, r3, #32
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e020      	b.n	80032a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d10c      	bne.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	43da      	mvns	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4013      	ands	r3, r2
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	e00b      	b.n	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	43da      	mvns	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4013      	ands	r3, r2
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d18d      	bne.n	80031ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032b4:	e02d      	b.n	8003312 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 f8ce 	bl	8003458 <I2C_IsAcknowledgeFailed>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e02d      	b.n	8003322 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d021      	beq.n	8003312 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ce:	f7fe fe4b 	bl	8001f68 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d302      	bcc.n	80032e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d116      	bne.n	8003312 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f043 0220 	orr.w	r2, r3, #32
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e007      	b.n	8003322 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331c:	2b80      	cmp	r3, #128	; 0x80
 800331e:	d1ca      	bne.n	80032b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003336:	e02d      	b.n	8003394 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f000 f88d 	bl	8003458 <I2C_IsAcknowledgeFailed>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e02d      	b.n	80033a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d021      	beq.n	8003394 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003350:	f7fe fe0a 	bl	8001f68 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	429a      	cmp	r2, r3
 800335e:	d302      	bcc.n	8003366 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d116      	bne.n	8003394 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003380:	f043 0220 	orr.w	r2, r3, #32
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e007      	b.n	80033a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0304 	and.w	r3, r3, #4
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d1ca      	bne.n	8003338 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033b8:	e042      	b.n	8003440 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	f003 0310 	and.w	r3, r3, #16
 80033c4:	2b10      	cmp	r3, #16
 80033c6:	d119      	bne.n	80033fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0210 	mvn.w	r2, #16
 80033d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e029      	b.n	8003450 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fc:	f7fe fdb4 	bl	8001f68 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	d302      	bcc.n	8003412 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d116      	bne.n	8003440 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f043 0220 	orr.w	r2, r3, #32
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e007      	b.n	8003450 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d1b5      	bne.n	80033ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346e:	d11b      	bne.n	80034a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003478:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f043 0204 	orr.w	r2, r3, #4
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e26c      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0301 	and.w	r3, r3, #1
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8087 	beq.w	80035e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d4:	4b92      	ldr	r3, [pc, #584]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 030c 	and.w	r3, r3, #12
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d00c      	beq.n	80034fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034e0:	4b8f      	ldr	r3, [pc, #572]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d112      	bne.n	8003512 <HAL_RCC_OscConfig+0x5e>
 80034ec:	4b8c      	ldr	r3, [pc, #560]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f8:	d10b      	bne.n	8003512 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fa:	4b89      	ldr	r3, [pc, #548]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d06c      	beq.n	80035e0 <HAL_RCC_OscConfig+0x12c>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d168      	bne.n	80035e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e246      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351a:	d106      	bne.n	800352a <HAL_RCC_OscConfig+0x76>
 800351c:	4b80      	ldr	r3, [pc, #512]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a7f      	ldr	r2, [pc, #508]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	e02e      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10c      	bne.n	800354c <HAL_RCC_OscConfig+0x98>
 8003532:	4b7b      	ldr	r3, [pc, #492]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a7a      	ldr	r2, [pc, #488]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800353c:	6013      	str	r3, [r2, #0]
 800353e:	4b78      	ldr	r3, [pc, #480]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a77      	ldr	r2, [pc, #476]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	e01d      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0xbc>
 8003556:	4b72      	ldr	r3, [pc, #456]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a71      	ldr	r2, [pc, #452]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800355c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b6f      	ldr	r3, [pc, #444]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a6e      	ldr	r2, [pc, #440]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e00b      	b.n	8003588 <HAL_RCC_OscConfig+0xd4>
 8003570:	4b6b      	ldr	r3, [pc, #428]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a6a      	ldr	r2, [pc, #424]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	4b68      	ldr	r3, [pc, #416]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a67      	ldr	r2, [pc, #412]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003586:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d013      	beq.n	80035b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003590:	f7fe fcea 	bl	8001f68 <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003598:	f7fe fce6 	bl	8001f68 <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e1fa      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b5d      	ldr	r3, [pc, #372]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0xe4>
 80035b6:	e014      	b.n	80035e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b8:	f7fe fcd6 	bl	8001f68 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c0:	f7fe fcd2 	bl	8001f68 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b64      	cmp	r3, #100	; 0x64
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e1e6      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	4b53      	ldr	r3, [pc, #332]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x10c>
 80035de:	e000      	b.n	80035e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d063      	beq.n	80036b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ee:	4b4c      	ldr	r3, [pc, #304]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035fa:	4b49      	ldr	r3, [pc, #292]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b08      	cmp	r3, #8
 8003604:	d11c      	bne.n	8003640 <HAL_RCC_OscConfig+0x18c>
 8003606:	4b46      	ldr	r3, [pc, #280]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d116      	bne.n	8003640 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003612:	4b43      	ldr	r3, [pc, #268]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d005      	beq.n	800362a <HAL_RCC_OscConfig+0x176>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d001      	beq.n	800362a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e1ba      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362a:	4b3d      	ldr	r3, [pc, #244]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4939      	ldr	r1, [pc, #228]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800363a:	4313      	orrs	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800363e:	e03a      	b.n	80036b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d020      	beq.n	800368a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003648:	4b36      	ldr	r3, [pc, #216]	; (8003724 <HAL_RCC_OscConfig+0x270>)
 800364a:	2201      	movs	r2, #1
 800364c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364e:	f7fe fc8b 	bl	8001f68 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003656:	f7fe fc87 	bl	8001f68 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e19b      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	4927      	ldr	r1, [pc, #156]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 8003684:	4313      	orrs	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
 8003688:	e015      	b.n	80036b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <HAL_RCC_OscConfig+0x270>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003690:	f7fe fc6a 	bl	8001f68 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003698:	f7fe fc66 	bl	8001f68 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e17a      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	4b1d      	ldr	r3, [pc, #116]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d03a      	beq.n	8003738 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d019      	beq.n	80036fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <HAL_RCC_OscConfig+0x274>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d0:	f7fe fc4a 	bl	8001f68 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036d8:	f7fe fc46 	bl	8001f68 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e15a      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036f6:	2001      	movs	r0, #1
 80036f8:	f000 fad8 	bl	8003cac <RCC_Delay>
 80036fc:	e01c      	b.n	8003738 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_RCC_OscConfig+0x274>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003704:	f7fe fc30 	bl	8001f68 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370a:	e00f      	b.n	800372c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370c:	f7fe fc2c 	bl	8001f68 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d908      	bls.n	800372c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e140      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	42420000 	.word	0x42420000
 8003728:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	4b9e      	ldr	r3, [pc, #632]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1e9      	bne.n	800370c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a6 	beq.w	8003892 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374a:	4b97      	ldr	r3, [pc, #604]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10d      	bne.n	8003772 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003756:	4b94      	ldr	r3, [pc, #592]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	4a93      	ldr	r2, [pc, #588]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800375c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003760:	61d3      	str	r3, [r2, #28]
 8003762:	4b91      	ldr	r3, [pc, #580]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376e:	2301      	movs	r3, #1
 8003770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003772:	4b8e      	ldr	r3, [pc, #568]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d118      	bne.n	80037b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377e:	4b8b      	ldr	r3, [pc, #556]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a8a      	ldr	r2, [pc, #552]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 8003784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378a:	f7fe fbed 	bl	8001f68 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003792:	f7fe fbe9 	bl	8001f68 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b64      	cmp	r3, #100	; 0x64
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e0fd      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	4b81      	ldr	r3, [pc, #516]	; (80039ac <HAL_RCC_OscConfig+0x4f8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d106      	bne.n	80037c6 <HAL_RCC_OscConfig+0x312>
 80037b8:	4b7b      	ldr	r3, [pc, #492]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	4a7a      	ldr	r2, [pc, #488]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	6213      	str	r3, [r2, #32]
 80037c4:	e02d      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCC_OscConfig+0x334>
 80037ce:	4b76      	ldr	r3, [pc, #472]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	4a75      	ldr	r2, [pc, #468]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	6213      	str	r3, [r2, #32]
 80037da:	4b73      	ldr	r3, [pc, #460]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	4a72      	ldr	r2, [pc, #456]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80037e0:	f023 0304 	bic.w	r3, r3, #4
 80037e4:	6213      	str	r3, [r2, #32]
 80037e6:	e01c      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b05      	cmp	r3, #5
 80037ee:	d10c      	bne.n	800380a <HAL_RCC_OscConfig+0x356>
 80037f0:	4b6d      	ldr	r3, [pc, #436]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	4a6c      	ldr	r2, [pc, #432]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80037f6:	f043 0304 	orr.w	r3, r3, #4
 80037fa:	6213      	str	r3, [r2, #32]
 80037fc:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	4a69      	ldr	r2, [pc, #420]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	6213      	str	r3, [r2, #32]
 8003808:	e00b      	b.n	8003822 <HAL_RCC_OscConfig+0x36e>
 800380a:	4b67      	ldr	r3, [pc, #412]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	4a66      	ldr	r2, [pc, #408]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	6213      	str	r3, [r2, #32]
 8003816:	4b64      	ldr	r3, [pc, #400]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4a63      	ldr	r2, [pc, #396]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800381c:	f023 0304 	bic.w	r3, r3, #4
 8003820:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d015      	beq.n	8003856 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382a:	f7fe fb9d 	bl	8001f68 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f7fe fb99 	bl	8001f68 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e0ab      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003848:	4b57      	ldr	r3, [pc, #348]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ee      	beq.n	8003832 <HAL_RCC_OscConfig+0x37e>
 8003854:	e014      	b.n	8003880 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003856:	f7fe fb87 	bl	8001f68 <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385c:	e00a      	b.n	8003874 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385e:	f7fe fb83 	bl	8001f68 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	f241 3288 	movw	r2, #5000	; 0x1388
 800386c:	4293      	cmp	r3, r2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e095      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003874:	4b4c      	ldr	r3, [pc, #304]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ee      	bne.n	800385e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003880:	7dfb      	ldrb	r3, [r7, #23]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d105      	bne.n	8003892 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003886:	4b48      	ldr	r3, [pc, #288]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	4a47      	ldr	r2, [pc, #284]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800388c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003890:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 8081 	beq.w	800399e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800389c:	4b42      	ldr	r3, [pc, #264]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 030c 	and.w	r3, r3, #12
 80038a4:	2b08      	cmp	r3, #8
 80038a6:	d061      	beq.n	800396c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d146      	bne.n	800393e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b0:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <HAL_RCC_OscConfig+0x4fc>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b6:	f7fe fb57 	bl	8001f68 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038be:	f7fe fb53 	bl	8001f68 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e067      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d0:	4b35      	ldr	r3, [pc, #212]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f0      	bne.n	80038be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e4:	d108      	bne.n	80038f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038e6:	4b30      	ldr	r3, [pc, #192]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	492d      	ldr	r1, [pc, #180]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f8:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a19      	ldr	r1, [r3, #32]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	430b      	orrs	r3, r1
 800390a:	4927      	ldr	r1, [pc, #156]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003910:	4b27      	ldr	r3, [pc, #156]	; (80039b0 <HAL_RCC_OscConfig+0x4fc>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003916:	f7fe fb27 	bl	8001f68 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391e:	f7fe fb23 	bl	8001f68 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e037      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003930:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCC_OscConfig+0x46a>
 800393c:	e02f      	b.n	800399e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800393e:	4b1c      	ldr	r3, [pc, #112]	; (80039b0 <HAL_RCC_OscConfig+0x4fc>)
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fe fb10 	bl	8001f68 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800394c:	f7fe fb0c 	bl	8001f68 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b02      	cmp	r3, #2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e020      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1f0      	bne.n	800394c <HAL_RCC_OscConfig+0x498>
 800396a:	e018      	b.n	800399e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e013      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <HAL_RCC_OscConfig+0x4f4>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	429a      	cmp	r2, r3
 800398a:	d106      	bne.n	800399a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d001      	beq.n	800399e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	40007000 	.word	0x40007000
 80039b0:	42420060 	.word	0x42420060

080039b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0d0      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c8:	4b6a      	ldr	r3, [pc, #424]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0307 	and.w	r3, r3, #7
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d910      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b67      	ldr	r3, [pc, #412]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 0207 	bic.w	r2, r3, #7
 80039de:	4965      	ldr	r1, [pc, #404]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b63      	ldr	r3, [pc, #396]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0b8      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a10:	4b59      	ldr	r3, [pc, #356]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4a58      	ldr	r2, [pc, #352]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a28:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4a52      	ldr	r2, [pc, #328]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a34:	4b50      	ldr	r3, [pc, #320]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	494d      	ldr	r1, [pc, #308]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d040      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b47      	ldr	r3, [pc, #284]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d115      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e07f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a72:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e073      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a82:	4b3d      	ldr	r3, [pc, #244]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e06b      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a92:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f023 0203 	bic.w	r2, r3, #3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4936      	ldr	r1, [pc, #216]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa4:	f7fe fa60 	bl	8001f68 <HAL_GetTick>
 8003aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aac:	f7fe fa5c 	bl	8001f68 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e053      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 020c 	and.w	r2, r3, #12
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d1eb      	bne.n	8003aac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d210      	bcs.n	8003b04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b24      	ldr	r3, [pc, #144]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 0207 	bic.w	r2, r3, #7
 8003aea:	4922      	ldr	r1, [pc, #136]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <HAL_RCC_ClockConfig+0x1c0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e032      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4916      	ldr	r1, [pc, #88]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	490e      	ldr	r1, [pc, #56]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b42:	f000 f821 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003b46:	4602      	mov	r2, r0
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	490a      	ldr	r1, [pc, #40]	; (8003b7c <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	5ccb      	ldrb	r3, [r1, r3]
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	4a09      	ldr	r2, [pc, #36]	; (8003b80 <HAL_RCC_ClockConfig+0x1cc>)
 8003b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b5e:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HAL_RCC_ClockConfig+0x1d0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe f9be 	bl	8001ee4 <HAL_InitTick>

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40022000 	.word	0x40022000
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	08007108 	.word	0x08007108
 8003b80:	20000000 	.word	0x20000000
 8003b84:	20000098 	.word	0x20000098

08003b88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	b490      	push	{r4, r7}
 8003b8a:	b08a      	sub	sp, #40	; 0x28
 8003b8c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b8e:	4b2a      	ldr	r3, [pc, #168]	; (8003c38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b90:	1d3c      	adds	r4, r7, #4
 8003b92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b98:	f240 2301 	movw	r3, #513	; 0x201
 8003b9c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8003baa:	2300      	movs	r3, #0
 8003bac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bb2:	4b22      	ldr	r3, [pc, #136]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d002      	beq.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d003      	beq.n	8003bce <HAL_RCC_GetSysClockFreq+0x46>
 8003bc6:	e02d      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bca:	623b      	str	r3, [r7, #32]
      break;
 8003bcc:	e02d      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	0c9b      	lsrs	r3, r3, #18
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bda:	4413      	add	r3, r2
 8003bdc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003be0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d013      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	0c5b      	lsrs	r3, r3, #17
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c00:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	4a0e      	ldr	r2, [pc, #56]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c06:	fb02 f203 	mul.w	r2, r2, r3
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	627b      	str	r3, [r7, #36]	; 0x24
 8003c12:	e004      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	4a0b      	ldr	r2, [pc, #44]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c18:	fb02 f303 	mul.w	r3, r2, r3
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	623b      	str	r3, [r7, #32]
      break;
 8003c22:	e002      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c24:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c26:	623b      	str	r3, [r7, #32]
      break;
 8003c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3728      	adds	r7, #40	; 0x28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc90      	pop	{r4, r7}
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	080070f8 	.word	0x080070f8
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	007a1200 	.word	0x007a1200
 8003c44:	003d0900 	.word	0x003d0900

08003c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c4c:	4b02      	ldr	r3, [pc, #8]	; (8003c58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bc80      	pop	{r7}
 8003c56:	4770      	bx	lr
 8003c58:	20000000 	.word	0x20000000

08003c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c60:	f7ff fff2 	bl	8003c48 <HAL_RCC_GetHCLKFreq>
 8003c64:	4602      	mov	r2, r0
 8003c66:	4b05      	ldr	r3, [pc, #20]	; (8003c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	4903      	ldr	r1, [pc, #12]	; (8003c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c72:	5ccb      	ldrb	r3, [r1, r3]
 8003c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	08007118 	.word	0x08007118

08003c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c88:	f7ff ffde 	bl	8003c48 <HAL_RCC_GetHCLKFreq>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	0adb      	lsrs	r3, r3, #11
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	4903      	ldr	r1, [pc, #12]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9a:	5ccb      	ldrb	r3, [r1, r3]
 8003c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	08007118 	.word	0x08007118

08003cac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <RCC_Delay+0x34>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a0a      	ldr	r2, [pc, #40]	; (8003ce4 <RCC_Delay+0x38>)
 8003cba:	fba2 2303 	umull	r2, r3, r2, r3
 8003cbe:	0a5b      	lsrs	r3, r3, #9
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	fb02 f303 	mul.w	r3, r2, r3
 8003cc6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cc8:	bf00      	nop
  }
  while (Delay --);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	1e5a      	subs	r2, r3, #1
 8003cce:	60fa      	str	r2, [r7, #12]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f9      	bne.n	8003cc8 <RCC_Delay+0x1c>
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	20000000 	.word	0x20000000
 8003ce4:	10624dd3 	.word	0x10624dd3

08003ce8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e03f      	b.n	8003d7a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fd fbfa 	bl	8001508 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2224      	movs	r2, #36	; 0x24
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f905 	bl	8003f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	695a      	ldr	r2, [r3, #20]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b08a      	sub	sp, #40	; 0x28
 8003d86:	af02      	add	r7, sp, #8
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d17c      	bne.n	8003e9c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_UART_Transmit+0x2c>
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e075      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_UART_Transmit+0x3e>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e06e      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2221      	movs	r2, #33	; 0x21
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dd6:	f7fe f8c7 	bl	8001f68 <HAL_GetTick>
 8003dda:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	88fa      	ldrh	r2, [r7, #6]
 8003de0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	88fa      	ldrh	r2, [r7, #6]
 8003de6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df0:	d108      	bne.n	8003e04 <HAL_UART_Transmit+0x82>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	e003      	b.n	8003e0c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e14:	e02a      	b.n	8003e6c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	2180      	movs	r1, #128	; 0x80
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f840 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e036      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10b      	bne.n	8003e4e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	3302      	adds	r3, #2
 8003e4a:	61bb      	str	r3, [r7, #24]
 8003e4c:	e007      	b.n	8003e5e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1cf      	bne.n	8003e16 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	2140      	movs	r1, #64	; 0x40
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 f810 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e006      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b084      	sub	sp, #16
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb6:	e02c      	b.n	8003f12 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d028      	beq.n	8003f12 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ec6:	f7fe f84f 	bl	8001f68 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d21d      	bcs.n	8003f12 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ee4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695a      	ldr	r2, [r3, #20]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e00f      	b.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	bf0c      	ite	eq
 8003f22:	2301      	moveq	r3, #1
 8003f24:	2300      	movne	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	79fb      	ldrb	r3, [r7, #7]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d0c3      	beq.n	8003eb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f76:	f023 030c 	bic.w	r3, r3, #12
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6812      	ldr	r2, [r2, #0]
 8003f7e:	68b9      	ldr	r1, [r7, #8]
 8003f80:	430b      	orrs	r3, r1
 8003f82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	699a      	ldr	r2, [r3, #24]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a2c      	ldr	r2, [pc, #176]	; (8004050 <UART_SetConfig+0x114>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d103      	bne.n	8003fac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fa4:	f7ff fe6e 	bl	8003c84 <HAL_RCC_GetPCLK2Freq>
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	e002      	b.n	8003fb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fac:	f7ff fe56 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 8003fb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	009a      	lsls	r2, r3, #2
 8003fbc:	441a      	add	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc8:	4a22      	ldr	r2, [pc, #136]	; (8004054 <UART_SetConfig+0x118>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	0119      	lsls	r1, r3, #4
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	009a      	lsls	r2, r3, #2
 8003fdc:	441a      	add	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <UART_SetConfig+0x118>)
 8003fea:	fba3 0302 	umull	r0, r3, r3, r2
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	2064      	movs	r0, #100	; 0x64
 8003ff2:	fb00 f303 	mul.w	r3, r0, r3
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	3332      	adds	r3, #50	; 0x32
 8003ffc:	4a15      	ldr	r2, [pc, #84]	; (8004054 <UART_SetConfig+0x118>)
 8003ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004008:	4419      	add	r1, r3
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009a      	lsls	r2, r3, #2
 8004014:	441a      	add	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <UART_SetConfig+0x118>)
 8004022:	fba3 0302 	umull	r0, r3, r3, r2
 8004026:	095b      	lsrs	r3, r3, #5
 8004028:	2064      	movs	r0, #100	; 0x64
 800402a:	fb00 f303 	mul.w	r3, r0, r3
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	3332      	adds	r3, #50	; 0x32
 8004034:	4a07      	ldr	r2, [pc, #28]	; (8004054 <UART_SetConfig+0x118>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	095b      	lsrs	r3, r3, #5
 800403c:	f003 020f 	and.w	r2, r3, #15
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	440a      	add	r2, r1
 8004046:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004048:	bf00      	nop
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40013800 	.word	0x40013800
 8004054:	51eb851f 	.word	0x51eb851f

08004058 <__errno>:
 8004058:	4b01      	ldr	r3, [pc, #4]	; (8004060 <__errno+0x8>)
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	200000a0 	.word	0x200000a0

08004064 <__libc_init_array>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	2600      	movs	r6, #0
 8004068:	4d0c      	ldr	r5, [pc, #48]	; (800409c <__libc_init_array+0x38>)
 800406a:	4c0d      	ldr	r4, [pc, #52]	; (80040a0 <__libc_init_array+0x3c>)
 800406c:	1b64      	subs	r4, r4, r5
 800406e:	10a4      	asrs	r4, r4, #2
 8004070:	42a6      	cmp	r6, r4
 8004072:	d109      	bne.n	8004088 <__libc_init_array+0x24>
 8004074:	f003 f832 	bl	80070dc <_init>
 8004078:	2600      	movs	r6, #0
 800407a:	4d0a      	ldr	r5, [pc, #40]	; (80040a4 <__libc_init_array+0x40>)
 800407c:	4c0a      	ldr	r4, [pc, #40]	; (80040a8 <__libc_init_array+0x44>)
 800407e:	1b64      	subs	r4, r4, r5
 8004080:	10a4      	asrs	r4, r4, #2
 8004082:	42a6      	cmp	r6, r4
 8004084:	d105      	bne.n	8004092 <__libc_init_array+0x2e>
 8004086:	bd70      	pop	{r4, r5, r6, pc}
 8004088:	f855 3b04 	ldr.w	r3, [r5], #4
 800408c:	4798      	blx	r3
 800408e:	3601      	adds	r6, #1
 8004090:	e7ee      	b.n	8004070 <__libc_init_array+0xc>
 8004092:	f855 3b04 	ldr.w	r3, [r5], #4
 8004096:	4798      	blx	r3
 8004098:	3601      	adds	r6, #1
 800409a:	e7f2      	b.n	8004082 <__libc_init_array+0x1e>
 800409c:	08007578 	.word	0x08007578
 80040a0:	08007578 	.word	0x08007578
 80040a4:	08007578 	.word	0x08007578
 80040a8:	0800757c 	.word	0x0800757c

080040ac <memset>:
 80040ac:	4603      	mov	r3, r0
 80040ae:	4402      	add	r2, r0
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d100      	bne.n	80040b6 <memset+0xa>
 80040b4:	4770      	bx	lr
 80040b6:	f803 1b01 	strb.w	r1, [r3], #1
 80040ba:	e7f9      	b.n	80040b0 <memset+0x4>

080040bc <__cvt>:
 80040bc:	2b00      	cmp	r3, #0
 80040be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c2:	461f      	mov	r7, r3
 80040c4:	bfbb      	ittet	lt
 80040c6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80040ca:	461f      	movlt	r7, r3
 80040cc:	2300      	movge	r3, #0
 80040ce:	232d      	movlt	r3, #45	; 0x2d
 80040d0:	b088      	sub	sp, #32
 80040d2:	4614      	mov	r4, r2
 80040d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80040d6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80040d8:	7013      	strb	r3, [r2, #0]
 80040da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80040dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80040e0:	f023 0820 	bic.w	r8, r3, #32
 80040e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040e8:	d005      	beq.n	80040f6 <__cvt+0x3a>
 80040ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040ee:	d100      	bne.n	80040f2 <__cvt+0x36>
 80040f0:	3501      	adds	r5, #1
 80040f2:	2302      	movs	r3, #2
 80040f4:	e000      	b.n	80040f8 <__cvt+0x3c>
 80040f6:	2303      	movs	r3, #3
 80040f8:	aa07      	add	r2, sp, #28
 80040fa:	9204      	str	r2, [sp, #16]
 80040fc:	aa06      	add	r2, sp, #24
 80040fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004102:	e9cd 3500 	strd	r3, r5, [sp]
 8004106:	4622      	mov	r2, r4
 8004108:	463b      	mov	r3, r7
 800410a:	f000 fcc5 	bl	8004a98 <_dtoa_r>
 800410e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004112:	4606      	mov	r6, r0
 8004114:	d102      	bne.n	800411c <__cvt+0x60>
 8004116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004118:	07db      	lsls	r3, r3, #31
 800411a:	d522      	bpl.n	8004162 <__cvt+0xa6>
 800411c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004120:	eb06 0905 	add.w	r9, r6, r5
 8004124:	d110      	bne.n	8004148 <__cvt+0x8c>
 8004126:	7833      	ldrb	r3, [r6, #0]
 8004128:	2b30      	cmp	r3, #48	; 0x30
 800412a:	d10a      	bne.n	8004142 <__cvt+0x86>
 800412c:	2200      	movs	r2, #0
 800412e:	2300      	movs	r3, #0
 8004130:	4620      	mov	r0, r4
 8004132:	4639      	mov	r1, r7
 8004134:	f7fc fca4 	bl	8000a80 <__aeabi_dcmpeq>
 8004138:	b918      	cbnz	r0, 8004142 <__cvt+0x86>
 800413a:	f1c5 0501 	rsb	r5, r5, #1
 800413e:	f8ca 5000 	str.w	r5, [sl]
 8004142:	f8da 3000 	ldr.w	r3, [sl]
 8004146:	4499      	add	r9, r3
 8004148:	2200      	movs	r2, #0
 800414a:	2300      	movs	r3, #0
 800414c:	4620      	mov	r0, r4
 800414e:	4639      	mov	r1, r7
 8004150:	f7fc fc96 	bl	8000a80 <__aeabi_dcmpeq>
 8004154:	b108      	cbz	r0, 800415a <__cvt+0x9e>
 8004156:	f8cd 901c 	str.w	r9, [sp, #28]
 800415a:	2230      	movs	r2, #48	; 0x30
 800415c:	9b07      	ldr	r3, [sp, #28]
 800415e:	454b      	cmp	r3, r9
 8004160:	d307      	bcc.n	8004172 <__cvt+0xb6>
 8004162:	4630      	mov	r0, r6
 8004164:	9b07      	ldr	r3, [sp, #28]
 8004166:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004168:	1b9b      	subs	r3, r3, r6
 800416a:	6013      	str	r3, [r2, #0]
 800416c:	b008      	add	sp, #32
 800416e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004172:	1c59      	adds	r1, r3, #1
 8004174:	9107      	str	r1, [sp, #28]
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e7f0      	b.n	800415c <__cvt+0xa0>

0800417a <__exponent>:
 800417a:	4603      	mov	r3, r0
 800417c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800417e:	2900      	cmp	r1, #0
 8004180:	f803 2b02 	strb.w	r2, [r3], #2
 8004184:	bfb6      	itet	lt
 8004186:	222d      	movlt	r2, #45	; 0x2d
 8004188:	222b      	movge	r2, #43	; 0x2b
 800418a:	4249      	neglt	r1, r1
 800418c:	2909      	cmp	r1, #9
 800418e:	7042      	strb	r2, [r0, #1]
 8004190:	dd2b      	ble.n	80041ea <__exponent+0x70>
 8004192:	f10d 0407 	add.w	r4, sp, #7
 8004196:	46a4      	mov	ip, r4
 8004198:	270a      	movs	r7, #10
 800419a:	fb91 f6f7 	sdiv	r6, r1, r7
 800419e:	460a      	mov	r2, r1
 80041a0:	46a6      	mov	lr, r4
 80041a2:	fb07 1516 	mls	r5, r7, r6, r1
 80041a6:	2a63      	cmp	r2, #99	; 0x63
 80041a8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80041ac:	4631      	mov	r1, r6
 80041ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80041b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80041b6:	dcf0      	bgt.n	800419a <__exponent+0x20>
 80041b8:	3130      	adds	r1, #48	; 0x30
 80041ba:	f1ae 0502 	sub.w	r5, lr, #2
 80041be:	f804 1c01 	strb.w	r1, [r4, #-1]
 80041c2:	4629      	mov	r1, r5
 80041c4:	1c44      	adds	r4, r0, #1
 80041c6:	4561      	cmp	r1, ip
 80041c8:	d30a      	bcc.n	80041e0 <__exponent+0x66>
 80041ca:	f10d 0209 	add.w	r2, sp, #9
 80041ce:	eba2 020e 	sub.w	r2, r2, lr
 80041d2:	4565      	cmp	r5, ip
 80041d4:	bf88      	it	hi
 80041d6:	2200      	movhi	r2, #0
 80041d8:	4413      	add	r3, r2
 80041da:	1a18      	subs	r0, r3, r0
 80041dc:	b003      	add	sp, #12
 80041de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041e4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041e8:	e7ed      	b.n	80041c6 <__exponent+0x4c>
 80041ea:	2330      	movs	r3, #48	; 0x30
 80041ec:	3130      	adds	r1, #48	; 0x30
 80041ee:	7083      	strb	r3, [r0, #2]
 80041f0:	70c1      	strb	r1, [r0, #3]
 80041f2:	1d03      	adds	r3, r0, #4
 80041f4:	e7f1      	b.n	80041da <__exponent+0x60>
	...

080041f8 <_printf_float>:
 80041f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041fc:	b091      	sub	sp, #68	; 0x44
 80041fe:	460c      	mov	r4, r1
 8004200:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004204:	4616      	mov	r6, r2
 8004206:	461f      	mov	r7, r3
 8004208:	4605      	mov	r5, r0
 800420a:	f001 fa33 	bl	8005674 <_localeconv_r>
 800420e:	6803      	ldr	r3, [r0, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	9309      	str	r3, [sp, #36]	; 0x24
 8004214:	f7fc f808 	bl	8000228 <strlen>
 8004218:	2300      	movs	r3, #0
 800421a:	930e      	str	r3, [sp, #56]	; 0x38
 800421c:	f8d8 3000 	ldr.w	r3, [r8]
 8004220:	900a      	str	r0, [sp, #40]	; 0x28
 8004222:	3307      	adds	r3, #7
 8004224:	f023 0307 	bic.w	r3, r3, #7
 8004228:	f103 0208 	add.w	r2, r3, #8
 800422c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004230:	f8d4 b000 	ldr.w	fp, [r4]
 8004234:	f8c8 2000 	str.w	r2, [r8]
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004240:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004244:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004248:	930b      	str	r3, [sp, #44]	; 0x2c
 800424a:	f04f 32ff 	mov.w	r2, #4294967295
 800424e:	4640      	mov	r0, r8
 8004250:	4b9c      	ldr	r3, [pc, #624]	; (80044c4 <_printf_float+0x2cc>)
 8004252:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004254:	f7fc fc46 	bl	8000ae4 <__aeabi_dcmpun>
 8004258:	bb70      	cbnz	r0, 80042b8 <_printf_float+0xc0>
 800425a:	f04f 32ff 	mov.w	r2, #4294967295
 800425e:	4640      	mov	r0, r8
 8004260:	4b98      	ldr	r3, [pc, #608]	; (80044c4 <_printf_float+0x2cc>)
 8004262:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004264:	f7fc fc20 	bl	8000aa8 <__aeabi_dcmple>
 8004268:	bb30      	cbnz	r0, 80042b8 <_printf_float+0xc0>
 800426a:	2200      	movs	r2, #0
 800426c:	2300      	movs	r3, #0
 800426e:	4640      	mov	r0, r8
 8004270:	4651      	mov	r1, sl
 8004272:	f7fc fc0f 	bl	8000a94 <__aeabi_dcmplt>
 8004276:	b110      	cbz	r0, 800427e <_printf_float+0x86>
 8004278:	232d      	movs	r3, #45	; 0x2d
 800427a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800427e:	4b92      	ldr	r3, [pc, #584]	; (80044c8 <_printf_float+0x2d0>)
 8004280:	4892      	ldr	r0, [pc, #584]	; (80044cc <_printf_float+0x2d4>)
 8004282:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004286:	bf94      	ite	ls
 8004288:	4698      	movls	r8, r3
 800428a:	4680      	movhi	r8, r0
 800428c:	2303      	movs	r3, #3
 800428e:	f04f 0a00 	mov.w	sl, #0
 8004292:	6123      	str	r3, [r4, #16]
 8004294:	f02b 0304 	bic.w	r3, fp, #4
 8004298:	6023      	str	r3, [r4, #0]
 800429a:	4633      	mov	r3, r6
 800429c:	4621      	mov	r1, r4
 800429e:	4628      	mov	r0, r5
 80042a0:	9700      	str	r7, [sp, #0]
 80042a2:	aa0f      	add	r2, sp, #60	; 0x3c
 80042a4:	f000 f9d4 	bl	8004650 <_printf_common>
 80042a8:	3001      	adds	r0, #1
 80042aa:	f040 8090 	bne.w	80043ce <_printf_float+0x1d6>
 80042ae:	f04f 30ff 	mov.w	r0, #4294967295
 80042b2:	b011      	add	sp, #68	; 0x44
 80042b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b8:	4642      	mov	r2, r8
 80042ba:	4653      	mov	r3, sl
 80042bc:	4640      	mov	r0, r8
 80042be:	4651      	mov	r1, sl
 80042c0:	f7fc fc10 	bl	8000ae4 <__aeabi_dcmpun>
 80042c4:	b148      	cbz	r0, 80042da <_printf_float+0xe2>
 80042c6:	f1ba 0f00 	cmp.w	sl, #0
 80042ca:	bfb8      	it	lt
 80042cc:	232d      	movlt	r3, #45	; 0x2d
 80042ce:	4880      	ldr	r0, [pc, #512]	; (80044d0 <_printf_float+0x2d8>)
 80042d0:	bfb8      	it	lt
 80042d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042d6:	4b7f      	ldr	r3, [pc, #508]	; (80044d4 <_printf_float+0x2dc>)
 80042d8:	e7d3      	b.n	8004282 <_printf_float+0x8a>
 80042da:	6863      	ldr	r3, [r4, #4]
 80042dc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	d142      	bne.n	800436a <_printf_float+0x172>
 80042e4:	2306      	movs	r3, #6
 80042e6:	6063      	str	r3, [r4, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	9206      	str	r2, [sp, #24]
 80042ec:	aa0e      	add	r2, sp, #56	; 0x38
 80042ee:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80042f2:	aa0d      	add	r2, sp, #52	; 0x34
 80042f4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80042f8:	9203      	str	r2, [sp, #12]
 80042fa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80042fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004302:	6023      	str	r3, [r4, #0]
 8004304:	6863      	ldr	r3, [r4, #4]
 8004306:	4642      	mov	r2, r8
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	4628      	mov	r0, r5
 800430c:	4653      	mov	r3, sl
 800430e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004310:	f7ff fed4 	bl	80040bc <__cvt>
 8004314:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004316:	4680      	mov	r8, r0
 8004318:	2947      	cmp	r1, #71	; 0x47
 800431a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800431c:	d108      	bne.n	8004330 <_printf_float+0x138>
 800431e:	1cc8      	adds	r0, r1, #3
 8004320:	db02      	blt.n	8004328 <_printf_float+0x130>
 8004322:	6863      	ldr	r3, [r4, #4]
 8004324:	4299      	cmp	r1, r3
 8004326:	dd40      	ble.n	80043aa <_printf_float+0x1b2>
 8004328:	f1a9 0902 	sub.w	r9, r9, #2
 800432c:	fa5f f989 	uxtb.w	r9, r9
 8004330:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004334:	d81f      	bhi.n	8004376 <_printf_float+0x17e>
 8004336:	464a      	mov	r2, r9
 8004338:	3901      	subs	r1, #1
 800433a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800433e:	910d      	str	r1, [sp, #52]	; 0x34
 8004340:	f7ff ff1b 	bl	800417a <__exponent>
 8004344:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004346:	4682      	mov	sl, r0
 8004348:	1813      	adds	r3, r2, r0
 800434a:	2a01      	cmp	r2, #1
 800434c:	6123      	str	r3, [r4, #16]
 800434e:	dc02      	bgt.n	8004356 <_printf_float+0x15e>
 8004350:	6822      	ldr	r2, [r4, #0]
 8004352:	07d2      	lsls	r2, r2, #31
 8004354:	d501      	bpl.n	800435a <_printf_float+0x162>
 8004356:	3301      	adds	r3, #1
 8004358:	6123      	str	r3, [r4, #16]
 800435a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800435e:	2b00      	cmp	r3, #0
 8004360:	d09b      	beq.n	800429a <_printf_float+0xa2>
 8004362:	232d      	movs	r3, #45	; 0x2d
 8004364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004368:	e797      	b.n	800429a <_printf_float+0xa2>
 800436a:	2947      	cmp	r1, #71	; 0x47
 800436c:	d1bc      	bne.n	80042e8 <_printf_float+0xf0>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1ba      	bne.n	80042e8 <_printf_float+0xf0>
 8004372:	2301      	movs	r3, #1
 8004374:	e7b7      	b.n	80042e6 <_printf_float+0xee>
 8004376:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800437a:	d118      	bne.n	80043ae <_printf_float+0x1b6>
 800437c:	2900      	cmp	r1, #0
 800437e:	6863      	ldr	r3, [r4, #4]
 8004380:	dd0b      	ble.n	800439a <_printf_float+0x1a2>
 8004382:	6121      	str	r1, [r4, #16]
 8004384:	b913      	cbnz	r3, 800438c <_printf_float+0x194>
 8004386:	6822      	ldr	r2, [r4, #0]
 8004388:	07d0      	lsls	r0, r2, #31
 800438a:	d502      	bpl.n	8004392 <_printf_float+0x19a>
 800438c:	3301      	adds	r3, #1
 800438e:	440b      	add	r3, r1
 8004390:	6123      	str	r3, [r4, #16]
 8004392:	f04f 0a00 	mov.w	sl, #0
 8004396:	65a1      	str	r1, [r4, #88]	; 0x58
 8004398:	e7df      	b.n	800435a <_printf_float+0x162>
 800439a:	b913      	cbnz	r3, 80043a2 <_printf_float+0x1aa>
 800439c:	6822      	ldr	r2, [r4, #0]
 800439e:	07d2      	lsls	r2, r2, #31
 80043a0:	d501      	bpl.n	80043a6 <_printf_float+0x1ae>
 80043a2:	3302      	adds	r3, #2
 80043a4:	e7f4      	b.n	8004390 <_printf_float+0x198>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e7f2      	b.n	8004390 <_printf_float+0x198>
 80043aa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80043ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043b0:	4299      	cmp	r1, r3
 80043b2:	db05      	blt.n	80043c0 <_printf_float+0x1c8>
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	6121      	str	r1, [r4, #16]
 80043b8:	07d8      	lsls	r0, r3, #31
 80043ba:	d5ea      	bpl.n	8004392 <_printf_float+0x19a>
 80043bc:	1c4b      	adds	r3, r1, #1
 80043be:	e7e7      	b.n	8004390 <_printf_float+0x198>
 80043c0:	2900      	cmp	r1, #0
 80043c2:	bfcc      	ite	gt
 80043c4:	2201      	movgt	r2, #1
 80043c6:	f1c1 0202 	rsble	r2, r1, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	e7e0      	b.n	8004390 <_printf_float+0x198>
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	055a      	lsls	r2, r3, #21
 80043d2:	d407      	bmi.n	80043e4 <_printf_float+0x1ec>
 80043d4:	6923      	ldr	r3, [r4, #16]
 80043d6:	4642      	mov	r2, r8
 80043d8:	4631      	mov	r1, r6
 80043da:	4628      	mov	r0, r5
 80043dc:	47b8      	blx	r7
 80043de:	3001      	adds	r0, #1
 80043e0:	d12b      	bne.n	800443a <_printf_float+0x242>
 80043e2:	e764      	b.n	80042ae <_printf_float+0xb6>
 80043e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80043e8:	f240 80dd 	bls.w	80045a6 <_printf_float+0x3ae>
 80043ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043f0:	2200      	movs	r2, #0
 80043f2:	2300      	movs	r3, #0
 80043f4:	f7fc fb44 	bl	8000a80 <__aeabi_dcmpeq>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d033      	beq.n	8004464 <_printf_float+0x26c>
 80043fc:	2301      	movs	r3, #1
 80043fe:	4631      	mov	r1, r6
 8004400:	4628      	mov	r0, r5
 8004402:	4a35      	ldr	r2, [pc, #212]	; (80044d8 <_printf_float+0x2e0>)
 8004404:	47b8      	blx	r7
 8004406:	3001      	adds	r0, #1
 8004408:	f43f af51 	beq.w	80042ae <_printf_float+0xb6>
 800440c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004410:	429a      	cmp	r2, r3
 8004412:	db02      	blt.n	800441a <_printf_float+0x222>
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	07d8      	lsls	r0, r3, #31
 8004418:	d50f      	bpl.n	800443a <_printf_float+0x242>
 800441a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800441e:	4631      	mov	r1, r6
 8004420:	4628      	mov	r0, r5
 8004422:	47b8      	blx	r7
 8004424:	3001      	adds	r0, #1
 8004426:	f43f af42 	beq.w	80042ae <_printf_float+0xb6>
 800442a:	f04f 0800 	mov.w	r8, #0
 800442e:	f104 091a 	add.w	r9, r4, #26
 8004432:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004434:	3b01      	subs	r3, #1
 8004436:	4543      	cmp	r3, r8
 8004438:	dc09      	bgt.n	800444e <_printf_float+0x256>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	079b      	lsls	r3, r3, #30
 800443e:	f100 8102 	bmi.w	8004646 <_printf_float+0x44e>
 8004442:	68e0      	ldr	r0, [r4, #12]
 8004444:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004446:	4298      	cmp	r0, r3
 8004448:	bfb8      	it	lt
 800444a:	4618      	movlt	r0, r3
 800444c:	e731      	b.n	80042b2 <_printf_float+0xba>
 800444e:	2301      	movs	r3, #1
 8004450:	464a      	mov	r2, r9
 8004452:	4631      	mov	r1, r6
 8004454:	4628      	mov	r0, r5
 8004456:	47b8      	blx	r7
 8004458:	3001      	adds	r0, #1
 800445a:	f43f af28 	beq.w	80042ae <_printf_float+0xb6>
 800445e:	f108 0801 	add.w	r8, r8, #1
 8004462:	e7e6      	b.n	8004432 <_printf_float+0x23a>
 8004464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004466:	2b00      	cmp	r3, #0
 8004468:	dc38      	bgt.n	80044dc <_printf_float+0x2e4>
 800446a:	2301      	movs	r3, #1
 800446c:	4631      	mov	r1, r6
 800446e:	4628      	mov	r0, r5
 8004470:	4a19      	ldr	r2, [pc, #100]	; (80044d8 <_printf_float+0x2e0>)
 8004472:	47b8      	blx	r7
 8004474:	3001      	adds	r0, #1
 8004476:	f43f af1a 	beq.w	80042ae <_printf_float+0xb6>
 800447a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800447e:	4313      	orrs	r3, r2
 8004480:	d102      	bne.n	8004488 <_printf_float+0x290>
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	07d9      	lsls	r1, r3, #31
 8004486:	d5d8      	bpl.n	800443a <_printf_float+0x242>
 8004488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800448c:	4631      	mov	r1, r6
 800448e:	4628      	mov	r0, r5
 8004490:	47b8      	blx	r7
 8004492:	3001      	adds	r0, #1
 8004494:	f43f af0b 	beq.w	80042ae <_printf_float+0xb6>
 8004498:	f04f 0900 	mov.w	r9, #0
 800449c:	f104 0a1a 	add.w	sl, r4, #26
 80044a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044a2:	425b      	negs	r3, r3
 80044a4:	454b      	cmp	r3, r9
 80044a6:	dc01      	bgt.n	80044ac <_printf_float+0x2b4>
 80044a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044aa:	e794      	b.n	80043d6 <_printf_float+0x1de>
 80044ac:	2301      	movs	r3, #1
 80044ae:	4652      	mov	r2, sl
 80044b0:	4631      	mov	r1, r6
 80044b2:	4628      	mov	r0, r5
 80044b4:	47b8      	blx	r7
 80044b6:	3001      	adds	r0, #1
 80044b8:	f43f aef9 	beq.w	80042ae <_printf_float+0xb6>
 80044bc:	f109 0901 	add.w	r9, r9, #1
 80044c0:	e7ee      	b.n	80044a0 <_printf_float+0x2a8>
 80044c2:	bf00      	nop
 80044c4:	7fefffff 	.word	0x7fefffff
 80044c8:	08007124 	.word	0x08007124
 80044cc:	08007128 	.word	0x08007128
 80044d0:	08007130 	.word	0x08007130
 80044d4:	0800712c 	.word	0x0800712c
 80044d8:	08007134 	.word	0x08007134
 80044dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044e0:	429a      	cmp	r2, r3
 80044e2:	bfa8      	it	ge
 80044e4:	461a      	movge	r2, r3
 80044e6:	2a00      	cmp	r2, #0
 80044e8:	4691      	mov	r9, r2
 80044ea:	dc37      	bgt.n	800455c <_printf_float+0x364>
 80044ec:	f04f 0b00 	mov.w	fp, #0
 80044f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044f4:	f104 021a 	add.w	r2, r4, #26
 80044f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80044fc:	ebaa 0309 	sub.w	r3, sl, r9
 8004500:	455b      	cmp	r3, fp
 8004502:	dc33      	bgt.n	800456c <_printf_float+0x374>
 8004504:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004508:	429a      	cmp	r2, r3
 800450a:	db3b      	blt.n	8004584 <_printf_float+0x38c>
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	07da      	lsls	r2, r3, #31
 8004510:	d438      	bmi.n	8004584 <_printf_float+0x38c>
 8004512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004514:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004516:	eba2 030a 	sub.w	r3, r2, sl
 800451a:	eba2 0901 	sub.w	r9, r2, r1
 800451e:	4599      	cmp	r9, r3
 8004520:	bfa8      	it	ge
 8004522:	4699      	movge	r9, r3
 8004524:	f1b9 0f00 	cmp.w	r9, #0
 8004528:	dc34      	bgt.n	8004594 <_printf_float+0x39c>
 800452a:	f04f 0800 	mov.w	r8, #0
 800452e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004532:	f104 0a1a 	add.w	sl, r4, #26
 8004536:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	eba3 0309 	sub.w	r3, r3, r9
 8004540:	4543      	cmp	r3, r8
 8004542:	f77f af7a 	ble.w	800443a <_printf_float+0x242>
 8004546:	2301      	movs	r3, #1
 8004548:	4652      	mov	r2, sl
 800454a:	4631      	mov	r1, r6
 800454c:	4628      	mov	r0, r5
 800454e:	47b8      	blx	r7
 8004550:	3001      	adds	r0, #1
 8004552:	f43f aeac 	beq.w	80042ae <_printf_float+0xb6>
 8004556:	f108 0801 	add.w	r8, r8, #1
 800455a:	e7ec      	b.n	8004536 <_printf_float+0x33e>
 800455c:	4613      	mov	r3, r2
 800455e:	4631      	mov	r1, r6
 8004560:	4642      	mov	r2, r8
 8004562:	4628      	mov	r0, r5
 8004564:	47b8      	blx	r7
 8004566:	3001      	adds	r0, #1
 8004568:	d1c0      	bne.n	80044ec <_printf_float+0x2f4>
 800456a:	e6a0      	b.n	80042ae <_printf_float+0xb6>
 800456c:	2301      	movs	r3, #1
 800456e:	4631      	mov	r1, r6
 8004570:	4628      	mov	r0, r5
 8004572:	920b      	str	r2, [sp, #44]	; 0x2c
 8004574:	47b8      	blx	r7
 8004576:	3001      	adds	r0, #1
 8004578:	f43f ae99 	beq.w	80042ae <_printf_float+0xb6>
 800457c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800457e:	f10b 0b01 	add.w	fp, fp, #1
 8004582:	e7b9      	b.n	80044f8 <_printf_float+0x300>
 8004584:	4631      	mov	r1, r6
 8004586:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800458a:	4628      	mov	r0, r5
 800458c:	47b8      	blx	r7
 800458e:	3001      	adds	r0, #1
 8004590:	d1bf      	bne.n	8004512 <_printf_float+0x31a>
 8004592:	e68c      	b.n	80042ae <_printf_float+0xb6>
 8004594:	464b      	mov	r3, r9
 8004596:	4631      	mov	r1, r6
 8004598:	4628      	mov	r0, r5
 800459a:	eb08 020a 	add.w	r2, r8, sl
 800459e:	47b8      	blx	r7
 80045a0:	3001      	adds	r0, #1
 80045a2:	d1c2      	bne.n	800452a <_printf_float+0x332>
 80045a4:	e683      	b.n	80042ae <_printf_float+0xb6>
 80045a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045a8:	2a01      	cmp	r2, #1
 80045aa:	dc01      	bgt.n	80045b0 <_printf_float+0x3b8>
 80045ac:	07db      	lsls	r3, r3, #31
 80045ae:	d537      	bpl.n	8004620 <_printf_float+0x428>
 80045b0:	2301      	movs	r3, #1
 80045b2:	4642      	mov	r2, r8
 80045b4:	4631      	mov	r1, r6
 80045b6:	4628      	mov	r0, r5
 80045b8:	47b8      	blx	r7
 80045ba:	3001      	adds	r0, #1
 80045bc:	f43f ae77 	beq.w	80042ae <_printf_float+0xb6>
 80045c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045c4:	4631      	mov	r1, r6
 80045c6:	4628      	mov	r0, r5
 80045c8:	47b8      	blx	r7
 80045ca:	3001      	adds	r0, #1
 80045cc:	f43f ae6f 	beq.w	80042ae <_printf_float+0xb6>
 80045d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045d4:	2200      	movs	r2, #0
 80045d6:	2300      	movs	r3, #0
 80045d8:	f7fc fa52 	bl	8000a80 <__aeabi_dcmpeq>
 80045dc:	b9d8      	cbnz	r0, 8004616 <_printf_float+0x41e>
 80045de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045e0:	f108 0201 	add.w	r2, r8, #1
 80045e4:	3b01      	subs	r3, #1
 80045e6:	4631      	mov	r1, r6
 80045e8:	4628      	mov	r0, r5
 80045ea:	47b8      	blx	r7
 80045ec:	3001      	adds	r0, #1
 80045ee:	d10e      	bne.n	800460e <_printf_float+0x416>
 80045f0:	e65d      	b.n	80042ae <_printf_float+0xb6>
 80045f2:	2301      	movs	r3, #1
 80045f4:	464a      	mov	r2, r9
 80045f6:	4631      	mov	r1, r6
 80045f8:	4628      	mov	r0, r5
 80045fa:	47b8      	blx	r7
 80045fc:	3001      	adds	r0, #1
 80045fe:	f43f ae56 	beq.w	80042ae <_printf_float+0xb6>
 8004602:	f108 0801 	add.w	r8, r8, #1
 8004606:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004608:	3b01      	subs	r3, #1
 800460a:	4543      	cmp	r3, r8
 800460c:	dcf1      	bgt.n	80045f2 <_printf_float+0x3fa>
 800460e:	4653      	mov	r3, sl
 8004610:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004614:	e6e0      	b.n	80043d8 <_printf_float+0x1e0>
 8004616:	f04f 0800 	mov.w	r8, #0
 800461a:	f104 091a 	add.w	r9, r4, #26
 800461e:	e7f2      	b.n	8004606 <_printf_float+0x40e>
 8004620:	2301      	movs	r3, #1
 8004622:	4642      	mov	r2, r8
 8004624:	e7df      	b.n	80045e6 <_printf_float+0x3ee>
 8004626:	2301      	movs	r3, #1
 8004628:	464a      	mov	r2, r9
 800462a:	4631      	mov	r1, r6
 800462c:	4628      	mov	r0, r5
 800462e:	47b8      	blx	r7
 8004630:	3001      	adds	r0, #1
 8004632:	f43f ae3c 	beq.w	80042ae <_printf_float+0xb6>
 8004636:	f108 0801 	add.w	r8, r8, #1
 800463a:	68e3      	ldr	r3, [r4, #12]
 800463c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800463e:	1a5b      	subs	r3, r3, r1
 8004640:	4543      	cmp	r3, r8
 8004642:	dcf0      	bgt.n	8004626 <_printf_float+0x42e>
 8004644:	e6fd      	b.n	8004442 <_printf_float+0x24a>
 8004646:	f04f 0800 	mov.w	r8, #0
 800464a:	f104 0919 	add.w	r9, r4, #25
 800464e:	e7f4      	b.n	800463a <_printf_float+0x442>

08004650 <_printf_common>:
 8004650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004654:	4616      	mov	r6, r2
 8004656:	4699      	mov	r9, r3
 8004658:	688a      	ldr	r2, [r1, #8]
 800465a:	690b      	ldr	r3, [r1, #16]
 800465c:	4607      	mov	r7, r0
 800465e:	4293      	cmp	r3, r2
 8004660:	bfb8      	it	lt
 8004662:	4613      	movlt	r3, r2
 8004664:	6033      	str	r3, [r6, #0]
 8004666:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800466a:	460c      	mov	r4, r1
 800466c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004670:	b10a      	cbz	r2, 8004676 <_printf_common+0x26>
 8004672:	3301      	adds	r3, #1
 8004674:	6033      	str	r3, [r6, #0]
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	0699      	lsls	r1, r3, #26
 800467a:	bf42      	ittt	mi
 800467c:	6833      	ldrmi	r3, [r6, #0]
 800467e:	3302      	addmi	r3, #2
 8004680:	6033      	strmi	r3, [r6, #0]
 8004682:	6825      	ldr	r5, [r4, #0]
 8004684:	f015 0506 	ands.w	r5, r5, #6
 8004688:	d106      	bne.n	8004698 <_printf_common+0x48>
 800468a:	f104 0a19 	add.w	sl, r4, #25
 800468e:	68e3      	ldr	r3, [r4, #12]
 8004690:	6832      	ldr	r2, [r6, #0]
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	42ab      	cmp	r3, r5
 8004696:	dc28      	bgt.n	80046ea <_printf_common+0x9a>
 8004698:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800469c:	1e13      	subs	r3, r2, #0
 800469e:	6822      	ldr	r2, [r4, #0]
 80046a0:	bf18      	it	ne
 80046a2:	2301      	movne	r3, #1
 80046a4:	0692      	lsls	r2, r2, #26
 80046a6:	d42d      	bmi.n	8004704 <_printf_common+0xb4>
 80046a8:	4649      	mov	r1, r9
 80046aa:	4638      	mov	r0, r7
 80046ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046b0:	47c0      	blx	r8
 80046b2:	3001      	adds	r0, #1
 80046b4:	d020      	beq.n	80046f8 <_printf_common+0xa8>
 80046b6:	6823      	ldr	r3, [r4, #0]
 80046b8:	68e5      	ldr	r5, [r4, #12]
 80046ba:	f003 0306 	and.w	r3, r3, #6
 80046be:	2b04      	cmp	r3, #4
 80046c0:	bf18      	it	ne
 80046c2:	2500      	movne	r5, #0
 80046c4:	6832      	ldr	r2, [r6, #0]
 80046c6:	f04f 0600 	mov.w	r6, #0
 80046ca:	68a3      	ldr	r3, [r4, #8]
 80046cc:	bf08      	it	eq
 80046ce:	1aad      	subeq	r5, r5, r2
 80046d0:	6922      	ldr	r2, [r4, #16]
 80046d2:	bf08      	it	eq
 80046d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046d8:	4293      	cmp	r3, r2
 80046da:	bfc4      	itt	gt
 80046dc:	1a9b      	subgt	r3, r3, r2
 80046de:	18ed      	addgt	r5, r5, r3
 80046e0:	341a      	adds	r4, #26
 80046e2:	42b5      	cmp	r5, r6
 80046e4:	d11a      	bne.n	800471c <_printf_common+0xcc>
 80046e6:	2000      	movs	r0, #0
 80046e8:	e008      	b.n	80046fc <_printf_common+0xac>
 80046ea:	2301      	movs	r3, #1
 80046ec:	4652      	mov	r2, sl
 80046ee:	4649      	mov	r1, r9
 80046f0:	4638      	mov	r0, r7
 80046f2:	47c0      	blx	r8
 80046f4:	3001      	adds	r0, #1
 80046f6:	d103      	bne.n	8004700 <_printf_common+0xb0>
 80046f8:	f04f 30ff 	mov.w	r0, #4294967295
 80046fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004700:	3501      	adds	r5, #1
 8004702:	e7c4      	b.n	800468e <_printf_common+0x3e>
 8004704:	2030      	movs	r0, #48	; 0x30
 8004706:	18e1      	adds	r1, r4, r3
 8004708:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004712:	4422      	add	r2, r4
 8004714:	3302      	adds	r3, #2
 8004716:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800471a:	e7c5      	b.n	80046a8 <_printf_common+0x58>
 800471c:	2301      	movs	r3, #1
 800471e:	4622      	mov	r2, r4
 8004720:	4649      	mov	r1, r9
 8004722:	4638      	mov	r0, r7
 8004724:	47c0      	blx	r8
 8004726:	3001      	adds	r0, #1
 8004728:	d0e6      	beq.n	80046f8 <_printf_common+0xa8>
 800472a:	3601      	adds	r6, #1
 800472c:	e7d9      	b.n	80046e2 <_printf_common+0x92>
	...

08004730 <_printf_i>:
 8004730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004734:	460c      	mov	r4, r1
 8004736:	7e27      	ldrb	r7, [r4, #24]
 8004738:	4691      	mov	r9, r2
 800473a:	2f78      	cmp	r7, #120	; 0x78
 800473c:	4680      	mov	r8, r0
 800473e:	469a      	mov	sl, r3
 8004740:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004742:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004746:	d807      	bhi.n	8004758 <_printf_i+0x28>
 8004748:	2f62      	cmp	r7, #98	; 0x62
 800474a:	d80a      	bhi.n	8004762 <_printf_i+0x32>
 800474c:	2f00      	cmp	r7, #0
 800474e:	f000 80d9 	beq.w	8004904 <_printf_i+0x1d4>
 8004752:	2f58      	cmp	r7, #88	; 0x58
 8004754:	f000 80a4 	beq.w	80048a0 <_printf_i+0x170>
 8004758:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800475c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004760:	e03a      	b.n	80047d8 <_printf_i+0xa8>
 8004762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004766:	2b15      	cmp	r3, #21
 8004768:	d8f6      	bhi.n	8004758 <_printf_i+0x28>
 800476a:	a001      	add	r0, pc, #4	; (adr r0, 8004770 <_printf_i+0x40>)
 800476c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004770:	080047c9 	.word	0x080047c9
 8004774:	080047dd 	.word	0x080047dd
 8004778:	08004759 	.word	0x08004759
 800477c:	08004759 	.word	0x08004759
 8004780:	08004759 	.word	0x08004759
 8004784:	08004759 	.word	0x08004759
 8004788:	080047dd 	.word	0x080047dd
 800478c:	08004759 	.word	0x08004759
 8004790:	08004759 	.word	0x08004759
 8004794:	08004759 	.word	0x08004759
 8004798:	08004759 	.word	0x08004759
 800479c:	080048eb 	.word	0x080048eb
 80047a0:	0800480d 	.word	0x0800480d
 80047a4:	080048cd 	.word	0x080048cd
 80047a8:	08004759 	.word	0x08004759
 80047ac:	08004759 	.word	0x08004759
 80047b0:	0800490d 	.word	0x0800490d
 80047b4:	08004759 	.word	0x08004759
 80047b8:	0800480d 	.word	0x0800480d
 80047bc:	08004759 	.word	0x08004759
 80047c0:	08004759 	.word	0x08004759
 80047c4:	080048d5 	.word	0x080048d5
 80047c8:	680b      	ldr	r3, [r1, #0]
 80047ca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047ce:	1d1a      	adds	r2, r3, #4
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	600a      	str	r2, [r1, #0]
 80047d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047d8:	2301      	movs	r3, #1
 80047da:	e0a4      	b.n	8004926 <_printf_i+0x1f6>
 80047dc:	6825      	ldr	r5, [r4, #0]
 80047de:	6808      	ldr	r0, [r1, #0]
 80047e0:	062e      	lsls	r6, r5, #24
 80047e2:	f100 0304 	add.w	r3, r0, #4
 80047e6:	d50a      	bpl.n	80047fe <_printf_i+0xce>
 80047e8:	6805      	ldr	r5, [r0, #0]
 80047ea:	600b      	str	r3, [r1, #0]
 80047ec:	2d00      	cmp	r5, #0
 80047ee:	da03      	bge.n	80047f8 <_printf_i+0xc8>
 80047f0:	232d      	movs	r3, #45	; 0x2d
 80047f2:	426d      	negs	r5, r5
 80047f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f8:	230a      	movs	r3, #10
 80047fa:	485e      	ldr	r0, [pc, #376]	; (8004974 <_printf_i+0x244>)
 80047fc:	e019      	b.n	8004832 <_printf_i+0x102>
 80047fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004802:	6805      	ldr	r5, [r0, #0]
 8004804:	600b      	str	r3, [r1, #0]
 8004806:	bf18      	it	ne
 8004808:	b22d      	sxthne	r5, r5
 800480a:	e7ef      	b.n	80047ec <_printf_i+0xbc>
 800480c:	680b      	ldr	r3, [r1, #0]
 800480e:	6825      	ldr	r5, [r4, #0]
 8004810:	1d18      	adds	r0, r3, #4
 8004812:	6008      	str	r0, [r1, #0]
 8004814:	0628      	lsls	r0, r5, #24
 8004816:	d501      	bpl.n	800481c <_printf_i+0xec>
 8004818:	681d      	ldr	r5, [r3, #0]
 800481a:	e002      	b.n	8004822 <_printf_i+0xf2>
 800481c:	0669      	lsls	r1, r5, #25
 800481e:	d5fb      	bpl.n	8004818 <_printf_i+0xe8>
 8004820:	881d      	ldrh	r5, [r3, #0]
 8004822:	2f6f      	cmp	r7, #111	; 0x6f
 8004824:	bf0c      	ite	eq
 8004826:	2308      	moveq	r3, #8
 8004828:	230a      	movne	r3, #10
 800482a:	4852      	ldr	r0, [pc, #328]	; (8004974 <_printf_i+0x244>)
 800482c:	2100      	movs	r1, #0
 800482e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004832:	6866      	ldr	r6, [r4, #4]
 8004834:	2e00      	cmp	r6, #0
 8004836:	bfa8      	it	ge
 8004838:	6821      	ldrge	r1, [r4, #0]
 800483a:	60a6      	str	r6, [r4, #8]
 800483c:	bfa4      	itt	ge
 800483e:	f021 0104 	bicge.w	r1, r1, #4
 8004842:	6021      	strge	r1, [r4, #0]
 8004844:	b90d      	cbnz	r5, 800484a <_printf_i+0x11a>
 8004846:	2e00      	cmp	r6, #0
 8004848:	d04d      	beq.n	80048e6 <_printf_i+0x1b6>
 800484a:	4616      	mov	r6, r2
 800484c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004850:	fb03 5711 	mls	r7, r3, r1, r5
 8004854:	5dc7      	ldrb	r7, [r0, r7]
 8004856:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800485a:	462f      	mov	r7, r5
 800485c:	42bb      	cmp	r3, r7
 800485e:	460d      	mov	r5, r1
 8004860:	d9f4      	bls.n	800484c <_printf_i+0x11c>
 8004862:	2b08      	cmp	r3, #8
 8004864:	d10b      	bne.n	800487e <_printf_i+0x14e>
 8004866:	6823      	ldr	r3, [r4, #0]
 8004868:	07df      	lsls	r7, r3, #31
 800486a:	d508      	bpl.n	800487e <_printf_i+0x14e>
 800486c:	6923      	ldr	r3, [r4, #16]
 800486e:	6861      	ldr	r1, [r4, #4]
 8004870:	4299      	cmp	r1, r3
 8004872:	bfde      	ittt	le
 8004874:	2330      	movle	r3, #48	; 0x30
 8004876:	f806 3c01 	strble.w	r3, [r6, #-1]
 800487a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800487e:	1b92      	subs	r2, r2, r6
 8004880:	6122      	str	r2, [r4, #16]
 8004882:	464b      	mov	r3, r9
 8004884:	4621      	mov	r1, r4
 8004886:	4640      	mov	r0, r8
 8004888:	f8cd a000 	str.w	sl, [sp]
 800488c:	aa03      	add	r2, sp, #12
 800488e:	f7ff fedf 	bl	8004650 <_printf_common>
 8004892:	3001      	adds	r0, #1
 8004894:	d14c      	bne.n	8004930 <_printf_i+0x200>
 8004896:	f04f 30ff 	mov.w	r0, #4294967295
 800489a:	b004      	add	sp, #16
 800489c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a0:	4834      	ldr	r0, [pc, #208]	; (8004974 <_printf_i+0x244>)
 80048a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048a6:	680e      	ldr	r6, [r1, #0]
 80048a8:	6823      	ldr	r3, [r4, #0]
 80048aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80048ae:	061f      	lsls	r7, r3, #24
 80048b0:	600e      	str	r6, [r1, #0]
 80048b2:	d514      	bpl.n	80048de <_printf_i+0x1ae>
 80048b4:	07d9      	lsls	r1, r3, #31
 80048b6:	bf44      	itt	mi
 80048b8:	f043 0320 	orrmi.w	r3, r3, #32
 80048bc:	6023      	strmi	r3, [r4, #0]
 80048be:	b91d      	cbnz	r5, 80048c8 <_printf_i+0x198>
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	f023 0320 	bic.w	r3, r3, #32
 80048c6:	6023      	str	r3, [r4, #0]
 80048c8:	2310      	movs	r3, #16
 80048ca:	e7af      	b.n	800482c <_printf_i+0xfc>
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	f043 0320 	orr.w	r3, r3, #32
 80048d2:	6023      	str	r3, [r4, #0]
 80048d4:	2378      	movs	r3, #120	; 0x78
 80048d6:	4828      	ldr	r0, [pc, #160]	; (8004978 <_printf_i+0x248>)
 80048d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048dc:	e7e3      	b.n	80048a6 <_printf_i+0x176>
 80048de:	065e      	lsls	r6, r3, #25
 80048e0:	bf48      	it	mi
 80048e2:	b2ad      	uxthmi	r5, r5
 80048e4:	e7e6      	b.n	80048b4 <_printf_i+0x184>
 80048e6:	4616      	mov	r6, r2
 80048e8:	e7bb      	b.n	8004862 <_printf_i+0x132>
 80048ea:	680b      	ldr	r3, [r1, #0]
 80048ec:	6826      	ldr	r6, [r4, #0]
 80048ee:	1d1d      	adds	r5, r3, #4
 80048f0:	6960      	ldr	r0, [r4, #20]
 80048f2:	600d      	str	r5, [r1, #0]
 80048f4:	0635      	lsls	r5, r6, #24
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	d501      	bpl.n	80048fe <_printf_i+0x1ce>
 80048fa:	6018      	str	r0, [r3, #0]
 80048fc:	e002      	b.n	8004904 <_printf_i+0x1d4>
 80048fe:	0671      	lsls	r1, r6, #25
 8004900:	d5fb      	bpl.n	80048fa <_printf_i+0x1ca>
 8004902:	8018      	strh	r0, [r3, #0]
 8004904:	2300      	movs	r3, #0
 8004906:	4616      	mov	r6, r2
 8004908:	6123      	str	r3, [r4, #16]
 800490a:	e7ba      	b.n	8004882 <_printf_i+0x152>
 800490c:	680b      	ldr	r3, [r1, #0]
 800490e:	1d1a      	adds	r2, r3, #4
 8004910:	600a      	str	r2, [r1, #0]
 8004912:	681e      	ldr	r6, [r3, #0]
 8004914:	2100      	movs	r1, #0
 8004916:	4630      	mov	r0, r6
 8004918:	6862      	ldr	r2, [r4, #4]
 800491a:	f000 feb7 	bl	800568c <memchr>
 800491e:	b108      	cbz	r0, 8004924 <_printf_i+0x1f4>
 8004920:	1b80      	subs	r0, r0, r6
 8004922:	6060      	str	r0, [r4, #4]
 8004924:	6863      	ldr	r3, [r4, #4]
 8004926:	6123      	str	r3, [r4, #16]
 8004928:	2300      	movs	r3, #0
 800492a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800492e:	e7a8      	b.n	8004882 <_printf_i+0x152>
 8004930:	4632      	mov	r2, r6
 8004932:	4649      	mov	r1, r9
 8004934:	4640      	mov	r0, r8
 8004936:	6923      	ldr	r3, [r4, #16]
 8004938:	47d0      	blx	sl
 800493a:	3001      	adds	r0, #1
 800493c:	d0ab      	beq.n	8004896 <_printf_i+0x166>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	079b      	lsls	r3, r3, #30
 8004942:	d413      	bmi.n	800496c <_printf_i+0x23c>
 8004944:	68e0      	ldr	r0, [r4, #12]
 8004946:	9b03      	ldr	r3, [sp, #12]
 8004948:	4298      	cmp	r0, r3
 800494a:	bfb8      	it	lt
 800494c:	4618      	movlt	r0, r3
 800494e:	e7a4      	b.n	800489a <_printf_i+0x16a>
 8004950:	2301      	movs	r3, #1
 8004952:	4632      	mov	r2, r6
 8004954:	4649      	mov	r1, r9
 8004956:	4640      	mov	r0, r8
 8004958:	47d0      	blx	sl
 800495a:	3001      	adds	r0, #1
 800495c:	d09b      	beq.n	8004896 <_printf_i+0x166>
 800495e:	3501      	adds	r5, #1
 8004960:	68e3      	ldr	r3, [r4, #12]
 8004962:	9903      	ldr	r1, [sp, #12]
 8004964:	1a5b      	subs	r3, r3, r1
 8004966:	42ab      	cmp	r3, r5
 8004968:	dcf2      	bgt.n	8004950 <_printf_i+0x220>
 800496a:	e7eb      	b.n	8004944 <_printf_i+0x214>
 800496c:	2500      	movs	r5, #0
 800496e:	f104 0619 	add.w	r6, r4, #25
 8004972:	e7f5      	b.n	8004960 <_printf_i+0x230>
 8004974:	08007136 	.word	0x08007136
 8004978:	08007147 	.word	0x08007147

0800497c <quorem>:
 800497c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004980:	6903      	ldr	r3, [r0, #16]
 8004982:	690c      	ldr	r4, [r1, #16]
 8004984:	4607      	mov	r7, r0
 8004986:	42a3      	cmp	r3, r4
 8004988:	f2c0 8083 	blt.w	8004a92 <quorem+0x116>
 800498c:	3c01      	subs	r4, #1
 800498e:	f100 0514 	add.w	r5, r0, #20
 8004992:	f101 0814 	add.w	r8, r1, #20
 8004996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800499a:	9301      	str	r3, [sp, #4]
 800499c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049a4:	3301      	adds	r3, #1
 80049a6:	429a      	cmp	r2, r3
 80049a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80049ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049b4:	d332      	bcc.n	8004a1c <quorem+0xa0>
 80049b6:	f04f 0e00 	mov.w	lr, #0
 80049ba:	4640      	mov	r0, r8
 80049bc:	46ac      	mov	ip, r5
 80049be:	46f2      	mov	sl, lr
 80049c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80049c4:	b293      	uxth	r3, r2
 80049c6:	fb06 e303 	mla	r3, r6, r3, lr
 80049ca:	0c12      	lsrs	r2, r2, #16
 80049cc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80049d0:	fb06 e202 	mla	r2, r6, r2, lr
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	ebaa 0303 	sub.w	r3, sl, r3
 80049da:	f8dc a000 	ldr.w	sl, [ip]
 80049de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049e2:	fa1f fa8a 	uxth.w	sl, sl
 80049e6:	4453      	add	r3, sl
 80049e8:	fa1f fa82 	uxth.w	sl, r2
 80049ec:	f8dc 2000 	ldr.w	r2, [ip]
 80049f0:	4581      	cmp	r9, r0
 80049f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80049f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a00:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a04:	f84c 3b04 	str.w	r3, [ip], #4
 8004a08:	d2da      	bcs.n	80049c0 <quorem+0x44>
 8004a0a:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a0e:	b92b      	cbnz	r3, 8004a1c <quorem+0xa0>
 8004a10:	9b01      	ldr	r3, [sp, #4]
 8004a12:	3b04      	subs	r3, #4
 8004a14:	429d      	cmp	r5, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	d32f      	bcc.n	8004a7a <quorem+0xfe>
 8004a1a:	613c      	str	r4, [r7, #16]
 8004a1c:	4638      	mov	r0, r7
 8004a1e:	f001 f8cb 	bl	8005bb8 <__mcmp>
 8004a22:	2800      	cmp	r0, #0
 8004a24:	db25      	blt.n	8004a72 <quorem+0xf6>
 8004a26:	4628      	mov	r0, r5
 8004a28:	f04f 0c00 	mov.w	ip, #0
 8004a2c:	3601      	adds	r6, #1
 8004a2e:	f858 1b04 	ldr.w	r1, [r8], #4
 8004a32:	f8d0 e000 	ldr.w	lr, [r0]
 8004a36:	b28b      	uxth	r3, r1
 8004a38:	ebac 0303 	sub.w	r3, ip, r3
 8004a3c:	fa1f f28e 	uxth.w	r2, lr
 8004a40:	4413      	add	r3, r2
 8004a42:	0c0a      	lsrs	r2, r1, #16
 8004a44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a52:	45c1      	cmp	r9, r8
 8004a54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a58:	f840 3b04 	str.w	r3, [r0], #4
 8004a5c:	d2e7      	bcs.n	8004a2e <quorem+0xb2>
 8004a5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a66:	b922      	cbnz	r2, 8004a72 <quorem+0xf6>
 8004a68:	3b04      	subs	r3, #4
 8004a6a:	429d      	cmp	r5, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	d30a      	bcc.n	8004a86 <quorem+0x10a>
 8004a70:	613c      	str	r4, [r7, #16]
 8004a72:	4630      	mov	r0, r6
 8004a74:	b003      	add	sp, #12
 8004a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	3b04      	subs	r3, #4
 8004a7e:	2a00      	cmp	r2, #0
 8004a80:	d1cb      	bne.n	8004a1a <quorem+0x9e>
 8004a82:	3c01      	subs	r4, #1
 8004a84:	e7c6      	b.n	8004a14 <quorem+0x98>
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	3b04      	subs	r3, #4
 8004a8a:	2a00      	cmp	r2, #0
 8004a8c:	d1f0      	bne.n	8004a70 <quorem+0xf4>
 8004a8e:	3c01      	subs	r4, #1
 8004a90:	e7eb      	b.n	8004a6a <quorem+0xee>
 8004a92:	2000      	movs	r0, #0
 8004a94:	e7ee      	b.n	8004a74 <quorem+0xf8>
	...

08004a98 <_dtoa_r>:
 8004a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a9c:	4616      	mov	r6, r2
 8004a9e:	461f      	mov	r7, r3
 8004aa0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004aa2:	b099      	sub	sp, #100	; 0x64
 8004aa4:	4605      	mov	r5, r0
 8004aa6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004aaa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004aae:	b974      	cbnz	r4, 8004ace <_dtoa_r+0x36>
 8004ab0:	2010      	movs	r0, #16
 8004ab2:	f000 fde3 	bl	800567c <malloc>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	6268      	str	r0, [r5, #36]	; 0x24
 8004aba:	b920      	cbnz	r0, 8004ac6 <_dtoa_r+0x2e>
 8004abc:	21ea      	movs	r1, #234	; 0xea
 8004abe:	4bae      	ldr	r3, [pc, #696]	; (8004d78 <_dtoa_r+0x2e0>)
 8004ac0:	48ae      	ldr	r0, [pc, #696]	; (8004d7c <_dtoa_r+0x2e4>)
 8004ac2:	f001 fa45 	bl	8005f50 <__assert_func>
 8004ac6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004aca:	6004      	str	r4, [r0, #0]
 8004acc:	60c4      	str	r4, [r0, #12]
 8004ace:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ad0:	6819      	ldr	r1, [r3, #0]
 8004ad2:	b151      	cbz	r1, 8004aea <_dtoa_r+0x52>
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4093      	lsls	r3, r2
 8004ada:	604a      	str	r2, [r1, #4]
 8004adc:	608b      	str	r3, [r1, #8]
 8004ade:	4628      	mov	r0, r5
 8004ae0:	f000 fe30 	bl	8005744 <_Bfree>
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ae8:	601a      	str	r2, [r3, #0]
 8004aea:	1e3b      	subs	r3, r7, #0
 8004aec:	bfaf      	iteee	ge
 8004aee:	2300      	movge	r3, #0
 8004af0:	2201      	movlt	r2, #1
 8004af2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004af6:	9305      	strlt	r3, [sp, #20]
 8004af8:	bfa8      	it	ge
 8004afa:	f8c8 3000 	strge.w	r3, [r8]
 8004afe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004b02:	4b9f      	ldr	r3, [pc, #636]	; (8004d80 <_dtoa_r+0x2e8>)
 8004b04:	bfb8      	it	lt
 8004b06:	f8c8 2000 	strlt.w	r2, [r8]
 8004b0a:	ea33 0309 	bics.w	r3, r3, r9
 8004b0e:	d119      	bne.n	8004b44 <_dtoa_r+0xac>
 8004b10:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b1c:	4333      	orrs	r3, r6
 8004b1e:	f000 8580 	beq.w	8005622 <_dtoa_r+0xb8a>
 8004b22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b24:	b953      	cbnz	r3, 8004b3c <_dtoa_r+0xa4>
 8004b26:	4b97      	ldr	r3, [pc, #604]	; (8004d84 <_dtoa_r+0x2ec>)
 8004b28:	e022      	b.n	8004b70 <_dtoa_r+0xd8>
 8004b2a:	4b97      	ldr	r3, [pc, #604]	; (8004d88 <_dtoa_r+0x2f0>)
 8004b2c:	9308      	str	r3, [sp, #32]
 8004b2e:	3308      	adds	r3, #8
 8004b30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	9808      	ldr	r0, [sp, #32]
 8004b36:	b019      	add	sp, #100	; 0x64
 8004b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b3c:	4b91      	ldr	r3, [pc, #580]	; (8004d84 <_dtoa_r+0x2ec>)
 8004b3e:	9308      	str	r3, [sp, #32]
 8004b40:	3303      	adds	r3, #3
 8004b42:	e7f5      	b.n	8004b30 <_dtoa_r+0x98>
 8004b44:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b48:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004b4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b50:	2200      	movs	r2, #0
 8004b52:	2300      	movs	r3, #0
 8004b54:	f7fb ff94 	bl	8000a80 <__aeabi_dcmpeq>
 8004b58:	4680      	mov	r8, r0
 8004b5a:	b158      	cbz	r0, 8004b74 <_dtoa_r+0xdc>
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 8559 	beq.w	800561c <_dtoa_r+0xb84>
 8004b6a:	4888      	ldr	r0, [pc, #544]	; (8004d8c <_dtoa_r+0x2f4>)
 8004b6c:	6018      	str	r0, [r3, #0]
 8004b6e:	1e43      	subs	r3, r0, #1
 8004b70:	9308      	str	r3, [sp, #32]
 8004b72:	e7df      	b.n	8004b34 <_dtoa_r+0x9c>
 8004b74:	ab16      	add	r3, sp, #88	; 0x58
 8004b76:	9301      	str	r3, [sp, #4]
 8004b78:	ab17      	add	r3, sp, #92	; 0x5c
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b82:	f001 f8c5 	bl	8005d10 <__d2b>
 8004b86:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004b8a:	4682      	mov	sl, r0
 8004b8c:	2c00      	cmp	r4, #0
 8004b8e:	d07e      	beq.n	8004c8e <_dtoa_r+0x1f6>
 8004b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b96:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004b9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b9e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004ba2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004ba6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004baa:	2200      	movs	r2, #0
 8004bac:	4b78      	ldr	r3, [pc, #480]	; (8004d90 <_dtoa_r+0x2f8>)
 8004bae:	f7fb fb47 	bl	8000240 <__aeabi_dsub>
 8004bb2:	a36b      	add	r3, pc, #428	; (adr r3, 8004d60 <_dtoa_r+0x2c8>)
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f7fb fcfa 	bl	80005b0 <__aeabi_dmul>
 8004bbc:	a36a      	add	r3, pc, #424	; (adr r3, 8004d68 <_dtoa_r+0x2d0>)
 8004bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc2:	f7fb fb3f 	bl	8000244 <__adddf3>
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	4620      	mov	r0, r4
 8004bca:	460f      	mov	r7, r1
 8004bcc:	f7fb fc86 	bl	80004dc <__aeabi_i2d>
 8004bd0:	a367      	add	r3, pc, #412	; (adr r3, 8004d70 <_dtoa_r+0x2d8>)
 8004bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd6:	f7fb fceb 	bl	80005b0 <__aeabi_dmul>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4630      	mov	r0, r6
 8004be0:	4639      	mov	r1, r7
 8004be2:	f7fb fb2f 	bl	8000244 <__adddf3>
 8004be6:	4606      	mov	r6, r0
 8004be8:	460f      	mov	r7, r1
 8004bea:	f7fb ff91 	bl	8000b10 <__aeabi_d2iz>
 8004bee:	2200      	movs	r2, #0
 8004bf0:	4681      	mov	r9, r0
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	4630      	mov	r0, r6
 8004bf6:	4639      	mov	r1, r7
 8004bf8:	f7fb ff4c 	bl	8000a94 <__aeabi_dcmplt>
 8004bfc:	b148      	cbz	r0, 8004c12 <_dtoa_r+0x17a>
 8004bfe:	4648      	mov	r0, r9
 8004c00:	f7fb fc6c 	bl	80004dc <__aeabi_i2d>
 8004c04:	4632      	mov	r2, r6
 8004c06:	463b      	mov	r3, r7
 8004c08:	f7fb ff3a 	bl	8000a80 <__aeabi_dcmpeq>
 8004c0c:	b908      	cbnz	r0, 8004c12 <_dtoa_r+0x17a>
 8004c0e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004c12:	f1b9 0f16 	cmp.w	r9, #22
 8004c16:	d857      	bhi.n	8004cc8 <_dtoa_r+0x230>
 8004c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c1c:	4b5d      	ldr	r3, [pc, #372]	; (8004d94 <_dtoa_r+0x2fc>)
 8004c1e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c26:	f7fb ff35 	bl	8000a94 <__aeabi_dcmplt>
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	d04e      	beq.n	8004ccc <_dtoa_r+0x234>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f109 39ff 	add.w	r9, r9, #4294967295
 8004c34:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c38:	1b1c      	subs	r4, r3, r4
 8004c3a:	1e63      	subs	r3, r4, #1
 8004c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c3e:	bf49      	itett	mi
 8004c40:	f1c4 0301 	rsbmi	r3, r4, #1
 8004c44:	2300      	movpl	r3, #0
 8004c46:	9306      	strmi	r3, [sp, #24]
 8004c48:	2300      	movmi	r3, #0
 8004c4a:	bf54      	ite	pl
 8004c4c:	9306      	strpl	r3, [sp, #24]
 8004c4e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004c50:	f1b9 0f00 	cmp.w	r9, #0
 8004c54:	db3c      	blt.n	8004cd0 <_dtoa_r+0x238>
 8004c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c58:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004c5c:	444b      	add	r3, r9
 8004c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c60:	2300      	movs	r3, #0
 8004c62:	930a      	str	r3, [sp, #40]	; 0x28
 8004c64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c66:	2b09      	cmp	r3, #9
 8004c68:	d86c      	bhi.n	8004d44 <_dtoa_r+0x2ac>
 8004c6a:	2b05      	cmp	r3, #5
 8004c6c:	bfc4      	itt	gt
 8004c6e:	3b04      	subgt	r3, #4
 8004c70:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004c72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c74:	bfc8      	it	gt
 8004c76:	2400      	movgt	r4, #0
 8004c78:	f1a3 0302 	sub.w	r3, r3, #2
 8004c7c:	bfd8      	it	le
 8004c7e:	2401      	movle	r4, #1
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	f200 808b 	bhi.w	8004d9c <_dtoa_r+0x304>
 8004c86:	e8df f003 	tbb	[pc, r3]
 8004c8a:	4f2d      	.short	0x4f2d
 8004c8c:	5b4d      	.short	0x5b4d
 8004c8e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004c92:	441c      	add	r4, r3
 8004c94:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	bfc3      	ittte	gt
 8004c9c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ca0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004ca4:	fa09 f303 	lslgt.w	r3, r9, r3
 8004ca8:	f1c3 0320 	rsble	r3, r3, #32
 8004cac:	bfc6      	itte	gt
 8004cae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004cb2:	4318      	orrgt	r0, r3
 8004cb4:	fa06 f003 	lslle.w	r0, r6, r3
 8004cb8:	f7fb fc00 	bl	80004bc <__aeabi_ui2d>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004cc2:	3c01      	subs	r4, #1
 8004cc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8004cc6:	e770      	b.n	8004baa <_dtoa_r+0x112>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e7b3      	b.n	8004c34 <_dtoa_r+0x19c>
 8004ccc:	900f      	str	r0, [sp, #60]	; 0x3c
 8004cce:	e7b2      	b.n	8004c36 <_dtoa_r+0x19e>
 8004cd0:	9b06      	ldr	r3, [sp, #24]
 8004cd2:	eba3 0309 	sub.w	r3, r3, r9
 8004cd6:	9306      	str	r3, [sp, #24]
 8004cd8:	f1c9 0300 	rsb	r3, r9, #0
 8004cdc:	930a      	str	r3, [sp, #40]	; 0x28
 8004cde:	2300      	movs	r3, #0
 8004ce0:	930e      	str	r3, [sp, #56]	; 0x38
 8004ce2:	e7bf      	b.n	8004c64 <_dtoa_r+0x1cc>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ce8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	dc59      	bgt.n	8004da2 <_dtoa_r+0x30a>
 8004cee:	f04f 0b01 	mov.w	fp, #1
 8004cf2:	465b      	mov	r3, fp
 8004cf4:	f8cd b008 	str.w	fp, [sp, #8]
 8004cf8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004d00:	6042      	str	r2, [r0, #4]
 8004d02:	2204      	movs	r2, #4
 8004d04:	f102 0614 	add.w	r6, r2, #20
 8004d08:	429e      	cmp	r6, r3
 8004d0a:	6841      	ldr	r1, [r0, #4]
 8004d0c:	d94f      	bls.n	8004dae <_dtoa_r+0x316>
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f000 fcd8 	bl	80056c4 <_Balloc>
 8004d14:	9008      	str	r0, [sp, #32]
 8004d16:	2800      	cmp	r0, #0
 8004d18:	d14d      	bne.n	8004db6 <_dtoa_r+0x31e>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d20:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <_dtoa_r+0x300>)
 8004d22:	e6cd      	b.n	8004ac0 <_dtoa_r+0x28>
 8004d24:	2301      	movs	r3, #1
 8004d26:	e7de      	b.n	8004ce6 <_dtoa_r+0x24e>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d2e:	eb09 0b03 	add.w	fp, r9, r3
 8004d32:	f10b 0301 	add.w	r3, fp, #1
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	9302      	str	r3, [sp, #8]
 8004d3a:	bfb8      	it	lt
 8004d3c:	2301      	movlt	r3, #1
 8004d3e:	e7dd      	b.n	8004cfc <_dtoa_r+0x264>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e7f2      	b.n	8004d2a <_dtoa_r+0x292>
 8004d44:	2401      	movs	r4, #1
 8004d46:	2300      	movs	r3, #0
 8004d48:	940b      	str	r4, [sp, #44]	; 0x2c
 8004d4a:	9322      	str	r3, [sp, #136]	; 0x88
 8004d4c:	f04f 3bff 	mov.w	fp, #4294967295
 8004d50:	2200      	movs	r2, #0
 8004d52:	2312      	movs	r3, #18
 8004d54:	f8cd b008 	str.w	fp, [sp, #8]
 8004d58:	9223      	str	r2, [sp, #140]	; 0x8c
 8004d5a:	e7cf      	b.n	8004cfc <_dtoa_r+0x264>
 8004d5c:	f3af 8000 	nop.w
 8004d60:	636f4361 	.word	0x636f4361
 8004d64:	3fd287a7 	.word	0x3fd287a7
 8004d68:	8b60c8b3 	.word	0x8b60c8b3
 8004d6c:	3fc68a28 	.word	0x3fc68a28
 8004d70:	509f79fb 	.word	0x509f79fb
 8004d74:	3fd34413 	.word	0x3fd34413
 8004d78:	08007165 	.word	0x08007165
 8004d7c:	0800717c 	.word	0x0800717c
 8004d80:	7ff00000 	.word	0x7ff00000
 8004d84:	08007161 	.word	0x08007161
 8004d88:	08007158 	.word	0x08007158
 8004d8c:	08007135 	.word	0x08007135
 8004d90:	3ff80000 	.word	0x3ff80000
 8004d94:	08007278 	.word	0x08007278
 8004d98:	080071db 	.word	0x080071db
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004da0:	e7d4      	b.n	8004d4c <_dtoa_r+0x2b4>
 8004da2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004da6:	465b      	mov	r3, fp
 8004da8:	f8cd b008 	str.w	fp, [sp, #8]
 8004dac:	e7a6      	b.n	8004cfc <_dtoa_r+0x264>
 8004dae:	3101      	adds	r1, #1
 8004db0:	6041      	str	r1, [r0, #4]
 8004db2:	0052      	lsls	r2, r2, #1
 8004db4:	e7a6      	b.n	8004d04 <_dtoa_r+0x26c>
 8004db6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004db8:	9a08      	ldr	r2, [sp, #32]
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	9b02      	ldr	r3, [sp, #8]
 8004dbe:	2b0e      	cmp	r3, #14
 8004dc0:	f200 80a8 	bhi.w	8004f14 <_dtoa_r+0x47c>
 8004dc4:	2c00      	cmp	r4, #0
 8004dc6:	f000 80a5 	beq.w	8004f14 <_dtoa_r+0x47c>
 8004dca:	f1b9 0f00 	cmp.w	r9, #0
 8004dce:	dd34      	ble.n	8004e3a <_dtoa_r+0x3a2>
 8004dd0:	4a9a      	ldr	r2, [pc, #616]	; (800503c <_dtoa_r+0x5a4>)
 8004dd2:	f009 030f 	and.w	r3, r9, #15
 8004dd6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004dda:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004dde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004de2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004de6:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004dea:	d016      	beq.n	8004e1a <_dtoa_r+0x382>
 8004dec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004df0:	4b93      	ldr	r3, [pc, #588]	; (8005040 <_dtoa_r+0x5a8>)
 8004df2:	2703      	movs	r7, #3
 8004df4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004df8:	f7fb fd04 	bl	8000804 <__aeabi_ddiv>
 8004dfc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e00:	f004 040f 	and.w	r4, r4, #15
 8004e04:	4e8e      	ldr	r6, [pc, #568]	; (8005040 <_dtoa_r+0x5a8>)
 8004e06:	b954      	cbnz	r4, 8004e1e <_dtoa_r+0x386>
 8004e08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e10:	f7fb fcf8 	bl	8000804 <__aeabi_ddiv>
 8004e14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e18:	e029      	b.n	8004e6e <_dtoa_r+0x3d6>
 8004e1a:	2702      	movs	r7, #2
 8004e1c:	e7f2      	b.n	8004e04 <_dtoa_r+0x36c>
 8004e1e:	07e1      	lsls	r1, r4, #31
 8004e20:	d508      	bpl.n	8004e34 <_dtoa_r+0x39c>
 8004e22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e2a:	f7fb fbc1 	bl	80005b0 <__aeabi_dmul>
 8004e2e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e32:	3701      	adds	r7, #1
 8004e34:	1064      	asrs	r4, r4, #1
 8004e36:	3608      	adds	r6, #8
 8004e38:	e7e5      	b.n	8004e06 <_dtoa_r+0x36e>
 8004e3a:	f000 80a5 	beq.w	8004f88 <_dtoa_r+0x4f0>
 8004e3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e42:	f1c9 0400 	rsb	r4, r9, #0
 8004e46:	4b7d      	ldr	r3, [pc, #500]	; (800503c <_dtoa_r+0x5a4>)
 8004e48:	f004 020f 	and.w	r2, r4, #15
 8004e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f7fb fbac 	bl	80005b0 <__aeabi_dmul>
 8004e58:	2702      	movs	r7, #2
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e60:	4e77      	ldr	r6, [pc, #476]	; (8005040 <_dtoa_r+0x5a8>)
 8004e62:	1124      	asrs	r4, r4, #4
 8004e64:	2c00      	cmp	r4, #0
 8004e66:	f040 8084 	bne.w	8004f72 <_dtoa_r+0x4da>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1d2      	bne.n	8004e14 <_dtoa_r+0x37c>
 8004e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f000 808b 	beq.w	8004f8c <_dtoa_r+0x4f4>
 8004e76:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e7a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e82:	2200      	movs	r2, #0
 8004e84:	4b6f      	ldr	r3, [pc, #444]	; (8005044 <_dtoa_r+0x5ac>)
 8004e86:	f7fb fe05 	bl	8000a94 <__aeabi_dcmplt>
 8004e8a:	2800      	cmp	r0, #0
 8004e8c:	d07e      	beq.n	8004f8c <_dtoa_r+0x4f4>
 8004e8e:	9b02      	ldr	r3, [sp, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d07b      	beq.n	8004f8c <_dtoa_r+0x4f4>
 8004e94:	f1bb 0f00 	cmp.w	fp, #0
 8004e98:	dd38      	ble.n	8004f0c <_dtoa_r+0x474>
 8004e9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	4b69      	ldr	r3, [pc, #420]	; (8005048 <_dtoa_r+0x5b0>)
 8004ea2:	f7fb fb85 	bl	80005b0 <__aeabi_dmul>
 8004ea6:	465c      	mov	r4, fp
 8004ea8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004eac:	f109 38ff 	add.w	r8, r9, #4294967295
 8004eb0:	3701      	adds	r7, #1
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	f7fb fb12 	bl	80004dc <__aeabi_i2d>
 8004eb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ebc:	f7fb fb78 	bl	80005b0 <__aeabi_dmul>
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4b62      	ldr	r3, [pc, #392]	; (800504c <_dtoa_r+0x5b4>)
 8004ec4:	f7fb f9be 	bl	8000244 <__adddf3>
 8004ec8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004ecc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ed0:	9611      	str	r6, [sp, #68]	; 0x44
 8004ed2:	2c00      	cmp	r4, #0
 8004ed4:	d15d      	bne.n	8004f92 <_dtoa_r+0x4fa>
 8004ed6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004eda:	2200      	movs	r2, #0
 8004edc:	4b5c      	ldr	r3, [pc, #368]	; (8005050 <_dtoa_r+0x5b8>)
 8004ede:	f7fb f9af 	bl	8000240 <__aeabi_dsub>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004eea:	4633      	mov	r3, r6
 8004eec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004eee:	f7fb fdef 	bl	8000ad0 <__aeabi_dcmpgt>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	f040 829e 	bne.w	8005434 <_dtoa_r+0x99c>
 8004ef8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004efc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004efe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004f02:	f7fb fdc7 	bl	8000a94 <__aeabi_dcmplt>
 8004f06:	2800      	cmp	r0, #0
 8004f08:	f040 8292 	bne.w	8005430 <_dtoa_r+0x998>
 8004f0c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004f10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f2c0 8153 	blt.w	80051c2 <_dtoa_r+0x72a>
 8004f1c:	f1b9 0f0e 	cmp.w	r9, #14
 8004f20:	f300 814f 	bgt.w	80051c2 <_dtoa_r+0x72a>
 8004f24:	4b45      	ldr	r3, [pc, #276]	; (800503c <_dtoa_r+0x5a4>)
 8004f26:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004f2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f2e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004f32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f280 80db 	bge.w	80050f0 <_dtoa_r+0x658>
 8004f3a:	9b02      	ldr	r3, [sp, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f300 80d7 	bgt.w	80050f0 <_dtoa_r+0x658>
 8004f42:	f040 8274 	bne.w	800542e <_dtoa_r+0x996>
 8004f46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	4b40      	ldr	r3, [pc, #256]	; (8005050 <_dtoa_r+0x5b8>)
 8004f4e:	f7fb fb2f 	bl	80005b0 <__aeabi_dmul>
 8004f52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f56:	f7fb fdb1 	bl	8000abc <__aeabi_dcmpge>
 8004f5a:	9c02      	ldr	r4, [sp, #8]
 8004f5c:	4626      	mov	r6, r4
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	f040 824a 	bne.w	80053f8 <_dtoa_r+0x960>
 8004f64:	2331      	movs	r3, #49	; 0x31
 8004f66:	9f08      	ldr	r7, [sp, #32]
 8004f68:	f109 0901 	add.w	r9, r9, #1
 8004f6c:	f807 3b01 	strb.w	r3, [r7], #1
 8004f70:	e246      	b.n	8005400 <_dtoa_r+0x968>
 8004f72:	07e2      	lsls	r2, r4, #31
 8004f74:	d505      	bpl.n	8004f82 <_dtoa_r+0x4ea>
 8004f76:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f7a:	f7fb fb19 	bl	80005b0 <__aeabi_dmul>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	3701      	adds	r7, #1
 8004f82:	1064      	asrs	r4, r4, #1
 8004f84:	3608      	adds	r6, #8
 8004f86:	e76d      	b.n	8004e64 <_dtoa_r+0x3cc>
 8004f88:	2702      	movs	r7, #2
 8004f8a:	e770      	b.n	8004e6e <_dtoa_r+0x3d6>
 8004f8c:	46c8      	mov	r8, r9
 8004f8e:	9c02      	ldr	r4, [sp, #8]
 8004f90:	e78f      	b.n	8004eb2 <_dtoa_r+0x41a>
 8004f92:	9908      	ldr	r1, [sp, #32]
 8004f94:	4b29      	ldr	r3, [pc, #164]	; (800503c <_dtoa_r+0x5a4>)
 8004f96:	4421      	add	r1, r4
 8004f98:	9112      	str	r1, [sp, #72]	; 0x48
 8004f9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fa0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004fa4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fa8:	2900      	cmp	r1, #0
 8004faa:	d055      	beq.n	8005058 <_dtoa_r+0x5c0>
 8004fac:	2000      	movs	r0, #0
 8004fae:	4929      	ldr	r1, [pc, #164]	; (8005054 <_dtoa_r+0x5bc>)
 8004fb0:	f7fb fc28 	bl	8000804 <__aeabi_ddiv>
 8004fb4:	463b      	mov	r3, r7
 8004fb6:	4632      	mov	r2, r6
 8004fb8:	f7fb f942 	bl	8000240 <__aeabi_dsub>
 8004fbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fc0:	9f08      	ldr	r7, [sp, #32]
 8004fc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fc6:	f7fb fda3 	bl	8000b10 <__aeabi_d2iz>
 8004fca:	4604      	mov	r4, r0
 8004fcc:	f7fb fa86 	bl	80004dc <__aeabi_i2d>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fd8:	f7fb f932 	bl	8000240 <__aeabi_dsub>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	3430      	adds	r4, #48	; 0x30
 8004fe2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004fe6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fea:	f807 4b01 	strb.w	r4, [r7], #1
 8004fee:	f7fb fd51 	bl	8000a94 <__aeabi_dcmplt>
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	d174      	bne.n	80050e0 <_dtoa_r+0x648>
 8004ff6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	4911      	ldr	r1, [pc, #68]	; (8005044 <_dtoa_r+0x5ac>)
 8004ffe:	f7fb f91f 	bl	8000240 <__aeabi_dsub>
 8005002:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005006:	f7fb fd45 	bl	8000a94 <__aeabi_dcmplt>
 800500a:	2800      	cmp	r0, #0
 800500c:	f040 80b6 	bne.w	800517c <_dtoa_r+0x6e4>
 8005010:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005012:	429f      	cmp	r7, r3
 8005014:	f43f af7a 	beq.w	8004f0c <_dtoa_r+0x474>
 8005018:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800501c:	2200      	movs	r2, #0
 800501e:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <_dtoa_r+0x5b0>)
 8005020:	f7fb fac6 	bl	80005b0 <__aeabi_dmul>
 8005024:	2200      	movs	r2, #0
 8005026:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800502a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800502e:	4b06      	ldr	r3, [pc, #24]	; (8005048 <_dtoa_r+0x5b0>)
 8005030:	f7fb fabe 	bl	80005b0 <__aeabi_dmul>
 8005034:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005038:	e7c3      	b.n	8004fc2 <_dtoa_r+0x52a>
 800503a:	bf00      	nop
 800503c:	08007278 	.word	0x08007278
 8005040:	08007250 	.word	0x08007250
 8005044:	3ff00000 	.word	0x3ff00000
 8005048:	40240000 	.word	0x40240000
 800504c:	401c0000 	.word	0x401c0000
 8005050:	40140000 	.word	0x40140000
 8005054:	3fe00000 	.word	0x3fe00000
 8005058:	4630      	mov	r0, r6
 800505a:	4639      	mov	r1, r7
 800505c:	f7fb faa8 	bl	80005b0 <__aeabi_dmul>
 8005060:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005062:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005066:	9c08      	ldr	r4, [sp, #32]
 8005068:	9314      	str	r3, [sp, #80]	; 0x50
 800506a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800506e:	f7fb fd4f 	bl	8000b10 <__aeabi_d2iz>
 8005072:	9015      	str	r0, [sp, #84]	; 0x54
 8005074:	f7fb fa32 	bl	80004dc <__aeabi_i2d>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005080:	f7fb f8de 	bl	8000240 <__aeabi_dsub>
 8005084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005086:	4606      	mov	r6, r0
 8005088:	3330      	adds	r3, #48	; 0x30
 800508a:	f804 3b01 	strb.w	r3, [r4], #1
 800508e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005090:	460f      	mov	r7, r1
 8005092:	429c      	cmp	r4, r3
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	d124      	bne.n	80050e4 <_dtoa_r+0x64c>
 800509a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800509e:	4bb3      	ldr	r3, [pc, #716]	; (800536c <_dtoa_r+0x8d4>)
 80050a0:	f7fb f8d0 	bl	8000244 <__adddf3>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4630      	mov	r0, r6
 80050aa:	4639      	mov	r1, r7
 80050ac:	f7fb fd10 	bl	8000ad0 <__aeabi_dcmpgt>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d162      	bne.n	800517a <_dtoa_r+0x6e2>
 80050b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050b8:	2000      	movs	r0, #0
 80050ba:	49ac      	ldr	r1, [pc, #688]	; (800536c <_dtoa_r+0x8d4>)
 80050bc:	f7fb f8c0 	bl	8000240 <__aeabi_dsub>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4630      	mov	r0, r6
 80050c6:	4639      	mov	r1, r7
 80050c8:	f7fb fce4 	bl	8000a94 <__aeabi_dcmplt>
 80050cc:	2800      	cmp	r0, #0
 80050ce:	f43f af1d 	beq.w	8004f0c <_dtoa_r+0x474>
 80050d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80050d4:	1e7b      	subs	r3, r7, #1
 80050d6:	9314      	str	r3, [sp, #80]	; 0x50
 80050d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80050dc:	2b30      	cmp	r3, #48	; 0x30
 80050de:	d0f8      	beq.n	80050d2 <_dtoa_r+0x63a>
 80050e0:	46c1      	mov	r9, r8
 80050e2:	e03a      	b.n	800515a <_dtoa_r+0x6c2>
 80050e4:	4ba2      	ldr	r3, [pc, #648]	; (8005370 <_dtoa_r+0x8d8>)
 80050e6:	f7fb fa63 	bl	80005b0 <__aeabi_dmul>
 80050ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050ee:	e7bc      	b.n	800506a <_dtoa_r+0x5d2>
 80050f0:	9f08      	ldr	r7, [sp, #32]
 80050f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050fa:	f7fb fb83 	bl	8000804 <__aeabi_ddiv>
 80050fe:	f7fb fd07 	bl	8000b10 <__aeabi_d2iz>
 8005102:	4604      	mov	r4, r0
 8005104:	f7fb f9ea 	bl	80004dc <__aeabi_i2d>
 8005108:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800510c:	f7fb fa50 	bl	80005b0 <__aeabi_dmul>
 8005110:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005114:	460b      	mov	r3, r1
 8005116:	4602      	mov	r2, r0
 8005118:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800511c:	f7fb f890 	bl	8000240 <__aeabi_dsub>
 8005120:	f807 6b01 	strb.w	r6, [r7], #1
 8005124:	9e08      	ldr	r6, [sp, #32]
 8005126:	9b02      	ldr	r3, [sp, #8]
 8005128:	1bbe      	subs	r6, r7, r6
 800512a:	42b3      	cmp	r3, r6
 800512c:	d13a      	bne.n	80051a4 <_dtoa_r+0x70c>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	f7fb f887 	bl	8000244 <__adddf3>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800513e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005142:	f7fb fcc5 	bl	8000ad0 <__aeabi_dcmpgt>
 8005146:	bb58      	cbnz	r0, 80051a0 <_dtoa_r+0x708>
 8005148:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800514c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005150:	f7fb fc96 	bl	8000a80 <__aeabi_dcmpeq>
 8005154:	b108      	cbz	r0, 800515a <_dtoa_r+0x6c2>
 8005156:	07e1      	lsls	r1, r4, #31
 8005158:	d422      	bmi.n	80051a0 <_dtoa_r+0x708>
 800515a:	4628      	mov	r0, r5
 800515c:	4651      	mov	r1, sl
 800515e:	f000 faf1 	bl	8005744 <_Bfree>
 8005162:	2300      	movs	r3, #0
 8005164:	703b      	strb	r3, [r7, #0]
 8005166:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005168:	f109 0001 	add.w	r0, r9, #1
 800516c:	6018      	str	r0, [r3, #0]
 800516e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005170:	2b00      	cmp	r3, #0
 8005172:	f43f acdf 	beq.w	8004b34 <_dtoa_r+0x9c>
 8005176:	601f      	str	r7, [r3, #0]
 8005178:	e4dc      	b.n	8004b34 <_dtoa_r+0x9c>
 800517a:	4627      	mov	r7, r4
 800517c:	463b      	mov	r3, r7
 800517e:	461f      	mov	r7, r3
 8005180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005184:	2a39      	cmp	r2, #57	; 0x39
 8005186:	d107      	bne.n	8005198 <_dtoa_r+0x700>
 8005188:	9a08      	ldr	r2, [sp, #32]
 800518a:	429a      	cmp	r2, r3
 800518c:	d1f7      	bne.n	800517e <_dtoa_r+0x6e6>
 800518e:	2230      	movs	r2, #48	; 0x30
 8005190:	9908      	ldr	r1, [sp, #32]
 8005192:	f108 0801 	add.w	r8, r8, #1
 8005196:	700a      	strb	r2, [r1, #0]
 8005198:	781a      	ldrb	r2, [r3, #0]
 800519a:	3201      	adds	r2, #1
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	e79f      	b.n	80050e0 <_dtoa_r+0x648>
 80051a0:	46c8      	mov	r8, r9
 80051a2:	e7eb      	b.n	800517c <_dtoa_r+0x6e4>
 80051a4:	2200      	movs	r2, #0
 80051a6:	4b72      	ldr	r3, [pc, #456]	; (8005370 <_dtoa_r+0x8d8>)
 80051a8:	f7fb fa02 	bl	80005b0 <__aeabi_dmul>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051b4:	2200      	movs	r2, #0
 80051b6:	2300      	movs	r3, #0
 80051b8:	f7fb fc62 	bl	8000a80 <__aeabi_dcmpeq>
 80051bc:	2800      	cmp	r0, #0
 80051be:	d098      	beq.n	80050f2 <_dtoa_r+0x65a>
 80051c0:	e7cb      	b.n	800515a <_dtoa_r+0x6c2>
 80051c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051c4:	2a00      	cmp	r2, #0
 80051c6:	f000 80cd 	beq.w	8005364 <_dtoa_r+0x8cc>
 80051ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80051cc:	2a01      	cmp	r2, #1
 80051ce:	f300 80af 	bgt.w	8005330 <_dtoa_r+0x898>
 80051d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80051d4:	2a00      	cmp	r2, #0
 80051d6:	f000 80a7 	beq.w	8005328 <_dtoa_r+0x890>
 80051da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80051e0:	9f06      	ldr	r7, [sp, #24]
 80051e2:	9a06      	ldr	r2, [sp, #24]
 80051e4:	2101      	movs	r1, #1
 80051e6:	441a      	add	r2, r3
 80051e8:	9206      	str	r2, [sp, #24]
 80051ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ec:	4628      	mov	r0, r5
 80051ee:	441a      	add	r2, r3
 80051f0:	9209      	str	r2, [sp, #36]	; 0x24
 80051f2:	f000 fb61 	bl	80058b8 <__i2b>
 80051f6:	4606      	mov	r6, r0
 80051f8:	2f00      	cmp	r7, #0
 80051fa:	dd0c      	ble.n	8005216 <_dtoa_r+0x77e>
 80051fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051fe:	2b00      	cmp	r3, #0
 8005200:	dd09      	ble.n	8005216 <_dtoa_r+0x77e>
 8005202:	42bb      	cmp	r3, r7
 8005204:	bfa8      	it	ge
 8005206:	463b      	movge	r3, r7
 8005208:	9a06      	ldr	r2, [sp, #24]
 800520a:	1aff      	subs	r7, r7, r3
 800520c:	1ad2      	subs	r2, r2, r3
 800520e:	9206      	str	r2, [sp, #24]
 8005210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	9309      	str	r3, [sp, #36]	; 0x24
 8005216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005218:	b1f3      	cbz	r3, 8005258 <_dtoa_r+0x7c0>
 800521a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80a9 	beq.w	8005374 <_dtoa_r+0x8dc>
 8005222:	2c00      	cmp	r4, #0
 8005224:	dd10      	ble.n	8005248 <_dtoa_r+0x7b0>
 8005226:	4631      	mov	r1, r6
 8005228:	4622      	mov	r2, r4
 800522a:	4628      	mov	r0, r5
 800522c:	f000 fbfe 	bl	8005a2c <__pow5mult>
 8005230:	4652      	mov	r2, sl
 8005232:	4601      	mov	r1, r0
 8005234:	4606      	mov	r6, r0
 8005236:	4628      	mov	r0, r5
 8005238:	f000 fb54 	bl	80058e4 <__multiply>
 800523c:	4680      	mov	r8, r0
 800523e:	4651      	mov	r1, sl
 8005240:	4628      	mov	r0, r5
 8005242:	f000 fa7f 	bl	8005744 <_Bfree>
 8005246:	46c2      	mov	sl, r8
 8005248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800524a:	1b1a      	subs	r2, r3, r4
 800524c:	d004      	beq.n	8005258 <_dtoa_r+0x7c0>
 800524e:	4651      	mov	r1, sl
 8005250:	4628      	mov	r0, r5
 8005252:	f000 fbeb 	bl	8005a2c <__pow5mult>
 8005256:	4682      	mov	sl, r0
 8005258:	2101      	movs	r1, #1
 800525a:	4628      	mov	r0, r5
 800525c:	f000 fb2c 	bl	80058b8 <__i2b>
 8005260:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005262:	4604      	mov	r4, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	f340 8087 	ble.w	8005378 <_dtoa_r+0x8e0>
 800526a:	461a      	mov	r2, r3
 800526c:	4601      	mov	r1, r0
 800526e:	4628      	mov	r0, r5
 8005270:	f000 fbdc 	bl	8005a2c <__pow5mult>
 8005274:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005276:	4604      	mov	r4, r0
 8005278:	2b01      	cmp	r3, #1
 800527a:	f340 8080 	ble.w	800537e <_dtoa_r+0x8e6>
 800527e:	f04f 0800 	mov.w	r8, #0
 8005282:	6923      	ldr	r3, [r4, #16]
 8005284:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005288:	6918      	ldr	r0, [r3, #16]
 800528a:	f000 fac7 	bl	800581c <__hi0bits>
 800528e:	f1c0 0020 	rsb	r0, r0, #32
 8005292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005294:	4418      	add	r0, r3
 8005296:	f010 001f 	ands.w	r0, r0, #31
 800529a:	f000 8092 	beq.w	80053c2 <_dtoa_r+0x92a>
 800529e:	f1c0 0320 	rsb	r3, r0, #32
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	f340 808a 	ble.w	80053bc <_dtoa_r+0x924>
 80052a8:	f1c0 001c 	rsb	r0, r0, #28
 80052ac:	9b06      	ldr	r3, [sp, #24]
 80052ae:	4407      	add	r7, r0
 80052b0:	4403      	add	r3, r0
 80052b2:	9306      	str	r3, [sp, #24]
 80052b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b6:	4403      	add	r3, r0
 80052b8:	9309      	str	r3, [sp, #36]	; 0x24
 80052ba:	9b06      	ldr	r3, [sp, #24]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	dd05      	ble.n	80052cc <_dtoa_r+0x834>
 80052c0:	4651      	mov	r1, sl
 80052c2:	461a      	mov	r2, r3
 80052c4:	4628      	mov	r0, r5
 80052c6:	f000 fc0b 	bl	8005ae0 <__lshift>
 80052ca:	4682      	mov	sl, r0
 80052cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	dd05      	ble.n	80052de <_dtoa_r+0x846>
 80052d2:	4621      	mov	r1, r4
 80052d4:	461a      	mov	r2, r3
 80052d6:	4628      	mov	r0, r5
 80052d8:	f000 fc02 	bl	8005ae0 <__lshift>
 80052dc:	4604      	mov	r4, r0
 80052de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d070      	beq.n	80053c6 <_dtoa_r+0x92e>
 80052e4:	4621      	mov	r1, r4
 80052e6:	4650      	mov	r0, sl
 80052e8:	f000 fc66 	bl	8005bb8 <__mcmp>
 80052ec:	2800      	cmp	r0, #0
 80052ee:	da6a      	bge.n	80053c6 <_dtoa_r+0x92e>
 80052f0:	2300      	movs	r3, #0
 80052f2:	4651      	mov	r1, sl
 80052f4:	220a      	movs	r2, #10
 80052f6:	4628      	mov	r0, r5
 80052f8:	f000 fa46 	bl	8005788 <__multadd>
 80052fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052fe:	4682      	mov	sl, r0
 8005300:	f109 39ff 	add.w	r9, r9, #4294967295
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8193 	beq.w	8005630 <_dtoa_r+0xb98>
 800530a:	4631      	mov	r1, r6
 800530c:	2300      	movs	r3, #0
 800530e:	220a      	movs	r2, #10
 8005310:	4628      	mov	r0, r5
 8005312:	f000 fa39 	bl	8005788 <__multadd>
 8005316:	f1bb 0f00 	cmp.w	fp, #0
 800531a:	4606      	mov	r6, r0
 800531c:	f300 8093 	bgt.w	8005446 <_dtoa_r+0x9ae>
 8005320:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005322:	2b02      	cmp	r3, #2
 8005324:	dc57      	bgt.n	80053d6 <_dtoa_r+0x93e>
 8005326:	e08e      	b.n	8005446 <_dtoa_r+0x9ae>
 8005328:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800532a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800532e:	e756      	b.n	80051de <_dtoa_r+0x746>
 8005330:	9b02      	ldr	r3, [sp, #8]
 8005332:	1e5c      	subs	r4, r3, #1
 8005334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005336:	42a3      	cmp	r3, r4
 8005338:	bfb7      	itett	lt
 800533a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800533c:	1b1c      	subge	r4, r3, r4
 800533e:	1ae2      	sublt	r2, r4, r3
 8005340:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005342:	bfbe      	ittt	lt
 8005344:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005346:	189b      	addlt	r3, r3, r2
 8005348:	930e      	strlt	r3, [sp, #56]	; 0x38
 800534a:	9b02      	ldr	r3, [sp, #8]
 800534c:	bfb8      	it	lt
 800534e:	2400      	movlt	r4, #0
 8005350:	2b00      	cmp	r3, #0
 8005352:	bfbb      	ittet	lt
 8005354:	9b06      	ldrlt	r3, [sp, #24]
 8005356:	9a02      	ldrlt	r2, [sp, #8]
 8005358:	9f06      	ldrge	r7, [sp, #24]
 800535a:	1a9f      	sublt	r7, r3, r2
 800535c:	bfac      	ite	ge
 800535e:	9b02      	ldrge	r3, [sp, #8]
 8005360:	2300      	movlt	r3, #0
 8005362:	e73e      	b.n	80051e2 <_dtoa_r+0x74a>
 8005364:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005366:	9f06      	ldr	r7, [sp, #24]
 8005368:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800536a:	e745      	b.n	80051f8 <_dtoa_r+0x760>
 800536c:	3fe00000 	.word	0x3fe00000
 8005370:	40240000 	.word	0x40240000
 8005374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005376:	e76a      	b.n	800524e <_dtoa_r+0x7b6>
 8005378:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800537a:	2b01      	cmp	r3, #1
 800537c:	dc19      	bgt.n	80053b2 <_dtoa_r+0x91a>
 800537e:	9b04      	ldr	r3, [sp, #16]
 8005380:	b9bb      	cbnz	r3, 80053b2 <_dtoa_r+0x91a>
 8005382:	9b05      	ldr	r3, [sp, #20]
 8005384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005388:	b99b      	cbnz	r3, 80053b2 <_dtoa_r+0x91a>
 800538a:	9b05      	ldr	r3, [sp, #20]
 800538c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005390:	0d1b      	lsrs	r3, r3, #20
 8005392:	051b      	lsls	r3, r3, #20
 8005394:	b183      	cbz	r3, 80053b8 <_dtoa_r+0x920>
 8005396:	f04f 0801 	mov.w	r8, #1
 800539a:	9b06      	ldr	r3, [sp, #24]
 800539c:	3301      	adds	r3, #1
 800539e:	9306      	str	r3, [sp, #24]
 80053a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a2:	3301      	adds	r3, #1
 80053a4:	9309      	str	r3, [sp, #36]	; 0x24
 80053a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f47f af6a 	bne.w	8005282 <_dtoa_r+0x7ea>
 80053ae:	2001      	movs	r0, #1
 80053b0:	e76f      	b.n	8005292 <_dtoa_r+0x7fa>
 80053b2:	f04f 0800 	mov.w	r8, #0
 80053b6:	e7f6      	b.n	80053a6 <_dtoa_r+0x90e>
 80053b8:	4698      	mov	r8, r3
 80053ba:	e7f4      	b.n	80053a6 <_dtoa_r+0x90e>
 80053bc:	f43f af7d 	beq.w	80052ba <_dtoa_r+0x822>
 80053c0:	4618      	mov	r0, r3
 80053c2:	301c      	adds	r0, #28
 80053c4:	e772      	b.n	80052ac <_dtoa_r+0x814>
 80053c6:	9b02      	ldr	r3, [sp, #8]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	dc36      	bgt.n	800543a <_dtoa_r+0x9a2>
 80053cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	dd33      	ble.n	800543a <_dtoa_r+0x9a2>
 80053d2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80053d6:	f1bb 0f00 	cmp.w	fp, #0
 80053da:	d10d      	bne.n	80053f8 <_dtoa_r+0x960>
 80053dc:	4621      	mov	r1, r4
 80053de:	465b      	mov	r3, fp
 80053e0:	2205      	movs	r2, #5
 80053e2:	4628      	mov	r0, r5
 80053e4:	f000 f9d0 	bl	8005788 <__multadd>
 80053e8:	4601      	mov	r1, r0
 80053ea:	4604      	mov	r4, r0
 80053ec:	4650      	mov	r0, sl
 80053ee:	f000 fbe3 	bl	8005bb8 <__mcmp>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	f73f adb6 	bgt.w	8004f64 <_dtoa_r+0x4cc>
 80053f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80053fa:	9f08      	ldr	r7, [sp, #32]
 80053fc:	ea6f 0903 	mvn.w	r9, r3
 8005400:	f04f 0800 	mov.w	r8, #0
 8005404:	4621      	mov	r1, r4
 8005406:	4628      	mov	r0, r5
 8005408:	f000 f99c 	bl	8005744 <_Bfree>
 800540c:	2e00      	cmp	r6, #0
 800540e:	f43f aea4 	beq.w	800515a <_dtoa_r+0x6c2>
 8005412:	f1b8 0f00 	cmp.w	r8, #0
 8005416:	d005      	beq.n	8005424 <_dtoa_r+0x98c>
 8005418:	45b0      	cmp	r8, r6
 800541a:	d003      	beq.n	8005424 <_dtoa_r+0x98c>
 800541c:	4641      	mov	r1, r8
 800541e:	4628      	mov	r0, r5
 8005420:	f000 f990 	bl	8005744 <_Bfree>
 8005424:	4631      	mov	r1, r6
 8005426:	4628      	mov	r0, r5
 8005428:	f000 f98c 	bl	8005744 <_Bfree>
 800542c:	e695      	b.n	800515a <_dtoa_r+0x6c2>
 800542e:	2400      	movs	r4, #0
 8005430:	4626      	mov	r6, r4
 8005432:	e7e1      	b.n	80053f8 <_dtoa_r+0x960>
 8005434:	46c1      	mov	r9, r8
 8005436:	4626      	mov	r6, r4
 8005438:	e594      	b.n	8004f64 <_dtoa_r+0x4cc>
 800543a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800543c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f000 80fc 	beq.w	800563e <_dtoa_r+0xba6>
 8005446:	2f00      	cmp	r7, #0
 8005448:	dd05      	ble.n	8005456 <_dtoa_r+0x9be>
 800544a:	4631      	mov	r1, r6
 800544c:	463a      	mov	r2, r7
 800544e:	4628      	mov	r0, r5
 8005450:	f000 fb46 	bl	8005ae0 <__lshift>
 8005454:	4606      	mov	r6, r0
 8005456:	f1b8 0f00 	cmp.w	r8, #0
 800545a:	d05c      	beq.n	8005516 <_dtoa_r+0xa7e>
 800545c:	4628      	mov	r0, r5
 800545e:	6871      	ldr	r1, [r6, #4]
 8005460:	f000 f930 	bl	80056c4 <_Balloc>
 8005464:	4607      	mov	r7, r0
 8005466:	b928      	cbnz	r0, 8005474 <_dtoa_r+0x9dc>
 8005468:	4602      	mov	r2, r0
 800546a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800546e:	4b7e      	ldr	r3, [pc, #504]	; (8005668 <_dtoa_r+0xbd0>)
 8005470:	f7ff bb26 	b.w	8004ac0 <_dtoa_r+0x28>
 8005474:	6932      	ldr	r2, [r6, #16]
 8005476:	f106 010c 	add.w	r1, r6, #12
 800547a:	3202      	adds	r2, #2
 800547c:	0092      	lsls	r2, r2, #2
 800547e:	300c      	adds	r0, #12
 8005480:	f000 f912 	bl	80056a8 <memcpy>
 8005484:	2201      	movs	r2, #1
 8005486:	4639      	mov	r1, r7
 8005488:	4628      	mov	r0, r5
 800548a:	f000 fb29 	bl	8005ae0 <__lshift>
 800548e:	46b0      	mov	r8, r6
 8005490:	4606      	mov	r6, r0
 8005492:	9b08      	ldr	r3, [sp, #32]
 8005494:	3301      	adds	r3, #1
 8005496:	9302      	str	r3, [sp, #8]
 8005498:	9b08      	ldr	r3, [sp, #32]
 800549a:	445b      	add	r3, fp
 800549c:	930a      	str	r3, [sp, #40]	; 0x28
 800549e:	9b04      	ldr	r3, [sp, #16]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	9309      	str	r3, [sp, #36]	; 0x24
 80054a6:	9b02      	ldr	r3, [sp, #8]
 80054a8:	4621      	mov	r1, r4
 80054aa:	4650      	mov	r0, sl
 80054ac:	f103 3bff 	add.w	fp, r3, #4294967295
 80054b0:	f7ff fa64 	bl	800497c <quorem>
 80054b4:	4603      	mov	r3, r0
 80054b6:	4641      	mov	r1, r8
 80054b8:	3330      	adds	r3, #48	; 0x30
 80054ba:	9004      	str	r0, [sp, #16]
 80054bc:	4650      	mov	r0, sl
 80054be:	930b      	str	r3, [sp, #44]	; 0x2c
 80054c0:	f000 fb7a 	bl	8005bb8 <__mcmp>
 80054c4:	4632      	mov	r2, r6
 80054c6:	9006      	str	r0, [sp, #24]
 80054c8:	4621      	mov	r1, r4
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 fb90 	bl	8005bf0 <__mdiff>
 80054d0:	68c2      	ldr	r2, [r0, #12]
 80054d2:	4607      	mov	r7, r0
 80054d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054d6:	bb02      	cbnz	r2, 800551a <_dtoa_r+0xa82>
 80054d8:	4601      	mov	r1, r0
 80054da:	4650      	mov	r0, sl
 80054dc:	f000 fb6c 	bl	8005bb8 <__mcmp>
 80054e0:	4602      	mov	r2, r0
 80054e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054e4:	4639      	mov	r1, r7
 80054e6:	4628      	mov	r0, r5
 80054e8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80054ec:	f000 f92a 	bl	8005744 <_Bfree>
 80054f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054f4:	9f02      	ldr	r7, [sp, #8]
 80054f6:	ea43 0102 	orr.w	r1, r3, r2
 80054fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054fc:	430b      	orrs	r3, r1
 80054fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005500:	d10d      	bne.n	800551e <_dtoa_r+0xa86>
 8005502:	2b39      	cmp	r3, #57	; 0x39
 8005504:	d027      	beq.n	8005556 <_dtoa_r+0xabe>
 8005506:	9a06      	ldr	r2, [sp, #24]
 8005508:	2a00      	cmp	r2, #0
 800550a:	dd01      	ble.n	8005510 <_dtoa_r+0xa78>
 800550c:	9b04      	ldr	r3, [sp, #16]
 800550e:	3331      	adds	r3, #49	; 0x31
 8005510:	f88b 3000 	strb.w	r3, [fp]
 8005514:	e776      	b.n	8005404 <_dtoa_r+0x96c>
 8005516:	4630      	mov	r0, r6
 8005518:	e7b9      	b.n	800548e <_dtoa_r+0x9f6>
 800551a:	2201      	movs	r2, #1
 800551c:	e7e2      	b.n	80054e4 <_dtoa_r+0xa4c>
 800551e:	9906      	ldr	r1, [sp, #24]
 8005520:	2900      	cmp	r1, #0
 8005522:	db04      	blt.n	800552e <_dtoa_r+0xa96>
 8005524:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005526:	4301      	orrs	r1, r0
 8005528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800552a:	4301      	orrs	r1, r0
 800552c:	d120      	bne.n	8005570 <_dtoa_r+0xad8>
 800552e:	2a00      	cmp	r2, #0
 8005530:	ddee      	ble.n	8005510 <_dtoa_r+0xa78>
 8005532:	4651      	mov	r1, sl
 8005534:	2201      	movs	r2, #1
 8005536:	4628      	mov	r0, r5
 8005538:	9302      	str	r3, [sp, #8]
 800553a:	f000 fad1 	bl	8005ae0 <__lshift>
 800553e:	4621      	mov	r1, r4
 8005540:	4682      	mov	sl, r0
 8005542:	f000 fb39 	bl	8005bb8 <__mcmp>
 8005546:	2800      	cmp	r0, #0
 8005548:	9b02      	ldr	r3, [sp, #8]
 800554a:	dc02      	bgt.n	8005552 <_dtoa_r+0xaba>
 800554c:	d1e0      	bne.n	8005510 <_dtoa_r+0xa78>
 800554e:	07da      	lsls	r2, r3, #31
 8005550:	d5de      	bpl.n	8005510 <_dtoa_r+0xa78>
 8005552:	2b39      	cmp	r3, #57	; 0x39
 8005554:	d1da      	bne.n	800550c <_dtoa_r+0xa74>
 8005556:	2339      	movs	r3, #57	; 0x39
 8005558:	f88b 3000 	strb.w	r3, [fp]
 800555c:	463b      	mov	r3, r7
 800555e:	461f      	mov	r7, r3
 8005560:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005564:	3b01      	subs	r3, #1
 8005566:	2a39      	cmp	r2, #57	; 0x39
 8005568:	d050      	beq.n	800560c <_dtoa_r+0xb74>
 800556a:	3201      	adds	r2, #1
 800556c:	701a      	strb	r2, [r3, #0]
 800556e:	e749      	b.n	8005404 <_dtoa_r+0x96c>
 8005570:	2a00      	cmp	r2, #0
 8005572:	dd03      	ble.n	800557c <_dtoa_r+0xae4>
 8005574:	2b39      	cmp	r3, #57	; 0x39
 8005576:	d0ee      	beq.n	8005556 <_dtoa_r+0xabe>
 8005578:	3301      	adds	r3, #1
 800557a:	e7c9      	b.n	8005510 <_dtoa_r+0xa78>
 800557c:	9a02      	ldr	r2, [sp, #8]
 800557e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005580:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005584:	428a      	cmp	r2, r1
 8005586:	d02a      	beq.n	80055de <_dtoa_r+0xb46>
 8005588:	4651      	mov	r1, sl
 800558a:	2300      	movs	r3, #0
 800558c:	220a      	movs	r2, #10
 800558e:	4628      	mov	r0, r5
 8005590:	f000 f8fa 	bl	8005788 <__multadd>
 8005594:	45b0      	cmp	r8, r6
 8005596:	4682      	mov	sl, r0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	f04f 020a 	mov.w	r2, #10
 80055a0:	4641      	mov	r1, r8
 80055a2:	4628      	mov	r0, r5
 80055a4:	d107      	bne.n	80055b6 <_dtoa_r+0xb1e>
 80055a6:	f000 f8ef 	bl	8005788 <__multadd>
 80055aa:	4680      	mov	r8, r0
 80055ac:	4606      	mov	r6, r0
 80055ae:	9b02      	ldr	r3, [sp, #8]
 80055b0:	3301      	adds	r3, #1
 80055b2:	9302      	str	r3, [sp, #8]
 80055b4:	e777      	b.n	80054a6 <_dtoa_r+0xa0e>
 80055b6:	f000 f8e7 	bl	8005788 <__multadd>
 80055ba:	4631      	mov	r1, r6
 80055bc:	4680      	mov	r8, r0
 80055be:	2300      	movs	r3, #0
 80055c0:	220a      	movs	r2, #10
 80055c2:	4628      	mov	r0, r5
 80055c4:	f000 f8e0 	bl	8005788 <__multadd>
 80055c8:	4606      	mov	r6, r0
 80055ca:	e7f0      	b.n	80055ae <_dtoa_r+0xb16>
 80055cc:	f1bb 0f00 	cmp.w	fp, #0
 80055d0:	bfcc      	ite	gt
 80055d2:	465f      	movgt	r7, fp
 80055d4:	2701      	movle	r7, #1
 80055d6:	f04f 0800 	mov.w	r8, #0
 80055da:	9a08      	ldr	r2, [sp, #32]
 80055dc:	4417      	add	r7, r2
 80055de:	4651      	mov	r1, sl
 80055e0:	2201      	movs	r2, #1
 80055e2:	4628      	mov	r0, r5
 80055e4:	9302      	str	r3, [sp, #8]
 80055e6:	f000 fa7b 	bl	8005ae0 <__lshift>
 80055ea:	4621      	mov	r1, r4
 80055ec:	4682      	mov	sl, r0
 80055ee:	f000 fae3 	bl	8005bb8 <__mcmp>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	dcb2      	bgt.n	800555c <_dtoa_r+0xac4>
 80055f6:	d102      	bne.n	80055fe <_dtoa_r+0xb66>
 80055f8:	9b02      	ldr	r3, [sp, #8]
 80055fa:	07db      	lsls	r3, r3, #31
 80055fc:	d4ae      	bmi.n	800555c <_dtoa_r+0xac4>
 80055fe:	463b      	mov	r3, r7
 8005600:	461f      	mov	r7, r3
 8005602:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005606:	2a30      	cmp	r2, #48	; 0x30
 8005608:	d0fa      	beq.n	8005600 <_dtoa_r+0xb68>
 800560a:	e6fb      	b.n	8005404 <_dtoa_r+0x96c>
 800560c:	9a08      	ldr	r2, [sp, #32]
 800560e:	429a      	cmp	r2, r3
 8005610:	d1a5      	bne.n	800555e <_dtoa_r+0xac6>
 8005612:	2331      	movs	r3, #49	; 0x31
 8005614:	f109 0901 	add.w	r9, r9, #1
 8005618:	7013      	strb	r3, [r2, #0]
 800561a:	e6f3      	b.n	8005404 <_dtoa_r+0x96c>
 800561c:	4b13      	ldr	r3, [pc, #76]	; (800566c <_dtoa_r+0xbd4>)
 800561e:	f7ff baa7 	b.w	8004b70 <_dtoa_r+0xd8>
 8005622:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005624:	2b00      	cmp	r3, #0
 8005626:	f47f aa80 	bne.w	8004b2a <_dtoa_r+0x92>
 800562a:	4b11      	ldr	r3, [pc, #68]	; (8005670 <_dtoa_r+0xbd8>)
 800562c:	f7ff baa0 	b.w	8004b70 <_dtoa_r+0xd8>
 8005630:	f1bb 0f00 	cmp.w	fp, #0
 8005634:	dc03      	bgt.n	800563e <_dtoa_r+0xba6>
 8005636:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005638:	2b02      	cmp	r3, #2
 800563a:	f73f aecc 	bgt.w	80053d6 <_dtoa_r+0x93e>
 800563e:	9f08      	ldr	r7, [sp, #32]
 8005640:	4621      	mov	r1, r4
 8005642:	4650      	mov	r0, sl
 8005644:	f7ff f99a 	bl	800497c <quorem>
 8005648:	9a08      	ldr	r2, [sp, #32]
 800564a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800564e:	f807 3b01 	strb.w	r3, [r7], #1
 8005652:	1aba      	subs	r2, r7, r2
 8005654:	4593      	cmp	fp, r2
 8005656:	ddb9      	ble.n	80055cc <_dtoa_r+0xb34>
 8005658:	4651      	mov	r1, sl
 800565a:	2300      	movs	r3, #0
 800565c:	220a      	movs	r2, #10
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f892 	bl	8005788 <__multadd>
 8005664:	4682      	mov	sl, r0
 8005666:	e7eb      	b.n	8005640 <_dtoa_r+0xba8>
 8005668:	080071db 	.word	0x080071db
 800566c:	08007134 	.word	0x08007134
 8005670:	08007158 	.word	0x08007158

08005674 <_localeconv_r>:
 8005674:	4800      	ldr	r0, [pc, #0]	; (8005678 <_localeconv_r+0x4>)
 8005676:	4770      	bx	lr
 8005678:	200001f4 	.word	0x200001f4

0800567c <malloc>:
 800567c:	4b02      	ldr	r3, [pc, #8]	; (8005688 <malloc+0xc>)
 800567e:	4601      	mov	r1, r0
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	f000 bbfb 	b.w	8005e7c <_malloc_r>
 8005686:	bf00      	nop
 8005688:	200000a0 	.word	0x200000a0

0800568c <memchr>:
 800568c:	4603      	mov	r3, r0
 800568e:	b510      	push	{r4, lr}
 8005690:	b2c9      	uxtb	r1, r1
 8005692:	4402      	add	r2, r0
 8005694:	4293      	cmp	r3, r2
 8005696:	4618      	mov	r0, r3
 8005698:	d101      	bne.n	800569e <memchr+0x12>
 800569a:	2000      	movs	r0, #0
 800569c:	e003      	b.n	80056a6 <memchr+0x1a>
 800569e:	7804      	ldrb	r4, [r0, #0]
 80056a0:	3301      	adds	r3, #1
 80056a2:	428c      	cmp	r4, r1
 80056a4:	d1f6      	bne.n	8005694 <memchr+0x8>
 80056a6:	bd10      	pop	{r4, pc}

080056a8 <memcpy>:
 80056a8:	440a      	add	r2, r1
 80056aa:	4291      	cmp	r1, r2
 80056ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80056b0:	d100      	bne.n	80056b4 <memcpy+0xc>
 80056b2:	4770      	bx	lr
 80056b4:	b510      	push	{r4, lr}
 80056b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ba:	4291      	cmp	r1, r2
 80056bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056c0:	d1f9      	bne.n	80056b6 <memcpy+0xe>
 80056c2:	bd10      	pop	{r4, pc}

080056c4 <_Balloc>:
 80056c4:	b570      	push	{r4, r5, r6, lr}
 80056c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056c8:	4604      	mov	r4, r0
 80056ca:	460d      	mov	r5, r1
 80056cc:	b976      	cbnz	r6, 80056ec <_Balloc+0x28>
 80056ce:	2010      	movs	r0, #16
 80056d0:	f7ff ffd4 	bl	800567c <malloc>
 80056d4:	4602      	mov	r2, r0
 80056d6:	6260      	str	r0, [r4, #36]	; 0x24
 80056d8:	b920      	cbnz	r0, 80056e4 <_Balloc+0x20>
 80056da:	2166      	movs	r1, #102	; 0x66
 80056dc:	4b17      	ldr	r3, [pc, #92]	; (800573c <_Balloc+0x78>)
 80056de:	4818      	ldr	r0, [pc, #96]	; (8005740 <_Balloc+0x7c>)
 80056e0:	f000 fc36 	bl	8005f50 <__assert_func>
 80056e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056e8:	6006      	str	r6, [r0, #0]
 80056ea:	60c6      	str	r6, [r0, #12]
 80056ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056ee:	68f3      	ldr	r3, [r6, #12]
 80056f0:	b183      	cbz	r3, 8005714 <_Balloc+0x50>
 80056f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80056fa:	b9b8      	cbnz	r0, 800572c <_Balloc+0x68>
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f605 	lsl.w	r6, r1, r5
 8005702:	1d72      	adds	r2, r6, #5
 8005704:	4620      	mov	r0, r4
 8005706:	0092      	lsls	r2, r2, #2
 8005708:	f000 fb5e 	bl	8005dc8 <_calloc_r>
 800570c:	b160      	cbz	r0, 8005728 <_Balloc+0x64>
 800570e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005712:	e00e      	b.n	8005732 <_Balloc+0x6e>
 8005714:	2221      	movs	r2, #33	; 0x21
 8005716:	2104      	movs	r1, #4
 8005718:	4620      	mov	r0, r4
 800571a:	f000 fb55 	bl	8005dc8 <_calloc_r>
 800571e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005720:	60f0      	str	r0, [r6, #12]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1e4      	bne.n	80056f2 <_Balloc+0x2e>
 8005728:	2000      	movs	r0, #0
 800572a:	bd70      	pop	{r4, r5, r6, pc}
 800572c:	6802      	ldr	r2, [r0, #0]
 800572e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005732:	2300      	movs	r3, #0
 8005734:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005738:	e7f7      	b.n	800572a <_Balloc+0x66>
 800573a:	bf00      	nop
 800573c:	08007165 	.word	0x08007165
 8005740:	080071ec 	.word	0x080071ec

08005744 <_Bfree>:
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005748:	4605      	mov	r5, r0
 800574a:	460c      	mov	r4, r1
 800574c:	b976      	cbnz	r6, 800576c <_Bfree+0x28>
 800574e:	2010      	movs	r0, #16
 8005750:	f7ff ff94 	bl	800567c <malloc>
 8005754:	4602      	mov	r2, r0
 8005756:	6268      	str	r0, [r5, #36]	; 0x24
 8005758:	b920      	cbnz	r0, 8005764 <_Bfree+0x20>
 800575a:	218a      	movs	r1, #138	; 0x8a
 800575c:	4b08      	ldr	r3, [pc, #32]	; (8005780 <_Bfree+0x3c>)
 800575e:	4809      	ldr	r0, [pc, #36]	; (8005784 <_Bfree+0x40>)
 8005760:	f000 fbf6 	bl	8005f50 <__assert_func>
 8005764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005768:	6006      	str	r6, [r0, #0]
 800576a:	60c6      	str	r6, [r0, #12]
 800576c:	b13c      	cbz	r4, 800577e <_Bfree+0x3a>
 800576e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005770:	6862      	ldr	r2, [r4, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005778:	6021      	str	r1, [r4, #0]
 800577a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	08007165 	.word	0x08007165
 8005784:	080071ec 	.word	0x080071ec

08005788 <__multadd>:
 8005788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800578c:	4698      	mov	r8, r3
 800578e:	460c      	mov	r4, r1
 8005790:	2300      	movs	r3, #0
 8005792:	690e      	ldr	r6, [r1, #16]
 8005794:	4607      	mov	r7, r0
 8005796:	f101 0014 	add.w	r0, r1, #20
 800579a:	6805      	ldr	r5, [r0, #0]
 800579c:	3301      	adds	r3, #1
 800579e:	b2a9      	uxth	r1, r5
 80057a0:	fb02 8101 	mla	r1, r2, r1, r8
 80057a4:	0c2d      	lsrs	r5, r5, #16
 80057a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80057aa:	fb02 c505 	mla	r5, r2, r5, ip
 80057ae:	b289      	uxth	r1, r1
 80057b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80057b4:	429e      	cmp	r6, r3
 80057b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80057ba:	f840 1b04 	str.w	r1, [r0], #4
 80057be:	dcec      	bgt.n	800579a <__multadd+0x12>
 80057c0:	f1b8 0f00 	cmp.w	r8, #0
 80057c4:	d022      	beq.n	800580c <__multadd+0x84>
 80057c6:	68a3      	ldr	r3, [r4, #8]
 80057c8:	42b3      	cmp	r3, r6
 80057ca:	dc19      	bgt.n	8005800 <__multadd+0x78>
 80057cc:	6861      	ldr	r1, [r4, #4]
 80057ce:	4638      	mov	r0, r7
 80057d0:	3101      	adds	r1, #1
 80057d2:	f7ff ff77 	bl	80056c4 <_Balloc>
 80057d6:	4605      	mov	r5, r0
 80057d8:	b928      	cbnz	r0, 80057e6 <__multadd+0x5e>
 80057da:	4602      	mov	r2, r0
 80057dc:	21b5      	movs	r1, #181	; 0xb5
 80057de:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <__multadd+0x8c>)
 80057e0:	480d      	ldr	r0, [pc, #52]	; (8005818 <__multadd+0x90>)
 80057e2:	f000 fbb5 	bl	8005f50 <__assert_func>
 80057e6:	6922      	ldr	r2, [r4, #16]
 80057e8:	f104 010c 	add.w	r1, r4, #12
 80057ec:	3202      	adds	r2, #2
 80057ee:	0092      	lsls	r2, r2, #2
 80057f0:	300c      	adds	r0, #12
 80057f2:	f7ff ff59 	bl	80056a8 <memcpy>
 80057f6:	4621      	mov	r1, r4
 80057f8:	4638      	mov	r0, r7
 80057fa:	f7ff ffa3 	bl	8005744 <_Bfree>
 80057fe:	462c      	mov	r4, r5
 8005800:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005804:	3601      	adds	r6, #1
 8005806:	f8c3 8014 	str.w	r8, [r3, #20]
 800580a:	6126      	str	r6, [r4, #16]
 800580c:	4620      	mov	r0, r4
 800580e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005812:	bf00      	nop
 8005814:	080071db 	.word	0x080071db
 8005818:	080071ec 	.word	0x080071ec

0800581c <__hi0bits>:
 800581c:	0c02      	lsrs	r2, r0, #16
 800581e:	0412      	lsls	r2, r2, #16
 8005820:	4603      	mov	r3, r0
 8005822:	b9ca      	cbnz	r2, 8005858 <__hi0bits+0x3c>
 8005824:	0403      	lsls	r3, r0, #16
 8005826:	2010      	movs	r0, #16
 8005828:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800582c:	bf04      	itt	eq
 800582e:	021b      	lsleq	r3, r3, #8
 8005830:	3008      	addeq	r0, #8
 8005832:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005836:	bf04      	itt	eq
 8005838:	011b      	lsleq	r3, r3, #4
 800583a:	3004      	addeq	r0, #4
 800583c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005840:	bf04      	itt	eq
 8005842:	009b      	lsleq	r3, r3, #2
 8005844:	3002      	addeq	r0, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	db05      	blt.n	8005856 <__hi0bits+0x3a>
 800584a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800584e:	f100 0001 	add.w	r0, r0, #1
 8005852:	bf08      	it	eq
 8005854:	2020      	moveq	r0, #32
 8005856:	4770      	bx	lr
 8005858:	2000      	movs	r0, #0
 800585a:	e7e5      	b.n	8005828 <__hi0bits+0xc>

0800585c <__lo0bits>:
 800585c:	6803      	ldr	r3, [r0, #0]
 800585e:	4602      	mov	r2, r0
 8005860:	f013 0007 	ands.w	r0, r3, #7
 8005864:	d00b      	beq.n	800587e <__lo0bits+0x22>
 8005866:	07d9      	lsls	r1, r3, #31
 8005868:	d422      	bmi.n	80058b0 <__lo0bits+0x54>
 800586a:	0798      	lsls	r0, r3, #30
 800586c:	bf49      	itett	mi
 800586e:	085b      	lsrmi	r3, r3, #1
 8005870:	089b      	lsrpl	r3, r3, #2
 8005872:	2001      	movmi	r0, #1
 8005874:	6013      	strmi	r3, [r2, #0]
 8005876:	bf5c      	itt	pl
 8005878:	2002      	movpl	r0, #2
 800587a:	6013      	strpl	r3, [r2, #0]
 800587c:	4770      	bx	lr
 800587e:	b299      	uxth	r1, r3
 8005880:	b909      	cbnz	r1, 8005886 <__lo0bits+0x2a>
 8005882:	2010      	movs	r0, #16
 8005884:	0c1b      	lsrs	r3, r3, #16
 8005886:	f013 0fff 	tst.w	r3, #255	; 0xff
 800588a:	bf04      	itt	eq
 800588c:	0a1b      	lsreq	r3, r3, #8
 800588e:	3008      	addeq	r0, #8
 8005890:	0719      	lsls	r1, r3, #28
 8005892:	bf04      	itt	eq
 8005894:	091b      	lsreq	r3, r3, #4
 8005896:	3004      	addeq	r0, #4
 8005898:	0799      	lsls	r1, r3, #30
 800589a:	bf04      	itt	eq
 800589c:	089b      	lsreq	r3, r3, #2
 800589e:	3002      	addeq	r0, #2
 80058a0:	07d9      	lsls	r1, r3, #31
 80058a2:	d403      	bmi.n	80058ac <__lo0bits+0x50>
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	f100 0001 	add.w	r0, r0, #1
 80058aa:	d003      	beq.n	80058b4 <__lo0bits+0x58>
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	4770      	bx	lr
 80058b0:	2000      	movs	r0, #0
 80058b2:	4770      	bx	lr
 80058b4:	2020      	movs	r0, #32
 80058b6:	4770      	bx	lr

080058b8 <__i2b>:
 80058b8:	b510      	push	{r4, lr}
 80058ba:	460c      	mov	r4, r1
 80058bc:	2101      	movs	r1, #1
 80058be:	f7ff ff01 	bl	80056c4 <_Balloc>
 80058c2:	4602      	mov	r2, r0
 80058c4:	b928      	cbnz	r0, 80058d2 <__i2b+0x1a>
 80058c6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80058ca:	4b04      	ldr	r3, [pc, #16]	; (80058dc <__i2b+0x24>)
 80058cc:	4804      	ldr	r0, [pc, #16]	; (80058e0 <__i2b+0x28>)
 80058ce:	f000 fb3f 	bl	8005f50 <__assert_func>
 80058d2:	2301      	movs	r3, #1
 80058d4:	6144      	str	r4, [r0, #20]
 80058d6:	6103      	str	r3, [r0, #16]
 80058d8:	bd10      	pop	{r4, pc}
 80058da:	bf00      	nop
 80058dc:	080071db 	.word	0x080071db
 80058e0:	080071ec 	.word	0x080071ec

080058e4 <__multiply>:
 80058e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e8:	4614      	mov	r4, r2
 80058ea:	690a      	ldr	r2, [r1, #16]
 80058ec:	6923      	ldr	r3, [r4, #16]
 80058ee:	460d      	mov	r5, r1
 80058f0:	429a      	cmp	r2, r3
 80058f2:	bfbe      	ittt	lt
 80058f4:	460b      	movlt	r3, r1
 80058f6:	4625      	movlt	r5, r4
 80058f8:	461c      	movlt	r4, r3
 80058fa:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80058fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005902:	68ab      	ldr	r3, [r5, #8]
 8005904:	6869      	ldr	r1, [r5, #4]
 8005906:	eb0a 0709 	add.w	r7, sl, r9
 800590a:	42bb      	cmp	r3, r7
 800590c:	b085      	sub	sp, #20
 800590e:	bfb8      	it	lt
 8005910:	3101      	addlt	r1, #1
 8005912:	f7ff fed7 	bl	80056c4 <_Balloc>
 8005916:	b930      	cbnz	r0, 8005926 <__multiply+0x42>
 8005918:	4602      	mov	r2, r0
 800591a:	f240 115d 	movw	r1, #349	; 0x15d
 800591e:	4b41      	ldr	r3, [pc, #260]	; (8005a24 <__multiply+0x140>)
 8005920:	4841      	ldr	r0, [pc, #260]	; (8005a28 <__multiply+0x144>)
 8005922:	f000 fb15 	bl	8005f50 <__assert_func>
 8005926:	f100 0614 	add.w	r6, r0, #20
 800592a:	4633      	mov	r3, r6
 800592c:	2200      	movs	r2, #0
 800592e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005932:	4543      	cmp	r3, r8
 8005934:	d31e      	bcc.n	8005974 <__multiply+0x90>
 8005936:	f105 0c14 	add.w	ip, r5, #20
 800593a:	f104 0314 	add.w	r3, r4, #20
 800593e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005942:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005946:	9202      	str	r2, [sp, #8]
 8005948:	ebac 0205 	sub.w	r2, ip, r5
 800594c:	3a15      	subs	r2, #21
 800594e:	f022 0203 	bic.w	r2, r2, #3
 8005952:	3204      	adds	r2, #4
 8005954:	f105 0115 	add.w	r1, r5, #21
 8005958:	458c      	cmp	ip, r1
 800595a:	bf38      	it	cc
 800595c:	2204      	movcc	r2, #4
 800595e:	9201      	str	r2, [sp, #4]
 8005960:	9a02      	ldr	r2, [sp, #8]
 8005962:	9303      	str	r3, [sp, #12]
 8005964:	429a      	cmp	r2, r3
 8005966:	d808      	bhi.n	800597a <__multiply+0x96>
 8005968:	2f00      	cmp	r7, #0
 800596a:	dc55      	bgt.n	8005a18 <__multiply+0x134>
 800596c:	6107      	str	r7, [r0, #16]
 800596e:	b005      	add	sp, #20
 8005970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005974:	f843 2b04 	str.w	r2, [r3], #4
 8005978:	e7db      	b.n	8005932 <__multiply+0x4e>
 800597a:	f8b3 a000 	ldrh.w	sl, [r3]
 800597e:	f1ba 0f00 	cmp.w	sl, #0
 8005982:	d020      	beq.n	80059c6 <__multiply+0xe2>
 8005984:	46b1      	mov	r9, r6
 8005986:	2200      	movs	r2, #0
 8005988:	f105 0e14 	add.w	lr, r5, #20
 800598c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005990:	f8d9 b000 	ldr.w	fp, [r9]
 8005994:	b2a1      	uxth	r1, r4
 8005996:	fa1f fb8b 	uxth.w	fp, fp
 800599a:	fb0a b101 	mla	r1, sl, r1, fp
 800599e:	4411      	add	r1, r2
 80059a0:	f8d9 2000 	ldr.w	r2, [r9]
 80059a4:	0c24      	lsrs	r4, r4, #16
 80059a6:	0c12      	lsrs	r2, r2, #16
 80059a8:	fb0a 2404 	mla	r4, sl, r4, r2
 80059ac:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80059b0:	b289      	uxth	r1, r1
 80059b2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80059b6:	45f4      	cmp	ip, lr
 80059b8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80059bc:	f849 1b04 	str.w	r1, [r9], #4
 80059c0:	d8e4      	bhi.n	800598c <__multiply+0xa8>
 80059c2:	9901      	ldr	r1, [sp, #4]
 80059c4:	5072      	str	r2, [r6, r1]
 80059c6:	9a03      	ldr	r2, [sp, #12]
 80059c8:	3304      	adds	r3, #4
 80059ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80059ce:	f1b9 0f00 	cmp.w	r9, #0
 80059d2:	d01f      	beq.n	8005a14 <__multiply+0x130>
 80059d4:	46b6      	mov	lr, r6
 80059d6:	f04f 0a00 	mov.w	sl, #0
 80059da:	6834      	ldr	r4, [r6, #0]
 80059dc:	f105 0114 	add.w	r1, r5, #20
 80059e0:	880a      	ldrh	r2, [r1, #0]
 80059e2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80059e6:	b2a4      	uxth	r4, r4
 80059e8:	fb09 b202 	mla	r2, r9, r2, fp
 80059ec:	4492      	add	sl, r2
 80059ee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80059f2:	f84e 4b04 	str.w	r4, [lr], #4
 80059f6:	f851 4b04 	ldr.w	r4, [r1], #4
 80059fa:	f8be 2000 	ldrh.w	r2, [lr]
 80059fe:	0c24      	lsrs	r4, r4, #16
 8005a00:	fb09 2404 	mla	r4, r9, r4, r2
 8005a04:	458c      	cmp	ip, r1
 8005a06:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005a0a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005a0e:	d8e7      	bhi.n	80059e0 <__multiply+0xfc>
 8005a10:	9a01      	ldr	r2, [sp, #4]
 8005a12:	50b4      	str	r4, [r6, r2]
 8005a14:	3604      	adds	r6, #4
 8005a16:	e7a3      	b.n	8005960 <__multiply+0x7c>
 8005a18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1a5      	bne.n	800596c <__multiply+0x88>
 8005a20:	3f01      	subs	r7, #1
 8005a22:	e7a1      	b.n	8005968 <__multiply+0x84>
 8005a24:	080071db 	.word	0x080071db
 8005a28:	080071ec 	.word	0x080071ec

08005a2c <__pow5mult>:
 8005a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a30:	4615      	mov	r5, r2
 8005a32:	f012 0203 	ands.w	r2, r2, #3
 8005a36:	4606      	mov	r6, r0
 8005a38:	460f      	mov	r7, r1
 8005a3a:	d007      	beq.n	8005a4c <__pow5mult+0x20>
 8005a3c:	4c25      	ldr	r4, [pc, #148]	; (8005ad4 <__pow5mult+0xa8>)
 8005a3e:	3a01      	subs	r2, #1
 8005a40:	2300      	movs	r3, #0
 8005a42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a46:	f7ff fe9f 	bl	8005788 <__multadd>
 8005a4a:	4607      	mov	r7, r0
 8005a4c:	10ad      	asrs	r5, r5, #2
 8005a4e:	d03d      	beq.n	8005acc <__pow5mult+0xa0>
 8005a50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a52:	b97c      	cbnz	r4, 8005a74 <__pow5mult+0x48>
 8005a54:	2010      	movs	r0, #16
 8005a56:	f7ff fe11 	bl	800567c <malloc>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	6270      	str	r0, [r6, #36]	; 0x24
 8005a5e:	b928      	cbnz	r0, 8005a6c <__pow5mult+0x40>
 8005a60:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a64:	4b1c      	ldr	r3, [pc, #112]	; (8005ad8 <__pow5mult+0xac>)
 8005a66:	481d      	ldr	r0, [pc, #116]	; (8005adc <__pow5mult+0xb0>)
 8005a68:	f000 fa72 	bl	8005f50 <__assert_func>
 8005a6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a70:	6004      	str	r4, [r0, #0]
 8005a72:	60c4      	str	r4, [r0, #12]
 8005a74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a7c:	b94c      	cbnz	r4, 8005a92 <__pow5mult+0x66>
 8005a7e:	f240 2171 	movw	r1, #625	; 0x271
 8005a82:	4630      	mov	r0, r6
 8005a84:	f7ff ff18 	bl	80058b8 <__i2b>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	4604      	mov	r4, r0
 8005a8c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a90:	6003      	str	r3, [r0, #0]
 8005a92:	f04f 0900 	mov.w	r9, #0
 8005a96:	07eb      	lsls	r3, r5, #31
 8005a98:	d50a      	bpl.n	8005ab0 <__pow5mult+0x84>
 8005a9a:	4639      	mov	r1, r7
 8005a9c:	4622      	mov	r2, r4
 8005a9e:	4630      	mov	r0, r6
 8005aa0:	f7ff ff20 	bl	80058e4 <__multiply>
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	f7ff fe4b 	bl	8005744 <_Bfree>
 8005aae:	4647      	mov	r7, r8
 8005ab0:	106d      	asrs	r5, r5, #1
 8005ab2:	d00b      	beq.n	8005acc <__pow5mult+0xa0>
 8005ab4:	6820      	ldr	r0, [r4, #0]
 8005ab6:	b938      	cbnz	r0, 8005ac8 <__pow5mult+0x9c>
 8005ab8:	4622      	mov	r2, r4
 8005aba:	4621      	mov	r1, r4
 8005abc:	4630      	mov	r0, r6
 8005abe:	f7ff ff11 	bl	80058e4 <__multiply>
 8005ac2:	6020      	str	r0, [r4, #0]
 8005ac4:	f8c0 9000 	str.w	r9, [r0]
 8005ac8:	4604      	mov	r4, r0
 8005aca:	e7e4      	b.n	8005a96 <__pow5mult+0x6a>
 8005acc:	4638      	mov	r0, r7
 8005ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ad2:	bf00      	nop
 8005ad4:	08007340 	.word	0x08007340
 8005ad8:	08007165 	.word	0x08007165
 8005adc:	080071ec 	.word	0x080071ec

08005ae0 <__lshift>:
 8005ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae4:	460c      	mov	r4, r1
 8005ae6:	4607      	mov	r7, r0
 8005ae8:	4691      	mov	r9, r2
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	6849      	ldr	r1, [r1, #4]
 8005aee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005af2:	68a3      	ldr	r3, [r4, #8]
 8005af4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005af8:	f108 0601 	add.w	r6, r8, #1
 8005afc:	42b3      	cmp	r3, r6
 8005afe:	db0b      	blt.n	8005b18 <__lshift+0x38>
 8005b00:	4638      	mov	r0, r7
 8005b02:	f7ff fddf 	bl	80056c4 <_Balloc>
 8005b06:	4605      	mov	r5, r0
 8005b08:	b948      	cbnz	r0, 8005b1e <__lshift+0x3e>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005b10:	4b27      	ldr	r3, [pc, #156]	; (8005bb0 <__lshift+0xd0>)
 8005b12:	4828      	ldr	r0, [pc, #160]	; (8005bb4 <__lshift+0xd4>)
 8005b14:	f000 fa1c 	bl	8005f50 <__assert_func>
 8005b18:	3101      	adds	r1, #1
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	e7ee      	b.n	8005afc <__lshift+0x1c>
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f100 0114 	add.w	r1, r0, #20
 8005b24:	f100 0210 	add.w	r2, r0, #16
 8005b28:	4618      	mov	r0, r3
 8005b2a:	4553      	cmp	r3, sl
 8005b2c:	db33      	blt.n	8005b96 <__lshift+0xb6>
 8005b2e:	6920      	ldr	r0, [r4, #16]
 8005b30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b34:	f104 0314 	add.w	r3, r4, #20
 8005b38:	f019 091f 	ands.w	r9, r9, #31
 8005b3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b44:	d02b      	beq.n	8005b9e <__lshift+0xbe>
 8005b46:	468a      	mov	sl, r1
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f1c9 0e20 	rsb	lr, r9, #32
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	fa00 f009 	lsl.w	r0, r0, r9
 8005b54:	4302      	orrs	r2, r0
 8005b56:	f84a 2b04 	str.w	r2, [sl], #4
 8005b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b5e:	459c      	cmp	ip, r3
 8005b60:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b64:	d8f3      	bhi.n	8005b4e <__lshift+0x6e>
 8005b66:	ebac 0304 	sub.w	r3, ip, r4
 8005b6a:	3b15      	subs	r3, #21
 8005b6c:	f023 0303 	bic.w	r3, r3, #3
 8005b70:	3304      	adds	r3, #4
 8005b72:	f104 0015 	add.w	r0, r4, #21
 8005b76:	4584      	cmp	ip, r0
 8005b78:	bf38      	it	cc
 8005b7a:	2304      	movcc	r3, #4
 8005b7c:	50ca      	str	r2, [r1, r3]
 8005b7e:	b10a      	cbz	r2, 8005b84 <__lshift+0xa4>
 8005b80:	f108 0602 	add.w	r6, r8, #2
 8005b84:	3e01      	subs	r6, #1
 8005b86:	4638      	mov	r0, r7
 8005b88:	4621      	mov	r1, r4
 8005b8a:	612e      	str	r6, [r5, #16]
 8005b8c:	f7ff fdda 	bl	8005744 <_Bfree>
 8005b90:	4628      	mov	r0, r5
 8005b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b96:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	e7c5      	b.n	8005b2a <__lshift+0x4a>
 8005b9e:	3904      	subs	r1, #4
 8005ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ba4:	459c      	cmp	ip, r3
 8005ba6:	f841 2f04 	str.w	r2, [r1, #4]!
 8005baa:	d8f9      	bhi.n	8005ba0 <__lshift+0xc0>
 8005bac:	e7ea      	b.n	8005b84 <__lshift+0xa4>
 8005bae:	bf00      	nop
 8005bb0:	080071db 	.word	0x080071db
 8005bb4:	080071ec 	.word	0x080071ec

08005bb8 <__mcmp>:
 8005bb8:	4603      	mov	r3, r0
 8005bba:	690a      	ldr	r2, [r1, #16]
 8005bbc:	6900      	ldr	r0, [r0, #16]
 8005bbe:	b530      	push	{r4, r5, lr}
 8005bc0:	1a80      	subs	r0, r0, r2
 8005bc2:	d10d      	bne.n	8005be0 <__mcmp+0x28>
 8005bc4:	3314      	adds	r3, #20
 8005bc6:	3114      	adds	r1, #20
 8005bc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005bcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005bd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005bd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005bd8:	4295      	cmp	r5, r2
 8005bda:	d002      	beq.n	8005be2 <__mcmp+0x2a>
 8005bdc:	d304      	bcc.n	8005be8 <__mcmp+0x30>
 8005bde:	2001      	movs	r0, #1
 8005be0:	bd30      	pop	{r4, r5, pc}
 8005be2:	42a3      	cmp	r3, r4
 8005be4:	d3f4      	bcc.n	8005bd0 <__mcmp+0x18>
 8005be6:	e7fb      	b.n	8005be0 <__mcmp+0x28>
 8005be8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bec:	e7f8      	b.n	8005be0 <__mcmp+0x28>
	...

08005bf0 <__mdiff>:
 8005bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf4:	460c      	mov	r4, r1
 8005bf6:	4606      	mov	r6, r0
 8005bf8:	4611      	mov	r1, r2
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	4692      	mov	sl, r2
 8005bfe:	f7ff ffdb 	bl	8005bb8 <__mcmp>
 8005c02:	1e05      	subs	r5, r0, #0
 8005c04:	d111      	bne.n	8005c2a <__mdiff+0x3a>
 8005c06:	4629      	mov	r1, r5
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7ff fd5b 	bl	80056c4 <_Balloc>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	b928      	cbnz	r0, 8005c1e <__mdiff+0x2e>
 8005c12:	f240 2132 	movw	r1, #562	; 0x232
 8005c16:	4b3c      	ldr	r3, [pc, #240]	; (8005d08 <__mdiff+0x118>)
 8005c18:	483c      	ldr	r0, [pc, #240]	; (8005d0c <__mdiff+0x11c>)
 8005c1a:	f000 f999 	bl	8005f50 <__assert_func>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c24:	4610      	mov	r0, r2
 8005c26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2a:	bfa4      	itt	ge
 8005c2c:	4653      	movge	r3, sl
 8005c2e:	46a2      	movge	sl, r4
 8005c30:	4630      	mov	r0, r6
 8005c32:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005c36:	bfa6      	itte	ge
 8005c38:	461c      	movge	r4, r3
 8005c3a:	2500      	movge	r5, #0
 8005c3c:	2501      	movlt	r5, #1
 8005c3e:	f7ff fd41 	bl	80056c4 <_Balloc>
 8005c42:	4602      	mov	r2, r0
 8005c44:	b918      	cbnz	r0, 8005c4e <__mdiff+0x5e>
 8005c46:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c4a:	4b2f      	ldr	r3, [pc, #188]	; (8005d08 <__mdiff+0x118>)
 8005c4c:	e7e4      	b.n	8005c18 <__mdiff+0x28>
 8005c4e:	f100 0814 	add.w	r8, r0, #20
 8005c52:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005c56:	60c5      	str	r5, [r0, #12]
 8005c58:	f04f 0c00 	mov.w	ip, #0
 8005c5c:	f10a 0514 	add.w	r5, sl, #20
 8005c60:	f10a 0010 	add.w	r0, sl, #16
 8005c64:	46c2      	mov	sl, r8
 8005c66:	6926      	ldr	r6, [r4, #16]
 8005c68:	f104 0914 	add.w	r9, r4, #20
 8005c6c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005c70:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c74:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005c78:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c7c:	fa1f f18b 	uxth.w	r1, fp
 8005c80:	4461      	add	r1, ip
 8005c82:	fa1f fc83 	uxth.w	ip, r3
 8005c86:	0c1b      	lsrs	r3, r3, #16
 8005c88:	eba1 010c 	sub.w	r1, r1, ip
 8005c8c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c90:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005c94:	b289      	uxth	r1, r1
 8005c96:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005c9a:	454e      	cmp	r6, r9
 8005c9c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005ca0:	f84a 3b04 	str.w	r3, [sl], #4
 8005ca4:	d8e6      	bhi.n	8005c74 <__mdiff+0x84>
 8005ca6:	1b33      	subs	r3, r6, r4
 8005ca8:	3b15      	subs	r3, #21
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	3415      	adds	r4, #21
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	42a6      	cmp	r6, r4
 8005cb4:	bf38      	it	cc
 8005cb6:	2304      	movcc	r3, #4
 8005cb8:	441d      	add	r5, r3
 8005cba:	4443      	add	r3, r8
 8005cbc:	461e      	mov	r6, r3
 8005cbe:	462c      	mov	r4, r5
 8005cc0:	4574      	cmp	r4, lr
 8005cc2:	d30e      	bcc.n	8005ce2 <__mdiff+0xf2>
 8005cc4:	f10e 0103 	add.w	r1, lr, #3
 8005cc8:	1b49      	subs	r1, r1, r5
 8005cca:	f021 0103 	bic.w	r1, r1, #3
 8005cce:	3d03      	subs	r5, #3
 8005cd0:	45ae      	cmp	lr, r5
 8005cd2:	bf38      	it	cc
 8005cd4:	2100      	movcc	r1, #0
 8005cd6:	4419      	add	r1, r3
 8005cd8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005cdc:	b18b      	cbz	r3, 8005d02 <__mdiff+0x112>
 8005cde:	6117      	str	r7, [r2, #16]
 8005ce0:	e7a0      	b.n	8005c24 <__mdiff+0x34>
 8005ce2:	f854 8b04 	ldr.w	r8, [r4], #4
 8005ce6:	fa1f f188 	uxth.w	r1, r8
 8005cea:	4461      	add	r1, ip
 8005cec:	1408      	asrs	r0, r1, #16
 8005cee:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005cf2:	b289      	uxth	r1, r1
 8005cf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005cf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005cfc:	f846 1b04 	str.w	r1, [r6], #4
 8005d00:	e7de      	b.n	8005cc0 <__mdiff+0xd0>
 8005d02:	3f01      	subs	r7, #1
 8005d04:	e7e8      	b.n	8005cd8 <__mdiff+0xe8>
 8005d06:	bf00      	nop
 8005d08:	080071db 	.word	0x080071db
 8005d0c:	080071ec 	.word	0x080071ec

08005d10 <__d2b>:
 8005d10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005d14:	2101      	movs	r1, #1
 8005d16:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005d1a:	4690      	mov	r8, r2
 8005d1c:	461d      	mov	r5, r3
 8005d1e:	f7ff fcd1 	bl	80056c4 <_Balloc>
 8005d22:	4604      	mov	r4, r0
 8005d24:	b930      	cbnz	r0, 8005d34 <__d2b+0x24>
 8005d26:	4602      	mov	r2, r0
 8005d28:	f240 310a 	movw	r1, #778	; 0x30a
 8005d2c:	4b24      	ldr	r3, [pc, #144]	; (8005dc0 <__d2b+0xb0>)
 8005d2e:	4825      	ldr	r0, [pc, #148]	; (8005dc4 <__d2b+0xb4>)
 8005d30:	f000 f90e 	bl	8005f50 <__assert_func>
 8005d34:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005d38:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005d3c:	bb2d      	cbnz	r5, 8005d8a <__d2b+0x7a>
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	f1b8 0300 	subs.w	r3, r8, #0
 8005d44:	d026      	beq.n	8005d94 <__d2b+0x84>
 8005d46:	4668      	mov	r0, sp
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	f7ff fd87 	bl	800585c <__lo0bits>
 8005d4e:	9900      	ldr	r1, [sp, #0]
 8005d50:	b1f0      	cbz	r0, 8005d90 <__d2b+0x80>
 8005d52:	9a01      	ldr	r2, [sp, #4]
 8005d54:	f1c0 0320 	rsb	r3, r0, #32
 8005d58:	fa02 f303 	lsl.w	r3, r2, r3
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	40c2      	lsrs	r2, r0
 8005d60:	6163      	str	r3, [r4, #20]
 8005d62:	9201      	str	r2, [sp, #4]
 8005d64:	9b01      	ldr	r3, [sp, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	bf14      	ite	ne
 8005d6a:	2102      	movne	r1, #2
 8005d6c:	2101      	moveq	r1, #1
 8005d6e:	61a3      	str	r3, [r4, #24]
 8005d70:	6121      	str	r1, [r4, #16]
 8005d72:	b1c5      	cbz	r5, 8005da6 <__d2b+0x96>
 8005d74:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d78:	4405      	add	r5, r0
 8005d7a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d7e:	603d      	str	r5, [r7, #0]
 8005d80:	6030      	str	r0, [r6, #0]
 8005d82:	4620      	mov	r0, r4
 8005d84:	b002      	add	sp, #8
 8005d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d8e:	e7d6      	b.n	8005d3e <__d2b+0x2e>
 8005d90:	6161      	str	r1, [r4, #20]
 8005d92:	e7e7      	b.n	8005d64 <__d2b+0x54>
 8005d94:	a801      	add	r0, sp, #4
 8005d96:	f7ff fd61 	bl	800585c <__lo0bits>
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	9b01      	ldr	r3, [sp, #4]
 8005d9e:	6121      	str	r1, [r4, #16]
 8005da0:	6163      	str	r3, [r4, #20]
 8005da2:	3020      	adds	r0, #32
 8005da4:	e7e5      	b.n	8005d72 <__d2b+0x62>
 8005da6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005daa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005dae:	6038      	str	r0, [r7, #0]
 8005db0:	6918      	ldr	r0, [r3, #16]
 8005db2:	f7ff fd33 	bl	800581c <__hi0bits>
 8005db6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005dba:	6031      	str	r1, [r6, #0]
 8005dbc:	e7e1      	b.n	8005d82 <__d2b+0x72>
 8005dbe:	bf00      	nop
 8005dc0:	080071db 	.word	0x080071db
 8005dc4:	080071ec 	.word	0x080071ec

08005dc8 <_calloc_r>:
 8005dc8:	b538      	push	{r3, r4, r5, lr}
 8005dca:	fb02 f501 	mul.w	r5, r2, r1
 8005dce:	4629      	mov	r1, r5
 8005dd0:	f000 f854 	bl	8005e7c <_malloc_r>
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	b118      	cbz	r0, 8005de0 <_calloc_r+0x18>
 8005dd8:	462a      	mov	r2, r5
 8005dda:	2100      	movs	r1, #0
 8005ddc:	f7fe f966 	bl	80040ac <memset>
 8005de0:	4620      	mov	r0, r4
 8005de2:	bd38      	pop	{r3, r4, r5, pc}

08005de4 <_free_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	4605      	mov	r5, r0
 8005de8:	2900      	cmp	r1, #0
 8005dea:	d043      	beq.n	8005e74 <_free_r+0x90>
 8005dec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df0:	1f0c      	subs	r4, r1, #4
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	bfb8      	it	lt
 8005df6:	18e4      	addlt	r4, r4, r3
 8005df8:	f000 f8ec 	bl	8005fd4 <__malloc_lock>
 8005dfc:	4a1e      	ldr	r2, [pc, #120]	; (8005e78 <_free_r+0x94>)
 8005dfe:	6813      	ldr	r3, [r2, #0]
 8005e00:	4610      	mov	r0, r2
 8005e02:	b933      	cbnz	r3, 8005e12 <_free_r+0x2e>
 8005e04:	6063      	str	r3, [r4, #4]
 8005e06:	6014      	str	r4, [r2, #0]
 8005e08:	4628      	mov	r0, r5
 8005e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e0e:	f000 b8e7 	b.w	8005fe0 <__malloc_unlock>
 8005e12:	42a3      	cmp	r3, r4
 8005e14:	d90a      	bls.n	8005e2c <_free_r+0x48>
 8005e16:	6821      	ldr	r1, [r4, #0]
 8005e18:	1862      	adds	r2, r4, r1
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	bf01      	itttt	eq
 8005e1e:	681a      	ldreq	r2, [r3, #0]
 8005e20:	685b      	ldreq	r3, [r3, #4]
 8005e22:	1852      	addeq	r2, r2, r1
 8005e24:	6022      	streq	r2, [r4, #0]
 8005e26:	6063      	str	r3, [r4, #4]
 8005e28:	6004      	str	r4, [r0, #0]
 8005e2a:	e7ed      	b.n	8005e08 <_free_r+0x24>
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	b10b      	cbz	r3, 8005e36 <_free_r+0x52>
 8005e32:	42a3      	cmp	r3, r4
 8005e34:	d9fa      	bls.n	8005e2c <_free_r+0x48>
 8005e36:	6811      	ldr	r1, [r2, #0]
 8005e38:	1850      	adds	r0, r2, r1
 8005e3a:	42a0      	cmp	r0, r4
 8005e3c:	d10b      	bne.n	8005e56 <_free_r+0x72>
 8005e3e:	6820      	ldr	r0, [r4, #0]
 8005e40:	4401      	add	r1, r0
 8005e42:	1850      	adds	r0, r2, r1
 8005e44:	4283      	cmp	r3, r0
 8005e46:	6011      	str	r1, [r2, #0]
 8005e48:	d1de      	bne.n	8005e08 <_free_r+0x24>
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	4401      	add	r1, r0
 8005e50:	6011      	str	r1, [r2, #0]
 8005e52:	6053      	str	r3, [r2, #4]
 8005e54:	e7d8      	b.n	8005e08 <_free_r+0x24>
 8005e56:	d902      	bls.n	8005e5e <_free_r+0x7a>
 8005e58:	230c      	movs	r3, #12
 8005e5a:	602b      	str	r3, [r5, #0]
 8005e5c:	e7d4      	b.n	8005e08 <_free_r+0x24>
 8005e5e:	6820      	ldr	r0, [r4, #0]
 8005e60:	1821      	adds	r1, r4, r0
 8005e62:	428b      	cmp	r3, r1
 8005e64:	bf01      	itttt	eq
 8005e66:	6819      	ldreq	r1, [r3, #0]
 8005e68:	685b      	ldreq	r3, [r3, #4]
 8005e6a:	1809      	addeq	r1, r1, r0
 8005e6c:	6021      	streq	r1, [r4, #0]
 8005e6e:	6063      	str	r3, [r4, #4]
 8005e70:	6054      	str	r4, [r2, #4]
 8005e72:	e7c9      	b.n	8005e08 <_free_r+0x24>
 8005e74:	bd38      	pop	{r3, r4, r5, pc}
 8005e76:	bf00      	nop
 8005e78:	20000298 	.word	0x20000298

08005e7c <_malloc_r>:
 8005e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7e:	1ccd      	adds	r5, r1, #3
 8005e80:	f025 0503 	bic.w	r5, r5, #3
 8005e84:	3508      	adds	r5, #8
 8005e86:	2d0c      	cmp	r5, #12
 8005e88:	bf38      	it	cc
 8005e8a:	250c      	movcc	r5, #12
 8005e8c:	2d00      	cmp	r5, #0
 8005e8e:	4606      	mov	r6, r0
 8005e90:	db01      	blt.n	8005e96 <_malloc_r+0x1a>
 8005e92:	42a9      	cmp	r1, r5
 8005e94:	d903      	bls.n	8005e9e <_malloc_r+0x22>
 8005e96:	230c      	movs	r3, #12
 8005e98:	6033      	str	r3, [r6, #0]
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e9e:	f000 f899 	bl	8005fd4 <__malloc_lock>
 8005ea2:	4921      	ldr	r1, [pc, #132]	; (8005f28 <_malloc_r+0xac>)
 8005ea4:	680a      	ldr	r2, [r1, #0]
 8005ea6:	4614      	mov	r4, r2
 8005ea8:	b99c      	cbnz	r4, 8005ed2 <_malloc_r+0x56>
 8005eaa:	4f20      	ldr	r7, [pc, #128]	; (8005f2c <_malloc_r+0xb0>)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	b923      	cbnz	r3, 8005eba <_malloc_r+0x3e>
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4630      	mov	r0, r6
 8005eb4:	f000 f83c 	bl	8005f30 <_sbrk_r>
 8005eb8:	6038      	str	r0, [r7, #0]
 8005eba:	4629      	mov	r1, r5
 8005ebc:	4630      	mov	r0, r6
 8005ebe:	f000 f837 	bl	8005f30 <_sbrk_r>
 8005ec2:	1c43      	adds	r3, r0, #1
 8005ec4:	d123      	bne.n	8005f0e <_malloc_r+0x92>
 8005ec6:	230c      	movs	r3, #12
 8005ec8:	4630      	mov	r0, r6
 8005eca:	6033      	str	r3, [r6, #0]
 8005ecc:	f000 f888 	bl	8005fe0 <__malloc_unlock>
 8005ed0:	e7e3      	b.n	8005e9a <_malloc_r+0x1e>
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	1b5b      	subs	r3, r3, r5
 8005ed6:	d417      	bmi.n	8005f08 <_malloc_r+0x8c>
 8005ed8:	2b0b      	cmp	r3, #11
 8005eda:	d903      	bls.n	8005ee4 <_malloc_r+0x68>
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	441c      	add	r4, r3
 8005ee0:	6025      	str	r5, [r4, #0]
 8005ee2:	e004      	b.n	8005eee <_malloc_r+0x72>
 8005ee4:	6863      	ldr	r3, [r4, #4]
 8005ee6:	42a2      	cmp	r2, r4
 8005ee8:	bf0c      	ite	eq
 8005eea:	600b      	streq	r3, [r1, #0]
 8005eec:	6053      	strne	r3, [r2, #4]
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f000 f876 	bl	8005fe0 <__malloc_unlock>
 8005ef4:	f104 000b 	add.w	r0, r4, #11
 8005ef8:	1d23      	adds	r3, r4, #4
 8005efa:	f020 0007 	bic.w	r0, r0, #7
 8005efe:	1ac2      	subs	r2, r0, r3
 8005f00:	d0cc      	beq.n	8005e9c <_malloc_r+0x20>
 8005f02:	1a1b      	subs	r3, r3, r0
 8005f04:	50a3      	str	r3, [r4, r2]
 8005f06:	e7c9      	b.n	8005e9c <_malloc_r+0x20>
 8005f08:	4622      	mov	r2, r4
 8005f0a:	6864      	ldr	r4, [r4, #4]
 8005f0c:	e7cc      	b.n	8005ea8 <_malloc_r+0x2c>
 8005f0e:	1cc4      	adds	r4, r0, #3
 8005f10:	f024 0403 	bic.w	r4, r4, #3
 8005f14:	42a0      	cmp	r0, r4
 8005f16:	d0e3      	beq.n	8005ee0 <_malloc_r+0x64>
 8005f18:	1a21      	subs	r1, r4, r0
 8005f1a:	4630      	mov	r0, r6
 8005f1c:	f000 f808 	bl	8005f30 <_sbrk_r>
 8005f20:	3001      	adds	r0, #1
 8005f22:	d1dd      	bne.n	8005ee0 <_malloc_r+0x64>
 8005f24:	e7cf      	b.n	8005ec6 <_malloc_r+0x4a>
 8005f26:	bf00      	nop
 8005f28:	20000298 	.word	0x20000298
 8005f2c:	2000029c 	.word	0x2000029c

08005f30 <_sbrk_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	2300      	movs	r3, #0
 8005f34:	4d05      	ldr	r5, [pc, #20]	; (8005f4c <_sbrk_r+0x1c>)
 8005f36:	4604      	mov	r4, r0
 8005f38:	4608      	mov	r0, r1
 8005f3a:	602b      	str	r3, [r5, #0]
 8005f3c:	f7fb fa7e 	bl	800143c <_sbrk>
 8005f40:	1c43      	adds	r3, r0, #1
 8005f42:	d102      	bne.n	8005f4a <_sbrk_r+0x1a>
 8005f44:	682b      	ldr	r3, [r5, #0]
 8005f46:	b103      	cbz	r3, 8005f4a <_sbrk_r+0x1a>
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	bd38      	pop	{r3, r4, r5, pc}
 8005f4c:	20000404 	.word	0x20000404

08005f50 <__assert_func>:
 8005f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f52:	4614      	mov	r4, r2
 8005f54:	461a      	mov	r2, r3
 8005f56:	4b09      	ldr	r3, [pc, #36]	; (8005f7c <__assert_func+0x2c>)
 8005f58:	4605      	mov	r5, r0
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68d8      	ldr	r0, [r3, #12]
 8005f5e:	b14c      	cbz	r4, 8005f74 <__assert_func+0x24>
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <__assert_func+0x30>)
 8005f62:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f66:	9100      	str	r1, [sp, #0]
 8005f68:	462b      	mov	r3, r5
 8005f6a:	4906      	ldr	r1, [pc, #24]	; (8005f84 <__assert_func+0x34>)
 8005f6c:	f000 f80e 	bl	8005f8c <fiprintf>
 8005f70:	f000 fa62 	bl	8006438 <abort>
 8005f74:	4b04      	ldr	r3, [pc, #16]	; (8005f88 <__assert_func+0x38>)
 8005f76:	461c      	mov	r4, r3
 8005f78:	e7f3      	b.n	8005f62 <__assert_func+0x12>
 8005f7a:	bf00      	nop
 8005f7c:	200000a0 	.word	0x200000a0
 8005f80:	0800734c 	.word	0x0800734c
 8005f84:	08007359 	.word	0x08007359
 8005f88:	08007387 	.word	0x08007387

08005f8c <fiprintf>:
 8005f8c:	b40e      	push	{r1, r2, r3}
 8005f8e:	b503      	push	{r0, r1, lr}
 8005f90:	4601      	mov	r1, r0
 8005f92:	ab03      	add	r3, sp, #12
 8005f94:	4805      	ldr	r0, [pc, #20]	; (8005fac <fiprintf+0x20>)
 8005f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f9a:	6800      	ldr	r0, [r0, #0]
 8005f9c:	9301      	str	r3, [sp, #4]
 8005f9e:	f000 f84d 	bl	800603c <_vfiprintf_r>
 8005fa2:	b002      	add	sp, #8
 8005fa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fa8:	b003      	add	sp, #12
 8005faa:	4770      	bx	lr
 8005fac:	200000a0 	.word	0x200000a0

08005fb0 <__ascii_mbtowc>:
 8005fb0:	b082      	sub	sp, #8
 8005fb2:	b901      	cbnz	r1, 8005fb6 <__ascii_mbtowc+0x6>
 8005fb4:	a901      	add	r1, sp, #4
 8005fb6:	b142      	cbz	r2, 8005fca <__ascii_mbtowc+0x1a>
 8005fb8:	b14b      	cbz	r3, 8005fce <__ascii_mbtowc+0x1e>
 8005fba:	7813      	ldrb	r3, [r2, #0]
 8005fbc:	600b      	str	r3, [r1, #0]
 8005fbe:	7812      	ldrb	r2, [r2, #0]
 8005fc0:	1e10      	subs	r0, r2, #0
 8005fc2:	bf18      	it	ne
 8005fc4:	2001      	movne	r0, #1
 8005fc6:	b002      	add	sp, #8
 8005fc8:	4770      	bx	lr
 8005fca:	4610      	mov	r0, r2
 8005fcc:	e7fb      	b.n	8005fc6 <__ascii_mbtowc+0x16>
 8005fce:	f06f 0001 	mvn.w	r0, #1
 8005fd2:	e7f8      	b.n	8005fc6 <__ascii_mbtowc+0x16>

08005fd4 <__malloc_lock>:
 8005fd4:	4801      	ldr	r0, [pc, #4]	; (8005fdc <__malloc_lock+0x8>)
 8005fd6:	f000 bbef 	b.w	80067b8 <__retarget_lock_acquire_recursive>
 8005fda:	bf00      	nop
 8005fdc:	2000040c 	.word	0x2000040c

08005fe0 <__malloc_unlock>:
 8005fe0:	4801      	ldr	r0, [pc, #4]	; (8005fe8 <__malloc_unlock+0x8>)
 8005fe2:	f000 bbea 	b.w	80067ba <__retarget_lock_release_recursive>
 8005fe6:	bf00      	nop
 8005fe8:	2000040c 	.word	0x2000040c

08005fec <__sfputc_r>:
 8005fec:	6893      	ldr	r3, [r2, #8]
 8005fee:	b410      	push	{r4}
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	6093      	str	r3, [r2, #8]
 8005ff6:	da07      	bge.n	8006008 <__sfputc_r+0x1c>
 8005ff8:	6994      	ldr	r4, [r2, #24]
 8005ffa:	42a3      	cmp	r3, r4
 8005ffc:	db01      	blt.n	8006002 <__sfputc_r+0x16>
 8005ffe:	290a      	cmp	r1, #10
 8006000:	d102      	bne.n	8006008 <__sfputc_r+0x1c>
 8006002:	bc10      	pop	{r4}
 8006004:	f000 b94a 	b.w	800629c <__swbuf_r>
 8006008:	6813      	ldr	r3, [r2, #0]
 800600a:	1c58      	adds	r0, r3, #1
 800600c:	6010      	str	r0, [r2, #0]
 800600e:	7019      	strb	r1, [r3, #0]
 8006010:	4608      	mov	r0, r1
 8006012:	bc10      	pop	{r4}
 8006014:	4770      	bx	lr

08006016 <__sfputs_r>:
 8006016:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006018:	4606      	mov	r6, r0
 800601a:	460f      	mov	r7, r1
 800601c:	4614      	mov	r4, r2
 800601e:	18d5      	adds	r5, r2, r3
 8006020:	42ac      	cmp	r4, r5
 8006022:	d101      	bne.n	8006028 <__sfputs_r+0x12>
 8006024:	2000      	movs	r0, #0
 8006026:	e007      	b.n	8006038 <__sfputs_r+0x22>
 8006028:	463a      	mov	r2, r7
 800602a:	4630      	mov	r0, r6
 800602c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006030:	f7ff ffdc 	bl	8005fec <__sfputc_r>
 8006034:	1c43      	adds	r3, r0, #1
 8006036:	d1f3      	bne.n	8006020 <__sfputs_r+0xa>
 8006038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800603c <_vfiprintf_r>:
 800603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	460d      	mov	r5, r1
 8006042:	4614      	mov	r4, r2
 8006044:	4698      	mov	r8, r3
 8006046:	4606      	mov	r6, r0
 8006048:	b09d      	sub	sp, #116	; 0x74
 800604a:	b118      	cbz	r0, 8006054 <_vfiprintf_r+0x18>
 800604c:	6983      	ldr	r3, [r0, #24]
 800604e:	b90b      	cbnz	r3, 8006054 <_vfiprintf_r+0x18>
 8006050:	f000 fb14 	bl	800667c <__sinit>
 8006054:	4b89      	ldr	r3, [pc, #548]	; (800627c <_vfiprintf_r+0x240>)
 8006056:	429d      	cmp	r5, r3
 8006058:	d11b      	bne.n	8006092 <_vfiprintf_r+0x56>
 800605a:	6875      	ldr	r5, [r6, #4]
 800605c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800605e:	07d9      	lsls	r1, r3, #31
 8006060:	d405      	bmi.n	800606e <_vfiprintf_r+0x32>
 8006062:	89ab      	ldrh	r3, [r5, #12]
 8006064:	059a      	lsls	r2, r3, #22
 8006066:	d402      	bmi.n	800606e <_vfiprintf_r+0x32>
 8006068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800606a:	f000 fba5 	bl	80067b8 <__retarget_lock_acquire_recursive>
 800606e:	89ab      	ldrh	r3, [r5, #12]
 8006070:	071b      	lsls	r3, r3, #28
 8006072:	d501      	bpl.n	8006078 <_vfiprintf_r+0x3c>
 8006074:	692b      	ldr	r3, [r5, #16]
 8006076:	b9eb      	cbnz	r3, 80060b4 <_vfiprintf_r+0x78>
 8006078:	4629      	mov	r1, r5
 800607a:	4630      	mov	r0, r6
 800607c:	f000 f96e 	bl	800635c <__swsetup_r>
 8006080:	b1c0      	cbz	r0, 80060b4 <_vfiprintf_r+0x78>
 8006082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006084:	07dc      	lsls	r4, r3, #31
 8006086:	d50e      	bpl.n	80060a6 <_vfiprintf_r+0x6a>
 8006088:	f04f 30ff 	mov.w	r0, #4294967295
 800608c:	b01d      	add	sp, #116	; 0x74
 800608e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006092:	4b7b      	ldr	r3, [pc, #492]	; (8006280 <_vfiprintf_r+0x244>)
 8006094:	429d      	cmp	r5, r3
 8006096:	d101      	bne.n	800609c <_vfiprintf_r+0x60>
 8006098:	68b5      	ldr	r5, [r6, #8]
 800609a:	e7df      	b.n	800605c <_vfiprintf_r+0x20>
 800609c:	4b79      	ldr	r3, [pc, #484]	; (8006284 <_vfiprintf_r+0x248>)
 800609e:	429d      	cmp	r5, r3
 80060a0:	bf08      	it	eq
 80060a2:	68f5      	ldreq	r5, [r6, #12]
 80060a4:	e7da      	b.n	800605c <_vfiprintf_r+0x20>
 80060a6:	89ab      	ldrh	r3, [r5, #12]
 80060a8:	0598      	lsls	r0, r3, #22
 80060aa:	d4ed      	bmi.n	8006088 <_vfiprintf_r+0x4c>
 80060ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060ae:	f000 fb84 	bl	80067ba <__retarget_lock_release_recursive>
 80060b2:	e7e9      	b.n	8006088 <_vfiprintf_r+0x4c>
 80060b4:	2300      	movs	r3, #0
 80060b6:	9309      	str	r3, [sp, #36]	; 0x24
 80060b8:	2320      	movs	r3, #32
 80060ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060be:	2330      	movs	r3, #48	; 0x30
 80060c0:	f04f 0901 	mov.w	r9, #1
 80060c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80060c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006288 <_vfiprintf_r+0x24c>
 80060cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060d0:	4623      	mov	r3, r4
 80060d2:	469a      	mov	sl, r3
 80060d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d8:	b10a      	cbz	r2, 80060de <_vfiprintf_r+0xa2>
 80060da:	2a25      	cmp	r2, #37	; 0x25
 80060dc:	d1f9      	bne.n	80060d2 <_vfiprintf_r+0x96>
 80060de:	ebba 0b04 	subs.w	fp, sl, r4
 80060e2:	d00b      	beq.n	80060fc <_vfiprintf_r+0xc0>
 80060e4:	465b      	mov	r3, fp
 80060e6:	4622      	mov	r2, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	4630      	mov	r0, r6
 80060ec:	f7ff ff93 	bl	8006016 <__sfputs_r>
 80060f0:	3001      	adds	r0, #1
 80060f2:	f000 80aa 	beq.w	800624a <_vfiprintf_r+0x20e>
 80060f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f8:	445a      	add	r2, fp
 80060fa:	9209      	str	r2, [sp, #36]	; 0x24
 80060fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80a2 	beq.w	800624a <_vfiprintf_r+0x20e>
 8006106:	2300      	movs	r3, #0
 8006108:	f04f 32ff 	mov.w	r2, #4294967295
 800610c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006110:	f10a 0a01 	add.w	sl, sl, #1
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	9307      	str	r3, [sp, #28]
 8006118:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800611c:	931a      	str	r3, [sp, #104]	; 0x68
 800611e:	4654      	mov	r4, sl
 8006120:	2205      	movs	r2, #5
 8006122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006126:	4858      	ldr	r0, [pc, #352]	; (8006288 <_vfiprintf_r+0x24c>)
 8006128:	f7ff fab0 	bl	800568c <memchr>
 800612c:	9a04      	ldr	r2, [sp, #16]
 800612e:	b9d8      	cbnz	r0, 8006168 <_vfiprintf_r+0x12c>
 8006130:	06d1      	lsls	r1, r2, #27
 8006132:	bf44      	itt	mi
 8006134:	2320      	movmi	r3, #32
 8006136:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800613a:	0713      	lsls	r3, r2, #28
 800613c:	bf44      	itt	mi
 800613e:	232b      	movmi	r3, #43	; 0x2b
 8006140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006144:	f89a 3000 	ldrb.w	r3, [sl]
 8006148:	2b2a      	cmp	r3, #42	; 0x2a
 800614a:	d015      	beq.n	8006178 <_vfiprintf_r+0x13c>
 800614c:	4654      	mov	r4, sl
 800614e:	2000      	movs	r0, #0
 8006150:	f04f 0c0a 	mov.w	ip, #10
 8006154:	9a07      	ldr	r2, [sp, #28]
 8006156:	4621      	mov	r1, r4
 8006158:	f811 3b01 	ldrb.w	r3, [r1], #1
 800615c:	3b30      	subs	r3, #48	; 0x30
 800615e:	2b09      	cmp	r3, #9
 8006160:	d94e      	bls.n	8006200 <_vfiprintf_r+0x1c4>
 8006162:	b1b0      	cbz	r0, 8006192 <_vfiprintf_r+0x156>
 8006164:	9207      	str	r2, [sp, #28]
 8006166:	e014      	b.n	8006192 <_vfiprintf_r+0x156>
 8006168:	eba0 0308 	sub.w	r3, r0, r8
 800616c:	fa09 f303 	lsl.w	r3, r9, r3
 8006170:	4313      	orrs	r3, r2
 8006172:	46a2      	mov	sl, r4
 8006174:	9304      	str	r3, [sp, #16]
 8006176:	e7d2      	b.n	800611e <_vfiprintf_r+0xe2>
 8006178:	9b03      	ldr	r3, [sp, #12]
 800617a:	1d19      	adds	r1, r3, #4
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	9103      	str	r1, [sp, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	bfbb      	ittet	lt
 8006184:	425b      	neglt	r3, r3
 8006186:	f042 0202 	orrlt.w	r2, r2, #2
 800618a:	9307      	strge	r3, [sp, #28]
 800618c:	9307      	strlt	r3, [sp, #28]
 800618e:	bfb8      	it	lt
 8006190:	9204      	strlt	r2, [sp, #16]
 8006192:	7823      	ldrb	r3, [r4, #0]
 8006194:	2b2e      	cmp	r3, #46	; 0x2e
 8006196:	d10c      	bne.n	80061b2 <_vfiprintf_r+0x176>
 8006198:	7863      	ldrb	r3, [r4, #1]
 800619a:	2b2a      	cmp	r3, #42	; 0x2a
 800619c:	d135      	bne.n	800620a <_vfiprintf_r+0x1ce>
 800619e:	9b03      	ldr	r3, [sp, #12]
 80061a0:	3402      	adds	r4, #2
 80061a2:	1d1a      	adds	r2, r3, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	9203      	str	r2, [sp, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bfb8      	it	lt
 80061ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80061b0:	9305      	str	r3, [sp, #20]
 80061b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006298 <_vfiprintf_r+0x25c>
 80061b6:	2203      	movs	r2, #3
 80061b8:	4650      	mov	r0, sl
 80061ba:	7821      	ldrb	r1, [r4, #0]
 80061bc:	f7ff fa66 	bl	800568c <memchr>
 80061c0:	b140      	cbz	r0, 80061d4 <_vfiprintf_r+0x198>
 80061c2:	2340      	movs	r3, #64	; 0x40
 80061c4:	eba0 000a 	sub.w	r0, r0, sl
 80061c8:	fa03 f000 	lsl.w	r0, r3, r0
 80061cc:	9b04      	ldr	r3, [sp, #16]
 80061ce:	3401      	adds	r4, #1
 80061d0:	4303      	orrs	r3, r0
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d8:	2206      	movs	r2, #6
 80061da:	482c      	ldr	r0, [pc, #176]	; (800628c <_vfiprintf_r+0x250>)
 80061dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061e0:	f7ff fa54 	bl	800568c <memchr>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d03f      	beq.n	8006268 <_vfiprintf_r+0x22c>
 80061e8:	4b29      	ldr	r3, [pc, #164]	; (8006290 <_vfiprintf_r+0x254>)
 80061ea:	bb1b      	cbnz	r3, 8006234 <_vfiprintf_r+0x1f8>
 80061ec:	9b03      	ldr	r3, [sp, #12]
 80061ee:	3307      	adds	r3, #7
 80061f0:	f023 0307 	bic.w	r3, r3, #7
 80061f4:	3308      	adds	r3, #8
 80061f6:	9303      	str	r3, [sp, #12]
 80061f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fa:	443b      	add	r3, r7
 80061fc:	9309      	str	r3, [sp, #36]	; 0x24
 80061fe:	e767      	b.n	80060d0 <_vfiprintf_r+0x94>
 8006200:	460c      	mov	r4, r1
 8006202:	2001      	movs	r0, #1
 8006204:	fb0c 3202 	mla	r2, ip, r2, r3
 8006208:	e7a5      	b.n	8006156 <_vfiprintf_r+0x11a>
 800620a:	2300      	movs	r3, #0
 800620c:	f04f 0c0a 	mov.w	ip, #10
 8006210:	4619      	mov	r1, r3
 8006212:	3401      	adds	r4, #1
 8006214:	9305      	str	r3, [sp, #20]
 8006216:	4620      	mov	r0, r4
 8006218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800621c:	3a30      	subs	r2, #48	; 0x30
 800621e:	2a09      	cmp	r2, #9
 8006220:	d903      	bls.n	800622a <_vfiprintf_r+0x1ee>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0c5      	beq.n	80061b2 <_vfiprintf_r+0x176>
 8006226:	9105      	str	r1, [sp, #20]
 8006228:	e7c3      	b.n	80061b2 <_vfiprintf_r+0x176>
 800622a:	4604      	mov	r4, r0
 800622c:	2301      	movs	r3, #1
 800622e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006232:	e7f0      	b.n	8006216 <_vfiprintf_r+0x1da>
 8006234:	ab03      	add	r3, sp, #12
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	462a      	mov	r2, r5
 800623a:	4630      	mov	r0, r6
 800623c:	4b15      	ldr	r3, [pc, #84]	; (8006294 <_vfiprintf_r+0x258>)
 800623e:	a904      	add	r1, sp, #16
 8006240:	f7fd ffda 	bl	80041f8 <_printf_float>
 8006244:	4607      	mov	r7, r0
 8006246:	1c78      	adds	r0, r7, #1
 8006248:	d1d6      	bne.n	80061f8 <_vfiprintf_r+0x1bc>
 800624a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800624c:	07d9      	lsls	r1, r3, #31
 800624e:	d405      	bmi.n	800625c <_vfiprintf_r+0x220>
 8006250:	89ab      	ldrh	r3, [r5, #12]
 8006252:	059a      	lsls	r2, r3, #22
 8006254:	d402      	bmi.n	800625c <_vfiprintf_r+0x220>
 8006256:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006258:	f000 faaf 	bl	80067ba <__retarget_lock_release_recursive>
 800625c:	89ab      	ldrh	r3, [r5, #12]
 800625e:	065b      	lsls	r3, r3, #25
 8006260:	f53f af12 	bmi.w	8006088 <_vfiprintf_r+0x4c>
 8006264:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006266:	e711      	b.n	800608c <_vfiprintf_r+0x50>
 8006268:	ab03      	add	r3, sp, #12
 800626a:	9300      	str	r3, [sp, #0]
 800626c:	462a      	mov	r2, r5
 800626e:	4630      	mov	r0, r6
 8006270:	4b08      	ldr	r3, [pc, #32]	; (8006294 <_vfiprintf_r+0x258>)
 8006272:	a904      	add	r1, sp, #16
 8006274:	f7fe fa5c 	bl	8004730 <_printf_i>
 8006278:	e7e4      	b.n	8006244 <_vfiprintf_r+0x208>
 800627a:	bf00      	nop
 800627c:	080074c4 	.word	0x080074c4
 8006280:	080074e4 	.word	0x080074e4
 8006284:	080074a4 	.word	0x080074a4
 8006288:	08007392 	.word	0x08007392
 800628c:	0800739c 	.word	0x0800739c
 8006290:	080041f9 	.word	0x080041f9
 8006294:	08006017 	.word	0x08006017
 8006298:	08007398 	.word	0x08007398

0800629c <__swbuf_r>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	460e      	mov	r6, r1
 80062a0:	4614      	mov	r4, r2
 80062a2:	4605      	mov	r5, r0
 80062a4:	b118      	cbz	r0, 80062ae <__swbuf_r+0x12>
 80062a6:	6983      	ldr	r3, [r0, #24]
 80062a8:	b90b      	cbnz	r3, 80062ae <__swbuf_r+0x12>
 80062aa:	f000 f9e7 	bl	800667c <__sinit>
 80062ae:	4b21      	ldr	r3, [pc, #132]	; (8006334 <__swbuf_r+0x98>)
 80062b0:	429c      	cmp	r4, r3
 80062b2:	d12b      	bne.n	800630c <__swbuf_r+0x70>
 80062b4:	686c      	ldr	r4, [r5, #4]
 80062b6:	69a3      	ldr	r3, [r4, #24]
 80062b8:	60a3      	str	r3, [r4, #8]
 80062ba:	89a3      	ldrh	r3, [r4, #12]
 80062bc:	071a      	lsls	r2, r3, #28
 80062be:	d52f      	bpl.n	8006320 <__swbuf_r+0x84>
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	b36b      	cbz	r3, 8006320 <__swbuf_r+0x84>
 80062c4:	6923      	ldr	r3, [r4, #16]
 80062c6:	6820      	ldr	r0, [r4, #0]
 80062c8:	b2f6      	uxtb	r6, r6
 80062ca:	1ac0      	subs	r0, r0, r3
 80062cc:	6963      	ldr	r3, [r4, #20]
 80062ce:	4637      	mov	r7, r6
 80062d0:	4283      	cmp	r3, r0
 80062d2:	dc04      	bgt.n	80062de <__swbuf_r+0x42>
 80062d4:	4621      	mov	r1, r4
 80062d6:	4628      	mov	r0, r5
 80062d8:	f000 f93c 	bl	8006554 <_fflush_r>
 80062dc:	bb30      	cbnz	r0, 800632c <__swbuf_r+0x90>
 80062de:	68a3      	ldr	r3, [r4, #8]
 80062e0:	3001      	adds	r0, #1
 80062e2:	3b01      	subs	r3, #1
 80062e4:	60a3      	str	r3, [r4, #8]
 80062e6:	6823      	ldr	r3, [r4, #0]
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	6022      	str	r2, [r4, #0]
 80062ec:	701e      	strb	r6, [r3, #0]
 80062ee:	6963      	ldr	r3, [r4, #20]
 80062f0:	4283      	cmp	r3, r0
 80062f2:	d004      	beq.n	80062fe <__swbuf_r+0x62>
 80062f4:	89a3      	ldrh	r3, [r4, #12]
 80062f6:	07db      	lsls	r3, r3, #31
 80062f8:	d506      	bpl.n	8006308 <__swbuf_r+0x6c>
 80062fa:	2e0a      	cmp	r6, #10
 80062fc:	d104      	bne.n	8006308 <__swbuf_r+0x6c>
 80062fe:	4621      	mov	r1, r4
 8006300:	4628      	mov	r0, r5
 8006302:	f000 f927 	bl	8006554 <_fflush_r>
 8006306:	b988      	cbnz	r0, 800632c <__swbuf_r+0x90>
 8006308:	4638      	mov	r0, r7
 800630a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <__swbuf_r+0x9c>)
 800630e:	429c      	cmp	r4, r3
 8006310:	d101      	bne.n	8006316 <__swbuf_r+0x7a>
 8006312:	68ac      	ldr	r4, [r5, #8]
 8006314:	e7cf      	b.n	80062b6 <__swbuf_r+0x1a>
 8006316:	4b09      	ldr	r3, [pc, #36]	; (800633c <__swbuf_r+0xa0>)
 8006318:	429c      	cmp	r4, r3
 800631a:	bf08      	it	eq
 800631c:	68ec      	ldreq	r4, [r5, #12]
 800631e:	e7ca      	b.n	80062b6 <__swbuf_r+0x1a>
 8006320:	4621      	mov	r1, r4
 8006322:	4628      	mov	r0, r5
 8006324:	f000 f81a 	bl	800635c <__swsetup_r>
 8006328:	2800      	cmp	r0, #0
 800632a:	d0cb      	beq.n	80062c4 <__swbuf_r+0x28>
 800632c:	f04f 37ff 	mov.w	r7, #4294967295
 8006330:	e7ea      	b.n	8006308 <__swbuf_r+0x6c>
 8006332:	bf00      	nop
 8006334:	080074c4 	.word	0x080074c4
 8006338:	080074e4 	.word	0x080074e4
 800633c:	080074a4 	.word	0x080074a4

08006340 <__ascii_wctomb>:
 8006340:	4603      	mov	r3, r0
 8006342:	4608      	mov	r0, r1
 8006344:	b141      	cbz	r1, 8006358 <__ascii_wctomb+0x18>
 8006346:	2aff      	cmp	r2, #255	; 0xff
 8006348:	d904      	bls.n	8006354 <__ascii_wctomb+0x14>
 800634a:	228a      	movs	r2, #138	; 0x8a
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	4770      	bx	lr
 8006354:	2001      	movs	r0, #1
 8006356:	700a      	strb	r2, [r1, #0]
 8006358:	4770      	bx	lr
	...

0800635c <__swsetup_r>:
 800635c:	4b32      	ldr	r3, [pc, #200]	; (8006428 <__swsetup_r+0xcc>)
 800635e:	b570      	push	{r4, r5, r6, lr}
 8006360:	681d      	ldr	r5, [r3, #0]
 8006362:	4606      	mov	r6, r0
 8006364:	460c      	mov	r4, r1
 8006366:	b125      	cbz	r5, 8006372 <__swsetup_r+0x16>
 8006368:	69ab      	ldr	r3, [r5, #24]
 800636a:	b913      	cbnz	r3, 8006372 <__swsetup_r+0x16>
 800636c:	4628      	mov	r0, r5
 800636e:	f000 f985 	bl	800667c <__sinit>
 8006372:	4b2e      	ldr	r3, [pc, #184]	; (800642c <__swsetup_r+0xd0>)
 8006374:	429c      	cmp	r4, r3
 8006376:	d10f      	bne.n	8006398 <__swsetup_r+0x3c>
 8006378:	686c      	ldr	r4, [r5, #4]
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006380:	0719      	lsls	r1, r3, #28
 8006382:	d42c      	bmi.n	80063de <__swsetup_r+0x82>
 8006384:	06dd      	lsls	r5, r3, #27
 8006386:	d411      	bmi.n	80063ac <__swsetup_r+0x50>
 8006388:	2309      	movs	r3, #9
 800638a:	6033      	str	r3, [r6, #0]
 800638c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006390:	f04f 30ff 	mov.w	r0, #4294967295
 8006394:	81a3      	strh	r3, [r4, #12]
 8006396:	e03e      	b.n	8006416 <__swsetup_r+0xba>
 8006398:	4b25      	ldr	r3, [pc, #148]	; (8006430 <__swsetup_r+0xd4>)
 800639a:	429c      	cmp	r4, r3
 800639c:	d101      	bne.n	80063a2 <__swsetup_r+0x46>
 800639e:	68ac      	ldr	r4, [r5, #8]
 80063a0:	e7eb      	b.n	800637a <__swsetup_r+0x1e>
 80063a2:	4b24      	ldr	r3, [pc, #144]	; (8006434 <__swsetup_r+0xd8>)
 80063a4:	429c      	cmp	r4, r3
 80063a6:	bf08      	it	eq
 80063a8:	68ec      	ldreq	r4, [r5, #12]
 80063aa:	e7e6      	b.n	800637a <__swsetup_r+0x1e>
 80063ac:	0758      	lsls	r0, r3, #29
 80063ae:	d512      	bpl.n	80063d6 <__swsetup_r+0x7a>
 80063b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063b2:	b141      	cbz	r1, 80063c6 <__swsetup_r+0x6a>
 80063b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063b8:	4299      	cmp	r1, r3
 80063ba:	d002      	beq.n	80063c2 <__swsetup_r+0x66>
 80063bc:	4630      	mov	r0, r6
 80063be:	f7ff fd11 	bl	8005de4 <_free_r>
 80063c2:	2300      	movs	r3, #0
 80063c4:	6363      	str	r3, [r4, #52]	; 0x34
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	2300      	movs	r3, #0
 80063d0:	6063      	str	r3, [r4, #4]
 80063d2:	6923      	ldr	r3, [r4, #16]
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	f043 0308 	orr.w	r3, r3, #8
 80063dc:	81a3      	strh	r3, [r4, #12]
 80063de:	6923      	ldr	r3, [r4, #16]
 80063e0:	b94b      	cbnz	r3, 80063f6 <__swsetup_r+0x9a>
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ec:	d003      	beq.n	80063f6 <__swsetup_r+0x9a>
 80063ee:	4621      	mov	r1, r4
 80063f0:	4630      	mov	r0, r6
 80063f2:	f000 fa07 	bl	8006804 <__smakebuf_r>
 80063f6:	89a0      	ldrh	r0, [r4, #12]
 80063f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063fc:	f010 0301 	ands.w	r3, r0, #1
 8006400:	d00a      	beq.n	8006418 <__swsetup_r+0xbc>
 8006402:	2300      	movs	r3, #0
 8006404:	60a3      	str	r3, [r4, #8]
 8006406:	6963      	ldr	r3, [r4, #20]
 8006408:	425b      	negs	r3, r3
 800640a:	61a3      	str	r3, [r4, #24]
 800640c:	6923      	ldr	r3, [r4, #16]
 800640e:	b943      	cbnz	r3, 8006422 <__swsetup_r+0xc6>
 8006410:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006414:	d1ba      	bne.n	800638c <__swsetup_r+0x30>
 8006416:	bd70      	pop	{r4, r5, r6, pc}
 8006418:	0781      	lsls	r1, r0, #30
 800641a:	bf58      	it	pl
 800641c:	6963      	ldrpl	r3, [r4, #20]
 800641e:	60a3      	str	r3, [r4, #8]
 8006420:	e7f4      	b.n	800640c <__swsetup_r+0xb0>
 8006422:	2000      	movs	r0, #0
 8006424:	e7f7      	b.n	8006416 <__swsetup_r+0xba>
 8006426:	bf00      	nop
 8006428:	200000a0 	.word	0x200000a0
 800642c:	080074c4 	.word	0x080074c4
 8006430:	080074e4 	.word	0x080074e4
 8006434:	080074a4 	.word	0x080074a4

08006438 <abort>:
 8006438:	2006      	movs	r0, #6
 800643a:	b508      	push	{r3, lr}
 800643c:	f000 fa4a 	bl	80068d4 <raise>
 8006440:	2001      	movs	r0, #1
 8006442:	f7fa ff87 	bl	8001354 <_exit>
	...

08006448 <__sflush_r>:
 8006448:	898a      	ldrh	r2, [r1, #12]
 800644a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800644e:	4605      	mov	r5, r0
 8006450:	0710      	lsls	r0, r2, #28
 8006452:	460c      	mov	r4, r1
 8006454:	d458      	bmi.n	8006508 <__sflush_r+0xc0>
 8006456:	684b      	ldr	r3, [r1, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	dc05      	bgt.n	8006468 <__sflush_r+0x20>
 800645c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	dc02      	bgt.n	8006468 <__sflush_r+0x20>
 8006462:	2000      	movs	r0, #0
 8006464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800646a:	2e00      	cmp	r6, #0
 800646c:	d0f9      	beq.n	8006462 <__sflush_r+0x1a>
 800646e:	2300      	movs	r3, #0
 8006470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006474:	682f      	ldr	r7, [r5, #0]
 8006476:	602b      	str	r3, [r5, #0]
 8006478:	d032      	beq.n	80064e0 <__sflush_r+0x98>
 800647a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	075a      	lsls	r2, r3, #29
 8006480:	d505      	bpl.n	800648e <__sflush_r+0x46>
 8006482:	6863      	ldr	r3, [r4, #4]
 8006484:	1ac0      	subs	r0, r0, r3
 8006486:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006488:	b10b      	cbz	r3, 800648e <__sflush_r+0x46>
 800648a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800648c:	1ac0      	subs	r0, r0, r3
 800648e:	2300      	movs	r3, #0
 8006490:	4602      	mov	r2, r0
 8006492:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006494:	4628      	mov	r0, r5
 8006496:	6a21      	ldr	r1, [r4, #32]
 8006498:	47b0      	blx	r6
 800649a:	1c43      	adds	r3, r0, #1
 800649c:	89a3      	ldrh	r3, [r4, #12]
 800649e:	d106      	bne.n	80064ae <__sflush_r+0x66>
 80064a0:	6829      	ldr	r1, [r5, #0]
 80064a2:	291d      	cmp	r1, #29
 80064a4:	d82c      	bhi.n	8006500 <__sflush_r+0xb8>
 80064a6:	4a2a      	ldr	r2, [pc, #168]	; (8006550 <__sflush_r+0x108>)
 80064a8:	40ca      	lsrs	r2, r1
 80064aa:	07d6      	lsls	r6, r2, #31
 80064ac:	d528      	bpl.n	8006500 <__sflush_r+0xb8>
 80064ae:	2200      	movs	r2, #0
 80064b0:	6062      	str	r2, [r4, #4]
 80064b2:	6922      	ldr	r2, [r4, #16]
 80064b4:	04d9      	lsls	r1, r3, #19
 80064b6:	6022      	str	r2, [r4, #0]
 80064b8:	d504      	bpl.n	80064c4 <__sflush_r+0x7c>
 80064ba:	1c42      	adds	r2, r0, #1
 80064bc:	d101      	bne.n	80064c2 <__sflush_r+0x7a>
 80064be:	682b      	ldr	r3, [r5, #0]
 80064c0:	b903      	cbnz	r3, 80064c4 <__sflush_r+0x7c>
 80064c2:	6560      	str	r0, [r4, #84]	; 0x54
 80064c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064c6:	602f      	str	r7, [r5, #0]
 80064c8:	2900      	cmp	r1, #0
 80064ca:	d0ca      	beq.n	8006462 <__sflush_r+0x1a>
 80064cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064d0:	4299      	cmp	r1, r3
 80064d2:	d002      	beq.n	80064da <__sflush_r+0x92>
 80064d4:	4628      	mov	r0, r5
 80064d6:	f7ff fc85 	bl	8005de4 <_free_r>
 80064da:	2000      	movs	r0, #0
 80064dc:	6360      	str	r0, [r4, #52]	; 0x34
 80064de:	e7c1      	b.n	8006464 <__sflush_r+0x1c>
 80064e0:	6a21      	ldr	r1, [r4, #32]
 80064e2:	2301      	movs	r3, #1
 80064e4:	4628      	mov	r0, r5
 80064e6:	47b0      	blx	r6
 80064e8:	1c41      	adds	r1, r0, #1
 80064ea:	d1c7      	bne.n	800647c <__sflush_r+0x34>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0c4      	beq.n	800647c <__sflush_r+0x34>
 80064f2:	2b1d      	cmp	r3, #29
 80064f4:	d001      	beq.n	80064fa <__sflush_r+0xb2>
 80064f6:	2b16      	cmp	r3, #22
 80064f8:	d101      	bne.n	80064fe <__sflush_r+0xb6>
 80064fa:	602f      	str	r7, [r5, #0]
 80064fc:	e7b1      	b.n	8006462 <__sflush_r+0x1a>
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006504:	81a3      	strh	r3, [r4, #12]
 8006506:	e7ad      	b.n	8006464 <__sflush_r+0x1c>
 8006508:	690f      	ldr	r7, [r1, #16]
 800650a:	2f00      	cmp	r7, #0
 800650c:	d0a9      	beq.n	8006462 <__sflush_r+0x1a>
 800650e:	0793      	lsls	r3, r2, #30
 8006510:	bf18      	it	ne
 8006512:	2300      	movne	r3, #0
 8006514:	680e      	ldr	r6, [r1, #0]
 8006516:	bf08      	it	eq
 8006518:	694b      	ldreq	r3, [r1, #20]
 800651a:	eba6 0807 	sub.w	r8, r6, r7
 800651e:	600f      	str	r7, [r1, #0]
 8006520:	608b      	str	r3, [r1, #8]
 8006522:	f1b8 0f00 	cmp.w	r8, #0
 8006526:	dd9c      	ble.n	8006462 <__sflush_r+0x1a>
 8006528:	4643      	mov	r3, r8
 800652a:	463a      	mov	r2, r7
 800652c:	4628      	mov	r0, r5
 800652e:	6a21      	ldr	r1, [r4, #32]
 8006530:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006532:	47b0      	blx	r6
 8006534:	2800      	cmp	r0, #0
 8006536:	dc06      	bgt.n	8006546 <__sflush_r+0xfe>
 8006538:	89a3      	ldrh	r3, [r4, #12]
 800653a:	f04f 30ff 	mov.w	r0, #4294967295
 800653e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006542:	81a3      	strh	r3, [r4, #12]
 8006544:	e78e      	b.n	8006464 <__sflush_r+0x1c>
 8006546:	4407      	add	r7, r0
 8006548:	eba8 0800 	sub.w	r8, r8, r0
 800654c:	e7e9      	b.n	8006522 <__sflush_r+0xda>
 800654e:	bf00      	nop
 8006550:	20400001 	.word	0x20400001

08006554 <_fflush_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	690b      	ldr	r3, [r1, #16]
 8006558:	4605      	mov	r5, r0
 800655a:	460c      	mov	r4, r1
 800655c:	b913      	cbnz	r3, 8006564 <_fflush_r+0x10>
 800655e:	2500      	movs	r5, #0
 8006560:	4628      	mov	r0, r5
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	b118      	cbz	r0, 800656e <_fflush_r+0x1a>
 8006566:	6983      	ldr	r3, [r0, #24]
 8006568:	b90b      	cbnz	r3, 800656e <_fflush_r+0x1a>
 800656a:	f000 f887 	bl	800667c <__sinit>
 800656e:	4b14      	ldr	r3, [pc, #80]	; (80065c0 <_fflush_r+0x6c>)
 8006570:	429c      	cmp	r4, r3
 8006572:	d11b      	bne.n	80065ac <_fflush_r+0x58>
 8006574:	686c      	ldr	r4, [r5, #4]
 8006576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0ef      	beq.n	800655e <_fflush_r+0xa>
 800657e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006580:	07d0      	lsls	r0, r2, #31
 8006582:	d404      	bmi.n	800658e <_fflush_r+0x3a>
 8006584:	0599      	lsls	r1, r3, #22
 8006586:	d402      	bmi.n	800658e <_fflush_r+0x3a>
 8006588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800658a:	f000 f915 	bl	80067b8 <__retarget_lock_acquire_recursive>
 800658e:	4628      	mov	r0, r5
 8006590:	4621      	mov	r1, r4
 8006592:	f7ff ff59 	bl	8006448 <__sflush_r>
 8006596:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006598:	4605      	mov	r5, r0
 800659a:	07da      	lsls	r2, r3, #31
 800659c:	d4e0      	bmi.n	8006560 <_fflush_r+0xc>
 800659e:	89a3      	ldrh	r3, [r4, #12]
 80065a0:	059b      	lsls	r3, r3, #22
 80065a2:	d4dd      	bmi.n	8006560 <_fflush_r+0xc>
 80065a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065a6:	f000 f908 	bl	80067ba <__retarget_lock_release_recursive>
 80065aa:	e7d9      	b.n	8006560 <_fflush_r+0xc>
 80065ac:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <_fflush_r+0x70>)
 80065ae:	429c      	cmp	r4, r3
 80065b0:	d101      	bne.n	80065b6 <_fflush_r+0x62>
 80065b2:	68ac      	ldr	r4, [r5, #8]
 80065b4:	e7df      	b.n	8006576 <_fflush_r+0x22>
 80065b6:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <_fflush_r+0x74>)
 80065b8:	429c      	cmp	r4, r3
 80065ba:	bf08      	it	eq
 80065bc:	68ec      	ldreq	r4, [r5, #12]
 80065be:	e7da      	b.n	8006576 <_fflush_r+0x22>
 80065c0:	080074c4 	.word	0x080074c4
 80065c4:	080074e4 	.word	0x080074e4
 80065c8:	080074a4 	.word	0x080074a4

080065cc <std>:
 80065cc:	2300      	movs	r3, #0
 80065ce:	b510      	push	{r4, lr}
 80065d0:	4604      	mov	r4, r0
 80065d2:	e9c0 3300 	strd	r3, r3, [r0]
 80065d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065da:	6083      	str	r3, [r0, #8]
 80065dc:	8181      	strh	r1, [r0, #12]
 80065de:	6643      	str	r3, [r0, #100]	; 0x64
 80065e0:	81c2      	strh	r2, [r0, #14]
 80065e2:	6183      	str	r3, [r0, #24]
 80065e4:	4619      	mov	r1, r3
 80065e6:	2208      	movs	r2, #8
 80065e8:	305c      	adds	r0, #92	; 0x5c
 80065ea:	f7fd fd5f 	bl	80040ac <memset>
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <std+0x38>)
 80065f0:	6224      	str	r4, [r4, #32]
 80065f2:	6263      	str	r3, [r4, #36]	; 0x24
 80065f4:	4b04      	ldr	r3, [pc, #16]	; (8006608 <std+0x3c>)
 80065f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80065f8:	4b04      	ldr	r3, [pc, #16]	; (800660c <std+0x40>)
 80065fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065fc:	4b04      	ldr	r3, [pc, #16]	; (8006610 <std+0x44>)
 80065fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006600:	bd10      	pop	{r4, pc}
 8006602:	bf00      	nop
 8006604:	0800690d 	.word	0x0800690d
 8006608:	0800692f 	.word	0x0800692f
 800660c:	08006967 	.word	0x08006967
 8006610:	0800698b 	.word	0x0800698b

08006614 <_cleanup_r>:
 8006614:	4901      	ldr	r1, [pc, #4]	; (800661c <_cleanup_r+0x8>)
 8006616:	f000 b8af 	b.w	8006778 <_fwalk_reent>
 800661a:	bf00      	nop
 800661c:	08006555 	.word	0x08006555

08006620 <__sfmoreglue>:
 8006620:	b570      	push	{r4, r5, r6, lr}
 8006622:	2568      	movs	r5, #104	; 0x68
 8006624:	1e4a      	subs	r2, r1, #1
 8006626:	4355      	muls	r5, r2
 8006628:	460e      	mov	r6, r1
 800662a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800662e:	f7ff fc25 	bl	8005e7c <_malloc_r>
 8006632:	4604      	mov	r4, r0
 8006634:	b140      	cbz	r0, 8006648 <__sfmoreglue+0x28>
 8006636:	2100      	movs	r1, #0
 8006638:	e9c0 1600 	strd	r1, r6, [r0]
 800663c:	300c      	adds	r0, #12
 800663e:	60a0      	str	r0, [r4, #8]
 8006640:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006644:	f7fd fd32 	bl	80040ac <memset>
 8006648:	4620      	mov	r0, r4
 800664a:	bd70      	pop	{r4, r5, r6, pc}

0800664c <__sfp_lock_acquire>:
 800664c:	4801      	ldr	r0, [pc, #4]	; (8006654 <__sfp_lock_acquire+0x8>)
 800664e:	f000 b8b3 	b.w	80067b8 <__retarget_lock_acquire_recursive>
 8006652:	bf00      	nop
 8006654:	20000410 	.word	0x20000410

08006658 <__sfp_lock_release>:
 8006658:	4801      	ldr	r0, [pc, #4]	; (8006660 <__sfp_lock_release+0x8>)
 800665a:	f000 b8ae 	b.w	80067ba <__retarget_lock_release_recursive>
 800665e:	bf00      	nop
 8006660:	20000410 	.word	0x20000410

08006664 <__sinit_lock_acquire>:
 8006664:	4801      	ldr	r0, [pc, #4]	; (800666c <__sinit_lock_acquire+0x8>)
 8006666:	f000 b8a7 	b.w	80067b8 <__retarget_lock_acquire_recursive>
 800666a:	bf00      	nop
 800666c:	2000040b 	.word	0x2000040b

08006670 <__sinit_lock_release>:
 8006670:	4801      	ldr	r0, [pc, #4]	; (8006678 <__sinit_lock_release+0x8>)
 8006672:	f000 b8a2 	b.w	80067ba <__retarget_lock_release_recursive>
 8006676:	bf00      	nop
 8006678:	2000040b 	.word	0x2000040b

0800667c <__sinit>:
 800667c:	b510      	push	{r4, lr}
 800667e:	4604      	mov	r4, r0
 8006680:	f7ff fff0 	bl	8006664 <__sinit_lock_acquire>
 8006684:	69a3      	ldr	r3, [r4, #24]
 8006686:	b11b      	cbz	r3, 8006690 <__sinit+0x14>
 8006688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800668c:	f7ff bff0 	b.w	8006670 <__sinit_lock_release>
 8006690:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006694:	6523      	str	r3, [r4, #80]	; 0x50
 8006696:	4b13      	ldr	r3, [pc, #76]	; (80066e4 <__sinit+0x68>)
 8006698:	4a13      	ldr	r2, [pc, #76]	; (80066e8 <__sinit+0x6c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	62a2      	str	r2, [r4, #40]	; 0x28
 800669e:	42a3      	cmp	r3, r4
 80066a0:	bf08      	it	eq
 80066a2:	2301      	moveq	r3, #1
 80066a4:	4620      	mov	r0, r4
 80066a6:	bf08      	it	eq
 80066a8:	61a3      	streq	r3, [r4, #24]
 80066aa:	f000 f81f 	bl	80066ec <__sfp>
 80066ae:	6060      	str	r0, [r4, #4]
 80066b0:	4620      	mov	r0, r4
 80066b2:	f000 f81b 	bl	80066ec <__sfp>
 80066b6:	60a0      	str	r0, [r4, #8]
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 f817 	bl	80066ec <__sfp>
 80066be:	2200      	movs	r2, #0
 80066c0:	2104      	movs	r1, #4
 80066c2:	60e0      	str	r0, [r4, #12]
 80066c4:	6860      	ldr	r0, [r4, #4]
 80066c6:	f7ff ff81 	bl	80065cc <std>
 80066ca:	2201      	movs	r2, #1
 80066cc:	2109      	movs	r1, #9
 80066ce:	68a0      	ldr	r0, [r4, #8]
 80066d0:	f7ff ff7c 	bl	80065cc <std>
 80066d4:	2202      	movs	r2, #2
 80066d6:	2112      	movs	r1, #18
 80066d8:	68e0      	ldr	r0, [r4, #12]
 80066da:	f7ff ff77 	bl	80065cc <std>
 80066de:	2301      	movs	r3, #1
 80066e0:	61a3      	str	r3, [r4, #24]
 80066e2:	e7d1      	b.n	8006688 <__sinit+0xc>
 80066e4:	08007120 	.word	0x08007120
 80066e8:	08006615 	.word	0x08006615

080066ec <__sfp>:
 80066ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ee:	4607      	mov	r7, r0
 80066f0:	f7ff ffac 	bl	800664c <__sfp_lock_acquire>
 80066f4:	4b1e      	ldr	r3, [pc, #120]	; (8006770 <__sfp+0x84>)
 80066f6:	681e      	ldr	r6, [r3, #0]
 80066f8:	69b3      	ldr	r3, [r6, #24]
 80066fa:	b913      	cbnz	r3, 8006702 <__sfp+0x16>
 80066fc:	4630      	mov	r0, r6
 80066fe:	f7ff ffbd 	bl	800667c <__sinit>
 8006702:	3648      	adds	r6, #72	; 0x48
 8006704:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006708:	3b01      	subs	r3, #1
 800670a:	d503      	bpl.n	8006714 <__sfp+0x28>
 800670c:	6833      	ldr	r3, [r6, #0]
 800670e:	b30b      	cbz	r3, 8006754 <__sfp+0x68>
 8006710:	6836      	ldr	r6, [r6, #0]
 8006712:	e7f7      	b.n	8006704 <__sfp+0x18>
 8006714:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006718:	b9d5      	cbnz	r5, 8006750 <__sfp+0x64>
 800671a:	4b16      	ldr	r3, [pc, #88]	; (8006774 <__sfp+0x88>)
 800671c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006720:	60e3      	str	r3, [r4, #12]
 8006722:	6665      	str	r5, [r4, #100]	; 0x64
 8006724:	f000 f847 	bl	80067b6 <__retarget_lock_init_recursive>
 8006728:	f7ff ff96 	bl	8006658 <__sfp_lock_release>
 800672c:	2208      	movs	r2, #8
 800672e:	4629      	mov	r1, r5
 8006730:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006734:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006738:	6025      	str	r5, [r4, #0]
 800673a:	61a5      	str	r5, [r4, #24]
 800673c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006740:	f7fd fcb4 	bl	80040ac <memset>
 8006744:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006748:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800674c:	4620      	mov	r0, r4
 800674e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006750:	3468      	adds	r4, #104	; 0x68
 8006752:	e7d9      	b.n	8006708 <__sfp+0x1c>
 8006754:	2104      	movs	r1, #4
 8006756:	4638      	mov	r0, r7
 8006758:	f7ff ff62 	bl	8006620 <__sfmoreglue>
 800675c:	4604      	mov	r4, r0
 800675e:	6030      	str	r0, [r6, #0]
 8006760:	2800      	cmp	r0, #0
 8006762:	d1d5      	bne.n	8006710 <__sfp+0x24>
 8006764:	f7ff ff78 	bl	8006658 <__sfp_lock_release>
 8006768:	230c      	movs	r3, #12
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	e7ee      	b.n	800674c <__sfp+0x60>
 800676e:	bf00      	nop
 8006770:	08007120 	.word	0x08007120
 8006774:	ffff0001 	.word	0xffff0001

08006778 <_fwalk_reent>:
 8006778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800677c:	4606      	mov	r6, r0
 800677e:	4688      	mov	r8, r1
 8006780:	2700      	movs	r7, #0
 8006782:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006786:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800678a:	f1b9 0901 	subs.w	r9, r9, #1
 800678e:	d505      	bpl.n	800679c <_fwalk_reent+0x24>
 8006790:	6824      	ldr	r4, [r4, #0]
 8006792:	2c00      	cmp	r4, #0
 8006794:	d1f7      	bne.n	8006786 <_fwalk_reent+0xe>
 8006796:	4638      	mov	r0, r7
 8006798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800679c:	89ab      	ldrh	r3, [r5, #12]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d907      	bls.n	80067b2 <_fwalk_reent+0x3a>
 80067a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067a6:	3301      	adds	r3, #1
 80067a8:	d003      	beq.n	80067b2 <_fwalk_reent+0x3a>
 80067aa:	4629      	mov	r1, r5
 80067ac:	4630      	mov	r0, r6
 80067ae:	47c0      	blx	r8
 80067b0:	4307      	orrs	r7, r0
 80067b2:	3568      	adds	r5, #104	; 0x68
 80067b4:	e7e9      	b.n	800678a <_fwalk_reent+0x12>

080067b6 <__retarget_lock_init_recursive>:
 80067b6:	4770      	bx	lr

080067b8 <__retarget_lock_acquire_recursive>:
 80067b8:	4770      	bx	lr

080067ba <__retarget_lock_release_recursive>:
 80067ba:	4770      	bx	lr

080067bc <__swhatbuf_r>:
 80067bc:	b570      	push	{r4, r5, r6, lr}
 80067be:	460e      	mov	r6, r1
 80067c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c4:	4614      	mov	r4, r2
 80067c6:	2900      	cmp	r1, #0
 80067c8:	461d      	mov	r5, r3
 80067ca:	b096      	sub	sp, #88	; 0x58
 80067cc:	da07      	bge.n	80067de <__swhatbuf_r+0x22>
 80067ce:	2300      	movs	r3, #0
 80067d0:	602b      	str	r3, [r5, #0]
 80067d2:	89b3      	ldrh	r3, [r6, #12]
 80067d4:	061a      	lsls	r2, r3, #24
 80067d6:	d410      	bmi.n	80067fa <__swhatbuf_r+0x3e>
 80067d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067dc:	e00e      	b.n	80067fc <__swhatbuf_r+0x40>
 80067de:	466a      	mov	r2, sp
 80067e0:	f000 f8fa 	bl	80069d8 <_fstat_r>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	dbf2      	blt.n	80067ce <__swhatbuf_r+0x12>
 80067e8:	9a01      	ldr	r2, [sp, #4]
 80067ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067f2:	425a      	negs	r2, r3
 80067f4:	415a      	adcs	r2, r3
 80067f6:	602a      	str	r2, [r5, #0]
 80067f8:	e7ee      	b.n	80067d8 <__swhatbuf_r+0x1c>
 80067fa:	2340      	movs	r3, #64	; 0x40
 80067fc:	2000      	movs	r0, #0
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	b016      	add	sp, #88	; 0x58
 8006802:	bd70      	pop	{r4, r5, r6, pc}

08006804 <__smakebuf_r>:
 8006804:	898b      	ldrh	r3, [r1, #12]
 8006806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006808:	079d      	lsls	r5, r3, #30
 800680a:	4606      	mov	r6, r0
 800680c:	460c      	mov	r4, r1
 800680e:	d507      	bpl.n	8006820 <__smakebuf_r+0x1c>
 8006810:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	6123      	str	r3, [r4, #16]
 8006818:	2301      	movs	r3, #1
 800681a:	6163      	str	r3, [r4, #20]
 800681c:	b002      	add	sp, #8
 800681e:	bd70      	pop	{r4, r5, r6, pc}
 8006820:	466a      	mov	r2, sp
 8006822:	ab01      	add	r3, sp, #4
 8006824:	f7ff ffca 	bl	80067bc <__swhatbuf_r>
 8006828:	9900      	ldr	r1, [sp, #0]
 800682a:	4605      	mov	r5, r0
 800682c:	4630      	mov	r0, r6
 800682e:	f7ff fb25 	bl	8005e7c <_malloc_r>
 8006832:	b948      	cbnz	r0, 8006848 <__smakebuf_r+0x44>
 8006834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006838:	059a      	lsls	r2, r3, #22
 800683a:	d4ef      	bmi.n	800681c <__smakebuf_r+0x18>
 800683c:	f023 0303 	bic.w	r3, r3, #3
 8006840:	f043 0302 	orr.w	r3, r3, #2
 8006844:	81a3      	strh	r3, [r4, #12]
 8006846:	e7e3      	b.n	8006810 <__smakebuf_r+0xc>
 8006848:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <__smakebuf_r+0x7c>)
 800684a:	62b3      	str	r3, [r6, #40]	; 0x28
 800684c:	89a3      	ldrh	r3, [r4, #12]
 800684e:	6020      	str	r0, [r4, #0]
 8006850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006854:	81a3      	strh	r3, [r4, #12]
 8006856:	9b00      	ldr	r3, [sp, #0]
 8006858:	6120      	str	r0, [r4, #16]
 800685a:	6163      	str	r3, [r4, #20]
 800685c:	9b01      	ldr	r3, [sp, #4]
 800685e:	b15b      	cbz	r3, 8006878 <__smakebuf_r+0x74>
 8006860:	4630      	mov	r0, r6
 8006862:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006866:	f000 f8c9 	bl	80069fc <_isatty_r>
 800686a:	b128      	cbz	r0, 8006878 <__smakebuf_r+0x74>
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	f023 0303 	bic.w	r3, r3, #3
 8006872:	f043 0301 	orr.w	r3, r3, #1
 8006876:	81a3      	strh	r3, [r4, #12]
 8006878:	89a0      	ldrh	r0, [r4, #12]
 800687a:	4305      	orrs	r5, r0
 800687c:	81a5      	strh	r5, [r4, #12]
 800687e:	e7cd      	b.n	800681c <__smakebuf_r+0x18>
 8006880:	08006615 	.word	0x08006615

08006884 <_raise_r>:
 8006884:	291f      	cmp	r1, #31
 8006886:	b538      	push	{r3, r4, r5, lr}
 8006888:	4604      	mov	r4, r0
 800688a:	460d      	mov	r5, r1
 800688c:	d904      	bls.n	8006898 <_raise_r+0x14>
 800688e:	2316      	movs	r3, #22
 8006890:	6003      	str	r3, [r0, #0]
 8006892:	f04f 30ff 	mov.w	r0, #4294967295
 8006896:	bd38      	pop	{r3, r4, r5, pc}
 8006898:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800689a:	b112      	cbz	r2, 80068a2 <_raise_r+0x1e>
 800689c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068a0:	b94b      	cbnz	r3, 80068b6 <_raise_r+0x32>
 80068a2:	4620      	mov	r0, r4
 80068a4:	f000 f830 	bl	8006908 <_getpid_r>
 80068a8:	462a      	mov	r2, r5
 80068aa:	4601      	mov	r1, r0
 80068ac:	4620      	mov	r0, r4
 80068ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068b2:	f000 b817 	b.w	80068e4 <_kill_r>
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d00a      	beq.n	80068d0 <_raise_r+0x4c>
 80068ba:	1c59      	adds	r1, r3, #1
 80068bc:	d103      	bne.n	80068c6 <_raise_r+0x42>
 80068be:	2316      	movs	r3, #22
 80068c0:	6003      	str	r3, [r0, #0]
 80068c2:	2001      	movs	r0, #1
 80068c4:	e7e7      	b.n	8006896 <_raise_r+0x12>
 80068c6:	2400      	movs	r4, #0
 80068c8:	4628      	mov	r0, r5
 80068ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80068ce:	4798      	blx	r3
 80068d0:	2000      	movs	r0, #0
 80068d2:	e7e0      	b.n	8006896 <_raise_r+0x12>

080068d4 <raise>:
 80068d4:	4b02      	ldr	r3, [pc, #8]	; (80068e0 <raise+0xc>)
 80068d6:	4601      	mov	r1, r0
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	f7ff bfd3 	b.w	8006884 <_raise_r>
 80068de:	bf00      	nop
 80068e0:	200000a0 	.word	0x200000a0

080068e4 <_kill_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	2300      	movs	r3, #0
 80068e8:	4d06      	ldr	r5, [pc, #24]	; (8006904 <_kill_r+0x20>)
 80068ea:	4604      	mov	r4, r0
 80068ec:	4608      	mov	r0, r1
 80068ee:	4611      	mov	r1, r2
 80068f0:	602b      	str	r3, [r5, #0]
 80068f2:	f7fa fd1f 	bl	8001334 <_kill>
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	d102      	bne.n	8006900 <_kill_r+0x1c>
 80068fa:	682b      	ldr	r3, [r5, #0]
 80068fc:	b103      	cbz	r3, 8006900 <_kill_r+0x1c>
 80068fe:	6023      	str	r3, [r4, #0]
 8006900:	bd38      	pop	{r3, r4, r5, pc}
 8006902:	bf00      	nop
 8006904:	20000404 	.word	0x20000404

08006908 <_getpid_r>:
 8006908:	f7fa bd0d 	b.w	8001326 <_getpid>

0800690c <__sread>:
 800690c:	b510      	push	{r4, lr}
 800690e:	460c      	mov	r4, r1
 8006910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006914:	f000 f894 	bl	8006a40 <_read_r>
 8006918:	2800      	cmp	r0, #0
 800691a:	bfab      	itete	ge
 800691c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800691e:	89a3      	ldrhlt	r3, [r4, #12]
 8006920:	181b      	addge	r3, r3, r0
 8006922:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006926:	bfac      	ite	ge
 8006928:	6563      	strge	r3, [r4, #84]	; 0x54
 800692a:	81a3      	strhlt	r3, [r4, #12]
 800692c:	bd10      	pop	{r4, pc}

0800692e <__swrite>:
 800692e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006932:	461f      	mov	r7, r3
 8006934:	898b      	ldrh	r3, [r1, #12]
 8006936:	4605      	mov	r5, r0
 8006938:	05db      	lsls	r3, r3, #23
 800693a:	460c      	mov	r4, r1
 800693c:	4616      	mov	r6, r2
 800693e:	d505      	bpl.n	800694c <__swrite+0x1e>
 8006940:	2302      	movs	r3, #2
 8006942:	2200      	movs	r2, #0
 8006944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006948:	f000 f868 	bl	8006a1c <_lseek_r>
 800694c:	89a3      	ldrh	r3, [r4, #12]
 800694e:	4632      	mov	r2, r6
 8006950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006954:	81a3      	strh	r3, [r4, #12]
 8006956:	4628      	mov	r0, r5
 8006958:	463b      	mov	r3, r7
 800695a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800695e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006962:	f000 b817 	b.w	8006994 <_write_r>

08006966 <__sseek>:
 8006966:	b510      	push	{r4, lr}
 8006968:	460c      	mov	r4, r1
 800696a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800696e:	f000 f855 	bl	8006a1c <_lseek_r>
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	bf15      	itete	ne
 8006978:	6560      	strne	r0, [r4, #84]	; 0x54
 800697a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800697e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006982:	81a3      	strheq	r3, [r4, #12]
 8006984:	bf18      	it	ne
 8006986:	81a3      	strhne	r3, [r4, #12]
 8006988:	bd10      	pop	{r4, pc}

0800698a <__sclose>:
 800698a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698e:	f000 b813 	b.w	80069b8 <_close_r>
	...

08006994 <_write_r>:
 8006994:	b538      	push	{r3, r4, r5, lr}
 8006996:	4604      	mov	r4, r0
 8006998:	4608      	mov	r0, r1
 800699a:	4611      	mov	r1, r2
 800699c:	2200      	movs	r2, #0
 800699e:	4d05      	ldr	r5, [pc, #20]	; (80069b4 <_write_r+0x20>)
 80069a0:	602a      	str	r2, [r5, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	f7fa fcfd 	bl	80013a2 <_write>
 80069a8:	1c43      	adds	r3, r0, #1
 80069aa:	d102      	bne.n	80069b2 <_write_r+0x1e>
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	b103      	cbz	r3, 80069b2 <_write_r+0x1e>
 80069b0:	6023      	str	r3, [r4, #0]
 80069b2:	bd38      	pop	{r3, r4, r5, pc}
 80069b4:	20000404 	.word	0x20000404

080069b8 <_close_r>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	2300      	movs	r3, #0
 80069bc:	4d05      	ldr	r5, [pc, #20]	; (80069d4 <_close_r+0x1c>)
 80069be:	4604      	mov	r4, r0
 80069c0:	4608      	mov	r0, r1
 80069c2:	602b      	str	r3, [r5, #0]
 80069c4:	f7fa fd09 	bl	80013da <_close>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d102      	bne.n	80069d2 <_close_r+0x1a>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	b103      	cbz	r3, 80069d2 <_close_r+0x1a>
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	20000404 	.word	0x20000404

080069d8 <_fstat_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	2300      	movs	r3, #0
 80069dc:	4d06      	ldr	r5, [pc, #24]	; (80069f8 <_fstat_r+0x20>)
 80069de:	4604      	mov	r4, r0
 80069e0:	4608      	mov	r0, r1
 80069e2:	4611      	mov	r1, r2
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	f7fa fd03 	bl	80013f0 <_fstat>
 80069ea:	1c43      	adds	r3, r0, #1
 80069ec:	d102      	bne.n	80069f4 <_fstat_r+0x1c>
 80069ee:	682b      	ldr	r3, [r5, #0]
 80069f0:	b103      	cbz	r3, 80069f4 <_fstat_r+0x1c>
 80069f2:	6023      	str	r3, [r4, #0]
 80069f4:	bd38      	pop	{r3, r4, r5, pc}
 80069f6:	bf00      	nop
 80069f8:	20000404 	.word	0x20000404

080069fc <_isatty_r>:
 80069fc:	b538      	push	{r3, r4, r5, lr}
 80069fe:	2300      	movs	r3, #0
 8006a00:	4d05      	ldr	r5, [pc, #20]	; (8006a18 <_isatty_r+0x1c>)
 8006a02:	4604      	mov	r4, r0
 8006a04:	4608      	mov	r0, r1
 8006a06:	602b      	str	r3, [r5, #0]
 8006a08:	f7fa fd01 	bl	800140e <_isatty>
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d102      	bne.n	8006a16 <_isatty_r+0x1a>
 8006a10:	682b      	ldr	r3, [r5, #0]
 8006a12:	b103      	cbz	r3, 8006a16 <_isatty_r+0x1a>
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	bd38      	pop	{r3, r4, r5, pc}
 8006a18:	20000404 	.word	0x20000404

08006a1c <_lseek_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4604      	mov	r4, r0
 8006a20:	4608      	mov	r0, r1
 8006a22:	4611      	mov	r1, r2
 8006a24:	2200      	movs	r2, #0
 8006a26:	4d05      	ldr	r5, [pc, #20]	; (8006a3c <_lseek_r+0x20>)
 8006a28:	602a      	str	r2, [r5, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f7fa fcf9 	bl	8001422 <_lseek>
 8006a30:	1c43      	adds	r3, r0, #1
 8006a32:	d102      	bne.n	8006a3a <_lseek_r+0x1e>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	b103      	cbz	r3, 8006a3a <_lseek_r+0x1e>
 8006a38:	6023      	str	r3, [r4, #0]
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	20000404 	.word	0x20000404

08006a40 <_read_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4604      	mov	r4, r0
 8006a44:	4608      	mov	r0, r1
 8006a46:	4611      	mov	r1, r2
 8006a48:	2200      	movs	r2, #0
 8006a4a:	4d05      	ldr	r5, [pc, #20]	; (8006a60 <_read_r+0x20>)
 8006a4c:	602a      	str	r2, [r5, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f7fa fc8a 	bl	8001368 <_read>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d102      	bne.n	8006a5e <_read_r+0x1e>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	b103      	cbz	r3, 8006a5e <_read_r+0x1e>
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}
 8006a60:	20000404 	.word	0x20000404
 8006a64:	00000000 	.word	0x00000000

08006a68 <atan>:
 8006a68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	4bb6      	ldr	r3, [pc, #728]	; (8006d48 <atan+0x2e0>)
 8006a6e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006a72:	429e      	cmp	r6, r3
 8006a74:	4604      	mov	r4, r0
 8006a76:	460d      	mov	r5, r1
 8006a78:	468b      	mov	fp, r1
 8006a7a:	dd17      	ble.n	8006aac <atan+0x44>
 8006a7c:	4bb3      	ldr	r3, [pc, #716]	; (8006d4c <atan+0x2e4>)
 8006a7e:	429e      	cmp	r6, r3
 8006a80:	dc01      	bgt.n	8006a86 <atan+0x1e>
 8006a82:	d109      	bne.n	8006a98 <atan+0x30>
 8006a84:	b140      	cbz	r0, 8006a98 <atan+0x30>
 8006a86:	4622      	mov	r2, r4
 8006a88:	462b      	mov	r3, r5
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	f7f9 fbd9 	bl	8000244 <__adddf3>
 8006a92:	4604      	mov	r4, r0
 8006a94:	460d      	mov	r5, r1
 8006a96:	e005      	b.n	8006aa4 <atan+0x3c>
 8006a98:	f1bb 0f00 	cmp.w	fp, #0
 8006a9c:	4cac      	ldr	r4, [pc, #688]	; (8006d50 <atan+0x2e8>)
 8006a9e:	f300 8121 	bgt.w	8006ce4 <atan+0x27c>
 8006aa2:	4dac      	ldr	r5, [pc, #688]	; (8006d54 <atan+0x2ec>)
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aac:	4baa      	ldr	r3, [pc, #680]	; (8006d58 <atan+0x2f0>)
 8006aae:	429e      	cmp	r6, r3
 8006ab0:	dc11      	bgt.n	8006ad6 <atan+0x6e>
 8006ab2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006ab6:	429e      	cmp	r6, r3
 8006ab8:	dc0a      	bgt.n	8006ad0 <atan+0x68>
 8006aba:	a38b      	add	r3, pc, #556	; (adr r3, 8006ce8 <atan+0x280>)
 8006abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac0:	f7f9 fbc0 	bl	8000244 <__adddf3>
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	4ba5      	ldr	r3, [pc, #660]	; (8006d5c <atan+0x2f4>)
 8006ac8:	f7fa f802 	bl	8000ad0 <__aeabi_dcmpgt>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d1e9      	bne.n	8006aa4 <atan+0x3c>
 8006ad0:	f04f 3aff 	mov.w	sl, #4294967295
 8006ad4:	e027      	b.n	8006b26 <atan+0xbe>
 8006ad6:	f000 f951 	bl	8006d7c <fabs>
 8006ada:	4ba1      	ldr	r3, [pc, #644]	; (8006d60 <atan+0x2f8>)
 8006adc:	4604      	mov	r4, r0
 8006ade:	429e      	cmp	r6, r3
 8006ae0:	460d      	mov	r5, r1
 8006ae2:	f300 80b8 	bgt.w	8006c56 <atan+0x1ee>
 8006ae6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006aea:	429e      	cmp	r6, r3
 8006aec:	f300 809c 	bgt.w	8006c28 <atan+0x1c0>
 8006af0:	4602      	mov	r2, r0
 8006af2:	460b      	mov	r3, r1
 8006af4:	f7f9 fba6 	bl	8000244 <__adddf3>
 8006af8:	2200      	movs	r2, #0
 8006afa:	4b98      	ldr	r3, [pc, #608]	; (8006d5c <atan+0x2f4>)
 8006afc:	f7f9 fba0 	bl	8000240 <__aeabi_dsub>
 8006b00:	2200      	movs	r2, #0
 8006b02:	4606      	mov	r6, r0
 8006b04:	460f      	mov	r7, r1
 8006b06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	f7f9 fb99 	bl	8000244 <__adddf3>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4630      	mov	r0, r6
 8006b18:	4639      	mov	r1, r7
 8006b1a:	f7f9 fe73 	bl	8000804 <__aeabi_ddiv>
 8006b1e:	f04f 0a00 	mov.w	sl, #0
 8006b22:	4604      	mov	r4, r0
 8006b24:	460d      	mov	r5, r1
 8006b26:	4622      	mov	r2, r4
 8006b28:	462b      	mov	r3, r5
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	4629      	mov	r1, r5
 8006b2e:	f7f9 fd3f 	bl	80005b0 <__aeabi_dmul>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4680      	mov	r8, r0
 8006b38:	4689      	mov	r9, r1
 8006b3a:	f7f9 fd39 	bl	80005b0 <__aeabi_dmul>
 8006b3e:	a36c      	add	r3, pc, #432	; (adr r3, 8006cf0 <atan+0x288>)
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	4606      	mov	r6, r0
 8006b46:	460f      	mov	r7, r1
 8006b48:	f7f9 fd32 	bl	80005b0 <__aeabi_dmul>
 8006b4c:	a36a      	add	r3, pc, #424	; (adr r3, 8006cf8 <atan+0x290>)
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f7f9 fb77 	bl	8000244 <__adddf3>
 8006b56:	4632      	mov	r2, r6
 8006b58:	463b      	mov	r3, r7
 8006b5a:	f7f9 fd29 	bl	80005b0 <__aeabi_dmul>
 8006b5e:	a368      	add	r3, pc, #416	; (adr r3, 8006d00 <atan+0x298>)
 8006b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b64:	f7f9 fb6e 	bl	8000244 <__adddf3>
 8006b68:	4632      	mov	r2, r6
 8006b6a:	463b      	mov	r3, r7
 8006b6c:	f7f9 fd20 	bl	80005b0 <__aeabi_dmul>
 8006b70:	a365      	add	r3, pc, #404	; (adr r3, 8006d08 <atan+0x2a0>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f7f9 fb65 	bl	8000244 <__adddf3>
 8006b7a:	4632      	mov	r2, r6
 8006b7c:	463b      	mov	r3, r7
 8006b7e:	f7f9 fd17 	bl	80005b0 <__aeabi_dmul>
 8006b82:	a363      	add	r3, pc, #396	; (adr r3, 8006d10 <atan+0x2a8>)
 8006b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b88:	f7f9 fb5c 	bl	8000244 <__adddf3>
 8006b8c:	4632      	mov	r2, r6
 8006b8e:	463b      	mov	r3, r7
 8006b90:	f7f9 fd0e 	bl	80005b0 <__aeabi_dmul>
 8006b94:	a360      	add	r3, pc, #384	; (adr r3, 8006d18 <atan+0x2b0>)
 8006b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9a:	f7f9 fb53 	bl	8000244 <__adddf3>
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	f7f9 fd05 	bl	80005b0 <__aeabi_dmul>
 8006ba6:	a35e      	add	r3, pc, #376	; (adr r3, 8006d20 <atan+0x2b8>)
 8006ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bac:	4680      	mov	r8, r0
 8006bae:	4689      	mov	r9, r1
 8006bb0:	4630      	mov	r0, r6
 8006bb2:	4639      	mov	r1, r7
 8006bb4:	f7f9 fcfc 	bl	80005b0 <__aeabi_dmul>
 8006bb8:	a35b      	add	r3, pc, #364	; (adr r3, 8006d28 <atan+0x2c0>)
 8006bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbe:	f7f9 fb3f 	bl	8000240 <__aeabi_dsub>
 8006bc2:	4632      	mov	r2, r6
 8006bc4:	463b      	mov	r3, r7
 8006bc6:	f7f9 fcf3 	bl	80005b0 <__aeabi_dmul>
 8006bca:	a359      	add	r3, pc, #356	; (adr r3, 8006d30 <atan+0x2c8>)
 8006bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd0:	f7f9 fb36 	bl	8000240 <__aeabi_dsub>
 8006bd4:	4632      	mov	r2, r6
 8006bd6:	463b      	mov	r3, r7
 8006bd8:	f7f9 fcea 	bl	80005b0 <__aeabi_dmul>
 8006bdc:	a356      	add	r3, pc, #344	; (adr r3, 8006d38 <atan+0x2d0>)
 8006bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be2:	f7f9 fb2d 	bl	8000240 <__aeabi_dsub>
 8006be6:	4632      	mov	r2, r6
 8006be8:	463b      	mov	r3, r7
 8006bea:	f7f9 fce1 	bl	80005b0 <__aeabi_dmul>
 8006bee:	a354      	add	r3, pc, #336	; (adr r3, 8006d40 <atan+0x2d8>)
 8006bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf4:	f7f9 fb24 	bl	8000240 <__aeabi_dsub>
 8006bf8:	4632      	mov	r2, r6
 8006bfa:	463b      	mov	r3, r7
 8006bfc:	f7f9 fcd8 	bl	80005b0 <__aeabi_dmul>
 8006c00:	4602      	mov	r2, r0
 8006c02:	460b      	mov	r3, r1
 8006c04:	4640      	mov	r0, r8
 8006c06:	4649      	mov	r1, r9
 8006c08:	f7f9 fb1c 	bl	8000244 <__adddf3>
 8006c0c:	4622      	mov	r2, r4
 8006c0e:	462b      	mov	r3, r5
 8006c10:	f7f9 fcce 	bl	80005b0 <__aeabi_dmul>
 8006c14:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	d144      	bne.n	8006ca8 <atan+0x240>
 8006c1e:	4620      	mov	r0, r4
 8006c20:	4629      	mov	r1, r5
 8006c22:	f7f9 fb0d 	bl	8000240 <__aeabi_dsub>
 8006c26:	e734      	b.n	8006a92 <atan+0x2a>
 8006c28:	2200      	movs	r2, #0
 8006c2a:	4b4c      	ldr	r3, [pc, #304]	; (8006d5c <atan+0x2f4>)
 8006c2c:	f7f9 fb08 	bl	8000240 <__aeabi_dsub>
 8006c30:	2200      	movs	r2, #0
 8006c32:	4606      	mov	r6, r0
 8006c34:	460f      	mov	r7, r1
 8006c36:	4620      	mov	r0, r4
 8006c38:	4629      	mov	r1, r5
 8006c3a:	4b48      	ldr	r3, [pc, #288]	; (8006d5c <atan+0x2f4>)
 8006c3c:	f7f9 fb02 	bl	8000244 <__adddf3>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4630      	mov	r0, r6
 8006c46:	4639      	mov	r1, r7
 8006c48:	f7f9 fddc 	bl	8000804 <__aeabi_ddiv>
 8006c4c:	f04f 0a01 	mov.w	sl, #1
 8006c50:	4604      	mov	r4, r0
 8006c52:	460d      	mov	r5, r1
 8006c54:	e767      	b.n	8006b26 <atan+0xbe>
 8006c56:	4b43      	ldr	r3, [pc, #268]	; (8006d64 <atan+0x2fc>)
 8006c58:	429e      	cmp	r6, r3
 8006c5a:	da1a      	bge.n	8006c92 <atan+0x22a>
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	4b42      	ldr	r3, [pc, #264]	; (8006d68 <atan+0x300>)
 8006c60:	f7f9 faee 	bl	8000240 <__aeabi_dsub>
 8006c64:	2200      	movs	r2, #0
 8006c66:	4606      	mov	r6, r0
 8006c68:	460f      	mov	r7, r1
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	4b3e      	ldr	r3, [pc, #248]	; (8006d68 <atan+0x300>)
 8006c70:	f7f9 fc9e 	bl	80005b0 <__aeabi_dmul>
 8006c74:	2200      	movs	r2, #0
 8006c76:	4b39      	ldr	r3, [pc, #228]	; (8006d5c <atan+0x2f4>)
 8006c78:	f7f9 fae4 	bl	8000244 <__adddf3>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	4630      	mov	r0, r6
 8006c82:	4639      	mov	r1, r7
 8006c84:	f7f9 fdbe 	bl	8000804 <__aeabi_ddiv>
 8006c88:	f04f 0a02 	mov.w	sl, #2
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	460d      	mov	r5, r1
 8006c90:	e749      	b.n	8006b26 <atan+0xbe>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	2000      	movs	r0, #0
 8006c98:	4934      	ldr	r1, [pc, #208]	; (8006d6c <atan+0x304>)
 8006c9a:	f7f9 fdb3 	bl	8000804 <__aeabi_ddiv>
 8006c9e:	f04f 0a03 	mov.w	sl, #3
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	460d      	mov	r5, r1
 8006ca6:	e73e      	b.n	8006b26 <atan+0xbe>
 8006ca8:	4b31      	ldr	r3, [pc, #196]	; (8006d70 <atan+0x308>)
 8006caa:	4e32      	ldr	r6, [pc, #200]	; (8006d74 <atan+0x30c>)
 8006cac:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006cb0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006cb4:	e9da 2300 	ldrd	r2, r3, [sl]
 8006cb8:	f7f9 fac2 	bl	8000240 <__aeabi_dsub>
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	462b      	mov	r3, r5
 8006cc0:	f7f9 fabe 	bl	8000240 <__aeabi_dsub>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006ccc:	f7f9 fab8 	bl	8000240 <__aeabi_dsub>
 8006cd0:	f1bb 0f00 	cmp.w	fp, #0
 8006cd4:	4604      	mov	r4, r0
 8006cd6:	460d      	mov	r5, r1
 8006cd8:	f6bf aee4 	bge.w	8006aa4 <atan+0x3c>
 8006cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ce0:	461d      	mov	r5, r3
 8006ce2:	e6df      	b.n	8006aa4 <atan+0x3c>
 8006ce4:	4d24      	ldr	r5, [pc, #144]	; (8006d78 <atan+0x310>)
 8006ce6:	e6dd      	b.n	8006aa4 <atan+0x3c>
 8006ce8:	8800759c 	.word	0x8800759c
 8006cec:	7e37e43c 	.word	0x7e37e43c
 8006cf0:	e322da11 	.word	0xe322da11
 8006cf4:	3f90ad3a 	.word	0x3f90ad3a
 8006cf8:	24760deb 	.word	0x24760deb
 8006cfc:	3fa97b4b 	.word	0x3fa97b4b
 8006d00:	a0d03d51 	.word	0xa0d03d51
 8006d04:	3fb10d66 	.word	0x3fb10d66
 8006d08:	c54c206e 	.word	0xc54c206e
 8006d0c:	3fb745cd 	.word	0x3fb745cd
 8006d10:	920083ff 	.word	0x920083ff
 8006d14:	3fc24924 	.word	0x3fc24924
 8006d18:	5555550d 	.word	0x5555550d
 8006d1c:	3fd55555 	.word	0x3fd55555
 8006d20:	2c6a6c2f 	.word	0x2c6a6c2f
 8006d24:	bfa2b444 	.word	0xbfa2b444
 8006d28:	52defd9a 	.word	0x52defd9a
 8006d2c:	3fadde2d 	.word	0x3fadde2d
 8006d30:	af749a6d 	.word	0xaf749a6d
 8006d34:	3fb3b0f2 	.word	0x3fb3b0f2
 8006d38:	fe231671 	.word	0xfe231671
 8006d3c:	3fbc71c6 	.word	0x3fbc71c6
 8006d40:	9998ebc4 	.word	0x9998ebc4
 8006d44:	3fc99999 	.word	0x3fc99999
 8006d48:	440fffff 	.word	0x440fffff
 8006d4c:	7ff00000 	.word	0x7ff00000
 8006d50:	54442d18 	.word	0x54442d18
 8006d54:	bff921fb 	.word	0xbff921fb
 8006d58:	3fdbffff 	.word	0x3fdbffff
 8006d5c:	3ff00000 	.word	0x3ff00000
 8006d60:	3ff2ffff 	.word	0x3ff2ffff
 8006d64:	40038000 	.word	0x40038000
 8006d68:	3ff80000 	.word	0x3ff80000
 8006d6c:	bff00000 	.word	0xbff00000
 8006d70:	08007528 	.word	0x08007528
 8006d74:	08007508 	.word	0x08007508
 8006d78:	3ff921fb 	.word	0x3ff921fb

08006d7c <fabs>:
 8006d7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006d80:	4770      	bx	lr

08006d82 <atan2>:
 8006d82:	f000 b82d 	b.w	8006de0 <__ieee754_atan2>
	...

08006d88 <sqrt>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	4606      	mov	r6, r0
 8006d8c:	460f      	mov	r7, r1
 8006d8e:	f000 f8f9 	bl	8006f84 <__ieee754_sqrt>
 8006d92:	4b12      	ldr	r3, [pc, #72]	; (8006ddc <sqrt+0x54>)
 8006d94:	4604      	mov	r4, r0
 8006d96:	f993 3000 	ldrsb.w	r3, [r3]
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	d019      	beq.n	8006dd4 <sqrt+0x4c>
 8006da0:	4632      	mov	r2, r6
 8006da2:	463b      	mov	r3, r7
 8006da4:	4630      	mov	r0, r6
 8006da6:	4639      	mov	r1, r7
 8006da8:	f7f9 fe9c 	bl	8000ae4 <__aeabi_dcmpun>
 8006dac:	b990      	cbnz	r0, 8006dd4 <sqrt+0x4c>
 8006dae:	2200      	movs	r2, #0
 8006db0:	2300      	movs	r3, #0
 8006db2:	4630      	mov	r0, r6
 8006db4:	4639      	mov	r1, r7
 8006db6:	f7f9 fe6d 	bl	8000a94 <__aeabi_dcmplt>
 8006dba:	b158      	cbz	r0, 8006dd4 <sqrt+0x4c>
 8006dbc:	f7fd f94c 	bl	8004058 <__errno>
 8006dc0:	2321      	movs	r3, #33	; 0x21
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	6003      	str	r3, [r0, #0]
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	4610      	mov	r0, r2
 8006dca:	4619      	mov	r1, r3
 8006dcc:	f7f9 fd1a 	bl	8000804 <__aeabi_ddiv>
 8006dd0:	4604      	mov	r4, r0
 8006dd2:	460d      	mov	r5, r1
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000270 	.word	0x20000270

08006de0 <__ieee754_atan2>:
 8006de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de4:	4692      	mov	sl, r2
 8006de6:	4699      	mov	r9, r3
 8006de8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006dec:	461f      	mov	r7, r3
 8006dee:	f1ca 0300 	rsb	r3, sl, #0
 8006df2:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8006f80 <__ieee754_atan2+0x1a0>
 8006df6:	ea43 030a 	orr.w	r3, r3, sl
 8006dfa:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006dfe:	4573      	cmp	r3, lr
 8006e00:	4604      	mov	r4, r0
 8006e02:	460d      	mov	r5, r1
 8006e04:	d808      	bhi.n	8006e18 <__ieee754_atan2+0x38>
 8006e06:	4246      	negs	r6, r0
 8006e08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e0c:	4306      	orrs	r6, r0
 8006e0e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006e12:	4576      	cmp	r6, lr
 8006e14:	468c      	mov	ip, r1
 8006e16:	d908      	bls.n	8006e2a <__ieee754_atan2+0x4a>
 8006e18:	4652      	mov	r2, sl
 8006e1a:	464b      	mov	r3, r9
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	4629      	mov	r1, r5
 8006e20:	f7f9 fa10 	bl	8000244 <__adddf3>
 8006e24:	4604      	mov	r4, r0
 8006e26:	460d      	mov	r5, r1
 8006e28:	e019      	b.n	8006e5e <__ieee754_atan2+0x7e>
 8006e2a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8006e2e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006e32:	ea56 060a 	orrs.w	r6, r6, sl
 8006e36:	d103      	bne.n	8006e40 <__ieee754_atan2+0x60>
 8006e38:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e3c:	f7ff be14 	b.w	8006a68 <atan>
 8006e40:	17be      	asrs	r6, r7, #30
 8006e42:	f006 0602 	and.w	r6, r6, #2
 8006e46:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006e4a:	ea53 0100 	orrs.w	r1, r3, r0
 8006e4e:	d10a      	bne.n	8006e66 <__ieee754_atan2+0x86>
 8006e50:	2e02      	cmp	r6, #2
 8006e52:	d067      	beq.n	8006f24 <__ieee754_atan2+0x144>
 8006e54:	2e03      	cmp	r6, #3
 8006e56:	d102      	bne.n	8006e5e <__ieee754_atan2+0x7e>
 8006e58:	a53b      	add	r5, pc, #236	; (adr r5, 8006f48 <__ieee754_atan2+0x168>)
 8006e5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e5e:	4620      	mov	r0, r4
 8006e60:	4629      	mov	r1, r5
 8006e62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e66:	ea52 010a 	orrs.w	r1, r2, sl
 8006e6a:	d106      	bne.n	8006e7a <__ieee754_atan2+0x9a>
 8006e6c:	f1bc 0f00 	cmp.w	ip, #0
 8006e70:	da63      	bge.n	8006f3a <__ieee754_atan2+0x15a>
 8006e72:	a537      	add	r5, pc, #220	; (adr r5, 8006f50 <__ieee754_atan2+0x170>)
 8006e74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e78:	e7f1      	b.n	8006e5e <__ieee754_atan2+0x7e>
 8006e7a:	4572      	cmp	r2, lr
 8006e7c:	d10f      	bne.n	8006e9e <__ieee754_atan2+0xbe>
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	f106 36ff 	add.w	r6, r6, #4294967295
 8006e84:	d107      	bne.n	8006e96 <__ieee754_atan2+0xb6>
 8006e86:	2e02      	cmp	r6, #2
 8006e88:	d850      	bhi.n	8006f2c <__ieee754_atan2+0x14c>
 8006e8a:	4b3b      	ldr	r3, [pc, #236]	; (8006f78 <__ieee754_atan2+0x198>)
 8006e8c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006e90:	e9d6 4500 	ldrd	r4, r5, [r6]
 8006e94:	e7e3      	b.n	8006e5e <__ieee754_atan2+0x7e>
 8006e96:	2e02      	cmp	r6, #2
 8006e98:	d84c      	bhi.n	8006f34 <__ieee754_atan2+0x154>
 8006e9a:	4b38      	ldr	r3, [pc, #224]	; (8006f7c <__ieee754_atan2+0x19c>)
 8006e9c:	e7f6      	b.n	8006e8c <__ieee754_atan2+0xac>
 8006e9e:	4573      	cmp	r3, lr
 8006ea0:	d0e4      	beq.n	8006e6c <__ieee754_atan2+0x8c>
 8006ea2:	1a9b      	subs	r3, r3, r2
 8006ea4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006ea8:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006eac:	da20      	bge.n	8006ef0 <__ieee754_atan2+0x110>
 8006eae:	2f00      	cmp	r7, #0
 8006eb0:	da01      	bge.n	8006eb6 <__ieee754_atan2+0xd6>
 8006eb2:	323c      	adds	r2, #60	; 0x3c
 8006eb4:	db20      	blt.n	8006ef8 <__ieee754_atan2+0x118>
 8006eb6:	4652      	mov	r2, sl
 8006eb8:	464b      	mov	r3, r9
 8006eba:	4620      	mov	r0, r4
 8006ebc:	4629      	mov	r1, r5
 8006ebe:	f7f9 fca1 	bl	8000804 <__aeabi_ddiv>
 8006ec2:	f7ff ff5b 	bl	8006d7c <fabs>
 8006ec6:	f7ff fdcf 	bl	8006a68 <atan>
 8006eca:	4604      	mov	r4, r0
 8006ecc:	460d      	mov	r5, r1
 8006ece:	2e01      	cmp	r6, #1
 8006ed0:	d015      	beq.n	8006efe <__ieee754_atan2+0x11e>
 8006ed2:	2e02      	cmp	r6, #2
 8006ed4:	d017      	beq.n	8006f06 <__ieee754_atan2+0x126>
 8006ed6:	2e00      	cmp	r6, #0
 8006ed8:	d0c1      	beq.n	8006e5e <__ieee754_atan2+0x7e>
 8006eda:	a31f      	add	r3, pc, #124	; (adr r3, 8006f58 <__ieee754_atan2+0x178>)
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	4620      	mov	r0, r4
 8006ee2:	4629      	mov	r1, r5
 8006ee4:	f7f9 f9ac 	bl	8000240 <__aeabi_dsub>
 8006ee8:	a31d      	add	r3, pc, #116	; (adr r3, 8006f60 <__ieee754_atan2+0x180>)
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	e016      	b.n	8006f1e <__ieee754_atan2+0x13e>
 8006ef0:	a51d      	add	r5, pc, #116	; (adr r5, 8006f68 <__ieee754_atan2+0x188>)
 8006ef2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006ef6:	e7ea      	b.n	8006ece <__ieee754_atan2+0xee>
 8006ef8:	2400      	movs	r4, #0
 8006efa:	2500      	movs	r5, #0
 8006efc:	e7e7      	b.n	8006ece <__ieee754_atan2+0xee>
 8006efe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006f02:	461d      	mov	r5, r3
 8006f04:	e7ab      	b.n	8006e5e <__ieee754_atan2+0x7e>
 8006f06:	a314      	add	r3, pc, #80	; (adr r3, 8006f58 <__ieee754_atan2+0x178>)
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	4629      	mov	r1, r5
 8006f10:	f7f9 f996 	bl	8000240 <__aeabi_dsub>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	a111      	add	r1, pc, #68	; (adr r1, 8006f60 <__ieee754_atan2+0x180>)
 8006f1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f1e:	f7f9 f98f 	bl	8000240 <__aeabi_dsub>
 8006f22:	e77f      	b.n	8006e24 <__ieee754_atan2+0x44>
 8006f24:	a50e      	add	r5, pc, #56	; (adr r5, 8006f60 <__ieee754_atan2+0x180>)
 8006f26:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f2a:	e798      	b.n	8006e5e <__ieee754_atan2+0x7e>
 8006f2c:	a510      	add	r5, pc, #64	; (adr r5, 8006f70 <__ieee754_atan2+0x190>)
 8006f2e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f32:	e794      	b.n	8006e5e <__ieee754_atan2+0x7e>
 8006f34:	2400      	movs	r4, #0
 8006f36:	2500      	movs	r5, #0
 8006f38:	e791      	b.n	8006e5e <__ieee754_atan2+0x7e>
 8006f3a:	a50b      	add	r5, pc, #44	; (adr r5, 8006f68 <__ieee754_atan2+0x188>)
 8006f3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f40:	e78d      	b.n	8006e5e <__ieee754_atan2+0x7e>
 8006f42:	bf00      	nop
 8006f44:	f3af 8000 	nop.w
 8006f48:	54442d18 	.word	0x54442d18
 8006f4c:	c00921fb 	.word	0xc00921fb
 8006f50:	54442d18 	.word	0x54442d18
 8006f54:	bff921fb 	.word	0xbff921fb
 8006f58:	33145c07 	.word	0x33145c07
 8006f5c:	3ca1a626 	.word	0x3ca1a626
 8006f60:	54442d18 	.word	0x54442d18
 8006f64:	400921fb 	.word	0x400921fb
 8006f68:	54442d18 	.word	0x54442d18
 8006f6c:	3ff921fb 	.word	0x3ff921fb
 8006f70:	54442d18 	.word	0x54442d18
 8006f74:	3fe921fb 	.word	0x3fe921fb
 8006f78:	08007548 	.word	0x08007548
 8006f7c:	08007560 	.word	0x08007560
 8006f80:	7ff00000 	.word	0x7ff00000

08006f84 <__ieee754_sqrt>:
 8006f84:	f8df c150 	ldr.w	ip, [pc, #336]	; 80070d8 <__ieee754_sqrt+0x154>
 8006f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8c:	ea3c 0c01 	bics.w	ip, ip, r1
 8006f90:	460b      	mov	r3, r1
 8006f92:	4606      	mov	r6, r0
 8006f94:	460d      	mov	r5, r1
 8006f96:	460a      	mov	r2, r1
 8006f98:	4607      	mov	r7, r0
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	d10e      	bne.n	8006fbc <__ieee754_sqrt+0x38>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	f7f9 fb06 	bl	80005b0 <__aeabi_dmul>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4630      	mov	r0, r6
 8006faa:	4629      	mov	r1, r5
 8006fac:	f7f9 f94a 	bl	8000244 <__adddf3>
 8006fb0:	4606      	mov	r6, r0
 8006fb2:	460d      	mov	r5, r1
 8006fb4:	4630      	mov	r0, r6
 8006fb6:	4629      	mov	r1, r5
 8006fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	dc0d      	bgt.n	8006fdc <__ieee754_sqrt+0x58>
 8006fc0:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006fc4:	ea5c 0707 	orrs.w	r7, ip, r7
 8006fc8:	d0f4      	beq.n	8006fb4 <__ieee754_sqrt+0x30>
 8006fca:	b139      	cbz	r1, 8006fdc <__ieee754_sqrt+0x58>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	f7f9 f937 	bl	8000240 <__aeabi_dsub>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	f7f9 fc15 	bl	8000804 <__aeabi_ddiv>
 8006fda:	e7e9      	b.n	8006fb0 <__ieee754_sqrt+0x2c>
 8006fdc:	1512      	asrs	r2, r2, #20
 8006fde:	d074      	beq.n	80070ca <__ieee754_sqrt+0x146>
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	07d5      	lsls	r5, r2, #31
 8006fe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fe8:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8006fec:	bf5e      	ittt	pl
 8006fee:	0fe3      	lsrpl	r3, r4, #31
 8006ff0:	0064      	lslpl	r4, r4, #1
 8006ff2:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8006ff6:	0fe3      	lsrs	r3, r4, #31
 8006ff8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006ffc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8007000:	2516      	movs	r5, #22
 8007002:	4601      	mov	r1, r0
 8007004:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007008:	1076      	asrs	r6, r6, #1
 800700a:	0064      	lsls	r4, r4, #1
 800700c:	188f      	adds	r7, r1, r2
 800700e:	429f      	cmp	r7, r3
 8007010:	bfde      	ittt	le
 8007012:	1bdb      	suble	r3, r3, r7
 8007014:	18b9      	addle	r1, r7, r2
 8007016:	1880      	addle	r0, r0, r2
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	3d01      	subs	r5, #1
 800701c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007020:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007024:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007028:	d1f0      	bne.n	800700c <__ieee754_sqrt+0x88>
 800702a:	462a      	mov	r2, r5
 800702c:	f04f 0e20 	mov.w	lr, #32
 8007030:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8007034:	428b      	cmp	r3, r1
 8007036:	eb07 0c05 	add.w	ip, r7, r5
 800703a:	dc02      	bgt.n	8007042 <__ieee754_sqrt+0xbe>
 800703c:	d113      	bne.n	8007066 <__ieee754_sqrt+0xe2>
 800703e:	45a4      	cmp	ip, r4
 8007040:	d811      	bhi.n	8007066 <__ieee754_sqrt+0xe2>
 8007042:	f1bc 0f00 	cmp.w	ip, #0
 8007046:	eb0c 0507 	add.w	r5, ip, r7
 800704a:	da43      	bge.n	80070d4 <__ieee754_sqrt+0x150>
 800704c:	2d00      	cmp	r5, #0
 800704e:	db41      	blt.n	80070d4 <__ieee754_sqrt+0x150>
 8007050:	f101 0801 	add.w	r8, r1, #1
 8007054:	1a5b      	subs	r3, r3, r1
 8007056:	4641      	mov	r1, r8
 8007058:	45a4      	cmp	ip, r4
 800705a:	bf88      	it	hi
 800705c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007060:	eba4 040c 	sub.w	r4, r4, ip
 8007064:	443a      	add	r2, r7
 8007066:	005b      	lsls	r3, r3, #1
 8007068:	f1be 0e01 	subs.w	lr, lr, #1
 800706c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007070:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8007074:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007078:	d1dc      	bne.n	8007034 <__ieee754_sqrt+0xb0>
 800707a:	4323      	orrs	r3, r4
 800707c:	d006      	beq.n	800708c <__ieee754_sqrt+0x108>
 800707e:	1c54      	adds	r4, r2, #1
 8007080:	bf0b      	itete	eq
 8007082:	4672      	moveq	r2, lr
 8007084:	3201      	addne	r2, #1
 8007086:	3001      	addeq	r0, #1
 8007088:	f022 0201 	bicne.w	r2, r2, #1
 800708c:	1043      	asrs	r3, r0, #1
 800708e:	07c1      	lsls	r1, r0, #31
 8007090:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007094:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007098:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800709c:	bf48      	it	mi
 800709e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80070a2:	4610      	mov	r0, r2
 80070a4:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80070a8:	e782      	b.n	8006fb0 <__ieee754_sqrt+0x2c>
 80070aa:	0ae3      	lsrs	r3, r4, #11
 80070ac:	3915      	subs	r1, #21
 80070ae:	0564      	lsls	r4, r4, #21
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0fa      	beq.n	80070aa <__ieee754_sqrt+0x126>
 80070b4:	02de      	lsls	r6, r3, #11
 80070b6:	d50a      	bpl.n	80070ce <__ieee754_sqrt+0x14a>
 80070b8:	f1c2 0020 	rsb	r0, r2, #32
 80070bc:	fa24 f000 	lsr.w	r0, r4, r0
 80070c0:	1e55      	subs	r5, r2, #1
 80070c2:	4094      	lsls	r4, r2
 80070c4:	4303      	orrs	r3, r0
 80070c6:	1b4a      	subs	r2, r1, r5
 80070c8:	e78a      	b.n	8006fe0 <__ieee754_sqrt+0x5c>
 80070ca:	4611      	mov	r1, r2
 80070cc:	e7f0      	b.n	80070b0 <__ieee754_sqrt+0x12c>
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	3201      	adds	r2, #1
 80070d2:	e7ef      	b.n	80070b4 <__ieee754_sqrt+0x130>
 80070d4:	4688      	mov	r8, r1
 80070d6:	e7bd      	b.n	8007054 <__ieee754_sqrt+0xd0>
 80070d8:	7ff00000 	.word	0x7ff00000

080070dc <_init>:
 80070dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070de:	bf00      	nop
 80070e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070e2:	bc08      	pop	{r3}
 80070e4:	469e      	mov	lr, r3
 80070e6:	4770      	bx	lr

080070e8 <_fini>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	bf00      	nop
 80070ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ee:	bc08      	pop	{r3}
 80070f0:	469e      	mov	lr, r3
 80070f2:	4770      	bx	lr
