
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f14  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08007100  08007100  00017100  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007580  08007580  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  08007580  08007580  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007580  08007580  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007580  08007580  00017580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007584  08007584  00017584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08007588  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000278  080077fc  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  080077fc  00020414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd25  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002523  00000000  00000000  0002ffc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  000324e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  00032f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b3ec  00000000  00000000  000338a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d921  00000000  00000000  0004ec94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094e08  00000000  00000000  0005c5b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f13bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a5c  00000000  00000000  000f1410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000278 	.word	0x20000278
 8000204:	00000000 	.word	0x00000000
 8000208:	080070e4 	.word	0x080070e4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000027c 	.word	0x2000027c
 8000224:	080070e4 	.word	0x080070e4

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_GPIO_Init+0x40>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	4a0d      	ldr	r2, [pc, #52]	; (800105c <MX_GPIO_Init+0x40>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6193      	str	r3, [r2, #24]
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_GPIO_Init+0x40>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_GPIO_Init+0x40>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	4a07      	ldr	r2, [pc, #28]	; (800105c <MX_GPIO_Init+0x40>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	6193      	str	r3, [r2, #24]
 8001046:	4b05      	ldr	r3, [pc, #20]	; (800105c <MX_GPIO_Init+0x40>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40021000 	.word	0x40021000

08001060 <usart1_send_char>:


//串口1发送1个字符
//c:要发送的字符
void usart1_send_char(uint8_t c)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	while(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_TC)==RESET){};//循环发送,直到发送完毕
 800106a:	bf00      	nop
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <usart1_send_char+0x30>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001076:	2b40      	cmp	r3, #64	; 0x40
 8001078:	d1f8      	bne.n	800106c <usart1_send_char+0xc>
	HAL_UART_Transmit(&huart1,&c,1,1000);
 800107a:	1df9      	adds	r1, r7, #7
 800107c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001080:	2201      	movs	r2, #1
 8001082:	4803      	ldr	r0, [pc, #12]	; (8001090 <usart1_send_char+0x30>)
 8001084:	f002 fe7f 	bl	8003d86 <HAL_UART_Transmit>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200003b8 	.word	0x200003b8

08001094 <usart1_niming_report>:
//传送数据给匿名四轴上位机软件(V2.6版本)
//fun:功能字. 0XA0~0XAF
//data:数据缓存区,最多28字节!!
//len:data区有效数据个数
void usart1_niming_report(uint8_t fun,uint8_t*data,uint8_t len)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	; 0x30
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	4613      	mov	r3, r2
 80010a2:	71bb      	strb	r3, [r7, #6]
	uint8_t send_buf[32];
	uint8_t i;
	if(len>28)return;	//最多28字节数据
 80010a4:	79bb      	ldrb	r3, [r7, #6]
 80010a6:	2b1c      	cmp	r3, #28
 80010a8:	d868      	bhi.n	800117c <usart1_niming_report+0xe8>
	send_buf[len+3]=0;	//校验数置零
 80010aa:	79bb      	ldrb	r3, [r7, #6]
 80010ac:	3303      	adds	r3, #3
 80010ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80010b2:	4413      	add	r3, r2
 80010b4:	2200      	movs	r2, #0
 80010b6:	f803 2c24 	strb.w	r2, [r3, #-36]
	send_buf[0]=0X88;	//帧头
 80010ba:	2388      	movs	r3, #136	; 0x88
 80010bc:	733b      	strb	r3, [r7, #12]
	send_buf[1]=fun;	//功能字
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	737b      	strb	r3, [r7, #13]
	send_buf[2]=len;	//数据长度
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	73bb      	strb	r3, [r7, #14]
	for(i=0;i<len;i++)send_buf[3+i]=data[i];			//复制数据
 80010c6:	2300      	movs	r3, #0
 80010c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010cc:	e011      	b.n	80010f2 <usart1_niming_report+0x5e>
 80010ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	441a      	add	r2, r3
 80010d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010da:	3303      	adds	r3, #3
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80010e2:	440b      	add	r3, r1
 80010e4:	f803 2c24 	strb.w	r2, [r3, #-36]
 80010e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010ec:	3301      	adds	r3, #1
 80010ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010f2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d3e8      	bcc.n	80010ce <usart1_niming_report+0x3a>
	for(i=0;i<len+3;i++)send_buf[len+3]+=send_buf[i];	//计算校验和
 80010fc:	2300      	movs	r3, #0
 80010fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001102:	e01b      	b.n	800113c <usart1_niming_report+0xa8>
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	3303      	adds	r3, #3
 8001108:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800110c:	4413      	add	r3, r2
 800110e:	f813 1c24 	ldrb.w	r1, [r3, #-36]
 8001112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001116:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800111a:	4413      	add	r3, r2
 800111c:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 8001120:	79bb      	ldrb	r3, [r7, #6]
 8001122:	3303      	adds	r3, #3
 8001124:	440a      	add	r2, r1
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800112c:	440b      	add	r3, r1
 800112e:	f803 2c24 	strb.w	r2, [r3, #-36]
 8001132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001136:	3301      	adds	r3, #1
 8001138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800113c:	79bb      	ldrb	r3, [r7, #6]
 800113e:	1c9a      	adds	r2, r3, #2
 8001140:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001144:	429a      	cmp	r2, r3
 8001146:	dadd      	bge.n	8001104 <usart1_niming_report+0x70>
	for(i=0;i<len+4;i++)usart1_send_char(send_buf[i]);	//发送数据到串口1
 8001148:	2300      	movs	r3, #0
 800114a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800114e:	e00e      	b.n	800116e <usart1_niming_report+0xda>
 8001150:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001154:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001158:	4413      	add	r3, r2
 800115a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff7e 	bl	8001060 <usart1_send_char>
 8001164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001168:	3301      	adds	r3, #1
 800116a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800116e:	79bb      	ldrb	r3, [r7, #6]
 8001170:	1cda      	adds	r2, r3, #3
 8001172:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001176:	429a      	cmp	r2, r3
 8001178:	daea      	bge.n	8001150 <usart1_niming_report+0xbc>
 800117a:	e000      	b.n	800117e <usart1_niming_report+0xea>
	if(len>28)return;	//最多28字节数据
 800117c:	bf00      	nop
}
 800117e:	3730      	adds	r7, #48	; 0x30
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <mpu6050_send_data>:

//发送加速度传感器数据和陀螺仪数据
//aacx,aacy,aacz:x,y,z三个方向上面的加速度值
//gyrox,gyroy,gyroz:x,y,z三个方向上面的陀螺仪值
void mpu6050_send_data(int16_t aacx,int16_t aacy,int16_t aacz,int16_t gyrox,int16_t gyroy,int16_t gyroz)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	4604      	mov	r4, r0
 800118c:	4608      	mov	r0, r1
 800118e:	4611      	mov	r1, r2
 8001190:	461a      	mov	r2, r3
 8001192:	4623      	mov	r3, r4
 8001194:	80fb      	strh	r3, [r7, #6]
 8001196:	4603      	mov	r3, r0
 8001198:	80bb      	strh	r3, [r7, #4]
 800119a:	460b      	mov	r3, r1
 800119c:	807b      	strh	r3, [r7, #2]
 800119e:	4613      	mov	r3, r2
 80011a0:	803b      	strh	r3, [r7, #0]
	uint8_t tbuf[12];
	tbuf[0]=(aacx>>8)&0XFF;
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	121b      	asrs	r3, r3, #8
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	733b      	strb	r3, [r7, #12]
	tbuf[1]=aacx&0XFF;
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	737b      	strb	r3, [r7, #13]
	tbuf[2]=(aacy>>8)&0XFF;
 80011b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011b8:	121b      	asrs	r3, r3, #8
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	73bb      	strb	r3, [r7, #14]
	tbuf[3]=aacy&0XFF;
 80011c0:	88bb      	ldrh	r3, [r7, #4]
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	73fb      	strb	r3, [r7, #15]
	tbuf[4]=(aacz>>8)&0XFF;
 80011c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011ca:	121b      	asrs	r3, r3, #8
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	743b      	strb	r3, [r7, #16]
	tbuf[5]=aacz&0XFF;
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	747b      	strb	r3, [r7, #17]
	tbuf[6]=(gyrox>>8)&0XFF;
 80011d8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011dc:	121b      	asrs	r3, r3, #8
 80011de:	b21b      	sxth	r3, r3
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	74bb      	strb	r3, [r7, #18]
	tbuf[7]=gyrox&0XFF;
 80011e4:	883b      	ldrh	r3, [r7, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	74fb      	strb	r3, [r7, #19]
	tbuf[8]=(gyroy>>8)&0XFF;
 80011ea:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80011ee:	121b      	asrs	r3, r3, #8
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	753b      	strb	r3, [r7, #20]
	tbuf[9]=gyroy&0XFF;
 80011f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	757b      	strb	r3, [r7, #21]
	tbuf[10]=(gyroz>>8)&0XFF;
 80011fc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001200:	121b      	asrs	r3, r3, #8
 8001202:	b21b      	sxth	r3, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	75bb      	strb	r3, [r7, #22]
	tbuf[11]=gyroz&0XFF;
 8001208:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800120a:	b2db      	uxtb	r3, r3
 800120c:	75fb      	strb	r3, [r7, #23]
	usart1_niming_report(0XA1,tbuf,12);//自定义帧,0XA1
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	220c      	movs	r2, #12
 8001214:	4619      	mov	r1, r3
 8001216:	20a1      	movs	r0, #161	; 0xa1
 8001218:	f7ff ff3c 	bl	8001094 <usart1_niming_report>
}
 800121c:	bf00      	nop
 800121e:	371c      	adds	r7, #28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}

08001224 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C1_Init+0x50>)
 800122a:	4a13      	ldr	r2, [pc, #76]	; (8001278 <MX_I2C1_Init+0x54>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C1_Init+0x50>)
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <MX_I2C1_Init+0x58>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_I2C1_Init+0x50>)
 8001242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001246:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <MX_I2C1_Init+0x50>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_I2C1_Init+0x50>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_I2C1_Init+0x50>)
 8001262:	f001 f929 	bl	80024b8 <HAL_I2C_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800126c:	f000 f8de 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200002a0 	.word	0x200002a0
 8001278:	40005400 	.word	0x40005400
 800127c:	00061a80 	.word	0x00061a80

08001280 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a15      	ldr	r2, [pc, #84]	; (80012f0 <HAL_I2C_MspInit+0x70>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d123      	bne.n	80012e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_I2C_MspInit+0x74>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a13      	ldr	r2, [pc, #76]	; (80012f4 <HAL_I2C_MspInit+0x74>)
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_I2C_MspInit+0x74>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012b8:	23c0      	movs	r3, #192	; 0xc0
 80012ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012bc:	2312      	movs	r3, #18
 80012be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c0:	2303      	movs	r3, #3
 80012c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	480b      	ldr	r0, [pc, #44]	; (80012f8 <HAL_I2C_MspInit+0x78>)
 80012cc:	f000 ff60 	bl	8002190 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_I2C_MspInit+0x74>)
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_I2C_MspInit+0x74>)
 80012d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012da:	61d3      	str	r3, [r2, #28]
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_I2C_MspInit+0x74>)
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012e8:	bf00      	nop
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010c00 	.word	0x40010c00

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001302:	f000 fddb 	bl	8001ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001306:	f000 f833 	bl	8001370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130a:	f7ff fe87 	bl	800101c <MX_GPIO_Init>
  MX_I2C1_Init();
 800130e:	f7ff ff89 	bl	8001224 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001312:	f000 f9b1 	bl	8001678 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  while (MPU6050_Init(&hi2c1) == 1);
 8001316:	bf00      	nop
 8001318:	4813      	ldr	r0, [pc, #76]	; (8001368 <main+0x6c>)
 800131a:	f000 fa48 	bl	80017ae <MPU6050_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b01      	cmp	r3, #1
 8001322:	d0f9      	beq.n	8001318 <main+0x1c>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001324:	4911      	ldr	r1, [pc, #68]	; (800136c <main+0x70>)
 8001326:	4810      	ldr	r0, [pc, #64]	; (8001368 <main+0x6c>)
 8001328:	f000 fa9a 	bl	8001860 <MPU6050_Read_All>
	  mpu6050_send_data(MPU6050.Accel_X_RAW, MPU6050.Accel_Y_RAW, MPU6050.Accel_Z_RAW, MPU6050.Gyro_X_RAW, MPU6050.Gyro_Y_RAW, MPU6050.Gyro_Z_RAW);
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <main+0x70>)
 800132e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <main+0x70>)
 8001334:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <main+0x70>)
 800133a:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <main+0x70>)
 8001340:	f9b3 5020 	ldrsh.w	r5, [r3, #32]
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <main+0x70>)
 8001346:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <main+0x70>)
 800134c:	f9b2 2024 	ldrsh.w	r2, [r2, #36]	; 0x24
 8001350:	9201      	str	r2, [sp, #4]
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	462b      	mov	r3, r5
 8001356:	4622      	mov	r2, r4
 8001358:	f7ff ff14 	bl	8001184 <mpu6050_send_data>
//	  print("\r\nKalmanAngleX:%.2f\r\nKalmanAngleY:%.2f\r\n", MPU6050.KalmanAngleX, MPU6050.KalmanAngleY);
	  HAL_Delay (1000);
 800135c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001360:	f000 fe0e 	bl	8001f80 <HAL_Delay>
	  MPU6050_Read_All(&hi2c1, &MPU6050);
 8001364:	e7de      	b.n	8001324 <main+0x28>
 8001366:	bf00      	nop
 8001368:	200002a0 	.word	0x200002a0
 800136c:	200002f8 	.word	0x200002f8

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b090      	sub	sp, #64	; 0x40
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 0318 	add.w	r3, r7, #24
 800137a:	2228      	movs	r2, #40	; 0x28
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fe96 	bl	80040b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001392:	2301      	movs	r3, #1
 8001394:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800139a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a0:	2301      	movs	r3, #1
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a4:	2302      	movs	r3, #2
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 f87d 	bl	80034b8 <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013c4:	f000 f832 	bl	800142c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	230f      	movs	r3, #15
 80013ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013cc:	2302      	movs	r3, #2
 80013ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2102      	movs	r1, #2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 fae8 	bl	80039b8 <HAL_RCC_ClockConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013ee:	f000 f81d 	bl	800142c <Error_Handler>
  }
}
 80013f2:	bf00      	nop
 80013f4:	3740      	adds	r7, #64	; 0x40
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
  x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  // 具体哪个串口可以更改huart2为其它串口
  // HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
  while ((USART1->SR & 0X40) == 0) {
 8001404:	bf00      	nop
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <__io_putchar+0x2c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f9      	beq.n	8001406 <__io_putchar+0xa>
  }; //循环发送,直到发送完毕
  USART1->DR = (uint8_t) ch;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <__io_putchar+0x2c>)
 8001418:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

  return ch;
 800141a:	687b      	ldr	r3, [r7, #4]
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40013800 	.word	0x40013800

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_MspInit+0x5c>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a14      	ldr	r2, [pc, #80]	; (8001494 <HAL_MspInit+0x5c>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	6193      	str	r3, [r2, #24]
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_MspInit+0x5c>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <HAL_MspInit+0x5c>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <HAL_MspInit+0x5c>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	61d3      	str	r3, [r2, #28]
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_MspInit+0x5c>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_MspInit+0x60>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <HAL_MspInit+0x60>)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000
 8001498:	40010000 	.word	0x40010000

0800149c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x4>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr

080014c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr

080014de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e2:	f000 fd31 	bl	8001f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}

080014ea <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
	return 1;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <_kill>:

int _kill(int pid, int sig)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001502:	f002 fdab 	bl	800405c <__errno>
 8001506:	4603      	mov	r3, r0
 8001508:	2216      	movs	r2, #22
 800150a:	601a      	str	r2, [r3, #0]
	return -1;
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_exit>:

void _exit (int status)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ffe7 	bl	80014f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800152a:	e7fe      	b.n	800152a <_exit+0x12>

0800152c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	e00a      	b.n	8001554 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800153e:	f3af 8000 	nop.w
 8001542:	4601      	mov	r1, r0
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	b2ca      	uxtb	r2, r1
 800154c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	3301      	adds	r3, #1
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	429a      	cmp	r2, r3
 800155a:	dbf0      	blt.n	800153e <_read+0x12>
	}

return len;
 800155c:	687b      	ldr	r3, [r7, #4]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b086      	sub	sp, #24
 800156a:	af00      	add	r7, sp, #0
 800156c:	60f8      	str	r0, [r7, #12]
 800156e:	60b9      	str	r1, [r7, #8]
 8001570:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	e009      	b.n	800158c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	60ba      	str	r2, [r7, #8]
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff3b 	bl	80013fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbf1      	blt.n	8001578 <_write+0x12>
	}
	return len;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_close>:

int _close(int file)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
	return -1;
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c4:	605a      	str	r2, [r3, #4]
	return 0;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr

080015d2 <_isatty>:

int _isatty(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b085      	sub	sp, #20
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	607a      	str	r2, [r7, #4]
	return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
	...

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d207      	bcs.n	8001640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001630:	f002 fd14 	bl	800405c <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20010000 	.word	0x20010000
 8001660:	00000400 	.word	0x00000400
 8001664:	20000294 	.word	0x20000294
 8001668:	20000418 	.word	0x20000418

0800166c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr

08001678 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <MX_USART1_UART_Init+0x50>)
 8001680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_USART1_UART_Init+0x4c>)
 80016b0:	f002 fb1c 	bl	8003cec <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016ba:	f7ff feb7 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	200003b8 	.word	0x200003b8
 80016c8:	40013800 	.word	0x40013800

080016cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <HAL_UART_MspInit+0x8c>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d131      	bne.n	8001750 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_UART_MspInit+0x90>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a1a      	ldr	r2, [pc, #104]	; (800175c <HAL_UART_MspInit+0x90>)
 80016f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_UART_MspInit+0x90>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_UART_MspInit+0x90>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <HAL_UART_MspInit+0x90>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6193      	str	r3, [r2, #24]
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_UART_MspInit+0x90>)
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800171c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001720:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	4619      	mov	r1, r3
 8001730:	480b      	ldr	r0, [pc, #44]	; (8001760 <HAL_UART_MspInit+0x94>)
 8001732:	f000 fd2d 	bl	8002190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800173a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	4619      	mov	r1, r3
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <HAL_UART_MspInit+0x94>)
 800174c:	f000 fd20 	bl	8002190 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40013800 	.word	0x40013800
 800175c:	40021000 	.word	0x40021000
 8001760:	40010800 	.word	0x40010800

08001764 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001766:	490d      	ldr	r1, [pc, #52]	; (800179c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800177c:	4c0a      	ldr	r4, [pc, #40]	; (80017a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800178a:	f7ff ff6f 	bl	800166c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178e:	f002 fc6b 	bl	8004068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001792:	f7ff fdb3 	bl	80012fc <main>
  bx lr
 8001796:	4770      	bx	lr
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 80017a0:	08007588 	.word	0x08007588
  ldr r2, =_sbss
 80017a4:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 80017a8:	20000414 	.word	0x20000414

080017ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC1_2_IRQHandler>

080017ae <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b088      	sub	sp, #32
 80017b2:	af04      	add	r7, sp, #16
 80017b4:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80017b6:	2364      	movs	r3, #100	; 0x64
 80017b8:	9302      	str	r3, [sp, #8]
 80017ba:	2301      	movs	r3, #1
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	f107 030f 	add.w	r3, r7, #15
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2301      	movs	r3, #1
 80017c6:	2275      	movs	r2, #117	; 0x75
 80017c8:	21d0      	movs	r1, #208	; 0xd0
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f001 f8b2 	bl	8002934 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	2b68      	cmp	r3, #104	; 0x68
 80017d4:	d13d      	bne.n	8001852 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80017da:	2364      	movs	r3, #100	; 0x64
 80017dc:	9302      	str	r3, [sp, #8]
 80017de:	2301      	movs	r3, #1
 80017e0:	9301      	str	r3, [sp, #4]
 80017e2:	f107 030e 	add.w	r3, r7, #14
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2301      	movs	r3, #1
 80017ea:	226b      	movs	r2, #107	; 0x6b
 80017ec:	21d0      	movs	r1, #208	; 0xd0
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 ffa6 	bl	8002740 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80017f4:	2307      	movs	r3, #7
 80017f6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80017f8:	2364      	movs	r3, #100	; 0x64
 80017fa:	9302      	str	r3, [sp, #8]
 80017fc:	2301      	movs	r3, #1
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	f107 030e 	add.w	r3, r7, #14
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	2219      	movs	r2, #25
 800180a:	21d0      	movs	r1, #208	; 0xd0
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 ff97 	bl	8002740 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001812:	2300      	movs	r3, #0
 8001814:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001816:	2364      	movs	r3, #100	; 0x64
 8001818:	9302      	str	r3, [sp, #8]
 800181a:	2301      	movs	r3, #1
 800181c:	9301      	str	r3, [sp, #4]
 800181e:	f107 030e 	add.w	r3, r7, #14
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2301      	movs	r3, #1
 8001826:	221c      	movs	r2, #28
 8001828:	21d0      	movs	r1, #208	; 0xd0
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 ff88 	bl	8002740 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001830:	2300      	movs	r3, #0
 8001832:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001834:	2364      	movs	r3, #100	; 0x64
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	2301      	movs	r3, #1
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	f107 030e 	add.w	r3, r7, #14
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	2301      	movs	r3, #1
 8001844:	221b      	movs	r2, #27
 8001846:	21d0      	movs	r1, #208	; 0xd0
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f000 ff79 	bl	8002740 <HAL_I2C_Mem_Write>
        return 0;
 800184e:	2300      	movs	r3, #0
 8001850:	e000      	b.n	8001854 <MPU6050_Init+0xa6>
    }
    return 1;
 8001852:	2301      	movs	r3, #1
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	0000      	movs	r0, r0
	...

08001860 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001864:	b094      	sub	sp, #80	; 0x50
 8001866:	af04      	add	r7, sp, #16
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800186c:	2364      	movs	r3, #100	; 0x64
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	230e      	movs	r3, #14
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	2301      	movs	r3, #1
 800187c:	223b      	movs	r2, #59	; 0x3b
 800187e:	21d0      	movs	r1, #208	; 0xd0
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f001 f857 	bl	8002934 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001886:	7a3b      	ldrb	r3, [r7, #8]
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	b21a      	sxth	r2, r3
 800188c:	7a7b      	ldrb	r3, [r7, #9]
 800188e:	b21b      	sxth	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	b21a      	sxth	r2, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001898:	7abb      	ldrb	r3, [r7, #10]
 800189a:	021b      	lsls	r3, r3, #8
 800189c:	b21a      	sxth	r2, r3
 800189e:	7afb      	ldrb	r3, [r7, #11]
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	b21a      	sxth	r2, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80018aa:	7b3b      	ldrb	r3, [r7, #12]
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	7b7b      	ldrb	r3, [r7, #13]
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	4313      	orrs	r3, r2
 80018b6:	b21a      	sxth	r2, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80018bc:	7bbb      	ldrb	r3, [r7, #14]
 80018be:	021b      	lsls	r3, r3, #8
 80018c0:	b21a      	sxth	r2, r3
 80018c2:	7bfb      	ldrb	r3, [r7, #15]
 80018c4:	b21b      	sxth	r3, r3
 80018c6:	4313      	orrs	r3, r2
 80018c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80018ca:	7c3b      	ldrb	r3, [r7, #16]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	7c7b      	ldrb	r3, [r7, #17]
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80018dc:	7cbb      	ldrb	r3, [r7, #18]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	b21a      	sxth	r2, r3
 80018e2:	7cfb      	ldrb	r3, [r7, #19]
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80018ee:	7d3b      	ldrb	r3, [r7, #20]
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	7d7b      	ldrb	r3, [r7, #21]
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	4313      	orrs	r3, r2
 80018fa:	b21a      	sxth	r2, r3
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fde8 	bl	80004dc <__aeabi_i2d>
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4bb7      	ldr	r3, [pc, #732]	; (8001bf0 <MPU6050_Read_All+0x390>)
 8001912:	f7fe ff77 	bl	8000804 <__aeabi_ddiv>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	6839      	ldr	r1, [r7, #0]
 800191c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fdd8 	bl	80004dc <__aeabi_i2d>
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	4baf      	ldr	r3, [pc, #700]	; (8001bf0 <MPU6050_Read_All+0x390>)
 8001932:	f7fe ff67 	bl	8000804 <__aeabi_ddiv>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	6839      	ldr	r1, [r7, #0]
 800193c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fdc8 	bl	80004dc <__aeabi_i2d>
 800194c:	a3a2      	add	r3, pc, #648	; (adr r3, 8001bd8 <MPU6050_Read_All+0x378>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe ff57 	bl	8000804 <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	6839      	ldr	r1, [r7, #0]
 800195c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001960:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff f9b5 	bl	8000cd4 <__aeabi_i2f>
 800196a:	4603      	mov	r3, r0
 800196c:	49a1      	ldr	r1, [pc, #644]	; (8001bf4 <MPU6050_Read_All+0x394>)
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fab8 	bl	8000ee4 <__aeabi_fdiv>
 8001974:	4603      	mov	r3, r0
 8001976:	49a0      	ldr	r1, [pc, #640]	; (8001bf8 <MPU6050_Read_All+0x398>)
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff f8f7 	bl	8000b6c <__addsf3>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fda5 	bl	80004dc <__aeabi_i2d>
 8001992:	a393      	add	r3, pc, #588	; (adr r3, 8001be0 <MPU6050_Read_All+0x380>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe ff34 	bl	8000804 <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	6839      	ldr	r1, [r7, #0]
 80019a2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fd95 	bl	80004dc <__aeabi_i2d>
 80019b2:	a38b      	add	r3, pc, #556	; (adr r3, 8001be0 <MPU6050_Read_All+0x380>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe ff24 	bl	8000804 <__aeabi_ddiv>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	6839      	ldr	r1, [r7, #0]
 80019c2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fd85 	bl	80004dc <__aeabi_i2d>
 80019d2:	a383      	add	r3, pc, #524	; (adr r3, 8001be0 <MPU6050_Read_All+0x380>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe ff14 	bl	8000804 <__aeabi_ddiv>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	6839      	ldr	r1, [r7, #0]
 80019e2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80019e6:	f000 fac1 	bl	8001f6c <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	4b83      	ldr	r3, [pc, #524]	; (8001bfc <MPU6050_Read_All+0x39c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fd62 	bl	80004bc <__aeabi_ui2d>
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	4b80      	ldr	r3, [pc, #512]	; (8001c00 <MPU6050_Read_All+0x3a0>)
 80019fe:	f7fe ff01 	bl	8000804 <__aeabi_ddiv>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001a0a:	f000 faaf 	bl	8001f6c <HAL_GetTick>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	4a7a      	ldr	r2, [pc, #488]	; (8001bfc <MPU6050_Read_All+0x39c>)
 8001a12:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a22:	fb03 f202 	mul.w	r2, r3, r2
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a34:	fb03 f301 	mul.w	r3, r3, r1
 8001a38:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe fd4e 	bl	80004dc <__aeabi_i2d>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f005 f9a2 	bl	8006d90 <sqrt>
 8001a4c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0) {
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a5c:	f7ff f810 	bl	8000a80 <__aeabi_dcmpeq>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d119      	bne.n	8001a9a <MPU6050_Read_All+0x23a>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd35 	bl	80004dc <__aeabi_i2d>
 8001a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a76:	f7fe fec5 	bl	8000804 <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f004 fff5 	bl	8006a70 <atan>
 8001a86:	a358      	add	r3, pc, #352	; (adr r3, 8001be8 <MPU6050_Read_All+0x388>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fd90 	bl	80005b0 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001a98:	e005      	b.n	8001aa6 <MPU6050_Read_All+0x246>
    } else {
        roll = 0.0;
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aac:	425b      	negs	r3, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd14 	bl	80004dc <__aeabi_i2d>
 8001ab4:	4682      	mov	sl, r0
 8001ab6:	468b      	mov	fp, r1
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd0c 	bl	80004dc <__aeabi_i2d>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4650      	mov	r0, sl
 8001aca:	4659      	mov	r1, fp
 8001acc:	f005 f95d 	bl	8006d8a <atan2>
 8001ad0:	a345      	add	r3, pc, #276	; (adr r3, 8001be8 <MPU6050_Read_All+0x388>)
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	f7fe fd6b 	bl	80005b0 <__aeabi_dmul>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4b47      	ldr	r3, [pc, #284]	; (8001c04 <MPU6050_Read_All+0x3a4>)
 8001ae8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aec:	f7fe ffd2 	bl	8000a94 <__aeabi_dcmplt>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00a      	beq.n	8001b0c <MPU6050_Read_All+0x2ac>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <MPU6050_Read_All+0x3a8>)
 8001b02:	f7fe ffe5 	bl	8000ad0 <__aeabi_dcmpgt>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d114      	bne.n	8001b36 <MPU6050_Read_All+0x2d6>
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <MPU6050_Read_All+0x3a8>)
 8001b12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001b16:	f7fe ffdb 	bl	8000ad0 <__aeabi_dcmpgt>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d015      	beq.n	8001b4c <MPU6050_Read_All+0x2ec>
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	4b36      	ldr	r3, [pc, #216]	; (8001c04 <MPU6050_Read_All+0x3a4>)
 8001b2c:	f7fe ffb2 	bl	8000a94 <__aeabi_dcmplt>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00a      	beq.n	8001b4c <MPU6050_Read_All+0x2ec>
        KalmanY.angle = pitch;
 8001b36:	4935      	ldr	r1, [pc, #212]	; (8001c0c <MPU6050_Read_All+0x3ac>)
 8001b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b3c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001b40:	6839      	ldr	r1, [r7, #0]
 8001b42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b46:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001b4a:	e012      	b.n	8001b72 <MPU6050_Read_All+0x312>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001b52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b5a:	e9cd 2300 	strd	r2, r3, [sp]
 8001b5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b62:	482a      	ldr	r0, [pc, #168]	; (8001c0c <MPU6050_Read_All+0x3ac>)
 8001b64:	f000 f856 	bl	8001c14 <Kalman_getAngle>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	6839      	ldr	r1, [r7, #0]
 8001b6e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8001b78:	4690      	mov	r8, r2
 8001b7a:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <MPU6050_Read_All+0x3a8>)
 8001b84:	4640      	mov	r0, r8
 8001b86:	4649      	mov	r1, r9
 8001b88:	f7fe ffa2 	bl	8000ad0 <__aeabi_dcmpgt>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d008      	beq.n	8001ba4 <MPU6050_Read_All+0x344>
        DataStruct->Gx = -DataStruct->Gx;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001b98:	4614      	mov	r4, r2
 8001b9a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001baa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001bb2:	e9cd 2300 	strd	r2, r3, [sp]
 8001bb6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001bba:	4815      	ldr	r0, [pc, #84]	; (8001c10 <MPU6050_Read_All+0x3b0>)
 8001bbc:	f000 f82a 	bl	8001c14 <Kalman_getAngle>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	6839      	ldr	r1, [r7, #0]
 8001bc6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 8001bca:	bf00      	nop
 8001bcc:	3740      	adds	r7, #64	; 0x40
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	40cc2900 	.word	0x40cc2900
 8001be0:	00000000 	.word	0x00000000
 8001be4:	40606000 	.word	0x40606000
 8001be8:	1a63c1f8 	.word	0x1a63c1f8
 8001bec:	404ca5dc 	.word	0x404ca5dc
 8001bf0:	40d00000 	.word	0x40d00000
 8001bf4:	43aa0000 	.word	0x43aa0000
 8001bf8:	42121eb8 	.word	0x42121eb8
 8001bfc:	200003fc 	.word	0x200003fc
 8001c00:	408f4000 	.word	0x408f4000
 8001c04:	c0568000 	.word	0xc0568000
 8001c08:	40568000 	.word	0x40568000
 8001c0c:	20000050 	.word	0x20000050
 8001c10:	20000008 	.word	0x20000008

08001c14 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8001c14:	b5b0      	push	{r4, r5, r7, lr}
 8001c16:	b092      	sub	sp, #72	; 0x48
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001c26:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001c2a:	f7fe fb09 	bl	8000240 <__aeabi_dsub>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001c3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001c44:	f7fe fcb4 	bl	80005b0 <__aeabi_dmul>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	4629      	mov	r1, r5
 8001c50:	f7fe faf8 	bl	8000244 <__adddf3>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	68f9      	ldr	r1, [r7, #12]
 8001c5a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001c6a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c6e:	f7fe fc9f 	bl	80005b0 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001c80:	f7fe fade 	bl	8000240 <__aeabi_dsub>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001c92:	f7fe fad5 	bl	8000240 <__aeabi_dsub>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe face 	bl	8000244 <__adddf3>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001cb4:	f7fe fc7c 	bl	80005b0 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f7fe fac0 	bl	8000244 <__adddf3>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	68f9      	ldr	r1, [r7, #12]
 8001cca:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001cda:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001cde:	f7fe fc67 	bl	80005b0 <__aeabi_dmul>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	4629      	mov	r1, r5
 8001cea:	f7fe faa9 	bl	8000240 <__aeabi_dsub>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	68f9      	ldr	r1, [r7, #12]
 8001cf4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8001d04:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d08:	f7fe fc52 	bl	80005b0 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4620      	mov	r0, r4
 8001d12:	4629      	mov	r1, r5
 8001d14:	f7fe fa94 	bl	8000240 <__aeabi_dsub>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	68f9      	ldr	r1, [r7, #12]
 8001d1e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d2e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001d32:	f7fe fc3d 	bl	80005b0 <__aeabi_dmul>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4620      	mov	r0, r4
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	f7fe fa81 	bl	8000244 <__adddf3>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	68f9      	ldr	r1, [r7, #12]
 8001d48:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d58:	f7fe fa74 	bl	8000244 <__adddf3>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001d6a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d6e:	f7fe fd49 	bl	8000804 <__aeabi_ddiv>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001d80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d84:	f7fe fd3e 	bl	8000804 <__aeabi_ddiv>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d9a:	f7fe fa51 	bl	8000240 <__aeabi_dsub>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001dac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001db0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001db4:	f7fe fbfc 	bl	80005b0 <__aeabi_dmul>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	f7fe fa40 	bl	8000244 <__adddf3>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	68f9      	ldr	r1, [r7, #12]
 8001dca:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001dd4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ddc:	f7fe fbe8 	bl	80005b0 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4620      	mov	r0, r4
 8001de6:	4629      	mov	r1, r5
 8001de8:	f7fe fa2c 	bl	8000244 <__adddf3>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	68f9      	ldr	r1, [r7, #12]
 8001df2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001dfc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001e06:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001e10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e14:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e18:	f7fe fbca 	bl	80005b0 <__aeabi_dmul>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4620      	mov	r0, r4
 8001e22:	4629      	mov	r1, r5
 8001e24:	f7fe fa0c 	bl	8000240 <__aeabi_dsub>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001e38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e3c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e40:	f7fe fbb6 	bl	80005b0 <__aeabi_dmul>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4620      	mov	r0, r4
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	f7fe f9f8 	bl	8000240 <__aeabi_dsub>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	68f9      	ldr	r1, [r7, #12]
 8001e56:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001e60:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e68:	f7fe fba2 	bl	80005b0 <__aeabi_dmul>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4620      	mov	r0, r4
 8001e72:	4629      	mov	r1, r5
 8001e74:	f7fe f9e4 	bl	8000240 <__aeabi_dsub>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	68f9      	ldr	r1, [r7, #12]
 8001e7e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8001e88:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e8c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e90:	f7fe fb8e 	bl	80005b0 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4620      	mov	r0, r4
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	f7fe f9d0 	bl	8000240 <__aeabi_dsub>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	68f9      	ldr	r1, [r7, #12]
 8001ea6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	3748      	adds	r7, #72	; 0x48
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <HAL_Init+0x28>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a07      	ldr	r2, [pc, #28]	; (8001ee4 <HAL_Init+0x28>)
 8001ec6:	f043 0310 	orr.w	r3, r3, #16
 8001eca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f000 f92b 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f000 f808 	bl	8001ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ed8:	f7ff faae 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40022000 	.word	0x40022000

08001ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_InitTick+0x54>)
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <HAL_InitTick+0x58>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f935 	bl	8002176 <HAL_SYSTICK_Config>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e00e      	b.n	8001f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	d80a      	bhi.n	8001f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	f000 f90b 	bl	800213e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f28:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <HAL_InitTick+0x5c>)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	2000009c 	.word	0x2000009c
 8001f44:	20000098 	.word	0x20000098

08001f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_IncTick+0x1c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <HAL_IncTick+0x20>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a03      	ldr	r2, [pc, #12]	; (8001f68 <HAL_IncTick+0x20>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	2000009c 	.word	0x2000009c
 8001f68:	20000400 	.word	0x20000400

08001f6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f70:	4b02      	ldr	r3, [pc, #8]	; (8001f7c <HAL_GetTick+0x10>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr
 8001f7c:	20000400 	.word	0x20000400

08001f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff fff0 	bl	8001f6c <HAL_GetTick>
 8001f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f98:	d005      	beq.n	8001fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_Delay+0x44>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fa6:	bf00      	nop
 8001fa8:	f7ff ffe0 	bl	8001f6c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d8f7      	bhi.n	8001fa8 <HAL_Delay+0x28>
  {
  }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	3710      	adds	r7, #16
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000009c 	.word	0x2000009c

08001fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ffa:	4a04      	ldr	r2, [pc, #16]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	60d3      	str	r3, [r2, #12]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <__NVIC_GetPriorityGrouping+0x18>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	f003 0307 	and.w	r3, r3, #7
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	bc80      	pop	{r7}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	db0a      	blt.n	8002056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	490c      	ldr	r1, [pc, #48]	; (8002078 <__NVIC_SetPriority+0x4c>)
 8002046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	440b      	add	r3, r1
 8002050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002054:	e00a      	b.n	800206c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4908      	ldr	r1, [pc, #32]	; (800207c <__NVIC_SetPriority+0x50>)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3b04      	subs	r3, #4
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	440b      	add	r3, r1
 800206a:	761a      	strb	r2, [r3, #24]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f1c3 0307 	rsb	r3, r3, #7
 800209a:	2b04      	cmp	r3, #4
 800209c:	bf28      	it	cs
 800209e:	2304      	movcs	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d902      	bls.n	80020b0 <NVIC_EncodePriority+0x30>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	e000      	b.n	80020b2 <NVIC_EncodePriority+0x32>
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	4313      	orrs	r3, r2
         );
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	; 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f7ff ff90 	bl	800202c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff49 	bl	8001fc8 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002150:	f7ff ff5e 	bl	8002010 <__NVIC_GetPriorityGrouping>
 8002154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff90 	bl	8002080 <NVIC_EncodePriority>
 8002160:	4602      	mov	r2, r0
 8002162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff5f 	bl	800202c <__NVIC_SetPriority>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ffb0 	bl	80020e4 <SysTick_Config>
 8002184:	4603      	mov	r3, r0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002190:	b480      	push	{r7}
 8002192:	b08b      	sub	sp, #44	; 0x2c
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800219a:	2300      	movs	r3, #0
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800219e:	2300      	movs	r3, #0
 80021a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a2:	e179      	b.n	8002498 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021a4:	2201      	movs	r2, #1
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	69fa      	ldr	r2, [r7, #28]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	429a      	cmp	r2, r3
 80021be:	f040 8168 	bne.w	8002492 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4aa0      	ldr	r2, [pc, #640]	; (8002448 <HAL_GPIO_Init+0x2b8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d05e      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021cc:	4a9e      	ldr	r2, [pc, #632]	; (8002448 <HAL_GPIO_Init+0x2b8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d875      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 80021d2:	4a9e      	ldr	r2, [pc, #632]	; (800244c <HAL_GPIO_Init+0x2bc>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d058      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021d8:	4a9c      	ldr	r2, [pc, #624]	; (800244c <HAL_GPIO_Init+0x2bc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d86f      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 80021de:	4a9c      	ldr	r2, [pc, #624]	; (8002450 <HAL_GPIO_Init+0x2c0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d052      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021e4:	4a9a      	ldr	r2, [pc, #616]	; (8002450 <HAL_GPIO_Init+0x2c0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d869      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 80021ea:	4a9a      	ldr	r2, [pc, #616]	; (8002454 <HAL_GPIO_Init+0x2c4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d04c      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021f0:	4a98      	ldr	r2, [pc, #608]	; (8002454 <HAL_GPIO_Init+0x2c4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d863      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 80021f6:	4a98      	ldr	r2, [pc, #608]	; (8002458 <HAL_GPIO_Init+0x2c8>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d046      	beq.n	800228a <HAL_GPIO_Init+0xfa>
 80021fc:	4a96      	ldr	r2, [pc, #600]	; (8002458 <HAL_GPIO_Init+0x2c8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d85d      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 8002202:	2b12      	cmp	r3, #18
 8002204:	d82a      	bhi.n	800225c <HAL_GPIO_Init+0xcc>
 8002206:	2b12      	cmp	r3, #18
 8002208:	d859      	bhi.n	80022be <HAL_GPIO_Init+0x12e>
 800220a:	a201      	add	r2, pc, #4	; (adr r2, 8002210 <HAL_GPIO_Init+0x80>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	0800228b 	.word	0x0800228b
 8002214:	08002265 	.word	0x08002265
 8002218:	08002277 	.word	0x08002277
 800221c:	080022b9 	.word	0x080022b9
 8002220:	080022bf 	.word	0x080022bf
 8002224:	080022bf 	.word	0x080022bf
 8002228:	080022bf 	.word	0x080022bf
 800222c:	080022bf 	.word	0x080022bf
 8002230:	080022bf 	.word	0x080022bf
 8002234:	080022bf 	.word	0x080022bf
 8002238:	080022bf 	.word	0x080022bf
 800223c:	080022bf 	.word	0x080022bf
 8002240:	080022bf 	.word	0x080022bf
 8002244:	080022bf 	.word	0x080022bf
 8002248:	080022bf 	.word	0x080022bf
 800224c:	080022bf 	.word	0x080022bf
 8002250:	080022bf 	.word	0x080022bf
 8002254:	0800226d 	.word	0x0800226d
 8002258:	08002281 	.word	0x08002281
 800225c:	4a7f      	ldr	r2, [pc, #508]	; (800245c <HAL_GPIO_Init+0x2cc>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d013      	beq.n	800228a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002262:	e02c      	b.n	80022be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	623b      	str	r3, [r7, #32]
          break;
 800226a:	e029      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	3304      	adds	r3, #4
 8002272:	623b      	str	r3, [r7, #32]
          break;
 8002274:	e024      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	3308      	adds	r3, #8
 800227c:	623b      	str	r3, [r7, #32]
          break;
 800227e:	e01f      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	330c      	adds	r3, #12
 8002286:	623b      	str	r3, [r7, #32]
          break;
 8002288:	e01a      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d102      	bne.n	8002298 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002292:	2304      	movs	r3, #4
 8002294:	623b      	str	r3, [r7, #32]
          break;
 8002296:	e013      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d105      	bne.n	80022ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022a0:	2308      	movs	r3, #8
 80022a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	611a      	str	r2, [r3, #16]
          break;
 80022aa:	e009      	b.n	80022c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022ac:	2308      	movs	r3, #8
 80022ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	615a      	str	r2, [r3, #20]
          break;
 80022b6:	e003      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
          break;
 80022bc:	e000      	b.n	80022c0 <HAL_GPIO_Init+0x130>
          break;
 80022be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2bff      	cmp	r3, #255	; 0xff
 80022c4:	d801      	bhi.n	80022ca <HAL_GPIO_Init+0x13a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	e001      	b.n	80022ce <HAL_GPIO_Init+0x13e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2bff      	cmp	r3, #255	; 0xff
 80022d4:	d802      	bhi.n	80022dc <HAL_GPIO_Init+0x14c>
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	e002      	b.n	80022e2 <HAL_GPIO_Init+0x152>
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	3b08      	subs	r3, #8
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	210f      	movs	r1, #15
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	fa01 f303 	lsl.w	r3, r1, r3
 80022f0:	43db      	mvns	r3, r3
 80022f2:	401a      	ands	r2, r3
 80022f4:	6a39      	ldr	r1, [r7, #32]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	fa01 f303 	lsl.w	r3, r1, r3
 80022fc:	431a      	orrs	r2, r3
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80c1 	beq.w	8002492 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002310:	4b53      	ldr	r3, [pc, #332]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	4a52      	ldr	r2, [pc, #328]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6193      	str	r3, [r2, #24]
 800231c:	4b50      	ldr	r3, [pc, #320]	; (8002460 <HAL_GPIO_Init+0x2d0>)
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	60bb      	str	r3, [r7, #8]
 8002326:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002328:	4a4e      	ldr	r2, [pc, #312]	; (8002464 <HAL_GPIO_Init+0x2d4>)
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002334:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a46      	ldr	r2, [pc, #280]	; (8002468 <HAL_GPIO_Init+0x2d8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d01f      	beq.n	8002394 <HAL_GPIO_Init+0x204>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a45      	ldr	r2, [pc, #276]	; (800246c <HAL_GPIO_Init+0x2dc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d019      	beq.n	8002390 <HAL_GPIO_Init+0x200>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a44      	ldr	r2, [pc, #272]	; (8002470 <HAL_GPIO_Init+0x2e0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d013      	beq.n	800238c <HAL_GPIO_Init+0x1fc>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a43      	ldr	r2, [pc, #268]	; (8002474 <HAL_GPIO_Init+0x2e4>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d00d      	beq.n	8002388 <HAL_GPIO_Init+0x1f8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a42      	ldr	r2, [pc, #264]	; (8002478 <HAL_GPIO_Init+0x2e8>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d007      	beq.n	8002384 <HAL_GPIO_Init+0x1f4>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a41      	ldr	r2, [pc, #260]	; (800247c <HAL_GPIO_Init+0x2ec>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d101      	bne.n	8002380 <HAL_GPIO_Init+0x1f0>
 800237c:	2305      	movs	r3, #5
 800237e:	e00a      	b.n	8002396 <HAL_GPIO_Init+0x206>
 8002380:	2306      	movs	r3, #6
 8002382:	e008      	b.n	8002396 <HAL_GPIO_Init+0x206>
 8002384:	2304      	movs	r3, #4
 8002386:	e006      	b.n	8002396 <HAL_GPIO_Init+0x206>
 8002388:	2303      	movs	r3, #3
 800238a:	e004      	b.n	8002396 <HAL_GPIO_Init+0x206>
 800238c:	2302      	movs	r3, #2
 800238e:	e002      	b.n	8002396 <HAL_GPIO_Init+0x206>
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <HAL_GPIO_Init+0x206>
 8002394:	2300      	movs	r3, #0
 8002396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002398:	f002 0203 	and.w	r2, r2, #3
 800239c:	0092      	lsls	r2, r2, #2
 800239e:	4093      	lsls	r3, r2
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023a6:	492f      	ldr	r1, [pc, #188]	; (8002464 <HAL_GPIO_Init+0x2d4>)
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	3302      	adds	r3, #2
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023c0:	4b2f      	ldr	r3, [pc, #188]	; (8002480 <HAL_GPIO_Init+0x2f0>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	492e      	ldr	r1, [pc, #184]	; (8002480 <HAL_GPIO_Init+0x2f0>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023ce:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <HAL_GPIO_Init+0x2f0>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	492a      	ldr	r1, [pc, #168]	; (8002480 <HAL_GPIO_Init+0x2f0>)
 80023d8:	4013      	ands	r3, r2
 80023da:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <HAL_GPIO_Init+0x2f0>)
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4924      	ldr	r1, [pc, #144]	; (8002480 <HAL_GPIO_Init+0x2f0>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
 80023f4:	e006      	b.n	8002404 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <HAL_GPIO_Init+0x2f0>)
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	4920      	ldr	r1, [pc, #128]	; (8002480 <HAL_GPIO_Init+0x2f0>)
 8002400:	4013      	ands	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d006      	beq.n	800241e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_GPIO_Init+0x2f0>)
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	491a      	ldr	r1, [pc, #104]	; (8002480 <HAL_GPIO_Init+0x2f0>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]
 800241c:	e006      	b.n	800242c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800241e:	4b18      	ldr	r3, [pc, #96]	; (8002480 <HAL_GPIO_Init+0x2f0>)
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	43db      	mvns	r3, r3
 8002426:	4916      	ldr	r1, [pc, #88]	; (8002480 <HAL_GPIO_Init+0x2f0>)
 8002428:	4013      	ands	r3, r2
 800242a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d025      	beq.n	8002484 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002438:	4b11      	ldr	r3, [pc, #68]	; (8002480 <HAL_GPIO_Init+0x2f0>)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	4910      	ldr	r1, [pc, #64]	; (8002480 <HAL_GPIO_Init+0x2f0>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	60cb      	str	r3, [r1, #12]
 8002444:	e025      	b.n	8002492 <HAL_GPIO_Init+0x302>
 8002446:	bf00      	nop
 8002448:	10320000 	.word	0x10320000
 800244c:	10310000 	.word	0x10310000
 8002450:	10220000 	.word	0x10220000
 8002454:	10210000 	.word	0x10210000
 8002458:	10120000 	.word	0x10120000
 800245c:	10110000 	.word	0x10110000
 8002460:	40021000 	.word	0x40021000
 8002464:	40010000 	.word	0x40010000
 8002468:	40010800 	.word	0x40010800
 800246c:	40010c00 	.word	0x40010c00
 8002470:	40011000 	.word	0x40011000
 8002474:	40011400 	.word	0x40011400
 8002478:	40011800 	.word	0x40011800
 800247c:	40011c00 	.word	0x40011c00
 8002480:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_GPIO_Init+0x324>)
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	43db      	mvns	r3, r3
 800248c:	4909      	ldr	r1, [pc, #36]	; (80024b4 <HAL_GPIO_Init+0x324>)
 800248e:	4013      	ands	r3, r2
 8002490:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	3301      	adds	r3, #1
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	fa22 f303 	lsr.w	r3, r2, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f47f ae7e 	bne.w	80021a4 <HAL_GPIO_Init+0x14>
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	372c      	adds	r7, #44	; 0x2c
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	40010400 	.word	0x40010400

080024b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e12b      	b.n	8002722 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d106      	bne.n	80024e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe fece 	bl	8001280 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2224      	movs	r2, #36	; 0x24
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0201 	bic.w	r2, r2, #1
 80024fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800250a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800251a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800251c:	f001 fba0 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 8002520:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a81      	ldr	r2, [pc, #516]	; (800272c <HAL_I2C_Init+0x274>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d807      	bhi.n	800253c <HAL_I2C_Init+0x84>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4a80      	ldr	r2, [pc, #512]	; (8002730 <HAL_I2C_Init+0x278>)
 8002530:	4293      	cmp	r3, r2
 8002532:	bf94      	ite	ls
 8002534:	2301      	movls	r3, #1
 8002536:	2300      	movhi	r3, #0
 8002538:	b2db      	uxtb	r3, r3
 800253a:	e006      	b.n	800254a <HAL_I2C_Init+0x92>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a7d      	ldr	r2, [pc, #500]	; (8002734 <HAL_I2C_Init+0x27c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	bf94      	ite	ls
 8002544:	2301      	movls	r3, #1
 8002546:	2300      	movhi	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0e7      	b.n	8002722 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4a78      	ldr	r2, [pc, #480]	; (8002738 <HAL_I2C_Init+0x280>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	0c9b      	lsrs	r3, r3, #18
 800255c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a6a      	ldr	r2, [pc, #424]	; (800272c <HAL_I2C_Init+0x274>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d802      	bhi.n	800258c <HAL_I2C_Init+0xd4>
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	3301      	adds	r3, #1
 800258a:	e009      	b.n	80025a0 <HAL_I2C_Init+0xe8>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	4a69      	ldr	r2, [pc, #420]	; (800273c <HAL_I2C_Init+0x284>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	099b      	lsrs	r3, r3, #6
 800259e:	3301      	adds	r3, #1
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	430b      	orrs	r3, r1
 80025a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	495c      	ldr	r1, [pc, #368]	; (800272c <HAL_I2C_Init+0x274>)
 80025bc:	428b      	cmp	r3, r1
 80025be:	d819      	bhi.n	80025f4 <HAL_I2C_Init+0x13c>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1e59      	subs	r1, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ce:	1c59      	adds	r1, r3, #1
 80025d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025d4:	400b      	ands	r3, r1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_I2C_Init+0x138>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1e59      	subs	r1, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025e8:	3301      	adds	r3, #1
 80025ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ee:	e051      	b.n	8002694 <HAL_I2C_Init+0x1dc>
 80025f0:	2304      	movs	r3, #4
 80025f2:	e04f      	b.n	8002694 <HAL_I2C_Init+0x1dc>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d111      	bne.n	8002620 <HAL_I2C_Init+0x168>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1e58      	subs	r0, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6859      	ldr	r1, [r3, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	440b      	add	r3, r1
 800260a:	fbb0 f3f3 	udiv	r3, r0, r3
 800260e:	3301      	adds	r3, #1
 8002610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e012      	b.n	8002646 <HAL_I2C_Init+0x18e>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1e58      	subs	r0, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	0099      	lsls	r1, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	fbb0 f3f3 	udiv	r3, r0, r3
 8002636:	3301      	adds	r3, #1
 8002638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263c:	2b00      	cmp	r3, #0
 800263e:	bf0c      	ite	eq
 8002640:	2301      	moveq	r3, #1
 8002642:	2300      	movne	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Init+0x196>
 800264a:	2301      	movs	r3, #1
 800264c:	e022      	b.n	8002694 <HAL_I2C_Init+0x1dc>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10e      	bne.n	8002674 <HAL_I2C_Init+0x1bc>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1e58      	subs	r0, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	440b      	add	r3, r1
 8002664:	fbb0 f3f3 	udiv	r3, r0, r3
 8002668:	3301      	adds	r3, #1
 800266a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002672:	e00f      	b.n	8002694 <HAL_I2C_Init+0x1dc>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1e58      	subs	r0, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	0099      	lsls	r1, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	fbb0 f3f3 	udiv	r3, r0, r3
 800268a:	3301      	adds	r3, #1
 800268c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	6809      	ldr	r1, [r1, #0]
 8002698:	4313      	orrs	r3, r2
 800269a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69da      	ldr	r2, [r3, #28]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6911      	ldr	r1, [r2, #16]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68d2      	ldr	r2, [r2, #12]
 80026ce:	4311      	orrs	r1, r2
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	430b      	orrs	r3, r1
 80026d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	000186a0 	.word	0x000186a0
 8002730:	001e847f 	.word	0x001e847f
 8002734:	003d08ff 	.word	0x003d08ff
 8002738:	431bde83 	.word	0x431bde83
 800273c:	10624dd3 	.word	0x10624dd3

08002740 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af02      	add	r7, sp, #8
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	4608      	mov	r0, r1
 800274a:	4611      	mov	r1, r2
 800274c:	461a      	mov	r2, r3
 800274e:	4603      	mov	r3, r0
 8002750:	817b      	strh	r3, [r7, #10]
 8002752:	460b      	mov	r3, r1
 8002754:	813b      	strh	r3, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800275a:	f7ff fc07 	bl	8001f6c <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b20      	cmp	r3, #32
 800276a:	f040 80d9 	bne.w	8002920 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2319      	movs	r3, #25
 8002774:	2201      	movs	r2, #1
 8002776:	496d      	ldr	r1, [pc, #436]	; (800292c <HAL_I2C_Mem_Write+0x1ec>)
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fcc1 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002784:	2302      	movs	r3, #2
 8002786:	e0cc      	b.n	8002922 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_I2C_Mem_Write+0x56>
 8002792:	2302      	movs	r3, #2
 8002794:	e0c5      	b.n	8002922 <HAL_I2C_Mem_Write+0x1e2>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d007      	beq.n	80027bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f042 0201 	orr.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2221      	movs	r2, #33	; 0x21
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2240      	movs	r2, #64	; 0x40
 80027d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6a3a      	ldr	r2, [r7, #32]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	4a4d      	ldr	r2, [pc, #308]	; (8002930 <HAL_I2C_Mem_Write+0x1f0>)
 80027fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027fe:	88f8      	ldrh	r0, [r7, #6]
 8002800:	893a      	ldrh	r2, [r7, #8]
 8002802:	8979      	ldrh	r1, [r7, #10]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	4603      	mov	r3, r0
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 faf8 	bl	8002e04 <I2C_RequestMemoryWrite>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d052      	beq.n	80028c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e081      	b.n	8002922 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fd42 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00d      	beq.n	800284a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2b04      	cmp	r3, #4
 8002834:	d107      	bne.n	8002846 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002844:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e06b      	b.n	8002922 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	781a      	ldrb	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b04      	cmp	r3, #4
 8002886:	d11b      	bne.n	80028c0 <HAL_I2C_Mem_Write+0x180>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	2b00      	cmp	r3, #0
 800288e:	d017      	beq.n	80028c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1aa      	bne.n	800281e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fd2e 	bl	800332e <I2C_WaitOnBTFFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00d      	beq.n	80028f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d107      	bne.n	80028f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e016      	b.n	8002922 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	e000      	b.n	8002922 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002920:	2302      	movs	r3, #2
  }
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	00100002 	.word	0x00100002
 8002930:	ffff0000 	.word	0xffff0000

08002934 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08c      	sub	sp, #48	; 0x30
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	461a      	mov	r2, r3
 8002942:	4603      	mov	r3, r0
 8002944:	817b      	strh	r3, [r7, #10]
 8002946:	460b      	mov	r3, r1
 8002948:	813b      	strh	r3, [r7, #8]
 800294a:	4613      	mov	r3, r2
 800294c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002952:	f7ff fb0b 	bl	8001f6c <HAL_GetTick>
 8002956:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b20      	cmp	r3, #32
 8002962:	f040 8244 	bne.w	8002dee <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2319      	movs	r3, #25
 800296c:	2201      	movs	r2, #1
 800296e:	4982      	ldr	r1, [pc, #520]	; (8002b78 <HAL_I2C_Mem_Read+0x244>)
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 fbc5 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800297c:	2302      	movs	r3, #2
 800297e:	e237      	b.n	8002df0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_I2C_Mem_Read+0x5a>
 800298a:	2302      	movs	r3, #2
 800298c:	e230      	b.n	8002df0 <HAL_I2C_Mem_Read+0x4bc>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d007      	beq.n	80029b4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2222      	movs	r2, #34	; 0x22
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2240      	movs	r2, #64	; 0x40
 80029d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80029e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	4a62      	ldr	r2, [pc, #392]	; (8002b7c <HAL_I2C_Mem_Read+0x248>)
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029f6:	88f8      	ldrh	r0, [r7, #6]
 80029f8:	893a      	ldrh	r2, [r7, #8]
 80029fa:	8979      	ldrh	r1, [r7, #10]
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	9301      	str	r3, [sp, #4]
 8002a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	4603      	mov	r3, r0
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fa92 	bl	8002f30 <I2C_RequestMemoryRead>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e1ec      	b.n	8002df0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d113      	bne.n	8002a46 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	e1c0      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d11e      	bne.n	8002a8c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a5e:	b672      	cpsid	i
}
 8002a60:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a88:	b662      	cpsie	i
}
 8002a8a:	e035      	b.n	8002af8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d11e      	bne.n	8002ad2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002aa2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002aa4:	b672      	cpsid	i
}
 8002aa6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	617b      	str	r3, [r7, #20]
 8002abc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002acc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ace:	b662      	cpsie	i
}
 8002ad0:	e012      	b.n	8002af8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ae0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002af8:	e166      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	f200 811f 	bhi.w	8002d42 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d123      	bne.n	8002b54 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fc4d 	bl	80033b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e167      	b.n	8002df0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b52:	e139      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d152      	bne.n	8002c02 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b62:	2200      	movs	r2, #0
 8002b64:	4906      	ldr	r1, [pc, #24]	; (8002b80 <HAL_I2C_Mem_Read+0x24c>)
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 faca 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e13c      	b.n	8002df0 <HAL_I2C_Mem_Read+0x4bc>
 8002b76:	bf00      	nop
 8002b78:	00100002 	.word	0x00100002
 8002b7c:	ffff0000 	.word	0xffff0000
 8002b80:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b84:	b672      	cpsid	i
}
 8002b86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bca:	b662      	cpsie	i
}
 8002bcc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c00:	e0e2      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	2200      	movs	r2, #0
 8002c0a:	497b      	ldr	r1, [pc, #492]	; (8002df8 <HAL_I2C_Mem_Read+0x4c4>)
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 fa77 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0e9      	b.n	8002df0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c2c:	b672      	cpsid	i
}
 8002c2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c62:	4b66      	ldr	r3, [pc, #408]	; (8002dfc <HAL_I2C_Mem_Read+0x4c8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	08db      	lsrs	r3, r3, #3
 8002c68:	4a65      	ldr	r2, [pc, #404]	; (8002e00 <HAL_I2C_Mem_Read+0x4cc>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0a1a      	lsrs	r2, r3, #8
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00da      	lsls	r2, r3, #3
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d118      	bne.n	8002cba <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f043 0220 	orr.w	r2, r3, #32
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002caa:	b662      	cpsie	i
}
 8002cac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e09a      	b.n	8002df0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d1d9      	bne.n	8002c7c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d0a:	b662      	cpsie	i
}
 8002d0c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d40:	e042      	b.n	8002dc8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 fb32 	bl	80033b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e04c      	b.n	8002df0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f003 0304 	and.w	r3, r3, #4
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d118      	bne.n	8002dc8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f47f ae94 	bne.w	8002afa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e000      	b.n	8002df0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
  }
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3728      	adds	r7, #40	; 0x28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	00010004 	.word	0x00010004
 8002dfc:	20000000 	.word	0x20000000
 8002e00:	14f8b589 	.word	0x14f8b589

08002e04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	4608      	mov	r0, r1
 8002e0e:	4611      	mov	r1, r2
 8002e10:	461a      	mov	r2, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	817b      	strh	r3, [r7, #10]
 8002e16:	460b      	mov	r3, r1
 8002e18:	813b      	strh	r3, [r7, #8]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f960 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e54:	d103      	bne.n	8002e5e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e05f      	b.n	8002f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e62:	897b      	ldrh	r3, [r7, #10]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e70:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	6a3a      	ldr	r2, [r7, #32]
 8002e76:	492d      	ldr	r1, [pc, #180]	; (8002f2c <I2C_RequestMemoryWrite+0x128>)
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 f998 	bl	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e04c      	b.n	8002f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea0:	6a39      	ldr	r1, [r7, #32]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fa02 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00d      	beq.n	8002eca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d107      	bne.n	8002ec6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e02b      	b.n	8002f22 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d105      	bne.n	8002edc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed0:	893b      	ldrh	r3, [r7, #8]
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	611a      	str	r2, [r3, #16]
 8002eda:	e021      	b.n	8002f20 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002edc:	893b      	ldrh	r3, [r7, #8]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eec:	6a39      	ldr	r1, [r7, #32]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f9dc 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00d      	beq.n	8002f16 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d107      	bne.n	8002f12 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f10:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e005      	b.n	8002f22 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f16:	893b      	ldrh	r3, [r7, #8]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3718      	adds	r7, #24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	00010002 	.word	0x00010002

08002f30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af02      	add	r7, sp, #8
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	817b      	strh	r3, [r7, #10]
 8002f42:	460b      	mov	r3, r1
 8002f44:	813b      	strh	r3, [r7, #8]
 8002f46:	4613      	mov	r3, r2
 8002f48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f8c2 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f90:	d103      	bne.n	8002f9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0aa      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f9e:	897b      	ldrh	r3, [r7, #10]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	6a3a      	ldr	r2, [r7, #32]
 8002fb2:	4952      	ldr	r1, [pc, #328]	; (80030fc <I2C_RequestMemoryRead+0x1cc>)
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f8fa 	bl	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e097      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fdc:	6a39      	ldr	r1, [r7, #32]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 f964 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00d      	beq.n	8003006 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d107      	bne.n	8003002 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003000:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e076      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003006:	88fb      	ldrh	r3, [r7, #6]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d105      	bne.n	8003018 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800300c:	893b      	ldrh	r3, [r7, #8]
 800300e:	b2da      	uxtb	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	e021      	b.n	800305c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003018:	893b      	ldrh	r3, [r7, #8]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	b29b      	uxth	r3, r3
 800301e:	b2da      	uxtb	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	6a39      	ldr	r1, [r7, #32]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 f93e 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00d      	beq.n	8003052 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	2b04      	cmp	r3, #4
 800303c:	d107      	bne.n	800304e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e050      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003052:	893b      	ldrh	r3, [r7, #8]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800305c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305e:	6a39      	ldr	r1, [r7, #32]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 f923 	bl	80032ac <I2C_WaitOnTXEFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	2b04      	cmp	r3, #4
 8003072:	d107      	bne.n	8003084 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003082:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e035      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003096:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	6a3b      	ldr	r3, [r7, #32]
 800309e:	2200      	movs	r2, #0
 80030a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f82b 	bl	8003100 <I2C_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00d      	beq.n	80030cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030be:	d103      	bne.n	80030c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e013      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030cc:	897b      	ldrh	r3, [r7, #10]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	6a3a      	ldr	r2, [r7, #32]
 80030e0:	4906      	ldr	r1, [pc, #24]	; (80030fc <I2C_RequestMemoryRead+0x1cc>)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 f863 	bl	80031ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	00010002 	.word	0x00010002

08003100 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	603b      	str	r3, [r7, #0]
 800310c:	4613      	mov	r3, r2
 800310e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003110:	e025      	b.n	800315e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003118:	d021      	beq.n	800315e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7fe ff27 	bl	8001f6c <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <I2C_WaitOnFlagUntilTimeout+0x30>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d116      	bne.n	800315e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e023      	b.n	80031a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	0c1b      	lsrs	r3, r3, #16
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d10d      	bne.n	8003184 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	43da      	mvns	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4013      	ands	r3, r2
 8003174:	b29b      	uxth	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	e00c      	b.n	800319e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	43da      	mvns	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4013      	ands	r3, r2
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d0b6      	beq.n	8003112 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
 80031ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031bc:	e051      	b.n	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695b      	ldr	r3, [r3, #20]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031cc:	d123      	bne.n	8003216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	f043 0204 	orr.w	r2, r3, #4
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e046      	b.n	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d021      	beq.n	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800321e:	f7fe fea5 	bl	8001f6c <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	429a      	cmp	r2, r3
 800322c:	d302      	bcc.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d116      	bne.n	8003262 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f043 0220 	orr.w	r2, r3, #32
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e020      	b.n	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b01      	cmp	r3, #1
 800326a:	d10c      	bne.n	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	43da      	mvns	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4013      	ands	r3, r2
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	bf14      	ite	ne
 800327e:	2301      	movne	r3, #1
 8003280:	2300      	moveq	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	e00b      	b.n	800329e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	43da      	mvns	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4013      	ands	r3, r2
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf14      	ite	ne
 8003298:	2301      	movne	r3, #1
 800329a:	2300      	moveq	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d18d      	bne.n	80031be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032b8:	e02d      	b.n	8003316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f8ce 	bl	800345c <I2C_IsAcknowledgeFailed>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e02d      	b.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d021      	beq.n	8003316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d2:	f7fe fe4b 	bl	8001f6c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d302      	bcc.n	80032e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d116      	bne.n	8003316 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2220      	movs	r2, #32
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f043 0220 	orr.w	r2, r3, #32
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e007      	b.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003320:	2b80      	cmp	r3, #128	; 0x80
 8003322:	d1ca      	bne.n	80032ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b084      	sub	sp, #16
 8003332:	af00      	add	r7, sp, #0
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	60b9      	str	r1, [r7, #8]
 8003338:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800333a:	e02d      	b.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 f88d 	bl	800345c <I2C_IsAcknowledgeFailed>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e02d      	b.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d021      	beq.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003354:	f7fe fe0a 	bl	8001f6c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	429a      	cmp	r2, r3
 8003362:	d302      	bcc.n	800336a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d116      	bne.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e007      	b.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d1ca      	bne.n	800333c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033bc:	e042      	b.n	8003444 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d119      	bne.n	8003400 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f06f 0210 	mvn.w	r2, #16
 80033d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e029      	b.n	8003454 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003400:	f7fe fdb4 	bl	8001f6c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	429a      	cmp	r2, r3
 800340e:	d302      	bcc.n	8003416 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d116      	bne.n	8003444 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	f043 0220 	orr.w	r2, r3, #32
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e007      	b.n	8003454 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	d1b5      	bne.n	80033be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003472:	d11b      	bne.n	80034ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800347c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	f043 0204 	orr.w	r2, r3, #4
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e000      	b.n	80034ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e26c      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 8087 	beq.w	80035e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034d8:	4b92      	ldr	r3, [pc, #584]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d00c      	beq.n	80034fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034e4:	4b8f      	ldr	r3, [pc, #572]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 030c 	and.w	r3, r3, #12
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d112      	bne.n	8003516 <HAL_RCC_OscConfig+0x5e>
 80034f0:	4b8c      	ldr	r3, [pc, #560]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fc:	d10b      	bne.n	8003516 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fe:	4b89      	ldr	r3, [pc, #548]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d06c      	beq.n	80035e4 <HAL_RCC_OscConfig+0x12c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d168      	bne.n	80035e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e246      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x76>
 8003520:	4b80      	ldr	r3, [pc, #512]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a7f      	ldr	r2, [pc, #508]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	e02e      	b.n	800358c <HAL_RCC_OscConfig+0xd4>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x98>
 8003536:	4b7b      	ldr	r3, [pc, #492]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a7a      	ldr	r2, [pc, #488]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800353c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b78      	ldr	r3, [pc, #480]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a77      	ldr	r2, [pc, #476]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e01d      	b.n	800358c <HAL_RCC_OscConfig+0xd4>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003558:	d10c      	bne.n	8003574 <HAL_RCC_OscConfig+0xbc>
 800355a:	4b72      	ldr	r3, [pc, #456]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a71      	ldr	r2, [pc, #452]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	4b6f      	ldr	r3, [pc, #444]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a6e      	ldr	r2, [pc, #440]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800356c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	e00b      	b.n	800358c <HAL_RCC_OscConfig+0xd4>
 8003574:	4b6b      	ldr	r3, [pc, #428]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a6a      	ldr	r2, [pc, #424]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800357a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357e:	6013      	str	r3, [r2, #0]
 8003580:	4b68      	ldr	r3, [pc, #416]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a67      	ldr	r2, [pc, #412]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d013      	beq.n	80035bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fe fcea 	bl	8001f6c <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800359c:	f7fe fce6 	bl	8001f6c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b64      	cmp	r3, #100	; 0x64
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e1fa      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	4b5d      	ldr	r3, [pc, #372]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d0f0      	beq.n	800359c <HAL_RCC_OscConfig+0xe4>
 80035ba:	e014      	b.n	80035e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035bc:	f7fe fcd6 	bl	8001f6c <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c4:	f7fe fcd2 	bl	8001f6c <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e1e6      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	4b53      	ldr	r3, [pc, #332]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x10c>
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d063      	beq.n	80036ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035f2:	4b4c      	ldr	r3, [pc, #304]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035fe:	4b49      	ldr	r3, [pc, #292]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b08      	cmp	r3, #8
 8003608:	d11c      	bne.n	8003644 <HAL_RCC_OscConfig+0x18c>
 800360a:	4b46      	ldr	r3, [pc, #280]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d116      	bne.n	8003644 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003616:	4b43      	ldr	r3, [pc, #268]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_RCC_OscConfig+0x176>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e1ba      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800362e:	4b3d      	ldr	r3, [pc, #244]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4939      	ldr	r1, [pc, #228]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003642:	e03a      	b.n	80036ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d020      	beq.n	800368e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800364c:	4b36      	ldr	r3, [pc, #216]	; (8003728 <HAL_RCC_OscConfig+0x270>)
 800364e:	2201      	movs	r2, #1
 8003650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003652:	f7fe fc8b 	bl	8001f6c <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365a:	f7fe fc87 	bl	8001f6c <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e19b      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366c:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d0f0      	beq.n	800365a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	4b2a      	ldr	r3, [pc, #168]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4927      	ldr	r1, [pc, #156]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
 800368c:	e015      	b.n	80036ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368e:	4b26      	ldr	r3, [pc, #152]	; (8003728 <HAL_RCC_OscConfig+0x270>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fe fc6a 	bl	8001f6c <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369c:	f7fe fc66 	bl	8001f6c <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e17a      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d03a      	beq.n	800373c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d019      	beq.n	8003702 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ce:	4b17      	ldr	r3, [pc, #92]	; (800372c <HAL_RCC_OscConfig+0x274>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d4:	f7fe fc4a 	bl	8001f6c <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	e008      	b.n	80036ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036dc:	f7fe fc46 	bl	8001f6c <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d901      	bls.n	80036ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e15a      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <HAL_RCC_OscConfig+0x26c>)
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0f0      	beq.n	80036dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036fa:	2001      	movs	r0, #1
 80036fc:	f000 fad8 	bl	8003cb0 <RCC_Delay>
 8003700:	e01c      	b.n	800373c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <HAL_RCC_OscConfig+0x274>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003708:	f7fe fc30 	bl	8001f6c <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370e:	e00f      	b.n	8003730 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003710:	f7fe fc2c 	bl	8001f6c <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d908      	bls.n	8003730 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e140      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000
 8003728:	42420000 	.word	0x42420000
 800372c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003730:	4b9e      	ldr	r3, [pc, #632]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e9      	bne.n	8003710 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80a6 	beq.w	8003896 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800374e:	4b97      	ldr	r3, [pc, #604]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10d      	bne.n	8003776 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800375a:	4b94      	ldr	r3, [pc, #592]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	4a93      	ldr	r2, [pc, #588]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 8003760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003764:	61d3      	str	r3, [r2, #28]
 8003766:	4b91      	ldr	r3, [pc, #580]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	60bb      	str	r3, [r7, #8]
 8003770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003772:	2301      	movs	r3, #1
 8003774:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003776:	4b8e      	ldr	r3, [pc, #568]	; (80039b0 <HAL_RCC_OscConfig+0x4f8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d118      	bne.n	80037b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003782:	4b8b      	ldr	r3, [pc, #556]	; (80039b0 <HAL_RCC_OscConfig+0x4f8>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a8a      	ldr	r2, [pc, #552]	; (80039b0 <HAL_RCC_OscConfig+0x4f8>)
 8003788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800378e:	f7fe fbed 	bl	8001f6c <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003796:	f7fe fbe9 	bl	8001f6c <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b64      	cmp	r3, #100	; 0x64
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e0fd      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	4b81      	ldr	r3, [pc, #516]	; (80039b0 <HAL_RCC_OscConfig+0x4f8>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d106      	bne.n	80037ca <HAL_RCC_OscConfig+0x312>
 80037bc:	4b7b      	ldr	r3, [pc, #492]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	4a7a      	ldr	r2, [pc, #488]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6213      	str	r3, [r2, #32]
 80037c8:	e02d      	b.n	8003826 <HAL_RCC_OscConfig+0x36e>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10c      	bne.n	80037ec <HAL_RCC_OscConfig+0x334>
 80037d2:	4b76      	ldr	r3, [pc, #472]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	4a75      	ldr	r2, [pc, #468]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	6213      	str	r3, [r2, #32]
 80037de:	4b73      	ldr	r3, [pc, #460]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	4a72      	ldr	r2, [pc, #456]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 80037e4:	f023 0304 	bic.w	r3, r3, #4
 80037e8:	6213      	str	r3, [r2, #32]
 80037ea:	e01c      	b.n	8003826 <HAL_RCC_OscConfig+0x36e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b05      	cmp	r3, #5
 80037f2:	d10c      	bne.n	800380e <HAL_RCC_OscConfig+0x356>
 80037f4:	4b6d      	ldr	r3, [pc, #436]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4a6c      	ldr	r2, [pc, #432]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 80037fa:	f043 0304 	orr.w	r3, r3, #4
 80037fe:	6213      	str	r3, [r2, #32]
 8003800:	4b6a      	ldr	r3, [pc, #424]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4a69      	ldr	r2, [pc, #420]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 8003806:	f043 0301 	orr.w	r3, r3, #1
 800380a:	6213      	str	r3, [r2, #32]
 800380c:	e00b      	b.n	8003826 <HAL_RCC_OscConfig+0x36e>
 800380e:	4b67      	ldr	r3, [pc, #412]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4a66      	ldr	r2, [pc, #408]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	6213      	str	r3, [r2, #32]
 800381a:	4b64      	ldr	r3, [pc, #400]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 800381c:	6a1b      	ldr	r3, [r3, #32]
 800381e:	4a63      	ldr	r2, [pc, #396]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 8003820:	f023 0304 	bic.w	r3, r3, #4
 8003824:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d015      	beq.n	800385a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800382e:	f7fe fb9d 	bl	8001f6c <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003834:	e00a      	b.n	800384c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003836:	f7fe fb99 	bl	8001f6c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	f241 3288 	movw	r2, #5000	; 0x1388
 8003844:	4293      	cmp	r3, r2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e0ab      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384c:	4b57      	ldr	r3, [pc, #348]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ee      	beq.n	8003836 <HAL_RCC_OscConfig+0x37e>
 8003858:	e014      	b.n	8003884 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385a:	f7fe fb87 	bl	8001f6c <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fe fb83 	bl	8001f6c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e095      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003878:	4b4c      	ldr	r3, [pc, #304]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1ee      	bne.n	8003862 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d105      	bne.n	8003896 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388a:	4b48      	ldr	r3, [pc, #288]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	4a47      	ldr	r2, [pc, #284]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 8003890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003894:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8081 	beq.w	80039a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038a0:	4b42      	ldr	r3, [pc, #264]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d061      	beq.n	8003970 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d146      	bne.n	8003942 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038b4:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <HAL_RCC_OscConfig+0x4fc>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7fe fb57 	bl	8001f6c <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c2:	f7fe fb53 	bl	8001f6c <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e067      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d4:	4b35      	ldr	r3, [pc, #212]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1f0      	bne.n	80038c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e8:	d108      	bne.n	80038fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038ea:	4b30      	ldr	r3, [pc, #192]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	492d      	ldr	r1, [pc, #180]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038fc:	4b2b      	ldr	r3, [pc, #172]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a19      	ldr	r1, [r3, #32]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	430b      	orrs	r3, r1
 800390e:	4927      	ldr	r1, [pc, #156]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003914:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <HAL_RCC_OscConfig+0x4fc>)
 8003916:	2201      	movs	r2, #1
 8003918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800391a:	f7fe fb27 	bl	8001f6c <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003922:	f7fe fb23 	bl	8001f6c <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e037      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003934:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x46a>
 8003940:	e02f      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003942:	4b1c      	ldr	r3, [pc, #112]	; (80039b4 <HAL_RCC_OscConfig+0x4fc>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe fb10 	bl	8001f6c <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003950:	f7fe fb0c 	bl	8001f6c <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e020      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003962:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x498>
 800396e:	e018      	b.n	80039a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d101      	bne.n	800397c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e013      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <HAL_RCC_OscConfig+0x4f4>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	429a      	cmp	r2, r3
 800398e:	d106      	bne.n	800399e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d001      	beq.n	80039a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40007000 	.word	0x40007000
 80039b4:	42420060 	.word	0x42420060

080039b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0d0      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039cc:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d910      	bls.n	80039fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039da:	4b67      	ldr	r3, [pc, #412]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 0207 	bic.w	r2, r3, #7
 80039e2:	4965      	ldr	r1, [pc, #404]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ea:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0307 	and.w	r3, r3, #7
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d001      	beq.n	80039fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0b8      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d020      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a14:	4b59      	ldr	r3, [pc, #356]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	4a58      	ldr	r2, [pc, #352]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0308 	and.w	r3, r3, #8
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a2c:	4b53      	ldr	r3, [pc, #332]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a52      	ldr	r2, [pc, #328]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a38:	4b50      	ldr	r3, [pc, #320]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	494d      	ldr	r1, [pc, #308]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d040      	beq.n	8003ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d107      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5e:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d115      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e07f      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a76:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d109      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e073      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a86:	4b3d      	ldr	r3, [pc, #244]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e06b      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a96:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f023 0203 	bic.w	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	4936      	ldr	r1, [pc, #216]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa8:	f7fe fa60 	bl	8001f6c <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab0:	f7fe fa5c 	bl	8001f6c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e053      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac6:	4b2d      	ldr	r3, [pc, #180]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 020c 	and.w	r2, r3, #12
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d1eb      	bne.n	8003ab0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b27      	ldr	r3, [pc, #156]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d210      	bcs.n	8003b08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 0207 	bic.w	r2, r3, #7
 8003aee:	4922      	ldr	r1, [pc, #136]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af6:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <HAL_RCC_ClockConfig+0x1c0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e032      	b.n	8003b6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d008      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b14:	4b19      	ldr	r3, [pc, #100]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4916      	ldr	r1, [pc, #88]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0308 	and.w	r3, r3, #8
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d009      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b32:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	490e      	ldr	r1, [pc, #56]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b46:	f000 f821 	bl	8003b8c <HAL_RCC_GetSysClockFreq>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_ClockConfig+0x1c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	091b      	lsrs	r3, r3, #4
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	490a      	ldr	r1, [pc, #40]	; (8003b80 <HAL_RCC_ClockConfig+0x1c8>)
 8003b58:	5ccb      	ldrb	r3, [r1, r3]
 8003b5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5e:	4a09      	ldr	r2, [pc, #36]	; (8003b84 <HAL_RCC_ClockConfig+0x1cc>)
 8003b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <HAL_RCC_ClockConfig+0x1d0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe f9be 	bl	8001ee8 <HAL_InitTick>

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40022000 	.word	0x40022000
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	08007110 	.word	0x08007110
 8003b84:	20000000 	.word	0x20000000
 8003b88:	20000098 	.word	0x20000098

08003b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b8c:	b490      	push	{r4, r7}
 8003b8e:	b08a      	sub	sp, #40	; 0x28
 8003b90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b92:	4b2a      	ldr	r3, [pc, #168]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b94:	1d3c      	adds	r4, r7, #4
 8003b96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b9c:	f240 2301 	movw	r3, #513	; 0x201
 8003ba0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	2300      	movs	r3, #0
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bb6:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d002      	beq.n	8003bcc <HAL_RCC_GetSysClockFreq+0x40>
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d003      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x46>
 8003bca:	e02d      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bce:	623b      	str	r3, [r7, #32]
      break;
 8003bd0:	e02d      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	0c9b      	lsrs	r3, r3, #18
 8003bd6:	f003 030f 	and.w	r3, r3, #15
 8003bda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bde:	4413      	add	r3, r2
 8003be0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003be4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d013      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bf0:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	0c5b      	lsrs	r3, r3, #17
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bfe:	4413      	add	r3, r2
 8003c00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	4a0e      	ldr	r2, [pc, #56]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c0a:	fb02 f203 	mul.w	r2, r2, r3
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
 8003c16:	e004      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4a0b      	ldr	r2, [pc, #44]	; (8003c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	623b      	str	r3, [r7, #32]
      break;
 8003c26:	e002      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c2a:	623b      	str	r3, [r7, #32]
      break;
 8003c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3728      	adds	r7, #40	; 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc90      	pop	{r4, r7}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	08007100 	.word	0x08007100
 8003c40:	40021000 	.word	0x40021000
 8003c44:	007a1200 	.word	0x007a1200
 8003c48:	003d0900 	.word	0x003d0900

08003c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c50:	4b02      	ldr	r3, [pc, #8]	; (8003c5c <HAL_RCC_GetHCLKFreq+0x10>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bc80      	pop	{r7}
 8003c5a:	4770      	bx	lr
 8003c5c:	20000000 	.word	0x20000000

08003c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c64:	f7ff fff2 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	0a1b      	lsrs	r3, r3, #8
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4903      	ldr	r1, [pc, #12]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	08007120 	.word	0x08007120

08003c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c8c:	f7ff ffde 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c90:	4602      	mov	r2, r0
 8003c92:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	0adb      	lsrs	r3, r3, #11
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	4903      	ldr	r1, [pc, #12]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	08007120 	.word	0x08007120

08003cb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <RCC_Delay+0x34>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a0a      	ldr	r2, [pc, #40]	; (8003ce8 <RCC_Delay+0x38>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	0a5b      	lsrs	r3, r3, #9
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ccc:	bf00      	nop
  }
  while (Delay --);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1e5a      	subs	r2, r3, #1
 8003cd2:	60fa      	str	r2, [r7, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f9      	bne.n	8003ccc <RCC_Delay+0x1c>
}
 8003cd8:	bf00      	nop
 8003cda:	bf00      	nop
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	20000000 	.word	0x20000000
 8003ce8:	10624dd3 	.word	0x10624dd3

08003cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e03f      	b.n	8003d7e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d106      	bne.n	8003d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fd fcda 	bl	80016cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2224      	movs	r2, #36	; 0x24
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 f905 	bl	8003f40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b08a      	sub	sp, #40	; 0x28
 8003d8a:	af02      	add	r7, sp, #8
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	2b20      	cmp	r3, #32
 8003da4:	d17c      	bne.n	8003ea0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_UART_Transmit+0x2c>
 8003dac:	88fb      	ldrh	r3, [r7, #6]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e075      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_UART_Transmit+0x3e>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e06e      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2221      	movs	r2, #33	; 0x21
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dda:	f7fe f8c7 	bl	8001f6c <HAL_GetTick>
 8003dde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	88fa      	ldrh	r2, [r7, #6]
 8003dea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003df4:	d108      	bne.n	8003e08 <HAL_UART_Transmit+0x82>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	e003      	b.n	8003e10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e18:	e02a      	b.n	8003e70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	2180      	movs	r1, #128	; 0x80
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f840 	bl	8003eaa <UART_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e036      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10b      	bne.n	8003e52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	e007      	b.n	8003e62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1cf      	bne.n	8003e1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	2140      	movs	r1, #64	; 0x40
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f810 	bl	8003eaa <UART_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e006      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	e000      	b.n	8003ea2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ea0:	2302      	movs	r3, #2
  }
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b084      	sub	sp, #16
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	603b      	str	r3, [r7, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eba:	e02c      	b.n	8003f16 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec2:	d028      	beq.n	8003f16 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <UART_WaitOnFlagUntilTimeout+0x30>
 8003eca:	f7fe f84f 	bl	8001f6c <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d21d      	bcs.n	8003f16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68da      	ldr	r2, [r3, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ee8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695a      	ldr	r2, [r3, #20]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0201 	bic.w	r2, r2, #1
 8003ef8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e00f      	b.n	8003f36 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	bf0c      	ite	eq
 8003f26:	2301      	moveq	r3, #1
 8003f28:	2300      	movne	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d0c3      	beq.n	8003ebc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f7a:	f023 030c 	bic.w	r3, r3, #12
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a2c      	ldr	r2, [pc, #176]	; (8004054 <UART_SetConfig+0x114>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d103      	bne.n	8003fb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003fa8:	f7ff fe6e 	bl	8003c88 <HAL_RCC_GetPCLK2Freq>
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	e002      	b.n	8003fb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f7ff fe56 	bl	8003c60 <HAL_RCC_GetPCLK1Freq>
 8003fb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4613      	mov	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009a      	lsls	r2, r3, #2
 8003fc0:	441a      	add	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fcc:	4a22      	ldr	r2, [pc, #136]	; (8004058 <UART_SetConfig+0x118>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	0119      	lsls	r1, r3, #4
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009a      	lsls	r2, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fec:	4b1a      	ldr	r3, [pc, #104]	; (8004058 <UART_SetConfig+0x118>)
 8003fee:	fba3 0302 	umull	r0, r3, r3, r2
 8003ff2:	095b      	lsrs	r3, r3, #5
 8003ff4:	2064      	movs	r0, #100	; 0x64
 8003ff6:	fb00 f303 	mul.w	r3, r0, r3
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	011b      	lsls	r3, r3, #4
 8003ffe:	3332      	adds	r3, #50	; 0x32
 8004000:	4a15      	ldr	r2, [pc, #84]	; (8004058 <UART_SetConfig+0x118>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800400c:	4419      	add	r1, r3
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009a      	lsls	r2, r3, #2
 8004018:	441a      	add	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	fbb2 f2f3 	udiv	r2, r2, r3
 8004024:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <UART_SetConfig+0x118>)
 8004026:	fba3 0302 	umull	r0, r3, r3, r2
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	2064      	movs	r0, #100	; 0x64
 800402e:	fb00 f303 	mul.w	r3, r0, r3
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	3332      	adds	r3, #50	; 0x32
 8004038:	4a07      	ldr	r2, [pc, #28]	; (8004058 <UART_SetConfig+0x118>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	095b      	lsrs	r3, r3, #5
 8004040:	f003 020f 	and.w	r2, r3, #15
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	440a      	add	r2, r1
 800404a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800404c:	bf00      	nop
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40013800 	.word	0x40013800
 8004058:	51eb851f 	.word	0x51eb851f

0800405c <__errno>:
 800405c:	4b01      	ldr	r3, [pc, #4]	; (8004064 <__errno+0x8>)
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	200000a0 	.word	0x200000a0

08004068 <__libc_init_array>:
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	2600      	movs	r6, #0
 800406c:	4d0c      	ldr	r5, [pc, #48]	; (80040a0 <__libc_init_array+0x38>)
 800406e:	4c0d      	ldr	r4, [pc, #52]	; (80040a4 <__libc_init_array+0x3c>)
 8004070:	1b64      	subs	r4, r4, r5
 8004072:	10a4      	asrs	r4, r4, #2
 8004074:	42a6      	cmp	r6, r4
 8004076:	d109      	bne.n	800408c <__libc_init_array+0x24>
 8004078:	f003 f834 	bl	80070e4 <_init>
 800407c:	2600      	movs	r6, #0
 800407e:	4d0a      	ldr	r5, [pc, #40]	; (80040a8 <__libc_init_array+0x40>)
 8004080:	4c0a      	ldr	r4, [pc, #40]	; (80040ac <__libc_init_array+0x44>)
 8004082:	1b64      	subs	r4, r4, r5
 8004084:	10a4      	asrs	r4, r4, #2
 8004086:	42a6      	cmp	r6, r4
 8004088:	d105      	bne.n	8004096 <__libc_init_array+0x2e>
 800408a:	bd70      	pop	{r4, r5, r6, pc}
 800408c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004090:	4798      	blx	r3
 8004092:	3601      	adds	r6, #1
 8004094:	e7ee      	b.n	8004074 <__libc_init_array+0xc>
 8004096:	f855 3b04 	ldr.w	r3, [r5], #4
 800409a:	4798      	blx	r3
 800409c:	3601      	adds	r6, #1
 800409e:	e7f2      	b.n	8004086 <__libc_init_array+0x1e>
 80040a0:	08007580 	.word	0x08007580
 80040a4:	08007580 	.word	0x08007580
 80040a8:	08007580 	.word	0x08007580
 80040ac:	08007584 	.word	0x08007584

080040b0 <memset>:
 80040b0:	4603      	mov	r3, r0
 80040b2:	4402      	add	r2, r0
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d100      	bne.n	80040ba <memset+0xa>
 80040b8:	4770      	bx	lr
 80040ba:	f803 1b01 	strb.w	r1, [r3], #1
 80040be:	e7f9      	b.n	80040b4 <memset+0x4>

080040c0 <__cvt>:
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040c6:	461f      	mov	r7, r3
 80040c8:	bfbb      	ittet	lt
 80040ca:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80040ce:	461f      	movlt	r7, r3
 80040d0:	2300      	movge	r3, #0
 80040d2:	232d      	movlt	r3, #45	; 0x2d
 80040d4:	b088      	sub	sp, #32
 80040d6:	4614      	mov	r4, r2
 80040d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80040da:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80040dc:	7013      	strb	r3, [r2, #0]
 80040de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80040e0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80040e4:	f023 0820 	bic.w	r8, r3, #32
 80040e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040ec:	d005      	beq.n	80040fa <__cvt+0x3a>
 80040ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040f2:	d100      	bne.n	80040f6 <__cvt+0x36>
 80040f4:	3501      	adds	r5, #1
 80040f6:	2302      	movs	r3, #2
 80040f8:	e000      	b.n	80040fc <__cvt+0x3c>
 80040fa:	2303      	movs	r3, #3
 80040fc:	aa07      	add	r2, sp, #28
 80040fe:	9204      	str	r2, [sp, #16]
 8004100:	aa06      	add	r2, sp, #24
 8004102:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004106:	e9cd 3500 	strd	r3, r5, [sp]
 800410a:	4622      	mov	r2, r4
 800410c:	463b      	mov	r3, r7
 800410e:	f000 fcc7 	bl	8004aa0 <_dtoa_r>
 8004112:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004116:	4606      	mov	r6, r0
 8004118:	d102      	bne.n	8004120 <__cvt+0x60>
 800411a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800411c:	07db      	lsls	r3, r3, #31
 800411e:	d522      	bpl.n	8004166 <__cvt+0xa6>
 8004120:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004124:	eb06 0905 	add.w	r9, r6, r5
 8004128:	d110      	bne.n	800414c <__cvt+0x8c>
 800412a:	7833      	ldrb	r3, [r6, #0]
 800412c:	2b30      	cmp	r3, #48	; 0x30
 800412e:	d10a      	bne.n	8004146 <__cvt+0x86>
 8004130:	2200      	movs	r2, #0
 8004132:	2300      	movs	r3, #0
 8004134:	4620      	mov	r0, r4
 8004136:	4639      	mov	r1, r7
 8004138:	f7fc fca2 	bl	8000a80 <__aeabi_dcmpeq>
 800413c:	b918      	cbnz	r0, 8004146 <__cvt+0x86>
 800413e:	f1c5 0501 	rsb	r5, r5, #1
 8004142:	f8ca 5000 	str.w	r5, [sl]
 8004146:	f8da 3000 	ldr.w	r3, [sl]
 800414a:	4499      	add	r9, r3
 800414c:	2200      	movs	r2, #0
 800414e:	2300      	movs	r3, #0
 8004150:	4620      	mov	r0, r4
 8004152:	4639      	mov	r1, r7
 8004154:	f7fc fc94 	bl	8000a80 <__aeabi_dcmpeq>
 8004158:	b108      	cbz	r0, 800415e <__cvt+0x9e>
 800415a:	f8cd 901c 	str.w	r9, [sp, #28]
 800415e:	2230      	movs	r2, #48	; 0x30
 8004160:	9b07      	ldr	r3, [sp, #28]
 8004162:	454b      	cmp	r3, r9
 8004164:	d307      	bcc.n	8004176 <__cvt+0xb6>
 8004166:	4630      	mov	r0, r6
 8004168:	9b07      	ldr	r3, [sp, #28]
 800416a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800416c:	1b9b      	subs	r3, r3, r6
 800416e:	6013      	str	r3, [r2, #0]
 8004170:	b008      	add	sp, #32
 8004172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004176:	1c59      	adds	r1, r3, #1
 8004178:	9107      	str	r1, [sp, #28]
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	e7f0      	b.n	8004160 <__cvt+0xa0>

0800417e <__exponent>:
 800417e:	4603      	mov	r3, r0
 8004180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004182:	2900      	cmp	r1, #0
 8004184:	f803 2b02 	strb.w	r2, [r3], #2
 8004188:	bfb6      	itet	lt
 800418a:	222d      	movlt	r2, #45	; 0x2d
 800418c:	222b      	movge	r2, #43	; 0x2b
 800418e:	4249      	neglt	r1, r1
 8004190:	2909      	cmp	r1, #9
 8004192:	7042      	strb	r2, [r0, #1]
 8004194:	dd2b      	ble.n	80041ee <__exponent+0x70>
 8004196:	f10d 0407 	add.w	r4, sp, #7
 800419a:	46a4      	mov	ip, r4
 800419c:	270a      	movs	r7, #10
 800419e:	fb91 f6f7 	sdiv	r6, r1, r7
 80041a2:	460a      	mov	r2, r1
 80041a4:	46a6      	mov	lr, r4
 80041a6:	fb07 1516 	mls	r5, r7, r6, r1
 80041aa:	2a63      	cmp	r2, #99	; 0x63
 80041ac:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80041b0:	4631      	mov	r1, r6
 80041b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80041b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80041ba:	dcf0      	bgt.n	800419e <__exponent+0x20>
 80041bc:	3130      	adds	r1, #48	; 0x30
 80041be:	f1ae 0502 	sub.w	r5, lr, #2
 80041c2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80041c6:	4629      	mov	r1, r5
 80041c8:	1c44      	adds	r4, r0, #1
 80041ca:	4561      	cmp	r1, ip
 80041cc:	d30a      	bcc.n	80041e4 <__exponent+0x66>
 80041ce:	f10d 0209 	add.w	r2, sp, #9
 80041d2:	eba2 020e 	sub.w	r2, r2, lr
 80041d6:	4565      	cmp	r5, ip
 80041d8:	bf88      	it	hi
 80041da:	2200      	movhi	r2, #0
 80041dc:	4413      	add	r3, r2
 80041de:	1a18      	subs	r0, r3, r0
 80041e0:	b003      	add	sp, #12
 80041e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041e8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041ec:	e7ed      	b.n	80041ca <__exponent+0x4c>
 80041ee:	2330      	movs	r3, #48	; 0x30
 80041f0:	3130      	adds	r1, #48	; 0x30
 80041f2:	7083      	strb	r3, [r0, #2]
 80041f4:	70c1      	strb	r1, [r0, #3]
 80041f6:	1d03      	adds	r3, r0, #4
 80041f8:	e7f1      	b.n	80041de <__exponent+0x60>
	...

080041fc <_printf_float>:
 80041fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004200:	b091      	sub	sp, #68	; 0x44
 8004202:	460c      	mov	r4, r1
 8004204:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004208:	4616      	mov	r6, r2
 800420a:	461f      	mov	r7, r3
 800420c:	4605      	mov	r5, r0
 800420e:	f001 fa35 	bl	800567c <_localeconv_r>
 8004212:	6803      	ldr	r3, [r0, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	9309      	str	r3, [sp, #36]	; 0x24
 8004218:	f7fc f806 	bl	8000228 <strlen>
 800421c:	2300      	movs	r3, #0
 800421e:	930e      	str	r3, [sp, #56]	; 0x38
 8004220:	f8d8 3000 	ldr.w	r3, [r8]
 8004224:	900a      	str	r0, [sp, #40]	; 0x28
 8004226:	3307      	adds	r3, #7
 8004228:	f023 0307 	bic.w	r3, r3, #7
 800422c:	f103 0208 	add.w	r2, r3, #8
 8004230:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004234:	f8d4 b000 	ldr.w	fp, [r4]
 8004238:	f8c8 2000 	str.w	r2, [r8]
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004244:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004248:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800424c:	930b      	str	r3, [sp, #44]	; 0x2c
 800424e:	f04f 32ff 	mov.w	r2, #4294967295
 8004252:	4640      	mov	r0, r8
 8004254:	4b9c      	ldr	r3, [pc, #624]	; (80044c8 <_printf_float+0x2cc>)
 8004256:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004258:	f7fc fc44 	bl	8000ae4 <__aeabi_dcmpun>
 800425c:	bb70      	cbnz	r0, 80042bc <_printf_float+0xc0>
 800425e:	f04f 32ff 	mov.w	r2, #4294967295
 8004262:	4640      	mov	r0, r8
 8004264:	4b98      	ldr	r3, [pc, #608]	; (80044c8 <_printf_float+0x2cc>)
 8004266:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004268:	f7fc fc1e 	bl	8000aa8 <__aeabi_dcmple>
 800426c:	bb30      	cbnz	r0, 80042bc <_printf_float+0xc0>
 800426e:	2200      	movs	r2, #0
 8004270:	2300      	movs	r3, #0
 8004272:	4640      	mov	r0, r8
 8004274:	4651      	mov	r1, sl
 8004276:	f7fc fc0d 	bl	8000a94 <__aeabi_dcmplt>
 800427a:	b110      	cbz	r0, 8004282 <_printf_float+0x86>
 800427c:	232d      	movs	r3, #45	; 0x2d
 800427e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004282:	4b92      	ldr	r3, [pc, #584]	; (80044cc <_printf_float+0x2d0>)
 8004284:	4892      	ldr	r0, [pc, #584]	; (80044d0 <_printf_float+0x2d4>)
 8004286:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800428a:	bf94      	ite	ls
 800428c:	4698      	movls	r8, r3
 800428e:	4680      	movhi	r8, r0
 8004290:	2303      	movs	r3, #3
 8004292:	f04f 0a00 	mov.w	sl, #0
 8004296:	6123      	str	r3, [r4, #16]
 8004298:	f02b 0304 	bic.w	r3, fp, #4
 800429c:	6023      	str	r3, [r4, #0]
 800429e:	4633      	mov	r3, r6
 80042a0:	4621      	mov	r1, r4
 80042a2:	4628      	mov	r0, r5
 80042a4:	9700      	str	r7, [sp, #0]
 80042a6:	aa0f      	add	r2, sp, #60	; 0x3c
 80042a8:	f000 f9d4 	bl	8004654 <_printf_common>
 80042ac:	3001      	adds	r0, #1
 80042ae:	f040 8090 	bne.w	80043d2 <_printf_float+0x1d6>
 80042b2:	f04f 30ff 	mov.w	r0, #4294967295
 80042b6:	b011      	add	sp, #68	; 0x44
 80042b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042bc:	4642      	mov	r2, r8
 80042be:	4653      	mov	r3, sl
 80042c0:	4640      	mov	r0, r8
 80042c2:	4651      	mov	r1, sl
 80042c4:	f7fc fc0e 	bl	8000ae4 <__aeabi_dcmpun>
 80042c8:	b148      	cbz	r0, 80042de <_printf_float+0xe2>
 80042ca:	f1ba 0f00 	cmp.w	sl, #0
 80042ce:	bfb8      	it	lt
 80042d0:	232d      	movlt	r3, #45	; 0x2d
 80042d2:	4880      	ldr	r0, [pc, #512]	; (80044d4 <_printf_float+0x2d8>)
 80042d4:	bfb8      	it	lt
 80042d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042da:	4b7f      	ldr	r3, [pc, #508]	; (80044d8 <_printf_float+0x2dc>)
 80042dc:	e7d3      	b.n	8004286 <_printf_float+0x8a>
 80042de:	6863      	ldr	r3, [r4, #4]
 80042e0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	d142      	bne.n	800436e <_printf_float+0x172>
 80042e8:	2306      	movs	r3, #6
 80042ea:	6063      	str	r3, [r4, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	9206      	str	r2, [sp, #24]
 80042f0:	aa0e      	add	r2, sp, #56	; 0x38
 80042f2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80042f6:	aa0d      	add	r2, sp, #52	; 0x34
 80042f8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80042fc:	9203      	str	r2, [sp, #12]
 80042fe:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004302:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004306:	6023      	str	r3, [r4, #0]
 8004308:	6863      	ldr	r3, [r4, #4]
 800430a:	4642      	mov	r2, r8
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	4628      	mov	r0, r5
 8004310:	4653      	mov	r3, sl
 8004312:	910b      	str	r1, [sp, #44]	; 0x2c
 8004314:	f7ff fed4 	bl	80040c0 <__cvt>
 8004318:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800431a:	4680      	mov	r8, r0
 800431c:	2947      	cmp	r1, #71	; 0x47
 800431e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004320:	d108      	bne.n	8004334 <_printf_float+0x138>
 8004322:	1cc8      	adds	r0, r1, #3
 8004324:	db02      	blt.n	800432c <_printf_float+0x130>
 8004326:	6863      	ldr	r3, [r4, #4]
 8004328:	4299      	cmp	r1, r3
 800432a:	dd40      	ble.n	80043ae <_printf_float+0x1b2>
 800432c:	f1a9 0902 	sub.w	r9, r9, #2
 8004330:	fa5f f989 	uxtb.w	r9, r9
 8004334:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004338:	d81f      	bhi.n	800437a <_printf_float+0x17e>
 800433a:	464a      	mov	r2, r9
 800433c:	3901      	subs	r1, #1
 800433e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004342:	910d      	str	r1, [sp, #52]	; 0x34
 8004344:	f7ff ff1b 	bl	800417e <__exponent>
 8004348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800434a:	4682      	mov	sl, r0
 800434c:	1813      	adds	r3, r2, r0
 800434e:	2a01      	cmp	r2, #1
 8004350:	6123      	str	r3, [r4, #16]
 8004352:	dc02      	bgt.n	800435a <_printf_float+0x15e>
 8004354:	6822      	ldr	r2, [r4, #0]
 8004356:	07d2      	lsls	r2, r2, #31
 8004358:	d501      	bpl.n	800435e <_printf_float+0x162>
 800435a:	3301      	adds	r3, #1
 800435c:	6123      	str	r3, [r4, #16]
 800435e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004362:	2b00      	cmp	r3, #0
 8004364:	d09b      	beq.n	800429e <_printf_float+0xa2>
 8004366:	232d      	movs	r3, #45	; 0x2d
 8004368:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800436c:	e797      	b.n	800429e <_printf_float+0xa2>
 800436e:	2947      	cmp	r1, #71	; 0x47
 8004370:	d1bc      	bne.n	80042ec <_printf_float+0xf0>
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1ba      	bne.n	80042ec <_printf_float+0xf0>
 8004376:	2301      	movs	r3, #1
 8004378:	e7b7      	b.n	80042ea <_printf_float+0xee>
 800437a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800437e:	d118      	bne.n	80043b2 <_printf_float+0x1b6>
 8004380:	2900      	cmp	r1, #0
 8004382:	6863      	ldr	r3, [r4, #4]
 8004384:	dd0b      	ble.n	800439e <_printf_float+0x1a2>
 8004386:	6121      	str	r1, [r4, #16]
 8004388:	b913      	cbnz	r3, 8004390 <_printf_float+0x194>
 800438a:	6822      	ldr	r2, [r4, #0]
 800438c:	07d0      	lsls	r0, r2, #31
 800438e:	d502      	bpl.n	8004396 <_printf_float+0x19a>
 8004390:	3301      	adds	r3, #1
 8004392:	440b      	add	r3, r1
 8004394:	6123      	str	r3, [r4, #16]
 8004396:	f04f 0a00 	mov.w	sl, #0
 800439a:	65a1      	str	r1, [r4, #88]	; 0x58
 800439c:	e7df      	b.n	800435e <_printf_float+0x162>
 800439e:	b913      	cbnz	r3, 80043a6 <_printf_float+0x1aa>
 80043a0:	6822      	ldr	r2, [r4, #0]
 80043a2:	07d2      	lsls	r2, r2, #31
 80043a4:	d501      	bpl.n	80043aa <_printf_float+0x1ae>
 80043a6:	3302      	adds	r3, #2
 80043a8:	e7f4      	b.n	8004394 <_printf_float+0x198>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e7f2      	b.n	8004394 <_printf_float+0x198>
 80043ae:	f04f 0967 	mov.w	r9, #103	; 0x67
 80043b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80043b4:	4299      	cmp	r1, r3
 80043b6:	db05      	blt.n	80043c4 <_printf_float+0x1c8>
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	6121      	str	r1, [r4, #16]
 80043bc:	07d8      	lsls	r0, r3, #31
 80043be:	d5ea      	bpl.n	8004396 <_printf_float+0x19a>
 80043c0:	1c4b      	adds	r3, r1, #1
 80043c2:	e7e7      	b.n	8004394 <_printf_float+0x198>
 80043c4:	2900      	cmp	r1, #0
 80043c6:	bfcc      	ite	gt
 80043c8:	2201      	movgt	r2, #1
 80043ca:	f1c1 0202 	rsble	r2, r1, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	e7e0      	b.n	8004394 <_printf_float+0x198>
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	055a      	lsls	r2, r3, #21
 80043d6:	d407      	bmi.n	80043e8 <_printf_float+0x1ec>
 80043d8:	6923      	ldr	r3, [r4, #16]
 80043da:	4642      	mov	r2, r8
 80043dc:	4631      	mov	r1, r6
 80043de:	4628      	mov	r0, r5
 80043e0:	47b8      	blx	r7
 80043e2:	3001      	adds	r0, #1
 80043e4:	d12b      	bne.n	800443e <_printf_float+0x242>
 80043e6:	e764      	b.n	80042b2 <_printf_float+0xb6>
 80043e8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80043ec:	f240 80dd 	bls.w	80045aa <_printf_float+0x3ae>
 80043f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043f4:	2200      	movs	r2, #0
 80043f6:	2300      	movs	r3, #0
 80043f8:	f7fc fb42 	bl	8000a80 <__aeabi_dcmpeq>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d033      	beq.n	8004468 <_printf_float+0x26c>
 8004400:	2301      	movs	r3, #1
 8004402:	4631      	mov	r1, r6
 8004404:	4628      	mov	r0, r5
 8004406:	4a35      	ldr	r2, [pc, #212]	; (80044dc <_printf_float+0x2e0>)
 8004408:	47b8      	blx	r7
 800440a:	3001      	adds	r0, #1
 800440c:	f43f af51 	beq.w	80042b2 <_printf_float+0xb6>
 8004410:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004414:	429a      	cmp	r2, r3
 8004416:	db02      	blt.n	800441e <_printf_float+0x222>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	07d8      	lsls	r0, r3, #31
 800441c:	d50f      	bpl.n	800443e <_printf_float+0x242>
 800441e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004422:	4631      	mov	r1, r6
 8004424:	4628      	mov	r0, r5
 8004426:	47b8      	blx	r7
 8004428:	3001      	adds	r0, #1
 800442a:	f43f af42 	beq.w	80042b2 <_printf_float+0xb6>
 800442e:	f04f 0800 	mov.w	r8, #0
 8004432:	f104 091a 	add.w	r9, r4, #26
 8004436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004438:	3b01      	subs	r3, #1
 800443a:	4543      	cmp	r3, r8
 800443c:	dc09      	bgt.n	8004452 <_printf_float+0x256>
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	079b      	lsls	r3, r3, #30
 8004442:	f100 8102 	bmi.w	800464a <_printf_float+0x44e>
 8004446:	68e0      	ldr	r0, [r4, #12]
 8004448:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800444a:	4298      	cmp	r0, r3
 800444c:	bfb8      	it	lt
 800444e:	4618      	movlt	r0, r3
 8004450:	e731      	b.n	80042b6 <_printf_float+0xba>
 8004452:	2301      	movs	r3, #1
 8004454:	464a      	mov	r2, r9
 8004456:	4631      	mov	r1, r6
 8004458:	4628      	mov	r0, r5
 800445a:	47b8      	blx	r7
 800445c:	3001      	adds	r0, #1
 800445e:	f43f af28 	beq.w	80042b2 <_printf_float+0xb6>
 8004462:	f108 0801 	add.w	r8, r8, #1
 8004466:	e7e6      	b.n	8004436 <_printf_float+0x23a>
 8004468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800446a:	2b00      	cmp	r3, #0
 800446c:	dc38      	bgt.n	80044e0 <_printf_float+0x2e4>
 800446e:	2301      	movs	r3, #1
 8004470:	4631      	mov	r1, r6
 8004472:	4628      	mov	r0, r5
 8004474:	4a19      	ldr	r2, [pc, #100]	; (80044dc <_printf_float+0x2e0>)
 8004476:	47b8      	blx	r7
 8004478:	3001      	adds	r0, #1
 800447a:	f43f af1a 	beq.w	80042b2 <_printf_float+0xb6>
 800447e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004482:	4313      	orrs	r3, r2
 8004484:	d102      	bne.n	800448c <_printf_float+0x290>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	07d9      	lsls	r1, r3, #31
 800448a:	d5d8      	bpl.n	800443e <_printf_float+0x242>
 800448c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004490:	4631      	mov	r1, r6
 8004492:	4628      	mov	r0, r5
 8004494:	47b8      	blx	r7
 8004496:	3001      	adds	r0, #1
 8004498:	f43f af0b 	beq.w	80042b2 <_printf_float+0xb6>
 800449c:	f04f 0900 	mov.w	r9, #0
 80044a0:	f104 0a1a 	add.w	sl, r4, #26
 80044a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044a6:	425b      	negs	r3, r3
 80044a8:	454b      	cmp	r3, r9
 80044aa:	dc01      	bgt.n	80044b0 <_printf_float+0x2b4>
 80044ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044ae:	e794      	b.n	80043da <_printf_float+0x1de>
 80044b0:	2301      	movs	r3, #1
 80044b2:	4652      	mov	r2, sl
 80044b4:	4631      	mov	r1, r6
 80044b6:	4628      	mov	r0, r5
 80044b8:	47b8      	blx	r7
 80044ba:	3001      	adds	r0, #1
 80044bc:	f43f aef9 	beq.w	80042b2 <_printf_float+0xb6>
 80044c0:	f109 0901 	add.w	r9, r9, #1
 80044c4:	e7ee      	b.n	80044a4 <_printf_float+0x2a8>
 80044c6:	bf00      	nop
 80044c8:	7fefffff 	.word	0x7fefffff
 80044cc:	0800712c 	.word	0x0800712c
 80044d0:	08007130 	.word	0x08007130
 80044d4:	08007138 	.word	0x08007138
 80044d8:	08007134 	.word	0x08007134
 80044dc:	0800713c 	.word	0x0800713c
 80044e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044e4:	429a      	cmp	r2, r3
 80044e6:	bfa8      	it	ge
 80044e8:	461a      	movge	r2, r3
 80044ea:	2a00      	cmp	r2, #0
 80044ec:	4691      	mov	r9, r2
 80044ee:	dc37      	bgt.n	8004560 <_printf_float+0x364>
 80044f0:	f04f 0b00 	mov.w	fp, #0
 80044f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044f8:	f104 021a 	add.w	r2, r4, #26
 80044fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004500:	ebaa 0309 	sub.w	r3, sl, r9
 8004504:	455b      	cmp	r3, fp
 8004506:	dc33      	bgt.n	8004570 <_printf_float+0x374>
 8004508:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800450c:	429a      	cmp	r2, r3
 800450e:	db3b      	blt.n	8004588 <_printf_float+0x38c>
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	07da      	lsls	r2, r3, #31
 8004514:	d438      	bmi.n	8004588 <_printf_float+0x38c>
 8004516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004518:	990d      	ldr	r1, [sp, #52]	; 0x34
 800451a:	eba2 030a 	sub.w	r3, r2, sl
 800451e:	eba2 0901 	sub.w	r9, r2, r1
 8004522:	4599      	cmp	r9, r3
 8004524:	bfa8      	it	ge
 8004526:	4699      	movge	r9, r3
 8004528:	f1b9 0f00 	cmp.w	r9, #0
 800452c:	dc34      	bgt.n	8004598 <_printf_float+0x39c>
 800452e:	f04f 0800 	mov.w	r8, #0
 8004532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004536:	f104 0a1a 	add.w	sl, r4, #26
 800453a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	eba3 0309 	sub.w	r3, r3, r9
 8004544:	4543      	cmp	r3, r8
 8004546:	f77f af7a 	ble.w	800443e <_printf_float+0x242>
 800454a:	2301      	movs	r3, #1
 800454c:	4652      	mov	r2, sl
 800454e:	4631      	mov	r1, r6
 8004550:	4628      	mov	r0, r5
 8004552:	47b8      	blx	r7
 8004554:	3001      	adds	r0, #1
 8004556:	f43f aeac 	beq.w	80042b2 <_printf_float+0xb6>
 800455a:	f108 0801 	add.w	r8, r8, #1
 800455e:	e7ec      	b.n	800453a <_printf_float+0x33e>
 8004560:	4613      	mov	r3, r2
 8004562:	4631      	mov	r1, r6
 8004564:	4642      	mov	r2, r8
 8004566:	4628      	mov	r0, r5
 8004568:	47b8      	blx	r7
 800456a:	3001      	adds	r0, #1
 800456c:	d1c0      	bne.n	80044f0 <_printf_float+0x2f4>
 800456e:	e6a0      	b.n	80042b2 <_printf_float+0xb6>
 8004570:	2301      	movs	r3, #1
 8004572:	4631      	mov	r1, r6
 8004574:	4628      	mov	r0, r5
 8004576:	920b      	str	r2, [sp, #44]	; 0x2c
 8004578:	47b8      	blx	r7
 800457a:	3001      	adds	r0, #1
 800457c:	f43f ae99 	beq.w	80042b2 <_printf_float+0xb6>
 8004580:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004582:	f10b 0b01 	add.w	fp, fp, #1
 8004586:	e7b9      	b.n	80044fc <_printf_float+0x300>
 8004588:	4631      	mov	r1, r6
 800458a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800458e:	4628      	mov	r0, r5
 8004590:	47b8      	blx	r7
 8004592:	3001      	adds	r0, #1
 8004594:	d1bf      	bne.n	8004516 <_printf_float+0x31a>
 8004596:	e68c      	b.n	80042b2 <_printf_float+0xb6>
 8004598:	464b      	mov	r3, r9
 800459a:	4631      	mov	r1, r6
 800459c:	4628      	mov	r0, r5
 800459e:	eb08 020a 	add.w	r2, r8, sl
 80045a2:	47b8      	blx	r7
 80045a4:	3001      	adds	r0, #1
 80045a6:	d1c2      	bne.n	800452e <_printf_float+0x332>
 80045a8:	e683      	b.n	80042b2 <_printf_float+0xb6>
 80045aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80045ac:	2a01      	cmp	r2, #1
 80045ae:	dc01      	bgt.n	80045b4 <_printf_float+0x3b8>
 80045b0:	07db      	lsls	r3, r3, #31
 80045b2:	d537      	bpl.n	8004624 <_printf_float+0x428>
 80045b4:	2301      	movs	r3, #1
 80045b6:	4642      	mov	r2, r8
 80045b8:	4631      	mov	r1, r6
 80045ba:	4628      	mov	r0, r5
 80045bc:	47b8      	blx	r7
 80045be:	3001      	adds	r0, #1
 80045c0:	f43f ae77 	beq.w	80042b2 <_printf_float+0xb6>
 80045c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045c8:	4631      	mov	r1, r6
 80045ca:	4628      	mov	r0, r5
 80045cc:	47b8      	blx	r7
 80045ce:	3001      	adds	r0, #1
 80045d0:	f43f ae6f 	beq.w	80042b2 <_printf_float+0xb6>
 80045d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045d8:	2200      	movs	r2, #0
 80045da:	2300      	movs	r3, #0
 80045dc:	f7fc fa50 	bl	8000a80 <__aeabi_dcmpeq>
 80045e0:	b9d8      	cbnz	r0, 800461a <_printf_float+0x41e>
 80045e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045e4:	f108 0201 	add.w	r2, r8, #1
 80045e8:	3b01      	subs	r3, #1
 80045ea:	4631      	mov	r1, r6
 80045ec:	4628      	mov	r0, r5
 80045ee:	47b8      	blx	r7
 80045f0:	3001      	adds	r0, #1
 80045f2:	d10e      	bne.n	8004612 <_printf_float+0x416>
 80045f4:	e65d      	b.n	80042b2 <_printf_float+0xb6>
 80045f6:	2301      	movs	r3, #1
 80045f8:	464a      	mov	r2, r9
 80045fa:	4631      	mov	r1, r6
 80045fc:	4628      	mov	r0, r5
 80045fe:	47b8      	blx	r7
 8004600:	3001      	adds	r0, #1
 8004602:	f43f ae56 	beq.w	80042b2 <_printf_float+0xb6>
 8004606:	f108 0801 	add.w	r8, r8, #1
 800460a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800460c:	3b01      	subs	r3, #1
 800460e:	4543      	cmp	r3, r8
 8004610:	dcf1      	bgt.n	80045f6 <_printf_float+0x3fa>
 8004612:	4653      	mov	r3, sl
 8004614:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004618:	e6e0      	b.n	80043dc <_printf_float+0x1e0>
 800461a:	f04f 0800 	mov.w	r8, #0
 800461e:	f104 091a 	add.w	r9, r4, #26
 8004622:	e7f2      	b.n	800460a <_printf_float+0x40e>
 8004624:	2301      	movs	r3, #1
 8004626:	4642      	mov	r2, r8
 8004628:	e7df      	b.n	80045ea <_printf_float+0x3ee>
 800462a:	2301      	movs	r3, #1
 800462c:	464a      	mov	r2, r9
 800462e:	4631      	mov	r1, r6
 8004630:	4628      	mov	r0, r5
 8004632:	47b8      	blx	r7
 8004634:	3001      	adds	r0, #1
 8004636:	f43f ae3c 	beq.w	80042b2 <_printf_float+0xb6>
 800463a:	f108 0801 	add.w	r8, r8, #1
 800463e:	68e3      	ldr	r3, [r4, #12]
 8004640:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004642:	1a5b      	subs	r3, r3, r1
 8004644:	4543      	cmp	r3, r8
 8004646:	dcf0      	bgt.n	800462a <_printf_float+0x42e>
 8004648:	e6fd      	b.n	8004446 <_printf_float+0x24a>
 800464a:	f04f 0800 	mov.w	r8, #0
 800464e:	f104 0919 	add.w	r9, r4, #25
 8004652:	e7f4      	b.n	800463e <_printf_float+0x442>

08004654 <_printf_common>:
 8004654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004658:	4616      	mov	r6, r2
 800465a:	4699      	mov	r9, r3
 800465c:	688a      	ldr	r2, [r1, #8]
 800465e:	690b      	ldr	r3, [r1, #16]
 8004660:	4607      	mov	r7, r0
 8004662:	4293      	cmp	r3, r2
 8004664:	bfb8      	it	lt
 8004666:	4613      	movlt	r3, r2
 8004668:	6033      	str	r3, [r6, #0]
 800466a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800466e:	460c      	mov	r4, r1
 8004670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004674:	b10a      	cbz	r2, 800467a <_printf_common+0x26>
 8004676:	3301      	adds	r3, #1
 8004678:	6033      	str	r3, [r6, #0]
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	0699      	lsls	r1, r3, #26
 800467e:	bf42      	ittt	mi
 8004680:	6833      	ldrmi	r3, [r6, #0]
 8004682:	3302      	addmi	r3, #2
 8004684:	6033      	strmi	r3, [r6, #0]
 8004686:	6825      	ldr	r5, [r4, #0]
 8004688:	f015 0506 	ands.w	r5, r5, #6
 800468c:	d106      	bne.n	800469c <_printf_common+0x48>
 800468e:	f104 0a19 	add.w	sl, r4, #25
 8004692:	68e3      	ldr	r3, [r4, #12]
 8004694:	6832      	ldr	r2, [r6, #0]
 8004696:	1a9b      	subs	r3, r3, r2
 8004698:	42ab      	cmp	r3, r5
 800469a:	dc28      	bgt.n	80046ee <_printf_common+0x9a>
 800469c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046a0:	1e13      	subs	r3, r2, #0
 80046a2:	6822      	ldr	r2, [r4, #0]
 80046a4:	bf18      	it	ne
 80046a6:	2301      	movne	r3, #1
 80046a8:	0692      	lsls	r2, r2, #26
 80046aa:	d42d      	bmi.n	8004708 <_printf_common+0xb4>
 80046ac:	4649      	mov	r1, r9
 80046ae:	4638      	mov	r0, r7
 80046b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046b4:	47c0      	blx	r8
 80046b6:	3001      	adds	r0, #1
 80046b8:	d020      	beq.n	80046fc <_printf_common+0xa8>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	68e5      	ldr	r5, [r4, #12]
 80046be:	f003 0306 	and.w	r3, r3, #6
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	bf18      	it	ne
 80046c6:	2500      	movne	r5, #0
 80046c8:	6832      	ldr	r2, [r6, #0]
 80046ca:	f04f 0600 	mov.w	r6, #0
 80046ce:	68a3      	ldr	r3, [r4, #8]
 80046d0:	bf08      	it	eq
 80046d2:	1aad      	subeq	r5, r5, r2
 80046d4:	6922      	ldr	r2, [r4, #16]
 80046d6:	bf08      	it	eq
 80046d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046dc:	4293      	cmp	r3, r2
 80046de:	bfc4      	itt	gt
 80046e0:	1a9b      	subgt	r3, r3, r2
 80046e2:	18ed      	addgt	r5, r5, r3
 80046e4:	341a      	adds	r4, #26
 80046e6:	42b5      	cmp	r5, r6
 80046e8:	d11a      	bne.n	8004720 <_printf_common+0xcc>
 80046ea:	2000      	movs	r0, #0
 80046ec:	e008      	b.n	8004700 <_printf_common+0xac>
 80046ee:	2301      	movs	r3, #1
 80046f0:	4652      	mov	r2, sl
 80046f2:	4649      	mov	r1, r9
 80046f4:	4638      	mov	r0, r7
 80046f6:	47c0      	blx	r8
 80046f8:	3001      	adds	r0, #1
 80046fa:	d103      	bne.n	8004704 <_printf_common+0xb0>
 80046fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004704:	3501      	adds	r5, #1
 8004706:	e7c4      	b.n	8004692 <_printf_common+0x3e>
 8004708:	2030      	movs	r0, #48	; 0x30
 800470a:	18e1      	adds	r1, r4, r3
 800470c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004716:	4422      	add	r2, r4
 8004718:	3302      	adds	r3, #2
 800471a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800471e:	e7c5      	b.n	80046ac <_printf_common+0x58>
 8004720:	2301      	movs	r3, #1
 8004722:	4622      	mov	r2, r4
 8004724:	4649      	mov	r1, r9
 8004726:	4638      	mov	r0, r7
 8004728:	47c0      	blx	r8
 800472a:	3001      	adds	r0, #1
 800472c:	d0e6      	beq.n	80046fc <_printf_common+0xa8>
 800472e:	3601      	adds	r6, #1
 8004730:	e7d9      	b.n	80046e6 <_printf_common+0x92>
	...

08004734 <_printf_i>:
 8004734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004738:	460c      	mov	r4, r1
 800473a:	7e27      	ldrb	r7, [r4, #24]
 800473c:	4691      	mov	r9, r2
 800473e:	2f78      	cmp	r7, #120	; 0x78
 8004740:	4680      	mov	r8, r0
 8004742:	469a      	mov	sl, r3
 8004744:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004746:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800474a:	d807      	bhi.n	800475c <_printf_i+0x28>
 800474c:	2f62      	cmp	r7, #98	; 0x62
 800474e:	d80a      	bhi.n	8004766 <_printf_i+0x32>
 8004750:	2f00      	cmp	r7, #0
 8004752:	f000 80d9 	beq.w	8004908 <_printf_i+0x1d4>
 8004756:	2f58      	cmp	r7, #88	; 0x58
 8004758:	f000 80a4 	beq.w	80048a4 <_printf_i+0x170>
 800475c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004764:	e03a      	b.n	80047dc <_printf_i+0xa8>
 8004766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800476a:	2b15      	cmp	r3, #21
 800476c:	d8f6      	bhi.n	800475c <_printf_i+0x28>
 800476e:	a001      	add	r0, pc, #4	; (adr r0, 8004774 <_printf_i+0x40>)
 8004770:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004774:	080047cd 	.word	0x080047cd
 8004778:	080047e1 	.word	0x080047e1
 800477c:	0800475d 	.word	0x0800475d
 8004780:	0800475d 	.word	0x0800475d
 8004784:	0800475d 	.word	0x0800475d
 8004788:	0800475d 	.word	0x0800475d
 800478c:	080047e1 	.word	0x080047e1
 8004790:	0800475d 	.word	0x0800475d
 8004794:	0800475d 	.word	0x0800475d
 8004798:	0800475d 	.word	0x0800475d
 800479c:	0800475d 	.word	0x0800475d
 80047a0:	080048ef 	.word	0x080048ef
 80047a4:	08004811 	.word	0x08004811
 80047a8:	080048d1 	.word	0x080048d1
 80047ac:	0800475d 	.word	0x0800475d
 80047b0:	0800475d 	.word	0x0800475d
 80047b4:	08004911 	.word	0x08004911
 80047b8:	0800475d 	.word	0x0800475d
 80047bc:	08004811 	.word	0x08004811
 80047c0:	0800475d 	.word	0x0800475d
 80047c4:	0800475d 	.word	0x0800475d
 80047c8:	080048d9 	.word	0x080048d9
 80047cc:	680b      	ldr	r3, [r1, #0]
 80047ce:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047d2:	1d1a      	adds	r2, r3, #4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	600a      	str	r2, [r1, #0]
 80047d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047dc:	2301      	movs	r3, #1
 80047de:	e0a4      	b.n	800492a <_printf_i+0x1f6>
 80047e0:	6825      	ldr	r5, [r4, #0]
 80047e2:	6808      	ldr	r0, [r1, #0]
 80047e4:	062e      	lsls	r6, r5, #24
 80047e6:	f100 0304 	add.w	r3, r0, #4
 80047ea:	d50a      	bpl.n	8004802 <_printf_i+0xce>
 80047ec:	6805      	ldr	r5, [r0, #0]
 80047ee:	600b      	str	r3, [r1, #0]
 80047f0:	2d00      	cmp	r5, #0
 80047f2:	da03      	bge.n	80047fc <_printf_i+0xc8>
 80047f4:	232d      	movs	r3, #45	; 0x2d
 80047f6:	426d      	negs	r5, r5
 80047f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047fc:	230a      	movs	r3, #10
 80047fe:	485e      	ldr	r0, [pc, #376]	; (8004978 <_printf_i+0x244>)
 8004800:	e019      	b.n	8004836 <_printf_i+0x102>
 8004802:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004806:	6805      	ldr	r5, [r0, #0]
 8004808:	600b      	str	r3, [r1, #0]
 800480a:	bf18      	it	ne
 800480c:	b22d      	sxthne	r5, r5
 800480e:	e7ef      	b.n	80047f0 <_printf_i+0xbc>
 8004810:	680b      	ldr	r3, [r1, #0]
 8004812:	6825      	ldr	r5, [r4, #0]
 8004814:	1d18      	adds	r0, r3, #4
 8004816:	6008      	str	r0, [r1, #0]
 8004818:	0628      	lsls	r0, r5, #24
 800481a:	d501      	bpl.n	8004820 <_printf_i+0xec>
 800481c:	681d      	ldr	r5, [r3, #0]
 800481e:	e002      	b.n	8004826 <_printf_i+0xf2>
 8004820:	0669      	lsls	r1, r5, #25
 8004822:	d5fb      	bpl.n	800481c <_printf_i+0xe8>
 8004824:	881d      	ldrh	r5, [r3, #0]
 8004826:	2f6f      	cmp	r7, #111	; 0x6f
 8004828:	bf0c      	ite	eq
 800482a:	2308      	moveq	r3, #8
 800482c:	230a      	movne	r3, #10
 800482e:	4852      	ldr	r0, [pc, #328]	; (8004978 <_printf_i+0x244>)
 8004830:	2100      	movs	r1, #0
 8004832:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004836:	6866      	ldr	r6, [r4, #4]
 8004838:	2e00      	cmp	r6, #0
 800483a:	bfa8      	it	ge
 800483c:	6821      	ldrge	r1, [r4, #0]
 800483e:	60a6      	str	r6, [r4, #8]
 8004840:	bfa4      	itt	ge
 8004842:	f021 0104 	bicge.w	r1, r1, #4
 8004846:	6021      	strge	r1, [r4, #0]
 8004848:	b90d      	cbnz	r5, 800484e <_printf_i+0x11a>
 800484a:	2e00      	cmp	r6, #0
 800484c:	d04d      	beq.n	80048ea <_printf_i+0x1b6>
 800484e:	4616      	mov	r6, r2
 8004850:	fbb5 f1f3 	udiv	r1, r5, r3
 8004854:	fb03 5711 	mls	r7, r3, r1, r5
 8004858:	5dc7      	ldrb	r7, [r0, r7]
 800485a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800485e:	462f      	mov	r7, r5
 8004860:	42bb      	cmp	r3, r7
 8004862:	460d      	mov	r5, r1
 8004864:	d9f4      	bls.n	8004850 <_printf_i+0x11c>
 8004866:	2b08      	cmp	r3, #8
 8004868:	d10b      	bne.n	8004882 <_printf_i+0x14e>
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	07df      	lsls	r7, r3, #31
 800486e:	d508      	bpl.n	8004882 <_printf_i+0x14e>
 8004870:	6923      	ldr	r3, [r4, #16]
 8004872:	6861      	ldr	r1, [r4, #4]
 8004874:	4299      	cmp	r1, r3
 8004876:	bfde      	ittt	le
 8004878:	2330      	movle	r3, #48	; 0x30
 800487a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800487e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004882:	1b92      	subs	r2, r2, r6
 8004884:	6122      	str	r2, [r4, #16]
 8004886:	464b      	mov	r3, r9
 8004888:	4621      	mov	r1, r4
 800488a:	4640      	mov	r0, r8
 800488c:	f8cd a000 	str.w	sl, [sp]
 8004890:	aa03      	add	r2, sp, #12
 8004892:	f7ff fedf 	bl	8004654 <_printf_common>
 8004896:	3001      	adds	r0, #1
 8004898:	d14c      	bne.n	8004934 <_printf_i+0x200>
 800489a:	f04f 30ff 	mov.w	r0, #4294967295
 800489e:	b004      	add	sp, #16
 80048a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a4:	4834      	ldr	r0, [pc, #208]	; (8004978 <_printf_i+0x244>)
 80048a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048aa:	680e      	ldr	r6, [r1, #0]
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	f856 5b04 	ldr.w	r5, [r6], #4
 80048b2:	061f      	lsls	r7, r3, #24
 80048b4:	600e      	str	r6, [r1, #0]
 80048b6:	d514      	bpl.n	80048e2 <_printf_i+0x1ae>
 80048b8:	07d9      	lsls	r1, r3, #31
 80048ba:	bf44      	itt	mi
 80048bc:	f043 0320 	orrmi.w	r3, r3, #32
 80048c0:	6023      	strmi	r3, [r4, #0]
 80048c2:	b91d      	cbnz	r5, 80048cc <_printf_i+0x198>
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	f023 0320 	bic.w	r3, r3, #32
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	2310      	movs	r3, #16
 80048ce:	e7af      	b.n	8004830 <_printf_i+0xfc>
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	f043 0320 	orr.w	r3, r3, #32
 80048d6:	6023      	str	r3, [r4, #0]
 80048d8:	2378      	movs	r3, #120	; 0x78
 80048da:	4828      	ldr	r0, [pc, #160]	; (800497c <_printf_i+0x248>)
 80048dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048e0:	e7e3      	b.n	80048aa <_printf_i+0x176>
 80048e2:	065e      	lsls	r6, r3, #25
 80048e4:	bf48      	it	mi
 80048e6:	b2ad      	uxthmi	r5, r5
 80048e8:	e7e6      	b.n	80048b8 <_printf_i+0x184>
 80048ea:	4616      	mov	r6, r2
 80048ec:	e7bb      	b.n	8004866 <_printf_i+0x132>
 80048ee:	680b      	ldr	r3, [r1, #0]
 80048f0:	6826      	ldr	r6, [r4, #0]
 80048f2:	1d1d      	adds	r5, r3, #4
 80048f4:	6960      	ldr	r0, [r4, #20]
 80048f6:	600d      	str	r5, [r1, #0]
 80048f8:	0635      	lsls	r5, r6, #24
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	d501      	bpl.n	8004902 <_printf_i+0x1ce>
 80048fe:	6018      	str	r0, [r3, #0]
 8004900:	e002      	b.n	8004908 <_printf_i+0x1d4>
 8004902:	0671      	lsls	r1, r6, #25
 8004904:	d5fb      	bpl.n	80048fe <_printf_i+0x1ca>
 8004906:	8018      	strh	r0, [r3, #0]
 8004908:	2300      	movs	r3, #0
 800490a:	4616      	mov	r6, r2
 800490c:	6123      	str	r3, [r4, #16]
 800490e:	e7ba      	b.n	8004886 <_printf_i+0x152>
 8004910:	680b      	ldr	r3, [r1, #0]
 8004912:	1d1a      	adds	r2, r3, #4
 8004914:	600a      	str	r2, [r1, #0]
 8004916:	681e      	ldr	r6, [r3, #0]
 8004918:	2100      	movs	r1, #0
 800491a:	4630      	mov	r0, r6
 800491c:	6862      	ldr	r2, [r4, #4]
 800491e:	f000 feb9 	bl	8005694 <memchr>
 8004922:	b108      	cbz	r0, 8004928 <_printf_i+0x1f4>
 8004924:	1b80      	subs	r0, r0, r6
 8004926:	6060      	str	r0, [r4, #4]
 8004928:	6863      	ldr	r3, [r4, #4]
 800492a:	6123      	str	r3, [r4, #16]
 800492c:	2300      	movs	r3, #0
 800492e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004932:	e7a8      	b.n	8004886 <_printf_i+0x152>
 8004934:	4632      	mov	r2, r6
 8004936:	4649      	mov	r1, r9
 8004938:	4640      	mov	r0, r8
 800493a:	6923      	ldr	r3, [r4, #16]
 800493c:	47d0      	blx	sl
 800493e:	3001      	adds	r0, #1
 8004940:	d0ab      	beq.n	800489a <_printf_i+0x166>
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	079b      	lsls	r3, r3, #30
 8004946:	d413      	bmi.n	8004970 <_printf_i+0x23c>
 8004948:	68e0      	ldr	r0, [r4, #12]
 800494a:	9b03      	ldr	r3, [sp, #12]
 800494c:	4298      	cmp	r0, r3
 800494e:	bfb8      	it	lt
 8004950:	4618      	movlt	r0, r3
 8004952:	e7a4      	b.n	800489e <_printf_i+0x16a>
 8004954:	2301      	movs	r3, #1
 8004956:	4632      	mov	r2, r6
 8004958:	4649      	mov	r1, r9
 800495a:	4640      	mov	r0, r8
 800495c:	47d0      	blx	sl
 800495e:	3001      	adds	r0, #1
 8004960:	d09b      	beq.n	800489a <_printf_i+0x166>
 8004962:	3501      	adds	r5, #1
 8004964:	68e3      	ldr	r3, [r4, #12]
 8004966:	9903      	ldr	r1, [sp, #12]
 8004968:	1a5b      	subs	r3, r3, r1
 800496a:	42ab      	cmp	r3, r5
 800496c:	dcf2      	bgt.n	8004954 <_printf_i+0x220>
 800496e:	e7eb      	b.n	8004948 <_printf_i+0x214>
 8004970:	2500      	movs	r5, #0
 8004972:	f104 0619 	add.w	r6, r4, #25
 8004976:	e7f5      	b.n	8004964 <_printf_i+0x230>
 8004978:	0800713e 	.word	0x0800713e
 800497c:	0800714f 	.word	0x0800714f

08004980 <quorem>:
 8004980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	6903      	ldr	r3, [r0, #16]
 8004986:	690c      	ldr	r4, [r1, #16]
 8004988:	4607      	mov	r7, r0
 800498a:	42a3      	cmp	r3, r4
 800498c:	f2c0 8083 	blt.w	8004a96 <quorem+0x116>
 8004990:	3c01      	subs	r4, #1
 8004992:	f100 0514 	add.w	r5, r0, #20
 8004996:	f101 0814 	add.w	r8, r1, #20
 800499a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800499e:	9301      	str	r3, [sp, #4]
 80049a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049a8:	3301      	adds	r3, #1
 80049aa:	429a      	cmp	r2, r3
 80049ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80049b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049b8:	d332      	bcc.n	8004a20 <quorem+0xa0>
 80049ba:	f04f 0e00 	mov.w	lr, #0
 80049be:	4640      	mov	r0, r8
 80049c0:	46ac      	mov	ip, r5
 80049c2:	46f2      	mov	sl, lr
 80049c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80049c8:	b293      	uxth	r3, r2
 80049ca:	fb06 e303 	mla	r3, r6, r3, lr
 80049ce:	0c12      	lsrs	r2, r2, #16
 80049d0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80049d4:	fb06 e202 	mla	r2, r6, r2, lr
 80049d8:	b29b      	uxth	r3, r3
 80049da:	ebaa 0303 	sub.w	r3, sl, r3
 80049de:	f8dc a000 	ldr.w	sl, [ip]
 80049e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049e6:	fa1f fa8a 	uxth.w	sl, sl
 80049ea:	4453      	add	r3, sl
 80049ec:	fa1f fa82 	uxth.w	sl, r2
 80049f0:	f8dc 2000 	ldr.w	r2, [ip]
 80049f4:	4581      	cmp	r9, r0
 80049f6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80049fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a04:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a08:	f84c 3b04 	str.w	r3, [ip], #4
 8004a0c:	d2da      	bcs.n	80049c4 <quorem+0x44>
 8004a0e:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a12:	b92b      	cbnz	r3, 8004a20 <quorem+0xa0>
 8004a14:	9b01      	ldr	r3, [sp, #4]
 8004a16:	3b04      	subs	r3, #4
 8004a18:	429d      	cmp	r5, r3
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	d32f      	bcc.n	8004a7e <quorem+0xfe>
 8004a1e:	613c      	str	r4, [r7, #16]
 8004a20:	4638      	mov	r0, r7
 8004a22:	f001 f8cd 	bl	8005bc0 <__mcmp>
 8004a26:	2800      	cmp	r0, #0
 8004a28:	db25      	blt.n	8004a76 <quorem+0xf6>
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f04f 0c00 	mov.w	ip, #0
 8004a30:	3601      	adds	r6, #1
 8004a32:	f858 1b04 	ldr.w	r1, [r8], #4
 8004a36:	f8d0 e000 	ldr.w	lr, [r0]
 8004a3a:	b28b      	uxth	r3, r1
 8004a3c:	ebac 0303 	sub.w	r3, ip, r3
 8004a40:	fa1f f28e 	uxth.w	r2, lr
 8004a44:	4413      	add	r3, r2
 8004a46:	0c0a      	lsrs	r2, r1, #16
 8004a48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a56:	45c1      	cmp	r9, r8
 8004a58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a5c:	f840 3b04 	str.w	r3, [r0], #4
 8004a60:	d2e7      	bcs.n	8004a32 <quorem+0xb2>
 8004a62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a6a:	b922      	cbnz	r2, 8004a76 <quorem+0xf6>
 8004a6c:	3b04      	subs	r3, #4
 8004a6e:	429d      	cmp	r5, r3
 8004a70:	461a      	mov	r2, r3
 8004a72:	d30a      	bcc.n	8004a8a <quorem+0x10a>
 8004a74:	613c      	str	r4, [r7, #16]
 8004a76:	4630      	mov	r0, r6
 8004a78:	b003      	add	sp, #12
 8004a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	3b04      	subs	r3, #4
 8004a82:	2a00      	cmp	r2, #0
 8004a84:	d1cb      	bne.n	8004a1e <quorem+0x9e>
 8004a86:	3c01      	subs	r4, #1
 8004a88:	e7c6      	b.n	8004a18 <quorem+0x98>
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	3b04      	subs	r3, #4
 8004a8e:	2a00      	cmp	r2, #0
 8004a90:	d1f0      	bne.n	8004a74 <quorem+0xf4>
 8004a92:	3c01      	subs	r4, #1
 8004a94:	e7eb      	b.n	8004a6e <quorem+0xee>
 8004a96:	2000      	movs	r0, #0
 8004a98:	e7ee      	b.n	8004a78 <quorem+0xf8>
 8004a9a:	0000      	movs	r0, r0
 8004a9c:	0000      	movs	r0, r0
	...

08004aa0 <_dtoa_r>:
 8004aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa4:	4616      	mov	r6, r2
 8004aa6:	461f      	mov	r7, r3
 8004aa8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004aaa:	b099      	sub	sp, #100	; 0x64
 8004aac:	4605      	mov	r5, r0
 8004aae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ab2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004ab6:	b974      	cbnz	r4, 8004ad6 <_dtoa_r+0x36>
 8004ab8:	2010      	movs	r0, #16
 8004aba:	f000 fde3 	bl	8005684 <malloc>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	6268      	str	r0, [r5, #36]	; 0x24
 8004ac2:	b920      	cbnz	r0, 8004ace <_dtoa_r+0x2e>
 8004ac4:	21ea      	movs	r1, #234	; 0xea
 8004ac6:	4bae      	ldr	r3, [pc, #696]	; (8004d80 <_dtoa_r+0x2e0>)
 8004ac8:	48ae      	ldr	r0, [pc, #696]	; (8004d84 <_dtoa_r+0x2e4>)
 8004aca:	f001 fa45 	bl	8005f58 <__assert_func>
 8004ace:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ad2:	6004      	str	r4, [r0, #0]
 8004ad4:	60c4      	str	r4, [r0, #12]
 8004ad6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ad8:	6819      	ldr	r1, [r3, #0]
 8004ada:	b151      	cbz	r1, 8004af2 <_dtoa_r+0x52>
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	2301      	movs	r3, #1
 8004ae0:	4093      	lsls	r3, r2
 8004ae2:	604a      	str	r2, [r1, #4]
 8004ae4:	608b      	str	r3, [r1, #8]
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 fe30 	bl	800574c <_Bfree>
 8004aec:	2200      	movs	r2, #0
 8004aee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	1e3b      	subs	r3, r7, #0
 8004af4:	bfaf      	iteee	ge
 8004af6:	2300      	movge	r3, #0
 8004af8:	2201      	movlt	r2, #1
 8004afa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004afe:	9305      	strlt	r3, [sp, #20]
 8004b00:	bfa8      	it	ge
 8004b02:	f8c8 3000 	strge.w	r3, [r8]
 8004b06:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004b0a:	4b9f      	ldr	r3, [pc, #636]	; (8004d88 <_dtoa_r+0x2e8>)
 8004b0c:	bfb8      	it	lt
 8004b0e:	f8c8 2000 	strlt.w	r2, [r8]
 8004b12:	ea33 0309 	bics.w	r3, r3, r9
 8004b16:	d119      	bne.n	8004b4c <_dtoa_r+0xac>
 8004b18:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b24:	4333      	orrs	r3, r6
 8004b26:	f000 8580 	beq.w	800562a <_dtoa_r+0xb8a>
 8004b2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b2c:	b953      	cbnz	r3, 8004b44 <_dtoa_r+0xa4>
 8004b2e:	4b97      	ldr	r3, [pc, #604]	; (8004d8c <_dtoa_r+0x2ec>)
 8004b30:	e022      	b.n	8004b78 <_dtoa_r+0xd8>
 8004b32:	4b97      	ldr	r3, [pc, #604]	; (8004d90 <_dtoa_r+0x2f0>)
 8004b34:	9308      	str	r3, [sp, #32]
 8004b36:	3308      	adds	r3, #8
 8004b38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	9808      	ldr	r0, [sp, #32]
 8004b3e:	b019      	add	sp, #100	; 0x64
 8004b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b44:	4b91      	ldr	r3, [pc, #580]	; (8004d8c <_dtoa_r+0x2ec>)
 8004b46:	9308      	str	r3, [sp, #32]
 8004b48:	3303      	adds	r3, #3
 8004b4a:	e7f5      	b.n	8004b38 <_dtoa_r+0x98>
 8004b4c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b50:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b58:	2200      	movs	r2, #0
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f7fb ff90 	bl	8000a80 <__aeabi_dcmpeq>
 8004b60:	4680      	mov	r8, r0
 8004b62:	b158      	cbz	r0, 8004b7c <_dtoa_r+0xdc>
 8004b64:	2301      	movs	r3, #1
 8004b66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8559 	beq.w	8005624 <_dtoa_r+0xb84>
 8004b72:	4888      	ldr	r0, [pc, #544]	; (8004d94 <_dtoa_r+0x2f4>)
 8004b74:	6018      	str	r0, [r3, #0]
 8004b76:	1e43      	subs	r3, r0, #1
 8004b78:	9308      	str	r3, [sp, #32]
 8004b7a:	e7df      	b.n	8004b3c <_dtoa_r+0x9c>
 8004b7c:	ab16      	add	r3, sp, #88	; 0x58
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	ab17      	add	r3, sp, #92	; 0x5c
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	4628      	mov	r0, r5
 8004b86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b8a:	f001 f8c5 	bl	8005d18 <__d2b>
 8004b8e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004b92:	4682      	mov	sl, r0
 8004b94:	2c00      	cmp	r4, #0
 8004b96:	d07e      	beq.n	8004c96 <_dtoa_r+0x1f6>
 8004b98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b9e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004ba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ba6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004baa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004bae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	4b78      	ldr	r3, [pc, #480]	; (8004d98 <_dtoa_r+0x2f8>)
 8004bb6:	f7fb fb43 	bl	8000240 <__aeabi_dsub>
 8004bba:	a36b      	add	r3, pc, #428	; (adr r3, 8004d68 <_dtoa_r+0x2c8>)
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f7fb fcf6 	bl	80005b0 <__aeabi_dmul>
 8004bc4:	a36a      	add	r3, pc, #424	; (adr r3, 8004d70 <_dtoa_r+0x2d0>)
 8004bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bca:	f7fb fb3b 	bl	8000244 <__adddf3>
 8004bce:	4606      	mov	r6, r0
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	460f      	mov	r7, r1
 8004bd4:	f7fb fc82 	bl	80004dc <__aeabi_i2d>
 8004bd8:	a367      	add	r3, pc, #412	; (adr r3, 8004d78 <_dtoa_r+0x2d8>)
 8004bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bde:	f7fb fce7 	bl	80005b0 <__aeabi_dmul>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4630      	mov	r0, r6
 8004be8:	4639      	mov	r1, r7
 8004bea:	f7fb fb2b 	bl	8000244 <__adddf3>
 8004bee:	4606      	mov	r6, r0
 8004bf0:	460f      	mov	r7, r1
 8004bf2:	f7fb ff8d 	bl	8000b10 <__aeabi_d2iz>
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	4681      	mov	r9, r0
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	4630      	mov	r0, r6
 8004bfe:	4639      	mov	r1, r7
 8004c00:	f7fb ff48 	bl	8000a94 <__aeabi_dcmplt>
 8004c04:	b148      	cbz	r0, 8004c1a <_dtoa_r+0x17a>
 8004c06:	4648      	mov	r0, r9
 8004c08:	f7fb fc68 	bl	80004dc <__aeabi_i2d>
 8004c0c:	4632      	mov	r2, r6
 8004c0e:	463b      	mov	r3, r7
 8004c10:	f7fb ff36 	bl	8000a80 <__aeabi_dcmpeq>
 8004c14:	b908      	cbnz	r0, 8004c1a <_dtoa_r+0x17a>
 8004c16:	f109 39ff 	add.w	r9, r9, #4294967295
 8004c1a:	f1b9 0f16 	cmp.w	r9, #22
 8004c1e:	d857      	bhi.n	8004cd0 <_dtoa_r+0x230>
 8004c20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c24:	4b5d      	ldr	r3, [pc, #372]	; (8004d9c <_dtoa_r+0x2fc>)
 8004c26:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c2e:	f7fb ff31 	bl	8000a94 <__aeabi_dcmplt>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d04e      	beq.n	8004cd4 <_dtoa_r+0x234>
 8004c36:	2300      	movs	r3, #0
 8004c38:	f109 39ff 	add.w	r9, r9, #4294967295
 8004c3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c40:	1b1c      	subs	r4, r3, r4
 8004c42:	1e63      	subs	r3, r4, #1
 8004c44:	9309      	str	r3, [sp, #36]	; 0x24
 8004c46:	bf49      	itett	mi
 8004c48:	f1c4 0301 	rsbmi	r3, r4, #1
 8004c4c:	2300      	movpl	r3, #0
 8004c4e:	9306      	strmi	r3, [sp, #24]
 8004c50:	2300      	movmi	r3, #0
 8004c52:	bf54      	ite	pl
 8004c54:	9306      	strpl	r3, [sp, #24]
 8004c56:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004c58:	f1b9 0f00 	cmp.w	r9, #0
 8004c5c:	db3c      	blt.n	8004cd8 <_dtoa_r+0x238>
 8004c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c60:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004c64:	444b      	add	r3, r9
 8004c66:	9309      	str	r3, [sp, #36]	; 0x24
 8004c68:	2300      	movs	r3, #0
 8004c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8004c6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c6e:	2b09      	cmp	r3, #9
 8004c70:	d86c      	bhi.n	8004d4c <_dtoa_r+0x2ac>
 8004c72:	2b05      	cmp	r3, #5
 8004c74:	bfc4      	itt	gt
 8004c76:	3b04      	subgt	r3, #4
 8004c78:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004c7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c7c:	bfc8      	it	gt
 8004c7e:	2400      	movgt	r4, #0
 8004c80:	f1a3 0302 	sub.w	r3, r3, #2
 8004c84:	bfd8      	it	le
 8004c86:	2401      	movle	r4, #1
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	f200 808b 	bhi.w	8004da4 <_dtoa_r+0x304>
 8004c8e:	e8df f003 	tbb	[pc, r3]
 8004c92:	4f2d      	.short	0x4f2d
 8004c94:	5b4d      	.short	0x5b4d
 8004c96:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004c9a:	441c      	add	r4, r3
 8004c9c:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004ca0:	2b20      	cmp	r3, #32
 8004ca2:	bfc3      	ittte	gt
 8004ca4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ca8:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004cac:	fa09 f303 	lslgt.w	r3, r9, r3
 8004cb0:	f1c3 0320 	rsble	r3, r3, #32
 8004cb4:	bfc6      	itte	gt
 8004cb6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004cba:	4318      	orrgt	r0, r3
 8004cbc:	fa06 f003 	lslle.w	r0, r6, r3
 8004cc0:	f7fb fbfc 	bl	80004bc <__aeabi_ui2d>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004cca:	3c01      	subs	r4, #1
 8004ccc:	9313      	str	r3, [sp, #76]	; 0x4c
 8004cce:	e770      	b.n	8004bb2 <_dtoa_r+0x112>
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e7b3      	b.n	8004c3c <_dtoa_r+0x19c>
 8004cd4:	900f      	str	r0, [sp, #60]	; 0x3c
 8004cd6:	e7b2      	b.n	8004c3e <_dtoa_r+0x19e>
 8004cd8:	9b06      	ldr	r3, [sp, #24]
 8004cda:	eba3 0309 	sub.w	r3, r3, r9
 8004cde:	9306      	str	r3, [sp, #24]
 8004ce0:	f1c9 0300 	rsb	r3, r9, #0
 8004ce4:	930a      	str	r3, [sp, #40]	; 0x28
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	930e      	str	r3, [sp, #56]	; 0x38
 8004cea:	e7bf      	b.n	8004c6c <_dtoa_r+0x1cc>
 8004cec:	2300      	movs	r3, #0
 8004cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cf0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	dc59      	bgt.n	8004daa <_dtoa_r+0x30a>
 8004cf6:	f04f 0b01 	mov.w	fp, #1
 8004cfa:	465b      	mov	r3, fp
 8004cfc:	f8cd b008 	str.w	fp, [sp, #8]
 8004d00:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004d04:	2200      	movs	r2, #0
 8004d06:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004d08:	6042      	str	r2, [r0, #4]
 8004d0a:	2204      	movs	r2, #4
 8004d0c:	f102 0614 	add.w	r6, r2, #20
 8004d10:	429e      	cmp	r6, r3
 8004d12:	6841      	ldr	r1, [r0, #4]
 8004d14:	d94f      	bls.n	8004db6 <_dtoa_r+0x316>
 8004d16:	4628      	mov	r0, r5
 8004d18:	f000 fcd8 	bl	80056cc <_Balloc>
 8004d1c:	9008      	str	r0, [sp, #32]
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	d14d      	bne.n	8004dbe <_dtoa_r+0x31e>
 8004d22:	4602      	mov	r2, r0
 8004d24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d28:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <_dtoa_r+0x300>)
 8004d2a:	e6cd      	b.n	8004ac8 <_dtoa_r+0x28>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e7de      	b.n	8004cee <_dtoa_r+0x24e>
 8004d30:	2300      	movs	r3, #0
 8004d32:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d34:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d36:	eb09 0b03 	add.w	fp, r9, r3
 8004d3a:	f10b 0301 	add.w	r3, fp, #1
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	9302      	str	r3, [sp, #8]
 8004d42:	bfb8      	it	lt
 8004d44:	2301      	movlt	r3, #1
 8004d46:	e7dd      	b.n	8004d04 <_dtoa_r+0x264>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e7f2      	b.n	8004d32 <_dtoa_r+0x292>
 8004d4c:	2401      	movs	r4, #1
 8004d4e:	2300      	movs	r3, #0
 8004d50:	940b      	str	r4, [sp, #44]	; 0x2c
 8004d52:	9322      	str	r3, [sp, #136]	; 0x88
 8004d54:	f04f 3bff 	mov.w	fp, #4294967295
 8004d58:	2200      	movs	r2, #0
 8004d5a:	2312      	movs	r3, #18
 8004d5c:	f8cd b008 	str.w	fp, [sp, #8]
 8004d60:	9223      	str	r2, [sp, #140]	; 0x8c
 8004d62:	e7cf      	b.n	8004d04 <_dtoa_r+0x264>
 8004d64:	f3af 8000 	nop.w
 8004d68:	636f4361 	.word	0x636f4361
 8004d6c:	3fd287a7 	.word	0x3fd287a7
 8004d70:	8b60c8b3 	.word	0x8b60c8b3
 8004d74:	3fc68a28 	.word	0x3fc68a28
 8004d78:	509f79fb 	.word	0x509f79fb
 8004d7c:	3fd34413 	.word	0x3fd34413
 8004d80:	0800716d 	.word	0x0800716d
 8004d84:	08007184 	.word	0x08007184
 8004d88:	7ff00000 	.word	0x7ff00000
 8004d8c:	08007169 	.word	0x08007169
 8004d90:	08007160 	.word	0x08007160
 8004d94:	0800713d 	.word	0x0800713d
 8004d98:	3ff80000 	.word	0x3ff80000
 8004d9c:	08007280 	.word	0x08007280
 8004da0:	080071e3 	.word	0x080071e3
 8004da4:	2301      	movs	r3, #1
 8004da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004da8:	e7d4      	b.n	8004d54 <_dtoa_r+0x2b4>
 8004daa:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8004dae:	465b      	mov	r3, fp
 8004db0:	f8cd b008 	str.w	fp, [sp, #8]
 8004db4:	e7a6      	b.n	8004d04 <_dtoa_r+0x264>
 8004db6:	3101      	adds	r1, #1
 8004db8:	6041      	str	r1, [r0, #4]
 8004dba:	0052      	lsls	r2, r2, #1
 8004dbc:	e7a6      	b.n	8004d0c <_dtoa_r+0x26c>
 8004dbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004dc0:	9a08      	ldr	r2, [sp, #32]
 8004dc2:	601a      	str	r2, [r3, #0]
 8004dc4:	9b02      	ldr	r3, [sp, #8]
 8004dc6:	2b0e      	cmp	r3, #14
 8004dc8:	f200 80a8 	bhi.w	8004f1c <_dtoa_r+0x47c>
 8004dcc:	2c00      	cmp	r4, #0
 8004dce:	f000 80a5 	beq.w	8004f1c <_dtoa_r+0x47c>
 8004dd2:	f1b9 0f00 	cmp.w	r9, #0
 8004dd6:	dd34      	ble.n	8004e42 <_dtoa_r+0x3a2>
 8004dd8:	4a9a      	ldr	r2, [pc, #616]	; (8005044 <_dtoa_r+0x5a4>)
 8004dda:	f009 030f 	and.w	r3, r9, #15
 8004dde:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004de2:	f419 7f80 	tst.w	r9, #256	; 0x100
 8004de6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004dea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004dee:	ea4f 1429 	mov.w	r4, r9, asr #4
 8004df2:	d016      	beq.n	8004e22 <_dtoa_r+0x382>
 8004df4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004df8:	4b93      	ldr	r3, [pc, #588]	; (8005048 <_dtoa_r+0x5a8>)
 8004dfa:	2703      	movs	r7, #3
 8004dfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e00:	f7fb fd00 	bl	8000804 <__aeabi_ddiv>
 8004e04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e08:	f004 040f 	and.w	r4, r4, #15
 8004e0c:	4e8e      	ldr	r6, [pc, #568]	; (8005048 <_dtoa_r+0x5a8>)
 8004e0e:	b954      	cbnz	r4, 8004e26 <_dtoa_r+0x386>
 8004e10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e18:	f7fb fcf4 	bl	8000804 <__aeabi_ddiv>
 8004e1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e20:	e029      	b.n	8004e76 <_dtoa_r+0x3d6>
 8004e22:	2702      	movs	r7, #2
 8004e24:	e7f2      	b.n	8004e0c <_dtoa_r+0x36c>
 8004e26:	07e1      	lsls	r1, r4, #31
 8004e28:	d508      	bpl.n	8004e3c <_dtoa_r+0x39c>
 8004e2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e2e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e32:	f7fb fbbd 	bl	80005b0 <__aeabi_dmul>
 8004e36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e3a:	3701      	adds	r7, #1
 8004e3c:	1064      	asrs	r4, r4, #1
 8004e3e:	3608      	adds	r6, #8
 8004e40:	e7e5      	b.n	8004e0e <_dtoa_r+0x36e>
 8004e42:	f000 80a5 	beq.w	8004f90 <_dtoa_r+0x4f0>
 8004e46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e4a:	f1c9 0400 	rsb	r4, r9, #0
 8004e4e:	4b7d      	ldr	r3, [pc, #500]	; (8005044 <_dtoa_r+0x5a4>)
 8004e50:	f004 020f 	and.w	r2, r4, #15
 8004e54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f7fb fba8 	bl	80005b0 <__aeabi_dmul>
 8004e60:	2702      	movs	r7, #2
 8004e62:	2300      	movs	r3, #0
 8004e64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e68:	4e77      	ldr	r6, [pc, #476]	; (8005048 <_dtoa_r+0x5a8>)
 8004e6a:	1124      	asrs	r4, r4, #4
 8004e6c:	2c00      	cmp	r4, #0
 8004e6e:	f040 8084 	bne.w	8004f7a <_dtoa_r+0x4da>
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1d2      	bne.n	8004e1c <_dtoa_r+0x37c>
 8004e76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 808b 	beq.w	8004f94 <_dtoa_r+0x4f4>
 8004e7e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e82:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	4b6f      	ldr	r3, [pc, #444]	; (800504c <_dtoa_r+0x5ac>)
 8004e8e:	f7fb fe01 	bl	8000a94 <__aeabi_dcmplt>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d07e      	beq.n	8004f94 <_dtoa_r+0x4f4>
 8004e96:	9b02      	ldr	r3, [sp, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d07b      	beq.n	8004f94 <_dtoa_r+0x4f4>
 8004e9c:	f1bb 0f00 	cmp.w	fp, #0
 8004ea0:	dd38      	ble.n	8004f14 <_dtoa_r+0x474>
 8004ea2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	4b69      	ldr	r3, [pc, #420]	; (8005050 <_dtoa_r+0x5b0>)
 8004eaa:	f7fb fb81 	bl	80005b0 <__aeabi_dmul>
 8004eae:	465c      	mov	r4, fp
 8004eb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004eb4:	f109 38ff 	add.w	r8, r9, #4294967295
 8004eb8:	3701      	adds	r7, #1
 8004eba:	4638      	mov	r0, r7
 8004ebc:	f7fb fb0e 	bl	80004dc <__aeabi_i2d>
 8004ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ec4:	f7fb fb74 	bl	80005b0 <__aeabi_dmul>
 8004ec8:	2200      	movs	r2, #0
 8004eca:	4b62      	ldr	r3, [pc, #392]	; (8005054 <_dtoa_r+0x5b4>)
 8004ecc:	f7fb f9ba 	bl	8000244 <__adddf3>
 8004ed0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004ed4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ed8:	9611      	str	r6, [sp, #68]	; 0x44
 8004eda:	2c00      	cmp	r4, #0
 8004edc:	d15d      	bne.n	8004f9a <_dtoa_r+0x4fa>
 8004ede:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	4b5c      	ldr	r3, [pc, #368]	; (8005058 <_dtoa_r+0x5b8>)
 8004ee6:	f7fb f9ab 	bl	8000240 <__aeabi_dsub>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ef2:	4633      	mov	r3, r6
 8004ef4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004ef6:	f7fb fdeb 	bl	8000ad0 <__aeabi_dcmpgt>
 8004efa:	2800      	cmp	r0, #0
 8004efc:	f040 829e 	bne.w	800543c <_dtoa_r+0x99c>
 8004f00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f06:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004f0a:	f7fb fdc3 	bl	8000a94 <__aeabi_dcmplt>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	f040 8292 	bne.w	8005438 <_dtoa_r+0x998>
 8004f14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004f18:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f2c0 8153 	blt.w	80051ca <_dtoa_r+0x72a>
 8004f24:	f1b9 0f0e 	cmp.w	r9, #14
 8004f28:	f300 814f 	bgt.w	80051ca <_dtoa_r+0x72a>
 8004f2c:	4b45      	ldr	r3, [pc, #276]	; (8005044 <_dtoa_r+0x5a4>)
 8004f2e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004f32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f36:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004f3a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f280 80db 	bge.w	80050f8 <_dtoa_r+0x658>
 8004f42:	9b02      	ldr	r3, [sp, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f300 80d7 	bgt.w	80050f8 <_dtoa_r+0x658>
 8004f4a:	f040 8274 	bne.w	8005436 <_dtoa_r+0x996>
 8004f4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f52:	2200      	movs	r2, #0
 8004f54:	4b40      	ldr	r3, [pc, #256]	; (8005058 <_dtoa_r+0x5b8>)
 8004f56:	f7fb fb2b 	bl	80005b0 <__aeabi_dmul>
 8004f5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f5e:	f7fb fdad 	bl	8000abc <__aeabi_dcmpge>
 8004f62:	9c02      	ldr	r4, [sp, #8]
 8004f64:	4626      	mov	r6, r4
 8004f66:	2800      	cmp	r0, #0
 8004f68:	f040 824a 	bne.w	8005400 <_dtoa_r+0x960>
 8004f6c:	2331      	movs	r3, #49	; 0x31
 8004f6e:	9f08      	ldr	r7, [sp, #32]
 8004f70:	f109 0901 	add.w	r9, r9, #1
 8004f74:	f807 3b01 	strb.w	r3, [r7], #1
 8004f78:	e246      	b.n	8005408 <_dtoa_r+0x968>
 8004f7a:	07e2      	lsls	r2, r4, #31
 8004f7c:	d505      	bpl.n	8004f8a <_dtoa_r+0x4ea>
 8004f7e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f82:	f7fb fb15 	bl	80005b0 <__aeabi_dmul>
 8004f86:	2301      	movs	r3, #1
 8004f88:	3701      	adds	r7, #1
 8004f8a:	1064      	asrs	r4, r4, #1
 8004f8c:	3608      	adds	r6, #8
 8004f8e:	e76d      	b.n	8004e6c <_dtoa_r+0x3cc>
 8004f90:	2702      	movs	r7, #2
 8004f92:	e770      	b.n	8004e76 <_dtoa_r+0x3d6>
 8004f94:	46c8      	mov	r8, r9
 8004f96:	9c02      	ldr	r4, [sp, #8]
 8004f98:	e78f      	b.n	8004eba <_dtoa_r+0x41a>
 8004f9a:	9908      	ldr	r1, [sp, #32]
 8004f9c:	4b29      	ldr	r3, [pc, #164]	; (8005044 <_dtoa_r+0x5a4>)
 8004f9e:	4421      	add	r1, r4
 8004fa0:	9112      	str	r1, [sp, #72]	; 0x48
 8004fa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fa4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fa8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004fac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fb0:	2900      	cmp	r1, #0
 8004fb2:	d055      	beq.n	8005060 <_dtoa_r+0x5c0>
 8004fb4:	2000      	movs	r0, #0
 8004fb6:	4929      	ldr	r1, [pc, #164]	; (800505c <_dtoa_r+0x5bc>)
 8004fb8:	f7fb fc24 	bl	8000804 <__aeabi_ddiv>
 8004fbc:	463b      	mov	r3, r7
 8004fbe:	4632      	mov	r2, r6
 8004fc0:	f7fb f93e 	bl	8000240 <__aeabi_dsub>
 8004fc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fc8:	9f08      	ldr	r7, [sp, #32]
 8004fca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fce:	f7fb fd9f 	bl	8000b10 <__aeabi_d2iz>
 8004fd2:	4604      	mov	r4, r0
 8004fd4:	f7fb fa82 	bl	80004dc <__aeabi_i2d>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fe0:	f7fb f92e 	bl	8000240 <__aeabi_dsub>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	3430      	adds	r4, #48	; 0x30
 8004fea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004fee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ff2:	f807 4b01 	strb.w	r4, [r7], #1
 8004ff6:	f7fb fd4d 	bl	8000a94 <__aeabi_dcmplt>
 8004ffa:	2800      	cmp	r0, #0
 8004ffc:	d174      	bne.n	80050e8 <_dtoa_r+0x648>
 8004ffe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005002:	2000      	movs	r0, #0
 8005004:	4911      	ldr	r1, [pc, #68]	; (800504c <_dtoa_r+0x5ac>)
 8005006:	f7fb f91b 	bl	8000240 <__aeabi_dsub>
 800500a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800500e:	f7fb fd41 	bl	8000a94 <__aeabi_dcmplt>
 8005012:	2800      	cmp	r0, #0
 8005014:	f040 80b6 	bne.w	8005184 <_dtoa_r+0x6e4>
 8005018:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800501a:	429f      	cmp	r7, r3
 800501c:	f43f af7a 	beq.w	8004f14 <_dtoa_r+0x474>
 8005020:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005024:	2200      	movs	r2, #0
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <_dtoa_r+0x5b0>)
 8005028:	f7fb fac2 	bl	80005b0 <__aeabi_dmul>
 800502c:	2200      	movs	r2, #0
 800502e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005032:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <_dtoa_r+0x5b0>)
 8005038:	f7fb faba 	bl	80005b0 <__aeabi_dmul>
 800503c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005040:	e7c3      	b.n	8004fca <_dtoa_r+0x52a>
 8005042:	bf00      	nop
 8005044:	08007280 	.word	0x08007280
 8005048:	08007258 	.word	0x08007258
 800504c:	3ff00000 	.word	0x3ff00000
 8005050:	40240000 	.word	0x40240000
 8005054:	401c0000 	.word	0x401c0000
 8005058:	40140000 	.word	0x40140000
 800505c:	3fe00000 	.word	0x3fe00000
 8005060:	4630      	mov	r0, r6
 8005062:	4639      	mov	r1, r7
 8005064:	f7fb faa4 	bl	80005b0 <__aeabi_dmul>
 8005068:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800506a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800506e:	9c08      	ldr	r4, [sp, #32]
 8005070:	9314      	str	r3, [sp, #80]	; 0x50
 8005072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005076:	f7fb fd4b 	bl	8000b10 <__aeabi_d2iz>
 800507a:	9015      	str	r0, [sp, #84]	; 0x54
 800507c:	f7fb fa2e 	bl	80004dc <__aeabi_i2d>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005088:	f7fb f8da 	bl	8000240 <__aeabi_dsub>
 800508c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800508e:	4606      	mov	r6, r0
 8005090:	3330      	adds	r3, #48	; 0x30
 8005092:	f804 3b01 	strb.w	r3, [r4], #1
 8005096:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005098:	460f      	mov	r7, r1
 800509a:	429c      	cmp	r4, r3
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	d124      	bne.n	80050ec <_dtoa_r+0x64c>
 80050a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050a6:	4bb3      	ldr	r3, [pc, #716]	; (8005374 <_dtoa_r+0x8d4>)
 80050a8:	f7fb f8cc 	bl	8000244 <__adddf3>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	4630      	mov	r0, r6
 80050b2:	4639      	mov	r1, r7
 80050b4:	f7fb fd0c 	bl	8000ad0 <__aeabi_dcmpgt>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d162      	bne.n	8005182 <_dtoa_r+0x6e2>
 80050bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050c0:	2000      	movs	r0, #0
 80050c2:	49ac      	ldr	r1, [pc, #688]	; (8005374 <_dtoa_r+0x8d4>)
 80050c4:	f7fb f8bc 	bl	8000240 <__aeabi_dsub>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4630      	mov	r0, r6
 80050ce:	4639      	mov	r1, r7
 80050d0:	f7fb fce0 	bl	8000a94 <__aeabi_dcmplt>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	f43f af1d 	beq.w	8004f14 <_dtoa_r+0x474>
 80050da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80050dc:	1e7b      	subs	r3, r7, #1
 80050de:	9314      	str	r3, [sp, #80]	; 0x50
 80050e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80050e4:	2b30      	cmp	r3, #48	; 0x30
 80050e6:	d0f8      	beq.n	80050da <_dtoa_r+0x63a>
 80050e8:	46c1      	mov	r9, r8
 80050ea:	e03a      	b.n	8005162 <_dtoa_r+0x6c2>
 80050ec:	4ba2      	ldr	r3, [pc, #648]	; (8005378 <_dtoa_r+0x8d8>)
 80050ee:	f7fb fa5f 	bl	80005b0 <__aeabi_dmul>
 80050f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050f6:	e7bc      	b.n	8005072 <_dtoa_r+0x5d2>
 80050f8:	9f08      	ldr	r7, [sp, #32]
 80050fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80050fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005102:	f7fb fb7f 	bl	8000804 <__aeabi_ddiv>
 8005106:	f7fb fd03 	bl	8000b10 <__aeabi_d2iz>
 800510a:	4604      	mov	r4, r0
 800510c:	f7fb f9e6 	bl	80004dc <__aeabi_i2d>
 8005110:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005114:	f7fb fa4c 	bl	80005b0 <__aeabi_dmul>
 8005118:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800511c:	460b      	mov	r3, r1
 800511e:	4602      	mov	r2, r0
 8005120:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005124:	f7fb f88c 	bl	8000240 <__aeabi_dsub>
 8005128:	f807 6b01 	strb.w	r6, [r7], #1
 800512c:	9e08      	ldr	r6, [sp, #32]
 800512e:	9b02      	ldr	r3, [sp, #8]
 8005130:	1bbe      	subs	r6, r7, r6
 8005132:	42b3      	cmp	r3, r6
 8005134:	d13a      	bne.n	80051ac <_dtoa_r+0x70c>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	f7fb f883 	bl	8000244 <__adddf3>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005146:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800514a:	f7fb fcc1 	bl	8000ad0 <__aeabi_dcmpgt>
 800514e:	bb58      	cbnz	r0, 80051a8 <_dtoa_r+0x708>
 8005150:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005158:	f7fb fc92 	bl	8000a80 <__aeabi_dcmpeq>
 800515c:	b108      	cbz	r0, 8005162 <_dtoa_r+0x6c2>
 800515e:	07e1      	lsls	r1, r4, #31
 8005160:	d422      	bmi.n	80051a8 <_dtoa_r+0x708>
 8005162:	4628      	mov	r0, r5
 8005164:	4651      	mov	r1, sl
 8005166:	f000 faf1 	bl	800574c <_Bfree>
 800516a:	2300      	movs	r3, #0
 800516c:	703b      	strb	r3, [r7, #0]
 800516e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005170:	f109 0001 	add.w	r0, r9, #1
 8005174:	6018      	str	r0, [r3, #0]
 8005176:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005178:	2b00      	cmp	r3, #0
 800517a:	f43f acdf 	beq.w	8004b3c <_dtoa_r+0x9c>
 800517e:	601f      	str	r7, [r3, #0]
 8005180:	e4dc      	b.n	8004b3c <_dtoa_r+0x9c>
 8005182:	4627      	mov	r7, r4
 8005184:	463b      	mov	r3, r7
 8005186:	461f      	mov	r7, r3
 8005188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800518c:	2a39      	cmp	r2, #57	; 0x39
 800518e:	d107      	bne.n	80051a0 <_dtoa_r+0x700>
 8005190:	9a08      	ldr	r2, [sp, #32]
 8005192:	429a      	cmp	r2, r3
 8005194:	d1f7      	bne.n	8005186 <_dtoa_r+0x6e6>
 8005196:	2230      	movs	r2, #48	; 0x30
 8005198:	9908      	ldr	r1, [sp, #32]
 800519a:	f108 0801 	add.w	r8, r8, #1
 800519e:	700a      	strb	r2, [r1, #0]
 80051a0:	781a      	ldrb	r2, [r3, #0]
 80051a2:	3201      	adds	r2, #1
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	e79f      	b.n	80050e8 <_dtoa_r+0x648>
 80051a8:	46c8      	mov	r8, r9
 80051aa:	e7eb      	b.n	8005184 <_dtoa_r+0x6e4>
 80051ac:	2200      	movs	r2, #0
 80051ae:	4b72      	ldr	r3, [pc, #456]	; (8005378 <_dtoa_r+0x8d8>)
 80051b0:	f7fb f9fe 	bl	80005b0 <__aeabi_dmul>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051bc:	2200      	movs	r2, #0
 80051be:	2300      	movs	r3, #0
 80051c0:	f7fb fc5e 	bl	8000a80 <__aeabi_dcmpeq>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d098      	beq.n	80050fa <_dtoa_r+0x65a>
 80051c8:	e7cb      	b.n	8005162 <_dtoa_r+0x6c2>
 80051ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051cc:	2a00      	cmp	r2, #0
 80051ce:	f000 80cd 	beq.w	800536c <_dtoa_r+0x8cc>
 80051d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80051d4:	2a01      	cmp	r2, #1
 80051d6:	f300 80af 	bgt.w	8005338 <_dtoa_r+0x898>
 80051da:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80051dc:	2a00      	cmp	r2, #0
 80051de:	f000 80a7 	beq.w	8005330 <_dtoa_r+0x890>
 80051e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80051e8:	9f06      	ldr	r7, [sp, #24]
 80051ea:	9a06      	ldr	r2, [sp, #24]
 80051ec:	2101      	movs	r1, #1
 80051ee:	441a      	add	r2, r3
 80051f0:	9206      	str	r2, [sp, #24]
 80051f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051f4:	4628      	mov	r0, r5
 80051f6:	441a      	add	r2, r3
 80051f8:	9209      	str	r2, [sp, #36]	; 0x24
 80051fa:	f000 fb61 	bl	80058c0 <__i2b>
 80051fe:	4606      	mov	r6, r0
 8005200:	2f00      	cmp	r7, #0
 8005202:	dd0c      	ble.n	800521e <_dtoa_r+0x77e>
 8005204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005206:	2b00      	cmp	r3, #0
 8005208:	dd09      	ble.n	800521e <_dtoa_r+0x77e>
 800520a:	42bb      	cmp	r3, r7
 800520c:	bfa8      	it	ge
 800520e:	463b      	movge	r3, r7
 8005210:	9a06      	ldr	r2, [sp, #24]
 8005212:	1aff      	subs	r7, r7, r3
 8005214:	1ad2      	subs	r2, r2, r3
 8005216:	9206      	str	r2, [sp, #24]
 8005218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	9309      	str	r3, [sp, #36]	; 0x24
 800521e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005220:	b1f3      	cbz	r3, 8005260 <_dtoa_r+0x7c0>
 8005222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 80a9 	beq.w	800537c <_dtoa_r+0x8dc>
 800522a:	2c00      	cmp	r4, #0
 800522c:	dd10      	ble.n	8005250 <_dtoa_r+0x7b0>
 800522e:	4631      	mov	r1, r6
 8005230:	4622      	mov	r2, r4
 8005232:	4628      	mov	r0, r5
 8005234:	f000 fbfe 	bl	8005a34 <__pow5mult>
 8005238:	4652      	mov	r2, sl
 800523a:	4601      	mov	r1, r0
 800523c:	4606      	mov	r6, r0
 800523e:	4628      	mov	r0, r5
 8005240:	f000 fb54 	bl	80058ec <__multiply>
 8005244:	4680      	mov	r8, r0
 8005246:	4651      	mov	r1, sl
 8005248:	4628      	mov	r0, r5
 800524a:	f000 fa7f 	bl	800574c <_Bfree>
 800524e:	46c2      	mov	sl, r8
 8005250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005252:	1b1a      	subs	r2, r3, r4
 8005254:	d004      	beq.n	8005260 <_dtoa_r+0x7c0>
 8005256:	4651      	mov	r1, sl
 8005258:	4628      	mov	r0, r5
 800525a:	f000 fbeb 	bl	8005a34 <__pow5mult>
 800525e:	4682      	mov	sl, r0
 8005260:	2101      	movs	r1, #1
 8005262:	4628      	mov	r0, r5
 8005264:	f000 fb2c 	bl	80058c0 <__i2b>
 8005268:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800526a:	4604      	mov	r4, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	f340 8087 	ble.w	8005380 <_dtoa_r+0x8e0>
 8005272:	461a      	mov	r2, r3
 8005274:	4601      	mov	r1, r0
 8005276:	4628      	mov	r0, r5
 8005278:	f000 fbdc 	bl	8005a34 <__pow5mult>
 800527c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800527e:	4604      	mov	r4, r0
 8005280:	2b01      	cmp	r3, #1
 8005282:	f340 8080 	ble.w	8005386 <_dtoa_r+0x8e6>
 8005286:	f04f 0800 	mov.w	r8, #0
 800528a:	6923      	ldr	r3, [r4, #16]
 800528c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005290:	6918      	ldr	r0, [r3, #16]
 8005292:	f000 fac7 	bl	8005824 <__hi0bits>
 8005296:	f1c0 0020 	rsb	r0, r0, #32
 800529a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800529c:	4418      	add	r0, r3
 800529e:	f010 001f 	ands.w	r0, r0, #31
 80052a2:	f000 8092 	beq.w	80053ca <_dtoa_r+0x92a>
 80052a6:	f1c0 0320 	rsb	r3, r0, #32
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	f340 808a 	ble.w	80053c4 <_dtoa_r+0x924>
 80052b0:	f1c0 001c 	rsb	r0, r0, #28
 80052b4:	9b06      	ldr	r3, [sp, #24]
 80052b6:	4407      	add	r7, r0
 80052b8:	4403      	add	r3, r0
 80052ba:	9306      	str	r3, [sp, #24]
 80052bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052be:	4403      	add	r3, r0
 80052c0:	9309      	str	r3, [sp, #36]	; 0x24
 80052c2:	9b06      	ldr	r3, [sp, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	dd05      	ble.n	80052d4 <_dtoa_r+0x834>
 80052c8:	4651      	mov	r1, sl
 80052ca:	461a      	mov	r2, r3
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 fc0b 	bl	8005ae8 <__lshift>
 80052d2:	4682      	mov	sl, r0
 80052d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	dd05      	ble.n	80052e6 <_dtoa_r+0x846>
 80052da:	4621      	mov	r1, r4
 80052dc:	461a      	mov	r2, r3
 80052de:	4628      	mov	r0, r5
 80052e0:	f000 fc02 	bl	8005ae8 <__lshift>
 80052e4:	4604      	mov	r4, r0
 80052e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d070      	beq.n	80053ce <_dtoa_r+0x92e>
 80052ec:	4621      	mov	r1, r4
 80052ee:	4650      	mov	r0, sl
 80052f0:	f000 fc66 	bl	8005bc0 <__mcmp>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	da6a      	bge.n	80053ce <_dtoa_r+0x92e>
 80052f8:	2300      	movs	r3, #0
 80052fa:	4651      	mov	r1, sl
 80052fc:	220a      	movs	r2, #10
 80052fe:	4628      	mov	r0, r5
 8005300:	f000 fa46 	bl	8005790 <__multadd>
 8005304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005306:	4682      	mov	sl, r0
 8005308:	f109 39ff 	add.w	r9, r9, #4294967295
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8193 	beq.w	8005638 <_dtoa_r+0xb98>
 8005312:	4631      	mov	r1, r6
 8005314:	2300      	movs	r3, #0
 8005316:	220a      	movs	r2, #10
 8005318:	4628      	mov	r0, r5
 800531a:	f000 fa39 	bl	8005790 <__multadd>
 800531e:	f1bb 0f00 	cmp.w	fp, #0
 8005322:	4606      	mov	r6, r0
 8005324:	f300 8093 	bgt.w	800544e <_dtoa_r+0x9ae>
 8005328:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800532a:	2b02      	cmp	r3, #2
 800532c:	dc57      	bgt.n	80053de <_dtoa_r+0x93e>
 800532e:	e08e      	b.n	800544e <_dtoa_r+0x9ae>
 8005330:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005332:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005336:	e756      	b.n	80051e6 <_dtoa_r+0x746>
 8005338:	9b02      	ldr	r3, [sp, #8]
 800533a:	1e5c      	subs	r4, r3, #1
 800533c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800533e:	42a3      	cmp	r3, r4
 8005340:	bfb7      	itett	lt
 8005342:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005344:	1b1c      	subge	r4, r3, r4
 8005346:	1ae2      	sublt	r2, r4, r3
 8005348:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800534a:	bfbe      	ittt	lt
 800534c:	940a      	strlt	r4, [sp, #40]	; 0x28
 800534e:	189b      	addlt	r3, r3, r2
 8005350:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005352:	9b02      	ldr	r3, [sp, #8]
 8005354:	bfb8      	it	lt
 8005356:	2400      	movlt	r4, #0
 8005358:	2b00      	cmp	r3, #0
 800535a:	bfbb      	ittet	lt
 800535c:	9b06      	ldrlt	r3, [sp, #24]
 800535e:	9a02      	ldrlt	r2, [sp, #8]
 8005360:	9f06      	ldrge	r7, [sp, #24]
 8005362:	1a9f      	sublt	r7, r3, r2
 8005364:	bfac      	ite	ge
 8005366:	9b02      	ldrge	r3, [sp, #8]
 8005368:	2300      	movlt	r3, #0
 800536a:	e73e      	b.n	80051ea <_dtoa_r+0x74a>
 800536c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800536e:	9f06      	ldr	r7, [sp, #24]
 8005370:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005372:	e745      	b.n	8005200 <_dtoa_r+0x760>
 8005374:	3fe00000 	.word	0x3fe00000
 8005378:	40240000 	.word	0x40240000
 800537c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800537e:	e76a      	b.n	8005256 <_dtoa_r+0x7b6>
 8005380:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005382:	2b01      	cmp	r3, #1
 8005384:	dc19      	bgt.n	80053ba <_dtoa_r+0x91a>
 8005386:	9b04      	ldr	r3, [sp, #16]
 8005388:	b9bb      	cbnz	r3, 80053ba <_dtoa_r+0x91a>
 800538a:	9b05      	ldr	r3, [sp, #20]
 800538c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005390:	b99b      	cbnz	r3, 80053ba <_dtoa_r+0x91a>
 8005392:	9b05      	ldr	r3, [sp, #20]
 8005394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005398:	0d1b      	lsrs	r3, r3, #20
 800539a:	051b      	lsls	r3, r3, #20
 800539c:	b183      	cbz	r3, 80053c0 <_dtoa_r+0x920>
 800539e:	f04f 0801 	mov.w	r8, #1
 80053a2:	9b06      	ldr	r3, [sp, #24]
 80053a4:	3301      	adds	r3, #1
 80053a6:	9306      	str	r3, [sp, #24]
 80053a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053aa:	3301      	adds	r3, #1
 80053ac:	9309      	str	r3, [sp, #36]	; 0x24
 80053ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f47f af6a 	bne.w	800528a <_dtoa_r+0x7ea>
 80053b6:	2001      	movs	r0, #1
 80053b8:	e76f      	b.n	800529a <_dtoa_r+0x7fa>
 80053ba:	f04f 0800 	mov.w	r8, #0
 80053be:	e7f6      	b.n	80053ae <_dtoa_r+0x90e>
 80053c0:	4698      	mov	r8, r3
 80053c2:	e7f4      	b.n	80053ae <_dtoa_r+0x90e>
 80053c4:	f43f af7d 	beq.w	80052c2 <_dtoa_r+0x822>
 80053c8:	4618      	mov	r0, r3
 80053ca:	301c      	adds	r0, #28
 80053cc:	e772      	b.n	80052b4 <_dtoa_r+0x814>
 80053ce:	9b02      	ldr	r3, [sp, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	dc36      	bgt.n	8005442 <_dtoa_r+0x9a2>
 80053d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	dd33      	ble.n	8005442 <_dtoa_r+0x9a2>
 80053da:	f8dd b008 	ldr.w	fp, [sp, #8]
 80053de:	f1bb 0f00 	cmp.w	fp, #0
 80053e2:	d10d      	bne.n	8005400 <_dtoa_r+0x960>
 80053e4:	4621      	mov	r1, r4
 80053e6:	465b      	mov	r3, fp
 80053e8:	2205      	movs	r2, #5
 80053ea:	4628      	mov	r0, r5
 80053ec:	f000 f9d0 	bl	8005790 <__multadd>
 80053f0:	4601      	mov	r1, r0
 80053f2:	4604      	mov	r4, r0
 80053f4:	4650      	mov	r0, sl
 80053f6:	f000 fbe3 	bl	8005bc0 <__mcmp>
 80053fa:	2800      	cmp	r0, #0
 80053fc:	f73f adb6 	bgt.w	8004f6c <_dtoa_r+0x4cc>
 8005400:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005402:	9f08      	ldr	r7, [sp, #32]
 8005404:	ea6f 0903 	mvn.w	r9, r3
 8005408:	f04f 0800 	mov.w	r8, #0
 800540c:	4621      	mov	r1, r4
 800540e:	4628      	mov	r0, r5
 8005410:	f000 f99c 	bl	800574c <_Bfree>
 8005414:	2e00      	cmp	r6, #0
 8005416:	f43f aea4 	beq.w	8005162 <_dtoa_r+0x6c2>
 800541a:	f1b8 0f00 	cmp.w	r8, #0
 800541e:	d005      	beq.n	800542c <_dtoa_r+0x98c>
 8005420:	45b0      	cmp	r8, r6
 8005422:	d003      	beq.n	800542c <_dtoa_r+0x98c>
 8005424:	4641      	mov	r1, r8
 8005426:	4628      	mov	r0, r5
 8005428:	f000 f990 	bl	800574c <_Bfree>
 800542c:	4631      	mov	r1, r6
 800542e:	4628      	mov	r0, r5
 8005430:	f000 f98c 	bl	800574c <_Bfree>
 8005434:	e695      	b.n	8005162 <_dtoa_r+0x6c2>
 8005436:	2400      	movs	r4, #0
 8005438:	4626      	mov	r6, r4
 800543a:	e7e1      	b.n	8005400 <_dtoa_r+0x960>
 800543c:	46c1      	mov	r9, r8
 800543e:	4626      	mov	r6, r4
 8005440:	e594      	b.n	8004f6c <_dtoa_r+0x4cc>
 8005442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005444:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80fc 	beq.w	8005646 <_dtoa_r+0xba6>
 800544e:	2f00      	cmp	r7, #0
 8005450:	dd05      	ble.n	800545e <_dtoa_r+0x9be>
 8005452:	4631      	mov	r1, r6
 8005454:	463a      	mov	r2, r7
 8005456:	4628      	mov	r0, r5
 8005458:	f000 fb46 	bl	8005ae8 <__lshift>
 800545c:	4606      	mov	r6, r0
 800545e:	f1b8 0f00 	cmp.w	r8, #0
 8005462:	d05c      	beq.n	800551e <_dtoa_r+0xa7e>
 8005464:	4628      	mov	r0, r5
 8005466:	6871      	ldr	r1, [r6, #4]
 8005468:	f000 f930 	bl	80056cc <_Balloc>
 800546c:	4607      	mov	r7, r0
 800546e:	b928      	cbnz	r0, 800547c <_dtoa_r+0x9dc>
 8005470:	4602      	mov	r2, r0
 8005472:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005476:	4b7e      	ldr	r3, [pc, #504]	; (8005670 <_dtoa_r+0xbd0>)
 8005478:	f7ff bb26 	b.w	8004ac8 <_dtoa_r+0x28>
 800547c:	6932      	ldr	r2, [r6, #16]
 800547e:	f106 010c 	add.w	r1, r6, #12
 8005482:	3202      	adds	r2, #2
 8005484:	0092      	lsls	r2, r2, #2
 8005486:	300c      	adds	r0, #12
 8005488:	f000 f912 	bl	80056b0 <memcpy>
 800548c:	2201      	movs	r2, #1
 800548e:	4639      	mov	r1, r7
 8005490:	4628      	mov	r0, r5
 8005492:	f000 fb29 	bl	8005ae8 <__lshift>
 8005496:	46b0      	mov	r8, r6
 8005498:	4606      	mov	r6, r0
 800549a:	9b08      	ldr	r3, [sp, #32]
 800549c:	3301      	adds	r3, #1
 800549e:	9302      	str	r3, [sp, #8]
 80054a0:	9b08      	ldr	r3, [sp, #32]
 80054a2:	445b      	add	r3, fp
 80054a4:	930a      	str	r3, [sp, #40]	; 0x28
 80054a6:	9b04      	ldr	r3, [sp, #16]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	9309      	str	r3, [sp, #36]	; 0x24
 80054ae:	9b02      	ldr	r3, [sp, #8]
 80054b0:	4621      	mov	r1, r4
 80054b2:	4650      	mov	r0, sl
 80054b4:	f103 3bff 	add.w	fp, r3, #4294967295
 80054b8:	f7ff fa62 	bl	8004980 <quorem>
 80054bc:	4603      	mov	r3, r0
 80054be:	4641      	mov	r1, r8
 80054c0:	3330      	adds	r3, #48	; 0x30
 80054c2:	9004      	str	r0, [sp, #16]
 80054c4:	4650      	mov	r0, sl
 80054c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80054c8:	f000 fb7a 	bl	8005bc0 <__mcmp>
 80054cc:	4632      	mov	r2, r6
 80054ce:	9006      	str	r0, [sp, #24]
 80054d0:	4621      	mov	r1, r4
 80054d2:	4628      	mov	r0, r5
 80054d4:	f000 fb90 	bl	8005bf8 <__mdiff>
 80054d8:	68c2      	ldr	r2, [r0, #12]
 80054da:	4607      	mov	r7, r0
 80054dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054de:	bb02      	cbnz	r2, 8005522 <_dtoa_r+0xa82>
 80054e0:	4601      	mov	r1, r0
 80054e2:	4650      	mov	r0, sl
 80054e4:	f000 fb6c 	bl	8005bc0 <__mcmp>
 80054e8:	4602      	mov	r2, r0
 80054ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ec:	4639      	mov	r1, r7
 80054ee:	4628      	mov	r0, r5
 80054f0:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80054f4:	f000 f92a 	bl	800574c <_Bfree>
 80054f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80054fc:	9f02      	ldr	r7, [sp, #8]
 80054fe:	ea43 0102 	orr.w	r1, r3, r2
 8005502:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005504:	430b      	orrs	r3, r1
 8005506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005508:	d10d      	bne.n	8005526 <_dtoa_r+0xa86>
 800550a:	2b39      	cmp	r3, #57	; 0x39
 800550c:	d027      	beq.n	800555e <_dtoa_r+0xabe>
 800550e:	9a06      	ldr	r2, [sp, #24]
 8005510:	2a00      	cmp	r2, #0
 8005512:	dd01      	ble.n	8005518 <_dtoa_r+0xa78>
 8005514:	9b04      	ldr	r3, [sp, #16]
 8005516:	3331      	adds	r3, #49	; 0x31
 8005518:	f88b 3000 	strb.w	r3, [fp]
 800551c:	e776      	b.n	800540c <_dtoa_r+0x96c>
 800551e:	4630      	mov	r0, r6
 8005520:	e7b9      	b.n	8005496 <_dtoa_r+0x9f6>
 8005522:	2201      	movs	r2, #1
 8005524:	e7e2      	b.n	80054ec <_dtoa_r+0xa4c>
 8005526:	9906      	ldr	r1, [sp, #24]
 8005528:	2900      	cmp	r1, #0
 800552a:	db04      	blt.n	8005536 <_dtoa_r+0xa96>
 800552c:	9822      	ldr	r0, [sp, #136]	; 0x88
 800552e:	4301      	orrs	r1, r0
 8005530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005532:	4301      	orrs	r1, r0
 8005534:	d120      	bne.n	8005578 <_dtoa_r+0xad8>
 8005536:	2a00      	cmp	r2, #0
 8005538:	ddee      	ble.n	8005518 <_dtoa_r+0xa78>
 800553a:	4651      	mov	r1, sl
 800553c:	2201      	movs	r2, #1
 800553e:	4628      	mov	r0, r5
 8005540:	9302      	str	r3, [sp, #8]
 8005542:	f000 fad1 	bl	8005ae8 <__lshift>
 8005546:	4621      	mov	r1, r4
 8005548:	4682      	mov	sl, r0
 800554a:	f000 fb39 	bl	8005bc0 <__mcmp>
 800554e:	2800      	cmp	r0, #0
 8005550:	9b02      	ldr	r3, [sp, #8]
 8005552:	dc02      	bgt.n	800555a <_dtoa_r+0xaba>
 8005554:	d1e0      	bne.n	8005518 <_dtoa_r+0xa78>
 8005556:	07da      	lsls	r2, r3, #31
 8005558:	d5de      	bpl.n	8005518 <_dtoa_r+0xa78>
 800555a:	2b39      	cmp	r3, #57	; 0x39
 800555c:	d1da      	bne.n	8005514 <_dtoa_r+0xa74>
 800555e:	2339      	movs	r3, #57	; 0x39
 8005560:	f88b 3000 	strb.w	r3, [fp]
 8005564:	463b      	mov	r3, r7
 8005566:	461f      	mov	r7, r3
 8005568:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800556c:	3b01      	subs	r3, #1
 800556e:	2a39      	cmp	r2, #57	; 0x39
 8005570:	d050      	beq.n	8005614 <_dtoa_r+0xb74>
 8005572:	3201      	adds	r2, #1
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	e749      	b.n	800540c <_dtoa_r+0x96c>
 8005578:	2a00      	cmp	r2, #0
 800557a:	dd03      	ble.n	8005584 <_dtoa_r+0xae4>
 800557c:	2b39      	cmp	r3, #57	; 0x39
 800557e:	d0ee      	beq.n	800555e <_dtoa_r+0xabe>
 8005580:	3301      	adds	r3, #1
 8005582:	e7c9      	b.n	8005518 <_dtoa_r+0xa78>
 8005584:	9a02      	ldr	r2, [sp, #8]
 8005586:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005588:	f802 3c01 	strb.w	r3, [r2, #-1]
 800558c:	428a      	cmp	r2, r1
 800558e:	d02a      	beq.n	80055e6 <_dtoa_r+0xb46>
 8005590:	4651      	mov	r1, sl
 8005592:	2300      	movs	r3, #0
 8005594:	220a      	movs	r2, #10
 8005596:	4628      	mov	r0, r5
 8005598:	f000 f8fa 	bl	8005790 <__multadd>
 800559c:	45b0      	cmp	r8, r6
 800559e:	4682      	mov	sl, r0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	f04f 020a 	mov.w	r2, #10
 80055a8:	4641      	mov	r1, r8
 80055aa:	4628      	mov	r0, r5
 80055ac:	d107      	bne.n	80055be <_dtoa_r+0xb1e>
 80055ae:	f000 f8ef 	bl	8005790 <__multadd>
 80055b2:	4680      	mov	r8, r0
 80055b4:	4606      	mov	r6, r0
 80055b6:	9b02      	ldr	r3, [sp, #8]
 80055b8:	3301      	adds	r3, #1
 80055ba:	9302      	str	r3, [sp, #8]
 80055bc:	e777      	b.n	80054ae <_dtoa_r+0xa0e>
 80055be:	f000 f8e7 	bl	8005790 <__multadd>
 80055c2:	4631      	mov	r1, r6
 80055c4:	4680      	mov	r8, r0
 80055c6:	2300      	movs	r3, #0
 80055c8:	220a      	movs	r2, #10
 80055ca:	4628      	mov	r0, r5
 80055cc:	f000 f8e0 	bl	8005790 <__multadd>
 80055d0:	4606      	mov	r6, r0
 80055d2:	e7f0      	b.n	80055b6 <_dtoa_r+0xb16>
 80055d4:	f1bb 0f00 	cmp.w	fp, #0
 80055d8:	bfcc      	ite	gt
 80055da:	465f      	movgt	r7, fp
 80055dc:	2701      	movle	r7, #1
 80055de:	f04f 0800 	mov.w	r8, #0
 80055e2:	9a08      	ldr	r2, [sp, #32]
 80055e4:	4417      	add	r7, r2
 80055e6:	4651      	mov	r1, sl
 80055e8:	2201      	movs	r2, #1
 80055ea:	4628      	mov	r0, r5
 80055ec:	9302      	str	r3, [sp, #8]
 80055ee:	f000 fa7b 	bl	8005ae8 <__lshift>
 80055f2:	4621      	mov	r1, r4
 80055f4:	4682      	mov	sl, r0
 80055f6:	f000 fae3 	bl	8005bc0 <__mcmp>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	dcb2      	bgt.n	8005564 <_dtoa_r+0xac4>
 80055fe:	d102      	bne.n	8005606 <_dtoa_r+0xb66>
 8005600:	9b02      	ldr	r3, [sp, #8]
 8005602:	07db      	lsls	r3, r3, #31
 8005604:	d4ae      	bmi.n	8005564 <_dtoa_r+0xac4>
 8005606:	463b      	mov	r3, r7
 8005608:	461f      	mov	r7, r3
 800560a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800560e:	2a30      	cmp	r2, #48	; 0x30
 8005610:	d0fa      	beq.n	8005608 <_dtoa_r+0xb68>
 8005612:	e6fb      	b.n	800540c <_dtoa_r+0x96c>
 8005614:	9a08      	ldr	r2, [sp, #32]
 8005616:	429a      	cmp	r2, r3
 8005618:	d1a5      	bne.n	8005566 <_dtoa_r+0xac6>
 800561a:	2331      	movs	r3, #49	; 0x31
 800561c:	f109 0901 	add.w	r9, r9, #1
 8005620:	7013      	strb	r3, [r2, #0]
 8005622:	e6f3      	b.n	800540c <_dtoa_r+0x96c>
 8005624:	4b13      	ldr	r3, [pc, #76]	; (8005674 <_dtoa_r+0xbd4>)
 8005626:	f7ff baa7 	b.w	8004b78 <_dtoa_r+0xd8>
 800562a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800562c:	2b00      	cmp	r3, #0
 800562e:	f47f aa80 	bne.w	8004b32 <_dtoa_r+0x92>
 8005632:	4b11      	ldr	r3, [pc, #68]	; (8005678 <_dtoa_r+0xbd8>)
 8005634:	f7ff baa0 	b.w	8004b78 <_dtoa_r+0xd8>
 8005638:	f1bb 0f00 	cmp.w	fp, #0
 800563c:	dc03      	bgt.n	8005646 <_dtoa_r+0xba6>
 800563e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005640:	2b02      	cmp	r3, #2
 8005642:	f73f aecc 	bgt.w	80053de <_dtoa_r+0x93e>
 8005646:	9f08      	ldr	r7, [sp, #32]
 8005648:	4621      	mov	r1, r4
 800564a:	4650      	mov	r0, sl
 800564c:	f7ff f998 	bl	8004980 <quorem>
 8005650:	9a08      	ldr	r2, [sp, #32]
 8005652:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005656:	f807 3b01 	strb.w	r3, [r7], #1
 800565a:	1aba      	subs	r2, r7, r2
 800565c:	4593      	cmp	fp, r2
 800565e:	ddb9      	ble.n	80055d4 <_dtoa_r+0xb34>
 8005660:	4651      	mov	r1, sl
 8005662:	2300      	movs	r3, #0
 8005664:	220a      	movs	r2, #10
 8005666:	4628      	mov	r0, r5
 8005668:	f000 f892 	bl	8005790 <__multadd>
 800566c:	4682      	mov	sl, r0
 800566e:	e7eb      	b.n	8005648 <_dtoa_r+0xba8>
 8005670:	080071e3 	.word	0x080071e3
 8005674:	0800713c 	.word	0x0800713c
 8005678:	08007160 	.word	0x08007160

0800567c <_localeconv_r>:
 800567c:	4800      	ldr	r0, [pc, #0]	; (8005680 <_localeconv_r+0x4>)
 800567e:	4770      	bx	lr
 8005680:	200001f4 	.word	0x200001f4

08005684 <malloc>:
 8005684:	4b02      	ldr	r3, [pc, #8]	; (8005690 <malloc+0xc>)
 8005686:	4601      	mov	r1, r0
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	f000 bbfb 	b.w	8005e84 <_malloc_r>
 800568e:	bf00      	nop
 8005690:	200000a0 	.word	0x200000a0

08005694 <memchr>:
 8005694:	4603      	mov	r3, r0
 8005696:	b510      	push	{r4, lr}
 8005698:	b2c9      	uxtb	r1, r1
 800569a:	4402      	add	r2, r0
 800569c:	4293      	cmp	r3, r2
 800569e:	4618      	mov	r0, r3
 80056a0:	d101      	bne.n	80056a6 <memchr+0x12>
 80056a2:	2000      	movs	r0, #0
 80056a4:	e003      	b.n	80056ae <memchr+0x1a>
 80056a6:	7804      	ldrb	r4, [r0, #0]
 80056a8:	3301      	adds	r3, #1
 80056aa:	428c      	cmp	r4, r1
 80056ac:	d1f6      	bne.n	800569c <memchr+0x8>
 80056ae:	bd10      	pop	{r4, pc}

080056b0 <memcpy>:
 80056b0:	440a      	add	r2, r1
 80056b2:	4291      	cmp	r1, r2
 80056b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056b8:	d100      	bne.n	80056bc <memcpy+0xc>
 80056ba:	4770      	bx	lr
 80056bc:	b510      	push	{r4, lr}
 80056be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056c2:	4291      	cmp	r1, r2
 80056c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056c8:	d1f9      	bne.n	80056be <memcpy+0xe>
 80056ca:	bd10      	pop	{r4, pc}

080056cc <_Balloc>:
 80056cc:	b570      	push	{r4, r5, r6, lr}
 80056ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80056d0:	4604      	mov	r4, r0
 80056d2:	460d      	mov	r5, r1
 80056d4:	b976      	cbnz	r6, 80056f4 <_Balloc+0x28>
 80056d6:	2010      	movs	r0, #16
 80056d8:	f7ff ffd4 	bl	8005684 <malloc>
 80056dc:	4602      	mov	r2, r0
 80056de:	6260      	str	r0, [r4, #36]	; 0x24
 80056e0:	b920      	cbnz	r0, 80056ec <_Balloc+0x20>
 80056e2:	2166      	movs	r1, #102	; 0x66
 80056e4:	4b17      	ldr	r3, [pc, #92]	; (8005744 <_Balloc+0x78>)
 80056e6:	4818      	ldr	r0, [pc, #96]	; (8005748 <_Balloc+0x7c>)
 80056e8:	f000 fc36 	bl	8005f58 <__assert_func>
 80056ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056f0:	6006      	str	r6, [r0, #0]
 80056f2:	60c6      	str	r6, [r0, #12]
 80056f4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80056f6:	68f3      	ldr	r3, [r6, #12]
 80056f8:	b183      	cbz	r3, 800571c <_Balloc+0x50>
 80056fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005702:	b9b8      	cbnz	r0, 8005734 <_Balloc+0x68>
 8005704:	2101      	movs	r1, #1
 8005706:	fa01 f605 	lsl.w	r6, r1, r5
 800570a:	1d72      	adds	r2, r6, #5
 800570c:	4620      	mov	r0, r4
 800570e:	0092      	lsls	r2, r2, #2
 8005710:	f000 fb5e 	bl	8005dd0 <_calloc_r>
 8005714:	b160      	cbz	r0, 8005730 <_Balloc+0x64>
 8005716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800571a:	e00e      	b.n	800573a <_Balloc+0x6e>
 800571c:	2221      	movs	r2, #33	; 0x21
 800571e:	2104      	movs	r1, #4
 8005720:	4620      	mov	r0, r4
 8005722:	f000 fb55 	bl	8005dd0 <_calloc_r>
 8005726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005728:	60f0      	str	r0, [r6, #12]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d1e4      	bne.n	80056fa <_Balloc+0x2e>
 8005730:	2000      	movs	r0, #0
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	6802      	ldr	r2, [r0, #0]
 8005736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800573a:	2300      	movs	r3, #0
 800573c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005740:	e7f7      	b.n	8005732 <_Balloc+0x66>
 8005742:	bf00      	nop
 8005744:	0800716d 	.word	0x0800716d
 8005748:	080071f4 	.word	0x080071f4

0800574c <_Bfree>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005750:	4605      	mov	r5, r0
 8005752:	460c      	mov	r4, r1
 8005754:	b976      	cbnz	r6, 8005774 <_Bfree+0x28>
 8005756:	2010      	movs	r0, #16
 8005758:	f7ff ff94 	bl	8005684 <malloc>
 800575c:	4602      	mov	r2, r0
 800575e:	6268      	str	r0, [r5, #36]	; 0x24
 8005760:	b920      	cbnz	r0, 800576c <_Bfree+0x20>
 8005762:	218a      	movs	r1, #138	; 0x8a
 8005764:	4b08      	ldr	r3, [pc, #32]	; (8005788 <_Bfree+0x3c>)
 8005766:	4809      	ldr	r0, [pc, #36]	; (800578c <_Bfree+0x40>)
 8005768:	f000 fbf6 	bl	8005f58 <__assert_func>
 800576c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005770:	6006      	str	r6, [r0, #0]
 8005772:	60c6      	str	r6, [r0, #12]
 8005774:	b13c      	cbz	r4, 8005786 <_Bfree+0x3a>
 8005776:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005778:	6862      	ldr	r2, [r4, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005780:	6021      	str	r1, [r4, #0]
 8005782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	0800716d 	.word	0x0800716d
 800578c:	080071f4 	.word	0x080071f4

08005790 <__multadd>:
 8005790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005794:	4698      	mov	r8, r3
 8005796:	460c      	mov	r4, r1
 8005798:	2300      	movs	r3, #0
 800579a:	690e      	ldr	r6, [r1, #16]
 800579c:	4607      	mov	r7, r0
 800579e:	f101 0014 	add.w	r0, r1, #20
 80057a2:	6805      	ldr	r5, [r0, #0]
 80057a4:	3301      	adds	r3, #1
 80057a6:	b2a9      	uxth	r1, r5
 80057a8:	fb02 8101 	mla	r1, r2, r1, r8
 80057ac:	0c2d      	lsrs	r5, r5, #16
 80057ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80057b2:	fb02 c505 	mla	r5, r2, r5, ip
 80057b6:	b289      	uxth	r1, r1
 80057b8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80057bc:	429e      	cmp	r6, r3
 80057be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80057c2:	f840 1b04 	str.w	r1, [r0], #4
 80057c6:	dcec      	bgt.n	80057a2 <__multadd+0x12>
 80057c8:	f1b8 0f00 	cmp.w	r8, #0
 80057cc:	d022      	beq.n	8005814 <__multadd+0x84>
 80057ce:	68a3      	ldr	r3, [r4, #8]
 80057d0:	42b3      	cmp	r3, r6
 80057d2:	dc19      	bgt.n	8005808 <__multadd+0x78>
 80057d4:	6861      	ldr	r1, [r4, #4]
 80057d6:	4638      	mov	r0, r7
 80057d8:	3101      	adds	r1, #1
 80057da:	f7ff ff77 	bl	80056cc <_Balloc>
 80057de:	4605      	mov	r5, r0
 80057e0:	b928      	cbnz	r0, 80057ee <__multadd+0x5e>
 80057e2:	4602      	mov	r2, r0
 80057e4:	21b5      	movs	r1, #181	; 0xb5
 80057e6:	4b0d      	ldr	r3, [pc, #52]	; (800581c <__multadd+0x8c>)
 80057e8:	480d      	ldr	r0, [pc, #52]	; (8005820 <__multadd+0x90>)
 80057ea:	f000 fbb5 	bl	8005f58 <__assert_func>
 80057ee:	6922      	ldr	r2, [r4, #16]
 80057f0:	f104 010c 	add.w	r1, r4, #12
 80057f4:	3202      	adds	r2, #2
 80057f6:	0092      	lsls	r2, r2, #2
 80057f8:	300c      	adds	r0, #12
 80057fa:	f7ff ff59 	bl	80056b0 <memcpy>
 80057fe:	4621      	mov	r1, r4
 8005800:	4638      	mov	r0, r7
 8005802:	f7ff ffa3 	bl	800574c <_Bfree>
 8005806:	462c      	mov	r4, r5
 8005808:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800580c:	3601      	adds	r6, #1
 800580e:	f8c3 8014 	str.w	r8, [r3, #20]
 8005812:	6126      	str	r6, [r4, #16]
 8005814:	4620      	mov	r0, r4
 8005816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800581a:	bf00      	nop
 800581c:	080071e3 	.word	0x080071e3
 8005820:	080071f4 	.word	0x080071f4

08005824 <__hi0bits>:
 8005824:	0c02      	lsrs	r2, r0, #16
 8005826:	0412      	lsls	r2, r2, #16
 8005828:	4603      	mov	r3, r0
 800582a:	b9ca      	cbnz	r2, 8005860 <__hi0bits+0x3c>
 800582c:	0403      	lsls	r3, r0, #16
 800582e:	2010      	movs	r0, #16
 8005830:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005834:	bf04      	itt	eq
 8005836:	021b      	lsleq	r3, r3, #8
 8005838:	3008      	addeq	r0, #8
 800583a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800583e:	bf04      	itt	eq
 8005840:	011b      	lsleq	r3, r3, #4
 8005842:	3004      	addeq	r0, #4
 8005844:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005848:	bf04      	itt	eq
 800584a:	009b      	lsleq	r3, r3, #2
 800584c:	3002      	addeq	r0, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	db05      	blt.n	800585e <__hi0bits+0x3a>
 8005852:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005856:	f100 0001 	add.w	r0, r0, #1
 800585a:	bf08      	it	eq
 800585c:	2020      	moveq	r0, #32
 800585e:	4770      	bx	lr
 8005860:	2000      	movs	r0, #0
 8005862:	e7e5      	b.n	8005830 <__hi0bits+0xc>

08005864 <__lo0bits>:
 8005864:	6803      	ldr	r3, [r0, #0]
 8005866:	4602      	mov	r2, r0
 8005868:	f013 0007 	ands.w	r0, r3, #7
 800586c:	d00b      	beq.n	8005886 <__lo0bits+0x22>
 800586e:	07d9      	lsls	r1, r3, #31
 8005870:	d422      	bmi.n	80058b8 <__lo0bits+0x54>
 8005872:	0798      	lsls	r0, r3, #30
 8005874:	bf49      	itett	mi
 8005876:	085b      	lsrmi	r3, r3, #1
 8005878:	089b      	lsrpl	r3, r3, #2
 800587a:	2001      	movmi	r0, #1
 800587c:	6013      	strmi	r3, [r2, #0]
 800587e:	bf5c      	itt	pl
 8005880:	2002      	movpl	r0, #2
 8005882:	6013      	strpl	r3, [r2, #0]
 8005884:	4770      	bx	lr
 8005886:	b299      	uxth	r1, r3
 8005888:	b909      	cbnz	r1, 800588e <__lo0bits+0x2a>
 800588a:	2010      	movs	r0, #16
 800588c:	0c1b      	lsrs	r3, r3, #16
 800588e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005892:	bf04      	itt	eq
 8005894:	0a1b      	lsreq	r3, r3, #8
 8005896:	3008      	addeq	r0, #8
 8005898:	0719      	lsls	r1, r3, #28
 800589a:	bf04      	itt	eq
 800589c:	091b      	lsreq	r3, r3, #4
 800589e:	3004      	addeq	r0, #4
 80058a0:	0799      	lsls	r1, r3, #30
 80058a2:	bf04      	itt	eq
 80058a4:	089b      	lsreq	r3, r3, #2
 80058a6:	3002      	addeq	r0, #2
 80058a8:	07d9      	lsls	r1, r3, #31
 80058aa:	d403      	bmi.n	80058b4 <__lo0bits+0x50>
 80058ac:	085b      	lsrs	r3, r3, #1
 80058ae:	f100 0001 	add.w	r0, r0, #1
 80058b2:	d003      	beq.n	80058bc <__lo0bits+0x58>
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	4770      	bx	lr
 80058b8:	2000      	movs	r0, #0
 80058ba:	4770      	bx	lr
 80058bc:	2020      	movs	r0, #32
 80058be:	4770      	bx	lr

080058c0 <__i2b>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	460c      	mov	r4, r1
 80058c4:	2101      	movs	r1, #1
 80058c6:	f7ff ff01 	bl	80056cc <_Balloc>
 80058ca:	4602      	mov	r2, r0
 80058cc:	b928      	cbnz	r0, 80058da <__i2b+0x1a>
 80058ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80058d2:	4b04      	ldr	r3, [pc, #16]	; (80058e4 <__i2b+0x24>)
 80058d4:	4804      	ldr	r0, [pc, #16]	; (80058e8 <__i2b+0x28>)
 80058d6:	f000 fb3f 	bl	8005f58 <__assert_func>
 80058da:	2301      	movs	r3, #1
 80058dc:	6144      	str	r4, [r0, #20]
 80058de:	6103      	str	r3, [r0, #16]
 80058e0:	bd10      	pop	{r4, pc}
 80058e2:	bf00      	nop
 80058e4:	080071e3 	.word	0x080071e3
 80058e8:	080071f4 	.word	0x080071f4

080058ec <__multiply>:
 80058ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f0:	4614      	mov	r4, r2
 80058f2:	690a      	ldr	r2, [r1, #16]
 80058f4:	6923      	ldr	r3, [r4, #16]
 80058f6:	460d      	mov	r5, r1
 80058f8:	429a      	cmp	r2, r3
 80058fa:	bfbe      	ittt	lt
 80058fc:	460b      	movlt	r3, r1
 80058fe:	4625      	movlt	r5, r4
 8005900:	461c      	movlt	r4, r3
 8005902:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005906:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800590a:	68ab      	ldr	r3, [r5, #8]
 800590c:	6869      	ldr	r1, [r5, #4]
 800590e:	eb0a 0709 	add.w	r7, sl, r9
 8005912:	42bb      	cmp	r3, r7
 8005914:	b085      	sub	sp, #20
 8005916:	bfb8      	it	lt
 8005918:	3101      	addlt	r1, #1
 800591a:	f7ff fed7 	bl	80056cc <_Balloc>
 800591e:	b930      	cbnz	r0, 800592e <__multiply+0x42>
 8005920:	4602      	mov	r2, r0
 8005922:	f240 115d 	movw	r1, #349	; 0x15d
 8005926:	4b41      	ldr	r3, [pc, #260]	; (8005a2c <__multiply+0x140>)
 8005928:	4841      	ldr	r0, [pc, #260]	; (8005a30 <__multiply+0x144>)
 800592a:	f000 fb15 	bl	8005f58 <__assert_func>
 800592e:	f100 0614 	add.w	r6, r0, #20
 8005932:	4633      	mov	r3, r6
 8005934:	2200      	movs	r2, #0
 8005936:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800593a:	4543      	cmp	r3, r8
 800593c:	d31e      	bcc.n	800597c <__multiply+0x90>
 800593e:	f105 0c14 	add.w	ip, r5, #20
 8005942:	f104 0314 	add.w	r3, r4, #20
 8005946:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800594a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800594e:	9202      	str	r2, [sp, #8]
 8005950:	ebac 0205 	sub.w	r2, ip, r5
 8005954:	3a15      	subs	r2, #21
 8005956:	f022 0203 	bic.w	r2, r2, #3
 800595a:	3204      	adds	r2, #4
 800595c:	f105 0115 	add.w	r1, r5, #21
 8005960:	458c      	cmp	ip, r1
 8005962:	bf38      	it	cc
 8005964:	2204      	movcc	r2, #4
 8005966:	9201      	str	r2, [sp, #4]
 8005968:	9a02      	ldr	r2, [sp, #8]
 800596a:	9303      	str	r3, [sp, #12]
 800596c:	429a      	cmp	r2, r3
 800596e:	d808      	bhi.n	8005982 <__multiply+0x96>
 8005970:	2f00      	cmp	r7, #0
 8005972:	dc55      	bgt.n	8005a20 <__multiply+0x134>
 8005974:	6107      	str	r7, [r0, #16]
 8005976:	b005      	add	sp, #20
 8005978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597c:	f843 2b04 	str.w	r2, [r3], #4
 8005980:	e7db      	b.n	800593a <__multiply+0x4e>
 8005982:	f8b3 a000 	ldrh.w	sl, [r3]
 8005986:	f1ba 0f00 	cmp.w	sl, #0
 800598a:	d020      	beq.n	80059ce <__multiply+0xe2>
 800598c:	46b1      	mov	r9, r6
 800598e:	2200      	movs	r2, #0
 8005990:	f105 0e14 	add.w	lr, r5, #20
 8005994:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005998:	f8d9 b000 	ldr.w	fp, [r9]
 800599c:	b2a1      	uxth	r1, r4
 800599e:	fa1f fb8b 	uxth.w	fp, fp
 80059a2:	fb0a b101 	mla	r1, sl, r1, fp
 80059a6:	4411      	add	r1, r2
 80059a8:	f8d9 2000 	ldr.w	r2, [r9]
 80059ac:	0c24      	lsrs	r4, r4, #16
 80059ae:	0c12      	lsrs	r2, r2, #16
 80059b0:	fb0a 2404 	mla	r4, sl, r4, r2
 80059b4:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80059b8:	b289      	uxth	r1, r1
 80059ba:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80059be:	45f4      	cmp	ip, lr
 80059c0:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80059c4:	f849 1b04 	str.w	r1, [r9], #4
 80059c8:	d8e4      	bhi.n	8005994 <__multiply+0xa8>
 80059ca:	9901      	ldr	r1, [sp, #4]
 80059cc:	5072      	str	r2, [r6, r1]
 80059ce:	9a03      	ldr	r2, [sp, #12]
 80059d0:	3304      	adds	r3, #4
 80059d2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80059d6:	f1b9 0f00 	cmp.w	r9, #0
 80059da:	d01f      	beq.n	8005a1c <__multiply+0x130>
 80059dc:	46b6      	mov	lr, r6
 80059de:	f04f 0a00 	mov.w	sl, #0
 80059e2:	6834      	ldr	r4, [r6, #0]
 80059e4:	f105 0114 	add.w	r1, r5, #20
 80059e8:	880a      	ldrh	r2, [r1, #0]
 80059ea:	f8be b002 	ldrh.w	fp, [lr, #2]
 80059ee:	b2a4      	uxth	r4, r4
 80059f0:	fb09 b202 	mla	r2, r9, r2, fp
 80059f4:	4492      	add	sl, r2
 80059f6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80059fa:	f84e 4b04 	str.w	r4, [lr], #4
 80059fe:	f851 4b04 	ldr.w	r4, [r1], #4
 8005a02:	f8be 2000 	ldrh.w	r2, [lr]
 8005a06:	0c24      	lsrs	r4, r4, #16
 8005a08:	fb09 2404 	mla	r4, r9, r4, r2
 8005a0c:	458c      	cmp	ip, r1
 8005a0e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005a12:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005a16:	d8e7      	bhi.n	80059e8 <__multiply+0xfc>
 8005a18:	9a01      	ldr	r2, [sp, #4]
 8005a1a:	50b4      	str	r4, [r6, r2]
 8005a1c:	3604      	adds	r6, #4
 8005a1e:	e7a3      	b.n	8005968 <__multiply+0x7c>
 8005a20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1a5      	bne.n	8005974 <__multiply+0x88>
 8005a28:	3f01      	subs	r7, #1
 8005a2a:	e7a1      	b.n	8005970 <__multiply+0x84>
 8005a2c:	080071e3 	.word	0x080071e3
 8005a30:	080071f4 	.word	0x080071f4

08005a34 <__pow5mult>:
 8005a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a38:	4615      	mov	r5, r2
 8005a3a:	f012 0203 	ands.w	r2, r2, #3
 8005a3e:	4606      	mov	r6, r0
 8005a40:	460f      	mov	r7, r1
 8005a42:	d007      	beq.n	8005a54 <__pow5mult+0x20>
 8005a44:	4c25      	ldr	r4, [pc, #148]	; (8005adc <__pow5mult+0xa8>)
 8005a46:	3a01      	subs	r2, #1
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a4e:	f7ff fe9f 	bl	8005790 <__multadd>
 8005a52:	4607      	mov	r7, r0
 8005a54:	10ad      	asrs	r5, r5, #2
 8005a56:	d03d      	beq.n	8005ad4 <__pow5mult+0xa0>
 8005a58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005a5a:	b97c      	cbnz	r4, 8005a7c <__pow5mult+0x48>
 8005a5c:	2010      	movs	r0, #16
 8005a5e:	f7ff fe11 	bl	8005684 <malloc>
 8005a62:	4602      	mov	r2, r0
 8005a64:	6270      	str	r0, [r6, #36]	; 0x24
 8005a66:	b928      	cbnz	r0, 8005a74 <__pow5mult+0x40>
 8005a68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005a6c:	4b1c      	ldr	r3, [pc, #112]	; (8005ae0 <__pow5mult+0xac>)
 8005a6e:	481d      	ldr	r0, [pc, #116]	; (8005ae4 <__pow5mult+0xb0>)
 8005a70:	f000 fa72 	bl	8005f58 <__assert_func>
 8005a74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a78:	6004      	str	r4, [r0, #0]
 8005a7a:	60c4      	str	r4, [r0, #12]
 8005a7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005a80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a84:	b94c      	cbnz	r4, 8005a9a <__pow5mult+0x66>
 8005a86:	f240 2171 	movw	r1, #625	; 0x271
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f7ff ff18 	bl	80058c0 <__i2b>
 8005a90:	2300      	movs	r3, #0
 8005a92:	4604      	mov	r4, r0
 8005a94:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a98:	6003      	str	r3, [r0, #0]
 8005a9a:	f04f 0900 	mov.w	r9, #0
 8005a9e:	07eb      	lsls	r3, r5, #31
 8005aa0:	d50a      	bpl.n	8005ab8 <__pow5mult+0x84>
 8005aa2:	4639      	mov	r1, r7
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	4630      	mov	r0, r6
 8005aa8:	f7ff ff20 	bl	80058ec <__multiply>
 8005aac:	4680      	mov	r8, r0
 8005aae:	4639      	mov	r1, r7
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	f7ff fe4b 	bl	800574c <_Bfree>
 8005ab6:	4647      	mov	r7, r8
 8005ab8:	106d      	asrs	r5, r5, #1
 8005aba:	d00b      	beq.n	8005ad4 <__pow5mult+0xa0>
 8005abc:	6820      	ldr	r0, [r4, #0]
 8005abe:	b938      	cbnz	r0, 8005ad0 <__pow5mult+0x9c>
 8005ac0:	4622      	mov	r2, r4
 8005ac2:	4621      	mov	r1, r4
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	f7ff ff11 	bl	80058ec <__multiply>
 8005aca:	6020      	str	r0, [r4, #0]
 8005acc:	f8c0 9000 	str.w	r9, [r0]
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	e7e4      	b.n	8005a9e <__pow5mult+0x6a>
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ada:	bf00      	nop
 8005adc:	08007348 	.word	0x08007348
 8005ae0:	0800716d 	.word	0x0800716d
 8005ae4:	080071f4 	.word	0x080071f4

08005ae8 <__lshift>:
 8005ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aec:	460c      	mov	r4, r1
 8005aee:	4607      	mov	r7, r0
 8005af0:	4691      	mov	r9, r2
 8005af2:	6923      	ldr	r3, [r4, #16]
 8005af4:	6849      	ldr	r1, [r1, #4]
 8005af6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005afa:	68a3      	ldr	r3, [r4, #8]
 8005afc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b00:	f108 0601 	add.w	r6, r8, #1
 8005b04:	42b3      	cmp	r3, r6
 8005b06:	db0b      	blt.n	8005b20 <__lshift+0x38>
 8005b08:	4638      	mov	r0, r7
 8005b0a:	f7ff fddf 	bl	80056cc <_Balloc>
 8005b0e:	4605      	mov	r5, r0
 8005b10:	b948      	cbnz	r0, 8005b26 <__lshift+0x3e>
 8005b12:	4602      	mov	r2, r0
 8005b14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005b18:	4b27      	ldr	r3, [pc, #156]	; (8005bb8 <__lshift+0xd0>)
 8005b1a:	4828      	ldr	r0, [pc, #160]	; (8005bbc <__lshift+0xd4>)
 8005b1c:	f000 fa1c 	bl	8005f58 <__assert_func>
 8005b20:	3101      	adds	r1, #1
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	e7ee      	b.n	8005b04 <__lshift+0x1c>
 8005b26:	2300      	movs	r3, #0
 8005b28:	f100 0114 	add.w	r1, r0, #20
 8005b2c:	f100 0210 	add.w	r2, r0, #16
 8005b30:	4618      	mov	r0, r3
 8005b32:	4553      	cmp	r3, sl
 8005b34:	db33      	blt.n	8005b9e <__lshift+0xb6>
 8005b36:	6920      	ldr	r0, [r4, #16]
 8005b38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b3c:	f104 0314 	add.w	r3, r4, #20
 8005b40:	f019 091f 	ands.w	r9, r9, #31
 8005b44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b4c:	d02b      	beq.n	8005ba6 <__lshift+0xbe>
 8005b4e:	468a      	mov	sl, r1
 8005b50:	2200      	movs	r2, #0
 8005b52:	f1c9 0e20 	rsb	lr, r9, #32
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	fa00 f009 	lsl.w	r0, r0, r9
 8005b5c:	4302      	orrs	r2, r0
 8005b5e:	f84a 2b04 	str.w	r2, [sl], #4
 8005b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b66:	459c      	cmp	ip, r3
 8005b68:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b6c:	d8f3      	bhi.n	8005b56 <__lshift+0x6e>
 8005b6e:	ebac 0304 	sub.w	r3, ip, r4
 8005b72:	3b15      	subs	r3, #21
 8005b74:	f023 0303 	bic.w	r3, r3, #3
 8005b78:	3304      	adds	r3, #4
 8005b7a:	f104 0015 	add.w	r0, r4, #21
 8005b7e:	4584      	cmp	ip, r0
 8005b80:	bf38      	it	cc
 8005b82:	2304      	movcc	r3, #4
 8005b84:	50ca      	str	r2, [r1, r3]
 8005b86:	b10a      	cbz	r2, 8005b8c <__lshift+0xa4>
 8005b88:	f108 0602 	add.w	r6, r8, #2
 8005b8c:	3e01      	subs	r6, #1
 8005b8e:	4638      	mov	r0, r7
 8005b90:	4621      	mov	r1, r4
 8005b92:	612e      	str	r6, [r5, #16]
 8005b94:	f7ff fdda 	bl	800574c <_Bfree>
 8005b98:	4628      	mov	r0, r5
 8005b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	e7c5      	b.n	8005b32 <__lshift+0x4a>
 8005ba6:	3904      	subs	r1, #4
 8005ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bac:	459c      	cmp	ip, r3
 8005bae:	f841 2f04 	str.w	r2, [r1, #4]!
 8005bb2:	d8f9      	bhi.n	8005ba8 <__lshift+0xc0>
 8005bb4:	e7ea      	b.n	8005b8c <__lshift+0xa4>
 8005bb6:	bf00      	nop
 8005bb8:	080071e3 	.word	0x080071e3
 8005bbc:	080071f4 	.word	0x080071f4

08005bc0 <__mcmp>:
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	690a      	ldr	r2, [r1, #16]
 8005bc4:	6900      	ldr	r0, [r0, #16]
 8005bc6:	b530      	push	{r4, r5, lr}
 8005bc8:	1a80      	subs	r0, r0, r2
 8005bca:	d10d      	bne.n	8005be8 <__mcmp+0x28>
 8005bcc:	3314      	adds	r3, #20
 8005bce:	3114      	adds	r1, #20
 8005bd0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005bd4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005bd8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005bdc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005be0:	4295      	cmp	r5, r2
 8005be2:	d002      	beq.n	8005bea <__mcmp+0x2a>
 8005be4:	d304      	bcc.n	8005bf0 <__mcmp+0x30>
 8005be6:	2001      	movs	r0, #1
 8005be8:	bd30      	pop	{r4, r5, pc}
 8005bea:	42a3      	cmp	r3, r4
 8005bec:	d3f4      	bcc.n	8005bd8 <__mcmp+0x18>
 8005bee:	e7fb      	b.n	8005be8 <__mcmp+0x28>
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf4:	e7f8      	b.n	8005be8 <__mcmp+0x28>
	...

08005bf8 <__mdiff>:
 8005bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	4606      	mov	r6, r0
 8005c00:	4611      	mov	r1, r2
 8005c02:	4620      	mov	r0, r4
 8005c04:	4692      	mov	sl, r2
 8005c06:	f7ff ffdb 	bl	8005bc0 <__mcmp>
 8005c0a:	1e05      	subs	r5, r0, #0
 8005c0c:	d111      	bne.n	8005c32 <__mdiff+0x3a>
 8005c0e:	4629      	mov	r1, r5
 8005c10:	4630      	mov	r0, r6
 8005c12:	f7ff fd5b 	bl	80056cc <_Balloc>
 8005c16:	4602      	mov	r2, r0
 8005c18:	b928      	cbnz	r0, 8005c26 <__mdiff+0x2e>
 8005c1a:	f240 2132 	movw	r1, #562	; 0x232
 8005c1e:	4b3c      	ldr	r3, [pc, #240]	; (8005d10 <__mdiff+0x118>)
 8005c20:	483c      	ldr	r0, [pc, #240]	; (8005d14 <__mdiff+0x11c>)
 8005c22:	f000 f999 	bl	8005f58 <__assert_func>
 8005c26:	2301      	movs	r3, #1
 8005c28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c2c:	4610      	mov	r0, r2
 8005c2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c32:	bfa4      	itt	ge
 8005c34:	4653      	movge	r3, sl
 8005c36:	46a2      	movge	sl, r4
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005c3e:	bfa6      	itte	ge
 8005c40:	461c      	movge	r4, r3
 8005c42:	2500      	movge	r5, #0
 8005c44:	2501      	movlt	r5, #1
 8005c46:	f7ff fd41 	bl	80056cc <_Balloc>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	b918      	cbnz	r0, 8005c56 <__mdiff+0x5e>
 8005c4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005c52:	4b2f      	ldr	r3, [pc, #188]	; (8005d10 <__mdiff+0x118>)
 8005c54:	e7e4      	b.n	8005c20 <__mdiff+0x28>
 8005c56:	f100 0814 	add.w	r8, r0, #20
 8005c5a:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005c5e:	60c5      	str	r5, [r0, #12]
 8005c60:	f04f 0c00 	mov.w	ip, #0
 8005c64:	f10a 0514 	add.w	r5, sl, #20
 8005c68:	f10a 0010 	add.w	r0, sl, #16
 8005c6c:	46c2      	mov	sl, r8
 8005c6e:	6926      	ldr	r6, [r4, #16]
 8005c70:	f104 0914 	add.w	r9, r4, #20
 8005c74:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005c78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005c7c:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005c80:	f859 3b04 	ldr.w	r3, [r9], #4
 8005c84:	fa1f f18b 	uxth.w	r1, fp
 8005c88:	4461      	add	r1, ip
 8005c8a:	fa1f fc83 	uxth.w	ip, r3
 8005c8e:	0c1b      	lsrs	r3, r3, #16
 8005c90:	eba1 010c 	sub.w	r1, r1, ip
 8005c94:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005c98:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005c9c:	b289      	uxth	r1, r1
 8005c9e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005ca2:	454e      	cmp	r6, r9
 8005ca4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005ca8:	f84a 3b04 	str.w	r3, [sl], #4
 8005cac:	d8e6      	bhi.n	8005c7c <__mdiff+0x84>
 8005cae:	1b33      	subs	r3, r6, r4
 8005cb0:	3b15      	subs	r3, #21
 8005cb2:	f023 0303 	bic.w	r3, r3, #3
 8005cb6:	3415      	adds	r4, #21
 8005cb8:	3304      	adds	r3, #4
 8005cba:	42a6      	cmp	r6, r4
 8005cbc:	bf38      	it	cc
 8005cbe:	2304      	movcc	r3, #4
 8005cc0:	441d      	add	r5, r3
 8005cc2:	4443      	add	r3, r8
 8005cc4:	461e      	mov	r6, r3
 8005cc6:	462c      	mov	r4, r5
 8005cc8:	4574      	cmp	r4, lr
 8005cca:	d30e      	bcc.n	8005cea <__mdiff+0xf2>
 8005ccc:	f10e 0103 	add.w	r1, lr, #3
 8005cd0:	1b49      	subs	r1, r1, r5
 8005cd2:	f021 0103 	bic.w	r1, r1, #3
 8005cd6:	3d03      	subs	r5, #3
 8005cd8:	45ae      	cmp	lr, r5
 8005cda:	bf38      	it	cc
 8005cdc:	2100      	movcc	r1, #0
 8005cde:	4419      	add	r1, r3
 8005ce0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005ce4:	b18b      	cbz	r3, 8005d0a <__mdiff+0x112>
 8005ce6:	6117      	str	r7, [r2, #16]
 8005ce8:	e7a0      	b.n	8005c2c <__mdiff+0x34>
 8005cea:	f854 8b04 	ldr.w	r8, [r4], #4
 8005cee:	fa1f f188 	uxth.w	r1, r8
 8005cf2:	4461      	add	r1, ip
 8005cf4:	1408      	asrs	r0, r1, #16
 8005cf6:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005cfa:	b289      	uxth	r1, r1
 8005cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005d00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005d04:	f846 1b04 	str.w	r1, [r6], #4
 8005d08:	e7de      	b.n	8005cc8 <__mdiff+0xd0>
 8005d0a:	3f01      	subs	r7, #1
 8005d0c:	e7e8      	b.n	8005ce0 <__mdiff+0xe8>
 8005d0e:	bf00      	nop
 8005d10:	080071e3 	.word	0x080071e3
 8005d14:	080071f4 	.word	0x080071f4

08005d18 <__d2b>:
 8005d18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005d22:	4690      	mov	r8, r2
 8005d24:	461d      	mov	r5, r3
 8005d26:	f7ff fcd1 	bl	80056cc <_Balloc>
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	b930      	cbnz	r0, 8005d3c <__d2b+0x24>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	f240 310a 	movw	r1, #778	; 0x30a
 8005d34:	4b24      	ldr	r3, [pc, #144]	; (8005dc8 <__d2b+0xb0>)
 8005d36:	4825      	ldr	r0, [pc, #148]	; (8005dcc <__d2b+0xb4>)
 8005d38:	f000 f90e 	bl	8005f58 <__assert_func>
 8005d3c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005d40:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005d44:	bb2d      	cbnz	r5, 8005d92 <__d2b+0x7a>
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	f1b8 0300 	subs.w	r3, r8, #0
 8005d4c:	d026      	beq.n	8005d9c <__d2b+0x84>
 8005d4e:	4668      	mov	r0, sp
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	f7ff fd87 	bl	8005864 <__lo0bits>
 8005d56:	9900      	ldr	r1, [sp, #0]
 8005d58:	b1f0      	cbz	r0, 8005d98 <__d2b+0x80>
 8005d5a:	9a01      	ldr	r2, [sp, #4]
 8005d5c:	f1c0 0320 	rsb	r3, r0, #32
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	430b      	orrs	r3, r1
 8005d66:	40c2      	lsrs	r2, r0
 8005d68:	6163      	str	r3, [r4, #20]
 8005d6a:	9201      	str	r2, [sp, #4]
 8005d6c:	9b01      	ldr	r3, [sp, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	bf14      	ite	ne
 8005d72:	2102      	movne	r1, #2
 8005d74:	2101      	moveq	r1, #1
 8005d76:	61a3      	str	r3, [r4, #24]
 8005d78:	6121      	str	r1, [r4, #16]
 8005d7a:	b1c5      	cbz	r5, 8005dae <__d2b+0x96>
 8005d7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005d80:	4405      	add	r5, r0
 8005d82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d86:	603d      	str	r5, [r7, #0]
 8005d88:	6030      	str	r0, [r6, #0]
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	b002      	add	sp, #8
 8005d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d96:	e7d6      	b.n	8005d46 <__d2b+0x2e>
 8005d98:	6161      	str	r1, [r4, #20]
 8005d9a:	e7e7      	b.n	8005d6c <__d2b+0x54>
 8005d9c:	a801      	add	r0, sp, #4
 8005d9e:	f7ff fd61 	bl	8005864 <__lo0bits>
 8005da2:	2101      	movs	r1, #1
 8005da4:	9b01      	ldr	r3, [sp, #4]
 8005da6:	6121      	str	r1, [r4, #16]
 8005da8:	6163      	str	r3, [r4, #20]
 8005daa:	3020      	adds	r0, #32
 8005dac:	e7e5      	b.n	8005d7a <__d2b+0x62>
 8005dae:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005db2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005db6:	6038      	str	r0, [r7, #0]
 8005db8:	6918      	ldr	r0, [r3, #16]
 8005dba:	f7ff fd33 	bl	8005824 <__hi0bits>
 8005dbe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005dc2:	6031      	str	r1, [r6, #0]
 8005dc4:	e7e1      	b.n	8005d8a <__d2b+0x72>
 8005dc6:	bf00      	nop
 8005dc8:	080071e3 	.word	0x080071e3
 8005dcc:	080071f4 	.word	0x080071f4

08005dd0 <_calloc_r>:
 8005dd0:	b538      	push	{r3, r4, r5, lr}
 8005dd2:	fb02 f501 	mul.w	r5, r2, r1
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	f000 f854 	bl	8005e84 <_malloc_r>
 8005ddc:	4604      	mov	r4, r0
 8005dde:	b118      	cbz	r0, 8005de8 <_calloc_r+0x18>
 8005de0:	462a      	mov	r2, r5
 8005de2:	2100      	movs	r1, #0
 8005de4:	f7fe f964 	bl	80040b0 <memset>
 8005de8:	4620      	mov	r0, r4
 8005dea:	bd38      	pop	{r3, r4, r5, pc}

08005dec <_free_r>:
 8005dec:	b538      	push	{r3, r4, r5, lr}
 8005dee:	4605      	mov	r5, r0
 8005df0:	2900      	cmp	r1, #0
 8005df2:	d043      	beq.n	8005e7c <_free_r+0x90>
 8005df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005df8:	1f0c      	subs	r4, r1, #4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	bfb8      	it	lt
 8005dfe:	18e4      	addlt	r4, r4, r3
 8005e00:	f000 f8ec 	bl	8005fdc <__malloc_lock>
 8005e04:	4a1e      	ldr	r2, [pc, #120]	; (8005e80 <_free_r+0x94>)
 8005e06:	6813      	ldr	r3, [r2, #0]
 8005e08:	4610      	mov	r0, r2
 8005e0a:	b933      	cbnz	r3, 8005e1a <_free_r+0x2e>
 8005e0c:	6063      	str	r3, [r4, #4]
 8005e0e:	6014      	str	r4, [r2, #0]
 8005e10:	4628      	mov	r0, r5
 8005e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e16:	f000 b8e7 	b.w	8005fe8 <__malloc_unlock>
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	d90a      	bls.n	8005e34 <_free_r+0x48>
 8005e1e:	6821      	ldr	r1, [r4, #0]
 8005e20:	1862      	adds	r2, r4, r1
 8005e22:	4293      	cmp	r3, r2
 8005e24:	bf01      	itttt	eq
 8005e26:	681a      	ldreq	r2, [r3, #0]
 8005e28:	685b      	ldreq	r3, [r3, #4]
 8005e2a:	1852      	addeq	r2, r2, r1
 8005e2c:	6022      	streq	r2, [r4, #0]
 8005e2e:	6063      	str	r3, [r4, #4]
 8005e30:	6004      	str	r4, [r0, #0]
 8005e32:	e7ed      	b.n	8005e10 <_free_r+0x24>
 8005e34:	461a      	mov	r2, r3
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	b10b      	cbz	r3, 8005e3e <_free_r+0x52>
 8005e3a:	42a3      	cmp	r3, r4
 8005e3c:	d9fa      	bls.n	8005e34 <_free_r+0x48>
 8005e3e:	6811      	ldr	r1, [r2, #0]
 8005e40:	1850      	adds	r0, r2, r1
 8005e42:	42a0      	cmp	r0, r4
 8005e44:	d10b      	bne.n	8005e5e <_free_r+0x72>
 8005e46:	6820      	ldr	r0, [r4, #0]
 8005e48:	4401      	add	r1, r0
 8005e4a:	1850      	adds	r0, r2, r1
 8005e4c:	4283      	cmp	r3, r0
 8005e4e:	6011      	str	r1, [r2, #0]
 8005e50:	d1de      	bne.n	8005e10 <_free_r+0x24>
 8005e52:	6818      	ldr	r0, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	4401      	add	r1, r0
 8005e58:	6011      	str	r1, [r2, #0]
 8005e5a:	6053      	str	r3, [r2, #4]
 8005e5c:	e7d8      	b.n	8005e10 <_free_r+0x24>
 8005e5e:	d902      	bls.n	8005e66 <_free_r+0x7a>
 8005e60:	230c      	movs	r3, #12
 8005e62:	602b      	str	r3, [r5, #0]
 8005e64:	e7d4      	b.n	8005e10 <_free_r+0x24>
 8005e66:	6820      	ldr	r0, [r4, #0]
 8005e68:	1821      	adds	r1, r4, r0
 8005e6a:	428b      	cmp	r3, r1
 8005e6c:	bf01      	itttt	eq
 8005e6e:	6819      	ldreq	r1, [r3, #0]
 8005e70:	685b      	ldreq	r3, [r3, #4]
 8005e72:	1809      	addeq	r1, r1, r0
 8005e74:	6021      	streq	r1, [r4, #0]
 8005e76:	6063      	str	r3, [r4, #4]
 8005e78:	6054      	str	r4, [r2, #4]
 8005e7a:	e7c9      	b.n	8005e10 <_free_r+0x24>
 8005e7c:	bd38      	pop	{r3, r4, r5, pc}
 8005e7e:	bf00      	nop
 8005e80:	20000298 	.word	0x20000298

08005e84 <_malloc_r>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	1ccd      	adds	r5, r1, #3
 8005e88:	f025 0503 	bic.w	r5, r5, #3
 8005e8c:	3508      	adds	r5, #8
 8005e8e:	2d0c      	cmp	r5, #12
 8005e90:	bf38      	it	cc
 8005e92:	250c      	movcc	r5, #12
 8005e94:	2d00      	cmp	r5, #0
 8005e96:	4606      	mov	r6, r0
 8005e98:	db01      	blt.n	8005e9e <_malloc_r+0x1a>
 8005e9a:	42a9      	cmp	r1, r5
 8005e9c:	d903      	bls.n	8005ea6 <_malloc_r+0x22>
 8005e9e:	230c      	movs	r3, #12
 8005ea0:	6033      	str	r3, [r6, #0]
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ea6:	f000 f899 	bl	8005fdc <__malloc_lock>
 8005eaa:	4921      	ldr	r1, [pc, #132]	; (8005f30 <_malloc_r+0xac>)
 8005eac:	680a      	ldr	r2, [r1, #0]
 8005eae:	4614      	mov	r4, r2
 8005eb0:	b99c      	cbnz	r4, 8005eda <_malloc_r+0x56>
 8005eb2:	4f20      	ldr	r7, [pc, #128]	; (8005f34 <_malloc_r+0xb0>)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	b923      	cbnz	r3, 8005ec2 <_malloc_r+0x3e>
 8005eb8:	4621      	mov	r1, r4
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f000 f83c 	bl	8005f38 <_sbrk_r>
 8005ec0:	6038      	str	r0, [r7, #0]
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f000 f837 	bl	8005f38 <_sbrk_r>
 8005eca:	1c43      	adds	r3, r0, #1
 8005ecc:	d123      	bne.n	8005f16 <_malloc_r+0x92>
 8005ece:	230c      	movs	r3, #12
 8005ed0:	4630      	mov	r0, r6
 8005ed2:	6033      	str	r3, [r6, #0]
 8005ed4:	f000 f888 	bl	8005fe8 <__malloc_unlock>
 8005ed8:	e7e3      	b.n	8005ea2 <_malloc_r+0x1e>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	1b5b      	subs	r3, r3, r5
 8005ede:	d417      	bmi.n	8005f10 <_malloc_r+0x8c>
 8005ee0:	2b0b      	cmp	r3, #11
 8005ee2:	d903      	bls.n	8005eec <_malloc_r+0x68>
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	441c      	add	r4, r3
 8005ee8:	6025      	str	r5, [r4, #0]
 8005eea:	e004      	b.n	8005ef6 <_malloc_r+0x72>
 8005eec:	6863      	ldr	r3, [r4, #4]
 8005eee:	42a2      	cmp	r2, r4
 8005ef0:	bf0c      	ite	eq
 8005ef2:	600b      	streq	r3, [r1, #0]
 8005ef4:	6053      	strne	r3, [r2, #4]
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	f000 f876 	bl	8005fe8 <__malloc_unlock>
 8005efc:	f104 000b 	add.w	r0, r4, #11
 8005f00:	1d23      	adds	r3, r4, #4
 8005f02:	f020 0007 	bic.w	r0, r0, #7
 8005f06:	1ac2      	subs	r2, r0, r3
 8005f08:	d0cc      	beq.n	8005ea4 <_malloc_r+0x20>
 8005f0a:	1a1b      	subs	r3, r3, r0
 8005f0c:	50a3      	str	r3, [r4, r2]
 8005f0e:	e7c9      	b.n	8005ea4 <_malloc_r+0x20>
 8005f10:	4622      	mov	r2, r4
 8005f12:	6864      	ldr	r4, [r4, #4]
 8005f14:	e7cc      	b.n	8005eb0 <_malloc_r+0x2c>
 8005f16:	1cc4      	adds	r4, r0, #3
 8005f18:	f024 0403 	bic.w	r4, r4, #3
 8005f1c:	42a0      	cmp	r0, r4
 8005f1e:	d0e3      	beq.n	8005ee8 <_malloc_r+0x64>
 8005f20:	1a21      	subs	r1, r4, r0
 8005f22:	4630      	mov	r0, r6
 8005f24:	f000 f808 	bl	8005f38 <_sbrk_r>
 8005f28:	3001      	adds	r0, #1
 8005f2a:	d1dd      	bne.n	8005ee8 <_malloc_r+0x64>
 8005f2c:	e7cf      	b.n	8005ece <_malloc_r+0x4a>
 8005f2e:	bf00      	nop
 8005f30:	20000298 	.word	0x20000298
 8005f34:	2000029c 	.word	0x2000029c

08005f38 <_sbrk_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	4d05      	ldr	r5, [pc, #20]	; (8005f54 <_sbrk_r+0x1c>)
 8005f3e:	4604      	mov	r4, r0
 8005f40:	4608      	mov	r0, r1
 8005f42:	602b      	str	r3, [r5, #0]
 8005f44:	f7fb fb5c 	bl	8001600 <_sbrk>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d102      	bne.n	8005f52 <_sbrk_r+0x1a>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	b103      	cbz	r3, 8005f52 <_sbrk_r+0x1a>
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	bd38      	pop	{r3, r4, r5, pc}
 8005f54:	20000404 	.word	0x20000404

08005f58 <__assert_func>:
 8005f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f5a:	4614      	mov	r4, r2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <__assert_func+0x2c>)
 8005f60:	4605      	mov	r5, r0
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68d8      	ldr	r0, [r3, #12]
 8005f66:	b14c      	cbz	r4, 8005f7c <__assert_func+0x24>
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <__assert_func+0x30>)
 8005f6a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f6e:	9100      	str	r1, [sp, #0]
 8005f70:	462b      	mov	r3, r5
 8005f72:	4906      	ldr	r1, [pc, #24]	; (8005f8c <__assert_func+0x34>)
 8005f74:	f000 f80e 	bl	8005f94 <fiprintf>
 8005f78:	f000 fa62 	bl	8006440 <abort>
 8005f7c:	4b04      	ldr	r3, [pc, #16]	; (8005f90 <__assert_func+0x38>)
 8005f7e:	461c      	mov	r4, r3
 8005f80:	e7f3      	b.n	8005f6a <__assert_func+0x12>
 8005f82:	bf00      	nop
 8005f84:	200000a0 	.word	0x200000a0
 8005f88:	08007354 	.word	0x08007354
 8005f8c:	08007361 	.word	0x08007361
 8005f90:	0800738f 	.word	0x0800738f

08005f94 <fiprintf>:
 8005f94:	b40e      	push	{r1, r2, r3}
 8005f96:	b503      	push	{r0, r1, lr}
 8005f98:	4601      	mov	r1, r0
 8005f9a:	ab03      	add	r3, sp, #12
 8005f9c:	4805      	ldr	r0, [pc, #20]	; (8005fb4 <fiprintf+0x20>)
 8005f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fa2:	6800      	ldr	r0, [r0, #0]
 8005fa4:	9301      	str	r3, [sp, #4]
 8005fa6:	f000 f84d 	bl	8006044 <_vfiprintf_r>
 8005faa:	b002      	add	sp, #8
 8005fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fb0:	b003      	add	sp, #12
 8005fb2:	4770      	bx	lr
 8005fb4:	200000a0 	.word	0x200000a0

08005fb8 <__ascii_mbtowc>:
 8005fb8:	b082      	sub	sp, #8
 8005fba:	b901      	cbnz	r1, 8005fbe <__ascii_mbtowc+0x6>
 8005fbc:	a901      	add	r1, sp, #4
 8005fbe:	b142      	cbz	r2, 8005fd2 <__ascii_mbtowc+0x1a>
 8005fc0:	b14b      	cbz	r3, 8005fd6 <__ascii_mbtowc+0x1e>
 8005fc2:	7813      	ldrb	r3, [r2, #0]
 8005fc4:	600b      	str	r3, [r1, #0]
 8005fc6:	7812      	ldrb	r2, [r2, #0]
 8005fc8:	1e10      	subs	r0, r2, #0
 8005fca:	bf18      	it	ne
 8005fcc:	2001      	movne	r0, #1
 8005fce:	b002      	add	sp, #8
 8005fd0:	4770      	bx	lr
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	e7fb      	b.n	8005fce <__ascii_mbtowc+0x16>
 8005fd6:	f06f 0001 	mvn.w	r0, #1
 8005fda:	e7f8      	b.n	8005fce <__ascii_mbtowc+0x16>

08005fdc <__malloc_lock>:
 8005fdc:	4801      	ldr	r0, [pc, #4]	; (8005fe4 <__malloc_lock+0x8>)
 8005fde:	f000 bbef 	b.w	80067c0 <__retarget_lock_acquire_recursive>
 8005fe2:	bf00      	nop
 8005fe4:	2000040c 	.word	0x2000040c

08005fe8 <__malloc_unlock>:
 8005fe8:	4801      	ldr	r0, [pc, #4]	; (8005ff0 <__malloc_unlock+0x8>)
 8005fea:	f000 bbea 	b.w	80067c2 <__retarget_lock_release_recursive>
 8005fee:	bf00      	nop
 8005ff0:	2000040c 	.word	0x2000040c

08005ff4 <__sfputc_r>:
 8005ff4:	6893      	ldr	r3, [r2, #8]
 8005ff6:	b410      	push	{r4}
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	6093      	str	r3, [r2, #8]
 8005ffe:	da07      	bge.n	8006010 <__sfputc_r+0x1c>
 8006000:	6994      	ldr	r4, [r2, #24]
 8006002:	42a3      	cmp	r3, r4
 8006004:	db01      	blt.n	800600a <__sfputc_r+0x16>
 8006006:	290a      	cmp	r1, #10
 8006008:	d102      	bne.n	8006010 <__sfputc_r+0x1c>
 800600a:	bc10      	pop	{r4}
 800600c:	f000 b94a 	b.w	80062a4 <__swbuf_r>
 8006010:	6813      	ldr	r3, [r2, #0]
 8006012:	1c58      	adds	r0, r3, #1
 8006014:	6010      	str	r0, [r2, #0]
 8006016:	7019      	strb	r1, [r3, #0]
 8006018:	4608      	mov	r0, r1
 800601a:	bc10      	pop	{r4}
 800601c:	4770      	bx	lr

0800601e <__sfputs_r>:
 800601e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006020:	4606      	mov	r6, r0
 8006022:	460f      	mov	r7, r1
 8006024:	4614      	mov	r4, r2
 8006026:	18d5      	adds	r5, r2, r3
 8006028:	42ac      	cmp	r4, r5
 800602a:	d101      	bne.n	8006030 <__sfputs_r+0x12>
 800602c:	2000      	movs	r0, #0
 800602e:	e007      	b.n	8006040 <__sfputs_r+0x22>
 8006030:	463a      	mov	r2, r7
 8006032:	4630      	mov	r0, r6
 8006034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006038:	f7ff ffdc 	bl	8005ff4 <__sfputc_r>
 800603c:	1c43      	adds	r3, r0, #1
 800603e:	d1f3      	bne.n	8006028 <__sfputs_r+0xa>
 8006040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006044 <_vfiprintf_r>:
 8006044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006048:	460d      	mov	r5, r1
 800604a:	4614      	mov	r4, r2
 800604c:	4698      	mov	r8, r3
 800604e:	4606      	mov	r6, r0
 8006050:	b09d      	sub	sp, #116	; 0x74
 8006052:	b118      	cbz	r0, 800605c <_vfiprintf_r+0x18>
 8006054:	6983      	ldr	r3, [r0, #24]
 8006056:	b90b      	cbnz	r3, 800605c <_vfiprintf_r+0x18>
 8006058:	f000 fb14 	bl	8006684 <__sinit>
 800605c:	4b89      	ldr	r3, [pc, #548]	; (8006284 <_vfiprintf_r+0x240>)
 800605e:	429d      	cmp	r5, r3
 8006060:	d11b      	bne.n	800609a <_vfiprintf_r+0x56>
 8006062:	6875      	ldr	r5, [r6, #4]
 8006064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006066:	07d9      	lsls	r1, r3, #31
 8006068:	d405      	bmi.n	8006076 <_vfiprintf_r+0x32>
 800606a:	89ab      	ldrh	r3, [r5, #12]
 800606c:	059a      	lsls	r2, r3, #22
 800606e:	d402      	bmi.n	8006076 <_vfiprintf_r+0x32>
 8006070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006072:	f000 fba5 	bl	80067c0 <__retarget_lock_acquire_recursive>
 8006076:	89ab      	ldrh	r3, [r5, #12]
 8006078:	071b      	lsls	r3, r3, #28
 800607a:	d501      	bpl.n	8006080 <_vfiprintf_r+0x3c>
 800607c:	692b      	ldr	r3, [r5, #16]
 800607e:	b9eb      	cbnz	r3, 80060bc <_vfiprintf_r+0x78>
 8006080:	4629      	mov	r1, r5
 8006082:	4630      	mov	r0, r6
 8006084:	f000 f96e 	bl	8006364 <__swsetup_r>
 8006088:	b1c0      	cbz	r0, 80060bc <_vfiprintf_r+0x78>
 800608a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800608c:	07dc      	lsls	r4, r3, #31
 800608e:	d50e      	bpl.n	80060ae <_vfiprintf_r+0x6a>
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	b01d      	add	sp, #116	; 0x74
 8006096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800609a:	4b7b      	ldr	r3, [pc, #492]	; (8006288 <_vfiprintf_r+0x244>)
 800609c:	429d      	cmp	r5, r3
 800609e:	d101      	bne.n	80060a4 <_vfiprintf_r+0x60>
 80060a0:	68b5      	ldr	r5, [r6, #8]
 80060a2:	e7df      	b.n	8006064 <_vfiprintf_r+0x20>
 80060a4:	4b79      	ldr	r3, [pc, #484]	; (800628c <_vfiprintf_r+0x248>)
 80060a6:	429d      	cmp	r5, r3
 80060a8:	bf08      	it	eq
 80060aa:	68f5      	ldreq	r5, [r6, #12]
 80060ac:	e7da      	b.n	8006064 <_vfiprintf_r+0x20>
 80060ae:	89ab      	ldrh	r3, [r5, #12]
 80060b0:	0598      	lsls	r0, r3, #22
 80060b2:	d4ed      	bmi.n	8006090 <_vfiprintf_r+0x4c>
 80060b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060b6:	f000 fb84 	bl	80067c2 <__retarget_lock_release_recursive>
 80060ba:	e7e9      	b.n	8006090 <_vfiprintf_r+0x4c>
 80060bc:	2300      	movs	r3, #0
 80060be:	9309      	str	r3, [sp, #36]	; 0x24
 80060c0:	2320      	movs	r3, #32
 80060c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060c6:	2330      	movs	r3, #48	; 0x30
 80060c8:	f04f 0901 	mov.w	r9, #1
 80060cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80060d0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006290 <_vfiprintf_r+0x24c>
 80060d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060d8:	4623      	mov	r3, r4
 80060da:	469a      	mov	sl, r3
 80060dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060e0:	b10a      	cbz	r2, 80060e6 <_vfiprintf_r+0xa2>
 80060e2:	2a25      	cmp	r2, #37	; 0x25
 80060e4:	d1f9      	bne.n	80060da <_vfiprintf_r+0x96>
 80060e6:	ebba 0b04 	subs.w	fp, sl, r4
 80060ea:	d00b      	beq.n	8006104 <_vfiprintf_r+0xc0>
 80060ec:	465b      	mov	r3, fp
 80060ee:	4622      	mov	r2, r4
 80060f0:	4629      	mov	r1, r5
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7ff ff93 	bl	800601e <__sfputs_r>
 80060f8:	3001      	adds	r0, #1
 80060fa:	f000 80aa 	beq.w	8006252 <_vfiprintf_r+0x20e>
 80060fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006100:	445a      	add	r2, fp
 8006102:	9209      	str	r2, [sp, #36]	; 0x24
 8006104:	f89a 3000 	ldrb.w	r3, [sl]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80a2 	beq.w	8006252 <_vfiprintf_r+0x20e>
 800610e:	2300      	movs	r3, #0
 8006110:	f04f 32ff 	mov.w	r2, #4294967295
 8006114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006118:	f10a 0a01 	add.w	sl, sl, #1
 800611c:	9304      	str	r3, [sp, #16]
 800611e:	9307      	str	r3, [sp, #28]
 8006120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006124:	931a      	str	r3, [sp, #104]	; 0x68
 8006126:	4654      	mov	r4, sl
 8006128:	2205      	movs	r2, #5
 800612a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800612e:	4858      	ldr	r0, [pc, #352]	; (8006290 <_vfiprintf_r+0x24c>)
 8006130:	f7ff fab0 	bl	8005694 <memchr>
 8006134:	9a04      	ldr	r2, [sp, #16]
 8006136:	b9d8      	cbnz	r0, 8006170 <_vfiprintf_r+0x12c>
 8006138:	06d1      	lsls	r1, r2, #27
 800613a:	bf44      	itt	mi
 800613c:	2320      	movmi	r3, #32
 800613e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006142:	0713      	lsls	r3, r2, #28
 8006144:	bf44      	itt	mi
 8006146:	232b      	movmi	r3, #43	; 0x2b
 8006148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800614c:	f89a 3000 	ldrb.w	r3, [sl]
 8006150:	2b2a      	cmp	r3, #42	; 0x2a
 8006152:	d015      	beq.n	8006180 <_vfiprintf_r+0x13c>
 8006154:	4654      	mov	r4, sl
 8006156:	2000      	movs	r0, #0
 8006158:	f04f 0c0a 	mov.w	ip, #10
 800615c:	9a07      	ldr	r2, [sp, #28]
 800615e:	4621      	mov	r1, r4
 8006160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006164:	3b30      	subs	r3, #48	; 0x30
 8006166:	2b09      	cmp	r3, #9
 8006168:	d94e      	bls.n	8006208 <_vfiprintf_r+0x1c4>
 800616a:	b1b0      	cbz	r0, 800619a <_vfiprintf_r+0x156>
 800616c:	9207      	str	r2, [sp, #28]
 800616e:	e014      	b.n	800619a <_vfiprintf_r+0x156>
 8006170:	eba0 0308 	sub.w	r3, r0, r8
 8006174:	fa09 f303 	lsl.w	r3, r9, r3
 8006178:	4313      	orrs	r3, r2
 800617a:	46a2      	mov	sl, r4
 800617c:	9304      	str	r3, [sp, #16]
 800617e:	e7d2      	b.n	8006126 <_vfiprintf_r+0xe2>
 8006180:	9b03      	ldr	r3, [sp, #12]
 8006182:	1d19      	adds	r1, r3, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	9103      	str	r1, [sp, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	bfbb      	ittet	lt
 800618c:	425b      	neglt	r3, r3
 800618e:	f042 0202 	orrlt.w	r2, r2, #2
 8006192:	9307      	strge	r3, [sp, #28]
 8006194:	9307      	strlt	r3, [sp, #28]
 8006196:	bfb8      	it	lt
 8006198:	9204      	strlt	r2, [sp, #16]
 800619a:	7823      	ldrb	r3, [r4, #0]
 800619c:	2b2e      	cmp	r3, #46	; 0x2e
 800619e:	d10c      	bne.n	80061ba <_vfiprintf_r+0x176>
 80061a0:	7863      	ldrb	r3, [r4, #1]
 80061a2:	2b2a      	cmp	r3, #42	; 0x2a
 80061a4:	d135      	bne.n	8006212 <_vfiprintf_r+0x1ce>
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	3402      	adds	r4, #2
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	9203      	str	r2, [sp, #12]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bfb8      	it	lt
 80061b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80061b8:	9305      	str	r3, [sp, #20]
 80061ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80062a0 <_vfiprintf_r+0x25c>
 80061be:	2203      	movs	r2, #3
 80061c0:	4650      	mov	r0, sl
 80061c2:	7821      	ldrb	r1, [r4, #0]
 80061c4:	f7ff fa66 	bl	8005694 <memchr>
 80061c8:	b140      	cbz	r0, 80061dc <_vfiprintf_r+0x198>
 80061ca:	2340      	movs	r3, #64	; 0x40
 80061cc:	eba0 000a 	sub.w	r0, r0, sl
 80061d0:	fa03 f000 	lsl.w	r0, r3, r0
 80061d4:	9b04      	ldr	r3, [sp, #16]
 80061d6:	3401      	adds	r4, #1
 80061d8:	4303      	orrs	r3, r0
 80061da:	9304      	str	r3, [sp, #16]
 80061dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061e0:	2206      	movs	r2, #6
 80061e2:	482c      	ldr	r0, [pc, #176]	; (8006294 <_vfiprintf_r+0x250>)
 80061e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061e8:	f7ff fa54 	bl	8005694 <memchr>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	d03f      	beq.n	8006270 <_vfiprintf_r+0x22c>
 80061f0:	4b29      	ldr	r3, [pc, #164]	; (8006298 <_vfiprintf_r+0x254>)
 80061f2:	bb1b      	cbnz	r3, 800623c <_vfiprintf_r+0x1f8>
 80061f4:	9b03      	ldr	r3, [sp, #12]
 80061f6:	3307      	adds	r3, #7
 80061f8:	f023 0307 	bic.w	r3, r3, #7
 80061fc:	3308      	adds	r3, #8
 80061fe:	9303      	str	r3, [sp, #12]
 8006200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006202:	443b      	add	r3, r7
 8006204:	9309      	str	r3, [sp, #36]	; 0x24
 8006206:	e767      	b.n	80060d8 <_vfiprintf_r+0x94>
 8006208:	460c      	mov	r4, r1
 800620a:	2001      	movs	r0, #1
 800620c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006210:	e7a5      	b.n	800615e <_vfiprintf_r+0x11a>
 8006212:	2300      	movs	r3, #0
 8006214:	f04f 0c0a 	mov.w	ip, #10
 8006218:	4619      	mov	r1, r3
 800621a:	3401      	adds	r4, #1
 800621c:	9305      	str	r3, [sp, #20]
 800621e:	4620      	mov	r0, r4
 8006220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006224:	3a30      	subs	r2, #48	; 0x30
 8006226:	2a09      	cmp	r2, #9
 8006228:	d903      	bls.n	8006232 <_vfiprintf_r+0x1ee>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d0c5      	beq.n	80061ba <_vfiprintf_r+0x176>
 800622e:	9105      	str	r1, [sp, #20]
 8006230:	e7c3      	b.n	80061ba <_vfiprintf_r+0x176>
 8006232:	4604      	mov	r4, r0
 8006234:	2301      	movs	r3, #1
 8006236:	fb0c 2101 	mla	r1, ip, r1, r2
 800623a:	e7f0      	b.n	800621e <_vfiprintf_r+0x1da>
 800623c:	ab03      	add	r3, sp, #12
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	462a      	mov	r2, r5
 8006242:	4630      	mov	r0, r6
 8006244:	4b15      	ldr	r3, [pc, #84]	; (800629c <_vfiprintf_r+0x258>)
 8006246:	a904      	add	r1, sp, #16
 8006248:	f7fd ffd8 	bl	80041fc <_printf_float>
 800624c:	4607      	mov	r7, r0
 800624e:	1c78      	adds	r0, r7, #1
 8006250:	d1d6      	bne.n	8006200 <_vfiprintf_r+0x1bc>
 8006252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006254:	07d9      	lsls	r1, r3, #31
 8006256:	d405      	bmi.n	8006264 <_vfiprintf_r+0x220>
 8006258:	89ab      	ldrh	r3, [r5, #12]
 800625a:	059a      	lsls	r2, r3, #22
 800625c:	d402      	bmi.n	8006264 <_vfiprintf_r+0x220>
 800625e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006260:	f000 faaf 	bl	80067c2 <__retarget_lock_release_recursive>
 8006264:	89ab      	ldrh	r3, [r5, #12]
 8006266:	065b      	lsls	r3, r3, #25
 8006268:	f53f af12 	bmi.w	8006090 <_vfiprintf_r+0x4c>
 800626c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800626e:	e711      	b.n	8006094 <_vfiprintf_r+0x50>
 8006270:	ab03      	add	r3, sp, #12
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	462a      	mov	r2, r5
 8006276:	4630      	mov	r0, r6
 8006278:	4b08      	ldr	r3, [pc, #32]	; (800629c <_vfiprintf_r+0x258>)
 800627a:	a904      	add	r1, sp, #16
 800627c:	f7fe fa5a 	bl	8004734 <_printf_i>
 8006280:	e7e4      	b.n	800624c <_vfiprintf_r+0x208>
 8006282:	bf00      	nop
 8006284:	080074cc 	.word	0x080074cc
 8006288:	080074ec 	.word	0x080074ec
 800628c:	080074ac 	.word	0x080074ac
 8006290:	0800739a 	.word	0x0800739a
 8006294:	080073a4 	.word	0x080073a4
 8006298:	080041fd 	.word	0x080041fd
 800629c:	0800601f 	.word	0x0800601f
 80062a0:	080073a0 	.word	0x080073a0

080062a4 <__swbuf_r>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	460e      	mov	r6, r1
 80062a8:	4614      	mov	r4, r2
 80062aa:	4605      	mov	r5, r0
 80062ac:	b118      	cbz	r0, 80062b6 <__swbuf_r+0x12>
 80062ae:	6983      	ldr	r3, [r0, #24]
 80062b0:	b90b      	cbnz	r3, 80062b6 <__swbuf_r+0x12>
 80062b2:	f000 f9e7 	bl	8006684 <__sinit>
 80062b6:	4b21      	ldr	r3, [pc, #132]	; (800633c <__swbuf_r+0x98>)
 80062b8:	429c      	cmp	r4, r3
 80062ba:	d12b      	bne.n	8006314 <__swbuf_r+0x70>
 80062bc:	686c      	ldr	r4, [r5, #4]
 80062be:	69a3      	ldr	r3, [r4, #24]
 80062c0:	60a3      	str	r3, [r4, #8]
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	071a      	lsls	r2, r3, #28
 80062c6:	d52f      	bpl.n	8006328 <__swbuf_r+0x84>
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	b36b      	cbz	r3, 8006328 <__swbuf_r+0x84>
 80062cc:	6923      	ldr	r3, [r4, #16]
 80062ce:	6820      	ldr	r0, [r4, #0]
 80062d0:	b2f6      	uxtb	r6, r6
 80062d2:	1ac0      	subs	r0, r0, r3
 80062d4:	6963      	ldr	r3, [r4, #20]
 80062d6:	4637      	mov	r7, r6
 80062d8:	4283      	cmp	r3, r0
 80062da:	dc04      	bgt.n	80062e6 <__swbuf_r+0x42>
 80062dc:	4621      	mov	r1, r4
 80062de:	4628      	mov	r0, r5
 80062e0:	f000 f93c 	bl	800655c <_fflush_r>
 80062e4:	bb30      	cbnz	r0, 8006334 <__swbuf_r+0x90>
 80062e6:	68a3      	ldr	r3, [r4, #8]
 80062e8:	3001      	adds	r0, #1
 80062ea:	3b01      	subs	r3, #1
 80062ec:	60a3      	str	r3, [r4, #8]
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	6022      	str	r2, [r4, #0]
 80062f4:	701e      	strb	r6, [r3, #0]
 80062f6:	6963      	ldr	r3, [r4, #20]
 80062f8:	4283      	cmp	r3, r0
 80062fa:	d004      	beq.n	8006306 <__swbuf_r+0x62>
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	07db      	lsls	r3, r3, #31
 8006300:	d506      	bpl.n	8006310 <__swbuf_r+0x6c>
 8006302:	2e0a      	cmp	r6, #10
 8006304:	d104      	bne.n	8006310 <__swbuf_r+0x6c>
 8006306:	4621      	mov	r1, r4
 8006308:	4628      	mov	r0, r5
 800630a:	f000 f927 	bl	800655c <_fflush_r>
 800630e:	b988      	cbnz	r0, 8006334 <__swbuf_r+0x90>
 8006310:	4638      	mov	r0, r7
 8006312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006314:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <__swbuf_r+0x9c>)
 8006316:	429c      	cmp	r4, r3
 8006318:	d101      	bne.n	800631e <__swbuf_r+0x7a>
 800631a:	68ac      	ldr	r4, [r5, #8]
 800631c:	e7cf      	b.n	80062be <__swbuf_r+0x1a>
 800631e:	4b09      	ldr	r3, [pc, #36]	; (8006344 <__swbuf_r+0xa0>)
 8006320:	429c      	cmp	r4, r3
 8006322:	bf08      	it	eq
 8006324:	68ec      	ldreq	r4, [r5, #12]
 8006326:	e7ca      	b.n	80062be <__swbuf_r+0x1a>
 8006328:	4621      	mov	r1, r4
 800632a:	4628      	mov	r0, r5
 800632c:	f000 f81a 	bl	8006364 <__swsetup_r>
 8006330:	2800      	cmp	r0, #0
 8006332:	d0cb      	beq.n	80062cc <__swbuf_r+0x28>
 8006334:	f04f 37ff 	mov.w	r7, #4294967295
 8006338:	e7ea      	b.n	8006310 <__swbuf_r+0x6c>
 800633a:	bf00      	nop
 800633c:	080074cc 	.word	0x080074cc
 8006340:	080074ec 	.word	0x080074ec
 8006344:	080074ac 	.word	0x080074ac

08006348 <__ascii_wctomb>:
 8006348:	4603      	mov	r3, r0
 800634a:	4608      	mov	r0, r1
 800634c:	b141      	cbz	r1, 8006360 <__ascii_wctomb+0x18>
 800634e:	2aff      	cmp	r2, #255	; 0xff
 8006350:	d904      	bls.n	800635c <__ascii_wctomb+0x14>
 8006352:	228a      	movs	r2, #138	; 0x8a
 8006354:	f04f 30ff 	mov.w	r0, #4294967295
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	4770      	bx	lr
 800635c:	2001      	movs	r0, #1
 800635e:	700a      	strb	r2, [r1, #0]
 8006360:	4770      	bx	lr
	...

08006364 <__swsetup_r>:
 8006364:	4b32      	ldr	r3, [pc, #200]	; (8006430 <__swsetup_r+0xcc>)
 8006366:	b570      	push	{r4, r5, r6, lr}
 8006368:	681d      	ldr	r5, [r3, #0]
 800636a:	4606      	mov	r6, r0
 800636c:	460c      	mov	r4, r1
 800636e:	b125      	cbz	r5, 800637a <__swsetup_r+0x16>
 8006370:	69ab      	ldr	r3, [r5, #24]
 8006372:	b913      	cbnz	r3, 800637a <__swsetup_r+0x16>
 8006374:	4628      	mov	r0, r5
 8006376:	f000 f985 	bl	8006684 <__sinit>
 800637a:	4b2e      	ldr	r3, [pc, #184]	; (8006434 <__swsetup_r+0xd0>)
 800637c:	429c      	cmp	r4, r3
 800637e:	d10f      	bne.n	80063a0 <__swsetup_r+0x3c>
 8006380:	686c      	ldr	r4, [r5, #4]
 8006382:	89a3      	ldrh	r3, [r4, #12]
 8006384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006388:	0719      	lsls	r1, r3, #28
 800638a:	d42c      	bmi.n	80063e6 <__swsetup_r+0x82>
 800638c:	06dd      	lsls	r5, r3, #27
 800638e:	d411      	bmi.n	80063b4 <__swsetup_r+0x50>
 8006390:	2309      	movs	r3, #9
 8006392:	6033      	str	r3, [r6, #0]
 8006394:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006398:	f04f 30ff 	mov.w	r0, #4294967295
 800639c:	81a3      	strh	r3, [r4, #12]
 800639e:	e03e      	b.n	800641e <__swsetup_r+0xba>
 80063a0:	4b25      	ldr	r3, [pc, #148]	; (8006438 <__swsetup_r+0xd4>)
 80063a2:	429c      	cmp	r4, r3
 80063a4:	d101      	bne.n	80063aa <__swsetup_r+0x46>
 80063a6:	68ac      	ldr	r4, [r5, #8]
 80063a8:	e7eb      	b.n	8006382 <__swsetup_r+0x1e>
 80063aa:	4b24      	ldr	r3, [pc, #144]	; (800643c <__swsetup_r+0xd8>)
 80063ac:	429c      	cmp	r4, r3
 80063ae:	bf08      	it	eq
 80063b0:	68ec      	ldreq	r4, [r5, #12]
 80063b2:	e7e6      	b.n	8006382 <__swsetup_r+0x1e>
 80063b4:	0758      	lsls	r0, r3, #29
 80063b6:	d512      	bpl.n	80063de <__swsetup_r+0x7a>
 80063b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063ba:	b141      	cbz	r1, 80063ce <__swsetup_r+0x6a>
 80063bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063c0:	4299      	cmp	r1, r3
 80063c2:	d002      	beq.n	80063ca <__swsetup_r+0x66>
 80063c4:	4630      	mov	r0, r6
 80063c6:	f7ff fd11 	bl	8005dec <_free_r>
 80063ca:	2300      	movs	r3, #0
 80063cc:	6363      	str	r3, [r4, #52]	; 0x34
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063d4:	81a3      	strh	r3, [r4, #12]
 80063d6:	2300      	movs	r3, #0
 80063d8:	6063      	str	r3, [r4, #4]
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f043 0308 	orr.w	r3, r3, #8
 80063e4:	81a3      	strh	r3, [r4, #12]
 80063e6:	6923      	ldr	r3, [r4, #16]
 80063e8:	b94b      	cbnz	r3, 80063fe <__swsetup_r+0x9a>
 80063ea:	89a3      	ldrh	r3, [r4, #12]
 80063ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f4:	d003      	beq.n	80063fe <__swsetup_r+0x9a>
 80063f6:	4621      	mov	r1, r4
 80063f8:	4630      	mov	r0, r6
 80063fa:	f000 fa07 	bl	800680c <__smakebuf_r>
 80063fe:	89a0      	ldrh	r0, [r4, #12]
 8006400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006404:	f010 0301 	ands.w	r3, r0, #1
 8006408:	d00a      	beq.n	8006420 <__swsetup_r+0xbc>
 800640a:	2300      	movs	r3, #0
 800640c:	60a3      	str	r3, [r4, #8]
 800640e:	6963      	ldr	r3, [r4, #20]
 8006410:	425b      	negs	r3, r3
 8006412:	61a3      	str	r3, [r4, #24]
 8006414:	6923      	ldr	r3, [r4, #16]
 8006416:	b943      	cbnz	r3, 800642a <__swsetup_r+0xc6>
 8006418:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800641c:	d1ba      	bne.n	8006394 <__swsetup_r+0x30>
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	0781      	lsls	r1, r0, #30
 8006422:	bf58      	it	pl
 8006424:	6963      	ldrpl	r3, [r4, #20]
 8006426:	60a3      	str	r3, [r4, #8]
 8006428:	e7f4      	b.n	8006414 <__swsetup_r+0xb0>
 800642a:	2000      	movs	r0, #0
 800642c:	e7f7      	b.n	800641e <__swsetup_r+0xba>
 800642e:	bf00      	nop
 8006430:	200000a0 	.word	0x200000a0
 8006434:	080074cc 	.word	0x080074cc
 8006438:	080074ec 	.word	0x080074ec
 800643c:	080074ac 	.word	0x080074ac

08006440 <abort>:
 8006440:	2006      	movs	r0, #6
 8006442:	b508      	push	{r3, lr}
 8006444:	f000 fa4a 	bl	80068dc <raise>
 8006448:	2001      	movs	r0, #1
 800644a:	f7fb f865 	bl	8001518 <_exit>
	...

08006450 <__sflush_r>:
 8006450:	898a      	ldrh	r2, [r1, #12]
 8006452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006456:	4605      	mov	r5, r0
 8006458:	0710      	lsls	r0, r2, #28
 800645a:	460c      	mov	r4, r1
 800645c:	d458      	bmi.n	8006510 <__sflush_r+0xc0>
 800645e:	684b      	ldr	r3, [r1, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	dc05      	bgt.n	8006470 <__sflush_r+0x20>
 8006464:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006466:	2b00      	cmp	r3, #0
 8006468:	dc02      	bgt.n	8006470 <__sflush_r+0x20>
 800646a:	2000      	movs	r0, #0
 800646c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006472:	2e00      	cmp	r6, #0
 8006474:	d0f9      	beq.n	800646a <__sflush_r+0x1a>
 8006476:	2300      	movs	r3, #0
 8006478:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800647c:	682f      	ldr	r7, [r5, #0]
 800647e:	602b      	str	r3, [r5, #0]
 8006480:	d032      	beq.n	80064e8 <__sflush_r+0x98>
 8006482:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	075a      	lsls	r2, r3, #29
 8006488:	d505      	bpl.n	8006496 <__sflush_r+0x46>
 800648a:	6863      	ldr	r3, [r4, #4]
 800648c:	1ac0      	subs	r0, r0, r3
 800648e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006490:	b10b      	cbz	r3, 8006496 <__sflush_r+0x46>
 8006492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006494:	1ac0      	subs	r0, r0, r3
 8006496:	2300      	movs	r3, #0
 8006498:	4602      	mov	r2, r0
 800649a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800649c:	4628      	mov	r0, r5
 800649e:	6a21      	ldr	r1, [r4, #32]
 80064a0:	47b0      	blx	r6
 80064a2:	1c43      	adds	r3, r0, #1
 80064a4:	89a3      	ldrh	r3, [r4, #12]
 80064a6:	d106      	bne.n	80064b6 <__sflush_r+0x66>
 80064a8:	6829      	ldr	r1, [r5, #0]
 80064aa:	291d      	cmp	r1, #29
 80064ac:	d82c      	bhi.n	8006508 <__sflush_r+0xb8>
 80064ae:	4a2a      	ldr	r2, [pc, #168]	; (8006558 <__sflush_r+0x108>)
 80064b0:	40ca      	lsrs	r2, r1
 80064b2:	07d6      	lsls	r6, r2, #31
 80064b4:	d528      	bpl.n	8006508 <__sflush_r+0xb8>
 80064b6:	2200      	movs	r2, #0
 80064b8:	6062      	str	r2, [r4, #4]
 80064ba:	6922      	ldr	r2, [r4, #16]
 80064bc:	04d9      	lsls	r1, r3, #19
 80064be:	6022      	str	r2, [r4, #0]
 80064c0:	d504      	bpl.n	80064cc <__sflush_r+0x7c>
 80064c2:	1c42      	adds	r2, r0, #1
 80064c4:	d101      	bne.n	80064ca <__sflush_r+0x7a>
 80064c6:	682b      	ldr	r3, [r5, #0]
 80064c8:	b903      	cbnz	r3, 80064cc <__sflush_r+0x7c>
 80064ca:	6560      	str	r0, [r4, #84]	; 0x54
 80064cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064ce:	602f      	str	r7, [r5, #0]
 80064d0:	2900      	cmp	r1, #0
 80064d2:	d0ca      	beq.n	800646a <__sflush_r+0x1a>
 80064d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064d8:	4299      	cmp	r1, r3
 80064da:	d002      	beq.n	80064e2 <__sflush_r+0x92>
 80064dc:	4628      	mov	r0, r5
 80064de:	f7ff fc85 	bl	8005dec <_free_r>
 80064e2:	2000      	movs	r0, #0
 80064e4:	6360      	str	r0, [r4, #52]	; 0x34
 80064e6:	e7c1      	b.n	800646c <__sflush_r+0x1c>
 80064e8:	6a21      	ldr	r1, [r4, #32]
 80064ea:	2301      	movs	r3, #1
 80064ec:	4628      	mov	r0, r5
 80064ee:	47b0      	blx	r6
 80064f0:	1c41      	adds	r1, r0, #1
 80064f2:	d1c7      	bne.n	8006484 <__sflush_r+0x34>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0c4      	beq.n	8006484 <__sflush_r+0x34>
 80064fa:	2b1d      	cmp	r3, #29
 80064fc:	d001      	beq.n	8006502 <__sflush_r+0xb2>
 80064fe:	2b16      	cmp	r3, #22
 8006500:	d101      	bne.n	8006506 <__sflush_r+0xb6>
 8006502:	602f      	str	r7, [r5, #0]
 8006504:	e7b1      	b.n	800646a <__sflush_r+0x1a>
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800650c:	81a3      	strh	r3, [r4, #12]
 800650e:	e7ad      	b.n	800646c <__sflush_r+0x1c>
 8006510:	690f      	ldr	r7, [r1, #16]
 8006512:	2f00      	cmp	r7, #0
 8006514:	d0a9      	beq.n	800646a <__sflush_r+0x1a>
 8006516:	0793      	lsls	r3, r2, #30
 8006518:	bf18      	it	ne
 800651a:	2300      	movne	r3, #0
 800651c:	680e      	ldr	r6, [r1, #0]
 800651e:	bf08      	it	eq
 8006520:	694b      	ldreq	r3, [r1, #20]
 8006522:	eba6 0807 	sub.w	r8, r6, r7
 8006526:	600f      	str	r7, [r1, #0]
 8006528:	608b      	str	r3, [r1, #8]
 800652a:	f1b8 0f00 	cmp.w	r8, #0
 800652e:	dd9c      	ble.n	800646a <__sflush_r+0x1a>
 8006530:	4643      	mov	r3, r8
 8006532:	463a      	mov	r2, r7
 8006534:	4628      	mov	r0, r5
 8006536:	6a21      	ldr	r1, [r4, #32]
 8006538:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800653a:	47b0      	blx	r6
 800653c:	2800      	cmp	r0, #0
 800653e:	dc06      	bgt.n	800654e <__sflush_r+0xfe>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f04f 30ff 	mov.w	r0, #4294967295
 8006546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800654a:	81a3      	strh	r3, [r4, #12]
 800654c:	e78e      	b.n	800646c <__sflush_r+0x1c>
 800654e:	4407      	add	r7, r0
 8006550:	eba8 0800 	sub.w	r8, r8, r0
 8006554:	e7e9      	b.n	800652a <__sflush_r+0xda>
 8006556:	bf00      	nop
 8006558:	20400001 	.word	0x20400001

0800655c <_fflush_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	690b      	ldr	r3, [r1, #16]
 8006560:	4605      	mov	r5, r0
 8006562:	460c      	mov	r4, r1
 8006564:	b913      	cbnz	r3, 800656c <_fflush_r+0x10>
 8006566:	2500      	movs	r5, #0
 8006568:	4628      	mov	r0, r5
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	b118      	cbz	r0, 8006576 <_fflush_r+0x1a>
 800656e:	6983      	ldr	r3, [r0, #24]
 8006570:	b90b      	cbnz	r3, 8006576 <_fflush_r+0x1a>
 8006572:	f000 f887 	bl	8006684 <__sinit>
 8006576:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <_fflush_r+0x6c>)
 8006578:	429c      	cmp	r4, r3
 800657a:	d11b      	bne.n	80065b4 <_fflush_r+0x58>
 800657c:	686c      	ldr	r4, [r5, #4]
 800657e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d0ef      	beq.n	8006566 <_fflush_r+0xa>
 8006586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006588:	07d0      	lsls	r0, r2, #31
 800658a:	d404      	bmi.n	8006596 <_fflush_r+0x3a>
 800658c:	0599      	lsls	r1, r3, #22
 800658e:	d402      	bmi.n	8006596 <_fflush_r+0x3a>
 8006590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006592:	f000 f915 	bl	80067c0 <__retarget_lock_acquire_recursive>
 8006596:	4628      	mov	r0, r5
 8006598:	4621      	mov	r1, r4
 800659a:	f7ff ff59 	bl	8006450 <__sflush_r>
 800659e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065a0:	4605      	mov	r5, r0
 80065a2:	07da      	lsls	r2, r3, #31
 80065a4:	d4e0      	bmi.n	8006568 <_fflush_r+0xc>
 80065a6:	89a3      	ldrh	r3, [r4, #12]
 80065a8:	059b      	lsls	r3, r3, #22
 80065aa:	d4dd      	bmi.n	8006568 <_fflush_r+0xc>
 80065ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ae:	f000 f908 	bl	80067c2 <__retarget_lock_release_recursive>
 80065b2:	e7d9      	b.n	8006568 <_fflush_r+0xc>
 80065b4:	4b05      	ldr	r3, [pc, #20]	; (80065cc <_fflush_r+0x70>)
 80065b6:	429c      	cmp	r4, r3
 80065b8:	d101      	bne.n	80065be <_fflush_r+0x62>
 80065ba:	68ac      	ldr	r4, [r5, #8]
 80065bc:	e7df      	b.n	800657e <_fflush_r+0x22>
 80065be:	4b04      	ldr	r3, [pc, #16]	; (80065d0 <_fflush_r+0x74>)
 80065c0:	429c      	cmp	r4, r3
 80065c2:	bf08      	it	eq
 80065c4:	68ec      	ldreq	r4, [r5, #12]
 80065c6:	e7da      	b.n	800657e <_fflush_r+0x22>
 80065c8:	080074cc 	.word	0x080074cc
 80065cc:	080074ec 	.word	0x080074ec
 80065d0:	080074ac 	.word	0x080074ac

080065d4 <std>:
 80065d4:	2300      	movs	r3, #0
 80065d6:	b510      	push	{r4, lr}
 80065d8:	4604      	mov	r4, r0
 80065da:	e9c0 3300 	strd	r3, r3, [r0]
 80065de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065e2:	6083      	str	r3, [r0, #8]
 80065e4:	8181      	strh	r1, [r0, #12]
 80065e6:	6643      	str	r3, [r0, #100]	; 0x64
 80065e8:	81c2      	strh	r2, [r0, #14]
 80065ea:	6183      	str	r3, [r0, #24]
 80065ec:	4619      	mov	r1, r3
 80065ee:	2208      	movs	r2, #8
 80065f0:	305c      	adds	r0, #92	; 0x5c
 80065f2:	f7fd fd5d 	bl	80040b0 <memset>
 80065f6:	4b05      	ldr	r3, [pc, #20]	; (800660c <std+0x38>)
 80065f8:	6224      	str	r4, [r4, #32]
 80065fa:	6263      	str	r3, [r4, #36]	; 0x24
 80065fc:	4b04      	ldr	r3, [pc, #16]	; (8006610 <std+0x3c>)
 80065fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8006600:	4b04      	ldr	r3, [pc, #16]	; (8006614 <std+0x40>)
 8006602:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006604:	4b04      	ldr	r3, [pc, #16]	; (8006618 <std+0x44>)
 8006606:	6323      	str	r3, [r4, #48]	; 0x30
 8006608:	bd10      	pop	{r4, pc}
 800660a:	bf00      	nop
 800660c:	08006915 	.word	0x08006915
 8006610:	08006937 	.word	0x08006937
 8006614:	0800696f 	.word	0x0800696f
 8006618:	08006993 	.word	0x08006993

0800661c <_cleanup_r>:
 800661c:	4901      	ldr	r1, [pc, #4]	; (8006624 <_cleanup_r+0x8>)
 800661e:	f000 b8af 	b.w	8006780 <_fwalk_reent>
 8006622:	bf00      	nop
 8006624:	0800655d 	.word	0x0800655d

08006628 <__sfmoreglue>:
 8006628:	b570      	push	{r4, r5, r6, lr}
 800662a:	2568      	movs	r5, #104	; 0x68
 800662c:	1e4a      	subs	r2, r1, #1
 800662e:	4355      	muls	r5, r2
 8006630:	460e      	mov	r6, r1
 8006632:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006636:	f7ff fc25 	bl	8005e84 <_malloc_r>
 800663a:	4604      	mov	r4, r0
 800663c:	b140      	cbz	r0, 8006650 <__sfmoreglue+0x28>
 800663e:	2100      	movs	r1, #0
 8006640:	e9c0 1600 	strd	r1, r6, [r0]
 8006644:	300c      	adds	r0, #12
 8006646:	60a0      	str	r0, [r4, #8]
 8006648:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800664c:	f7fd fd30 	bl	80040b0 <memset>
 8006650:	4620      	mov	r0, r4
 8006652:	bd70      	pop	{r4, r5, r6, pc}

08006654 <__sfp_lock_acquire>:
 8006654:	4801      	ldr	r0, [pc, #4]	; (800665c <__sfp_lock_acquire+0x8>)
 8006656:	f000 b8b3 	b.w	80067c0 <__retarget_lock_acquire_recursive>
 800665a:	bf00      	nop
 800665c:	20000410 	.word	0x20000410

08006660 <__sfp_lock_release>:
 8006660:	4801      	ldr	r0, [pc, #4]	; (8006668 <__sfp_lock_release+0x8>)
 8006662:	f000 b8ae 	b.w	80067c2 <__retarget_lock_release_recursive>
 8006666:	bf00      	nop
 8006668:	20000410 	.word	0x20000410

0800666c <__sinit_lock_acquire>:
 800666c:	4801      	ldr	r0, [pc, #4]	; (8006674 <__sinit_lock_acquire+0x8>)
 800666e:	f000 b8a7 	b.w	80067c0 <__retarget_lock_acquire_recursive>
 8006672:	bf00      	nop
 8006674:	2000040b 	.word	0x2000040b

08006678 <__sinit_lock_release>:
 8006678:	4801      	ldr	r0, [pc, #4]	; (8006680 <__sinit_lock_release+0x8>)
 800667a:	f000 b8a2 	b.w	80067c2 <__retarget_lock_release_recursive>
 800667e:	bf00      	nop
 8006680:	2000040b 	.word	0x2000040b

08006684 <__sinit>:
 8006684:	b510      	push	{r4, lr}
 8006686:	4604      	mov	r4, r0
 8006688:	f7ff fff0 	bl	800666c <__sinit_lock_acquire>
 800668c:	69a3      	ldr	r3, [r4, #24]
 800668e:	b11b      	cbz	r3, 8006698 <__sinit+0x14>
 8006690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006694:	f7ff bff0 	b.w	8006678 <__sinit_lock_release>
 8006698:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800669c:	6523      	str	r3, [r4, #80]	; 0x50
 800669e:	4b13      	ldr	r3, [pc, #76]	; (80066ec <__sinit+0x68>)
 80066a0:	4a13      	ldr	r2, [pc, #76]	; (80066f0 <__sinit+0x6c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80066a6:	42a3      	cmp	r3, r4
 80066a8:	bf08      	it	eq
 80066aa:	2301      	moveq	r3, #1
 80066ac:	4620      	mov	r0, r4
 80066ae:	bf08      	it	eq
 80066b0:	61a3      	streq	r3, [r4, #24]
 80066b2:	f000 f81f 	bl	80066f4 <__sfp>
 80066b6:	6060      	str	r0, [r4, #4]
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 f81b 	bl	80066f4 <__sfp>
 80066be:	60a0      	str	r0, [r4, #8]
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 f817 	bl	80066f4 <__sfp>
 80066c6:	2200      	movs	r2, #0
 80066c8:	2104      	movs	r1, #4
 80066ca:	60e0      	str	r0, [r4, #12]
 80066cc:	6860      	ldr	r0, [r4, #4]
 80066ce:	f7ff ff81 	bl	80065d4 <std>
 80066d2:	2201      	movs	r2, #1
 80066d4:	2109      	movs	r1, #9
 80066d6:	68a0      	ldr	r0, [r4, #8]
 80066d8:	f7ff ff7c 	bl	80065d4 <std>
 80066dc:	2202      	movs	r2, #2
 80066de:	2112      	movs	r1, #18
 80066e0:	68e0      	ldr	r0, [r4, #12]
 80066e2:	f7ff ff77 	bl	80065d4 <std>
 80066e6:	2301      	movs	r3, #1
 80066e8:	61a3      	str	r3, [r4, #24]
 80066ea:	e7d1      	b.n	8006690 <__sinit+0xc>
 80066ec:	08007128 	.word	0x08007128
 80066f0:	0800661d 	.word	0x0800661d

080066f4 <__sfp>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	4607      	mov	r7, r0
 80066f8:	f7ff ffac 	bl	8006654 <__sfp_lock_acquire>
 80066fc:	4b1e      	ldr	r3, [pc, #120]	; (8006778 <__sfp+0x84>)
 80066fe:	681e      	ldr	r6, [r3, #0]
 8006700:	69b3      	ldr	r3, [r6, #24]
 8006702:	b913      	cbnz	r3, 800670a <__sfp+0x16>
 8006704:	4630      	mov	r0, r6
 8006706:	f7ff ffbd 	bl	8006684 <__sinit>
 800670a:	3648      	adds	r6, #72	; 0x48
 800670c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006710:	3b01      	subs	r3, #1
 8006712:	d503      	bpl.n	800671c <__sfp+0x28>
 8006714:	6833      	ldr	r3, [r6, #0]
 8006716:	b30b      	cbz	r3, 800675c <__sfp+0x68>
 8006718:	6836      	ldr	r6, [r6, #0]
 800671a:	e7f7      	b.n	800670c <__sfp+0x18>
 800671c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006720:	b9d5      	cbnz	r5, 8006758 <__sfp+0x64>
 8006722:	4b16      	ldr	r3, [pc, #88]	; (800677c <__sfp+0x88>)
 8006724:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006728:	60e3      	str	r3, [r4, #12]
 800672a:	6665      	str	r5, [r4, #100]	; 0x64
 800672c:	f000 f847 	bl	80067be <__retarget_lock_init_recursive>
 8006730:	f7ff ff96 	bl	8006660 <__sfp_lock_release>
 8006734:	2208      	movs	r2, #8
 8006736:	4629      	mov	r1, r5
 8006738:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800673c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006740:	6025      	str	r5, [r4, #0]
 8006742:	61a5      	str	r5, [r4, #24]
 8006744:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006748:	f7fd fcb2 	bl	80040b0 <memset>
 800674c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006750:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006754:	4620      	mov	r0, r4
 8006756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006758:	3468      	adds	r4, #104	; 0x68
 800675a:	e7d9      	b.n	8006710 <__sfp+0x1c>
 800675c:	2104      	movs	r1, #4
 800675e:	4638      	mov	r0, r7
 8006760:	f7ff ff62 	bl	8006628 <__sfmoreglue>
 8006764:	4604      	mov	r4, r0
 8006766:	6030      	str	r0, [r6, #0]
 8006768:	2800      	cmp	r0, #0
 800676a:	d1d5      	bne.n	8006718 <__sfp+0x24>
 800676c:	f7ff ff78 	bl	8006660 <__sfp_lock_release>
 8006770:	230c      	movs	r3, #12
 8006772:	603b      	str	r3, [r7, #0]
 8006774:	e7ee      	b.n	8006754 <__sfp+0x60>
 8006776:	bf00      	nop
 8006778:	08007128 	.word	0x08007128
 800677c:	ffff0001 	.word	0xffff0001

08006780 <_fwalk_reent>:
 8006780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006784:	4606      	mov	r6, r0
 8006786:	4688      	mov	r8, r1
 8006788:	2700      	movs	r7, #0
 800678a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800678e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006792:	f1b9 0901 	subs.w	r9, r9, #1
 8006796:	d505      	bpl.n	80067a4 <_fwalk_reent+0x24>
 8006798:	6824      	ldr	r4, [r4, #0]
 800679a:	2c00      	cmp	r4, #0
 800679c:	d1f7      	bne.n	800678e <_fwalk_reent+0xe>
 800679e:	4638      	mov	r0, r7
 80067a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a4:	89ab      	ldrh	r3, [r5, #12]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d907      	bls.n	80067ba <_fwalk_reent+0x3a>
 80067aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067ae:	3301      	adds	r3, #1
 80067b0:	d003      	beq.n	80067ba <_fwalk_reent+0x3a>
 80067b2:	4629      	mov	r1, r5
 80067b4:	4630      	mov	r0, r6
 80067b6:	47c0      	blx	r8
 80067b8:	4307      	orrs	r7, r0
 80067ba:	3568      	adds	r5, #104	; 0x68
 80067bc:	e7e9      	b.n	8006792 <_fwalk_reent+0x12>

080067be <__retarget_lock_init_recursive>:
 80067be:	4770      	bx	lr

080067c0 <__retarget_lock_acquire_recursive>:
 80067c0:	4770      	bx	lr

080067c2 <__retarget_lock_release_recursive>:
 80067c2:	4770      	bx	lr

080067c4 <__swhatbuf_r>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	460e      	mov	r6, r1
 80067c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067cc:	4614      	mov	r4, r2
 80067ce:	2900      	cmp	r1, #0
 80067d0:	461d      	mov	r5, r3
 80067d2:	b096      	sub	sp, #88	; 0x58
 80067d4:	da07      	bge.n	80067e6 <__swhatbuf_r+0x22>
 80067d6:	2300      	movs	r3, #0
 80067d8:	602b      	str	r3, [r5, #0]
 80067da:	89b3      	ldrh	r3, [r6, #12]
 80067dc:	061a      	lsls	r2, r3, #24
 80067de:	d410      	bmi.n	8006802 <__swhatbuf_r+0x3e>
 80067e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067e4:	e00e      	b.n	8006804 <__swhatbuf_r+0x40>
 80067e6:	466a      	mov	r2, sp
 80067e8:	f000 f8fa 	bl	80069e0 <_fstat_r>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	dbf2      	blt.n	80067d6 <__swhatbuf_r+0x12>
 80067f0:	9a01      	ldr	r2, [sp, #4]
 80067f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067fa:	425a      	negs	r2, r3
 80067fc:	415a      	adcs	r2, r3
 80067fe:	602a      	str	r2, [r5, #0]
 8006800:	e7ee      	b.n	80067e0 <__swhatbuf_r+0x1c>
 8006802:	2340      	movs	r3, #64	; 0x40
 8006804:	2000      	movs	r0, #0
 8006806:	6023      	str	r3, [r4, #0]
 8006808:	b016      	add	sp, #88	; 0x58
 800680a:	bd70      	pop	{r4, r5, r6, pc}

0800680c <__smakebuf_r>:
 800680c:	898b      	ldrh	r3, [r1, #12]
 800680e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006810:	079d      	lsls	r5, r3, #30
 8006812:	4606      	mov	r6, r0
 8006814:	460c      	mov	r4, r1
 8006816:	d507      	bpl.n	8006828 <__smakebuf_r+0x1c>
 8006818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800681c:	6023      	str	r3, [r4, #0]
 800681e:	6123      	str	r3, [r4, #16]
 8006820:	2301      	movs	r3, #1
 8006822:	6163      	str	r3, [r4, #20]
 8006824:	b002      	add	sp, #8
 8006826:	bd70      	pop	{r4, r5, r6, pc}
 8006828:	466a      	mov	r2, sp
 800682a:	ab01      	add	r3, sp, #4
 800682c:	f7ff ffca 	bl	80067c4 <__swhatbuf_r>
 8006830:	9900      	ldr	r1, [sp, #0]
 8006832:	4605      	mov	r5, r0
 8006834:	4630      	mov	r0, r6
 8006836:	f7ff fb25 	bl	8005e84 <_malloc_r>
 800683a:	b948      	cbnz	r0, 8006850 <__smakebuf_r+0x44>
 800683c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006840:	059a      	lsls	r2, r3, #22
 8006842:	d4ef      	bmi.n	8006824 <__smakebuf_r+0x18>
 8006844:	f023 0303 	bic.w	r3, r3, #3
 8006848:	f043 0302 	orr.w	r3, r3, #2
 800684c:	81a3      	strh	r3, [r4, #12]
 800684e:	e7e3      	b.n	8006818 <__smakebuf_r+0xc>
 8006850:	4b0d      	ldr	r3, [pc, #52]	; (8006888 <__smakebuf_r+0x7c>)
 8006852:	62b3      	str	r3, [r6, #40]	; 0x28
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	6020      	str	r0, [r4, #0]
 8006858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685c:	81a3      	strh	r3, [r4, #12]
 800685e:	9b00      	ldr	r3, [sp, #0]
 8006860:	6120      	str	r0, [r4, #16]
 8006862:	6163      	str	r3, [r4, #20]
 8006864:	9b01      	ldr	r3, [sp, #4]
 8006866:	b15b      	cbz	r3, 8006880 <__smakebuf_r+0x74>
 8006868:	4630      	mov	r0, r6
 800686a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800686e:	f000 f8c9 	bl	8006a04 <_isatty_r>
 8006872:	b128      	cbz	r0, 8006880 <__smakebuf_r+0x74>
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	f023 0303 	bic.w	r3, r3, #3
 800687a:	f043 0301 	orr.w	r3, r3, #1
 800687e:	81a3      	strh	r3, [r4, #12]
 8006880:	89a0      	ldrh	r0, [r4, #12]
 8006882:	4305      	orrs	r5, r0
 8006884:	81a5      	strh	r5, [r4, #12]
 8006886:	e7cd      	b.n	8006824 <__smakebuf_r+0x18>
 8006888:	0800661d 	.word	0x0800661d

0800688c <_raise_r>:
 800688c:	291f      	cmp	r1, #31
 800688e:	b538      	push	{r3, r4, r5, lr}
 8006890:	4604      	mov	r4, r0
 8006892:	460d      	mov	r5, r1
 8006894:	d904      	bls.n	80068a0 <_raise_r+0x14>
 8006896:	2316      	movs	r3, #22
 8006898:	6003      	str	r3, [r0, #0]
 800689a:	f04f 30ff 	mov.w	r0, #4294967295
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80068a2:	b112      	cbz	r2, 80068aa <_raise_r+0x1e>
 80068a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068a8:	b94b      	cbnz	r3, 80068be <_raise_r+0x32>
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 f830 	bl	8006910 <_getpid_r>
 80068b0:	462a      	mov	r2, r5
 80068b2:	4601      	mov	r1, r0
 80068b4:	4620      	mov	r0, r4
 80068b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068ba:	f000 b817 	b.w	80068ec <_kill_r>
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d00a      	beq.n	80068d8 <_raise_r+0x4c>
 80068c2:	1c59      	adds	r1, r3, #1
 80068c4:	d103      	bne.n	80068ce <_raise_r+0x42>
 80068c6:	2316      	movs	r3, #22
 80068c8:	6003      	str	r3, [r0, #0]
 80068ca:	2001      	movs	r0, #1
 80068cc:	e7e7      	b.n	800689e <_raise_r+0x12>
 80068ce:	2400      	movs	r4, #0
 80068d0:	4628      	mov	r0, r5
 80068d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80068d6:	4798      	blx	r3
 80068d8:	2000      	movs	r0, #0
 80068da:	e7e0      	b.n	800689e <_raise_r+0x12>

080068dc <raise>:
 80068dc:	4b02      	ldr	r3, [pc, #8]	; (80068e8 <raise+0xc>)
 80068de:	4601      	mov	r1, r0
 80068e0:	6818      	ldr	r0, [r3, #0]
 80068e2:	f7ff bfd3 	b.w	800688c <_raise_r>
 80068e6:	bf00      	nop
 80068e8:	200000a0 	.word	0x200000a0

080068ec <_kill_r>:
 80068ec:	b538      	push	{r3, r4, r5, lr}
 80068ee:	2300      	movs	r3, #0
 80068f0:	4d06      	ldr	r5, [pc, #24]	; (800690c <_kill_r+0x20>)
 80068f2:	4604      	mov	r4, r0
 80068f4:	4608      	mov	r0, r1
 80068f6:	4611      	mov	r1, r2
 80068f8:	602b      	str	r3, [r5, #0]
 80068fa:	f7fa fdfd 	bl	80014f8 <_kill>
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	d102      	bne.n	8006908 <_kill_r+0x1c>
 8006902:	682b      	ldr	r3, [r5, #0]
 8006904:	b103      	cbz	r3, 8006908 <_kill_r+0x1c>
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	bd38      	pop	{r3, r4, r5, pc}
 800690a:	bf00      	nop
 800690c:	20000404 	.word	0x20000404

08006910 <_getpid_r>:
 8006910:	f7fa bdeb 	b.w	80014ea <_getpid>

08006914 <__sread>:
 8006914:	b510      	push	{r4, lr}
 8006916:	460c      	mov	r4, r1
 8006918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800691c:	f000 f894 	bl	8006a48 <_read_r>
 8006920:	2800      	cmp	r0, #0
 8006922:	bfab      	itete	ge
 8006924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006926:	89a3      	ldrhlt	r3, [r4, #12]
 8006928:	181b      	addge	r3, r3, r0
 800692a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800692e:	bfac      	ite	ge
 8006930:	6563      	strge	r3, [r4, #84]	; 0x54
 8006932:	81a3      	strhlt	r3, [r4, #12]
 8006934:	bd10      	pop	{r4, pc}

08006936 <__swrite>:
 8006936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800693a:	461f      	mov	r7, r3
 800693c:	898b      	ldrh	r3, [r1, #12]
 800693e:	4605      	mov	r5, r0
 8006940:	05db      	lsls	r3, r3, #23
 8006942:	460c      	mov	r4, r1
 8006944:	4616      	mov	r6, r2
 8006946:	d505      	bpl.n	8006954 <__swrite+0x1e>
 8006948:	2302      	movs	r3, #2
 800694a:	2200      	movs	r2, #0
 800694c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006950:	f000 f868 	bl	8006a24 <_lseek_r>
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	4632      	mov	r2, r6
 8006958:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800695c:	81a3      	strh	r3, [r4, #12]
 800695e:	4628      	mov	r0, r5
 8006960:	463b      	mov	r3, r7
 8006962:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800696a:	f000 b817 	b.w	800699c <_write_r>

0800696e <__sseek>:
 800696e:	b510      	push	{r4, lr}
 8006970:	460c      	mov	r4, r1
 8006972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006976:	f000 f855 	bl	8006a24 <_lseek_r>
 800697a:	1c43      	adds	r3, r0, #1
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	bf15      	itete	ne
 8006980:	6560      	strne	r0, [r4, #84]	; 0x54
 8006982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800698a:	81a3      	strheq	r3, [r4, #12]
 800698c:	bf18      	it	ne
 800698e:	81a3      	strhne	r3, [r4, #12]
 8006990:	bd10      	pop	{r4, pc}

08006992 <__sclose>:
 8006992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006996:	f000 b813 	b.w	80069c0 <_close_r>
	...

0800699c <_write_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4604      	mov	r4, r0
 80069a0:	4608      	mov	r0, r1
 80069a2:	4611      	mov	r1, r2
 80069a4:	2200      	movs	r2, #0
 80069a6:	4d05      	ldr	r5, [pc, #20]	; (80069bc <_write_r+0x20>)
 80069a8:	602a      	str	r2, [r5, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	f7fa fddb 	bl	8001566 <_write>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d102      	bne.n	80069ba <_write_r+0x1e>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	b103      	cbz	r3, 80069ba <_write_r+0x1e>
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
 80069bc:	20000404 	.word	0x20000404

080069c0 <_close_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	2300      	movs	r3, #0
 80069c4:	4d05      	ldr	r5, [pc, #20]	; (80069dc <_close_r+0x1c>)
 80069c6:	4604      	mov	r4, r0
 80069c8:	4608      	mov	r0, r1
 80069ca:	602b      	str	r3, [r5, #0]
 80069cc:	f7fa fde7 	bl	800159e <_close>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d102      	bne.n	80069da <_close_r+0x1a>
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	b103      	cbz	r3, 80069da <_close_r+0x1a>
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	20000404 	.word	0x20000404

080069e0 <_fstat_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	2300      	movs	r3, #0
 80069e4:	4d06      	ldr	r5, [pc, #24]	; (8006a00 <_fstat_r+0x20>)
 80069e6:	4604      	mov	r4, r0
 80069e8:	4608      	mov	r0, r1
 80069ea:	4611      	mov	r1, r2
 80069ec:	602b      	str	r3, [r5, #0]
 80069ee:	f7fa fde1 	bl	80015b4 <_fstat>
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	d102      	bne.n	80069fc <_fstat_r+0x1c>
 80069f6:	682b      	ldr	r3, [r5, #0]
 80069f8:	b103      	cbz	r3, 80069fc <_fstat_r+0x1c>
 80069fa:	6023      	str	r3, [r4, #0]
 80069fc:	bd38      	pop	{r3, r4, r5, pc}
 80069fe:	bf00      	nop
 8006a00:	20000404 	.word	0x20000404

08006a04 <_isatty_r>:
 8006a04:	b538      	push	{r3, r4, r5, lr}
 8006a06:	2300      	movs	r3, #0
 8006a08:	4d05      	ldr	r5, [pc, #20]	; (8006a20 <_isatty_r+0x1c>)
 8006a0a:	4604      	mov	r4, r0
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	602b      	str	r3, [r5, #0]
 8006a10:	f7fa fddf 	bl	80015d2 <_isatty>
 8006a14:	1c43      	adds	r3, r0, #1
 8006a16:	d102      	bne.n	8006a1e <_isatty_r+0x1a>
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	b103      	cbz	r3, 8006a1e <_isatty_r+0x1a>
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	bd38      	pop	{r3, r4, r5, pc}
 8006a20:	20000404 	.word	0x20000404

08006a24 <_lseek_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4604      	mov	r4, r0
 8006a28:	4608      	mov	r0, r1
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	4d05      	ldr	r5, [pc, #20]	; (8006a44 <_lseek_r+0x20>)
 8006a30:	602a      	str	r2, [r5, #0]
 8006a32:	461a      	mov	r2, r3
 8006a34:	f7fa fdd7 	bl	80015e6 <_lseek>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_lseek_r+0x1e>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_lseek_r+0x1e>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	20000404 	.word	0x20000404

08006a48 <_read_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	4611      	mov	r1, r2
 8006a50:	2200      	movs	r2, #0
 8006a52:	4d05      	ldr	r5, [pc, #20]	; (8006a68 <_read_r+0x20>)
 8006a54:	602a      	str	r2, [r5, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	f7fa fd68 	bl	800152c <_read>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d102      	bne.n	8006a66 <_read_r+0x1e>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	b103      	cbz	r3, 8006a66 <_read_r+0x1e>
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	20000404 	.word	0x20000404
 8006a6c:	00000000 	.word	0x00000000

08006a70 <atan>:
 8006a70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a74:	4bb6      	ldr	r3, [pc, #728]	; (8006d50 <atan+0x2e0>)
 8006a76:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006a7a:	429e      	cmp	r6, r3
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	460d      	mov	r5, r1
 8006a80:	468b      	mov	fp, r1
 8006a82:	dd17      	ble.n	8006ab4 <atan+0x44>
 8006a84:	4bb3      	ldr	r3, [pc, #716]	; (8006d54 <atan+0x2e4>)
 8006a86:	429e      	cmp	r6, r3
 8006a88:	dc01      	bgt.n	8006a8e <atan+0x1e>
 8006a8a:	d109      	bne.n	8006aa0 <atan+0x30>
 8006a8c:	b140      	cbz	r0, 8006aa0 <atan+0x30>
 8006a8e:	4622      	mov	r2, r4
 8006a90:	462b      	mov	r3, r5
 8006a92:	4620      	mov	r0, r4
 8006a94:	4629      	mov	r1, r5
 8006a96:	f7f9 fbd5 	bl	8000244 <__adddf3>
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	460d      	mov	r5, r1
 8006a9e:	e005      	b.n	8006aac <atan+0x3c>
 8006aa0:	f1bb 0f00 	cmp.w	fp, #0
 8006aa4:	4cac      	ldr	r4, [pc, #688]	; (8006d58 <atan+0x2e8>)
 8006aa6:	f300 8121 	bgt.w	8006cec <atan+0x27c>
 8006aaa:	4dac      	ldr	r5, [pc, #688]	; (8006d5c <atan+0x2ec>)
 8006aac:	4620      	mov	r0, r4
 8006aae:	4629      	mov	r1, r5
 8006ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab4:	4baa      	ldr	r3, [pc, #680]	; (8006d60 <atan+0x2f0>)
 8006ab6:	429e      	cmp	r6, r3
 8006ab8:	dc11      	bgt.n	8006ade <atan+0x6e>
 8006aba:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006abe:	429e      	cmp	r6, r3
 8006ac0:	dc0a      	bgt.n	8006ad8 <atan+0x68>
 8006ac2:	a38b      	add	r3, pc, #556	; (adr r3, 8006cf0 <atan+0x280>)
 8006ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac8:	f7f9 fbbc 	bl	8000244 <__adddf3>
 8006acc:	2200      	movs	r2, #0
 8006ace:	4ba5      	ldr	r3, [pc, #660]	; (8006d64 <atan+0x2f4>)
 8006ad0:	f7f9 fffe 	bl	8000ad0 <__aeabi_dcmpgt>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d1e9      	bne.n	8006aac <atan+0x3c>
 8006ad8:	f04f 3aff 	mov.w	sl, #4294967295
 8006adc:	e027      	b.n	8006b2e <atan+0xbe>
 8006ade:	f000 f951 	bl	8006d84 <fabs>
 8006ae2:	4ba1      	ldr	r3, [pc, #644]	; (8006d68 <atan+0x2f8>)
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	429e      	cmp	r6, r3
 8006ae8:	460d      	mov	r5, r1
 8006aea:	f300 80b8 	bgt.w	8006c5e <atan+0x1ee>
 8006aee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006af2:	429e      	cmp	r6, r3
 8006af4:	f300 809c 	bgt.w	8006c30 <atan+0x1c0>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	f7f9 fba2 	bl	8000244 <__adddf3>
 8006b00:	2200      	movs	r2, #0
 8006b02:	4b98      	ldr	r3, [pc, #608]	; (8006d64 <atan+0x2f4>)
 8006b04:	f7f9 fb9c 	bl	8000240 <__aeabi_dsub>
 8006b08:	2200      	movs	r2, #0
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	460f      	mov	r7, r1
 8006b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b12:	4620      	mov	r0, r4
 8006b14:	4629      	mov	r1, r5
 8006b16:	f7f9 fb95 	bl	8000244 <__adddf3>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4630      	mov	r0, r6
 8006b20:	4639      	mov	r1, r7
 8006b22:	f7f9 fe6f 	bl	8000804 <__aeabi_ddiv>
 8006b26:	f04f 0a00 	mov.w	sl, #0
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	4622      	mov	r2, r4
 8006b30:	462b      	mov	r3, r5
 8006b32:	4620      	mov	r0, r4
 8006b34:	4629      	mov	r1, r5
 8006b36:	f7f9 fd3b 	bl	80005b0 <__aeabi_dmul>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	4680      	mov	r8, r0
 8006b40:	4689      	mov	r9, r1
 8006b42:	f7f9 fd35 	bl	80005b0 <__aeabi_dmul>
 8006b46:	a36c      	add	r3, pc, #432	; (adr r3, 8006cf8 <atan+0x288>)
 8006b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	460f      	mov	r7, r1
 8006b50:	f7f9 fd2e 	bl	80005b0 <__aeabi_dmul>
 8006b54:	a36a      	add	r3, pc, #424	; (adr r3, 8006d00 <atan+0x290>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f7f9 fb73 	bl	8000244 <__adddf3>
 8006b5e:	4632      	mov	r2, r6
 8006b60:	463b      	mov	r3, r7
 8006b62:	f7f9 fd25 	bl	80005b0 <__aeabi_dmul>
 8006b66:	a368      	add	r3, pc, #416	; (adr r3, 8006d08 <atan+0x298>)
 8006b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b6c:	f7f9 fb6a 	bl	8000244 <__adddf3>
 8006b70:	4632      	mov	r2, r6
 8006b72:	463b      	mov	r3, r7
 8006b74:	f7f9 fd1c 	bl	80005b0 <__aeabi_dmul>
 8006b78:	a365      	add	r3, pc, #404	; (adr r3, 8006d10 <atan+0x2a0>)
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	f7f9 fb61 	bl	8000244 <__adddf3>
 8006b82:	4632      	mov	r2, r6
 8006b84:	463b      	mov	r3, r7
 8006b86:	f7f9 fd13 	bl	80005b0 <__aeabi_dmul>
 8006b8a:	a363      	add	r3, pc, #396	; (adr r3, 8006d18 <atan+0x2a8>)
 8006b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b90:	f7f9 fb58 	bl	8000244 <__adddf3>
 8006b94:	4632      	mov	r2, r6
 8006b96:	463b      	mov	r3, r7
 8006b98:	f7f9 fd0a 	bl	80005b0 <__aeabi_dmul>
 8006b9c:	a360      	add	r3, pc, #384	; (adr r3, 8006d20 <atan+0x2b0>)
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f7f9 fb4f 	bl	8000244 <__adddf3>
 8006ba6:	4642      	mov	r2, r8
 8006ba8:	464b      	mov	r3, r9
 8006baa:	f7f9 fd01 	bl	80005b0 <__aeabi_dmul>
 8006bae:	a35e      	add	r3, pc, #376	; (adr r3, 8006d28 <atan+0x2b8>)
 8006bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	4689      	mov	r9, r1
 8006bb8:	4630      	mov	r0, r6
 8006bba:	4639      	mov	r1, r7
 8006bbc:	f7f9 fcf8 	bl	80005b0 <__aeabi_dmul>
 8006bc0:	a35b      	add	r3, pc, #364	; (adr r3, 8006d30 <atan+0x2c0>)
 8006bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc6:	f7f9 fb3b 	bl	8000240 <__aeabi_dsub>
 8006bca:	4632      	mov	r2, r6
 8006bcc:	463b      	mov	r3, r7
 8006bce:	f7f9 fcef 	bl	80005b0 <__aeabi_dmul>
 8006bd2:	a359      	add	r3, pc, #356	; (adr r3, 8006d38 <atan+0x2c8>)
 8006bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd8:	f7f9 fb32 	bl	8000240 <__aeabi_dsub>
 8006bdc:	4632      	mov	r2, r6
 8006bde:	463b      	mov	r3, r7
 8006be0:	f7f9 fce6 	bl	80005b0 <__aeabi_dmul>
 8006be4:	a356      	add	r3, pc, #344	; (adr r3, 8006d40 <atan+0x2d0>)
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	f7f9 fb29 	bl	8000240 <__aeabi_dsub>
 8006bee:	4632      	mov	r2, r6
 8006bf0:	463b      	mov	r3, r7
 8006bf2:	f7f9 fcdd 	bl	80005b0 <__aeabi_dmul>
 8006bf6:	a354      	add	r3, pc, #336	; (adr r3, 8006d48 <atan+0x2d8>)
 8006bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfc:	f7f9 fb20 	bl	8000240 <__aeabi_dsub>
 8006c00:	4632      	mov	r2, r6
 8006c02:	463b      	mov	r3, r7
 8006c04:	f7f9 fcd4 	bl	80005b0 <__aeabi_dmul>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	4649      	mov	r1, r9
 8006c10:	f7f9 fb18 	bl	8000244 <__adddf3>
 8006c14:	4622      	mov	r2, r4
 8006c16:	462b      	mov	r3, r5
 8006c18:	f7f9 fcca 	bl	80005b0 <__aeabi_dmul>
 8006c1c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	d144      	bne.n	8006cb0 <atan+0x240>
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7f9 fb09 	bl	8000240 <__aeabi_dsub>
 8006c2e:	e734      	b.n	8006a9a <atan+0x2a>
 8006c30:	2200      	movs	r2, #0
 8006c32:	4b4c      	ldr	r3, [pc, #304]	; (8006d64 <atan+0x2f4>)
 8006c34:	f7f9 fb04 	bl	8000240 <__aeabi_dsub>
 8006c38:	2200      	movs	r2, #0
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	460f      	mov	r7, r1
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	4b48      	ldr	r3, [pc, #288]	; (8006d64 <atan+0x2f4>)
 8006c44:	f7f9 fafe 	bl	8000244 <__adddf3>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	4630      	mov	r0, r6
 8006c4e:	4639      	mov	r1, r7
 8006c50:	f7f9 fdd8 	bl	8000804 <__aeabi_ddiv>
 8006c54:	f04f 0a01 	mov.w	sl, #1
 8006c58:	4604      	mov	r4, r0
 8006c5a:	460d      	mov	r5, r1
 8006c5c:	e767      	b.n	8006b2e <atan+0xbe>
 8006c5e:	4b43      	ldr	r3, [pc, #268]	; (8006d6c <atan+0x2fc>)
 8006c60:	429e      	cmp	r6, r3
 8006c62:	da1a      	bge.n	8006c9a <atan+0x22a>
 8006c64:	2200      	movs	r2, #0
 8006c66:	4b42      	ldr	r3, [pc, #264]	; (8006d70 <atan+0x300>)
 8006c68:	f7f9 faea 	bl	8000240 <__aeabi_dsub>
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	4606      	mov	r6, r0
 8006c70:	460f      	mov	r7, r1
 8006c72:	4620      	mov	r0, r4
 8006c74:	4629      	mov	r1, r5
 8006c76:	4b3e      	ldr	r3, [pc, #248]	; (8006d70 <atan+0x300>)
 8006c78:	f7f9 fc9a 	bl	80005b0 <__aeabi_dmul>
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	4b39      	ldr	r3, [pc, #228]	; (8006d64 <atan+0x2f4>)
 8006c80:	f7f9 fae0 	bl	8000244 <__adddf3>
 8006c84:	4602      	mov	r2, r0
 8006c86:	460b      	mov	r3, r1
 8006c88:	4630      	mov	r0, r6
 8006c8a:	4639      	mov	r1, r7
 8006c8c:	f7f9 fdba 	bl	8000804 <__aeabi_ddiv>
 8006c90:	f04f 0a02 	mov.w	sl, #2
 8006c94:	4604      	mov	r4, r0
 8006c96:	460d      	mov	r5, r1
 8006c98:	e749      	b.n	8006b2e <atan+0xbe>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	4934      	ldr	r1, [pc, #208]	; (8006d74 <atan+0x304>)
 8006ca2:	f7f9 fdaf 	bl	8000804 <__aeabi_ddiv>
 8006ca6:	f04f 0a03 	mov.w	sl, #3
 8006caa:	4604      	mov	r4, r0
 8006cac:	460d      	mov	r5, r1
 8006cae:	e73e      	b.n	8006b2e <atan+0xbe>
 8006cb0:	4b31      	ldr	r3, [pc, #196]	; (8006d78 <atan+0x308>)
 8006cb2:	4e32      	ldr	r6, [pc, #200]	; (8006d7c <atan+0x30c>)
 8006cb4:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8006cb8:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006cbc:	e9da 2300 	ldrd	r2, r3, [sl]
 8006cc0:	f7f9 fabe 	bl	8000240 <__aeabi_dsub>
 8006cc4:	4622      	mov	r2, r4
 8006cc6:	462b      	mov	r3, r5
 8006cc8:	f7f9 faba 	bl	8000240 <__aeabi_dsub>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	460b      	mov	r3, r1
 8006cd0:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006cd4:	f7f9 fab4 	bl	8000240 <__aeabi_dsub>
 8006cd8:	f1bb 0f00 	cmp.w	fp, #0
 8006cdc:	4604      	mov	r4, r0
 8006cde:	460d      	mov	r5, r1
 8006ce0:	f6bf aee4 	bge.w	8006aac <atan+0x3c>
 8006ce4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ce8:	461d      	mov	r5, r3
 8006cea:	e6df      	b.n	8006aac <atan+0x3c>
 8006cec:	4d24      	ldr	r5, [pc, #144]	; (8006d80 <atan+0x310>)
 8006cee:	e6dd      	b.n	8006aac <atan+0x3c>
 8006cf0:	8800759c 	.word	0x8800759c
 8006cf4:	7e37e43c 	.word	0x7e37e43c
 8006cf8:	e322da11 	.word	0xe322da11
 8006cfc:	3f90ad3a 	.word	0x3f90ad3a
 8006d00:	24760deb 	.word	0x24760deb
 8006d04:	3fa97b4b 	.word	0x3fa97b4b
 8006d08:	a0d03d51 	.word	0xa0d03d51
 8006d0c:	3fb10d66 	.word	0x3fb10d66
 8006d10:	c54c206e 	.word	0xc54c206e
 8006d14:	3fb745cd 	.word	0x3fb745cd
 8006d18:	920083ff 	.word	0x920083ff
 8006d1c:	3fc24924 	.word	0x3fc24924
 8006d20:	5555550d 	.word	0x5555550d
 8006d24:	3fd55555 	.word	0x3fd55555
 8006d28:	2c6a6c2f 	.word	0x2c6a6c2f
 8006d2c:	bfa2b444 	.word	0xbfa2b444
 8006d30:	52defd9a 	.word	0x52defd9a
 8006d34:	3fadde2d 	.word	0x3fadde2d
 8006d38:	af749a6d 	.word	0xaf749a6d
 8006d3c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006d40:	fe231671 	.word	0xfe231671
 8006d44:	3fbc71c6 	.word	0x3fbc71c6
 8006d48:	9998ebc4 	.word	0x9998ebc4
 8006d4c:	3fc99999 	.word	0x3fc99999
 8006d50:	440fffff 	.word	0x440fffff
 8006d54:	7ff00000 	.word	0x7ff00000
 8006d58:	54442d18 	.word	0x54442d18
 8006d5c:	bff921fb 	.word	0xbff921fb
 8006d60:	3fdbffff 	.word	0x3fdbffff
 8006d64:	3ff00000 	.word	0x3ff00000
 8006d68:	3ff2ffff 	.word	0x3ff2ffff
 8006d6c:	40038000 	.word	0x40038000
 8006d70:	3ff80000 	.word	0x3ff80000
 8006d74:	bff00000 	.word	0xbff00000
 8006d78:	08007530 	.word	0x08007530
 8006d7c:	08007510 	.word	0x08007510
 8006d80:	3ff921fb 	.word	0x3ff921fb

08006d84 <fabs>:
 8006d84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006d88:	4770      	bx	lr

08006d8a <atan2>:
 8006d8a:	f000 b82d 	b.w	8006de8 <__ieee754_atan2>
	...

08006d90 <sqrt>:
 8006d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d92:	4606      	mov	r6, r0
 8006d94:	460f      	mov	r7, r1
 8006d96:	f000 f8f9 	bl	8006f8c <__ieee754_sqrt>
 8006d9a:	4b12      	ldr	r3, [pc, #72]	; (8006de4 <sqrt+0x54>)
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8006da2:	460d      	mov	r5, r1
 8006da4:	3301      	adds	r3, #1
 8006da6:	d019      	beq.n	8006ddc <sqrt+0x4c>
 8006da8:	4632      	mov	r2, r6
 8006daa:	463b      	mov	r3, r7
 8006dac:	4630      	mov	r0, r6
 8006dae:	4639      	mov	r1, r7
 8006db0:	f7f9 fe98 	bl	8000ae4 <__aeabi_dcmpun>
 8006db4:	b990      	cbnz	r0, 8006ddc <sqrt+0x4c>
 8006db6:	2200      	movs	r2, #0
 8006db8:	2300      	movs	r3, #0
 8006dba:	4630      	mov	r0, r6
 8006dbc:	4639      	mov	r1, r7
 8006dbe:	f7f9 fe69 	bl	8000a94 <__aeabi_dcmplt>
 8006dc2:	b158      	cbz	r0, 8006ddc <sqrt+0x4c>
 8006dc4:	f7fd f94a 	bl	800405c <__errno>
 8006dc8:	2321      	movs	r3, #33	; 0x21
 8006dca:	2200      	movs	r2, #0
 8006dcc:	6003      	str	r3, [r0, #0]
 8006dce:	2300      	movs	r3, #0
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	f7f9 fd16 	bl	8000804 <__aeabi_ddiv>
 8006dd8:	4604      	mov	r4, r0
 8006dda:	460d      	mov	r5, r1
 8006ddc:	4620      	mov	r0, r4
 8006dde:	4629      	mov	r1, r5
 8006de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006de2:	bf00      	nop
 8006de4:	20000270 	.word	0x20000270

08006de8 <__ieee754_atan2>:
 8006de8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dec:	4692      	mov	sl, r2
 8006dee:	4699      	mov	r9, r3
 8006df0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006df4:	461f      	mov	r7, r3
 8006df6:	f1ca 0300 	rsb	r3, sl, #0
 8006dfa:	f8df e18c 	ldr.w	lr, [pc, #396]	; 8006f88 <__ieee754_atan2+0x1a0>
 8006dfe:	ea43 030a 	orr.w	r3, r3, sl
 8006e02:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006e06:	4573      	cmp	r3, lr
 8006e08:	4604      	mov	r4, r0
 8006e0a:	460d      	mov	r5, r1
 8006e0c:	d808      	bhi.n	8006e20 <__ieee754_atan2+0x38>
 8006e0e:	4246      	negs	r6, r0
 8006e10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006e14:	4306      	orrs	r6, r0
 8006e16:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8006e1a:	4576      	cmp	r6, lr
 8006e1c:	468c      	mov	ip, r1
 8006e1e:	d908      	bls.n	8006e32 <__ieee754_atan2+0x4a>
 8006e20:	4652      	mov	r2, sl
 8006e22:	464b      	mov	r3, r9
 8006e24:	4620      	mov	r0, r4
 8006e26:	4629      	mov	r1, r5
 8006e28:	f7f9 fa0c 	bl	8000244 <__adddf3>
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	460d      	mov	r5, r1
 8006e30:	e019      	b.n	8006e66 <__ieee754_atan2+0x7e>
 8006e32:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8006e36:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006e3a:	ea56 060a 	orrs.w	r6, r6, sl
 8006e3e:	d103      	bne.n	8006e48 <__ieee754_atan2+0x60>
 8006e40:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e44:	f7ff be14 	b.w	8006a70 <atan>
 8006e48:	17be      	asrs	r6, r7, #30
 8006e4a:	f006 0602 	and.w	r6, r6, #2
 8006e4e:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006e52:	ea53 0100 	orrs.w	r1, r3, r0
 8006e56:	d10a      	bne.n	8006e6e <__ieee754_atan2+0x86>
 8006e58:	2e02      	cmp	r6, #2
 8006e5a:	d067      	beq.n	8006f2c <__ieee754_atan2+0x144>
 8006e5c:	2e03      	cmp	r6, #3
 8006e5e:	d102      	bne.n	8006e66 <__ieee754_atan2+0x7e>
 8006e60:	a53b      	add	r5, pc, #236	; (adr r5, 8006f50 <__ieee754_atan2+0x168>)
 8006e62:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e66:	4620      	mov	r0, r4
 8006e68:	4629      	mov	r1, r5
 8006e6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6e:	ea52 010a 	orrs.w	r1, r2, sl
 8006e72:	d106      	bne.n	8006e82 <__ieee754_atan2+0x9a>
 8006e74:	f1bc 0f00 	cmp.w	ip, #0
 8006e78:	da63      	bge.n	8006f42 <__ieee754_atan2+0x15a>
 8006e7a:	a537      	add	r5, pc, #220	; (adr r5, 8006f58 <__ieee754_atan2+0x170>)
 8006e7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e80:	e7f1      	b.n	8006e66 <__ieee754_atan2+0x7e>
 8006e82:	4572      	cmp	r2, lr
 8006e84:	d10f      	bne.n	8006ea6 <__ieee754_atan2+0xbe>
 8006e86:	4293      	cmp	r3, r2
 8006e88:	f106 36ff 	add.w	r6, r6, #4294967295
 8006e8c:	d107      	bne.n	8006e9e <__ieee754_atan2+0xb6>
 8006e8e:	2e02      	cmp	r6, #2
 8006e90:	d850      	bhi.n	8006f34 <__ieee754_atan2+0x14c>
 8006e92:	4b3b      	ldr	r3, [pc, #236]	; (8006f80 <__ieee754_atan2+0x198>)
 8006e94:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8006e98:	e9d6 4500 	ldrd	r4, r5, [r6]
 8006e9c:	e7e3      	b.n	8006e66 <__ieee754_atan2+0x7e>
 8006e9e:	2e02      	cmp	r6, #2
 8006ea0:	d84c      	bhi.n	8006f3c <__ieee754_atan2+0x154>
 8006ea2:	4b38      	ldr	r3, [pc, #224]	; (8006f84 <__ieee754_atan2+0x19c>)
 8006ea4:	e7f6      	b.n	8006e94 <__ieee754_atan2+0xac>
 8006ea6:	4573      	cmp	r3, lr
 8006ea8:	d0e4      	beq.n	8006e74 <__ieee754_atan2+0x8c>
 8006eaa:	1a9b      	subs	r3, r3, r2
 8006eac:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8006eb0:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006eb4:	da20      	bge.n	8006ef8 <__ieee754_atan2+0x110>
 8006eb6:	2f00      	cmp	r7, #0
 8006eb8:	da01      	bge.n	8006ebe <__ieee754_atan2+0xd6>
 8006eba:	323c      	adds	r2, #60	; 0x3c
 8006ebc:	db20      	blt.n	8006f00 <__ieee754_atan2+0x118>
 8006ebe:	4652      	mov	r2, sl
 8006ec0:	464b      	mov	r3, r9
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	4629      	mov	r1, r5
 8006ec6:	f7f9 fc9d 	bl	8000804 <__aeabi_ddiv>
 8006eca:	f7ff ff5b 	bl	8006d84 <fabs>
 8006ece:	f7ff fdcf 	bl	8006a70 <atan>
 8006ed2:	4604      	mov	r4, r0
 8006ed4:	460d      	mov	r5, r1
 8006ed6:	2e01      	cmp	r6, #1
 8006ed8:	d015      	beq.n	8006f06 <__ieee754_atan2+0x11e>
 8006eda:	2e02      	cmp	r6, #2
 8006edc:	d017      	beq.n	8006f0e <__ieee754_atan2+0x126>
 8006ede:	2e00      	cmp	r6, #0
 8006ee0:	d0c1      	beq.n	8006e66 <__ieee754_atan2+0x7e>
 8006ee2:	a31f      	add	r3, pc, #124	; (adr r3, 8006f60 <__ieee754_atan2+0x178>)
 8006ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee8:	4620      	mov	r0, r4
 8006eea:	4629      	mov	r1, r5
 8006eec:	f7f9 f9a8 	bl	8000240 <__aeabi_dsub>
 8006ef0:	a31d      	add	r3, pc, #116	; (adr r3, 8006f68 <__ieee754_atan2+0x180>)
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	e016      	b.n	8006f26 <__ieee754_atan2+0x13e>
 8006ef8:	a51d      	add	r5, pc, #116	; (adr r5, 8006f70 <__ieee754_atan2+0x188>)
 8006efa:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006efe:	e7ea      	b.n	8006ed6 <__ieee754_atan2+0xee>
 8006f00:	2400      	movs	r4, #0
 8006f02:	2500      	movs	r5, #0
 8006f04:	e7e7      	b.n	8006ed6 <__ieee754_atan2+0xee>
 8006f06:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006f0a:	461d      	mov	r5, r3
 8006f0c:	e7ab      	b.n	8006e66 <__ieee754_atan2+0x7e>
 8006f0e:	a314      	add	r3, pc, #80	; (adr r3, 8006f60 <__ieee754_atan2+0x178>)
 8006f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f14:	4620      	mov	r0, r4
 8006f16:	4629      	mov	r1, r5
 8006f18:	f7f9 f992 	bl	8000240 <__aeabi_dsub>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	a111      	add	r1, pc, #68	; (adr r1, 8006f68 <__ieee754_atan2+0x180>)
 8006f22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f26:	f7f9 f98b 	bl	8000240 <__aeabi_dsub>
 8006f2a:	e77f      	b.n	8006e2c <__ieee754_atan2+0x44>
 8006f2c:	a50e      	add	r5, pc, #56	; (adr r5, 8006f68 <__ieee754_atan2+0x180>)
 8006f2e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f32:	e798      	b.n	8006e66 <__ieee754_atan2+0x7e>
 8006f34:	a510      	add	r5, pc, #64	; (adr r5, 8006f78 <__ieee754_atan2+0x190>)
 8006f36:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f3a:	e794      	b.n	8006e66 <__ieee754_atan2+0x7e>
 8006f3c:	2400      	movs	r4, #0
 8006f3e:	2500      	movs	r5, #0
 8006f40:	e791      	b.n	8006e66 <__ieee754_atan2+0x7e>
 8006f42:	a50b      	add	r5, pc, #44	; (adr r5, 8006f70 <__ieee754_atan2+0x188>)
 8006f44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f48:	e78d      	b.n	8006e66 <__ieee754_atan2+0x7e>
 8006f4a:	bf00      	nop
 8006f4c:	f3af 8000 	nop.w
 8006f50:	54442d18 	.word	0x54442d18
 8006f54:	c00921fb 	.word	0xc00921fb
 8006f58:	54442d18 	.word	0x54442d18
 8006f5c:	bff921fb 	.word	0xbff921fb
 8006f60:	33145c07 	.word	0x33145c07
 8006f64:	3ca1a626 	.word	0x3ca1a626
 8006f68:	54442d18 	.word	0x54442d18
 8006f6c:	400921fb 	.word	0x400921fb
 8006f70:	54442d18 	.word	0x54442d18
 8006f74:	3ff921fb 	.word	0x3ff921fb
 8006f78:	54442d18 	.word	0x54442d18
 8006f7c:	3fe921fb 	.word	0x3fe921fb
 8006f80:	08007550 	.word	0x08007550
 8006f84:	08007568 	.word	0x08007568
 8006f88:	7ff00000 	.word	0x7ff00000

08006f8c <__ieee754_sqrt>:
 8006f8c:	f8df c150 	ldr.w	ip, [pc, #336]	; 80070e0 <__ieee754_sqrt+0x154>
 8006f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f94:	ea3c 0c01 	bics.w	ip, ip, r1
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	460d      	mov	r5, r1
 8006f9e:	460a      	mov	r2, r1
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	d10e      	bne.n	8006fc4 <__ieee754_sqrt+0x38>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	f7f9 fb02 	bl	80005b0 <__aeabi_dmul>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	f7f9 f946 	bl	8000244 <__adddf3>
 8006fb8:	4606      	mov	r6, r0
 8006fba:	460d      	mov	r5, r1
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc4:	2900      	cmp	r1, #0
 8006fc6:	dc0d      	bgt.n	8006fe4 <__ieee754_sqrt+0x58>
 8006fc8:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8006fcc:	ea5c 0707 	orrs.w	r7, ip, r7
 8006fd0:	d0f4      	beq.n	8006fbc <__ieee754_sqrt+0x30>
 8006fd2:	b139      	cbz	r1, 8006fe4 <__ieee754_sqrt+0x58>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	f7f9 f933 	bl	8000240 <__aeabi_dsub>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	460b      	mov	r3, r1
 8006fde:	f7f9 fc11 	bl	8000804 <__aeabi_ddiv>
 8006fe2:	e7e9      	b.n	8006fb8 <__ieee754_sqrt+0x2c>
 8006fe4:	1512      	asrs	r2, r2, #20
 8006fe6:	d074      	beq.n	80070d2 <__ieee754_sqrt+0x146>
 8006fe8:	2000      	movs	r0, #0
 8006fea:	07d5      	lsls	r5, r2, #31
 8006fec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ff0:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8006ff4:	bf5e      	ittt	pl
 8006ff6:	0fe3      	lsrpl	r3, r4, #31
 8006ff8:	0064      	lslpl	r4, r4, #1
 8006ffa:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8006ffe:	0fe3      	lsrs	r3, r4, #31
 8007000:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007004:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8007008:	2516      	movs	r5, #22
 800700a:	4601      	mov	r1, r0
 800700c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007010:	1076      	asrs	r6, r6, #1
 8007012:	0064      	lsls	r4, r4, #1
 8007014:	188f      	adds	r7, r1, r2
 8007016:	429f      	cmp	r7, r3
 8007018:	bfde      	ittt	le
 800701a:	1bdb      	suble	r3, r3, r7
 800701c:	18b9      	addle	r1, r7, r2
 800701e:	1880      	addle	r0, r0, r2
 8007020:	005b      	lsls	r3, r3, #1
 8007022:	3d01      	subs	r5, #1
 8007024:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007028:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800702c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007030:	d1f0      	bne.n	8007014 <__ieee754_sqrt+0x88>
 8007032:	462a      	mov	r2, r5
 8007034:	f04f 0e20 	mov.w	lr, #32
 8007038:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800703c:	428b      	cmp	r3, r1
 800703e:	eb07 0c05 	add.w	ip, r7, r5
 8007042:	dc02      	bgt.n	800704a <__ieee754_sqrt+0xbe>
 8007044:	d113      	bne.n	800706e <__ieee754_sqrt+0xe2>
 8007046:	45a4      	cmp	ip, r4
 8007048:	d811      	bhi.n	800706e <__ieee754_sqrt+0xe2>
 800704a:	f1bc 0f00 	cmp.w	ip, #0
 800704e:	eb0c 0507 	add.w	r5, ip, r7
 8007052:	da43      	bge.n	80070dc <__ieee754_sqrt+0x150>
 8007054:	2d00      	cmp	r5, #0
 8007056:	db41      	blt.n	80070dc <__ieee754_sqrt+0x150>
 8007058:	f101 0801 	add.w	r8, r1, #1
 800705c:	1a5b      	subs	r3, r3, r1
 800705e:	4641      	mov	r1, r8
 8007060:	45a4      	cmp	ip, r4
 8007062:	bf88      	it	hi
 8007064:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007068:	eba4 040c 	sub.w	r4, r4, ip
 800706c:	443a      	add	r2, r7
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	f1be 0e01 	subs.w	lr, lr, #1
 8007074:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007078:	ea4f 0757 	mov.w	r7, r7, lsr #1
 800707c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007080:	d1dc      	bne.n	800703c <__ieee754_sqrt+0xb0>
 8007082:	4323      	orrs	r3, r4
 8007084:	d006      	beq.n	8007094 <__ieee754_sqrt+0x108>
 8007086:	1c54      	adds	r4, r2, #1
 8007088:	bf0b      	itete	eq
 800708a:	4672      	moveq	r2, lr
 800708c:	3201      	addne	r2, #1
 800708e:	3001      	addeq	r0, #1
 8007090:	f022 0201 	bicne.w	r2, r2, #1
 8007094:	1043      	asrs	r3, r0, #1
 8007096:	07c1      	lsls	r1, r0, #31
 8007098:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800709c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80070a0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80070a4:	bf48      	it	mi
 80070a6:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80070aa:	4610      	mov	r0, r2
 80070ac:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80070b0:	e782      	b.n	8006fb8 <__ieee754_sqrt+0x2c>
 80070b2:	0ae3      	lsrs	r3, r4, #11
 80070b4:	3915      	subs	r1, #21
 80070b6:	0564      	lsls	r4, r4, #21
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d0fa      	beq.n	80070b2 <__ieee754_sqrt+0x126>
 80070bc:	02de      	lsls	r6, r3, #11
 80070be:	d50a      	bpl.n	80070d6 <__ieee754_sqrt+0x14a>
 80070c0:	f1c2 0020 	rsb	r0, r2, #32
 80070c4:	fa24 f000 	lsr.w	r0, r4, r0
 80070c8:	1e55      	subs	r5, r2, #1
 80070ca:	4094      	lsls	r4, r2
 80070cc:	4303      	orrs	r3, r0
 80070ce:	1b4a      	subs	r2, r1, r5
 80070d0:	e78a      	b.n	8006fe8 <__ieee754_sqrt+0x5c>
 80070d2:	4611      	mov	r1, r2
 80070d4:	e7f0      	b.n	80070b8 <__ieee754_sqrt+0x12c>
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	3201      	adds	r2, #1
 80070da:	e7ef      	b.n	80070bc <__ieee754_sqrt+0x130>
 80070dc:	4688      	mov	r8, r1
 80070de:	e7bd      	b.n	800705c <__ieee754_sqrt+0xd0>
 80070e0:	7ff00000 	.word	0x7ff00000

080070e4 <_init>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	bf00      	nop
 80070e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ea:	bc08      	pop	{r3}
 80070ec:	469e      	mov	lr, r3
 80070ee:	4770      	bx	lr

080070f0 <_fini>:
 80070f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070f2:	bf00      	nop
 80070f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070f6:	bc08      	pop	{r3}
 80070f8:	469e      	mov	lr, r3
 80070fa:	4770      	bx	lr
