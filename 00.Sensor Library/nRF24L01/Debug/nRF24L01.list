
nRF24L01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a98  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000ce68  08008c80  08008c80  00018c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015ae8  08015ae8  00030094  2**0
                  CONTENTS
  4 .ARM          00000000  08015ae8  08015ae8  00030094  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015ae8  08015ae8  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015ae8  08015ae8  00025ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015aec  08015aec  00025aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08015af0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000094  08015b84  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08015b84  00030250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013635  00000000  00000000  000300bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000309b  00000000  00000000  000436f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00046790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  00047438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c656  00000000  00000000  00047f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c2d  00000000  00000000  000645ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009767b  00000000  00000000  000751fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c876  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a68  00000000  00000000  0010c8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000094 	.word	0x20000094
 8000204:	00000000 	.word	0x00000000
 8000208:	08008c68 	.word	0x08008c68

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000098 	.word	0x20000098
 8000224:	08008c68 	.word	0x08008c68

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08e      	sub	sp, #56	; 0x38
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800084e:	463b      	mov	r3, r7
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
 800085c:	615a      	str	r2, [r3, #20]
 800085e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000860:	4b30      	ldr	r3, [pc, #192]	; (8000924 <MX_FSMC_Init+0xf0>)
 8000862:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000866:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000868:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <MX_FSMC_Init+0xf0>)
 800086a:	4a2f      	ldr	r2, [pc, #188]	; (8000928 <MX_FSMC_Init+0xf4>)
 800086c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 800086e:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_FSMC_Init+0xf0>)
 8000870:	2206      	movs	r2, #6
 8000872:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000874:	4b2b      	ldr	r3, [pc, #172]	; (8000924 <MX_FSMC_Init+0xf0>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800087a:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <MX_FSMC_Init+0xf0>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000880:	4b28      	ldr	r3, [pc, #160]	; (8000924 <MX_FSMC_Init+0xf0>)
 8000882:	2210      	movs	r2, #16
 8000884:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000886:	4b27      	ldr	r3, [pc, #156]	; (8000924 <MX_FSMC_Init+0xf0>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800088c:	4b25      	ldr	r3, [pc, #148]	; (8000924 <MX_FSMC_Init+0xf0>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000892:	4b24      	ldr	r3, [pc, #144]	; (8000924 <MX_FSMC_Init+0xf0>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <MX_FSMC_Init+0xf0>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_FSMC_Init+0xf0>)
 80008a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_FSMC_Init+0xf0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_FSMC_Init+0xf0>)
 80008ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008b2:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_FSMC_Init+0xf0>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_FSMC_Init+0xf0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 1;
 80008c0:	2301      	movs	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80008c4:	230f      	movs	r3, #15
 80008c6:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 4;
 80008c8:	2304      	movs	r3, #4
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 80008cc:	230f      	movs	r3, #15
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80008d0:	2310      	movs	r3, #16
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80008d4:	2311      	movs	r3, #17
 80008d6:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80008d8:	2300      	movs	r3, #0
 80008da:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80008e0:	230f      	movs	r3, #15
 80008e2:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 3;
 80008e4:	2303      	movs	r3, #3
 80008e6:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 80008e8:	230f      	movs	r3, #15
 80008ea:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80008ec:	2310      	movs	r3, #16
 80008ee:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80008f0:	2311      	movs	r3, #17
 80008f2:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80008f8:	463a      	mov	r2, r7
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4808      	ldr	r0, [pc, #32]	; (8000924 <MX_FSMC_Init+0xf0>)
 8000902:	f006 fda7 	bl	8007454 <HAL_SRAM_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 800090c:	f000 fa80 	bl	8000e10 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_FSMC_Init+0xf8>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	4a05      	ldr	r2, [pc, #20]	; (800092c <MX_FSMC_Init+0xf8>)
 8000916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800091a:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800091c:	bf00      	nop
 800091e:	3738      	adds	r7, #56	; 0x38
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200000c4 	.word	0x200000c4
 8000928:	a0000104 	.word	0xa0000104
 800092c:	40010000 	.word	0x40010000

08000930 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 0308 	add.w	r3, r7, #8
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000944:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <HAL_FSMC_MspInit+0x94>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d136      	bne.n	80009ba <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <HAL_FSMC_MspInit+0x94>)
 800094e:	2201      	movs	r2, #1
 8000950:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000952:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <HAL_FSMC_MspInit+0x98>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <HAL_FSMC_MspInit+0x98>)
 8000958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800095c:	6153      	str	r3, [r2, #20]
 800095e:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <HAL_FSMC_MspInit+0x98>)
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 800096a:	f241 0301 	movw	r3, #4097	; 0x1001
 800096e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	4619      	mov	r1, r3
 800097e:	4813      	ldr	r0, [pc, #76]	; (80009cc <HAL_FSMC_MspInit+0x9c>)
 8000980:	f005 fbba 	bl	80060f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000984:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000988:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	4619      	mov	r1, r3
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <HAL_FSMC_MspInit+0xa0>)
 800099a:	f005 fbad 	bl	80060f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800099e:	f24c 7333 	movw	r3, #50995	; 0xc733
 80009a2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	4619      	mov	r1, r3
 80009b2:	4808      	ldr	r0, [pc, #32]	; (80009d4 <HAL_FSMC_MspInit+0xa4>)
 80009b4:	f005 fba0 	bl	80060f8 <HAL_GPIO_Init>
 80009b8:	e000      	b.n	80009bc <HAL_FSMC_MspInit+0x8c>
    return;
 80009ba:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000b0 	.word	0x200000b0
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40012000 	.word	0x40012000
 80009d0:	40011800 	.word	0x40011800
 80009d4:	40011400 	.word	0x40011400

080009d8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80009e0:	f7ff ffa6 	bl	8000930 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f2:	f107 0318 	add.w	r3, r7, #24
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a00:	4b59      	ldr	r3, [pc, #356]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a58      	ldr	r2, [pc, #352]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a0a:	6193      	str	r3, [r2, #24]
 8000a0c:	4b56      	ldr	r3, [pc, #344]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b53      	ldr	r3, [pc, #332]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a52      	ldr	r2, [pc, #328]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a1e:	f043 0304 	orr.w	r3, r3, #4
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b50      	ldr	r3, [pc, #320]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a30:	4b4d      	ldr	r3, [pc, #308]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a4c      	ldr	r2, [pc, #304]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a36:	f043 0308 	orr.w	r3, r3, #8
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0308 	and.w	r3, r3, #8
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a46      	ldr	r2, [pc, #280]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b44      	ldr	r3, [pc, #272]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a60:	4b41      	ldr	r3, [pc, #260]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a40      	ldr	r2, [pc, #256]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a66:	f043 0320 	orr.w	r3, r3, #32
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b3e      	ldr	r3, [pc, #248]	; (8000b68 <MX_GPIO_Init+0x17c>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0320 	and.w	r3, r3, #32
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	483b      	ldr	r0, [pc, #236]	; (8000b6c <MX_GPIO_Init+0x180>)
 8000a7e:	f005 fce6 	bl	800644e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f241 0101 	movw	r1, #4097	; 0x1001
 8000a88:	4839      	ldr	r0, [pc, #228]	; (8000b70 <MX_GPIO_Init+0x184>)
 8000a8a:	f005 fce0 	bl	800644e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HRF_CS_Pin|NRF_CE_Pin, GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000a94:	4837      	ldr	r0, [pc, #220]	; (8000b74 <MX_GPIO_Init+0x188>)
 8000a96:	f005 fcda 	bl	800644e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	2120      	movs	r1, #32
 8000a9e:	4834      	ldr	r0, [pc, #208]	; (8000b70 <MX_GPIO_Init+0x184>)
 8000aa0:	f005 fcd5 	bl	800644e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8000aa4:	2318      	movs	r3, #24
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	482d      	ldr	r0, [pc, #180]	; (8000b6c <MX_GPIO_Init+0x180>)
 8000ab8:	f005 fb1e 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000abc:	2320      	movs	r3, #32
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0318 	add.w	r3, r7, #24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4826      	ldr	r0, [pc, #152]	; (8000b6c <MX_GPIO_Init+0x180>)
 8000ad4:	f005 fb10 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KY_UP_Pin;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(KY_UP_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	f107 0318 	add.w	r3, r7, #24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4823      	ldr	r0, [pc, #140]	; (8000b78 <MX_GPIO_Init+0x18c>)
 8000aec:	f005 fb04 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LED0_Pin;
 8000af0:	2321      	movs	r3, #33	; 0x21
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000afc:	2303      	movs	r3, #3
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	4619      	mov	r1, r3
 8000b06:	481a      	ldr	r0, [pc, #104]	; (8000b70 <MX_GPIO_Init+0x184>)
 8000b08:	f005 faf6 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 0318 	add.w	r3, r7, #24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4812      	ldr	r0, [pc, #72]	; (8000b70 <MX_GPIO_Init+0x184>)
 8000b26:	f005 fae7 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRF_IRQ_Pin;
 8000b2a:	2340      	movs	r3, #64	; 0x40
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b32:	2302      	movs	r3, #2
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <MX_GPIO_Init+0x188>)
 8000b3e:	f005 fadb 	bl	80060f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = HRF_CS_Pin|NRF_CE_Pin;
 8000b42:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4806      	ldr	r0, [pc, #24]	; (8000b74 <MX_GPIO_Init+0x188>)
 8000b5c:	f005 facc 	bl	80060f8 <HAL_GPIO_Init>

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	; 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40011800 	.word	0x40011800
 8000b70:	40010c00 	.word	0x40010c00
 8000b74:	40012000 	.word	0x40012000
 8000b78:	40010800 	.word	0x40010800

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b82:	f005 f81d 	bl	8005bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b86:	f000 f8e5 	bl	8000d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8a:	f7ff ff2f 	bl	80009ec <MX_GPIO_Init>
  MX_SPI2_Init();
 8000b8e:	f000 f945 	bl	8000e1c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000b92:	f000 fad7 	bl	8001144 <MX_USART1_UART_Init>
  MX_FSMC_Init();
 8000b96:	f7ff fe4d 	bl	8000834 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
	NRF24L01_Init();
 8000b9a:	f006 fe79 	bl	8007890 <NRF24L01_Init>
	LCD_Init();
 8000b9e:	f001 f9e3 	bl	8001f68 <LCD_Init>
	LCD_Clear(WHITE);    //清屏
 8000ba2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ba6:	f004 fe1b 	bl	80057e0 <LCD_Clear>
	POINT_COLOR = BLACK;
 8000baa:	4b5f      	ldr	r3, [pc, #380]	; (8000d28 <main+0x1ac>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	801a      	strh	r2, [r3, #0]

	LCD_ShowString(50, 30, 200, 32, 32, (uint8_t*) "My Demo");
 8000bb0:	4b5e      	ldr	r3, [pc, #376]	; (8000d2c <main+0x1b0>)
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	2320      	movs	r3, #32
 8000bb6:	9300      	str	r3, [sp, #0]
 8000bb8:	2320      	movs	r3, #32
 8000bba:	22c8      	movs	r2, #200	; 0xc8
 8000bbc:	211e      	movs	r1, #30
 8000bbe:	2032      	movs	r0, #50	; 0x32
 8000bc0:	f004 ffb0 	bl	8005b24 <LCD_ShowString>
	while (NRF24L01_Check()) {
 8000bc4:	e01c      	b.n	8000c00 <main+0x84>
		POINT_COLOR = RED;
 8000bc6:	4b58      	ldr	r3, [pc, #352]	; (8000d28 <main+0x1ac>)
 8000bc8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000bcc:	801a      	strh	r2, [r3, #0]
		LCD_ShowString(30, 80, 200, 16, 16, (uint8_t*) "NRF24L01 Error...");
 8000bce:	4b58      	ldr	r3, [pc, #352]	; (8000d30 <main+0x1b4>)
 8000bd0:	9301      	str	r3, [sp, #4]
 8000bd2:	2310      	movs	r3, #16
 8000bd4:	9300      	str	r3, [sp, #0]
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	22c8      	movs	r2, #200	; 0xc8
 8000bda:	2150      	movs	r1, #80	; 0x50
 8000bdc:	201e      	movs	r0, #30
 8000bde:	f004 ffa1 	bl	8005b24 <LCD_ShowString>
		HAL_Delay(200);
 8000be2:	20c8      	movs	r0, #200	; 0xc8
 8000be4:	f005 f84e 	bl	8005c84 <HAL_Delay>
		LCD_Fill(30, 80, 230, 96, WHITE);
 8000be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2360      	movs	r3, #96	; 0x60
 8000bf0:	22e6      	movs	r2, #230	; 0xe6
 8000bf2:	2150      	movs	r1, #80	; 0x50
 8000bf4:	201e      	movs	r0, #30
 8000bf6:	f004 fe41 	bl	800587c <LCD_Fill>
 		HAL_Delay(200);
 8000bfa:	20c8      	movs	r0, #200	; 0xc8
 8000bfc:	f005 f842 	bl	8005c84 <HAL_Delay>
	while (NRF24L01_Check()) {
 8000c00:	f006 fed8 	bl	80079b4 <NRF24L01_Check>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1dd      	bne.n	8000bc6 <main+0x4a>
	}
	LCD_Fill(30, 80, 230, 96, WHITE);
 8000c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	2360      	movs	r3, #96	; 0x60
 8000c12:	22e6      	movs	r2, #230	; 0xe6
 8000c14:	2150      	movs	r1, #80	; 0x50
 8000c16:	201e      	movs	r0, #30
 8000c18:	f004 fe30 	bl	800587c <LCD_Fill>
	POINT_COLOR = BLACK;
 8000c1c:	4b42      	ldr	r3, [pc, #264]	; (8000d28 <main+0x1ac>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(30, 80, 200, 16, 16, (uint8_t*) "NRF24L01 OK...");
 8000c22:	4b44      	ldr	r3, [pc, #272]	; (8000d34 <main+0x1b8>)
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	2310      	movs	r3, #16
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	22c8      	movs	r2, #200	; 0xc8
 8000c2e:	2150      	movs	r1, #80	; 0x50
 8000c30:	201e      	movs	r0, #30
 8000c32:	f004 ff77 	bl	8005b24 <LCD_ShowString>

	while (1) {
		mode = KeyScan(0);
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 fb20 	bl	800127c <KeyScan>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	71fb      	strb	r3, [r7, #7]
		switch (mode) {
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d002      	beq.n	8000c4c <main+0xd0>
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d00d      	beq.n	8000c66 <main+0xea>
 8000c4a:	e019      	b.n	8000c80 <main+0x104>
		case KEY0_PRES:
			NRF24L01_RX_Mode();
 8000c4c:	f007 f80a 	bl	8007c64 <NRF24L01_RX_Mode>
			LCD_ShowString(30, 110, 200, 16, 16,
 8000c50:	4b39      	ldr	r3, [pc, #228]	; (8000d38 <main+0x1bc>)
 8000c52:	9301      	str	r3, [sp, #4]
 8000c54:	2310      	movs	r3, #16
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	2310      	movs	r3, #16
 8000c5a:	22c8      	movs	r2, #200	; 0xc8
 8000c5c:	216e      	movs	r1, #110	; 0x6e
 8000c5e:	201e      	movs	r0, #30
 8000c60:	f004 ff60 	bl	8005b24 <LCD_ShowString>
					(uint8_t*) "NRF24L01 RX_MODE...");
			break;
 8000c64:	e00d      	b.n	8000c82 <main+0x106>
		case KEY1_PRES:
			NRF24L01_TX_Mode();
 8000c66:	f007 f831 	bl	8007ccc <NRF24L01_TX_Mode>
			LCD_ShowString(30, 110, 200, 16, 16,
 8000c6a:	4b34      	ldr	r3, [pc, #208]	; (8000d3c <main+0x1c0>)
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	2310      	movs	r3, #16
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	2310      	movs	r3, #16
 8000c74:	22c8      	movs	r2, #200	; 0xc8
 8000c76:	216e      	movs	r1, #110	; 0x6e
 8000c78:	201e      	movs	r0, #30
 8000c7a:	f004 ff53 	bl	8005b24 <LCD_ShowString>
					(uint8_t*) "NRF24L01 TX_MODE...");
			break;
 8000c7e:	e000      	b.n	8000c82 <main+0x106>
		mode = KeyScan(0);
 8000c80:	e7d9      	b.n	8000c36 <main+0xba>
		default:
			continue;
		}
		break;
 8000c82:	bf00      	nop
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	if (mode == KEY0_PRES) {
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d120      	bne.n	8000ccc <main+0x150>
		LCD_ShowString(30, 130, 200, 16, 16, (uint8_t*) "Received DATA:");
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <main+0x1c4>)
 8000c8c:	9301      	str	r3, [sp, #4]
 8000c8e:	2310      	movs	r3, #16
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	2310      	movs	r3, #16
 8000c94:	22c8      	movs	r2, #200	; 0xc8
 8000c96:	2182      	movs	r1, #130	; 0x82
 8000c98:	201e      	movs	r0, #30
 8000c9a:	f004 ff43 	bl	8005b24 <LCD_ShowString>
		while (1) {
			if (NRF24L01_RxPacket(Rx_Buf) == 0) {
 8000c9e:	4829      	ldr	r0, [pc, #164]	; (8000d44 <main+0x1c8>)
 8000ca0:	f006 ffba 	bl	8007c18 <NRF24L01_RxPacket>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f9      	bne.n	8000c9e <main+0x122>
				Rx_Buf[31] = 0;
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <main+0x1c8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	77da      	strb	r2, [r3, #31]
				LCD_ShowString(30, 150, lcddev.width - 1, 32, 16, Rx_Buf);
 8000cb0:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <main+0x1cc>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <main+0x1c8>)
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2320      	movs	r3, #32
 8000cc2:	2196      	movs	r1, #150	; 0x96
 8000cc4:	201e      	movs	r0, #30
 8000cc6:	f004 ff2d 	bl	8005b24 <LCD_ShowString>
			if (NRF24L01_RxPacket(Rx_Buf) == 0) {
 8000cca:	e7e8      	b.n	8000c9e <main+0x122>
			}
		}
	} else if (mode == KEY1_PRES) {
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d125      	bne.n	8000d1e <main+0x1a2>
		LCD_ShowString(30, 130, 200, 16, 16, (uint8_t*) "Send DATA:");
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <main+0x1d0>)
 8000cd4:	9301      	str	r3, [sp, #4]
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2310      	movs	r3, #16
 8000cdc:	22c8      	movs	r2, #200	; 0xc8
 8000cde:	2182      	movs	r1, #130	; 0x82
 8000ce0:	201e      	movs	r0, #30
 8000ce2:	f004 ff1f 	bl	8005b24 <LCD_ShowString>
		while (1) {
			key = KeyScan(0);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 fac8 	bl	800127c <KeyScan>
 8000cec:	4603      	mov	r3, r0
 8000cee:	71bb      	strb	r3, [r7, #6]
			if (key == KY_UP_PRES) {
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d1f7      	bne.n	8000ce6 <main+0x16a>
				if (NRF24L01_TxPacket(Tx_Buf) == TX_OK) {
 8000cf6:	4816      	ldr	r0, [pc, #88]	; (8000d50 <main+0x1d4>)
 8000cf8:	f006 ff4a 	bl	8007b90 <NRF24L01_TxPacket>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b20      	cmp	r3, #32
 8000d00:	d1f1      	bne.n	8000ce6 <main+0x16a>
					LCD_ShowString(30, 150, lcddev.width - 1, 32, 16, Tx_Buf);
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <main+0x1cc>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	3b01      	subs	r3, #1
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <main+0x1d4>)
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	2310      	movs	r3, #16
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2320      	movs	r3, #32
 8000d14:	2196      	movs	r1, #150	; 0x96
 8000d16:	201e      	movs	r0, #30
 8000d18:	f004 ff04 	bl	8005b24 <LCD_ShowString>
			key = KeyScan(0);
 8000d1c:	e7e3      	b.n	8000ce6 <main+0x16a>
 8000d1e:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200000b8 	.word	0x200000b8
 8000d2c:	08008c80 	.word	0x08008c80
 8000d30:	08008c88 	.word	0x08008c88
 8000d34:	08008c9c 	.word	0x08008c9c
 8000d38:	08008cac 	.word	0x08008cac
 8000d3c:	08008cc0 	.word	0x08008cc0
 8000d40:	08008cd4 	.word	0x08008cd4
 8000d44:	20000174 	.word	0x20000174
 8000d48:	2000022c 	.word	0x2000022c
 8000d4c:	08008ce4 	.word	0x08008ce4
 8000d50:	20000000 	.word	0x20000000

08000d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b090      	sub	sp, #64	; 0x40
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	f107 0318 	add.w	r3, r7, #24
 8000d5e:	2228      	movs	r2, #40	; 0x28
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f007 f818 	bl	8007d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]
 8000d70:	609a      	str	r2, [r3, #8]
 8000d72:	60da      	str	r2, [r3, #12]
 8000d74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d76:	2301      	movs	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d84:	2301      	movs	r3, #1
 8000d86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d92:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	f107 0318 	add.w	r3, r7, #24
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f005 fb6f 	bl	8006480 <HAL_RCC_OscConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000da8:	f000 f832 	bl	8000e10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dac:	230f      	movs	r3, #15
 8000dae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000db0:	2302      	movs	r3, #2
 8000db2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f005 fdda 	bl	8006980 <HAL_RCC_ClockConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000dd2:	f000 f81d 	bl	8000e10 <Error_Handler>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3740      	adds	r7, #64	; 0x40
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
	x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	// 具体哪个串口可以更改huart2为其它串口
	// HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
	while ((USART1->SR & 0X40) == 0) {
 8000de8:	bf00      	nop
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <__io_putchar+0x2c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0f9      	beq.n	8000dea <__io_putchar+0xa>
	}; //循环发送,直到发送完毕
	USART1->DR = (uint8_t) ch;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__io_putchar+0x2c>)
 8000dfc:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

	return ch;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40013800 	.word	0x40013800

08000e10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e14:	b672      	cpsid	i
}
 8000e16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e18:	e7fe      	b.n	8000e18 <Error_Handler+0x8>
	...

08000e1c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <MX_SPI2_Init+0x64>)
 8000e22:	4a18      	ldr	r2, [pc, #96]	; (8000e84 <MX_SPI2_Init+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e26:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_SPI2_Init+0x64>)
 8000e28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_SPI2_Init+0x64>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <MX_SPI2_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_SPI2_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_SPI2_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_SPI2_Init+0x64>)
 8000e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_SPI2_Init+0x64>)
 8000e50:	2210      	movs	r2, #16
 8000e52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_SPI2_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_SPI2_Init+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <MX_SPI2_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_SPI2_Init+0x64>)
 8000e68:	220a      	movs	r2, #10
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <MX_SPI2_Init+0x64>)
 8000e6e:	f005 ff21 	bl	8006cb4 <HAL_SPI_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000e78:	f7ff ffca 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000194 	.word	0x20000194
 8000e84:	40003800 	.word	0x40003800

08000e88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b088      	sub	sp, #32
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a20      	ldr	r2, [pc, #128]	; (8000f24 <HAL_SPI_MspInit+0x9c>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d139      	bne.n	8000f1c <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <HAL_SPI_MspInit+0xa0>)
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	4a1e      	ldr	r2, [pc, #120]	; (8000f28 <HAL_SPI_MspInit+0xa0>)
 8000eae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb2:	61d3      	str	r3, [r2, #28]
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <HAL_SPI_MspInit+0xa0>)
 8000eb6:	69db      	ldr	r3, [r3, #28]
 8000eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <HAL_SPI_MspInit+0xa0>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <HAL_SPI_MspInit+0xa0>)
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	6193      	str	r3, [r2, #24]
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <HAL_SPI_MspInit+0xa0>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	f003 0308 	and.w	r3, r3, #8
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000ed8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000edc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4619      	mov	r1, r3
 8000eec:	480f      	ldr	r0, [pc, #60]	; (8000f2c <HAL_SPI_MspInit+0xa4>)
 8000eee:	f005 f903 	bl	80060f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ef2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4619      	mov	r1, r3
 8000f06:	4809      	ldr	r0, [pc, #36]	; (8000f2c <HAL_SPI_MspInit+0xa4>)
 8000f08:	f005 f8f6 	bl	80060f8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2024      	movs	r0, #36	; 0x24
 8000f12:	f004 ffb2 	bl	8005e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000f16:	2024      	movs	r0, #36	; 0x24
 8000f18:	f004 ffcb 	bl	8005eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	3720      	adds	r7, #32
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40003800 	.word	0x40003800
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010c00 	.word	0x40010c00

08000f30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f38:	699b      	ldr	r3, [r3, #24]
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	6193      	str	r3, [r2, #24]
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_MspInit+0x5c>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_MspInit+0x60>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <HAL_MspInit+0x60>)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000

08000f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <NMI_Handler+0x4>

08000f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <HardFault_Handler+0x4>

08000fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <MemManage_Handler+0x4>

08000fa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <BusFault_Handler+0x4>

08000fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <UsageFault_Handler+0x4>

08000fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr

08000fca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fda:	f004 fe37 	bl	8005c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <SPI2_IRQHandler+0x10>)
 8000fea:	f006 f889 	bl	8007100 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000194 	.word	0x20000194

08000ff8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	e00a      	b.n	8001020 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800100a:	f3af 8000 	nop.w
 800100e:	4601      	mov	r1, r0
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	1c5a      	adds	r2, r3, #1
 8001014:	60ba      	str	r2, [r7, #8]
 8001016:	b2ca      	uxtb	r2, r1
 8001018:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	dbf0      	blt.n	800100a <_read+0x12>
	}

return len;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	60f8      	str	r0, [r7, #12]
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	e009      	b.n	8001058 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	60ba      	str	r2, [r7, #8]
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fec7 	bl	8000de0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	3301      	adds	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	dbf1      	blt.n	8001044 <_write+0x12>
	}
	return len;
 8001060:	687b      	ldr	r3, [r7, #4]
}
 8001062:	4618      	mov	r0, r3
 8001064:	3718      	adds	r7, #24
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <_close>:

int _close(int file)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
	return -1;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001090:	605a      	str	r2, [r3, #4]
	return 0;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr

0800109e <_isatty>:

int _isatty(int file)
{
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
	return 1;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b2:	b480      	push	{r7}
 80010b4:	b085      	sub	sp, #20
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
	return 0;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
	...

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f006 fe22 	bl	8007d44 <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20010000 	.word	0x20010000
 800112c:	00000400 	.word	0x00000400
 8001130:	200000b4 	.word	0x200000b4
 8001134:	20000250 	.word	0x20000250

08001138 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_USART1_UART_Init+0x50>)
 800114c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 8001150:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001154:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 800115e:	2200      	movs	r2, #0
 8001160:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 800116a:	220c      	movs	r2, #12
 800116c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_USART1_UART_Init+0x4c>)
 800117c:	f006 f9b7 	bl	80074ee <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001186:	f7ff fe43 	bl	8000e10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200001ec 	.word	0x200001ec
 8001194:	40013800 	.word	0x40013800

08001198 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a1c      	ldr	r2, [pc, #112]	; (8001224 <HAL_UART_MspInit+0x8c>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d131      	bne.n	800121c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a14      	ldr	r2, [pc, #80]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <HAL_UART_MspInit+0x90>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f2:	2303      	movs	r3, #3
 80011f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	480b      	ldr	r0, [pc, #44]	; (800122c <HAL_UART_MspInit+0x94>)
 80011fe:	f004 ff7b 	bl	80060f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4619      	mov	r1, r3
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <HAL_UART_MspInit+0x94>)
 8001218:	f004 ff6e 	bl	80060f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40013800 	.word	0x40013800
 8001228:	40021000 	.word	0x40021000
 800122c:	40010800 	.word	0x40010800

08001230 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001230:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001232:	e003      	b.n	800123c <LoopCopyDataInit>

08001234 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001236:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001238:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800123a:	3104      	adds	r1, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800123c:	480a      	ldr	r0, [pc, #40]	; (8001268 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001240:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001242:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001244:	d3f6      	bcc.n	8001234 <CopyDataInit>
  ldr r2, =_sbss
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001248:	e002      	b.n	8001250 <LoopFillZerobss>

0800124a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800124c:	f842 3b04 	str.w	r3, [r2], #4

08001250 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001252:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001254:	d3f9      	bcc.n	800124a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001256:	f7ff ff6f 	bl	8001138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125a:	f006 fd79 	bl	8007d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800125e:	f7ff fc8d 	bl	8000b7c <main>
  bx lr
 8001262:	4770      	bx	lr
  ldr r3, =_sidata
 8001264:	08015af0 	.word	0x08015af0
  ldr r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800126c:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 8001270:	20000094 	.word	0x20000094
  ldr r3, = _ebss
 8001274:	20000250 	.word	0x20000250

08001278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001278:	e7fe      	b.n	8001278 <ADC1_2_IRQHandler>
	...

0800127c <KeyScan>:

//按键扫描函数
//mode==1时，按键按下亮，松开灭
//mode==0时，按键按下亮，再次按下灭
uint8_t KeyScan(uint8_t mode)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
	static uint8_t key_up = 1;
	if(mode == 1){
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d102      	bne.n	8001292 <KeyScan+0x16>
		key_up = 1;
 800128c:	4b2f      	ldr	r3, [pc, #188]	; (800134c <KeyScan+0xd0>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]
	}

	if(key_up && (KEY0 == GPIO_PIN_RESET || KEY1 == GPIO_PIN_RESET || KY_UP == GPIO_PIN_SET)){
 8001292:	4b2e      	ldr	r3, [pc, #184]	; (800134c <KeyScan+0xd0>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d035      	beq.n	8001306 <KeyScan+0x8a>
 800129a:	2110      	movs	r1, #16
 800129c:	482c      	ldr	r0, [pc, #176]	; (8001350 <KeyScan+0xd4>)
 800129e:	f005 f8bf 	bl	8006420 <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d00d      	beq.n	80012c4 <KeyScan+0x48>
 80012a8:	2108      	movs	r1, #8
 80012aa:	4829      	ldr	r0, [pc, #164]	; (8001350 <KeyScan+0xd4>)
 80012ac:	f005 f8b8 	bl	8006420 <HAL_GPIO_ReadPin>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d006      	beq.n	80012c4 <KeyScan+0x48>
 80012b6:	2101      	movs	r1, #1
 80012b8:	4826      	ldr	r0, [pc, #152]	; (8001354 <KeyScan+0xd8>)
 80012ba:	f005 f8b1 	bl	8006420 <HAL_GPIO_ReadPin>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d120      	bne.n	8001306 <KeyScan+0x8a>
		HAL_Delay(10);
 80012c4:	200a      	movs	r0, #10
 80012c6:	f004 fcdd 	bl	8005c84 <HAL_Delay>
		key_up = 0;
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <KeyScan+0xd0>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
		if(KEY0 == GPIO_PIN_RESET){
 80012d0:	2110      	movs	r1, #16
 80012d2:	481f      	ldr	r0, [pc, #124]	; (8001350 <KeyScan+0xd4>)
 80012d4:	f005 f8a4 	bl	8006420 <HAL_GPIO_ReadPin>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <KeyScan+0x66>
			return KEY0_PRES;
 80012de:	2301      	movs	r3, #1
 80012e0:	e030      	b.n	8001344 <KeyScan+0xc8>
		}else if(KEY1 == GPIO_PIN_RESET){
 80012e2:	2108      	movs	r1, #8
 80012e4:	481a      	ldr	r0, [pc, #104]	; (8001350 <KeyScan+0xd4>)
 80012e6:	f005 f89b 	bl	8006420 <HAL_GPIO_ReadPin>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <KeyScan+0x78>
			return KEY1_PRES;
 80012f0:	2302      	movs	r3, #2
 80012f2:	e027      	b.n	8001344 <KeyScan+0xc8>
		}else if(KY_UP == GPIO_PIN_SET){
 80012f4:	2101      	movs	r1, #1
 80012f6:	4817      	ldr	r0, [pc, #92]	; (8001354 <KeyScan+0xd8>)
 80012f8:	f005 f892 	bl	8006420 <HAL_GPIO_ReadPin>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d11e      	bne.n	8001340 <KeyScan+0xc4>
			return KY_UP_PRES;
 8001302:	2303      	movs	r3, #3
 8001304:	e01e      	b.n	8001344 <KeyScan+0xc8>
		}
	}else if(KEY0 == GPIO_PIN_SET && KEY1 == GPIO_PIN_SET && KY_UP == GPIO_PIN_RESET){
 8001306:	2110      	movs	r1, #16
 8001308:	4811      	ldr	r0, [pc, #68]	; (8001350 <KeyScan+0xd4>)
 800130a:	f005 f889 	bl	8006420 <HAL_GPIO_ReadPin>
 800130e:	4603      	mov	r3, r0
 8001310:	2b01      	cmp	r3, #1
 8001312:	d116      	bne.n	8001342 <KeyScan+0xc6>
 8001314:	2108      	movs	r1, #8
 8001316:	480e      	ldr	r0, [pc, #56]	; (8001350 <KeyScan+0xd4>)
 8001318:	f005 f882 	bl	8006420 <HAL_GPIO_ReadPin>
 800131c:	4603      	mov	r3, r0
 800131e:	2b01      	cmp	r3, #1
 8001320:	d10f      	bne.n	8001342 <KeyScan+0xc6>
 8001322:	2101      	movs	r1, #1
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <KeyScan+0xd8>)
 8001326:	f005 f87b 	bl	8006420 <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d108      	bne.n	8001342 <KeyScan+0xc6>
		key_up = 1;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <KeyScan+0xd0>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
		if(mode)
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <KeyScan+0xc6>
		{
			return NO_PRES;
 800133c:	2304      	movs	r3, #4
 800133e:	e001      	b.n	8001344 <KeyScan+0xc8>
		if(KEY0 == GPIO_PIN_RESET){
 8001340:	bf00      	nop
		}
	}
	return 0;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000024 	.word	0x20000024
 8001350:	40011800 	.word	0x40011800
 8001354:	40010800 	.word	0x40010800

08001358 <delay_us>:

/**
 * @brief 微秒级延时，参考F103的库实现
 * @retval None
 */
void delay_us(uint32_t duration) {
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  //见stm32f1xx_hal_rcc.c -- static void RCC_Delay(uint32_t mdelay)
  __IO uint32_t Delay = duration * (SystemCoreClock / 8U / 1000000U);
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <delay_us+0x34>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <delay_us+0x38>)
 8001366:	fba2 2303 	umull	r2, r3, r2, r3
 800136a:	0d5b      	lsrs	r3, r3, #21
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	60fb      	str	r3, [r7, #12]
  do {
	__NOP();
 8001374:	bf00      	nop
  } while (Delay--);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1e5a      	subs	r2, r3, #1
 800137a:	60fa      	str	r2, [r7, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f9      	bne.n	8001374 <delay_us+0x1c>
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr
 800138c:	20000020 	.word	0x20000020
 8001390:	431bde83 	.word	0x431bde83

08001394 <LCD_WR_REG>:

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(uint16_t regval)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=regval;//写入要写的寄存器序号
 800139e:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <LCD_WR_REG+0x1c>)
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	8013      	strh	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	6c0007fe 	.word	0x6c0007fe

080013b4 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(uint16_t data)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <LCD_WR_DATA+0x1c>)
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	8053      	strh	r3, [r2, #2]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	6c0007fe 	.word	0x6c0007fe

080013d4 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
	uint16_t ram;			//防止被优化
	ram=LCD->LCD_RAM;
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <LCD_RD_DATA+0x18>)
 80013dc:	885b      	ldrh	r3, [r3, #2]
 80013de:	80fb      	strh	r3, [r7, #6]
	return ram;
 80013e0:	88fb      	ldrh	r3, [r7, #6]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	6c0007fe 	.word	0x6c0007fe

080013f0 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	460a      	mov	r2, r1
 80013fa:	80fb      	strh	r3, [r7, #6]
 80013fc:	4613      	mov	r3, r2
 80013fe:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 8001400:	4a05      	ldr	r2, [pc, #20]	; (8001418 <LCD_WriteReg+0x28>)
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//写入数据
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <LCD_WriteReg+0x28>)
 8001408:	88bb      	ldrh	r3, [r7, #4]
 800140a:	8053      	strh	r3, [r2, #2]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	6c0007fe 	.word	0x6c0007fe

0800141c <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器地址
//返回值:读到的数据
uint16_t LCD_ReadReg(uint16_t LCD_Reg)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);		//写入要读的寄存器序号
 8001426:	88fb      	ldrh	r3, [r7, #6]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ffb3 	bl	8001394 <LCD_WR_REG>
	delay_us(5);
 800142e:	2005      	movs	r0, #5
 8001430:	f7ff ff92 	bl	8001358 <delay_us>
	return LCD_RD_DATA();		//返回读到的值
 8001434:	f7ff ffce 	bl	80013d4 <LCD_RD_DATA>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
 	LCD->LCD_REG=lcddev.wramcmd;
 8001448:	4b03      	ldr	r3, [pc, #12]	; (8001458 <LCD_WriteRAM_Prepare+0x14>)
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <LCD_WriteRAM_Prepare+0x18>)
 800144c:	8912      	ldrh	r2, [r2, #8]
 800144e:	801a      	strh	r2, [r3, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	6c0007fe 	.word	0x6c0007fe
 800145c:	2000022c 	.word	0x2000022c

08001460 <LCD_SetCursor>:
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	460a      	mov	r2, r1
 800146a:	80fb      	strh	r3, [r7, #6]
 800146c:	4613      	mov	r3, r2
 800146e:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001470:	4b92      	ldr	r3, [pc, #584]	; (80016bc <LCD_SetCursor+0x25c>)
 8001472:	889b      	ldrh	r3, [r3, #4]
 8001474:	f249 3241 	movw	r2, #37697	; 0x9341
 8001478:	4293      	cmp	r3, r2
 800147a:	d005      	beq.n	8001488 <LCD_SetCursor+0x28>
 800147c:	4b8f      	ldr	r3, [pc, #572]	; (80016bc <LCD_SetCursor+0x25c>)
 800147e:	889b      	ldrh	r3, [r3, #4]
 8001480:	f245 3210 	movw	r2, #21264	; 0x5310
 8001484:	4293      	cmp	r3, r2
 8001486:	d122      	bne.n	80014ce <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8001488:	4b8c      	ldr	r3, [pc, #560]	; (80016bc <LCD_SetCursor+0x25c>)
 800148a:	895b      	ldrh	r3, [r3, #10]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff81 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	b29b      	uxth	r3, r3
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff8b 	bl	80013b4 <LCD_WR_DATA>
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff85 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80014aa:	4b84      	ldr	r3, [pc, #528]	; (80016bc <LCD_SetCursor+0x25c>)
 80014ac:	899b      	ldrh	r3, [r3, #12]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff70 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 80014b4:	88bb      	ldrh	r3, [r7, #4]
 80014b6:	0a1b      	lsrs	r3, r3, #8
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff7a 	bl	80013b4 <LCD_WR_DATA>
 80014c0:	88bb      	ldrh	r3, [r7, #4]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff74 	bl	80013b4 <LCD_WR_DATA>
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 80014cc:	e0f1      	b.n	80016b2 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X6804)
 80014ce:	4b7b      	ldr	r3, [pc, #492]	; (80016bc <LCD_SetCursor+0x25c>)
 80014d0:	889b      	ldrh	r3, [r3, #4]
 80014d2:	f646 0204 	movw	r2, #26628	; 0x6804
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d12d      	bne.n	8001536 <LCD_SetCursor+0xd6>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏时处理
 80014da:	4b78      	ldr	r3, [pc, #480]	; (80016bc <LCD_SetCursor+0x25c>)
 80014dc:	799b      	ldrb	r3, [r3, #6]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d106      	bne.n	80014f0 <LCD_SetCursor+0x90>
 80014e2:	4b76      	ldr	r3, [pc, #472]	; (80016bc <LCD_SetCursor+0x25c>)
 80014e4:	881a      	ldrh	r2, [r3, #0]
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3b01      	subs	r3, #1
 80014ee:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80014f0:	4b72      	ldr	r3, [pc, #456]	; (80016bc <LCD_SetCursor+0x25c>)
 80014f2:	895b      	ldrh	r3, [r3, #10]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff4d 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff ff57 	bl	80013b4 <LCD_WR_DATA>
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b29b      	uxth	r3, r3
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff51 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001512:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <LCD_SetCursor+0x25c>)
 8001514:	899b      	ldrh	r3, [r3, #12]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff3c 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 800151c:	88bb      	ldrh	r3, [r7, #4]
 800151e:	0a1b      	lsrs	r3, r3, #8
 8001520:	b29b      	uxth	r3, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff46 	bl	80013b4 <LCD_WR_DATA>
 8001528:	88bb      	ldrh	r3, [r7, #4]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	b29b      	uxth	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff40 	bl	80013b4 <LCD_WR_DATA>
}
 8001534:	e0bd      	b.n	80016b2 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X1963)
 8001536:	4b61      	ldr	r3, [pc, #388]	; (80016bc <LCD_SetCursor+0x25c>)
 8001538:	889b      	ldrh	r3, [r3, #4]
 800153a:	f641 1263 	movw	r2, #6499	; 0x1963
 800153e:	4293      	cmp	r3, r2
 8001540:	d167      	bne.n	8001612 <LCD_SetCursor+0x1b2>
		if(lcddev.dir==0)//x坐标需要变换
 8001542:	4b5e      	ldr	r3, [pc, #376]	; (80016bc <LCD_SetCursor+0x25c>)
 8001544:	799b      	ldrb	r3, [r3, #6]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d11e      	bne.n	8001588 <LCD_SetCursor+0x128>
			Xpos=lcddev.width-1-Xpos;
 800154a:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <LCD_SetCursor+0x25c>)
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	88fb      	ldrh	r3, [r7, #6]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	b29b      	uxth	r3, r3
 8001554:	3b01      	subs	r3, #1
 8001556:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8001558:	4b58      	ldr	r3, [pc, #352]	; (80016bc <LCD_SetCursor+0x25c>)
 800155a:	895b      	ldrh	r3, [r3, #10]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff19 	bl	8001394 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001562:	2000      	movs	r0, #0
 8001564:	f7ff ff26 	bl	80013b4 <LCD_WR_DATA>
 8001568:	2000      	movs	r0, #0
 800156a:	f7ff ff23 	bl	80013b4 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	b29b      	uxth	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff1d 	bl	80013b4 <LCD_WR_DATA>
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	b29b      	uxth	r3, r3
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff17 	bl	80013b4 <LCD_WR_DATA>
 8001586:	e021      	b.n	80015cc <LCD_SetCursor+0x16c>
			LCD_WR_REG(lcddev.setxcmd);
 8001588:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <LCD_SetCursor+0x25c>)
 800158a:	895b      	ldrh	r3, [r3, #10]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff01 	bl	8001394 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	0a1b      	lsrs	r3, r3, #8
 8001596:	b29b      	uxth	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff0b 	bl	80013b4 <LCD_WR_DATA>
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff05 	bl	80013b4 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 80015aa:	4b44      	ldr	r3, [pc, #272]	; (80016bc <LCD_SetCursor+0x25c>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	3b01      	subs	r3, #1
 80015b0:	121b      	asrs	r3, r3, #8
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fefd 	bl	80013b4 <LCD_WR_DATA>
 80015ba:	4b40      	ldr	r3, [pc, #256]	; (80016bc <LCD_SetCursor+0x25c>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	3b01      	subs	r3, #1
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fef4 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80015cc:	4b3b      	ldr	r3, [pc, #236]	; (80016bc <LCD_SetCursor+0x25c>)
 80015ce:	899b      	ldrh	r3, [r3, #12]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fedf 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 80015d6:	88bb      	ldrh	r3, [r7, #4]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	b29b      	uxth	r3, r3
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff fee9 	bl	80013b4 <LCD_WR_DATA>
 80015e2:	88bb      	ldrh	r3, [r7, #4]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fee3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80015ee:	4b33      	ldr	r3, [pc, #204]	; (80016bc <LCD_SetCursor+0x25c>)
 80015f0:	885b      	ldrh	r3, [r3, #2]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	121b      	asrs	r3, r3, #8
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fedb 	bl	80013b4 <LCD_WR_DATA>
 80015fe:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <LCD_SetCursor+0x25c>)
 8001600:	885b      	ldrh	r3, [r3, #2]
 8001602:	3b01      	subs	r3, #1
 8001604:	b29b      	uxth	r3, r3
 8001606:	b2db      	uxtb	r3, r3
 8001608:	b29b      	uxth	r3, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fed2 	bl	80013b4 <LCD_WR_DATA>
}
 8001610:	e04f      	b.n	80016b2 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X5510)
 8001612:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <LCD_SetCursor+0x25c>)
 8001614:	889b      	ldrh	r3, [r3, #4]
 8001616:	f245 5210 	movw	r2, #21776	; 0x5510
 800161a:	4293      	cmp	r3, r2
 800161c:	d130      	bne.n	8001680 <LCD_SetCursor+0x220>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 800161e:	4b27      	ldr	r3, [pc, #156]	; (80016bc <LCD_SetCursor+0x25c>)
 8001620:	895b      	ldrh	r3, [r3, #10]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff feb6 	bl	8001394 <LCD_WR_REG>
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	b29b      	uxth	r3, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fec0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <LCD_SetCursor+0x25c>)
 8001636:	895b      	ldrh	r3, [r3, #10]
 8001638:	3301      	adds	r3, #1
 800163a:	b29b      	uxth	r3, r3
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fea9 	bl	8001394 <LCD_WR_REG>
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	b2db      	uxtb	r3, r3
 8001646:	b29b      	uxth	r3, r3
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff feb3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 800164e:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <LCD_SetCursor+0x25c>)
 8001650:	899b      	ldrh	r3, [r3, #12]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fe9e 	bl	8001394 <LCD_WR_REG>
 8001658:	88bb      	ldrh	r3, [r7, #4]
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	b29b      	uxth	r3, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fea8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <LCD_SetCursor+0x25c>)
 8001666:	899b      	ldrh	r3, [r3, #12]
 8001668:	3301      	adds	r3, #1
 800166a:	b29b      	uxth	r3, r3
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fe91 	bl	8001394 <LCD_WR_REG>
 8001672:	88bb      	ldrh	r3, [r7, #4]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	b29b      	uxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fe9b 	bl	80013b4 <LCD_WR_DATA>
}
 800167e:	e018      	b.n	80016b2 <LCD_SetCursor+0x252>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <LCD_SetCursor+0x25c>)
 8001682:	799b      	ldrb	r3, [r3, #6]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d106      	bne.n	8001696 <LCD_SetCursor+0x236>
 8001688:	4b0c      	ldr	r3, [pc, #48]	; (80016bc <LCD_SetCursor+0x25c>)
 800168a:	881a      	ldrh	r2, [r3, #0]
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	b29b      	uxth	r3, r3
 8001692:	3b01      	subs	r3, #1
 8001694:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <LCD_SetCursor+0x25c>)
 8001698:	895b      	ldrh	r3, [r3, #10]
 800169a:	88fa      	ldrh	r2, [r7, #6]
 800169c:	4611      	mov	r1, r2
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fea6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <LCD_SetCursor+0x25c>)
 80016a6:	899b      	ldrh	r3, [r3, #12]
 80016a8:	88ba      	ldrh	r2, [r7, #4]
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fe9f 	bl	80013f0 <LCD_WriteReg>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000022c 	.word	0x2000022c

080016c0 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X6804&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 80016d2:	4b78      	ldr	r3, [pc, #480]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 80016d4:	799b      	ldrb	r3, [r3, #6]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d10b      	bne.n	80016f2 <LCD_Scan_Dir+0x32>
 80016da:	4b76      	ldr	r3, [pc, #472]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 80016dc:	889b      	ldrh	r3, [r3, #4]
 80016de:	f646 0204 	movw	r2, #26628	; 0x6804
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d005      	beq.n	80016f2 <LCD_Scan_Dir+0x32>
 80016e6:	4b73      	ldr	r3, [pc, #460]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 80016e8:	889b      	ldrh	r3, [r3, #4]
 80016ea:	f641 1263 	movw	r2, #6499	; 0x1963
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d109      	bne.n	8001706 <LCD_Scan_Dir+0x46>
 80016f2:	4b70      	ldr	r3, [pc, #448]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 80016f4:	799b      	ldrb	r3, [r3, #6]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d134      	bne.n	8001764 <LCD_Scan_Dir+0xa4>
 80016fa:	4b6e      	ldr	r3, [pc, #440]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 80016fc:	889b      	ldrh	r3, [r3, #4]
 80016fe:	f641 1263 	movw	r2, #6499	; 0x1963
 8001702:	4293      	cmp	r3, r2
 8001704:	d12e      	bne.n	8001764 <LCD_Scan_Dir+0xa4>
	{
		switch(dir)//方向转换
 8001706:	79fb      	ldrb	r3, [r7, #7]
 8001708:	2b07      	cmp	r3, #7
 800170a:	d82c      	bhi.n	8001766 <LCD_Scan_Dir+0xa6>
 800170c:	a201      	add	r2, pc, #4	; (adr r2, 8001714 <LCD_Scan_Dir+0x54>)
 800170e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001712:	bf00      	nop
 8001714:	08001735 	.word	0x08001735
 8001718:	0800173b 	.word	0x0800173b
 800171c:	08001741 	.word	0x08001741
 8001720:	08001747 	.word	0x08001747
 8001724:	0800174d 	.word	0x0800174d
 8001728:	08001753 	.word	0x08001753
 800172c:	08001759 	.word	0x08001759
 8001730:	0800175f 	.word	0x0800175f
		{
			case 0:dir=6;break;
 8001734:	2306      	movs	r3, #6
 8001736:	71fb      	strb	r3, [r7, #7]
 8001738:	e015      	b.n	8001766 <LCD_Scan_Dir+0xa6>
			case 1:dir=7;break;
 800173a:	2307      	movs	r3, #7
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	e012      	b.n	8001766 <LCD_Scan_Dir+0xa6>
			case 2:dir=4;break;
 8001740:	2304      	movs	r3, #4
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	e00f      	b.n	8001766 <LCD_Scan_Dir+0xa6>
			case 3:dir=5;break;
 8001746:	2305      	movs	r3, #5
 8001748:	71fb      	strb	r3, [r7, #7]
 800174a:	e00c      	b.n	8001766 <LCD_Scan_Dir+0xa6>
			case 4:dir=1;break;
 800174c:	2301      	movs	r3, #1
 800174e:	71fb      	strb	r3, [r7, #7]
 8001750:	e009      	b.n	8001766 <LCD_Scan_Dir+0xa6>
			case 5:dir=0;break;
 8001752:	2300      	movs	r3, #0
 8001754:	71fb      	strb	r3, [r7, #7]
 8001756:	e006      	b.n	8001766 <LCD_Scan_Dir+0xa6>
			case 6:dir=3;break;
 8001758:	2303      	movs	r3, #3
 800175a:	71fb      	strb	r3, [r7, #7]
 800175c:	e003      	b.n	8001766 <LCD_Scan_Dir+0xa6>
			case 7:dir=2;break;
 800175e:	2302      	movs	r3, #2
 8001760:	71fb      	strb	r3, [r7, #7]
 8001762:	e000      	b.n	8001766 <LCD_Scan_Dir+0xa6>
		}
	}
 8001764:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001766:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 8001768:	889b      	ldrh	r3, [r3, #4]
 800176a:	f249 3241 	movw	r2, #37697	; 0x9341
 800176e:	4293      	cmp	r3, r2
 8001770:	d018      	beq.n	80017a4 <LCD_Scan_Dir+0xe4>
 8001772:	4b50      	ldr	r3, [pc, #320]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 8001774:	889b      	ldrh	r3, [r3, #4]
 8001776:	f646 0204 	movw	r2, #26628	; 0x6804
 800177a:	4293      	cmp	r3, r2
 800177c:	d012      	beq.n	80017a4 <LCD_Scan_Dir+0xe4>
 800177e:	4b4d      	ldr	r3, [pc, #308]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 8001780:	889b      	ldrh	r3, [r3, #4]
 8001782:	f245 3210 	movw	r2, #21264	; 0x5310
 8001786:	4293      	cmp	r3, r2
 8001788:	d00c      	beq.n	80017a4 <LCD_Scan_Dir+0xe4>
 800178a:	4b4a      	ldr	r3, [pc, #296]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 800178c:	889b      	ldrh	r3, [r3, #4]
 800178e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001792:	4293      	cmp	r3, r2
 8001794:	d006      	beq.n	80017a4 <LCD_Scan_Dir+0xe4>
 8001796:	4b47      	ldr	r3, [pc, #284]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 8001798:	889b      	ldrh	r3, [r3, #4]
 800179a:	f641 1263 	movw	r2, #6499	; 0x1963
 800179e:	4293      	cmp	r3, r2
 80017a0:	f040 813c 	bne.w	8001a1c <LCD_Scan_Dir+0x35c>
	{
		switch(dir)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	2b07      	cmp	r3, #7
 80017a8:	d835      	bhi.n	8001816 <LCD_Scan_Dir+0x156>
 80017aa:	a201      	add	r2, pc, #4	; (adr r2, 80017b0 <LCD_Scan_Dir+0xf0>)
 80017ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b0:	08001817 	.word	0x08001817
 80017b4:	080017d1 	.word	0x080017d1
 80017b8:	080017db 	.word	0x080017db
 80017bc:	080017e5 	.word	0x080017e5
 80017c0:	080017ef 	.word	0x080017ef
 80017c4:	080017f9 	.word	0x080017f9
 80017c8:	08001803 	.word	0x08001803
 80017cc:	0800180d 	.word	0x0800180d
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 80017d0:	89fb      	ldrh	r3, [r7, #14]
 80017d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d6:	81fb      	strh	r3, [r7, #14]
				break;
 80017d8:	e01d      	b.n	8001816 <LCD_Scan_Dir+0x156>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 80017da:	89fb      	ldrh	r3, [r7, #14]
 80017dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e0:	81fb      	strh	r3, [r7, #14]
				break;
 80017e2:	e018      	b.n	8001816 <LCD_Scan_Dir+0x156>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 80017e4:	89fb      	ldrh	r3, [r7, #14]
 80017e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017ea:	81fb      	strh	r3, [r7, #14]
				break;
 80017ec:	e013      	b.n	8001816 <LCD_Scan_Dir+0x156>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 80017ee:	89fb      	ldrh	r3, [r7, #14]
 80017f0:	f043 0320 	orr.w	r3, r3, #32
 80017f4:	81fb      	strh	r3, [r7, #14]
				break;
 80017f6:	e00e      	b.n	8001816 <LCD_Scan_Dir+0x156>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 80017f8:	89fb      	ldrh	r3, [r7, #14]
 80017fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017fe:	81fb      	strh	r3, [r7, #14]
				break;
 8001800:	e009      	b.n	8001816 <LCD_Scan_Dir+0x156>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001808:	81fb      	strh	r3, [r7, #14]
				break;
 800180a:	e004      	b.n	8001816 <LCD_Scan_Dir+0x156>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 800180c:	89fb      	ldrh	r3, [r7, #14]
 800180e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001812:	81fb      	strh	r3, [r7, #14]
				break;
 8001814:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 8001816:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 8001818:	889b      	ldrh	r3, [r3, #4]
 800181a:	f245 5210 	movw	r2, #21776	; 0x5510
 800181e:	4293      	cmp	r3, r2
 8001820:	d103      	bne.n	800182a <LCD_Scan_Dir+0x16a>
 8001822:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001826:	81bb      	strh	r3, [r7, #12]
 8001828:	e001      	b.n	800182e <LCD_Scan_Dir+0x16e>
		else dirreg=0X36;
 800182a:	2336      	movs	r3, #54	; 0x36
 800182c:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 800182e:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 8001830:	889b      	ldrh	r3, [r3, #4]
 8001832:	f245 3210 	movw	r2, #21264	; 0x5310
 8001836:	4293      	cmp	r3, r2
 8001838:	d00f      	beq.n	800185a <LCD_Scan_Dir+0x19a>
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 800183c:	889b      	ldrh	r3, [r3, #4]
 800183e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001842:	4293      	cmp	r3, r2
 8001844:	d009      	beq.n	800185a <LCD_Scan_Dir+0x19a>
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 8001848:	889b      	ldrh	r3, [r3, #4]
 800184a:	f641 1263 	movw	r2, #6499	; 0x1963
 800184e:	4293      	cmp	r3, r2
 8001850:	d003      	beq.n	800185a <LCD_Scan_Dir+0x19a>
 8001852:	89fb      	ldrh	r3, [r7, #14]
 8001854:	f043 0308 	orr.w	r3, r3, #8
 8001858:	81fb      	strh	r3, [r7, #14]
		if(lcddev.id==0X6804)regval|=0x02;//6804的BIT6和9341的反了
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 800185c:	889b      	ldrh	r3, [r3, #4]
 800185e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001862:	4293      	cmp	r3, r2
 8001864:	d103      	bne.n	800186e <LCD_Scan_Dir+0x1ae>
 8001866:	89fb      	ldrh	r3, [r7, #14]
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 800186e:	89fa      	ldrh	r2, [r7, #14]
 8001870:	89bb      	ldrh	r3, [r7, #12]
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fdbb 	bl	80013f0 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 800187c:	889b      	ldrh	r3, [r3, #4]
 800187e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001882:	4293      	cmp	r3, r2
 8001884:	d028      	beq.n	80018d8 <LCD_Scan_Dir+0x218>
		{
			if(regval&0X20)
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	f003 0320 	and.w	r3, r3, #32
 800188c:	2b00      	cmp	r3, #0
 800188e:	d013      	beq.n	80018b8 <LCD_Scan_Dir+0x1f8>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 8001892:	881a      	ldrh	r2, [r3, #0]
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 8001896:	885b      	ldrh	r3, [r3, #2]
 8001898:	429a      	cmp	r2, r3
 800189a:	d21d      	bcs.n	80018d8 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 80018a4:	885a      	ldrh	r2, [r3, #2]
 80018a6:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 80018a8:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80018aa:	4a02      	ldr	r2, [pc, #8]	; (80018b4 <LCD_Scan_Dir+0x1f4>)
 80018ac:	897b      	ldrh	r3, [r7, #10]
 80018ae:	8053      	strh	r3, [r2, #2]
 80018b0:	e012      	b.n	80018d8 <LCD_Scan_Dir+0x218>
 80018b2:	bf00      	nop
 80018b4:	2000022c 	.word	0x2000022c
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 80018b8:	4b7d      	ldr	r3, [pc, #500]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 80018ba:	881a      	ldrh	r2, [r3, #0]
 80018bc:	4b7c      	ldr	r3, [pc, #496]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 80018be:	885b      	ldrh	r3, [r3, #2]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d909      	bls.n	80018d8 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 80018c4:	4b7a      	ldr	r3, [pc, #488]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80018ca:	4b79      	ldr	r3, [pc, #484]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 80018cc:	885a      	ldrh	r2, [r3, #2]
 80018ce:	4b78      	ldr	r3, [pc, #480]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 80018d0:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80018d2:	4a77      	ldr	r2, [pc, #476]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 80018d4:	897b      	ldrh	r3, [r7, #10]
 80018d6:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 80018d8:	4b75      	ldr	r3, [pc, #468]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 80018da:	889b      	ldrh	r3, [r3, #4]
 80018dc:	f245 5210 	movw	r2, #21776	; 0x5510
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d162      	bne.n	80019aa <LCD_Scan_Dir+0x2ea>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 80018e4:	4b72      	ldr	r3, [pc, #456]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 80018e6:	895b      	ldrh	r3, [r3, #10]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fd53 	bl	8001394 <LCD_WR_REG>
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff fd60 	bl	80013b4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 80018f4:	4b6e      	ldr	r3, [pc, #440]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 80018f6:	895b      	ldrh	r3, [r3, #10]
 80018f8:	3301      	adds	r3, #1
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fd49 	bl	8001394 <LCD_WR_REG>
 8001902:	2000      	movs	r0, #0
 8001904:	f7ff fd56 	bl	80013b4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 8001908:	4b69      	ldr	r3, [pc, #420]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 800190a:	895b      	ldrh	r3, [r3, #10]
 800190c:	3302      	adds	r3, #2
 800190e:	b29b      	uxth	r3, r3
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fd3f 	bl	8001394 <LCD_WR_REG>
 8001916:	4b66      	ldr	r3, [pc, #408]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	3b01      	subs	r3, #1
 800191c:	121b      	asrs	r3, r3, #8
 800191e:	b29b      	uxth	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fd47 	bl	80013b4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001926:	4b62      	ldr	r3, [pc, #392]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 8001928:	895b      	ldrh	r3, [r3, #10]
 800192a:	3303      	adds	r3, #3
 800192c:	b29b      	uxth	r3, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fd30 	bl	8001394 <LCD_WR_REG>
 8001934:	4b5e      	ldr	r3, [pc, #376]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	3b01      	subs	r3, #1
 800193a:	b29b      	uxth	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	b29b      	uxth	r3, r3
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fd37 	bl	80013b4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 8001946:	4b5a      	ldr	r3, [pc, #360]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 8001948:	899b      	ldrh	r3, [r3, #12]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fd22 	bl	8001394 <LCD_WR_REG>
 8001950:	2000      	movs	r0, #0
 8001952:	f7ff fd2f 	bl	80013b4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 8001956:	4b56      	ldr	r3, [pc, #344]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 8001958:	899b      	ldrh	r3, [r3, #12]
 800195a:	3301      	adds	r3, #1
 800195c:	b29b      	uxth	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fd18 	bl	8001394 <LCD_WR_REG>
 8001964:	2000      	movs	r0, #0
 8001966:	f7ff fd25 	bl	80013b4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 800196a:	4b51      	ldr	r3, [pc, #324]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 800196c:	899b      	ldrh	r3, [r3, #12]
 800196e:	3302      	adds	r3, #2
 8001970:	b29b      	uxth	r3, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fd0e 	bl	8001394 <LCD_WR_REG>
 8001978:	4b4d      	ldr	r3, [pc, #308]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 800197a:	885b      	ldrh	r3, [r3, #2]
 800197c:	3b01      	subs	r3, #1
 800197e:	121b      	asrs	r3, r3, #8
 8001980:	b29b      	uxth	r3, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fd16 	bl	80013b4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001988:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 800198a:	899b      	ldrh	r3, [r3, #12]
 800198c:	3303      	adds	r3, #3
 800198e:	b29b      	uxth	r3, r3
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff fcff 	bl	8001394 <LCD_WR_REG>
 8001996:	4b46      	ldr	r3, [pc, #280]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 8001998:	885b      	ldrh	r3, [r3, #2]
 800199a:	3b01      	subs	r3, #1
 800199c:	b29b      	uxth	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff fd06 	bl	80013b4 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 80019a8:	e07e      	b.n	8001aa8 <LCD_Scan_Dir+0x3e8>
		}else
		{
			LCD_WR_REG(lcddev.setxcmd);
 80019aa:	4b41      	ldr	r3, [pc, #260]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 80019ac:	895b      	ldrh	r3, [r3, #10]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fcf0 	bl	8001394 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff fcfd 	bl	80013b4 <LCD_WR_DATA>
 80019ba:	2000      	movs	r0, #0
 80019bc:	f7ff fcfa 	bl	80013b4 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 80019c0:	4b3b      	ldr	r3, [pc, #236]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	121b      	asrs	r3, r3, #8
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fcf2 	bl	80013b4 <LCD_WR_DATA>
 80019d0:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 80019d2:	881b      	ldrh	r3, [r3, #0]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fce9 	bl	80013b4 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 80019e4:	899b      	ldrh	r3, [r3, #12]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fcd4 	bl	8001394 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80019ec:	2000      	movs	r0, #0
 80019ee:	f7ff fce1 	bl	80013b4 <LCD_WR_DATA>
 80019f2:	2000      	movs	r0, #0
 80019f4:	f7ff fcde 	bl	80013b4 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 80019fa:	885b      	ldrh	r3, [r3, #2]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	121b      	asrs	r3, r3, #8
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fcd6 	bl	80013b4 <LCD_WR_DATA>
 8001a08:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <LCD_Scan_Dir+0x3f0>)
 8001a0a:	885b      	ldrh	r3, [r3, #2]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff fccd 	bl	80013b4 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8001a1a:	e045      	b.n	8001aa8 <LCD_Scan_Dir+0x3e8>
		}
  	}else
	{
		switch(dir)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	2b07      	cmp	r3, #7
 8001a20:	d835      	bhi.n	8001a8e <LCD_Scan_Dir+0x3ce>
 8001a22:	a201      	add	r2, pc, #4	; (adr r2, 8001a28 <LCD_Scan_Dir+0x368>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001a49 	.word	0x08001a49
 8001a2c:	08001a53 	.word	0x08001a53
 8001a30:	08001a5d 	.word	0x08001a5d
 8001a34:	08001a8f 	.word	0x08001a8f
 8001a38:	08001a67 	.word	0x08001a67
 8001a3c:	08001a71 	.word	0x08001a71
 8001a40:	08001a7b 	.word	0x08001a7b
 8001a44:	08001a85 	.word	0x08001a85
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(1<<5)|(1<<4)|(0<<3);
 8001a48:	89fb      	ldrh	r3, [r7, #14]
 8001a4a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001a4e:	81fb      	strh	r3, [r7, #14]
				break;
 8001a50:	e01d      	b.n	8001a8e <LCD_Scan_Dir+0x3ce>
			case L2R_D2U://从左到右,从下到上
				regval|=(0<<5)|(1<<4)|(0<<3);
 8001a52:	89fb      	ldrh	r3, [r7, #14]
 8001a54:	f043 0310 	orr.w	r3, r3, #16
 8001a58:	81fb      	strh	r3, [r7, #14]
				break;
 8001a5a:	e018      	b.n	8001a8e <LCD_Scan_Dir+0x3ce>
			case R2L_U2D://从右到左,从上到下
				regval|=(1<<5)|(0<<4)|(0<<3);
 8001a5c:	89fb      	ldrh	r3, [r7, #14]
 8001a5e:	f043 0320 	orr.w	r3, r3, #32
 8001a62:	81fb      	strh	r3, [r7, #14]
				break;
 8001a64:	e013      	b.n	8001a8e <LCD_Scan_Dir+0x3ce>
			case R2L_D2U://从右到左,从下到上
				regval|=(0<<5)|(0<<4)|(0<<3);
				break;
			case U2D_L2R://从上到下,从左到右
				regval|=(1<<5)|(1<<4)|(1<<3);
 8001a66:	89fb      	ldrh	r3, [r7, #14]
 8001a68:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001a6c:	81fb      	strh	r3, [r7, #14]
				break;
 8001a6e:	e00e      	b.n	8001a8e <LCD_Scan_Dir+0x3ce>
			case U2D_R2L://从上到下,从右到左
				regval|=(1<<5)|(0<<4)|(1<<3);
 8001a70:	89fb      	ldrh	r3, [r7, #14]
 8001a72:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001a76:	81fb      	strh	r3, [r7, #14]
				break;
 8001a78:	e009      	b.n	8001a8e <LCD_Scan_Dir+0x3ce>
			case D2U_L2R://从下到上,从左到右
				regval|=(0<<5)|(1<<4)|(1<<3);
 8001a7a:	89fb      	ldrh	r3, [r7, #14]
 8001a7c:	f043 0318 	orr.w	r3, r3, #24
 8001a80:	81fb      	strh	r3, [r7, #14]
				break;
 8001a82:	e004      	b.n	8001a8e <LCD_Scan_Dir+0x3ce>
			case D2U_R2L://从下到上,从右到左
				regval|=(0<<5)|(0<<4)|(1<<3);
 8001a84:	89fb      	ldrh	r3, [r7, #14]
 8001a86:	f043 0308 	orr.w	r3, r3, #8
 8001a8a:	81fb      	strh	r3, [r7, #14]
				break;
 8001a8c:	bf00      	nop
		}
		dirreg=0X03;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	81bb      	strh	r3, [r7, #12]
		regval|=1<<12;
 8001a92:	89fb      	ldrh	r3, [r7, #14]
 8001a94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a98:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8001a9a:	89fa      	ldrh	r2, [r7, #14]
 8001a9c:	89bb      	ldrh	r3, [r7, #12]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fca5 	bl	80013f0 <LCD_WriteReg>
	}
}
 8001aa6:	bf00      	nop
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000022c 	.word	0x2000022c

08001ab4 <LCD_Fast_DrawPoint>:
}
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	80bb      	strh	r3, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	807b      	strh	r3, [r7, #2]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001ac6:	4b85      	ldr	r3, [pc, #532]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001ac8:	889b      	ldrh	r3, [r3, #4]
 8001aca:	f249 3241 	movw	r2, #37697	; 0x9341
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d005      	beq.n	8001ade <LCD_Fast_DrawPoint+0x2a>
 8001ad2:	4b82      	ldr	r3, [pc, #520]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001ad4:	889b      	ldrh	r3, [r3, #4]
 8001ad6:	f245 3210 	movw	r2, #21264	; 0x5310
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d122      	bne.n	8001b24 <LCD_Fast_DrawPoint+0x70>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8001ade:	4b7f      	ldr	r3, [pc, #508]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001ae0:	895b      	ldrh	r3, [r3, #10]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fc56 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001ae8:	88fb      	ldrh	r3, [r7, #6]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fc60 	bl	80013b4 <LCD_WR_DATA>
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fc5a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001b00:	4b76      	ldr	r3, [pc, #472]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001b02:	899b      	ldrh	r3, [r3, #12]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fc45 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001b0a:	88bb      	ldrh	r3, [r7, #4]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fc4f 	bl	80013b4 <LCD_WR_DATA>
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fc49 	bl	80013b4 <LCD_WR_DATA>
 8001b22:	e0cf      	b.n	8001cc4 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X5510)
 8001b24:	4b6d      	ldr	r3, [pc, #436]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001b26:	889b      	ldrh	r3, [r3, #4]
 8001b28:	f245 5210 	movw	r2, #21776	; 0x5510
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d130      	bne.n	8001b92 <LCD_Fast_DrawPoint+0xde>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 8001b30:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001b32:	895b      	ldrh	r3, [r3, #10]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fc2d 	bl	8001394 <LCD_WR_REG>
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff fc37 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 8001b46:	4b65      	ldr	r3, [pc, #404]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001b48:	895b      	ldrh	r3, [r3, #10]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fc20 	bl	8001394 <LCD_WR_REG>
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fc2a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8001b60:	4b5e      	ldr	r3, [pc, #376]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001b62:	899b      	ldrh	r3, [r3, #12]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fc15 	bl	8001394 <LCD_WR_REG>
 8001b6a:	88bb      	ldrh	r3, [r7, #4]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fc1f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8001b76:	4b59      	ldr	r3, [pc, #356]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001b78:	899b      	ldrh	r3, [r3, #12]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fc08 	bl	8001394 <LCD_WR_REG>
 8001b84:	88bb      	ldrh	r3, [r7, #4]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fc12 	bl	80013b4 <LCD_WR_DATA>
 8001b90:	e098      	b.n	8001cc4 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X1963)
 8001b92:	4b52      	ldr	r3, [pc, #328]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001b94:	889b      	ldrh	r3, [r3, #4]
 8001b96:	f641 1263 	movw	r2, #6499	; 0x1963
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d145      	bne.n	8001c2a <LCD_Fast_DrawPoint+0x176>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8001b9e:	4b4f      	ldr	r3, [pc, #316]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001ba0:	799b      	ldrb	r3, [r3, #6]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <LCD_Fast_DrawPoint+0x100>
 8001ba6:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001ba8:	881a      	ldrh	r2, [r3, #0]
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001bb4:	4b49      	ldr	r3, [pc, #292]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001bb6:	895b      	ldrh	r3, [r3, #10]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fbeb 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fbf5 	bl	80013b4 <LCD_WR_DATA>
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fbef 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fbe9 	bl	80013b4 <LCD_WR_DATA>
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fbe3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001bee:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001bf0:	899b      	ldrh	r3, [r3, #12]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fbce 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001bf8:	88bb      	ldrh	r3, [r7, #4]
 8001bfa:	0a1b      	lsrs	r3, r3, #8
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fbd8 	bl	80013b4 <LCD_WR_DATA>
 8001c04:	88bb      	ldrh	r3, [r7, #4]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fbd2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001c10:	88bb      	ldrh	r3, [r7, #4]
 8001c12:	0a1b      	lsrs	r3, r3, #8
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fbcc 	bl	80013b4 <LCD_WR_DATA>
 8001c1c:	88bb      	ldrh	r3, [r7, #4]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fbc6 	bl	80013b4 <LCD_WR_DATA>
 8001c28:	e04c      	b.n	8001cc4 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X6804)
 8001c2a:	4b2c      	ldr	r3, [pc, #176]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001c2c:	889b      	ldrh	r3, [r3, #4]
 8001c2e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d12d      	bne.n	8001c92 <LCD_Fast_DrawPoint+0x1de>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 8001c36:	4b29      	ldr	r3, [pc, #164]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001c38:	799b      	ldrb	r3, [r3, #6]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d106      	bne.n	8001c4c <LCD_Fast_DrawPoint+0x198>
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001c40:	881a      	ldrh	r2, [r3, #0]
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001c4c:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001c4e:	895b      	ldrh	r3, [r3, #10]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fb9f 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fba9 	bl	80013b4 <LCD_WR_DATA>
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fba3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001c70:	899b      	ldrh	r3, [r3, #12]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fb8e 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001c78:	88bb      	ldrh	r3, [r7, #4]
 8001c7a:	0a1b      	lsrs	r3, r3, #8
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fb98 	bl	80013b4 <LCD_WR_DATA>
 8001c84:	88bb      	ldrh	r3, [r7, #4]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fb92 	bl	80013b4 <LCD_WR_DATA>
 8001c90:	e018      	b.n	8001cc4 <LCD_Fast_DrawPoint+0x210>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 8001c92:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001c94:	799b      	ldrb	r3, [r3, #6]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d106      	bne.n	8001ca8 <LCD_Fast_DrawPoint+0x1f4>
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001c9c:	881a      	ldrh	r2, [r3, #0]
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001caa:	895b      	ldrh	r3, [r3, #10]
 8001cac:	88fa      	ldrh	r2, [r7, #6]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fb9d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001cb8:	899b      	ldrh	r3, [r3, #12]
 8001cba:	88ba      	ldrh	r2, [r7, #4]
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fb96 	bl	80013f0 <LCD_WriteReg>
	}
	LCD->LCD_REG=lcddev.wramcmd;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <LCD_Fast_DrawPoint+0x22c>)
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <LCD_Fast_DrawPoint+0x228>)
 8001cc8:	8912      	ldrh	r2, [r2, #8]
 8001cca:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM=color;
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <LCD_Fast_DrawPoint+0x22c>)
 8001cce:	887b      	ldrh	r3, [r7, #2]
 8001cd0:	8053      	strh	r3, [r2, #2]
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	2000022c 	.word	0x2000022c
 8001ce0:	6c0007fe 	.word	0x6c0007fe
 8001ce4:	00000000 	.word	0x00000000

08001ce8 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001cf2:	20be      	movs	r0, #190	; 0xbe
 8001cf4:	f7ff fb4e 	bl	8001394 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001cf8:	2005      	movs	r0, #5
 8001cfa:	f7ff fb5b 	bl	80013b4 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fd0d 	bl	8000720 <__aeabi_i2d>
 8001d06:	a310      	add	r3, pc, #64	; (adr r3, 8001d48 <LCD_SSD_BackLightSet+0x60>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fa8c 	bl	8000228 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	f7fe fd6c 	bl	80007f4 <__aeabi_d2uiz>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fb47 	bl	80013b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 8001d26:	2001      	movs	r0, #1
 8001d28:	f7ff fb44 	bl	80013b4 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 8001d2c:	20ff      	movs	r0, #255	; 0xff
 8001d2e:	f7ff fb41 	bl	80013b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7ff fb3e 	bl	80013b4 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff fb3b 	bl	80013b4 <LCD_WR_DATA>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	66666666 	.word	0x66666666
 8001d4c:	40046666 	.word	0x40046666

08001d50 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
	if(dir==0)			//竖屏
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d177      	bne.n	8001e50 <LCD_Display_Dir+0x100>
	{
		lcddev.dir=0;	//竖屏
 8001d60:	4b80      	ldr	r3, [pc, #512]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	719a      	strb	r2, [r3, #6]
		lcddev.width=240;
 8001d66:	4b7f      	ldr	r3, [pc, #508]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001d68:	22f0      	movs	r2, #240	; 0xf0
 8001d6a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001d6c:	4b7d      	ldr	r3, [pc, #500]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001d6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001d72:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310)
 8001d74:	4b7b      	ldr	r3, [pc, #492]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001d76:	889b      	ldrh	r3, [r3, #4]
 8001d78:	f249 3241 	movw	r2, #37697	; 0x9341
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d00b      	beq.n	8001d98 <LCD_Display_Dir+0x48>
 8001d80:	4b78      	ldr	r3, [pc, #480]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001d82:	889b      	ldrh	r3, [r3, #4]
 8001d84:	f646 0204 	movw	r2, #26628	; 0x6804
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d005      	beq.n	8001d98 <LCD_Display_Dir+0x48>
 8001d8c:	4b75      	ldr	r3, [pc, #468]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001d8e:	889b      	ldrh	r3, [r3, #4]
 8001d90:	f245 3210 	movw	r2, #21264	; 0x5310
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d11e      	bne.n	8001dd6 <LCD_Display_Dir+0x86>
		{
			lcddev.wramcmd=0X2C;
 8001d98:	4b72      	ldr	r3, [pc, #456]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001d9a:	222c      	movs	r2, #44	; 0x2c
 8001d9c:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001d9e:	4b71      	ldr	r3, [pc, #452]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001da0:	222a      	movs	r2, #42	; 0x2a
 8001da2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001da4:	4b6f      	ldr	r3, [pc, #444]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001da6:	222b      	movs	r2, #43	; 0x2b
 8001da8:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8001daa:	4b6e      	ldr	r3, [pc, #440]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001dac:	889b      	ldrh	r3, [r3, #4]
 8001dae:	f646 0204 	movw	r2, #26628	; 0x6804
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d006      	beq.n	8001dc4 <LCD_Display_Dir+0x74>
 8001db6:	4b6b      	ldr	r3, [pc, #428]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001db8:	889b      	ldrh	r3, [r3, #4]
 8001dba:	f245 3210 	movw	r2, #21264	; 0x5310
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	f040 80c7 	bne.w	8001f52 <LCD_Display_Dir+0x202>
			{
				lcddev.width=320;
 8001dc4:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001dc6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001dca:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 8001dcc:	4b65      	ldr	r3, [pc, #404]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001dce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001dd2:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8001dd4:	e0bd      	b.n	8001f52 <LCD_Display_Dir+0x202>
			}
		}else if(lcddev.id==0x5510)
 8001dd6:	4b63      	ldr	r3, [pc, #396]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001dd8:	889b      	ldrh	r3, [r3, #4]
 8001dda:	f245 5210 	movw	r2, #21776	; 0x5510
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d114      	bne.n	8001e0c <LCD_Display_Dir+0xbc>
		{
			lcddev.wramcmd=0X2C00;
 8001de2:	4b60      	ldr	r3, [pc, #384]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001de4:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001de8:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001dea:	4b5e      	ldr	r3, [pc, #376]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001dec:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001df0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001df2:	4b5c      	ldr	r3, [pc, #368]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001df4:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001df8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 8001dfa:	4b5a      	ldr	r3, [pc, #360]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001dfc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e00:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8001e02:	4b58      	ldr	r3, [pc, #352]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e08:	805a      	strh	r2, [r3, #2]
 8001e0a:	e0a3      	b.n	8001f54 <LCD_Display_Dir+0x204>
		}else if(lcddev.id==0X1963)
 8001e0c:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e0e:	889b      	ldrh	r3, [r3, #4]
 8001e10:	f641 1263 	movw	r2, #6499	; 0x1963
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d111      	bne.n	8001e3c <LCD_Display_Dir+0xec>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001e18:	4b52      	ldr	r3, [pc, #328]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e1a:	222c      	movs	r2, #44	; 0x2c
 8001e1c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 8001e1e:	4b51      	ldr	r3, [pc, #324]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e20:	222b      	movs	r2, #43	; 0x2b
 8001e22:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 8001e24:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e26:	222a      	movs	r2, #42	; 0x2a
 8001e28:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 8001e2a:	4b4e      	ldr	r3, [pc, #312]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e2c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001e30:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 8001e32:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e34:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001e38:	805a      	strh	r2, [r3, #2]
 8001e3a:	e08b      	b.n	8001f54 <LCD_Display_Dir+0x204>
		}else
		{
			lcddev.wramcmd=0X22;
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e3e:	2222      	movs	r2, #34	; 0x22
 8001e40:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X20;
 8001e42:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e44:	2220      	movs	r2, #32
 8001e46:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X21;
 8001e48:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e4a:	2221      	movs	r2, #33	; 0x21
 8001e4c:	819a      	strh	r2, [r3, #12]
 8001e4e:	e081      	b.n	8001f54 <LCD_Display_Dir+0x204>
		}
	}else 				//横屏
	{
		lcddev.dir=1;	//横屏
 8001e50:	4b44      	ldr	r3, [pc, #272]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	719a      	strb	r2, [r3, #6]
		lcddev.width=320;
 8001e56:	4b43      	ldr	r3, [pc, #268]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e58:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e5c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001e5e:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e60:	22f0      	movs	r2, #240	; 0xf0
 8001e62:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001e64:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e66:	889b      	ldrh	r3, [r3, #4]
 8001e68:	f249 3241 	movw	r2, #37697	; 0x9341
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d005      	beq.n	8001e7c <LCD_Display_Dir+0x12c>
 8001e70:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e72:	889b      	ldrh	r3, [r3, #4]
 8001e74:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d109      	bne.n	8001e90 <LCD_Display_Dir+0x140>
		{
			lcddev.wramcmd=0X2C;
 8001e7c:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e7e:	222c      	movs	r2, #44	; 0x2c
 8001e80:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001e82:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e84:	222a      	movs	r2, #42	; 0x2a
 8001e86:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001e88:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e8a:	222b      	movs	r2, #43	; 0x2b
 8001e8c:	819a      	strh	r2, [r3, #12]
 8001e8e:	e04b      	b.n	8001f28 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X6804)
 8001e90:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e92:	889b      	ldrh	r3, [r3, #4]
 8001e94:	f646 0204 	movw	r2, #26628	; 0x6804
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d109      	bne.n	8001eb0 <LCD_Display_Dir+0x160>
		{
 			lcddev.wramcmd=0X2C;
 8001e9c:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001e9e:	222c      	movs	r2, #44	; 0x2c
 8001ea0:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2B;
 8001ea2:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001ea4:	222b      	movs	r2, #43	; 0x2b
 8001ea6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001eaa:	222a      	movs	r2, #42	; 0x2a
 8001eac:	819a      	strh	r2, [r3, #12]
 8001eae:	e03b      	b.n	8001f28 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0x5510)
 8001eb0:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001eb2:	889b      	ldrh	r3, [r3, #4]
 8001eb4:	f245 5210 	movw	r2, #21776	; 0x5510
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d114      	bne.n	8001ee6 <LCD_Display_Dir+0x196>
		{
			lcddev.wramcmd=0X2C00;
 8001ebc:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001ebe:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001ec2:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001ec4:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001ec6:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001eca:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001ece:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001ed2:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8001ed4:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001ed6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001eda:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001ede:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001ee2:	805a      	strh	r2, [r3, #2]
 8001ee4:	e020      	b.n	8001f28 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X1963)
 8001ee6:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001ee8:	889b      	ldrh	r3, [r3, #4]
 8001eea:	f641 1263 	movw	r2, #6499	; 0x1963
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d111      	bne.n	8001f16 <LCD_Display_Dir+0x1c6>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001ef4:	222c      	movs	r2, #44	; 0x2c
 8001ef6:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001efa:	222a      	movs	r2, #42	; 0x2a
 8001efc:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 8001efe:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001f00:	222b      	movs	r2, #43	; 0x2b
 8001f02:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 8001f04:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001f06:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001f0a:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001f0e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f12:	805a      	strh	r2, [r3, #2]
 8001f14:	e008      	b.n	8001f28 <LCD_Display_Dir+0x1d8>
		}else
		{
			lcddev.wramcmd=0X22;
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001f18:	2222      	movs	r2, #34	; 0x22
 8001f1a:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X21;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001f1e:	2221      	movs	r2, #33	; 0x21
 8001f20:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X20;
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001f24:	2220      	movs	r2, #32
 8001f26:	819a      	strh	r2, [r3, #12]
		}
		if(lcddev.id==0X6804||lcddev.id==0X5310)
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001f2a:	889b      	ldrh	r3, [r3, #4]
 8001f2c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d005      	beq.n	8001f40 <LCD_Display_Dir+0x1f0>
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001f36:	889b      	ldrh	r3, [r3, #4]
 8001f38:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d109      	bne.n	8001f54 <LCD_Display_Dir+0x204>
		{
			lcddev.width=480;
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001f42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f46:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <LCD_Display_Dir+0x214>)
 8001f4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f4e:	805a      	strh	r2, [r3, #2]
 8001f50:	e000      	b.n	8001f54 <LCD_Display_Dir+0x204>
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8001f52:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7ff fbb3 	bl	80016c0 <LCD_Scan_Dir>
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2000022c 	.word	0x2000022c

08001f68 <LCD_Init>:
}
//初始化lcd
//该初始化函数可以初始化各种ILI93XX液晶,但是其他函数是基于ILI9320的!!!
//在其他型号的驱动芯片上没有测试!
void LCD_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af02      	add	r7, sp, #8
	RCC->AHBENR|=1<<8;     	 	//使能FSMC时钟
 8001f6e:	4bab      	ldr	r3, [pc, #684]	; (800221c <LCD_Init+0x2b4>)
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	4aaa      	ldr	r2, [pc, #680]	; (800221c <LCD_Init+0x2b4>)
 8001f74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f78:	6153      	str	r3, [r2, #20]
  	RCC->APB2ENR|=1<<3;     	//使能PORTB时钟
 8001f7a:	4ba8      	ldr	r3, [pc, #672]	; (800221c <LCD_Init+0x2b4>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	4aa7      	ldr	r2, [pc, #668]	; (800221c <LCD_Init+0x2b4>)
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<5;     	//使能PORTD时钟
 8001f86:	4ba5      	ldr	r3, [pc, #660]	; (800221c <LCD_Init+0x2b4>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	4aa4      	ldr	r2, [pc, #656]	; (800221c <LCD_Init+0x2b4>)
 8001f8c:	f043 0320 	orr.w	r3, r3, #32
 8001f90:	6193      	str	r3, [r2, #24]
	RCC->APB2ENR|=1<<6;     	//使能PORTE时钟
 8001f92:	4ba2      	ldr	r3, [pc, #648]	; (800221c <LCD_Init+0x2b4>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	4aa1      	ldr	r2, [pc, #644]	; (800221c <LCD_Init+0x2b4>)
 8001f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f9c:	6193      	str	r3, [r2, #24]
 	RCC->APB2ENR|=1<<8;      	//使能PORTG时钟
 8001f9e:	4b9f      	ldr	r3, [pc, #636]	; (800221c <LCD_Init+0x2b4>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	4a9e      	ldr	r2, [pc, #632]	; (800221c <LCD_Init+0x2b4>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa8:	6193      	str	r3, [r2, #24]
	GPIOB->CRL&=0XFFFFFFF0;		//PB0 推挽输出 背光
 8001faa:	4b9d      	ldr	r3, [pc, #628]	; (8002220 <LCD_Init+0x2b8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a9c      	ldr	r2, [pc, #624]	; (8002220 <LCD_Init+0x2b8>)
 8001fb0:	f023 030f 	bic.w	r3, r3, #15
 8001fb4:	6013      	str	r3, [r2, #0]
	GPIOB->CRL|=0X00000003;
 8001fb6:	4b9a      	ldr	r3, [pc, #616]	; (8002220 <LCD_Init+0x2b8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a99      	ldr	r2, [pc, #612]	; (8002220 <LCD_Init+0x2b8>)
 8001fbc:	f043 0303 	orr.w	r3, r3, #3
 8001fc0:	6013      	str	r3, [r2, #0]
	//PORTD复用推挽输出
	GPIOD->CRH&=0X00FFF000;
 8001fc2:	4b98      	ldr	r3, [pc, #608]	; (8002224 <LCD_Init+0x2bc>)
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	4997      	ldr	r1, [pc, #604]	; (8002224 <LCD_Init+0x2bc>)
 8001fc8:	4b97      	ldr	r3, [pc, #604]	; (8002228 <LCD_Init+0x2c0>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
	GPIOD->CRH|=0XBB000BBB;
 8001fce:	4b95      	ldr	r3, [pc, #596]	; (8002224 <LCD_Init+0x2bc>)
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	4994      	ldr	r1, [pc, #592]	; (8002224 <LCD_Init+0x2bc>)
 8001fd4:	4b95      	ldr	r3, [pc, #596]	; (800222c <LCD_Init+0x2c4>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	604b      	str	r3, [r1, #4]
	GPIOD->CRL&=0XFF00FF00;
 8001fda:	4b92      	ldr	r3, [pc, #584]	; (8002224 <LCD_Init+0x2bc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a91      	ldr	r2, [pc, #580]	; (8002224 <LCD_Init+0x2bc>)
 8001fe0:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001fe4:	6013      	str	r3, [r2, #0]
	GPIOD->CRL|=0X00BB00BB;
 8001fe6:	4b8f      	ldr	r3, [pc, #572]	; (8002224 <LCD_Init+0x2bc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a8e      	ldr	r2, [pc, #568]	; (8002224 <LCD_Init+0x2bc>)
 8001fec:	f043 13bb 	orr.w	r3, r3, #12255419	; 0xbb00bb
 8001ff0:	6013      	str	r3, [r2, #0]
	//PORTE复用推挽输出
	GPIOE->CRH&=0X00000000;
 8001ff2:	4b8f      	ldr	r3, [pc, #572]	; (8002230 <LCD_Init+0x2c8>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4b8e      	ldr	r3, [pc, #568]	; (8002230 <LCD_Init+0x2c8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	605a      	str	r2, [r3, #4]
	GPIOE->CRH|=0XBBBBBBBB;
 8001ffc:	4b8c      	ldr	r3, [pc, #560]	; (8002230 <LCD_Init+0x2c8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a8b      	ldr	r2, [pc, #556]	; (8002230 <LCD_Init+0x2c8>)
 8002002:	f043 33bb 	orr.w	r3, r3, #3149642683	; 0xbbbbbbbb
 8002006:	6053      	str	r3, [r2, #4]
	GPIOE->CRL&=0X0FFFFFFF;
 8002008:	4b89      	ldr	r3, [pc, #548]	; (8002230 <LCD_Init+0x2c8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a88      	ldr	r2, [pc, #544]	; (8002230 <LCD_Init+0x2c8>)
 800200e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002012:	6013      	str	r3, [r2, #0]
	GPIOE->CRL|=0XB0000000;
 8002014:	4b86      	ldr	r3, [pc, #536]	; (8002230 <LCD_Init+0x2c8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a85      	ldr	r2, [pc, #532]	; (8002230 <LCD_Init+0x2c8>)
 800201a:	f043 4330 	orr.w	r3, r3, #2952790016	; 0xb0000000
 800201e:	6013      	str	r3, [r2, #0]
	//PORTG12复用推挽输出
	GPIOG->CRH&=0XFFF0FFFF;
 8002020:	4b84      	ldr	r3, [pc, #528]	; (8002234 <LCD_Init+0x2cc>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	4a83      	ldr	r2, [pc, #524]	; (8002234 <LCD_Init+0x2cc>)
 8002026:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800202a:	6053      	str	r3, [r2, #4]
	GPIOG->CRH|=0X000B0000;
 800202c:	4b81      	ldr	r3, [pc, #516]	; (8002234 <LCD_Init+0x2cc>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a80      	ldr	r2, [pc, #512]	; (8002234 <LCD_Init+0x2cc>)
 8002032:	f443 2330 	orr.w	r3, r3, #720896	; 0xb0000
 8002036:	6053      	str	r3, [r2, #4]
	GPIOG->CRL&=0XFFFFFFF0;//PG0->RS
 8002038:	4b7e      	ldr	r3, [pc, #504]	; (8002234 <LCD_Init+0x2cc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a7d      	ldr	r2, [pc, #500]	; (8002234 <LCD_Init+0x2cc>)
 800203e:	f023 030f 	bic.w	r3, r3, #15
 8002042:	6013      	str	r3, [r2, #0]
	GPIOG->CRL|=0X0000000B;
 8002044:	4b7b      	ldr	r3, [pc, #492]	; (8002234 <LCD_Init+0x2cc>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a7a      	ldr	r2, [pc, #488]	; (8002234 <LCD_Init+0x2cc>)
 800204a:	f043 030b 	orr.w	r3, r3, #11
 800204e:	6013      	str	r3, [r2, #0]

	//寄存器清零
	//bank1有NE1~4,每一个有一个BCR+TCR，所以总共八个寄存器。
	//这里我们使用NE4 ，也就对应BTCR[6],[7]。
	FSMC_Bank1->BTCR[6]=0X00000000;
 8002050:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002054:	2200      	movs	r2, #0
 8002056:	619a      	str	r2, [r3, #24]
	FSMC_Bank1->BTCR[7]=0X00000000;
 8002058:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800205c:	2200      	movs	r2, #0
 800205e:	61da      	str	r2, [r3, #28]
	FSMC_Bank1E->BWTR[6]=0X00000000;
 8002060:	4b75      	ldr	r3, [pc, #468]	; (8002238 <LCD_Init+0x2d0>)
 8002062:	2200      	movs	r2, #0
 8002064:	619a      	str	r2, [r3, #24]
	//操作BCR寄存器	使用异步模式
	FSMC_Bank1->BTCR[6]|=1<<12;		//存储器写使能
 8002066:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002070:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002074:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<14;		//读写使用不同的时序
 8002076:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002084:	6193      	str	r3, [r2, #24]
	FSMC_Bank1->BTCR[6]|=1<<4; 		//存储器数据宽度为16bit
 8002086:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002090:	f043 0310 	orr.w	r3, r3, #16
 8002094:	6193      	str	r3, [r2, #24]
	//操作BTR寄存器
	//读时序控制寄存器
	FSMC_Bank1->BTCR[7]|=0<<28;		//模式A
 8002096:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800209a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800209e:	69db      	ldr	r3, [r3, #28]
 80020a0:	61d3      	str	r3, [r2, #28]
	FSMC_Bank1->BTCR[7]|=1<<0; 		//地址建立时间（ADDSET）为2个HCLK 1/36M=27ns(实际>200ns)
 80020a2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	61d3      	str	r3, [r2, #28]
	//因为液晶驱动IC的读数据的时候，速度不能太快，尤其对1289这个IC。
	FSMC_Bank1->BTCR[7]|=0XF<<8;  	//数据保存时间为16个HCLK
 80020b2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80020bc:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 80020c0:	61d3      	str	r3, [r2, #28]
	//写时序控制寄存器
	FSMC_Bank1E->BWTR[6]|=0<<28; 	//模式A
 80020c2:	4b5d      	ldr	r3, [pc, #372]	; (8002238 <LCD_Init+0x2d0>)
 80020c4:	4a5c      	ldr	r2, [pc, #368]	; (8002238 <LCD_Init+0x2d0>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	6193      	str	r3, [r2, #24]
	FSMC_Bank1E->BWTR[6]|=0<<0;		//地址建立时间（ADDSET）为1个HCLK
 80020ca:	4b5b      	ldr	r3, [pc, #364]	; (8002238 <LCD_Init+0x2d0>)
 80020cc:	4a5a      	ldr	r2, [pc, #360]	; (8002238 <LCD_Init+0x2d0>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	6193      	str	r3, [r2, #24]
 	//4个HCLK（HCLK=72M）因为液晶驱动IC的写信号脉宽，最少也得50ns。72M/4=24M=55ns
	FSMC_Bank1E->BWTR[6]|=3<<8; 	//数据保存时间为4个HCLK
 80020d2:	4b59      	ldr	r3, [pc, #356]	; (8002238 <LCD_Init+0x2d0>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	4a58      	ldr	r2, [pc, #352]	; (8002238 <LCD_Init+0x2d0>)
 80020d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80020dc:	6193      	str	r3, [r2, #24]
	//使能BANK1,区域4
	FSMC_Bank1->BTCR[6]|=1<<0;		//使能BANK1，区域4
 80020de:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6193      	str	r3, [r2, #24]
	HAL_Delay(50); 					// delay 50 ms
 80020ee:	2032      	movs	r0, #50	; 0x32
 80020f0:	f003 fdc8 	bl	8005c84 <HAL_Delay>
  	lcddev.id=LCD_ReadReg(0x0000);	//读ID（9320/9325/9328/4531/4535等IC）
 80020f4:	2000      	movs	r0, #0
 80020f6:	f7ff f991 	bl	800141c <LCD_ReadReg>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b4f      	ldr	r3, [pc, #316]	; (800223c <LCD_Init+0x2d4>)
 8002100:	809a      	strh	r2, [r3, #4]
  	if(lcddev.id<0XFF||lcddev.id==0XFFFF||lcddev.id==0X9300)//读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002102:	4b4e      	ldr	r3, [pc, #312]	; (800223c <LCD_Init+0x2d4>)
 8002104:	889b      	ldrh	r3, [r3, #4]
 8002106:	2bfe      	cmp	r3, #254	; 0xfe
 8002108:	d90b      	bls.n	8002122 <LCD_Init+0x1ba>
 800210a:	4b4c      	ldr	r3, [pc, #304]	; (800223c <LCD_Init+0x2d4>)
 800210c:	889b      	ldrh	r3, [r3, #4]
 800210e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002112:	4293      	cmp	r3, r2
 8002114:	d005      	beq.n	8002122 <LCD_Init+0x1ba>
 8002116:	4b49      	ldr	r3, [pc, #292]	; (800223c <LCD_Init+0x2d4>)
 8002118:	889b      	ldrh	r3, [r3, #4]
 800211a:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800211e:	f040 80fd 	bne.w	800231c <LCD_Init+0x3b4>
	{
 		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002122:	20d3      	movs	r0, #211	; 0xd3
 8002124:	f7ff f936 	bl	8001394 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();	//dummy read
 8002128:	f7ff f954 	bl	80013d4 <LCD_RD_DATA>
 800212c:	4603      	mov	r3, r0
 800212e:	461a      	mov	r2, r3
 8002130:	4b42      	ldr	r3, [pc, #264]	; (800223c <LCD_Init+0x2d4>)
 8002132:	809a      	strh	r2, [r3, #4]
 		lcddev.id=LCD_RD_DATA();	//读到0X00
 8002134:	f7ff f94e 	bl	80013d4 <LCD_RD_DATA>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	4b3f      	ldr	r3, [pc, #252]	; (800223c <LCD_Init+0x2d4>)
 800213e:	809a      	strh	r2, [r3, #4]
  		lcddev.id=LCD_RD_DATA();   	//读取93
 8002140:	f7ff f948 	bl	80013d4 <LCD_RD_DATA>
 8002144:	4603      	mov	r3, r0
 8002146:	461a      	mov	r2, r3
 8002148:	4b3c      	ldr	r3, [pc, #240]	; (800223c <LCD_Init+0x2d4>)
 800214a:	809a      	strh	r2, [r3, #4]
 		lcddev.id<<=8;
 800214c:	4b3b      	ldr	r3, [pc, #236]	; (800223c <LCD_Init+0x2d4>)
 800214e:	889b      	ldrh	r3, [r3, #4]
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	b29a      	uxth	r2, r3
 8002154:	4b39      	ldr	r3, [pc, #228]	; (800223c <LCD_Init+0x2d4>)
 8002156:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();  	//读取41
 8002158:	f7ff f93c 	bl	80013d4 <LCD_RD_DATA>
 800215c:	4603      	mov	r3, r0
 800215e:	461a      	mov	r2, r3
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <LCD_Init+0x2d4>)
 8002162:	889b      	ldrh	r3, [r3, #4]
 8002164:	4313      	orrs	r3, r2
 8002166:	b29a      	uxth	r2, r3
 8002168:	4b34      	ldr	r3, [pc, #208]	; (800223c <LCD_Init+0x2d4>)
 800216a:	809a      	strh	r2, [r3, #4]
 		if(lcddev.id!=0X9341)		//非9341,尝试是不是6804
 800216c:	4b33      	ldr	r3, [pc, #204]	; (800223c <LCD_Init+0x2d4>)
 800216e:	889b      	ldrh	r3, [r3, #4]
 8002170:	f249 3241 	movw	r2, #37697	; 0x9341
 8002174:	4293      	cmp	r3, r2
 8002176:	f000 80d1 	beq.w	800231c <LCD_Init+0x3b4>
		{
 			LCD_WR_REG(0XBF);
 800217a:	20bf      	movs	r0, #191	; 0xbf
 800217c:	f7ff f90a 	bl	8001394 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA(); 	//dummy read
 8002180:	f7ff f928 	bl	80013d4 <LCD_RD_DATA>
 8002184:	4603      	mov	r3, r0
 8002186:	461a      	mov	r2, r3
 8002188:	4b2c      	ldr	r3, [pc, #176]	; (800223c <LCD_Init+0x2d4>)
 800218a:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA();   	//读回0X01
 800218c:	f7ff f922 	bl	80013d4 <LCD_RD_DATA>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	4b29      	ldr	r3, [pc, #164]	; (800223c <LCD_Init+0x2d4>)
 8002196:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA(); 	//读回0XD0
 8002198:	f7ff f91c 	bl	80013d4 <LCD_RD_DATA>
 800219c:	4603      	mov	r3, r0
 800219e:	461a      	mov	r2, r3
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <LCD_Init+0x2d4>)
 80021a2:	809a      	strh	r2, [r3, #4]
	  		lcddev.id=LCD_RD_DATA();	//这里读回0X68
 80021a4:	f7ff f916 	bl	80013d4 <LCD_RD_DATA>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	4b23      	ldr	r3, [pc, #140]	; (800223c <LCD_Init+0x2d4>)
 80021ae:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <LCD_Init+0x2d4>)
 80021b2:	889b      	ldrh	r3, [r3, #4]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	4b20      	ldr	r3, [pc, #128]	; (800223c <LCD_Init+0x2d4>)
 80021ba:	809a      	strh	r2, [r3, #4]
	  		lcddev.id|=LCD_RD_DATA();	//这里读回0X04
 80021bc:	f7ff f90a 	bl	80013d4 <LCD_RD_DATA>
 80021c0:	4603      	mov	r3, r0
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <LCD_Init+0x2d4>)
 80021c6:	889b      	ldrh	r3, [r3, #4]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <LCD_Init+0x2d4>)
 80021ce:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X6804)		//也不是6804,尝试看看是不是NT35310
 80021d0:	4b1a      	ldr	r3, [pc, #104]	; (800223c <LCD_Init+0x2d4>)
 80021d2:	889b      	ldrh	r3, [r3, #4]
 80021d4:	f646 0204 	movw	r2, #26628	; 0x6804
 80021d8:	4293      	cmp	r3, r2
 80021da:	f000 809f 	beq.w	800231c <LCD_Init+0x3b4>
			{
				LCD_WR_REG(0XD4);
 80021de:	20d4      	movs	r0, #212	; 0xd4
 80021e0:	f7ff f8d8 	bl	8001394 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();//dummy read
 80021e4:	f7ff f8f6 	bl	80013d4 <LCD_RD_DATA>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461a      	mov	r2, r3
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <LCD_Init+0x2d4>)
 80021ee:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X01
 80021f0:	f7ff f8f0 	bl	80013d4 <LCD_RD_DATA>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <LCD_Init+0x2d4>)
 80021fa:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X53
 80021fc:	f7ff f8ea 	bl	80013d4 <LCD_RD_DATA>
 8002200:	4603      	mov	r3, r0
 8002202:	461a      	mov	r2, r3
 8002204:	4b0d      	ldr	r3, [pc, #52]	; (800223c <LCD_Init+0x2d4>)
 8002206:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 8002208:	4b0c      	ldr	r3, [pc, #48]	; (800223c <LCD_Init+0x2d4>)
 800220a:	889b      	ldrh	r3, [r3, #4]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b29a      	uxth	r2, r3
 8002210:	4b0a      	ldr	r3, [pc, #40]	; (800223c <LCD_Init+0x2d4>)
 8002212:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 8002214:	f7ff f8de 	bl	80013d4 <LCD_RD_DATA>
 8002218:	e012      	b.n	8002240 <LCD_Init+0x2d8>
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	40010c00 	.word	0x40010c00
 8002224:	40011400 	.word	0x40011400
 8002228:	00fff000 	.word	0x00fff000
 800222c:	bb000bbb 	.word	0xbb000bbb
 8002230:	40011800 	.word	0x40011800
 8002234:	40012000 	.word	0x40012000
 8002238:	a0000104 	.word	0xa0000104
 800223c:	2000022c 	.word	0x2000022c
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	4bc9      	ldr	r3, [pc, #804]	; (800256c <LCD_Init+0x604>)
 8002246:	889b      	ldrh	r3, [r3, #4]
 8002248:	4313      	orrs	r3, r2
 800224a:	b29a      	uxth	r2, r3
 800224c:	4bc7      	ldr	r3, [pc, #796]	; (800256c <LCD_Init+0x604>)
 800224e:	809a      	strh	r2, [r3, #4]
				if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8002250:	4bc6      	ldr	r3, [pc, #792]	; (800256c <LCD_Init+0x604>)
 8002252:	889b      	ldrh	r3, [r3, #4]
 8002254:	f245 3210 	movw	r2, #21264	; 0x5310
 8002258:	4293      	cmp	r3, r2
 800225a:	d05f      	beq.n	800231c <LCD_Init+0x3b4>
				{
					LCD_WR_REG(0XDA00);
 800225c:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8002260:	f7ff f898 	bl	8001394 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X00
 8002264:	f7ff f8b6 	bl	80013d4 <LCD_RD_DATA>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	4bbf      	ldr	r3, [pc, #764]	; (800256c <LCD_Init+0x604>)
 800226e:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDB00);
 8002270:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002274:	f7ff f88e 	bl	8001394 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X80
 8002278:	f7ff f8ac 	bl	80013d4 <LCD_RD_DATA>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	4bba      	ldr	r3, [pc, #744]	; (800256c <LCD_Init+0x604>)
 8002282:	809a      	strh	r2, [r3, #4]
					lcddev.id<<=8;
 8002284:	4bb9      	ldr	r3, [pc, #740]	; (800256c <LCD_Init+0x604>)
 8002286:	889b      	ldrh	r3, [r3, #4]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b29a      	uxth	r2, r3
 800228c:	4bb7      	ldr	r3, [pc, #732]	; (800256c <LCD_Init+0x604>)
 800228e:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8002290:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8002294:	f7ff f87e 	bl	8001394 <LCD_WR_REG>
					lcddev.id|=LCD_RD_DATA();		//读回0X00
 8002298:	f7ff f89c 	bl	80013d4 <LCD_RD_DATA>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	4bb2      	ldr	r3, [pc, #712]	; (800256c <LCD_Init+0x604>)
 80022a2:	889b      	ldrh	r3, [r3, #4]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	4bb0      	ldr	r3, [pc, #704]	; (800256c <LCD_Init+0x604>)
 80022aa:	809a      	strh	r2, [r3, #4]
					if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 80022ac:	4baf      	ldr	r3, [pc, #700]	; (800256c <LCD_Init+0x604>)
 80022ae:	889b      	ldrh	r3, [r3, #4]
 80022b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b4:	d103      	bne.n	80022be <LCD_Init+0x356>
 80022b6:	4bad      	ldr	r3, [pc, #692]	; (800256c <LCD_Init+0x604>)
 80022b8:	f245 5210 	movw	r2, #21776	; 0x5510
 80022bc:	809a      	strh	r2, [r3, #4]
					if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 80022be:	4bab      	ldr	r3, [pc, #684]	; (800256c <LCD_Init+0x604>)
 80022c0:	889b      	ldrh	r3, [r3, #4]
 80022c2:	f245 5210 	movw	r2, #21776	; 0x5510
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d028      	beq.n	800231c <LCD_Init+0x3b4>
					{
						LCD_WR_REG(0XA1);
 80022ca:	20a1      	movs	r0, #161	; 0xa1
 80022cc:	f7ff f862 	bl	8001394 <LCD_WR_REG>
						lcddev.id=LCD_RD_DATA();
 80022d0:	f7ff f880 	bl	80013d4 <LCD_RD_DATA>
 80022d4:	4603      	mov	r3, r0
 80022d6:	461a      	mov	r2, r3
 80022d8:	4ba4      	ldr	r3, [pc, #656]	; (800256c <LCD_Init+0x604>)
 80022da:	809a      	strh	r2, [r3, #4]
						lcddev.id=LCD_RD_DATA();	//读回0X57
 80022dc:	f7ff f87a 	bl	80013d4 <LCD_RD_DATA>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	4ba1      	ldr	r3, [pc, #644]	; (800256c <LCD_Init+0x604>)
 80022e6:	809a      	strh	r2, [r3, #4]
						lcddev.id<<=8;
 80022e8:	4ba0      	ldr	r3, [pc, #640]	; (800256c <LCD_Init+0x604>)
 80022ea:	889b      	ldrh	r3, [r3, #4]
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	4b9e      	ldr	r3, [pc, #632]	; (800256c <LCD_Init+0x604>)
 80022f2:	809a      	strh	r2, [r3, #4]
						lcddev.id|=LCD_RD_DATA();	//读回0X61
 80022f4:	f7ff f86e 	bl	80013d4 <LCD_RD_DATA>
 80022f8:	4603      	mov	r3, r0
 80022fa:	461a      	mov	r2, r3
 80022fc:	4b9b      	ldr	r3, [pc, #620]	; (800256c <LCD_Init+0x604>)
 80022fe:	889b      	ldrh	r3, [r3, #4]
 8002300:	4313      	orrs	r3, r2
 8002302:	b29a      	uxth	r2, r3
 8002304:	4b99      	ldr	r3, [pc, #612]	; (800256c <LCD_Init+0x604>)
 8002306:	809a      	strh	r2, [r3, #4]
						if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8002308:	4b98      	ldr	r3, [pc, #608]	; (800256c <LCD_Init+0x604>)
 800230a:	889b      	ldrh	r3, [r3, #4]
 800230c:	f245 7261 	movw	r2, #22369	; 0x5761
 8002310:	4293      	cmp	r3, r2
 8002312:	d103      	bne.n	800231c <LCD_Init+0x3b4>
 8002314:	4b95      	ldr	r3, [pc, #596]	; (800256c <LCD_Init+0x604>)
 8002316:	f641 1263 	movw	r2, #6499	; 0x1963
 800231a:	809a      	strh	r2, [r3, #4]
					}
				}
			}
 		}
	}
 	print(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
 800231c:	4b93      	ldr	r3, [pc, #588]	; (800256c <LCD_Init+0x604>)
 800231e:	889b      	ldrh	r3, [r3, #4]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	4b93      	ldr	r3, [pc, #588]	; (8002570 <LCD_Init+0x608>)
 8002324:	4a93      	ldr	r2, [pc, #588]	; (8002574 <LCD_Init+0x60c>)
 8002326:	f44f 7120 	mov.w	r1, #640	; 0x280
 800232a:	4893      	ldr	r0, [pc, #588]	; (8002578 <LCD_Init+0x610>)
 800232c:	f005 fd3c 	bl	8007da8 <iprintf>
	if(lcddev.id==0X9341)	//9341初始化
 8002330:	4b8e      	ldr	r3, [pc, #568]	; (800256c <LCD_Init+0x604>)
 8002332:	889b      	ldrh	r3, [r3, #4]
 8002334:	f249 3241 	movw	r2, #37697	; 0x9341
 8002338:	4293      	cmp	r3, r2
 800233a:	f040 811f 	bne.w	800257c <LCD_Init+0x614>
	{
		LCD_WR_REG(0xCF);
 800233e:	20cf      	movs	r0, #207	; 0xcf
 8002340:	f7ff f828 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002344:	2000      	movs	r0, #0
 8002346:	f7ff f835 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 800234a:	20c1      	movs	r0, #193	; 0xc1
 800234c:	f7ff f832 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8002350:	2030      	movs	r0, #48	; 0x30
 8002352:	f7ff f82f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 8002356:	20ed      	movs	r0, #237	; 0xed
 8002358:	f7ff f81c 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 800235c:	2064      	movs	r0, #100	; 0x64
 800235e:	f7ff f829 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8002362:	2003      	movs	r0, #3
 8002364:	f7ff f826 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 8002368:	2012      	movs	r0, #18
 800236a:	f7ff f823 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 800236e:	2081      	movs	r0, #129	; 0x81
 8002370:	f7ff f820 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8002374:	20e8      	movs	r0, #232	; 0xe8
 8002376:	f7ff f80d 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 800237a:	2085      	movs	r0, #133	; 0x85
 800237c:	f7ff f81a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8002380:	2010      	movs	r0, #16
 8002382:	f7ff f817 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8002386:	207a      	movs	r0, #122	; 0x7a
 8002388:	f7ff f814 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 800238c:	20cb      	movs	r0, #203	; 0xcb
 800238e:	f7ff f801 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8002392:	2039      	movs	r0, #57	; 0x39
 8002394:	f7ff f80e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002398:	202c      	movs	r0, #44	; 0x2c
 800239a:	f7ff f80b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800239e:	2000      	movs	r0, #0
 80023a0:	f7ff f808 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80023a4:	2034      	movs	r0, #52	; 0x34
 80023a6:	f7ff f805 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 80023aa:	2002      	movs	r0, #2
 80023ac:	f7ff f802 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 80023b0:	20f7      	movs	r0, #247	; 0xf7
 80023b2:	f7fe ffef 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 80023b6:	2020      	movs	r0, #32
 80023b8:	f7fe fffc 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 80023bc:	20ea      	movs	r0, #234	; 0xea
 80023be:	f7fe ffe9 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7fe fff6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7fe fff3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 80023ce:	20c0      	movs	r0, #192	; 0xc0
 80023d0:	f7fe ffe0 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 80023d4:	201b      	movs	r0, #27
 80023d6:	f7fe ffed 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 80023da:	20c1      	movs	r0, #193	; 0xc1
 80023dc:	f7fe ffda 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80023e0:	2001      	movs	r0, #1
 80023e2:	f7fe ffe7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 80023e6:	20c5      	movs	r0, #197	; 0xc5
 80023e8:	f7fe ffd4 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 80023ec:	2030      	movs	r0, #48	; 0x30
 80023ee:	f7fe ffe1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 80023f2:	2030      	movs	r0, #48	; 0x30
 80023f4:	f7fe ffde 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 80023f8:	20c7      	movs	r0, #199	; 0xc7
 80023fa:	f7fe ffcb 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 80023fe:	20b7      	movs	r0, #183	; 0xb7
 8002400:	f7fe ffd8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 8002404:	2036      	movs	r0, #54	; 0x36
 8002406:	f7fe ffc5 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 800240a:	2048      	movs	r0, #72	; 0x48
 800240c:	f7fe ffd2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 8002410:	203a      	movs	r0, #58	; 0x3a
 8002412:	f7fe ffbf 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 8002416:	2055      	movs	r0, #85	; 0x55
 8002418:	f7fe ffcc 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 800241c:	20b1      	movs	r0, #177	; 0xb1
 800241e:	f7fe ffb9 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002422:	2000      	movs	r0, #0
 8002424:	f7fe ffc6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 8002428:	201a      	movs	r0, #26
 800242a:	f7fe ffc3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 800242e:	20b6      	movs	r0, #182	; 0xb6
 8002430:	f7fe ffb0 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8002434:	200a      	movs	r0, #10
 8002436:	f7fe ffbd 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 800243a:	20a2      	movs	r0, #162	; 0xa2
 800243c:	f7fe ffba 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8002440:	20f2      	movs	r0, #242	; 0xf2
 8002442:	f7fe ffa7 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002446:	2000      	movs	r0, #0
 8002448:	f7fe ffb4 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 800244c:	2026      	movs	r0, #38	; 0x26
 800244e:	f7fe ffa1 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002452:	2001      	movs	r0, #1
 8002454:	f7fe ffae 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 8002458:	20e0      	movs	r0, #224	; 0xe0
 800245a:	f7fe ff9b 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 800245e:	200f      	movs	r0, #15
 8002460:	f7fe ffa8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8002464:	202a      	movs	r0, #42	; 0x2a
 8002466:	f7fe ffa5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 800246a:	2028      	movs	r0, #40	; 0x28
 800246c:	f7fe ffa2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8002470:	2008      	movs	r0, #8
 8002472:	f7fe ff9f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 8002476:	200e      	movs	r0, #14
 8002478:	f7fe ff9c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 800247c:	2008      	movs	r0, #8
 800247e:	f7fe ff99 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8002482:	2054      	movs	r0, #84	; 0x54
 8002484:	f7fe ff96 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 8002488:	20a9      	movs	r0, #169	; 0xa9
 800248a:	f7fe ff93 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 800248e:	2043      	movs	r0, #67	; 0x43
 8002490:	f7fe ff90 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8002494:	200a      	movs	r0, #10
 8002496:	f7fe ff8d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 800249a:	200f      	movs	r0, #15
 800249c:	f7fe ff8a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7fe ff87 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7fe ff84 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7fe ff81 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7fe ff7e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 80024b8:	20e1      	movs	r0, #225	; 0xe1
 80024ba:	f7fe ff6b 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80024be:	2000      	movs	r0, #0
 80024c0:	f7fe ff78 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 80024c4:	2015      	movs	r0, #21
 80024c6:	f7fe ff75 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80024ca:	2017      	movs	r0, #23
 80024cc:	f7fe ff72 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 80024d0:	2007      	movs	r0, #7
 80024d2:	f7fe ff6f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 80024d6:	2011      	movs	r0, #17
 80024d8:	f7fe ff6c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 80024dc:	2006      	movs	r0, #6
 80024de:	f7fe ff69 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 80024e2:	202b      	movs	r0, #43	; 0x2b
 80024e4:	f7fe ff66 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 80024e8:	2056      	movs	r0, #86	; 0x56
 80024ea:	f7fe ff63 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80024ee:	203c      	movs	r0, #60	; 0x3c
 80024f0:	f7fe ff60 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 80024f4:	2005      	movs	r0, #5
 80024f6:	f7fe ff5d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 80024fa:	2010      	movs	r0, #16
 80024fc:	f7fe ff5a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8002500:	200f      	movs	r0, #15
 8002502:	f7fe ff57 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8002506:	203f      	movs	r0, #63	; 0x3f
 8002508:	f7fe ff54 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 800250c:	203f      	movs	r0, #63	; 0x3f
 800250e:	f7fe ff51 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8002512:	200f      	movs	r0, #15
 8002514:	f7fe ff4e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 8002518:	202b      	movs	r0, #43	; 0x2b
 800251a:	f7fe ff3b 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800251e:	2000      	movs	r0, #0
 8002520:	f7fe ff48 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002524:	2000      	movs	r0, #0
 8002526:	f7fe ff45 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 800252a:	2001      	movs	r0, #1
 800252c:	f7fe ff42 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 8002530:	203f      	movs	r0, #63	; 0x3f
 8002532:	f7fe ff3f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 8002536:	202a      	movs	r0, #42	; 0x2a
 8002538:	f7fe ff2c 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800253c:	2000      	movs	r0, #0
 800253e:	f7fe ff39 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002542:	2000      	movs	r0, #0
 8002544:	f7fe ff36 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002548:	2000      	movs	r0, #0
 800254a:	f7fe ff33 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 800254e:	20ef      	movs	r0, #239	; 0xef
 8002550:	f7fe ff30 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 8002554:	2011      	movs	r0, #17
 8002556:	f7fe ff1d 	bl	8001394 <LCD_WR_REG>
		HAL_Delay(20);
 800255a:	2014      	movs	r0, #20
 800255c:	f003 fb92 	bl	8005c84 <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 8002560:	2029      	movs	r0, #41	; 0x29
 8002562:	f7fe ff17 	bl	8001394 <LCD_WR_REG>
 8002566:	f003 b928 	b.w	80057ba <LCD_Init+0x3852>
 800256a:	bf00      	nop
 800256c:	2000022c 	.word	0x2000022c
 8002570:	08015a34 	.word	0x08015a34
 8002574:	08008cf0 	.word	0x08008cf0
 8002578:	08008d08 	.word	0x08008d08
	}else if(lcddev.id==0x6804) //6804初始化
 800257c:	4b58      	ldr	r3, [pc, #352]	; (80026e0 <LCD_Init+0x778>)
 800257e:	889b      	ldrh	r3, [r3, #4]
 8002580:	f646 0204 	movw	r2, #26628	; 0x6804
 8002584:	4293      	cmp	r3, r2
 8002586:	f040 80ad 	bne.w	80026e4 <LCD_Init+0x77c>
	{
		LCD_WR_REG(0X11);
 800258a:	2011      	movs	r0, #17
 800258c:	f7fe ff02 	bl	8001394 <LCD_WR_REG>
		HAL_Delay(20);
 8002590:	2014      	movs	r0, #20
 8002592:	f003 fb77 	bl	8005c84 <HAL_Delay>
		LCD_WR_REG(0XD0);//VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002596:	20d0      	movs	r0, #208	; 0xd0
 8002598:	f7fe fefc 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0X07);
 800259c:	2007      	movs	r0, #7
 800259e:	f7fe ff09 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X42);
 80025a2:	2042      	movs	r0, #66	; 0x42
 80025a4:	f7fe ff06 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X1D);
 80025a8:	201d      	movs	r0, #29
 80025aa:	f7fe ff03 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0XD1);//VCOMH VCOM_AC amplitude setting
 80025ae:	20d1      	movs	r0, #209	; 0xd1
 80025b0:	f7fe fef0 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 80025b4:	2000      	movs	r0, #0
 80025b6:	f7fe fefd 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X1a);
 80025ba:	201a      	movs	r0, #26
 80025bc:	f7fe fefa 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X09);
 80025c0:	2009      	movs	r0, #9
 80025c2:	f7fe fef7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0XD2);//Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 80025c6:	20d2      	movs	r0, #210	; 0xd2
 80025c8:	f7fe fee4 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 80025cc:	2001      	movs	r0, #1
 80025ce:	f7fe fef1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X22);
 80025d2:	2022      	movs	r0, #34	; 0x22
 80025d4:	f7fe feee 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0XC0);//REV SM GS
 80025d8:	20c0      	movs	r0, #192	; 0xc0
 80025da:	f7fe fedb 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0X10);
 80025de:	2010      	movs	r0, #16
 80025e0:	f7fe fee8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X3B);
 80025e4:	203b      	movs	r0, #59	; 0x3b
 80025e6:	f7fe fee5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80025ea:	2000      	movs	r0, #0
 80025ec:	f7fe fee2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X02);
 80025f0:	2002      	movs	r0, #2
 80025f2:	f7fe fedf 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X11);
 80025f6:	2011      	movs	r0, #17
 80025f8:	f7fe fedc 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0XC5);// Frame rate setting = 72HZ  when setting 0x03
 80025fc:	20c5      	movs	r0, #197	; 0xc5
 80025fe:	f7fe fec9 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0X03);
 8002602:	2003      	movs	r0, #3
 8002604:	f7fe fed6 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0XC8);//Gamma setting
 8002608:	20c8      	movs	r0, #200	; 0xc8
 800260a:	f7fe fec3 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 800260e:	2000      	movs	r0, #0
 8002610:	f7fe fed0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 8002614:	2025      	movs	r0, #37	; 0x25
 8002616:	f7fe fecd 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X21);
 800261a:	2021      	movs	r0, #33	; 0x21
 800261c:	f7fe feca 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X05);
 8002620:	2005      	movs	r0, #5
 8002622:	f7fe fec7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002626:	2000      	movs	r0, #0
 8002628:	f7fe fec4 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X0a);
 800262c:	200a      	movs	r0, #10
 800262e:	f7fe fec1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X65);
 8002632:	2065      	movs	r0, #101	; 0x65
 8002634:	f7fe febe 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 8002638:	2025      	movs	r0, #37	; 0x25
 800263a:	f7fe febb 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X77);
 800263e:	2077      	movs	r0, #119	; 0x77
 8002640:	f7fe feb8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X50);
 8002644:	2050      	movs	r0, #80	; 0x50
 8002646:	f7fe feb5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X0f);
 800264a:	200f      	movs	r0, #15
 800264c:	f7fe feb2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002650:	2000      	movs	r0, #0
 8002652:	f7fe feaf 	bl	80013b4 <LCD_WR_DATA>

   		LCD_WR_REG(0XF8);
 8002656:	20f8      	movs	r0, #248	; 0xf8
 8002658:	f7fe fe9c 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 800265c:	2001      	movs	r0, #1
 800265e:	f7fe fea9 	bl	80013b4 <LCD_WR_DATA>

 		LCD_WR_REG(0XFE);
 8002662:	20fe      	movs	r0, #254	; 0xfe
 8002664:	f7fe fe96 	bl	8001394 <LCD_WR_REG>
 		LCD_WR_DATA(0X00);
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe fea3 	bl	80013b4 <LCD_WR_DATA>
 		LCD_WR_DATA(0X02);
 800266e:	2002      	movs	r0, #2
 8002670:	f7fe fea0 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0X20);//Exit invert mode
 8002674:	2020      	movs	r0, #32
 8002676:	f7fe fe8d 	bl	8001394 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 800267a:	2036      	movs	r0, #54	; 0x36
 800267c:	f7fe fe8a 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0X08);//原来是a
 8002680:	2008      	movs	r0, #8
 8002682:	f7fe fe97 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0X3A);
 8002686:	203a      	movs	r0, #58	; 0x3a
 8002688:	f7fe fe84 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0X55);//16位模式
 800268c:	2055      	movs	r0, #85	; 0x55
 800268e:	f7fe fe91 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0X2B);
 8002692:	202b      	movs	r0, #43	; 0x2b
 8002694:	f7fe fe7e 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002698:	2000      	movs	r0, #0
 800269a:	f7fe fe8b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 800269e:	2000      	movs	r0, #0
 80026a0:	f7fe fe88 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 80026a4:	2001      	movs	r0, #1
 80026a6:	f7fe fe85 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X3F);
 80026aa:	203f      	movs	r0, #63	; 0x3f
 80026ac:	f7fe fe82 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0X2A);
 80026b0:	202a      	movs	r0, #42	; 0x2a
 80026b2:	f7fe fe6f 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7fe fe7c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7fe fe79 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 80026c2:	2001      	movs	r0, #1
 80026c4:	f7fe fe76 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0XDF);
 80026c8:	20df      	movs	r0, #223	; 0xdf
 80026ca:	f7fe fe73 	bl	80013b4 <LCD_WR_DATA>
		HAL_Delay(120);
 80026ce:	2078      	movs	r0, #120	; 0x78
 80026d0:	f003 fad8 	bl	8005c84 <HAL_Delay>
		LCD_WR_REG(0X29);
 80026d4:	2029      	movs	r0, #41	; 0x29
 80026d6:	f7fe fe5d 	bl	8001394 <LCD_WR_REG>
 80026da:	f003 b86e 	b.w	80057ba <LCD_Init+0x3852>
 80026de:	bf00      	nop
 80026e0:	2000022c 	.word	0x2000022c
 	}else if(lcddev.id==0x5310)
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <LCD_Init+0x78c>)
 80026e6:	889b      	ldrh	r3, [r3, #4]
 80026e8:	f245 3210 	movw	r2, #21264	; 0x5310
 80026ec:	4293      	cmp	r3, r2
 80026ee:	f040 877c 	bne.w	80035ea <LCD_Init+0x1682>
 80026f2:	e001      	b.n	80026f8 <LCD_Init+0x790>
 80026f4:	2000022c 	.word	0x2000022c
	{
		LCD_WR_REG(0xED);
 80026f8:	20ed      	movs	r0, #237	; 0xed
 80026fa:	f7fe fe4b 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80026fe:	2001      	movs	r0, #1
 8002700:	f7fe fe58 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 8002704:	20fe      	movs	r0, #254	; 0xfe
 8002706:	f7fe fe55 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 800270a:	20ee      	movs	r0, #238	; 0xee
 800270c:	f7fe fe42 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 8002710:	20de      	movs	r0, #222	; 0xde
 8002712:	f7fe fe4f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002716:	2021      	movs	r0, #33	; 0x21
 8002718:	f7fe fe4c 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 800271c:	20f1      	movs	r0, #241	; 0xf1
 800271e:	f7fe fe39 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002722:	2001      	movs	r0, #1
 8002724:	f7fe fe46 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 8002728:	20df      	movs	r0, #223	; 0xdf
 800272a:	f7fe fe33 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 800272e:	2010      	movs	r0, #16
 8002730:	f7fe fe40 	bl	80013b4 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8002734:	20c4      	movs	r0, #196	; 0xc4
 8002736:	f7fe fe2d 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 800273a:	208f      	movs	r0, #143	; 0x8f
 800273c:	f7fe fe3a 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8002740:	20c6      	movs	r0, #198	; 0xc6
 8002742:	f7fe fe27 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002746:	2000      	movs	r0, #0
 8002748:	f7fe fe34 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 800274c:	20e2      	movs	r0, #226	; 0xe2
 800274e:	f7fe fe31 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8002752:	20e2      	movs	r0, #226	; 0xe2
 8002754:	f7fe fe2e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8002758:	20e2      	movs	r0, #226	; 0xe2
 800275a:	f7fe fe2b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 800275e:	20bf      	movs	r0, #191	; 0xbf
 8002760:	f7fe fe18 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002764:	20aa      	movs	r0, #170	; 0xaa
 8002766:	f7fe fe25 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 800276a:	20b0      	movs	r0, #176	; 0xb0
 800276c:	f7fe fe12 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 8002770:	200d      	movs	r0, #13
 8002772:	f7fe fe1f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002776:	2000      	movs	r0, #0
 8002778:	f7fe fe1c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 800277c:	200d      	movs	r0, #13
 800277e:	f7fe fe19 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002782:	2000      	movs	r0, #0
 8002784:	f7fe fe16 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8002788:	2011      	movs	r0, #17
 800278a:	f7fe fe13 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800278e:	2000      	movs	r0, #0
 8002790:	f7fe fe10 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8002794:	2019      	movs	r0, #25
 8002796:	f7fe fe0d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800279a:	2000      	movs	r0, #0
 800279c:	f7fe fe0a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80027a0:	2021      	movs	r0, #33	; 0x21
 80027a2:	f7fe fe07 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fe fe04 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 80027ac:	202d      	movs	r0, #45	; 0x2d
 80027ae:	f7fe fe01 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe fdfe 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 80027b8:	203d      	movs	r0, #61	; 0x3d
 80027ba:	f7fe fdfb 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027be:	2000      	movs	r0, #0
 80027c0:	f7fe fdf8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 80027c4:	205d      	movs	r0, #93	; 0x5d
 80027c6:	f7fe fdf5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7fe fdf2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 80027d0:	205d      	movs	r0, #93	; 0x5d
 80027d2:	f7fe fdef 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7fe fdec 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 80027dc:	20b1      	movs	r0, #177	; 0xb1
 80027de:	f7fe fdd9 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 80027e2:	2080      	movs	r0, #128	; 0x80
 80027e4:	f7fe fde6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fe fde3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80027ee:	208b      	movs	r0, #139	; 0x8b
 80027f0:	f7fe fde0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7fe fddd 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 80027fa:	2096      	movs	r0, #150	; 0x96
 80027fc:	f7fe fdda 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe fdd7 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 8002806:	20b2      	movs	r0, #178	; 0xb2
 8002808:	f7fe fdc4 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800280c:	2000      	movs	r0, #0
 800280e:	f7fe fdd1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002812:	2000      	movs	r0, #0
 8002814:	f7fe fdce 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002818:	2002      	movs	r0, #2
 800281a:	f7fe fdcb 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800281e:	2000      	movs	r0, #0
 8002820:	f7fe fdc8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8002824:	2003      	movs	r0, #3
 8002826:	f7fe fdc5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800282a:	2000      	movs	r0, #0
 800282c:	f7fe fdc2 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 8002830:	20b3      	movs	r0, #179	; 0xb3
 8002832:	f7fe fdaf 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002836:	2000      	movs	r0, #0
 8002838:	f7fe fdbc 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f7fe fdb9 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002842:	2000      	movs	r0, #0
 8002844:	f7fe fdb6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe fdb3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe fdb0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002854:	2000      	movs	r0, #0
 8002856:	f7fe fdad 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800285a:	2000      	movs	r0, #0
 800285c:	f7fe fdaa 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002860:	2000      	movs	r0, #0
 8002862:	f7fe fda7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002866:	2000      	movs	r0, #0
 8002868:	f7fe fda4 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800286c:	2000      	movs	r0, #0
 800286e:	f7fe fda1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002872:	2000      	movs	r0, #0
 8002874:	f7fe fd9e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002878:	2000      	movs	r0, #0
 800287a:	f7fe fd9b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe fd98 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002884:	2000      	movs	r0, #0
 8002886:	f7fe fd95 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800288a:	2000      	movs	r0, #0
 800288c:	f7fe fd92 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002890:	2000      	movs	r0, #0
 8002892:	f7fe fd8f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002896:	2000      	movs	r0, #0
 8002898:	f7fe fd8c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800289c:	2000      	movs	r0, #0
 800289e:	f7fe fd89 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7fe fd86 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7fe fd83 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7fe fd80 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7fe fd7d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7fe fd7a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7fe fd77 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 80028c6:	20b4      	movs	r0, #180	; 0xb4
 80028c8:	f7fe fd64 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 80028cc:	208b      	movs	r0, #139	; 0x8b
 80028ce:	f7fe fd71 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7fe fd6e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 80028d8:	2096      	movs	r0, #150	; 0x96
 80028da:	f7fe fd6b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f7fe fd68 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 80028e4:	20a1      	movs	r0, #161	; 0xa1
 80028e6:	f7fe fd65 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7fe fd62 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 80028f0:	20b5      	movs	r0, #181	; 0xb5
 80028f2:	f7fe fd4f 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 80028f6:	2002      	movs	r0, #2
 80028f8:	f7fe fd5c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028fc:	2000      	movs	r0, #0
 80028fe:	f7fe fd59 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8002902:	2003      	movs	r0, #3
 8002904:	f7fe fd56 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002908:	2000      	movs	r0, #0
 800290a:	f7fe fd53 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 800290e:	2004      	movs	r0, #4
 8002910:	f7fe fd50 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002914:	2000      	movs	r0, #0
 8002916:	f7fe fd4d 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 800291a:	20b6      	movs	r0, #182	; 0xb6
 800291c:	f7fe fd3a 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002920:	2000      	movs	r0, #0
 8002922:	f7fe fd47 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002926:	2000      	movs	r0, #0
 8002928:	f7fe fd44 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 800292c:	20b7      	movs	r0, #183	; 0xb7
 800292e:	f7fe fd31 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe fd3e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002938:	2000      	movs	r0, #0
 800293a:	f7fe fd3b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 800293e:	203f      	movs	r0, #63	; 0x3f
 8002940:	f7fe fd38 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002944:	2000      	movs	r0, #0
 8002946:	f7fe fd35 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 800294a:	205e      	movs	r0, #94	; 0x5e
 800294c:	f7fe fd32 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002950:	2000      	movs	r0, #0
 8002952:	f7fe fd2f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002956:	2064      	movs	r0, #100	; 0x64
 8002958:	f7fe fd2c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800295c:	2000      	movs	r0, #0
 800295e:	f7fe fd29 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 8002962:	208c      	movs	r0, #140	; 0x8c
 8002964:	f7fe fd26 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002968:	2000      	movs	r0, #0
 800296a:	f7fe fd23 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 800296e:	20ac      	movs	r0, #172	; 0xac
 8002970:	f7fe fd20 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002974:	2000      	movs	r0, #0
 8002976:	f7fe fd1d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 800297a:	20dc      	movs	r0, #220	; 0xdc
 800297c:	f7fe fd1a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002980:	2000      	movs	r0, #0
 8002982:	f7fe fd17 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8002986:	2070      	movs	r0, #112	; 0x70
 8002988:	f7fe fd14 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800298c:	2000      	movs	r0, #0
 800298e:	f7fe fd11 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 8002992:	2090      	movs	r0, #144	; 0x90
 8002994:	f7fe fd0e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002998:	2000      	movs	r0, #0
 800299a:	f7fe fd0b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 800299e:	20eb      	movs	r0, #235	; 0xeb
 80029a0:	f7fe fd08 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7fe fd05 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 80029aa:	20dc      	movs	r0, #220	; 0xdc
 80029ac:	f7fe fd02 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7fe fcff 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 80029b6:	20b8      	movs	r0, #184	; 0xb8
 80029b8:	f7fe fcec 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7fe fcf9 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7fe fcf6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fe fcf3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7fe fcf0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fe fced 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029da:	2000      	movs	r0, #0
 80029dc:	f7fe fcea 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7fe fce7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7fe fce4 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 80029ec:	20ba      	movs	r0, #186	; 0xba
 80029ee:	f7fe fcd1 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 80029f2:	2024      	movs	r0, #36	; 0x24
 80029f4:	f7fe fcde 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7fe fcdb 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f7fe fcd8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fe fcd5 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 8002a0a:	20c1      	movs	r0, #193	; 0xc1
 8002a0c:	f7fe fcc2 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8002a10:	2020      	movs	r0, #32
 8002a12:	f7fe fccf 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7fe fccc 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8002a1c:	2054      	movs	r0, #84	; 0x54
 8002a1e:	f7fe fcc9 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7fe fcc6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8002a28:	20ff      	movs	r0, #255	; 0xff
 8002a2a:	f7fe fcc3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7fe fcc0 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 8002a34:	20c2      	movs	r0, #194	; 0xc2
 8002a36:	f7fe fcad 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8002a3a:	200a      	movs	r0, #10
 8002a3c:	f7fe fcba 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7fe fcb7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8002a46:	2004      	movs	r0, #4
 8002a48:	f7fe fcb4 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7fe fcb1 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 8002a52:	20c3      	movs	r0, #195	; 0xc3
 8002a54:	f7fe fc9e 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8002a58:	203c      	movs	r0, #60	; 0x3c
 8002a5a:	f7fe fcab 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f7fe fca8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8002a64:	203a      	movs	r0, #58	; 0x3a
 8002a66:	f7fe fca5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7fe fca2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 8002a70:	2039      	movs	r0, #57	; 0x39
 8002a72:	f7fe fc9f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7fe fc9c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8002a7c:	2037      	movs	r0, #55	; 0x37
 8002a7e:	f7fe fc99 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7fe fc96 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002a88:	203c      	movs	r0, #60	; 0x3c
 8002a8a:	f7fe fc93 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7fe fc90 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002a94:	2036      	movs	r0, #54	; 0x36
 8002a96:	f7fe fc8d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7fe fc8a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8002aa0:	2032      	movs	r0, #50	; 0x32
 8002aa2:	f7fe fc87 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fe fc84 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002aac:	202f      	movs	r0, #47	; 0x2f
 8002aae:	f7fe fc81 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7fe fc7e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002ab8:	202c      	movs	r0, #44	; 0x2c
 8002aba:	f7fe fc7b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fe fc78 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002ac4:	2029      	movs	r0, #41	; 0x29
 8002ac6:	f7fe fc75 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fe fc72 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8002ad0:	2026      	movs	r0, #38	; 0x26
 8002ad2:	f7fe fc6f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fe fc6c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002adc:	2024      	movs	r0, #36	; 0x24
 8002ade:	f7fe fc69 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f7fe fc66 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002ae8:	2024      	movs	r0, #36	; 0x24
 8002aea:	f7fe fc63 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7fe fc60 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002af4:	2023      	movs	r0, #35	; 0x23
 8002af6:	f7fe fc5d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7fe fc5a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002b00:	203c      	movs	r0, #60	; 0x3c
 8002b02:	f7fe fc57 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7fe fc54 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002b0c:	2036      	movs	r0, #54	; 0x36
 8002b0e:	f7fe fc51 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fe fc4e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8002b18:	2032      	movs	r0, #50	; 0x32
 8002b1a:	f7fe fc4b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7fe fc48 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002b24:	202f      	movs	r0, #47	; 0x2f
 8002b26:	f7fe fc45 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7fe fc42 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002b30:	202c      	movs	r0, #44	; 0x2c
 8002b32:	f7fe fc3f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7fe fc3c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002b3c:	2029      	movs	r0, #41	; 0x29
 8002b3e:	f7fe fc39 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7fe fc36 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8002b48:	2026      	movs	r0, #38	; 0x26
 8002b4a:	f7fe fc33 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7fe fc30 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002b54:	2024      	movs	r0, #36	; 0x24
 8002b56:	f7fe fc2d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f7fe fc2a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002b60:	2024      	movs	r0, #36	; 0x24
 8002b62:	f7fe fc27 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b66:	2000      	movs	r0, #0
 8002b68:	f7fe fc24 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002b6c:	2023      	movs	r0, #35	; 0x23
 8002b6e:	f7fe fc21 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7fe fc1e 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8002b78:	20c4      	movs	r0, #196	; 0xc4
 8002b7a:	f7fe fc0b 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 8002b7e:	2062      	movs	r0, #98	; 0x62
 8002b80:	f7fe fc18 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fe fc15 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8002b8a:	2005      	movs	r0, #5
 8002b8c:	f7fe fc12 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fe fc0f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002b96:	2084      	movs	r0, #132	; 0x84
 8002b98:	f7fe fc0c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fe fc09 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8002ba2:	20f0      	movs	r0, #240	; 0xf0
 8002ba4:	f7fe fc06 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fe fc03 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002bae:	2018      	movs	r0, #24
 8002bb0:	f7fe fc00 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fe fbfd 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 8002bba:	20a4      	movs	r0, #164	; 0xa4
 8002bbc:	f7fe fbfa 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7fe fbf7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002bc6:	2018      	movs	r0, #24
 8002bc8:	f7fe fbf4 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f7fe fbf1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002bd2:	2050      	movs	r0, #80	; 0x50
 8002bd4:	f7fe fbee 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fe fbeb 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 8002bde:	200c      	movs	r0, #12
 8002be0:	f7fe fbe8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fe fbe5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8002bea:	2017      	movs	r0, #23
 8002bec:	f7fe fbe2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7fe fbdf 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 8002bf6:	2095      	movs	r0, #149	; 0x95
 8002bf8:	f7fe fbdc 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f7fe fbd9 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002c02:	20f3      	movs	r0, #243	; 0xf3
 8002c04:	f7fe fbd6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7fe fbd3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 8002c0e:	20e6      	movs	r0, #230	; 0xe6
 8002c10:	f7fe fbd0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fe fbcd 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 8002c1a:	20c5      	movs	r0, #197	; 0xc5
 8002c1c:	f7fe fbba 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8002c20:	2032      	movs	r0, #50	; 0x32
 8002c22:	f7fe fbc7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c26:	2000      	movs	r0, #0
 8002c28:	f7fe fbc4 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002c2c:	2044      	movs	r0, #68	; 0x44
 8002c2e:	f7fe fbc1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7fe fbbe 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 8002c38:	2065      	movs	r0, #101	; 0x65
 8002c3a:	f7fe fbbb 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f7fe fbb8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002c44:	2076      	movs	r0, #118	; 0x76
 8002c46:	f7fe fbb5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7fe fbb2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002c50:	2088      	movs	r0, #136	; 0x88
 8002c52:	f7fe fbaf 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f7fe fbac 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8002c5c:	20c6      	movs	r0, #198	; 0xc6
 8002c5e:	f7fe fb99 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8002c62:	2020      	movs	r0, #32
 8002c64:	f7fe fba6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f7fe fba3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8002c6e:	2017      	movs	r0, #23
 8002c70:	f7fe fba0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fe fb9d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f7fe fb9a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fe fb97 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8002c86:	20c7      	movs	r0, #199	; 0xc7
 8002c88:	f7fe fb84 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7fe fb91 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7fe fb8e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f7fe fb8b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fe fb88 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8002ca4:	20c8      	movs	r0, #200	; 0xc8
 8002ca6:	f7fe fb75 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7fe fb82 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7fe fb7f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cb6:	2000      	movs	r0, #0
 8002cb8:	f7fe fb7c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f7fe fb79 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 8002cc2:	20c9      	movs	r0, #201	; 0xc9
 8002cc4:	f7fe fb66 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f7fe fb73 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fe fb70 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	f7fe fb6d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7fe fb6a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	f7fe fb67 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fe fb64 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cec:	2000      	movs	r0, #0
 8002cee:	f7fe fb61 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7fe fb5e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7fe fb5b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f7fe fb58 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d04:	2000      	movs	r0, #0
 8002d06:	f7fe fb55 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7fe fb52 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7fe fb4f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7fe fb4c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f7fe fb49 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7fe fb46 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 8002d28:	20e0      	movs	r0, #224	; 0xe0
 8002d2a:	f7fe fb33 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8002d2e:	2016      	movs	r0, #22
 8002d30:	f7fe fb40 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7fe fb3d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002d3a:	201c      	movs	r0, #28
 8002d3c:	f7fe fb3a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d40:	2000      	movs	r0, #0
 8002d42:	f7fe fb37 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002d46:	2021      	movs	r0, #33	; 0x21
 8002d48:	f7fe fb34 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7fe fb31 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002d52:	2036      	movs	r0, #54	; 0x36
 8002d54:	f7fe fb2e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fe fb2b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 8002d5e:	2046      	movs	r0, #70	; 0x46
 8002d60:	f7fe fb28 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7fe fb25 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8002d6a:	2052      	movs	r0, #82	; 0x52
 8002d6c:	f7fe fb22 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fe fb1f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002d76:	2064      	movs	r0, #100	; 0x64
 8002d78:	f7fe fb1c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fe fb19 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8002d82:	207a      	movs	r0, #122	; 0x7a
 8002d84:	f7fe fb16 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7fe fb13 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8002d8e:	208b      	movs	r0, #139	; 0x8b
 8002d90:	f7fe fb10 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fe fb0d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002d9a:	2099      	movs	r0, #153	; 0x99
 8002d9c:	f7fe fb0a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f7fe fb07 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002da6:	20a8      	movs	r0, #168	; 0xa8
 8002da8:	f7fe fb04 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fe fb01 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8002db2:	20b9      	movs	r0, #185	; 0xb9
 8002db4:	f7fe fafe 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7fe fafb 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002dbe:	20c4      	movs	r0, #196	; 0xc4
 8002dc0:	f7fe faf8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7fe faf5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002dca:	20ca      	movs	r0, #202	; 0xca
 8002dcc:	f7fe faf2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f7fe faef 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002dd6:	20d2      	movs	r0, #210	; 0xd2
 8002dd8:	f7fe faec 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7fe fae9 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 8002de2:	20d9      	movs	r0, #217	; 0xd9
 8002de4:	f7fe fae6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002de8:	2000      	movs	r0, #0
 8002dea:	f7fe fae3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002dee:	20e0      	movs	r0, #224	; 0xe0
 8002df0:	f7fe fae0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fe fadd 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002dfa:	20f3      	movs	r0, #243	; 0xf3
 8002dfc:	f7fe fada 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fe fad7 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 8002e06:	20e1      	movs	r0, #225	; 0xe1
 8002e08:	f7fe fac4 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8002e0c:	2016      	movs	r0, #22
 8002e0e:	f7fe fad1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e12:	2000      	movs	r0, #0
 8002e14:	f7fe face 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002e18:	201c      	movs	r0, #28
 8002e1a:	f7fe facb 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e1e:	2000      	movs	r0, #0
 8002e20:	f7fe fac8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 8002e24:	2022      	movs	r0, #34	; 0x22
 8002e26:	f7fe fac5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fe fac2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002e30:	2036      	movs	r0, #54	; 0x36
 8002e32:	f7fe fabf 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e36:	2000      	movs	r0, #0
 8002e38:	f7fe fabc 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002e3c:	2045      	movs	r0, #69	; 0x45
 8002e3e:	f7fe fab9 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7fe fab6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8002e48:	2052      	movs	r0, #82	; 0x52
 8002e4a:	f7fe fab3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7fe fab0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002e54:	2064      	movs	r0, #100	; 0x64
 8002e56:	f7fe faad 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	f7fe faaa 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8002e60:	207a      	movs	r0, #122	; 0x7a
 8002e62:	f7fe faa7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7fe faa4 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8002e6c:	208b      	movs	r0, #139	; 0x8b
 8002e6e:	f7fe faa1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e72:	2000      	movs	r0, #0
 8002e74:	f7fe fa9e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002e78:	2099      	movs	r0, #153	; 0x99
 8002e7a:	f7fe fa9b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7fe fa98 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002e84:	20a8      	movs	r0, #168	; 0xa8
 8002e86:	f7fe fa95 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7fe fa92 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8002e90:	20b9      	movs	r0, #185	; 0xb9
 8002e92:	f7fe fa8f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7fe fa8c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002e9c:	20c4      	movs	r0, #196	; 0xc4
 8002e9e:	f7fe fa89 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fe fa86 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002ea8:	20ca      	movs	r0, #202	; 0xca
 8002eaa:	f7fe fa83 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f7fe fa80 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002eb4:	20d2      	movs	r0, #210	; 0xd2
 8002eb6:	f7fe fa7d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fe fa7a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 8002ec0:	20d8      	movs	r0, #216	; 0xd8
 8002ec2:	f7fe fa77 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f7fe fa74 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002ecc:	20e0      	movs	r0, #224	; 0xe0
 8002ece:	f7fe fa71 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7fe fa6e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002ed8:	20f3      	movs	r0, #243	; 0xf3
 8002eda:	f7fe fa6b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7fe fa68 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8002ee4:	20e2      	movs	r0, #226	; 0xe2
 8002ee6:	f7fe fa55 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002eea:	2005      	movs	r0, #5
 8002eec:	f7fe fa62 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f7fe fa5f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 8002ef6:	200b      	movs	r0, #11
 8002ef8:	f7fe fa5c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7fe fa59 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 8002f02:	201b      	movs	r0, #27
 8002f04:	f7fe fa56 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f7fe fa53 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8002f0e:	2034      	movs	r0, #52	; 0x34
 8002f10:	f7fe fa50 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7fe fa4d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002f1a:	2044      	movs	r0, #68	; 0x44
 8002f1c:	f7fe fa4a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7fe fa47 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 8002f26:	204f      	movs	r0, #79	; 0x4f
 8002f28:	f7fe fa44 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7fe fa41 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 8002f32:	2061      	movs	r0, #97	; 0x61
 8002f34:	f7fe fa3e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7fe fa3b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 8002f3e:	2079      	movs	r0, #121	; 0x79
 8002f40:	f7fe fa38 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f7fe fa35 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002f4a:	2088      	movs	r0, #136	; 0x88
 8002f4c:	f7fe fa32 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7fe fa2f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8002f56:	2097      	movs	r0, #151	; 0x97
 8002f58:	f7fe fa2c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fe fa29 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8002f62:	20a6      	movs	r0, #166	; 0xa6
 8002f64:	f7fe fa26 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fe fa23 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8002f6e:	20b7      	movs	r0, #183	; 0xb7
 8002f70:	f7fe fa20 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fe fa1d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8002f7a:	20c2      	movs	r0, #194	; 0xc2
 8002f7c:	f7fe fa1a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fe fa17 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8002f86:	20c7      	movs	r0, #199	; 0xc7
 8002f88:	f7fe fa14 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7fe fa11 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8002f92:	20d1      	movs	r0, #209	; 0xd1
 8002f94:	f7fe fa0e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7fe fa0b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 8002f9e:	20d6      	movs	r0, #214	; 0xd6
 8002fa0:	f7fe fa08 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7fe fa05 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002faa:	20dd      	movs	r0, #221	; 0xdd
 8002fac:	f7fe fa02 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7fe f9ff 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002fb6:	20f3      	movs	r0, #243	; 0xf3
 8002fb8:	f7fe f9fc 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7fe f9f9 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 8002fc2:	20e3      	movs	r0, #227	; 0xe3
 8002fc4:	f7fe f9e6 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002fc8:	2005      	movs	r0, #5
 8002fca:	f7fe f9f3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7fe f9f0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8002fd4:	200a      	movs	r0, #10
 8002fd6:	f7fe f9ed 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f7fe f9ea 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002fe0:	201c      	movs	r0, #28
 8002fe2:	f7fe f9e7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fe f9e4 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002fec:	2033      	movs	r0, #51	; 0x33
 8002fee:	f7fe f9e1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7fe f9de 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002ff8:	2044      	movs	r0, #68	; 0x44
 8002ffa:	f7fe f9db 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ffe:	2000      	movs	r0, #0
 8003000:	f7fe f9d8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8003004:	2050      	movs	r0, #80	; 0x50
 8003006:	f7fe f9d5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800300a:	2000      	movs	r0, #0
 800300c:	f7fe f9d2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 8003010:	2062      	movs	r0, #98	; 0x62
 8003012:	f7fe f9cf 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003016:	2000      	movs	r0, #0
 8003018:	f7fe f9cc 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 800301c:	2078      	movs	r0, #120	; 0x78
 800301e:	f7fe f9c9 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003022:	2000      	movs	r0, #0
 8003024:	f7fe f9c6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003028:	2088      	movs	r0, #136	; 0x88
 800302a:	f7fe f9c3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800302e:	2000      	movs	r0, #0
 8003030:	f7fe f9c0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8003034:	2097      	movs	r0, #151	; 0x97
 8003036:	f7fe f9bd 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800303a:	2000      	movs	r0, #0
 800303c:	f7fe f9ba 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8003040:	20a6      	movs	r0, #166	; 0xa6
 8003042:	f7fe f9b7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003046:	2000      	movs	r0, #0
 8003048:	f7fe f9b4 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 800304c:	20b7      	movs	r0, #183	; 0xb7
 800304e:	f7fe f9b1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003052:	2000      	movs	r0, #0
 8003054:	f7fe f9ae 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8003058:	20c2      	movs	r0, #194	; 0xc2
 800305a:	f7fe f9ab 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800305e:	2000      	movs	r0, #0
 8003060:	f7fe f9a8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8003064:	20c7      	movs	r0, #199	; 0xc7
 8003066:	f7fe f9a5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800306a:	2000      	movs	r0, #0
 800306c:	f7fe f9a2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8003070:	20d1      	movs	r0, #209	; 0xd1
 8003072:	f7fe f99f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003076:	2000      	movs	r0, #0
 8003078:	f7fe f99c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 800307c:	20d5      	movs	r0, #213	; 0xd5
 800307e:	f7fe f999 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003082:	2000      	movs	r0, #0
 8003084:	f7fe f996 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8003088:	20dd      	movs	r0, #221	; 0xdd
 800308a:	f7fe f993 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800308e:	2000      	movs	r0, #0
 8003090:	f7fe f990 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003094:	20f3      	movs	r0, #243	; 0xf3
 8003096:	f7fe f98d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800309a:	2000      	movs	r0, #0
 800309c:	f7fe f98a 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 80030a0:	20e4      	movs	r0, #228	; 0xe4
 80030a2:	f7fe f977 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f7fe f984 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030ac:	2000      	movs	r0, #0
 80030ae:	f7fe f981 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 80030b2:	2001      	movs	r0, #1
 80030b4:	f7fe f97e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030b8:	2000      	movs	r0, #0
 80030ba:	f7fe f97b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 80030be:	2002      	movs	r0, #2
 80030c0:	f7fe f978 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030c4:	2000      	movs	r0, #0
 80030c6:	f7fe f975 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 80030ca:	202a      	movs	r0, #42	; 0x2a
 80030cc:	f7fe f972 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030d0:	2000      	movs	r0, #0
 80030d2:	f7fe f96f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80030d6:	203c      	movs	r0, #60	; 0x3c
 80030d8:	f7fe f96c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030dc:	2000      	movs	r0, #0
 80030de:	f7fe f969 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 80030e2:	204b      	movs	r0, #75	; 0x4b
 80030e4:	f7fe f966 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030e8:	2000      	movs	r0, #0
 80030ea:	f7fe f963 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 80030ee:	205d      	movs	r0, #93	; 0x5d
 80030f0:	f7fe f960 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030f4:	2000      	movs	r0, #0
 80030f6:	f7fe f95d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 80030fa:	2074      	movs	r0, #116	; 0x74
 80030fc:	f7fe f95a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003100:	2000      	movs	r0, #0
 8003102:	f7fe f957 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8003106:	2084      	movs	r0, #132	; 0x84
 8003108:	f7fe f954 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800310c:	2000      	movs	r0, #0
 800310e:	f7fe f951 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8003112:	2093      	movs	r0, #147	; 0x93
 8003114:	f7fe f94e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003118:	2000      	movs	r0, #0
 800311a:	f7fe f94b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 800311e:	20a2      	movs	r0, #162	; 0xa2
 8003120:	f7fe f948 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003124:	2000      	movs	r0, #0
 8003126:	f7fe f945 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 800312a:	20b3      	movs	r0, #179	; 0xb3
 800312c:	f7fe f942 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003130:	2000      	movs	r0, #0
 8003132:	f7fe f93f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8003136:	20be      	movs	r0, #190	; 0xbe
 8003138:	f7fe f93c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800313c:	2000      	movs	r0, #0
 800313e:	f7fe f939 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8003142:	20c4      	movs	r0, #196	; 0xc4
 8003144:	f7fe f936 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003148:	2000      	movs	r0, #0
 800314a:	f7fe f933 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 800314e:	20cd      	movs	r0, #205	; 0xcd
 8003150:	f7fe f930 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003154:	2000      	movs	r0, #0
 8003156:	f7fe f92d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 800315a:	20d3      	movs	r0, #211	; 0xd3
 800315c:	f7fe f92a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003160:	2000      	movs	r0, #0
 8003162:	f7fe f927 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8003166:	20dd      	movs	r0, #221	; 0xdd
 8003168:	f7fe f924 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800316c:	2000      	movs	r0, #0
 800316e:	f7fe f921 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003172:	20f3      	movs	r0, #243	; 0xf3
 8003174:	f7fe f91e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003178:	2000      	movs	r0, #0
 800317a:	f7fe f91b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 800317e:	20e5      	movs	r0, #229	; 0xe5
 8003180:	f7fe f908 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003184:	2000      	movs	r0, #0
 8003186:	f7fe f915 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800318a:	2000      	movs	r0, #0
 800318c:	f7fe f912 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003190:	2000      	movs	r0, #0
 8003192:	f7fe f90f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003196:	2000      	movs	r0, #0
 8003198:	f7fe f90c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800319c:	2002      	movs	r0, #2
 800319e:	f7fe f909 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031a2:	2000      	movs	r0, #0
 80031a4:	f7fe f906 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80031a8:	2029      	movs	r0, #41	; 0x29
 80031aa:	f7fe f903 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f7fe f900 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80031b4:	203c      	movs	r0, #60	; 0x3c
 80031b6:	f7fe f8fd 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7fe f8fa 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 80031c0:	204b      	movs	r0, #75	; 0x4b
 80031c2:	f7fe f8f7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031c6:	2000      	movs	r0, #0
 80031c8:	f7fe f8f4 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 80031cc:	205d      	movs	r0, #93	; 0x5d
 80031ce:	f7fe f8f1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031d2:	2000      	movs	r0, #0
 80031d4:	f7fe f8ee 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 80031d8:	2074      	movs	r0, #116	; 0x74
 80031da:	f7fe f8eb 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031de:	2000      	movs	r0, #0
 80031e0:	f7fe f8e8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 80031e4:	2084      	movs	r0, #132	; 0x84
 80031e6:	f7fe f8e5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031ea:	2000      	movs	r0, #0
 80031ec:	f7fe f8e2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 80031f0:	2093      	movs	r0, #147	; 0x93
 80031f2:	f7fe f8df 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031f6:	2000      	movs	r0, #0
 80031f8:	f7fe f8dc 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80031fc:	20a2      	movs	r0, #162	; 0xa2
 80031fe:	f7fe f8d9 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003202:	2000      	movs	r0, #0
 8003204:	f7fe f8d6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8003208:	20b3      	movs	r0, #179	; 0xb3
 800320a:	f7fe f8d3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800320e:	2000      	movs	r0, #0
 8003210:	f7fe f8d0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8003214:	20be      	movs	r0, #190	; 0xbe
 8003216:	f7fe f8cd 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800321a:	2000      	movs	r0, #0
 800321c:	f7fe f8ca 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8003220:	20c4      	movs	r0, #196	; 0xc4
 8003222:	f7fe f8c7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003226:	2000      	movs	r0, #0
 8003228:	f7fe f8c4 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 800322c:	20cd      	movs	r0, #205	; 0xcd
 800322e:	f7fe f8c1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003232:	2000      	movs	r0, #0
 8003234:	f7fe f8be 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8003238:	20d3      	movs	r0, #211	; 0xd3
 800323a:	f7fe f8bb 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800323e:	2000      	movs	r0, #0
 8003240:	f7fe f8b8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8003244:	20dc      	movs	r0, #220	; 0xdc
 8003246:	f7fe f8b5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800324a:	2000      	movs	r0, #0
 800324c:	f7fe f8b2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003250:	20f3      	movs	r0, #243	; 0xf3
 8003252:	f7fe f8af 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003256:	2000      	movs	r0, #0
 8003258:	f7fe f8ac 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 800325c:	20e6      	movs	r0, #230	; 0xe6
 800325e:	f7fe f899 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 8003262:	2011      	movs	r0, #17
 8003264:	f7fe f8a6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003268:	2000      	movs	r0, #0
 800326a:	f7fe f8a3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 800326e:	2034      	movs	r0, #52	; 0x34
 8003270:	f7fe f8a0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003274:	2000      	movs	r0, #0
 8003276:	f7fe f89d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 800327a:	2056      	movs	r0, #86	; 0x56
 800327c:	f7fe f89a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003280:	2000      	movs	r0, #0
 8003282:	f7fe f897 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8003286:	2076      	movs	r0, #118	; 0x76
 8003288:	f7fe f894 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800328c:	2000      	movs	r0, #0
 800328e:	f7fe f891 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8003292:	2077      	movs	r0, #119	; 0x77
 8003294:	f7fe f88e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003298:	2000      	movs	r0, #0
 800329a:	f7fe f88b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800329e:	2066      	movs	r0, #102	; 0x66
 80032a0:	f7fe f888 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032a4:	2000      	movs	r0, #0
 80032a6:	f7fe f885 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80032aa:	2088      	movs	r0, #136	; 0x88
 80032ac:	f7fe f882 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032b0:	2000      	movs	r0, #0
 80032b2:	f7fe f87f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80032b6:	2099      	movs	r0, #153	; 0x99
 80032b8:	f7fe f87c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032bc:	2000      	movs	r0, #0
 80032be:	f7fe f879 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80032c2:	20bb      	movs	r0, #187	; 0xbb
 80032c4:	f7fe f876 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032c8:	2000      	movs	r0, #0
 80032ca:	f7fe f873 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80032ce:	2099      	movs	r0, #153	; 0x99
 80032d0:	f7fe f870 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7fe f86d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80032da:	2066      	movs	r0, #102	; 0x66
 80032dc:	f7fe f86a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7fe f867 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80032e6:	2055      	movs	r0, #85	; 0x55
 80032e8:	f7fe f864 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f7fe f861 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80032f2:	2055      	movs	r0, #85	; 0x55
 80032f4:	f7fe f85e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032f8:	2000      	movs	r0, #0
 80032fa:	f7fe f85b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80032fe:	2045      	movs	r0, #69	; 0x45
 8003300:	f7fe f858 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003304:	2000      	movs	r0, #0
 8003306:	f7fe f855 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 800330a:	2043      	movs	r0, #67	; 0x43
 800330c:	f7fe f852 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003310:	2000      	movs	r0, #0
 8003312:	f7fe f84f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003316:	2044      	movs	r0, #68	; 0x44
 8003318:	f7fe f84c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800331c:	2000      	movs	r0, #0
 800331e:	f7fe f849 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 8003322:	20e7      	movs	r0, #231	; 0xe7
 8003324:	f7fe f836 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8003328:	2032      	movs	r0, #50	; 0x32
 800332a:	f7fe f843 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800332e:	2000      	movs	r0, #0
 8003330:	f7fe f840 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8003334:	2055      	movs	r0, #85	; 0x55
 8003336:	f7fe f83d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800333a:	2000      	movs	r0, #0
 800333c:	f7fe f83a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8003340:	2076      	movs	r0, #118	; 0x76
 8003342:	f7fe f837 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003346:	2000      	movs	r0, #0
 8003348:	f7fe f834 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800334c:	2066      	movs	r0, #102	; 0x66
 800334e:	f7fe f831 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003352:	2000      	movs	r0, #0
 8003354:	f7fe f82e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8003358:	2067      	movs	r0, #103	; 0x67
 800335a:	f7fe f82b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800335e:	2000      	movs	r0, #0
 8003360:	f7fe f828 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8003364:	2067      	movs	r0, #103	; 0x67
 8003366:	f7fe f825 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800336a:	2000      	movs	r0, #0
 800336c:	f7fe f822 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8003370:	2087      	movs	r0, #135	; 0x87
 8003372:	f7fe f81f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003376:	2000      	movs	r0, #0
 8003378:	f7fe f81c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800337c:	2099      	movs	r0, #153	; 0x99
 800337e:	f7fe f819 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003382:	2000      	movs	r0, #0
 8003384:	f7fe f816 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8003388:	20bb      	movs	r0, #187	; 0xbb
 800338a:	f7fe f813 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800338e:	2000      	movs	r0, #0
 8003390:	f7fe f810 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003394:	2099      	movs	r0, #153	; 0x99
 8003396:	f7fe f80d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800339a:	2000      	movs	r0, #0
 800339c:	f7fe f80a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 80033a0:	2077      	movs	r0, #119	; 0x77
 80033a2:	f7fe f807 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f7fe f804 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80033ac:	2044      	movs	r0, #68	; 0x44
 80033ae:	f7fe f801 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033b2:	2000      	movs	r0, #0
 80033b4:	f7fd fffe 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 80033b8:	2056      	movs	r0, #86	; 0x56
 80033ba:	f7fd fffb 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033be:	2000      	movs	r0, #0
 80033c0:	f7fd fff8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 80033c4:	2023      	movs	r0, #35	; 0x23
 80033c6:	f7fd fff5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f7fd fff2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 80033d0:	2033      	movs	r0, #51	; 0x33
 80033d2:	f7fd ffef 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fd ffec 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80033dc:	2045      	movs	r0, #69	; 0x45
 80033de:	f7fd ffe9 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fd ffe6 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 80033e8:	20e8      	movs	r0, #232	; 0xe8
 80033ea:	f7fd ffd3 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80033ee:	2000      	movs	r0, #0
 80033f0:	f7fd ffe0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033f4:	2000      	movs	r0, #0
 80033f6:	f7fd ffdd 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80033fa:	2099      	movs	r0, #153	; 0x99
 80033fc:	f7fd ffda 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003400:	2000      	movs	r0, #0
 8003402:	f7fd ffd7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8003406:	2087      	movs	r0, #135	; 0x87
 8003408:	f7fd ffd4 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800340c:	2000      	movs	r0, #0
 800340e:	f7fd ffd1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003412:	2088      	movs	r0, #136	; 0x88
 8003414:	f7fd ffce 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003418:	2000      	movs	r0, #0
 800341a:	f7fd ffcb 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 800341e:	2077      	movs	r0, #119	; 0x77
 8003420:	f7fd ffc8 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003424:	2000      	movs	r0, #0
 8003426:	f7fd ffc5 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800342a:	2066      	movs	r0, #102	; 0x66
 800342c:	f7fd ffc2 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003430:	2000      	movs	r0, #0
 8003432:	f7fd ffbf 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003436:	2088      	movs	r0, #136	; 0x88
 8003438:	f7fd ffbc 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800343c:	2000      	movs	r0, #0
 800343e:	f7fd ffb9 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 8003442:	20aa      	movs	r0, #170	; 0xaa
 8003444:	f7fd ffb6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003448:	2000      	movs	r0, #0
 800344a:	f7fd ffb3 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 800344e:	20bb      	movs	r0, #187	; 0xbb
 8003450:	f7fd ffb0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003454:	2000      	movs	r0, #0
 8003456:	f7fd ffad 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800345a:	2099      	movs	r0, #153	; 0x99
 800345c:	f7fd ffaa 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003460:	2000      	movs	r0, #0
 8003462:	f7fd ffa7 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8003466:	2066      	movs	r0, #102	; 0x66
 8003468:	f7fd ffa4 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800346c:	2000      	movs	r0, #0
 800346e:	f7fd ffa1 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8003472:	2055      	movs	r0, #85	; 0x55
 8003474:	f7fd ff9e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003478:	2000      	movs	r0, #0
 800347a:	f7fd ff9b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800347e:	2055      	movs	r0, #85	; 0x55
 8003480:	f7fd ff98 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003484:	2000      	movs	r0, #0
 8003486:	f7fd ff95 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800348a:	2044      	movs	r0, #68	; 0x44
 800348c:	f7fd ff92 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003490:	2000      	movs	r0, #0
 8003492:	f7fd ff8f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003496:	2044      	movs	r0, #68	; 0x44
 8003498:	f7fd ff8c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800349c:	2000      	movs	r0, #0
 800349e:	f7fd ff89 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80034a2:	2055      	movs	r0, #85	; 0x55
 80034a4:	f7fd ff86 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7fd ff83 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 80034ae:	20e9      	movs	r0, #233	; 0xe9
 80034b0:	f7fd ff70 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 80034b4:	20aa      	movs	r0, #170	; 0xaa
 80034b6:	f7fd ff7d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034ba:	2000      	movs	r0, #0
 80034bc:	f7fd ff7a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034c0:	2000      	movs	r0, #0
 80034c2:	f7fd ff77 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034c6:	2000      	movs	r0, #0
 80034c8:	f7fd ff74 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7fd ff61 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 80034d2:	20aa      	movs	r0, #170	; 0xaa
 80034d4:	f7fd ff6e 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 80034d8:	20cf      	movs	r0, #207	; 0xcf
 80034da:	f7fd ff5b 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80034de:	2000      	movs	r0, #0
 80034e0:	f7fd ff68 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034e4:	2000      	movs	r0, #0
 80034e6:	f7fd ff65 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f7fd ff62 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034f0:	2000      	movs	r0, #0
 80034f2:	f7fd ff5f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7fd ff5c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034fc:	2000      	movs	r0, #0
 80034fe:	f7fd ff59 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003502:	2000      	movs	r0, #0
 8003504:	f7fd ff56 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003508:	2000      	movs	r0, #0
 800350a:	f7fd ff53 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800350e:	2000      	movs	r0, #0
 8003510:	f7fd ff50 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003514:	2000      	movs	r0, #0
 8003516:	f7fd ff4d 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800351a:	2000      	movs	r0, #0
 800351c:	f7fd ff4a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003520:	2000      	movs	r0, #0
 8003522:	f7fd ff47 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003526:	2000      	movs	r0, #0
 8003528:	f7fd ff44 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800352c:	2000      	movs	r0, #0
 800352e:	f7fd ff41 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003532:	2000      	movs	r0, #0
 8003534:	f7fd ff3e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003538:	2000      	movs	r0, #0
 800353a:	f7fd ff3b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800353e:	2000      	movs	r0, #0
 8003540:	f7fd ff38 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 8003544:	20f0      	movs	r0, #240	; 0xf0
 8003546:	f7fd ff25 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800354a:	2000      	movs	r0, #0
 800354c:	f7fd ff32 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8003550:	2050      	movs	r0, #80	; 0x50
 8003552:	f7fd ff2f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003556:	2000      	movs	r0, #0
 8003558:	f7fd ff2c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800355c:	2000      	movs	r0, #0
 800355e:	f7fd ff29 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003562:	2000      	movs	r0, #0
 8003564:	f7fd ff26 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8003568:	20f3      	movs	r0, #243	; 0xf3
 800356a:	f7fd ff13 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800356e:	2000      	movs	r0, #0
 8003570:	f7fd ff20 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 8003574:	20f9      	movs	r0, #249	; 0xf9
 8003576:	f7fd ff0d 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 800357a:	2006      	movs	r0, #6
 800357c:	f7fd ff1a 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8003580:	2010      	movs	r0, #16
 8003582:	f7fd ff17 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003586:	2029      	movs	r0, #41	; 0x29
 8003588:	f7fd ff14 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800358c:	2000      	movs	r0, #0
 800358e:	f7fd ff11 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 8003592:	203a      	movs	r0, #58	; 0x3a
 8003594:	f7fd fefe 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8003598:	2055      	movs	r0, #85	; 0x55
 800359a:	f7fd ff0b 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 800359e:	2011      	movs	r0, #17
 80035a0:	f7fd fef8 	bl	8001394 <LCD_WR_REG>
		HAL_Delay(100);
 80035a4:	2064      	movs	r0, #100	; 0x64
 80035a6:	f002 fb6d 	bl	8005c84 <HAL_Delay>
		LCD_WR_REG(0x29);
 80035aa:	2029      	movs	r0, #41	; 0x29
 80035ac:	f7fd fef2 	bl	8001394 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 80035b0:	2035      	movs	r0, #53	; 0x35
 80035b2:	f7fd feef 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7fd fefc 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 80035bc:	2051      	movs	r0, #81	; 0x51
 80035be:	f7fd fee9 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 80035c2:	20ff      	movs	r0, #255	; 0xff
 80035c4:	f7fd fef6 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 80035c8:	2053      	movs	r0, #83	; 0x53
 80035ca:	f7fd fee3 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 80035ce:	202c      	movs	r0, #44	; 0x2c
 80035d0:	f7fd fef0 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 80035d4:	2055      	movs	r0, #85	; 0x55
 80035d6:	f7fd fedd 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 80035da:	2082      	movs	r0, #130	; 0x82
 80035dc:	f7fd feea 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80035e0:	202c      	movs	r0, #44	; 0x2c
 80035e2:	f7fd fed7 	bl	8001394 <LCD_WR_REG>
 80035e6:	f002 b8e8 	b.w	80057ba <LCD_Init+0x3852>
	}else if(lcddev.id==0x5510)
 80035ea:	4b04      	ldr	r3, [pc, #16]	; (80035fc <LCD_Init+0x1694>)
 80035ec:	889b      	ldrh	r3, [r3, #4]
 80035ee:	f245 5210 	movw	r2, #21776	; 0x5510
 80035f2:	4293      	cmp	r3, r2
 80035f4:	f040 8782 	bne.w	80044fc <LCD_Init+0x2594>
 80035f8:	e002      	b.n	8003600 <LCD_Init+0x1698>
 80035fa:	bf00      	nop
 80035fc:	2000022c 	.word	0x2000022c
	{
		LCD_WriteReg(0xF000,0x55);
 8003600:	2155      	movs	r1, #85	; 0x55
 8003602:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003606:	f7fd fef3 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 800360a:	21aa      	movs	r1, #170	; 0xaa
 800360c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003610:	f7fd feee 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8003614:	2152      	movs	r1, #82	; 0x52
 8003616:	f24f 0002 	movw	r0, #61442	; 0xf002
 800361a:	f7fd fee9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 800361e:	2108      	movs	r1, #8
 8003620:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003624:	f7fd fee4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 8003628:	2101      	movs	r1, #1
 800362a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800362e:	f7fd fedf 	bl	80013f0 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 8003632:	210d      	movs	r1, #13
 8003634:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8003638:	f7fd feda 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 800363c:	210d      	movs	r1, #13
 800363e:	f24b 0001 	movw	r0, #45057	; 0xb001
 8003642:	f7fd fed5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 8003646:	210d      	movs	r1, #13
 8003648:	f24b 0002 	movw	r0, #45058	; 0xb002
 800364c:	f7fd fed0 	bl	80013f0 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 8003650:	2134      	movs	r1, #52	; 0x34
 8003652:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8003656:	f7fd fecb 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 800365a:	2134      	movs	r1, #52	; 0x34
 800365c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003660:	f7fd fec6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8003664:	2134      	movs	r1, #52	; 0x34
 8003666:	f24b 6002 	movw	r0, #46594	; 0xb602
 800366a:	f7fd fec1 	bl	80013f0 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 800366e:	210d      	movs	r1, #13
 8003670:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003674:	f7fd febc 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8003678:	210d      	movs	r1, #13
 800367a:	f24b 1001 	movw	r0, #45313	; 0xb101
 800367e:	f7fd feb7 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 8003682:	210d      	movs	r1, #13
 8003684:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003688:	f7fd feb2 	bl	80013f0 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 800368c:	2134      	movs	r1, #52	; 0x34
 800368e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003692:	f7fd fead 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8003696:	2134      	movs	r1, #52	; 0x34
 8003698:	f24b 7001 	movw	r0, #46849	; 0xb701
 800369c:	f7fd fea8 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 80036a0:	2134      	movs	r1, #52	; 0x34
 80036a2:	f24b 7002 	movw	r0, #46850	; 0xb702
 80036a6:	f7fd fea3 	bl	80013f0 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 80036aa:	2100      	movs	r1, #0
 80036ac:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80036b0:	f7fd fe9e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 80036b4:	2100      	movs	r1, #0
 80036b6:	f24b 2001 	movw	r0, #45569	; 0xb201
 80036ba:	f7fd fe99 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 80036be:	2100      	movs	r1, #0
 80036c0:	f24b 2002 	movw	r0, #45570	; 0xb202
 80036c4:	f7fd fe94 	bl	80013f0 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 80036c8:	2124      	movs	r1, #36	; 0x24
 80036ca:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80036ce:	f7fd fe8f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 80036d2:	2124      	movs	r1, #36	; 0x24
 80036d4:	f64b 0001 	movw	r0, #47105	; 0xb801
 80036d8:	f7fd fe8a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 80036dc:	2124      	movs	r1, #36	; 0x24
 80036de:	f64b 0002 	movw	r0, #47106	; 0xb802
 80036e2:	f7fd fe85 	bl	80013f0 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 80036e6:	2101      	movs	r1, #1
 80036e8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 80036ec:	f7fd fe80 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 80036f0:	210f      	movs	r1, #15
 80036f2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 80036f6:	f7fd fe7b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 80036fa:	210f      	movs	r1, #15
 80036fc:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003700:	f7fd fe76 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 8003704:	210f      	movs	r1, #15
 8003706:	f24b 3002 	movw	r0, #45826	; 0xb302
 800370a:	f7fd fe71 	bl	80013f0 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 800370e:	2134      	movs	r1, #52	; 0x34
 8003710:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003714:	f7fd fe6c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 8003718:	2134      	movs	r1, #52	; 0x34
 800371a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800371e:	f7fd fe67 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 8003722:	2134      	movs	r1, #52	; 0x34
 8003724:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003728:	f7fd fe62 	bl	80013f0 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 800372c:	2108      	movs	r1, #8
 800372e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8003732:	f7fd fe5d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 8003736:	2108      	movs	r1, #8
 8003738:	f24b 5001 	movw	r0, #46337	; 0xb501
 800373c:	f7fd fe58 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 8003740:	2108      	movs	r1, #8
 8003742:	f24b 5002 	movw	r0, #46338	; 0xb502
 8003746:	f7fd fe53 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 800374a:	2103      	movs	r1, #3
 800374c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8003750:	f7fd fe4e 	bl	80013f0 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8003754:	2124      	movs	r1, #36	; 0x24
 8003756:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 800375a:	f7fd fe49 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 800375e:	2124      	movs	r1, #36	; 0x24
 8003760:	f64b 2001 	movw	r0, #47617	; 0xba01
 8003764:	f7fd fe44 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8003768:	2124      	movs	r1, #36	; 0x24
 800376a:	f64b 2002 	movw	r0, #47618	; 0xba02
 800376e:	f7fd fe3f 	bl	80013f0 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 8003772:	2100      	movs	r1, #0
 8003774:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003778:	f7fd fe3a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 800377c:	2178      	movs	r1, #120	; 0x78
 800377e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003782:	f7fd fe35 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003786:	2100      	movs	r1, #0
 8003788:	f64b 4002 	movw	r0, #48130	; 0xbc02
 800378c:	f7fd fe30 	bl	80013f0 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8003790:	2100      	movs	r1, #0
 8003792:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003796:	f7fd fe2b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 800379a:	2178      	movs	r1, #120	; 0x78
 800379c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80037a0:	f7fd fe26 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 80037a4:	2100      	movs	r1, #0
 80037a6:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80037aa:	f7fd fe21 	bl	80013f0 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 80037ae:	2100      	movs	r1, #0
 80037b0:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80037b4:	f7fd fe1c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 80037b8:	2164      	movs	r1, #100	; 0x64
 80037ba:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80037be:	f7fd fe17 	bl	80013f0 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 80037c2:	2100      	movs	r1, #0
 80037c4:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80037c8:	f7fd fe12 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 80037cc:	2133      	movs	r1, #51	; 0x33
 80037ce:	f24d 1001 	movw	r0, #53505	; 0xd101
 80037d2:	f7fd fe0d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 80037d6:	2100      	movs	r1, #0
 80037d8:	f24d 1002 	movw	r0, #53506	; 0xd102
 80037dc:	f7fd fe08 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 80037e0:	2134      	movs	r1, #52	; 0x34
 80037e2:	f24d 1003 	movw	r0, #53507	; 0xd103
 80037e6:	f7fd fe03 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 80037ea:	2100      	movs	r1, #0
 80037ec:	f24d 1004 	movw	r0, #53508	; 0xd104
 80037f0:	f7fd fdfe 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 80037f4:	213a      	movs	r1, #58	; 0x3a
 80037f6:	f24d 1005 	movw	r0, #53509	; 0xd105
 80037fa:	f7fd fdf9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 80037fe:	2100      	movs	r1, #0
 8003800:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003804:	f7fd fdf4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 8003808:	214a      	movs	r1, #74	; 0x4a
 800380a:	f24d 1007 	movw	r0, #53511	; 0xd107
 800380e:	f7fd fdef 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 8003812:	2100      	movs	r1, #0
 8003814:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003818:	f7fd fdea 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 800381c:	215c      	movs	r1, #92	; 0x5c
 800381e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8003822:	f7fd fde5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 8003826:	2100      	movs	r1, #0
 8003828:	f24d 100a 	movw	r0, #53514	; 0xd10a
 800382c:	f7fd fde0 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 8003830:	2181      	movs	r1, #129	; 0x81
 8003832:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8003836:	f7fd fddb 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 800383a:	2100      	movs	r1, #0
 800383c:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003840:	f7fd fdd6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 8003844:	21a6      	movs	r1, #166	; 0xa6
 8003846:	f24d 100d 	movw	r0, #53517	; 0xd10d
 800384a:	f7fd fdd1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 800384e:	2100      	movs	r1, #0
 8003850:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003854:	f7fd fdcc 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8003858:	21e5      	movs	r1, #229	; 0xe5
 800385a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 800385e:	f7fd fdc7 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 8003862:	2101      	movs	r1, #1
 8003864:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003868:	f7fd fdc2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 800386c:	2113      	movs	r1, #19
 800386e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8003872:	f7fd fdbd 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8003876:	2101      	movs	r1, #1
 8003878:	f24d 1012 	movw	r0, #53522	; 0xd112
 800387c:	f7fd fdb8 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8003880:	2154      	movs	r1, #84	; 0x54
 8003882:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003886:	f7fd fdb3 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 800388a:	2101      	movs	r1, #1
 800388c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003890:	f7fd fdae 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8003894:	2182      	movs	r1, #130	; 0x82
 8003896:	f24d 1015 	movw	r0, #53525	; 0xd115
 800389a:	f7fd fda9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 800389e:	2101      	movs	r1, #1
 80038a0:	f24d 1016 	movw	r0, #53526	; 0xd116
 80038a4:	f7fd fda4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 80038a8:	21ca      	movs	r1, #202	; 0xca
 80038aa:	f24d 1017 	movw	r0, #53527	; 0xd117
 80038ae:	f7fd fd9f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 80038b2:	2102      	movs	r1, #2
 80038b4:	f24d 1018 	movw	r0, #53528	; 0xd118
 80038b8:	f7fd fd9a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 80038bc:	2100      	movs	r1, #0
 80038be:	f24d 1019 	movw	r0, #53529	; 0xd119
 80038c2:	f7fd fd95 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 80038c6:	2102      	movs	r1, #2
 80038c8:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80038cc:	f7fd fd90 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 80038d0:	2101      	movs	r1, #1
 80038d2:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80038d6:	f7fd fd8b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 80038da:	2102      	movs	r1, #2
 80038dc:	f24d 101c 	movw	r0, #53532	; 0xd11c
 80038e0:	f7fd fd86 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 80038e4:	2134      	movs	r1, #52	; 0x34
 80038e6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 80038ea:	f7fd fd81 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 80038ee:	2102      	movs	r1, #2
 80038f0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 80038f4:	f7fd fd7c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 80038f8:	2167      	movs	r1, #103	; 0x67
 80038fa:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80038fe:	f7fd fd77 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 8003902:	2102      	movs	r1, #2
 8003904:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003908:	f7fd fd72 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 800390c:	2184      	movs	r1, #132	; 0x84
 800390e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003912:	f7fd fd6d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 8003916:	2102      	movs	r1, #2
 8003918:	f24d 1022 	movw	r0, #53538	; 0xd122
 800391c:	f7fd fd68 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 8003920:	21a4      	movs	r1, #164	; 0xa4
 8003922:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003926:	f7fd fd63 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 800392a:	2102      	movs	r1, #2
 800392c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003930:	f7fd fd5e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 8003934:	21b7      	movs	r1, #183	; 0xb7
 8003936:	f24d 1025 	movw	r0, #53541	; 0xd125
 800393a:	f7fd fd59 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 800393e:	2102      	movs	r1, #2
 8003940:	f24d 1026 	movw	r0, #53542	; 0xd126
 8003944:	f7fd fd54 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 8003948:	21cf      	movs	r1, #207	; 0xcf
 800394a:	f24d 1027 	movw	r0, #53543	; 0xd127
 800394e:	f7fd fd4f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 8003952:	2102      	movs	r1, #2
 8003954:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003958:	f7fd fd4a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 800395c:	21de      	movs	r1, #222	; 0xde
 800395e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003962:	f7fd fd45 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8003966:	2102      	movs	r1, #2
 8003968:	f24d 102a 	movw	r0, #53546	; 0xd12a
 800396c:	f7fd fd40 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8003970:	21f2      	movs	r1, #242	; 0xf2
 8003972:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003976:	f7fd fd3b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 800397a:	2102      	movs	r1, #2
 800397c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003980:	f7fd fd36 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8003984:	21fe      	movs	r1, #254	; 0xfe
 8003986:	f24d 102d 	movw	r0, #53549	; 0xd12d
 800398a:	f7fd fd31 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 800398e:	2103      	movs	r1, #3
 8003990:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003994:	f7fd fd2c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8003998:	2110      	movs	r1, #16
 800399a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800399e:	f7fd fd27 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 80039a2:	2103      	movs	r1, #3
 80039a4:	f24d 1030 	movw	r0, #53552	; 0xd130
 80039a8:	f7fd fd22 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 80039ac:	2133      	movs	r1, #51	; 0x33
 80039ae:	f24d 1031 	movw	r0, #53553	; 0xd131
 80039b2:	f7fd fd1d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 80039b6:	2103      	movs	r1, #3
 80039b8:	f24d 1032 	movw	r0, #53554	; 0xd132
 80039bc:	f7fd fd18 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 80039c0:	216d      	movs	r1, #109	; 0x6d
 80039c2:	f24d 1033 	movw	r0, #53555	; 0xd133
 80039c6:	f7fd fd13 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 80039ca:	2100      	movs	r1, #0
 80039cc:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80039d0:	f7fd fd0e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 80039d4:	2133      	movs	r1, #51	; 0x33
 80039d6:	f24d 2001 	movw	r0, #53761	; 0xd201
 80039da:	f7fd fd09 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 80039de:	2100      	movs	r1, #0
 80039e0:	f24d 2002 	movw	r0, #53762	; 0xd202
 80039e4:	f7fd fd04 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 80039e8:	2134      	movs	r1, #52	; 0x34
 80039ea:	f24d 2003 	movw	r0, #53763	; 0xd203
 80039ee:	f7fd fcff 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 80039f2:	2100      	movs	r1, #0
 80039f4:	f24d 2004 	movw	r0, #53764	; 0xd204
 80039f8:	f7fd fcfa 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 80039fc:	213a      	movs	r1, #58	; 0x3a
 80039fe:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003a02:	f7fd fcf5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 8003a06:	2100      	movs	r1, #0
 8003a08:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003a0c:	f7fd fcf0 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 8003a10:	214a      	movs	r1, #74	; 0x4a
 8003a12:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003a16:	f7fd fceb 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003a20:	f7fd fce6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 8003a24:	215c      	movs	r1, #92	; 0x5c
 8003a26:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003a2a:	f7fd fce1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 8003a2e:	2100      	movs	r1, #0
 8003a30:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003a34:	f7fd fcdc 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 8003a38:	2181      	movs	r1, #129	; 0x81
 8003a3a:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003a3e:	f7fd fcd7 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 8003a42:	2100      	movs	r1, #0
 8003a44:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003a48:	f7fd fcd2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 8003a4c:	21a6      	movs	r1, #166	; 0xa6
 8003a4e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003a52:	f7fd fccd 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8003a56:	2100      	movs	r1, #0
 8003a58:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003a5c:	f7fd fcc8 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 8003a60:	21e5      	movs	r1, #229	; 0xe5
 8003a62:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003a66:	f7fd fcc3 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003a70:	f7fd fcbe 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8003a74:	2113      	movs	r1, #19
 8003a76:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003a7a:	f7fd fcb9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 8003a7e:	2101      	movs	r1, #1
 8003a80:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003a84:	f7fd fcb4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8003a88:	2154      	movs	r1, #84	; 0x54
 8003a8a:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003a8e:	f7fd fcaf 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8003a92:	2101      	movs	r1, #1
 8003a94:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003a98:	f7fd fcaa 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8003a9c:	2182      	movs	r1, #130	; 0x82
 8003a9e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003aa2:	f7fd fca5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003aac:	f7fd fca0 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 8003ab0:	21ca      	movs	r1, #202	; 0xca
 8003ab2:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003ab6:	f7fd fc9b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 8003aba:	2102      	movs	r1, #2
 8003abc:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003ac0:	f7fd fc96 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003aca:	f7fd fc91 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 8003ace:	2102      	movs	r1, #2
 8003ad0:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003ad4:	f7fd fc8c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8003ad8:	2101      	movs	r1, #1
 8003ada:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003ade:	f7fd fc87 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003ae8:	f7fd fc82 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8003aec:	2134      	movs	r1, #52	; 0x34
 8003aee:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003af2:	f7fd fc7d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 8003af6:	2102      	movs	r1, #2
 8003af8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003afc:	f7fd fc78 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 8003b00:	2167      	movs	r1, #103	; 0x67
 8003b02:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003b06:	f7fd fc73 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003b10:	f7fd fc6e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 8003b14:	2184      	movs	r1, #132	; 0x84
 8003b16:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003b1a:	f7fd fc69 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 8003b1e:	2102      	movs	r1, #2
 8003b20:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003b24:	f7fd fc64 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 8003b28:	21a4      	movs	r1, #164	; 0xa4
 8003b2a:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003b2e:	f7fd fc5f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 8003b32:	2102      	movs	r1, #2
 8003b34:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003b38:	f7fd fc5a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 8003b3c:	21b7      	movs	r1, #183	; 0xb7
 8003b3e:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003b42:	f7fd fc55 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 8003b46:	2102      	movs	r1, #2
 8003b48:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003b4c:	f7fd fc50 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 8003b50:	21cf      	movs	r1, #207	; 0xcf
 8003b52:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003b56:	f7fd fc4b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 8003b5a:	2102      	movs	r1, #2
 8003b5c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003b60:	f7fd fc46 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8003b64:	21de      	movs	r1, #222	; 0xde
 8003b66:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003b6a:	f7fd fc41 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 8003b6e:	2102      	movs	r1, #2
 8003b70:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003b74:	f7fd fc3c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8003b78:	21f2      	movs	r1, #242	; 0xf2
 8003b7a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003b7e:	f7fd fc37 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8003b82:	2102      	movs	r1, #2
 8003b84:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003b88:	f7fd fc32 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8003b8c:	21fe      	movs	r1, #254	; 0xfe
 8003b8e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003b92:	f7fd fc2d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8003b96:	2103      	movs	r1, #3
 8003b98:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003b9c:	f7fd fc28 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8003ba0:	2110      	movs	r1, #16
 8003ba2:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003ba6:	f7fd fc23 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 8003baa:	2103      	movs	r1, #3
 8003bac:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003bb0:	f7fd fc1e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8003bb4:	2133      	movs	r1, #51	; 0x33
 8003bb6:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003bba:	f7fd fc19 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 8003bbe:	2103      	movs	r1, #3
 8003bc0:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003bc4:	f7fd fc14 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8003bc8:	216d      	movs	r1, #109	; 0x6d
 8003bca:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003bce:	f7fd fc0f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003bd8:	f7fd fc0a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8003bdc:	2133      	movs	r1, #51	; 0x33
 8003bde:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003be2:	f7fd fc05 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 8003be6:	2100      	movs	r1, #0
 8003be8:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003bec:	f7fd fc00 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 8003bf0:	2134      	movs	r1, #52	; 0x34
 8003bf2:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003bf6:	f7fd fbfb 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003c00:	f7fd fbf6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 8003c04:	213a      	movs	r1, #58	; 0x3a
 8003c06:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003c0a:	f7fd fbf1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 8003c0e:	2100      	movs	r1, #0
 8003c10:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003c14:	f7fd fbec 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 8003c18:	214a      	movs	r1, #74	; 0x4a
 8003c1a:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003c1e:	f7fd fbe7 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 8003c22:	2100      	movs	r1, #0
 8003c24:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003c28:	f7fd fbe2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 8003c2c:	215c      	movs	r1, #92	; 0x5c
 8003c2e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003c32:	f7fd fbdd 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 8003c36:	2100      	movs	r1, #0
 8003c38:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003c3c:	f7fd fbd8 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 8003c40:	2181      	movs	r1, #129	; 0x81
 8003c42:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003c46:	f7fd fbd3 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003c50:	f7fd fbce 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8003c54:	21a6      	movs	r1, #166	; 0xa6
 8003c56:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003c5a:	f7fd fbc9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 8003c5e:	2100      	movs	r1, #0
 8003c60:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003c64:	f7fd fbc4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8003c68:	21e5      	movs	r1, #229	; 0xe5
 8003c6a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003c6e:	f7fd fbbf 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 8003c72:	2101      	movs	r1, #1
 8003c74:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003c78:	f7fd fbba 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 8003c7c:	2113      	movs	r1, #19
 8003c7e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003c82:	f7fd fbb5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8003c86:	2101      	movs	r1, #1
 8003c88:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003c8c:	f7fd fbb0 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8003c90:	2154      	movs	r1, #84	; 0x54
 8003c92:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003c96:	f7fd fbab 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003ca0:	f7fd fba6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8003ca4:	2182      	movs	r1, #130	; 0x82
 8003ca6:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003caa:	f7fd fba1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 8003cae:	2101      	movs	r1, #1
 8003cb0:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003cb4:	f7fd fb9c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8003cb8:	21ca      	movs	r1, #202	; 0xca
 8003cba:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003cbe:	f7fd fb97 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 8003cc2:	2102      	movs	r1, #2
 8003cc4:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003cc8:	f7fd fb92 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8003ccc:	2100      	movs	r1, #0
 8003cce:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003cd2:	f7fd fb8d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8003cd6:	2102      	movs	r1, #2
 8003cd8:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003cdc:	f7fd fb88 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003ce6:	f7fd fb83 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 8003cea:	2102      	movs	r1, #2
 8003cec:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003cf0:	f7fd fb7e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 8003cf4:	2134      	movs	r1, #52	; 0x34
 8003cf6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003cfa:	f7fd fb79 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 8003cfe:	2102      	movs	r1, #2
 8003d00:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003d04:	f7fd fb74 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 8003d08:	2167      	movs	r1, #103	; 0x67
 8003d0a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003d0e:	f7fd fb6f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 8003d12:	2102      	movs	r1, #2
 8003d14:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003d18:	f7fd fb6a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 8003d1c:	2184      	movs	r1, #132	; 0x84
 8003d1e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003d22:	f7fd fb65 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 8003d26:	2102      	movs	r1, #2
 8003d28:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003d2c:	f7fd fb60 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 8003d30:	21a4      	movs	r1, #164	; 0xa4
 8003d32:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003d36:	f7fd fb5b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003d40:	f7fd fb56 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 8003d44:	21b7      	movs	r1, #183	; 0xb7
 8003d46:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003d4a:	f7fd fb51 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 8003d4e:	2102      	movs	r1, #2
 8003d50:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003d54:	f7fd fb4c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 8003d58:	21cf      	movs	r1, #207	; 0xcf
 8003d5a:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003d5e:	f7fd fb47 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 8003d62:	2102      	movs	r1, #2
 8003d64:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003d68:	f7fd fb42 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 8003d6c:	21de      	movs	r1, #222	; 0xde
 8003d6e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003d72:	f7fd fb3d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8003d76:	2102      	movs	r1, #2
 8003d78:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003d7c:	f7fd fb38 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 8003d80:	21f2      	movs	r1, #242	; 0xf2
 8003d82:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003d86:	f7fd fb33 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 8003d8a:	2102      	movs	r1, #2
 8003d8c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003d90:	f7fd fb2e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8003d94:	21fe      	movs	r1, #254	; 0xfe
 8003d96:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003d9a:	f7fd fb29 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 8003d9e:	2103      	movs	r1, #3
 8003da0:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003da4:	f7fd fb24 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8003da8:	2110      	movs	r1, #16
 8003daa:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003dae:	f7fd fb1f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 8003db2:	2103      	movs	r1, #3
 8003db4:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003db8:	f7fd fb1a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 8003dbc:	2133      	movs	r1, #51	; 0x33
 8003dbe:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003dc2:	f7fd fb15 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 8003dc6:	2103      	movs	r1, #3
 8003dc8:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003dcc:	f7fd fb10 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 8003dd0:	216d      	movs	r1, #109	; 0x6d
 8003dd2:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003dd6:	f7fd fb0b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 8003dda:	2100      	movs	r1, #0
 8003ddc:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003de0:	f7fd fb06 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8003de4:	2133      	movs	r1, #51	; 0x33
 8003de6:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003dea:	f7fd fb01 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 8003dee:	2100      	movs	r1, #0
 8003df0:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003df4:	f7fd fafc 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 8003df8:	2134      	movs	r1, #52	; 0x34
 8003dfa:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003dfe:	f7fd faf7 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 8003e02:	2100      	movs	r1, #0
 8003e04:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003e08:	f7fd faf2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 8003e0c:	213a      	movs	r1, #58	; 0x3a
 8003e0e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003e12:	f7fd faed 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 8003e16:	2100      	movs	r1, #0
 8003e18:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003e1c:	f7fd fae8 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 8003e20:	214a      	movs	r1, #74	; 0x4a
 8003e22:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003e26:	f7fd fae3 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003e30:	f7fd fade 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 8003e34:	215c      	movs	r1, #92	; 0x5c
 8003e36:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003e3a:	f7fd fad9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 8003e3e:	2100      	movs	r1, #0
 8003e40:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003e44:	f7fd fad4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 8003e48:	2181      	movs	r1, #129	; 0x81
 8003e4a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003e4e:	f7fd facf 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 8003e52:	2100      	movs	r1, #0
 8003e54:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003e58:	f7fd faca 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 8003e5c:	21a6      	movs	r1, #166	; 0xa6
 8003e5e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003e62:	f7fd fac5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 8003e66:	2100      	movs	r1, #0
 8003e68:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003e6c:	f7fd fac0 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 8003e70:	21e5      	movs	r1, #229	; 0xe5
 8003e72:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003e76:	f7fd fabb 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003e80:	f7fd fab6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8003e84:	2113      	movs	r1, #19
 8003e86:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003e8a:	f7fd fab1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 8003e8e:	2101      	movs	r1, #1
 8003e90:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003e94:	f7fd faac 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8003e98:	2154      	movs	r1, #84	; 0x54
 8003e9a:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003e9e:	f7fd faa7 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003ea8:	f7fd faa2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8003eac:	2182      	movs	r1, #130	; 0x82
 8003eae:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003eb2:	f7fd fa9d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003ebc:	f7fd fa98 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 8003ec0:	21ca      	movs	r1, #202	; 0xca
 8003ec2:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003ec6:	f7fd fa93 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 8003eca:	2102      	movs	r1, #2
 8003ecc:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003ed0:	f7fd fa8e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003eda:	f7fd fa89 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 8003ede:	2102      	movs	r1, #2
 8003ee0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003ee4:	f7fd fa84 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 8003ee8:	2101      	movs	r1, #1
 8003eea:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003eee:	f7fd fa7f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003ef8:	f7fd fa7a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 8003efc:	2134      	movs	r1, #52	; 0x34
 8003efe:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003f02:	f7fd fa75 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 8003f06:	2102      	movs	r1, #2
 8003f08:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003f0c:	f7fd fa70 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 8003f10:	2167      	movs	r1, #103	; 0x67
 8003f12:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003f16:	f7fd fa6b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 8003f1a:	2102      	movs	r1, #2
 8003f1c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003f20:	f7fd fa66 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 8003f24:	2184      	movs	r1, #132	; 0x84
 8003f26:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003f2a:	f7fd fa61 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 8003f2e:	2102      	movs	r1, #2
 8003f30:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003f34:	f7fd fa5c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 8003f38:	21a4      	movs	r1, #164	; 0xa4
 8003f3a:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003f3e:	f7fd fa57 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 8003f42:	2102      	movs	r1, #2
 8003f44:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003f48:	f7fd fa52 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 8003f4c:	21b7      	movs	r1, #183	; 0xb7
 8003f4e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003f52:	f7fd fa4d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 8003f56:	2102      	movs	r1, #2
 8003f58:	f24d 4026 	movw	r0, #54310	; 0xd426
 8003f5c:	f7fd fa48 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 8003f60:	21cf      	movs	r1, #207	; 0xcf
 8003f62:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003f66:	f7fd fa43 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003f70:	f7fd fa3e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 8003f74:	21de      	movs	r1, #222	; 0xde
 8003f76:	f24d 4029 	movw	r0, #54313	; 0xd429
 8003f7a:	f7fd fa39 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 8003f7e:	2102      	movs	r1, #2
 8003f80:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003f84:	f7fd fa34 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 8003f88:	21f2      	movs	r1, #242	; 0xf2
 8003f8a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8003f8e:	f7fd fa2f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8003f92:	2102      	movs	r1, #2
 8003f94:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003f98:	f7fd fa2a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8003f9c:	21fe      	movs	r1, #254	; 0xfe
 8003f9e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003fa2:	f7fd fa25 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8003fa6:	2103      	movs	r1, #3
 8003fa8:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003fac:	f7fd fa20 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8003fb0:	2110      	movs	r1, #16
 8003fb2:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003fb6:	f7fd fa1b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 8003fba:	2103      	movs	r1, #3
 8003fbc:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003fc0:	f7fd fa16 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8003fc4:	2133      	movs	r1, #51	; 0x33
 8003fc6:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003fca:	f7fd fa11 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 8003fce:	2103      	movs	r1, #3
 8003fd0:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003fd4:	f7fd fa0c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8003fd8:	216d      	movs	r1, #109	; 0x6d
 8003fda:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003fde:	f7fd fa07 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003fe8:	f7fd fa02 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8003fec:	2133      	movs	r1, #51	; 0x33
 8003fee:	f24d 5001 	movw	r0, #54529	; 0xd501
 8003ff2:	f7fd f9fd 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003ffc:	f7fd f9f8 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 8004000:	2134      	movs	r1, #52	; 0x34
 8004002:	f24d 5003 	movw	r0, #54531	; 0xd503
 8004006:	f7fd f9f3 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 800400a:	2100      	movs	r1, #0
 800400c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8004010:	f7fd f9ee 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 8004014:	213a      	movs	r1, #58	; 0x3a
 8004016:	f24d 5005 	movw	r0, #54533	; 0xd505
 800401a:	f7fd f9e9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 800401e:	2100      	movs	r1, #0
 8004020:	f24d 5006 	movw	r0, #54534	; 0xd506
 8004024:	f7fd f9e4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 8004028:	214a      	movs	r1, #74	; 0x4a
 800402a:	f24d 5007 	movw	r0, #54535	; 0xd507
 800402e:	f7fd f9df 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 8004032:	2100      	movs	r1, #0
 8004034:	f24d 5008 	movw	r0, #54536	; 0xd508
 8004038:	f7fd f9da 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 800403c:	215c      	movs	r1, #92	; 0x5c
 800403e:	f24d 5009 	movw	r0, #54537	; 0xd509
 8004042:	f7fd f9d5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 8004046:	2100      	movs	r1, #0
 8004048:	f24d 500a 	movw	r0, #54538	; 0xd50a
 800404c:	f7fd f9d0 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 8004050:	2181      	movs	r1, #129	; 0x81
 8004052:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8004056:	f7fd f9cb 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 800405a:	2100      	movs	r1, #0
 800405c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8004060:	f7fd f9c6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 8004064:	21a6      	movs	r1, #166	; 0xa6
 8004066:	f24d 500d 	movw	r0, #54541	; 0xd50d
 800406a:	f7fd f9c1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 800406e:	2100      	movs	r1, #0
 8004070:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8004074:	f7fd f9bc 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 8004078:	21e5      	movs	r1, #229	; 0xe5
 800407a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 800407e:	f7fd f9b7 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 8004082:	2101      	movs	r1, #1
 8004084:	f24d 5010 	movw	r0, #54544	; 0xd510
 8004088:	f7fd f9b2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 800408c:	2113      	movs	r1, #19
 800408e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8004092:	f7fd f9ad 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8004096:	2101      	movs	r1, #1
 8004098:	f24d 5012 	movw	r0, #54546	; 0xd512
 800409c:	f7fd f9a8 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 80040a0:	2154      	movs	r1, #84	; 0x54
 80040a2:	f24d 5013 	movw	r0, #54547	; 0xd513
 80040a6:	f7fd f9a3 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 80040aa:	2101      	movs	r1, #1
 80040ac:	f24d 5014 	movw	r0, #54548	; 0xd514
 80040b0:	f7fd f99e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 80040b4:	2182      	movs	r1, #130	; 0x82
 80040b6:	f24d 5015 	movw	r0, #54549	; 0xd515
 80040ba:	f7fd f999 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 80040be:	2101      	movs	r1, #1
 80040c0:	f24d 5016 	movw	r0, #54550	; 0xd516
 80040c4:	f7fd f994 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 80040c8:	21ca      	movs	r1, #202	; 0xca
 80040ca:	f24d 5017 	movw	r0, #54551	; 0xd517
 80040ce:	f7fd f98f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 80040d2:	2102      	movs	r1, #2
 80040d4:	f24d 5018 	movw	r0, #54552	; 0xd518
 80040d8:	f7fd f98a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 80040dc:	2100      	movs	r1, #0
 80040de:	f24d 5019 	movw	r0, #54553	; 0xd519
 80040e2:	f7fd f985 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 80040e6:	2102      	movs	r1, #2
 80040e8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 80040ec:	f7fd f980 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 80040f0:	2101      	movs	r1, #1
 80040f2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 80040f6:	f7fd f97b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 80040fa:	2102      	movs	r1, #2
 80040fc:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8004100:	f7fd f976 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 8004104:	2134      	movs	r1, #52	; 0x34
 8004106:	f24d 501d 	movw	r0, #54557	; 0xd51d
 800410a:	f7fd f971 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 800410e:	2102      	movs	r1, #2
 8004110:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8004114:	f7fd f96c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 8004118:	2167      	movs	r1, #103	; 0x67
 800411a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 800411e:	f7fd f967 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 8004122:	2102      	movs	r1, #2
 8004124:	f24d 5020 	movw	r0, #54560	; 0xd520
 8004128:	f7fd f962 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 800412c:	2184      	movs	r1, #132	; 0x84
 800412e:	f24d 5021 	movw	r0, #54561	; 0xd521
 8004132:	f7fd f95d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 8004136:	2102      	movs	r1, #2
 8004138:	f24d 5022 	movw	r0, #54562	; 0xd522
 800413c:	f7fd f958 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 8004140:	21a4      	movs	r1, #164	; 0xa4
 8004142:	f24d 5023 	movw	r0, #54563	; 0xd523
 8004146:	f7fd f953 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 800414a:	2102      	movs	r1, #2
 800414c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8004150:	f7fd f94e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 8004154:	21b7      	movs	r1, #183	; 0xb7
 8004156:	f24d 5025 	movw	r0, #54565	; 0xd525
 800415a:	f7fd f949 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 800415e:	2102      	movs	r1, #2
 8004160:	f24d 5026 	movw	r0, #54566	; 0xd526
 8004164:	f7fd f944 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 8004168:	21cf      	movs	r1, #207	; 0xcf
 800416a:	f24d 5027 	movw	r0, #54567	; 0xd527
 800416e:	f7fd f93f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 8004172:	2102      	movs	r1, #2
 8004174:	f24d 5028 	movw	r0, #54568	; 0xd528
 8004178:	f7fd f93a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 800417c:	21de      	movs	r1, #222	; 0xde
 800417e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8004182:	f7fd f935 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8004186:	2102      	movs	r1, #2
 8004188:	f24d 502a 	movw	r0, #54570	; 0xd52a
 800418c:	f7fd f930 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8004190:	21f2      	movs	r1, #242	; 0xf2
 8004192:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8004196:	f7fd f92b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 800419a:	2102      	movs	r1, #2
 800419c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 80041a0:	f7fd f926 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 80041a4:	21fe      	movs	r1, #254	; 0xfe
 80041a6:	f24d 502d 	movw	r0, #54573	; 0xd52d
 80041aa:	f7fd f921 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 80041ae:	2103      	movs	r1, #3
 80041b0:	f24d 502e 	movw	r0, #54574	; 0xd52e
 80041b4:	f7fd f91c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 80041b8:	2110      	movs	r1, #16
 80041ba:	f24d 502f 	movw	r0, #54575	; 0xd52f
 80041be:	f7fd f917 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 80041c2:	2103      	movs	r1, #3
 80041c4:	f24d 5030 	movw	r0, #54576	; 0xd530
 80041c8:	f7fd f912 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 80041cc:	2133      	movs	r1, #51	; 0x33
 80041ce:	f24d 5031 	movw	r0, #54577	; 0xd531
 80041d2:	f7fd f90d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 80041d6:	2103      	movs	r1, #3
 80041d8:	f24d 5032 	movw	r0, #54578	; 0xd532
 80041dc:	f7fd f908 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 80041e0:	216d      	movs	r1, #109	; 0x6d
 80041e2:	f24d 5033 	movw	r0, #54579	; 0xd533
 80041e6:	f7fd f903 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 80041ea:	2100      	movs	r1, #0
 80041ec:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80041f0:	f7fd f8fe 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 80041f4:	2133      	movs	r1, #51	; 0x33
 80041f6:	f24d 6001 	movw	r0, #54785	; 0xd601
 80041fa:	f7fd f8f9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 80041fe:	2100      	movs	r1, #0
 8004200:	f24d 6002 	movw	r0, #54786	; 0xd602
 8004204:	f7fd f8f4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 8004208:	2134      	movs	r1, #52	; 0x34
 800420a:	f24d 6003 	movw	r0, #54787	; 0xd603
 800420e:	f7fd f8ef 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 8004212:	2100      	movs	r1, #0
 8004214:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004218:	f7fd f8ea 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 800421c:	213a      	movs	r1, #58	; 0x3a
 800421e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8004222:	f7fd f8e5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 8004226:	2100      	movs	r1, #0
 8004228:	f24d 6006 	movw	r0, #54790	; 0xd606
 800422c:	f7fd f8e0 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 8004230:	214a      	movs	r1, #74	; 0x4a
 8004232:	f24d 6007 	movw	r0, #54791	; 0xd607
 8004236:	f7fd f8db 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 800423a:	2100      	movs	r1, #0
 800423c:	f24d 6008 	movw	r0, #54792	; 0xd608
 8004240:	f7fd f8d6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 8004244:	215c      	movs	r1, #92	; 0x5c
 8004246:	f24d 6009 	movw	r0, #54793	; 0xd609
 800424a:	f7fd f8d1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 800424e:	2100      	movs	r1, #0
 8004250:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8004254:	f7fd f8cc 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 8004258:	2181      	movs	r1, #129	; 0x81
 800425a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 800425e:	f7fd f8c7 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 8004262:	2100      	movs	r1, #0
 8004264:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004268:	f7fd f8c2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 800426c:	21a6      	movs	r1, #166	; 0xa6
 800426e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8004272:	f7fd f8bd 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8004276:	2100      	movs	r1, #0
 8004278:	f24d 600e 	movw	r0, #54798	; 0xd60e
 800427c:	f7fd f8b8 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 8004280:	21e5      	movs	r1, #229	; 0xe5
 8004282:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8004286:	f7fd f8b3 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 800428a:	2101      	movs	r1, #1
 800428c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004290:	f7fd f8ae 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8004294:	2113      	movs	r1, #19
 8004296:	f24d 6011 	movw	r0, #54801	; 0xd611
 800429a:	f7fd f8a9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 800429e:	2101      	movs	r1, #1
 80042a0:	f24d 6012 	movw	r0, #54802	; 0xd612
 80042a4:	f7fd f8a4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 80042a8:	2154      	movs	r1, #84	; 0x54
 80042aa:	f24d 6013 	movw	r0, #54803	; 0xd613
 80042ae:	f7fd f89f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 80042b2:	2101      	movs	r1, #1
 80042b4:	f24d 6014 	movw	r0, #54804	; 0xd614
 80042b8:	f7fd f89a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 80042bc:	2182      	movs	r1, #130	; 0x82
 80042be:	f24d 6015 	movw	r0, #54805	; 0xd615
 80042c2:	f7fd f895 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 80042c6:	2101      	movs	r1, #1
 80042c8:	f24d 6016 	movw	r0, #54806	; 0xd616
 80042cc:	f7fd f890 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 80042d0:	21ca      	movs	r1, #202	; 0xca
 80042d2:	f24d 6017 	movw	r0, #54807	; 0xd617
 80042d6:	f7fd f88b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 80042da:	2102      	movs	r1, #2
 80042dc:	f24d 6018 	movw	r0, #54808	; 0xd618
 80042e0:	f7fd f886 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 80042e4:	2100      	movs	r1, #0
 80042e6:	f24d 6019 	movw	r0, #54809	; 0xd619
 80042ea:	f7fd f881 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 80042ee:	2102      	movs	r1, #2
 80042f0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80042f4:	f7fd f87c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 80042f8:	2101      	movs	r1, #1
 80042fa:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80042fe:	f7fd f877 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 8004302:	2102      	movs	r1, #2
 8004304:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004308:	f7fd f872 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 800430c:	2134      	movs	r1, #52	; 0x34
 800430e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8004312:	f7fd f86d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 8004316:	2102      	movs	r1, #2
 8004318:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800431c:	f7fd f868 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 8004320:	2167      	movs	r1, #103	; 0x67
 8004322:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8004326:	f7fd f863 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 800432a:	2102      	movs	r1, #2
 800432c:	f24d 6020 	movw	r0, #54816	; 0xd620
 8004330:	f7fd f85e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 8004334:	2184      	movs	r1, #132	; 0x84
 8004336:	f24d 6021 	movw	r0, #54817	; 0xd621
 800433a:	f7fd f859 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 800433e:	2102      	movs	r1, #2
 8004340:	f24d 6022 	movw	r0, #54818	; 0xd622
 8004344:	f7fd f854 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 8004348:	21a4      	movs	r1, #164	; 0xa4
 800434a:	f24d 6023 	movw	r0, #54819	; 0xd623
 800434e:	f7fd f84f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 8004352:	2102      	movs	r1, #2
 8004354:	f24d 6024 	movw	r0, #54820	; 0xd624
 8004358:	f7fd f84a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 800435c:	21b7      	movs	r1, #183	; 0xb7
 800435e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8004362:	f7fd f845 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 8004366:	2102      	movs	r1, #2
 8004368:	f24d 6026 	movw	r0, #54822	; 0xd626
 800436c:	f7fd f840 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 8004370:	21cf      	movs	r1, #207	; 0xcf
 8004372:	f24d 6027 	movw	r0, #54823	; 0xd627
 8004376:	f7fd f83b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 800437a:	2102      	movs	r1, #2
 800437c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004380:	f7fd f836 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8004384:	21de      	movs	r1, #222	; 0xde
 8004386:	f24d 6029 	movw	r0, #54825	; 0xd629
 800438a:	f7fd f831 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 800438e:	2102      	movs	r1, #2
 8004390:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8004394:	f7fd f82c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8004398:	21f2      	movs	r1, #242	; 0xf2
 800439a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800439e:	f7fd f827 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 80043a2:	2102      	movs	r1, #2
 80043a4:	f24d 602c 	movw	r0, #54828	; 0xd62c
 80043a8:	f7fd f822 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 80043ac:	21fe      	movs	r1, #254	; 0xfe
 80043ae:	f24d 602d 	movw	r0, #54829	; 0xd62d
 80043b2:	f7fd f81d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 80043b6:	2103      	movs	r1, #3
 80043b8:	f24d 602e 	movw	r0, #54830	; 0xd62e
 80043bc:	f7fd f818 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 80043c0:	2110      	movs	r1, #16
 80043c2:	f24d 602f 	movw	r0, #54831	; 0xd62f
 80043c6:	f7fd f813 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 80043ca:	2103      	movs	r1, #3
 80043cc:	f24d 6030 	movw	r0, #54832	; 0xd630
 80043d0:	f7fd f80e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 80043d4:	2133      	movs	r1, #51	; 0x33
 80043d6:	f24d 6031 	movw	r0, #54833	; 0xd631
 80043da:	f7fd f809 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 80043de:	2103      	movs	r1, #3
 80043e0:	f24d 6032 	movw	r0, #54834	; 0xd632
 80043e4:	f7fd f804 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 80043e8:	216d      	movs	r1, #109	; 0x6d
 80043ea:	f24d 6033 	movw	r0, #54835	; 0xd633
 80043ee:	f7fc ffff 	bl	80013f0 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 80043f2:	2155      	movs	r1, #85	; 0x55
 80043f4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80043f8:	f7fc fffa 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 80043fc:	21aa      	movs	r1, #170	; 0xaa
 80043fe:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004402:	f7fc fff5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8004406:	2152      	movs	r1, #82	; 0x52
 8004408:	f24f 0002 	movw	r0, #61442	; 0xf002
 800440c:	f7fc fff0 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8004410:	2108      	movs	r1, #8
 8004412:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004416:	f7fc ffeb 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 800441a:	2100      	movs	r1, #0
 800441c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004420:	f7fc ffe6 	bl	80013f0 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8004424:	21cc      	movs	r1, #204	; 0xcc
 8004426:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800442a:	f7fc ffe1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800442e:	2100      	movs	r1, #0
 8004430:	f24b 1001 	movw	r0, #45313	; 0xb101
 8004434:	f7fc ffdc 	bl	80013f0 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 8004438:	2105      	movs	r1, #5
 800443a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800443e:	f7fc ffd7 	bl	80013f0 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 8004442:	2170      	movs	r1, #112	; 0x70
 8004444:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8004448:	f7fc ffd2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 800444c:	2170      	movs	r1, #112	; 0x70
 800444e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004452:	f7fc ffcd 	bl	80013f0 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 8004456:	2101      	movs	r1, #1
 8004458:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800445c:	f7fc ffc8 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 8004460:	2103      	movs	r1, #3
 8004462:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004466:	f7fc ffc3 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 800446a:	2103      	movs	r1, #3
 800446c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004470:	f7fc ffbe 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8004474:	2103      	movs	r1, #3
 8004476:	f64b 0003 	movw	r0, #47107	; 0xb803
 800447a:	f7fc ffb9 	bl	80013f0 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 800447e:	2102      	movs	r1, #2
 8004480:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004484:	f7fc ffb4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8004488:	2100      	movs	r1, #0
 800448a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800448e:	f7fc ffaf 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8004492:	2100      	movs	r1, #0
 8004494:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004498:	f7fc ffaa 	bl	80013f0 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 800449c:	21d0      	movs	r1, #208	; 0xd0
 800449e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 80044a2:	f7fc ffa5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 80044a6:	2102      	movs	r1, #2
 80044a8:	f64c 1001 	movw	r0, #51457	; 0xc901
 80044ac:	f7fc ffa0 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 80044b0:	2150      	movs	r1, #80	; 0x50
 80044b2:	f64c 1002 	movw	r0, #51458	; 0xc902
 80044b6:	f7fc ff9b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 80044ba:	2150      	movs	r1, #80	; 0x50
 80044bc:	f64c 1003 	movw	r0, #51459	; 0xc903
 80044c0:	f7fc ff96 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 80044c4:	2150      	movs	r1, #80	; 0x50
 80044c6:	f64c 1004 	movw	r0, #51460	; 0xc904
 80044ca:	f7fc ff91 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 80044ce:	2100      	movs	r1, #0
 80044d0:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 80044d4:	f7fc ff8c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 80044d8:	2155      	movs	r1, #85	; 0x55
 80044da:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 80044de:	f7fc ff87 	bl	80013f0 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 80044e2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 80044e6:	f7fc ff55 	bl	8001394 <LCD_WR_REG>
		delay_us(120);
 80044ea:	2078      	movs	r0, #120	; 0x78
 80044ec:	f7fc ff34 	bl	8001358 <delay_us>
		LCD_WR_REG(0x2900);
 80044f0:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 80044f4:	f7fc ff4e 	bl	8001394 <LCD_WR_REG>
 80044f8:	f001 b95f 	b.w	80057ba <LCD_Init+0x3852>
	}else if(lcddev.id==0x9325)//9325
 80044fc:	4bec      	ldr	r3, [pc, #944]	; (80048b0 <LCD_Init+0x2948>)
 80044fe:	889b      	ldrh	r3, [r3, #4]
 8004500:	f249 3225 	movw	r2, #37669	; 0x9325
 8004504:	4293      	cmp	r3, r2
 8004506:	f040 80d7 	bne.w	80046b8 <LCD_Init+0x2750>
	{
		LCD_WriteReg(0x00E5,0x78F0);
 800450a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800450e:	20e5      	movs	r0, #229	; 0xe5
 8004510:	f7fc ff6e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0001,0x0100);
 8004514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004518:	2001      	movs	r0, #1
 800451a:	f7fc ff69 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 800451e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004522:	2002      	movs	r0, #2
 8004524:	f7fc ff64 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0003,0x1030);
 8004528:	f241 0130 	movw	r1, #4144	; 0x1030
 800452c:	2003      	movs	r0, #3
 800452e:	f7fc ff5f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0004,0x0000);
 8004532:	2100      	movs	r1, #0
 8004534:	2004      	movs	r0, #4
 8004536:	f7fc ff5b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 800453a:	f240 2102 	movw	r1, #514	; 0x202
 800453e:	2008      	movs	r0, #8
 8004540:	f7fc ff56 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0009,0x0000);
 8004544:	2100      	movs	r1, #0
 8004546:	2009      	movs	r0, #9
 8004548:	f7fc ff52 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x000A,0x0000);
 800454c:	2100      	movs	r1, #0
 800454e:	200a      	movs	r0, #10
 8004550:	f7fc ff4e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x000C,0x0000);
 8004554:	2100      	movs	r1, #0
 8004556:	200c      	movs	r0, #12
 8004558:	f7fc ff4a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x000D,0x0000);
 800455c:	2100      	movs	r1, #0
 800455e:	200d      	movs	r0, #13
 8004560:	f7fc ff46 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x000F,0x0000);
 8004564:	2100      	movs	r1, #0
 8004566:	200f      	movs	r0, #15
 8004568:	f7fc ff42 	bl	80013f0 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010,0x0000);
 800456c:	2100      	movs	r1, #0
 800456e:	2010      	movs	r0, #16
 8004570:	f7fc ff3e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 8004574:	2107      	movs	r1, #7
 8004576:	2011      	movs	r0, #17
 8004578:	f7fc ff3a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 800457c:	2100      	movs	r1, #0
 800457e:	2012      	movs	r0, #18
 8004580:	f7fc ff36 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 8004584:	2100      	movs	r1, #0
 8004586:	2013      	movs	r0, #19
 8004588:	f7fc ff32 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0000);
 800458c:	2100      	movs	r1, #0
 800458e:	2007      	movs	r0, #7
 8004590:	f7fc ff2e 	bl	80013f0 <LCD_WriteReg>
		//vgh
		LCD_WriteReg(0x0010,0x1690);
 8004594:	f241 6190 	movw	r1, #5776	; 0x1690
 8004598:	2010      	movs	r0, #16
 800459a:	f7fc ff29 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0227);
 800459e:	f240 2127 	movw	r1, #551	; 0x227
 80045a2:	2011      	movs	r0, #17
 80045a4:	f7fc ff24 	bl	80013f0 <LCD_WriteReg>
		//delayms(100);
		//vregiout
		LCD_WriteReg(0x0012,0x009D); //0x001b
 80045a8:	219d      	movs	r1, #157	; 0x9d
 80045aa:	2012      	movs	r0, #18
 80045ac:	f7fc ff20 	bl	80013f0 <LCD_WriteReg>
		//delayms(100);
		//vom amplitude
		LCD_WriteReg(0x0013,0x1900);
 80045b0:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80045b4:	2013      	movs	r0, #19
 80045b6:	f7fc ff1b 	bl	80013f0 <LCD_WriteReg>
		//delayms(100);
		//vom H
		LCD_WriteReg(0x0029,0x0025);
 80045ba:	2125      	movs	r1, #37	; 0x25
 80045bc:	2029      	movs	r0, #41	; 0x29
 80045be:	f7fc ff17 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x002B,0x000D);
 80045c2:	210d      	movs	r1, #13
 80045c4:	202b      	movs	r0, #43	; 0x2b
 80045c6:	f7fc ff13 	bl	80013f0 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030,0x0007);
 80045ca:	2107      	movs	r1, #7
 80045cc:	2030      	movs	r0, #48	; 0x30
 80045ce:	f7fc ff0f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0303);
 80045d2:	f240 3103 	movw	r1, #771	; 0x303
 80045d6:	2031      	movs	r0, #49	; 0x31
 80045d8:	f7fc ff0a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0003);// 0006
 80045dc:	2103      	movs	r1, #3
 80045de:	2032      	movs	r0, #50	; 0x32
 80045e0:	f7fc ff06 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0206);
 80045e4:	f240 2106 	movw	r1, #518	; 0x206
 80045e8:	2035      	movs	r0, #53	; 0x35
 80045ea:	f7fc ff01 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x0008);
 80045ee:	2108      	movs	r1, #8
 80045f0:	2036      	movs	r0, #54	; 0x36
 80045f2:	f7fc fefd 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0406);
 80045f6:	f240 4106 	movw	r1, #1030	; 0x406
 80045fa:	2037      	movs	r0, #55	; 0x37
 80045fc:	f7fc fef8 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0304);//0200
 8004600:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004604:	2038      	movs	r0, #56	; 0x38
 8004606:	f7fc fef3 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0007);
 800460a:	2107      	movs	r1, #7
 800460c:	2039      	movs	r0, #57	; 0x39
 800460e:	f7fc feef 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x003C,0x0602);// 0504
 8004612:	f240 6102 	movw	r1, #1538	; 0x602
 8004616:	203c      	movs	r0, #60	; 0x3c
 8004618:	f7fc feea 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x003D,0x0008);
 800461c:	2108      	movs	r1, #8
 800461e:	203d      	movs	r0, #61	; 0x3d
 8004620:	f7fc fee6 	bl	80013f0 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050,0x0000);
 8004624:	2100      	movs	r1, #0
 8004626:	2050      	movs	r0, #80	; 0x50
 8004628:	f7fc fee2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00EF);
 800462c:	21ef      	movs	r1, #239	; 0xef
 800462e:	2051      	movs	r0, #81	; 0x51
 8004630:	f7fc fede 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 8004634:	2100      	movs	r1, #0
 8004636:	2052      	movs	r0, #82	; 0x52
 8004638:	f7fc feda 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013F);
 800463c:	f240 113f 	movw	r1, #319	; 0x13f
 8004640:	2053      	movs	r0, #83	; 0x53
 8004642:	f7fc fed5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0xA700);
 8004646:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 800464a:	2060      	movs	r0, #96	; 0x60
 800464c:	f7fc fed0 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 8004650:	2101      	movs	r1, #1
 8004652:	2061      	movs	r0, #97	; 0x61
 8004654:	f7fc fecc 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x006A,0x0000);
 8004658:	2100      	movs	r1, #0
 800465a:	206a      	movs	r0, #106	; 0x6a
 800465c:	f7fc fec8 	bl	80013f0 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080,0x0000);
 8004660:	2100      	movs	r1, #0
 8004662:	2080      	movs	r0, #128	; 0x80
 8004664:	f7fc fec4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0081,0x0000);
 8004668:	2100      	movs	r1, #0
 800466a:	2081      	movs	r0, #129	; 0x81
 800466c:	f7fc fec0 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0082,0x0000);
 8004670:	2100      	movs	r1, #0
 8004672:	2082      	movs	r0, #130	; 0x82
 8004674:	f7fc febc 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0083,0x0000);
 8004678:	2100      	movs	r1, #0
 800467a:	2083      	movs	r0, #131	; 0x83
 800467c:	f7fc feb8 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0084,0x0000);
 8004680:	2100      	movs	r1, #0
 8004682:	2084      	movs	r0, #132	; 0x84
 8004684:	f7fc feb4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0085,0x0000);
 8004688:	2100      	movs	r1, #0
 800468a:	2085      	movs	r0, #133	; 0x85
 800468c:	f7fc feb0 	bl	80013f0 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090,0x0010);
 8004690:	2110      	movs	r1, #16
 8004692:	2090      	movs	r0, #144	; 0x90
 8004694:	f7fc feac 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8004698:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800469c:	2092      	movs	r0, #146	; 0x92
 800469e:	f7fc fea7 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0x0007,0x0133);
 80046a2:	f240 1133 	movw	r1, #307	; 0x133
 80046a6:	2007      	movs	r0, #7
 80046a8:	f7fc fea2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x0022);//
 80046ac:	2122      	movs	r1, #34	; 0x22
 80046ae:	2000      	movs	r0, #0
 80046b0:	f7fc fe9e 	bl	80013f0 <LCD_WriteReg>
 80046b4:	f001 b881 	b.w	80057ba <LCD_Init+0x3852>
	}else if(lcddev.id==0x9328)//ILI9328   OK
 80046b8:	4b7d      	ldr	r3, [pc, #500]	; (80048b0 <LCD_Init+0x2948>)
 80046ba:	889b      	ldrh	r3, [r3, #4]
 80046bc:	f249 3228 	movw	r2, #37672	; 0x9328
 80046c0:	4293      	cmp	r3, r2
 80046c2:	f040 80f7 	bne.w	80048b4 <LCD_Init+0x294c>
	{
  		LCD_WriteReg(0x00EC,0x108F);// internal timeing
 80046c6:	f241 018f 	movw	r1, #4239	; 0x108f
 80046ca:	20ec      	movs	r0, #236	; 0xec
 80046cc:	f7fc fe90 	bl	80013f0 <LCD_WriteReg>
 		LCD_WriteReg(0x00EF,0x1234);// ADD
 80046d0:	f241 2134 	movw	r1, #4660	; 0x1234
 80046d4:	20ef      	movs	r0, #239	; 0xef
 80046d6:	f7fc fe8b 	bl	80013f0 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);
        //LCD_WriteReg(0x0000,0x0001);//开启内部时钟
        LCD_WriteReg(0x0001,0x0100);
 80046da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046de:	2001      	movs	r0, #1
 80046e0:	f7fc fe86 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);//电源开启
 80046e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80046e8:	2002      	movs	r0, #2
 80046ea:	f7fc fe81 	bl	80013f0 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(0<<3) );//65K
 80046ee:	f241 0130 	movw	r1, #4144	; 0x1030
 80046f2:	2003      	movs	r0, #3
 80046f4:	f7fc fe7c 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 80046f8:	2100      	movs	r1, #0
 80046fa:	2004      	movs	r0, #4
 80046fc:	f7fc fe78 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x0202);
 8004700:	f240 2102 	movw	r1, #514	; 0x202
 8004704:	2008      	movs	r0, #8
 8004706:	f7fc fe73 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0009,0x0000);
 800470a:	2100      	movs	r1, #0
 800470c:	2009      	movs	r0, #9
 800470e:	f7fc fe6f 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x000a,0x0000);//display setting
 8004712:	2100      	movs	r1, #0
 8004714:	200a      	movs	r0, #10
 8004716:	f7fc fe6b 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x000c,0x0001);//display setting
 800471a:	2101      	movs	r1, #1
 800471c:	200c      	movs	r0, #12
 800471e:	f7fc fe67 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x000d,0x0000);//0f3c
 8004722:	2100      	movs	r1, #0
 8004724:	200d      	movs	r0, #13
 8004726:	f7fc fe63 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x000f,0x0000);
 800472a:	2100      	movs	r1, #0
 800472c:	200f      	movs	r0, #15
 800472e:	f7fc fe5f 	bl	80013f0 <LCD_WriteReg>
		//电源配置
        LCD_WriteReg(0x0010,0x0000);
 8004732:	2100      	movs	r1, #0
 8004734:	2010      	movs	r0, #16
 8004736:	f7fc fe5b 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0007);
 800473a:	2107      	movs	r1, #7
 800473c:	2011      	movs	r0, #17
 800473e:	f7fc fe57 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x0000);
 8004742:	2100      	movs	r1, #0
 8004744:	2012      	movs	r0, #18
 8004746:	f7fc fe53 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0000);
 800474a:	2100      	movs	r1, #0
 800474c:	2013      	movs	r0, #19
 800474e:	f7fc fe4f 	bl	80013f0 <LCD_WriteReg>
     	LCD_WriteReg(0x0007,0x0001);
 8004752:	2101      	movs	r1, #1
 8004754:	2007      	movs	r0, #7
 8004756:	f7fc fe4b 	bl	80013f0 <LCD_WriteReg>
     	HAL_Delay(50);
 800475a:	2032      	movs	r0, #50	; 0x32
 800475c:	f001 fa92 	bl	8005c84 <HAL_Delay>
        LCD_WriteReg(0x0010,0x1490);
 8004760:	f241 4190 	movw	r1, #5264	; 0x1490
 8004764:	2010      	movs	r0, #16
 8004766:	f7fc fe43 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0227);
 800476a:	f240 2127 	movw	r1, #551	; 0x227
 800476e:	2011      	movs	r0, #17
 8004770:	f7fc fe3e 	bl	80013f0 <LCD_WriteReg>
        HAL_Delay(50);
 8004774:	2032      	movs	r0, #50	; 0x32
 8004776:	f001 fa85 	bl	8005c84 <HAL_Delay>
        LCD_WriteReg(0x0012,0x008A);
 800477a:	218a      	movs	r1, #138	; 0x8a
 800477c:	2012      	movs	r0, #18
 800477e:	f7fc fe37 	bl	80013f0 <LCD_WriteReg>
        HAL_Delay(50);
 8004782:	2032      	movs	r0, #50	; 0x32
 8004784:	f001 fa7e 	bl	8005c84 <HAL_Delay>
        LCD_WriteReg(0x0013,0x1a00);
 8004788:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 800478c:	2013      	movs	r0, #19
 800478e:	f7fc fe2f 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x0006);
 8004792:	2106      	movs	r1, #6
 8004794:	2029      	movs	r0, #41	; 0x29
 8004796:	f7fc fe2b 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x002b,0x000d);
 800479a:	210d      	movs	r1, #13
 800479c:	202b      	movs	r0, #43	; 0x2b
 800479e:	f7fc fe27 	bl	80013f0 <LCD_WriteReg>
        HAL_Delay(50);
 80047a2:	2032      	movs	r0, #50	; 0x32
 80047a4:	f001 fa6e 	bl	8005c84 <HAL_Delay>
        LCD_WriteReg(0x0020,0x0000);
 80047a8:	2100      	movs	r1, #0
 80047aa:	2020      	movs	r0, #32
 80047ac:	f7fc fe20 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 80047b0:	2100      	movs	r1, #0
 80047b2:	2021      	movs	r0, #33	; 0x21
 80047b4:	f7fc fe1c 	bl	80013f0 <LCD_WriteReg>
        HAL_Delay(50);
 80047b8:	2032      	movs	r0, #50	; 0x32
 80047ba:	f001 fa63 	bl	8005c84 <HAL_Delay>
		//伽马校正
        LCD_WriteReg(0x0030,0x0000);
 80047be:	2100      	movs	r1, #0
 80047c0:	2030      	movs	r0, #48	; 0x30
 80047c2:	f7fc fe15 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0604);
 80047c6:	f240 6104 	movw	r1, #1540	; 0x604
 80047ca:	2031      	movs	r0, #49	; 0x31
 80047cc:	f7fc fe10 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0305);
 80047d0:	f240 3105 	movw	r1, #773	; 0x305
 80047d4:	2032      	movs	r0, #50	; 0x32
 80047d6:	f7fc fe0b 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0000);
 80047da:	2100      	movs	r1, #0
 80047dc:	2035      	movs	r0, #53	; 0x35
 80047de:	f7fc fe07 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x0C09);
 80047e2:	f640 4109 	movw	r1, #3081	; 0xc09
 80047e6:	2036      	movs	r0, #54	; 0x36
 80047e8:	f7fc fe02 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0204);
 80047ec:	f44f 7101 	mov.w	r1, #516	; 0x204
 80047f0:	2037      	movs	r0, #55	; 0x37
 80047f2:	f7fc fdfd 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0301);
 80047f6:	f240 3101 	movw	r1, #769	; 0x301
 80047fa:	2038      	movs	r0, #56	; 0x38
 80047fc:	f7fc fdf8 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0707);
 8004800:	f240 7107 	movw	r1, #1799	; 0x707
 8004804:	2039      	movs	r0, #57	; 0x39
 8004806:	f7fc fdf3 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x003c,0x0000);
 800480a:	2100      	movs	r1, #0
 800480c:	203c      	movs	r0, #60	; 0x3c
 800480e:	f7fc fdef 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x003d,0x0a0a);
 8004812:	f640 210a 	movw	r1, #2570	; 0xa0a
 8004816:	203d      	movs	r0, #61	; 0x3d
 8004818:	f7fc fdea 	bl	80013f0 <LCD_WriteReg>
        HAL_Delay(50);
 800481c:	2032      	movs	r0, #50	; 0x32
 800481e:	f001 fa31 	bl	8005c84 <HAL_Delay>
        LCD_WriteReg(0x0050,0x0000); //水平GRAM起始位置
 8004822:	2100      	movs	r1, #0
 8004824:	2050      	movs	r0, #80	; 0x50
 8004826:	f7fc fde3 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00ef); //水平GRAM终止位置
 800482a:	21ef      	movs	r1, #239	; 0xef
 800482c:	2051      	movs	r0, #81	; 0x51
 800482e:	f7fc fddf 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000); //垂直GRAM起始位置
 8004832:	2100      	movs	r1, #0
 8004834:	2052      	movs	r0, #82	; 0x52
 8004836:	f7fc fddb 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013f); //垂直GRAM终止位置
 800483a:	f240 113f 	movw	r1, #319	; 0x13f
 800483e:	2053      	movs	r0, #83	; 0x53
 8004840:	f7fc fdd6 	bl	80013f0 <LCD_WriteReg>

         LCD_WriteReg(0x0060,0xa700);
 8004844:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004848:	2060      	movs	r0, #96	; 0x60
 800484a:	f7fc fdd1 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 800484e:	2101      	movs	r1, #1
 8004850:	2061      	movs	r0, #97	; 0x61
 8004852:	f7fc fdcd 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x006a,0x0000);
 8004856:	2100      	movs	r1, #0
 8004858:	206a      	movs	r0, #106	; 0x6a
 800485a:	f7fc fdc9 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 800485e:	2100      	movs	r1, #0
 8004860:	2080      	movs	r0, #128	; 0x80
 8004862:	f7fc fdc5 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0081,0x0000);
 8004866:	2100      	movs	r1, #0
 8004868:	2081      	movs	r0, #129	; 0x81
 800486a:	f7fc fdc1 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 800486e:	2100      	movs	r1, #0
 8004870:	2082      	movs	r0, #130	; 0x82
 8004872:	f7fc fdbd 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8004876:	2100      	movs	r1, #0
 8004878:	2083      	movs	r0, #131	; 0x83
 800487a:	f7fc fdb9 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 800487e:	2100      	movs	r1, #0
 8004880:	2084      	movs	r0, #132	; 0x84
 8004882:	f7fc fdb5 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8004886:	2100      	movs	r1, #0
 8004888:	2085      	movs	r0, #133	; 0x85
 800488a:	f7fc fdb1 	bl	80013f0 <LCD_WriteReg>

        LCD_WriteReg(0x0090,0x0010);
 800488e:	2110      	movs	r1, #16
 8004890:	2090      	movs	r0, #144	; 0x90
 8004892:	f7fc fdad 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0600);
 8004896:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800489a:	2092      	movs	r0, #146	; 0x92
 800489c:	f7fc fda8 	bl	80013f0 <LCD_WriteReg>
        //开启显示设置
        LCD_WriteReg(0x0007,0x0133);
 80048a0:	f240 1133 	movw	r1, #307	; 0x133
 80048a4:	2007      	movs	r0, #7
 80048a6:	f7fc fda3 	bl	80013f0 <LCD_WriteReg>
 80048aa:	f000 bf86 	b.w	80057ba <LCD_Init+0x3852>
 80048ae:	bf00      	nop
 80048b0:	2000022c 	.word	0x2000022c
	}else if(lcddev.id==0x9320)//测试OK.
 80048b4:	4bce      	ldr	r3, [pc, #824]	; (8004bf0 <LCD_Init+0x2c88>)
 80048b6:	889b      	ldrh	r3, [r3, #4]
 80048b8:	f249 3220 	movw	r2, #37664	; 0x9320
 80048bc:	4293      	cmp	r3, r2
 80048be:	f040 80ad 	bne.w	8004a1c <LCD_Init+0x2ab4>
	{
		LCD_WriteReg(0x00,0x0000);
 80048c2:	2100      	movs	r1, #0
 80048c4:	2000      	movs	r0, #0
 80048c6:	f7fc fd93 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x01,0x0100);	//Driver Output Contral.
 80048ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048ce:	2001      	movs	r0, #1
 80048d0:	f7fc fd8e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);	//LCD Driver Waveform Contral.
 80048d4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80048d8:	2002      	movs	r0, #2
 80048da:	f7fc fd89 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode Set.
 80048de:	f241 0130 	movw	r1, #4144	; 0x1030
 80048e2:	2003      	movs	r0, #3
 80048e4:	f7fc fd84 	bl	80013f0 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04,0x0000);	//Scalling Contral.
 80048e8:	2100      	movs	r1, #0
 80048ea:	2004      	movs	r0, #4
 80048ec:	f7fc fd80 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0202);	//Display Contral 2.(0x0207)
 80048f0:	f240 2102 	movw	r1, #514	; 0x202
 80048f4:	2008      	movs	r0, #8
 80048f6:	f7fc fd7b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000);	//Display Contral 3.(0x0000)
 80048fa:	2100      	movs	r1, #0
 80048fc:	2009      	movs	r0, #9
 80048fe:	f7fc fd77 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
 8004902:	2100      	movs	r1, #0
 8004904:	200a      	movs	r0, #10
 8004906:	f7fc fd73 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
 800490a:	2101      	movs	r1, #1
 800490c:	200c      	movs	r0, #12
 800490e:	f7fc fd6f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0d,0x0000);	//Frame Maker Position.
 8004912:	2100      	movs	r1, #0
 8004914:	200d      	movs	r0, #13
 8004916:	f7fc fd6b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0f,0x0000);	//Extern Display Interface Contral 2.
 800491a:	2100      	movs	r1, #0
 800491c:	200f      	movs	r0, #15
 800491e:	f7fc fd67 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(50);
 8004922:	2032      	movs	r0, #50	; 0x32
 8004924:	f001 f9ae 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0x07,0x0101);	//Display Contral.
 8004928:	f240 1101 	movw	r1, #257	; 0x101
 800492c:	2007      	movs	r0, #7
 800492e:	f7fc fd5f 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(50);
 8004932:	2032      	movs	r0, #50	; 0x32
 8004934:	f001 f9a6 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
 8004938:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 800493c:	2010      	movs	r0, #16
 800493e:	f7fc fd57 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0007);								//Power Control 2.(0x0001)
 8004942:	2107      	movs	r1, #7
 8004944:	2011      	movs	r0, #17
 8004946:	f7fc fd53 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));				//Power Control 3.(0x0138)
 800494a:	f44f 7188 	mov.w	r1, #272	; 0x110
 800494e:	2012      	movs	r0, #18
 8004950:	f7fc fd4e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0b00);								//Power Control 4.
 8004954:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004958:	2013      	movs	r0, #19
 800495a:	f7fc fd49 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0000);								//Power Control 7.
 800495e:	2100      	movs	r1, #0
 8004960:	2029      	movs	r0, #41	; 0x29
 8004962:	f7fc fd45 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0x2b,(1<<14)|(1<<4));
 8004966:	f244 0110 	movw	r1, #16400	; 0x4010
 800496a:	202b      	movs	r0, #43	; 0x2b
 800496c:	f7fc fd40 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x50,0);	//Set X Star
 8004970:	2100      	movs	r1, #0
 8004972:	2050      	movs	r0, #80	; 0x50
 8004974:	f7fc fd3c 	bl	80013f0 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51,239);	//Set Y Star
 8004978:	21ef      	movs	r1, #239	; 0xef
 800497a:	2051      	movs	r0, #81	; 0x51
 800497c:	f7fc fd38 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x52,0);	//Set Y End.t.
 8004980:	2100      	movs	r1, #0
 8004982:	2052      	movs	r0, #82	; 0x52
 8004984:	f7fc fd34 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x53,319);	//
 8004988:	f240 113f 	movw	r1, #319	; 0x13f
 800498c:	2053      	movs	r0, #83	; 0x53
 800498e:	f7fc fd2f 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0x60,0x2700);	//Driver Output Control.
 8004992:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004996:	2060      	movs	r0, #96	; 0x60
 8004998:	f7fc fd2a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x61,0x0001);	//Driver Output Control.
 800499c:	2101      	movs	r1, #1
 800499e:	2061      	movs	r0, #97	; 0x61
 80049a0:	f7fc fd26 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x6a,0x0000);	//Vertical Srcoll Control.
 80049a4:	2100      	movs	r1, #0
 80049a6:	206a      	movs	r0, #106	; 0x6a
 80049a8:	f7fc fd22 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0x80,0x0000);	//Display Position? Partial Display 1.
 80049ac:	2100      	movs	r1, #0
 80049ae:	2080      	movs	r0, #128	; 0x80
 80049b0:	f7fc fd1e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000);	//RAM Address Start? Partial Display 1.
 80049b4:	2100      	movs	r1, #0
 80049b6:	2081      	movs	r0, #129	; 0x81
 80049b8:	f7fc fd1a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000);	//RAM Address End-Partial Display 1.
 80049bc:	2100      	movs	r1, #0
 80049be:	2082      	movs	r0, #130	; 0x82
 80049c0:	f7fc fd16 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000);	//Displsy Position? Partial Display 2.
 80049c4:	2100      	movs	r1, #0
 80049c6:	2083      	movs	r0, #131	; 0x83
 80049c8:	f7fc fd12 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000);	//RAM Address Start? Partial Display 2.
 80049cc:	2100      	movs	r1, #0
 80049ce:	2084      	movs	r0, #132	; 0x84
 80049d0:	f7fc fd0e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000);	//RAM Address End? Partial Display 2.
 80049d4:	2100      	movs	r1, #0
 80049d6:	2085      	movs	r0, #133	; 0x85
 80049d8:	f7fc fd0a 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
 80049dc:	2110      	movs	r1, #16
 80049de:	2090      	movs	r0, #144	; 0x90
 80049e0:	f7fc fd06 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
 80049e4:	2100      	movs	r1, #0
 80049e6:	2092      	movs	r0, #146	; 0x92
 80049e8:	f7fc fd02 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0001);	//Panel Interface Contral 3.
 80049ec:	2101      	movs	r1, #1
 80049ee:	2093      	movs	r0, #147	; 0x93
 80049f0:	f7fc fcfe 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
 80049f4:	f44f 7188 	mov.w	r1, #272	; 0x110
 80049f8:	2095      	movs	r0, #149	; 0x95
 80049fa:	f7fc fcf9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x97,(0<<8));	//
 80049fe:	2100      	movs	r1, #0
 8004a00:	2097      	movs	r0, #151	; 0x97
 8004a02:	f7fc fcf5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x98,0x0000);	//Frame Cycle Contral.
 8004a06:	2100      	movs	r1, #0
 8004a08:	2098      	movs	r0, #152	; 0x98
 8004a0a:	f7fc fcf1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);	//(0x0173)
 8004a0e:	f240 1173 	movw	r1, #371	; 0x173
 8004a12:	2007      	movs	r0, #7
 8004a14:	f7fc fcec 	bl	80013f0 <LCD_WriteReg>
 8004a18:	f000 becf 	b.w	80057ba <LCD_Init+0x3852>
	}else if(lcddev.id==0X9331)//OK |/|/|
 8004a1c:	4b74      	ldr	r3, [pc, #464]	; (8004bf0 <LCD_Init+0x2c88>)
 8004a1e:	889b      	ldrh	r3, [r3, #4]
 8004a20:	f249 3231 	movw	r2, #37681	; 0x9331
 8004a24:	4293      	cmp	r3, r2
 8004a26:	f040 80e5 	bne.w	8004bf4 <LCD_Init+0x2c8c>
	{
		LCD_WriteReg(0x00E7, 0x1014);
 8004a2a:	f241 0114 	movw	r1, #4116	; 0x1014
 8004a2e:	20e7      	movs	r0, #231	; 0xe7
 8004a30:	f7fc fcde 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004a34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a38:	2001      	movs	r0, #1
 8004a3a:	f7fc fcd9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a42:	2002      	movs	r0, #2
 8004a44:	f7fc fcd4 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(1<<3));//65K
 8004a48:	f241 0138 	movw	r1, #4152	; 0x1038
 8004a4c:	2003      	movs	r0, #3
 8004a4e:	f7fc fccf 	bl	80013f0 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004a52:	f240 2102 	movw	r1, #514	; 0x202
 8004a56:	2008      	movs	r0, #8
 8004a58:	f7fc fcca 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	2009      	movs	r0, #9
 8004a60:	f7fc fcc6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004a64:	2100      	movs	r1, #0
 8004a66:	200a      	movs	r0, #10
 8004a68:	f7fc fcc2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	200c      	movs	r0, #12
 8004a70:	f7fc fcbe 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004a74:	2100      	movs	r1, #0
 8004a76:	200d      	movs	r0, #13
 8004a78:	f7fc fcba 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	200f      	movs	r0, #15
 8004a80:	f7fc fcb6 	bl	80013f0 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004a84:	2100      	movs	r1, #0
 8004a86:	2010      	movs	r0, #16
 8004a88:	f7fc fcb2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004a8c:	2107      	movs	r1, #7
 8004a8e:	2011      	movs	r0, #17
 8004a90:	f7fc fcae 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004a94:	2100      	movs	r1, #0
 8004a96:	2012      	movs	r0, #18
 8004a98:	f7fc fcaa 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	2013      	movs	r0, #19
 8004aa0:	f7fc fca6 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004aa4:	20c8      	movs	r0, #200	; 0xc8
 8004aa6:	f001 f8ed 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004aaa:	f241 6190 	movw	r1, #5776	; 0x1690
 8004aae:	2010      	movs	r0, #16
 8004ab0:	f7fc fc9e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004ab4:	f240 2127 	movw	r1, #551	; 0x227
 8004ab8:	2011      	movs	r0, #17
 8004aba:	f7fc fc99 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004abe:	2032      	movs	r0, #50	; 0x32
 8004ac0:	f001 f8e0 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004ac4:	210c      	movs	r1, #12
 8004ac6:	2012      	movs	r0, #18
 8004ac8:	f7fc fc92 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004acc:	2032      	movs	r0, #50	; 0x32
 8004ace:	f001 f8d9 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004ad2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ad6:	2013      	movs	r0, #19
 8004ad8:	f7fc fc8a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004adc:	2111      	movs	r1, #17
 8004ade:	2029      	movs	r0, #41	; 0x29
 8004ae0:	f7fc fc86 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004ae4:	210b      	movs	r1, #11
 8004ae6:	202b      	movs	r0, #43	; 0x2b
 8004ae8:	f7fc fc82 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004aec:	2032      	movs	r0, #50	; 0x32
 8004aee:	f001 f8c9 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004af2:	2100      	movs	r1, #0
 8004af4:	2020      	movs	r0, #32
 8004af6:	f7fc fc7b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004afa:	f240 113f 	movw	r1, #319	; 0x13f
 8004afe:	2021      	movs	r0, #33	; 0x21
 8004b00:	f7fc fc76 	bl	80013f0 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004b04:	2100      	movs	r1, #0
 8004b06:	2030      	movs	r0, #48	; 0x30
 8004b08:	f7fc fc72 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004b0c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004b10:	2031      	movs	r0, #49	; 0x31
 8004b12:	f7fc fc6d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004b16:	2100      	movs	r1, #0
 8004b18:	2032      	movs	r0, #50	; 0x32
 8004b1a:	f7fc fc69 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004b1e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004b22:	2035      	movs	r0, #53	; 0x35
 8004b24:	f7fc fc64 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004b28:	f241 610a 	movw	r1, #5642	; 0x160a
 8004b2c:	2036      	movs	r0, #54	; 0x36
 8004b2e:	f7fc fc5f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004b32:	f240 7107 	movw	r1, #1799	; 0x707
 8004b36:	2037      	movs	r0, #55	; 0x37
 8004b38:	f7fc fc5a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004b3c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004b40:	2038      	movs	r0, #56	; 0x38
 8004b42:	f7fc fc55 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004b46:	f240 7107 	movw	r1, #1799	; 0x707
 8004b4a:	2039      	movs	r0, #57	; 0x39
 8004b4c:	f7fc fc50 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004b50:	f240 4102 	movw	r1, #1026	; 0x402
 8004b54:	203c      	movs	r0, #60	; 0x3c
 8004b56:	f7fc fc4b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004b5a:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004b5e:	203d      	movs	r0, #61	; 0x3d
 8004b60:	f7fc fc46 	bl	80013f0 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004b64:	2100      	movs	r1, #0
 8004b66:	2050      	movs	r0, #80	; 0x50
 8004b68:	f7fc fc42 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004b6c:	21ef      	movs	r1, #239	; 0xef
 8004b6e:	2051      	movs	r0, #81	; 0x51
 8004b70:	f7fc fc3e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004b74:	2100      	movs	r1, #0
 8004b76:	2052      	movs	r0, #82	; 0x52
 8004b78:	f7fc fc3a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004b7c:	f240 113f 	movw	r1, #319	; 0x13f
 8004b80:	2053      	movs	r0, #83	; 0x53
 8004b82:	f7fc fc35 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004b86:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004b8a:	2060      	movs	r0, #96	; 0x60
 8004b8c:	f7fc fc30 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
 8004b90:	2101      	movs	r1, #1
 8004b92:	2061      	movs	r0, #97	; 0x61
 8004b94:	f7fc fc2c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004b98:	2100      	movs	r1, #0
 8004b9a:	206a      	movs	r0, #106	; 0x6a
 8004b9c:	f7fc fc28 	bl	80013f0 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	2080      	movs	r0, #128	; 0x80
 8004ba4:	f7fc fc24 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004ba8:	2100      	movs	r1, #0
 8004baa:	2081      	movs	r0, #129	; 0x81
 8004bac:	f7fc fc20 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	2082      	movs	r0, #130	; 0x82
 8004bb4:	f7fc fc1c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004bb8:	2100      	movs	r1, #0
 8004bba:	2083      	movs	r0, #131	; 0x83
 8004bbc:	f7fc fc18 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	2084      	movs	r0, #132	; 0x84
 8004bc4:	f7fc fc14 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004bc8:	2100      	movs	r1, #0
 8004bca:	2085      	movs	r0, #133	; 0x85
 8004bcc:	f7fc fc10 	bl	80013f0 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004bd0:	2110      	movs	r1, #16
 8004bd2:	2090      	movs	r0, #144	; 0x90
 8004bd4:	f7fc fc0c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004bd8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004bdc:	2092      	movs	r0, #146	; 0x92
 8004bde:	f7fc fc07 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004be2:	f240 1133 	movw	r1, #307	; 0x133
 8004be6:	2007      	movs	r0, #7
 8004be8:	f7fc fc02 	bl	80013f0 <LCD_WriteReg>
 8004bec:	f000 bde5 	b.w	80057ba <LCD_Init+0x3852>
 8004bf0:	2000022c 	.word	0x2000022c
	}else if(lcddev.id==0x5408)
 8004bf4:	4be2      	ldr	r3, [pc, #904]	; (8004f80 <LCD_Init+0x3018>)
 8004bf6:	889b      	ldrh	r3, [r3, #4]
 8004bf8:	f245 4208 	movw	r2, #21512	; 0x5408
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	f040 80a3 	bne.w	8004d48 <LCD_Init+0x2de0>
	{
		LCD_WriteReg(0x01,0x0100);
 8004c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c06:	2001      	movs	r0, #1
 8004c08:	f7fc fbf2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);//LCD Driving Waveform Contral
 8004c0c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004c10:	2002      	movs	r0, #2
 8004c12:	f7fc fbed 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode设置
 8004c16:	f241 0130 	movw	r1, #4144	; 0x1030
 8004c1a:	2003      	movs	r0, #3
 8004c1c:	f7fc fbe8 	bl	80013f0 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04,0x0000); //Scalling Control register
 8004c20:	2100      	movs	r1, #0
 8004c22:	2004      	movs	r0, #4
 8004c24:	f7fc fbe4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0207); //Display Control 2
 8004c28:	f240 2107 	movw	r1, #519	; 0x207
 8004c2c:	2008      	movs	r0, #8
 8004c2e:	f7fc fbdf 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000); //Display Control 3
 8004c32:	2100      	movs	r1, #0
 8004c34:	2009      	movs	r0, #9
 8004c36:	f7fc fbdb 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0A,0x0000); //Frame Cycle Control
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	200a      	movs	r0, #10
 8004c3e:	f7fc fbd7 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0C,0x0000); //External Display Interface Control 1
 8004c42:	2100      	movs	r1, #0
 8004c44:	200c      	movs	r0, #12
 8004c46:	f7fc fbd3 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0D,0x0000); //Frame Maker Position
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	200d      	movs	r0, #13
 8004c4e:	f7fc fbcf 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0F,0x0000); //External Display Interface Control 2
 8004c52:	2100      	movs	r1, #0
 8004c54:	200f      	movs	r0, #15
 8004c56:	f7fc fbcb 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(20);
 8004c5a:	2014      	movs	r0, #20
 8004c5c:	f001 f812 	bl	8005c84 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10,0x16B0); //0x14B0 //Power Control 1
 8004c60:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004c64:	2010      	movs	r0, #16
 8004c66:	f7fc fbc3 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0001); //0x0007 //Power Control 2
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	2011      	movs	r0, #17
 8004c6e:	f7fc fbbf 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x17,0x0001); //0x0000 //Power Control 3
 8004c72:	2101      	movs	r1, #1
 8004c74:	2017      	movs	r0, #23
 8004c76:	f7fc fbbb 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x12,0x0138); //0x013B //Power Control 4
 8004c7a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004c7e:	2012      	movs	r0, #18
 8004c80:	f7fc fbb6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0800); //0x0800 //Power Control 5
 8004c84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c88:	2013      	movs	r0, #19
 8004c8a:	f7fc fbb1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0009); //NVM read data 2
 8004c8e:	2109      	movs	r1, #9
 8004c90:	2029      	movs	r0, #41	; 0x29
 8004c92:	f7fc fbad 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x2a,0x0009); //NVM read data 3
 8004c96:	2109      	movs	r1, #9
 8004c98:	202a      	movs	r0, #42	; 0x2a
 8004c9a:	f7fc fba9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0xa4,0x0000);
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	20a4      	movs	r0, #164	; 0xa4
 8004ca2:	f7fc fba5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x50,0x0000); //设置操作窗口的X轴开始列
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	2050      	movs	r0, #80	; 0x50
 8004caa:	f7fc fba1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x51,0x00EF); //设置操作窗口的X轴结束列
 8004cae:	21ef      	movs	r1, #239	; 0xef
 8004cb0:	2051      	movs	r0, #81	; 0x51
 8004cb2:	f7fc fb9d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x52,0x0000); //设置操作窗口的Y轴开始行
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	2052      	movs	r0, #82	; 0x52
 8004cba:	f7fc fb99 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x53,0x013F); //设置操作窗口的Y轴结束行
 8004cbe:	f240 113f 	movw	r1, #319	; 0x13f
 8004cc2:	2053      	movs	r0, #83	; 0x53
 8004cc4:	f7fc fb94 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x60,0x2700); //Driver Output Control
 8004cc8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004ccc:	2060      	movs	r0, #96	; 0x60
 8004cce:	f7fc fb8f 	bl	80013f0 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61,0x0001); //Driver Output Control
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	2061      	movs	r0, #97	; 0x61
 8004cd6:	f7fc fb8b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x6A,0x0000); //Vertical Scroll Control
 8004cda:	2100      	movs	r1, #0
 8004cdc:	206a      	movs	r0, #106	; 0x6a
 8004cde:	f7fc fb87 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x80,0x0000); //Display Position – Partial Display 1
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	2080      	movs	r0, #128	; 0x80
 8004ce6:	f7fc fb83 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000); //RAM Address Start – Partial Display 1
 8004cea:	2100      	movs	r1, #0
 8004cec:	2081      	movs	r0, #129	; 0x81
 8004cee:	f7fc fb7f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000); //RAM address End - Partial Display 1
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	2082      	movs	r0, #130	; 0x82
 8004cf6:	f7fc fb7b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000); //Display Position – Partial Display 2
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	2083      	movs	r0, #131	; 0x83
 8004cfe:	f7fc fb77 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000); //RAM Address Start – Partial Display 2
 8004d02:	2100      	movs	r1, #0
 8004d04:	2084      	movs	r0, #132	; 0x84
 8004d06:	f7fc fb73 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000); //RAM address End – Partail Display2
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	2085      	movs	r0, #133	; 0x85
 8004d0e:	f7fc fb6f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x90,0x0013); //Frame Cycle Control
 8004d12:	2113      	movs	r1, #19
 8004d14:	2090      	movs	r0, #144	; 0x90
 8004d16:	f7fc fb6b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);  //Panel Interface Control 2
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	2092      	movs	r0, #146	; 0x92
 8004d1e:	f7fc fb67 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0003); //Panel Interface control 3
 8004d22:	2103      	movs	r1, #3
 8004d24:	2093      	movs	r0, #147	; 0x93
 8004d26:	f7fc fb63 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);  //Frame Cycle Control
 8004d2a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004d2e:	2095      	movs	r0, #149	; 0x95
 8004d30:	f7fc fb5e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);
 8004d34:	f240 1173 	movw	r1, #371	; 0x173
 8004d38:	2007      	movs	r0, #7
 8004d3a:	f7fc fb59 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(50);
 8004d3e:	2032      	movs	r0, #50	; 0x32
 8004d40:	f000 ffa0 	bl	8005c84 <HAL_Delay>
 8004d44:	f000 bd39 	b.w	80057ba <LCD_Init+0x3852>
	}
	else if(lcddev.id==0x1505)//OK
 8004d48:	4b8d      	ldr	r3, [pc, #564]	; (8004f80 <LCD_Init+0x3018>)
 8004d4a:	889b      	ldrh	r3, [r3, #4]
 8004d4c:	f241 5205 	movw	r2, #5381	; 0x1505
 8004d50:	4293      	cmp	r3, r2
 8004d52:	f040 8117 	bne.w	8004f84 <LCD_Init+0x301c>
	{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
        LCD_WriteReg(0x0007,0x0000);
 8004d56:	2100      	movs	r1, #0
 8004d58:	2007      	movs	r0, #7
 8004d5a:	f7fc fb49 	bl	80013f0 <LCD_WriteReg>
        HAL_Delay(50);
 8004d5e:	2032      	movs	r0, #50	; 0x32
 8004d60:	f000 ff90 	bl	8005c84 <HAL_Delay>
        LCD_WriteReg(0x0012,0x011C);//0x011A   why need to set several times?
 8004d64:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004d68:	2012      	movs	r0, #18
 8004d6a:	f7fc fb41 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x00A4,0x0001);//NVM
 8004d6e:	2101      	movs	r1, #1
 8004d70:	20a4      	movs	r0, #164	; 0xa4
 8004d72:	f7fc fb3d 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x000F);
 8004d76:	210f      	movs	r1, #15
 8004d78:	2008      	movs	r0, #8
 8004d7a:	f7fc fb39 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x000A,0x0008);
 8004d7e:	2108      	movs	r1, #8
 8004d80:	200a      	movs	r0, #10
 8004d82:	f7fc fb35 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x000D,0x0008);
 8004d86:	2108      	movs	r1, #8
 8004d88:	200d      	movs	r0, #13
 8004d8a:	f7fc fb31 	bl	80013f0 <LCD_WriteReg>
  		//伽马校正
        LCD_WriteReg(0x0030,0x0707);
 8004d8e:	f240 7107 	movw	r1, #1799	; 0x707
 8004d92:	2030      	movs	r0, #48	; 0x30
 8004d94:	f7fc fb2c 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0007); //0x0707
 8004d98:	2107      	movs	r1, #7
 8004d9a:	2031      	movs	r0, #49	; 0x31
 8004d9c:	f7fc fb28 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0603);
 8004da0:	f240 6103 	movw	r1, #1539	; 0x603
 8004da4:	2032      	movs	r0, #50	; 0x32
 8004da6:	f7fc fb23 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0033,0x0700);
 8004daa:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004dae:	2033      	movs	r0, #51	; 0x33
 8004db0:	f7fc fb1e 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0034,0x0202);
 8004db4:	f240 2102 	movw	r1, #514	; 0x202
 8004db8:	2034      	movs	r0, #52	; 0x34
 8004dba:	f7fc fb19 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0002); //?0x0606
 8004dbe:	2102      	movs	r1, #2
 8004dc0:	2035      	movs	r0, #53	; 0x35
 8004dc2:	f7fc fb15 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x1F0F);
 8004dc6:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004dca:	2036      	movs	r0, #54	; 0x36
 8004dcc:	f7fc fb10 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0707); //0x0f0f  0x0105
 8004dd0:	f240 7107 	movw	r1, #1799	; 0x707
 8004dd4:	2037      	movs	r0, #55	; 0x37
 8004dd6:	f7fc fb0b 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0000);
 8004dda:	2100      	movs	r1, #0
 8004ddc:	2038      	movs	r0, #56	; 0x38
 8004dde:	f7fc fb07 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0000);
 8004de2:	2100      	movs	r1, #0
 8004de4:	2039      	movs	r0, #57	; 0x39
 8004de6:	f7fc fb03 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x003A,0x0707);
 8004dea:	f240 7107 	movw	r1, #1799	; 0x707
 8004dee:	203a      	movs	r0, #58	; 0x3a
 8004df0:	f7fc fafe 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x003B,0x0000); //0x0303
 8004df4:	2100      	movs	r1, #0
 8004df6:	203b      	movs	r0, #59	; 0x3b
 8004df8:	f7fc fafa 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x003C,0x0007); //?0x0707
 8004dfc:	2107      	movs	r1, #7
 8004dfe:	203c      	movs	r0, #60	; 0x3c
 8004e00:	f7fc faf6 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x003D,0x0000); //0x1313//0x1f08
 8004e04:	2100      	movs	r1, #0
 8004e06:	203d      	movs	r0, #61	; 0x3d
 8004e08:	f7fc faf2 	bl	80013f0 <LCD_WriteReg>
        HAL_Delay(50);
 8004e0c:	2032      	movs	r0, #50	; 0x32
 8004e0e:	f000 ff39 	bl	8005c84 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0001);
 8004e12:	2101      	movs	r1, #1
 8004e14:	2007      	movs	r0, #7
 8004e16:	f7fc faeb 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0017,0x0001);//开启电源
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	2017      	movs	r0, #23
 8004e1e:	f7fc fae7 	bl	80013f0 <LCD_WriteReg>
        HAL_Delay(50);
 8004e22:	2032      	movs	r0, #50	; 0x32
 8004e24:	f000 ff2e 	bl	8005c84 <HAL_Delay>
  		//电源配置
        LCD_WriteReg(0x0010,0x17A0);
 8004e28:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004e2c:	2010      	movs	r0, #16
 8004e2e:	f7fc fadf 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0217);//reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004e32:	f240 2117 	movw	r1, #535	; 0x217
 8004e36:	2011      	movs	r0, #17
 8004e38:	f7fc fada 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x011E);//0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004e3c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004e40:	2012      	movs	r0, #18
 8004e42:	f7fc fad5 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0F00);//VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004e46:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004e4a:	2013      	movs	r0, #19
 8004e4c:	f7fc fad0 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x002A,0x0000);
 8004e50:	2100      	movs	r1, #0
 8004e52:	202a      	movs	r0, #42	; 0x2a
 8004e54:	f7fc facc 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x000A);//0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004e58:	210a      	movs	r1, #10
 8004e5a:	2029      	movs	r0, #41	; 0x29
 8004e5c:	f7fc fac8 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x013E);// 0x013C  power supply on
 8004e60:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004e64:	2012      	movs	r0, #18
 8004e66:	f7fc fac3 	bl	80013f0 <LCD_WriteReg>
        //Coordinates Control//
        LCD_WriteReg(0x0050,0x0000);//0x0e00
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	2050      	movs	r0, #80	; 0x50
 8004e6e:	f7fc fabf 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00EF);
 8004e72:	21ef      	movs	r1, #239	; 0xef
 8004e74:	2051      	movs	r0, #81	; 0x51
 8004e76:	f7fc fabb 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000);
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	2052      	movs	r0, #82	; 0x52
 8004e7e:	f7fc fab7 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013F);
 8004e82:	f240 113f 	movw	r1, #319	; 0x13f
 8004e86:	2053      	movs	r0, #83	; 0x53
 8004e88:	f7fc fab2 	bl	80013f0 <LCD_WriteReg>
    	//Pannel Image Control//
        LCD_WriteReg(0x0060,0x2700);
 8004e8c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004e90:	2060      	movs	r0, #96	; 0x60
 8004e92:	f7fc faad 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8004e96:	2101      	movs	r1, #1
 8004e98:	2061      	movs	r0, #97	; 0x61
 8004e9a:	f7fc faa9 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x006A,0x0000);
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	206a      	movs	r0, #106	; 0x6a
 8004ea2:	f7fc faa5 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	2080      	movs	r0, #128	; 0x80
 8004eaa:	f7fc faa1 	bl	80013f0 <LCD_WriteReg>
    	//Partial Image Control//
        LCD_WriteReg(0x0081,0x0000);
 8004eae:	2100      	movs	r1, #0
 8004eb0:	2081      	movs	r0, #129	; 0x81
 8004eb2:	f7fc fa9d 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	2082      	movs	r0, #130	; 0x82
 8004eba:	f7fc fa99 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	2083      	movs	r0, #131	; 0x83
 8004ec2:	f7fc fa95 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	2084      	movs	r0, #132	; 0x84
 8004eca:	f7fc fa91 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8004ece:	2100      	movs	r1, #0
 8004ed0:	2085      	movs	r0, #133	; 0x85
 8004ed2:	f7fc fa8d 	bl	80013f0 <LCD_WriteReg>
  		//Panel Interface Control//
        LCD_WriteReg(0x0090,0x0013);//0x0010 frenqucy
 8004ed6:	2113      	movs	r1, #19
 8004ed8:	2090      	movs	r0, #144	; 0x90
 8004eda:	f7fc fa89 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0300);
 8004ede:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004ee2:	2092      	movs	r0, #146	; 0x92
 8004ee4:	f7fc fa84 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0093,0x0005);
 8004ee8:	2105      	movs	r1, #5
 8004eea:	2093      	movs	r0, #147	; 0x93
 8004eec:	f7fc fa80 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0095,0x0000);
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	2095      	movs	r0, #149	; 0x95
 8004ef4:	f7fc fa7c 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0097,0x0000);
 8004ef8:	2100      	movs	r1, #0
 8004efa:	2097      	movs	r0, #151	; 0x97
 8004efc:	f7fc fa78 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0098,0x0000);
 8004f00:	2100      	movs	r1, #0
 8004f02:	2098      	movs	r0, #152	; 0x98
 8004f04:	f7fc fa74 	bl	80013f0 <LCD_WriteReg>

        LCD_WriteReg(0x0001,0x0100);
 8004f08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	f7fc fa6f 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);
 8004f12:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004f16:	2002      	movs	r0, #2
 8004f18:	f7fc fa6a 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 8004f1c:	f241 0138 	movw	r1, #4152	; 0x1038
 8004f20:	2003      	movs	r0, #3
 8004f22:	f7fc fa65 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 8004f26:	2100      	movs	r1, #0
 8004f28:	2004      	movs	r0, #4
 8004f2a:	f7fc fa61 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x000C,0x0000);
 8004f2e:	2100      	movs	r1, #0
 8004f30:	200c      	movs	r0, #12
 8004f32:	f7fc fa5d 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x000F,0x0000);
 8004f36:	2100      	movs	r1, #0
 8004f38:	200f      	movs	r0, #15
 8004f3a:	f7fc fa59 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0020,0x0000);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	2020      	movs	r0, #32
 8004f42:	f7fc fa55 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 8004f46:	2100      	movs	r1, #0
 8004f48:	2021      	movs	r0, #33	; 0x21
 8004f4a:	f7fc fa51 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0007,0x0021);
 8004f4e:	2121      	movs	r1, #33	; 0x21
 8004f50:	2007      	movs	r0, #7
 8004f52:	f7fc fa4d 	bl	80013f0 <LCD_WriteReg>
        HAL_Delay(20);
 8004f56:	2014      	movs	r0, #20
 8004f58:	f000 fe94 	bl	8005c84 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0061);
 8004f5c:	2161      	movs	r1, #97	; 0x61
 8004f5e:	2007      	movs	r0, #7
 8004f60:	f7fc fa46 	bl	80013f0 <LCD_WriteReg>
        HAL_Delay(20);
 8004f64:	2014      	movs	r0, #20
 8004f66:	f000 fe8d 	bl	8005c84 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0173);
 8004f6a:	f240 1173 	movw	r1, #371	; 0x173
 8004f6e:	2007      	movs	r0, #7
 8004f70:	f7fc fa3e 	bl	80013f0 <LCD_WriteReg>
        HAL_Delay(20);
 8004f74:	2014      	movs	r0, #20
 8004f76:	f000 fe85 	bl	8005c84 <HAL_Delay>
 8004f7a:	f000 bc1e 	b.w	80057ba <LCD_Init+0x3852>
 8004f7e:	bf00      	nop
 8004f80:	2000022c 	.word	0x2000022c
	}else if(lcddev.id==0xB505)
 8004f84:	4bef      	ldr	r3, [pc, #956]	; (8005344 <LCD_Init+0x33dc>)
 8004f86:	889b      	ldrh	r3, [r3, #4]
 8004f88:	f24b 5205 	movw	r2, #46341	; 0xb505
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	f040 8102 	bne.w	8005196 <LCD_Init+0x322e>
	{
		LCD_WriteReg(0x0000,0x0000);
 8004f92:	2100      	movs	r1, #0
 8004f94:	2000      	movs	r0, #0
 8004f96:	f7fc fa2b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	f7fc fa27 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	f7fc fa23 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8004faa:	2100      	movs	r1, #0
 8004fac:	2000      	movs	r0, #0
 8004fae:	f7fc fa1f 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0x00a4,0x0001);
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	20a4      	movs	r0, #164	; 0xa4
 8004fb6:	f7fc fa1b 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(20);
 8004fba:	2014      	movs	r0, #20
 8004fbc:	f000 fe62 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8004fc0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004fc4:	2060      	movs	r0, #96	; 0x60
 8004fc6:	f7fc fa13 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8004fca:	f240 2102 	movw	r1, #514	; 0x202
 8004fce:	2008      	movs	r0, #8
 8004fd0:	f7fc fa0e 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0214);
 8004fd4:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004fd8:	2030      	movs	r0, #48	; 0x30
 8004fda:	f7fc fa09 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x3715);
 8004fde:	f243 7115 	movw	r1, #14101	; 0x3715
 8004fe2:	2031      	movs	r0, #49	; 0x31
 8004fe4:	f7fc fa04 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0604);
 8004fe8:	f240 6104 	movw	r1, #1540	; 0x604
 8004fec:	2032      	movs	r0, #50	; 0x32
 8004fee:	f7fc f9ff 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0e16);
 8004ff2:	f640 6116 	movw	r1, #3606	; 0xe16
 8004ff6:	2033      	movs	r0, #51	; 0x33
 8004ff8:	f7fc f9fa 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x2211);
 8004ffc:	f242 2111 	movw	r1, #8721	; 0x2211
 8005000:	2034      	movs	r0, #52	; 0x34
 8005002:	f7fc f9f5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x1500);
 8005006:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 800500a:	2035      	movs	r0, #53	; 0x35
 800500c:	f7fc f9f0 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x8507);
 8005010:	f248 5107 	movw	r1, #34055	; 0x8507
 8005014:	2036      	movs	r0, #54	; 0x36
 8005016:	f7fc f9eb 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x1407);
 800501a:	f241 4107 	movw	r1, #5127	; 0x1407
 800501e:	2037      	movs	r0, #55	; 0x37
 8005020:	f7fc f9e6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x1403);
 8005024:	f241 4103 	movw	r1, #5123	; 0x1403
 8005028:	2038      	movs	r0, #56	; 0x38
 800502a:	f7fc f9e1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0020);
 800502e:	2120      	movs	r1, #32
 8005030:	2039      	movs	r0, #57	; 0x39
 8005032:	f7fc f9dd 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0x0090,0x001a);
 8005036:	211a      	movs	r1, #26
 8005038:	2090      	movs	r0, #144	; 0x90
 800503a:	f7fc f9d9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0010,0x0000);
 800503e:	2100      	movs	r1, #0
 8005040:	2010      	movs	r0, #16
 8005042:	f7fc f9d5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 8005046:	2107      	movs	r1, #7
 8005048:	2011      	movs	r0, #17
 800504a:	f7fc f9d1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 800504e:	2100      	movs	r1, #0
 8005050:	2012      	movs	r0, #18
 8005052:	f7fc f9cd 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 8005056:	2100      	movs	r1, #0
 8005058:	2013      	movs	r0, #19
 800505a:	f7fc f9c9 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(20);
 800505e:	2014      	movs	r0, #20
 8005060:	f000 fe10 	bl	8005c84 <HAL_Delay>

		LCD_WriteReg(0x0010,0x0730);
 8005064:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8005068:	2010      	movs	r0, #16
 800506a:	f7fc f9c1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0137);
 800506e:	f240 1137 	movw	r1, #311	; 0x137
 8005072:	2011      	movs	r0, #17
 8005074:	f7fc f9bc 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(20);
 8005078:	2014      	movs	r0, #20
 800507a:	f000 fe03 	bl	8005c84 <HAL_Delay>

		LCD_WriteReg(0x0012,0x01b8);
 800507e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8005082:	2012      	movs	r0, #18
 8005084:	f7fc f9b4 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(20);
 8005088:	2014      	movs	r0, #20
 800508a:	f000 fdfb 	bl	8005c84 <HAL_Delay>

		LCD_WriteReg(0x0013,0x0f00);
 800508e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005092:	2013      	movs	r0, #19
 8005094:	f7fc f9ac 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x002a,0x0080);
 8005098:	2180      	movs	r1, #128	; 0x80
 800509a:	202a      	movs	r0, #42	; 0x2a
 800509c:	f7fc f9a8 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0029,0x0048);
 80050a0:	2148      	movs	r1, #72	; 0x48
 80050a2:	2029      	movs	r0, #41	; 0x29
 80050a4:	f7fc f9a4 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(20);
 80050a8:	2014      	movs	r0, #20
 80050aa:	f000 fdeb 	bl	8005c84 <HAL_Delay>

		LCD_WriteReg(0x0001,0x0100);
 80050ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050b2:	2001      	movs	r0, #1
 80050b4:	f7fc f99c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 80050b8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80050bc:	2002      	movs	r0, #2
 80050be:	f7fc f997 	bl	80013f0 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 80050c2:	f241 0138 	movw	r1, #4152	; 0x1038
 80050c6:	2003      	movs	r0, #3
 80050c8:	f7fc f992 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 80050cc:	f240 2102 	movw	r1, #514	; 0x202
 80050d0:	2008      	movs	r0, #8
 80050d2:	f7fc f98d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x000a,0x0000);
 80050d6:	2100      	movs	r1, #0
 80050d8:	200a      	movs	r0, #10
 80050da:	f7fc f989 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x000c,0x0000);
 80050de:	2100      	movs	r1, #0
 80050e0:	200c      	movs	r0, #12
 80050e2:	f7fc f985 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x000d,0x0000);
 80050e6:	2100      	movs	r1, #0
 80050e8:	200d      	movs	r0, #13
 80050ea:	f7fc f981 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x000e,0x0030);
 80050ee:	2130      	movs	r1, #48	; 0x30
 80050f0:	200e      	movs	r0, #14
 80050f2:	f7fc f97d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0050,0x0000);
 80050f6:	2100      	movs	r1, #0
 80050f8:	2050      	movs	r0, #80	; 0x50
 80050fa:	f7fc f979 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00ef);
 80050fe:	21ef      	movs	r1, #239	; 0xef
 8005100:	2051      	movs	r0, #81	; 0x51
 8005102:	f7fc f975 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 8005106:	2100      	movs	r1, #0
 8005108:	2052      	movs	r0, #82	; 0x52
 800510a:	f7fc f971 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013f);
 800510e:	f240 113f 	movw	r1, #319	; 0x13f
 8005112:	2053      	movs	r0, #83	; 0x53
 8005114:	f7fc f96c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0x2700);
 8005118:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800511c:	2060      	movs	r0, #96	; 0x60
 800511e:	f7fc f967 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 8005122:	2101      	movs	r1, #1
 8005124:	2061      	movs	r0, #97	; 0x61
 8005126:	f7fc f963 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x006a,0x0000);
 800512a:	2100      	movs	r1, #0
 800512c:	206a      	movs	r0, #106	; 0x6a
 800512e:	f7fc f95f 	bl	80013f0 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090,0X0011);
 8005132:	2111      	movs	r1, #17
 8005134:	2090      	movs	r0, #144	; 0x90
 8005136:	f7fc f95b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 800513a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800513e:	2092      	movs	r0, #146	; 0x92
 8005140:	f7fc f956 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0093,0x0402);
 8005144:	f240 4102 	movw	r1, #1026	; 0x402
 8005148:	2093      	movs	r0, #147	; 0x93
 800514a:	f7fc f951 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0094,0x0002);
 800514e:	2102      	movs	r1, #2
 8005150:	2094      	movs	r0, #148	; 0x94
 8005152:	f7fc f94d 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(20);
 8005156:	2014      	movs	r0, #20
 8005158:	f000 fd94 	bl	8005c84 <HAL_Delay>

		LCD_WriteReg(0x0007,0x0001);
 800515c:	2101      	movs	r1, #1
 800515e:	2007      	movs	r0, #7
 8005160:	f7fc f946 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(20);
 8005164:	2014      	movs	r0, #20
 8005166:	f000 fd8d 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0x0007,0x0061);
 800516a:	2161      	movs	r1, #97	; 0x61
 800516c:	2007      	movs	r0, #7
 800516e:	f7fc f93f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0173);
 8005172:	f240 1173 	movw	r1, #371	; 0x173
 8005176:	2007      	movs	r0, #7
 8005178:	f7fc f93a 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0x0020,0x0000);
 800517c:	2100      	movs	r1, #0
 800517e:	2020      	movs	r0, #32
 8005180:	f7fc f936 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0021,0x0000);
 8005184:	2100      	movs	r1, #0
 8005186:	2021      	movs	r0, #33	; 0x21
 8005188:	f7fc f932 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x22);
 800518c:	2122      	movs	r1, #34	; 0x22
 800518e:	2000      	movs	r0, #0
 8005190:	f7fc f92e 	bl	80013f0 <LCD_WriteReg>
 8005194:	e311      	b.n	80057ba <LCD_Init+0x3852>
	}else if(lcddev.id==0xC505)
 8005196:	4b6b      	ldr	r3, [pc, #428]	; (8005344 <LCD_Init+0x33dc>)
 8005198:	889b      	ldrh	r3, [r3, #4]
 800519a:	f24c 5205 	movw	r2, #50437	; 0xc505
 800519e:	4293      	cmp	r3, r2
 80051a0:	f040 80d2 	bne.w	8005348 <LCD_Init+0x33e0>
	{
		LCD_WriteReg(0x0000,0x0000);
 80051a4:	2100      	movs	r1, #0
 80051a6:	2000      	movs	r0, #0
 80051a8:	f7fc f922 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80051ac:	2100      	movs	r1, #0
 80051ae:	2000      	movs	r0, #0
 80051b0:	f7fc f91e 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(20);
 80051b4:	2014      	movs	r0, #20
 80051b6:	f000 fd65 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0x0000,0x0000);
 80051ba:	2100      	movs	r1, #0
 80051bc:	2000      	movs	r0, #0
 80051be:	f7fc f917 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80051c2:	2100      	movs	r1, #0
 80051c4:	2000      	movs	r0, #0
 80051c6:	f7fc f913 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80051ca:	2100      	movs	r1, #0
 80051cc:	2000      	movs	r0, #0
 80051ce:	f7fc f90f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80051d2:	2100      	movs	r1, #0
 80051d4:	2000      	movs	r0, #0
 80051d6:	f7fc f90b 	bl	80013f0 <LCD_WriteReg>
 		LCD_WriteReg(0x00a4,0x0001);
 80051da:	2101      	movs	r1, #1
 80051dc:	20a4      	movs	r0, #164	; 0xa4
 80051de:	f7fc f907 	bl	80013f0 <LCD_WriteReg>
 		HAL_Delay(20);
 80051e2:	2014      	movs	r0, #20
 80051e4:	f000 fd4e 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 80051e8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80051ec:	2060      	movs	r0, #96	; 0x60
 80051ee:	f7fc f8ff 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0806);
 80051f2:	f640 0106 	movw	r1, #2054	; 0x806
 80051f6:	2008      	movs	r0, #8
 80051f8:	f7fc f8fa 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0703);//gamma setting
 80051fc:	f240 7103 	movw	r1, #1795	; 0x703
 8005200:	2030      	movs	r0, #48	; 0x30
 8005202:	f7fc f8f5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0001);
 8005206:	2101      	movs	r1, #1
 8005208:	2031      	movs	r0, #49	; 0x31
 800520a:	f7fc f8f1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0004);
 800520e:	2104      	movs	r1, #4
 8005210:	2032      	movs	r0, #50	; 0x32
 8005212:	f7fc f8ed 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0102);
 8005216:	f44f 7181 	mov.w	r1, #258	; 0x102
 800521a:	2033      	movs	r0, #51	; 0x33
 800521c:	f7fc f8e8 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x0300);
 8005220:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005224:	2034      	movs	r0, #52	; 0x34
 8005226:	f7fc f8e3 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0103);
 800522a:	f240 1103 	movw	r1, #259	; 0x103
 800522e:	2035      	movs	r0, #53	; 0x35
 8005230:	f7fc f8de 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x001F);
 8005234:	211f      	movs	r1, #31
 8005236:	2036      	movs	r0, #54	; 0x36
 8005238:	f7fc f8da 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0703);
 800523c:	f240 7103 	movw	r1, #1795	; 0x703
 8005240:	2037      	movs	r0, #55	; 0x37
 8005242:	f7fc f8d5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0001);
 8005246:	2101      	movs	r1, #1
 8005248:	2038      	movs	r0, #56	; 0x38
 800524a:	f7fc f8d1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0004);
 800524e:	2104      	movs	r1, #4
 8005250:	2039      	movs	r0, #57	; 0x39
 8005252:	f7fc f8cd 	bl	80013f0 <LCD_WriteReg>



		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8005256:	2115      	movs	r1, #21
 8005258:	2090      	movs	r0, #144	; 0x90
 800525a:	f7fc f8c9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 800525e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005262:	2010      	movs	r0, #16
 8005264:	f7fc f8c4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0247);	//DC1,DC0,VC
 8005268:	f240 2147 	movw	r1, #583	; 0x247
 800526c:	2011      	movs	r0, #17
 800526e:	f7fc f8bf 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 8005272:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8005276:	2012      	movs	r0, #18
 8005278:	f7fc f8ba 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 800527c:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8005280:	2013      	movs	r0, #19
 8005282:	f7fc f8b5 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(120);
 8005286:	2078      	movs	r0, #120	; 0x78
 8005288:	f000 fcfc 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 800528c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005290:	2001      	movs	r0, #1
 8005292:	f7fc f8ad 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800529a:	2002      	movs	r0, #2
 800529c:	f7fc f8a8 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80052a0:	f241 0130 	movw	r1, #4144	; 0x1030
 80052a4:	2003      	movs	r0, #3
 80052a6:	f7fc f8a3 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 80052aa:	2108      	movs	r1, #8
 80052ac:	200a      	movs	r0, #10
 80052ae:	f7fc f89f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80052b2:	2100      	movs	r1, #0
 80052b4:	200c      	movs	r0, #12
 80052b6:	f7fc f89b 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 80052ba:	2120      	movs	r1, #32
 80052bc:	200e      	movs	r0, #14
 80052be:	f7fc f897 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80052c2:	2100      	movs	r1, #0
 80052c4:	200f      	movs	r0, #15
 80052c6:	f7fc f893 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 80052ca:	2100      	movs	r1, #0
 80052cc:	2020      	movs	r0, #32
 80052ce:	f7fc f88f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 80052d2:	2100      	movs	r1, #0
 80052d4:	2021      	movs	r0, #33	; 0x21
 80052d6:	f7fc f88b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x002A,0x003D);	//vcom2
 80052da:	213d      	movs	r1, #61	; 0x3d
 80052dc:	202a      	movs	r0, #42	; 0x2a
 80052de:	f7fc f887 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(20);
 80052e2:	2014      	movs	r0, #20
 80052e4:	f000 fcce 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 80052e8:	212d      	movs	r1, #45	; 0x2d
 80052ea:	2029      	movs	r0, #41	; 0x29
 80052ec:	f7fc f880 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 80052f0:	2100      	movs	r1, #0
 80052f2:	2050      	movs	r0, #80	; 0x50
 80052f4:	f7fc f87c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 80052f8:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 80052fc:	2051      	movs	r0, #81	; 0x51
 80052fe:	f7fc f877 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005302:	2100      	movs	r1, #0
 8005304:	2052      	movs	r0, #82	; 0x52
 8005306:	f7fc f873 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800530a:	f240 113f 	movw	r1, #319	; 0x13f
 800530e:	2053      	movs	r0, #83	; 0x53
 8005310:	f7fc f86e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005314:	2100      	movs	r1, #0
 8005316:	2061      	movs	r0, #97	; 0x61
 8005318:	f7fc f86a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800531c:	2100      	movs	r1, #0
 800531e:	206a      	movs	r0, #106	; 0x6a
 8005320:	f7fc f866 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0300);
 8005324:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005328:	2092      	movs	r0, #146	; 0x92
 800532a:	f7fc f861 	bl	80013f0 <LCD_WriteReg>

 		LCD_WriteReg(0x0093, 0x0005);
 800532e:	2105      	movs	r1, #5
 8005330:	2093      	movs	r0, #147	; 0x93
 8005332:	f7fc f85d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8005336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800533a:	2007      	movs	r0, #7
 800533c:	f7fc f858 	bl	80013f0 <LCD_WriteReg>
 8005340:	e23b      	b.n	80057ba <LCD_Init+0x3852>
 8005342:	bf00      	nop
 8005344:	2000022c 	.word	0x2000022c
	}else if(lcddev.id==0x4531)//OK |/|/|
 8005348:	4bbb      	ldr	r3, [pc, #748]	; (8005638 <LCD_Init+0x36d0>)
 800534a:	889b      	ldrh	r3, [r3, #4]
 800534c:	f244 5231 	movw	r2, #17713	; 0x4531
 8005350:	4293      	cmp	r3, r2
 8005352:	f040 80ba 	bne.w	80054ca <LCD_Init+0x3562>
	{
		LCD_WriteReg(0X00,0X0001);
 8005356:	2101      	movs	r1, #1
 8005358:	2000      	movs	r0, #0
 800535a:	f7fc f849 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(10);
 800535e:	200a      	movs	r0, #10
 8005360:	f000 fc90 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0X10,0X1628);
 8005364:	f241 6128 	movw	r1, #5672	; 0x1628
 8005368:	2010      	movs	r0, #16
 800536a:	f7fc f841 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X000e);//0x0006
 800536e:	210e      	movs	r1, #14
 8005370:	2012      	movs	r0, #18
 8005372:	f7fc f83d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X0A39);
 8005376:	f640 2139 	movw	r1, #2617	; 0xa39
 800537a:	2013      	movs	r0, #19
 800537c:	f7fc f838 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(10);
 8005380:	200a      	movs	r0, #10
 8005382:	f000 fc7f 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0X11,0X0040);
 8005386:	2140      	movs	r1, #64	; 0x40
 8005388:	2011      	movs	r0, #17
 800538a:	f7fc f831 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X15,0X0050);
 800538e:	2150      	movs	r1, #80	; 0x50
 8005390:	2015      	movs	r0, #21
 8005392:	f7fc f82d 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(10);
 8005396:	200a      	movs	r0, #10
 8005398:	f000 fc74 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0X12,0X001e);//16
 800539c:	211e      	movs	r1, #30
 800539e:	2012      	movs	r0, #18
 80053a0:	f7fc f826 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(10);
 80053a4:	200a      	movs	r0, #10
 80053a6:	f000 fc6d 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0X10,0X1620);
 80053aa:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 80053ae:	2010      	movs	r0, #16
 80053b0:	f7fc f81e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X2A39);
 80053b4:	f642 2139 	movw	r1, #10809	; 0x2a39
 80053b8:	2013      	movs	r0, #19
 80053ba:	f7fc f819 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(10);
 80053be:	200a      	movs	r0, #10
 80053c0:	f000 fc60 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0X01,0X0100);
 80053c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053c8:	2001      	movs	r0, #1
 80053ca:	f7fc f811 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 80053ce:	f44f 7140 	mov.w	r1, #768	; 0x300
 80053d2:	2002      	movs	r0, #2
 80053d4:	f7fc f80c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1038);//改变方向的
 80053d8:	f241 0138 	movw	r1, #4152	; 0x1038
 80053dc:	2003      	movs	r0, #3
 80053de:	f7fc f807 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0202);
 80053e2:	f240 2102 	movw	r1, #514	; 0x202
 80053e6:	2008      	movs	r0, #8
 80053e8:	f7fc f802 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 80053ec:	2108      	movs	r1, #8
 80053ee:	200a      	movs	r0, #10
 80053f0:	f7fb fffe 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X30,0X0000);
 80053f4:	2100      	movs	r1, #0
 80053f6:	2030      	movs	r0, #48	; 0x30
 80053f8:	f7fb fffa 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 80053fc:	f240 4102 	movw	r1, #1026	; 0x402
 8005400:	2031      	movs	r0, #49	; 0x31
 8005402:	f7fb fff5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0106);
 8005406:	f44f 7183 	mov.w	r1, #262	; 0x106
 800540a:	2032      	movs	r0, #50	; 0x32
 800540c:	f7fb fff0 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0503);
 8005410:	f240 5103 	movw	r1, #1283	; 0x503
 8005414:	2033      	movs	r0, #51	; 0x33
 8005416:	f7fb ffeb 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0104);
 800541a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800541e:	2034      	movs	r0, #52	; 0x34
 8005420:	f7fb ffe6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0301);
 8005424:	f240 3101 	movw	r1, #769	; 0x301
 8005428:	2035      	movs	r0, #53	; 0x35
 800542a:	f7fb ffe1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 800542e:	f240 7107 	movw	r1, #1799	; 0x707
 8005432:	2036      	movs	r0, #54	; 0x36
 8005434:	f7fb ffdc 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 8005438:	f240 3105 	movw	r1, #773	; 0x305
 800543c:	2037      	movs	r0, #55	; 0x37
 800543e:	f7fb ffd7 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0208);
 8005442:	f44f 7102 	mov.w	r1, #520	; 0x208
 8005446:	2038      	movs	r0, #56	; 0x38
 8005448:	f7fb ffd2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0F0B);
 800544c:	f640 710b 	movw	r1, #3851	; 0xf0b
 8005450:	2039      	movs	r0, #57	; 0x39
 8005452:	f7fb ffcd 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X41,0X0002);
 8005456:	2102      	movs	r1, #2
 8005458:	2041      	movs	r0, #65	; 0x41
 800545a:	f7fb ffc9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X60,0X2700);
 800545e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005462:	2060      	movs	r0, #96	; 0x60
 8005464:	f7fb ffc4 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8005468:	2101      	movs	r1, #1
 800546a:	2061      	movs	r0, #97	; 0x61
 800546c:	f7fb ffc0 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X0210);
 8005470:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005474:	2090      	movs	r0, #144	; 0x90
 8005476:	f7fb ffbb 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X010A);
 800547a:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800547e:	2092      	movs	r0, #146	; 0x92
 8005480:	f7fb ffb6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0004);
 8005484:	2104      	movs	r1, #4
 8005486:	2093      	movs	r0, #147	; 0x93
 8005488:	f7fb ffb2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0100);
 800548c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005490:	20a0      	movs	r0, #160	; 0xa0
 8005492:	f7fb ffad 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 8005496:	2101      	movs	r1, #1
 8005498:	2007      	movs	r0, #7
 800549a:	f7fb ffa9 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 800549e:	2121      	movs	r1, #33	; 0x21
 80054a0:	2007      	movs	r0, #7
 80054a2:	f7fb ffa5 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 80054a6:	2123      	movs	r1, #35	; 0x23
 80054a8:	2007      	movs	r0, #7
 80054aa:	f7fb ffa1 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 80054ae:	2133      	movs	r1, #51	; 0x33
 80054b0:	2007      	movs	r0, #7
 80054b2:	f7fb ff9d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 80054b6:	f240 1133 	movw	r1, #307	; 0x133
 80054ba:	2007      	movs	r0, #7
 80054bc:	f7fb ff98 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0000);
 80054c0:	2100      	movs	r1, #0
 80054c2:	20a0      	movs	r0, #160	; 0xa0
 80054c4:	f7fb ff94 	bl	80013f0 <LCD_WriteReg>
 80054c8:	e177      	b.n	80057ba <LCD_Init+0x3852>
	}else if(lcddev.id==0x4535)
 80054ca:	4b5b      	ldr	r3, [pc, #364]	; (8005638 <LCD_Init+0x36d0>)
 80054cc:	889b      	ldrh	r3, [r3, #4]
 80054ce:	f244 5235 	movw	r2, #17717	; 0x4535
 80054d2:	4293      	cmp	r3, r2
 80054d4:	f040 80b2 	bne.w	800563c <LCD_Init+0x36d4>
	{
		LCD_WriteReg(0X15,0X0030);
 80054d8:	2130      	movs	r1, #48	; 0x30
 80054da:	2015      	movs	r0, #21
 80054dc:	f7fb ff88 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X9A,0X0010);
 80054e0:	2110      	movs	r1, #16
 80054e2:	209a      	movs	r0, #154	; 0x9a
 80054e4:	f7fb ff84 	bl	80013f0 <LCD_WriteReg>
 		LCD_WriteReg(0X11,0X0020);
 80054e8:	2120      	movs	r1, #32
 80054ea:	2011      	movs	r0, #17
 80054ec:	f7fb ff80 	bl	80013f0 <LCD_WriteReg>
 		LCD_WriteReg(0X10,0X3428);
 80054f0:	f243 4128 	movw	r1, #13352	; 0x3428
 80054f4:	2010      	movs	r0, #16
 80054f6:	f7fb ff7b 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X0002);//16
 80054fa:	2102      	movs	r1, #2
 80054fc:	2012      	movs	r0, #18
 80054fe:	f7fb ff77 	bl	80013f0 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X1038);
 8005502:	f241 0138 	movw	r1, #4152	; 0x1038
 8005506:	2013      	movs	r0, #19
 8005508:	f7fb ff72 	bl	80013f0 <LCD_WriteReg>
 		HAL_Delay(40);
 800550c:	2028      	movs	r0, #40	; 0x28
 800550e:	f000 fbb9 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0X12,0X0012);//16
 8005512:	2112      	movs	r1, #18
 8005514:	2012      	movs	r0, #18
 8005516:	f7fb ff6b 	bl	80013f0 <LCD_WriteReg>
		HAL_Delay(40);
 800551a:	2028      	movs	r0, #40	; 0x28
 800551c:	f000 fbb2 	bl	8005c84 <HAL_Delay>
  		LCD_WriteReg(0X10,0X3420);
 8005520:	f243 4120 	movw	r1, #13344	; 0x3420
 8005524:	2010      	movs	r0, #16
 8005526:	f7fb ff63 	bl	80013f0 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X3038);
 800552a:	f243 0138 	movw	r1, #12344	; 0x3038
 800552e:	2013      	movs	r0, #19
 8005530:	f7fb ff5e 	bl	80013f0 <LCD_WriteReg>
 		HAL_Delay(70);
 8005534:	2046      	movs	r0, #70	; 0x46
 8005536:	f000 fba5 	bl	8005c84 <HAL_Delay>
		LCD_WriteReg(0X30,0X0000);
 800553a:	2100      	movs	r1, #0
 800553c:	2030      	movs	r0, #48	; 0x30
 800553e:	f7fb ff57 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 8005542:	f240 4102 	movw	r1, #1026	; 0x402
 8005546:	2031      	movs	r0, #49	; 0x31
 8005548:	f7fb ff52 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0307);
 800554c:	f240 3107 	movw	r1, #775	; 0x307
 8005550:	2032      	movs	r0, #50	; 0x32
 8005552:	f7fb ff4d 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0304);
 8005556:	f44f 7141 	mov.w	r1, #772	; 0x304
 800555a:	2033      	movs	r0, #51	; 0x33
 800555c:	f7fb ff48 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0004);
 8005560:	2104      	movs	r1, #4
 8005562:	2034      	movs	r0, #52	; 0x34
 8005564:	f7fb ff44 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0401);
 8005568:	f240 4101 	movw	r1, #1025	; 0x401
 800556c:	2035      	movs	r0, #53	; 0x35
 800556e:	f7fb ff3f 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 8005572:	f240 7107 	movw	r1, #1799	; 0x707
 8005576:	2036      	movs	r0, #54	; 0x36
 8005578:	f7fb ff3a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 800557c:	f240 3105 	movw	r1, #773	; 0x305
 8005580:	2037      	movs	r0, #55	; 0x37
 8005582:	f7fb ff35 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0610);
 8005586:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800558a:	2038      	movs	r0, #56	; 0x38
 800558c:	f7fb ff30 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0610);
 8005590:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005594:	2039      	movs	r0, #57	; 0x39
 8005596:	f7fb ff2b 	bl	80013f0 <LCD_WriteReg>

		LCD_WriteReg(0X01,0X0100);
 800559a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800559e:	2001      	movs	r0, #1
 80055a0:	f7fb ff26 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 80055a4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80055a8:	2002      	movs	r0, #2
 80055aa:	f7fb ff21 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1030);//改变方向的
 80055ae:	f241 0130 	movw	r1, #4144	; 0x1030
 80055b2:	2003      	movs	r0, #3
 80055b4:	f7fb ff1c 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0808);
 80055b8:	f640 0108 	movw	r1, #2056	; 0x808
 80055bc:	2008      	movs	r0, #8
 80055be:	f7fb ff17 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 80055c2:	2108      	movs	r1, #8
 80055c4:	200a      	movs	r0, #10
 80055c6:	f7fb ff13 	bl	80013f0 <LCD_WriteReg>
 		LCD_WriteReg(0X60,0X2700);
 80055ca:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80055ce:	2060      	movs	r0, #96	; 0x60
 80055d0:	f7fb ff0e 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 80055d4:	2101      	movs	r1, #1
 80055d6:	2061      	movs	r0, #97	; 0x61
 80055d8:	f7fb ff0a 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X013E);
 80055dc:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80055e0:	2090      	movs	r0, #144	; 0x90
 80055e2:	f7fb ff05 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X0100);
 80055e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055ea:	2092      	movs	r0, #146	; 0x92
 80055ec:	f7fb ff00 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0100);
 80055f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055f4:	2093      	movs	r0, #147	; 0x93
 80055f6:	f7fb fefb 	bl	80013f0 <LCD_WriteReg>
 		LCD_WriteReg(0XA0,0X3000);
 80055fa:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80055fe:	20a0      	movs	r0, #160	; 0xa0
 8005600:	f7fb fef6 	bl	80013f0 <LCD_WriteReg>
 		LCD_WriteReg(0XA3,0X0010);
 8005604:	2110      	movs	r1, #16
 8005606:	20a3      	movs	r0, #163	; 0xa3
 8005608:	f7fb fef2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 800560c:	2101      	movs	r1, #1
 800560e:	2007      	movs	r0, #7
 8005610:	f7fb feee 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 8005614:	2121      	movs	r1, #33	; 0x21
 8005616:	2007      	movs	r0, #7
 8005618:	f7fb feea 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 800561c:	2123      	movs	r1, #35	; 0x23
 800561e:	2007      	movs	r0, #7
 8005620:	f7fb fee6 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 8005624:	2133      	movs	r1, #51	; 0x33
 8005626:	2007      	movs	r0, #7
 8005628:	f7fb fee2 	bl	80013f0 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 800562c:	f240 1133 	movw	r1, #307	; 0x133
 8005630:	2007      	movs	r0, #7
 8005632:	f7fb fedd 	bl	80013f0 <LCD_WriteReg>
 8005636:	e0c0      	b.n	80057ba <LCD_Init+0x3852>
 8005638:	2000022c 	.word	0x2000022c
	}else if(lcddev.id==0X1963)
 800563c:	4b66      	ldr	r3, [pc, #408]	; (80057d8 <LCD_Init+0x3870>)
 800563e:	889b      	ldrh	r3, [r3, #4]
 8005640:	f641 1263 	movw	r2, #6499	; 0x1963
 8005644:	4293      	cmp	r3, r2
 8005646:	f040 80b8 	bne.w	80057ba <LCD_Init+0x3852>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800564a:	20e2      	movs	r0, #226	; 0xe2
 800564c:	f7fb fea2 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 8005650:	201d      	movs	r0, #29
 8005652:	f7fb feaf 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8005656:	2002      	movs	r0, #2
 8005658:	f7fb feac 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 800565c:	2004      	movs	r0, #4
 800565e:	f7fb fea9 	bl	80013b4 <LCD_WR_DATA>
		delay_us(100);
 8005662:	2064      	movs	r0, #100	; 0x64
 8005664:	f7fb fe78 	bl	8001358 <delay_us>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005668:	20e0      	movs	r0, #224	; 0xe0
 800566a:	f7fb fe93 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800566e:	2001      	movs	r0, #1
 8005670:	f7fb fea0 	bl	80013b4 <LCD_WR_DATA>
		HAL_Delay(10);
 8005674:	200a      	movs	r0, #10
 8005676:	f000 fb05 	bl	8005c84 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 800567a:	20e0      	movs	r0, #224	; 0xe0
 800567c:	f7fb fe8a 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8005680:	2003      	movs	r0, #3
 8005682:	f7fb fe97 	bl	80013b4 <LCD_WR_DATA>
		HAL_Delay(12);
 8005686:	200c      	movs	r0, #12
 8005688:	f000 fafc 	bl	8005c84 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 800568c:	2001      	movs	r0, #1
 800568e:	f7fb fe81 	bl	8001394 <LCD_WR_REG>
		HAL_Delay(10);
 8005692:	200a      	movs	r0, #10
 8005694:	f000 faf6 	bl	8005c84 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005698:	20e6      	movs	r0, #230	; 0xe6
 800569a:	f7fb fe7b 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800569e:	202f      	movs	r0, #47	; 0x2f
 80056a0:	f7fb fe88 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 80056a4:	20ff      	movs	r0, #255	; 0xff
 80056a6:	f7fb fe85 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 80056aa:	20ff      	movs	r0, #255	; 0xff
 80056ac:	f7fb fe82 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 80056b0:	20b0      	movs	r0, #176	; 0xb0
 80056b2:	f7fb fe6f 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80056b6:	2020      	movs	r0, #32
 80056b8:	f7fb fe7c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 80056bc:	2000      	movs	r0, #0
 80056be:	f7fb fe79 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 80056c2:	2001      	movs	r0, #1
 80056c4:	f7fb fe76 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80056c8:	f240 10df 	movw	r0, #479	; 0x1df
 80056cc:	f7fb fe72 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 80056d0:	2003      	movs	r0, #3
 80056d2:	f7fb fe6f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80056d6:	f240 301f 	movw	r0, #799	; 0x31f
 80056da:	f7fb fe6b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 80056de:	2000      	movs	r0, #0
 80056e0:	f7fb fe68 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 80056e4:	20b4      	movs	r0, #180	; 0xb4
 80056e6:	f7fb fe55 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 80056ea:	2002      	movs	r0, #2
 80056ec:	f7fb fe62 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 80056f0:	f240 20df 	movw	r0, #735	; 0x2df
 80056f4:	f7fb fe5e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 80056f8:	2000      	movs	r0, #0
 80056fa:	f7fb fe5b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 80056fe:	202e      	movs	r0, #46	; 0x2e
 8005700:	f7fb fe58 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005704:	2000      	movs	r0, #0
 8005706:	f7fb fe55 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800570a:	2000      	movs	r0, #0
 800570c:	f7fb fe52 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005710:	2000      	movs	r0, #0
 8005712:	f7fb fe4f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005716:	2000      	movs	r0, #0
 8005718:	f7fb fe4c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 800571c:	20b6      	movs	r0, #182	; 0xb6
 800571e:	f7fb fe39 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005722:	2003      	movs	r0, #3
 8005724:	f7fb fe46 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 8005728:	f44f 7053 	mov.w	r0, #844	; 0x34c
 800572c:	f7fb fe42 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 8005730:	2000      	movs	r0, #0
 8005732:	f7fb fe3f 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 8005736:	2017      	movs	r0, #23
 8005738:	f7fb fe3c 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 800573c:	2015      	movs	r0, #21
 800573e:	f7fb fe39 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005742:	2000      	movs	r0, #0
 8005744:	f7fb fe36 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005748:	2000      	movs	r0, #0
 800574a:	f7fb fe33 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 800574e:	20f0      	movs	r0, #240	; 0xf0
 8005750:	f7fb fe20 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8005754:	2003      	movs	r0, #3
 8005756:	f7fb fe2d 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 800575a:	2029      	movs	r0, #41	; 0x29
 800575c:	f7fb fe1a 	bl	8001394 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005760:	20d0      	movs	r0, #208	; 0xd0
 8005762:	f7fb fe17 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8005766:	2000      	movs	r0, #0
 8005768:	f7fb fe24 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 800576c:	20be      	movs	r0, #190	; 0xbe
 800576e:	f7fb fe11 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8005772:	2005      	movs	r0, #5
 8005774:	f7fb fe1e 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005778:	20fe      	movs	r0, #254	; 0xfe
 800577a:	f7fb fe1b 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 800577e:	2001      	movs	r0, #1
 8005780:	f7fb fe18 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 8005784:	2000      	movs	r0, #0
 8005786:	f7fb fe15 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 800578a:	2000      	movs	r0, #0
 800578c:	f7fb fe12 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 8005790:	2000      	movs	r0, #0
 8005792:	f7fb fe0f 	bl	80013b4 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005796:	20b8      	movs	r0, #184	; 0xb8
 8005798:	f7fb fdfc 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 800579c:	2003      	movs	r0, #3
 800579e:	f7fb fe09 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 80057a2:	2001      	movs	r0, #1
 80057a4:	f7fb fe06 	bl	80013b4 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 80057a8:	20ba      	movs	r0, #186	; 0xba
 80057aa:	f7fb fdf3 	bl	8001394 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 80057ae:	2001      	movs	r0, #1
 80057b0:	f7fb fe00 	bl	80013b4 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 80057b4:	2064      	movs	r0, #100	; 0x64
 80057b6:	f7fc fa97 	bl	8001ce8 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		//默认为竖屏
 80057ba:	2000      	movs	r0, #0
 80057bc:	f7fc fac8 	bl	8001d50 <LCD_Display_Dir>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);				//点亮背光
 80057c0:	2201      	movs	r2, #1
 80057c2:	2101      	movs	r1, #1
 80057c4:	4805      	ldr	r0, [pc, #20]	; (80057dc <LCD_Init+0x3874>)
 80057c6:	f000 fe42 	bl	800644e <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);
 80057ca:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80057ce:	f000 f807 	bl	80057e0 <LCD_Clear>
}
 80057d2:	bf00      	nop
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	2000022c 	.word	0x2000022c
 80057dc:	40010c00 	.word	0x40010c00

080057e0 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint16_t color)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	80fb      	strh	r3, [r7, #6]
	uint32_t index=0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 80057ee:	4b21      	ldr	r3, [pc, #132]	; (8005874 <LCD_Clear+0x94>)
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 80057f4:	4b1f      	ldr	r3, [pc, #124]	; (8005874 <LCD_Clear+0x94>)
 80057f6:	885b      	ldrh	r3, [r3, #2]
 80057f8:	461a      	mov	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	fb02 f303 	mul.w	r3, r2, r3
 8005800:	60bb      	str	r3, [r7, #8]
	if((lcddev.id==0X6804)&&(lcddev.dir==1))//6804横屏的时候特殊处理
 8005802:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <LCD_Clear+0x94>)
 8005804:	889b      	ldrh	r3, [r3, #4]
 8005806:	f646 0204 	movw	r2, #26628	; 0x6804
 800580a:	4293      	cmp	r3, r2
 800580c:	d11a      	bne.n	8005844 <LCD_Clear+0x64>
 800580e:	4b19      	ldr	r3, [pc, #100]	; (8005874 <LCD_Clear+0x94>)
 8005810:	799b      	ldrb	r3, [r3, #6]
 8005812:	2b01      	cmp	r3, #1
 8005814:	d116      	bne.n	8005844 <LCD_Clear+0x64>
	{
 		lcddev.dir=0;
 8005816:	4b17      	ldr	r3, [pc, #92]	; (8005874 <LCD_Clear+0x94>)
 8005818:	2200      	movs	r2, #0
 800581a:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 800581c:	4b15      	ldr	r3, [pc, #84]	; (8005874 <LCD_Clear+0x94>)
 800581e:	222a      	movs	r2, #42	; 0x2a
 8005820:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 8005822:	4b14      	ldr	r3, [pc, #80]	; (8005874 <LCD_Clear+0x94>)
 8005824:	222b      	movs	r2, #43	; 0x2b
 8005826:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00,0x0000);		//设置光标位置
 8005828:	2100      	movs	r1, #0
 800582a:	2000      	movs	r0, #0
 800582c:	f7fb fe18 	bl	8001460 <LCD_SetCursor>
 		lcddev.dir=1;
 8005830:	4b10      	ldr	r3, [pc, #64]	; (8005874 <LCD_Clear+0x94>)
 8005832:	2201      	movs	r2, #1
 8005834:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 8005836:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <LCD_Clear+0x94>)
 8005838:	222b      	movs	r2, #43	; 0x2b
 800583a:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 800583c:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <LCD_Clear+0x94>)
 800583e:	222a      	movs	r2, #42	; 0x2a
 8005840:	819a      	strh	r2, [r3, #12]
 8005842:	e003      	b.n	800584c <LCD_Clear+0x6c>
 	}else LCD_SetCursor(0x00,0x0000);	//设置光标位置
 8005844:	2100      	movs	r1, #0
 8005846:	2000      	movs	r0, #0
 8005848:	f7fb fe0a 	bl	8001460 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 800584c:	f7fb fdfa 	bl	8001444 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 8005850:	2300      	movs	r3, #0
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e005      	b.n	8005862 <LCD_Clear+0x82>
	{
		LCD->LCD_RAM=color;
 8005856:	4a08      	ldr	r2, [pc, #32]	; (8005878 <LCD_Clear+0x98>)
 8005858:	88fb      	ldrh	r3, [r7, #6]
 800585a:	8053      	strh	r3, [r2, #2]
	for(index=0;index<totalpoint;index++)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3301      	adds	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	429a      	cmp	r2, r3
 8005868:	d3f5      	bcc.n	8005856 <LCD_Clear+0x76>
	}
}
 800586a:	bf00      	nop
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	2000022c 	.word	0x2000022c
 8005878:	6c0007fe 	.word	0x6c0007fe

0800587c <LCD_Fill>:
//在指定区域内填充单个颜色
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Fill(uint16_t sx,uint16_t sy,uint16_t ex,uint16_t ey,uint16_t color)
{
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b087      	sub	sp, #28
 8005880:	af02      	add	r7, sp, #8
 8005882:	4604      	mov	r4, r0
 8005884:	4608      	mov	r0, r1
 8005886:	4611      	mov	r1, r2
 8005888:	461a      	mov	r2, r3
 800588a:	4623      	mov	r3, r4
 800588c:	80fb      	strh	r3, [r7, #6]
 800588e:	4603      	mov	r3, r0
 8005890:	80bb      	strh	r3, [r7, #4]
 8005892:	460b      	mov	r3, r1
 8005894:	807b      	strh	r3, [r7, #2]
 8005896:	4613      	mov	r3, r2
 8005898:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	uint16_t xlen=0;
 800589a:	2300      	movs	r3, #0
 800589c:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if((lcddev.id==0X6804)&&(lcddev.dir==1))	//6804横屏的时候特殊处理
 800589e:	4b32      	ldr	r3, [pc, #200]	; (8005968 <LCD_Fill+0xec>)
 80058a0:	889b      	ldrh	r3, [r3, #4]
 80058a2:	f646 0204 	movw	r2, #26628	; 0x6804
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d133      	bne.n	8005912 <LCD_Fill+0x96>
 80058aa:	4b2f      	ldr	r3, [pc, #188]	; (8005968 <LCD_Fill+0xec>)
 80058ac:	799b      	ldrb	r3, [r3, #6]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d12f      	bne.n	8005912 <LCD_Fill+0x96>
	{
		temp=sx;
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	813b      	strh	r3, [r7, #8]
		sx=sy;
 80058b6:	88bb      	ldrh	r3, [r7, #4]
 80058b8:	80fb      	strh	r3, [r7, #6]
		sy=lcddev.width-ex-1;
 80058ba:	4b2b      	ldr	r3, [pc, #172]	; (8005968 <LCD_Fill+0xec>)
 80058bc:	881a      	ldrh	r2, [r3, #0]
 80058be:	887b      	ldrh	r3, [r7, #2]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	80bb      	strh	r3, [r7, #4]
		ex=ey;
 80058c8:	883b      	ldrh	r3, [r7, #0]
 80058ca:	807b      	strh	r3, [r7, #2]
		ey=lcddev.width-temp-1;
 80058cc:	4b26      	ldr	r3, [pc, #152]	; (8005968 <LCD_Fill+0xec>)
 80058ce:	881a      	ldrh	r2, [r3, #0]
 80058d0:	893b      	ldrh	r3, [r7, #8]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	3b01      	subs	r3, #1
 80058d8:	803b      	strh	r3, [r7, #0]
 		lcddev.dir=0;
 80058da:	4b23      	ldr	r3, [pc, #140]	; (8005968 <LCD_Fill+0xec>)
 80058dc:	2200      	movs	r2, #0
 80058de:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 80058e0:	4b21      	ldr	r3, [pc, #132]	; (8005968 <LCD_Fill+0xec>)
 80058e2:	222a      	movs	r2, #42	; 0x2a
 80058e4:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 80058e6:	4b20      	ldr	r3, [pc, #128]	; (8005968 <LCD_Fill+0xec>)
 80058e8:	222b      	movs	r2, #43	; 0x2b
 80058ea:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx,sy,ex,ey,color);
 80058ec:	883c      	ldrh	r4, [r7, #0]
 80058ee:	887a      	ldrh	r2, [r7, #2]
 80058f0:	88b9      	ldrh	r1, [r7, #4]
 80058f2:	88f8      	ldrh	r0, [r7, #6]
 80058f4:	8c3b      	ldrh	r3, [r7, #32]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	4623      	mov	r3, r4
 80058fa:	f7ff ffbf 	bl	800587c <LCD_Fill>
 		lcddev.dir=1;
 80058fe:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <LCD_Fill+0xec>)
 8005900:	2201      	movs	r2, #1
 8005902:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 8005904:	4b18      	ldr	r3, [pc, #96]	; (8005968 <LCD_Fill+0xec>)
 8005906:	222b      	movs	r2, #43	; 0x2b
 8005908:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 800590a:	4b17      	ldr	r3, [pc, #92]	; (8005968 <LCD_Fill+0xec>)
 800590c:	222a      	movs	r2, #42	; 0x2a
 800590e:	819a      	strh	r2, [r3, #12]
 8005910:	e025      	b.n	800595e <LCD_Fill+0xe2>
 	}else
	{
		xlen=ex-sx+1;
 8005912:	887a      	ldrh	r2, [r7, #2]
 8005914:	88fb      	ldrh	r3, [r7, #6]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	b29b      	uxth	r3, r3
 800591a:	3301      	adds	r3, #1
 800591c:	817b      	strh	r3, [r7, #10]
		for(i=sy;i<=ey;i++)
 800591e:	88bb      	ldrh	r3, [r7, #4]
 8005920:	81fb      	strh	r3, [r7, #14]
 8005922:	e017      	b.n	8005954 <LCD_Fill+0xd8>
		{
		 	LCD_SetCursor(sx,i);      				//设置光标位置
 8005924:	89fa      	ldrh	r2, [r7, #14]
 8005926:	88fb      	ldrh	r3, [r7, #6]
 8005928:	4611      	mov	r1, r2
 800592a:	4618      	mov	r0, r3
 800592c:	f7fb fd98 	bl	8001460 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM
 8005930:	f7fb fd88 	bl	8001444 <LCD_WriteRAM_Prepare>
			for(j=0;j<xlen;j++)LCD->LCD_RAM=color;	//显示颜色
 8005934:	2300      	movs	r3, #0
 8005936:	81bb      	strh	r3, [r7, #12]
 8005938:	e005      	b.n	8005946 <LCD_Fill+0xca>
 800593a:	4a0c      	ldr	r2, [pc, #48]	; (800596c <LCD_Fill+0xf0>)
 800593c:	8c3b      	ldrh	r3, [r7, #32]
 800593e:	8053      	strh	r3, [r2, #2]
 8005940:	89bb      	ldrh	r3, [r7, #12]
 8005942:	3301      	adds	r3, #1
 8005944:	81bb      	strh	r3, [r7, #12]
 8005946:	89ba      	ldrh	r2, [r7, #12]
 8005948:	897b      	ldrh	r3, [r7, #10]
 800594a:	429a      	cmp	r2, r3
 800594c:	d3f5      	bcc.n	800593a <LCD_Fill+0xbe>
		for(i=sy;i<=ey;i++)
 800594e:	89fb      	ldrh	r3, [r7, #14]
 8005950:	3301      	adds	r3, #1
 8005952:	81fb      	strh	r3, [r7, #14]
 8005954:	89fa      	ldrh	r2, [r7, #14]
 8005956:	883b      	ldrh	r3, [r7, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d9e3      	bls.n	8005924 <LCD_Fill+0xa8>
		}
	}
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	bd90      	pop	{r4, r7, pc}
 8005966:	bf00      	nop
 8005968:	2000022c 	.word	0x2000022c
 800596c:	6c0007fe 	.word	0x6c0007fe

08005970 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 8005970:	b590      	push	{r4, r7, lr}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	4604      	mov	r4, r0
 8005978:	4608      	mov	r0, r1
 800597a:	4611      	mov	r1, r2
 800597c:	461a      	mov	r2, r3
 800597e:	4623      	mov	r3, r4
 8005980:	80fb      	strh	r3, [r7, #6]
 8005982:	4603      	mov	r3, r0
 8005984:	80bb      	strh	r3, [r7, #4]
 8005986:	460b      	mov	r3, r1
 8005988:	70fb      	strb	r3, [r7, #3]
 800598a:	4613      	mov	r3, r2
 800598c:	70bb      	strb	r3, [r7, #2]
	uint8_t temp,t1,t;
	uint16_t y0=y;
 800598e:	88bb      	ldrh	r3, [r7, #4]
 8005990:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 8005992:	78bb      	ldrb	r3, [r7, #2]
 8005994:	08db      	lsrs	r3, r3, #3
 8005996:	b2db      	uxtb	r3, r3
 8005998:	461a      	mov	r2, r3
 800599a:	78bb      	ldrb	r3, [r7, #2]
 800599c:	f003 0307 	and.w	r3, r3, #7
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	bf14      	ite	ne
 80059a6:	2301      	movne	r3, #1
 80059a8:	2300      	moveq	r3, #0
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	4413      	add	r3, r2
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	78ba      	ldrb	r2, [r7, #2]
 80059b2:	0852      	lsrs	r2, r2, #1
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	fb02 f303 	mul.w	r3, r2, r3
 80059ba:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	3b20      	subs	r3, #32
 80059c0:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 80059c2:	2300      	movs	r3, #0
 80059c4:	737b      	strb	r3, [r7, #13]
 80059c6:	e08f      	b.n	8005ae8 <LCD_ShowChar+0x178>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 80059c8:	78bb      	ldrb	r3, [r7, #2]
 80059ca:	2b0c      	cmp	r3, #12
 80059cc:	d10b      	bne.n	80059e6 <LCD_ShowChar+0x76>
 80059ce:	78fa      	ldrb	r2, [r7, #3]
 80059d0:	7b79      	ldrb	r1, [r7, #13]
 80059d2:	484b      	ldr	r0, [pc, #300]	; (8005b00 <LCD_ShowChar+0x190>)
 80059d4:	4613      	mov	r3, r2
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4403      	add	r3, r0
 80059de:	440b      	add	r3, r1
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	73fb      	strb	r3, [r7, #15]
 80059e4:	e03f      	b.n	8005a66 <LCD_ShowChar+0xf6>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 80059e6:	78bb      	ldrb	r3, [r7, #2]
 80059e8:	2b10      	cmp	r3, #16
 80059ea:	d108      	bne.n	80059fe <LCD_ShowChar+0x8e>
 80059ec:	78fa      	ldrb	r2, [r7, #3]
 80059ee:	7b7b      	ldrb	r3, [r7, #13]
 80059f0:	4944      	ldr	r1, [pc, #272]	; (8005b04 <LCD_ShowChar+0x194>)
 80059f2:	0112      	lsls	r2, r2, #4
 80059f4:	440a      	add	r2, r1
 80059f6:	4413      	add	r3, r2
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	73fb      	strb	r3, [r7, #15]
 80059fc:	e033      	b.n	8005a66 <LCD_ShowChar+0xf6>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 80059fe:	78bb      	ldrb	r3, [r7, #2]
 8005a00:	2b18      	cmp	r3, #24
 8005a02:	d10b      	bne.n	8005a1c <LCD_ShowChar+0xac>
 8005a04:	78fa      	ldrb	r2, [r7, #3]
 8005a06:	7b79      	ldrb	r1, [r7, #13]
 8005a08:	483f      	ldr	r0, [pc, #252]	; (8005b08 <LCD_ShowChar+0x198>)
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4403      	add	r3, r0
 8005a14:	440b      	add	r3, r1
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	73fb      	strb	r3, [r7, #15]
 8005a1a:	e024      	b.n	8005a66 <LCD_ShowChar+0xf6>
		else if(size==32)temp=asc2_3216[num][t];    //调用3216字体
 8005a1c:	78bb      	ldrb	r3, [r7, #2]
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d108      	bne.n	8005a34 <LCD_ShowChar+0xc4>
 8005a22:	78fa      	ldrb	r2, [r7, #3]
 8005a24:	7b7b      	ldrb	r3, [r7, #13]
 8005a26:	4939      	ldr	r1, [pc, #228]	; (8005b0c <LCD_ShowChar+0x19c>)
 8005a28:	0192      	lsls	r2, r2, #6
 8005a2a:	440a      	add	r2, r1
 8005a2c:	4413      	add	r3, r2
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	73fb      	strb	r3, [r7, #15]
 8005a32:	e018      	b.n	8005a66 <LCD_ShowChar+0xf6>
		else if(size==48)temp=asc2_4824[num][t];    //调用4824字体
 8005a34:	78bb      	ldrb	r3, [r7, #2]
 8005a36:	2b30      	cmp	r3, #48	; 0x30
 8005a38:	d10a      	bne.n	8005a50 <LCD_ShowChar+0xe0>
 8005a3a:	78fa      	ldrb	r2, [r7, #3]
 8005a3c:	7b7b      	ldrb	r3, [r7, #13]
 8005a3e:	4934      	ldr	r1, [pc, #208]	; (8005b10 <LCD_ShowChar+0x1a0>)
 8005a40:	20a8      	movs	r0, #168	; 0xa8
 8005a42:	fb00 f202 	mul.w	r2, r0, r2
 8005a46:	440a      	add	r2, r1
 8005a48:	4413      	add	r3, r2
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	73fb      	strb	r3, [r7, #15]
 8005a4e:	e00a      	b.n	8005a66 <LCD_ShowChar+0xf6>
		else if(size==64)temp=asc2_6432[num][t];    //调用6432字体
 8005a50:	78bb      	ldrb	r3, [r7, #2]
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d14e      	bne.n	8005af4 <LCD_ShowChar+0x184>
 8005a56:	78fa      	ldrb	r2, [r7, #3]
 8005a58:	7b7b      	ldrb	r3, [r7, #13]
 8005a5a:	492e      	ldr	r1, [pc, #184]	; (8005b14 <LCD_ShowChar+0x1a4>)
 8005a5c:	0212      	lsls	r2, r2, #8
 8005a5e:	440a      	add	r2, r1
 8005a60:	4413      	add	r3, r2
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 8005a66:	2300      	movs	r3, #0
 8005a68:	73bb      	strb	r3, [r7, #14]
 8005a6a:	e035      	b.n	8005ad8 <LCD_ShowChar+0x168>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 8005a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	da07      	bge.n	8005a84 <LCD_ShowChar+0x114>
 8005a74:	4b28      	ldr	r3, [pc, #160]	; (8005b18 <LCD_ShowChar+0x1a8>)
 8005a76:	881a      	ldrh	r2, [r3, #0]
 8005a78:	88b9      	ldrh	r1, [r7, #4]
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fc f819 	bl	8001ab4 <LCD_Fast_DrawPoint>
 8005a82:	e00a      	b.n	8005a9a <LCD_ShowChar+0x12a>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8005a84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <LCD_ShowChar+0x12a>
 8005a8c:	4b23      	ldr	r3, [pc, #140]	; (8005b1c <LCD_ShowChar+0x1ac>)
 8005a8e:	881a      	ldrh	r2, [r3, #0]
 8005a90:	88b9      	ldrh	r1, [r7, #4]
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fc f80d 	bl	8001ab4 <LCD_Fast_DrawPoint>
			temp<<=1;
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
			y++;
 8005aa0:	88bb      	ldrh	r3, [r7, #4]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 8005aa6:	4b1e      	ldr	r3, [pc, #120]	; (8005b20 <LCD_ShowChar+0x1b0>)
 8005aa8:	885b      	ldrh	r3, [r3, #2]
 8005aaa:	88ba      	ldrh	r2, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d223      	bcs.n	8005af8 <LCD_ShowChar+0x188>
			if((y-y0)==size)
 8005ab0:	88ba      	ldrh	r2, [r7, #4]
 8005ab2:	897b      	ldrh	r3, [r7, #10]
 8005ab4:	1ad2      	subs	r2, r2, r3
 8005ab6:	78bb      	ldrb	r3, [r7, #2]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d10a      	bne.n	8005ad2 <LCD_ShowChar+0x162>
			{
				y=y0;
 8005abc:	897b      	ldrh	r3, [r7, #10]
 8005abe:	80bb      	strh	r3, [r7, #4]
				x++;
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 8005ac6:	4b16      	ldr	r3, [pc, #88]	; (8005b20 <LCD_ShowChar+0x1b0>)
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d307      	bcc.n	8005ae0 <LCD_ShowChar+0x170>
 8005ad0:	e013      	b.n	8005afa <LCD_ShowChar+0x18a>
		for(t1=0;t1<8;t1++)
 8005ad2:	7bbb      	ldrb	r3, [r7, #14]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	73bb      	strb	r3, [r7, #14]
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	2b07      	cmp	r3, #7
 8005adc:	d9c6      	bls.n	8005a6c <LCD_ShowChar+0xfc>
 8005ade:	e000      	b.n	8005ae2 <LCD_ShowChar+0x172>
				break;
 8005ae0:	bf00      	nop
	for(t=0;t<csize;t++)
 8005ae2:	7b7b      	ldrb	r3, [r7, #13]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	737b      	strb	r3, [r7, #13]
 8005ae8:	7b7a      	ldrb	r2, [r7, #13]
 8005aea:	7a7b      	ldrb	r3, [r7, #9]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	f4ff af6b 	bcc.w	80059c8 <LCD_ShowChar+0x58>
 8005af2:	e002      	b.n	8005afa <LCD_ShowChar+0x18a>
		else return;								//没有的字库
 8005af4:	bf00      	nop
 8005af6:	e000      	b.n	8005afa <LCD_ShowChar+0x18a>
			if(y>=lcddev.height)return;		//超区域了
 8005af8:	bf00      	nop
			}
		}
	}
}
 8005afa:	3714      	adds	r7, #20
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd90      	pop	{r4, r7, pc}
 8005b00:	08008d5c 	.word	0x08008d5c
 8005b04:	080091d0 	.word	0x080091d0
 8005b08:	080097c0 	.word	0x080097c0
 8005b0c:	0800a51c 	.word	0x0800a51c
 8005b10:	0800bcdc 	.word	0x0800bcdc
 8005b14:	0800fb34 	.word	0x0800fb34
 8005b18:	200000b8 	.word	0x200000b8
 8005b1c:	20000026 	.word	0x20000026
 8005b20:	2000022c 	.word	0x2000022c

08005b24 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 8005b24:	b590      	push	{r4, r7, lr}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af02      	add	r7, sp, #8
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	4608      	mov	r0, r1
 8005b2e:	4611      	mov	r1, r2
 8005b30:	461a      	mov	r2, r3
 8005b32:	4623      	mov	r3, r4
 8005b34:	80fb      	strh	r3, [r7, #6]
 8005b36:	4603      	mov	r3, r0
 8005b38:	80bb      	strh	r3, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	807b      	strh	r3, [r7, #2]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8005b46:	887a      	ldrh	r2, [r7, #2]
 8005b48:	88fb      	ldrh	r3, [r7, #6]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	807b      	strh	r3, [r7, #2]
	height+=y;
 8005b4e:	883a      	ldrh	r2, [r7, #0]
 8005b50:	88bb      	ldrh	r3, [r7, #4]
 8005b52:	4413      	add	r3, r2
 8005b54:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8005b56:	e024      	b.n	8005ba2 <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 8005b58:	88fa      	ldrh	r2, [r7, #6]
 8005b5a:	887b      	ldrh	r3, [r7, #2]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d307      	bcc.n	8005b70 <LCD_ShowString+0x4c>
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	80fb      	strh	r3, [r7, #6]
 8005b64:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	88bb      	ldrh	r3, [r7, #4]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 8005b70:	88ba      	ldrh	r2, [r7, #4]
 8005b72:	883b      	ldrh	r3, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d21d      	bcs.n	8005bb4 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	781a      	ldrb	r2, [r3, #0]
 8005b7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b80:	88b9      	ldrh	r1, [r7, #4]
 8005b82:	88f8      	ldrh	r0, [r7, #6]
 8005b84:	2400      	movs	r4, #0
 8005b86:	9400      	str	r4, [sp, #0]
 8005b88:	f7ff fef2 	bl	8005970 <LCD_ShowChar>
        x+=size/2;
 8005b8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005b90:	085b      	lsrs	r3, r3, #1
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	4413      	add	r3, r2
 8005b9a:	80fb      	strh	r3, [r7, #6]
        p++;
 8005b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b7e      	cmp	r3, #126	; 0x7e
 8005ba8:	d805      	bhi.n	8005bb6 <LCD_ShowString+0x92>
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b1f      	cmp	r3, #31
 8005bb0:	d8d2      	bhi.n	8005b58 <LCD_ShowString+0x34>
    }
}
 8005bb2:	e000      	b.n	8005bb6 <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8005bb4:	bf00      	nop
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd90      	pop	{r4, r7, pc}
	...

08005bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005bc4:	4b08      	ldr	r3, [pc, #32]	; (8005be8 <HAL_Init+0x28>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a07      	ldr	r2, [pc, #28]	; (8005be8 <HAL_Init+0x28>)
 8005bca:	f043 0310 	orr.w	r3, r3, #16
 8005bce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005bd0:	2003      	movs	r0, #3
 8005bd2:	f000 f947 	bl	8005e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	f000 f808 	bl	8005bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005bdc:	f7fb f9a8 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40022000 	.word	0x40022000

08005bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005bf4:	4b12      	ldr	r3, [pc, #72]	; (8005c40 <HAL_InitTick+0x54>)
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	4b12      	ldr	r3, [pc, #72]	; (8005c44 <HAL_InitTick+0x58>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 f95f 	bl	8005ece <HAL_SYSTICK_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e00e      	b.n	8005c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b0f      	cmp	r3, #15
 8005c1e:	d80a      	bhi.n	8005c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005c20:	2200      	movs	r2, #0
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	f04f 30ff 	mov.w	r0, #4294967295
 8005c28:	f000 f927 	bl	8005e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005c2c:	4a06      	ldr	r2, [pc, #24]	; (8005c48 <HAL_InitTick+0x5c>)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	e000      	b.n	8005c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	20000020 	.word	0x20000020
 8005c44:	2000002c 	.word	0x2000002c
 8005c48:	20000028 	.word	0x20000028

08005c4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <HAL_IncTick+0x1c>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	4b05      	ldr	r3, [pc, #20]	; (8005c6c <HAL_IncTick+0x20>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	4a03      	ldr	r2, [pc, #12]	; (8005c6c <HAL_IncTick+0x20>)
 8005c5e:	6013      	str	r3, [r2, #0]
}
 8005c60:	bf00      	nop
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr
 8005c68:	2000002c 	.word	0x2000002c
 8005c6c:	2000023c 	.word	0x2000023c

08005c70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return uwTick;
 8005c74:	4b02      	ldr	r3, [pc, #8]	; (8005c80 <HAL_GetTick+0x10>)
 8005c76:	681b      	ldr	r3, [r3, #0]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bc80      	pop	{r7}
 8005c7e:	4770      	bx	lr
 8005c80:	2000023c 	.word	0x2000023c

08005c84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005c8c:	f7ff fff0 	bl	8005c70 <HAL_GetTick>
 8005c90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9c:	d005      	beq.n	8005caa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c9e:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <HAL_Delay+0x44>)
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005caa:	bf00      	nop
 8005cac:	f7ff ffe0 	bl	8005c70 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d8f7      	bhi.n	8005cac <HAL_Delay+0x28>
  {
  }
}
 8005cbc:	bf00      	nop
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	2000002c 	.word	0x2000002c

08005ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f003 0307 	and.w	r3, r3, #7
 8005cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <__NVIC_SetPriorityGrouping+0x44>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ce2:	68ba      	ldr	r2, [r7, #8]
 8005ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cfe:	4a04      	ldr	r2, [pc, #16]	; (8005d10 <__NVIC_SetPriorityGrouping+0x44>)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	60d3      	str	r3, [r2, #12]
}
 8005d04:	bf00      	nop
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bc80      	pop	{r7}
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	e000ed00 	.word	0xe000ed00

08005d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d18:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <__NVIC_GetPriorityGrouping+0x18>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	0a1b      	lsrs	r3, r3, #8
 8005d1e:	f003 0307 	and.w	r3, r3, #7
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bc80      	pop	{r7}
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	e000ed00 	.word	0xe000ed00

08005d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	db0b      	blt.n	8005d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	f003 021f 	and.w	r2, r3, #31
 8005d48:	4906      	ldr	r1, [pc, #24]	; (8005d64 <__NVIC_EnableIRQ+0x34>)
 8005d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4e:	095b      	lsrs	r3, r3, #5
 8005d50:	2001      	movs	r0, #1
 8005d52:	fa00 f202 	lsl.w	r2, r0, r2
 8005d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bc80      	pop	{r7}
 8005d62:	4770      	bx	lr
 8005d64:	e000e100 	.word	0xe000e100

08005d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	6039      	str	r1, [r7, #0]
 8005d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	db0a      	blt.n	8005d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	490c      	ldr	r1, [pc, #48]	; (8005db4 <__NVIC_SetPriority+0x4c>)
 8005d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d86:	0112      	lsls	r2, r2, #4
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	440b      	add	r3, r1
 8005d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d90:	e00a      	b.n	8005da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	4908      	ldr	r1, [pc, #32]	; (8005db8 <__NVIC_SetPriority+0x50>)
 8005d98:	79fb      	ldrb	r3, [r7, #7]
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	3b04      	subs	r3, #4
 8005da0:	0112      	lsls	r2, r2, #4
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	440b      	add	r3, r1
 8005da6:	761a      	strb	r2, [r3, #24]
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	e000e100 	.word	0xe000e100
 8005db8:	e000ed00 	.word	0xe000ed00

08005dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b089      	sub	sp, #36	; 0x24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f1c3 0307 	rsb	r3, r3, #7
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	bf28      	it	cs
 8005dda:	2304      	movcs	r3, #4
 8005ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	3304      	adds	r3, #4
 8005de2:	2b06      	cmp	r3, #6
 8005de4:	d902      	bls.n	8005dec <NVIC_EncodePriority+0x30>
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	3b03      	subs	r3, #3
 8005dea:	e000      	b.n	8005dee <NVIC_EncodePriority+0x32>
 8005dec:	2300      	movs	r3, #0
 8005dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43da      	mvns	r2, r3
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	401a      	ands	r2, r3
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e04:	f04f 31ff 	mov.w	r1, #4294967295
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0e:	43d9      	mvns	r1, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e14:	4313      	orrs	r3, r2
         );
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3724      	adds	r7, #36	; 0x24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bc80      	pop	{r7}
 8005e1e:	4770      	bx	lr

08005e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e30:	d301      	bcc.n	8005e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e32:	2301      	movs	r3, #1
 8005e34:	e00f      	b.n	8005e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e36:	4a0a      	ldr	r2, [pc, #40]	; (8005e60 <SysTick_Config+0x40>)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e3e:	210f      	movs	r1, #15
 8005e40:	f04f 30ff 	mov.w	r0, #4294967295
 8005e44:	f7ff ff90 	bl	8005d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e48:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <SysTick_Config+0x40>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e4e:	4b04      	ldr	r3, [pc, #16]	; (8005e60 <SysTick_Config+0x40>)
 8005e50:	2207      	movs	r2, #7
 8005e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	e000e010 	.word	0xe000e010

08005e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff ff2d 	bl	8005ccc <__NVIC_SetPriorityGrouping>
}
 8005e72:	bf00      	nop
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b086      	sub	sp, #24
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	4603      	mov	r3, r0
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e8c:	f7ff ff42 	bl	8005d14 <__NVIC_GetPriorityGrouping>
 8005e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	6978      	ldr	r0, [r7, #20]
 8005e98:	f7ff ff90 	bl	8005dbc <NVIC_EncodePriority>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff ff5f 	bl	8005d68 <__NVIC_SetPriority>
}
 8005eaa:	bf00      	nop
 8005eac:	3718      	adds	r7, #24
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	4603      	mov	r3, r0
 8005eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7ff ff35 	bl	8005d30 <__NVIC_EnableIRQ>
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b082      	sub	sp, #8
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff ffa2 	bl	8005e20 <SysTick_Config>
 8005edc:	4603      	mov	r3, r0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
	...

08005ee8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d005      	beq.n	8005f0a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2204      	movs	r2, #4
 8005f02:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	73fb      	strb	r3, [r7, #15]
 8005f08:	e0d6      	b.n	80060b8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 020e 	bic.w	r2, r2, #14
 8005f18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0201 	bic.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	4b64      	ldr	r3, [pc, #400]	; (80060c4 <HAL_DMA_Abort_IT+0x1dc>)
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d958      	bls.n	8005fe8 <HAL_DMA_Abort_IT+0x100>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a63      	ldr	r2, [pc, #396]	; (80060c8 <HAL_DMA_Abort_IT+0x1e0>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d04f      	beq.n	8005fe0 <HAL_DMA_Abort_IT+0xf8>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a61      	ldr	r2, [pc, #388]	; (80060cc <HAL_DMA_Abort_IT+0x1e4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d048      	beq.n	8005fdc <HAL_DMA_Abort_IT+0xf4>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a60      	ldr	r2, [pc, #384]	; (80060d0 <HAL_DMA_Abort_IT+0x1e8>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d040      	beq.n	8005fd6 <HAL_DMA_Abort_IT+0xee>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a5e      	ldr	r2, [pc, #376]	; (80060d4 <HAL_DMA_Abort_IT+0x1ec>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d038      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0xe8>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a5d      	ldr	r2, [pc, #372]	; (80060d8 <HAL_DMA_Abort_IT+0x1f0>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d030      	beq.n	8005fca <HAL_DMA_Abort_IT+0xe2>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a5b      	ldr	r2, [pc, #364]	; (80060dc <HAL_DMA_Abort_IT+0x1f4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d028      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0xdc>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a53      	ldr	r2, [pc, #332]	; (80060c4 <HAL_DMA_Abort_IT+0x1dc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d020      	beq.n	8005fbe <HAL_DMA_Abort_IT+0xd6>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a57      	ldr	r2, [pc, #348]	; (80060e0 <HAL_DMA_Abort_IT+0x1f8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d019      	beq.n	8005fba <HAL_DMA_Abort_IT+0xd2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a56      	ldr	r2, [pc, #344]	; (80060e4 <HAL_DMA_Abort_IT+0x1fc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d012      	beq.n	8005fb6 <HAL_DMA_Abort_IT+0xce>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a54      	ldr	r2, [pc, #336]	; (80060e8 <HAL_DMA_Abort_IT+0x200>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00a      	beq.n	8005fb0 <HAL_DMA_Abort_IT+0xc8>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a53      	ldr	r2, [pc, #332]	; (80060ec <HAL_DMA_Abort_IT+0x204>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d102      	bne.n	8005faa <HAL_DMA_Abort_IT+0xc2>
 8005fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fa8:	e01b      	b.n	8005fe2 <HAL_DMA_Abort_IT+0xfa>
 8005faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fae:	e018      	b.n	8005fe2 <HAL_DMA_Abort_IT+0xfa>
 8005fb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fb4:	e015      	b.n	8005fe2 <HAL_DMA_Abort_IT+0xfa>
 8005fb6:	2310      	movs	r3, #16
 8005fb8:	e013      	b.n	8005fe2 <HAL_DMA_Abort_IT+0xfa>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e011      	b.n	8005fe2 <HAL_DMA_Abort_IT+0xfa>
 8005fbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fc2:	e00e      	b.n	8005fe2 <HAL_DMA_Abort_IT+0xfa>
 8005fc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005fc8:	e00b      	b.n	8005fe2 <HAL_DMA_Abort_IT+0xfa>
 8005fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fce:	e008      	b.n	8005fe2 <HAL_DMA_Abort_IT+0xfa>
 8005fd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fd4:	e005      	b.n	8005fe2 <HAL_DMA_Abort_IT+0xfa>
 8005fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fda:	e002      	b.n	8005fe2 <HAL_DMA_Abort_IT+0xfa>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	e000      	b.n	8005fe2 <HAL_DMA_Abort_IT+0xfa>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	4a43      	ldr	r2, [pc, #268]	; (80060f0 <HAL_DMA_Abort_IT+0x208>)
 8005fe4:	6053      	str	r3, [r2, #4]
 8005fe6:	e057      	b.n	8006098 <HAL_DMA_Abort_IT+0x1b0>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a36      	ldr	r2, [pc, #216]	; (80060c8 <HAL_DMA_Abort_IT+0x1e0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d04f      	beq.n	8006092 <HAL_DMA_Abort_IT+0x1aa>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a35      	ldr	r2, [pc, #212]	; (80060cc <HAL_DMA_Abort_IT+0x1e4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d048      	beq.n	800608e <HAL_DMA_Abort_IT+0x1a6>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a33      	ldr	r2, [pc, #204]	; (80060d0 <HAL_DMA_Abort_IT+0x1e8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d040      	beq.n	8006088 <HAL_DMA_Abort_IT+0x1a0>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a32      	ldr	r2, [pc, #200]	; (80060d4 <HAL_DMA_Abort_IT+0x1ec>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d038      	beq.n	8006082 <HAL_DMA_Abort_IT+0x19a>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a30      	ldr	r2, [pc, #192]	; (80060d8 <HAL_DMA_Abort_IT+0x1f0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d030      	beq.n	800607c <HAL_DMA_Abort_IT+0x194>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a2f      	ldr	r2, [pc, #188]	; (80060dc <HAL_DMA_Abort_IT+0x1f4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d028      	beq.n	8006076 <HAL_DMA_Abort_IT+0x18e>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a26      	ldr	r2, [pc, #152]	; (80060c4 <HAL_DMA_Abort_IT+0x1dc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d020      	beq.n	8006070 <HAL_DMA_Abort_IT+0x188>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2b      	ldr	r2, [pc, #172]	; (80060e0 <HAL_DMA_Abort_IT+0x1f8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d019      	beq.n	800606c <HAL_DMA_Abort_IT+0x184>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a29      	ldr	r2, [pc, #164]	; (80060e4 <HAL_DMA_Abort_IT+0x1fc>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d012      	beq.n	8006068 <HAL_DMA_Abort_IT+0x180>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a28      	ldr	r2, [pc, #160]	; (80060e8 <HAL_DMA_Abort_IT+0x200>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00a      	beq.n	8006062 <HAL_DMA_Abort_IT+0x17a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a26      	ldr	r2, [pc, #152]	; (80060ec <HAL_DMA_Abort_IT+0x204>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d102      	bne.n	800605c <HAL_DMA_Abort_IT+0x174>
 8006056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800605a:	e01b      	b.n	8006094 <HAL_DMA_Abort_IT+0x1ac>
 800605c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006060:	e018      	b.n	8006094 <HAL_DMA_Abort_IT+0x1ac>
 8006062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006066:	e015      	b.n	8006094 <HAL_DMA_Abort_IT+0x1ac>
 8006068:	2310      	movs	r3, #16
 800606a:	e013      	b.n	8006094 <HAL_DMA_Abort_IT+0x1ac>
 800606c:	2301      	movs	r3, #1
 800606e:	e011      	b.n	8006094 <HAL_DMA_Abort_IT+0x1ac>
 8006070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006074:	e00e      	b.n	8006094 <HAL_DMA_Abort_IT+0x1ac>
 8006076:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800607a:	e00b      	b.n	8006094 <HAL_DMA_Abort_IT+0x1ac>
 800607c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006080:	e008      	b.n	8006094 <HAL_DMA_Abort_IT+0x1ac>
 8006082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006086:	e005      	b.n	8006094 <HAL_DMA_Abort_IT+0x1ac>
 8006088:	f44f 7380 	mov.w	r3, #256	; 0x100
 800608c:	e002      	b.n	8006094 <HAL_DMA_Abort_IT+0x1ac>
 800608e:	2310      	movs	r3, #16
 8006090:	e000      	b.n	8006094 <HAL_DMA_Abort_IT+0x1ac>
 8006092:	2301      	movs	r3, #1
 8006094:	4a17      	ldr	r2, [pc, #92]	; (80060f4 <HAL_DMA_Abort_IT+0x20c>)
 8006096:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d003      	beq.n	80060b8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	4798      	blx	r3
    } 
  }
  return status;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40020080 	.word	0x40020080
 80060c8:	40020008 	.word	0x40020008
 80060cc:	4002001c 	.word	0x4002001c
 80060d0:	40020030 	.word	0x40020030
 80060d4:	40020044 	.word	0x40020044
 80060d8:	40020058 	.word	0x40020058
 80060dc:	4002006c 	.word	0x4002006c
 80060e0:	40020408 	.word	0x40020408
 80060e4:	4002041c 	.word	0x4002041c
 80060e8:	40020430 	.word	0x40020430
 80060ec:	40020444 	.word	0x40020444
 80060f0:	40020400 	.word	0x40020400
 80060f4:	40020000 	.word	0x40020000

080060f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b08b      	sub	sp, #44	; 0x2c
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006102:	2300      	movs	r3, #0
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006106:	2300      	movs	r3, #0
 8006108:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800610a:	e179      	b.n	8006400 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800610c:	2201      	movs	r2, #1
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69fa      	ldr	r2, [r7, #28]
 800611c:	4013      	ands	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006120:	69ba      	ldr	r2, [r7, #24]
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	429a      	cmp	r2, r3
 8006126:	f040 8168 	bne.w	80063fa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4aa0      	ldr	r2, [pc, #640]	; (80063b0 <HAL_GPIO_Init+0x2b8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d05e      	beq.n	80061f2 <HAL_GPIO_Init+0xfa>
 8006134:	4a9e      	ldr	r2, [pc, #632]	; (80063b0 <HAL_GPIO_Init+0x2b8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d875      	bhi.n	8006226 <HAL_GPIO_Init+0x12e>
 800613a:	4a9e      	ldr	r2, [pc, #632]	; (80063b4 <HAL_GPIO_Init+0x2bc>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d058      	beq.n	80061f2 <HAL_GPIO_Init+0xfa>
 8006140:	4a9c      	ldr	r2, [pc, #624]	; (80063b4 <HAL_GPIO_Init+0x2bc>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d86f      	bhi.n	8006226 <HAL_GPIO_Init+0x12e>
 8006146:	4a9c      	ldr	r2, [pc, #624]	; (80063b8 <HAL_GPIO_Init+0x2c0>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d052      	beq.n	80061f2 <HAL_GPIO_Init+0xfa>
 800614c:	4a9a      	ldr	r2, [pc, #616]	; (80063b8 <HAL_GPIO_Init+0x2c0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d869      	bhi.n	8006226 <HAL_GPIO_Init+0x12e>
 8006152:	4a9a      	ldr	r2, [pc, #616]	; (80063bc <HAL_GPIO_Init+0x2c4>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d04c      	beq.n	80061f2 <HAL_GPIO_Init+0xfa>
 8006158:	4a98      	ldr	r2, [pc, #608]	; (80063bc <HAL_GPIO_Init+0x2c4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d863      	bhi.n	8006226 <HAL_GPIO_Init+0x12e>
 800615e:	4a98      	ldr	r2, [pc, #608]	; (80063c0 <HAL_GPIO_Init+0x2c8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d046      	beq.n	80061f2 <HAL_GPIO_Init+0xfa>
 8006164:	4a96      	ldr	r2, [pc, #600]	; (80063c0 <HAL_GPIO_Init+0x2c8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d85d      	bhi.n	8006226 <HAL_GPIO_Init+0x12e>
 800616a:	2b12      	cmp	r3, #18
 800616c:	d82a      	bhi.n	80061c4 <HAL_GPIO_Init+0xcc>
 800616e:	2b12      	cmp	r3, #18
 8006170:	d859      	bhi.n	8006226 <HAL_GPIO_Init+0x12e>
 8006172:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <HAL_GPIO_Init+0x80>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	080061f3 	.word	0x080061f3
 800617c:	080061cd 	.word	0x080061cd
 8006180:	080061df 	.word	0x080061df
 8006184:	08006221 	.word	0x08006221
 8006188:	08006227 	.word	0x08006227
 800618c:	08006227 	.word	0x08006227
 8006190:	08006227 	.word	0x08006227
 8006194:	08006227 	.word	0x08006227
 8006198:	08006227 	.word	0x08006227
 800619c:	08006227 	.word	0x08006227
 80061a0:	08006227 	.word	0x08006227
 80061a4:	08006227 	.word	0x08006227
 80061a8:	08006227 	.word	0x08006227
 80061ac:	08006227 	.word	0x08006227
 80061b0:	08006227 	.word	0x08006227
 80061b4:	08006227 	.word	0x08006227
 80061b8:	08006227 	.word	0x08006227
 80061bc:	080061d5 	.word	0x080061d5
 80061c0:	080061e9 	.word	0x080061e9
 80061c4:	4a7f      	ldr	r2, [pc, #508]	; (80063c4 <HAL_GPIO_Init+0x2cc>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80061ca:	e02c      	b.n	8006226 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	623b      	str	r3, [r7, #32]
          break;
 80061d2:	e029      	b.n	8006228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	3304      	adds	r3, #4
 80061da:	623b      	str	r3, [r7, #32]
          break;
 80061dc:	e024      	b.n	8006228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	3308      	adds	r3, #8
 80061e4:	623b      	str	r3, [r7, #32]
          break;
 80061e6:	e01f      	b.n	8006228 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	330c      	adds	r3, #12
 80061ee:	623b      	str	r3, [r7, #32]
          break;
 80061f0:	e01a      	b.n	8006228 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d102      	bne.n	8006200 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80061fa:	2304      	movs	r3, #4
 80061fc:	623b      	str	r3, [r7, #32]
          break;
 80061fe:	e013      	b.n	8006228 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d105      	bne.n	8006214 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006208:	2308      	movs	r3, #8
 800620a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	611a      	str	r2, [r3, #16]
          break;
 8006212:	e009      	b.n	8006228 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006214:	2308      	movs	r3, #8
 8006216:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	69fa      	ldr	r2, [r7, #28]
 800621c:	615a      	str	r2, [r3, #20]
          break;
 800621e:	e003      	b.n	8006228 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006220:	2300      	movs	r3, #0
 8006222:	623b      	str	r3, [r7, #32]
          break;
 8006224:	e000      	b.n	8006228 <HAL_GPIO_Init+0x130>
          break;
 8006226:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	2bff      	cmp	r3, #255	; 0xff
 800622c:	d801      	bhi.n	8006232 <HAL_GPIO_Init+0x13a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	e001      	b.n	8006236 <HAL_GPIO_Init+0x13e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3304      	adds	r3, #4
 8006236:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	2bff      	cmp	r3, #255	; 0xff
 800623c:	d802      	bhi.n	8006244 <HAL_GPIO_Init+0x14c>
 800623e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	e002      	b.n	800624a <HAL_GPIO_Init+0x152>
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	3b08      	subs	r3, #8
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	210f      	movs	r1, #15
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	fa01 f303 	lsl.w	r3, r1, r3
 8006258:	43db      	mvns	r3, r3
 800625a:	401a      	ands	r2, r3
 800625c:	6a39      	ldr	r1, [r7, #32]
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	fa01 f303 	lsl.w	r3, r1, r3
 8006264:	431a      	orrs	r2, r3
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 80c1 	beq.w	80063fa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006278:	4b53      	ldr	r3, [pc, #332]	; (80063c8 <HAL_GPIO_Init+0x2d0>)
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	4a52      	ldr	r2, [pc, #328]	; (80063c8 <HAL_GPIO_Init+0x2d0>)
 800627e:	f043 0301 	orr.w	r3, r3, #1
 8006282:	6193      	str	r3, [r2, #24]
 8006284:	4b50      	ldr	r3, [pc, #320]	; (80063c8 <HAL_GPIO_Init+0x2d0>)
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	60bb      	str	r3, [r7, #8]
 800628e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006290:	4a4e      	ldr	r2, [pc, #312]	; (80063cc <HAL_GPIO_Init+0x2d4>)
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	089b      	lsrs	r3, r3, #2
 8006296:	3302      	adds	r3, #2
 8006298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800629c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	f003 0303 	and.w	r3, r3, #3
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	220f      	movs	r2, #15
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	43db      	mvns	r3, r3
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4013      	ands	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a46      	ldr	r2, [pc, #280]	; (80063d0 <HAL_GPIO_Init+0x2d8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d01f      	beq.n	80062fc <HAL_GPIO_Init+0x204>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a45      	ldr	r2, [pc, #276]	; (80063d4 <HAL_GPIO_Init+0x2dc>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d019      	beq.n	80062f8 <HAL_GPIO_Init+0x200>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a44      	ldr	r2, [pc, #272]	; (80063d8 <HAL_GPIO_Init+0x2e0>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d013      	beq.n	80062f4 <HAL_GPIO_Init+0x1fc>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a43      	ldr	r2, [pc, #268]	; (80063dc <HAL_GPIO_Init+0x2e4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00d      	beq.n	80062f0 <HAL_GPIO_Init+0x1f8>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a42      	ldr	r2, [pc, #264]	; (80063e0 <HAL_GPIO_Init+0x2e8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d007      	beq.n	80062ec <HAL_GPIO_Init+0x1f4>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a41      	ldr	r2, [pc, #260]	; (80063e4 <HAL_GPIO_Init+0x2ec>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d101      	bne.n	80062e8 <HAL_GPIO_Init+0x1f0>
 80062e4:	2305      	movs	r3, #5
 80062e6:	e00a      	b.n	80062fe <HAL_GPIO_Init+0x206>
 80062e8:	2306      	movs	r3, #6
 80062ea:	e008      	b.n	80062fe <HAL_GPIO_Init+0x206>
 80062ec:	2304      	movs	r3, #4
 80062ee:	e006      	b.n	80062fe <HAL_GPIO_Init+0x206>
 80062f0:	2303      	movs	r3, #3
 80062f2:	e004      	b.n	80062fe <HAL_GPIO_Init+0x206>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e002      	b.n	80062fe <HAL_GPIO_Init+0x206>
 80062f8:	2301      	movs	r3, #1
 80062fa:	e000      	b.n	80062fe <HAL_GPIO_Init+0x206>
 80062fc:	2300      	movs	r3, #0
 80062fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006300:	f002 0203 	and.w	r2, r2, #3
 8006304:	0092      	lsls	r2, r2, #2
 8006306:	4093      	lsls	r3, r2
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800630e:	492f      	ldr	r1, [pc, #188]	; (80063cc <HAL_GPIO_Init+0x2d4>)
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	089b      	lsrs	r3, r3, #2
 8006314:	3302      	adds	r3, #2
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d006      	beq.n	8006336 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006328:	4b2f      	ldr	r3, [pc, #188]	; (80063e8 <HAL_GPIO_Init+0x2f0>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	492e      	ldr	r1, [pc, #184]	; (80063e8 <HAL_GPIO_Init+0x2f0>)
 800632e:	69bb      	ldr	r3, [r7, #24]
 8006330:	4313      	orrs	r3, r2
 8006332:	600b      	str	r3, [r1, #0]
 8006334:	e006      	b.n	8006344 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006336:	4b2c      	ldr	r3, [pc, #176]	; (80063e8 <HAL_GPIO_Init+0x2f0>)
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	43db      	mvns	r3, r3
 800633e:	492a      	ldr	r1, [pc, #168]	; (80063e8 <HAL_GPIO_Init+0x2f0>)
 8006340:	4013      	ands	r3, r2
 8006342:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d006      	beq.n	800635e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006350:	4b25      	ldr	r3, [pc, #148]	; (80063e8 <HAL_GPIO_Init+0x2f0>)
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	4924      	ldr	r1, [pc, #144]	; (80063e8 <HAL_GPIO_Init+0x2f0>)
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	4313      	orrs	r3, r2
 800635a:	604b      	str	r3, [r1, #4]
 800635c:	e006      	b.n	800636c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800635e:	4b22      	ldr	r3, [pc, #136]	; (80063e8 <HAL_GPIO_Init+0x2f0>)
 8006360:	685a      	ldr	r2, [r3, #4]
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	43db      	mvns	r3, r3
 8006366:	4920      	ldr	r1, [pc, #128]	; (80063e8 <HAL_GPIO_Init+0x2f0>)
 8006368:	4013      	ands	r3, r2
 800636a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d006      	beq.n	8006386 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006378:	4b1b      	ldr	r3, [pc, #108]	; (80063e8 <HAL_GPIO_Init+0x2f0>)
 800637a:	689a      	ldr	r2, [r3, #8]
 800637c:	491a      	ldr	r1, [pc, #104]	; (80063e8 <HAL_GPIO_Init+0x2f0>)
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	4313      	orrs	r3, r2
 8006382:	608b      	str	r3, [r1, #8]
 8006384:	e006      	b.n	8006394 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006386:	4b18      	ldr	r3, [pc, #96]	; (80063e8 <HAL_GPIO_Init+0x2f0>)
 8006388:	689a      	ldr	r2, [r3, #8]
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	43db      	mvns	r3, r3
 800638e:	4916      	ldr	r1, [pc, #88]	; (80063e8 <HAL_GPIO_Init+0x2f0>)
 8006390:	4013      	ands	r3, r2
 8006392:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d025      	beq.n	80063ec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80063a0:	4b11      	ldr	r3, [pc, #68]	; (80063e8 <HAL_GPIO_Init+0x2f0>)
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	4910      	ldr	r1, [pc, #64]	; (80063e8 <HAL_GPIO_Init+0x2f0>)
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60cb      	str	r3, [r1, #12]
 80063ac:	e025      	b.n	80063fa <HAL_GPIO_Init+0x302>
 80063ae:	bf00      	nop
 80063b0:	10320000 	.word	0x10320000
 80063b4:	10310000 	.word	0x10310000
 80063b8:	10220000 	.word	0x10220000
 80063bc:	10210000 	.word	0x10210000
 80063c0:	10120000 	.word	0x10120000
 80063c4:	10110000 	.word	0x10110000
 80063c8:	40021000 	.word	0x40021000
 80063cc:	40010000 	.word	0x40010000
 80063d0:	40010800 	.word	0x40010800
 80063d4:	40010c00 	.word	0x40010c00
 80063d8:	40011000 	.word	0x40011000
 80063dc:	40011400 	.word	0x40011400
 80063e0:	40011800 	.word	0x40011800
 80063e4:	40011c00 	.word	0x40011c00
 80063e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80063ec:	4b0b      	ldr	r3, [pc, #44]	; (800641c <HAL_GPIO_Init+0x324>)
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	43db      	mvns	r3, r3
 80063f4:	4909      	ldr	r1, [pc, #36]	; (800641c <HAL_GPIO_Init+0x324>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80063fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fc:	3301      	adds	r3, #1
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	fa22 f303 	lsr.w	r3, r2, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	f47f ae7e 	bne.w	800610c <HAL_GPIO_Init+0x14>
  }
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	372c      	adds	r7, #44	; 0x2c
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr
 800641c:	40010400 	.word	0x40010400

08006420 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	460b      	mov	r3, r1
 800642a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	887b      	ldrh	r3, [r7, #2]
 8006432:	4013      	ands	r3, r2
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006438:	2301      	movs	r3, #1
 800643a:	73fb      	strb	r3, [r7, #15]
 800643c:	e001      	b.n	8006442 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800643e:	2300      	movs	r3, #0
 8006440:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006442:	7bfb      	ldrb	r3, [r7, #15]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	bc80      	pop	{r7}
 800644c:	4770      	bx	lr

0800644e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	807b      	strh	r3, [r7, #2]
 800645a:	4613      	mov	r3, r2
 800645c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800645e:	787b      	ldrb	r3, [r7, #1]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006464:	887a      	ldrh	r2, [r7, #2]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800646a:	e003      	b.n	8006474 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800646c:	887b      	ldrh	r3, [r7, #2]
 800646e:	041a      	lsls	r2, r3, #16
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	611a      	str	r2, [r3, #16]
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	bc80      	pop	{r7}
 800647c:	4770      	bx	lr
	...

08006480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b086      	sub	sp, #24
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e26c      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	f000 8087 	beq.w	80065ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064a0:	4b92      	ldr	r3, [pc, #584]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f003 030c 	and.w	r3, r3, #12
 80064a8:	2b04      	cmp	r3, #4
 80064aa:	d00c      	beq.n	80064c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80064ac:	4b8f      	ldr	r3, [pc, #572]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	f003 030c 	and.w	r3, r3, #12
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d112      	bne.n	80064de <HAL_RCC_OscConfig+0x5e>
 80064b8:	4b8c      	ldr	r3, [pc, #560]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c4:	d10b      	bne.n	80064de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064c6:	4b89      	ldr	r3, [pc, #548]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d06c      	beq.n	80065ac <HAL_RCC_OscConfig+0x12c>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d168      	bne.n	80065ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e246      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e6:	d106      	bne.n	80064f6 <HAL_RCC_OscConfig+0x76>
 80064e8:	4b80      	ldr	r3, [pc, #512]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a7f      	ldr	r2, [pc, #508]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 80064ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	e02e      	b.n	8006554 <HAL_RCC_OscConfig+0xd4>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10c      	bne.n	8006518 <HAL_RCC_OscConfig+0x98>
 80064fe:	4b7b      	ldr	r3, [pc, #492]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a7a      	ldr	r2, [pc, #488]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 8006504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	4b78      	ldr	r3, [pc, #480]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a77      	ldr	r2, [pc, #476]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 8006510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	e01d      	b.n	8006554 <HAL_RCC_OscConfig+0xd4>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006520:	d10c      	bne.n	800653c <HAL_RCC_OscConfig+0xbc>
 8006522:	4b72      	ldr	r3, [pc, #456]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a71      	ldr	r2, [pc, #452]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 8006528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	4b6f      	ldr	r3, [pc, #444]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a6e      	ldr	r2, [pc, #440]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 8006534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	e00b      	b.n	8006554 <HAL_RCC_OscConfig+0xd4>
 800653c:	4b6b      	ldr	r3, [pc, #428]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a6a      	ldr	r2, [pc, #424]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 8006542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	4b68      	ldr	r3, [pc, #416]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a67      	ldr	r2, [pc, #412]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 800654e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006552:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d013      	beq.n	8006584 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800655c:	f7ff fb88 	bl	8005c70 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006562:	e008      	b.n	8006576 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006564:	f7ff fb84 	bl	8005c70 <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	2b64      	cmp	r3, #100	; 0x64
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e1fa      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006576:	4b5d      	ldr	r3, [pc, #372]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d0f0      	beq.n	8006564 <HAL_RCC_OscConfig+0xe4>
 8006582:	e014      	b.n	80065ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006584:	f7ff fb74 	bl	8005c70 <HAL_GetTick>
 8006588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800658a:	e008      	b.n	800659e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800658c:	f7ff fb70 	bl	8005c70 <HAL_GetTick>
 8006590:	4602      	mov	r2, r0
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	2b64      	cmp	r3, #100	; 0x64
 8006598:	d901      	bls.n	800659e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e1e6      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800659e:	4b53      	ldr	r3, [pc, #332]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d1f0      	bne.n	800658c <HAL_RCC_OscConfig+0x10c>
 80065aa:	e000      	b.n	80065ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d063      	beq.n	8006682 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065ba:	4b4c      	ldr	r3, [pc, #304]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f003 030c 	and.w	r3, r3, #12
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d00b      	beq.n	80065de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80065c6:	4b49      	ldr	r3, [pc, #292]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f003 030c 	and.w	r3, r3, #12
 80065ce:	2b08      	cmp	r3, #8
 80065d0:	d11c      	bne.n	800660c <HAL_RCC_OscConfig+0x18c>
 80065d2:	4b46      	ldr	r3, [pc, #280]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d116      	bne.n	800660c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065de:	4b43      	ldr	r3, [pc, #268]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d005      	beq.n	80065f6 <HAL_RCC_OscConfig+0x176>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d001      	beq.n	80065f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e1ba      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f6:	4b3d      	ldr	r3, [pc, #244]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	4939      	ldr	r1, [pc, #228]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 8006606:	4313      	orrs	r3, r2
 8006608:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800660a:	e03a      	b.n	8006682 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d020      	beq.n	8006656 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006614:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006616:	2201      	movs	r2, #1
 8006618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800661a:	f7ff fb29 	bl	8005c70 <HAL_GetTick>
 800661e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006620:	e008      	b.n	8006634 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006622:	f7ff fb25 	bl	8005c70 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e19b      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006634:	4b2d      	ldr	r3, [pc, #180]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0f0      	beq.n	8006622 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006640:	4b2a      	ldr	r3, [pc, #168]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	4927      	ldr	r1, [pc, #156]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 8006650:	4313      	orrs	r3, r2
 8006652:	600b      	str	r3, [r1, #0]
 8006654:	e015      	b.n	8006682 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006656:	4b26      	ldr	r3, [pc, #152]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006658:	2200      	movs	r2, #0
 800665a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800665c:	f7ff fb08 	bl	8005c70 <HAL_GetTick>
 8006660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006662:	e008      	b.n	8006676 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006664:	f7ff fb04 	bl	8005c70 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e17a      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006676:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1f0      	bne.n	8006664 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d03a      	beq.n	8006704 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d019      	beq.n	80066ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006696:	4b17      	ldr	r3, [pc, #92]	; (80066f4 <HAL_RCC_OscConfig+0x274>)
 8006698:	2201      	movs	r2, #1
 800669a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800669c:	f7ff fae8 	bl	8005c70 <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066a4:	f7ff fae4 	bl	8005c70 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e15a      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066b6:	4b0d      	ldr	r3, [pc, #52]	; (80066ec <HAL_RCC_OscConfig+0x26c>)
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0f0      	beq.n	80066a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80066c2:	2001      	movs	r0, #1
 80066c4:	f000 fad8 	bl	8006c78 <RCC_Delay>
 80066c8:	e01c      	b.n	8006704 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066ca:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <HAL_RCC_OscConfig+0x274>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066d0:	f7ff face 	bl	8005c70 <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066d6:	e00f      	b.n	80066f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066d8:	f7ff faca 	bl	8005c70 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d908      	bls.n	80066f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e140      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
 80066ea:	bf00      	nop
 80066ec:	40021000 	.word	0x40021000
 80066f0:	42420000 	.word	0x42420000
 80066f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066f8:	4b9e      	ldr	r3, [pc, #632]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1e9      	bne.n	80066d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80a6 	beq.w	800685e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006712:	2300      	movs	r3, #0
 8006714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006716:	4b97      	ldr	r3, [pc, #604]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10d      	bne.n	800673e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006722:	4b94      	ldr	r3, [pc, #592]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	4a93      	ldr	r2, [pc, #588]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 8006728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800672c:	61d3      	str	r3, [r2, #28]
 800672e:	4b91      	ldr	r3, [pc, #580]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006736:	60bb      	str	r3, [r7, #8]
 8006738:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800673a:	2301      	movs	r3, #1
 800673c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800673e:	4b8e      	ldr	r3, [pc, #568]	; (8006978 <HAL_RCC_OscConfig+0x4f8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006746:	2b00      	cmp	r3, #0
 8006748:	d118      	bne.n	800677c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800674a:	4b8b      	ldr	r3, [pc, #556]	; (8006978 <HAL_RCC_OscConfig+0x4f8>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a8a      	ldr	r2, [pc, #552]	; (8006978 <HAL_RCC_OscConfig+0x4f8>)
 8006750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006756:	f7ff fa8b 	bl	8005c70 <HAL_GetTick>
 800675a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800675c:	e008      	b.n	8006770 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800675e:	f7ff fa87 	bl	8005c70 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b64      	cmp	r3, #100	; 0x64
 800676a:	d901      	bls.n	8006770 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e0fd      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006770:	4b81      	ldr	r3, [pc, #516]	; (8006978 <HAL_RCC_OscConfig+0x4f8>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0f0      	beq.n	800675e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d106      	bne.n	8006792 <HAL_RCC_OscConfig+0x312>
 8006784:	4b7b      	ldr	r3, [pc, #492]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	4a7a      	ldr	r2, [pc, #488]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 800678a:	f043 0301 	orr.w	r3, r3, #1
 800678e:	6213      	str	r3, [r2, #32]
 8006790:	e02d      	b.n	80067ee <HAL_RCC_OscConfig+0x36e>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d10c      	bne.n	80067b4 <HAL_RCC_OscConfig+0x334>
 800679a:	4b76      	ldr	r3, [pc, #472]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	4a75      	ldr	r2, [pc, #468]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80067a0:	f023 0301 	bic.w	r3, r3, #1
 80067a4:	6213      	str	r3, [r2, #32]
 80067a6:	4b73      	ldr	r3, [pc, #460]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	4a72      	ldr	r2, [pc, #456]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80067ac:	f023 0304 	bic.w	r3, r3, #4
 80067b0:	6213      	str	r3, [r2, #32]
 80067b2:	e01c      	b.n	80067ee <HAL_RCC_OscConfig+0x36e>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	2b05      	cmp	r3, #5
 80067ba:	d10c      	bne.n	80067d6 <HAL_RCC_OscConfig+0x356>
 80067bc:	4b6d      	ldr	r3, [pc, #436]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	4a6c      	ldr	r2, [pc, #432]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80067c2:	f043 0304 	orr.w	r3, r3, #4
 80067c6:	6213      	str	r3, [r2, #32]
 80067c8:	4b6a      	ldr	r3, [pc, #424]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80067ca:	6a1b      	ldr	r3, [r3, #32]
 80067cc:	4a69      	ldr	r2, [pc, #420]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80067ce:	f043 0301 	orr.w	r3, r3, #1
 80067d2:	6213      	str	r3, [r2, #32]
 80067d4:	e00b      	b.n	80067ee <HAL_RCC_OscConfig+0x36e>
 80067d6:	4b67      	ldr	r3, [pc, #412]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	4a66      	ldr	r2, [pc, #408]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80067dc:	f023 0301 	bic.w	r3, r3, #1
 80067e0:	6213      	str	r3, [r2, #32]
 80067e2:	4b64      	ldr	r3, [pc, #400]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	4a63      	ldr	r2, [pc, #396]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80067e8:	f023 0304 	bic.w	r3, r3, #4
 80067ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d015      	beq.n	8006822 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067f6:	f7ff fa3b 	bl	8005c70 <HAL_GetTick>
 80067fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067fc:	e00a      	b.n	8006814 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067fe:	f7ff fa37 	bl	8005c70 <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	f241 3288 	movw	r2, #5000	; 0x1388
 800680c:	4293      	cmp	r3, r2
 800680e:	d901      	bls.n	8006814 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e0ab      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006814:	4b57      	ldr	r3, [pc, #348]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d0ee      	beq.n	80067fe <HAL_RCC_OscConfig+0x37e>
 8006820:	e014      	b.n	800684c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006822:	f7ff fa25 	bl	8005c70 <HAL_GetTick>
 8006826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006828:	e00a      	b.n	8006840 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800682a:	f7ff fa21 	bl	8005c70 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	f241 3288 	movw	r2, #5000	; 0x1388
 8006838:	4293      	cmp	r3, r2
 800683a:	d901      	bls.n	8006840 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e095      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006840:	4b4c      	ldr	r3, [pc, #304]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1ee      	bne.n	800682a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800684c:	7dfb      	ldrb	r3, [r7, #23]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d105      	bne.n	800685e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006852:	4b48      	ldr	r3, [pc, #288]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	4a47      	ldr	r2, [pc, #284]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 8006858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800685c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	2b00      	cmp	r3, #0
 8006864:	f000 8081 	beq.w	800696a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006868:	4b42      	ldr	r3, [pc, #264]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f003 030c 	and.w	r3, r3, #12
 8006870:	2b08      	cmp	r3, #8
 8006872:	d061      	beq.n	8006938 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d146      	bne.n	800690a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800687c:	4b3f      	ldr	r3, [pc, #252]	; (800697c <HAL_RCC_OscConfig+0x4fc>)
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006882:	f7ff f9f5 	bl	8005c70 <HAL_GetTick>
 8006886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006888:	e008      	b.n	800689c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800688a:	f7ff f9f1 	bl	8005c70 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e067      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800689c:	4b35      	ldr	r3, [pc, #212]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1f0      	bne.n	800688a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b0:	d108      	bne.n	80068c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80068b2:	4b30      	ldr	r3, [pc, #192]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	492d      	ldr	r1, [pc, #180]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068c4:	4b2b      	ldr	r3, [pc, #172]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a19      	ldr	r1, [r3, #32]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	430b      	orrs	r3, r1
 80068d6:	4927      	ldr	r1, [pc, #156]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80068d8:	4313      	orrs	r3, r2
 80068da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068dc:	4b27      	ldr	r3, [pc, #156]	; (800697c <HAL_RCC_OscConfig+0x4fc>)
 80068de:	2201      	movs	r2, #1
 80068e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e2:	f7ff f9c5 	bl	8005c70 <HAL_GetTick>
 80068e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068e8:	e008      	b.n	80068fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ea:	f7ff f9c1 	bl	8005c70 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d901      	bls.n	80068fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e037      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068fc:	4b1d      	ldr	r3, [pc, #116]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0f0      	beq.n	80068ea <HAL_RCC_OscConfig+0x46a>
 8006908:	e02f      	b.n	800696a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800690a:	4b1c      	ldr	r3, [pc, #112]	; (800697c <HAL_RCC_OscConfig+0x4fc>)
 800690c:	2200      	movs	r2, #0
 800690e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006910:	f7ff f9ae 	bl	8005c70 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006916:	e008      	b.n	800692a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006918:	f7ff f9aa 	bl	8005c70 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b02      	cmp	r3, #2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e020      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800692a:	4b12      	ldr	r3, [pc, #72]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1f0      	bne.n	8006918 <HAL_RCC_OscConfig+0x498>
 8006936:	e018      	b.n	800696a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e013      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006944:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <HAL_RCC_OscConfig+0x4f4>)
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	429a      	cmp	r2, r3
 8006956:	d106      	bne.n	8006966 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006962:	429a      	cmp	r2, r3
 8006964:	d001      	beq.n	800696a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	40021000 	.word	0x40021000
 8006978:	40007000 	.word	0x40007000
 800697c:	42420060 	.word	0x42420060

08006980 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e0d0      	b.n	8006b36 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006994:	4b6a      	ldr	r3, [pc, #424]	; (8006b40 <HAL_RCC_ClockConfig+0x1c0>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0307 	and.w	r3, r3, #7
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d910      	bls.n	80069c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069a2:	4b67      	ldr	r3, [pc, #412]	; (8006b40 <HAL_RCC_ClockConfig+0x1c0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f023 0207 	bic.w	r2, r3, #7
 80069aa:	4965      	ldr	r1, [pc, #404]	; (8006b40 <HAL_RCC_ClockConfig+0x1c0>)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069b2:	4b63      	ldr	r3, [pc, #396]	; (8006b40 <HAL_RCC_ClockConfig+0x1c0>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d001      	beq.n	80069c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e0b8      	b.n	8006b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d020      	beq.n	8006a12 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0304 	and.w	r3, r3, #4
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069dc:	4b59      	ldr	r3, [pc, #356]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	4a58      	ldr	r2, [pc, #352]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 80069e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80069e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0308 	and.w	r3, r3, #8
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d005      	beq.n	8006a00 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069f4:	4b53      	ldr	r3, [pc, #332]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	4a52      	ldr	r2, [pc, #328]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 80069fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80069fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a00:	4b50      	ldr	r3, [pc, #320]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	494d      	ldr	r1, [pc, #308]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d040      	beq.n	8006aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d107      	bne.n	8006a36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a26:	4b47      	ldr	r3, [pc, #284]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d115      	bne.n	8006a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e07f      	b.n	8006b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d107      	bne.n	8006a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a3e:	4b41      	ldr	r3, [pc, #260]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e073      	b.n	8006b36 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a4e:	4b3d      	ldr	r3, [pc, #244]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e06b      	b.n	8006b36 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a5e:	4b39      	ldr	r3, [pc, #228]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f023 0203 	bic.w	r2, r3, #3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	4936      	ldr	r1, [pc, #216]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a70:	f7ff f8fe 	bl	8005c70 <HAL_GetTick>
 8006a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a76:	e00a      	b.n	8006a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a78:	f7ff f8fa 	bl	8005c70 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e053      	b.n	8006b36 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a8e:	4b2d      	ldr	r3, [pc, #180]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f003 020c 	and.w	r2, r3, #12
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d1eb      	bne.n	8006a78 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006aa0:	4b27      	ldr	r3, [pc, #156]	; (8006b40 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d210      	bcs.n	8006ad0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aae:	4b24      	ldr	r3, [pc, #144]	; (8006b40 <HAL_RCC_ClockConfig+0x1c0>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f023 0207 	bic.w	r2, r3, #7
 8006ab6:	4922      	ldr	r1, [pc, #136]	; (8006b40 <HAL_RCC_ClockConfig+0x1c0>)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006abe:	4b20      	ldr	r3, [pc, #128]	; (8006b40 <HAL_RCC_ClockConfig+0x1c0>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d001      	beq.n	8006ad0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e032      	b.n	8006b36 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d008      	beq.n	8006aee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006adc:	4b19      	ldr	r3, [pc, #100]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	4916      	ldr	r1, [pc, #88]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0308 	and.w	r3, r3, #8
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d009      	beq.n	8006b0e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006afa:	4b12      	ldr	r3, [pc, #72]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	490e      	ldr	r1, [pc, #56]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b0e:	f000 f821 	bl	8006b54 <HAL_RCC_GetSysClockFreq>
 8006b12:	4602      	mov	r2, r0
 8006b14:	4b0b      	ldr	r3, [pc, #44]	; (8006b44 <HAL_RCC_ClockConfig+0x1c4>)
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	091b      	lsrs	r3, r3, #4
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	490a      	ldr	r1, [pc, #40]	; (8006b48 <HAL_RCC_ClockConfig+0x1c8>)
 8006b20:	5ccb      	ldrb	r3, [r1, r3]
 8006b22:	fa22 f303 	lsr.w	r3, r2, r3
 8006b26:	4a09      	ldr	r2, [pc, #36]	; (8006b4c <HAL_RCC_ClockConfig+0x1cc>)
 8006b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b2a:	4b09      	ldr	r3, [pc, #36]	; (8006b50 <HAL_RCC_ClockConfig+0x1d0>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7ff f85c 	bl	8005bec <HAL_InitTick>

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	40022000 	.word	0x40022000
 8006b44:	40021000 	.word	0x40021000
 8006b48:	08008d44 	.word	0x08008d44
 8006b4c:	20000020 	.word	0x20000020
 8006b50:	20000028 	.word	0x20000028

08006b54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b54:	b490      	push	{r4, r7}
 8006b56:	b08a      	sub	sp, #40	; 0x28
 8006b58:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006b5a:	4b2a      	ldr	r3, [pc, #168]	; (8006c04 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006b5c:	1d3c      	adds	r4, r7, #4
 8006b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006b64:	f240 2301 	movw	r3, #513	; 0x201
 8006b68:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61fb      	str	r3, [r7, #28]
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61bb      	str	r3, [r7, #24]
 8006b72:	2300      	movs	r3, #0
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
 8006b76:	2300      	movs	r3, #0
 8006b78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006b7e:	4b22      	ldr	r3, [pc, #136]	; (8006c08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f003 030c 	and.w	r3, r3, #12
 8006b8a:	2b04      	cmp	r3, #4
 8006b8c:	d002      	beq.n	8006b94 <HAL_RCC_GetSysClockFreq+0x40>
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	d003      	beq.n	8006b9a <HAL_RCC_GetSysClockFreq+0x46>
 8006b92:	e02d      	b.n	8006bf0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b94:	4b1d      	ldr	r3, [pc, #116]	; (8006c0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b96:	623b      	str	r3, [r7, #32]
      break;
 8006b98:	e02d      	b.n	8006bf6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	0c9b      	lsrs	r3, r3, #18
 8006b9e:	f003 030f 	and.w	r3, r3, #15
 8006ba2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006bac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d013      	beq.n	8006be0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006bb8:	4b13      	ldr	r3, [pc, #76]	; (8006c08 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	0c5b      	lsrs	r3, r3, #17
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006bcc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	4a0e      	ldr	r2, [pc, #56]	; (8006c0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bd2:	fb02 f203 	mul.w	r2, r2, r3
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bde:	e004      	b.n	8006bea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	4a0b      	ldr	r2, [pc, #44]	; (8006c10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006be4:	fb02 f303 	mul.w	r3, r2, r3
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	623b      	str	r3, [r7, #32]
      break;
 8006bee:	e002      	b.n	8006bf6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006bf0:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bf2:	623b      	str	r3, [r7, #32]
      break;
 8006bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3728      	adds	r7, #40	; 0x28
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bc90      	pop	{r4, r7}
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	08008d2c 	.word	0x08008d2c
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	007a1200 	.word	0x007a1200
 8006c10:	003d0900 	.word	0x003d0900

08006c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c18:	4b02      	ldr	r3, [pc, #8]	; (8006c24 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bc80      	pop	{r7}
 8006c22:	4770      	bx	lr
 8006c24:	20000020 	.word	0x20000020

08006c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c2c:	f7ff fff2 	bl	8006c14 <HAL_RCC_GetHCLKFreq>
 8006c30:	4602      	mov	r2, r0
 8006c32:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	0a1b      	lsrs	r3, r3, #8
 8006c38:	f003 0307 	and.w	r3, r3, #7
 8006c3c:	4903      	ldr	r1, [pc, #12]	; (8006c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c3e:	5ccb      	ldrb	r3, [r1, r3]
 8006c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	40021000 	.word	0x40021000
 8006c4c:	08008d54 	.word	0x08008d54

08006c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c54:	f7ff ffde 	bl	8006c14 <HAL_RCC_GetHCLKFreq>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	4b05      	ldr	r3, [pc, #20]	; (8006c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	0adb      	lsrs	r3, r3, #11
 8006c60:	f003 0307 	and.w	r3, r3, #7
 8006c64:	4903      	ldr	r1, [pc, #12]	; (8006c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c66:	5ccb      	ldrb	r3, [r1, r3]
 8006c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	40021000 	.word	0x40021000
 8006c74:	08008d54 	.word	0x08008d54

08006c78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006c80:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <RCC_Delay+0x34>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a0a      	ldr	r2, [pc, #40]	; (8006cb0 <RCC_Delay+0x38>)
 8006c86:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8a:	0a5b      	lsrs	r3, r3, #9
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	fb02 f303 	mul.w	r3, r2, r3
 8006c92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006c94:	bf00      	nop
  }
  while (Delay --);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1e5a      	subs	r2, r3, #1
 8006c9a:	60fa      	str	r2, [r7, #12]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1f9      	bne.n	8006c94 <RCC_Delay+0x1c>
}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr
 8006cac:	20000020 	.word	0x20000020
 8006cb0:	10624dd3 	.word	0x10624dd3

08006cb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b082      	sub	sp, #8
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e076      	b.n	8006db4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d108      	bne.n	8006ce0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cd6:	d009      	beq.n	8006cec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	61da      	str	r2, [r3, #28]
 8006cde:	e005      	b.n	8006cec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fa f8be 	bl	8000e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006d34:	431a      	orrs	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	695b      	ldr	r3, [r3, #20]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	431a      	orrs	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d70:	ea42 0103 	orr.w	r1, r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	430a      	orrs	r2, r1
 8006d82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	0c1a      	lsrs	r2, r3, #16
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f002 0204 	and.w	r2, r2, #4
 8006d92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69da      	ldr	r2, [r3, #28]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006da2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08c      	sub	sp, #48	; 0x30
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d101      	bne.n	8006de2 <HAL_SPI_TransmitReceive+0x26>
 8006dde:	2302      	movs	r3, #2
 8006de0:	e18a      	b.n	80070f8 <HAL_SPI_TransmitReceive+0x33c>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dea:	f7fe ff41 	bl	8005c70 <HAL_GetTick>
 8006dee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006e00:	887b      	ldrh	r3, [r7, #2]
 8006e02:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d00f      	beq.n	8006e2c <HAL_SPI_TransmitReceive+0x70>
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e12:	d107      	bne.n	8006e24 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d103      	bne.n	8006e24 <HAL_SPI_TransmitReceive+0x68>
 8006e1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d003      	beq.n	8006e2c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006e24:	2302      	movs	r3, #2
 8006e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e2a:	e15b      	b.n	80070e4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d005      	beq.n	8006e3e <HAL_SPI_TransmitReceive+0x82>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_SPI_TransmitReceive+0x82>
 8006e38:	887b      	ldrh	r3, [r7, #2]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d103      	bne.n	8006e46 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006e44:	e14e      	b.n	80070e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d003      	beq.n	8006e5a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2205      	movs	r2, #5
 8006e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	887a      	ldrh	r2, [r7, #2]
 8006e6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	887a      	ldrh	r2, [r7, #2]
 8006e70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	887a      	ldrh	r2, [r7, #2]
 8006e7c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	887a      	ldrh	r2, [r7, #2]
 8006e82:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e9a:	2b40      	cmp	r3, #64	; 0x40
 8006e9c:	d007      	beq.n	8006eae <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006eac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb6:	d178      	bne.n	8006faa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d002      	beq.n	8006ec6 <HAL_SPI_TransmitReceive+0x10a>
 8006ec0:	8b7b      	ldrh	r3, [r7, #26]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d166      	bne.n	8006f94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eca:	881a      	ldrh	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed6:	1c9a      	adds	r2, r3, #2
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	b29a      	uxth	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006eea:	e053      	b.n	8006f94 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d11b      	bne.n	8006f32 <HAL_SPI_TransmitReceive+0x176>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d016      	beq.n	8006f32 <HAL_SPI_TransmitReceive+0x176>
 8006f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d113      	bne.n	8006f32 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0e:	881a      	ldrh	r2, [r3, #0]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1a:	1c9a      	adds	r2, r3, #2
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3b01      	subs	r3, #1
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d119      	bne.n	8006f74 <HAL_SPI_TransmitReceive+0x1b8>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d014      	beq.n	8006f74 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	68da      	ldr	r2, [r3, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f54:	b292      	uxth	r2, r2
 8006f56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5c:	1c9a      	adds	r2, r3, #2
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f70:	2301      	movs	r3, #1
 8006f72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006f74:	f7fe fe7c 	bl	8005c70 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d807      	bhi.n	8006f94 <HAL_SPI_TransmitReceive+0x1d8>
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8a:	d003      	beq.n	8006f94 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006f92:	e0a7      	b.n	80070e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1a6      	bne.n	8006eec <HAL_SPI_TransmitReceive+0x130>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1a1      	bne.n	8006eec <HAL_SPI_TransmitReceive+0x130>
 8006fa8:	e07c      	b.n	80070a4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <HAL_SPI_TransmitReceive+0x1fc>
 8006fb2:	8b7b      	ldrh	r3, [r7, #26]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d16b      	bne.n	8007090 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	330c      	adds	r3, #12
 8006fc2:	7812      	ldrb	r2, [r2, #0]
 8006fc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fde:	e057      	b.n	8007090 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d11c      	bne.n	8007028 <HAL_SPI_TransmitReceive+0x26c>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d017      	beq.n	8007028 <HAL_SPI_TransmitReceive+0x26c>
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d114      	bne.n	8007028 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	330c      	adds	r3, #12
 8007008:	7812      	ldrb	r2, [r2, #0]
 800700a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800701a:	b29b      	uxth	r3, r3
 800701c:	3b01      	subs	r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b01      	cmp	r3, #1
 8007034:	d119      	bne.n	800706a <HAL_SPI_TransmitReceive+0x2ae>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800703a:	b29b      	uxth	r3, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	d014      	beq.n	800706a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68da      	ldr	r2, [r3, #12]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	b2d2      	uxtb	r2, r2
 800704c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007066:	2301      	movs	r3, #1
 8007068:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800706a:	f7fe fe01 	bl	8005c70 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007076:	429a      	cmp	r2, r3
 8007078:	d803      	bhi.n	8007082 <HAL_SPI_TransmitReceive+0x2c6>
 800707a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d102      	bne.n	8007088 <HAL_SPI_TransmitReceive+0x2cc>
 8007082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007084:	2b00      	cmp	r3, #0
 8007086:	d103      	bne.n	8007090 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800708e:	e029      	b.n	80070e4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1a2      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x224>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800709e:	b29b      	uxth	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d19d      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f000 f9b5 	bl	8007418 <SPI_EndRxTxTransaction>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d006      	beq.n	80070c2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2220      	movs	r2, #32
 80070be:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80070c0:	e010      	b.n	80070e4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10b      	bne.n	80070e2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80070ca:	2300      	movs	r3, #0
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	617b      	str	r3, [r7, #20]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	e000      	b.n	80070e4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80070e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80070f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3730      	adds	r7, #48	; 0x30
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	099b      	lsrs	r3, r3, #6
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10f      	bne.n	8007144 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	099b      	lsrs	r3, r3, #6
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d004      	beq.n	8007144 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
    return;
 8007142:	e0be      	b.n	80072c2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	085b      	lsrs	r3, r3, #1
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <HAL_SPI_IRQHandler+0x66>
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	09db      	lsrs	r3, r3, #7
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	4798      	blx	r3
    return;
 8007164:	e0ad      	b.n	80072c2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	095b      	lsrs	r3, r3, #5
 800716a:	f003 0301 	and.w	r3, r3, #1
 800716e:	2b00      	cmp	r3, #0
 8007170:	d106      	bne.n	8007180 <HAL_SPI_IRQHandler+0x80>
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	099b      	lsrs	r3, r3, #6
 8007176:	f003 0301 	and.w	r3, r3, #1
 800717a:	2b00      	cmp	r3, #0
 800717c:	f000 80a1 	beq.w	80072c2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	095b      	lsrs	r3, r3, #5
 8007184:	f003 0301 	and.w	r3, r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 809a 	beq.w	80072c2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	099b      	lsrs	r3, r3, #6
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d023      	beq.n	80071e2 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d011      	beq.n	80071ca <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071aa:	f043 0204 	orr.w	r2, r3, #4
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	e00b      	b.n	80071e2 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071ca:	2300      	movs	r3, #0
 80071cc:	613b      	str	r3, [r7, #16]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	613b      	str	r3, [r7, #16]
 80071de:	693b      	ldr	r3, [r7, #16]
        return;
 80071e0:	e06f      	b.n	80072c2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	095b      	lsrs	r3, r3, #5
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d014      	beq.n	8007218 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f2:	f043 0201 	orr.w	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80071fa:	2300      	movs	r3, #0
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	60fb      	str	r3, [r7, #12]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721c:	2b00      	cmp	r3, #0
 800721e:	d04f      	beq.n	80072c0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800722e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	f003 0302 	and.w	r3, r3, #2
 800723e:	2b00      	cmp	r3, #0
 8007240:	d104      	bne.n	800724c <HAL_SPI_IRQHandler+0x14c>
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	f003 0301 	and.w	r3, r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	d034      	beq.n	80072b6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f022 0203 	bic.w	r2, r2, #3
 800725a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007260:	2b00      	cmp	r3, #0
 8007262:	d011      	beq.n	8007288 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007268:	4a17      	ldr	r2, [pc, #92]	; (80072c8 <HAL_SPI_IRQHandler+0x1c8>)
 800726a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007270:	4618      	mov	r0, r3
 8007272:	f7fe fe39 	bl	8005ee8 <HAL_DMA_Abort_IT>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007280:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800728c:	2b00      	cmp	r3, #0
 800728e:	d016      	beq.n	80072be <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007294:	4a0c      	ldr	r2, [pc, #48]	; (80072c8 <HAL_SPI_IRQHandler+0x1c8>)
 8007296:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729c:	4618      	mov	r0, r3
 800729e:	f7fe fe23 	bl	8005ee8 <HAL_DMA_Abort_IT>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00a      	beq.n	80072be <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80072b4:	e003      	b.n	80072be <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f808 	bl	80072cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80072bc:	e000      	b.n	80072c0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80072be:	bf00      	nop
    return;
 80072c0:	bf00      	nop
  }
}
 80072c2:	3720      	adds	r7, #32
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	080072df 	.word	0x080072df

080072cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	bc80      	pop	{r7}
 80072dc:	4770      	bx	lr

080072de <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b084      	sub	sp, #16
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f7ff ffe7 	bl	80072cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80072fe:	bf00      	nop
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
	...

08007308 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	4613      	mov	r3, r2
 8007316:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007318:	f7fe fcaa 	bl	8005c70 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	1a9b      	subs	r3, r3, r2
 8007322:	683a      	ldr	r2, [r7, #0]
 8007324:	4413      	add	r3, r2
 8007326:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007328:	f7fe fca2 	bl	8005c70 <HAL_GetTick>
 800732c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800732e:	4b39      	ldr	r3, [pc, #228]	; (8007414 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	015b      	lsls	r3, r3, #5
 8007334:	0d1b      	lsrs	r3, r3, #20
 8007336:	69fa      	ldr	r2, [r7, #28]
 8007338:	fb02 f303 	mul.w	r3, r2, r3
 800733c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800733e:	e054      	b.n	80073ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007346:	d050      	beq.n	80073ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007348:	f7fe fc92 	bl	8005c70 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	69fa      	ldr	r2, [r7, #28]
 8007354:	429a      	cmp	r2, r3
 8007356:	d902      	bls.n	800735e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d13d      	bne.n	80073da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800736c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007376:	d111      	bne.n	800739c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007380:	d004      	beq.n	800738c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800738a:	d107      	bne.n	800739c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800739a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073a4:	d10f      	bne.n	80073c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e017      	b.n	800740a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80073e0:	2300      	movs	r3, #0
 80073e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	4013      	ands	r3, r2
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	bf0c      	ite	eq
 80073fa:	2301      	moveq	r3, #1
 80073fc:	2300      	movne	r3, #0
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	461a      	mov	r2, r3
 8007402:	79fb      	ldrb	r3, [r7, #7]
 8007404:	429a      	cmp	r2, r3
 8007406:	d19b      	bne.n	8007340 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3720      	adds	r7, #32
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	20000020 	.word	0x20000020

08007418 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af02      	add	r7, sp, #8
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	2200      	movs	r2, #0
 800742c:	2180      	movs	r1, #128	; 0x80
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f7ff ff6a 	bl	8007308 <SPI_WaitFlagStateUntilTimeout>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d007      	beq.n	800744a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743e:	f043 0220 	orr.w	r2, r3, #32
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007446:	2303      	movs	r3, #3
 8007448:	e000      	b.n	800744c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d004      	beq.n	8007470 <HAL_SRAM_Init+0x1c>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800746e:	d101      	bne.n	8007474 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e038      	b.n	80074e6 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b00      	cmp	r3, #0
 800747e:	d106      	bne.n	800748e <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f7f9 faa5 	bl	80009d8 <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	3308      	adds	r3, #8
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f000 f903 	bl	80076a4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6818      	ldr	r0, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	461a      	mov	r2, r3
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	f000 f965 	bl	8007778 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6858      	ldr	r0, [r3, #4]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	6879      	ldr	r1, [r7, #4]
 80074bc:	f000 f990 	bl	80077e0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	6892      	ldr	r2, [r2, #8]
 80074c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	6892      	ldr	r2, [r2, #8]
 80074d4:	f041 0101 	orr.w	r1, r1, #1
 80074d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b082      	sub	sp, #8
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d101      	bne.n	8007500 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e03f      	b.n	8007580 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d106      	bne.n	800751a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f7f9 fe3f 	bl	8001198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2224      	movs	r2, #36	; 0x24
 800751e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68da      	ldr	r2, [r3, #12]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007530:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f828 	bl	8007588 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	691a      	ldr	r2, [r3, #16]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007546:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	695a      	ldr	r2, [r3, #20]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007556:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	68da      	ldr	r2, [r3, #12]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007566:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2220      	movs	r2, #32
 8007572:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68da      	ldr	r2, [r3, #12]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689a      	ldr	r2, [r3, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80075c2:	f023 030c 	bic.w	r3, r3, #12
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	6812      	ldr	r2, [r2, #0]
 80075ca:	68b9      	ldr	r1, [r7, #8]
 80075cc:	430b      	orrs	r3, r1
 80075ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	699a      	ldr	r2, [r3, #24]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a2c      	ldr	r2, [pc, #176]	; (800769c <UART_SetConfig+0x114>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d103      	bne.n	80075f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80075f0:	f7ff fb2e 	bl	8006c50 <HAL_RCC_GetPCLK2Freq>
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	e002      	b.n	80075fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80075f8:	f7ff fb16 	bl	8006c28 <HAL_RCC_GetPCLK1Freq>
 80075fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	4613      	mov	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4413      	add	r3, r2
 8007606:	009a      	lsls	r2, r3, #2
 8007608:	441a      	add	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	fbb2 f3f3 	udiv	r3, r2, r3
 8007614:	4a22      	ldr	r2, [pc, #136]	; (80076a0 <UART_SetConfig+0x118>)
 8007616:	fba2 2303 	umull	r2, r3, r2, r3
 800761a:	095b      	lsrs	r3, r3, #5
 800761c:	0119      	lsls	r1, r3, #4
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	009a      	lsls	r2, r3, #2
 8007628:	441a      	add	r2, r3
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	fbb2 f2f3 	udiv	r2, r2, r3
 8007634:	4b1a      	ldr	r3, [pc, #104]	; (80076a0 <UART_SetConfig+0x118>)
 8007636:	fba3 0302 	umull	r0, r3, r3, r2
 800763a:	095b      	lsrs	r3, r3, #5
 800763c:	2064      	movs	r0, #100	; 0x64
 800763e:	fb00 f303 	mul.w	r3, r0, r3
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	3332      	adds	r3, #50	; 0x32
 8007648:	4a15      	ldr	r2, [pc, #84]	; (80076a0 <UART_SetConfig+0x118>)
 800764a:	fba2 2303 	umull	r2, r3, r2, r3
 800764e:	095b      	lsrs	r3, r3, #5
 8007650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007654:	4419      	add	r1, r3
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	4613      	mov	r3, r2
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	009a      	lsls	r2, r3, #2
 8007660:	441a      	add	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	fbb2 f2f3 	udiv	r2, r2, r3
 800766c:	4b0c      	ldr	r3, [pc, #48]	; (80076a0 <UART_SetConfig+0x118>)
 800766e:	fba3 0302 	umull	r0, r3, r3, r2
 8007672:	095b      	lsrs	r3, r3, #5
 8007674:	2064      	movs	r0, #100	; 0x64
 8007676:	fb00 f303 	mul.w	r3, r0, r3
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	011b      	lsls	r3, r3, #4
 800767e:	3332      	adds	r3, #50	; 0x32
 8007680:	4a07      	ldr	r2, [pc, #28]	; (80076a0 <UART_SetConfig+0x118>)
 8007682:	fba2 2303 	umull	r2, r3, r2, r3
 8007686:	095b      	lsrs	r3, r3, #5
 8007688:	f003 020f 	and.w	r2, r3, #15
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	440a      	add	r2, r1
 8007692:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007694:	bf00      	nop
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	40013800 	.word	0x40013800
 80076a0:	51eb851f 	.word	0x51eb851f

080076a4 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	6812      	ldr	r2, [r2, #0]
 80076bc:	f023 0101 	bic.w	r1, r3, #1
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	2b08      	cmp	r3, #8
 80076cc:	d102      	bne.n	80076d4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80076ce:	2340      	movs	r3, #64	; 0x40
 80076d0:	617b      	str	r3, [r7, #20]
 80076d2:	e001      	b.n	80076d8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80076d4:	2300      	movs	r3, #0
 80076d6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80076e4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80076ea:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80076f0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80076f6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80076fc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007702:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8007708:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800770e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8007714:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800771a:	4313      	orrs	r3, r2
 800771c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	4313      	orrs	r3, r2
 8007730:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8007732:	4b10      	ldr	r3, [pc, #64]	; (8007774 <FSMC_NORSRAM_Init+0xd0>)
 8007734:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800773c:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007744:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	43db      	mvns	r3, r3
 8007754:	ea02 0103 	and.w	r1, r2, r3
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	4319      	orrs	r1, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8007766:	2300      	movs	r3, #0
}
 8007768:	4618      	mov	r0, r3
 800776a:	371c      	adds	r7, #28
 800776c:	46bd      	mov	sp, r7
 800776e:	bc80      	pop	{r7}
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	0008fb7f 	.word	0x0008fb7f

08007778 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	011b      	lsls	r3, r3, #4
 800779c:	431a      	orrs	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	021b      	lsls	r3, r3, #8
 80077a4:	431a      	orrs	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	68db      	ldr	r3, [r3, #12]
 80077aa:	041b      	lsls	r3, r3, #16
 80077ac:	431a      	orrs	r2, r3
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	051b      	lsls	r3, r3, #20
 80077b6:	431a      	orrs	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	3b02      	subs	r3, #2
 80077be:	061b      	lsls	r3, r3, #24
 80077c0:	431a      	orrs	r2, r3
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	699b      	ldr	r3, [r3, #24]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	3201      	adds	r2, #1
 80077cc:	4319      	orrs	r1, r3
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr

080077e0 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
 80077ec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077f4:	d11d      	bne.n	8007832 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077fe:	4b13      	ldr	r3, [pc, #76]	; (800784c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007800:	4013      	ands	r3, r2
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	6811      	ldr	r1, [r2, #0]
 8007806:	68ba      	ldr	r2, [r7, #8]
 8007808:	6852      	ldr	r2, [r2, #4]
 800780a:	0112      	lsls	r2, r2, #4
 800780c:	4311      	orrs	r1, r2
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	6892      	ldr	r2, [r2, #8]
 8007812:	0212      	lsls	r2, r2, #8
 8007814:	4311      	orrs	r1, r2
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	6992      	ldr	r2, [r2, #24]
 800781a:	4311      	orrs	r1, r2
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	68d2      	ldr	r2, [r2, #12]
 8007820:	0412      	lsls	r2, r2, #16
 8007822:	430a      	orrs	r2, r1
 8007824:	ea43 0102 	orr.w	r1, r3, r2
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007830:	e005      	b.n	800783e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800783a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	bc80      	pop	{r7}
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	cff00000 	.word	0xcff00000

08007850 <NRF24L01_SPI_Init>:

const uint8_t TX_ADDRESS[TX_ADR_WIDTH] = { 0x34, 0x43, 0x10, 0x10, 0x01 }; //发送地址
const uint8_t RX_ADDRESS[RX_ADR_WIDTH] = { 0x34, 0x43, 0x10, 0x10, 0x01 }; //接收地址

//针对NRF24L01修改SPI2驱动
void NRF24L01_SPI_Init(void) {
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
	__HAL_SPI_DISABLE(&hspi2);               //先关闭SPI2
 8007854:	4b0d      	ldr	r3, [pc, #52]	; (800788c <NRF24L01_SPI_Init+0x3c>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	4b0c      	ldr	r3, [pc, #48]	; (800788c <NRF24L01_SPI_Init+0x3c>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007862:	601a      	str	r2, [r3, #0]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW; //串行同步时钟的空闲状态为低电平
 8007864:	4b09      	ldr	r3, [pc, #36]	; (800788c <NRF24L01_SPI_Init+0x3c>)
 8007866:	2200      	movs	r2, #0
 8007868:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;     //串行同步时钟的第1个跳变沿（上升或下降）数据被采样
 800786a:	4b08      	ldr	r3, [pc, #32]	; (800788c <NRF24L01_SPI_Init+0x3c>)
 800786c:	2200      	movs	r2, #0
 800786e:	615a      	str	r2, [r3, #20]
	HAL_SPI_Init(&hspi2);
 8007870:	4806      	ldr	r0, [pc, #24]	; (800788c <NRF24L01_SPI_Init+0x3c>)
 8007872:	f7ff fa1f 	bl	8006cb4 <HAL_SPI_Init>
	__HAL_SPI_ENABLE(&hspi2);                //使能SPI2
 8007876:	4b05      	ldr	r3, [pc, #20]	; (800788c <NRF24L01_SPI_Init+0x3c>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	4b03      	ldr	r3, [pc, #12]	; (800788c <NRF24L01_SPI_Init+0x3c>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007884:	601a      	str	r2, [r3, #0]
}
 8007886:	bf00      	nop
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20000194 	.word	0x20000194

08007890 <NRF24L01_Init>:

//初始化24L01的IO口
void NRF24L01_Init(void) {
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;
	__HAL_RCC_GPIOB_CLK_ENABLE();			//开启GPIOB时钟
 8007896:	4b1f      	ldr	r3, [pc, #124]	; (8007914 <NRF24L01_Init+0x84>)
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	4a1e      	ldr	r2, [pc, #120]	; (8007914 <NRF24L01_Init+0x84>)
 800789c:	f043 0308 	orr.w	r3, r3, #8
 80078a0:	6193      	str	r3, [r2, #24]
 80078a2:	4b1c      	ldr	r3, [pc, #112]	; (8007914 <NRF24L01_Init+0x84>)
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	607b      	str	r3, [r7, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();			//开启GPIOG时钟
 80078ae:	4b19      	ldr	r3, [pc, #100]	; (8007914 <NRF24L01_Init+0x84>)
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	4a18      	ldr	r2, [pc, #96]	; (8007914 <NRF24L01_Init+0x84>)
 80078b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078b8:	6193      	str	r3, [r2, #24]
 80078ba:	4b16      	ldr	r3, [pc, #88]	; (8007914 <NRF24L01_Init+0x84>)
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c2:	603b      	str	r3, [r7, #0]
 80078c4:	683b      	ldr	r3, [r7, #0]

	//GPIOB7,8推挽输出
    GPIO_Initure.Pin=GPIO_PIN_7|GPIO_PIN_8;	//PB1,2
 80078c6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80078ca:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //输出
 80078cc:	2301      	movs	r3, #1
 80078ce:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB,&GPIO_Initure);     //初始化
 80078d0:	f107 0308 	add.w	r3, r7, #8
 80078d4:	4619      	mov	r1, r3
 80078d6:	4810      	ldr	r0, [pc, #64]	; (8007918 <NRF24L01_Init+0x88>)
 80078d8:	f7fe fc0e 	bl	80060f8 <HAL_GPIO_Init>

	//GPIOA.6上拉输入
	GPIO_Initure.Pin = GPIO_PIN_6;							//PA4
 80078dc:	2340      	movs	r3, #64	; 0x40
 80078de:	60bb      	str	r3, [r7, #8]
	GPIO_Initure.Mode = GPIO_MODE_INPUT;      	//输入
 80078e0:	2300      	movs	r3, #0
 80078e2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);     	//初始化
 80078e4:	f107 0308 	add.w	r3, r7, #8
 80078e8:	4619      	mov	r1, r3
 80078ea:	480b      	ldr	r0, [pc, #44]	; (8007918 <NRF24L01_Init+0x88>)
 80078ec:	f7fe fc04 	bl	80060f8 <HAL_GPIO_Init>

//		MX_SPI1_Init();    		              			//初始化SPI1
	NRF24L01_SPI_Init();                				//针对NRF的特点修改SPI的设置
 80078f0:	f7ff ffae 	bl	8007850 <NRF24L01_SPI_Init>
	NRF24L01_CE_LOW(); 			            			//使能24L01
 80078f4:	2200      	movs	r2, #0
 80078f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078fa:	4808      	ldr	r0, [pc, #32]	; (800791c <NRF24L01_Init+0x8c>)
 80078fc:	f7fe fda7 	bl	800644e <HAL_GPIO_WritePin>
	NRF24L01_SPI_CS_DISABLE();			    			//SPI片选取消
 8007900:	2201      	movs	r2, #1
 8007902:	2180      	movs	r1, #128	; 0x80
 8007904:	4805      	ldr	r0, [pc, #20]	; (800791c <NRF24L01_Init+0x8c>)
 8007906:	f7fe fda2 	bl	800644e <HAL_GPIO_WritePin>
}
 800790a:	bf00      	nop
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	40021000 	.word	0x40021000
 8007918:	40010c00 	.word	0x40010c00
 800791c:	40012000 	.word	0x40012000

08007920 <SPI1_SetSpeed>:
 *SPI速度设置函数
 *SPI速度=fAPB1/分频系数
 *@ref SPI_BaudRate_Prescaler:SPI_BAUDRATEPRESCALER_2~SPI_BAUDRATEPRESCALER_2 256
 *fAPB1时钟一般为42Mhz：
 */
static void SPI1_SetSpeed(uint8_t SPI_BaudRatePrescaler) {
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	71fb      	strb	r3, [r7, #7]
	assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));		//判断有效性
	__HAL_SPI_DISABLE(&hspi2);            //关闭SPI
 800792a:	4b13      	ldr	r3, [pc, #76]	; (8007978 <SPI1_SetSpeed+0x58>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	4b11      	ldr	r3, [pc, #68]	; (8007978 <SPI1_SetSpeed+0x58>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007938:	601a      	str	r2, [r3, #0]
	hspi2.Instance->CR1 &= 0XFFC7;          //位3-5清零，用来设置波特率
 800793a:	4b0f      	ldr	r3, [pc, #60]	; (8007978 <SPI1_SetSpeed+0x58>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6819      	ldr	r1, [r3, #0]
 8007940:	4b0d      	ldr	r3, [pc, #52]	; (8007978 <SPI1_SetSpeed+0x58>)
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 8007948:	400b      	ands	r3, r1
 800794a:	6013      	str	r3, [r2, #0]
	hspi2.Instance->CR1 |= SPI_BaudRatePrescaler;          //设置SPI速度
 800794c:	4b0a      	ldr	r3, [pc, #40]	; (8007978 <SPI1_SetSpeed+0x58>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6819      	ldr	r1, [r3, #0]
 8007952:	79fa      	ldrb	r2, [r7, #7]
 8007954:	4b08      	ldr	r3, [pc, #32]	; (8007978 <SPI1_SetSpeed+0x58>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	430a      	orrs	r2, r1
 800795a:	601a      	str	r2, [r3, #0]
	__HAL_SPI_ENABLE(&hspi2);             //使能SPI
 800795c:	4b06      	ldr	r3, [pc, #24]	; (8007978 <SPI1_SetSpeed+0x58>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	4b05      	ldr	r3, [pc, #20]	; (8007978 <SPI1_SetSpeed+0x58>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800796a:	601a      	str	r2, [r3, #0]
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	bc80      	pop	{r7}
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	20000194 	.word	0x20000194

0800797c <SPIx_ReadWriteByte>:
 * 函数功能: 往串行Flash读取写入一个字节数据并接收一个字节数据
 * 输入参数: byte：待发送数据
 * 返 回 值: uint8_t：接收到的数据
 * 说    明：无
 */
uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef *hspi, uint8_t byte) {
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af02      	add	r7, sp, #8
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	460b      	mov	r3, r1
 8007986:	70fb      	strb	r3, [r7, #3]
	uint8_t d_read, d_send = byte;
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	73bb      	strb	r3, [r7, #14]
	if (HAL_SPI_TransmitReceive(hspi, &d_send, &d_read, 1, 0xFF) != HAL_OK) {
 800798c:	f107 020f 	add.w	r2, r7, #15
 8007990:	f107 010e 	add.w	r1, r7, #14
 8007994:	23ff      	movs	r3, #255	; 0xff
 8007996:	9300      	str	r3, [sp, #0]
 8007998:	2301      	movs	r3, #1
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7ff fa0e 	bl	8006dbc <HAL_SPI_TransmitReceive>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d001      	beq.n	80079aa <SPIx_ReadWriteByte+0x2e>
		d_read = 0xFF;
 80079a6:	23ff      	movs	r3, #255	; 0xff
 80079a8:	73fb      	strb	r3, [r7, #15]
	}
	return d_read;
 80079aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <NRF24L01_Check>:
 * 函数功能: 检测24L01是否存在
 * 输入参数: 无
 * 返 回 值: 0，成功;1，失败
 * 说    明：无
 */
uint8_t NRF24L01_Check(void) {
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
	uint8_t buf[5] = { 0XA5, 0XA5, 0XA5, 0XA5, 0XA5 };
 80079ba:	4a19      	ldr	r2, [pc, #100]	; (8007a20 <NRF24L01_Check+0x6c>)
 80079bc:	463b      	mov	r3, r7
 80079be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80079c2:	6018      	str	r0, [r3, #0]
 80079c4:	3304      	adds	r3, #4
 80079c6:	7019      	strb	r1, [r3, #0]
	uint8_t i;

	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_4); //spi速度为8.0Mhz（（24L01的最大SPI时钟为10Mhz,这里大一点没关系）
 80079c8:	2008      	movs	r0, #8
 80079ca:	f7ff ffa9 	bl	8007920 <SPI1_SetSpeed>
	NRF24L01_Write_Buf(NRF_WRITE_REG + TX_ADDR, buf, 5); //写入5个字节的地址.
 80079ce:	463b      	mov	r3, r7
 80079d0:	2205      	movs	r2, #5
 80079d2:	4619      	mov	r1, r3
 80079d4:	2030      	movs	r0, #48	; 0x30
 80079d6:	f000 f8a7 	bl	8007b28 <NRF24L01_Write_Buf>
	NRF24L01_Read_Buf(TX_ADDR, buf, 5); //读出写入的地址
 80079da:	463b      	mov	r3, r7
 80079dc:	2205      	movs	r2, #5
 80079de:	4619      	mov	r1, r3
 80079e0:	2010      	movs	r0, #16
 80079e2:	f000 f86b 	bl	8007abc <NRF24L01_Read_Buf>
	for (i = 0; i < 5; i++)
 80079e6:	2300      	movs	r3, #0
 80079e8:	71fb      	strb	r3, [r7, #7]
 80079ea:	e00a      	b.n	8007a02 <NRF24L01_Check+0x4e>
		if (buf[i] != 0XA5)
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	f107 0208 	add.w	r2, r7, #8
 80079f2:	4413      	add	r3, r2
 80079f4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80079f8:	2ba5      	cmp	r3, #165	; 0xa5
 80079fa:	d106      	bne.n	8007a0a <NRF24L01_Check+0x56>
	for (i = 0; i < 5; i++)
 80079fc:	79fb      	ldrb	r3, [r7, #7]
 80079fe:	3301      	adds	r3, #1
 8007a00:	71fb      	strb	r3, [r7, #7]
 8007a02:	79fb      	ldrb	r3, [r7, #7]
 8007a04:	2b04      	cmp	r3, #4
 8007a06:	d9f1      	bls.n	80079ec <NRF24L01_Check+0x38>
 8007a08:	e000      	b.n	8007a0c <NRF24L01_Check+0x58>
			break;
 8007a0a:	bf00      	nop
	if (i != 5)
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	2b05      	cmp	r3, #5
 8007a10:	d001      	beq.n	8007a16 <NRF24L01_Check+0x62>
		return 1; //检测24L01错误
 8007a12:	2301      	movs	r3, #1
 8007a14:	e000      	b.n	8007a18 <NRF24L01_Check+0x64>
	return 0;		 	//检测到24L01
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}
 8007a20:	08008d3c 	.word	0x08008d3c

08007a24 <NRF24L01_Write_Reg>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：reg:指定寄存器地址
 *
 */
uint8_t NRF24L01_Write_Reg(uint8_t reg, uint8_t value) {
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	460a      	mov	r2, r1
 8007a2e:	71fb      	strb	r3, [r7, #7]
 8007a30:	4613      	mov	r3, r2
 8007a32:	71bb      	strb	r3, [r7, #6]
	uint8_t status;
	NRF24L01_SPI_CS_ENABLE();                 //使能SPI传输
 8007a34:	2200      	movs	r2, #0
 8007a36:	2180      	movs	r1, #128	; 0x80
 8007a38:	480c      	ldr	r0, [pc, #48]	; (8007a6c <NRF24L01_Write_Reg+0x48>)
 8007a3a:	f7fe fd08 	bl	800644e <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi2, reg);   //发送寄存器号
 8007a3e:	79fb      	ldrb	r3, [r7, #7]
 8007a40:	4619      	mov	r1, r3
 8007a42:	480b      	ldr	r0, [pc, #44]	; (8007a70 <NRF24L01_Write_Reg+0x4c>)
 8007a44:	f7ff ff9a 	bl	800797c <SPIx_ReadWriteByte>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	73fb      	strb	r3, [r7, #15]
	SPIx_ReadWriteByte(&hspi2, value);         //写入寄存器的值
 8007a4c:	79bb      	ldrb	r3, [r7, #6]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4807      	ldr	r0, [pc, #28]	; (8007a70 <NRF24L01_Write_Reg+0x4c>)
 8007a52:	f7ff ff93 	bl	800797c <SPIx_ReadWriteByte>
	NRF24L01_SPI_CS_DISABLE();                //禁止SPI传输
 8007a56:	2201      	movs	r2, #1
 8007a58:	2180      	movs	r1, #128	; 0x80
 8007a5a:	4804      	ldr	r0, [pc, #16]	; (8007a6c <NRF24L01_Write_Reg+0x48>)
 8007a5c:	f7fe fcf7 	bl	800644e <HAL_GPIO_WritePin>
	return (status);       			//返回状态值
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	40012000 	.word	0x40012000
 8007a70:	20000194 	.word	0x20000194

08007a74 <NRF24L01_Read_Reg>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：reg:要读的寄存器
 *
 */
uint8_t NRF24L01_Read_Reg(uint8_t reg) {
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_val;
	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 8007a7e:	2200      	movs	r2, #0
 8007a80:	2180      	movs	r1, #128	; 0x80
 8007a82:	480c      	ldr	r0, [pc, #48]	; (8007ab4 <NRF24L01_Read_Reg+0x40>)
 8007a84:	f7fe fce3 	bl	800644e <HAL_GPIO_WritePin>
	SPIx_ReadWriteByte(&hspi2, reg);   //发送寄存器号
 8007a88:	79fb      	ldrb	r3, [r7, #7]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	480a      	ldr	r0, [pc, #40]	; (8007ab8 <NRF24L01_Read_Reg+0x44>)
 8007a8e:	f7ff ff75 	bl	800797c <SPIx_ReadWriteByte>
	reg_val = SPIx_ReadWriteByte(&hspi2, 0XFF);   //读取寄存器内容
 8007a92:	21ff      	movs	r1, #255	; 0xff
 8007a94:	4808      	ldr	r0, [pc, #32]	; (8007ab8 <NRF24L01_Read_Reg+0x44>)
 8007a96:	f7ff ff71 	bl	800797c <SPIx_ReadWriteByte>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]
	NRF24L01_SPI_CS_DISABLE();          //禁止SPI传输
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	2180      	movs	r1, #128	; 0x80
 8007aa2:	4804      	ldr	r0, [pc, #16]	; (8007ab4 <NRF24L01_Read_Reg+0x40>)
 8007aa4:	f7fe fcd3 	bl	800644e <HAL_GPIO_WritePin>
	return (reg_val);           //返回状态值
 8007aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	40012000 	.word	0x40012000
 8007ab8:	20000194 	.word	0x20000194

08007abc <NRF24L01_Read_Buf>:
 * 输入参数: 无
 * 返 回 值: 此次读到的状态寄存器值
 * 说    明：无
 *
 */
uint8_t NRF24L01_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len) {
 8007abc:	b590      	push	{r4, r7, lr}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	6039      	str	r1, [r7, #0]
 8007ac6:	71fb      	strb	r3, [r7, #7]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	71bb      	strb	r3, [r7, #6]
	uint8_t status, uint8_t_ctr;

	NRF24L01_SPI_CS_ENABLE();           //使能SPI传输
 8007acc:	2200      	movs	r2, #0
 8007ace:	2180      	movs	r1, #128	; 0x80
 8007ad0:	4813      	ldr	r0, [pc, #76]	; (8007b20 <NRF24L01_Read_Buf+0x64>)
 8007ad2:	f7fe fcbc 	bl	800644e <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi2, reg);           //发送寄存器值(位置),并读取状态值
 8007ad6:	79fb      	ldrb	r3, [r7, #7]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4812      	ldr	r0, [pc, #72]	; (8007b24 <NRF24L01_Read_Buf+0x68>)
 8007adc:	f7ff ff4e 	bl	800797c <SPIx_ReadWriteByte>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73bb      	strb	r3, [r7, #14]
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	73fb      	strb	r3, [r7, #15]
 8007ae8:	e00b      	b.n	8007b02 <NRF24L01_Read_Buf+0x46>
		pBuf[uint8_t_ctr] = SPIx_ReadWriteByte(&hspi2, 0XFF);           //读出数据
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	18d4      	adds	r4, r2, r3
 8007af0:	21ff      	movs	r1, #255	; 0xff
 8007af2:	480c      	ldr	r0, [pc, #48]	; (8007b24 <NRF24L01_Read_Buf+0x68>)
 8007af4:	f7ff ff42 	bl	800797c <SPIx_ReadWriteByte>
 8007af8:	4603      	mov	r3, r0
 8007afa:	7023      	strb	r3, [r4, #0]
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
 8007afe:	3301      	adds	r3, #1
 8007b00:	73fb      	strb	r3, [r7, #15]
 8007b02:	7bfa      	ldrb	r2, [r7, #15]
 8007b04:	79bb      	ldrb	r3, [r7, #6]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d3ef      	bcc.n	8007aea <NRF24L01_Read_Buf+0x2e>
	}
	NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	2180      	movs	r1, #128	; 0x80
 8007b0e:	4804      	ldr	r0, [pc, #16]	; (8007b20 <NRF24L01_Read_Buf+0x64>)
 8007b10:	f7fe fc9d 	bl	800644e <HAL_GPIO_WritePin>
	return status;        //返回读到的状态值
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd90      	pop	{r4, r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	40012000 	.word	0x40012000
 8007b24:	20000194 	.word	0x20000194

08007b28 <NRF24L01_Write_Buf>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：reg:寄存器(位置)  *pBuf:数据指针  len:数据长度
 *
 */
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len) {
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	6039      	str	r1, [r7, #0]
 8007b32:	71fb      	strb	r3, [r7, #7]
 8007b34:	4613      	mov	r3, r2
 8007b36:	71bb      	strb	r3, [r7, #6]
	uint8_t status, uint8_t_ctr;
	NRF24L01_SPI_CS_ENABLE();          //使能SPI传输
 8007b38:	2200      	movs	r2, #0
 8007b3a:	2180      	movs	r1, #128	; 0x80
 8007b3c:	4812      	ldr	r0, [pc, #72]	; (8007b88 <NRF24L01_Write_Buf+0x60>)
 8007b3e:	f7fe fc86 	bl	800644e <HAL_GPIO_WritePin>
	status = SPIx_ReadWriteByte(&hspi2, reg);          //发送寄存器值(位置),并读取状态值
 8007b42:	79fb      	ldrb	r3, [r7, #7]
 8007b44:	4619      	mov	r1, r3
 8007b46:	4811      	ldr	r0, [pc, #68]	; (8007b8c <NRF24L01_Write_Buf+0x64>)
 8007b48:	f7ff ff18 	bl	800797c <SPIx_ReadWriteByte>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 8007b50:	2300      	movs	r3, #0
 8007b52:	73fb      	strb	r3, [r7, #15]
 8007b54:	e00a      	b.n	8007b6c <NRF24L01_Write_Buf+0x44>
		SPIx_ReadWriteByte(&hspi2, *pBuf++); //写入数据
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	603a      	str	r2, [r7, #0]
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	480a      	ldr	r0, [pc, #40]	; (8007b8c <NRF24L01_Write_Buf+0x64>)
 8007b62:	f7ff ff0b 	bl	800797c <SPIx_ReadWriteByte>
	for (uint8_t_ctr = 0; uint8_t_ctr < len; uint8_t_ctr++) {
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	3301      	adds	r3, #1
 8007b6a:	73fb      	strb	r3, [r7, #15]
 8007b6c:	7bfa      	ldrb	r2, [r7, #15]
 8007b6e:	79bb      	ldrb	r3, [r7, #6]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d3f0      	bcc.n	8007b56 <NRF24L01_Write_Buf+0x2e>
	}
	NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输
 8007b74:	2201      	movs	r2, #1
 8007b76:	2180      	movs	r1, #128	; 0x80
 8007b78:	4803      	ldr	r0, [pc, #12]	; (8007b88 <NRF24L01_Write_Buf+0x60>)
 8007b7a:	f7fe fc68 	bl	800644e <HAL_GPIO_WritePin>
	return status;          //返回读到的状态值
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	40012000 	.word	0x40012000
 8007b8c:	20000194 	.word	0x20000194

08007b90 <NRF24L01_TxPacket>:
 * 输入参数: 无
 * 返 回 值: 发送完成状况
 * 说    明：txbuf:待发送数据首地址
 *
 */
uint8_t NRF24L01_TxPacket(uint8_t *txbuf) {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b084      	sub	sp, #16
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
	uint8_t sta;
	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为4.0Mhz（24L01的最大SPI时钟为10Mhz）
 8007b98:	2010      	movs	r0, #16
 8007b9a:	f7ff fec1 	bl	8007920 <SPI1_SetSpeed>
	NRF24L01_CE_LOW();
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ba4:	481b      	ldr	r0, [pc, #108]	; (8007c14 <NRF24L01_TxPacket+0x84>)
 8007ba6:	f7fe fc52 	bl	800644e <HAL_GPIO_WritePin>
	NRF24L01_Write_Buf(WR_TX_PLOAD, txbuf, TX_PLOAD_WIDTH); //写数据到TX BUF  32个字节
 8007baa:	2220      	movs	r2, #32
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	20a0      	movs	r0, #160	; 0xa0
 8007bb0:	f7ff ffba 	bl	8007b28 <NRF24L01_Write_Buf>
	NRF24L01_CE_HIGH(); //启动发送
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bba:	4816      	ldr	r0, [pc, #88]	; (8007c14 <NRF24L01_TxPacket+0x84>)
 8007bbc:	f7fe fc47 	bl	800644e <HAL_GPIO_WritePin>

	while (NRF24L01_IRQ_PIN_READ() != 0)
 8007bc0:	bf00      	nop
 8007bc2:	2140      	movs	r1, #64	; 0x40
 8007bc4:	4813      	ldr	r0, [pc, #76]	; (8007c14 <NRF24L01_TxPacket+0x84>)
 8007bc6:	f7fe fc2b 	bl	8006420 <HAL_GPIO_ReadPin>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1f8      	bne.n	8007bc2 <NRF24L01_TxPacket+0x32>
		; //等待发送完成

	sta = NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
 8007bd0:	2007      	movs	r0, #7
 8007bd2:	f7ff ff4f 	bl	8007a74 <NRF24L01_Read_Reg>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG + STATUS, sta); //清除TX_DS或MAX_RT中断标志
 8007bda:	7bfb      	ldrb	r3, [r7, #15]
 8007bdc:	4619      	mov	r1, r3
 8007bde:	2027      	movs	r0, #39	; 0x27
 8007be0:	f7ff ff20 	bl	8007a24 <NRF24L01_Write_Reg>
	if (sta & MAX_TX) //达到最大重发次数
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	f003 0310 	and.w	r3, r3, #16
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d005      	beq.n	8007bfa <NRF24L01_TxPacket+0x6a>
	{
		NRF24L01_Write_Reg(FLUSH_TX, 0xff); //清除TX FIFO寄存器
 8007bee:	21ff      	movs	r1, #255	; 0xff
 8007bf0:	20e1      	movs	r0, #225	; 0xe1
 8007bf2:	f7ff ff17 	bl	8007a24 <NRF24L01_Write_Reg>
		return MAX_TX;
 8007bf6:	2310      	movs	r3, #16
 8007bf8:	e007      	b.n	8007c0a <NRF24L01_TxPacket+0x7a>
	}
	if (sta & TX_OK) //发送完成
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
 8007bfc:	f003 0320 	and.w	r3, r3, #32
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <NRF24L01_TxPacket+0x78>
	{
		return TX_OK;
 8007c04:	2320      	movs	r3, #32
 8007c06:	e000      	b.n	8007c0a <NRF24L01_TxPacket+0x7a>
	}
	return 0xff; //其他原因发送失败
 8007c08:	23ff      	movs	r3, #255	; 0xff
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	40012000 	.word	0x40012000

08007c18 <NRF24L01_RxPacket>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：无
 *
 */
uint8_t NRF24L01_RxPacket(uint8_t *rxbuf) {
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
	uint8_t sta;
	SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为4.0Mhz（24L01的最大SPI时钟为10Mhz）
 8007c20:	2010      	movs	r0, #16
 8007c22:	f7ff fe7d 	bl	8007920 <SPI1_SetSpeed>
	sta = NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值
 8007c26:	2007      	movs	r0, #7
 8007c28:	f7ff ff24 	bl	8007a74 <NRF24L01_Read_Reg>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG + STATUS, sta); //清除TX_DS或MAX_RT中断标志
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	4619      	mov	r1, r3
 8007c34:	2027      	movs	r0, #39	; 0x27
 8007c36:	f7ff fef5 	bl	8007a24 <NRF24L01_Write_Reg>
	if (sta & RX_OK) //接收到数据
 8007c3a:	7bfb      	ldrb	r3, [r7, #15]
 8007c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00a      	beq.n	8007c5a <NRF24L01_RxPacket+0x42>
	{
		NRF24L01_Read_Buf(RD_RX_PLOAD, rxbuf, RX_PLOAD_WIDTH); //读取数据
 8007c44:	2220      	movs	r2, #32
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	2061      	movs	r0, #97	; 0x61
 8007c4a:	f7ff ff37 	bl	8007abc <NRF24L01_Read_Buf>
		NRF24L01_Write_Reg(FLUSH_RX, 0xff); //清除RX FIFO寄存器
 8007c4e:	21ff      	movs	r1, #255	; 0xff
 8007c50:	20e2      	movs	r0, #226	; 0xe2
 8007c52:	f7ff fee7 	bl	8007a24 <NRF24L01_Write_Reg>
		return 0;
 8007c56:	2300      	movs	r3, #0
 8007c58:	e000      	b.n	8007c5c <NRF24L01_RxPacket+0x44>
	}
	return 1; //没收到任何数据
 8007c5a:	2301      	movs	r3, #1
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <NRF24L01_RX_Mode>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：无
 *
 */
void NRF24L01_RX_Mode(void) {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
	NRF24L01_CE_LOW();
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c6e:	4815      	ldr	r0, [pc, #84]	; (8007cc4 <NRF24L01_RX_Mode+0x60>)
 8007c70:	f7fe fbed 	bl	800644e <HAL_GPIO_WritePin>
	NRF24L01_Write_Reg(NRF_WRITE_REG + CONFIG, 0x0F); //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC
 8007c74:	210f      	movs	r1, #15
 8007c76:	2020      	movs	r0, #32
 8007c78:	f7ff fed4 	bl	8007a24 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_AA, 0x01);    //使能通道0的自动应答
 8007c7c:	2101      	movs	r1, #1
 8007c7e:	2021      	movs	r0, #33	; 0x21
 8007c80:	f7ff fed0 	bl	8007a24 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_RXADDR, 0x01);    //使能通道0的接收地址
 8007c84:	2101      	movs	r1, #1
 8007c86:	2022      	movs	r0, #34	; 0x22
 8007c88:	f7ff fecc 	bl	8007a24 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_CH, 40);	     //设置RF通信频率
 8007c8c:	2128      	movs	r1, #40	; 0x28
 8007c8e:	2025      	movs	r0, #37	; 0x25
 8007c90:	f7ff fec8 	bl	8007a24 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_SETUP, 0x0f);	//设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 8007c94:	210f      	movs	r1, #15
 8007c96:	2026      	movs	r0, #38	; 0x26
 8007c98:	f7ff fec4 	bl	8007a24 <NRF24L01_Write_Reg>

	NRF24L01_Write_Reg(NRF_WRITE_REG + RX_PW_P0, RX_PLOAD_WIDTH);//选择通道0的有效数据宽度
 8007c9c:	2120      	movs	r1, #32
 8007c9e:	2031      	movs	r0, #49	; 0x31
 8007ca0:	f7ff fec0 	bl	8007a24 <NRF24L01_Write_Reg>

	NRF24L01_Write_Buf(NRF_WRITE_REG + RX_ADDR_P0, (uint8_t*) RX_ADDRESS,
 8007ca4:	2205      	movs	r2, #5
 8007ca6:	4908      	ldr	r1, [pc, #32]	; (8007cc8 <NRF24L01_RX_Mode+0x64>)
 8007ca8:	202a      	movs	r0, #42	; 0x2a
 8007caa:	f7ff ff3d 	bl	8007b28 <NRF24L01_Write_Buf>
			RX_ADR_WIDTH);	     //写RX节点地址

	NRF24L01_CE_HIGH(); //CE为高,进入接收模式
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007cb4:	4803      	ldr	r0, [pc, #12]	; (8007cc4 <NRF24L01_RX_Mode+0x60>)
 8007cb6:	f7fe fbca 	bl	800644e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007cba:	2001      	movs	r0, #1
 8007cbc:	f7fd ffe2 	bl	8005c84 <HAL_Delay>
}
 8007cc0:	bf00      	nop
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	40012000 	.word	0x40012000
 8007cc8:	08015a48 	.word	0x08015a48

08007ccc <NRF24L01_TX_Mode>:
 * 输入参数: 无
 * 返 回 值: 无
 * 说    明：无
 *
 */
void NRF24L01_TX_Mode(void) {
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	af00      	add	r7, sp, #0
	NRF24L01_CE_LOW();
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007cd6:	4818      	ldr	r0, [pc, #96]	; (8007d38 <NRF24L01_TX_Mode+0x6c>)
 8007cd8:	f7fe fbb9 	bl	800644e <HAL_GPIO_WritePin>
	NRF24L01_Write_Buf(NRF_WRITE_REG + TX_ADDR, (uint8_t*) TX_ADDRESS,
 8007cdc:	2205      	movs	r2, #5
 8007cde:	4917      	ldr	r1, [pc, #92]	; (8007d3c <NRF24L01_TX_Mode+0x70>)
 8007ce0:	2030      	movs	r0, #48	; 0x30
 8007ce2:	f7ff ff21 	bl	8007b28 <NRF24L01_Write_Buf>
			TX_ADR_WIDTH); //写TX节点地址
	NRF24L01_Write_Buf(NRF_WRITE_REG + RX_ADDR_P0, (uint8_t*) RX_ADDRESS,
 8007ce6:	2205      	movs	r2, #5
 8007ce8:	4915      	ldr	r1, [pc, #84]	; (8007d40 <NRF24L01_TX_Mode+0x74>)
 8007cea:	202a      	movs	r0, #42	; 0x2a
 8007cec:	f7ff ff1c 	bl	8007b28 <NRF24L01_Write_Buf>
			RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK

	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_AA, 0x01);     //使能通道0的自动应答
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	2021      	movs	r0, #33	; 0x21
 8007cf4:	f7ff fe96 	bl	8007a24 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + EN_RXADDR, 0x01); //使能通道0的接收地址
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	2022      	movs	r0, #34	; 0x22
 8007cfc:	f7ff fe92 	bl	8007a24 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + SETUP_RETR, 0xff); //设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次
 8007d00:	21ff      	movs	r1, #255	; 0xff
 8007d02:	2024      	movs	r0, #36	; 0x24
 8007d04:	f7ff fe8e 	bl	8007a24 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_CH, 40);       //设置RF通道为40
 8007d08:	2128      	movs	r1, #40	; 0x28
 8007d0a:	2025      	movs	r0, #37	; 0x25
 8007d0c:	f7ff fe8a 	bl	8007a24 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + RF_SETUP, 0x0f); //设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 8007d10:	210f      	movs	r1, #15
 8007d12:	2026      	movs	r0, #38	; 0x26
 8007d14:	f7ff fe86 	bl	8007a24 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG + CONFIG, 0x0e); //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断
 8007d18:	210e      	movs	r1, #14
 8007d1a:	2020      	movs	r0, #32
 8007d1c:	f7ff fe82 	bl	8007a24 <NRF24L01_Write_Reg>
	NRF24L01_CE_HIGH();    //CE为高,10us后启动发送
 8007d20:	2201      	movs	r2, #1
 8007d22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d26:	4804      	ldr	r0, [pc, #16]	; (8007d38 <NRF24L01_TX_Mode+0x6c>)
 8007d28:	f7fe fb91 	bl	800644e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8007d2c:	2001      	movs	r0, #1
 8007d2e:	f7fd ffa9 	bl	8005c84 <HAL_Delay>
}
 8007d32:	bf00      	nop
 8007d34:	bd80      	pop	{r7, pc}
 8007d36:	bf00      	nop
 8007d38:	40012000 	.word	0x40012000
 8007d3c:	08015a40 	.word	0x08015a40
 8007d40:	08015a48 	.word	0x08015a48

08007d44 <__errno>:
 8007d44:	4b01      	ldr	r3, [pc, #4]	; (8007d4c <__errno+0x8>)
 8007d46:	6818      	ldr	r0, [r3, #0]
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	20000030 	.word	0x20000030

08007d50 <__libc_init_array>:
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	2600      	movs	r6, #0
 8007d54:	4d0c      	ldr	r5, [pc, #48]	; (8007d88 <__libc_init_array+0x38>)
 8007d56:	4c0d      	ldr	r4, [pc, #52]	; (8007d8c <__libc_init_array+0x3c>)
 8007d58:	1b64      	subs	r4, r4, r5
 8007d5a:	10a4      	asrs	r4, r4, #2
 8007d5c:	42a6      	cmp	r6, r4
 8007d5e:	d109      	bne.n	8007d74 <__libc_init_array+0x24>
 8007d60:	f000 ff82 	bl	8008c68 <_init>
 8007d64:	2600      	movs	r6, #0
 8007d66:	4d0a      	ldr	r5, [pc, #40]	; (8007d90 <__libc_init_array+0x40>)
 8007d68:	4c0a      	ldr	r4, [pc, #40]	; (8007d94 <__libc_init_array+0x44>)
 8007d6a:	1b64      	subs	r4, r4, r5
 8007d6c:	10a4      	asrs	r4, r4, #2
 8007d6e:	42a6      	cmp	r6, r4
 8007d70:	d105      	bne.n	8007d7e <__libc_init_array+0x2e>
 8007d72:	bd70      	pop	{r4, r5, r6, pc}
 8007d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d78:	4798      	blx	r3
 8007d7a:	3601      	adds	r6, #1
 8007d7c:	e7ee      	b.n	8007d5c <__libc_init_array+0xc>
 8007d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d82:	4798      	blx	r3
 8007d84:	3601      	adds	r6, #1
 8007d86:	e7f2      	b.n	8007d6e <__libc_init_array+0x1e>
 8007d88:	08015ae8 	.word	0x08015ae8
 8007d8c:	08015ae8 	.word	0x08015ae8
 8007d90:	08015ae8 	.word	0x08015ae8
 8007d94:	08015aec 	.word	0x08015aec

08007d98 <memset>:
 8007d98:	4603      	mov	r3, r0
 8007d9a:	4402      	add	r2, r0
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d100      	bne.n	8007da2 <memset+0xa>
 8007da0:	4770      	bx	lr
 8007da2:	f803 1b01 	strb.w	r1, [r3], #1
 8007da6:	e7f9      	b.n	8007d9c <memset+0x4>

08007da8 <iprintf>:
 8007da8:	b40f      	push	{r0, r1, r2, r3}
 8007daa:	4b0a      	ldr	r3, [pc, #40]	; (8007dd4 <iprintf+0x2c>)
 8007dac:	b513      	push	{r0, r1, r4, lr}
 8007dae:	681c      	ldr	r4, [r3, #0]
 8007db0:	b124      	cbz	r4, 8007dbc <iprintf+0x14>
 8007db2:	69a3      	ldr	r3, [r4, #24]
 8007db4:	b913      	cbnz	r3, 8007dbc <iprintf+0x14>
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 f866 	bl	8007e88 <__sinit>
 8007dbc:	ab05      	add	r3, sp, #20
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	9a04      	ldr	r2, [sp, #16]
 8007dc2:	68a1      	ldr	r1, [r4, #8]
 8007dc4:	9301      	str	r3, [sp, #4]
 8007dc6:	f000 f981 	bl	80080cc <_vfiprintf_r>
 8007dca:	b002      	add	sp, #8
 8007dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dd0:	b004      	add	sp, #16
 8007dd2:	4770      	bx	lr
 8007dd4:	20000030 	.word	0x20000030

08007dd8 <std>:
 8007dd8:	2300      	movs	r3, #0
 8007dda:	b510      	push	{r4, lr}
 8007ddc:	4604      	mov	r4, r0
 8007dde:	e9c0 3300 	strd	r3, r3, [r0]
 8007de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007de6:	6083      	str	r3, [r0, #8]
 8007de8:	8181      	strh	r1, [r0, #12]
 8007dea:	6643      	str	r3, [r0, #100]	; 0x64
 8007dec:	81c2      	strh	r2, [r0, #14]
 8007dee:	6183      	str	r3, [r0, #24]
 8007df0:	4619      	mov	r1, r3
 8007df2:	2208      	movs	r2, #8
 8007df4:	305c      	adds	r0, #92	; 0x5c
 8007df6:	f7ff ffcf 	bl	8007d98 <memset>
 8007dfa:	4b05      	ldr	r3, [pc, #20]	; (8007e10 <std+0x38>)
 8007dfc:	6224      	str	r4, [r4, #32]
 8007dfe:	6263      	str	r3, [r4, #36]	; 0x24
 8007e00:	4b04      	ldr	r3, [pc, #16]	; (8007e14 <std+0x3c>)
 8007e02:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e04:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <std+0x40>)
 8007e06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e08:	4b04      	ldr	r3, [pc, #16]	; (8007e1c <std+0x44>)
 8007e0a:	6323      	str	r3, [r4, #48]	; 0x30
 8007e0c:	bd10      	pop	{r4, pc}
 8007e0e:	bf00      	nop
 8007e10:	08008679 	.word	0x08008679
 8007e14:	0800869b 	.word	0x0800869b
 8007e18:	080086d3 	.word	0x080086d3
 8007e1c:	080086f7 	.word	0x080086f7

08007e20 <_cleanup_r>:
 8007e20:	4901      	ldr	r1, [pc, #4]	; (8007e28 <_cleanup_r+0x8>)
 8007e22:	f000 b8af 	b.w	8007f84 <_fwalk_reent>
 8007e26:	bf00      	nop
 8007e28:	080089d1 	.word	0x080089d1

08007e2c <__sfmoreglue>:
 8007e2c:	b570      	push	{r4, r5, r6, lr}
 8007e2e:	2568      	movs	r5, #104	; 0x68
 8007e30:	1e4a      	subs	r2, r1, #1
 8007e32:	4355      	muls	r5, r2
 8007e34:	460e      	mov	r6, r1
 8007e36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e3a:	f000 f8c5 	bl	8007fc8 <_malloc_r>
 8007e3e:	4604      	mov	r4, r0
 8007e40:	b140      	cbz	r0, 8007e54 <__sfmoreglue+0x28>
 8007e42:	2100      	movs	r1, #0
 8007e44:	e9c0 1600 	strd	r1, r6, [r0]
 8007e48:	300c      	adds	r0, #12
 8007e4a:	60a0      	str	r0, [r4, #8]
 8007e4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e50:	f7ff ffa2 	bl	8007d98 <memset>
 8007e54:	4620      	mov	r0, r4
 8007e56:	bd70      	pop	{r4, r5, r6, pc}

08007e58 <__sfp_lock_acquire>:
 8007e58:	4801      	ldr	r0, [pc, #4]	; (8007e60 <__sfp_lock_acquire+0x8>)
 8007e5a:	f000 b8b3 	b.w	8007fc4 <__retarget_lock_acquire_recursive>
 8007e5e:	bf00      	nop
 8007e60:	20000248 	.word	0x20000248

08007e64 <__sfp_lock_release>:
 8007e64:	4801      	ldr	r0, [pc, #4]	; (8007e6c <__sfp_lock_release+0x8>)
 8007e66:	f000 b8ae 	b.w	8007fc6 <__retarget_lock_release_recursive>
 8007e6a:	bf00      	nop
 8007e6c:	20000248 	.word	0x20000248

08007e70 <__sinit_lock_acquire>:
 8007e70:	4801      	ldr	r0, [pc, #4]	; (8007e78 <__sinit_lock_acquire+0x8>)
 8007e72:	f000 b8a7 	b.w	8007fc4 <__retarget_lock_acquire_recursive>
 8007e76:	bf00      	nop
 8007e78:	20000243 	.word	0x20000243

08007e7c <__sinit_lock_release>:
 8007e7c:	4801      	ldr	r0, [pc, #4]	; (8007e84 <__sinit_lock_release+0x8>)
 8007e7e:	f000 b8a2 	b.w	8007fc6 <__retarget_lock_release_recursive>
 8007e82:	bf00      	nop
 8007e84:	20000243 	.word	0x20000243

08007e88 <__sinit>:
 8007e88:	b510      	push	{r4, lr}
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	f7ff fff0 	bl	8007e70 <__sinit_lock_acquire>
 8007e90:	69a3      	ldr	r3, [r4, #24]
 8007e92:	b11b      	cbz	r3, 8007e9c <__sinit+0x14>
 8007e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e98:	f7ff bff0 	b.w	8007e7c <__sinit_lock_release>
 8007e9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ea0:	6523      	str	r3, [r4, #80]	; 0x50
 8007ea2:	4b13      	ldr	r3, [pc, #76]	; (8007ef0 <__sinit+0x68>)
 8007ea4:	4a13      	ldr	r2, [pc, #76]	; (8007ef4 <__sinit+0x6c>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007eaa:	42a3      	cmp	r3, r4
 8007eac:	bf08      	it	eq
 8007eae:	2301      	moveq	r3, #1
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	bf08      	it	eq
 8007eb4:	61a3      	streq	r3, [r4, #24]
 8007eb6:	f000 f81f 	bl	8007ef8 <__sfp>
 8007eba:	6060      	str	r0, [r4, #4]
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f000 f81b 	bl	8007ef8 <__sfp>
 8007ec2:	60a0      	str	r0, [r4, #8]
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f000 f817 	bl	8007ef8 <__sfp>
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2104      	movs	r1, #4
 8007ece:	60e0      	str	r0, [r4, #12]
 8007ed0:	6860      	ldr	r0, [r4, #4]
 8007ed2:	f7ff ff81 	bl	8007dd8 <std>
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	2109      	movs	r1, #9
 8007eda:	68a0      	ldr	r0, [r4, #8]
 8007edc:	f7ff ff7c 	bl	8007dd8 <std>
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	2112      	movs	r1, #18
 8007ee4:	68e0      	ldr	r0, [r4, #12]
 8007ee6:	f7ff ff77 	bl	8007dd8 <std>
 8007eea:	2301      	movs	r3, #1
 8007eec:	61a3      	str	r3, [r4, #24]
 8007eee:	e7d1      	b.n	8007e94 <__sinit+0xc>
 8007ef0:	08015a50 	.word	0x08015a50
 8007ef4:	08007e21 	.word	0x08007e21

08007ef8 <__sfp>:
 8007ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007efa:	4607      	mov	r7, r0
 8007efc:	f7ff ffac 	bl	8007e58 <__sfp_lock_acquire>
 8007f00:	4b1e      	ldr	r3, [pc, #120]	; (8007f7c <__sfp+0x84>)
 8007f02:	681e      	ldr	r6, [r3, #0]
 8007f04:	69b3      	ldr	r3, [r6, #24]
 8007f06:	b913      	cbnz	r3, 8007f0e <__sfp+0x16>
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f7ff ffbd 	bl	8007e88 <__sinit>
 8007f0e:	3648      	adds	r6, #72	; 0x48
 8007f10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f14:	3b01      	subs	r3, #1
 8007f16:	d503      	bpl.n	8007f20 <__sfp+0x28>
 8007f18:	6833      	ldr	r3, [r6, #0]
 8007f1a:	b30b      	cbz	r3, 8007f60 <__sfp+0x68>
 8007f1c:	6836      	ldr	r6, [r6, #0]
 8007f1e:	e7f7      	b.n	8007f10 <__sfp+0x18>
 8007f20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f24:	b9d5      	cbnz	r5, 8007f5c <__sfp+0x64>
 8007f26:	4b16      	ldr	r3, [pc, #88]	; (8007f80 <__sfp+0x88>)
 8007f28:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f2c:	60e3      	str	r3, [r4, #12]
 8007f2e:	6665      	str	r5, [r4, #100]	; 0x64
 8007f30:	f000 f847 	bl	8007fc2 <__retarget_lock_init_recursive>
 8007f34:	f7ff ff96 	bl	8007e64 <__sfp_lock_release>
 8007f38:	2208      	movs	r2, #8
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f44:	6025      	str	r5, [r4, #0]
 8007f46:	61a5      	str	r5, [r4, #24]
 8007f48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f4c:	f7ff ff24 	bl	8007d98 <memset>
 8007f50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f58:	4620      	mov	r0, r4
 8007f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f5c:	3468      	adds	r4, #104	; 0x68
 8007f5e:	e7d9      	b.n	8007f14 <__sfp+0x1c>
 8007f60:	2104      	movs	r1, #4
 8007f62:	4638      	mov	r0, r7
 8007f64:	f7ff ff62 	bl	8007e2c <__sfmoreglue>
 8007f68:	4604      	mov	r4, r0
 8007f6a:	6030      	str	r0, [r6, #0]
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d1d5      	bne.n	8007f1c <__sfp+0x24>
 8007f70:	f7ff ff78 	bl	8007e64 <__sfp_lock_release>
 8007f74:	230c      	movs	r3, #12
 8007f76:	603b      	str	r3, [r7, #0]
 8007f78:	e7ee      	b.n	8007f58 <__sfp+0x60>
 8007f7a:	bf00      	nop
 8007f7c:	08015a50 	.word	0x08015a50
 8007f80:	ffff0001 	.word	0xffff0001

08007f84 <_fwalk_reent>:
 8007f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f88:	4606      	mov	r6, r0
 8007f8a:	4688      	mov	r8, r1
 8007f8c:	2700      	movs	r7, #0
 8007f8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f96:	f1b9 0901 	subs.w	r9, r9, #1
 8007f9a:	d505      	bpl.n	8007fa8 <_fwalk_reent+0x24>
 8007f9c:	6824      	ldr	r4, [r4, #0]
 8007f9e:	2c00      	cmp	r4, #0
 8007fa0:	d1f7      	bne.n	8007f92 <_fwalk_reent+0xe>
 8007fa2:	4638      	mov	r0, r7
 8007fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fa8:	89ab      	ldrh	r3, [r5, #12]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d907      	bls.n	8007fbe <_fwalk_reent+0x3a>
 8007fae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	d003      	beq.n	8007fbe <_fwalk_reent+0x3a>
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	4630      	mov	r0, r6
 8007fba:	47c0      	blx	r8
 8007fbc:	4307      	orrs	r7, r0
 8007fbe:	3568      	adds	r5, #104	; 0x68
 8007fc0:	e7e9      	b.n	8007f96 <_fwalk_reent+0x12>

08007fc2 <__retarget_lock_init_recursive>:
 8007fc2:	4770      	bx	lr

08007fc4 <__retarget_lock_acquire_recursive>:
 8007fc4:	4770      	bx	lr

08007fc6 <__retarget_lock_release_recursive>:
 8007fc6:	4770      	bx	lr

08007fc8 <_malloc_r>:
 8007fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fca:	1ccd      	adds	r5, r1, #3
 8007fcc:	f025 0503 	bic.w	r5, r5, #3
 8007fd0:	3508      	adds	r5, #8
 8007fd2:	2d0c      	cmp	r5, #12
 8007fd4:	bf38      	it	cc
 8007fd6:	250c      	movcc	r5, #12
 8007fd8:	2d00      	cmp	r5, #0
 8007fda:	4606      	mov	r6, r0
 8007fdc:	db01      	blt.n	8007fe2 <_malloc_r+0x1a>
 8007fde:	42a9      	cmp	r1, r5
 8007fe0:	d903      	bls.n	8007fea <_malloc_r+0x22>
 8007fe2:	230c      	movs	r3, #12
 8007fe4:	6033      	str	r3, [r6, #0]
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fea:	f000 fdb1 	bl	8008b50 <__malloc_lock>
 8007fee:	4921      	ldr	r1, [pc, #132]	; (8008074 <_malloc_r+0xac>)
 8007ff0:	680a      	ldr	r2, [r1, #0]
 8007ff2:	4614      	mov	r4, r2
 8007ff4:	b99c      	cbnz	r4, 800801e <_malloc_r+0x56>
 8007ff6:	4f20      	ldr	r7, [pc, #128]	; (8008078 <_malloc_r+0xb0>)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	b923      	cbnz	r3, 8008006 <_malloc_r+0x3e>
 8007ffc:	4621      	mov	r1, r4
 8007ffe:	4630      	mov	r0, r6
 8008000:	f000 fb2a 	bl	8008658 <_sbrk_r>
 8008004:	6038      	str	r0, [r7, #0]
 8008006:	4629      	mov	r1, r5
 8008008:	4630      	mov	r0, r6
 800800a:	f000 fb25 	bl	8008658 <_sbrk_r>
 800800e:	1c43      	adds	r3, r0, #1
 8008010:	d123      	bne.n	800805a <_malloc_r+0x92>
 8008012:	230c      	movs	r3, #12
 8008014:	4630      	mov	r0, r6
 8008016:	6033      	str	r3, [r6, #0]
 8008018:	f000 fda0 	bl	8008b5c <__malloc_unlock>
 800801c:	e7e3      	b.n	8007fe6 <_malloc_r+0x1e>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	1b5b      	subs	r3, r3, r5
 8008022:	d417      	bmi.n	8008054 <_malloc_r+0x8c>
 8008024:	2b0b      	cmp	r3, #11
 8008026:	d903      	bls.n	8008030 <_malloc_r+0x68>
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	441c      	add	r4, r3
 800802c:	6025      	str	r5, [r4, #0]
 800802e:	e004      	b.n	800803a <_malloc_r+0x72>
 8008030:	6863      	ldr	r3, [r4, #4]
 8008032:	42a2      	cmp	r2, r4
 8008034:	bf0c      	ite	eq
 8008036:	600b      	streq	r3, [r1, #0]
 8008038:	6053      	strne	r3, [r2, #4]
 800803a:	4630      	mov	r0, r6
 800803c:	f000 fd8e 	bl	8008b5c <__malloc_unlock>
 8008040:	f104 000b 	add.w	r0, r4, #11
 8008044:	1d23      	adds	r3, r4, #4
 8008046:	f020 0007 	bic.w	r0, r0, #7
 800804a:	1ac2      	subs	r2, r0, r3
 800804c:	d0cc      	beq.n	8007fe8 <_malloc_r+0x20>
 800804e:	1a1b      	subs	r3, r3, r0
 8008050:	50a3      	str	r3, [r4, r2]
 8008052:	e7c9      	b.n	8007fe8 <_malloc_r+0x20>
 8008054:	4622      	mov	r2, r4
 8008056:	6864      	ldr	r4, [r4, #4]
 8008058:	e7cc      	b.n	8007ff4 <_malloc_r+0x2c>
 800805a:	1cc4      	adds	r4, r0, #3
 800805c:	f024 0403 	bic.w	r4, r4, #3
 8008060:	42a0      	cmp	r0, r4
 8008062:	d0e3      	beq.n	800802c <_malloc_r+0x64>
 8008064:	1a21      	subs	r1, r4, r0
 8008066:	4630      	mov	r0, r6
 8008068:	f000 faf6 	bl	8008658 <_sbrk_r>
 800806c:	3001      	adds	r0, #1
 800806e:	d1dd      	bne.n	800802c <_malloc_r+0x64>
 8008070:	e7cf      	b.n	8008012 <_malloc_r+0x4a>
 8008072:	bf00      	nop
 8008074:	200000bc 	.word	0x200000bc
 8008078:	200000c0 	.word	0x200000c0

0800807c <__sfputc_r>:
 800807c:	6893      	ldr	r3, [r2, #8]
 800807e:	b410      	push	{r4}
 8008080:	3b01      	subs	r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	6093      	str	r3, [r2, #8]
 8008086:	da07      	bge.n	8008098 <__sfputc_r+0x1c>
 8008088:	6994      	ldr	r4, [r2, #24]
 800808a:	42a3      	cmp	r3, r4
 800808c:	db01      	blt.n	8008092 <__sfputc_r+0x16>
 800808e:	290a      	cmp	r1, #10
 8008090:	d102      	bne.n	8008098 <__sfputc_r+0x1c>
 8008092:	bc10      	pop	{r4}
 8008094:	f000 bb34 	b.w	8008700 <__swbuf_r>
 8008098:	6813      	ldr	r3, [r2, #0]
 800809a:	1c58      	adds	r0, r3, #1
 800809c:	6010      	str	r0, [r2, #0]
 800809e:	7019      	strb	r1, [r3, #0]
 80080a0:	4608      	mov	r0, r1
 80080a2:	bc10      	pop	{r4}
 80080a4:	4770      	bx	lr

080080a6 <__sfputs_r>:
 80080a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a8:	4606      	mov	r6, r0
 80080aa:	460f      	mov	r7, r1
 80080ac:	4614      	mov	r4, r2
 80080ae:	18d5      	adds	r5, r2, r3
 80080b0:	42ac      	cmp	r4, r5
 80080b2:	d101      	bne.n	80080b8 <__sfputs_r+0x12>
 80080b4:	2000      	movs	r0, #0
 80080b6:	e007      	b.n	80080c8 <__sfputs_r+0x22>
 80080b8:	463a      	mov	r2, r7
 80080ba:	4630      	mov	r0, r6
 80080bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c0:	f7ff ffdc 	bl	800807c <__sfputc_r>
 80080c4:	1c43      	adds	r3, r0, #1
 80080c6:	d1f3      	bne.n	80080b0 <__sfputs_r+0xa>
 80080c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080cc <_vfiprintf_r>:
 80080cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d0:	460d      	mov	r5, r1
 80080d2:	4614      	mov	r4, r2
 80080d4:	4698      	mov	r8, r3
 80080d6:	4606      	mov	r6, r0
 80080d8:	b09d      	sub	sp, #116	; 0x74
 80080da:	b118      	cbz	r0, 80080e4 <_vfiprintf_r+0x18>
 80080dc:	6983      	ldr	r3, [r0, #24]
 80080de:	b90b      	cbnz	r3, 80080e4 <_vfiprintf_r+0x18>
 80080e0:	f7ff fed2 	bl	8007e88 <__sinit>
 80080e4:	4b89      	ldr	r3, [pc, #548]	; (800830c <_vfiprintf_r+0x240>)
 80080e6:	429d      	cmp	r5, r3
 80080e8:	d11b      	bne.n	8008122 <_vfiprintf_r+0x56>
 80080ea:	6875      	ldr	r5, [r6, #4]
 80080ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080ee:	07d9      	lsls	r1, r3, #31
 80080f0:	d405      	bmi.n	80080fe <_vfiprintf_r+0x32>
 80080f2:	89ab      	ldrh	r3, [r5, #12]
 80080f4:	059a      	lsls	r2, r3, #22
 80080f6:	d402      	bmi.n	80080fe <_vfiprintf_r+0x32>
 80080f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080fa:	f7ff ff63 	bl	8007fc4 <__retarget_lock_acquire_recursive>
 80080fe:	89ab      	ldrh	r3, [r5, #12]
 8008100:	071b      	lsls	r3, r3, #28
 8008102:	d501      	bpl.n	8008108 <_vfiprintf_r+0x3c>
 8008104:	692b      	ldr	r3, [r5, #16]
 8008106:	b9eb      	cbnz	r3, 8008144 <_vfiprintf_r+0x78>
 8008108:	4629      	mov	r1, r5
 800810a:	4630      	mov	r0, r6
 800810c:	f000 fb5c 	bl	80087c8 <__swsetup_r>
 8008110:	b1c0      	cbz	r0, 8008144 <_vfiprintf_r+0x78>
 8008112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008114:	07dc      	lsls	r4, r3, #31
 8008116:	d50e      	bpl.n	8008136 <_vfiprintf_r+0x6a>
 8008118:	f04f 30ff 	mov.w	r0, #4294967295
 800811c:	b01d      	add	sp, #116	; 0x74
 800811e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008122:	4b7b      	ldr	r3, [pc, #492]	; (8008310 <_vfiprintf_r+0x244>)
 8008124:	429d      	cmp	r5, r3
 8008126:	d101      	bne.n	800812c <_vfiprintf_r+0x60>
 8008128:	68b5      	ldr	r5, [r6, #8]
 800812a:	e7df      	b.n	80080ec <_vfiprintf_r+0x20>
 800812c:	4b79      	ldr	r3, [pc, #484]	; (8008314 <_vfiprintf_r+0x248>)
 800812e:	429d      	cmp	r5, r3
 8008130:	bf08      	it	eq
 8008132:	68f5      	ldreq	r5, [r6, #12]
 8008134:	e7da      	b.n	80080ec <_vfiprintf_r+0x20>
 8008136:	89ab      	ldrh	r3, [r5, #12]
 8008138:	0598      	lsls	r0, r3, #22
 800813a:	d4ed      	bmi.n	8008118 <_vfiprintf_r+0x4c>
 800813c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800813e:	f7ff ff42 	bl	8007fc6 <__retarget_lock_release_recursive>
 8008142:	e7e9      	b.n	8008118 <_vfiprintf_r+0x4c>
 8008144:	2300      	movs	r3, #0
 8008146:	9309      	str	r3, [sp, #36]	; 0x24
 8008148:	2320      	movs	r3, #32
 800814a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800814e:	2330      	movs	r3, #48	; 0x30
 8008150:	f04f 0901 	mov.w	r9, #1
 8008154:	f8cd 800c 	str.w	r8, [sp, #12]
 8008158:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008318 <_vfiprintf_r+0x24c>
 800815c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008160:	4623      	mov	r3, r4
 8008162:	469a      	mov	sl, r3
 8008164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008168:	b10a      	cbz	r2, 800816e <_vfiprintf_r+0xa2>
 800816a:	2a25      	cmp	r2, #37	; 0x25
 800816c:	d1f9      	bne.n	8008162 <_vfiprintf_r+0x96>
 800816e:	ebba 0b04 	subs.w	fp, sl, r4
 8008172:	d00b      	beq.n	800818c <_vfiprintf_r+0xc0>
 8008174:	465b      	mov	r3, fp
 8008176:	4622      	mov	r2, r4
 8008178:	4629      	mov	r1, r5
 800817a:	4630      	mov	r0, r6
 800817c:	f7ff ff93 	bl	80080a6 <__sfputs_r>
 8008180:	3001      	adds	r0, #1
 8008182:	f000 80aa 	beq.w	80082da <_vfiprintf_r+0x20e>
 8008186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008188:	445a      	add	r2, fp
 800818a:	9209      	str	r2, [sp, #36]	; 0x24
 800818c:	f89a 3000 	ldrb.w	r3, [sl]
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 80a2 	beq.w	80082da <_vfiprintf_r+0x20e>
 8008196:	2300      	movs	r3, #0
 8008198:	f04f 32ff 	mov.w	r2, #4294967295
 800819c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081a0:	f10a 0a01 	add.w	sl, sl, #1
 80081a4:	9304      	str	r3, [sp, #16]
 80081a6:	9307      	str	r3, [sp, #28]
 80081a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081ac:	931a      	str	r3, [sp, #104]	; 0x68
 80081ae:	4654      	mov	r4, sl
 80081b0:	2205      	movs	r2, #5
 80081b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b6:	4858      	ldr	r0, [pc, #352]	; (8008318 <_vfiprintf_r+0x24c>)
 80081b8:	f000 fcbc 	bl	8008b34 <memchr>
 80081bc:	9a04      	ldr	r2, [sp, #16]
 80081be:	b9d8      	cbnz	r0, 80081f8 <_vfiprintf_r+0x12c>
 80081c0:	06d1      	lsls	r1, r2, #27
 80081c2:	bf44      	itt	mi
 80081c4:	2320      	movmi	r3, #32
 80081c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ca:	0713      	lsls	r3, r2, #28
 80081cc:	bf44      	itt	mi
 80081ce:	232b      	movmi	r3, #43	; 0x2b
 80081d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081d4:	f89a 3000 	ldrb.w	r3, [sl]
 80081d8:	2b2a      	cmp	r3, #42	; 0x2a
 80081da:	d015      	beq.n	8008208 <_vfiprintf_r+0x13c>
 80081dc:	4654      	mov	r4, sl
 80081de:	2000      	movs	r0, #0
 80081e0:	f04f 0c0a 	mov.w	ip, #10
 80081e4:	9a07      	ldr	r2, [sp, #28]
 80081e6:	4621      	mov	r1, r4
 80081e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081ec:	3b30      	subs	r3, #48	; 0x30
 80081ee:	2b09      	cmp	r3, #9
 80081f0:	d94e      	bls.n	8008290 <_vfiprintf_r+0x1c4>
 80081f2:	b1b0      	cbz	r0, 8008222 <_vfiprintf_r+0x156>
 80081f4:	9207      	str	r2, [sp, #28]
 80081f6:	e014      	b.n	8008222 <_vfiprintf_r+0x156>
 80081f8:	eba0 0308 	sub.w	r3, r0, r8
 80081fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008200:	4313      	orrs	r3, r2
 8008202:	46a2      	mov	sl, r4
 8008204:	9304      	str	r3, [sp, #16]
 8008206:	e7d2      	b.n	80081ae <_vfiprintf_r+0xe2>
 8008208:	9b03      	ldr	r3, [sp, #12]
 800820a:	1d19      	adds	r1, r3, #4
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	9103      	str	r1, [sp, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	bfbb      	ittet	lt
 8008214:	425b      	neglt	r3, r3
 8008216:	f042 0202 	orrlt.w	r2, r2, #2
 800821a:	9307      	strge	r3, [sp, #28]
 800821c:	9307      	strlt	r3, [sp, #28]
 800821e:	bfb8      	it	lt
 8008220:	9204      	strlt	r2, [sp, #16]
 8008222:	7823      	ldrb	r3, [r4, #0]
 8008224:	2b2e      	cmp	r3, #46	; 0x2e
 8008226:	d10c      	bne.n	8008242 <_vfiprintf_r+0x176>
 8008228:	7863      	ldrb	r3, [r4, #1]
 800822a:	2b2a      	cmp	r3, #42	; 0x2a
 800822c:	d135      	bne.n	800829a <_vfiprintf_r+0x1ce>
 800822e:	9b03      	ldr	r3, [sp, #12]
 8008230:	3402      	adds	r4, #2
 8008232:	1d1a      	adds	r2, r3, #4
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	9203      	str	r2, [sp, #12]
 8008238:	2b00      	cmp	r3, #0
 800823a:	bfb8      	it	lt
 800823c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008240:	9305      	str	r3, [sp, #20]
 8008242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008328 <_vfiprintf_r+0x25c>
 8008246:	2203      	movs	r2, #3
 8008248:	4650      	mov	r0, sl
 800824a:	7821      	ldrb	r1, [r4, #0]
 800824c:	f000 fc72 	bl	8008b34 <memchr>
 8008250:	b140      	cbz	r0, 8008264 <_vfiprintf_r+0x198>
 8008252:	2340      	movs	r3, #64	; 0x40
 8008254:	eba0 000a 	sub.w	r0, r0, sl
 8008258:	fa03 f000 	lsl.w	r0, r3, r0
 800825c:	9b04      	ldr	r3, [sp, #16]
 800825e:	3401      	adds	r4, #1
 8008260:	4303      	orrs	r3, r0
 8008262:	9304      	str	r3, [sp, #16]
 8008264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008268:	2206      	movs	r2, #6
 800826a:	482c      	ldr	r0, [pc, #176]	; (800831c <_vfiprintf_r+0x250>)
 800826c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008270:	f000 fc60 	bl	8008b34 <memchr>
 8008274:	2800      	cmp	r0, #0
 8008276:	d03f      	beq.n	80082f8 <_vfiprintf_r+0x22c>
 8008278:	4b29      	ldr	r3, [pc, #164]	; (8008320 <_vfiprintf_r+0x254>)
 800827a:	bb1b      	cbnz	r3, 80082c4 <_vfiprintf_r+0x1f8>
 800827c:	9b03      	ldr	r3, [sp, #12]
 800827e:	3307      	adds	r3, #7
 8008280:	f023 0307 	bic.w	r3, r3, #7
 8008284:	3308      	adds	r3, #8
 8008286:	9303      	str	r3, [sp, #12]
 8008288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800828a:	443b      	add	r3, r7
 800828c:	9309      	str	r3, [sp, #36]	; 0x24
 800828e:	e767      	b.n	8008160 <_vfiprintf_r+0x94>
 8008290:	460c      	mov	r4, r1
 8008292:	2001      	movs	r0, #1
 8008294:	fb0c 3202 	mla	r2, ip, r2, r3
 8008298:	e7a5      	b.n	80081e6 <_vfiprintf_r+0x11a>
 800829a:	2300      	movs	r3, #0
 800829c:	f04f 0c0a 	mov.w	ip, #10
 80082a0:	4619      	mov	r1, r3
 80082a2:	3401      	adds	r4, #1
 80082a4:	9305      	str	r3, [sp, #20]
 80082a6:	4620      	mov	r0, r4
 80082a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082ac:	3a30      	subs	r2, #48	; 0x30
 80082ae:	2a09      	cmp	r2, #9
 80082b0:	d903      	bls.n	80082ba <_vfiprintf_r+0x1ee>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0c5      	beq.n	8008242 <_vfiprintf_r+0x176>
 80082b6:	9105      	str	r1, [sp, #20]
 80082b8:	e7c3      	b.n	8008242 <_vfiprintf_r+0x176>
 80082ba:	4604      	mov	r4, r0
 80082bc:	2301      	movs	r3, #1
 80082be:	fb0c 2101 	mla	r1, ip, r1, r2
 80082c2:	e7f0      	b.n	80082a6 <_vfiprintf_r+0x1da>
 80082c4:	ab03      	add	r3, sp, #12
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	462a      	mov	r2, r5
 80082ca:	4630      	mov	r0, r6
 80082cc:	4b15      	ldr	r3, [pc, #84]	; (8008324 <_vfiprintf_r+0x258>)
 80082ce:	a904      	add	r1, sp, #16
 80082d0:	f3af 8000 	nop.w
 80082d4:	4607      	mov	r7, r0
 80082d6:	1c78      	adds	r0, r7, #1
 80082d8:	d1d6      	bne.n	8008288 <_vfiprintf_r+0x1bc>
 80082da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082dc:	07d9      	lsls	r1, r3, #31
 80082de:	d405      	bmi.n	80082ec <_vfiprintf_r+0x220>
 80082e0:	89ab      	ldrh	r3, [r5, #12]
 80082e2:	059a      	lsls	r2, r3, #22
 80082e4:	d402      	bmi.n	80082ec <_vfiprintf_r+0x220>
 80082e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80082e8:	f7ff fe6d 	bl	8007fc6 <__retarget_lock_release_recursive>
 80082ec:	89ab      	ldrh	r3, [r5, #12]
 80082ee:	065b      	lsls	r3, r3, #25
 80082f0:	f53f af12 	bmi.w	8008118 <_vfiprintf_r+0x4c>
 80082f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082f6:	e711      	b.n	800811c <_vfiprintf_r+0x50>
 80082f8:	ab03      	add	r3, sp, #12
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	462a      	mov	r2, r5
 80082fe:	4630      	mov	r0, r6
 8008300:	4b08      	ldr	r3, [pc, #32]	; (8008324 <_vfiprintf_r+0x258>)
 8008302:	a904      	add	r1, sp, #16
 8008304:	f000 f882 	bl	800840c <_printf_i>
 8008308:	e7e4      	b.n	80082d4 <_vfiprintf_r+0x208>
 800830a:	bf00      	nop
 800830c:	08015a74 	.word	0x08015a74
 8008310:	08015a94 	.word	0x08015a94
 8008314:	08015a54 	.word	0x08015a54
 8008318:	08015ab4 	.word	0x08015ab4
 800831c:	08015abe 	.word	0x08015abe
 8008320:	00000000 	.word	0x00000000
 8008324:	080080a7 	.word	0x080080a7
 8008328:	08015aba 	.word	0x08015aba

0800832c <_printf_common>:
 800832c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008330:	4616      	mov	r6, r2
 8008332:	4699      	mov	r9, r3
 8008334:	688a      	ldr	r2, [r1, #8]
 8008336:	690b      	ldr	r3, [r1, #16]
 8008338:	4607      	mov	r7, r0
 800833a:	4293      	cmp	r3, r2
 800833c:	bfb8      	it	lt
 800833e:	4613      	movlt	r3, r2
 8008340:	6033      	str	r3, [r6, #0]
 8008342:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008346:	460c      	mov	r4, r1
 8008348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800834c:	b10a      	cbz	r2, 8008352 <_printf_common+0x26>
 800834e:	3301      	adds	r3, #1
 8008350:	6033      	str	r3, [r6, #0]
 8008352:	6823      	ldr	r3, [r4, #0]
 8008354:	0699      	lsls	r1, r3, #26
 8008356:	bf42      	ittt	mi
 8008358:	6833      	ldrmi	r3, [r6, #0]
 800835a:	3302      	addmi	r3, #2
 800835c:	6033      	strmi	r3, [r6, #0]
 800835e:	6825      	ldr	r5, [r4, #0]
 8008360:	f015 0506 	ands.w	r5, r5, #6
 8008364:	d106      	bne.n	8008374 <_printf_common+0x48>
 8008366:	f104 0a19 	add.w	sl, r4, #25
 800836a:	68e3      	ldr	r3, [r4, #12]
 800836c:	6832      	ldr	r2, [r6, #0]
 800836e:	1a9b      	subs	r3, r3, r2
 8008370:	42ab      	cmp	r3, r5
 8008372:	dc28      	bgt.n	80083c6 <_printf_common+0x9a>
 8008374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008378:	1e13      	subs	r3, r2, #0
 800837a:	6822      	ldr	r2, [r4, #0]
 800837c:	bf18      	it	ne
 800837e:	2301      	movne	r3, #1
 8008380:	0692      	lsls	r2, r2, #26
 8008382:	d42d      	bmi.n	80083e0 <_printf_common+0xb4>
 8008384:	4649      	mov	r1, r9
 8008386:	4638      	mov	r0, r7
 8008388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800838c:	47c0      	blx	r8
 800838e:	3001      	adds	r0, #1
 8008390:	d020      	beq.n	80083d4 <_printf_common+0xa8>
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	68e5      	ldr	r5, [r4, #12]
 8008396:	f003 0306 	and.w	r3, r3, #6
 800839a:	2b04      	cmp	r3, #4
 800839c:	bf18      	it	ne
 800839e:	2500      	movne	r5, #0
 80083a0:	6832      	ldr	r2, [r6, #0]
 80083a2:	f04f 0600 	mov.w	r6, #0
 80083a6:	68a3      	ldr	r3, [r4, #8]
 80083a8:	bf08      	it	eq
 80083aa:	1aad      	subeq	r5, r5, r2
 80083ac:	6922      	ldr	r2, [r4, #16]
 80083ae:	bf08      	it	eq
 80083b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083b4:	4293      	cmp	r3, r2
 80083b6:	bfc4      	itt	gt
 80083b8:	1a9b      	subgt	r3, r3, r2
 80083ba:	18ed      	addgt	r5, r5, r3
 80083bc:	341a      	adds	r4, #26
 80083be:	42b5      	cmp	r5, r6
 80083c0:	d11a      	bne.n	80083f8 <_printf_common+0xcc>
 80083c2:	2000      	movs	r0, #0
 80083c4:	e008      	b.n	80083d8 <_printf_common+0xac>
 80083c6:	2301      	movs	r3, #1
 80083c8:	4652      	mov	r2, sl
 80083ca:	4649      	mov	r1, r9
 80083cc:	4638      	mov	r0, r7
 80083ce:	47c0      	blx	r8
 80083d0:	3001      	adds	r0, #1
 80083d2:	d103      	bne.n	80083dc <_printf_common+0xb0>
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295
 80083d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083dc:	3501      	adds	r5, #1
 80083de:	e7c4      	b.n	800836a <_printf_common+0x3e>
 80083e0:	2030      	movs	r0, #48	; 0x30
 80083e2:	18e1      	adds	r1, r4, r3
 80083e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083e8:	1c5a      	adds	r2, r3, #1
 80083ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083ee:	4422      	add	r2, r4
 80083f0:	3302      	adds	r3, #2
 80083f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083f6:	e7c5      	b.n	8008384 <_printf_common+0x58>
 80083f8:	2301      	movs	r3, #1
 80083fa:	4622      	mov	r2, r4
 80083fc:	4649      	mov	r1, r9
 80083fe:	4638      	mov	r0, r7
 8008400:	47c0      	blx	r8
 8008402:	3001      	adds	r0, #1
 8008404:	d0e6      	beq.n	80083d4 <_printf_common+0xa8>
 8008406:	3601      	adds	r6, #1
 8008408:	e7d9      	b.n	80083be <_printf_common+0x92>
	...

0800840c <_printf_i>:
 800840c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008410:	460c      	mov	r4, r1
 8008412:	7e27      	ldrb	r7, [r4, #24]
 8008414:	4691      	mov	r9, r2
 8008416:	2f78      	cmp	r7, #120	; 0x78
 8008418:	4680      	mov	r8, r0
 800841a:	469a      	mov	sl, r3
 800841c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800841e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008422:	d807      	bhi.n	8008434 <_printf_i+0x28>
 8008424:	2f62      	cmp	r7, #98	; 0x62
 8008426:	d80a      	bhi.n	800843e <_printf_i+0x32>
 8008428:	2f00      	cmp	r7, #0
 800842a:	f000 80d9 	beq.w	80085e0 <_printf_i+0x1d4>
 800842e:	2f58      	cmp	r7, #88	; 0x58
 8008430:	f000 80a4 	beq.w	800857c <_printf_i+0x170>
 8008434:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800843c:	e03a      	b.n	80084b4 <_printf_i+0xa8>
 800843e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008442:	2b15      	cmp	r3, #21
 8008444:	d8f6      	bhi.n	8008434 <_printf_i+0x28>
 8008446:	a001      	add	r0, pc, #4	; (adr r0, 800844c <_printf_i+0x40>)
 8008448:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800844c:	080084a5 	.word	0x080084a5
 8008450:	080084b9 	.word	0x080084b9
 8008454:	08008435 	.word	0x08008435
 8008458:	08008435 	.word	0x08008435
 800845c:	08008435 	.word	0x08008435
 8008460:	08008435 	.word	0x08008435
 8008464:	080084b9 	.word	0x080084b9
 8008468:	08008435 	.word	0x08008435
 800846c:	08008435 	.word	0x08008435
 8008470:	08008435 	.word	0x08008435
 8008474:	08008435 	.word	0x08008435
 8008478:	080085c7 	.word	0x080085c7
 800847c:	080084e9 	.word	0x080084e9
 8008480:	080085a9 	.word	0x080085a9
 8008484:	08008435 	.word	0x08008435
 8008488:	08008435 	.word	0x08008435
 800848c:	080085e9 	.word	0x080085e9
 8008490:	08008435 	.word	0x08008435
 8008494:	080084e9 	.word	0x080084e9
 8008498:	08008435 	.word	0x08008435
 800849c:	08008435 	.word	0x08008435
 80084a0:	080085b1 	.word	0x080085b1
 80084a4:	680b      	ldr	r3, [r1, #0]
 80084a6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80084aa:	1d1a      	adds	r2, r3, #4
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	600a      	str	r2, [r1, #0]
 80084b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084b4:	2301      	movs	r3, #1
 80084b6:	e0a4      	b.n	8008602 <_printf_i+0x1f6>
 80084b8:	6825      	ldr	r5, [r4, #0]
 80084ba:	6808      	ldr	r0, [r1, #0]
 80084bc:	062e      	lsls	r6, r5, #24
 80084be:	f100 0304 	add.w	r3, r0, #4
 80084c2:	d50a      	bpl.n	80084da <_printf_i+0xce>
 80084c4:	6805      	ldr	r5, [r0, #0]
 80084c6:	600b      	str	r3, [r1, #0]
 80084c8:	2d00      	cmp	r5, #0
 80084ca:	da03      	bge.n	80084d4 <_printf_i+0xc8>
 80084cc:	232d      	movs	r3, #45	; 0x2d
 80084ce:	426d      	negs	r5, r5
 80084d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d4:	230a      	movs	r3, #10
 80084d6:	485e      	ldr	r0, [pc, #376]	; (8008650 <_printf_i+0x244>)
 80084d8:	e019      	b.n	800850e <_printf_i+0x102>
 80084da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80084de:	6805      	ldr	r5, [r0, #0]
 80084e0:	600b      	str	r3, [r1, #0]
 80084e2:	bf18      	it	ne
 80084e4:	b22d      	sxthne	r5, r5
 80084e6:	e7ef      	b.n	80084c8 <_printf_i+0xbc>
 80084e8:	680b      	ldr	r3, [r1, #0]
 80084ea:	6825      	ldr	r5, [r4, #0]
 80084ec:	1d18      	adds	r0, r3, #4
 80084ee:	6008      	str	r0, [r1, #0]
 80084f0:	0628      	lsls	r0, r5, #24
 80084f2:	d501      	bpl.n	80084f8 <_printf_i+0xec>
 80084f4:	681d      	ldr	r5, [r3, #0]
 80084f6:	e002      	b.n	80084fe <_printf_i+0xf2>
 80084f8:	0669      	lsls	r1, r5, #25
 80084fa:	d5fb      	bpl.n	80084f4 <_printf_i+0xe8>
 80084fc:	881d      	ldrh	r5, [r3, #0]
 80084fe:	2f6f      	cmp	r7, #111	; 0x6f
 8008500:	bf0c      	ite	eq
 8008502:	2308      	moveq	r3, #8
 8008504:	230a      	movne	r3, #10
 8008506:	4852      	ldr	r0, [pc, #328]	; (8008650 <_printf_i+0x244>)
 8008508:	2100      	movs	r1, #0
 800850a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800850e:	6866      	ldr	r6, [r4, #4]
 8008510:	2e00      	cmp	r6, #0
 8008512:	bfa8      	it	ge
 8008514:	6821      	ldrge	r1, [r4, #0]
 8008516:	60a6      	str	r6, [r4, #8]
 8008518:	bfa4      	itt	ge
 800851a:	f021 0104 	bicge.w	r1, r1, #4
 800851e:	6021      	strge	r1, [r4, #0]
 8008520:	b90d      	cbnz	r5, 8008526 <_printf_i+0x11a>
 8008522:	2e00      	cmp	r6, #0
 8008524:	d04d      	beq.n	80085c2 <_printf_i+0x1b6>
 8008526:	4616      	mov	r6, r2
 8008528:	fbb5 f1f3 	udiv	r1, r5, r3
 800852c:	fb03 5711 	mls	r7, r3, r1, r5
 8008530:	5dc7      	ldrb	r7, [r0, r7]
 8008532:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008536:	462f      	mov	r7, r5
 8008538:	42bb      	cmp	r3, r7
 800853a:	460d      	mov	r5, r1
 800853c:	d9f4      	bls.n	8008528 <_printf_i+0x11c>
 800853e:	2b08      	cmp	r3, #8
 8008540:	d10b      	bne.n	800855a <_printf_i+0x14e>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	07df      	lsls	r7, r3, #31
 8008546:	d508      	bpl.n	800855a <_printf_i+0x14e>
 8008548:	6923      	ldr	r3, [r4, #16]
 800854a:	6861      	ldr	r1, [r4, #4]
 800854c:	4299      	cmp	r1, r3
 800854e:	bfde      	ittt	le
 8008550:	2330      	movle	r3, #48	; 0x30
 8008552:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008556:	f106 36ff 	addle.w	r6, r6, #4294967295
 800855a:	1b92      	subs	r2, r2, r6
 800855c:	6122      	str	r2, [r4, #16]
 800855e:	464b      	mov	r3, r9
 8008560:	4621      	mov	r1, r4
 8008562:	4640      	mov	r0, r8
 8008564:	f8cd a000 	str.w	sl, [sp]
 8008568:	aa03      	add	r2, sp, #12
 800856a:	f7ff fedf 	bl	800832c <_printf_common>
 800856e:	3001      	adds	r0, #1
 8008570:	d14c      	bne.n	800860c <_printf_i+0x200>
 8008572:	f04f 30ff 	mov.w	r0, #4294967295
 8008576:	b004      	add	sp, #16
 8008578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857c:	4834      	ldr	r0, [pc, #208]	; (8008650 <_printf_i+0x244>)
 800857e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008582:	680e      	ldr	r6, [r1, #0]
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	f856 5b04 	ldr.w	r5, [r6], #4
 800858a:	061f      	lsls	r7, r3, #24
 800858c:	600e      	str	r6, [r1, #0]
 800858e:	d514      	bpl.n	80085ba <_printf_i+0x1ae>
 8008590:	07d9      	lsls	r1, r3, #31
 8008592:	bf44      	itt	mi
 8008594:	f043 0320 	orrmi.w	r3, r3, #32
 8008598:	6023      	strmi	r3, [r4, #0]
 800859a:	b91d      	cbnz	r5, 80085a4 <_printf_i+0x198>
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	f023 0320 	bic.w	r3, r3, #32
 80085a2:	6023      	str	r3, [r4, #0]
 80085a4:	2310      	movs	r3, #16
 80085a6:	e7af      	b.n	8008508 <_printf_i+0xfc>
 80085a8:	6823      	ldr	r3, [r4, #0]
 80085aa:	f043 0320 	orr.w	r3, r3, #32
 80085ae:	6023      	str	r3, [r4, #0]
 80085b0:	2378      	movs	r3, #120	; 0x78
 80085b2:	4828      	ldr	r0, [pc, #160]	; (8008654 <_printf_i+0x248>)
 80085b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085b8:	e7e3      	b.n	8008582 <_printf_i+0x176>
 80085ba:	065e      	lsls	r6, r3, #25
 80085bc:	bf48      	it	mi
 80085be:	b2ad      	uxthmi	r5, r5
 80085c0:	e7e6      	b.n	8008590 <_printf_i+0x184>
 80085c2:	4616      	mov	r6, r2
 80085c4:	e7bb      	b.n	800853e <_printf_i+0x132>
 80085c6:	680b      	ldr	r3, [r1, #0]
 80085c8:	6826      	ldr	r6, [r4, #0]
 80085ca:	1d1d      	adds	r5, r3, #4
 80085cc:	6960      	ldr	r0, [r4, #20]
 80085ce:	600d      	str	r5, [r1, #0]
 80085d0:	0635      	lsls	r5, r6, #24
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	d501      	bpl.n	80085da <_printf_i+0x1ce>
 80085d6:	6018      	str	r0, [r3, #0]
 80085d8:	e002      	b.n	80085e0 <_printf_i+0x1d4>
 80085da:	0671      	lsls	r1, r6, #25
 80085dc:	d5fb      	bpl.n	80085d6 <_printf_i+0x1ca>
 80085de:	8018      	strh	r0, [r3, #0]
 80085e0:	2300      	movs	r3, #0
 80085e2:	4616      	mov	r6, r2
 80085e4:	6123      	str	r3, [r4, #16]
 80085e6:	e7ba      	b.n	800855e <_printf_i+0x152>
 80085e8:	680b      	ldr	r3, [r1, #0]
 80085ea:	1d1a      	adds	r2, r3, #4
 80085ec:	600a      	str	r2, [r1, #0]
 80085ee:	681e      	ldr	r6, [r3, #0]
 80085f0:	2100      	movs	r1, #0
 80085f2:	4630      	mov	r0, r6
 80085f4:	6862      	ldr	r2, [r4, #4]
 80085f6:	f000 fa9d 	bl	8008b34 <memchr>
 80085fa:	b108      	cbz	r0, 8008600 <_printf_i+0x1f4>
 80085fc:	1b80      	subs	r0, r0, r6
 80085fe:	6060      	str	r0, [r4, #4]
 8008600:	6863      	ldr	r3, [r4, #4]
 8008602:	6123      	str	r3, [r4, #16]
 8008604:	2300      	movs	r3, #0
 8008606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800860a:	e7a8      	b.n	800855e <_printf_i+0x152>
 800860c:	4632      	mov	r2, r6
 800860e:	4649      	mov	r1, r9
 8008610:	4640      	mov	r0, r8
 8008612:	6923      	ldr	r3, [r4, #16]
 8008614:	47d0      	blx	sl
 8008616:	3001      	adds	r0, #1
 8008618:	d0ab      	beq.n	8008572 <_printf_i+0x166>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	079b      	lsls	r3, r3, #30
 800861e:	d413      	bmi.n	8008648 <_printf_i+0x23c>
 8008620:	68e0      	ldr	r0, [r4, #12]
 8008622:	9b03      	ldr	r3, [sp, #12]
 8008624:	4298      	cmp	r0, r3
 8008626:	bfb8      	it	lt
 8008628:	4618      	movlt	r0, r3
 800862a:	e7a4      	b.n	8008576 <_printf_i+0x16a>
 800862c:	2301      	movs	r3, #1
 800862e:	4632      	mov	r2, r6
 8008630:	4649      	mov	r1, r9
 8008632:	4640      	mov	r0, r8
 8008634:	47d0      	blx	sl
 8008636:	3001      	adds	r0, #1
 8008638:	d09b      	beq.n	8008572 <_printf_i+0x166>
 800863a:	3501      	adds	r5, #1
 800863c:	68e3      	ldr	r3, [r4, #12]
 800863e:	9903      	ldr	r1, [sp, #12]
 8008640:	1a5b      	subs	r3, r3, r1
 8008642:	42ab      	cmp	r3, r5
 8008644:	dcf2      	bgt.n	800862c <_printf_i+0x220>
 8008646:	e7eb      	b.n	8008620 <_printf_i+0x214>
 8008648:	2500      	movs	r5, #0
 800864a:	f104 0619 	add.w	r6, r4, #25
 800864e:	e7f5      	b.n	800863c <_printf_i+0x230>
 8008650:	08015ac5 	.word	0x08015ac5
 8008654:	08015ad6 	.word	0x08015ad6

08008658 <_sbrk_r>:
 8008658:	b538      	push	{r3, r4, r5, lr}
 800865a:	2300      	movs	r3, #0
 800865c:	4d05      	ldr	r5, [pc, #20]	; (8008674 <_sbrk_r+0x1c>)
 800865e:	4604      	mov	r4, r0
 8008660:	4608      	mov	r0, r1
 8008662:	602b      	str	r3, [r5, #0]
 8008664:	f7f8 fd32 	bl	80010cc <_sbrk>
 8008668:	1c43      	adds	r3, r0, #1
 800866a:	d102      	bne.n	8008672 <_sbrk_r+0x1a>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	b103      	cbz	r3, 8008672 <_sbrk_r+0x1a>
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	bd38      	pop	{r3, r4, r5, pc}
 8008674:	2000024c 	.word	0x2000024c

08008678 <__sread>:
 8008678:	b510      	push	{r4, lr}
 800867a:	460c      	mov	r4, r1
 800867c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008680:	f000 fabe 	bl	8008c00 <_read_r>
 8008684:	2800      	cmp	r0, #0
 8008686:	bfab      	itete	ge
 8008688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800868a:	89a3      	ldrhlt	r3, [r4, #12]
 800868c:	181b      	addge	r3, r3, r0
 800868e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008692:	bfac      	ite	ge
 8008694:	6563      	strge	r3, [r4, #84]	; 0x54
 8008696:	81a3      	strhlt	r3, [r4, #12]
 8008698:	bd10      	pop	{r4, pc}

0800869a <__swrite>:
 800869a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800869e:	461f      	mov	r7, r3
 80086a0:	898b      	ldrh	r3, [r1, #12]
 80086a2:	4605      	mov	r5, r0
 80086a4:	05db      	lsls	r3, r3, #23
 80086a6:	460c      	mov	r4, r1
 80086a8:	4616      	mov	r6, r2
 80086aa:	d505      	bpl.n	80086b8 <__swrite+0x1e>
 80086ac:	2302      	movs	r3, #2
 80086ae:	2200      	movs	r2, #0
 80086b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b4:	f000 f9c8 	bl	8008a48 <_lseek_r>
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	4632      	mov	r2, r6
 80086bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086c0:	81a3      	strh	r3, [r4, #12]
 80086c2:	4628      	mov	r0, r5
 80086c4:	463b      	mov	r3, r7
 80086c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086ce:	f000 b869 	b.w	80087a4 <_write_r>

080086d2 <__sseek>:
 80086d2:	b510      	push	{r4, lr}
 80086d4:	460c      	mov	r4, r1
 80086d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086da:	f000 f9b5 	bl	8008a48 <_lseek_r>
 80086de:	1c43      	adds	r3, r0, #1
 80086e0:	89a3      	ldrh	r3, [r4, #12]
 80086e2:	bf15      	itete	ne
 80086e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80086e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086ee:	81a3      	strheq	r3, [r4, #12]
 80086f0:	bf18      	it	ne
 80086f2:	81a3      	strhne	r3, [r4, #12]
 80086f4:	bd10      	pop	{r4, pc}

080086f6 <__sclose>:
 80086f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fa:	f000 b8d3 	b.w	80088a4 <_close_r>
	...

08008700 <__swbuf_r>:
 8008700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008702:	460e      	mov	r6, r1
 8008704:	4614      	mov	r4, r2
 8008706:	4605      	mov	r5, r0
 8008708:	b118      	cbz	r0, 8008712 <__swbuf_r+0x12>
 800870a:	6983      	ldr	r3, [r0, #24]
 800870c:	b90b      	cbnz	r3, 8008712 <__swbuf_r+0x12>
 800870e:	f7ff fbbb 	bl	8007e88 <__sinit>
 8008712:	4b21      	ldr	r3, [pc, #132]	; (8008798 <__swbuf_r+0x98>)
 8008714:	429c      	cmp	r4, r3
 8008716:	d12b      	bne.n	8008770 <__swbuf_r+0x70>
 8008718:	686c      	ldr	r4, [r5, #4]
 800871a:	69a3      	ldr	r3, [r4, #24]
 800871c:	60a3      	str	r3, [r4, #8]
 800871e:	89a3      	ldrh	r3, [r4, #12]
 8008720:	071a      	lsls	r2, r3, #28
 8008722:	d52f      	bpl.n	8008784 <__swbuf_r+0x84>
 8008724:	6923      	ldr	r3, [r4, #16]
 8008726:	b36b      	cbz	r3, 8008784 <__swbuf_r+0x84>
 8008728:	6923      	ldr	r3, [r4, #16]
 800872a:	6820      	ldr	r0, [r4, #0]
 800872c:	b2f6      	uxtb	r6, r6
 800872e:	1ac0      	subs	r0, r0, r3
 8008730:	6963      	ldr	r3, [r4, #20]
 8008732:	4637      	mov	r7, r6
 8008734:	4283      	cmp	r3, r0
 8008736:	dc04      	bgt.n	8008742 <__swbuf_r+0x42>
 8008738:	4621      	mov	r1, r4
 800873a:	4628      	mov	r0, r5
 800873c:	f000 f948 	bl	80089d0 <_fflush_r>
 8008740:	bb30      	cbnz	r0, 8008790 <__swbuf_r+0x90>
 8008742:	68a3      	ldr	r3, [r4, #8]
 8008744:	3001      	adds	r0, #1
 8008746:	3b01      	subs	r3, #1
 8008748:	60a3      	str	r3, [r4, #8]
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	6022      	str	r2, [r4, #0]
 8008750:	701e      	strb	r6, [r3, #0]
 8008752:	6963      	ldr	r3, [r4, #20]
 8008754:	4283      	cmp	r3, r0
 8008756:	d004      	beq.n	8008762 <__swbuf_r+0x62>
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	07db      	lsls	r3, r3, #31
 800875c:	d506      	bpl.n	800876c <__swbuf_r+0x6c>
 800875e:	2e0a      	cmp	r6, #10
 8008760:	d104      	bne.n	800876c <__swbuf_r+0x6c>
 8008762:	4621      	mov	r1, r4
 8008764:	4628      	mov	r0, r5
 8008766:	f000 f933 	bl	80089d0 <_fflush_r>
 800876a:	b988      	cbnz	r0, 8008790 <__swbuf_r+0x90>
 800876c:	4638      	mov	r0, r7
 800876e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008770:	4b0a      	ldr	r3, [pc, #40]	; (800879c <__swbuf_r+0x9c>)
 8008772:	429c      	cmp	r4, r3
 8008774:	d101      	bne.n	800877a <__swbuf_r+0x7a>
 8008776:	68ac      	ldr	r4, [r5, #8]
 8008778:	e7cf      	b.n	800871a <__swbuf_r+0x1a>
 800877a:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <__swbuf_r+0xa0>)
 800877c:	429c      	cmp	r4, r3
 800877e:	bf08      	it	eq
 8008780:	68ec      	ldreq	r4, [r5, #12]
 8008782:	e7ca      	b.n	800871a <__swbuf_r+0x1a>
 8008784:	4621      	mov	r1, r4
 8008786:	4628      	mov	r0, r5
 8008788:	f000 f81e 	bl	80087c8 <__swsetup_r>
 800878c:	2800      	cmp	r0, #0
 800878e:	d0cb      	beq.n	8008728 <__swbuf_r+0x28>
 8008790:	f04f 37ff 	mov.w	r7, #4294967295
 8008794:	e7ea      	b.n	800876c <__swbuf_r+0x6c>
 8008796:	bf00      	nop
 8008798:	08015a74 	.word	0x08015a74
 800879c:	08015a94 	.word	0x08015a94
 80087a0:	08015a54 	.word	0x08015a54

080087a4 <_write_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4604      	mov	r4, r0
 80087a8:	4608      	mov	r0, r1
 80087aa:	4611      	mov	r1, r2
 80087ac:	2200      	movs	r2, #0
 80087ae:	4d05      	ldr	r5, [pc, #20]	; (80087c4 <_write_r+0x20>)
 80087b0:	602a      	str	r2, [r5, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	f7f8 fc3d 	bl	8001032 <_write>
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	d102      	bne.n	80087c2 <_write_r+0x1e>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	b103      	cbz	r3, 80087c2 <_write_r+0x1e>
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	2000024c 	.word	0x2000024c

080087c8 <__swsetup_r>:
 80087c8:	4b32      	ldr	r3, [pc, #200]	; (8008894 <__swsetup_r+0xcc>)
 80087ca:	b570      	push	{r4, r5, r6, lr}
 80087cc:	681d      	ldr	r5, [r3, #0]
 80087ce:	4606      	mov	r6, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	b125      	cbz	r5, 80087de <__swsetup_r+0x16>
 80087d4:	69ab      	ldr	r3, [r5, #24]
 80087d6:	b913      	cbnz	r3, 80087de <__swsetup_r+0x16>
 80087d8:	4628      	mov	r0, r5
 80087da:	f7ff fb55 	bl	8007e88 <__sinit>
 80087de:	4b2e      	ldr	r3, [pc, #184]	; (8008898 <__swsetup_r+0xd0>)
 80087e0:	429c      	cmp	r4, r3
 80087e2:	d10f      	bne.n	8008804 <__swsetup_r+0x3c>
 80087e4:	686c      	ldr	r4, [r5, #4]
 80087e6:	89a3      	ldrh	r3, [r4, #12]
 80087e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80087ec:	0719      	lsls	r1, r3, #28
 80087ee:	d42c      	bmi.n	800884a <__swsetup_r+0x82>
 80087f0:	06dd      	lsls	r5, r3, #27
 80087f2:	d411      	bmi.n	8008818 <__swsetup_r+0x50>
 80087f4:	2309      	movs	r3, #9
 80087f6:	6033      	str	r3, [r6, #0]
 80087f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	81a3      	strh	r3, [r4, #12]
 8008802:	e03e      	b.n	8008882 <__swsetup_r+0xba>
 8008804:	4b25      	ldr	r3, [pc, #148]	; (800889c <__swsetup_r+0xd4>)
 8008806:	429c      	cmp	r4, r3
 8008808:	d101      	bne.n	800880e <__swsetup_r+0x46>
 800880a:	68ac      	ldr	r4, [r5, #8]
 800880c:	e7eb      	b.n	80087e6 <__swsetup_r+0x1e>
 800880e:	4b24      	ldr	r3, [pc, #144]	; (80088a0 <__swsetup_r+0xd8>)
 8008810:	429c      	cmp	r4, r3
 8008812:	bf08      	it	eq
 8008814:	68ec      	ldreq	r4, [r5, #12]
 8008816:	e7e6      	b.n	80087e6 <__swsetup_r+0x1e>
 8008818:	0758      	lsls	r0, r3, #29
 800881a:	d512      	bpl.n	8008842 <__swsetup_r+0x7a>
 800881c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800881e:	b141      	cbz	r1, 8008832 <__swsetup_r+0x6a>
 8008820:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008824:	4299      	cmp	r1, r3
 8008826:	d002      	beq.n	800882e <__swsetup_r+0x66>
 8008828:	4630      	mov	r0, r6
 800882a:	f000 f99d 	bl	8008b68 <_free_r>
 800882e:	2300      	movs	r3, #0
 8008830:	6363      	str	r3, [r4, #52]	; 0x34
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008838:	81a3      	strh	r3, [r4, #12]
 800883a:	2300      	movs	r3, #0
 800883c:	6063      	str	r3, [r4, #4]
 800883e:	6923      	ldr	r3, [r4, #16]
 8008840:	6023      	str	r3, [r4, #0]
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	f043 0308 	orr.w	r3, r3, #8
 8008848:	81a3      	strh	r3, [r4, #12]
 800884a:	6923      	ldr	r3, [r4, #16]
 800884c:	b94b      	cbnz	r3, 8008862 <__swsetup_r+0x9a>
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008858:	d003      	beq.n	8008862 <__swsetup_r+0x9a>
 800885a:	4621      	mov	r1, r4
 800885c:	4630      	mov	r0, r6
 800885e:	f000 f929 	bl	8008ab4 <__smakebuf_r>
 8008862:	89a0      	ldrh	r0, [r4, #12]
 8008864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008868:	f010 0301 	ands.w	r3, r0, #1
 800886c:	d00a      	beq.n	8008884 <__swsetup_r+0xbc>
 800886e:	2300      	movs	r3, #0
 8008870:	60a3      	str	r3, [r4, #8]
 8008872:	6963      	ldr	r3, [r4, #20]
 8008874:	425b      	negs	r3, r3
 8008876:	61a3      	str	r3, [r4, #24]
 8008878:	6923      	ldr	r3, [r4, #16]
 800887a:	b943      	cbnz	r3, 800888e <__swsetup_r+0xc6>
 800887c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008880:	d1ba      	bne.n	80087f8 <__swsetup_r+0x30>
 8008882:	bd70      	pop	{r4, r5, r6, pc}
 8008884:	0781      	lsls	r1, r0, #30
 8008886:	bf58      	it	pl
 8008888:	6963      	ldrpl	r3, [r4, #20]
 800888a:	60a3      	str	r3, [r4, #8]
 800888c:	e7f4      	b.n	8008878 <__swsetup_r+0xb0>
 800888e:	2000      	movs	r0, #0
 8008890:	e7f7      	b.n	8008882 <__swsetup_r+0xba>
 8008892:	bf00      	nop
 8008894:	20000030 	.word	0x20000030
 8008898:	08015a74 	.word	0x08015a74
 800889c:	08015a94 	.word	0x08015a94
 80088a0:	08015a54 	.word	0x08015a54

080088a4 <_close_r>:
 80088a4:	b538      	push	{r3, r4, r5, lr}
 80088a6:	2300      	movs	r3, #0
 80088a8:	4d05      	ldr	r5, [pc, #20]	; (80088c0 <_close_r+0x1c>)
 80088aa:	4604      	mov	r4, r0
 80088ac:	4608      	mov	r0, r1
 80088ae:	602b      	str	r3, [r5, #0]
 80088b0:	f7f8 fbdb 	bl	800106a <_close>
 80088b4:	1c43      	adds	r3, r0, #1
 80088b6:	d102      	bne.n	80088be <_close_r+0x1a>
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	b103      	cbz	r3, 80088be <_close_r+0x1a>
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	2000024c 	.word	0x2000024c

080088c4 <__sflush_r>:
 80088c4:	898a      	ldrh	r2, [r1, #12]
 80088c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ca:	4605      	mov	r5, r0
 80088cc:	0710      	lsls	r0, r2, #28
 80088ce:	460c      	mov	r4, r1
 80088d0:	d458      	bmi.n	8008984 <__sflush_r+0xc0>
 80088d2:	684b      	ldr	r3, [r1, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	dc05      	bgt.n	80088e4 <__sflush_r+0x20>
 80088d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088da:	2b00      	cmp	r3, #0
 80088dc:	dc02      	bgt.n	80088e4 <__sflush_r+0x20>
 80088de:	2000      	movs	r0, #0
 80088e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	d0f9      	beq.n	80088de <__sflush_r+0x1a>
 80088ea:	2300      	movs	r3, #0
 80088ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088f0:	682f      	ldr	r7, [r5, #0]
 80088f2:	602b      	str	r3, [r5, #0]
 80088f4:	d032      	beq.n	800895c <__sflush_r+0x98>
 80088f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088f8:	89a3      	ldrh	r3, [r4, #12]
 80088fa:	075a      	lsls	r2, r3, #29
 80088fc:	d505      	bpl.n	800890a <__sflush_r+0x46>
 80088fe:	6863      	ldr	r3, [r4, #4]
 8008900:	1ac0      	subs	r0, r0, r3
 8008902:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008904:	b10b      	cbz	r3, 800890a <__sflush_r+0x46>
 8008906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008908:	1ac0      	subs	r0, r0, r3
 800890a:	2300      	movs	r3, #0
 800890c:	4602      	mov	r2, r0
 800890e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008910:	4628      	mov	r0, r5
 8008912:	6a21      	ldr	r1, [r4, #32]
 8008914:	47b0      	blx	r6
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	d106      	bne.n	800892a <__sflush_r+0x66>
 800891c:	6829      	ldr	r1, [r5, #0]
 800891e:	291d      	cmp	r1, #29
 8008920:	d82c      	bhi.n	800897c <__sflush_r+0xb8>
 8008922:	4a2a      	ldr	r2, [pc, #168]	; (80089cc <__sflush_r+0x108>)
 8008924:	40ca      	lsrs	r2, r1
 8008926:	07d6      	lsls	r6, r2, #31
 8008928:	d528      	bpl.n	800897c <__sflush_r+0xb8>
 800892a:	2200      	movs	r2, #0
 800892c:	6062      	str	r2, [r4, #4]
 800892e:	6922      	ldr	r2, [r4, #16]
 8008930:	04d9      	lsls	r1, r3, #19
 8008932:	6022      	str	r2, [r4, #0]
 8008934:	d504      	bpl.n	8008940 <__sflush_r+0x7c>
 8008936:	1c42      	adds	r2, r0, #1
 8008938:	d101      	bne.n	800893e <__sflush_r+0x7a>
 800893a:	682b      	ldr	r3, [r5, #0]
 800893c:	b903      	cbnz	r3, 8008940 <__sflush_r+0x7c>
 800893e:	6560      	str	r0, [r4, #84]	; 0x54
 8008940:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008942:	602f      	str	r7, [r5, #0]
 8008944:	2900      	cmp	r1, #0
 8008946:	d0ca      	beq.n	80088de <__sflush_r+0x1a>
 8008948:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800894c:	4299      	cmp	r1, r3
 800894e:	d002      	beq.n	8008956 <__sflush_r+0x92>
 8008950:	4628      	mov	r0, r5
 8008952:	f000 f909 	bl	8008b68 <_free_r>
 8008956:	2000      	movs	r0, #0
 8008958:	6360      	str	r0, [r4, #52]	; 0x34
 800895a:	e7c1      	b.n	80088e0 <__sflush_r+0x1c>
 800895c:	6a21      	ldr	r1, [r4, #32]
 800895e:	2301      	movs	r3, #1
 8008960:	4628      	mov	r0, r5
 8008962:	47b0      	blx	r6
 8008964:	1c41      	adds	r1, r0, #1
 8008966:	d1c7      	bne.n	80088f8 <__sflush_r+0x34>
 8008968:	682b      	ldr	r3, [r5, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0c4      	beq.n	80088f8 <__sflush_r+0x34>
 800896e:	2b1d      	cmp	r3, #29
 8008970:	d001      	beq.n	8008976 <__sflush_r+0xb2>
 8008972:	2b16      	cmp	r3, #22
 8008974:	d101      	bne.n	800897a <__sflush_r+0xb6>
 8008976:	602f      	str	r7, [r5, #0]
 8008978:	e7b1      	b.n	80088de <__sflush_r+0x1a>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008980:	81a3      	strh	r3, [r4, #12]
 8008982:	e7ad      	b.n	80088e0 <__sflush_r+0x1c>
 8008984:	690f      	ldr	r7, [r1, #16]
 8008986:	2f00      	cmp	r7, #0
 8008988:	d0a9      	beq.n	80088de <__sflush_r+0x1a>
 800898a:	0793      	lsls	r3, r2, #30
 800898c:	bf18      	it	ne
 800898e:	2300      	movne	r3, #0
 8008990:	680e      	ldr	r6, [r1, #0]
 8008992:	bf08      	it	eq
 8008994:	694b      	ldreq	r3, [r1, #20]
 8008996:	eba6 0807 	sub.w	r8, r6, r7
 800899a:	600f      	str	r7, [r1, #0]
 800899c:	608b      	str	r3, [r1, #8]
 800899e:	f1b8 0f00 	cmp.w	r8, #0
 80089a2:	dd9c      	ble.n	80088de <__sflush_r+0x1a>
 80089a4:	4643      	mov	r3, r8
 80089a6:	463a      	mov	r2, r7
 80089a8:	4628      	mov	r0, r5
 80089aa:	6a21      	ldr	r1, [r4, #32]
 80089ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089ae:	47b0      	blx	r6
 80089b0:	2800      	cmp	r0, #0
 80089b2:	dc06      	bgt.n	80089c2 <__sflush_r+0xfe>
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089be:	81a3      	strh	r3, [r4, #12]
 80089c0:	e78e      	b.n	80088e0 <__sflush_r+0x1c>
 80089c2:	4407      	add	r7, r0
 80089c4:	eba8 0800 	sub.w	r8, r8, r0
 80089c8:	e7e9      	b.n	800899e <__sflush_r+0xda>
 80089ca:	bf00      	nop
 80089cc:	20400001 	.word	0x20400001

080089d0 <_fflush_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	690b      	ldr	r3, [r1, #16]
 80089d4:	4605      	mov	r5, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	b913      	cbnz	r3, 80089e0 <_fflush_r+0x10>
 80089da:	2500      	movs	r5, #0
 80089dc:	4628      	mov	r0, r5
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	b118      	cbz	r0, 80089ea <_fflush_r+0x1a>
 80089e2:	6983      	ldr	r3, [r0, #24]
 80089e4:	b90b      	cbnz	r3, 80089ea <_fflush_r+0x1a>
 80089e6:	f7ff fa4f 	bl	8007e88 <__sinit>
 80089ea:	4b14      	ldr	r3, [pc, #80]	; (8008a3c <_fflush_r+0x6c>)
 80089ec:	429c      	cmp	r4, r3
 80089ee:	d11b      	bne.n	8008a28 <_fflush_r+0x58>
 80089f0:	686c      	ldr	r4, [r5, #4]
 80089f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d0ef      	beq.n	80089da <_fflush_r+0xa>
 80089fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089fc:	07d0      	lsls	r0, r2, #31
 80089fe:	d404      	bmi.n	8008a0a <_fflush_r+0x3a>
 8008a00:	0599      	lsls	r1, r3, #22
 8008a02:	d402      	bmi.n	8008a0a <_fflush_r+0x3a>
 8008a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a06:	f7ff fadd 	bl	8007fc4 <__retarget_lock_acquire_recursive>
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	f7ff ff59 	bl	80088c4 <__sflush_r>
 8008a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a14:	4605      	mov	r5, r0
 8008a16:	07da      	lsls	r2, r3, #31
 8008a18:	d4e0      	bmi.n	80089dc <_fflush_r+0xc>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	059b      	lsls	r3, r3, #22
 8008a1e:	d4dd      	bmi.n	80089dc <_fflush_r+0xc>
 8008a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a22:	f7ff fad0 	bl	8007fc6 <__retarget_lock_release_recursive>
 8008a26:	e7d9      	b.n	80089dc <_fflush_r+0xc>
 8008a28:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <_fflush_r+0x70>)
 8008a2a:	429c      	cmp	r4, r3
 8008a2c:	d101      	bne.n	8008a32 <_fflush_r+0x62>
 8008a2e:	68ac      	ldr	r4, [r5, #8]
 8008a30:	e7df      	b.n	80089f2 <_fflush_r+0x22>
 8008a32:	4b04      	ldr	r3, [pc, #16]	; (8008a44 <_fflush_r+0x74>)
 8008a34:	429c      	cmp	r4, r3
 8008a36:	bf08      	it	eq
 8008a38:	68ec      	ldreq	r4, [r5, #12]
 8008a3a:	e7da      	b.n	80089f2 <_fflush_r+0x22>
 8008a3c:	08015a74 	.word	0x08015a74
 8008a40:	08015a94 	.word	0x08015a94
 8008a44:	08015a54 	.word	0x08015a54

08008a48 <_lseek_r>:
 8008a48:	b538      	push	{r3, r4, r5, lr}
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	4608      	mov	r0, r1
 8008a4e:	4611      	mov	r1, r2
 8008a50:	2200      	movs	r2, #0
 8008a52:	4d05      	ldr	r5, [pc, #20]	; (8008a68 <_lseek_r+0x20>)
 8008a54:	602a      	str	r2, [r5, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	f7f8 fb2b 	bl	80010b2 <_lseek>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_lseek_r+0x1e>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_lseek_r+0x1e>
 8008a64:	6023      	str	r3, [r4, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	2000024c 	.word	0x2000024c

08008a6c <__swhatbuf_r>:
 8008a6c:	b570      	push	{r4, r5, r6, lr}
 8008a6e:	460e      	mov	r6, r1
 8008a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a74:	4614      	mov	r4, r2
 8008a76:	2900      	cmp	r1, #0
 8008a78:	461d      	mov	r5, r3
 8008a7a:	b096      	sub	sp, #88	; 0x58
 8008a7c:	da07      	bge.n	8008a8e <__swhatbuf_r+0x22>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	89b3      	ldrh	r3, [r6, #12]
 8008a84:	061a      	lsls	r2, r3, #24
 8008a86:	d410      	bmi.n	8008aaa <__swhatbuf_r+0x3e>
 8008a88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a8c:	e00e      	b.n	8008aac <__swhatbuf_r+0x40>
 8008a8e:	466a      	mov	r2, sp
 8008a90:	f000 f8c8 	bl	8008c24 <_fstat_r>
 8008a94:	2800      	cmp	r0, #0
 8008a96:	dbf2      	blt.n	8008a7e <__swhatbuf_r+0x12>
 8008a98:	9a01      	ldr	r2, [sp, #4]
 8008a9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008a9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008aa2:	425a      	negs	r2, r3
 8008aa4:	415a      	adcs	r2, r3
 8008aa6:	602a      	str	r2, [r5, #0]
 8008aa8:	e7ee      	b.n	8008a88 <__swhatbuf_r+0x1c>
 8008aaa:	2340      	movs	r3, #64	; 0x40
 8008aac:	2000      	movs	r0, #0
 8008aae:	6023      	str	r3, [r4, #0]
 8008ab0:	b016      	add	sp, #88	; 0x58
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}

08008ab4 <__smakebuf_r>:
 8008ab4:	898b      	ldrh	r3, [r1, #12]
 8008ab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ab8:	079d      	lsls	r5, r3, #30
 8008aba:	4606      	mov	r6, r0
 8008abc:	460c      	mov	r4, r1
 8008abe:	d507      	bpl.n	8008ad0 <__smakebuf_r+0x1c>
 8008ac0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	6123      	str	r3, [r4, #16]
 8008ac8:	2301      	movs	r3, #1
 8008aca:	6163      	str	r3, [r4, #20]
 8008acc:	b002      	add	sp, #8
 8008ace:	bd70      	pop	{r4, r5, r6, pc}
 8008ad0:	466a      	mov	r2, sp
 8008ad2:	ab01      	add	r3, sp, #4
 8008ad4:	f7ff ffca 	bl	8008a6c <__swhatbuf_r>
 8008ad8:	9900      	ldr	r1, [sp, #0]
 8008ada:	4605      	mov	r5, r0
 8008adc:	4630      	mov	r0, r6
 8008ade:	f7ff fa73 	bl	8007fc8 <_malloc_r>
 8008ae2:	b948      	cbnz	r0, 8008af8 <__smakebuf_r+0x44>
 8008ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae8:	059a      	lsls	r2, r3, #22
 8008aea:	d4ef      	bmi.n	8008acc <__smakebuf_r+0x18>
 8008aec:	f023 0303 	bic.w	r3, r3, #3
 8008af0:	f043 0302 	orr.w	r3, r3, #2
 8008af4:	81a3      	strh	r3, [r4, #12]
 8008af6:	e7e3      	b.n	8008ac0 <__smakebuf_r+0xc>
 8008af8:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <__smakebuf_r+0x7c>)
 8008afa:	62b3      	str	r3, [r6, #40]	; 0x28
 8008afc:	89a3      	ldrh	r3, [r4, #12]
 8008afe:	6020      	str	r0, [r4, #0]
 8008b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b04:	81a3      	strh	r3, [r4, #12]
 8008b06:	9b00      	ldr	r3, [sp, #0]
 8008b08:	6120      	str	r0, [r4, #16]
 8008b0a:	6163      	str	r3, [r4, #20]
 8008b0c:	9b01      	ldr	r3, [sp, #4]
 8008b0e:	b15b      	cbz	r3, 8008b28 <__smakebuf_r+0x74>
 8008b10:	4630      	mov	r0, r6
 8008b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b16:	f000 f897 	bl	8008c48 <_isatty_r>
 8008b1a:	b128      	cbz	r0, 8008b28 <__smakebuf_r+0x74>
 8008b1c:	89a3      	ldrh	r3, [r4, #12]
 8008b1e:	f023 0303 	bic.w	r3, r3, #3
 8008b22:	f043 0301 	orr.w	r3, r3, #1
 8008b26:	81a3      	strh	r3, [r4, #12]
 8008b28:	89a0      	ldrh	r0, [r4, #12]
 8008b2a:	4305      	orrs	r5, r0
 8008b2c:	81a5      	strh	r5, [r4, #12]
 8008b2e:	e7cd      	b.n	8008acc <__smakebuf_r+0x18>
 8008b30:	08007e21 	.word	0x08007e21

08008b34 <memchr>:
 8008b34:	4603      	mov	r3, r0
 8008b36:	b510      	push	{r4, lr}
 8008b38:	b2c9      	uxtb	r1, r1
 8008b3a:	4402      	add	r2, r0
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	d101      	bne.n	8008b46 <memchr+0x12>
 8008b42:	2000      	movs	r0, #0
 8008b44:	e003      	b.n	8008b4e <memchr+0x1a>
 8008b46:	7804      	ldrb	r4, [r0, #0]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	428c      	cmp	r4, r1
 8008b4c:	d1f6      	bne.n	8008b3c <memchr+0x8>
 8008b4e:	bd10      	pop	{r4, pc}

08008b50 <__malloc_lock>:
 8008b50:	4801      	ldr	r0, [pc, #4]	; (8008b58 <__malloc_lock+0x8>)
 8008b52:	f7ff ba37 	b.w	8007fc4 <__retarget_lock_acquire_recursive>
 8008b56:	bf00      	nop
 8008b58:	20000244 	.word	0x20000244

08008b5c <__malloc_unlock>:
 8008b5c:	4801      	ldr	r0, [pc, #4]	; (8008b64 <__malloc_unlock+0x8>)
 8008b5e:	f7ff ba32 	b.w	8007fc6 <__retarget_lock_release_recursive>
 8008b62:	bf00      	nop
 8008b64:	20000244 	.word	0x20000244

08008b68 <_free_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	d043      	beq.n	8008bf8 <_free_r+0x90>
 8008b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b74:	1f0c      	subs	r4, r1, #4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bfb8      	it	lt
 8008b7a:	18e4      	addlt	r4, r4, r3
 8008b7c:	f7ff ffe8 	bl	8008b50 <__malloc_lock>
 8008b80:	4a1e      	ldr	r2, [pc, #120]	; (8008bfc <_free_r+0x94>)
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	4610      	mov	r0, r2
 8008b86:	b933      	cbnz	r3, 8008b96 <_free_r+0x2e>
 8008b88:	6063      	str	r3, [r4, #4]
 8008b8a:	6014      	str	r4, [r2, #0]
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b92:	f7ff bfe3 	b.w	8008b5c <__malloc_unlock>
 8008b96:	42a3      	cmp	r3, r4
 8008b98:	d90a      	bls.n	8008bb0 <_free_r+0x48>
 8008b9a:	6821      	ldr	r1, [r4, #0]
 8008b9c:	1862      	adds	r2, r4, r1
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	bf01      	itttt	eq
 8008ba2:	681a      	ldreq	r2, [r3, #0]
 8008ba4:	685b      	ldreq	r3, [r3, #4]
 8008ba6:	1852      	addeq	r2, r2, r1
 8008ba8:	6022      	streq	r2, [r4, #0]
 8008baa:	6063      	str	r3, [r4, #4]
 8008bac:	6004      	str	r4, [r0, #0]
 8008bae:	e7ed      	b.n	8008b8c <_free_r+0x24>
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	b10b      	cbz	r3, 8008bba <_free_r+0x52>
 8008bb6:	42a3      	cmp	r3, r4
 8008bb8:	d9fa      	bls.n	8008bb0 <_free_r+0x48>
 8008bba:	6811      	ldr	r1, [r2, #0]
 8008bbc:	1850      	adds	r0, r2, r1
 8008bbe:	42a0      	cmp	r0, r4
 8008bc0:	d10b      	bne.n	8008bda <_free_r+0x72>
 8008bc2:	6820      	ldr	r0, [r4, #0]
 8008bc4:	4401      	add	r1, r0
 8008bc6:	1850      	adds	r0, r2, r1
 8008bc8:	4283      	cmp	r3, r0
 8008bca:	6011      	str	r1, [r2, #0]
 8008bcc:	d1de      	bne.n	8008b8c <_free_r+0x24>
 8008bce:	6818      	ldr	r0, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	4401      	add	r1, r0
 8008bd4:	6011      	str	r1, [r2, #0]
 8008bd6:	6053      	str	r3, [r2, #4]
 8008bd8:	e7d8      	b.n	8008b8c <_free_r+0x24>
 8008bda:	d902      	bls.n	8008be2 <_free_r+0x7a>
 8008bdc:	230c      	movs	r3, #12
 8008bde:	602b      	str	r3, [r5, #0]
 8008be0:	e7d4      	b.n	8008b8c <_free_r+0x24>
 8008be2:	6820      	ldr	r0, [r4, #0]
 8008be4:	1821      	adds	r1, r4, r0
 8008be6:	428b      	cmp	r3, r1
 8008be8:	bf01      	itttt	eq
 8008bea:	6819      	ldreq	r1, [r3, #0]
 8008bec:	685b      	ldreq	r3, [r3, #4]
 8008bee:	1809      	addeq	r1, r1, r0
 8008bf0:	6021      	streq	r1, [r4, #0]
 8008bf2:	6063      	str	r3, [r4, #4]
 8008bf4:	6054      	str	r4, [r2, #4]
 8008bf6:	e7c9      	b.n	8008b8c <_free_r+0x24>
 8008bf8:	bd38      	pop	{r3, r4, r5, pc}
 8008bfa:	bf00      	nop
 8008bfc:	200000bc 	.word	0x200000bc

08008c00 <_read_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4604      	mov	r4, r0
 8008c04:	4608      	mov	r0, r1
 8008c06:	4611      	mov	r1, r2
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4d05      	ldr	r5, [pc, #20]	; (8008c20 <_read_r+0x20>)
 8008c0c:	602a      	str	r2, [r5, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	f7f8 f9f2 	bl	8000ff8 <_read>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_read_r+0x1e>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_read_r+0x1e>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	2000024c 	.word	0x2000024c

08008c24 <_fstat_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	2300      	movs	r3, #0
 8008c28:	4d06      	ldr	r5, [pc, #24]	; (8008c44 <_fstat_r+0x20>)
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	4608      	mov	r0, r1
 8008c2e:	4611      	mov	r1, r2
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	f7f8 fa25 	bl	8001080 <_fstat>
 8008c36:	1c43      	adds	r3, r0, #1
 8008c38:	d102      	bne.n	8008c40 <_fstat_r+0x1c>
 8008c3a:	682b      	ldr	r3, [r5, #0]
 8008c3c:	b103      	cbz	r3, 8008c40 <_fstat_r+0x1c>
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	bd38      	pop	{r3, r4, r5, pc}
 8008c42:	bf00      	nop
 8008c44:	2000024c 	.word	0x2000024c

08008c48 <_isatty_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	4d05      	ldr	r5, [pc, #20]	; (8008c64 <_isatty_r+0x1c>)
 8008c4e:	4604      	mov	r4, r0
 8008c50:	4608      	mov	r0, r1
 8008c52:	602b      	str	r3, [r5, #0]
 8008c54:	f7f8 fa23 	bl	800109e <_isatty>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_isatty_r+0x1a>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_isatty_r+0x1a>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	2000024c 	.word	0x2000024c

08008c68 <_init>:
 8008c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6a:	bf00      	nop
 8008c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6e:	bc08      	pop	{r3}
 8008c70:	469e      	mov	lr, r3
 8008c72:	4770      	bx	lr

08008c74 <_fini>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	bf00      	nop
 8008c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7a:	bc08      	pop	{r3}
 8008c7c:	469e      	mov	lr, r3
 8008c7e:	4770      	bx	lr
