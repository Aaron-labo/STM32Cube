
12.SPI_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003eac  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08004090  08004090  00014090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800420c  0800420c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800420c  0800420c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800420c  0800420c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800420c  0800420c  0001420c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  20000070  08004284  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  08004284  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b36f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002205  00000000  00000000  0002b408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002d610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002dfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7bc  00000000  00000000  0002e858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b554  00000000  00000000  00049014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b07  00000000  00000000  00054568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e806f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d90  00000000  00000000  000e80c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08004078 	.word	0x08004078

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08004078 	.word	0x08004078

08000224 <BSP_W25Qx_Init>:

/**
 * @brief  Initializes the W25Q128FV interface.
 * @retval None
 */
uint8_t BSP_W25Qx_Init(void) {
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	/* Reset W25Qxxx */
	BSP_W25Qx_Reset();
 8000228:	f000 f806 	bl	8000238 <BSP_W25Qx_Reset>

	return BSP_W25Qx_GetStatus();
 800022c:	f000 f826 	bl	800027c <BSP_W25Qx_GetStatus>
 8000230:	4603      	mov	r3, r0
}
 8000232:	4618      	mov	r0, r3
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <BSP_W25Qx_Reset>:

/**
 * @brief  This function reset the W25Qx.
 * @retval None
 */
static void BSP_W25Qx_Reset(void) {
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	uint8_t cmd[2] = { RESET_ENABLE_CMD, RESET_MEMORY_CMD };
 800023e:	f649 1366 	movw	r3, #39270	; 0x9966
 8000242:	80bb      	strh	r3, [r7, #4]

	W25Qx_Enable();
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800024a:	480a      	ldr	r0, [pc, #40]	; (8000274 <BSP_W25Qx_Reset+0x3c>)
 800024c:	f001 f94c 	bl	80014e8 <HAL_GPIO_WritePin>
	/* Send the reset command */
	HAL_SPI_Transmit(&hspi2, cmd, 2, W25Qx_TIMEOUT_VALUE);
 8000250:	1d39      	adds	r1, r7, #4
 8000252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000256:	2202      	movs	r2, #2
 8000258:	4807      	ldr	r0, [pc, #28]	; (8000278 <BSP_W25Qx_Reset+0x40>)
 800025a:	f001 fdfb 	bl	8001e54 <HAL_SPI_Transmit>
	W25Qx_Disable();
 800025e:	2201      	movs	r2, #1
 8000260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <BSP_W25Qx_Reset+0x3c>)
 8000266:	f001 f93f 	bl	80014e8 <HAL_GPIO_WritePin>

}
 800026a:	bf00      	nop
 800026c:	3708      	adds	r7, #8
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}
 8000272:	bf00      	nop
 8000274:	40010c00 	.word	0x40010c00
 8000278:	20000308 	.word	0x20000308

0800027c <BSP_W25Qx_GetStatus>:

/**
 * @brief  Reads current status of the W25Q128FV.
 * @retval W25Q128FV memory status
 */
static uint8_t BSP_W25Qx_GetStatus(void) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
	uint8_t cmd[] = { READ_STATUS_REG1_CMD };
 8000282:	2305      	movs	r3, #5
 8000284:	713b      	strb	r3, [r7, #4]
	uint8_t status;

	W25Qx_Enable();
 8000286:	2200      	movs	r2, #0
 8000288:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800028c:	4811      	ldr	r0, [pc, #68]	; (80002d4 <BSP_W25Qx_GetStatus+0x58>)
 800028e:	f001 f92b 	bl	80014e8 <HAL_GPIO_WritePin>
	/* Send the read status command */
	HAL_SPI_Transmit(&hspi2, cmd, 1, W25Qx_TIMEOUT_VALUE);
 8000292:	1d39      	adds	r1, r7, #4
 8000294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000298:	2201      	movs	r2, #1
 800029a:	480f      	ldr	r0, [pc, #60]	; (80002d8 <BSP_W25Qx_GetStatus+0x5c>)
 800029c:	f001 fdda 	bl	8001e54 <HAL_SPI_Transmit>
	/* Reception of the data */
	HAL_SPI_Receive(&hspi2, &status, 1, W25Qx_TIMEOUT_VALUE);
 80002a0:	1cf9      	adds	r1, r7, #3
 80002a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002a6:	2201      	movs	r2, #1
 80002a8:	480b      	ldr	r0, [pc, #44]	; (80002d8 <BSP_W25Qx_GetStatus+0x5c>)
 80002aa:	f001 ff0f 	bl	80020cc <HAL_SPI_Receive>
	W25Qx_Disable();
 80002ae:	2201      	movs	r2, #1
 80002b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b4:	4807      	ldr	r0, [pc, #28]	; (80002d4 <BSP_W25Qx_GetStatus+0x58>)
 80002b6:	f001 f917 	bl	80014e8 <HAL_GPIO_WritePin>

	/* Check the value of the register */
	if ((status & W25Q128FV_FSR_BUSY) != 0) {
 80002ba:	78fb      	ldrb	r3, [r7, #3]
 80002bc:	f003 0301 	and.w	r3, r3, #1
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d001      	beq.n	80002c8 <BSP_W25Qx_GetStatus+0x4c>
		return W25Qx_BUSY;
 80002c4:	2302      	movs	r3, #2
 80002c6:	e000      	b.n	80002ca <BSP_W25Qx_GetStatus+0x4e>
	} else {
		return W25Qx_OK;
 80002c8:	2300      	movs	r3, #0
	}
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3708      	adds	r7, #8
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40010c00 	.word	0x40010c00
 80002d8:	20000308 	.word	0x20000308

080002dc <BSP_W25Qx_WriteEnable>:

/**
 * @brief  This function send a Write Enable and wait it is effective.
 * @retval None
 */
uint8_t BSP_W25Qx_WriteEnable(void) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
	uint8_t cmd[] = { WRITE_ENABLE_CMD };
 80002e2:	2306      	movs	r3, #6
 80002e4:	703b      	strb	r3, [r7, #0]
	uint32_t tickstart = HAL_GetTick();
 80002e6:	f000 fd4b 	bl	8000d80 <HAL_GetTick>
 80002ea:	6078      	str	r0, [r7, #4]

	/*Select the FLASH: Chip Select low */
	W25Qx_Enable();
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002f2:	4812      	ldr	r0, [pc, #72]	; (800033c <BSP_W25Qx_WriteEnable+0x60>)
 80002f4:	f001 f8f8 	bl	80014e8 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 1, W25Qx_TIMEOUT_VALUE);
 80002f8:	4639      	mov	r1, r7
 80002fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fe:	2201      	movs	r2, #1
 8000300:	480f      	ldr	r0, [pc, #60]	; (8000340 <BSP_W25Qx_WriteEnable+0x64>)
 8000302:	f001 fda7 	bl	8001e54 <HAL_SPI_Transmit>
	/*Deselect the FLASH: Chip Select high */
	W25Qx_Disable();
 8000306:	2201      	movs	r2, #1
 8000308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800030c:	480b      	ldr	r0, [pc, #44]	; (800033c <BSP_W25Qx_WriteEnable+0x60>)
 800030e:	f001 f8eb 	bl	80014e8 <HAL_GPIO_WritePin>

	/* Wait the end of Flash writing */
	while (BSP_W25Qx_GetStatus() == W25Qx_BUSY)
 8000312:	bf00      	nop
 8000314:	f7ff ffb2 	bl	800027c <BSP_W25Qx_GetStatus>
 8000318:	4603      	mov	r3, r0
 800031a:	2b02      	cmp	r3, #2
 800031c:	d0fa      	beq.n	8000314 <BSP_W25Qx_WriteEnable+0x38>
		;

	/* Check for the Timeout */
	if ((HAL_GetTick() - tickstart) > W25Qx_TIMEOUT_VALUE) {
 800031e:	f000 fd2f 	bl	8000d80 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800032c:	d901      	bls.n	8000332 <BSP_W25Qx_WriteEnable+0x56>
		return W25Qx_TIMEOUT;
 800032e:	2303      	movs	r3, #3
 8000330:	e000      	b.n	8000334 <BSP_W25Qx_WriteEnable+0x58>
	}

	return W25Qx_OK;
 8000332:	2300      	movs	r3, #0
}
 8000334:	4618      	mov	r0, r3
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40010c00 	.word	0x40010c00
 8000340:	20000308 	.word	0x20000308

08000344 <BSP_W25Qx_Read_ID>:
/**
 * @brief  Read Manufacture/Device ID.
 * @param  return value address
 * @retval None
 */
void BSP_W25Qx_Read_ID(uint8_t *ID) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b084      	sub	sp, #16
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4] = { READ_ID_CMD, 0x00, 0x00, 0x00 };
 800034c:	2390      	movs	r3, #144	; 0x90
 800034e:	60fb      	str	r3, [r7, #12]

	W25Qx_Enable();
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000356:	480e      	ldr	r0, [pc, #56]	; (8000390 <BSP_W25Qx_Read_ID+0x4c>)
 8000358:	f001 f8c6 	bl	80014e8 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25Qx_TIMEOUT_VALUE);
 800035c:	f107 010c 	add.w	r1, r7, #12
 8000360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000364:	2204      	movs	r2, #4
 8000366:	480b      	ldr	r0, [pc, #44]	; (8000394 <BSP_W25Qx_Read_ID+0x50>)
 8000368:	f001 fd74 	bl	8001e54 <HAL_SPI_Transmit>
	/* Reception of the data */
	HAL_SPI_Receive(&hspi2, ID, 2, W25Qx_TIMEOUT_VALUE);
 800036c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000370:	2202      	movs	r2, #2
 8000372:	6879      	ldr	r1, [r7, #4]
 8000374:	4807      	ldr	r0, [pc, #28]	; (8000394 <BSP_W25Qx_Read_ID+0x50>)
 8000376:	f001 fea9 	bl	80020cc <HAL_SPI_Receive>
	W25Qx_Disable();
 800037a:	2201      	movs	r2, #1
 800037c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000380:	4803      	ldr	r0, [pc, #12]	; (8000390 <BSP_W25Qx_Read_ID+0x4c>)
 8000382:	f001 f8b1 	bl	80014e8 <HAL_GPIO_WritePin>

}
 8000386:	bf00      	nop
 8000388:	3710      	adds	r7, #16
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	40010c00 	.word	0x40010c00
 8000394:	20000308 	.word	0x20000308

08000398 <BSP_W25Qx_Read>:
 * @param  pData: Pointer to data to be read
 * @param  ReadAddr: Read start address
 * @param  Size: Size of data to read
 * @retval QSPI memory status
 */
uint8_t BSP_W25Qx_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	607a      	str	r2, [r7, #4]
	uint8_t cmd[4];

	/* Configure the command */
	cmd[0] = READ_CMD;
 80003a4:	2303      	movs	r3, #3
 80003a6:	753b      	strb	r3, [r7, #20]
	cmd[1] = (uint8_t) (ReadAddr >> 16);
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	0c1b      	lsrs	r3, r3, #16
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	757b      	strb	r3, [r7, #21]
	cmd[2] = (uint8_t) (ReadAddr >> 8);
 80003b0:	68bb      	ldr	r3, [r7, #8]
 80003b2:	0a1b      	lsrs	r3, r3, #8
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	75bb      	strb	r3, [r7, #22]
	cmd[3] = (uint8_t) (ReadAddr);
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	75fb      	strb	r3, [r7, #23]

	W25Qx_Enable();
 80003be:	2200      	movs	r2, #0
 80003c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003c4:	4811      	ldr	r0, [pc, #68]	; (800040c <BSP_W25Qx_Read+0x74>)
 80003c6:	f001 f88f 	bl	80014e8 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25Qx_TIMEOUT_VALUE);
 80003ca:	f107 0114 	add.w	r1, r7, #20
 80003ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003d2:	2204      	movs	r2, #4
 80003d4:	480e      	ldr	r0, [pc, #56]	; (8000410 <BSP_W25Qx_Read+0x78>)
 80003d6:	f001 fd3d 	bl	8001e54 <HAL_SPI_Transmit>
	/* Reception of the data */
	if (HAL_SPI_Receive(&hspi2, pData, Size, W25Qx_TIMEOUT_VALUE) != HAL_OK) {
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	b29a      	uxth	r2, r3
 80003de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003e2:	68f9      	ldr	r1, [r7, #12]
 80003e4:	480a      	ldr	r0, [pc, #40]	; (8000410 <BSP_W25Qx_Read+0x78>)
 80003e6:	f001 fe71 	bl	80020cc <HAL_SPI_Receive>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <BSP_W25Qx_Read+0x5c>
		return W25Qx_ERROR;
 80003f0:	2301      	movs	r3, #1
 80003f2:	e006      	b.n	8000402 <BSP_W25Qx_Read+0x6a>
	}
	W25Qx_Disable();
 80003f4:	2201      	movs	r2, #1
 80003f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003fa:	4804      	ldr	r0, [pc, #16]	; (800040c <BSP_W25Qx_Read+0x74>)
 80003fc:	f001 f874 	bl	80014e8 <HAL_GPIO_WritePin>
	return W25Qx_OK;
 8000400:	2300      	movs	r3, #0
}
 8000402:	4618      	mov	r0, r3
 8000404:	3718      	adds	r7, #24
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40010c00 	.word	0x40010c00
 8000410:	20000308 	.word	0x20000308

08000414 <BSP_W25Qx_Write>:
 * @param  pData: Pointer to data to be written
 * @param  WriteAddr: Write start address
 * @param  Size: Size of data to write,No more than 256byte.
 * @retval QSPI memory status
 */
uint8_t BSP_W25Qx_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000414:	b580      	push	{r7, lr}
 8000416:	b08a      	sub	sp, #40	; 0x28
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
	uint8_t cmd[4];
	uint32_t end_addr, current_size, current_addr;
	uint32_t tickstart = HAL_GetTick();
 8000420:	f000 fcae 	bl	8000d80 <HAL_GetTick>
 8000424:	61f8      	str	r0, [r7, #28]

	/* Calculation of the size between the write address and the end of the page */
	current_addr = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	623b      	str	r3, [r7, #32]

	while (current_addr <= WriteAddr) {
 800042a:	e003      	b.n	8000434 <BSP_W25Qx_Write+0x20>
		current_addr += W25Q128FV_PAGE_SIZE;
 800042c:	6a3b      	ldr	r3, [r7, #32]
 800042e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000432:	623b      	str	r3, [r7, #32]
	while (current_addr <= WriteAddr) {
 8000434:	6a3a      	ldr	r2, [r7, #32]
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	429a      	cmp	r2, r3
 800043a:	d9f7      	bls.n	800042c <BSP_W25Qx_Write+0x18>
	}
	current_size = current_addr - WriteAddr;
 800043c:	6a3a      	ldr	r2, [r7, #32]
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	1ad3      	subs	r3, r2, r3
 8000442:	627b      	str	r3, [r7, #36]	; 0x24

	/* Check if the size of the data is less than the remaining place in the page */
	if (current_size > Size) {
 8000444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	429a      	cmp	r2, r3
 800044a:	d901      	bls.n	8000450 <BSP_W25Qx_Write+0x3c>
		current_size = Size;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Initialize the adress variables */
	current_addr = WriteAddr;
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	623b      	str	r3, [r7, #32]
	end_addr = WriteAddr + Size;
 8000454:	68ba      	ldr	r2, [r7, #8]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4413      	add	r3, r2
 800045a:	61bb      	str	r3, [r7, #24]

	/* Perform the write page by page */
	do {
		/* Configure the command */
		cmd[0] = PAGE_PROG_CMD;
 800045c:	2302      	movs	r3, #2
 800045e:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t) (current_addr >> 16);
 8000460:	6a3b      	ldr	r3, [r7, #32]
 8000462:	0c1b      	lsrs	r3, r3, #16
 8000464:	b2db      	uxtb	r3, r3
 8000466:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t) (current_addr >> 8);
 8000468:	6a3b      	ldr	r3, [r7, #32]
 800046a:	0a1b      	lsrs	r3, r3, #8
 800046c:	b2db      	uxtb	r3, r3
 800046e:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t) (current_addr);
 8000470:	6a3b      	ldr	r3, [r7, #32]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	75fb      	strb	r3, [r7, #23]

		/* Enable write operations */
		BSP_W25Qx_WriteEnable();
 8000476:	f7ff ff31 	bl	80002dc <BSP_W25Qx_WriteEnable>

		W25Qx_Enable();
 800047a:	2200      	movs	r2, #0
 800047c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000480:	4828      	ldr	r0, [pc, #160]	; (8000524 <BSP_W25Qx_Write+0x110>)
 8000482:	f001 f831 	bl	80014e8 <HAL_GPIO_WritePin>
		/* Send the command */
		if (HAL_SPI_Transmit(&hspi2, cmd, 4, W25Qx_TIMEOUT_VALUE) != HAL_OK) {
 8000486:	f107 0114 	add.w	r1, r7, #20
 800048a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800048e:	2204      	movs	r2, #4
 8000490:	4825      	ldr	r0, [pc, #148]	; (8000528 <BSP_W25Qx_Write+0x114>)
 8000492:	f001 fcdf 	bl	8001e54 <HAL_SPI_Transmit>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <BSP_W25Qx_Write+0x8c>
			return W25Qx_ERROR;
 800049c:	2301      	movs	r3, #1
 800049e:	e03c      	b.n	800051a <BSP_W25Qx_Write+0x106>
		}

		/* Transmission of the data */
		if (HAL_SPI_Transmit(&hspi2, pData, current_size, W25Qx_TIMEOUT_VALUE)
 80004a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004a8:	68f9      	ldr	r1, [r7, #12]
 80004aa:	481f      	ldr	r0, [pc, #124]	; (8000528 <BSP_W25Qx_Write+0x114>)
 80004ac:	f001 fcd2 	bl	8001e54 <HAL_SPI_Transmit>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <BSP_W25Qx_Write+0xa6>
				!= HAL_OK) {
			return W25Qx_ERROR;
 80004b6:	2301      	movs	r3, #1
 80004b8:	e02f      	b.n	800051a <BSP_W25Qx_Write+0x106>
		}
		W25Qx_Disable();
 80004ba:	2201      	movs	r2, #1
 80004bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c0:	4818      	ldr	r0, [pc, #96]	; (8000524 <BSP_W25Qx_Write+0x110>)
 80004c2:	f001 f811 	bl	80014e8 <HAL_GPIO_WritePin>
		/* Wait the end of Flash writing */
		while (BSP_W25Qx_GetStatus() == W25Qx_BUSY)
 80004c6:	bf00      	nop
 80004c8:	f7ff fed8 	bl	800027c <BSP_W25Qx_GetStatus>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b02      	cmp	r3, #2
 80004d0:	d0fa      	beq.n	80004c8 <BSP_W25Qx_Write+0xb4>
			;

		/* Check for the Timeout */
		if ((HAL_GetTick() - tickstart) > W25Qx_TIMEOUT_VALUE) {
 80004d2:	f000 fc55 	bl	8000d80 <HAL_GetTick>
 80004d6:	4602      	mov	r2, r0
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	1ad3      	subs	r3, r2, r3
 80004dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004e0:	d901      	bls.n	80004e6 <BSP_W25Qx_Write+0xd2>
			return W25Qx_TIMEOUT;
 80004e2:	2303      	movs	r3, #3
 80004e4:	e019      	b.n	800051a <BSP_W25Qx_Write+0x106>
		}

		/* Update the address and size variables for next page programming */
		current_addr += current_size;
 80004e6:	6a3a      	ldr	r2, [r7, #32]
 80004e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ea:	4413      	add	r3, r2
 80004ec:	623b      	str	r3, [r7, #32]
		pData += current_size;
 80004ee:	68fa      	ldr	r2, [r7, #12]
 80004f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004f2:	4413      	add	r3, r2
 80004f4:	60fb      	str	r3, [r7, #12]
		current_size =
				((current_addr + W25Q128FV_PAGE_SIZE) > end_addr) ?
 80004f6:	6a3b      	ldr	r3, [r7, #32]
 80004f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
						(end_addr - current_addr) : W25Q128FV_PAGE_SIZE;
 80004fc:	69ba      	ldr	r2, [r7, #24]
 80004fe:	429a      	cmp	r2, r3
 8000500:	d203      	bcs.n	800050a <BSP_W25Qx_Write+0xf6>
 8000502:	69ba      	ldr	r2, [r7, #24]
 8000504:	6a3b      	ldr	r3, [r7, #32]
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	e001      	b.n	800050e <BSP_W25Qx_Write+0xfa>
 800050a:	f44f 7380 	mov.w	r3, #256	; 0x100
		current_size =
 800050e:	627b      	str	r3, [r7, #36]	; 0x24
	} while (current_addr < end_addr);
 8000510:	6a3a      	ldr	r2, [r7, #32]
 8000512:	69bb      	ldr	r3, [r7, #24]
 8000514:	429a      	cmp	r2, r3
 8000516:	d3a1      	bcc.n	800045c <BSP_W25Qx_Write+0x48>

	return W25Qx_OK;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	3728      	adds	r7, #40	; 0x28
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40010c00 	.word	0x40010c00
 8000528:	20000308 	.word	0x20000308

0800052c <BSP_W25Qx_Erase_Block>:
/**
 * @brief  Erases the specified block of the QSPI memory.
 * @param  BlockAddress: Block address to erase
 * @retval QSPI memory status
 */
uint8_t BSP_W25Qx_Erase_Block(uint32_t Address) {
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	uint8_t cmd[4];
	uint32_t tickstart = HAL_GetTick();
 8000534:	f000 fc24 	bl	8000d80 <HAL_GetTick>
 8000538:	60f8      	str	r0, [r7, #12]
	cmd[0] = SECTOR_ERASE_CMD;
 800053a:	2320      	movs	r3, #32
 800053c:	723b      	strb	r3, [r7, #8]
	cmd[1] = (uint8_t) (Address >> 16);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	0c1b      	lsrs	r3, r3, #16
 8000542:	b2db      	uxtb	r3, r3
 8000544:	727b      	strb	r3, [r7, #9]
	cmd[2] = (uint8_t) (Address >> 8);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	b2db      	uxtb	r3, r3
 800054c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (Address);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	72fb      	strb	r3, [r7, #11]

	/* Enable write operations */
	BSP_W25Qx_WriteEnable();
 8000554:	f7ff fec2 	bl	80002dc <BSP_W25Qx_WriteEnable>

	/*Select the FLASH: Chip Select low */
	W25Qx_Enable();
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800055e:	4813      	ldr	r0, [pc, #76]	; (80005ac <BSP_W25Qx_Erase_Block+0x80>)
 8000560:	f000 ffc2 	bl	80014e8 <HAL_GPIO_WritePin>
	/* Send the read ID command */
	HAL_SPI_Transmit(&hspi2, cmd, 4, W25Qx_TIMEOUT_VALUE);
 8000564:	f107 0108 	add.w	r1, r7, #8
 8000568:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056c:	2204      	movs	r2, #4
 800056e:	4810      	ldr	r0, [pc, #64]	; (80005b0 <BSP_W25Qx_Erase_Block+0x84>)
 8000570:	f001 fc70 	bl	8001e54 <HAL_SPI_Transmit>
	/*Deselect the FLASH: Chip Select high */
	W25Qx_Disable();
 8000574:	2201      	movs	r2, #1
 8000576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800057a:	480c      	ldr	r0, [pc, #48]	; (80005ac <BSP_W25Qx_Erase_Block+0x80>)
 800057c:	f000 ffb4 	bl	80014e8 <HAL_GPIO_WritePin>

	/* Wait the end of Flash writing */
	while (BSP_W25Qx_GetStatus() == W25Qx_BUSY)
 8000580:	bf00      	nop
 8000582:	f7ff fe7b 	bl	800027c <BSP_W25Qx_GetStatus>
 8000586:	4603      	mov	r3, r0
 8000588:	2b02      	cmp	r3, #2
 800058a:	d0fa      	beq.n	8000582 <BSP_W25Qx_Erase_Block+0x56>
		;

	/* Check for the Timeout */
	if ((HAL_GetTick() - tickstart) > W25Q128FV_SECTOR_ERASE_MAX_TIME) {
 800058c:	f000 fbf8 	bl	8000d80 <HAL_GetTick>
 8000590:	4602      	mov	r2, r0
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	1ad3      	subs	r3, r2, r3
 8000596:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800059a:	4293      	cmp	r3, r2
 800059c:	d901      	bls.n	80005a2 <BSP_W25Qx_Erase_Block+0x76>
		return W25Qx_TIMEOUT;
 800059e:	2303      	movs	r3, #3
 80005a0:	e000      	b.n	80005a4 <BSP_W25Qx_Erase_Block+0x78>
	}

	return W25Qx_OK;
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3710      	adds	r7, #16
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40010c00 	.word	0x40010c00
 80005b0:	20000308 	.word	0x20000308

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c8:	4b18      	ldr	r3, [pc, #96]	; (800062c <MX_GPIO_Init+0x78>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a17      	ldr	r2, [pc, #92]	; (800062c <MX_GPIO_Init+0x78>)
 80005ce:	f043 0308 	orr.w	r3, r3, #8
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b15      	ldr	r3, [pc, #84]	; (800062c <MX_GPIO_Init+0x78>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0308 	and.w	r3, r3, #8
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_GPIO_Init+0x78>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a11      	ldr	r2, [pc, #68]	; (800062c <MX_GPIO_Init+0x78>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_GPIO_Init+0x78>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	603b      	str	r3, [r7, #0]
 80005f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005fe:	480c      	ldr	r0, [pc, #48]	; (8000630 <MX_GPIO_Init+0x7c>)
 8000600:	f000 ff72 	bl	80014e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2302      	movs	r3, #2
 8000614:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	4619      	mov	r1, r3
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <MX_GPIO_Init+0x7c>)
 800061e:	f000 fdcf 	bl	80011c0 <HAL_GPIO_Init>

}
 8000622:	bf00      	nop
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40021000 	.word	0x40021000
 8000630:	40010c00 	.word	0x40010c00

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fb4a 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f8a2 	bl	8000784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f7ff ffb8 	bl	80005b4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000644:	f000 f902 	bl	800084c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000648:	f000 fa9e 	bl	8000b88 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n SPI-W25Qxxx Example \r\n\r\n");
 800064c:	483f      	ldr	r0, [pc, #252]	; (800074c <main+0x118>)
 800064e:	f002 fdc3 	bl	80031d8 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  BSP_W25Qx_Init();
 8000652:	f7ff fde7 	bl	8000224 <BSP_W25Qx_Init>
	  BSP_W25Qx_Read_ID(ID);
 8000656:	483e      	ldr	r0, [pc, #248]	; (8000750 <main+0x11c>)
 8000658:	f7ff fe74 	bl	8000344 <BSP_W25Qx_Read_ID>

	  printf("W25Qxxx ID is:0x%02x \r\n\r\n", ID[0], ID[1]);
 800065c:	4b3c      	ldr	r3, [pc, #240]	; (8000750 <main+0x11c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	4b3b      	ldr	r3, [pc, #236]	; (8000750 <main+0x11c>)
 8000664:	785b      	ldrb	r3, [r3, #1]
 8000666:	461a      	mov	r2, r3
 8000668:	483a      	ldr	r0, [pc, #232]	; (8000754 <main+0x120>)
 800066a:	f002 fd2f 	bl	80030cc <iprintf>

	  if(BSP_W25Qx_Erase_Block(0) == W25Qx_OK)
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff ff5c 	bl	800052c <BSP_W25Qx_Erase_Block>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d103      	bne.n	8000682 <main+0x4e>
	  {
		  printf("SPI Erase Block ok\r\n");
 800067a:	4837      	ldr	r0, [pc, #220]	; (8000758 <main+0x124>)
 800067c:	f002 fdac 	bl	80031d8 <puts>
 8000680:	e001      	b.n	8000686 <main+0x52>
	  }else{
		  Error_Handler();
 8000682:	f000 f8dd 	bl	8000840 <Error_Handler>
	  }

	  for(i = 0; i < 0x100; i++)
 8000686:	4b35      	ldr	r3, [pc, #212]	; (800075c <main+0x128>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	e010      	b.n	80006b0 <main+0x7c>
	  {
		  wData[i] = i;
 800068e:	4b33      	ldr	r3, [pc, #204]	; (800075c <main+0x128>)
 8000690:	681a      	ldr	r2, [r3, #0]
 8000692:	4b32      	ldr	r3, [pc, #200]	; (800075c <main+0x128>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	b2d1      	uxtb	r1, r2
 8000698:	4a31      	ldr	r2, [pc, #196]	; (8000760 <main+0x12c>)
 800069a:	54d1      	strb	r1, [r2, r3]
		  rData[i] = 0;
 800069c:	4b2f      	ldr	r3, [pc, #188]	; (800075c <main+0x128>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a30      	ldr	r2, [pc, #192]	; (8000764 <main+0x130>)
 80006a2:	2100      	movs	r1, #0
 80006a4:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; i < 0x100; i++)
 80006a6:	4b2d      	ldr	r3, [pc, #180]	; (800075c <main+0x128>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	4a2b      	ldr	r2, [pc, #172]	; (800075c <main+0x128>)
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b2a      	ldr	r3, [pc, #168]	; (800075c <main+0x128>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2bff      	cmp	r3, #255	; 0xff
 80006b6:	d9ea      	bls.n	800068e <main+0x5a>
	  }
	  if(BSP_W25Qx_Write(wData, 0x00, 0x100) == W25Qx_OK)
 80006b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006bc:	2100      	movs	r1, #0
 80006be:	4828      	ldr	r0, [pc, #160]	; (8000760 <main+0x12c>)
 80006c0:	f7ff fea8 	bl	8000414 <BSP_W25Qx_Write>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d103      	bne.n	80006d2 <main+0x9e>
	  {
		  printf("SPI Write ok\r\n");
 80006ca:	4827      	ldr	r0, [pc, #156]	; (8000768 <main+0x134>)
 80006cc:	f002 fd84 	bl	80031d8 <puts>
 80006d0:	e001      	b.n	80006d6 <main+0xa2>
	  }else{
		  Error_Handler();
 80006d2:	f000 f8b5 	bl	8000840 <Error_Handler>
	  }

	  if(BSP_W25Qx_Read(rData, 0x00, 0x100) == W25Qx_OK)
 80006d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006da:	2100      	movs	r1, #0
 80006dc:	4821      	ldr	r0, [pc, #132]	; (8000764 <main+0x130>)
 80006de:	f7ff fe5b 	bl	8000398 <BSP_W25Qx_Read>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d103      	bne.n	80006f0 <main+0xbc>
	  {
		  printf("SPI Read ok\r\n\r\n");
 80006e8:	4820      	ldr	r0, [pc, #128]	; (800076c <main+0x138>)
 80006ea:	f002 fd75 	bl	80031d8 <puts>
 80006ee:	e001      	b.n	80006f4 <main+0xc0>
	  }else{
		  Error_Handler();
 80006f0:	f000 f8a6 	bl	8000840 <Error_Handler>
	  }
	  printf("SPI Read Data:\r\n");
 80006f4:	481e      	ldr	r0, [pc, #120]	; (8000770 <main+0x13c>)
 80006f6:	f002 fd6f 	bl	80031d8 <puts>
	  for(i = 0; i < 0x100; i++)
 80006fa:	4b18      	ldr	r3, [pc, #96]	; (800075c <main+0x128>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	e00c      	b.n	800071c <main+0xe8>
	  {
		  printf("0x%02x ", rData[i]);
 8000702:	4b16      	ldr	r3, [pc, #88]	; (800075c <main+0x128>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a17      	ldr	r2, [pc, #92]	; (8000764 <main+0x130>)
 8000708:	5cd3      	ldrb	r3, [r2, r3]
 800070a:	4619      	mov	r1, r3
 800070c:	4819      	ldr	r0, [pc, #100]	; (8000774 <main+0x140>)
 800070e:	f002 fcdd 	bl	80030cc <iprintf>
	  for(i = 0; i < 0x100; i++)
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <main+0x128>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	4a10      	ldr	r2, [pc, #64]	; (800075c <main+0x128>)
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <main+0x128>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2bff      	cmp	r3, #255	; 0xff
 8000722:	d9ee      	bls.n	8000702 <main+0xce>
	  }
  	  printf("\r\n\r\n");
 8000724:	4814      	ldr	r0, [pc, #80]	; (8000778 <main+0x144>)
 8000726:	f002 fd57 	bl	80031d8 <puts>

  	  if(memcmp(wData, rData, 0x100) == 0)
 800072a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800072e:	490d      	ldr	r1, [pc, #52]	; (8000764 <main+0x130>)
 8000730:	480b      	ldr	r0, [pc, #44]	; (8000760 <main+0x12c>)
 8000732:	f002 fcb5 	bl	80030a0 <memcmp>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d103      	bne.n	8000744 <main+0x110>
  	  {
  		  printf("W25Q128FV SPI Test OK\r\n");
 800073c:	480f      	ldr	r0, [pc, #60]	; (800077c <main+0x148>)
 800073e:	f002 fd4b 	bl	80031d8 <puts>
 8000742:	e786      	b.n	8000652 <main+0x1e>
  	  }else{
  		  printf("W25Q128FV SPI Test False\r\n");
 8000744:	480e      	ldr	r0, [pc, #56]	; (8000780 <main+0x14c>)
 8000746:	f002 fd47 	bl	80031d8 <puts>
	  BSP_W25Qx_Init();
 800074a:	e782      	b.n	8000652 <main+0x1e>
 800074c:	08004090 	.word	0x08004090
 8000750:	20000098 	.word	0x20000098
 8000754:	080040ac 	.word	0x080040ac
 8000758:	080040c8 	.word	0x080040c8
 800075c:	2000009c 	.word	0x2000009c
 8000760:	200000a0 	.word	0x200000a0
 8000764:	200001a0 	.word	0x200001a0
 8000768:	080040dc 	.word	0x080040dc
 800076c:	080040ec 	.word	0x080040ec
 8000770:	080040fc 	.word	0x080040fc
 8000774:	0800410c 	.word	0x0800410c
 8000778:	08004114 	.word	0x08004114
 800077c:	08004118 	.word	0x08004118
 8000780:	08004130 	.word	0x08004130

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b090      	sub	sp, #64	; 0x40
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0318 	add.w	r3, r7, #24
 800078e:	2228      	movs	r2, #40	; 0x28
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fc92 	bl	80030bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007c2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c8:	f107 0318 	add.w	r3, r7, #24
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 fea3 	bl	8001518 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007d8:	f000 f832 	bl	8000840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e0:	2302      	movs	r3, #2
 80007e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	2102      	movs	r1, #2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 f90e 	bl	8001a18 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000802:	f000 f81d 	bl	8000840 <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3740      	adds	r7, #64	; 0x40
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <__io_putchar>:
//定义_sys_exit()以避免使用半主机模式
void _sys_exit(int x) {
  x = x;
}
//重定义fputc函数
PUTCHAR_PROTOTYPE {
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  // 具体哪个串口可以更改huart2为其它串口
  // HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1 , 0xffff);
  while ((USART1->SR & 0X40) == 0) {
 8000818:	bf00      	nop
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <__io_putchar+0x2c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <__io_putchar+0xa>
  }; //循环发送,直到发送完毕
  USART1->DR = (uint8_t) ch;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <__io_putchar+0x2c>)
 800082c:	605a      	str	r2, [r3, #4]

//  while ((USART2->SR & 0X40) == 0) {
//  }; //循环发送,直到发送完毕
//  USART2->DR = (uint8_t) ch;

  return ch;
 800082e:	687b      	ldr	r3, [r7, #4]
}
 8000830:	4618      	mov	r0, r3
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40013800 	.word	0x40013800

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <MX_SPI2_Init+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800085c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_SPI2_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_SPI2_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000898:	220a      	movs	r2, #10
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_SPI2_Init+0x64>)
 800089e:	f001 fa55 	bl	8001d4c <HAL_SPI_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008a8:	f7ff ffca 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000308 	.word	0x20000308
 80008b4:	40003800 	.word	0x40003800

080008b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a20      	ldr	r2, [pc, #128]	; (8000954 <HAL_SPI_MspInit+0x9c>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d139      	bne.n	800094c <HAL_SPI_MspInit+0x94>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <HAL_SPI_MspInit+0xa0>)
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	4a1e      	ldr	r2, [pc, #120]	; (8000958 <HAL_SPI_MspInit+0xa0>)
 80008de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008e2:	61d3      	str	r3, [r2, #28]
 80008e4:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <HAL_SPI_MspInit+0xa0>)
 80008e6:	69db      	ldr	r3, [r3, #28]
 80008e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <HAL_SPI_MspInit+0xa0>)
 80008f2:	699b      	ldr	r3, [r3, #24]
 80008f4:	4a18      	ldr	r2, [pc, #96]	; (8000958 <HAL_SPI_MspInit+0xa0>)
 80008f6:	f043 0308 	orr.w	r3, r3, #8
 80008fa:	6193      	str	r3, [r2, #24]
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <HAL_SPI_MspInit+0xa0>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0308 	and.w	r3, r3, #8
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000908:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800090c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090e:	2302      	movs	r3, #2
 8000910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 0310 	add.w	r3, r7, #16
 800091a:	4619      	mov	r1, r3
 800091c:	480f      	ldr	r0, [pc, #60]	; (800095c <HAL_SPI_MspInit+0xa4>)
 800091e:	f000 fc4f 	bl	80011c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000922:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000926:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	4619      	mov	r1, r3
 8000936:	4809      	ldr	r0, [pc, #36]	; (800095c <HAL_SPI_MspInit+0xa4>)
 8000938:	f000 fc42 	bl	80011c0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2024      	movs	r0, #36	; 0x24
 8000942:	f000 fafe 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000946:	2024      	movs	r0, #36	; 0x24
 8000948:	f000 fb17 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800094c:	bf00      	nop
 800094e:	3720      	adds	r7, #32
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40003800 	.word	0x40003800
 8000958:	40021000 	.word	0x40021000
 800095c:	40010c00 	.word	0x40010c00

08000960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_MspInit+0x5c>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	4a14      	ldr	r2, [pc, #80]	; (80009bc <HAL_MspInit+0x5c>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6193      	str	r3, [r2, #24]
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_MspInit+0x5c>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_MspInit+0x5c>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <HAL_MspInit+0x5c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	61d3      	str	r3, [r2, #28]
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_MspInit+0x5c>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_MspInit+0x60>)
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_MspInit+0x60>)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010000 	.word	0x40010000

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <NMI_Handler+0x4>

080009ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <HardFault_Handler+0x4>

080009d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <MemManage_Handler+0x4>

080009d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <BusFault_Handler+0x4>

080009dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler+0x4>

080009e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr

08000a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0a:	f000 f9a7 	bl	8000d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000a18:	4802      	ldr	r0, [pc, #8]	; (8000a24 <SPI2_IRQHandler+0x10>)
 8000a1a:	f001 fe0b 	bl	8002634 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000308 	.word	0x20000308

08000a28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <USART1_IRQHandler+0x10>)
 8000a2e:	f002 f84b 	bl	8002ac8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000360 	.word	0x20000360

08000a3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e00a      	b.n	8000a64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a4e:	f3af 8000 	nop.w
 8000a52:	4601      	mov	r1, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	b2ca      	uxtb	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf0      	blt.n	8000a4e <_read+0x12>
	}

return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	e009      	b.n	8000a9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff febd 	bl	8000810 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf1      	blt.n	8000a88 <_write+0x12>
	}
	return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <_close>:

int _close(int file)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ad4:	605a      	str	r2, [r3, #4]
	return 0;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr

08000ae2 <_isatty>:

int _isatty(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
	return 1;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b085      	sub	sp, #20
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
	return 0;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	; (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f002 fa84 	bl	800304c <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20010000 	.word	0x20010000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	2000008c 	.word	0x2000008c
 8000b78:	200003b8 	.word	0x200003b8

08000b7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <MX_USART1_UART_Init+0x50>)
 8000b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bae:	220c      	movs	r2, #12
 8000bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	f001 ff34 	bl	8002a2c <HAL_UART_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bca:	f7ff fe39 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000360 	.word	0x20000360
 8000bd8:	40013800 	.word	0x40013800

08000bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a20      	ldr	r2, [pc, #128]	; (8000c78 <HAL_UART_MspInit+0x9c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d139      	bne.n	8000c70 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <HAL_UART_MspInit+0xa0>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a1e      	ldr	r2, [pc, #120]	; (8000c7c <HAL_UART_MspInit+0xa0>)
 8000c02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_UART_MspInit+0xa0>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <HAL_UART_MspInit+0xa0>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a18      	ldr	r2, [pc, #96]	; (8000c7c <HAL_UART_MspInit+0xa0>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <HAL_UART_MspInit+0xa0>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c32:	2302      	movs	r3, #2
 8000c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0310 	add.w	r3, r7, #16
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480f      	ldr	r0, [pc, #60]	; (8000c80 <HAL_UART_MspInit+0xa4>)
 8000c42:	f000 fabd 	bl	80011c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4809      	ldr	r0, [pc, #36]	; (8000c80 <HAL_UART_MspInit+0xa4>)
 8000c5c:	f000 fab0 	bl	80011c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	2025      	movs	r0, #37	; 0x25
 8000c66:	f000 f96c 	bl	8000f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6a:	2025      	movs	r0, #37	; 0x25
 8000c6c:	f000 f985 	bl	8000f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40013800 	.word	0x40013800
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40010800 	.word	0x40010800

08000c84 <Reset_Handler>:
 8000c84:	2100      	movs	r1, #0
 8000c86:	e003      	b.n	8000c90 <LoopCopyDataInit>

08000c88 <CopyDataInit>:
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x14>)
 8000c8a:	585b      	ldr	r3, [r3, r1]
 8000c8c:	5043      	str	r3, [r0, r1]
 8000c8e:	3104      	adds	r1, #4

08000c90 <LoopCopyDataInit>:
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <LoopFillZerobss+0x18>)
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x1c>)
 8000c94:	1842      	adds	r2, r0, r1
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3f6      	bcc.n	8000c88 <CopyDataInit>
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <LoopFillZerobss+0x20>)
 8000c9c:	e002      	b.n	8000ca4 <LoopFillZerobss>

08000c9e <FillZerobss>:
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f842 3b04 	str.w	r3, [r2], #4

08000ca4 <LoopFillZerobss>:
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <LoopFillZerobss+0x24>)
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d3f9      	bcc.n	8000c9e <FillZerobss>
 8000caa:	f7ff ff67 	bl	8000b7c <SystemInit>
 8000cae:	f002 f9d3 	bl	8003058 <__libc_init_array>
 8000cb2:	f7ff fcbf 	bl	8000634 <main>
 8000cb6:	4770      	bx	lr
 8000cb8:	08004214 	.word	0x08004214
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000070 	.word	0x20000070
 8000cc4:	20000070 	.word	0x20000070
 8000cc8:	200003b4 	.word	0x200003b4

08000ccc <ADC1_2_IRQHandler>:
 8000ccc:	e7fe      	b.n	8000ccc <ADC1_2_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x28>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x28>)
 8000cda:	f043 0310 	orr.w	r3, r3, #16
 8000cde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f923 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f000 f808 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fe38 	bl	8000960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40022000 	.word	0x40022000

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x54>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_InitTick+0x58>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f93b 	bl	8000f96 <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00e      	b.n	8000d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d80a      	bhi.n	8000d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295
 8000d38:	f000 f903 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d3c:	4a06      	ldr	r2, [pc, #24]	; (8000d58 <HAL_InitTick+0x5c>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e000      	b.n	8000d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000000 	.word	0x20000000
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000004 	.word	0x20000004

08000d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_IncTick+0x1c>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <HAL_IncTick+0x20>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a03      	ldr	r2, [pc, #12]	; (8000d7c <HAL_IncTick+0x20>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	200003a0 	.word	0x200003a0

08000d80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b02      	ldr	r3, [pc, #8]	; (8000d90 <HAL_GetTick+0x10>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	200003a0 	.word	0x200003a0

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bc80      	pop	{r7}
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4906      	ldr	r1, [pc, #24]	; (8000e2c <__NVIC_EnableIRQ+0x34>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	; (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	; (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	; 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	; 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff90 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff2d 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff42 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff90 	bl	8000e84 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5f 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff35 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffa2 	bl	8000ee8 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d005      	beq.n	8000fd2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2204      	movs	r2, #4
 8000fca:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
 8000fd0:	e0d6      	b.n	8001180 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 020e 	bic.w	r2, r2, #14
 8000fe0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0201 	bic.w	r2, r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b64      	ldr	r3, [pc, #400]	; (800118c <HAL_DMA_Abort_IT+0x1dc>)
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d958      	bls.n	80010b0 <HAL_DMA_Abort_IT+0x100>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a63      	ldr	r2, [pc, #396]	; (8001190 <HAL_DMA_Abort_IT+0x1e0>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d04f      	beq.n	80010a8 <HAL_DMA_Abort_IT+0xf8>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a61      	ldr	r2, [pc, #388]	; (8001194 <HAL_DMA_Abort_IT+0x1e4>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d048      	beq.n	80010a4 <HAL_DMA_Abort_IT+0xf4>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a60      	ldr	r2, [pc, #384]	; (8001198 <HAL_DMA_Abort_IT+0x1e8>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d040      	beq.n	800109e <HAL_DMA_Abort_IT+0xee>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a5e      	ldr	r2, [pc, #376]	; (800119c <HAL_DMA_Abort_IT+0x1ec>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d038      	beq.n	8001098 <HAL_DMA_Abort_IT+0xe8>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a5d      	ldr	r2, [pc, #372]	; (80011a0 <HAL_DMA_Abort_IT+0x1f0>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d030      	beq.n	8001092 <HAL_DMA_Abort_IT+0xe2>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a5b      	ldr	r2, [pc, #364]	; (80011a4 <HAL_DMA_Abort_IT+0x1f4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d028      	beq.n	800108c <HAL_DMA_Abort_IT+0xdc>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a53      	ldr	r2, [pc, #332]	; (800118c <HAL_DMA_Abort_IT+0x1dc>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d020      	beq.n	8001086 <HAL_DMA_Abort_IT+0xd6>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a57      	ldr	r2, [pc, #348]	; (80011a8 <HAL_DMA_Abort_IT+0x1f8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d019      	beq.n	8001082 <HAL_DMA_Abort_IT+0xd2>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a56      	ldr	r2, [pc, #344]	; (80011ac <HAL_DMA_Abort_IT+0x1fc>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d012      	beq.n	800107e <HAL_DMA_Abort_IT+0xce>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a54      	ldr	r2, [pc, #336]	; (80011b0 <HAL_DMA_Abort_IT+0x200>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00a      	beq.n	8001078 <HAL_DMA_Abort_IT+0xc8>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a53      	ldr	r2, [pc, #332]	; (80011b4 <HAL_DMA_Abort_IT+0x204>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d102      	bne.n	8001072 <HAL_DMA_Abort_IT+0xc2>
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	e01b      	b.n	80010aa <HAL_DMA_Abort_IT+0xfa>
 8001072:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001076:	e018      	b.n	80010aa <HAL_DMA_Abort_IT+0xfa>
 8001078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800107c:	e015      	b.n	80010aa <HAL_DMA_Abort_IT+0xfa>
 800107e:	2310      	movs	r3, #16
 8001080:	e013      	b.n	80010aa <HAL_DMA_Abort_IT+0xfa>
 8001082:	2301      	movs	r3, #1
 8001084:	e011      	b.n	80010aa <HAL_DMA_Abort_IT+0xfa>
 8001086:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800108a:	e00e      	b.n	80010aa <HAL_DMA_Abort_IT+0xfa>
 800108c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001090:	e00b      	b.n	80010aa <HAL_DMA_Abort_IT+0xfa>
 8001092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001096:	e008      	b.n	80010aa <HAL_DMA_Abort_IT+0xfa>
 8001098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109c:	e005      	b.n	80010aa <HAL_DMA_Abort_IT+0xfa>
 800109e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a2:	e002      	b.n	80010aa <HAL_DMA_Abort_IT+0xfa>
 80010a4:	2310      	movs	r3, #16
 80010a6:	e000      	b.n	80010aa <HAL_DMA_Abort_IT+0xfa>
 80010a8:	2301      	movs	r3, #1
 80010aa:	4a43      	ldr	r2, [pc, #268]	; (80011b8 <HAL_DMA_Abort_IT+0x208>)
 80010ac:	6053      	str	r3, [r2, #4]
 80010ae:	e057      	b.n	8001160 <HAL_DMA_Abort_IT+0x1b0>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a36      	ldr	r2, [pc, #216]	; (8001190 <HAL_DMA_Abort_IT+0x1e0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d04f      	beq.n	800115a <HAL_DMA_Abort_IT+0x1aa>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a35      	ldr	r2, [pc, #212]	; (8001194 <HAL_DMA_Abort_IT+0x1e4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d048      	beq.n	8001156 <HAL_DMA_Abort_IT+0x1a6>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a33      	ldr	r2, [pc, #204]	; (8001198 <HAL_DMA_Abort_IT+0x1e8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d040      	beq.n	8001150 <HAL_DMA_Abort_IT+0x1a0>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a32      	ldr	r2, [pc, #200]	; (800119c <HAL_DMA_Abort_IT+0x1ec>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d038      	beq.n	800114a <HAL_DMA_Abort_IT+0x19a>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a30      	ldr	r2, [pc, #192]	; (80011a0 <HAL_DMA_Abort_IT+0x1f0>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d030      	beq.n	8001144 <HAL_DMA_Abort_IT+0x194>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a2f      	ldr	r2, [pc, #188]	; (80011a4 <HAL_DMA_Abort_IT+0x1f4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d028      	beq.n	800113e <HAL_DMA_Abort_IT+0x18e>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a26      	ldr	r2, [pc, #152]	; (800118c <HAL_DMA_Abort_IT+0x1dc>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d020      	beq.n	8001138 <HAL_DMA_Abort_IT+0x188>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a2b      	ldr	r2, [pc, #172]	; (80011a8 <HAL_DMA_Abort_IT+0x1f8>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d019      	beq.n	8001134 <HAL_DMA_Abort_IT+0x184>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a29      	ldr	r2, [pc, #164]	; (80011ac <HAL_DMA_Abort_IT+0x1fc>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d012      	beq.n	8001130 <HAL_DMA_Abort_IT+0x180>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a28      	ldr	r2, [pc, #160]	; (80011b0 <HAL_DMA_Abort_IT+0x200>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d00a      	beq.n	800112a <HAL_DMA_Abort_IT+0x17a>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a26      	ldr	r2, [pc, #152]	; (80011b4 <HAL_DMA_Abort_IT+0x204>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d102      	bne.n	8001124 <HAL_DMA_Abort_IT+0x174>
 800111e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001122:	e01b      	b.n	800115c <HAL_DMA_Abort_IT+0x1ac>
 8001124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001128:	e018      	b.n	800115c <HAL_DMA_Abort_IT+0x1ac>
 800112a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112e:	e015      	b.n	800115c <HAL_DMA_Abort_IT+0x1ac>
 8001130:	2310      	movs	r3, #16
 8001132:	e013      	b.n	800115c <HAL_DMA_Abort_IT+0x1ac>
 8001134:	2301      	movs	r3, #1
 8001136:	e011      	b.n	800115c <HAL_DMA_Abort_IT+0x1ac>
 8001138:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800113c:	e00e      	b.n	800115c <HAL_DMA_Abort_IT+0x1ac>
 800113e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001142:	e00b      	b.n	800115c <HAL_DMA_Abort_IT+0x1ac>
 8001144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001148:	e008      	b.n	800115c <HAL_DMA_Abort_IT+0x1ac>
 800114a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114e:	e005      	b.n	800115c <HAL_DMA_Abort_IT+0x1ac>
 8001150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001154:	e002      	b.n	800115c <HAL_DMA_Abort_IT+0x1ac>
 8001156:	2310      	movs	r3, #16
 8001158:	e000      	b.n	800115c <HAL_DMA_Abort_IT+0x1ac>
 800115a:	2301      	movs	r3, #1
 800115c:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_DMA_Abort_IT+0x20c>)
 800115e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	4798      	blx	r3
    } 
  }
  return status;
 8001180:	7bfb      	ldrb	r3, [r7, #15]
}
 8001182:	4618      	mov	r0, r3
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40020080 	.word	0x40020080
 8001190:	40020008 	.word	0x40020008
 8001194:	4002001c 	.word	0x4002001c
 8001198:	40020030 	.word	0x40020030
 800119c:	40020044 	.word	0x40020044
 80011a0:	40020058 	.word	0x40020058
 80011a4:	4002006c 	.word	0x4002006c
 80011a8:	40020408 	.word	0x40020408
 80011ac:	4002041c 	.word	0x4002041c
 80011b0:	40020430 	.word	0x40020430
 80011b4:	40020444 	.word	0x40020444
 80011b8:	40020400 	.word	0x40020400
 80011bc:	40020000 	.word	0x40020000

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b08b      	sub	sp, #44	; 0x2c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d2:	e179      	b.n	80014c8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011d4:	2201      	movs	r2, #1
 80011d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	f040 8168 	bne.w	80014c2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4aa0      	ldr	r2, [pc, #640]	; (8001478 <HAL_GPIO_Init+0x2b8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d05e      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 80011fc:	4a9e      	ldr	r2, [pc, #632]	; (8001478 <HAL_GPIO_Init+0x2b8>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d875      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001202:	4a9e      	ldr	r2, [pc, #632]	; (800147c <HAL_GPIO_Init+0x2bc>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d058      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001208:	4a9c      	ldr	r2, [pc, #624]	; (800147c <HAL_GPIO_Init+0x2bc>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d86f      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800120e:	4a9c      	ldr	r2, [pc, #624]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d052      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001214:	4a9a      	ldr	r2, [pc, #616]	; (8001480 <HAL_GPIO_Init+0x2c0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d869      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800121a:	4a9a      	ldr	r2, [pc, #616]	; (8001484 <HAL_GPIO_Init+0x2c4>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d04c      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 8001220:	4a98      	ldr	r2, [pc, #608]	; (8001484 <HAL_GPIO_Init+0x2c4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d863      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001226:	4a98      	ldr	r2, [pc, #608]	; (8001488 <HAL_GPIO_Init+0x2c8>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d046      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
 800122c:	4a96      	ldr	r2, [pc, #600]	; (8001488 <HAL_GPIO_Init+0x2c8>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d85d      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 8001232:	2b12      	cmp	r3, #18
 8001234:	d82a      	bhi.n	800128c <HAL_GPIO_Init+0xcc>
 8001236:	2b12      	cmp	r3, #18
 8001238:	d859      	bhi.n	80012ee <HAL_GPIO_Init+0x12e>
 800123a:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <HAL_GPIO_Init+0x80>)
 800123c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001240:	080012bb 	.word	0x080012bb
 8001244:	08001295 	.word	0x08001295
 8001248:	080012a7 	.word	0x080012a7
 800124c:	080012e9 	.word	0x080012e9
 8001250:	080012ef 	.word	0x080012ef
 8001254:	080012ef 	.word	0x080012ef
 8001258:	080012ef 	.word	0x080012ef
 800125c:	080012ef 	.word	0x080012ef
 8001260:	080012ef 	.word	0x080012ef
 8001264:	080012ef 	.word	0x080012ef
 8001268:	080012ef 	.word	0x080012ef
 800126c:	080012ef 	.word	0x080012ef
 8001270:	080012ef 	.word	0x080012ef
 8001274:	080012ef 	.word	0x080012ef
 8001278:	080012ef 	.word	0x080012ef
 800127c:	080012ef 	.word	0x080012ef
 8001280:	080012ef 	.word	0x080012ef
 8001284:	0800129d 	.word	0x0800129d
 8001288:	080012b1 	.word	0x080012b1
 800128c:	4a7f      	ldr	r2, [pc, #508]	; (800148c <HAL_GPIO_Init+0x2cc>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d013      	beq.n	80012ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001292:	e02c      	b.n	80012ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	623b      	str	r3, [r7, #32]
          break;
 800129a:	e029      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	3304      	adds	r3, #4
 80012a2:	623b      	str	r3, [r7, #32]
          break;
 80012a4:	e024      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	3308      	adds	r3, #8
 80012ac:	623b      	str	r3, [r7, #32]
          break;
 80012ae:	e01f      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	330c      	adds	r3, #12
 80012b6:	623b      	str	r3, [r7, #32]
          break;
 80012b8:	e01a      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012c2:	2304      	movs	r3, #4
 80012c4:	623b      	str	r3, [r7, #32]
          break;
 80012c6:	e013      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d105      	bne.n	80012dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d0:	2308      	movs	r3, #8
 80012d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69fa      	ldr	r2, [r7, #28]
 80012d8:	611a      	str	r2, [r3, #16]
          break;
 80012da:	e009      	b.n	80012f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012dc:	2308      	movs	r3, #8
 80012de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	615a      	str	r2, [r3, #20]
          break;
 80012e6:	e003      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012e8:	2300      	movs	r3, #0
 80012ea:	623b      	str	r3, [r7, #32]
          break;
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x130>
          break;
 80012ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2bff      	cmp	r3, #255	; 0xff
 80012f4:	d801      	bhi.n	80012fa <HAL_GPIO_Init+0x13a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	e001      	b.n	80012fe <HAL_GPIO_Init+0x13e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	3304      	adds	r3, #4
 80012fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	2bff      	cmp	r3, #255	; 0xff
 8001304:	d802      	bhi.n	800130c <HAL_GPIO_Init+0x14c>
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	e002      	b.n	8001312 <HAL_GPIO_Init+0x152>
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	3b08      	subs	r3, #8
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	210f      	movs	r1, #15
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	fa01 f303 	lsl.w	r3, r1, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	401a      	ands	r2, r3
 8001324:	6a39      	ldr	r1, [r7, #32]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	fa01 f303 	lsl.w	r3, r1, r3
 800132c:	431a      	orrs	r2, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 80c1 	beq.w	80014c2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001340:	4b53      	ldr	r3, [pc, #332]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a52      	ldr	r2, [pc, #328]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b50      	ldr	r3, [pc, #320]	; (8001490 <HAL_GPIO_Init+0x2d0>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001358:	4a4e      	ldr	r2, [pc, #312]	; (8001494 <HAL_GPIO_Init+0x2d4>)
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	220f      	movs	r2, #15
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a46      	ldr	r2, [pc, #280]	; (8001498 <HAL_GPIO_Init+0x2d8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d01f      	beq.n	80013c4 <HAL_GPIO_Init+0x204>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a45      	ldr	r2, [pc, #276]	; (800149c <HAL_GPIO_Init+0x2dc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d019      	beq.n	80013c0 <HAL_GPIO_Init+0x200>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a44      	ldr	r2, [pc, #272]	; (80014a0 <HAL_GPIO_Init+0x2e0>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d013      	beq.n	80013bc <HAL_GPIO_Init+0x1fc>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a43      	ldr	r2, [pc, #268]	; (80014a4 <HAL_GPIO_Init+0x2e4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d00d      	beq.n	80013b8 <HAL_GPIO_Init+0x1f8>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a42      	ldr	r2, [pc, #264]	; (80014a8 <HAL_GPIO_Init+0x2e8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d007      	beq.n	80013b4 <HAL_GPIO_Init+0x1f4>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a41      	ldr	r2, [pc, #260]	; (80014ac <HAL_GPIO_Init+0x2ec>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d101      	bne.n	80013b0 <HAL_GPIO_Init+0x1f0>
 80013ac:	2305      	movs	r3, #5
 80013ae:	e00a      	b.n	80013c6 <HAL_GPIO_Init+0x206>
 80013b0:	2306      	movs	r3, #6
 80013b2:	e008      	b.n	80013c6 <HAL_GPIO_Init+0x206>
 80013b4:	2304      	movs	r3, #4
 80013b6:	e006      	b.n	80013c6 <HAL_GPIO_Init+0x206>
 80013b8:	2303      	movs	r3, #3
 80013ba:	e004      	b.n	80013c6 <HAL_GPIO_Init+0x206>
 80013bc:	2302      	movs	r3, #2
 80013be:	e002      	b.n	80013c6 <HAL_GPIO_Init+0x206>
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <HAL_GPIO_Init+0x206>
 80013c4:	2300      	movs	r3, #0
 80013c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013c8:	f002 0203 	and.w	r2, r2, #3
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	4093      	lsls	r3, r2
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013d6:	492f      	ldr	r1, [pc, #188]	; (8001494 <HAL_GPIO_Init+0x2d4>)
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013f0:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	492e      	ldr	r1, [pc, #184]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013fe:	4b2c      	ldr	r3, [pc, #176]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	43db      	mvns	r3, r3
 8001406:	492a      	ldr	r1, [pc, #168]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001408:	4013      	ands	r3, r2
 800140a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001418:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4924      	ldr	r1, [pc, #144]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001426:	4b22      	ldr	r3, [pc, #136]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	43db      	mvns	r3, r3
 800142e:	4920      	ldr	r1, [pc, #128]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001430:	4013      	ands	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	491a      	ldr	r1, [pc, #104]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	608b      	str	r3, [r1, #8]
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	43db      	mvns	r3, r3
 8001456:	4916      	ldr	r1, [pc, #88]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 8001458:	4013      	ands	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d025      	beq.n	80014b4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	4910      	ldr	r1, [pc, #64]	; (80014b0 <HAL_GPIO_Init+0x2f0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	60cb      	str	r3, [r1, #12]
 8001474:	e025      	b.n	80014c2 <HAL_GPIO_Init+0x302>
 8001476:	bf00      	nop
 8001478:	10320000 	.word	0x10320000
 800147c:	10310000 	.word	0x10310000
 8001480:	10220000 	.word	0x10220000
 8001484:	10210000 	.word	0x10210000
 8001488:	10120000 	.word	0x10120000
 800148c:	10110000 	.word	0x10110000
 8001490:	40021000 	.word	0x40021000
 8001494:	40010000 	.word	0x40010000
 8001498:	40010800 	.word	0x40010800
 800149c:	40010c00 	.word	0x40010c00
 80014a0:	40011000 	.word	0x40011000
 80014a4:	40011400 	.word	0x40011400
 80014a8:	40011800 	.word	0x40011800
 80014ac:	40011c00 	.word	0x40011c00
 80014b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_GPIO_Init+0x324>)
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	4909      	ldr	r1, [pc, #36]	; (80014e4 <HAL_GPIO_Init+0x324>)
 80014be:	4013      	ands	r3, r2
 80014c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	3301      	adds	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	fa22 f303 	lsr.w	r3, r2, r3
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f47f ae7e 	bne.w	80011d4 <HAL_GPIO_Init+0x14>
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	372c      	adds	r7, #44	; 0x2c
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr
 80014e4:	40010400 	.word	0x40010400

080014e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	460b      	mov	r3, r1
 80014f2:	807b      	strh	r3, [r7, #2]
 80014f4:	4613      	mov	r3, r2
 80014f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f8:	787b      	ldrb	r3, [r7, #1]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001504:	e003      	b.n	800150e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	041a      	lsls	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	611a      	str	r2, [r3, #16]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d101      	bne.n	800152a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e26c      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 8087 	beq.w	8001646 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001538:	4b92      	ldr	r3, [pc, #584]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 030c 	and.w	r3, r3, #12
 8001540:	2b04      	cmp	r3, #4
 8001542:	d00c      	beq.n	800155e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001544:	4b8f      	ldr	r3, [pc, #572]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b08      	cmp	r3, #8
 800154e:	d112      	bne.n	8001576 <HAL_RCC_OscConfig+0x5e>
 8001550:	4b8c      	ldr	r3, [pc, #560]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800155c:	d10b      	bne.n	8001576 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155e:	4b89      	ldr	r3, [pc, #548]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d06c      	beq.n	8001644 <HAL_RCC_OscConfig+0x12c>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d168      	bne.n	8001644 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e246      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x76>
 8001580:	4b80      	ldr	r3, [pc, #512]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a7f      	ldr	r2, [pc, #508]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	e02e      	b.n	80015ec <HAL_RCC_OscConfig+0xd4>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x98>
 8001596:	4b7b      	ldr	r3, [pc, #492]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a7a      	ldr	r2, [pc, #488]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 800159c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b78      	ldr	r3, [pc, #480]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a77      	ldr	r2, [pc, #476]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e01d      	b.n	80015ec <HAL_RCC_OscConfig+0xd4>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0xbc>
 80015ba:	4b72      	ldr	r3, [pc, #456]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a71      	ldr	r2, [pc, #452]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	4b6f      	ldr	r3, [pc, #444]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a6e      	ldr	r2, [pc, #440]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e00b      	b.n	80015ec <HAL_RCC_OscConfig+0xd4>
 80015d4:	4b6b      	ldr	r3, [pc, #428]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a6a      	ldr	r2, [pc, #424]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b68      	ldr	r3, [pc, #416]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a67      	ldr	r2, [pc, #412]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d013      	beq.n	800161c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fbc4 	bl	8000d80 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fbc0 	bl	8000d80 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1fa      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160e:	4b5d      	ldr	r3, [pc, #372]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0xe4>
 800161a:	e014      	b.n	8001646 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161c:	f7ff fbb0 	bl	8000d80 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001624:	f7ff fbac 	bl	8000d80 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b64      	cmp	r3, #100	; 0x64
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e1e6      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001636:	4b53      	ldr	r3, [pc, #332]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1f0      	bne.n	8001624 <HAL_RCC_OscConfig+0x10c>
 8001642:	e000      	b.n	8001646 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d063      	beq.n	800171a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001652:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00b      	beq.n	8001676 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800165e:	4b49      	ldr	r3, [pc, #292]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 030c 	and.w	r3, r3, #12
 8001666:	2b08      	cmp	r3, #8
 8001668:	d11c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x18c>
 800166a:	4b46      	ldr	r3, [pc, #280]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d116      	bne.n	80016a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001676:	4b43      	ldr	r3, [pc, #268]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <HAL_RCC_OscConfig+0x176>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d001      	beq.n	800168e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e1ba      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	4939      	ldr	r1, [pc, #228]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016a2:	e03a      	b.n	800171a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d020      	beq.n	80016ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ac:	4b36      	ldr	r3, [pc, #216]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fb65 	bl	8000d80 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ba:	f7ff fb61 	bl	8000d80 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e19b      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d8:	4b2a      	ldr	r3, [pc, #168]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4927      	ldr	r1, [pc, #156]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	600b      	str	r3, [r1, #0]
 80016ec:	e015      	b.n	800171a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ee:	4b26      	ldr	r3, [pc, #152]	; (8001788 <HAL_RCC_OscConfig+0x270>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb44 	bl	8000d80 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fc:	f7ff fb40 	bl	8000d80 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e17a      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d03a      	beq.n	800179c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d019      	beq.n	8001762 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_RCC_OscConfig+0x274>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001734:	f7ff fb24 	bl	8000d80 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173c:	f7ff fb20 	bl	8000d80 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e15a      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174e:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <HAL_RCC_OscConfig+0x26c>)
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800175a:	2001      	movs	r0, #1
 800175c:	f000 fad8 	bl	8001d10 <RCC_Delay>
 8001760:	e01c      	b.n	800179c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_RCC_OscConfig+0x274>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001768:	f7ff fb0a 	bl	8000d80 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800176e:	e00f      	b.n	8001790 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001770:	f7ff fb06 	bl	8000d80 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d908      	bls.n	8001790 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e140      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	42420000 	.word	0x42420000
 800178c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001790:	4b9e      	ldr	r3, [pc, #632]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1e9      	bne.n	8001770 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0304 	and.w	r3, r3, #4
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80a6 	beq.w	80018f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ae:	4b97      	ldr	r3, [pc, #604]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10d      	bne.n	80017d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	4b94      	ldr	r3, [pc, #592]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	4a93      	ldr	r2, [pc, #588]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80017c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c4:	61d3      	str	r3, [r2, #28]
 80017c6:	4b91      	ldr	r3, [pc, #580]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017d2:	2301      	movs	r3, #1
 80017d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	4b8e      	ldr	r3, [pc, #568]	; (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d118      	bne.n	8001814 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017e2:	4b8b      	ldr	r3, [pc, #556]	; (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a8a      	ldr	r2, [pc, #552]	; (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 80017e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fac7 	bl	8000d80 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f6:	f7ff fac3 	bl	8000d80 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b64      	cmp	r3, #100	; 0x64
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e0fd      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001808:	4b81      	ldr	r3, [pc, #516]	; (8001a10 <HAL_RCC_OscConfig+0x4f8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <HAL_RCC_OscConfig+0x312>
 800181c:	4b7b      	ldr	r3, [pc, #492]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4a7a      	ldr	r2, [pc, #488]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6213      	str	r3, [r2, #32]
 8001828:	e02d      	b.n	8001886 <HAL_RCC_OscConfig+0x36e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10c      	bne.n	800184c <HAL_RCC_OscConfig+0x334>
 8001832:	4b76      	ldr	r3, [pc, #472]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4a75      	ldr	r2, [pc, #468]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001838:	f023 0301 	bic.w	r3, r3, #1
 800183c:	6213      	str	r3, [r2, #32]
 800183e:	4b73      	ldr	r3, [pc, #460]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4a72      	ldr	r2, [pc, #456]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001844:	f023 0304 	bic.w	r3, r3, #4
 8001848:	6213      	str	r3, [r2, #32]
 800184a:	e01c      	b.n	8001886 <HAL_RCC_OscConfig+0x36e>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	2b05      	cmp	r3, #5
 8001852:	d10c      	bne.n	800186e <HAL_RCC_OscConfig+0x356>
 8001854:	4b6d      	ldr	r3, [pc, #436]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	4a6c      	ldr	r2, [pc, #432]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6213      	str	r3, [r2, #32]
 8001860:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	4a69      	ldr	r2, [pc, #420]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6213      	str	r3, [r2, #32]
 800186c:	e00b      	b.n	8001886 <HAL_RCC_OscConfig+0x36e>
 800186e:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001870:	6a1b      	ldr	r3, [r3, #32]
 8001872:	4a66      	ldr	r2, [pc, #408]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	6213      	str	r3, [r2, #32]
 800187a:	4b64      	ldr	r3, [pc, #400]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	4a63      	ldr	r2, [pc, #396]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001880:	f023 0304 	bic.w	r3, r3, #4
 8001884:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d015      	beq.n	80018ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188e:	f7ff fa77 	bl	8000d80 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	e00a      	b.n	80018ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001896:	f7ff fa73 	bl	8000d80 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e0ab      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ac:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0ee      	beq.n	8001896 <HAL_RCC_OscConfig+0x37e>
 80018b8:	e014      	b.n	80018e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fa61 	bl	8000d80 <HAL_GetTick>
 80018be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c0:	e00a      	b.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c2:	f7ff fa5d 	bl	8000d80 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e095      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d8:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ee      	bne.n	80018c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018e4:	7dfb      	ldrb	r3, [r7, #23]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d105      	bne.n	80018f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ea:	4b48      	ldr	r3, [pc, #288]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a47      	ldr	r2, [pc, #284]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 8081 	beq.w	8001a02 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	2b08      	cmp	r3, #8
 800190a:	d061      	beq.n	80019d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d146      	bne.n	80019a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001914:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <HAL_RCC_OscConfig+0x4fc>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191a:	f7ff fa31 	bl	8000d80 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff fa2d 	bl	8000d80 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e067      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f0      	bne.n	8001922 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d108      	bne.n	800195c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800194a:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	492d      	ldr	r1, [pc, #180]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001958:	4313      	orrs	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800195c:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a19      	ldr	r1, [r3, #32]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	430b      	orrs	r3, r1
 800196e:	4927      	ldr	r1, [pc, #156]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <HAL_RCC_OscConfig+0x4fc>)
 8001976:	2201      	movs	r2, #1
 8001978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197a:	f7ff fa01 	bl	8000d80 <HAL_GetTick>
 800197e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001982:	f7ff f9fd 	bl	8000d80 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e037      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x46a>
 80019a0:	e02f      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <HAL_RCC_OscConfig+0x4fc>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff f9ea 	bl	8000d80 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff f9e6 	bl	8000d80 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e020      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x498>
 80019ce:	e018      	b.n	8001a02 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e013      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_RCC_OscConfig+0x4f4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40007000 	.word	0x40007000
 8001a14:	42420060 	.word	0x42420060

08001a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0d0      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0307 	and.w	r3, r3, #7
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d910      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b67      	ldr	r3, [pc, #412]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 0207 	bic.w	r2, r3, #7
 8001a42:	4965      	ldr	r1, [pc, #404]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4a:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0b8      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d020      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a74:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4a58      	ldr	r2, [pc, #352]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0308 	and.w	r3, r3, #8
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a8c:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4a52      	ldr	r2, [pc, #328]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a98:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	494d      	ldr	r1, [pc, #308]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d040      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001abe:	4b47      	ldr	r3, [pc, #284]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d115      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e07f      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad6:	4b41      	ldr	r3, [pc, #260]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e073      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e06b      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af6:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f023 0203 	bic.w	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4936      	ldr	r1, [pc, #216]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b08:	f7ff f93a 	bl	8000d80 <HAL_GetTick>
 8001b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	e00a      	b.n	8001b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7ff f936 	bl	8000d80 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e053      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	4b2d      	ldr	r3, [pc, #180]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 020c 	and.w	r2, r3, #12
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d1eb      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b38:	4b27      	ldr	r3, [pc, #156]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d210      	bcs.n	8001b68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 0207 	bic.w	r2, r3, #7
 8001b4e:	4922      	ldr	r1, [pc, #136]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e032      	b.n	8001bce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d008      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4916      	ldr	r1, [pc, #88]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d009      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	490e      	ldr	r1, [pc, #56]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ba6:	f000 f821 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001baa:	4602      	mov	r2, r0
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	490a      	ldr	r1, [pc, #40]	; (8001be0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb8:	5ccb      	ldrb	r3, [r1, r3]
 8001bba:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbe:	4a09      	ldr	r2, [pc, #36]	; (8001be4 <HAL_RCC_ClockConfig+0x1cc>)
 8001bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bc2:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <HAL_RCC_ClockConfig+0x1d0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff f898 	bl	8000cfc <HAL_InitTick>

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	0800415c 	.word	0x0800415c
 8001be4:	20000000 	.word	0x20000000
 8001be8:	20000004 	.word	0x20000004

08001bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bec:	b490      	push	{r4, r7}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bf4:	1d3c      	adds	r4, r7, #4
 8001bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bfc:	f240 2301 	movw	r3, #513	; 0x201
 8001c00:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0x40>
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_GetSysClockFreq+0x46>
 8001c2a:	e02d      	b.n	8001c88 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c2e:	623b      	str	r3, [r7, #32]
      break;
 8001c30:	e02d      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	0c9b      	lsrs	r3, r3, #18
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c3e:	4413      	add	r3, r2
 8001c40:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c44:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	0c5b      	lsrs	r3, r3, #17
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c5e:	4413      	add	r3, r2
 8001c60:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c64:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c6a:	fb02 f203 	mul.w	r2, r2, r3
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
 8001c76:	e004      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c7c:	fb02 f303 	mul.w	r3, r2, r3
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	623b      	str	r3, [r7, #32]
      break;
 8001c86:	e002      	b.n	8001c8e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c88:	4b06      	ldr	r3, [pc, #24]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8a:	623b      	str	r3, [r7, #32]
      break;
 8001c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c8e:	6a3b      	ldr	r3, [r7, #32]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3728      	adds	r7, #40	; 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc90      	pop	{r4, r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	0800414c 	.word	0x0800414c
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	007a1200 	.word	0x007a1200
 8001ca8:	003d0900 	.word	0x003d0900

08001cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb0:	4b02      	ldr	r3, [pc, #8]	; (8001cbc <HAL_RCC_GetHCLKFreq+0x10>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr
 8001cbc:	20000000 	.word	0x20000000

08001cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cc4:	f7ff fff2 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	0a1b      	lsrs	r3, r3, #8
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	4903      	ldr	r1, [pc, #12]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	0800416c 	.word	0x0800416c

08001ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cec:	f7ff ffde 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	0adb      	lsrs	r3, r3, #11
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	4903      	ldr	r1, [pc, #12]	; (8001d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	0800416c 	.word	0x0800416c

08001d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <RCC_Delay+0x34>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <RCC_Delay+0x38>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	0a5b      	lsrs	r3, r3, #9
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d2c:	bf00      	nop
  }
  while (Delay --);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1e5a      	subs	r2, r3, #1
 8001d32:	60fa      	str	r2, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f9      	bne.n	8001d2c <RCC_Delay+0x1c>
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	20000000 	.word	0x20000000
 8001d48:	10624dd3 	.word	0x10624dd3

08001d4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e076      	b.n	8001e4c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d108      	bne.n	8001d78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d6e:	d009      	beq.n	8001d84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
 8001d76:	e005      	b.n	8001d84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe fd8a 	bl	80008b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2202      	movs	r2, #2
 8001da8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e08:	ea42 0103 	orr.w	r1, r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	0c1a      	lsrs	r2, r3, #16
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f002 0204 	and.w	r2, r2, #4
 8001e2a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	69da      	ldr	r2, [r3, #28]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_SPI_Transmit+0x22>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e126      	b.n	80020c4 <HAL_SPI_Transmit+0x270>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e7e:	f7fe ff7f 	bl	8000d80 <HAL_GetTick>
 8001e82:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d002      	beq.n	8001e9a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001e94:	2302      	movs	r3, #2
 8001e96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e98:	e10b      	b.n	80020b2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_SPI_Transmit+0x52>
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001eaa:	e102      	b.n	80020b2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2203      	movs	r2, #3
 8001eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	88fa      	ldrh	r2, [r7, #6]
 8001ec4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	88fa      	ldrh	r2, [r7, #6]
 8001eca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ef2:	d10f      	bne.n	8001f14 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1e:	2b40      	cmp	r3, #64	; 0x40
 8001f20:	d007      	beq.n	8001f32 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f3a:	d14b      	bne.n	8001fd4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_SPI_Transmit+0xf6>
 8001f44:	8afb      	ldrh	r3, [r7, #22]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d13e      	bne.n	8001fc8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4e:	881a      	ldrh	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	1c9a      	adds	r2, r3, #2
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f64:	b29b      	uxth	r3, r3
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001f6e:	e02b      	b.n	8001fc8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d112      	bne.n	8001fa4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	881a      	ldrh	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	1c9a      	adds	r2, r3, #2
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	86da      	strh	r2, [r3, #54]	; 0x36
 8001fa2:	e011      	b.n	8001fc8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001fa4:	f7fe feec 	bl	8000d80 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d803      	bhi.n	8001fbc <HAL_SPI_Transmit+0x168>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fba:	d102      	bne.n	8001fc2 <HAL_SPI_Transmit+0x16e>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d102      	bne.n	8001fc8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001fc6:	e074      	b.n	80020b2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ce      	bne.n	8001f70 <HAL_SPI_Transmit+0x11c>
 8001fd2:	e04c      	b.n	800206e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d002      	beq.n	8001fe2 <HAL_SPI_Transmit+0x18e>
 8001fdc:	8afb      	ldrh	r3, [r7, #22]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d140      	bne.n	8002064 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	330c      	adds	r3, #12
 8001fec:	7812      	ldrb	r2, [r2, #0]
 8001fee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff4:	1c5a      	adds	r2, r3, #1
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002008:	e02c      	b.n	8002064 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b02      	cmp	r3, #2
 8002016:	d113      	bne.n	8002040 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	330c      	adds	r3, #12
 8002022:	7812      	ldrb	r2, [r2, #0]
 8002024:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	86da      	strh	r2, [r3, #54]	; 0x36
 800203e:	e011      	b.n	8002064 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002040:	f7fe fe9e 	bl	8000d80 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d803      	bhi.n	8002058 <HAL_SPI_Transmit+0x204>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002056:	d102      	bne.n	800205e <HAL_SPI_Transmit+0x20a>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002062:	e026      	b.n	80020b2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1cd      	bne.n	800200a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	6839      	ldr	r1, [r7, #0]
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fcbc 	bl	80029f0 <SPI_EndRxTxTransaction>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10a      	bne.n	80020a2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	77fb      	strb	r3, [r7, #31]
 80020ae:	e000      	b.n	80020b2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80020b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3720      	adds	r7, #32
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020e8:	d112      	bne.n	8002110 <HAL_SPI_Receive+0x44>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10e      	bne.n	8002110 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2204      	movs	r2, #4
 80020f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80020fa:	88fa      	ldrh	r2, [r7, #6]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 f8f1 	bl	80022ee <HAL_SPI_TransmitReceive>
 800210c:	4603      	mov	r3, r0
 800210e:	e0ea      	b.n	80022e6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_SPI_Receive+0x52>
 800211a:	2302      	movs	r3, #2
 800211c:	e0e3      	b.n	80022e6 <HAL_SPI_Receive+0x21a>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002126:	f7fe fe2b 	bl	8000d80 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002132:	b2db      	uxtb	r3, r3
 8002134:	2b01      	cmp	r3, #1
 8002136:	d002      	beq.n	800213e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002138:	2302      	movs	r3, #2
 800213a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800213c:	e0ca      	b.n	80022d4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_SPI_Receive+0x7e>
 8002144:	88fb      	ldrh	r3, [r7, #6]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d102      	bne.n	8002150 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800214e:	e0c1      	b.n	80022d4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2204      	movs	r2, #4
 8002154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	88fa      	ldrh	r2, [r7, #6]
 8002168:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	88fa      	ldrh	r2, [r7, #6]
 800216e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002196:	d10f      	bne.n	80021b8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	2b40      	cmp	r3, #64	; 0x40
 80021c4:	d007      	beq.n	80021d6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d162      	bne.n	80022a4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80021de:	e02e      	b.n	800223e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d115      	bne.n	800221a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f103 020c 	add.w	r2, r3, #12
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fa:	7812      	ldrb	r2, [r2, #0]
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002218:	e011      	b.n	800223e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800221a:	f7fe fdb1 	bl	8000d80 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d803      	bhi.n	8002232 <HAL_SPI_Receive+0x166>
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002230:	d102      	bne.n	8002238 <HAL_SPI_Receive+0x16c>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d102      	bne.n	800223e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800223c:	e04a      	b.n	80022d4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002242:	b29b      	uxth	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1cb      	bne.n	80021e0 <HAL_SPI_Receive+0x114>
 8002248:	e031      	b.n	80022ae <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b01      	cmp	r3, #1
 8002256:	d113      	bne.n	8002280 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	b292      	uxth	r2, r2
 8002264:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226a:	1c9a      	adds	r2, r3, #2
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002274:	b29b      	uxth	r3, r3
 8002276:	3b01      	subs	r3, #1
 8002278:	b29a      	uxth	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800227e:	e011      	b.n	80022a4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002280:	f7fe fd7e 	bl	8000d80 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d803      	bhi.n	8002298 <HAL_SPI_Receive+0x1cc>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002296:	d102      	bne.n	800229e <HAL_SPI_Receive+0x1d2>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80022a2:	e017      	b.n	80022d4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1cd      	bne.n	800224a <HAL_SPI_Receive+0x17e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	6839      	ldr	r1, [r7, #0]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 fb4a 	bl	800294c <SPI_EndRxTransaction>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d002      	beq.n	80022d2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	75fb      	strb	r3, [r7, #23]
 80022d0:	e000      	b.n	80022d4 <HAL_SPI_Receive+0x208>
  }

error :
 80022d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b08c      	sub	sp, #48	; 0x30
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	60f8      	str	r0, [r7, #12]
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022fc:	2301      	movs	r3, #1
 80022fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_SPI_TransmitReceive+0x26>
 8002310:	2302      	movs	r3, #2
 8002312:	e18a      	b.n	800262a <HAL_SPI_TransmitReceive+0x33c>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800231c:	f7fe fd30 	bl	8000d80 <HAL_GetTick>
 8002320:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002336:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800233a:	2b01      	cmp	r3, #1
 800233c:	d00f      	beq.n	800235e <HAL_SPI_TransmitReceive+0x70>
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002344:	d107      	bne.n	8002356 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d103      	bne.n	8002356 <HAL_SPI_TransmitReceive+0x68>
 800234e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002352:	2b04      	cmp	r3, #4
 8002354:	d003      	beq.n	800235e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002356:	2302      	movs	r3, #2
 8002358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800235c:	e15b      	b.n	8002616 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_SPI_TransmitReceive+0x82>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <HAL_SPI_TransmitReceive+0x82>
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d103      	bne.n	8002378 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002376:	e14e      	b.n	8002616 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b04      	cmp	r3, #4
 8002382:	d003      	beq.n	800238c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2205      	movs	r2, #5
 8002388:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	887a      	ldrh	r2, [r7, #2]
 800239c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	887a      	ldrh	r2, [r7, #2]
 80023a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	887a      	ldrh	r2, [r7, #2]
 80023ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023cc:	2b40      	cmp	r3, #64	; 0x40
 80023ce:	d007      	beq.n	80023e0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023e8:	d178      	bne.n	80024dc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_SPI_TransmitReceive+0x10a>
 80023f2:	8b7b      	ldrh	r3, [r7, #26]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d166      	bne.n	80024c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002408:	1c9a      	adds	r2, r3, #2
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002412:	b29b      	uxth	r3, r3
 8002414:	3b01      	subs	r3, #1
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800241c:	e053      	b.n	80024c6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b02      	cmp	r3, #2
 800242a:	d11b      	bne.n	8002464 <HAL_SPI_TransmitReceive+0x176>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d016      	beq.n	8002464 <HAL_SPI_TransmitReceive+0x176>
 8002436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002438:	2b01      	cmp	r3, #1
 800243a:	d113      	bne.n	8002464 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	881a      	ldrh	r2, [r3, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	1c9a      	adds	r2, r3, #2
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002456:	b29b      	uxth	r3, r3
 8002458:	3b01      	subs	r3, #1
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b01      	cmp	r3, #1
 8002470:	d119      	bne.n	80024a6 <HAL_SPI_TransmitReceive+0x1b8>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	d014      	beq.n	80024a6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	b292      	uxth	r2, r2
 8002488:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	1c9a      	adds	r2, r3, #2
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024a2:	2301      	movs	r3, #1
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024a6:	f7fe fc6b 	bl	8000d80 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d807      	bhi.n	80024c6 <HAL_SPI_TransmitReceive+0x1d8>
 80024b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024bc:	d003      	beq.n	80024c6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024c4:	e0a7      	b.n	8002616 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1a6      	bne.n	800241e <HAL_SPI_TransmitReceive+0x130>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1a1      	bne.n	800241e <HAL_SPI_TransmitReceive+0x130>
 80024da:	e07c      	b.n	80025d6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <HAL_SPI_TransmitReceive+0x1fc>
 80024e4:	8b7b      	ldrh	r3, [r7, #26]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d16b      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	330c      	adds	r3, #12
 80024f4:	7812      	ldrb	r2, [r2, #0]
 80024f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002506:	b29b      	uxth	r3, r3
 8002508:	3b01      	subs	r3, #1
 800250a:	b29a      	uxth	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002510:	e057      	b.n	80025c2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b02      	cmp	r3, #2
 800251e:	d11c      	bne.n	800255a <HAL_SPI_TransmitReceive+0x26c>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d017      	beq.n	800255a <HAL_SPI_TransmitReceive+0x26c>
 800252a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d114      	bne.n	800255a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	330c      	adds	r3, #12
 800253a:	7812      	ldrb	r2, [r2, #0]
 800253c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d119      	bne.n	800259c <HAL_SPI_TransmitReceive+0x2ae>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800256c:	b29b      	uxth	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d014      	beq.n	800259c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002598:	2301      	movs	r3, #1
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800259c:	f7fe fbf0 	bl	8000d80 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d803      	bhi.n	80025b4 <HAL_SPI_TransmitReceive+0x2c6>
 80025ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b2:	d102      	bne.n	80025ba <HAL_SPI_TransmitReceive+0x2cc>
 80025b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d103      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025c0:	e029      	b.n	8002616 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1a2      	bne.n	8002512 <HAL_SPI_TransmitReceive+0x224>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d19d      	bne.n	8002512 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 fa08 	bl	80029f0 <SPI_EndRxTxTransaction>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2220      	movs	r2, #32
 80025f0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80025f2:	e010      	b.n	8002616 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10b      	bne.n	8002614 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	617b      	str	r3, [r7, #20]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	e000      	b.n	8002616 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002614:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002626:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800262a:	4618      	mov	r0, r3
 800262c:	3730      	adds	r7, #48	; 0x30
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	099b      	lsrs	r3, r3, #6
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10f      	bne.n	8002678 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	099b      	lsrs	r3, r3, #6
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	4798      	blx	r3
    return;
 8002676:	e0be      	b.n	80027f6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	085b      	lsrs	r3, r3, #1
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_SPI_IRQHandler+0x66>
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	09db      	lsrs	r3, r3, #7
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
    return;
 8002698:	e0ad      	b.n	80027f6 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	095b      	lsrs	r3, r3, #5
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_SPI_IRQHandler+0x80>
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f000 80a1 	beq.w	80027f6 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 809a 	beq.w	80027f6 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d023      	beq.n	8002716 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b03      	cmp	r3, #3
 80026d8:	d011      	beq.n	80026fe <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026de:	f043 0204 	orr.w	r2, r3, #4
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	e00b      	b.n	8002716 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	693b      	ldr	r3, [r7, #16]
        return;
 8002714:	e06f      	b.n	80027f6 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d014      	beq.n	800274c <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800272e:	2300      	movs	r3, #0
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002750:	2b00      	cmp	r3, #0
 8002752:	d04f      	beq.n	80027f4 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002762:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d104      	bne.n	8002780 <HAL_SPI_IRQHandler+0x14c>
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d034      	beq.n	80027ea <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0203 	bic.w	r2, r2, #3
 800278e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002794:	2b00      	cmp	r3, #0
 8002796:	d011      	beq.n	80027bc <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279c:	4a17      	ldr	r2, [pc, #92]	; (80027fc <HAL_SPI_IRQHandler+0x1c8>)
 800279e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe fc03 	bl	8000fb0 <HAL_DMA_Abort_IT>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d016      	beq.n	80027f2 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c8:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <HAL_SPI_IRQHandler+0x1c8>)
 80027ca:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7fe fbed 	bl	8000fb0 <HAL_DMA_Abort_IT>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00a      	beq.n	80027f2 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80027e8:	e003      	b.n	80027f2 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f808 	bl	8002800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80027f0:	e000      	b.n	80027f4 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80027f2:	bf00      	nop
    return;
 80027f4:	bf00      	nop
  }
}
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	08002813 	.word	0x08002813

08002800 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff ffe7 	bl	8002800 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800284c:	f7fe fa98 	bl	8000d80 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	1a9b      	subs	r3, r3, r2
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	4413      	add	r3, r2
 800285a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800285c:	f7fe fa90 	bl	8000d80 <HAL_GetTick>
 8002860:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002862:	4b39      	ldr	r3, [pc, #228]	; (8002948 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	015b      	lsls	r3, r3, #5
 8002868:	0d1b      	lsrs	r3, r3, #20
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	fb02 f303 	mul.w	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002872:	e054      	b.n	800291e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800287a:	d050      	beq.n	800291e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800287c:	f7fe fa80 	bl	8000d80 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	429a      	cmp	r2, r3
 800288a:	d902      	bls.n	8002892 <SPI_WaitFlagStateUntilTimeout+0x56>
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d13d      	bne.n	800290e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028aa:	d111      	bne.n	80028d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b4:	d004      	beq.n	80028c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028be:	d107      	bne.n	80028d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d8:	d10f      	bne.n	80028fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e017      	b.n	800293e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	3b01      	subs	r3, #1
 800291c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4013      	ands	r3, r2
 8002928:	68ba      	ldr	r2, [r7, #8]
 800292a:	429a      	cmp	r2, r3
 800292c:	bf0c      	ite	eq
 800292e:	2301      	moveq	r3, #1
 8002930:	2300      	movne	r3, #0
 8002932:	b2db      	uxtb	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	429a      	cmp	r2, r3
 800293a:	d19b      	bne.n	8002874 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000000 	.word	0x20000000

0800294c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002960:	d111      	bne.n	8002986 <SPI_EndRxTransaction+0x3a>
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800296a:	d004      	beq.n	8002976 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002974:	d107      	bne.n	8002986 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002984:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800298e:	d117      	bne.n	80029c0 <SPI_EndRxTransaction+0x74>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002998:	d112      	bne.n	80029c0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2200      	movs	r2, #0
 80029a2:	2101      	movs	r1, #1
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f7ff ff49 	bl	800283c <SPI_WaitFlagStateUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d01a      	beq.n	80029e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b4:	f043 0220 	orr.w	r2, r3, #32
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e013      	b.n	80029e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2200      	movs	r2, #0
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7ff ff36 	bl	800283c <SPI_WaitFlagStateUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d007      	beq.n	80029e6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	f043 0220 	orr.w	r2, r3, #32
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e000      	b.n	80029e8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2200      	movs	r2, #0
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f7ff ff18 	bl	800283c <SPI_WaitFlagStateUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d007      	beq.n	8002a22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a16:	f043 0220 	orr.w	r2, r3, #32
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e000      	b.n	8002a24 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e03f      	b.n	8002abe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe f8c2 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2224      	movs	r2, #36	; 0x24
 8002a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fa5d 	bl	8002f30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695a      	ldr	r2, [r3, #20]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10d      	bne.n	8002b1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0320 	and.w	r3, r3, #32
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_UART_IRQHandler+0x52>
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f98b 	bl	8002e2e <UART_Receive_IT>
      return;
 8002b18:	e0d0      	b.n	8002cbc <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80b0 	beq.w	8002c82 <HAL_UART_IRQHandler+0x1ba>
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d105      	bne.n	8002b38 <HAL_UART_IRQHandler+0x70>
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80a5 	beq.w	8002c82 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_UART_IRQHandler+0x90>
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b50:	f043 0201 	orr.w	r2, r3, #1
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_UART_IRQHandler+0xb0>
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	f043 0202 	orr.w	r2, r3, #2
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <HAL_UART_IRQHandler+0xd0>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	f043 0204 	orr.w	r2, r3, #4
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00f      	beq.n	8002bc2 <HAL_UART_IRQHandler+0xfa>
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	f003 0320 	and.w	r3, r3, #32
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d104      	bne.n	8002bb6 <HAL_UART_IRQHandler+0xee>
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	f043 0208 	orr.w	r2, r3, #8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d077      	beq.n	8002cba <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <HAL_UART_IRQHandler+0x11c>
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f003 0320 	and.w	r3, r3, #32
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f925 	bl	8002e2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	bf14      	ite	ne
 8002bf2:	2301      	movne	r3, #1
 8002bf4:	2300      	moveq	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d102      	bne.n	8002c0c <HAL_UART_IRQHandler+0x144>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d031      	beq.n	8002c70 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f876 	bl	8002cfe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d023      	beq.n	8002c68 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c2e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3c:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <HAL_UART_IRQHandler+0x1fc>)
 8002c3e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe f9b3 	bl	8000fb0 <HAL_DMA_Abort_IT>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d016      	beq.n	8002c7e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c5a:	4610      	mov	r0, r2
 8002c5c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5e:	e00e      	b.n	8002c7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f843 	bl	8002cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c66:	e00a      	b.n	8002c7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 f83f 	bl	8002cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c6e:	e006      	b.n	8002c7e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f83b 	bl	8002cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002c7c:	e01d      	b.n	8002cba <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7e:	bf00      	nop
    return;
 8002c80:	e01b      	b.n	8002cba <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_UART_IRQHandler+0x1d6>
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f862 	bl	8002d60 <UART_Transmit_IT>
    return;
 8002c9c:	e00e      	b.n	8002cbc <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d009      	beq.n	8002cbc <HAL_UART_IRQHandler+0x1f4>
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d004      	beq.n	8002cbc <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f8a3 	bl	8002dfe <UART_EndTransmit_IT>
    return;
 8002cb8:	e000      	b.n	8002cbc <HAL_UART_IRQHandler+0x1f4>
    return;
 8002cba:	bf00      	nop
  }
}
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	08002d39 	.word	0x08002d39

08002cc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr

08002cfe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d14:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0201 	bic.w	r2, r2, #1
 8002d24:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f7ff ffca 	bl	8002cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d58:	bf00      	nop
 8002d5a:	3710      	adds	r7, #16
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b21      	cmp	r3, #33	; 0x21
 8002d72:	d13e      	bne.n	8002df2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d7c:	d114      	bne.n	8002da8 <UART_Transmit_IT+0x48>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d110      	bne.n	8002da8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1b      	ldr	r3, [r3, #32]
 8002da0:	1c9a      	adds	r2, r3, #2
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	621a      	str	r2, [r3, #32]
 8002da6:	e008      	b.n	8002dba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	1c59      	adds	r1, r3, #1
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6211      	str	r1, [r2, #32]
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10f      	bne.n	8002dee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ddc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dee:	2300      	movs	r3, #0
 8002df0:	e000      	b.n	8002df4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002df2:	2302      	movs	r3, #2
  }
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3714      	adds	r7, #20
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bc80      	pop	{r7}
 8002dfc:	4770      	bx	lr

08002dfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff52 	bl	8002cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b22      	cmp	r3, #34	; 0x22
 8002e40:	d170      	bne.n	8002f24 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4a:	d117      	bne.n	8002e7c <UART_Receive_IT+0x4e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d113      	bne.n	8002e7c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	1c9a      	adds	r2, r3, #2
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	629a      	str	r2, [r3, #40]	; 0x28
 8002e7a:	e026      	b.n	8002eca <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8e:	d007      	beq.n	8002ea0 <UART_Receive_IT+0x72>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10a      	bne.n	8002eae <UART_Receive_IT+0x80>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d106      	bne.n	8002eae <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	701a      	strb	r2, [r3, #0]
 8002eac:	e008      	b.n	8002ec0 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d120      	bne.n	8002f20 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0220 	bic.w	r2, r2, #32
 8002eec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002efc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fedf 	bl	8002cda <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	e002      	b.n	8002f26 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002f6a:	f023 030c 	bic.w	r3, r3, #12
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	430b      	orrs	r3, r1
 8002f76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699a      	ldr	r2, [r3, #24]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a2c      	ldr	r2, [pc, #176]	; (8003044 <UART_SetConfig+0x114>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d103      	bne.n	8002fa0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f98:	f7fe fea6 	bl	8001ce8 <HAL_RCC_GetPCLK2Freq>
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	e002      	b.n	8002fa6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fa0:	f7fe fe8e 	bl	8001cc0 <HAL_RCC_GetPCLK1Freq>
 8002fa4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	009a      	lsls	r2, r3, #2
 8002fb0:	441a      	add	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbc:	4a22      	ldr	r2, [pc, #136]	; (8003048 <UART_SetConfig+0x118>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	0119      	lsls	r1, r3, #4
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009a      	lsls	r2, r3, #2
 8002fd0:	441a      	add	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fdc:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <UART_SetConfig+0x118>)
 8002fde:	fba3 0302 	umull	r0, r3, r3, r2
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2064      	movs	r0, #100	; 0x64
 8002fe6:	fb00 f303 	mul.w	r3, r0, r3
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	3332      	adds	r3, #50	; 0x32
 8002ff0:	4a15      	ldr	r2, [pc, #84]	; (8003048 <UART_SetConfig+0x118>)
 8002ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ffc:	4419      	add	r1, r3
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	009a      	lsls	r2, r3, #2
 8003008:	441a      	add	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	fbb2 f2f3 	udiv	r2, r2, r3
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <UART_SetConfig+0x118>)
 8003016:	fba3 0302 	umull	r0, r3, r3, r2
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	2064      	movs	r0, #100	; 0x64
 800301e:	fb00 f303 	mul.w	r3, r0, r3
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	3332      	adds	r3, #50	; 0x32
 8003028:	4a07      	ldr	r2, [pc, #28]	; (8003048 <UART_SetConfig+0x118>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	f003 020f 	and.w	r2, r3, #15
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	440a      	add	r2, r1
 800303a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40013800 	.word	0x40013800
 8003048:	51eb851f 	.word	0x51eb851f

0800304c <__errno>:
 800304c:	4b01      	ldr	r3, [pc, #4]	; (8003054 <__errno+0x8>)
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	2000000c 	.word	0x2000000c

08003058 <__libc_init_array>:
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	2600      	movs	r6, #0
 800305c:	4d0c      	ldr	r5, [pc, #48]	; (8003090 <__libc_init_array+0x38>)
 800305e:	4c0d      	ldr	r4, [pc, #52]	; (8003094 <__libc_init_array+0x3c>)
 8003060:	1b64      	subs	r4, r4, r5
 8003062:	10a4      	asrs	r4, r4, #2
 8003064:	42a6      	cmp	r6, r4
 8003066:	d109      	bne.n	800307c <__libc_init_array+0x24>
 8003068:	f001 f806 	bl	8004078 <_init>
 800306c:	2600      	movs	r6, #0
 800306e:	4d0a      	ldr	r5, [pc, #40]	; (8003098 <__libc_init_array+0x40>)
 8003070:	4c0a      	ldr	r4, [pc, #40]	; (800309c <__libc_init_array+0x44>)
 8003072:	1b64      	subs	r4, r4, r5
 8003074:	10a4      	asrs	r4, r4, #2
 8003076:	42a6      	cmp	r6, r4
 8003078:	d105      	bne.n	8003086 <__libc_init_array+0x2e>
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003080:	4798      	blx	r3
 8003082:	3601      	adds	r6, #1
 8003084:	e7ee      	b.n	8003064 <__libc_init_array+0xc>
 8003086:	f855 3b04 	ldr.w	r3, [r5], #4
 800308a:	4798      	blx	r3
 800308c:	3601      	adds	r6, #1
 800308e:	e7f2      	b.n	8003076 <__libc_init_array+0x1e>
 8003090:	0800420c 	.word	0x0800420c
 8003094:	0800420c 	.word	0x0800420c
 8003098:	0800420c 	.word	0x0800420c
 800309c:	08004210 	.word	0x08004210

080030a0 <memcmp>:
 80030a0:	b530      	push	{r4, r5, lr}
 80030a2:	2400      	movs	r4, #0
 80030a4:	3901      	subs	r1, #1
 80030a6:	42a2      	cmp	r2, r4
 80030a8:	d101      	bne.n	80030ae <memcmp+0xe>
 80030aa:	2000      	movs	r0, #0
 80030ac:	e005      	b.n	80030ba <memcmp+0x1a>
 80030ae:	5d03      	ldrb	r3, [r0, r4]
 80030b0:	3401      	adds	r4, #1
 80030b2:	5d0d      	ldrb	r5, [r1, r4]
 80030b4:	42ab      	cmp	r3, r5
 80030b6:	d0f6      	beq.n	80030a6 <memcmp+0x6>
 80030b8:	1b58      	subs	r0, r3, r5
 80030ba:	bd30      	pop	{r4, r5, pc}

080030bc <memset>:
 80030bc:	4603      	mov	r3, r0
 80030be:	4402      	add	r2, r0
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d100      	bne.n	80030c6 <memset+0xa>
 80030c4:	4770      	bx	lr
 80030c6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ca:	e7f9      	b.n	80030c0 <memset+0x4>

080030cc <iprintf>:
 80030cc:	b40f      	push	{r0, r1, r2, r3}
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <iprintf+0x2c>)
 80030d0:	b513      	push	{r0, r1, r4, lr}
 80030d2:	681c      	ldr	r4, [r3, #0]
 80030d4:	b124      	cbz	r4, 80030e0 <iprintf+0x14>
 80030d6:	69a3      	ldr	r3, [r4, #24]
 80030d8:	b913      	cbnz	r3, 80030e0 <iprintf+0x14>
 80030da:	4620      	mov	r0, r4
 80030dc:	f000 fa5e 	bl	800359c <__sinit>
 80030e0:	ab05      	add	r3, sp, #20
 80030e2:	4620      	mov	r0, r4
 80030e4:	9a04      	ldr	r2, [sp, #16]
 80030e6:	68a1      	ldr	r1, [r4, #8]
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	f000 fc29 	bl	8003940 <_vfiprintf_r>
 80030ee:	b002      	add	sp, #8
 80030f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030f4:	b004      	add	sp, #16
 80030f6:	4770      	bx	lr
 80030f8:	2000000c 	.word	0x2000000c

080030fc <_puts_r>:
 80030fc:	b570      	push	{r4, r5, r6, lr}
 80030fe:	460e      	mov	r6, r1
 8003100:	4605      	mov	r5, r0
 8003102:	b118      	cbz	r0, 800310c <_puts_r+0x10>
 8003104:	6983      	ldr	r3, [r0, #24]
 8003106:	b90b      	cbnz	r3, 800310c <_puts_r+0x10>
 8003108:	f000 fa48 	bl	800359c <__sinit>
 800310c:	69ab      	ldr	r3, [r5, #24]
 800310e:	68ac      	ldr	r4, [r5, #8]
 8003110:	b913      	cbnz	r3, 8003118 <_puts_r+0x1c>
 8003112:	4628      	mov	r0, r5
 8003114:	f000 fa42 	bl	800359c <__sinit>
 8003118:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <_puts_r+0xd0>)
 800311a:	429c      	cmp	r4, r3
 800311c:	d120      	bne.n	8003160 <_puts_r+0x64>
 800311e:	686c      	ldr	r4, [r5, #4]
 8003120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003122:	07db      	lsls	r3, r3, #31
 8003124:	d405      	bmi.n	8003132 <_puts_r+0x36>
 8003126:	89a3      	ldrh	r3, [r4, #12]
 8003128:	0598      	lsls	r0, r3, #22
 800312a:	d402      	bmi.n	8003132 <_puts_r+0x36>
 800312c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800312e:	f000 fad3 	bl	80036d8 <__retarget_lock_acquire_recursive>
 8003132:	89a3      	ldrh	r3, [r4, #12]
 8003134:	0719      	lsls	r1, r3, #28
 8003136:	d51d      	bpl.n	8003174 <_puts_r+0x78>
 8003138:	6923      	ldr	r3, [r4, #16]
 800313a:	b1db      	cbz	r3, 8003174 <_puts_r+0x78>
 800313c:	3e01      	subs	r6, #1
 800313e:	68a3      	ldr	r3, [r4, #8]
 8003140:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003144:	3b01      	subs	r3, #1
 8003146:	60a3      	str	r3, [r4, #8]
 8003148:	bb39      	cbnz	r1, 800319a <_puts_r+0x9e>
 800314a:	2b00      	cmp	r3, #0
 800314c:	da38      	bge.n	80031c0 <_puts_r+0xc4>
 800314e:	4622      	mov	r2, r4
 8003150:	210a      	movs	r1, #10
 8003152:	4628      	mov	r0, r5
 8003154:	f000 f848 	bl	80031e8 <__swbuf_r>
 8003158:	3001      	adds	r0, #1
 800315a:	d011      	beq.n	8003180 <_puts_r+0x84>
 800315c:	250a      	movs	r5, #10
 800315e:	e011      	b.n	8003184 <_puts_r+0x88>
 8003160:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <_puts_r+0xd4>)
 8003162:	429c      	cmp	r4, r3
 8003164:	d101      	bne.n	800316a <_puts_r+0x6e>
 8003166:	68ac      	ldr	r4, [r5, #8]
 8003168:	e7da      	b.n	8003120 <_puts_r+0x24>
 800316a:	4b1a      	ldr	r3, [pc, #104]	; (80031d4 <_puts_r+0xd8>)
 800316c:	429c      	cmp	r4, r3
 800316e:	bf08      	it	eq
 8003170:	68ec      	ldreq	r4, [r5, #12]
 8003172:	e7d5      	b.n	8003120 <_puts_r+0x24>
 8003174:	4621      	mov	r1, r4
 8003176:	4628      	mov	r0, r5
 8003178:	f000 f888 	bl	800328c <__swsetup_r>
 800317c:	2800      	cmp	r0, #0
 800317e:	d0dd      	beq.n	800313c <_puts_r+0x40>
 8003180:	f04f 35ff 	mov.w	r5, #4294967295
 8003184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003186:	07da      	lsls	r2, r3, #31
 8003188:	d405      	bmi.n	8003196 <_puts_r+0x9a>
 800318a:	89a3      	ldrh	r3, [r4, #12]
 800318c:	059b      	lsls	r3, r3, #22
 800318e:	d402      	bmi.n	8003196 <_puts_r+0x9a>
 8003190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003192:	f000 faa2 	bl	80036da <__retarget_lock_release_recursive>
 8003196:	4628      	mov	r0, r5
 8003198:	bd70      	pop	{r4, r5, r6, pc}
 800319a:	2b00      	cmp	r3, #0
 800319c:	da04      	bge.n	80031a8 <_puts_r+0xac>
 800319e:	69a2      	ldr	r2, [r4, #24]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	dc06      	bgt.n	80031b2 <_puts_r+0xb6>
 80031a4:	290a      	cmp	r1, #10
 80031a6:	d004      	beq.n	80031b2 <_puts_r+0xb6>
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	6022      	str	r2, [r4, #0]
 80031ae:	7019      	strb	r1, [r3, #0]
 80031b0:	e7c5      	b.n	800313e <_puts_r+0x42>
 80031b2:	4622      	mov	r2, r4
 80031b4:	4628      	mov	r0, r5
 80031b6:	f000 f817 	bl	80031e8 <__swbuf_r>
 80031ba:	3001      	adds	r0, #1
 80031bc:	d1bf      	bne.n	800313e <_puts_r+0x42>
 80031be:	e7df      	b.n	8003180 <_puts_r+0x84>
 80031c0:	250a      	movs	r5, #10
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	6022      	str	r2, [r4, #0]
 80031c8:	701d      	strb	r5, [r3, #0]
 80031ca:	e7db      	b.n	8003184 <_puts_r+0x88>
 80031cc:	08004198 	.word	0x08004198
 80031d0:	080041b8 	.word	0x080041b8
 80031d4:	08004178 	.word	0x08004178

080031d8 <puts>:
 80031d8:	4b02      	ldr	r3, [pc, #8]	; (80031e4 <puts+0xc>)
 80031da:	4601      	mov	r1, r0
 80031dc:	6818      	ldr	r0, [r3, #0]
 80031de:	f7ff bf8d 	b.w	80030fc <_puts_r>
 80031e2:	bf00      	nop
 80031e4:	2000000c 	.word	0x2000000c

080031e8 <__swbuf_r>:
 80031e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ea:	460e      	mov	r6, r1
 80031ec:	4614      	mov	r4, r2
 80031ee:	4605      	mov	r5, r0
 80031f0:	b118      	cbz	r0, 80031fa <__swbuf_r+0x12>
 80031f2:	6983      	ldr	r3, [r0, #24]
 80031f4:	b90b      	cbnz	r3, 80031fa <__swbuf_r+0x12>
 80031f6:	f000 f9d1 	bl	800359c <__sinit>
 80031fa:	4b21      	ldr	r3, [pc, #132]	; (8003280 <__swbuf_r+0x98>)
 80031fc:	429c      	cmp	r4, r3
 80031fe:	d12b      	bne.n	8003258 <__swbuf_r+0x70>
 8003200:	686c      	ldr	r4, [r5, #4]
 8003202:	69a3      	ldr	r3, [r4, #24]
 8003204:	60a3      	str	r3, [r4, #8]
 8003206:	89a3      	ldrh	r3, [r4, #12]
 8003208:	071a      	lsls	r2, r3, #28
 800320a:	d52f      	bpl.n	800326c <__swbuf_r+0x84>
 800320c:	6923      	ldr	r3, [r4, #16]
 800320e:	b36b      	cbz	r3, 800326c <__swbuf_r+0x84>
 8003210:	6923      	ldr	r3, [r4, #16]
 8003212:	6820      	ldr	r0, [r4, #0]
 8003214:	b2f6      	uxtb	r6, r6
 8003216:	1ac0      	subs	r0, r0, r3
 8003218:	6963      	ldr	r3, [r4, #20]
 800321a:	4637      	mov	r7, r6
 800321c:	4283      	cmp	r3, r0
 800321e:	dc04      	bgt.n	800322a <__swbuf_r+0x42>
 8003220:	4621      	mov	r1, r4
 8003222:	4628      	mov	r0, r5
 8003224:	f000 f926 	bl	8003474 <_fflush_r>
 8003228:	bb30      	cbnz	r0, 8003278 <__swbuf_r+0x90>
 800322a:	68a3      	ldr	r3, [r4, #8]
 800322c:	3001      	adds	r0, #1
 800322e:	3b01      	subs	r3, #1
 8003230:	60a3      	str	r3, [r4, #8]
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	6022      	str	r2, [r4, #0]
 8003238:	701e      	strb	r6, [r3, #0]
 800323a:	6963      	ldr	r3, [r4, #20]
 800323c:	4283      	cmp	r3, r0
 800323e:	d004      	beq.n	800324a <__swbuf_r+0x62>
 8003240:	89a3      	ldrh	r3, [r4, #12]
 8003242:	07db      	lsls	r3, r3, #31
 8003244:	d506      	bpl.n	8003254 <__swbuf_r+0x6c>
 8003246:	2e0a      	cmp	r6, #10
 8003248:	d104      	bne.n	8003254 <__swbuf_r+0x6c>
 800324a:	4621      	mov	r1, r4
 800324c:	4628      	mov	r0, r5
 800324e:	f000 f911 	bl	8003474 <_fflush_r>
 8003252:	b988      	cbnz	r0, 8003278 <__swbuf_r+0x90>
 8003254:	4638      	mov	r0, r7
 8003256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <__swbuf_r+0x9c>)
 800325a:	429c      	cmp	r4, r3
 800325c:	d101      	bne.n	8003262 <__swbuf_r+0x7a>
 800325e:	68ac      	ldr	r4, [r5, #8]
 8003260:	e7cf      	b.n	8003202 <__swbuf_r+0x1a>
 8003262:	4b09      	ldr	r3, [pc, #36]	; (8003288 <__swbuf_r+0xa0>)
 8003264:	429c      	cmp	r4, r3
 8003266:	bf08      	it	eq
 8003268:	68ec      	ldreq	r4, [r5, #12]
 800326a:	e7ca      	b.n	8003202 <__swbuf_r+0x1a>
 800326c:	4621      	mov	r1, r4
 800326e:	4628      	mov	r0, r5
 8003270:	f000 f80c 	bl	800328c <__swsetup_r>
 8003274:	2800      	cmp	r0, #0
 8003276:	d0cb      	beq.n	8003210 <__swbuf_r+0x28>
 8003278:	f04f 37ff 	mov.w	r7, #4294967295
 800327c:	e7ea      	b.n	8003254 <__swbuf_r+0x6c>
 800327e:	bf00      	nop
 8003280:	08004198 	.word	0x08004198
 8003284:	080041b8 	.word	0x080041b8
 8003288:	08004178 	.word	0x08004178

0800328c <__swsetup_r>:
 800328c:	4b32      	ldr	r3, [pc, #200]	; (8003358 <__swsetup_r+0xcc>)
 800328e:	b570      	push	{r4, r5, r6, lr}
 8003290:	681d      	ldr	r5, [r3, #0]
 8003292:	4606      	mov	r6, r0
 8003294:	460c      	mov	r4, r1
 8003296:	b125      	cbz	r5, 80032a2 <__swsetup_r+0x16>
 8003298:	69ab      	ldr	r3, [r5, #24]
 800329a:	b913      	cbnz	r3, 80032a2 <__swsetup_r+0x16>
 800329c:	4628      	mov	r0, r5
 800329e:	f000 f97d 	bl	800359c <__sinit>
 80032a2:	4b2e      	ldr	r3, [pc, #184]	; (800335c <__swsetup_r+0xd0>)
 80032a4:	429c      	cmp	r4, r3
 80032a6:	d10f      	bne.n	80032c8 <__swsetup_r+0x3c>
 80032a8:	686c      	ldr	r4, [r5, #4]
 80032aa:	89a3      	ldrh	r3, [r4, #12]
 80032ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80032b0:	0719      	lsls	r1, r3, #28
 80032b2:	d42c      	bmi.n	800330e <__swsetup_r+0x82>
 80032b4:	06dd      	lsls	r5, r3, #27
 80032b6:	d411      	bmi.n	80032dc <__swsetup_r+0x50>
 80032b8:	2309      	movs	r3, #9
 80032ba:	6033      	str	r3, [r6, #0]
 80032bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80032c0:	f04f 30ff 	mov.w	r0, #4294967295
 80032c4:	81a3      	strh	r3, [r4, #12]
 80032c6:	e03e      	b.n	8003346 <__swsetup_r+0xba>
 80032c8:	4b25      	ldr	r3, [pc, #148]	; (8003360 <__swsetup_r+0xd4>)
 80032ca:	429c      	cmp	r4, r3
 80032cc:	d101      	bne.n	80032d2 <__swsetup_r+0x46>
 80032ce:	68ac      	ldr	r4, [r5, #8]
 80032d0:	e7eb      	b.n	80032aa <__swsetup_r+0x1e>
 80032d2:	4b24      	ldr	r3, [pc, #144]	; (8003364 <__swsetup_r+0xd8>)
 80032d4:	429c      	cmp	r4, r3
 80032d6:	bf08      	it	eq
 80032d8:	68ec      	ldreq	r4, [r5, #12]
 80032da:	e7e6      	b.n	80032aa <__swsetup_r+0x1e>
 80032dc:	0758      	lsls	r0, r3, #29
 80032de:	d512      	bpl.n	8003306 <__swsetup_r+0x7a>
 80032e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032e2:	b141      	cbz	r1, 80032f6 <__swsetup_r+0x6a>
 80032e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032e8:	4299      	cmp	r1, r3
 80032ea:	d002      	beq.n	80032f2 <__swsetup_r+0x66>
 80032ec:	4630      	mov	r0, r6
 80032ee:	f000 fa59 	bl	80037a4 <_free_r>
 80032f2:	2300      	movs	r3, #0
 80032f4:	6363      	str	r3, [r4, #52]	; 0x34
 80032f6:	89a3      	ldrh	r3, [r4, #12]
 80032f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032fc:	81a3      	strh	r3, [r4, #12]
 80032fe:	2300      	movs	r3, #0
 8003300:	6063      	str	r3, [r4, #4]
 8003302:	6923      	ldr	r3, [r4, #16]
 8003304:	6023      	str	r3, [r4, #0]
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	f043 0308 	orr.w	r3, r3, #8
 800330c:	81a3      	strh	r3, [r4, #12]
 800330e:	6923      	ldr	r3, [r4, #16]
 8003310:	b94b      	cbnz	r3, 8003326 <__swsetup_r+0x9a>
 8003312:	89a3      	ldrh	r3, [r4, #12]
 8003314:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800331c:	d003      	beq.n	8003326 <__swsetup_r+0x9a>
 800331e:	4621      	mov	r1, r4
 8003320:	4630      	mov	r0, r6
 8003322:	f000 f9ff 	bl	8003724 <__smakebuf_r>
 8003326:	89a0      	ldrh	r0, [r4, #12]
 8003328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800332c:	f010 0301 	ands.w	r3, r0, #1
 8003330:	d00a      	beq.n	8003348 <__swsetup_r+0xbc>
 8003332:	2300      	movs	r3, #0
 8003334:	60a3      	str	r3, [r4, #8]
 8003336:	6963      	ldr	r3, [r4, #20]
 8003338:	425b      	negs	r3, r3
 800333a:	61a3      	str	r3, [r4, #24]
 800333c:	6923      	ldr	r3, [r4, #16]
 800333e:	b943      	cbnz	r3, 8003352 <__swsetup_r+0xc6>
 8003340:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003344:	d1ba      	bne.n	80032bc <__swsetup_r+0x30>
 8003346:	bd70      	pop	{r4, r5, r6, pc}
 8003348:	0781      	lsls	r1, r0, #30
 800334a:	bf58      	it	pl
 800334c:	6963      	ldrpl	r3, [r4, #20]
 800334e:	60a3      	str	r3, [r4, #8]
 8003350:	e7f4      	b.n	800333c <__swsetup_r+0xb0>
 8003352:	2000      	movs	r0, #0
 8003354:	e7f7      	b.n	8003346 <__swsetup_r+0xba>
 8003356:	bf00      	nop
 8003358:	2000000c 	.word	0x2000000c
 800335c:	08004198 	.word	0x08004198
 8003360:	080041b8 	.word	0x080041b8
 8003364:	08004178 	.word	0x08004178

08003368 <__sflush_r>:
 8003368:	898a      	ldrh	r2, [r1, #12]
 800336a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800336e:	4605      	mov	r5, r0
 8003370:	0710      	lsls	r0, r2, #28
 8003372:	460c      	mov	r4, r1
 8003374:	d458      	bmi.n	8003428 <__sflush_r+0xc0>
 8003376:	684b      	ldr	r3, [r1, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	dc05      	bgt.n	8003388 <__sflush_r+0x20>
 800337c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800337e:	2b00      	cmp	r3, #0
 8003380:	dc02      	bgt.n	8003388 <__sflush_r+0x20>
 8003382:	2000      	movs	r0, #0
 8003384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800338a:	2e00      	cmp	r6, #0
 800338c:	d0f9      	beq.n	8003382 <__sflush_r+0x1a>
 800338e:	2300      	movs	r3, #0
 8003390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003394:	682f      	ldr	r7, [r5, #0]
 8003396:	602b      	str	r3, [r5, #0]
 8003398:	d032      	beq.n	8003400 <__sflush_r+0x98>
 800339a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800339c:	89a3      	ldrh	r3, [r4, #12]
 800339e:	075a      	lsls	r2, r3, #29
 80033a0:	d505      	bpl.n	80033ae <__sflush_r+0x46>
 80033a2:	6863      	ldr	r3, [r4, #4]
 80033a4:	1ac0      	subs	r0, r0, r3
 80033a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033a8:	b10b      	cbz	r3, 80033ae <__sflush_r+0x46>
 80033aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033ac:	1ac0      	subs	r0, r0, r3
 80033ae:	2300      	movs	r3, #0
 80033b0:	4602      	mov	r2, r0
 80033b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033b4:	4628      	mov	r0, r5
 80033b6:	6a21      	ldr	r1, [r4, #32]
 80033b8:	47b0      	blx	r6
 80033ba:	1c43      	adds	r3, r0, #1
 80033bc:	89a3      	ldrh	r3, [r4, #12]
 80033be:	d106      	bne.n	80033ce <__sflush_r+0x66>
 80033c0:	6829      	ldr	r1, [r5, #0]
 80033c2:	291d      	cmp	r1, #29
 80033c4:	d82c      	bhi.n	8003420 <__sflush_r+0xb8>
 80033c6:	4a2a      	ldr	r2, [pc, #168]	; (8003470 <__sflush_r+0x108>)
 80033c8:	40ca      	lsrs	r2, r1
 80033ca:	07d6      	lsls	r6, r2, #31
 80033cc:	d528      	bpl.n	8003420 <__sflush_r+0xb8>
 80033ce:	2200      	movs	r2, #0
 80033d0:	6062      	str	r2, [r4, #4]
 80033d2:	6922      	ldr	r2, [r4, #16]
 80033d4:	04d9      	lsls	r1, r3, #19
 80033d6:	6022      	str	r2, [r4, #0]
 80033d8:	d504      	bpl.n	80033e4 <__sflush_r+0x7c>
 80033da:	1c42      	adds	r2, r0, #1
 80033dc:	d101      	bne.n	80033e2 <__sflush_r+0x7a>
 80033de:	682b      	ldr	r3, [r5, #0]
 80033e0:	b903      	cbnz	r3, 80033e4 <__sflush_r+0x7c>
 80033e2:	6560      	str	r0, [r4, #84]	; 0x54
 80033e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033e6:	602f      	str	r7, [r5, #0]
 80033e8:	2900      	cmp	r1, #0
 80033ea:	d0ca      	beq.n	8003382 <__sflush_r+0x1a>
 80033ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033f0:	4299      	cmp	r1, r3
 80033f2:	d002      	beq.n	80033fa <__sflush_r+0x92>
 80033f4:	4628      	mov	r0, r5
 80033f6:	f000 f9d5 	bl	80037a4 <_free_r>
 80033fa:	2000      	movs	r0, #0
 80033fc:	6360      	str	r0, [r4, #52]	; 0x34
 80033fe:	e7c1      	b.n	8003384 <__sflush_r+0x1c>
 8003400:	6a21      	ldr	r1, [r4, #32]
 8003402:	2301      	movs	r3, #1
 8003404:	4628      	mov	r0, r5
 8003406:	47b0      	blx	r6
 8003408:	1c41      	adds	r1, r0, #1
 800340a:	d1c7      	bne.n	800339c <__sflush_r+0x34>
 800340c:	682b      	ldr	r3, [r5, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0c4      	beq.n	800339c <__sflush_r+0x34>
 8003412:	2b1d      	cmp	r3, #29
 8003414:	d001      	beq.n	800341a <__sflush_r+0xb2>
 8003416:	2b16      	cmp	r3, #22
 8003418:	d101      	bne.n	800341e <__sflush_r+0xb6>
 800341a:	602f      	str	r7, [r5, #0]
 800341c:	e7b1      	b.n	8003382 <__sflush_r+0x1a>
 800341e:	89a3      	ldrh	r3, [r4, #12]
 8003420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003424:	81a3      	strh	r3, [r4, #12]
 8003426:	e7ad      	b.n	8003384 <__sflush_r+0x1c>
 8003428:	690f      	ldr	r7, [r1, #16]
 800342a:	2f00      	cmp	r7, #0
 800342c:	d0a9      	beq.n	8003382 <__sflush_r+0x1a>
 800342e:	0793      	lsls	r3, r2, #30
 8003430:	bf18      	it	ne
 8003432:	2300      	movne	r3, #0
 8003434:	680e      	ldr	r6, [r1, #0]
 8003436:	bf08      	it	eq
 8003438:	694b      	ldreq	r3, [r1, #20]
 800343a:	eba6 0807 	sub.w	r8, r6, r7
 800343e:	600f      	str	r7, [r1, #0]
 8003440:	608b      	str	r3, [r1, #8]
 8003442:	f1b8 0f00 	cmp.w	r8, #0
 8003446:	dd9c      	ble.n	8003382 <__sflush_r+0x1a>
 8003448:	4643      	mov	r3, r8
 800344a:	463a      	mov	r2, r7
 800344c:	4628      	mov	r0, r5
 800344e:	6a21      	ldr	r1, [r4, #32]
 8003450:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003452:	47b0      	blx	r6
 8003454:	2800      	cmp	r0, #0
 8003456:	dc06      	bgt.n	8003466 <__sflush_r+0xfe>
 8003458:	89a3      	ldrh	r3, [r4, #12]
 800345a:	f04f 30ff 	mov.w	r0, #4294967295
 800345e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003462:	81a3      	strh	r3, [r4, #12]
 8003464:	e78e      	b.n	8003384 <__sflush_r+0x1c>
 8003466:	4407      	add	r7, r0
 8003468:	eba8 0800 	sub.w	r8, r8, r0
 800346c:	e7e9      	b.n	8003442 <__sflush_r+0xda>
 800346e:	bf00      	nop
 8003470:	20400001 	.word	0x20400001

08003474 <_fflush_r>:
 8003474:	b538      	push	{r3, r4, r5, lr}
 8003476:	690b      	ldr	r3, [r1, #16]
 8003478:	4605      	mov	r5, r0
 800347a:	460c      	mov	r4, r1
 800347c:	b913      	cbnz	r3, 8003484 <_fflush_r+0x10>
 800347e:	2500      	movs	r5, #0
 8003480:	4628      	mov	r0, r5
 8003482:	bd38      	pop	{r3, r4, r5, pc}
 8003484:	b118      	cbz	r0, 800348e <_fflush_r+0x1a>
 8003486:	6983      	ldr	r3, [r0, #24]
 8003488:	b90b      	cbnz	r3, 800348e <_fflush_r+0x1a>
 800348a:	f000 f887 	bl	800359c <__sinit>
 800348e:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <_fflush_r+0x6c>)
 8003490:	429c      	cmp	r4, r3
 8003492:	d11b      	bne.n	80034cc <_fflush_r+0x58>
 8003494:	686c      	ldr	r4, [r5, #4]
 8003496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0ef      	beq.n	800347e <_fflush_r+0xa>
 800349e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80034a0:	07d0      	lsls	r0, r2, #31
 80034a2:	d404      	bmi.n	80034ae <_fflush_r+0x3a>
 80034a4:	0599      	lsls	r1, r3, #22
 80034a6:	d402      	bmi.n	80034ae <_fflush_r+0x3a>
 80034a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034aa:	f000 f915 	bl	80036d8 <__retarget_lock_acquire_recursive>
 80034ae:	4628      	mov	r0, r5
 80034b0:	4621      	mov	r1, r4
 80034b2:	f7ff ff59 	bl	8003368 <__sflush_r>
 80034b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80034b8:	4605      	mov	r5, r0
 80034ba:	07da      	lsls	r2, r3, #31
 80034bc:	d4e0      	bmi.n	8003480 <_fflush_r+0xc>
 80034be:	89a3      	ldrh	r3, [r4, #12]
 80034c0:	059b      	lsls	r3, r3, #22
 80034c2:	d4dd      	bmi.n	8003480 <_fflush_r+0xc>
 80034c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80034c6:	f000 f908 	bl	80036da <__retarget_lock_release_recursive>
 80034ca:	e7d9      	b.n	8003480 <_fflush_r+0xc>
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <_fflush_r+0x70>)
 80034ce:	429c      	cmp	r4, r3
 80034d0:	d101      	bne.n	80034d6 <_fflush_r+0x62>
 80034d2:	68ac      	ldr	r4, [r5, #8]
 80034d4:	e7df      	b.n	8003496 <_fflush_r+0x22>
 80034d6:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <_fflush_r+0x74>)
 80034d8:	429c      	cmp	r4, r3
 80034da:	bf08      	it	eq
 80034dc:	68ec      	ldreq	r4, [r5, #12]
 80034de:	e7da      	b.n	8003496 <_fflush_r+0x22>
 80034e0:	08004198 	.word	0x08004198
 80034e4:	080041b8 	.word	0x080041b8
 80034e8:	08004178 	.word	0x08004178

080034ec <std>:
 80034ec:	2300      	movs	r3, #0
 80034ee:	b510      	push	{r4, lr}
 80034f0:	4604      	mov	r4, r0
 80034f2:	e9c0 3300 	strd	r3, r3, [r0]
 80034f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034fa:	6083      	str	r3, [r0, #8]
 80034fc:	8181      	strh	r1, [r0, #12]
 80034fe:	6643      	str	r3, [r0, #100]	; 0x64
 8003500:	81c2      	strh	r2, [r0, #14]
 8003502:	6183      	str	r3, [r0, #24]
 8003504:	4619      	mov	r1, r3
 8003506:	2208      	movs	r2, #8
 8003508:	305c      	adds	r0, #92	; 0x5c
 800350a:	f7ff fdd7 	bl	80030bc <memset>
 800350e:	4b05      	ldr	r3, [pc, #20]	; (8003524 <std+0x38>)
 8003510:	6224      	str	r4, [r4, #32]
 8003512:	6263      	str	r3, [r4, #36]	; 0x24
 8003514:	4b04      	ldr	r3, [pc, #16]	; (8003528 <std+0x3c>)
 8003516:	62a3      	str	r3, [r4, #40]	; 0x28
 8003518:	4b04      	ldr	r3, [pc, #16]	; (800352c <std+0x40>)
 800351a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800351c:	4b04      	ldr	r3, [pc, #16]	; (8003530 <std+0x44>)
 800351e:	6323      	str	r3, [r4, #48]	; 0x30
 8003520:	bd10      	pop	{r4, pc}
 8003522:	bf00      	nop
 8003524:	08003eed 	.word	0x08003eed
 8003528:	08003f0f 	.word	0x08003f0f
 800352c:	08003f47 	.word	0x08003f47
 8003530:	08003f6b 	.word	0x08003f6b

08003534 <_cleanup_r>:
 8003534:	4901      	ldr	r1, [pc, #4]	; (800353c <_cleanup_r+0x8>)
 8003536:	f000 b8af 	b.w	8003698 <_fwalk_reent>
 800353a:	bf00      	nop
 800353c:	08003475 	.word	0x08003475

08003540 <__sfmoreglue>:
 8003540:	b570      	push	{r4, r5, r6, lr}
 8003542:	2568      	movs	r5, #104	; 0x68
 8003544:	1e4a      	subs	r2, r1, #1
 8003546:	4355      	muls	r5, r2
 8003548:	460e      	mov	r6, r1
 800354a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800354e:	f000 f975 	bl	800383c <_malloc_r>
 8003552:	4604      	mov	r4, r0
 8003554:	b140      	cbz	r0, 8003568 <__sfmoreglue+0x28>
 8003556:	2100      	movs	r1, #0
 8003558:	e9c0 1600 	strd	r1, r6, [r0]
 800355c:	300c      	adds	r0, #12
 800355e:	60a0      	str	r0, [r4, #8]
 8003560:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003564:	f7ff fdaa 	bl	80030bc <memset>
 8003568:	4620      	mov	r0, r4
 800356a:	bd70      	pop	{r4, r5, r6, pc}

0800356c <__sfp_lock_acquire>:
 800356c:	4801      	ldr	r0, [pc, #4]	; (8003574 <__sfp_lock_acquire+0x8>)
 800356e:	f000 b8b3 	b.w	80036d8 <__retarget_lock_acquire_recursive>
 8003572:	bf00      	nop
 8003574:	200003ac 	.word	0x200003ac

08003578 <__sfp_lock_release>:
 8003578:	4801      	ldr	r0, [pc, #4]	; (8003580 <__sfp_lock_release+0x8>)
 800357a:	f000 b8ae 	b.w	80036da <__retarget_lock_release_recursive>
 800357e:	bf00      	nop
 8003580:	200003ac 	.word	0x200003ac

08003584 <__sinit_lock_acquire>:
 8003584:	4801      	ldr	r0, [pc, #4]	; (800358c <__sinit_lock_acquire+0x8>)
 8003586:	f000 b8a7 	b.w	80036d8 <__retarget_lock_acquire_recursive>
 800358a:	bf00      	nop
 800358c:	200003a7 	.word	0x200003a7

08003590 <__sinit_lock_release>:
 8003590:	4801      	ldr	r0, [pc, #4]	; (8003598 <__sinit_lock_release+0x8>)
 8003592:	f000 b8a2 	b.w	80036da <__retarget_lock_release_recursive>
 8003596:	bf00      	nop
 8003598:	200003a7 	.word	0x200003a7

0800359c <__sinit>:
 800359c:	b510      	push	{r4, lr}
 800359e:	4604      	mov	r4, r0
 80035a0:	f7ff fff0 	bl	8003584 <__sinit_lock_acquire>
 80035a4:	69a3      	ldr	r3, [r4, #24]
 80035a6:	b11b      	cbz	r3, 80035b0 <__sinit+0x14>
 80035a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035ac:	f7ff bff0 	b.w	8003590 <__sinit_lock_release>
 80035b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80035b4:	6523      	str	r3, [r4, #80]	; 0x50
 80035b6:	4b13      	ldr	r3, [pc, #76]	; (8003604 <__sinit+0x68>)
 80035b8:	4a13      	ldr	r2, [pc, #76]	; (8003608 <__sinit+0x6c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80035be:	42a3      	cmp	r3, r4
 80035c0:	bf08      	it	eq
 80035c2:	2301      	moveq	r3, #1
 80035c4:	4620      	mov	r0, r4
 80035c6:	bf08      	it	eq
 80035c8:	61a3      	streq	r3, [r4, #24]
 80035ca:	f000 f81f 	bl	800360c <__sfp>
 80035ce:	6060      	str	r0, [r4, #4]
 80035d0:	4620      	mov	r0, r4
 80035d2:	f000 f81b 	bl	800360c <__sfp>
 80035d6:	60a0      	str	r0, [r4, #8]
 80035d8:	4620      	mov	r0, r4
 80035da:	f000 f817 	bl	800360c <__sfp>
 80035de:	2200      	movs	r2, #0
 80035e0:	2104      	movs	r1, #4
 80035e2:	60e0      	str	r0, [r4, #12]
 80035e4:	6860      	ldr	r0, [r4, #4]
 80035e6:	f7ff ff81 	bl	80034ec <std>
 80035ea:	2201      	movs	r2, #1
 80035ec:	2109      	movs	r1, #9
 80035ee:	68a0      	ldr	r0, [r4, #8]
 80035f0:	f7ff ff7c 	bl	80034ec <std>
 80035f4:	2202      	movs	r2, #2
 80035f6:	2112      	movs	r1, #18
 80035f8:	68e0      	ldr	r0, [r4, #12]
 80035fa:	f7ff ff77 	bl	80034ec <std>
 80035fe:	2301      	movs	r3, #1
 8003600:	61a3      	str	r3, [r4, #24]
 8003602:	e7d1      	b.n	80035a8 <__sinit+0xc>
 8003604:	08004174 	.word	0x08004174
 8003608:	08003535 	.word	0x08003535

0800360c <__sfp>:
 800360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360e:	4607      	mov	r7, r0
 8003610:	f7ff ffac 	bl	800356c <__sfp_lock_acquire>
 8003614:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <__sfp+0x84>)
 8003616:	681e      	ldr	r6, [r3, #0]
 8003618:	69b3      	ldr	r3, [r6, #24]
 800361a:	b913      	cbnz	r3, 8003622 <__sfp+0x16>
 800361c:	4630      	mov	r0, r6
 800361e:	f7ff ffbd 	bl	800359c <__sinit>
 8003622:	3648      	adds	r6, #72	; 0x48
 8003624:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003628:	3b01      	subs	r3, #1
 800362a:	d503      	bpl.n	8003634 <__sfp+0x28>
 800362c:	6833      	ldr	r3, [r6, #0]
 800362e:	b30b      	cbz	r3, 8003674 <__sfp+0x68>
 8003630:	6836      	ldr	r6, [r6, #0]
 8003632:	e7f7      	b.n	8003624 <__sfp+0x18>
 8003634:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003638:	b9d5      	cbnz	r5, 8003670 <__sfp+0x64>
 800363a:	4b16      	ldr	r3, [pc, #88]	; (8003694 <__sfp+0x88>)
 800363c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003640:	60e3      	str	r3, [r4, #12]
 8003642:	6665      	str	r5, [r4, #100]	; 0x64
 8003644:	f000 f847 	bl	80036d6 <__retarget_lock_init_recursive>
 8003648:	f7ff ff96 	bl	8003578 <__sfp_lock_release>
 800364c:	2208      	movs	r2, #8
 800364e:	4629      	mov	r1, r5
 8003650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003658:	6025      	str	r5, [r4, #0]
 800365a:	61a5      	str	r5, [r4, #24]
 800365c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003660:	f7ff fd2c 	bl	80030bc <memset>
 8003664:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003668:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800366c:	4620      	mov	r0, r4
 800366e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003670:	3468      	adds	r4, #104	; 0x68
 8003672:	e7d9      	b.n	8003628 <__sfp+0x1c>
 8003674:	2104      	movs	r1, #4
 8003676:	4638      	mov	r0, r7
 8003678:	f7ff ff62 	bl	8003540 <__sfmoreglue>
 800367c:	4604      	mov	r4, r0
 800367e:	6030      	str	r0, [r6, #0]
 8003680:	2800      	cmp	r0, #0
 8003682:	d1d5      	bne.n	8003630 <__sfp+0x24>
 8003684:	f7ff ff78 	bl	8003578 <__sfp_lock_release>
 8003688:	230c      	movs	r3, #12
 800368a:	603b      	str	r3, [r7, #0]
 800368c:	e7ee      	b.n	800366c <__sfp+0x60>
 800368e:	bf00      	nop
 8003690:	08004174 	.word	0x08004174
 8003694:	ffff0001 	.word	0xffff0001

08003698 <_fwalk_reent>:
 8003698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800369c:	4606      	mov	r6, r0
 800369e:	4688      	mov	r8, r1
 80036a0:	2700      	movs	r7, #0
 80036a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036aa:	f1b9 0901 	subs.w	r9, r9, #1
 80036ae:	d505      	bpl.n	80036bc <_fwalk_reent+0x24>
 80036b0:	6824      	ldr	r4, [r4, #0]
 80036b2:	2c00      	cmp	r4, #0
 80036b4:	d1f7      	bne.n	80036a6 <_fwalk_reent+0xe>
 80036b6:	4638      	mov	r0, r7
 80036b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036bc:	89ab      	ldrh	r3, [r5, #12]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d907      	bls.n	80036d2 <_fwalk_reent+0x3a>
 80036c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036c6:	3301      	adds	r3, #1
 80036c8:	d003      	beq.n	80036d2 <_fwalk_reent+0x3a>
 80036ca:	4629      	mov	r1, r5
 80036cc:	4630      	mov	r0, r6
 80036ce:	47c0      	blx	r8
 80036d0:	4307      	orrs	r7, r0
 80036d2:	3568      	adds	r5, #104	; 0x68
 80036d4:	e7e9      	b.n	80036aa <_fwalk_reent+0x12>

080036d6 <__retarget_lock_init_recursive>:
 80036d6:	4770      	bx	lr

080036d8 <__retarget_lock_acquire_recursive>:
 80036d8:	4770      	bx	lr

080036da <__retarget_lock_release_recursive>:
 80036da:	4770      	bx	lr

080036dc <__swhatbuf_r>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	460e      	mov	r6, r1
 80036e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e4:	4614      	mov	r4, r2
 80036e6:	2900      	cmp	r1, #0
 80036e8:	461d      	mov	r5, r3
 80036ea:	b096      	sub	sp, #88	; 0x58
 80036ec:	da07      	bge.n	80036fe <__swhatbuf_r+0x22>
 80036ee:	2300      	movs	r3, #0
 80036f0:	602b      	str	r3, [r5, #0]
 80036f2:	89b3      	ldrh	r3, [r6, #12]
 80036f4:	061a      	lsls	r2, r3, #24
 80036f6:	d410      	bmi.n	800371a <__swhatbuf_r+0x3e>
 80036f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036fc:	e00e      	b.n	800371c <__swhatbuf_r+0x40>
 80036fe:	466a      	mov	r2, sp
 8003700:	f000 fc5a 	bl	8003fb8 <_fstat_r>
 8003704:	2800      	cmp	r0, #0
 8003706:	dbf2      	blt.n	80036ee <__swhatbuf_r+0x12>
 8003708:	9a01      	ldr	r2, [sp, #4]
 800370a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800370e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003712:	425a      	negs	r2, r3
 8003714:	415a      	adcs	r2, r3
 8003716:	602a      	str	r2, [r5, #0]
 8003718:	e7ee      	b.n	80036f8 <__swhatbuf_r+0x1c>
 800371a:	2340      	movs	r3, #64	; 0x40
 800371c:	2000      	movs	r0, #0
 800371e:	6023      	str	r3, [r4, #0]
 8003720:	b016      	add	sp, #88	; 0x58
 8003722:	bd70      	pop	{r4, r5, r6, pc}

08003724 <__smakebuf_r>:
 8003724:	898b      	ldrh	r3, [r1, #12]
 8003726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003728:	079d      	lsls	r5, r3, #30
 800372a:	4606      	mov	r6, r0
 800372c:	460c      	mov	r4, r1
 800372e:	d507      	bpl.n	8003740 <__smakebuf_r+0x1c>
 8003730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003734:	6023      	str	r3, [r4, #0]
 8003736:	6123      	str	r3, [r4, #16]
 8003738:	2301      	movs	r3, #1
 800373a:	6163      	str	r3, [r4, #20]
 800373c:	b002      	add	sp, #8
 800373e:	bd70      	pop	{r4, r5, r6, pc}
 8003740:	466a      	mov	r2, sp
 8003742:	ab01      	add	r3, sp, #4
 8003744:	f7ff ffca 	bl	80036dc <__swhatbuf_r>
 8003748:	9900      	ldr	r1, [sp, #0]
 800374a:	4605      	mov	r5, r0
 800374c:	4630      	mov	r0, r6
 800374e:	f000 f875 	bl	800383c <_malloc_r>
 8003752:	b948      	cbnz	r0, 8003768 <__smakebuf_r+0x44>
 8003754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003758:	059a      	lsls	r2, r3, #22
 800375a:	d4ef      	bmi.n	800373c <__smakebuf_r+0x18>
 800375c:	f023 0303 	bic.w	r3, r3, #3
 8003760:	f043 0302 	orr.w	r3, r3, #2
 8003764:	81a3      	strh	r3, [r4, #12]
 8003766:	e7e3      	b.n	8003730 <__smakebuf_r+0xc>
 8003768:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <__smakebuf_r+0x7c>)
 800376a:	62b3      	str	r3, [r6, #40]	; 0x28
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	6020      	str	r0, [r4, #0]
 8003770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003774:	81a3      	strh	r3, [r4, #12]
 8003776:	9b00      	ldr	r3, [sp, #0]
 8003778:	6120      	str	r0, [r4, #16]
 800377a:	6163      	str	r3, [r4, #20]
 800377c:	9b01      	ldr	r3, [sp, #4]
 800377e:	b15b      	cbz	r3, 8003798 <__smakebuf_r+0x74>
 8003780:	4630      	mov	r0, r6
 8003782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003786:	f000 fc29 	bl	8003fdc <_isatty_r>
 800378a:	b128      	cbz	r0, 8003798 <__smakebuf_r+0x74>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	f023 0303 	bic.w	r3, r3, #3
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	81a3      	strh	r3, [r4, #12]
 8003798:	89a0      	ldrh	r0, [r4, #12]
 800379a:	4305      	orrs	r5, r0
 800379c:	81a5      	strh	r5, [r4, #12]
 800379e:	e7cd      	b.n	800373c <__smakebuf_r+0x18>
 80037a0:	08003535 	.word	0x08003535

080037a4 <_free_r>:
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	4605      	mov	r5, r0
 80037a8:	2900      	cmp	r1, #0
 80037aa:	d043      	beq.n	8003834 <_free_r+0x90>
 80037ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037b0:	1f0c      	subs	r4, r1, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bfb8      	it	lt
 80037b6:	18e4      	addlt	r4, r4, r3
 80037b8:	f000 fc40 	bl	800403c <__malloc_lock>
 80037bc:	4a1e      	ldr	r2, [pc, #120]	; (8003838 <_free_r+0x94>)
 80037be:	6813      	ldr	r3, [r2, #0]
 80037c0:	4610      	mov	r0, r2
 80037c2:	b933      	cbnz	r3, 80037d2 <_free_r+0x2e>
 80037c4:	6063      	str	r3, [r4, #4]
 80037c6:	6014      	str	r4, [r2, #0]
 80037c8:	4628      	mov	r0, r5
 80037ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ce:	f000 bc3b 	b.w	8004048 <__malloc_unlock>
 80037d2:	42a3      	cmp	r3, r4
 80037d4:	d90a      	bls.n	80037ec <_free_r+0x48>
 80037d6:	6821      	ldr	r1, [r4, #0]
 80037d8:	1862      	adds	r2, r4, r1
 80037da:	4293      	cmp	r3, r2
 80037dc:	bf01      	itttt	eq
 80037de:	681a      	ldreq	r2, [r3, #0]
 80037e0:	685b      	ldreq	r3, [r3, #4]
 80037e2:	1852      	addeq	r2, r2, r1
 80037e4:	6022      	streq	r2, [r4, #0]
 80037e6:	6063      	str	r3, [r4, #4]
 80037e8:	6004      	str	r4, [r0, #0]
 80037ea:	e7ed      	b.n	80037c8 <_free_r+0x24>
 80037ec:	461a      	mov	r2, r3
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	b10b      	cbz	r3, 80037f6 <_free_r+0x52>
 80037f2:	42a3      	cmp	r3, r4
 80037f4:	d9fa      	bls.n	80037ec <_free_r+0x48>
 80037f6:	6811      	ldr	r1, [r2, #0]
 80037f8:	1850      	adds	r0, r2, r1
 80037fa:	42a0      	cmp	r0, r4
 80037fc:	d10b      	bne.n	8003816 <_free_r+0x72>
 80037fe:	6820      	ldr	r0, [r4, #0]
 8003800:	4401      	add	r1, r0
 8003802:	1850      	adds	r0, r2, r1
 8003804:	4283      	cmp	r3, r0
 8003806:	6011      	str	r1, [r2, #0]
 8003808:	d1de      	bne.n	80037c8 <_free_r+0x24>
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4401      	add	r1, r0
 8003810:	6011      	str	r1, [r2, #0]
 8003812:	6053      	str	r3, [r2, #4]
 8003814:	e7d8      	b.n	80037c8 <_free_r+0x24>
 8003816:	d902      	bls.n	800381e <_free_r+0x7a>
 8003818:	230c      	movs	r3, #12
 800381a:	602b      	str	r3, [r5, #0]
 800381c:	e7d4      	b.n	80037c8 <_free_r+0x24>
 800381e:	6820      	ldr	r0, [r4, #0]
 8003820:	1821      	adds	r1, r4, r0
 8003822:	428b      	cmp	r3, r1
 8003824:	bf01      	itttt	eq
 8003826:	6819      	ldreq	r1, [r3, #0]
 8003828:	685b      	ldreq	r3, [r3, #4]
 800382a:	1809      	addeq	r1, r1, r0
 800382c:	6021      	streq	r1, [r4, #0]
 800382e:	6063      	str	r3, [r4, #4]
 8003830:	6054      	str	r4, [r2, #4]
 8003832:	e7c9      	b.n	80037c8 <_free_r+0x24>
 8003834:	bd38      	pop	{r3, r4, r5, pc}
 8003836:	bf00      	nop
 8003838:	20000090 	.word	0x20000090

0800383c <_malloc_r>:
 800383c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383e:	1ccd      	adds	r5, r1, #3
 8003840:	f025 0503 	bic.w	r5, r5, #3
 8003844:	3508      	adds	r5, #8
 8003846:	2d0c      	cmp	r5, #12
 8003848:	bf38      	it	cc
 800384a:	250c      	movcc	r5, #12
 800384c:	2d00      	cmp	r5, #0
 800384e:	4606      	mov	r6, r0
 8003850:	db01      	blt.n	8003856 <_malloc_r+0x1a>
 8003852:	42a9      	cmp	r1, r5
 8003854:	d903      	bls.n	800385e <_malloc_r+0x22>
 8003856:	230c      	movs	r3, #12
 8003858:	6033      	str	r3, [r6, #0]
 800385a:	2000      	movs	r0, #0
 800385c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800385e:	f000 fbed 	bl	800403c <__malloc_lock>
 8003862:	4921      	ldr	r1, [pc, #132]	; (80038e8 <_malloc_r+0xac>)
 8003864:	680a      	ldr	r2, [r1, #0]
 8003866:	4614      	mov	r4, r2
 8003868:	b99c      	cbnz	r4, 8003892 <_malloc_r+0x56>
 800386a:	4f20      	ldr	r7, [pc, #128]	; (80038ec <_malloc_r+0xb0>)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	b923      	cbnz	r3, 800387a <_malloc_r+0x3e>
 8003870:	4621      	mov	r1, r4
 8003872:	4630      	mov	r0, r6
 8003874:	f000 fb2a 	bl	8003ecc <_sbrk_r>
 8003878:	6038      	str	r0, [r7, #0]
 800387a:	4629      	mov	r1, r5
 800387c:	4630      	mov	r0, r6
 800387e:	f000 fb25 	bl	8003ecc <_sbrk_r>
 8003882:	1c43      	adds	r3, r0, #1
 8003884:	d123      	bne.n	80038ce <_malloc_r+0x92>
 8003886:	230c      	movs	r3, #12
 8003888:	4630      	mov	r0, r6
 800388a:	6033      	str	r3, [r6, #0]
 800388c:	f000 fbdc 	bl	8004048 <__malloc_unlock>
 8003890:	e7e3      	b.n	800385a <_malloc_r+0x1e>
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	1b5b      	subs	r3, r3, r5
 8003896:	d417      	bmi.n	80038c8 <_malloc_r+0x8c>
 8003898:	2b0b      	cmp	r3, #11
 800389a:	d903      	bls.n	80038a4 <_malloc_r+0x68>
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	441c      	add	r4, r3
 80038a0:	6025      	str	r5, [r4, #0]
 80038a2:	e004      	b.n	80038ae <_malloc_r+0x72>
 80038a4:	6863      	ldr	r3, [r4, #4]
 80038a6:	42a2      	cmp	r2, r4
 80038a8:	bf0c      	ite	eq
 80038aa:	600b      	streq	r3, [r1, #0]
 80038ac:	6053      	strne	r3, [r2, #4]
 80038ae:	4630      	mov	r0, r6
 80038b0:	f000 fbca 	bl	8004048 <__malloc_unlock>
 80038b4:	f104 000b 	add.w	r0, r4, #11
 80038b8:	1d23      	adds	r3, r4, #4
 80038ba:	f020 0007 	bic.w	r0, r0, #7
 80038be:	1ac2      	subs	r2, r0, r3
 80038c0:	d0cc      	beq.n	800385c <_malloc_r+0x20>
 80038c2:	1a1b      	subs	r3, r3, r0
 80038c4:	50a3      	str	r3, [r4, r2]
 80038c6:	e7c9      	b.n	800385c <_malloc_r+0x20>
 80038c8:	4622      	mov	r2, r4
 80038ca:	6864      	ldr	r4, [r4, #4]
 80038cc:	e7cc      	b.n	8003868 <_malloc_r+0x2c>
 80038ce:	1cc4      	adds	r4, r0, #3
 80038d0:	f024 0403 	bic.w	r4, r4, #3
 80038d4:	42a0      	cmp	r0, r4
 80038d6:	d0e3      	beq.n	80038a0 <_malloc_r+0x64>
 80038d8:	1a21      	subs	r1, r4, r0
 80038da:	4630      	mov	r0, r6
 80038dc:	f000 faf6 	bl	8003ecc <_sbrk_r>
 80038e0:	3001      	adds	r0, #1
 80038e2:	d1dd      	bne.n	80038a0 <_malloc_r+0x64>
 80038e4:	e7cf      	b.n	8003886 <_malloc_r+0x4a>
 80038e6:	bf00      	nop
 80038e8:	20000090 	.word	0x20000090
 80038ec:	20000094 	.word	0x20000094

080038f0 <__sfputc_r>:
 80038f0:	6893      	ldr	r3, [r2, #8]
 80038f2:	b410      	push	{r4}
 80038f4:	3b01      	subs	r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	6093      	str	r3, [r2, #8]
 80038fa:	da07      	bge.n	800390c <__sfputc_r+0x1c>
 80038fc:	6994      	ldr	r4, [r2, #24]
 80038fe:	42a3      	cmp	r3, r4
 8003900:	db01      	blt.n	8003906 <__sfputc_r+0x16>
 8003902:	290a      	cmp	r1, #10
 8003904:	d102      	bne.n	800390c <__sfputc_r+0x1c>
 8003906:	bc10      	pop	{r4}
 8003908:	f7ff bc6e 	b.w	80031e8 <__swbuf_r>
 800390c:	6813      	ldr	r3, [r2, #0]
 800390e:	1c58      	adds	r0, r3, #1
 8003910:	6010      	str	r0, [r2, #0]
 8003912:	7019      	strb	r1, [r3, #0]
 8003914:	4608      	mov	r0, r1
 8003916:	bc10      	pop	{r4}
 8003918:	4770      	bx	lr

0800391a <__sfputs_r>:
 800391a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391c:	4606      	mov	r6, r0
 800391e:	460f      	mov	r7, r1
 8003920:	4614      	mov	r4, r2
 8003922:	18d5      	adds	r5, r2, r3
 8003924:	42ac      	cmp	r4, r5
 8003926:	d101      	bne.n	800392c <__sfputs_r+0x12>
 8003928:	2000      	movs	r0, #0
 800392a:	e007      	b.n	800393c <__sfputs_r+0x22>
 800392c:	463a      	mov	r2, r7
 800392e:	4630      	mov	r0, r6
 8003930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003934:	f7ff ffdc 	bl	80038f0 <__sfputc_r>
 8003938:	1c43      	adds	r3, r0, #1
 800393a:	d1f3      	bne.n	8003924 <__sfputs_r+0xa>
 800393c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003940 <_vfiprintf_r>:
 8003940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003944:	460d      	mov	r5, r1
 8003946:	4614      	mov	r4, r2
 8003948:	4698      	mov	r8, r3
 800394a:	4606      	mov	r6, r0
 800394c:	b09d      	sub	sp, #116	; 0x74
 800394e:	b118      	cbz	r0, 8003958 <_vfiprintf_r+0x18>
 8003950:	6983      	ldr	r3, [r0, #24]
 8003952:	b90b      	cbnz	r3, 8003958 <_vfiprintf_r+0x18>
 8003954:	f7ff fe22 	bl	800359c <__sinit>
 8003958:	4b89      	ldr	r3, [pc, #548]	; (8003b80 <_vfiprintf_r+0x240>)
 800395a:	429d      	cmp	r5, r3
 800395c:	d11b      	bne.n	8003996 <_vfiprintf_r+0x56>
 800395e:	6875      	ldr	r5, [r6, #4]
 8003960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003962:	07d9      	lsls	r1, r3, #31
 8003964:	d405      	bmi.n	8003972 <_vfiprintf_r+0x32>
 8003966:	89ab      	ldrh	r3, [r5, #12]
 8003968:	059a      	lsls	r2, r3, #22
 800396a:	d402      	bmi.n	8003972 <_vfiprintf_r+0x32>
 800396c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800396e:	f7ff feb3 	bl	80036d8 <__retarget_lock_acquire_recursive>
 8003972:	89ab      	ldrh	r3, [r5, #12]
 8003974:	071b      	lsls	r3, r3, #28
 8003976:	d501      	bpl.n	800397c <_vfiprintf_r+0x3c>
 8003978:	692b      	ldr	r3, [r5, #16]
 800397a:	b9eb      	cbnz	r3, 80039b8 <_vfiprintf_r+0x78>
 800397c:	4629      	mov	r1, r5
 800397e:	4630      	mov	r0, r6
 8003980:	f7ff fc84 	bl	800328c <__swsetup_r>
 8003984:	b1c0      	cbz	r0, 80039b8 <_vfiprintf_r+0x78>
 8003986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003988:	07dc      	lsls	r4, r3, #31
 800398a:	d50e      	bpl.n	80039aa <_vfiprintf_r+0x6a>
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	b01d      	add	sp, #116	; 0x74
 8003992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003996:	4b7b      	ldr	r3, [pc, #492]	; (8003b84 <_vfiprintf_r+0x244>)
 8003998:	429d      	cmp	r5, r3
 800399a:	d101      	bne.n	80039a0 <_vfiprintf_r+0x60>
 800399c:	68b5      	ldr	r5, [r6, #8]
 800399e:	e7df      	b.n	8003960 <_vfiprintf_r+0x20>
 80039a0:	4b79      	ldr	r3, [pc, #484]	; (8003b88 <_vfiprintf_r+0x248>)
 80039a2:	429d      	cmp	r5, r3
 80039a4:	bf08      	it	eq
 80039a6:	68f5      	ldreq	r5, [r6, #12]
 80039a8:	e7da      	b.n	8003960 <_vfiprintf_r+0x20>
 80039aa:	89ab      	ldrh	r3, [r5, #12]
 80039ac:	0598      	lsls	r0, r3, #22
 80039ae:	d4ed      	bmi.n	800398c <_vfiprintf_r+0x4c>
 80039b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039b2:	f7ff fe92 	bl	80036da <__retarget_lock_release_recursive>
 80039b6:	e7e9      	b.n	800398c <_vfiprintf_r+0x4c>
 80039b8:	2300      	movs	r3, #0
 80039ba:	9309      	str	r3, [sp, #36]	; 0x24
 80039bc:	2320      	movs	r3, #32
 80039be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039c2:	2330      	movs	r3, #48	; 0x30
 80039c4:	f04f 0901 	mov.w	r9, #1
 80039c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80039cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003b8c <_vfiprintf_r+0x24c>
 80039d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039d4:	4623      	mov	r3, r4
 80039d6:	469a      	mov	sl, r3
 80039d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039dc:	b10a      	cbz	r2, 80039e2 <_vfiprintf_r+0xa2>
 80039de:	2a25      	cmp	r2, #37	; 0x25
 80039e0:	d1f9      	bne.n	80039d6 <_vfiprintf_r+0x96>
 80039e2:	ebba 0b04 	subs.w	fp, sl, r4
 80039e6:	d00b      	beq.n	8003a00 <_vfiprintf_r+0xc0>
 80039e8:	465b      	mov	r3, fp
 80039ea:	4622      	mov	r2, r4
 80039ec:	4629      	mov	r1, r5
 80039ee:	4630      	mov	r0, r6
 80039f0:	f7ff ff93 	bl	800391a <__sfputs_r>
 80039f4:	3001      	adds	r0, #1
 80039f6:	f000 80aa 	beq.w	8003b4e <_vfiprintf_r+0x20e>
 80039fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039fc:	445a      	add	r2, fp
 80039fe:	9209      	str	r2, [sp, #36]	; 0x24
 8003a00:	f89a 3000 	ldrb.w	r3, [sl]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80a2 	beq.w	8003b4e <_vfiprintf_r+0x20e>
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a14:	f10a 0a01 	add.w	sl, sl, #1
 8003a18:	9304      	str	r3, [sp, #16]
 8003a1a:	9307      	str	r3, [sp, #28]
 8003a1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a20:	931a      	str	r3, [sp, #104]	; 0x68
 8003a22:	4654      	mov	r4, sl
 8003a24:	2205      	movs	r2, #5
 8003a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a2a:	4858      	ldr	r0, [pc, #352]	; (8003b8c <_vfiprintf_r+0x24c>)
 8003a2c:	f000 faf8 	bl	8004020 <memchr>
 8003a30:	9a04      	ldr	r2, [sp, #16]
 8003a32:	b9d8      	cbnz	r0, 8003a6c <_vfiprintf_r+0x12c>
 8003a34:	06d1      	lsls	r1, r2, #27
 8003a36:	bf44      	itt	mi
 8003a38:	2320      	movmi	r3, #32
 8003a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a3e:	0713      	lsls	r3, r2, #28
 8003a40:	bf44      	itt	mi
 8003a42:	232b      	movmi	r3, #43	; 0x2b
 8003a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a48:	f89a 3000 	ldrb.w	r3, [sl]
 8003a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8003a4e:	d015      	beq.n	8003a7c <_vfiprintf_r+0x13c>
 8003a50:	4654      	mov	r4, sl
 8003a52:	2000      	movs	r0, #0
 8003a54:	f04f 0c0a 	mov.w	ip, #10
 8003a58:	9a07      	ldr	r2, [sp, #28]
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a60:	3b30      	subs	r3, #48	; 0x30
 8003a62:	2b09      	cmp	r3, #9
 8003a64:	d94e      	bls.n	8003b04 <_vfiprintf_r+0x1c4>
 8003a66:	b1b0      	cbz	r0, 8003a96 <_vfiprintf_r+0x156>
 8003a68:	9207      	str	r2, [sp, #28]
 8003a6a:	e014      	b.n	8003a96 <_vfiprintf_r+0x156>
 8003a6c:	eba0 0308 	sub.w	r3, r0, r8
 8003a70:	fa09 f303 	lsl.w	r3, r9, r3
 8003a74:	4313      	orrs	r3, r2
 8003a76:	46a2      	mov	sl, r4
 8003a78:	9304      	str	r3, [sp, #16]
 8003a7a:	e7d2      	b.n	8003a22 <_vfiprintf_r+0xe2>
 8003a7c:	9b03      	ldr	r3, [sp, #12]
 8003a7e:	1d19      	adds	r1, r3, #4
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	9103      	str	r1, [sp, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bfbb      	ittet	lt
 8003a88:	425b      	neglt	r3, r3
 8003a8a:	f042 0202 	orrlt.w	r2, r2, #2
 8003a8e:	9307      	strge	r3, [sp, #28]
 8003a90:	9307      	strlt	r3, [sp, #28]
 8003a92:	bfb8      	it	lt
 8003a94:	9204      	strlt	r2, [sp, #16]
 8003a96:	7823      	ldrb	r3, [r4, #0]
 8003a98:	2b2e      	cmp	r3, #46	; 0x2e
 8003a9a:	d10c      	bne.n	8003ab6 <_vfiprintf_r+0x176>
 8003a9c:	7863      	ldrb	r3, [r4, #1]
 8003a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8003aa0:	d135      	bne.n	8003b0e <_vfiprintf_r+0x1ce>
 8003aa2:	9b03      	ldr	r3, [sp, #12]
 8003aa4:	3402      	adds	r4, #2
 8003aa6:	1d1a      	adds	r2, r3, #4
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	9203      	str	r2, [sp, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bfb8      	it	lt
 8003ab0:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ab4:	9305      	str	r3, [sp, #20]
 8003ab6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003b9c <_vfiprintf_r+0x25c>
 8003aba:	2203      	movs	r2, #3
 8003abc:	4650      	mov	r0, sl
 8003abe:	7821      	ldrb	r1, [r4, #0]
 8003ac0:	f000 faae 	bl	8004020 <memchr>
 8003ac4:	b140      	cbz	r0, 8003ad8 <_vfiprintf_r+0x198>
 8003ac6:	2340      	movs	r3, #64	; 0x40
 8003ac8:	eba0 000a 	sub.w	r0, r0, sl
 8003acc:	fa03 f000 	lsl.w	r0, r3, r0
 8003ad0:	9b04      	ldr	r3, [sp, #16]
 8003ad2:	3401      	adds	r4, #1
 8003ad4:	4303      	orrs	r3, r0
 8003ad6:	9304      	str	r3, [sp, #16]
 8003ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003adc:	2206      	movs	r2, #6
 8003ade:	482c      	ldr	r0, [pc, #176]	; (8003b90 <_vfiprintf_r+0x250>)
 8003ae0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ae4:	f000 fa9c 	bl	8004020 <memchr>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	d03f      	beq.n	8003b6c <_vfiprintf_r+0x22c>
 8003aec:	4b29      	ldr	r3, [pc, #164]	; (8003b94 <_vfiprintf_r+0x254>)
 8003aee:	bb1b      	cbnz	r3, 8003b38 <_vfiprintf_r+0x1f8>
 8003af0:	9b03      	ldr	r3, [sp, #12]
 8003af2:	3307      	adds	r3, #7
 8003af4:	f023 0307 	bic.w	r3, r3, #7
 8003af8:	3308      	adds	r3, #8
 8003afa:	9303      	str	r3, [sp, #12]
 8003afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003afe:	443b      	add	r3, r7
 8003b00:	9309      	str	r3, [sp, #36]	; 0x24
 8003b02:	e767      	b.n	80039d4 <_vfiprintf_r+0x94>
 8003b04:	460c      	mov	r4, r1
 8003b06:	2001      	movs	r0, #1
 8003b08:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b0c:	e7a5      	b.n	8003a5a <_vfiprintf_r+0x11a>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f04f 0c0a 	mov.w	ip, #10
 8003b14:	4619      	mov	r1, r3
 8003b16:	3401      	adds	r4, #1
 8003b18:	9305      	str	r3, [sp, #20]
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b20:	3a30      	subs	r2, #48	; 0x30
 8003b22:	2a09      	cmp	r2, #9
 8003b24:	d903      	bls.n	8003b2e <_vfiprintf_r+0x1ee>
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0c5      	beq.n	8003ab6 <_vfiprintf_r+0x176>
 8003b2a:	9105      	str	r1, [sp, #20]
 8003b2c:	e7c3      	b.n	8003ab6 <_vfiprintf_r+0x176>
 8003b2e:	4604      	mov	r4, r0
 8003b30:	2301      	movs	r3, #1
 8003b32:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b36:	e7f0      	b.n	8003b1a <_vfiprintf_r+0x1da>
 8003b38:	ab03      	add	r3, sp, #12
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	462a      	mov	r2, r5
 8003b3e:	4630      	mov	r0, r6
 8003b40:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <_vfiprintf_r+0x258>)
 8003b42:	a904      	add	r1, sp, #16
 8003b44:	f3af 8000 	nop.w
 8003b48:	4607      	mov	r7, r0
 8003b4a:	1c78      	adds	r0, r7, #1
 8003b4c:	d1d6      	bne.n	8003afc <_vfiprintf_r+0x1bc>
 8003b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b50:	07d9      	lsls	r1, r3, #31
 8003b52:	d405      	bmi.n	8003b60 <_vfiprintf_r+0x220>
 8003b54:	89ab      	ldrh	r3, [r5, #12]
 8003b56:	059a      	lsls	r2, r3, #22
 8003b58:	d402      	bmi.n	8003b60 <_vfiprintf_r+0x220>
 8003b5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b5c:	f7ff fdbd 	bl	80036da <__retarget_lock_release_recursive>
 8003b60:	89ab      	ldrh	r3, [r5, #12]
 8003b62:	065b      	lsls	r3, r3, #25
 8003b64:	f53f af12 	bmi.w	800398c <_vfiprintf_r+0x4c>
 8003b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b6a:	e711      	b.n	8003990 <_vfiprintf_r+0x50>
 8003b6c:	ab03      	add	r3, sp, #12
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	462a      	mov	r2, r5
 8003b72:	4630      	mov	r0, r6
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <_vfiprintf_r+0x258>)
 8003b76:	a904      	add	r1, sp, #16
 8003b78:	f000 f882 	bl	8003c80 <_printf_i>
 8003b7c:	e7e4      	b.n	8003b48 <_vfiprintf_r+0x208>
 8003b7e:	bf00      	nop
 8003b80:	08004198 	.word	0x08004198
 8003b84:	080041b8 	.word	0x080041b8
 8003b88:	08004178 	.word	0x08004178
 8003b8c:	080041d8 	.word	0x080041d8
 8003b90:	080041e2 	.word	0x080041e2
 8003b94:	00000000 	.word	0x00000000
 8003b98:	0800391b 	.word	0x0800391b
 8003b9c:	080041de 	.word	0x080041de

08003ba0 <_printf_common>:
 8003ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba4:	4616      	mov	r6, r2
 8003ba6:	4699      	mov	r9, r3
 8003ba8:	688a      	ldr	r2, [r1, #8]
 8003baa:	690b      	ldr	r3, [r1, #16]
 8003bac:	4607      	mov	r7, r0
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	bfb8      	it	lt
 8003bb2:	4613      	movlt	r3, r2
 8003bb4:	6033      	str	r3, [r6, #0]
 8003bb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bba:	460c      	mov	r4, r1
 8003bbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bc0:	b10a      	cbz	r2, 8003bc6 <_printf_common+0x26>
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	6033      	str	r3, [r6, #0]
 8003bc6:	6823      	ldr	r3, [r4, #0]
 8003bc8:	0699      	lsls	r1, r3, #26
 8003bca:	bf42      	ittt	mi
 8003bcc:	6833      	ldrmi	r3, [r6, #0]
 8003bce:	3302      	addmi	r3, #2
 8003bd0:	6033      	strmi	r3, [r6, #0]
 8003bd2:	6825      	ldr	r5, [r4, #0]
 8003bd4:	f015 0506 	ands.w	r5, r5, #6
 8003bd8:	d106      	bne.n	8003be8 <_printf_common+0x48>
 8003bda:	f104 0a19 	add.w	sl, r4, #25
 8003bde:	68e3      	ldr	r3, [r4, #12]
 8003be0:	6832      	ldr	r2, [r6, #0]
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	42ab      	cmp	r3, r5
 8003be6:	dc28      	bgt.n	8003c3a <_printf_common+0x9a>
 8003be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003bec:	1e13      	subs	r3, r2, #0
 8003bee:	6822      	ldr	r2, [r4, #0]
 8003bf0:	bf18      	it	ne
 8003bf2:	2301      	movne	r3, #1
 8003bf4:	0692      	lsls	r2, r2, #26
 8003bf6:	d42d      	bmi.n	8003c54 <_printf_common+0xb4>
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	4638      	mov	r0, r7
 8003bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c00:	47c0      	blx	r8
 8003c02:	3001      	adds	r0, #1
 8003c04:	d020      	beq.n	8003c48 <_printf_common+0xa8>
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	68e5      	ldr	r5, [r4, #12]
 8003c0a:	f003 0306 	and.w	r3, r3, #6
 8003c0e:	2b04      	cmp	r3, #4
 8003c10:	bf18      	it	ne
 8003c12:	2500      	movne	r5, #0
 8003c14:	6832      	ldr	r2, [r6, #0]
 8003c16:	f04f 0600 	mov.w	r6, #0
 8003c1a:	68a3      	ldr	r3, [r4, #8]
 8003c1c:	bf08      	it	eq
 8003c1e:	1aad      	subeq	r5, r5, r2
 8003c20:	6922      	ldr	r2, [r4, #16]
 8003c22:	bf08      	it	eq
 8003c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	bfc4      	itt	gt
 8003c2c:	1a9b      	subgt	r3, r3, r2
 8003c2e:	18ed      	addgt	r5, r5, r3
 8003c30:	341a      	adds	r4, #26
 8003c32:	42b5      	cmp	r5, r6
 8003c34:	d11a      	bne.n	8003c6c <_printf_common+0xcc>
 8003c36:	2000      	movs	r0, #0
 8003c38:	e008      	b.n	8003c4c <_printf_common+0xac>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	4652      	mov	r2, sl
 8003c3e:	4649      	mov	r1, r9
 8003c40:	4638      	mov	r0, r7
 8003c42:	47c0      	blx	r8
 8003c44:	3001      	adds	r0, #1
 8003c46:	d103      	bne.n	8003c50 <_printf_common+0xb0>
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c50:	3501      	adds	r5, #1
 8003c52:	e7c4      	b.n	8003bde <_printf_common+0x3e>
 8003c54:	2030      	movs	r0, #48	; 0x30
 8003c56:	18e1      	adds	r1, r4, r3
 8003c58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c62:	4422      	add	r2, r4
 8003c64:	3302      	adds	r3, #2
 8003c66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c6a:	e7c5      	b.n	8003bf8 <_printf_common+0x58>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	4622      	mov	r2, r4
 8003c70:	4649      	mov	r1, r9
 8003c72:	4638      	mov	r0, r7
 8003c74:	47c0      	blx	r8
 8003c76:	3001      	adds	r0, #1
 8003c78:	d0e6      	beq.n	8003c48 <_printf_common+0xa8>
 8003c7a:	3601      	adds	r6, #1
 8003c7c:	e7d9      	b.n	8003c32 <_printf_common+0x92>
	...

08003c80 <_printf_i>:
 8003c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c84:	460c      	mov	r4, r1
 8003c86:	7e27      	ldrb	r7, [r4, #24]
 8003c88:	4691      	mov	r9, r2
 8003c8a:	2f78      	cmp	r7, #120	; 0x78
 8003c8c:	4680      	mov	r8, r0
 8003c8e:	469a      	mov	sl, r3
 8003c90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c96:	d807      	bhi.n	8003ca8 <_printf_i+0x28>
 8003c98:	2f62      	cmp	r7, #98	; 0x62
 8003c9a:	d80a      	bhi.n	8003cb2 <_printf_i+0x32>
 8003c9c:	2f00      	cmp	r7, #0
 8003c9e:	f000 80d9 	beq.w	8003e54 <_printf_i+0x1d4>
 8003ca2:	2f58      	cmp	r7, #88	; 0x58
 8003ca4:	f000 80a4 	beq.w	8003df0 <_printf_i+0x170>
 8003ca8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cb0:	e03a      	b.n	8003d28 <_printf_i+0xa8>
 8003cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cb6:	2b15      	cmp	r3, #21
 8003cb8:	d8f6      	bhi.n	8003ca8 <_printf_i+0x28>
 8003cba:	a001      	add	r0, pc, #4	; (adr r0, 8003cc0 <_printf_i+0x40>)
 8003cbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003cc0:	08003d19 	.word	0x08003d19
 8003cc4:	08003d2d 	.word	0x08003d2d
 8003cc8:	08003ca9 	.word	0x08003ca9
 8003ccc:	08003ca9 	.word	0x08003ca9
 8003cd0:	08003ca9 	.word	0x08003ca9
 8003cd4:	08003ca9 	.word	0x08003ca9
 8003cd8:	08003d2d 	.word	0x08003d2d
 8003cdc:	08003ca9 	.word	0x08003ca9
 8003ce0:	08003ca9 	.word	0x08003ca9
 8003ce4:	08003ca9 	.word	0x08003ca9
 8003ce8:	08003ca9 	.word	0x08003ca9
 8003cec:	08003e3b 	.word	0x08003e3b
 8003cf0:	08003d5d 	.word	0x08003d5d
 8003cf4:	08003e1d 	.word	0x08003e1d
 8003cf8:	08003ca9 	.word	0x08003ca9
 8003cfc:	08003ca9 	.word	0x08003ca9
 8003d00:	08003e5d 	.word	0x08003e5d
 8003d04:	08003ca9 	.word	0x08003ca9
 8003d08:	08003d5d 	.word	0x08003d5d
 8003d0c:	08003ca9 	.word	0x08003ca9
 8003d10:	08003ca9 	.word	0x08003ca9
 8003d14:	08003e25 	.word	0x08003e25
 8003d18:	680b      	ldr	r3, [r1, #0]
 8003d1a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d1e:	1d1a      	adds	r2, r3, #4
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	600a      	str	r2, [r1, #0]
 8003d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e0a4      	b.n	8003e76 <_printf_i+0x1f6>
 8003d2c:	6825      	ldr	r5, [r4, #0]
 8003d2e:	6808      	ldr	r0, [r1, #0]
 8003d30:	062e      	lsls	r6, r5, #24
 8003d32:	f100 0304 	add.w	r3, r0, #4
 8003d36:	d50a      	bpl.n	8003d4e <_printf_i+0xce>
 8003d38:	6805      	ldr	r5, [r0, #0]
 8003d3a:	600b      	str	r3, [r1, #0]
 8003d3c:	2d00      	cmp	r5, #0
 8003d3e:	da03      	bge.n	8003d48 <_printf_i+0xc8>
 8003d40:	232d      	movs	r3, #45	; 0x2d
 8003d42:	426d      	negs	r5, r5
 8003d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d48:	230a      	movs	r3, #10
 8003d4a:	485e      	ldr	r0, [pc, #376]	; (8003ec4 <_printf_i+0x244>)
 8003d4c:	e019      	b.n	8003d82 <_printf_i+0x102>
 8003d4e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003d52:	6805      	ldr	r5, [r0, #0]
 8003d54:	600b      	str	r3, [r1, #0]
 8003d56:	bf18      	it	ne
 8003d58:	b22d      	sxthne	r5, r5
 8003d5a:	e7ef      	b.n	8003d3c <_printf_i+0xbc>
 8003d5c:	680b      	ldr	r3, [r1, #0]
 8003d5e:	6825      	ldr	r5, [r4, #0]
 8003d60:	1d18      	adds	r0, r3, #4
 8003d62:	6008      	str	r0, [r1, #0]
 8003d64:	0628      	lsls	r0, r5, #24
 8003d66:	d501      	bpl.n	8003d6c <_printf_i+0xec>
 8003d68:	681d      	ldr	r5, [r3, #0]
 8003d6a:	e002      	b.n	8003d72 <_printf_i+0xf2>
 8003d6c:	0669      	lsls	r1, r5, #25
 8003d6e:	d5fb      	bpl.n	8003d68 <_printf_i+0xe8>
 8003d70:	881d      	ldrh	r5, [r3, #0]
 8003d72:	2f6f      	cmp	r7, #111	; 0x6f
 8003d74:	bf0c      	ite	eq
 8003d76:	2308      	moveq	r3, #8
 8003d78:	230a      	movne	r3, #10
 8003d7a:	4852      	ldr	r0, [pc, #328]	; (8003ec4 <_printf_i+0x244>)
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d82:	6866      	ldr	r6, [r4, #4]
 8003d84:	2e00      	cmp	r6, #0
 8003d86:	bfa8      	it	ge
 8003d88:	6821      	ldrge	r1, [r4, #0]
 8003d8a:	60a6      	str	r6, [r4, #8]
 8003d8c:	bfa4      	itt	ge
 8003d8e:	f021 0104 	bicge.w	r1, r1, #4
 8003d92:	6021      	strge	r1, [r4, #0]
 8003d94:	b90d      	cbnz	r5, 8003d9a <_printf_i+0x11a>
 8003d96:	2e00      	cmp	r6, #0
 8003d98:	d04d      	beq.n	8003e36 <_printf_i+0x1b6>
 8003d9a:	4616      	mov	r6, r2
 8003d9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003da0:	fb03 5711 	mls	r7, r3, r1, r5
 8003da4:	5dc7      	ldrb	r7, [r0, r7]
 8003da6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003daa:	462f      	mov	r7, r5
 8003dac:	42bb      	cmp	r3, r7
 8003dae:	460d      	mov	r5, r1
 8003db0:	d9f4      	bls.n	8003d9c <_printf_i+0x11c>
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d10b      	bne.n	8003dce <_printf_i+0x14e>
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	07df      	lsls	r7, r3, #31
 8003dba:	d508      	bpl.n	8003dce <_printf_i+0x14e>
 8003dbc:	6923      	ldr	r3, [r4, #16]
 8003dbe:	6861      	ldr	r1, [r4, #4]
 8003dc0:	4299      	cmp	r1, r3
 8003dc2:	bfde      	ittt	le
 8003dc4:	2330      	movle	r3, #48	; 0x30
 8003dc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003dce:	1b92      	subs	r2, r2, r6
 8003dd0:	6122      	str	r2, [r4, #16]
 8003dd2:	464b      	mov	r3, r9
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	4640      	mov	r0, r8
 8003dd8:	f8cd a000 	str.w	sl, [sp]
 8003ddc:	aa03      	add	r2, sp, #12
 8003dde:	f7ff fedf 	bl	8003ba0 <_printf_common>
 8003de2:	3001      	adds	r0, #1
 8003de4:	d14c      	bne.n	8003e80 <_printf_i+0x200>
 8003de6:	f04f 30ff 	mov.w	r0, #4294967295
 8003dea:	b004      	add	sp, #16
 8003dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df0:	4834      	ldr	r0, [pc, #208]	; (8003ec4 <_printf_i+0x244>)
 8003df2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003df6:	680e      	ldr	r6, [r1, #0]
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	f856 5b04 	ldr.w	r5, [r6], #4
 8003dfe:	061f      	lsls	r7, r3, #24
 8003e00:	600e      	str	r6, [r1, #0]
 8003e02:	d514      	bpl.n	8003e2e <_printf_i+0x1ae>
 8003e04:	07d9      	lsls	r1, r3, #31
 8003e06:	bf44      	itt	mi
 8003e08:	f043 0320 	orrmi.w	r3, r3, #32
 8003e0c:	6023      	strmi	r3, [r4, #0]
 8003e0e:	b91d      	cbnz	r5, 8003e18 <_printf_i+0x198>
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	f023 0320 	bic.w	r3, r3, #32
 8003e16:	6023      	str	r3, [r4, #0]
 8003e18:	2310      	movs	r3, #16
 8003e1a:	e7af      	b.n	8003d7c <_printf_i+0xfc>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	f043 0320 	orr.w	r3, r3, #32
 8003e22:	6023      	str	r3, [r4, #0]
 8003e24:	2378      	movs	r3, #120	; 0x78
 8003e26:	4828      	ldr	r0, [pc, #160]	; (8003ec8 <_printf_i+0x248>)
 8003e28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e2c:	e7e3      	b.n	8003df6 <_printf_i+0x176>
 8003e2e:	065e      	lsls	r6, r3, #25
 8003e30:	bf48      	it	mi
 8003e32:	b2ad      	uxthmi	r5, r5
 8003e34:	e7e6      	b.n	8003e04 <_printf_i+0x184>
 8003e36:	4616      	mov	r6, r2
 8003e38:	e7bb      	b.n	8003db2 <_printf_i+0x132>
 8003e3a:	680b      	ldr	r3, [r1, #0]
 8003e3c:	6826      	ldr	r6, [r4, #0]
 8003e3e:	1d1d      	adds	r5, r3, #4
 8003e40:	6960      	ldr	r0, [r4, #20]
 8003e42:	600d      	str	r5, [r1, #0]
 8003e44:	0635      	lsls	r5, r6, #24
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	d501      	bpl.n	8003e4e <_printf_i+0x1ce>
 8003e4a:	6018      	str	r0, [r3, #0]
 8003e4c:	e002      	b.n	8003e54 <_printf_i+0x1d4>
 8003e4e:	0671      	lsls	r1, r6, #25
 8003e50:	d5fb      	bpl.n	8003e4a <_printf_i+0x1ca>
 8003e52:	8018      	strh	r0, [r3, #0]
 8003e54:	2300      	movs	r3, #0
 8003e56:	4616      	mov	r6, r2
 8003e58:	6123      	str	r3, [r4, #16]
 8003e5a:	e7ba      	b.n	8003dd2 <_printf_i+0x152>
 8003e5c:	680b      	ldr	r3, [r1, #0]
 8003e5e:	1d1a      	adds	r2, r3, #4
 8003e60:	600a      	str	r2, [r1, #0]
 8003e62:	681e      	ldr	r6, [r3, #0]
 8003e64:	2100      	movs	r1, #0
 8003e66:	4630      	mov	r0, r6
 8003e68:	6862      	ldr	r2, [r4, #4]
 8003e6a:	f000 f8d9 	bl	8004020 <memchr>
 8003e6e:	b108      	cbz	r0, 8003e74 <_printf_i+0x1f4>
 8003e70:	1b80      	subs	r0, r0, r6
 8003e72:	6060      	str	r0, [r4, #4]
 8003e74:	6863      	ldr	r3, [r4, #4]
 8003e76:	6123      	str	r3, [r4, #16]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e7e:	e7a8      	b.n	8003dd2 <_printf_i+0x152>
 8003e80:	4632      	mov	r2, r6
 8003e82:	4649      	mov	r1, r9
 8003e84:	4640      	mov	r0, r8
 8003e86:	6923      	ldr	r3, [r4, #16]
 8003e88:	47d0      	blx	sl
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d0ab      	beq.n	8003de6 <_printf_i+0x166>
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	079b      	lsls	r3, r3, #30
 8003e92:	d413      	bmi.n	8003ebc <_printf_i+0x23c>
 8003e94:	68e0      	ldr	r0, [r4, #12]
 8003e96:	9b03      	ldr	r3, [sp, #12]
 8003e98:	4298      	cmp	r0, r3
 8003e9a:	bfb8      	it	lt
 8003e9c:	4618      	movlt	r0, r3
 8003e9e:	e7a4      	b.n	8003dea <_printf_i+0x16a>
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	4632      	mov	r2, r6
 8003ea4:	4649      	mov	r1, r9
 8003ea6:	4640      	mov	r0, r8
 8003ea8:	47d0      	blx	sl
 8003eaa:	3001      	adds	r0, #1
 8003eac:	d09b      	beq.n	8003de6 <_printf_i+0x166>
 8003eae:	3501      	adds	r5, #1
 8003eb0:	68e3      	ldr	r3, [r4, #12]
 8003eb2:	9903      	ldr	r1, [sp, #12]
 8003eb4:	1a5b      	subs	r3, r3, r1
 8003eb6:	42ab      	cmp	r3, r5
 8003eb8:	dcf2      	bgt.n	8003ea0 <_printf_i+0x220>
 8003eba:	e7eb      	b.n	8003e94 <_printf_i+0x214>
 8003ebc:	2500      	movs	r5, #0
 8003ebe:	f104 0619 	add.w	r6, r4, #25
 8003ec2:	e7f5      	b.n	8003eb0 <_printf_i+0x230>
 8003ec4:	080041e9 	.word	0x080041e9
 8003ec8:	080041fa 	.word	0x080041fa

08003ecc <_sbrk_r>:
 8003ecc:	b538      	push	{r3, r4, r5, lr}
 8003ece:	2300      	movs	r3, #0
 8003ed0:	4d05      	ldr	r5, [pc, #20]	; (8003ee8 <_sbrk_r+0x1c>)
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	4608      	mov	r0, r1
 8003ed6:	602b      	str	r3, [r5, #0]
 8003ed8:	f7fc fe1a 	bl	8000b10 <_sbrk>
 8003edc:	1c43      	adds	r3, r0, #1
 8003ede:	d102      	bne.n	8003ee6 <_sbrk_r+0x1a>
 8003ee0:	682b      	ldr	r3, [r5, #0]
 8003ee2:	b103      	cbz	r3, 8003ee6 <_sbrk_r+0x1a>
 8003ee4:	6023      	str	r3, [r4, #0]
 8003ee6:	bd38      	pop	{r3, r4, r5, pc}
 8003ee8:	200003b0 	.word	0x200003b0

08003eec <__sread>:
 8003eec:	b510      	push	{r4, lr}
 8003eee:	460c      	mov	r4, r1
 8003ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef4:	f000 f8ae 	bl	8004054 <_read_r>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	bfab      	itete	ge
 8003efc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003efe:	89a3      	ldrhlt	r3, [r4, #12]
 8003f00:	181b      	addge	r3, r3, r0
 8003f02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f06:	bfac      	ite	ge
 8003f08:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f0a:	81a3      	strhlt	r3, [r4, #12]
 8003f0c:	bd10      	pop	{r4, pc}

08003f0e <__swrite>:
 8003f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f12:	461f      	mov	r7, r3
 8003f14:	898b      	ldrh	r3, [r1, #12]
 8003f16:	4605      	mov	r5, r0
 8003f18:	05db      	lsls	r3, r3, #23
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	4616      	mov	r6, r2
 8003f1e:	d505      	bpl.n	8003f2c <__swrite+0x1e>
 8003f20:	2302      	movs	r3, #2
 8003f22:	2200      	movs	r2, #0
 8003f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f28:	f000 f868 	bl	8003ffc <_lseek_r>
 8003f2c:	89a3      	ldrh	r3, [r4, #12]
 8003f2e:	4632      	mov	r2, r6
 8003f30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f34:	81a3      	strh	r3, [r4, #12]
 8003f36:	4628      	mov	r0, r5
 8003f38:	463b      	mov	r3, r7
 8003f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f42:	f000 b817 	b.w	8003f74 <_write_r>

08003f46 <__sseek>:
 8003f46:	b510      	push	{r4, lr}
 8003f48:	460c      	mov	r4, r1
 8003f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4e:	f000 f855 	bl	8003ffc <_lseek_r>
 8003f52:	1c43      	adds	r3, r0, #1
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	bf15      	itete	ne
 8003f58:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f62:	81a3      	strheq	r3, [r4, #12]
 8003f64:	bf18      	it	ne
 8003f66:	81a3      	strhne	r3, [r4, #12]
 8003f68:	bd10      	pop	{r4, pc}

08003f6a <__sclose>:
 8003f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f6e:	f000 b813 	b.w	8003f98 <_close_r>
	...

08003f74 <_write_r>:
 8003f74:	b538      	push	{r3, r4, r5, lr}
 8003f76:	4604      	mov	r4, r0
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	4d05      	ldr	r5, [pc, #20]	; (8003f94 <_write_r+0x20>)
 8003f80:	602a      	str	r2, [r5, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f7fc fd77 	bl	8000a76 <_write>
 8003f88:	1c43      	adds	r3, r0, #1
 8003f8a:	d102      	bne.n	8003f92 <_write_r+0x1e>
 8003f8c:	682b      	ldr	r3, [r5, #0]
 8003f8e:	b103      	cbz	r3, 8003f92 <_write_r+0x1e>
 8003f90:	6023      	str	r3, [r4, #0]
 8003f92:	bd38      	pop	{r3, r4, r5, pc}
 8003f94:	200003b0 	.word	0x200003b0

08003f98 <_close_r>:
 8003f98:	b538      	push	{r3, r4, r5, lr}
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	4d05      	ldr	r5, [pc, #20]	; (8003fb4 <_close_r+0x1c>)
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	4608      	mov	r0, r1
 8003fa2:	602b      	str	r3, [r5, #0]
 8003fa4:	f7fc fd83 	bl	8000aae <_close>
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	d102      	bne.n	8003fb2 <_close_r+0x1a>
 8003fac:	682b      	ldr	r3, [r5, #0]
 8003fae:	b103      	cbz	r3, 8003fb2 <_close_r+0x1a>
 8003fb0:	6023      	str	r3, [r4, #0]
 8003fb2:	bd38      	pop	{r3, r4, r5, pc}
 8003fb4:	200003b0 	.word	0x200003b0

08003fb8 <_fstat_r>:
 8003fb8:	b538      	push	{r3, r4, r5, lr}
 8003fba:	2300      	movs	r3, #0
 8003fbc:	4d06      	ldr	r5, [pc, #24]	; (8003fd8 <_fstat_r+0x20>)
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	4608      	mov	r0, r1
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	602b      	str	r3, [r5, #0]
 8003fc6:	f7fc fd7d 	bl	8000ac4 <_fstat>
 8003fca:	1c43      	adds	r3, r0, #1
 8003fcc:	d102      	bne.n	8003fd4 <_fstat_r+0x1c>
 8003fce:	682b      	ldr	r3, [r5, #0]
 8003fd0:	b103      	cbz	r3, 8003fd4 <_fstat_r+0x1c>
 8003fd2:	6023      	str	r3, [r4, #0]
 8003fd4:	bd38      	pop	{r3, r4, r5, pc}
 8003fd6:	bf00      	nop
 8003fd8:	200003b0 	.word	0x200003b0

08003fdc <_isatty_r>:
 8003fdc:	b538      	push	{r3, r4, r5, lr}
 8003fde:	2300      	movs	r3, #0
 8003fe0:	4d05      	ldr	r5, [pc, #20]	; (8003ff8 <_isatty_r+0x1c>)
 8003fe2:	4604      	mov	r4, r0
 8003fe4:	4608      	mov	r0, r1
 8003fe6:	602b      	str	r3, [r5, #0]
 8003fe8:	f7fc fd7b 	bl	8000ae2 <_isatty>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	d102      	bne.n	8003ff6 <_isatty_r+0x1a>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	b103      	cbz	r3, 8003ff6 <_isatty_r+0x1a>
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	bd38      	pop	{r3, r4, r5, pc}
 8003ff8:	200003b0 	.word	0x200003b0

08003ffc <_lseek_r>:
 8003ffc:	b538      	push	{r3, r4, r5, lr}
 8003ffe:	4604      	mov	r4, r0
 8004000:	4608      	mov	r0, r1
 8004002:	4611      	mov	r1, r2
 8004004:	2200      	movs	r2, #0
 8004006:	4d05      	ldr	r5, [pc, #20]	; (800401c <_lseek_r+0x20>)
 8004008:	602a      	str	r2, [r5, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	f7fc fd73 	bl	8000af6 <_lseek>
 8004010:	1c43      	adds	r3, r0, #1
 8004012:	d102      	bne.n	800401a <_lseek_r+0x1e>
 8004014:	682b      	ldr	r3, [r5, #0]
 8004016:	b103      	cbz	r3, 800401a <_lseek_r+0x1e>
 8004018:	6023      	str	r3, [r4, #0]
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	200003b0 	.word	0x200003b0

08004020 <memchr>:
 8004020:	4603      	mov	r3, r0
 8004022:	b510      	push	{r4, lr}
 8004024:	b2c9      	uxtb	r1, r1
 8004026:	4402      	add	r2, r0
 8004028:	4293      	cmp	r3, r2
 800402a:	4618      	mov	r0, r3
 800402c:	d101      	bne.n	8004032 <memchr+0x12>
 800402e:	2000      	movs	r0, #0
 8004030:	e003      	b.n	800403a <memchr+0x1a>
 8004032:	7804      	ldrb	r4, [r0, #0]
 8004034:	3301      	adds	r3, #1
 8004036:	428c      	cmp	r4, r1
 8004038:	d1f6      	bne.n	8004028 <memchr+0x8>
 800403a:	bd10      	pop	{r4, pc}

0800403c <__malloc_lock>:
 800403c:	4801      	ldr	r0, [pc, #4]	; (8004044 <__malloc_lock+0x8>)
 800403e:	f7ff bb4b 	b.w	80036d8 <__retarget_lock_acquire_recursive>
 8004042:	bf00      	nop
 8004044:	200003a8 	.word	0x200003a8

08004048 <__malloc_unlock>:
 8004048:	4801      	ldr	r0, [pc, #4]	; (8004050 <__malloc_unlock+0x8>)
 800404a:	f7ff bb46 	b.w	80036da <__retarget_lock_release_recursive>
 800404e:	bf00      	nop
 8004050:	200003a8 	.word	0x200003a8

08004054 <_read_r>:
 8004054:	b538      	push	{r3, r4, r5, lr}
 8004056:	4604      	mov	r4, r0
 8004058:	4608      	mov	r0, r1
 800405a:	4611      	mov	r1, r2
 800405c:	2200      	movs	r2, #0
 800405e:	4d05      	ldr	r5, [pc, #20]	; (8004074 <_read_r+0x20>)
 8004060:	602a      	str	r2, [r5, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	f7fc fcea 	bl	8000a3c <_read>
 8004068:	1c43      	adds	r3, r0, #1
 800406a:	d102      	bne.n	8004072 <_read_r+0x1e>
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	b103      	cbz	r3, 8004072 <_read_r+0x1e>
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	bd38      	pop	{r3, r4, r5, pc}
 8004074:	200003b0 	.word	0x200003b0

08004078 <_init>:
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	bf00      	nop
 800407c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800407e:	bc08      	pop	{r3}
 8004080:	469e      	mov	lr, r3
 8004082:	4770      	bx	lr

08004084 <_fini>:
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	bf00      	nop
 8004088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408a:	bc08      	pop	{r3}
 800408c:	469e      	mov	lr, r3
 800408e:	4770      	bx	lr
